- en: User Profile and Access Management
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In the last chapter, we saw how we can use the Firebase with the react-redux
    application. We also explored Redux in detail and saw how and when we need to
    use Redux in our React app, and Firebase Realtime Database will give us the Realtime seat
    booking status in our application. In this chapter, we will go through Firebase
    Admin SDK, which provides a user management API to read and write Realtime Database
    data with full admin privileges. So we will create an admin page for our application
    where we have the ability to perform the actions such as the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Creating new users
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: User search engine where we can search the users by different criteria
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: List of all the users
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Accessing the user metadata, which includes the account creation date and last
    sign-in date for the particular user
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Deleting the users
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Updating the user information without having to sign in as the user
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Verifying emails
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Changing a user's email without sending an email notification to revoke these
    changes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a new user with a phone number and changing the user's phone number
    without sending SMS verification
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: First, we need to do the setup of Firebase Admin SDK in Node.js environment
    to perform the preceding actions as an admin.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up Firebase Admin SDK
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: For using Firebase Admin SDK, we'll need a Firebase project where we have service
    account to communicate with the Firebase services and a configuration file that
    includes the service account's credentials.
  prefs: []
  type: TYPE_NORMAL
- en: 'To configure the Firebase Admin SDK, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Log in to [Firebase Console,](https://console.firebase.google.com) select the
    `<project_name>` project, and click on the setting icon in Project Overview:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](Images/6dbddc16-0b9f-4c88-b596-9ab9097fd3b6.png)Overview tab'
  prefs: []
  type: TYPE_NORMAL
- en: Go to the Service Accounts tab inside Project Settings.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Click on the GENERATE PRIVATE KEY button at the bottom of Firebase admin section;
    it will generate the JSON file that contains the service account credentials:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](Images/a9b3f3ce-9a6c-4db4-8e6d-3fd5d526047d.png)This JSON file contains
    very sensitive information about your service account and private encryption key.
    So never share and store it in a public repository; keep it confidential. If we
    lose this file because of any reason then, we can generate it again, and we''ll
    no longer access Firebase Admin SDK with the old file.'
  prefs: []
  type: TYPE_NORMAL
- en: Firebase CLI
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Firebase provides a command-line interface, which provides a variety of tools
    to create, manage, view, and deploy Firebase projects. Using Firebase CLI, we
    can easily deploy and host our application on production grade static hosting,
    and it is automatically served by HTTPS and backed by global CDN in one single
    command.
  prefs: []
  type: TYPE_NORMAL
- en: Installation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Before the installation, ensure that we have installed Node.js 4.0+ on our machine.
    If not installed, then download the latest version of Node.js 8 "LTS" from [https://nodejs.org](https://nodejs.org) Once
    we're done with the installation, we can download the Firebase CLI from `npm` (node
    package manager).
  prefs: []
  type: TYPE_NORMAL
- en: 'Run this command to install Firebase CLI globally on your system:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'To verify the installation, run the following command; it prints the Firebase
    CLI version if it''s installed properly on your system:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Firebase Admin Integration
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now that we''ve successfully installed Firebase CLI, let''s copy the existing
    application code from [Chapter 3](dede285d-2924-4fcf-a208-57337e4b853f.xhtml)*,
    Authentication with Firebase*, to the new directory in [Chapter 5](5697f854-7bc1-4ffb-86a2-8304d0fc73e7.xhtml)*,
    User Profile and Access Management*. Here, we''ll initialize the Firebase app
    and run the following command to log in to the Firebase console before initializing
    the app:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Once you are successfully logged in to the Firebase console, run the following
    command to initialize the project:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Once we run this command, it will prompt you to select the Firebase feature,
    project, and directory folder (relative to your project directory) that will contain
    `hosting` assets to be uploaded with the `firebase deploy` command (by default,
    it is public).
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/c1236563-8911-47e8-9e00-22b8a8ccc48a.png)'
  prefs: []
  type: TYPE_IMG
- en: We can also add features later on in our project, and it's also possible to
    associate multiple projects with the same directory.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once Firebase initialization is complete, run the following command to install
    the project dependencies and then build the project:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'To run our application locally to verify before deploying to the production,
    run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'It will start the server locally from build directory or whatever the name
    you have defined in the `firebase.json` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/e8cc4c0c-5618-44ff-972a-2b88373591d4.png)'
  prefs: []
  type: TYPE_IMG
- en: This is what our folder structure looks like after firebase initialization using
    the firebase CLI.
  prefs: []
  type: TYPE_NORMAL
- en: Using the Firebase Admin Auth API with React
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Firebase Admin SDK will give us the power to integrate your own server using
    the Firebase Auth API. With Firebase Admin SDK, we can manage our application
    users such as `View`, `Create`, `Update`, and `Delete` without requiring a user's
    credentials or manage authentication tokens without going to Firebase Admin Console.
  prefs: []
  type: TYPE_NORMAL
- en: To implement this, we will create Admin Panel in our existing React application.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here''s the list of features we''ll integrate into our Admin Panel using Firebase
    Admin SDK:'
  prefs: []
  type: TYPE_NORMAL
- en: Create and verify the custom token
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: User Level Access Roles with Custom user claims
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: View list of app users
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fetch user profile
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Create`, `Delete`, and `Update` the user information'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Resolve the Ticket status
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Initializing the Admin SDK
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As we saw, Firebase admin SDK is only supported in Node.Js, so we'll create
    a new project with npm init and install the firebase admin from the `npm` package.
  prefs: []
  type: TYPE_NORMAL
- en: 'Run the following command to install firebase admin and save it in your `package.json`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Copy the following snippet in your JS file and initialize the SDK; we have
    added the reference to the JSON file that we downloaded from the Firebase Admin
    Service account:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Now we'll just create Restful API to interact with client App to access Admin
    SDK features.
  prefs: []
  type: TYPE_NORMAL
- en: 'Run this command to start the node admin server:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: It will start the local server on a different port, such as `http://localhost:3001`.
  prefs: []
  type: TYPE_NORMAL
- en: Creating and verifying custom token
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Firebase Admin SDK provides us an ability to authenticate the user with
    an external mechanism such as LDAP server, or third-party OAuth provider, which
    Firebase doesn't support, such as Instagram or LinkedIn. We can do all these things
    with Firebase custom tokens method, which is built-in Admin SDK, or we can use
    any third-party JWT libraries.
  prefs: []
  type: TYPE_NORMAL
- en: Let's see how we can create and validate token with Admin SDK.
  prefs: []
  type: TYPE_NORMAL
- en: 'For creating a custom token, we must have a valid `uid`, which we need to pass
    in the `createCustomToken()` method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'In the preceding function, we have `uid` from client side when the user signs
    in with username and password, and if the credentials are valid, we''ll return
    custom JWT (JSON Web Token) from the server that can be used by a client device
    to authenticate with Firebase:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Once it's authenticated, this identity will be used for accessing Firebase services
    like Firebase Realtime Database and Cloud Storage.
  prefs: []
  type: TYPE_NORMAL
- en: 'If need be, we can also add some additional fields to be included in the custom
    token. Consider this code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: These additional fields will be available in the `auth/request.auth` object
    in security rules.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once the token is generated and received by the react method, we''ll authenticate
    the user to the app by passing the custom token to the Firebase `signInWithCustomToken()`
    method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: After the successful authentication, the user signed in to our application with
    account specified by the `uid`, which we included in creating the custom token
    method.
  prefs: []
  type: TYPE_NORMAL
- en: In the same way, the other Firebase authentication methods works like `signInWithEmailAndPassword()`
    and `signInWithCredential()`, and the `auth/request.auth` object will be available
    in Firebase Realtime database security rules with the user `uid`. In the preceding
    example, we specified why to generate the custom token.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'In the same way, we can also access the additional passed objects, which are
    available in `auth.token` and `request.auth.token`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: Firebase can also provide us the way to get the `uid` once the user logged into
    the app; it creates a corresponding ID token that uniquely identifies them, and
    we can send this token to the server for verifying and give them access to several
    resources of the application. For example, when we create a custom backend server
    to communicate with an app, we might need to identify the currently signed-in
    user on that server securely using HTTPS.
  prefs: []
  type: TYPE_NORMAL
- en: 'To retrieve the ID token from Firebase, ensure that the user has signed in
    to the application, and we can use the following method to retrieve the ID token
    in your react application:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: Once we have this ID token, we can send this JWT (JSON Web Token) to backend
    server Firebase Admin SDK or any third-party library to validate it.
  prefs: []
  type: TYPE_NORMAL
- en: 'For validating and decoding the ID token, Firebase Admin SDK has a built-in
    `verifyIdToken(idToken)` method; if the provided token is not expired, valid,
    and properly signed, this method returns the decoded ID token:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: Now, let's extend our existing application where the user can see only those
    tickets that they have submitted, and we'll also give the ability to the user
    to update the existing profile. We'll also create an admin panel in React and,
    based on the role, we show the admin UI to the user.
  prefs: []
  type: TYPE_NORMAL
- en: Custom claims for admin access and security rules
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As we saw earlier, Firebase Admin SDK supports defining custom attributes with
    the token. These custom attributes give the ability to define different levels
    of access, including role-based control to the app, which is enforced in an application's
    security rules.
  prefs: []
  type: TYPE_NORMAL
- en: 'We need to define the user roles in the following common cases:'
  prefs: []
  type: TYPE_NORMAL
- en: Giving a user the admin role for accessing the resources
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Assigning different groups to the user
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Giving a user multi-level access such as Paid, Regular user, Managers, Support
    Team, and such
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'We can also define the rules based on the database where we need give limited
    access, such as we have database node `helpdesk/tickets/all`, where all the data
    tickets'' data can be accessed. However, we want only the admin user to be able
    to see the all the tickets. To achieve this objective more efficiently, verify
    the email ID and add the custom user claim named admin with the following Realtime
    Database rule:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: Do not confuse Custom claims with Custom Authentication and Firebase Authentication.
    It applies to users already signed in with supported providers (Email/Password,
    Github, Google, Facebook, phone, and such), but custom authentication is used
    when we use different authentication, which is not supported by Firebase. For
    example, a user signed in with Firebase Auth's Email/Password provider can have
    access control defined using custom claims.
  prefs: []
  type: TYPE_NORMAL
- en: Adding custom claim with Admin SDK
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In the Firebase Admin SDK, we can apply custom claims using the `setCustomUserClaims()`
    method, which comes built-in with Firebase:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: Verifying custom claim with Admin SDK sending the app
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Firebase Admin SDK also provides us the method to verify the token using the
    `verifyIdToken()` method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'We can also check whether the custom claim is available or not in the user
    object:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: Now, let's see how we can implement this in our existing application.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, let''s create a restful API in the Node Admin SDK backend server:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: I have manually created one admin user with `harmeet@adminhelpdesk.com` in Firebase
    Console with help of admin SDK; we need to verify and add the custom claims for
    admin.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, open `App.JSX` and add the following code snippet; set the initial state
    of the application based on the role:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, calling the preceding API in the `componentWillMount()` component lifecycle
    method we need to get the `idToken` from user object from `firebase.auth().onAuthStateChanged((user))`
    and send it to the server for verification:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding code, we are using the `fetch` API to send the HTTP request.
    It's similar to XMLHttpRequest, but it has the new feature and is more powerful.
    Based on the response, we are setting the state of the component and registering
    the component into the router.
  prefs: []
  type: TYPE_NORMAL
- en: 'This is how our router component looks:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'Here''s the list of components that we are registering and rendering admin
    component if the user is an admin:'
  prefs: []
  type: TYPE_NORMAL
- en: '`AppUser`: To get the list of user for application, which is also responsible
    for deleting the user and searching the user by different criteria'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Tickets`: To see the list of all tickets and change the status of the ticket'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`NewUserForm`: To add the new user to the application'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We are performing the preceding operation with Node.js Firebase Admin SDK server.
  prefs: []
  type: TYPE_NORMAL
- en: Create a folder with the name of `admin` and create a file in it, called `getAllUser.jsx`.
    In that, we will create a React component, which is responsible for fetching and
    displaying the list of the user into UI; we'll also add the functionality of searching
    the user by different criteria, such as email ID, phone number, and more.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the `getAllUser.jsx` file, this is how our render method looks:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'We have also added the table in the `render` method to display the list of
    users:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'This is the table body, which is displaying the list of users with action buttons,
    and now we need to call the users API in the `componentDidMount()` method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'Similarly, we need to call other APIs to delete, View User Profile, and search:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'For searching, Firebase Admin SDK has built-in methods: `getUserByEmail()`
    and `getUserByPhoneNumber()`. We can implement these in the same way as `delete()`
    and `fetch()`, which we created in the Firebase Admin API:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'Look at the following `node.js` API Code Snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, we''ll create an API to call the preceding functions based on the user''s
    request:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, let''s take a quick look at our application in browser, see how it looks,
    and try to log in with admin user:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/a4873eb7-5463-463b-994b-c62447fe695b.png)A screenshot of our application
    when logged in with admin credentials; the purpose is to show the UI and console
    when we log in as admin'
  prefs: []
  type: TYPE_NORMAL
- en: 'That looks amazing! Just take a look at the preceding screenshot; it''s showing
    different navigation for admin, and if you can see in the console, it''s showing
    the token with custom claim object, which we added to this user to admin access:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/2cf2b4d3-ed80-4b8d-9b02-e376ed3ccc36.png)'
  prefs: []
  type: TYPE_IMG
- en: It looks great! We can see the users of the application with action button and
    search UI.
  prefs: []
  type: TYPE_NORMAL
- en: Now, consider that we delete the user from the listing and, at the same time
    that user session is active and using the application. In this scenario, we need
    to manage the session for the user and give the prompt to reauthenticate, because
    every time the user logs in, the user credentials are sent to the Firebase Authentication
    backend and exchanged for a Firebase ID token (a JWT) and refresh token.
  prefs: []
  type: TYPE_NORMAL
- en: 'These are the common scenarios where we need to manage the session of the user:'
  prefs: []
  type: TYPE_NORMAL
- en: User is deleted
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: User is disabled
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Email address and password changed
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Firebase Admin SDK also gives the ability to revoke the specific user session
    using the `revokeRefreshToken()` method. It revokes active refresh tokens of a
    given user. If we reset the password, Firebase Authentication backend automatically
    revokes the user token.
  prefs: []
  type: TYPE_NORMAL
- en: 'Refer to the following code snippet of Firebase Cloud Function to revoke the
    user based on a specific `uid`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: As we know, Firebase ID tokens are stateless JWT, which can only be verified
    by sending the request to Firebase Authentication backend server to check whether
    the token's status is revoked or not. For this reason, performing this check on
    your server is very costly and adds the extra effort, requiring an extra network
    request load. We can avoid this network request by setting up Firebase Rules that
    check for revocation, rather than sending the request to the Firebase Admin SDK.
  prefs: []
  type: TYPE_NORMAL
- en: 'This is the normal way to declare the rules with no client access to write
    to store revocation time per user:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: 'However, if we want to allow only unrevoked and authenticated users to access
    the protected data, we must have the following rule configured:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: Any time a user's refresh on browser tokens are revoked, the `tokensValidAfterTime`
    UTC timestamp is saved in the database node.
  prefs: []
  type: TYPE_NORMAL
- en: When a user's ID token is to be verified, the additional check boolean flag
    has to be passed to the `verifyIdToken()` method. If the user's token is revoked,
    the user should be signed out from the app or asked to reauthenticate using reauthentication
    APIs provided by the Firebase Authentication client SDKs.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, we created one method above `setCustomClaims` in that method;
    just add the following code inside the `catch` method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: Also, if the token is revoked, send the notification to the client app to reauthenticate.
  prefs: []
  type: TYPE_NORMAL
- en: 'Consider this example for email/password Firebase authentication providers:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, let''s click on the All Tickets link to see the list of tickets submitted
    by all the users:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/ce3522d9-11bf-4664-b1c6-938d6382eda0.png)'
  prefs: []
  type: TYPE_IMG
- en: As an admin user, we can change the status of the ticket that will get updated
    in Firebase Realtime Database. Now if you click on Create New User, it will display
    the form to add user information.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s create one new component and add the following code to the render method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: 'On `handleSubmitEvent(e)`, we need to call the `createNewUser()` Firebase admin
    SDK method, passing the form data into it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: 'Start the server again and open the application in your browser. Let''s try
    to create the new user in our application with admin credentials:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/2297a1c2-7209-403c-98a4-4c4e70cafc82.png)Create New User component;
    the purpose of the image is to show the alert message when we fill the form and
    submit to the Firebase to create a new user'
  prefs: []
  type: TYPE_NORMAL
- en: That looks awesome; we have successfully created the new user in our application
    and returned the automatic generated `uid` by Firebase for a new user.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, let''s move on further and log in with a normal user:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/4291694b-264e-4053-bb7a-089264cf20f7.png)'
  prefs: []
  type: TYPE_IMG
- en: If you take a look at the preceding screenshot, once we logged into the app
    using any Firebase Auth provider, on the dashboard, it shows all the tickets of
    the users, but it should only display the ones associated with this email ID.
    For this, we need to change the data structure and Firebase node ref.
  prefs: []
  type: TYPE_NORMAL
- en: This is the most important part of the application where we need to plan how
    data will be saved and retrieved to make the process as easy as possible.
  prefs: []
  type: TYPE_NORMAL
- en: How data is structured in a JSON tree
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In Firebase Realtime Database, all data is stored as JSON objects, which is
    a cloud-hosted JSON tree. When we add data to the database, it becomes a node
    in the existing JSON structure with an associated key, which is autogenerated
    by Firebase. We can also provide our own custom keys, such as user IDs or any
    semantic names, or they can be provided using the `push()` method.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, in our Helpdesk Application, we are storing the tickets at a path,
    such as `/helpdesk/tickets`; now we''ll replace this with `/helpdesk/tickets/$uid/$ticketKey`.
    Take a look at the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: 'This is how data structure looks for creating and retrieving the tickets from
    the database:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/a27fade9-e4cf-496d-a8f7-da4de1b74766.png)'
  prefs: []
  type: TYPE_IMG
- en: In the preceding image, the highlighted node is `$uid`, which belongs to the
    user who has submitted the ticket.
  prefs: []
  type: TYPE_NORMAL
- en: 'This is how our full code looks:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: 'Open the browser and submit the ticket again; now look at the ticket dashboard:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/e3732548-510b-4d4e-809f-2f9522eed0f0.png)'
  prefs: []
  type: TYPE_IMG
- en: It looks great! Now the user can only see the tickets they have submitted. In
    the next chapter, we'll see how we can apply security rules and common security
    threats in our data in the database.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This chapter explained how we can configure and initialize the Firebase Admin
    SDK to create our app backend in NodeJS. It also explained how we can manage our
    app users using User Management API of Firebase Admin without going to Firebase
    Console, such as the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '`Create`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Delete`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Update`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Remove`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Firebase Admin SDK gives us the power to create and verify the Custom JWT tokens,
    which allow the user to authenticate with any provider, even if it's not available
    in the Firebase Auth Providers list. It also gives you the power to manage the
    user's session in case of any change in user information, such as the user is
    deleted, disabled, the email address or password is changed, and more.
  prefs: []
  type: TYPE_NORMAL
- en: We also learned how we can control the access to custom claims. This helps us
    provide the ability to implement role-based access control to give users different
    levels of access (roles), in Firebase apps.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will learn the database security risks and the checklist
    to prevent such threats. We will also see the security part of Firebase Realtime
    Database and the Firebase Realtime Database Rules language.
  prefs: []
  type: TYPE_NORMAL
