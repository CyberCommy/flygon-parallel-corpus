- en: Chapter 10. Creating a Native iPhone Web Application
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we look at transferring our native applications for iOS Safari
    to a native environment using the PhoneGap framework. We'll dive into setting
    up our development environment, including the setup of the Xcode IDE and use of
    the iOS Simulator. We'll build a `HelloWorld` example to demonstrate how easy
    it is to get going quickly, and then transfer our single-page application, built
    in [Chapter 7](ch07.html "Chapter 7. One-page Applications"), *One-page Applications*.
    Once we have a solid foundation on native application development, we'll enhance
    the single-page application by tying into native functionality using PhoneGap's
    Contacts API to bring in our contacts and display some of their information.
  prefs: []
  type: TYPE_NORMAL
- en: We aim to help you achieve a consistent look and feel for your native application
    using a single codebase. The goals here are to get you started on native application
    development using the programming languages you have grown to love and understand
    for the Web. With that in mind, let's start by setting up our development environment.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover:'
  prefs: []
  type: TYPE_NORMAL
- en: Xcode installation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using the iOS Simulator
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Implementing PhoneGap
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a `HelloWorld` example
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Transferring a current application, including CSS, JavaScript, HTML, and assets
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Tying into native functionality using the Contacts API in PhoneGap
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting up the development environment
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As with any workflow to creating software, our development environment is critical.
    So, let's take some time setting up the environment preferred by many engineers
    to create native applications. In this section, we'll go over the installation
    of Xcode, and an overview of the Integrated Development Environment (IDE). We'll
    continue by setting up the PhoneGap framework and lastly look at how the iOS Simulator
    plays a critical roll in testing our app. As a bonus, we'll look at configuring
    our application to fit our needs in this chapter. So let's get started.
  prefs: []
  type: TYPE_NORMAL
- en: Getting started with Xcode
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Xcode is the preferred IDE for native application development on the iOS operating
    system, as it is actively supported by Apple and specifically tailored to the
    OS X and iOS operating systems. The IDE is provided by Apple and can be used to
    create Mac OS X, iPhone, and iPad applications. While it can also be used for
    other various types of development, these three platforms are most commonly associated
    with Xcode. By default, your Mac does not come with Xcode, so we'll need to install
    it.
  prefs: []
  type: TYPE_NORMAL
- en: Installing Xcode
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Luckily for us, Xcode is extremely easy to install. We can install the IDE through
    the Mac App Store ([https://itunes.apple.com/us/app/xcode/id497799835?ls=1&mt=12](https://itunes.apple.com/us/app/xcode/id497799835?ls=1&mt=12)).
    When the installation is complete, we will have various pieces of software installed
    on our computer, including the Instruments analysis tool, iOS Simulator, and the
    latest **Mac OS X and iOS software development kit** (**SDK**).
  prefs: []
  type: TYPE_NORMAL
- en: Xcode IDE overview – the basics
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: By default, the Xcode IDE gets installed in the applications directory; launch
    it by double-clicking on the icon displayed. The icon is a hammer that is diagonally
    located over a blue technical drawing that has a pencil, brush, and ruler forming
    the letter A. When the application launches, we will see the welcome screen.
  prefs: []
  type: TYPE_NORMAL
- en: '![Xcode IDE overview – the basics](img/1024OT_10_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The welcome screen
  prefs: []
  type: TYPE_NORMAL
- en: This is the welcoming screen for Xcode, and it lists out recent projects and
    the ability to create a new project, connect to a repository, learn about Xcode,
    or check out the Apple developer portal. On your screen you will most likely not
    have the `HelloWorld` project listed in the preceding screenshot, which is what
    we will be building, and if it's your first time this should be empty.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Because this section is to get us familiar with Xcode itself, don't hesitate
    about the next few screens. The next screens are what we will be building out,
    but are only meant to help us recognize certain parts of the Xcode application
    to make it easier for you to use.
  prefs: []
  type: TYPE_NORMAL
- en: The Xcode workspace
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Now, let''s go over the user interface of Xcode in order to understand how
    we can leverage this powerful tool. First of all, as we already know, we are introduced
    to the welcome screen when we open the application. You can choose to disable
    this feature by unchecking the **Show this window when Xcode launches** checkbox
    on the welcome screen. But when we have a project that we have created open, this
    is what it looks like:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The Xcode workspace](img/1024OT_10_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The project display
  prefs: []
  type: TYPE_NORMAL
- en: 'Looks pretty simple right? Well that''s good, because this is known as the
    workspace and this is critical because Xcode aims to have all development efforts
    be located within one central window in the IDE, helping us consolidate and speed
    up our development process. But recognize the two critical aspects of this workspace:
    the Navigator Area located to the left where all of our files are located, and
    then the Editor Area where we can edit the project we are in.'
  prefs: []
  type: TYPE_NORMAL
- en: '![The Xcode workspace](img/1024OT_10_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The Navigator and Editor Areas
  prefs: []
  type: TYPE_NORMAL
- en: The preceding screenshot helps demonstrate the two most critical aspects of
    Xcode when it comes to developing an application. Keep in mind that, depending
    on the file selected, your Editor Area will change. For example, in the preceding
    screenshots we have a GUI that allows us to set properties of our project.
  prefs: []
  type: TYPE_NORMAL
- en: The Xcode toolbar
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The toolbar in Xcode has various features that we'll use constantly when developing
    native applications. For example, in the following screenshot, there are **Run**,
    **Stop**, and **Breakpoints** buttons, including a **Scheme** selector. These
    actions are extremely important when debugging your application(s). The **Run**
    button does exactly what it says, it runs your application. **Stop** on the other
    hand will stop all activities with the running application. And the **Breakpoints**
    button will display our breakpoints in the Editor Area.
  prefs: []
  type: TYPE_NORMAL
- en: '![The Xcode toolbar](img/1024OT_10_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The toolbar displaying Run, Scheme, and Breakpoints
  prefs: []
  type: TYPE_NORMAL
- en: The **Scheme** selector lets you choose which application to test and in what
    environment to test it. In our example application, `HelloWorld` will be tested
    using the iPhone 6.0 Simulator, but we have various options to choose from. Looking
    at the following screenshot, we can see that, if installed, we can test our application
    using the iPad Simulator and various versions of it, and the iPhone Simulator.
  prefs: []
  type: TYPE_NORMAL
- en: '![The Xcode toolbar](img/1024OT_10_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The toolbar Scheme selector
  prefs: []
  type: TYPE_NORMAL
- en: The toolbar also has various actions to the right of the IDE, including the
    editor views, general views, and organizer. The default editor view is a text
    editor component, allowing us to do basic editing of our source files. The middle
    editor view is the assistant editor, which we will not be covering. The last editor
    view is the version editor.
  prefs: []
  type: TYPE_NORMAL
- en: '![The Xcode toolbar](img/1024OT_10_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The toolbar project display options
  prefs: []
  type: TYPE_NORMAL
- en: The version editor is great for our use as developers, allowing us to edit files
    and see the versioning happening immediately. For example, in the following screenshot
    we can see that a comment was added, and that the original versioned file is informing
    the user of where the changes have been made, allowing us to see live edits of
    the same file.
  prefs: []
  type: TYPE_NORMAL
- en: '![The Xcode toolbar](img/1024OT_10_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The project versioning display
  prefs: []
  type: TYPE_NORMAL
- en: 'Moving on to the **View** toolbar section, we have three buttons. Each button
    reveals a certain part of the editor that is useful to us depending on the situation.
    The first button is selected by default because it shows us the Navigator Area
    to the left. The middle button reveals the debugging area as shown in the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The Xcode toolbar](img/1024OT_10_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The project debugging display
  prefs: []
  type: TYPE_NORMAL
- en: This is great because we can now debug our application as it runs and see the
    logs as the application is tested. Remember all those logs we use in our applications?
    They will show up here; they are extremely useful if we don't have a developer
    console that is very useful in our browser. The last button in the toolbar controls
    the utilities. These utilities help us control various settings of the current
    file in question; from name to source control, we can customize various details
    of our files.
  prefs: []
  type: TYPE_NORMAL
- en: '![The Xcode toolbar](img/1024OT_10_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The project file configuration display
  prefs: []
  type: TYPE_NORMAL
- en: Okay, so we know the basic features of Xcode and that there is much to explore—and
    that it is both great and beneficial to us as developers. We can continue to cover
    all the extremely useful features of Xcode, but for our benefit let's move on
    to PhoneGap, after all we are more interested in learning to build a native application.
    The tools can always be used and customized for our needs.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up PhoneGap
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Xcode is great to use in your arsenal of application development environments.
    However, PhoneGap is where all the magic happens. It's the framework that empowers
    us to create native applications that are based on the code we have already written
    with HTML, CSS, and JavaScript. So let's review how to install it, create a project,
    and briefly go over its support and license to prepare us to harness its abilities
    for our own applications.
  prefs: []
  type: TYPE_NORMAL
- en: Installing PhoneGap
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'PhoneGap is extremely easy to get started with; first let''s install it from
    PhoneGap''s website, here: [http://phonegap.com/download/](http://phonegap.com/download/).
    When the ZIP file completely finishes downloading, we''ll want to extract its
    contents. Now when you start examining the contents of the extraction, you''ll
    notice that there''s a lot going on, especially in the `lib` directory where multiple
    operating systems are listed. This is good, because PhoneGap supports multiple
    platforms, but what we want is specifically for iOS. Our focus should be on the
    following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Installing PhoneGap](img/1024OT_10_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: PhoneGap directory structure
  prefs: []
  type: TYPE_NORMAL
- en: Notice that in the iOS directory we have multiple files, all of which are critical
    to the creation of our first PhoneGap project. In the next section, we'll create
    our first PhoneGap project using this cleaned up version of the PhoneGap framework.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a PhoneGap project
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Now that we have the PhoneGap framework downloaded and simplified for our purposes,
    we want to create our first ever project using this framework. In order to do
    that, we'll need the help of our trusted c**ommand-line interface** (**CLI**).
    By default, all Mac operating systems comes with **Terminal**, but we can also
    us iTerm (free) as well. Either way, launch that application, which is located
    in `/Applications/Utilities/`.
  prefs: []
  type: TYPE_NORMAL
- en: 'When you have Terminal open, we''ll need to navigate to the directory your
    PhoneGap files are located at. This should be in our `Downloads` directory by
    default, depending on your browser settings. In this case, I would navigate to
    `/Users/acresp/Downloads` with the `cd` command, like so:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Once we''re in the directory PhoneGap was extracted to, we need to navigate
    to view the `bin` directory inside the `iOS` folder inside `phonegap`. To do this,
    we can type in the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Now we can build our PhoneGap application using the `create` shell script inside
    the `bin` folder. The documentation for this script is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: This is excellent for us because we know what we can do to create our application
    easily. But before we do that, let's make sure our application directory is created
    within our project. For the purpose of this chapter, I have created a `cordova250`
    directory that will contain our `HelloWorld` application, and may contain other
    PhoneGap projects as well.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now that we have made sure that our application directory exists, we can run
    the following command to make sure our application gets created:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: This will produce a directory called `HelloWorld` inside the `cordova250` folder
    with all the necessary files we need to get started. We have now created our first
    PhoneGap project. There's not a whole lot happening just yet, but let's continue;
    we'll soon start developing a native application. First, let's review the support
    that's out there for this framework and the license backing it up.
  prefs: []
  type: TYPE_NORMAL
- en: The PhoneGap license
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'You''re probably wondering about the PhoneGap license, especially since we
    have used many open source projects along the way to create our applications.
    PhoneGap is based on the Apache license ([http://phonegap.com/about/license/](http://phonegap.com/about/license/)).
    And what''s even better for us is that the Apache foundation has provided us with
    clear and concise information about what is allowed, forbidden, and required.
    Straight from the *FAQ* section of the *What does it mean?* section (available
    at [http://www.apache.org/foundation/license-faq.html#WhatDoesItMEAN](http://www.apache.org/foundation/license-faq.html#WhatDoesItMEAN)),
    we are given all the details we need:'
  prefs: []
  type: TYPE_NORMAL
- en: 'It **allows** you to:'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '>'
  prefs: []
  type: TYPE_NORMAL
- en: freely download and use Apache software, in whole or in part, for personal,
    company internal, or commercial purposes;
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '>'
  prefs: []
  type: TYPE_NORMAL
- en: use Apache software in packages or distributions that you create.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '>'
  prefs: []
  type: TYPE_NORMAL
- en: 'It **forbids** you to:'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '>'
  prefs: []
  type: TYPE_NORMAL
- en: redistribute any piece of Apache-originated software without proper attribution;
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '>'
  prefs: []
  type: TYPE_NORMAL
- en: use any marks owned by The Apache Software Foundation in any way that might
    state or imply that the Foundation endorses your distribution;
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '>'
  prefs: []
  type: TYPE_NORMAL
- en: use any marks owned by The Apache Software Foundation in any way that might
    state or imply that you created the Apache software in question.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '>'
  prefs: []
  type: TYPE_NORMAL
- en: 'It **requires** you to:'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '>'
  prefs: []
  type: TYPE_NORMAL
- en: include a copy of the license in any redistribution you may make that includes
    Apache software;
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '>'
  prefs: []
  type: TYPE_NORMAL
- en: provide clear attribution to The Apache Software Foundation for any distributions
    that include Apache software.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '>'
  prefs: []
  type: TYPE_NORMAL
- en: 'It **does not require** you to:'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '>'
  prefs: []
  type: TYPE_NORMAL
- en: include the source of the Apache software itself, or of any modifications you
    may have made to it, in any redistribution you may assemble that includes it;
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '>'
  prefs: []
  type: TYPE_NORMAL
- en: submit changes that you make to the software back to the Apache Software Foundation
    (though such feedback is encouraged).
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Based on these parameters, we can continue to create open source software using
    PhoneGap as long as we include a copy of the license with every redistribution,
    so long as it has clear attribution to The Apache Software Foundation. If you
    do have any other questions related to PhoneGap's license or the Apache 2.0 license,
    there is more information on the preceding link and on PhoneGap's license page
    ([http://phonegap.com/about/license/](http://phonegap.com/about/license/)).
  prefs: []
  type: TYPE_NORMAL
- en: Configuring our project
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Our project can be configured to fit our needs and concurrently, those for our
    users. This process is fairly simple and well documented at the PhoneGap API documentation
    site ([http://docs.phonegap.com/en/2.5.0/guide_project-settings_index.md.html#Project%20Settings](http://docs.phonegap.com/en/2.5.0/guide_project-settings_index.md.html#Project%20Settings)).
    Most of these settings are easily modified through the `config.xml` file located
    in our project directory `/cordovar250/HelloWorld/HelloWorld/config.xml`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is a current list of items that can be customized:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Preference | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `UIWebViewBounce` (Boolean, defaults to **true**) | This sets the property
    of a rubber-band type interaction/bounce animation. |'
  prefs: []
  type: TYPE_TB
- en: '| `TopActivityIndicator` (string, defaults to **gray**) | This sets the color
    of the spinning throbber in the status/battery bar, with valid values of **whiteLarge**,
    **white**, and **gray**. |'
  prefs: []
  type: TYPE_TB
- en: '| `EnableLocation` (Boolean, defaults to **false**) | This determines whether
    to initialize the Geolocation plugin at start-up, making your location more accurate
    at startup. |'
  prefs: []
  type: TYPE_TB
- en: '| `EnableViewportScale` (Boolean, defaults to **false**) | This enables/disables
    viewport scaling. |'
  prefs: []
  type: TYPE_TB
- en: '| `AutoHideSplashScreen` (Boolean, defaults to **true**) | This controls whether
    the splash screen is hidden through a JavaScript API. |'
  prefs: []
  type: TYPE_TB
- en: '| `FadeSplashScreen` (Boolean, defaults to **true**) | This enables the splash
    screen to fade in and out. |'
  prefs: []
  type: TYPE_TB
- en: '| `FadeSplashScreenDuration` (float, defaults to **2**) | This indicates the
    splash screen''s fade duration in seconds. |'
  prefs: []
  type: TYPE_TB
- en: '| `ShowSplashScreenSpinner` (Boolean, defaults to **true**) | This shows or
    hides the splash screen''s loading spinner. |'
  prefs: []
  type: TYPE_TB
- en: '| `MediaPlaybackRequiresUserAction` (Boolean, defaults to **false**) | This
    allows HTML5 to auto play. |'
  prefs: []
  type: TYPE_TB
- en: '| `AllowInlineMediaPlayback` (Boolean, defaults to **false**) | This controls
    inline HTML5 media playback. The `video` element in the HTML document must also
    include the `webkit-playsinline` attribute |'
  prefs: []
  type: TYPE_TB
- en: '| `BackupWebStorage` (string, defaults to **cloud**) | If set to **cloud**,
    storage data will be backed up to iCloud. If set to **local**, only local backups
    will be made. If set to **none**, no backups occur. |'
  prefs: []
  type: TYPE_TB
- en: '| `KeyboardDisplayRequiresUserAction` (Boolean, defaults to **true**) | If
    this is set to **false**, the keyboard will open when `form` elements get called
    via JavaScript''s `focus()`. |'
  prefs: []
  type: TYPE_TB
- en: '| `SuppressesIncrementalRendering` (Boolean, defaults to **false**) | This
    allows content to be received before being rendered. |'
  prefs: []
  type: TYPE_TB
- en: Transferring a web application
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: At this point, we have created a sample `HelloWorld` application using PhoneGap
    and Xcode. Now, we'll take it up a notch by reviewing transferring our single-page
    application from [Chapter 7](ch07.html "Chapter 7. One-page Applications"), *One-page
    Applications*. In this section, we'll go over transferring our assets, including
    our markup, styles, and scripts, and then learn how to debug our applications.
    Finally, we'll extend our single-page application by using native functionality
    that PhoneGap has allowed us to tap into using the code we've already written.
  prefs: []
  type: TYPE_NORMAL
- en: Transferring our assets
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Let's start by transferring our assets. This section will briefly go over how
    to transfer what we have written with a minimal level of effort. The goal here
    is to basically have the same application we have running natively. We won't be
    using PhoneGap's built-in features just yet, but we'll have an app up and running
    quickly.
  prefs: []
  type: TYPE_NORMAL
- en: Including our markup
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The first thing we want to do here is open up the Xcode project that was generated
    previously using PhoneGap. To do this, we first locate our project in Finder,
    in my case `~/Sites/HTML5-iPhone-Web-App/cordova250/HelloWorld/`. Once we've located
    our project, double-click on the `HelloWorld.xcodeproj` file; this will launch
    the project in Xcode.
  prefs: []
  type: TYPE_NORMAL
- en: Once Xcode has launched with our project, we'll see it index our files. While
    it's indexing, it won't prevent you from interacting with your project, so you'll
    be able to start editing files. So, let's go ahead and check out our `index.html`
    file located in the `www` directory.
  prefs: []
  type: TYPE_NORMAL
- en: '![Including our markup](img/1024OT_10_11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Our project's preliminary HelloWorld markup
  prefs: []
  type: TYPE_NORMAL
- en: 'As you can see, we''ve got a basic template set up for us. Let''s run this
    `HelloWorld` markup to see the results. The first item you should see is a splash
    screen with the default PhoneGap image and immediately after the device ready
    introduction. Here are screenshots displaying the results:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Including our markup](img/1024OT_10_12.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The splash screen and the device-ready screen
  prefs: []
  type: TYPE_NORMAL
- en: 'Now that we know that our application is running with the default markup and
    styles, we should be able to move pretty quickly. So, the first order of business
    is to bring in the completed markup from the single-page application screen seen
    in [Chapter 7](ch07.html "Chapter 7. One-page Applications"), *One-page Applications*.
    We won''t review the code written for that chapter here, but here is the template:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Keep in mind that we have made some modifications in order to fit this directory
    structure. For example, instead of referencing our CSS files using `../css/somefile.css`,
    we use `css/somefile.css` and the same applies for any other assets that we'll
    be importing. You'll also notice that the preceding code template doesn't include
    the templates we created from [Chapter 7](ch07.html "Chapter 7. One-page Applications"),
    *One-page Applications*; this is to keep the preceding template short and simple
    in terms of how to import assets into your own PhoneGap project.
  prefs: []
  type: TYPE_NORMAL
- en: At this point, we won't test our application because we're not done bringing
    in our assets, including styles and scripts, but we should be good for the time
    being. What we want to take away here is that importing an existing static web
    application is as simple as copy and paste, but don't let this fool you; most
    applications are not as simple and this example is just to demonstrate how easy
    it is to get going. Now let's move on to importing our styles.
  prefs: []
  type: TYPE_NORMAL
- en: Incorporating our styles
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'We now have our markup set up in our project `index.html` file. That was easy;
    this part will also be as easy. All we need to do is include our CSS files that
    are being used for this project. To make things easier, I''ve just included all
    of our previous stylesheets into the Xcode project''s CSS directory. Your project
    should now look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Incorporating our styles](img/1024OT_10_13.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Our imported stylesheets
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have imported our stylesheets into our Xcode project, we're half
    way there. At this point we need to import our scripts. Again, do not test your
    application here since it probably won't work. This last bit will get us to where
    we need to be, so let's start importing our scripts.
  prefs: []
  type: TYPE_NORMAL
- en: Inserting our scripts
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Okay, so we''ve imported our markup and stylesheets—this is great. But there''s
    one last piece, our JavaScript. This last piece is essential to making our application
    run. So, let''s start by doing the same thing we did for our styles; just import
    all your scripts into the `js` directory of the Xcode project. When you do this,
    the result will be the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Inserting our scripts](img/1024OT_10_14.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Our imported scripts
  prefs: []
  type: TYPE_NORMAL
- en: We have our scripts inside the Xcode project. But we still need to do some configuration,
    including referencing our scripts correctly inside the `index.html` file, and
    making sure our application will launch accordingly. Let's start by referencing
    our scripts correctly in our `index.html` file.
  prefs: []
  type: TYPE_NORMAL
- en: 'Remember the markup we transferred over two sections ago, with a default template
    that was showcased? We''re going to take a step back and look at that template
    again, except we''re only going to look at the bottom of the markup right before
    the `body` tag closes. This is where our applications previously included the
    JavaScript; so there''s nothing new here, we just want to make sure the files
    are being referenced correctly. Just make sure that in your `index.html` file,
    your scripts look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Note a couple of things that are going on here. First, we include the `cordova`
    library that comes with PhoneGap at the very top; this will be essential in a
    moment or two when we try to detect a `deviceready` event. Next, we reference
    all our JavaScript source files to the `js` directory in our Xcode project, not
    `../js`. Now, the last thing we need to do here is make sure our code runs when
    the device is ready, which means we need to modify how our single-page application
    starts.
  prefs: []
  type: TYPE_NORMAL
- en: 'To make sure our application starts, we need to listen to the `deviceready`
    event that is provided by the PhoneGap event ([http://docs.phonegap.com/en/2.5.0/cordova_events_events.md.html#deviceready](http://docs.phonegap.com/en/2.5.0/cordova_events_events.md.html#deviceready)).
    This event is triggered once Cordova has been fully loaded. This is essential
    because the DOM is not loaded while native code is loading, and the splash screen
    is displayed. So we can run into problems when a Cordova function is required
    before the DOM loads. So for our purpose, we''ll listen to the `deviceready` event
    and then start our application. This can be done with the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Let's examine this code line by line. First, we create a closure that executes
    immediately. Within this scope, we listen to the `deviceready` event and assign
    the `onDeviceReady` callback function. We then define the `onDeviceReady` callback
    that shows and hides our application. This method creates three variables, `parentElement`,
    `listeningElement`, and `receivedElement`. We cache the `deviceready` DOM element
    and assign it to `parentElement`, and we do the same thing for `listeningElement`
    and `receivedElement`. Next, we set the `style` attribute on the proper elements,
    showing the application and hiding the splash screen. Finally, we start our Backbone-based
    single-page application.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s place the preceding script after all our scripts in the `index.html`
    file. Now, we should be able to run our application successfully and navigate
    the dashboard, profile, and playlist views. If everything as discussed previously
    was done correctly, you should be able to use your single-page application natively,
    like so:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Inserting our scripts](img/1024OT_10_15.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Native single-page application
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Note that in the preceding screenshots, we have a **Contacts** navigation item.
    This has not been built yet and will be part of the last section of this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: At this point we have created a native application that showcases the simplicity
    of transferring a current web application using PhoneGap. Yes, we haven't used
    PhoneGap or Xcode to its fullest extent, but we now understand that getting the
    process started is pretty easy. We'll sidestep for a moment to understand debugging
    our application(s), and then ultimately use PhoneGap's API to build a native component
    into our application.
  prefs: []
  type: TYPE_NORMAL
- en: Debugging our application
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Debugging an application is critical to any workflow or process; for this reason
    we need to know what it's like debugging a native application built off web technologies.
    It's not as complex or easy as you may think. But it's still doable and at the
    current time of writing, this is one of the best ways to debug your application.
    So let's get to it.
  prefs: []
  type: TYPE_NORMAL
- en: Logging out our code
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: We're all familiar with the console object available to us via JavaScript. This
    is still available to us but is somewhat confusing when trying to find where the
    log has been output when creating a native app. Traditionally, we had a console
    tool that was available on our simulator or actual device to debug errors; however,
    this is no longer the case.
  prefs: []
  type: TYPE_NORMAL
- en: First, let's look at how logging takes place in Xcode. Remember the debug view
    discussed earlier on in the chapter? Well, this is where we want to use it. So
    first, let's enable the debug view. Now, let's run the application we currently
    have.
  prefs: []
  type: TYPE_NORMAL
- en: 'When we run your application, we should see the following in the debugger area:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: We should focus on the last line where `[LOG]` takes place. This is the output
    generated using `console.log()`, which is currently in our `onDeviceReady` callback.
    This is great for us because we can actively see the logs we created. The negative
    aspect to this is that we don't have typical developer tools that we can find
    in other browsers. But with recent developments, we can now debug our applications
    using Safari's built-in developer tools to debug an iOS app running in the simulator.
  prefs: []
  type: TYPE_NORMAL
- en: Using the Safari developer tools
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: As I've mentioned, we are now able to debug web applications built off PhoneGap
    using Safari's developer tools. So let's take a crack at this real quick, by opening
    Safari on our computer. If you don't already have the developer tools enabled,
    do so by going into Safari's preferences and selecting the checkbox for **Show
    Develop menu in menu bar** under the **Advanced** tab.
  prefs: []
  type: TYPE_NORMAL
- en: '![Using the Safari developer tools](img/1024OT_10_16.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The Advanced tab for Safari preferences
  prefs: []
  type: TYPE_NORMAL
- en: Once we have the developer tools enabled, we can access them from the **Develop**
    menu for Safari. If we have our application running in the iOS simulator, then
    we should be able to debug our application by selecting `index.html` from the
    iPhone Simulator submenu. This will then launch the native developer tools in
    Safari.
  prefs: []
  type: TYPE_NORMAL
- en: '![Using the Safari developer tools](img/1024OT_10_17.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Debugging environment
  prefs: []
  type: TYPE_NORMAL
- en: Now we are able to fully debug an application using the Safari developer tools
    for our native application. It is truly that easy to have a fully integrated development
    environment with simulation and debugging all part of the process. Although we
    can go into further detail about debugging, it is beyond the scope of this book.
    However, let's move on to the final section of this book, where we will learn
    to utilize PhoneGap's built-in APIs to tie into native functionality for our single-page
    application.
  prefs: []
  type: TYPE_NORMAL
- en: Extending our application with native functionality
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Congratulations! We have been able to create our first native application using
    what we've already created with HTML5, CSS, and JavaScript. This is exciting stuff,
    but we're not done yet. Let's now leverage one of PhoneGap's APIs to tap into
    native functionality.
  prefs: []
  type: TYPE_NORMAL
- en: From a higher level we want our application to display the contacts we have
    on our phone. We want to be able to access this information when we click on the
    **Contacts** button in our application navigation. For this example, we just want
    to display the full name of our contacts. To achieve these goals we'll be using
    PhoneGap's Contacts API ([http://docs.phonegap.com/en/2.5.0/cordova_contacts_contacts.md.html#Contacts](http://docs.phonegap.com/en/2.5.0/cordova_contacts_contacts.md.html#Contacts)).
    To do this, we'll ensure that this is configured in our application, and then
    write the appropriate code to handle this within the already existing framework
    of our application. Let's begin with the configuration.
  prefs: []
  type: TYPE_NORMAL
- en: Configuring our application
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'We''ve already gone over the basics of configuring our application previously,
    but let''s take a look at this again to ensure its full understanding. First,
    let''s open up the `config.xml` file located at the top of our project. Then enable
    the Contacts API by setting its value to `CDVContacts`. When you''re done, you
    should have the following in your `config.xml` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Configuring our application](img/1024OT_10_18.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The project configuration
  prefs: []
  type: TYPE_NORMAL
- en: Setting up our contacts functionality
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In this section of the chapter, we'll look at hooking into our contacts information
    to display in our native application. First we'll create the view, then the template,
    and finally the actual API that comes with PhoneGap. When we're done, we should
    have a good idea on how we can tap into these APIs to create native web applications
    for iOS.
  prefs: []
  type: TYPE_NORMAL
- en: Creating the ContactsView class
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Once we have set up our configuration for this application, we need to set
    up everything else in order to get the contacts view to work. To begin, let''s
    create a contacts view to be added to our user directory. We''ll extend its functionality
    later, but for now here is the template we''ll be using:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: The preceding code isn't anything new. We're basically creating a `ContactsView`
    class that follows the conventions we've set previously with no bit of additional
    functionality. Do note that we have set a template for this view that does not
    exist yet. Let's include this file with the scripts we've included in `index.html`
    add it to the last view being included. Now, let's create the template associated
    with this view.
  prefs: []
  type: TYPE_NORMAL
- en: Implementing the ContactsView template
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Using what we''ve already built for our playlist, we''ll just duplicate the
    template for the playlist view and change its header. While we''re at it, we''ll
    just change the class of the unordered list to `contacts-list` as well. When we''re
    done, our template will look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Include this template after the rest of the other templates we've created. At
    this point, we should be 50 percent there. Now, you may run into some styling
    issues, but just make sure to add the `contacts-list` class to the same styles
    that the playlist uses. We won't go over that here, since it's pretty brief; so
    we'll continue by writing the contacts implementation.
  prefs: []
  type: TYPE_NORMAL
- en: Integrating the Contacts API
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: To look up a user's contacts is pretty simple using the PhoneGap API. In fact,
    our example will be based on the documented `Navigator` object, `contacts`. But
    first, we need to create a new instance of `ContactFindOptions` ([http://docs.phonegap.com/en/2.5.0/cordova_contacts_contacts.md.html#ContactFindOptions](http://docs.phonegap.com/en/2.5.0/cordova_contacts_contacts.md.html#ContactFindOptions)),
    which will hold our filtering options when finding contacts.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: The preceding code sets the `filter` and `multiple` properties on the instance
    of `ContactFindOptions`. By default `filter` is empty, meaning there is no limitation,
    and `multiple` is set to `true`, allowing for multiple contacts to come through.
    Next, we want to find two fields when we get the contacts, their `displayName`,
    and `name`. These fields will be in an array, which we'll use shortly.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Next, we want to find the contacts when the view renders. So inside our render
    view, we want to pass in the preceding options.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Note that we have not yet created our `onContactsError` or `onContactsSuccess`
    methods. Also, you'll see that we create the template and attach it to the DOM
    the same way we did for all the other views. There's not much left to do with
    this method, so let's look at our callbacks, beginning with `onContactSuccess`.
  prefs: []
  type: TYPE_NORMAL
- en: The `onContactSuccess` callback is where all our magic happens. We'll create
    a `div` element in memory and then loop through the results, adding each element
    to `div` as a list item. Once everything is completed, we'll take the contents
    of that the `div` element and add it to our `contacts-list` unordered list.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'As you can see here, we use the **underscore** method `each` to loop through
    the results. And as we mentioned before, we create a list item containing the
    user''s name as its text content. Pretty simple behavior here and nothing too
    complicated. Now, let''s check out our `onContactsError` callback:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'In this callback, we just alert that there has been error. Of course, in our
    real-world application we would create something a bit more comprehensive, but
    for our purposes this is good enough. If we run our application now, we should
    get the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Integrating the Contacts API](img/1024OT_10_19.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The Contacts API implementation
  prefs: []
  type: TYPE_NORMAL
- en: Give yourself a pat on the back! You have reached the end of this section, have
    now successfully integrated with the PhoneGap API, and tapped into native functionality.
    Very cool, isn't it?
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Please note that the source code provided with this book comes with a few checks,
    making sure that the same contacts aren't added each time the user visits the
    **Contacts** view. This was done in order to save some time and really focus on
    the meat of the solution.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we were introduced to native application development using
    the same programming languages we use for our web applications. Using the popular
    open source PhoneGap framework, we achieved the ability to create the single-page
    application, built in [Chapter 7](ch07.html "Chapter 7. One-page Applications"),
    *One-page Applications*, as a native application for iOS. We went over extending
    the single-page application by tying into the native functionality using the Contacts
    API in PhoneGap, listing out our contacts and some information. We should now
    have a foundation for creating native applications that allow us to use web technologies
    to distribute web applications for iOS Safari and the iOS operating system.
  prefs: []
  type: TYPE_NORMAL
