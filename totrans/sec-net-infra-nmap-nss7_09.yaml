- en: Vulnerability Management Governance
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Today's technology landscape is changing at an extremely fast pace. Almost every
    day, some new technology is introduced and gains popularity within no time. Although
    most organizations do adapt to rapidly changing technology, they often don't realize
    the change in the organization's threat landscape with the use of new technology.
    While the existing technology landscape of an organization might already be vulnerable,
    the induction of new technology could add more IT security risks in the technology
    landscape.
  prefs: []
  type: TYPE_NORMAL
- en: 'In order to effectively mitigate all the risks, it is important to implement
    a robust *vulnerability management program* across the organization. This chapter
    will introduce some of the essential governance concepts that will help lay a
    solid foundation for implementing the vulnerability management program. Key learning
    points in this chapter will be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Security basics
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Understanding the need for security assessments
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Listing down the business drivers for vulnerability management
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Calculating ROIs
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting up the context
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Developing and rolling out a vulnerability management policy and procedure
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Penetration testing standards
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Industry standards
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Security basics
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Security is a subjective matter and designing security controls can often be
    challenging. A particular asset may demand more protection for keeping data confidential
    while another asset may demand to ensure utmost integrity. While designing the
    security controls, it is also equally important to create a balance between the
    effectiveness of the control and the ease of use for an end user. This section
    introduces some of the essential security basics before moving on to more complex
    concepts further in the book.
  prefs: []
  type: TYPE_NORMAL
- en: The CIA triad
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Confidentiality**, **integrity**, and **availability** (often referred as
    **CIA**), are the three critical tenets of information security. While there are
    many factors that help determine the security posture of a system, confidentiality,
    integrity, and availability are most prominent among them. From an information
    security perspective, any given asset can be classified based on the confidentiality,
    integrity, and availability values it carries. This section conceptually highlights
    the importance of CIA along with practical examples and common attacks against
    each of the factors.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/4049cecd-bc54-494b-9819-70c00b2f5276.png)'
  prefs: []
  type: TYPE_IMG
- en: Confidentiality
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The dictionary meaning of the word *confidentiality* states: the state of keeping
    or being kept secret or private. Confidentiality, in the context of information
    security, implies keeping the information secret or private from any unauthorized
    access, which is one of the primary needs of information security. The following
    are some examples of information that we often wish to keep confidential:'
  prefs: []
  type: TYPE_NORMAL
- en: Passwords
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: PIN numbers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Credit card number, expiry date, and CVV
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Business plans and blueprints
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Financial information
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Social security numbers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Health records
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Common attacks on confidentiality include:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Packet sniffing**: This involves interception of network packets in order
    to gain unauthorized access to information flowing in the network'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Password attacks**: This includes password guessing, cracking using brute
    force or dictionary attack, and so on'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Port scanning and ping sweeps**: Port scans and ping sweeps are used to identify
    live hosts in a given network and then perform some basic fingerprinting on the
    live hosts'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Dumpster driving**: This involves searching and mining the dustbins of the
    target organization in an attempt to possibly get sensitive information'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Shoulder surfing**: This is a simple act wherein any person standing behind
    you may peek in to see what password you are typing'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Social engineering**: Social engineering is an act of manipulating human
    behavior in order to extract sensitive information'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Phishing and pharming**: This involves sending false and deceptive emails
    to a victim, spoofing the identity, and tricking the victim to give out sensitive
    information'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Wiretapping**: This is similar to packet sniffing though more related to
    monitoring of telephonic conversations'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Keylogging**: This involves installing a secret program onto the victim''s
    system which would record and send back all the keys the victim types in'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Integrity
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Integrity in the context of information security refers to the quality of the
    information, meaning the information, once generated, should not be tampered with
    by any unauthorized entities. For example, if a person sends *X* amount of money
    to his friend using online banking, and his friend receives exactly *X* amount
    in his account, then the integrity of the transaction is said to be intact. If
    the transaction gets tampered at all in between, and the friend either receives
    *X + (n)* or *X - (n)* amount, then the integrity is assumed to have been tampered
    with during the transaction.
  prefs: []
  type: TYPE_NORMAL
- en: 'Common attacks on integrity include:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Salami attacks**: When a single attack is divided or broken into multiple
    small attacks in order to avoid detection, it is known as a salami attack'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Data diddling attacks**: This involves unauthorized modification of data
    before or during its input into the system'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Trust relationship attacks**: The attacker takes benefit of the trust relationship
    between the entities to gain unauthorized access'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Man-in-the-middle attacks**: The attacker hooks himself to the communication
    channel, intercepts the traffic, and tampers with the data'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Session hijacking**: Using the man-in-the-middle attack, the attacker can
    hijack a legitimate active session which is already established between the entities'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Availability
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The availability principle states that if an authorized individual makes a request
    for a resource or information, it should be available without any disruption.
    For example, a person wants to download his bank account statement using an online
    banking facility. For some reason, the bank's website is down and the person is
    unable to access it. In this case, the availability is affected as the person
    is unable to make a transaction on the bank's website. From an information security
    perspective, availability is as important as confidentiality and integrity. For
    any reason, if the requested data isn't available within time, it could cause
    severe tangible or intangible impact.
  prefs: []
  type: TYPE_NORMAL
- en: 'Common attacks on availability include the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Denial of service attacks**: In a denial of service attack, the attacker
    sends a large number of requests to the target system. The requests are so large
    in number that the target system does not have the capacity to respond to them.
    This causes the failure of the target system and requests coming from all other
    legitimate users get denied.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**SYN flood attacks**: This is a type of denial of service attack wherein the
    attacker sends a large number of SYN requests to the target with the intention
    of making it unresponsive.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Distributed denial of service attacks**: This is quite similar to the denial
    of service attack, the difference being the number of systems used to attack.
    In this type of attack, hundreds and thousands of systems are used by the attacker
    in order to flood the target system.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Electrical power attacks**: This type of attack involves deliberate modification
    in the electrical power unit with an intention to cause a power outage and thereby
    bring down the target systems.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Server room environment attacks**: Server rooms are temperature controlled.
    Any intentional act to disturb the server room environment can bring down the
    critical server systems.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Natural calamities and accidents**: These involve earthquakes, volcano eruptions,
    floods, and so on, or any unintentional human errors.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Identification
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Authentication is often considered the first step of interaction with a system.
    However, authentication is preceded by identification. A subject can claim an
    identity by process of identification, thereby initiating accountability**.**
    For initiating the process of **authentication, authorization, and accountability**
    (**AAA**), a subject must provide an identity to a system**.** Typing in a password,
    swiping an RFID access card, or giving a finger impression, are some of the most
    common and simple ways of providing individual identity. In the absence of an
    identity, a system has no way to correlate an authentication factor with the subject.
    Upon establishing the identity of a subject, thereafter all actions performed
    would be accounted against the subject, including information-system tracks activity
    based on identity, and not by the individuals. A computer isn't capable of differentiating
    between humans. However, a computer can well distinguish between user accounts.
    It clearly understands that one user account is different from all other user
    accounts. However, simply claiming an identity does not implicitly imply access
    or authority. The subject must first prove its identity in order to get access
    to controlled resources. This process is known as identification.
  prefs: []
  type: TYPE_NORMAL
- en: Authentication
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Verifying and testing that the claimed identity is correct and valid is known
    as the **process of authentication**. In order to authenticate, the subject must
    present additional information that should be exactly the same as the identity
    established earlier. A password is one of the most common types of mechanism used
    for authentication.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following are some of the factors that are often used for authentication:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Something you know**: The *something you know* factor is the most common
    factor used for authentication. For example, a password or a simple **personal
    identification number** (**PIN**). However, it is also the easiest to compromise.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Something you ha****ve**: The *something you have* factor refers to items
    such as smart cards or physical security tokens.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Something you are**: The *something you are* factor refers to using your
    biometric properties for the process of authentication. For example, using fingerprint
    or retina scans for authentication.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Identification and authentication are always used together as a single two-step
    process.
  prefs: []
  type: TYPE_NORMAL
- en: Providing an identity is the first step, and providing the authentication factor(s)
    is the second step. Without both, a subject cannot gain access to a system. Neither
    element alone is useful in terms of security.
  prefs: []
  type: TYPE_NORMAL
- en: 'Common attacks on authentication include:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Brute force**: A brute force attack involves trying all possible permutations
    and combinations of a particular character set in order to get the correct password'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Insufficient authentication:** Single-factor authentication with a weak password
    policy makes applications and systems vulnerable to password attacks'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Weak password recovery** **validation**: This includes insufficient validation
    of password recovery mechanisms, such as security questions, OTP, and so on'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Authorization
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Once a subject has successfully authenticated, the next logical step is to get
    an authorized access to the resources assigned.
  prefs: []
  type: TYPE_NORMAL
- en: Upon successful authorization, an authenticated identity can request access
    to an object provided it has the necessary rights and privileges.
  prefs: []
  type: TYPE_NORMAL
- en: An access control matrix is one of the most common techniques used to evaluate
    and compare the subject, the object, and the intended activity. If the subject
    is authorized, then a specific action is allowed, and denied if the subject is
    unauthorized.
  prefs: []
  type: TYPE_NORMAL
- en: It is important to note that a subject who is identified and authenticated may
    not necessarily be granted rights and privileges to access anything and everything.
    The access privileges are granted based on the role of the subject and on a need-to-know
    basis. Identification and authentication are all-or-nothing aspects of access
    control.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following table shows a sample access control matrix:'
  prefs: []
  type: TYPE_NORMAL
- en: '|  | **Resource** |'
  prefs: []
  type: TYPE_TB
- en: '| **User** | **File 1** | **File 2** |'
  prefs: []
  type: TYPE_TB
- en: '| User 1 | Read | Write |'
  prefs: []
  type: TYPE_TB
- en: '| User 2 | - | Read |'
  prefs: []
  type: TYPE_TB
- en: '| User 3 | Write | Write |'
  prefs: []
  type: TYPE_TB
- en: 'From the preceding sample access control matrix, we can conclude the following:'
  prefs: []
  type: TYPE_NORMAL
- en: User 1 cannot modify file 1
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: User 2 can only read file 2 but not file 1
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: User 3 can read/write both file 1 and file 2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Common attacks on authorization include the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Authorization creep**: Authorization creep is a term used to describe that
    a user has intentionally or unintentionally been given more privileges than he
    actually requires'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Horizontal privilege escalation**: Horizontal privilege escalation occurs
    when a user is able to bypass the authorization controls and is able to get the
    privileges of a user who is at the same level in the hierarchy'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Vertical privilege escalation**: Vertical privilege escalation occurs when
    a user is able to bypass the authorization controls and is able to get the privileges
    of a user higher in the hierarchy'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Auditing
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Auditing, or monitoring, is the process through which a subject's actions could
    be tracked and/or recorded for the purpose of holding the subject accountable
    for their actions once authenticated on a system. Auditing can also help monitor
    and detect unauthorized or abnormal activities on a system. Auditing includes
    capturing and preserving activities and/or events of a subject and its objects
    as well as recording the activities and/or events of core system functions that
    maintain the operating environment and the security mechanisms.
  prefs: []
  type: TYPE_NORMAL
- en: 'The minimum events that need to be captured in an audit log are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: User ID
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Username
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Timestamp
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Event type (such as debug, access, security)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Event details
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Source identifier (such as IP address)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The audit trails created by capturing system events to logs can be used to assess
    the health and performance of a system. In case of a system failure, the root
    cause can be traced back using the event logs. Log files can also provide an audit
    trail for recreating the history of an event, backtracking an intrusion, or system
    failure. Most of the operating systems, applications, and services have some kind
    of native or default auditing function for at least providing bare-minimum events.
  prefs: []
  type: TYPE_NORMAL
- en: 'Common attacks on auditing include the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Log tampering**: This includes unauthorized modification of audit logs'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Unauthorized access to logs**: An attacker can have unauthorized access to
    logs with an intent to extract sensitive information'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Denial of service through audit logs**: An attacker can send a large number
    of garbage requests just with the intention to fill the logs and subsequently
    the disk space resulting in a denial of service attack'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Accounting
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Any organization can have a successful implementation of its security policy
    only if accountability is well maintained. Maintaining accountability can help
    in holding subjects accountable for all their actions. Any given system can be
    said to be effective in accountability based on its ability to track and prove
    a subject's identity.
  prefs: []
  type: TYPE_NORMAL
- en: Various mechanisms, such as auditing, authentication, authorization, and identification,
    help associate humans with the activities they perform.
  prefs: []
  type: TYPE_NORMAL
- en: Using a password as the only form of authentication creates a significant room
    for doubt and compromise. There are numerous easy ways of compromising passwords
    and that is why they are considered the least secure form of authentication. When
    multiple factors of authentication, such as a password, smart card, and fingerprint
    scan, are used in conjunction with one another, the possibility of identity theft
    or compromise reduces drastically.
  prefs: []
  type: TYPE_NORMAL
- en: Non–repudiation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Non-repudiation is an assurance that the subject of an activity or event cannot
    later deny that the event occurred. Non-repudiation prevents a subject from claiming
    not to have sent a message, not to have performed an action, or not to have been
    the cause of an event.
  prefs: []
  type: TYPE_NORMAL
- en: 'Various controls that can help achieve non-repudiation are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Digital certificates
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Session identifiers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Transaction logs
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For example, a person could send a threatening email to his colleague and later
    simply deny the fact that he sent the email. This is a case of repudiation. However,
    had the email been digitally signed, the person wouldn't have had the chance to
    deny his act.
  prefs: []
  type: TYPE_NORMAL
- en: Vulnerability
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In very simple terms, vulnerability is nothing but a weakness in a system or
    a weakness in the safeguard/countermeasure. If a vulnerability is successfully
    exploited, it could result in loss or damage to the target asset. Some common
    examples of vulnerability are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Weak password set on a system
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An unpatched application running on a system
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Lack of input validation causing XSS
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Lack of database validation causing SQL injection
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Antivirus signatures not updated
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Vulnerabilities could exist at both the hardware and software level. A malware-infected
    BIOS is an example of hardware vulnerability while SQL injection is one of the
    most common software vulnerabilities.
  prefs: []
  type: TYPE_NORMAL
- en: Threats
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Any activity or event that has the potential to cause an unwanted outcome can
    be considered a threat. A threat is any action that may intentionally or unintentionally
    cause damage, disruption, or complete loss of assets.
  prefs: []
  type: TYPE_NORMAL
- en: 'The severity of a threat could be determined based on its impact. A threat
    can be intentional or accidental as well (due to human error). It can be induced
    by people, organizations, hardware, software, or nature. Some of the common threat
    events are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: A possibility of a virus outbreak
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A power surge or failure
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fire
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Earthquake
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Floods
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Typo errors in critical financial transactions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Exposure
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A threat agent may exploit the vulnerability and cause an asset loss. Being
    susceptible to such an asset loss is known as an **exposure**.
  prefs: []
  type: TYPE_NORMAL
- en: Exposure does not always imply that a threat is indeed occurring. It simply
    means that if a given system is vulnerable and a threat could exploit it, then
    there's a possibility that a potential exposure may occur.
  prefs: []
  type: TYPE_NORMAL
- en: Risk
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A risk is the possibility or likelihood that a threat will exploit a vulnerability
    to cause harm to an asset.
  prefs: []
  type: TYPE_NORMAL
- en: 'Risk can be calculated with the following formula:'
  prefs: []
  type: TYPE_NORMAL
- en: '*Risk = Likelihood * Impact*'
  prefs: []
  type: TYPE_NORMAL
- en: With this formula, it is evident that risk can be reduced either by reducing
    the threat agent or by reducing the vulnerability.
  prefs: []
  type: TYPE_NORMAL
- en: When a risk is realized, a threat agent or a threat event has taken advantage
    of a vulnerability and caused harm to or disclosure of one or more assets. The
    whole purpose of security is to prevent risks from becoming realized by removing
    vulnerabilities and blocking threat agents and threat events from exposing assets.
    It's not possible to make any system completely risk free. However, by putting
    countermeasures in place, risk can be brought down to an acceptable level as per
    the organization's risk appetite.
  prefs: []
  type: TYPE_NORMAL
- en: Safeguards
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A *safeguard*, or *countermeasure*, is anything that mitigates or reduces vulnerability.
    Safeguards are the only means by which risk is mitigated or removed. It is important
    to remember that a safeguard, security control, or countermeasure may not always
    involve procuring a new product; effectively utilizing existing resources could
    also help produce safeguards.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following are some examples of safeguards:'
  prefs: []
  type: TYPE_NORMAL
- en: Installing antivirus on all the systems
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installing a network firewall
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installing CCTVs and monitoring the premises
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Deploying security guards
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installing temperature control systems and fire alarms
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Attack vectors
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'An attack vector is nothing but a path or means by which an attacker can gain
    access to the target system. For compromising a system, there could be multiple
    attack vectors possible. The following are some of the examples of attack vectors:'
  prefs: []
  type: TYPE_NORMAL
- en: Attackers gained access to sensitive data in a database by exploiting SQL injection
    vulnerability in the application
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Attackers gained access to sensitive data by gaining physical access to the
    database system
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Attackers deployed malware on the target systems by exploiting the SMB vulnerability
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Attackers gained administrator-level access by performing a brute force attack
    on the system credentials
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: To sum up the terms we have learned, we can say that assets are endangered by
    threats that exploit vulnerabilities resulting in exposure, which is a risk that
    could be mitigated using safeguards.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding the need for security assessments
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Many organizations invest substantial amounts of time and cost in designing
    and implementing various security controls. Some even deploy multi-layered controls
    following the principle of *defense-in-depth.* Implementing strong security controls
    is certainly required; however, it's equally important to test if the controls
    deployed are indeed working as expected.
  prefs: []
  type: TYPE_NORMAL
- en: For example, an organization may choose to deploy the latest and best in the
    class firewall to protect its perimeters. The firewall administrator somehow misconfigures
    the rules. So however good the firewall may be, if it's not configured properly,
    it's still going to allow bad traffic in. In this case, a thorough testing and/or
    review of firewall rules would have helped identify and eliminate unwanted rules
    and retain the required ones.
  prefs: []
  type: TYPE_NORMAL
- en: Whenever a new system is developed, it strictly and vigorously undergoes **quality
    assurance** (**QA**) testing. This is to ensure that the newly developed system
    is functioning correctly as per the business requirements and specifications.
    On parallel lines, testing of security controls is also vital to ensure they are
    functioning as specified. Security tests could be of different types, as discussed
    in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Types of security tests
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Security tests could be categorized in multiple ways based on the context and
    the purpose they serve. The following diagram shows a high-level classification
    of the types of security tests:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/0d740afc-08c0-45c3-ba3e-3879c2be2e1e.png)'
  prefs: []
  type: TYPE_IMG
- en: Security testing
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The primary objective of s*ecurity tests* is to ensure that a control is functioning
    properly. The tests could be a combination of automated scans, penetration tests
    using tools, and manual attempts to reveal security flaws. It''s important to
    note that security testing isn''t a one-time activity and should be performed
    at regular intervals. When planning for testing of security controls, the following
    factors should be considered:'
  prefs: []
  type: TYPE_NORMAL
- en: Resources (hardware, software, and skilled manpower) available for security
    testing
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Criticality rating for the systems and applications protected by the controls
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The probability of a technical failure of the mechanism implementing the control
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The probability of a misconfiguration of a control that would endanger the security
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Any other changes, upgrades, or modifications in the technical environment that
    may affect the control performance
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Difficulty and time required for testing a control
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Impact of the test on regular business operations
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Only after determining these factors, a comprehensive assessment and testing
    strategy can be designed and validated. This strategy may include regular automated
    tests complemented by manual tests. For example, an e-commerce platform may be
    subjected to automated vulnerability scanning on a weekly basis with immediate
    alert notifications to administrators when the scan detects a new vulnerability.
    The automated scan requires intervention from administrators once it's configured
    and triggered, so it is easy to scan frequently.
  prefs: []
  type: TYPE_NORMAL
- en: The security team may choose to complement automated scans with a manual penetration
    test performed by an internal or external consultant for a fixed fee. Security
    tests can be performed on quarterly, bi-annually, or on an annual basis to optimize
    costs and efforts.
  prefs: []
  type: TYPE_NORMAL
- en: Unfortunately, many security testing programs begin on a haphazard and ad hoc
    basis by simply pointing fancy new tools at whatever systems are available in
    the network. Testing programs should be thoughtfully designed and include rigorous,
    routine testing of systems using a risk-based approach.
  prefs: []
  type: TYPE_NORMAL
- en: Certainly, security tests cannot be termed complete unless the results are carefully
    reviewed. A tool may produce a lot of false positives which could be eliminated
    only by manual reviews. The manual review of a security test report also helps
    in determining the severity of the vulnerability in context to the target environment.
  prefs: []
  type: TYPE_NORMAL
- en: For example, an automated scanning tool may detect cross-site scripting in a
    publicly hosted e-commerce application as well as in a simple help-and-support
    intranet portal. In this case, although the vulnerability is the same in both
    applications, the earlier one carries more risk as it is internet-facing and has
    many more users than the latter.
  prefs: []
  type: TYPE_NORMAL
- en: Vulnerability assessment versus penetration testing
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Vulnerability assessment and penetration testing are quite often used interchangeably.
    However, both are different with respect to the purpose they serve. To understand
    the difference between the two terms, let's consider a real-world example.
  prefs: []
  type: TYPE_NORMAL
- en: 'There is a bank that is located on the outskirts of a city and in quite a secluded
    area. There is a gang of robbers who intend to rob this bank. The robbers start
    planning on how they could execute their plan. Some of them visit the bank dressed
    as normal customers and note a few things:'
  prefs: []
  type: TYPE_NORMAL
- en: The bank has only one security guard who is unarmed
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The bank has two entrances and three exits
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There are no CCTV cameras installed
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The door to the locker compartment appears to be weak
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: With these findings, the robbers just did a vulnerability assessment. Now whether
    or not these vulnerabilities could be exploited in reality to succeed with the
    robbery plan would become evident only when they actually rob the bank. If they
    rob the bank and succeed in exploiting the vulnerabilities, they would have achieved
    penetration testing.
  prefs: []
  type: TYPE_NORMAL
- en: So, in a nutshell, checking whether a system is vulnerable is vulnerability
    assessment, whereas actually exploiting the vulnerable system is penetration testing.
    An organization may choose to do either or both as per their requirement. However,
    it's worth noting that a penetration test cannot be successful if a comprehensive
    vulnerability assessment hasn't been performed first.
  prefs: []
  type: TYPE_NORMAL
- en: Security assessment
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A security assessment is nothing but detailed reviews of the security of a system,
    application, or other tested environments. During a security assessment, a trained
    professional conducts a risk assessment that uncovers potential vulnerabilities
    in the target environment that may allow a compromise and makes suggestions for
    mitigation, as required.
  prefs: []
  type: TYPE_NORMAL
- en: Like security testing, security assessments also normally include the use of
    testing tools but go beyond automated scanning and manual penetration tests. They
    also include a comprehensive review of the surrounding threat environment, present
    and future probable risks, and the asset value of the target environment.
  prefs: []
  type: TYPE_NORMAL
- en: The main output of a security assessment is generally a detailed assessment
    report intended for an organization's top management and contains the results
    of the assessment in nontechnical language. It usually concludes with precise
    recommendations and suggestions for improvising the security posture of the target
    environment.
  prefs: []
  type: TYPE_NORMAL
- en: Security audit
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A security audit often employs many of the similar techniques followed during
    security assessments but are required to be performed by independent auditors.
    An organization's internal security staff perform routine security testing and
    assessments. However, security audits differ from this approach. Security assessments
    and testing are internal to the organization and are intended to find potential
    security gaps.
  prefs: []
  type: TYPE_NORMAL
- en: Audits are similar to assessments but are conducted with the intent of demonstrating
    the effectiveness of security controls to a relevant third party. Audits ensure
    that there's no conflict of interest in testing the control effectiveness. Hence,
    audits tend to provide a completely unbiased view of the security posture.
  prefs: []
  type: TYPE_NORMAL
- en: The security assessment reports and the audit reports might look similar; however,
    they are both meant for different audiences. The audience for the audit report
    mainly includes higher management, the board of directors, government authorities,
    and any other relevant stakeholders.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are two main types of audits:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Internal audit**: The organization''s internal audit team performs the internal
    audit. The internal audit reports are intended for the organization''s internal
    audience. It is ensured that the internal audit team has a completely independent
    reporting line to avoid conflicts of interest with the business processes they
    assess.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**External** **audit**: An external audit is conducted by a trusted external
    auditing firm. External audits carry a higher degree of external validity since
    the external auditors virtually don''t have any conflict of interest with the
    organization under assessment. There are many firms that perform external audits,
    but most people place the highest credibility with the so-called *big four* audit
    firms:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ernst & Young
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Deloitte & Touche
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: PricewaterhouseCoopers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: KPMG
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Audits performed by these firms are generally considered acceptable by most
    investors and governing bodies and regulators.
  prefs: []
  type: TYPE_NORMAL
- en: Business drivers for vulnerability management
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To justify investment in implementing any control, a business driver is absolutely
    essential. A business driver defines why a particular control needs to be implemented.
    Some of the typical business drivers for justifying the vulnerability management
    program are described in the following sections.
  prefs: []
  type: TYPE_NORMAL
- en: Regulatory compliance
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: For more than a decade, almost all businesses have become highly dependent on
    the use of technology. Ranging from financial institutions to healthcare organizations,
    there has been a large dependency on the use of digital systems. This has, in
    turn, triggered the industry regulators to put forward mandatory requirements
    that the organizations need to comply. Noncompliance to any of the requirements
    specified by the regulator attracts heavy fines and bans.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following are some of the regulatory standards that demand the organizations
    to perform vulnerability assessments:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Sarbanes-Oxley** (**SOX**)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Statements on Standards for Attestation Engagements 16** (**SSAE 16/SOC 1**
    ([https://www.ssae-16.com/soc-1/](https://www.ssae-16.com/soc-1/)))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Service Organization Controls** (**SOC**) 2/3'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Payment Card Industry Data Security Standard** (**PCI DSS**)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Health Insurance Portability and Accountability Act** (**HIPAA**)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Gramm Leach Bliley Compliance** (**GLBA**)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Federal Information System Controls Audit Manual** (**FISCAM**)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Satisfying customer demands
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Today's customers have become more selective in terms of what offerings they
    get from the technology service provider. A certain customer might be operating
    in one part of the world with certain regulations that demand vulnerability assessments.
    The technology service provider might be in another geographical zone but must
    perform the vulnerability assessment to ensure the customer being served is compliant.
    So, customers can explicitly demand the technology service provider to conduct
    vulnerability assessments.
  prefs: []
  type: TYPE_NORMAL
- en: Response to some fraud/incident
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Organizations around the globe are constantly subject to various types of attacks
    originating from different locations. Some of these attacks succeed and cause
    potential damage to the organization. Based on the historical experience of internal
    and/or external fraud/attacks, an organization might choose to implement a complete
    vulnerability management program.
  prefs: []
  type: TYPE_NORMAL
- en: For example, the WannaCry ransomware that spread like fire, exploited a vulnerability
    in the SMB protocol of Windows systems. This attack must have triggered the implementation
    of a vulnerability management program across many affected organizations.
  prefs: []
  type: TYPE_NORMAL
- en: Gaining a competitive edge
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let's consider a scenario wherein there are two technology vendors selling a
    similar e-commerce platform. One vendor has an extremely robust and documented
    vulnerability management program that makes their product inherently resilient
    against common attacks. The second vendor has a very good product but no vulnerability
    management program. A wise customer would certainly choose the first vendor product
    as the product has been developed in line with a strong vulnerability management
    process.
  prefs: []
  type: TYPE_NORMAL
- en: Safeguarding/protecting critical infrastructures
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This is the most important of all the previous business drivers. An organization
    may simply proactively choose to implement a vulnerability management program,
    irrespective of whether it has to comply with any regulation or satisfy any customer
    demand. The proactive approach works better in security than the reactive approach.
  prefs: []
  type: TYPE_NORMAL
- en: For example, an organization might have payment details and personal information
    of its customers and doesn't want to put this data at risk of unauthorized disclosure.
    A formal vulnerability management program would help the organization identify
    all probable risks and put controls in place to mitigate this.
  prefs: []
  type: TYPE_NORMAL
- en: Calculating ROIs
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Designing and implementing security controls is often seen as a cost overhead.
    Justifying the cost and effort of implementing certain security controls to management
    can often be challenging. This is when one can think of estimating the return-on-investment
    for a vulnerability management program. This can be quite subjective and based
    on both qualitative and quantitative analysis.
  prefs: []
  type: TYPE_NORMAL
- en: 'While the return-on-investment calculation can get complicated depending on
    the complexity of the environment, let''s get started with a simple formula and
    example:'
  prefs: []
  type: TYPE_NORMAL
- en: '*Return-on-investment (ROI) = (Gain from Investment – Cost of Investment)   
    * 100/ Cost of Investment*'
  prefs: []
  type: TYPE_NORMAL
- en: 'For a simplified understanding, let''s consider there are 10 systems within
    an organization that need to be under the purview of the vulnerability management
    program. All these 10 systems contain sensitive business data and if they are
    attacked, the organization could suffer a loss of $75,000 along with reputation
    loss. Now the organization can design, implement, and monitor a vulnerability
    management program by utilizing resources worth $25,000\. So, the ROI would be
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '*Return-on-investment (ROI) = (75,000 – 25,000) * 100/ 25,000 = 200%*'
  prefs: []
  type: TYPE_NORMAL
- en: In this case, the ROI of implementing the vulnerability management program is
    200%, which is indeed quite a good justifier to senior management for approval.
  prefs: []
  type: TYPE_NORMAL
- en: 'The preceding example was a simplified one meant for understanding the ROI
    concept. However, practically, organizations might have to consider many more
    factors while calculating the ROI for the vulnerability management program, including:'
  prefs: []
  type: TYPE_NORMAL
- en: What would be the scope of the program?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How many resources (head-count) would be required to design, implement, and
    monitor the program?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Are any commercial tools required to be procured as part of this program?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Are any external resources required (contract resources) during any of the phases
    of the program?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Would it be feasible and cost-effective to completely outsource the program
    to a trusted third-party vendor?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting up the context
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Changes are never easy and smooth. Any kind of change within an organization
    typically requires extensive planning, scoping, budgeting, and a series of approvals.
    Implementing a complete vulnerability management program in an organization with
    no prior security experience can be very challenging. There would be obvious resistance
    from many of the business units and questions asked against the sustainability
    of the program. The vulnerability management program can never be successful unless
    it is deeply induced within the organization's culture. Like any other major change,
    this could be achieved using two different approaches, as described in the following
    sections.
  prefs: []
  type: TYPE_NORMAL
- en: Bottom-up
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The bottom-up approach is where the ground-level staff initiate action to implement
    the new initiative. Speaking in the context of the vulnerability management program,
    the action flow in a bottom-up approach would look something similar to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: A junior team member of the system administrator team identifies some vulnerability
    in one of the systems
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: He reports it to his supervisor and uses a freeware tool to scan other systems
    for similar vulnerabilities
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: He consolidates all the vulnerabilities found and reports them to his supervisor
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The supervisor then reports the vulnerabilities to higher management
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The higher management is busy with other activities and therefore fails to prioritize
    the vulnerability remediation
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The supervisor of the system administrator team tries to fix a few of the vulnerabilities
    with the help of the limited resources he has
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A set of systems is still lying vulnerable as no one is much interested in fixing
    them
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What we can notice in the preceding scenario is that all the activities were
    unplanned and ad hoc. The junior team member was doing a vulnerability assessment
    on his own initiative without much support from higher management. Such an approach
    would never succeed in the longer run.
  prefs: []
  type: TYPE_NORMAL
- en: Top-down
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Unlike the bottom-up approach, where the activities are initiated by the ground-level staff,
    the top-down approach works much better as it is initiated, directed, and governed
    by the top management. For implementing a vulnerability management program using
    a top-down approach, the action flow would look like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: The top management decides to implement a vulnerability management program
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The management calculates the ROI and checks the feasibility
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The management then prepares a policy procedure guideline and a standard for
    the vulnerability management program
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The management allocates a budget and resources for the implementation and monitoring
    of the program
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The mid-management and the ground-level staff then follow the policy and procedure
    to implement the program
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The program is monitored and metrics are shared with top management
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The top-down approach for implementing a vulnerability management program as
    stated in the preceding scenario has a much higher probability of success since
    it's initiated and driven by top management.
  prefs: []
  type: TYPE_NORMAL
- en: Policy versus procedure versus standard versus guideline
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'From a governance perspective, it is important to understand the difference
    between a policy, procedure, standard, and guideline. Note the following diagram:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/651aeb91-8e85-488e-ac0e-074075567c84.png)'
  prefs: []
  type: TYPE_IMG
- en: '**Policy**: A policy is always the apex among the other documents. A policy
    is a high-level statement that reflects the intent and direction from the top
    management. Once published, it is mandatory for everyone within the organization
    to abide by the policy. Examples of a policy are internet usage policy, email
    policy, and so on.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Standard**: A standard is nothing but an acceptable level of quality. A standard
    can be used as a reference document for implementing a policy. An example of a
    standard is ISO27001.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Procedure**: A procedure is a series of detailed steps to be followed for
    accomplishing a particular task. It is often implemented or referred to in the
    form of a **standard operating procedure** (**SOP**). An example of a procedure
    is a user access control procedure.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Guideline:** A guideline contains additional recommendations or suggestions
    that are not mandatory to follow. They are best practices that may or may not
    be followed depending on the context of the situation. An example of a guideline
    is the Windows security hardening guideline.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Vulnerability assessment policy template
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The following is a sample vulnerability assessment policy template that outlines
    various aspects of vulnerability assessment at a policy level:'
  prefs: []
  type: TYPE_NORMAL
- en: '**<Company Name>****Vulnerability Assessment Policy**'
  prefs: []
  type: TYPE_NORMAL
- en: '|  | Name | Title |'
  prefs: []
  type: TYPE_TB
- en: '| Created By |  |  |'
  prefs: []
  type: TYPE_TB
- en: '| Reviewed By |  |  |'
  prefs: []
  type: TYPE_TB
- en: '| Approved By |  |  |'
  prefs: []
  type: TYPE_TB
- en: '**Overview**'
  prefs: []
  type: TYPE_NORMAL
- en: This section is a high-level overview of what vulnerability management is all
    about.
  prefs: []
  type: TYPE_NORMAL
- en: A vulnerability assessment is a process of identifying and quantifying security
    vulnerabilities within a given environment. It is an assessment of information
    security posture, indicating potential weaknesses as well as providing the appropriate
    mitigation procedures wherever required to either eliminate those weaknesses or
    reduce them to an acceptable level of risk.
  prefs: []
  type: TYPE_NORMAL
- en: 'Generally vulnerability assessment follows these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Create an inventory of assets and resources in a system
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Assign quantifiable value and importance to the resources
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Identify the security vulnerabilities or potential threats to each of the identified
    resource
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Prioritize and then mitigate or eliminate the most serious vulnerabilities for
    the most valuable resources
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Purpose**'
  prefs: []
  type: TYPE_NORMAL
- en: This section is to state the purpose and intent of writing the policy.
  prefs: []
  type: TYPE_NORMAL
- en: The purpose of this policy is to provide a standardized approach towards conducting
    security reviews. The policy also identifies roles and responsibilities during
    the course of the exercise until the closure of identified vulnerabilities.
  prefs: []
  type: TYPE_NORMAL
- en: '**Scope**'
  prefs: []
  type: TYPE_NORMAL
- en: This section defines the scope for which the policy would be applicable; it
    could include an intranet, extranet, or only a part of an organization's infrastructure.
  prefs: []
  type: TYPE_NORMAL
- en: Vulnerability assessments can be conducted on any asset, product, or service
    within **<Company Name>**.
  prefs: []
  type: TYPE_NORMAL
- en: '**Policy**'
  prefs: []
  type: TYPE_NORMAL
- en: The **team** under the authority of the **designation** would be accountable
    for the development, implementation, and execution of the vulnerability assessment
    process.
  prefs: []
  type: TYPE_NORMAL
- en: All the network assets within the **company name's** network would comprehensively
    undergo regular or continuous vulnerability assessment scans.
  prefs: []
  type: TYPE_NORMAL
- en: A centralized vulnerability assessment system will be engaged. Usage of any
    other tools to scan or verify vulnerabilities must be approved, in writing, by
    the **designation**.
  prefs: []
  type: TYPE_NORMAL
- en: All the personnel and business units within the **company name** are expected
    to cooperate with any vulnerability assessment being performed on systems under
    their ownership.
  prefs: []
  type: TYPE_NORMAL
- en: All the personnel and business units within the **company name** are also expected
    to cooperate with the **team** in the development and implementation of a remediation
    plan.
  prefs: []
  type: TYPE_NORMAL
- en: The **designation** may instruct to engage third-party security companies to
    perform the vulnerability assessment on critical assets of the **company**.
  prefs: []
  type: TYPE_NORMAL
- en: '**Vulnerability assessment process**'
  prefs: []
  type: TYPE_NORMAL
- en: This section provides a pointer to an external procedure document that details
    the vulnerability assessment process.
  prefs: []
  type: TYPE_NORMAL
- en: For additional information, go to the vulnerability assessment process.
  prefs: []
  type: TYPE_NORMAL
- en: '**Exceptions**'
  prefs: []
  type: TYPE_NORMAL
- en: It’s quite possible that, for some valid justifiable reason, some systems would
    need to be kept out of the scope of this policy. This section instructs on the
    process to be followed for getting exceptions from this policy.
  prefs: []
  type: TYPE_NORMAL
- en: Any exceptions to this policy, such as exemption from the vulnerability assessment
    process, must be approved via the security exception process. Refer to the security
    exception policy for more details.
  prefs: []
  type: TYPE_NORMAL
- en: '**Enforcement**'
  prefs: []
  type: TYPE_NORMAL
- en: This section is to highlight the impact if this policy is violated.
  prefs: []
  type: TYPE_NORMAL
- en: Any **company name** personnel found to have violated this policy may be subject
    to disciplinary action, up to and including termination of employment and potential
    legal action.
  prefs: []
  type: TYPE_NORMAL
- en: '**Related documents**'
  prefs: []
  type: TYPE_NORMAL
- en: This section is for providing references to any other related policies, procedures,
    or guidelines within the organization.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following documents are referenced by this policy:'
  prefs: []
  type: TYPE_NORMAL
- en: Vulnerability assessment procedure
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Security exception policy
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Revision history**'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Date** | **Revision number** | **Revision details** | **Revised by** |'
  prefs: []
  type: TYPE_TB
- en: '| MM/DD/YYYY | Rev #1 | Description of change | <Name/Title> |'
  prefs: []
  type: TYPE_TB
- en: '| MM/DD/YYYY | Rev #2 | Description of change | <Name/Title> |'
  prefs: []
  type: TYPE_TB
- en: This section contains details about who created the policy, timestamps, and
    the revisions.
  prefs: []
  type: TYPE_NORMAL
- en: '**Glossary**'
  prefs: []
  type: TYPE_NORMAL
- en: This section contains definitions of all key terms used throughout the policy.
  prefs: []
  type: TYPE_NORMAL
- en: Penetration testing standards
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Penetration testing is not just a single activity, but a complete process. There
    are several standards available that outline steps to be followed during a penetration
    test. This section aims at introducing the penetration testing lifecycle in general
    and some of the industry-recognized penetration testing standards.
  prefs: []
  type: TYPE_NORMAL
- en: Penetration testing lifecycle
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Penetration testing is not just about using random tools to scan the targets
    for vulnerabilities, but a detail-oriented process involving multiple phases.
    The following diagram shows various stages of the penetration testing lifecycle:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/bb719597-0de8-434c-8cf2-3cf4c91ceca9.png)'
  prefs: []
  type: TYPE_IMG
- en: '**Information gathering phase**: The information gathering phase is the first
    and most important phase of the penetration testing lifecycle. Before we can explore
    vulnerabilities on the target system, it is crucial to gather information about
    the target system. The more information you gather, the greater is the possibility
    of successful penetration. Without properly knowing the target system, it''s not
    possible to precisely target the vulnerabilities. Information gathering can be
    of two types:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Passive information gathering**: In passive information gathering, no direct
    contact with the target is established. For example, information about a target
    could be obtained from publicly available sources, such as search engines. Hence,
    no direct contact with the target is made.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Active information gathering**: In active information gathering, a direct
    contact with the target is established in order to probe for information. For
    example, a ping scan to detect live hosts in a network would actually send packets
    to each of the target hosts.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Enumeration: **Once the basic information about the target is available,
    the next phase is to enumerate the information for more details. For example,
    during the information gathering phase, we might have a list of live IP''s in
    a network. Now we need to enumerate all these live IPs and possibly get the following
    information:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The operating system running on the target IPs
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Services running on each of the target IPs
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Exact versions of services discovered
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: User accounts
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: File shares, and so on
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Gaining access**: Once the information gathering and enumeration have been
    performed thoroughly, we will have a detailed blueprint of our target system/network.
    Based on this blueprint, we can now plan to launch various attacks to compromise
    and gain access to the target system.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Privilege escalation: ** We may exploit a particular vulnerability in the
    target system and gain access to it. However, it''s quite possible that the access
    is limited with privileges. We may want to have full administrator/root-level
    access. Various privilege escalation techniques could be employed to elevate the
    access from a normal user to that of an administrator/root.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Maintaining access**: By now, we might have gained high-privilege access
    to our target system. However, that access might last only for a while, for a
    particular period. We would not like to have to repeat all the efforts again,
    in case we want to gain the same access to the target system. Hence, using various
    techniques, we can make our access to the compromised system persistent.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Covering tracks**: After all the penetration has been completed and documented,
    we might want to clear the tracks and traces, including tools and backdoors used
    in the compromise. Depending on the penetration testing agreement, this phase
    may or may not be required.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Industry standards
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When it comes to the implementation of security controls, we can make use of
    several well-defined and proven industry standards. These standards and frameworks
    provide a baseline that they can be tailored to suit the organization's specific
    needs. Some of the industry standards are discussed in the following section.
  prefs: []
  type: TYPE_NORMAL
- en: Open Web Application Security Project testing guide
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**OWASP** is an acronym for **Open Web Application Security Project**. It is
    a community project that frequently publishes the top 10 application risks from
    an awareness perspective. The project establishes a strong foundation to integrate
    security throughout all the phases of SDLC.'
  prefs: []
  type: TYPE_NORMAL
- en: The OWASP Top 10 project essentially application security risks by assessing
    the top attack vectors and security weaknesses and their relation to technical
    and business impacts. OWASP also provides specific instructions on how to identify,
    verify, and remediate each of the vulnerabilities in an application.
  prefs: []
  type: TYPE_NORMAL
- en: 'Though the OWASP Top 10 project focuses only on the common application vulnerabilities,
    it does provide extra guidelines exclusively for developers and auditors for effectively
    managing the security of web applications. These guides can be found at the following
    locations:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Latest testing guide**: [https://www.owasp.org/index.php/OWASP_Testing_Guide_v4_Table_of_Contents](https://www.owasp.org/index.php/OWASP_Testing_Guide_v4_Table_of_Contents)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Developer''s guide**: [www.owasp.org/index.php/Guide](http://www.owasp.org/index.php/Guide)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Secure code review guide**: [www.owasp.org/index.php/Category:OWASP_Code_Review_Project](https://www.owasp.org/index.php/Category:OWASP_Code_Review_Project)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The OWASP top 10 list gets revised on a regular basis. The latest top 10 list
    can be found at: [https://www.owasp.org/index.php/Top_10_2017-Top_10](https://www.owasp.org/index.php/Top_10_2017-Top_10).
  prefs: []
  type: TYPE_NORMAL
- en: Benefits of the framework
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The following are the key features and benefits of OWASP:'
  prefs: []
  type: TYPE_NORMAL
- en: When an application is tested against the OWASP top 10, it ensures that the
    bare minimum security requirements have been met and the application is resilient
    against most common web attacks.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The OWASP community has developed many security tools and utilities for performing
    automated and manual application tests. Some of the most useful tools are WebScarab,
    Wapiti, CSRF Tester, JBroFuzz, and SQLiX.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: OWASP has developed a testing guide that provides technology or vendor-specific
    testing guidelines; for example, the approach for the testing of Oracle is different
    than MySQL. This helps the tester/auditor choose the best-suited procedure for
    testing the target system.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It helps design and implement security controls during all stages of development,
    ensuring that the end product is inherently secure and robust.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: OWASP has an industry-wide visibility and acceptance. The OWASP top 10 could
    also be mapped with other web application security industry standards.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Penetration testing execution standard
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The **penetration testing execution standard** (**PTES**) was created by of
    the brightest minds and definitive experts in the penetration testing industry.
    It consists of seven phases of penetration testing and can be used to perform
    an effective penetration test on any environment. The details of the methodology
    can be found at: [http://www.pentest-standard.org/index.php/Main_Page.](http://www.pentest-standard.org/index.php/Main_Page.)
  prefs: []
  type: TYPE_NORMAL
- en: 'The seven stages of penetration testing that are detailed by this standard
    are as follows (source: [www.pentest-standard.org](http://www.pentest-standard.org/index.php/Main_Page)):'
  prefs: []
  type: TYPE_NORMAL
- en: Pre-engagement interactions
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Intelligence gathering
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Threat modeling
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Vulnerability analysis
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Exploitation
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Post-exploitation
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Reporting
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Each of these stages is provided in detail on the PTES site along with specific
    mind maps that detail the steps required for each phase. This allows for the customization
    of the PTES standard to match the testing requirements of the environments that
    are being tested. More details about each step can be accessed by simply clicking
    on the item in the mind map.
  prefs: []
  type: TYPE_NORMAL
- en: Benefits of the framework
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The following are the key features and benefits of the PTES:'
  prefs: []
  type: TYPE_NORMAL
- en: It is a very thorough penetration testing framework that covers the technical
    as well as operational aspects of a penetration test, such as scope creep, reporting,
    and safeguarding the interests and rights of a penetration tester
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It has detailed instructions on how to perform many of the tasks that are required
    to accurately test the security posture of an environment
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It is put together for penetration testers by experienced penetration testing
    experts who perform these tasks on a daily basis
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It is inclusive of the most commonly found technologies as well as ones that
    are not so common
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It is simple to understand and can be easily adapted for security testing needs
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we became familiar with some absolute security basics and some
    of the essential governance concepts for building a vulnerability management program.
    In the next chapter, we'll learn how to set up an environment for performing vulnerability
    assessments.
  prefs: []
  type: TYPE_NORMAL
- en: Exercises
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Explore how to calculate ROI for security controls
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Become familiar with the PTES standard
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
