- en: Deploying WPScan and OWASP ZAP
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we will look at creating a playbook that deploys and runs two
    security tools, WPScan and OWASP ZAP. Then, using the playbooks from previous
    chapters, we will launch a WordPress installation for us to scan.
  prefs: []
  type: TYPE_NORMAL
- en: As with other chapters, we will be using Vagrant and one of the boxes we have
    already downloaded. You can find a complete copy of the playbook at [https://github.com/PacktPublishing/Learn-Ansible/tree/master/Chapter14](https://github.com/PacktPublishing/Learn-Ansible/tree/master/Chapter14).
  prefs: []
  type: TYPE_NORMAL
- en: Preparing the boxes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We are going to be launching two Vagrant boxes for this chapter, the first of
    which we will be using to install the scanning tools. This host will have Docker
    installed, and we will be using the Docker Ansible modules to interact with the
    software. The second box will contain or host the WordPress installation, which
    will be targeted by the scanning tools.
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a `Vagrantfile` with the following content:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: As you can see, we are going to be launching two CentOS 7 boxes, one labelled
    `scan`, which has a hostname of `10.20.30.40.nip.io`, and the other `wp`, which
    has a hostname of `10.20.30.41.nip.io`.
  prefs: []
  type: TYPE_NORMAL
- en: 'The inventory host file, which is always called production, contains the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: As you can see, we have defined three host groups; the first group called `scan`
    includes the single host which we will use to run the scanning tools. The second
    group, `wordpress`, while only containing a single host, could have more than
    one hosted listed, and the scans should target them all. The third group, called
    `boxes`, has been defined as a way of applying the connection configuration to
    all the hosts we have added to the playbook.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can launch the two boxes using one of the following two commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Now we have our Vagrant boxes up and running, we can take a look at what our
    playbook looks like.
  prefs: []
  type: TYPE_NORMAL
- en: The WordPress playbook
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As you have already guessed, this is going to be extremely simple, as we already
    have written a playbook that deploys WordPress on a CentOS 7 host. In fact, all
    we need to do is copy the `group_vars`, `roles` folders, plus their contents,
    and also the `site.yml` file from the `Chapter05/lemp` folder in the repository
    and we are done.
  prefs: []
  type: TYPE_NORMAL
- en: 'This is one of the great advantages of using a tool such as Ansible: Write
    once and use often; the only change we will be making is the `site.yml` file when
    we add in the plays that deploy the software.'
  prefs: []
  type: TYPE_NORMAL
- en: The scan playbook
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As already mentioned, we are going to be using Docker to run both WPScan and
    also OWASP ZAP. The reason for this is we would end up deploying quite a bit of
    supporting software if we were to install both packages directly on the hostâ€”while
    this is not a problem, using a tool such as Docker allows to simplify the installation
    process as well as giving us an excuse to cover the Docker Ansible modules.
  prefs: []
  type: TYPE_NORMAL
- en: The Docker role
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'As with all of the roles we have created so far, we are going to use the `ansible-galaxy`
    command to generate the structure for our role:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'For our Docker installation, we will be using the `yum` repository provided
    by Docker itself; this means that before we install, Docker needs to enable the
    repository. Once enabled, we will be able to install the latest stable release.
    Let''s make a start by populating some defaults in `roles/docker/defaults/main.yml`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: As you can see, we are defining the URL to where the repo's GPG key is stored,
    the URL for the repository file, and where on the host the repository file should
    be copied. We also have a list of the packages that need to be installed to get
    Docker up and running. Finally, we have the Python package for Docker that will
    allow Ansible to interact with the Docker API on our Vagrant box.
  prefs: []
  type: TYPE_NORMAL
- en: 'Before we use any of the variables defined, we need to make sure that the host
    we are running is up to date with its packages, so the first task in `roles/docker/tasks/main.yml`
    should perform a `yum update`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Now our host it up to date, we can add the GPG key; for this we will use the
    `rpm_key` module where we simply have to supply the URL, or file path, to the
    key we want to install:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Now we have the GPG key installed, we can download the `docker-ce.repo` file
    from Docker and store it where `yum` will pick it up when it is next executed:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: As you can see, we are using the `get_url` module to download the file and place
    it in `/etc/yum.repos.d/` on our host machine; we are also setting the read, write,
    and execute permissions on the file to `0644`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now that we have the Docker repository configured, we can install the packages
    we defined by adding the following task:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'We have added the `update_cache` option as we have just added a new repository
    and want to make sure that it is picked up. Next, we have to install the Docker
    Python package using `pip`; by default `pip` is not installed so we need to make
    sure it is available first by using `easy_install`, which in turn was installed
    by the `python-setuptools` package, which was installed with the previous task.
    There is an `easy_install` module, so this task is simple:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Now that pip is available, we can use the `pip` module to install the Docker
    Python library:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'The penultimate task is to disable SELinux on the Vagrant box:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'By default, the version of Docker provided by Docker does not automatically
    start on CentOS/Red Hat servers, so the final task in this role is to start the
    Docker service and also make sure that it is configured to start on boot:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: We have done this at this part of the playbook run rather than using a handler,
    as the playbook needs to interact with Docker before the playbook completes. As
    handlers are only called at the end of a playbook run, that would mean that the
    next part of our playbook would fail. Before we start to download and run containers,
    let's quickly run the playbook.
  prefs: []
  type: TYPE_NORMAL
- en: Testing the playbook
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'As we have all of the basic roles in place, we can try running the playbook;
    before doing so, we need to update the `site.yml` to include a play for our scan
    host:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'Once updated, we can run our playbook using the code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'This should give us something like the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'As you can see, this has performed the full Docker and WordPress installations;
    opening `http://10.20.30.41.nip.io/` will take you to the WordPress site:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/ad0c912f-5f54-4698-b797-30b830ddbcd8.png)'
  prefs: []
  type: TYPE_IMG
- en: Now we have our WordPress site up and running, we can make a start on the roles
    that perform a scan of the site.
  prefs: []
  type: TYPE_NORMAL
- en: The WPScan role
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The first role we are going to create is one that runs WPScan. WPScan is a tool
    that performs a scan of a WordPress site; it tries to figure out the version of
    WordPress that is running as well as checking for any plugins that have known
    vulnerabilities. It can also try and brute force the admin user account; however,
    we are going to skip that.
  prefs: []
  type: TYPE_NORMAL
- en: 'As always, we can bootstrap the role using this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'Once the files are in place, we need to add the following to `roles/wpscan/defaults/main.yml`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: This sets the image we want to download from the Docker Hub; in this case, it
    is the official WPScan image from the WPScan team. We then set the variables we
    wish to use for the logs; you may notice that we are defining a folder and file
    name for the logs.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next up, we need to add the tasks to `roles/wpscan/tasks/main.yml`, the first
    of which uses the `docker_image` module to pull a copy of the `wpscanteam/wpscan`
    image:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'Next up, we need to create the folder where the logs will be written to our
    Vagrant box:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: The reason we are doing this is that we will be mounting this folder inside
    of the container we are going to be launching in the next task. As the logs are
    the only bits of data we want to keep from each scan, we will write them to the
    mounted folder, meaning that the logs will be available for us to copy to our
    Ansible controller once the container has exited and removed.
  prefs: []
  type: TYPE_NORMAL
- en: 'Before we look at the next task, let''s take a quick look at the command we
    would need to run to launch the scan if we were using Docker directly on the command
    line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: The first line of the command is where all of the Docker logic happens; what
    we are asking Docker to do is to launch (`run`) a container called wpscan (`--name`)
    in the foreground (`-it`), mounting `/tmp/wpscan/` from the host to `/tmp/wpscan/`
    inside the container (`-v`) using the specified image (`wpscanteam/wpscan`). Once
    the process exits, we remove the container (`--rm`).
  prefs: []
  type: TYPE_NORMAL
- en: 'Everything on the second line is passed to the container''s default entry point,
    which in the case of the `wpscanteam/wpscan` image is `/wpscan/wpscan.rb`, meaning
    that the command we are using to run the scan within the container is actually
    this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'Now we have an idea of the command we would run using Docker, we can look at
    how that would look in our task:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'The options in the task are in the same order as they were written in the Docker
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '`detach: false` is similar to passing `-it` in that it will run the container
    in the foreground; by default the `docker_container` module runs containers in
    the background. This introduces a few challenges, which we will discuss shortly.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`auto_remove: true` is the same as `--rm`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`name: "wpscan"` is exactly the same as running `--name wpscan`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`volumes:"{{ log.remote_folder }}:{{ log.remote_folder }}"` is the same as
    what we would pass using the `-v` flag in Docker.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`image: "{{ image }}"` is the equivalent of just passing the image name, for
    example, `wpscanteam/wpscan`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Finally, `command` contains everything we want to pass to the entry-point; as
    you can see we have passed a few dynamic variables here.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: As mentioned, the `docker_container` module by default runs the containers in
    the background; typically that would be great in most cases; however, as we are
    just running the container as a one-off job to perform our scan, then we need
    to run it in the foreground.
  prefs: []
  type: TYPE_NORMAL
- en: Doing this will actually cause an error as we are instructing Ansible to remain
    attached to a container, which then terminates and is removed once the scan process
    completes. To get around this, we are registering the results of the task and,
    rather than using `ignore_errors`, we are telling the task to fail when ( `failed_when`)
    the return code (`rc`) is equal to `0` or equal or more than `2`, as our task
    should always have a return code of `1`.
  prefs: []
  type: TYPE_NORMAL
- en: So why not just let the container run in the background? As the next task copies
    the log file from the Vagrant box to the Ansible Controller, if we were to let
    the container run in the background, Ansible would immediately move on to the
    next task and copy a partly written file.
  prefs: []
  type: TYPE_NORMAL
- en: 'Attaching to the container and waiting for it to exit means that we are waiting
    for the scan to complete before progressing to the next task, which looks like
    this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: Now we have our tasks written, we can try running our role.
  prefs: []
  type: TYPE_NORMAL
- en: Running a WPScan
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To run a scan, update the `site.yml` file to look like the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'Then run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'This should give you the following results (the screenshot shows just the scan
    rather than the full playbook run, which you should see):'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/ba811144-905c-42ef-8c2d-89fc0c83b686.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Also, you should find a log file in the generated folder; this contains the
    results of the WPScan run:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/7654170f-9851-4ca8-b3e1-9f829b5f8bef.png)'
  prefs: []
  type: TYPE_IMG
- en: As you can see, there is quite a bit of information; however, since we deployed
    our WordPress installation from scratch, we should have a clean bill of health.
  prefs: []
  type: TYPE_NORMAL
- en: The OWASP ZAP role
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now that we have covered the basics of how to run a container using Ansible
    in the WPScan role, creating the role that runs OWASP ZAP should be straightforward;
    we just use this command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: '**Open Web Application Security Project Zed Attack Proxy** or **OWASP ZAP**,
    to give it its full name, is an open source web application security scanner.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The defaults for the role in `roles/zap/defaults/main.yml` should contain this
    code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: As you can see, we are using the `owasp/zap2docker-stable` image and also we
    are using the `/tmp/zap/` folder to store the report files in on the Vagrant box.
  prefs: []
  type: TYPE_NORMAL
- en: 'Moving on to the tasks in `roles/zap/tasks/main.yml`, we are pulling the image
    and creating the folder as we did in the WPScan role:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s take a look at the `docker` command we would have run to figure out
    what we needed to put in the next task:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: As you can see, the command is using all of the options we used before; there
    are differences in where we are mounting our folder within the container, as OWASP
    ZAP is expecting us to write any files we want to save to `/zap/wrk/`. This means
    we do not have to provide a full filesystem path when giving the report name as
    the application will write to `/zap/wrk/` by default.
  prefs: []
  type: TYPE_NORMAL
- en: 'This means that the task which launches the container should look like the
    following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'We are then downloading the report using the following task:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: Now we have our tasks in place, we can run the role.
  prefs: []
  type: TYPE_NORMAL
- en: Running OWASP ZAP
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To run the scan, we simply need to append the role to the end of our `site.yml`
    file. Once added, run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: 'This will run through the playbook; an abridged copy of the output can be found
    here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/6c6c75df-7b91-46c2-b011-059277d5a7eb.png)'
  prefs: []
  type: TYPE_IMG
- en: 'This will then copy an HTML file to the generated folder; the file should look
    similar to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/1bdfb5fa-4590-4aad-b525-223bd83caf0b.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now you can remove the Vagrant boxes using this command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: Then relaunch the boxes and run through the playbook in its entirety.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we have looked at using Ansible in combination with Docker
    to launch two different tools that performed an external vulnerability scan against
    the WordPress installation we launched using an Ansible playbook. This shows how
    we can launch some quite complex tools without having to worry about writing a
    playbook to install, configure, and manage them directly on our hosts.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we are going to move off the command line and look at the
    two web-based interfaces for Ansible provided by Red Hat.
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Why are we using Docker rather than installing WPScan and OWASP ZAP directly
    on our Vagrant box?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'True or false: `pip` is installed on our Vagrant box by default.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What is the name of the Python module we need to install for the Ansible Docker
    modules to function?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Update the `Vagrantfile` and `production` files to launch a second WordPress
    Vagrant box and scan them both.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'For more information on the tools we have used in this chapter, please see
    the following links:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Docker**: [https://docker.com](https://docker.com)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**WPScan**: [https://wpscan.org](https://wpscan.org)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**OWASP ZAP**: [https://www.owasp.org/index.php/OWASP_Zed_Attack_Proxy_Project](https://www.owasp.org/index.php/OWASP_Zed_Attack_Proxy_Project)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
