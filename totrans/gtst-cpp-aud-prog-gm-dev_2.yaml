- en: Chapter 2. Audio Playback
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we will perform two of the most fundamental operations in audio
    programming—loading and playing audio files. This might not seem like much, but
    it is already enough to get us started adding audio into our games.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
- en: There are many different audio libraries available these days, such as DirectSound,
    Core Audio, PortAudio, OpenAL, FMOD, or Wwise. Some are available only on certain
    platforms, while others work almost everywhere. Some are very low-level, providing
    little more than a bridge between the user and the sound card driver, while others
    provide high-level features such as 3D sound or interactive music.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
- en: For this book, we will be using FMOD, a cross-platform audio middleware developed
    by Firelight Technologies that is extremely powerful, yet easy-to-use. However,
    you should try to focus more on the concepts covered, instead of the API, because
    understanding them will allow you to adapt to other libraries more easily, since
    a lot of this knowledge is interchangeable.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
- en: For starters, we will learn how to install FMOD, how to initialize and update
    the audio system, and how to get it to play an audio file. At the end of the chapter,
    we will work through the creation of a very simple audio manager class, which
    encapsulates all of these tasks behind a minimalistic interface.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
- en: Understanding FMOD
  id: totrans-5
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: One of the main reasons why I chose FMOD for this book is that it contains two
    separate APIs—the FMOD Ex Programmer's API, for low-level audio playback, and
    FMOD Designer, for high-level data-driven audio. This will allow us to cover game
    audio programming at different levels of abstraction without having to use entirely
    different technologies.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  id: totrans-7
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Downloading the example code**'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
- en: You can download the example code files for all Packt books you have purchased
    from your account at [http://www.packtpub.com](http://www.packtpub.com). If you
    purchased this book elsewhere, you can visit [http://www.packtpub.com/support](http://www.packtpub.com/support)
    and register to have the files e-mailed directly to you.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
- en: 'Besides that reason, FMOD is also an excellent piece of software, with several
    advantages to game developers:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
- en: '**License**: It is free for non-commercial use, and has reasonable licenses
    for commercial projects.'
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Cross-platform**: It works across an impressive number of platforms. You
    can run it on Windows, Mac, Linux, Android, iOS, and on most of the modern video
    game consoles by Sony, Microsoft, and Nintendo.'
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Supported formats**: It has native support for a huge range of audio file
    formats, which saves you the trouble of having to include other external libraries
    and decoders.'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Programming languages**: Not only can you use FMOD with C and C++, there
    are also bindings available for other programming languages, such as C# and Python.'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Popularity**: It is extremely popular, being widely considered as the industry
    standard nowadays. It was used in games such as BioShock, Crysis, Diablo 3, Guitar
    Hero, Start Craft II, and World of Warcraft. It is also used to power several
    popular game engines, such as Unity3D and CryEngine.'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Features**: It is packed with features, covering everything from simple audio
    playback, streaming and 3D sound, to interactive music, DSP effects and low-level
    audio programming.'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installing FMOD Ex Programmer's API
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Installing a C++ library can be a bit daunting at first. The good side is that
    once you have done it for the first time, the process is usually the same for
    every other library. Here are the steps that you should follow if you are using
    Microsoft Visual Studio:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
- en: Download the FMOD Ex Programmer's API from [http://www.fmod.org](http://www.fmod.org)
    and install it to a folder that you can remember, such as `C:\FMOD`.
  id: totrans-19
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a new empty project, and add at least one `.cpp` file to it. Then, right-click
    on the project node on the **Solution Explorer**, and select **Properties** from
    the list. For all the steps that follow, make sure that the **Configuration**
    option is set to **All Configurations**.
  id: totrans-20
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Navigate to **C/C++** | **General**, and add `C:\FMOD\api\inc` to the list of
    **Additional Include Directories** (entries are separated by semicolons).
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Navigate to **Linker** | **General**, and add `C:\FMOD\api\lib` to the list
    of **Additional Library Directories**.
  id: totrans-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Navigate to **Linker** | **Input**, and add `fmodex_vc.lib` to the list of **Additional
    Dependencies**.
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Navigate to **Build Events** | **Post-Build Event**, and add `xcopy /y "C:\FMOD\api\fmodex.dll"
    "$(OutDir)"` to the **Command Lin****e** list.
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Include the `<fmod.hpp>` header file from your code.
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Creating and managing the audio system
  id: totrans-26
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Everything that happens inside FMOD is managed by a class named `FMOD::System`,
    which we must start by instantiating with the `FMOD::Syste` `m_Create()` function:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Notice that the function returns the `system` object through a parameter. You
    will see this pattern every time one of the FMOD functions needs to return a value,
    because they all reserve the regular return value for an error code. We will discuss
    error checking in a bit, but for now let us get the audio engine up and running.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
- en: 'Now that we have a `system` object instantiated, we also need to initialize
    it by calling the `init()` method:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The first parameter specifies the maximum number of channels to allocate. This
    controls how many sounds you are able to play simultaneously. You can choose any
    number for this parameter because the system performs some clever priority management
    behind the scenes and distributes the channels using the available resources.
    The second and third parameters customize the initialization process, and you
    can usually leave them as shown in the example.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
- en: 'Many features that we will use work properly only if we update the `system`
    object every frame. This is done by calling the `update()` method from inside
    your game loop:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'You should also remember to shutdown the `system` object before your game ends,
    so that it can dispose of all resources. This is done by calling the `release()`
    method:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Loading and streaming audio files
  id: totrans-37
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'One of the greatest things about FMOD is that you can load virtually any audio
    file format with a single method call. To load an audio file into memory, use
    the `createSound()` method:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'To stream an audio file from disk without having to store it in memory, use
    the `createStream()` method:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Both methods take the path of the audio file as the first parameter, and return
    a pointer to an `FMOD::Sound` object through the fourth parameter, which you can
    use to play the sound. The paths in the previous examples are relative to the
    application path. If you are running these examples in Visual Studio, make sure
    that you copy the audio files into the output folder (for example, using a post-build
    event such as `xcopy /y "$(ProjectDir)*.ogg" "$(OutDir)"`).
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
- en: The choice between loading and streaming is mostly a tradeoff between memory
    and processing power. When you load an audio file, all of its data is uncompressed
    and stored in memory, which can take up a lot of space, but the computer can play
    it without much effort. Streaming, on the other hand, barely uses any memory,
    but the computer has to access the disk constantly, and decode the audio data
    on the fly. Another difference (in FMOD at least) is that when you stream a sound,
    you can only have one instance of it playing at any time. This limitation exists
    because there is only one decode buffer per stream. Therefore, for sound effects
    that have to be played multiple times simultaneously, you have to either load
    them into memory, or open multiple concurrent streams. As a rule of thumb, streaming
    is great for music tracks, voice cues, and ambient tracks, while most sound effects
    should be loaded into memory.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
- en: 'The second and third parameters allow us to customize the behavior of the sound.
    There are many different options available, but the following list summarizes
    the ones we will be using the most. Using `FMOD_DEFAULT` is equivalent to combining
    the first option of each of these categories:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
- en: '`FMOD_LOOP_OFF` and `FMOD_LOOP_NORMAL`: These modes control whether the sound
    should only play once, or loop once it reaches the end'
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`FMOD_HARDWARE` and `FMOD_SOFTWARE`: These modes control whether the sound
    should be mixed in hardware (better performance) or software (more features)'
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`FMOD_2D` and `FMOD_3D`: These modes control whether to use 3D sound'
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We can combine multiple modes using the bitwise `OR` operator (for instance,
    `FMOD_DEFAULT | FMOD_LOOP_NORMAL | FMOD_SOFTWARE`). We can also tell the system
    to stream a sound even when we are using the `createSound()` method, by setting
    the `FMOD_CREATESTREAM` flag. In fact, the `createStream()` method is simply a
    shortcut for this.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
- en: When we do not need a sound anymore (or at the end of the game) we should dispose
    of it by calling the `release()` method of the sound object. We should always
    release the sounds we create, regardless of the audio system also being released.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Playing sounds
  id: totrans-51
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'With the sounds loaded into memory or prepared for streaming, all that is left
    is telling the system to play them using the `playSound()` method:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: The first parameter selects in which channel the sound will play. You should
    usually let FMOD handle it automatically, by passing `FMOD_CHANNEL_FREE` as the
    parameter.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
- en: The second parameter is a pointer to the `FMOD::Sound` object that you want
    to play.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
- en: The third parameter controls whether the sound should start in a paused state,
    giving you a chance to modify some of its properties without the changes being
    audible. If you set this to true, you will also need to use the next parameter
    so that you can unpause it later.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
- en: The fourth parameter is an output parameter that returns a pointer to the `FMOD::Channel`
    object in which the sound will play. You can use this handle to control the sound
    in multiple ways, which will be the main topic of the next chapter.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
- en: You can ignore this last parameter if you do not need any control over the sound,
    and simply pass in `0` in its place. This can be useful for non-lopping one-shot
    sounds.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Checking for errors
  id: totrans-60
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: So far, we have assumed that every operation will always work without errors.
    However, in a real scenario, there is room for a lot to go wrong. For example,
    we could try to load an audio file that does not exist.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
- en: 'In order to report errors, every function and method in FMOD has a return value
    of type `FMOD_RESULT`, which will only be equal to `FMOD_OK` if everything went
    right. It is up to the user to check this value and react accordingly:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: For starters, it would be useful to know what the error was. However, since
    `FMOD_RESULT` is an enumeration, you will only see a number if you try to print
    it. Fortunately, there is a function called `FMOD_ErrorString()` inside the `fmod_errors.h`
    header file which will give you a complete description of the error.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
- en: 'You might also want to create a helper function to simplify the error checking
    process. For instance, the following function will check for errors, print a description
    of the error to the standard output, and exit the application:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'You could then use that function to check for any critical errors that should
    cause the application to abort:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: The initialization process described earlier also assumes that everything will
    go as planned, but a real game should be prepared to deal with any errors. Fortunately,
    there is a template provided in the FMOD documentation which shows you how to
    write a robust initialization sequence. It is a bit long to cover here, so I urge
    you to refer to the file named `Getting started with FMOD for Windows.pdf` inside
    the documentation folder for more information.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
- en: For clarity, all of the code examples will continue to be presented without
    error checking, but you should always check for errors in a real project.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
- en: Project 1 – building a simple audio manager
  id: totrans-71
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this project, we will be creating a `SimpleAudioManager` class that combines
    everything that was covered in this chapter. Creating a wrapper for an underlying
    system that only exposes the operations that we need is known as the **façade
    design pattern**, and is very useful in order to keep things nice and simple.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
- en: Since we have not seen how to manipulate sound yet, do not expect this class
    to be powerful enough to be used in a complex game. Its main purpose will be to
    let you load and play one-shot sound effects with very little code (which could
    in fact be enough for very simple games).
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
- en: 'It will also free you from the responsibility of dealing with sound objects
    directly (and having to release them) by allowing you to refer to any loaded sound
    by its filename. The following is an example of how to use the class:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: From an educational point of view, what is perhaps even more important is that
    you use this exercise as a way to get some ideas on how to adapt the technology
    to your needs. It will also form the basis of the next chapters in the book, where
    we will build systems that are more complex.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
- en: Class definition
  id: totrans-77
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let us start by examining the class definition:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'From browsing through the list of public class members, it should be easy to
    deduce what it is capable of doing:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
- en: The class can load audio files (given a path) using the `Load()` method
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The class can stream audio files (given a path) using the `Stream()` method
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The class can play audio files (given a path) using the `Play()` method (granted
    that they have been previously loaded or streamed)
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There is also an `Update()` method and a constructor/destructor pair to manage
    the sound system
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The private class members, on the other hand, can tell us a lot about the inner
    workings of the class:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
- en: At the core of the class is an instance of `FMOD::System` responsible for driving
    the entire sound engine. The class initializes the sound system on the constructor,
    and releases it on the destructor.
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Sounds are stored inside an associative container, which allows us to search
    for a sound given its file path. For this purpose, we will be relying on one of
    the C++ **Standard Template Library** (**STL**) associative containers, the `std::map`
    class, as well as the `std::string` class for storing the keys. Looking up a string
    key is a bit inefficient (compared to an integer, for example), but it should
    be fast enough for our needs. An advantage of having all the sounds stored on
    a single container is that we can easily iterate over them and release them from
    the class destructor.
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Since the code for loading and streaming audio file is almost the same, the
    common functionality has been extracted into a private method called `LoadOrStream()`,
    to which `Load()` and `Stream()` delegate all of the work. This prevents us from
    repeating the code needlessly.
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Initialization and destruction
  id: totrans-89
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Now, let us walk through the implementation of each of these methods. First
    we have the class constructor, which is extremely simple, as the only thing that
    it needs to do is initialize the `system` object.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Updating is even simpler, consisting of a single method call:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: The destructor, on the other hand, needs to take care of releasing the `system`
    object, as well as all the sound objects that were created. This process is not
    that complicated though. First, we iterate over the map of sounds, releasing each
    one in turn, and clearing the map at the end. The syntax might seem a bit strange
    if you have never used an STL iterator before, but all that it means is to start
    at the beginning of the container, and keep advancing until we reach its end.
    Then we finish off by releasing the `system` object as usual.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Loading or streaming sounds
  id: totrans-96
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Next in line are the `Load()` and `Stream()` methods, but let us examine the
    private `LoadOrStream()` method first. This method takes the path of the audio
    file as a parameter, and checks if it has already been loaded (by querying the
    sound map). If the sound has already been loaded there is no need to do it again,
    so the method returns. Otherwise, the file is loaded (or streamed, depending on
    the value of the second parameter) and stored in the sound map under the appropriate
    key.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来是`Load()`和`Stream()`方法，但让我们先来看一下私有的`LoadOrStream()`方法。这个方法以音频文件的路径作为参数，并检查它是否已经被加载（通过查询声音映射）。如果声音已经被加载，就没有必要再次加载，所以该方法返回。否则，文件将被加载（或流式传输，取决于第二个参数的值），并存储在声音映射中的适当键下。
- en: '[PRE17]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'With the previous method in place, both the `Load()` and the `Stream()` methods
    can be trivially implemented as follows:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 有了前面的方法，`Load()`和`Stream()`方法可以轻松实现如下：
- en: '[PRE18]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Playing sounds
  id: totrans-101
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 播放声音
- en: Finally, there is the `Play()` method, which works the other way around. It
    starts by checking if the sound has already been loaded, and does nothing if the
    sound is not found on the map. Otherwise, the sound is played using the default
    parameters.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，还有`Play()`方法，它的工作方式相反。它首先检查声音是否已经加载，如果在地图上找不到声音，则不执行任何操作。否则，使用默认参数播放声音。
- en: '[PRE19]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: We could have tried to automatically load the sound in the case when it was
    not found. In general, this is not a good idea, because loading a sound is a costly
    operation, and we do not want that happening during a critical gameplay section
    where it could slow the game down. Instead, we should stick to having separate
    load and play operations.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 我们本可以尝试在找不到声音时自动加载声音。一般来说，这不是一个好主意，因为加载声音是一个昂贵的操作，我们不希望在关键的游戏过程中发生这种情况，因为这可能会减慢游戏速度。相反，我们应该坚持分开加载和播放操作。
- en: A note about the code samples
  id: totrans-105
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 关于代码示例的说明
- en: Although this is a book about audio, all the samples need an environment to
    run on. In order to keep the audio portion of the samples as clear as possible,
    we will also be using the **Simple and Fast Multimedia Library 2.0** (**SFML**)
    ([http://www.sfml-dev.org](http://www.sfml-dev.org)). This library can very easily
    take care of all the miscellaneous tasks, such as window creation, timing, graphics,
    and user input, which you will find in any game.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管这是一本关于音频的书，但所有示例都需要一个运行环境。为了尽可能清晰地保持示例的音频部分，我们还将使用**Simple and Fast Multimedia
    Library 2.0**（SFML）（[http://www.sfml-dev.org](http://www.sfml-dev.org)）。这个库可以非常容易地处理所有杂项任务，比如窗口创建、定时、图形和用户输入，这些任务在任何游戏中都会找到。
- en: For example, here is a complete sample using SFML and the `SimpleAudioManager`
    class. It creates a new window, loads a sound, runs a game loop at 60 frames per
    second, and plays the sound whenever the user presses the space key.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，这里有一个使用SFML和`SimpleAudioManager`类的完整示例。它创建一个新窗口，加载一个声音，以60帧每秒的速度运行游戏循环，并在用户按下空格键时播放声音。
- en: '[PRE20]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Summary
  id: totrans-109
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we have seen some of the advantages of using the FMOD audio
    engine. We saw how to install the FMOD Ex Programmer's API in Visual Studio, how
    to initialize, manage, and release the FMOD sound system, how to load or stream
    an audio file of any type from disk, how to play a sound that has been previously
    loaded by FMOD, how to check for errors in every FMOD function, and how to create
    a simple audio manager that encapsulates the act of loading and playing audio
    files behind a simple interface.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们已经看到了使用FMOD音频引擎的一些优势。我们看到了如何在Visual Studio中安装FMOD Ex程序员API，如何初始化、管理和释放FMOD音频系统，如何从磁盘加载或流式传输任何类型的音频文件，如何播放先前由FMOD加载的声音，如何检查每个FMOD函数中的错误，以及如何创建一个简单的音频管理器，它封装了加载和播放音频文件的操作背后的简单接口。
