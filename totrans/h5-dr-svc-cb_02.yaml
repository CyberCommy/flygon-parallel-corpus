- en: Chapter 2. Display of Graphical Data
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we are going to cover many common graphical tasks, such as
    the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Creating a line chart
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a bar chart
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a pie chart
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating an area chart
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Displaying combined charts
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a bubble chart
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Showing a map with a marked location
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Showing a map with a path
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Displaying gauges
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Displaying a tree
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: LED scoreboard using web fonts
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we will take a look at displaying graphical data using various
    JavaScript libraries that are based on modern HTML5 standards. The main idea is
    to get you interested into various visual parts ranging from 2D graphics with
    canvas and SVG data-driven documents, with the help of problem-solving examples.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a line chart
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Line charts are the most basic type of charts. They display a series of data
    points connected together by lines. Line charts are often used to visualize time
    series data.
  prefs: []
  type: TYPE_NORMAL
- en: There are various libraries that implement this charting functionality, both
    paid and free. We're going to use the **Flot** chart library. It's free, simple,
    and easy to use and it has been in active development for the past 4 years. It
    also aims to produce aesthetically pleasing charts.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we're going to make a time series chart that displays the outside
    temperature history for the past 24 hours.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We'll need to download Flot from the official website at [http://www.flotcharts.org/](http://www.flotcharts.org/),
    and extract the contents to a separate folder named `flot`.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Let's write the HTML and JavaScript code.
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a basic HTML page with a placeholder for our chart. We''re also going
    to include jQuery (needed by Flot) and Flot itself. Flot needs to draw the chart
    canvas a placeholder div, so we''re going to provide one. The chart placeholder
    needs to have its width and height specified, otherwise Flot will be unable to
    draw correctly:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Add the code that draws our chart in `example.js`. The `getData` function generates
    some convincing-looking random data—you can easily replace it with a function
    that fetches data from the server. The data needs to be returned as an array of
    two-element arrays. The first (x axis) value in the pair is a standard UNIX timestamp
    in milliseconds as commonly used in JavaScript, while the second (y axis) value
    is the temperature.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Drawing the chart is very simple. The `$.plot` function draws the chart in
    the specified placeholder containing the specified series with the specified chart
    options:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'That''s it! The following is how the end result looks like:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/9282OT_02_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `$.plot` function takes three arguments:'
  prefs: []
  type: TYPE_NORMAL
- en: The placeholder selector. This is where Flot will draw the chart.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The array of series to draw. Flot can simultaneously draw multiple series on
    the same chart. Every series is an object that must at least contain the `data`
    property. This property is an array of two-element arrays that are the x and y
    values of the series. Additional properties allow us to control the way the particular
    series is drawn—those will be explored in more detail in the next recipes. By
    default, Flot draws a regular line chart with a preset color.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An `options` object that contains extensive chart drawing options for the chart
    labels, axes, legend, and grid. These options will also be explored in the next
    recipes.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In this recipe we've specified the "time" mode for the x axis. This causes Flot
    to appropriately label the hours, days, months, or years on our axis (depending
    on the timespan of the data).
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The following is a simple Ajax replacement of the `getData` function, sending
    an Ajax request to a request handler hosted on the same domain at the path `/chart`
    to retrieve the chart data:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Creating a bar chart
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In contrast to a line chart, which is usually used to display averages or momentary
    values, bar charts are used to visualize data that belongs to discrete groups.
    Examples include daily, monthly, and weekly sales (the groups are days, months,
    and weeks respectively), page visits per user, fuel consumption for each car,
    and so on.
  prefs: []
  type: TYPE_NORMAL
- en: The Flot chart library can also draw bar charts. In this example, we're going
    to visualize the number of daily sales for the past seven days. We're also going
    to show the sales from separate products separately, stacked on top of each other.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We'll need to download Flot from the official website at [http://www.flotcharts.org/](http://www.flotcharts.org/)
    and extract the contents to a separate folder named `flot`.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Let's modify the line chart code to make it draw our bar charts.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we''re going to copy the same HTML page from the previous line chart
    recipe, but we''ll make some changes. In order to draw stacking bars, we''re going
    to need the stacking plugin, which is located in the `jquery.flot.stack.js` file.
    The height of the chart placeholder is increased to get a better overview of the
    individual stacking bars:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Then we will create the `example.js` script:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'The code is explained in the next section. The following is how the resulting
    chart appears:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/9282OT_02_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Like in the previous recipe, the `$.plot` function takes three arguments. The
    first argument is the chart placeholder, the second is data, and the third is
    an object containing the chart options.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is a scheme of our input data:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: The input data is an array of series. Each series represents the sales for a
    product. The series object has a `label` property denoting the product, and a
    `data` property, which is an array of data points. Every data point is a two-dimensional
    array. The first element of this array is the date represented as a UNIX timestamp
    in milliseconds—the exact beginning of the day. The second is the number of sales
    for that day.
  prefs: []
  type: TYPE_NORMAL
- en: To manipulate the dates more easily, we define a variable representing the number
    of milliseconds in a day. Later, we use this variable to define the width of the
    bars in the chart.
  prefs: []
  type: TYPE_NORMAL
- en: Flot automatically picks the series colors for us from a predefined list (however,
    it's also possible to specify the colors we need, as we will see in the following
    recipes).
  prefs: []
  type: TYPE_NORMAL
- en: There are several series options specified in the code. We tell Flot to stack
    our series by setting the value of the `stack` property to `true`. We also make
    sure to hide the lines that would otherwise be shown by default.
  prefs: []
  type: TYPE_NORMAL
- en: To get the bar centers to align with the x-axis ticks for the day, we set the
    value of the `align` property in the `bar` object to `center`.
  prefs: []
  type: TYPE_NORMAL
- en: Each series in our input data has a label. As a result, Flot automatically generates
    a legend placed in the upper-right corner.
  prefs: []
  type: TYPE_NORMAL
- en: The boundaries of the axes are automatically picked by Flot, but it's possible
    to control them using the `options` object.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a pie chart
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When visualizing proportions or percentages as a whole, we usually use pie charts.
    Pie charts are simple enough to draw on our own; however, to get more flexibility
    and aesthetically pleasing results, we're going to use the Flot charting library
    with its pie plugin.
  prefs: []
  type: TYPE_NORMAL
- en: Flot's pie plugin can show a pie with or without a legend, and has extensive
    options for controlling the position of the labels. It's also capable of rendering
    tilted pies and donuts. Support for interactive pies is also included.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we're going to make a pie chart of our visitor's browsers.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We'll need to download Flot from the official website at [http://www.flotcharts.org/](http://www.flotcharts.org/)
    and extract the contents to a separate folder named `flot`.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Let's write the HTML and JavaScript code.
  prefs: []
  type: TYPE_NORMAL
- en: 'Create the following HTML page in `index.html`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: The page has a placeholder element for our chart.
  prefs: []
  type: TYPE_NORMAL
- en: Flot depends on the jQuery library that is included. To draw pie charts, we
    need to add Flot's pie plugin.
  prefs: []
  type: TYPE_NORMAL
- en: 'Create the `example.js` script:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'It produces the following pie chart:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/9282OT_02_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Flot requires that the pie slices data are provided as an array of objects.
    Every object contains the following two properties:'
  prefs: []
  type: TYPE_NORMAL
- en: '`label`: This is the label of the slice'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`data`: This is the number of the slice—a number which can be any value (doesn''t
    need to be a percentage)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: When calling `$.plot`, the first argument is the placeholder element for the
    pie, the second is the array of pie slices, and the third contains the pie options.
  prefs: []
  type: TYPE_NORMAL
- en: 'In order to show a pie, a minimum `options` object is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'To customize the default pie, we use the following additions to the `pie` property:'
  prefs: []
  type: TYPE_NORMAL
- en: '`radius`: This specifies the size of the pie as a percentage of the canvas.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`label`: The `show` (Boolean) property is set to `true` to show the pie labels,
    and the `radius` property controls the distance of the labels from the center
    of the pie.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`tilt`: This performs a 3D tilt of the pie. If omitted, Flot will render an
    untitled circle-shaped pie.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'There are more options available, such as the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '`innerRadius`: This is set to a value such as `0.5` to create a donut chart.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`combine`: This property is used to combine smaller slices into a single slice.
    It''s an object containing the following properties:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`threshold`: This is set to a percentage of the whole, for example, `0.1`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`color`: This is the color to use to render the "other" slice, for example,
    `#888`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For more details, see the pie examples at [http://people.iola.dk/olau/flot/examples/pie.html](http://people.iola.dk/olau/flot/examples/pie.html).
  prefs: []
  type: TYPE_NORMAL
- en: Creating an area chart
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Area charts are usually used in place of line charts when we want to stack multiple
    results on top of each other. They can also be used to enhance the visual appeal
    of the chart in certain circumstances.
  prefs: []
  type: TYPE_NORMAL
- en: 'This recipe will present an example where the area chart is used for an enhanced
    visual appeal: displaying altitude data.'
  prefs: []
  type: TYPE_NORMAL
- en: Let's say we need to visualize the altitude of a 8-km downhill hike succeeded
    by 12 km of flat walking. We would also like to mark the "mountain" portion of
    the chart. Finally, we would like the area below the altitude line to be filled
    in a way reminiscent of color relief maps with the color green for low, yellow
    for medium, and white for high-altitude.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We'll also use the Flot chart library in this example, so we will need to download
    Flot from the official website ta [http://www.flotcharts.org/](http://www.flotcharts.org/)
    and extract the content to a separate folder named `flot`.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Our HTML file needs a chart placeholder element and the necessary scripts included.
    The following is the content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'We''re going to draw the chart in our `example.js` script that contains the
    following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'And the following is how our result looks like:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/9282OT_02_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The area below the altitude line is filled in a way reminiscent of color relief.
    The mountain section is marked with a blue area, created by the `markings` object.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As in all of our examples, the `getData` function in `example.js` generates
    random data, and then calls the provided callback function with the data. We can
    easily write a replacement that fetches the data from a server instead, using
    jQuery.
  prefs: []
  type: TYPE_NORMAL
- en: A single call to `$.plot` will draw the area chart. The first argument is the
    target container. The second argument is an array of series to draw—in this case
    just one.
  prefs: []
  type: TYPE_NORMAL
- en: 'The third argument is more complex. It consists of the following parts:'
  prefs: []
  type: TYPE_NORMAL
- en: The `xaxis` property specifies the behavior of our x axis. We override the default
    tick labels by providing our own tick formatter. This formatter adds the `"km"`
    string after the tick value.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The `lines` property specifies that we''ll be using a filled line chart. We
    want a mountain-like gradient fill effect, so we specify a gradient object that
    contains an array of CSS color strings, that is, `{color: [array of colors]}`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `grid` property is used to mark the mountain segment on our chart. We specify
    that it should contain a marking of the x axis segment spanning in the range 0
    to 8 km and having a light blue color.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Flot has more area chart options—they can be found in the API documentation
    that is included with the distribution.
  prefs: []
  type: TYPE_NORMAL
- en: 'To use this recipe, we would need to provide our own data array from the server.
    The following is a simple Ajax replacement of the `getData` function, sending
    an Ajax request to a request handler hosted on the same domain at the path `/areachart`
    to retrieve the chart data. It is very simple:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Displaying combined charts
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Combined charts are charts that have more than one x or y axis, and may have
    multiple types of series (lines, bars, and areas). Sometimes, we may want to present
    multiple heterogeneous types of data on a single chart, usually to visualize its
    correlation.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we're going to try and visualize a mountain hike by presenting
    both temperature and altitude on a single chart. The altitude series will be an
    area chart with gradient colors reminiscent of relief maps, but the temperature
    series will be a line chart, which we would like to be red if above 19 degrees
    Celsius and blue if below that.
  prefs: []
  type: TYPE_NORMAL
- en: In order to do this, we're going to need a charting library that can handle
    two y axes. We're going to use the Flot charting library because it is capable
    of displaying charts with two or more x or y axes.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Like in the previous recipes, we need to download Flot from the official website
    at [http://www.flotcharts.org/](http://www.flotcharts.org/) and extract the contents
    to a separate folder named `flot`.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Let's write the HTML and JavaScript code.
  prefs: []
  type: TYPE_NORMAL
- en: 'Our HTML file needs a chart placeholder, jQuery, Flot, and our example script.
    This time we''re also going to need the `threshold` plugin in order to have two
    temperature colors. The following is the content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Our chart is drawn in `example.js` using the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'The following screenshot shows the end result:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/9282OT_02_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: With the `getData` function, we generate two series for the plot, one containing
    temperature and the other containing altitude.
  prefs: []
  type: TYPE_NORMAL
- en: When drawing the plot, we call the `getData` function first. In the provided
    callback, we take the data and pass it to the `$.plot` function, which takes the
    target container element, an array of series, and plot options.
  prefs: []
  type: TYPE_NORMAL
- en: The first series in the array contains altitude data. We have two y axes so
    we need to declare the y axis we're going to use for this series—the first y axis.
    The rest of the parameters declare the fill gradient; for more information see
    the *Creating an area chart* recipe.
  prefs: []
  type: TYPE_NORMAL
- en: The second series uses the second y axis. What is new here is the `threshold`
    property. It specifies that for values below 19 degrees, the color of the line
    should be different (blue rather than red).
  prefs: []
  type: TYPE_NORMAL
- en: We're going to configure the second y axis in the `options` object by specifying
    the `yaxes` property (note the plural in the name). This property is an array
    containing y axis options. We're going to use the defaults for the first axis,
    hence the empty object. We will place the second axis on the right-hand side.
  prefs: []
  type: TYPE_NORMAL
- en: The unit of the x axis is kilometers and therefore our `tickformatter` function
    adds the string `" km"` to the number.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, we mark the "mountain part" (from 0 to 8 km) in blue with the grid
    markings option.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Here is a simple Ajax replacement of the `getData` function, sending an Ajax
    request to a request handler hosted on the same domain at the `/charts` path to
    retrieve the chart data. This handler should return an object in the following
    format:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Where `data1` and `data2` are two-dimensional arrays containing the data.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: Creating a bubble chart
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Bubble charts can display sets of values as circles. They're usable for datasets
    with sizes in the range 10 through 100\. They're particularly useful for visualizing
    values that differ by orders of magnitude and can replace pie charts in those
    situations.
  prefs: []
  type: TYPE_NORMAL
- en: As bubble charts are more complex and slightly less common, we're going to need
    a flexible library to draw them. The excellent D3 library ([http://d3js.org/](http://d3js.org/))
    is a great fit; it provides a set of tools, (the core data-driven DOM API plus
    the "pack" data layout) that enables the creation of bubble charts.
  prefs: []
  type: TYPE_NORMAL
- en: We're going to draw a bubble chart displaying the numbers of visitors coming
    to our website from referring websites.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Let's write the HTML and JavaScript code.
  prefs: []
  type: TYPE_NORMAL
- en: 'We''re going to create an HTML page containing our chart placeholder. We''re
    going to include the chart library D3, and the code that will draw the bubble
    chart from our `example.js` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'Then we''re going to add the following code in `example.js`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'In the following section, we''re going to explain how D3 works and how we''re
    using it to create a bubble chart:'
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Unlike most other chart libraries, D3 doesn't have any predefined chart types
    that it is capable of drawing. Instead, it comes with a set of modular tools that
    you can freely mix and match to create any kind of data-driven documents.
  prefs: []
  type: TYPE_NORMAL
- en: However, D3 contains some very visualization-specific tools.
  prefs: []
  type: TYPE_NORMAL
- en: For example, `d3.scale.category20c` creates an ordinal scale. An ordinal scale
    maps input values to a discrete set of output values. In this case, the discrete
    set of values is a set of 20 predefined output colors. The scale is a function—it
    maps the input values to the output. We can specify explicitly which input values
    map to which outputs, but if we don't, it's inferred from usage. In our case,
    it means that the first domain name will be mapped to the first color, the second
    to the second, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: Other tools include jQuery-like DOM selection tools, which, in our recipe, we
    use to add the SVG element to our chart placeholder.
  prefs: []
  type: TYPE_NORMAL
- en: Another example are D3 layouts. To draw a bubble chart we need a pack layout.
    Layouts map a set of objects with values to a set of output coordinates based
    on certain rules and constrains. A popular example is a **force layout**, which
    is a graph layout that arranges the objects by iteratively applying virtual forces
    between graph nodes.
  prefs: []
  type: TYPE_NORMAL
- en: We're using the pack layout that produces hierarchical packing of objects into
    circles. Our data is flat, therefore the pack layout is only used to arrange our
    circles automatically. A pack layout is created and assigned to the `bubble` variable.
  prefs: []
  type: TYPE_NORMAL
- en: 'The pack layout works by applying the `bubble.nodes` function to the input
    data. This function looks for the `value` property in each of the objects in the
    input data. Based on this property (which it treats as a relative radius) and
    the size of the layout, it adds the following properties into our data: x, y,
    and r and returns the resulting array of objects.'
  prefs: []
  type: TYPE_NORMAL
- en: 'At this point we have most of the data needed for our bubble chart: we have
    the positions and dimensions of our bubbles. All we need to do now is to turn
    them into the appropriate SVG elements. The tool we use to do this is D3''s `selectAll`
    function.'
  prefs: []
  type: TYPE_NORMAL
- en: Unlike jQuery selectors, D3's `selectAll` can be used to maintain a two-way
    mapping between the document and a data object. We specify the data array mapped
    to our selection by using the selection's `.data` function.
  prefs: []
  type: TYPE_NORMAL
- en: After we declare this mapping, we can decide what happens when an element is
    added to our data array using the `.enter` function. In our recipe, we declare
    that a new SVG graphic element is added to the SVG canvas, and assign that declaration
    to the `node` variable.
  prefs: []
  type: TYPE_NORMAL
- en: It's important to note that our node variable is not holding the SVG element;
    rather, it's a selection of every graphics SVG element in the set of nodes that
    will be created in the future, whenever a new data element "enters" the selection.
    Therefore, operations on the node specify the operations that will be executed
    on every added SVG element.
  prefs: []
  type: TYPE_NORMAL
- en: We specify that every node will have a `title` attribute (which will appear
    on mouse over). The inner text of this title is dependent on the specific element
    in the data array. To describe this, we pass a function as the argument to the
    `.text()` call. The first argument of the passed function will be the data element
    of the particular node, and the returned value should be the text that will be
    set as the title.
  prefs: []
  type: TYPE_NORMAL
- en: Similarly, we move our bubbles to the position calculated by the pack layout.
    Afterwards, we add the circle with a radius calculated by the pack layout for
    the circle and the colors scale to generate colors for the circle.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, a text node is appended in the same way.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is how the result looks like:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works...](img/9282OT_02_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This example used SVG (scalable vector graphics) markup to render the visualization.
    Most modern browsers support SVG, but Internet Explorer versions prior to IE9
    don't. However, D3 isn't limited to SVG—it is also able to generate HTML elements
    that could be used as a replacement in older versions of IE.
  prefs: []
  type: TYPE_NORMAL
- en: Showing a map with a marked location
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The rise of Google Maps and their excellent API popularized the embedding of
    maps on websites. Embedded maps have a variety of uses: displaying places that
    users have been to, displaying locations of events, displaying locations of stores
    owned by a business, and many others. Maps can be displayed along with every textual
    address displayed on our websites.'
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe we're going to make a simple map with a single location marked
    on it. To do this, we're going to use the **Leaflet** library ([http://leafletjs.com/](http://leafletjs.com/)),
    which is a well known and widely library used by Flickr, FourSquare, Craigslist,
    Wikimedia, and other popular sites.
  prefs: []
  type: TYPE_NORMAL
- en: We're going to display an **OpenStreetMap** map layer. OpenStreetMap ([http://www.openstreetmap.org/](http://www.openstreetmap.org/))
    is a free Wikipedia-like collaboratively created street map with great coverage.
  prefs: []
  type: TYPE_NORMAL
- en: We're also going to add a description balloon, which would be displayed when
    the placemark is clicked.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Let's write the HTML and JavaScript code.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add Leaflet''s stylesheet in our HTML file, along with a conditional extra
    CSS required for IE8 and older:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'Include the Leaflet library JS file in our scripts:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'Put a placeholder for the map on our page. We must also specify its height,
    otherwise Leaflet will not work properly:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'Add our JS code by adding `example.js`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, add the code to create the map in `example.js`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Most map libraries draw their maps by using a tile image layer. Tile image layers
    are grids of images with a predefined, fixed size. The images are sliced parts
    of the map, which has been pre-rendered and hosted on the tile servers.
  prefs: []
  type: TYPE_NORMAL
- en: The map uses discrete points of zoom called **zoom levels**. Different tile
    images are used at different zoom levels.
  prefs: []
  type: TYPE_NORMAL
- en: In some cases, especially at high zoom levels, the server renders the tiles
    on the fly as the space needed to cache the images exceeds reasonable storage
    space sizes. For example, OpenStreetMap uses 19 zoom levels. The first level uses
    a single tile, the second splits this tile into four tiles, the third uses 16,
    and so on. At the 19th zoom level, there are 48 billion tiles—assuming an average
    tile size of 10 KB, that would take 480 terabytes of storage.
  prefs: []
  type: TYPE_NORMAL
- en: When the user scrolls the map, tiles of previously unloaded areas are loaded
    on the fly and shown in the container. When the user changes a zoom level, tiles
    for the old zoom level are removed and new tiles are added.
  prefs: []
  type: TYPE_NORMAL
- en: In our `example.js` file, we use Leaflet's functions (found in the `L` namespace
    object) to create the map. The map is initialized with a center placed in London
    with the help of as array representing a `[latitude, longitude]` pair. The other
    parameter is the zoom level, which is set at `13`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Afterwards a tile layer is added. We specify the tile server pattern that OpenStreetMap
    uses as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: Where `s` is the server letter (`a`, `b`, or `c`), `z` is the zoom level and
    `x` and `y` are the discrete coordinates of the tile. For example, at zoom level
    1, each of `x` and `y` can be either `1` or `2`, while at zoom level 2 they can
    be in the range 1 to 4 and so on. We also specify the maximum zoom level available.
  prefs: []
  type: TYPE_NORMAL
- en: We add our own marker to the map. The initialization parameter is a `[latitude,
    longitude]` pair. Afterwards, we can add a pop up inside the marker showing text
    and/or arbitrary HTML. We open the pop up immediately.
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works...](img/9282OT_02_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Map drawn with Leaflet
  prefs: []
  type: TYPE_NORMAL
- en: Showing a map with a path
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When displaying maps, sometimes we may want to show more than just locations.
    Besides markers, the other most common map overlays are paths and areas.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we're going to create a map showing a path and an area.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Let's write the HTML and JavaScript code.
  prefs: []
  type: TYPE_NORMAL
- en: 'Like in the *Showing a map with a marked location* recipe, we''ll need to include
    the appropriate CSS and scripts. The following is an example HTML file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'Then we can add our code to `example.js`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We create our map using the `L.map` function and set the map's position using
    `setView` at the specified `[latitude, longitude]` array and the zoom level. We
    also add the standard OpenStreetMap tile layer.
  prefs: []
  type: TYPE_NORMAL
- en: First we create and add a standard polyline. As we don't specify any options,
    Leaflet uses reasonable defaults for colors, opacity, borders, and so on. The
    polyline constructor takes an array of `[latitude, longitude]` pairs and draws
    a line with vertices that go through them.
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works...](img/9282OT_02_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Afterwards, we create a slightly customized polygon. Like the polyline constructor,
    the polygon also takes an array of `[latitude, longitude]` pairs. Additionally,
    we customize the background color, remove the polygon's border, and specify the
    polygon's opacity to be 50 percent.
  prefs: []
  type: TYPE_NORMAL
- en: Displaying gauges
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Analog gauges are useful for visualizing data with values bound between predefined
    minimums and maximums, which undergo changes over time. Examples include amount
    of fuel, current speed, disk space, process and memory usage, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this recipe, we''re going to make a very flexible, data-driven gauge plugin
    for jQuery. Then we''re going to use this plugin to display an analog car speedometer.
    The following is how the speedometer will look:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Displaying gauges](img/9282OT_02_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The recipe makes extensive use of HTML5's canvas.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Let's write the HTML code for our example, the gauge plugin and the code that
    ties them together.
  prefs: []
  type: TYPE_NORMAL
- en: 'Make a simple HTML file with a canvas for our gauge:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'Then write our gauge plugin code in `example.js`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'This is a support function that replaces `Array.forEach` and works on both
    single items and arrays. Our gauge will support multiple stripes, needles, and
    ticks, but it should also be able to work when a single one is provided:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'The following is a generic function that rotates the point `pt` around the
    center `c` (the angle amount is `a`). Direction is clockwise:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: The following is our gauge plugin
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'By default, our gauge has the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Is offset 20% from the top
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Has a linear scale with a value range 1 to 200, angle range 0 to 180 degrees,
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Has a single strip at 80% or total radius with a width of 5% of total radius
    colored with gray and going from 0 to 200.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Has a single `ticks` array going from 0 to 200 with `step` 10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Has labels from 0 to 200 with step 20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Has a single needle set at value 67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'We allow the user to override options and to specify more than one of any of
    the components mentioned previously:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'We construct our `scale` function and replace our objects specifying ranges
    of values with actual arrays. Note that instead of a `range` object, you can also
    specify an actual array:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'The following is the drawing code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'We will use the gauge center as a reference point and will clear the canvas:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: 'Then we''ll draw all the strips (one or more) as arcs:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: 'Then draw all the ticks (we use very short, very thick arcs as ticks). Our
    `scale` function turns the values in `range` to angles:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: 'Then we draw the labels. We determine the position by placing it at the right-most
    vertically-centered position, then rotating it counter-clockwise by the amount
    scaled with the value:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, we draw the needles. The needles are made of a circle centered at
    the central rotation point of the gauge and a triangle extending from there. We
    rotate all three triangle points the same way we rotate the label centers:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: 'After drawing the whole gauge, the `gauge` function returns a function that
    can be used to change the gauge needle value(s) and redraw it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: 'These are common helper functions. The `range` function creates an array of
    values, while `scale` creates a function that scales values from one range to
    another. Both support logarithmic scales:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: The anonymous function is invoked with the jQuery object as a parameter that,
    in the scope of the function, becomes `$`. This is a typical way to construct
    jQuery plugins with their own private scope, and to make jQuery available as `$`
    within that scope regardless of whether `$` is the same as jQuery in the global
    namespace.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will draw our gauge in `example.js`. The following is the content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We specified a linear scale for the gauge with angles going slightly below
    the middle, and speed values in the range 0 to 220\. We created three strips,
    the green one in the range 0 to 140 km/h, a yellow one in the range 140 to 180
    km/h, and a red one in the range 180 to 220 km/h. We''re going to use two sets
    of strips: one larger every 20 km/h and one smaller on every 10 km/h, both semi-transparent.
    Finally, we add a needle with a bluish tint.'
  prefs: []
  type: TYPE_NORMAL
- en: At the end, we can set our gauge value with the returned function, which we
    use to set it at 25 km/h.
  prefs: []
  type: TYPE_NORMAL
- en: Displaying a tree
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will take a look into how to display data in a tree-like
    layout. We are going to visualize a small family tree of Linux represented via
    JSON file. Additionally, will be using the `D3.js` file for manipulating the DOM
    to display the data.
  prefs: []
  type: TYPE_NORMAL
- en: '![Displaying a tree](img/9282OT_02_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: First, we need to have the data that is going to be used for the visualization.
    We need to get the `tree.json` file that is part of the examples for this recipe.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We will write the HTML and the backing JavaScript code that should generate
    data from a JSON file:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s first take a look a the structure of the JSON data:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: Each object has a `name` attribute representing the distribution name, a `url`
    attribute that has a link to the official web page, and the optional `children`
    attribute that can contain a list of other objects.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next step would be to create the page using the HTML5 doctype, and adding the
    dependency to `D3.js` and a CSS file called `tree.css`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: 'In the `body` section, we are going to add a `<div>` tag having an `id` called
    `location` that we are going to use as placeholder, and additionally include a
    JavaScript file called `tree.js` that will be used to include the logic for mapping
    the data:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s start with creating the display area in the `tree.js` file. First, we
    create the anonymous function that provides private state of the variables used
    inside:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: 'We then set up the size of the generated image with given `width` and `height`.
    For simplicity, we set them to fixed values:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: 'Afterwards, we set up a standard D3 layout tree:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: 'As we need to designate and create the actual SVG, we pick the location using
    the `id` previously chosen in the HTML called `location`, and append SVG element:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: 'We also need to read out the data from `tree.json` and somehow create nodes
    and links with the given hierarchy:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: 'We can style the page using CSS, picking color for the link background of the
    page and the circle:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The line `d3.layout.tree()` creates a new tree layout with default settings,
    where it is assumed that each input in the data element has a child array.
  prefs: []
  type: TYPE_NORMAL
- en: With `d3.svg.diagonal()`, we create a generator with default accessor functions.
    The returned function can generate the path data for a cubic Bézier connecting
    the nodes where we have tangents for smoothing the line.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: More information on Bézier curve can be found at [http://en.wikipedia.org/wiki/Bézier_curve](http://en.wikipedia.org/wiki/Bézier_curve).
    There is some mathematics behind it, but the simplest explanation would be that
    it is a line affected by certain points making it a good pick to define curvy
    lines.
  prefs: []
  type: TYPE_NORMAL
- en: 'As we wanted to have the tree from left to right instead of the the default,
    which is from top to bottom, we need to change the default behavior by doing a
    projection:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: 'The function will use `[d.y, d.x]` instead of the default `[d.x,d.y]`. One
    thing that you may have noticed is the `.append("g")` function that adds the SVG
    `g` element, which is a container element used for grouping together various related
    elements. We can have multiple nested elements inside, one within another, to
    an arbitrary depth, allowing us to create groups on various levels:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: 'To read the JSON data we''ve used the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: That does an AJAX call to the `tree.json` resource.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Note that, by default, your browser will not allow cross-domain requests. This
    includes requests to your local filesystem. To overcome this, please use a local
    web server explained in [Appendix A](apa.html "Appendix A. Installing Node.js
    and Using npm"), *Installing Node.js and Using npm*. Another option is to use
    JSONP as a great workaround, because with this security restriction there are
    some shortcomings. In [Chapter 8](ch08.html "Chapter 8. Communicating with Servers"),
    *Communicating with Servers*, we cover the issues and the reasoning behind these
    restrictions.
  prefs: []
  type: TYPE_NORMAL
- en: For more information, take a look at the W3C page at [http://www.w3.org/TR/cors/](http://www.w3.org/TR/cors/).
  prefs: []
  type: TYPE_NORMAL
- en: We then automatically map the data from the JSON file with `tree.nodes(json)`,
    where some assumptions are made on what we have inside the data; for example,
    we can have a parent node or children nodes.
  prefs: []
  type: TYPE_NORMAL
- en: 'After that, we selected all the `path.link` using W3C selectors that resemble
    a lot like the jQuery ones:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: 'Using `.data`, we bind them with link information that is returned by `tree.links`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: 'What happens in the background is that D3''s tree layout has a `links` function
    that accepts an array of nodes, and returns an array of objects representing the
    links from parent to child for each of these nodes. Links for the leafs will not
    be created. The information stored in the returned object has a `source` or the
    parent node and `target` or the child node. Now, in the following part, there
    is the .`enter()` function that''s very much D3 magic. What happens is that, for
    every element in the array that is part of `.data([theArray])` and has no corresponding
    DOM element found in the selection, it simply "enters inside the data" allowing
    us to use `.append`, .`insert`, `.select`, or `.empty` operators. In our case,
    we want to create SVG path elements having a CSS class of `link` and a `d` attribute
    calculated using the diagonal function we previously defined:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: So, for each data element, it will create `<path class='link' d='dataCalucatedByDiagonal'
    />`.
  prefs: []
  type: TYPE_NORMAL
- en: The SVG path element is a concept used to represent a line drawing that we would
    do with a pen, for example, having various types of geometry and representation.
    The `d` attribute contains the path data designated with `moveto(M)`, `lineto(L)`,
    `curve( cubic and quadratic besiers)`, `arc(A)`, `closepath(Z)`, `vertical lineto
    (V)`, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: 'It''s good to know what is generated by D3 for us in order to understand more
    completely how it works. Let''s say we want to display a simple line:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works…](img/9282OT_02_11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The SVG code would be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: Examining the path data values, we can see that it means move `pen(M)` to `(10,30)`
    and draw `line(L)` to `(200,10)`.
  prefs: []
  type: TYPE_NORMAL
- en: 'In our example with the tree, we have the lines drawn using paths, so the next
    step would be to draw the nodes. We apply the same procedure where we select all
    the old `g.node` elements and enter the node data, but instead of creating the
    `<path/>` element, we just append `"g"` and additionally add an `<a>` element
    with the `<xlink:href>` attribute:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs: []
  type: TYPE_PRE
- en: As we are already automatically iterating all the data nodes, we can access
    `d.url`, retrieving the URL for each node and setting it as a link to all the
    inner elements that we are going to add later.
  prefs: []
  type: TYPE_NORMAL
- en: 'Don''t forget that we need to rotate the coordinates, because we want the tree
    to be displayed from left to right:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs: []
  type: TYPE_PRE
- en: 'After this, we can append other elements to each of the elements, so in order
    to create the circle, we add the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs: []
  type: TYPE_PRE
- en: 'That creates an SVG circle with radius of 20px, also, we append the `<text/>`
    element that will display the distribution name:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs: []
  type: TYPE_PRE
- en: Notice that we are moving the text element with `(-19,-19)` in order to avoid
    overlapping with the circle and the lines, and that is it.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The first thing you must do is play around with the values that are constant,
    such as the image size or text offset. This will help you better understand how
    changes affect the layout. There are various different functions to generate the
    layout, you can create it in a radial fashion or make it dendrite-like.
  prefs: []
  type: TYPE_NORMAL
- en: There are various ways to add interaction where you can have updates on certain
    portion of the code, make some parts animated, or even include HTML inside the
    SVG.
  prefs: []
  type: TYPE_NORMAL
- en: LED scoreboard using web fonts
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we are going create an LED scoreboard similar to the ones used
    in basketball games by making a clever use of HTML web fonts. The main goal of
    the recipe is to get introduced to web fonts and the features they offer.
  prefs: []
  type: TYPE_NORMAL
- en: '![LED scoreboard using web fonts](img/9282OT_02_12.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The full specification on web fonts can be found on W3C at [http://www.w3.org/TR/css3-webfonts/](http://www.w3.org/TR/css3-webfonts/).
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Before staring, you need to get the font we are going to use in this example.
    The files can be retrieved from the examples code, and they all have a `RADIOLAND`
    prefix.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To create the scoreboard, we will create an HTML page, a backing JavaScript
    code that will update the timers, and related data, as well as a CSS file that
    will use web fonts:'
  prefs: []
  type: TYPE_NORMAL
- en: First, we will start with creation of the HTML page; in the `head` section,
    include `stylesheet.css` and a dependency to jQuery
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs: []
  type: TYPE_PRE
- en: 'In the `body` part, add the `div` elements that we are going to use as placeholders
    for the scores and additionally include `scoreboard.js`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE63]'
  prefs: []
  type: TYPE_PRE
- en: 'We can now create the `stylesheet.css` file, defining first the web font that
    has the LED look:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE64]'
  prefs: []
  type: TYPE_PRE
- en: 'As the font is now defined as `RadiolandRegular`, we can refer to it directly:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE65]'
  prefs: []
  type: TYPE_PRE
- en: 'We can proceed with the creation of the JavaScript that will be used and we''ll
    use a mock object called `game` that has the game information. This object, in
    general, should be retrieved from a server using an AJAX call, but for simplicity,
    we are using some predefined values:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE66]'
  prefs: []
  type: TYPE_PRE
- en: 'In order to have the logic for creation of our display object and for fetching
    the data separated, we can put it in a function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE67]'
  prefs: []
  type: TYPE_PRE
- en: 'We also create a `config` object where we can define game parameters, such
    as number of periods and minutes per period:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE68]'
  prefs: []
  type: TYPE_PRE
- en: 'We then define the `updateCounter()` and `updateScore()` functions that will
    update the display and perform calculations for the timers. We are going to check
    if the current time is smaller that the start time of the game and set the timer
    to `00:00`. If current time is greater than the max possible, set the timer to
    max possible for a period:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE69]'
  prefs: []
  type: TYPE_PRE
- en: 'Following that, we add a function that will update the score:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE70]'
  prefs: []
  type: TYPE_PRE
- en: 'At the end, we can call the `setInterval` function that will call the updates
    every 500 milliseconds:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE71]'
  prefs: []
  type: TYPE_PRE
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The HTML and JavaScript code are pretty straightforward in this recipe, but
    on the other hand, we are taking a deeper look at the CSS and the font files.
  prefs: []
  type: TYPE_NORMAL
- en: With the addition of the `@font-face` at-rule, we can specify online fonts to
    use in other other elements. By doing this, we allow the use of different fonts
    that are not available on the client machine.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the definition of `@font-face`, we add `font-family`—a name definition that
    we can afterwards apply on any element. For example, consider the following example
    where we call our font `someName`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE72]'
  prefs: []
  type: TYPE_PRE
- en: 'You can notice the format definition named `format("woff")` next to `url` in
    this example as well as in our `stylesheet.css`. The following formats can be
    applied there:'
  prefs: []
  type: TYPE_NORMAL
- en: '`.woff`: This stands for **Web Open Font Format** (**WOFF**), a format developed
    by Mozilla and is one of the newer standards around. The full specification is
    available on [http://www.w3.org/TR/WOFF/](http://www.w3.org/TR/WOFF/). The format''s
    goal is to provided alternative solutions to other formats that would be optimal
    for use in cases where we need a certain level of licensing. The format allows
    metadata to be attached to the file itself that can contain the license.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`.ttf` and `.otf`: The **TrueType Font** (**TTF**) and the extended version
    **OpenType Font** (**OTF**) are some of the most widely used types. The standard
    for TrueType was developed by Apple Computers by the end of the 80s as a replacement
    of some of the PostScript standards. It provided the font developers with flexibility
    and control over how the fonts are shown to the user with many different sizes.
    Due to its popularity and features, it swiftly spreads over to other platforms
    such as Windows. OpenType is a successor to TrueType up on which it is based.
    The specification was developed by Microsoft with additions from Adobe Systems.
    The name OpenType is a registered trademark of Microsoft Corporation. Detailed
    specification can be found on [http://www.microsoft.com/typography/otspec/default.htm](http://www.microsoft.com/typography/otspec/default.htm).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`.eot`: Embedded OpenType fonts are a form of OpenType fonts designed for use
    on web pages. The extensions done on the embedded versions are closely related
    to making copy protection. As the other fonts are easily copied, EOT gives only
    a subset of the available characters to the user, making it more difficult to
    copy the font fully. More information on EOT can be found on the W3C specification
    at [http://www.w3.org/Submission/EOT/](http://www.w3.org/Submission/EOT/).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`.svg` and `.svgz`: SVG and the gunziped version with extension `.svgz` can
    be used to represent fonts. The font definition is stored as SVG glyph allowing
    easy support. More on SVG fonts can be found on the specification at [http://www.w3.org/TR/SVG/fonts.html](http://www.w3.org/TR/SVG/fonts.html).
    Unfortunately, this format is not supported in IE and Firefox at the time of writing.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'There are few other attributes that can be used on `@font-face`, such as `font-style`,
    `font-weight`, and `font-stretch`. Also, we can specify a range of the characters
    used in Unicode by setting a value for `unicode-range`. Some examples for this
    taken from the specification are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`unicode-range: U+0-7F;`: This is a code range for basic ASCII characters'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`unicode-range: U+590-5ff;`: This is a code range for Hebrew characters'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: One of the problems with web fonts is that no particular format is requested
    by the specification of CSS2\. This often means that we need to offer several
    different formats to get identical experience across browsers.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: There a many `font-face` definition generators that simplify the creation of
    all of these possible options. One such is **FontSquirrel** ([http://www.fontsquirrel.com/tools/webfont-generator](http://www.fontsquirrel.com/tools/webfont-generator)).
  prefs: []
  type: TYPE_NORMAL
- en: Web fonts are becoming one of the most common building blocks of the Web, and
    as such, they should be always considered when we are in a need of a great looking
    typography. Images, SVG, Coufons, and similar types just don't play well with
    text. We might get great looking text using those, but the text will not be accessible
    by search engines, most of the accessibility software will ignore it, and it might
    even get the page size larger. On the other hand, using text allows us to do various
    CSS tweaks on the data where we can use selectors, such as `:first-letter`, `:first-line`,
    and `:lang`.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Google has a good selection of fonts that we can use that are provided on [http://www.google.com/fonts/](http://www.google.com/fonts/).
    Besides the standard inclusion of fonts, they also have a JavaScript-based font
    loader. This loader solves the problem of seeing the fallback text rendering while
    the "real" font is loading, commonly known as **Flash of Unstyled Text** (**FOUT**).
    There, for example, we can do the following to include a font called `''Noto Sans''`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE73]'
  prefs: []
  type: TYPE_PRE
- en: 'Afterwards, we can simply include it in CSS using `font-family: ''Noto Sans'',
    sans-serif;`.'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: More on the options for Google fonts can be found at [https://developers.google.com/fonts/](https://developers.google.com/fonts/).
    As for the so-called FOUT and some of the ways to fight it there is more on an
    article by *Paul Irish* at [http://paulirish.com/2009/fighting-the-font-face-fout/](http://paulirish.com/2009/fighting-the-font-face-fout/).
  prefs: []
  type: TYPE_NORMAL
