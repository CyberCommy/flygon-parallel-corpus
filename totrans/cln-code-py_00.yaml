- en: Preface
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This is a book about software engineering principles applied to Python.
  prefs: []
  type: TYPE_NORMAL
- en: There are many books about software engineering, and many resources available
    with information about Python. The intersection of those two sets, though, is
    something that requires action, and that's the gap this book tries to bridge.
  prefs: []
  type: TYPE_NORMAL
- en: It would not be realistic to cover all possible topics about software engineering
    in a single book because the field is so wide that there are entire books dedicated
    to certain topics. This book focuses on the main practices or principles of software
    engineering that will help us write more maintainable code, and how to write it
    by taking advantage of the features of Python at the same time.
  prefs: []
  type: TYPE_NORMAL
- en: 'A word to the wise: there is no single solution to a software problem. It''s
    usually about trade-offs. Each solution will have upsides and downsides, and some
    criteria must be followed to choose between them, accepting the costs and getting
    the benefits. There is usually no single best solution, but there are principles
    to be followed, and as long as we follow them we will be walking a much safer
    path. And that is what this book is about: inspiring the readers to follow principles
    and make the best choices, because even when facing difficulties, we will be much
    better off if we have followed good practices.'
  prefs: []
  type: TYPE_NORMAL
- en: 'And, speaking of good practices, while some of the explanations follow established
    and proven principles, other parts are opinionated. But that doesn''t mean it
    has to be done in that particular way only. The author does not claim to be any
    sort of authority on the matter of clean code, because such a title cannot possible
    exist. The reader is encouraged to engage in critical thinking: take what works
    the best for your project, and feel free to disagree. Differences of opinions
    are encouraged as long as they yield an enlightening debate.'
  prefs: []
  type: TYPE_NORMAL
- en: My intention behind this book is to share the joys of Python, and idioms I have
    learned from experience, in the hope that readers will find them useful to elevate
    their expertise with the language.
  prefs: []
  type: TYPE_NORMAL
- en: The book explains the topics through code examples. These examples assume the
    latest version of Python at the time of this writing is used, namely Python 3.7,
    although future versions should be compatible as well. There are no peculiarities
    in the code that bind it to any particular platform, therefore with a Python interpreter,
    the code examples can be tested on any operating system.
  prefs: []
  type: TYPE_NORMAL
- en: In most of the examples, with the goal of keeping the code as simple as possible,
    the implementations and their tests are written in plain Python using just the
    standard libraries. In some chapters, extra libraries were needed, and in order
    to run the examples of those cases, instructions have been provided along with
    the respective `requirements.txt` file.
  prefs: []
  type: TYPE_NORMAL
- en: Throughout this book we will discover all the features Python has to offer to
    make our code better, more readable, and easier to maintain. We do so not only
    by exploring the features of the language, but also by analyzing how software
    engineering practices can be applied in Python. The reader will notice that some
    of the reference implementations differ in Python, other principles or patterns
    change slightly, and others might not be even applicable all along. Understanding
    each case represents an opportunity to understand Python more deeply.
  prefs: []
  type: TYPE_NORMAL
- en: Who this book is for
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This book is suitable for all software engineering practitioners who are interested
    in software design or learning more about Python. It is assumed that the reader
    is already familiar with the principles of object-oriented software design and
    has some experience writing code.
  prefs: []
  type: TYPE_NORMAL
- en: In terms of Python, the book is suitable for all levels. It's good for learning
    Python because it is organized in such a way that the content is in increasing
    order of complexity. The first chapters will cover the basics of Python, which
    is a good way to learn the main idioms, functions, and utilities available in
    the language. The idea is not just to solve some problems with Python, but to
    do so in an idiomatic way.
  prefs: []
  type: TYPE_NORMAL
- en: Experienced programmers will also benefit from the topics in this book, as some
    sections cover advanced topics in Python, such as decorators, descriptors, and
    an introduction to asynchronous programming. It will help the reader discover
    more about Python because some of the cases are analyzed from the internals of
    the language itself.
  prefs: []
  type: TYPE_NORMAL
- en: It is worth emphasizing the word *practitioners* in the first sentence of this
    section. This is a pragmatic book. Examples are limited to what the case of study
    requires, but are also intended to resemble the context of a real software project.
    It is not an academic book, and as such the definitions made, the remarks made,
    and the recommendations given are to be taken with caution. The reader is expected
    to examine these recommendations critically and pragmatically rather than dogmatically.
    After all, practicality beats purity.
  prefs: []
  type: TYPE_NORMAL
- en: What this book covers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '[Chapter 1](bba62a64-dfe9-478f-9b33-6c3240d75f59.xhtml), *Introduction, Code
    Formatting, and Tools*, is an introduction to the main tools you need to set up
    a development environment in Python. We cover the basics a Python developer is
    recommended to know to start working with the language, as well as some guidelines
    for maintaining readable code in the project, such as tools for static analysis,
    documentation, type checking, and code formatting.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 2](c6a1dd9e-e567-4254-b5cf-1033b8b89c3d.xhtml), *Pythonic Code*, looks
    at the first idioms in Python, which we will continue to use in the following
    chapters. We cover the particular features of Python, how they should be used,
    and we start building knowledge around the idea that Pythonic code is in general
    much better quality code.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 3](0aec97c9-5777-4cd5-8c76-134440c49402.xhtml), *General Traits of
    Good Code*, reviews general principles of software engineering that focus on writing
    maintainable code. We explore the idea and apply the concepts with the tools in
    the language.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 4](532e5ff0-6f3d-44a5-b2a9-94c686bbd6ba.xhtml), *The SOLID Principles*,
    covers a set of design principles for object-oriented software design. This acronym
    is part of the language or jargon of software engineering, and we see how each
    one of them can be applied to Python. Arguably not all of them are entirely applicable
    due to the nature of the language.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 5](f5d9c7e4-4092-48de-a22c-564df482b021.xhtml), *Using Decorators
    to Improve Our Code*, looks at one of the greatest features of Python. After understanding
    how to create decorators (for functions and classes), we put them in action for
    reusing code, separating responsibilities, and creating more granular functions.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 6](1091614c-9831-4645-aaa6-140ae13f08d8.xhtml), *Getting More Out
    of Our Objects with Descriptors*, explores descriptors in Python, which take object-oriented
    design to a new level. While this is a feature more related to frameworks and
    tools, we can see how to improve the readability of our code with descriptors,
    and also reuse code.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 7](32503c77-5ff2-4d35-af0e-8d9300cfa357.xhtml), *Using Generators*,
    shows that generators are probably the best feature of Python. The fact that iteration
    is a core component of Python could make us think that it leads to a new programming
    paradigm. By using generators and iterators in general, we can think about the
    way we write our programs. With the lessons learned from generators, we go further
    and learn about coroutines in Python, and the basics of asynchronous programming.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 8](9f77174d-125b-4fdc-8cfb-563d15edcb64.xhtml), *Unit Testing and
    Refactoring*, discusses the importance of unit tests in any code base that claims
    to be maintainable. The chapter reviews the importance of unit tests, and we explore
    the main frameworks for this (`unittest` and `pytest`).'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 9](dee5b4ed-34cd-4077-a5b4-83d4853e6e56.xhtml), *Common Design Patterns*,
    reviews how to implement the most common design patterns in Python, not from the
    point of view of solving a problem, but by examining how they solve problems by
    leveraging a better and more maintainable solution. The chapter mentions the peculiarities
    of Python that have made some of the design patterns invisible and takes a pragmatic
    approach to implement some of them.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 10](87530c54-bf97-48c2-a557-de448cd690d4.xhtml), *Clean Architecture*,
    focuses on the idea that clean code is the base of a good architecture. All those
    details we mentioned in the first chapter, and everything else revisited along
    the way, will play a critical role in the entire design when the system is deployed.'
  prefs: []
  type: TYPE_NORMAL
- en: To get the most out of this book
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The reader should be familiarized with Python's syntax and have a valid Python
    interpreter installed, which can be downloaded from[ https://www.python.org/downloads/](https://www.python.org/downloads/)
  prefs: []
  type: TYPE_NORMAL
- en: It is recommended to follow the examples in the book and test the code locally.
    For this, it is highly recommended to create a virtual environment with Python
    3.7 and run the code with this interpreter. Instructions to create a virtual environment
    can be found at [https://docs.python.org/3/tutorial/venv.html](https://docs.python.org/3/tutorial/venv.html).
  prefs: []
  type: TYPE_NORMAL
- en: Download the example code files
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You can download the example code files for this book from your account at [www.packtpub.com](http://www.packtpub.com).
    If you purchased this book elsewhere, you can visit [www.packtpub.com/support](http://www.packtpub.com/support)
    and register to have the files emailed directly to you.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can download the code files by following these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Log in or register at [www.packtpub.com](http://www.packtpub.com/support).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the SUPPORT tab.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on Code Downloads & Errata.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter the name of the book in the Search box and follow the onscreen instructions.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Once the file is downloaded, please make sure that you unzip or extract the
    folder using the latest version of:'
  prefs: []
  type: TYPE_NORMAL
- en: WinRAR/7-Zip for Windows
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Zipeg/iZip/UnRarX for Mac
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 7-Zip/PeaZip for Linux
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The code bundle for the book is also hosted on GitHub at [https://github.com/PacktPublishing/Clean-Code-in-Python](https://github.com/PacktPublishing/Clean-Code-in-Python). In
    case there's an update to the code, it will be updated on the existing GitHub
    repository.
  prefs: []
  type: TYPE_NORMAL
- en: We also have other code bundles from our rich catalog of books and videos available
    at **[https://github.com/PacktPublishing/](https://github.com/PacktPublishing/)**.
    Check them out!
  prefs: []
  type: TYPE_NORMAL
- en: Conventions used
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are a number of text conventions used throughout this book.
  prefs: []
  type: TYPE_NORMAL
- en: '`CodeInText`: Indicates code words in text, database table names, folder names,
    filenames, file extensions, pathnames, dummy URLs, user input, and Twitter handles.
    Here is an example: "Then, just running the `pylint` command is enough to check
    it in the code."'
  prefs: []
  type: TYPE_NORMAL
- en: 'A block of code is set as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'When we wish to draw your attention to a particular part of a code block, the
    relevant lines or items are set in bold:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Any command-line input or output is written as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '**Bold**: Indicates a new term, an important word, or words that you see onscreen.
    For example, words in menus or dialog boxes appear in the text like this. Here
    is an example: "Select System info from the Administration panel."'
  prefs: []
  type: TYPE_NORMAL
- en: Warnings or important notes appear like this.Tips and tricks appear like this.
  prefs: []
  type: TYPE_NORMAL
