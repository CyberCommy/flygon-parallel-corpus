- en: Using ESLint and Prettier in Vue CLI 3
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在Vue CLI 3中使用ESLint和Prettier
- en: 'In this chapter, we''ll learn why ESLint is useful and we''ll see how to lint
    our code with it. We''ll also discuss different style guides: standard, Airbnb,
    and Google. Specifically, we''ll look at the following subjects:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将学习ESLint的用处，并看看如何使用它对我们的代码进行lint。我们还将讨论不同的风格指南：标准、Airbnb和Google。具体来说，我们将看以下主题：
- en: What ESLint is, and how to configure it on its own
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: ESLint是什么，以及如何单独配置它
- en: The difference between installing npm packages locally and globally
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 本地安装npm包和全局安装npm包之间的区别
- en: Installing ESLint locally and running it with npx
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 本地安装ESLint并使用npx运行它
- en: Using ESLint in Vue CLI 3
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在Vue CLI 3中使用ESLint
- en: Configuring ESLint using Vue CLI 3 UI
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Vue CLI 3 UI配置ESLint
- en: We'll start by looking at what ESLint is and how to configure it as a standalone
    `npm` package.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将首先看一下ESLint是什么，以及如何将其配置为一个独立的`npm`包。
- en: What ESLint is, and how to configure it on its own
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: ESLint是什么，以及如何单独配置它
- en: In this chapter, we will discuss the role of ESLint. ESLint has to do with code
    quality. When you work on a team, every team member will bring their own little
    quirks and ideas on the best way to write JavaScript. Even if your team has some
    clear-cut rules on specific coding styles and how to write your code, how do you
    guarantee that each team member will follow the rules? How do you make sure that
    they deliver consistent code quality? We are human after all, which means that
    we all have those days when we do our best, but simply forget about one little
    thing that we had to pay attention to.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将讨论ESLint的作用。ESLint与代码质量有关。当你在一个团队中工作时，每个团队成员都会带来自己对于如何编写JavaScript的最佳方式的小怪癖和想法。即使你的团队对特定的编码风格和如何编写代码有明确的规则，你如何保证每个团队成员都遵守规则？你如何确保他们提供一致的代码质量？毕竟，我们都是人类，这意味着我们都有那些我们尽力了，但简单地忘记了要注意的小事情的日子。
- en: Given a long enough period of time, our team will begin producing stylistically
    inconsistent code. The next thing that happens is, everyone in the team starts
    perceiving the JavaScript style guide as *a suggestion*, not something that you
    should *really adhere to*.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在足够长的时间内，我们的团队将开始产生风格不一致的代码。接下来会发生的事情是，团队中的每个人开始将JavaScript风格指南视为*建议*，而不是你应该*真正遵守*的东西。
- en: Luckily, there are tools that allow us to automatically improve the look of
    our code and to format it when it doesn't follow the prescribed way of doing things.
    ESLint is an example of such a tool.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 幸运的是，有一些工具可以让我们自动改善代码的外观，并在不遵循规定的做事方式时对其进行格式化。ESLint就是这样一个工具的例子。
- en: Basically, ESLint is a way for you to outsource the *tabs versus spaces* and
    other similar debates to a piece of software that will take care of these issues
    in a streamlined, consistent manner.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 基本上，ESLint是让你把*制表符与空格*等类似辩论外包给一款软件的方式，这款软件将以一种流畅、一致的方式处理这些问题。
- en: In this chapter, we'll also briefly mention the difference between global and
    local node modules, that is, the difference between installing `npm` packages
    globally and locally.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们还将简要提到全局和本地node模块之间的区别，即全局安装`npm`包和本地安装之间的区别。
- en: Installing npm packages globally versus installing npm packages locally
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 全局安装npm包与本地安装npm包的区别
- en: 'Here''s an example of a global installation:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个全局安装的例子：
- en: '[PRE0]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Here''s an example of a local installation:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个本地安装的例子：
- en: '[PRE1]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: So, what's the difference?
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，有什么区别呢？
- en: Global packages are installed in one specific place on your computer. It does
    not matter what folder you were in when you installed them; *they are not saved
    inside that folder*, and they are made available globally in your command line.
    Thus, if we want to run a package from the command line, global installation is
    one way to do it.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 全局包安装在计算机的一个特定位置。无论您在安装它们时所在的文件夹是什么，*它们都不会保存在该文件夹内*，并且在命令行中全局可用。因此，如果我们想要从命令行运行一个包，全局安装是一种方法。
- en: You run the `npm install` command from a command-line program. A command-line
    program will always run from inside a directory. Using commands such as `cd ..`
    to go up a directory in you OS file system, or `cd <directory-name>` to drill
    down into a directory, you can choose what folder you want your command-line program
    to be in, when installing an `npm` package.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以从命令行程序中运行`npm install`命令。命令行程序将始终从一个目录内运行。使用诸如`cd ..`来在您的操作系统文件系统中返回上一级目录，或者`cd
    <directory-name>`来进入一个目录，您可以选择在安装`npm`包时希望您的命令行程序所在的文件夹。
- en: To install an `npm` package locally, means that the package is saved inside
    the current directory your command-line program points to. When the `npm install`
    command is run, the new package you're installing will be saved inside the `node_modules`
    directory of the current directory you're in. If the `node_modules` directory
    doesn't exist, it will be added when the `npm install` command is run, *inside
    the current directory*.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 将`npm`包本地安装意味着该包保存在当前命令行程序指向的目录内。当运行`npm install`命令时，您正在安装的新包将保存在您所在的当前目录的`node_modules`目录中。如果`node_modules`目录不存在，当运行`npm
    install`命令时，它将被添加*在当前目录内*。
- en: The downside of using global modules is the versioning problem. With local modules,
    each different directory and each different application on your machine has its
    own version of a module. However, if you have a global package and you decide
    to update it, the updated version of your globally installed module might break
    your application because of compatibility issues between that new version and
    the rest of the code in your specific app in a specific directory.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 使用全局模块的缺点是版本问题。对于本地模块，您计算机上的每个不同目录和每个不同应用程序都有自己的模块版本。然而，如果您有一个全局包，并决定更新它，全局安装的模块的更新版本可能会因为与特定目录中特定应用程序中其余代码的兼容性问题而破坏您的应用程序。
- en: As a rule of thumb, the `npm` packages should be installed locally, since you
    avoid the versioning problem.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 作为一个经验法则，应该将`npm`包安装在本地，因为可以避免版本问题。
- en: 'To learn more about installing `npm` packages locally, visit this web page:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解更多关于本地安装`npm`包的信息，请访问此网页：
- en: '[https://docs.npmjs.com/downloading-and-installing-packages-locally.](https://docs.npmjs.com/downloading-and-installing-packages-locally)'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://docs.npmjs.com/downloading-and-installing-packages-locally.](https://docs.npmjs.com/downloading-and-installing-packages-locally)'
- en: One downside of using locally installed packages is that the specific command,
    such as `prettier`, `webpack`, or `eslint`, doesn't become available on the command
    line. Instead, you need to run a locally-installed node module as an npm script.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 使用本地安装的包的一个缺点是，特定命令，如`prettier`、`webpack`或`eslint`，不会在命令行上可用。相反，您需要将本地安装的节点模块作为npm脚本运行。
- en: Alternatively, this locally-installed module can actually be run on the command
    line directly, using the `npx` command, which we'll discuss in the next section.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，这个本地安装的模块实际上可以直接在命令行上运行，使用`npx`命令，我们将在下一节中讨论。
- en: What is Prettier?
  id: totrans-29
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 什么是Prettier？
- en: Prettier is a code formatter. It formats your code whenever you save a file.
    The project website can be found at [https://prettier.io/](https://prettier.io/).
    In the example that follows, we'll be running a locally-installed Prettier npm
    module.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
- en: Running locally-installed npm modules on the command line using npx
  id: totrans-31
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To begin working with Prettier, we''ll start a new project as follows:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Next, inside the new `Chapter6` folder, we''ll add another folder, `prettier-practice`, as
    follows:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Next, we''ll initialize `npm` with defaults as follows:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Next, let''s add one single file, `index.html`, as follows:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: The preceding command created and opened a new `index.html` file inside VS Code.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
- en: 'We''ll be adding a small Vue app without any build process. Let''s add the
    following code to our `index.html` file:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: You can see this simple Vue app running on CodePen, at this URL: [https://codepen.io/AjdinImsirovic/pen/jprwKe.](https://codepen.io/AjdinImsirovic/pen/jprwKe)
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
- en: Next, let's add Prettier to see how it will format our code.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
- en: Installing Prettier globally and running it on index.html
  id: totrans-45
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To install Prettier globally, we can use the following command:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Then, to start using it, you can just run the `--help` flag to see all the
    options that are available, such as the following:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Now, you can run the `prettier index.html` command to see the formatted code
    right in your console. Alternatively, you can run the command `prettier index.html
    --write`, so that the formatted output actually gets saved in the file you specified.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
- en: Next, we'll see how to install Prettier locally and run it with npx.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
- en: Running Prettier with npx
  id: totrans-52
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The npx utility is an **NPM package runner**. It was added to NPM in version
    5.2.0 (in the first half of 2017). It makes it easier to run packages from the
    `node_modules` directory, since we don't have to rely on `npm run <someScriptName>`
    as we did in `package.json` before.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
- en: 'In this example, we''ll see how to install Prettier as a development dependency,
    and how to run it with npx. First, we need to install it with the `--save-dev`
    flag inside our `prettier-practice` folder as follows:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Once it's completed, our `package.json` will be updated, and we can start using
    Prettier.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
- en: The easiest way to do so, is to simply run just the Prettier command inside
    VS Code's Terminal.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
- en: 'To see the available options, we can run the following command:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'To actually run a command with some options passed, we can run this code:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: There are many other ways in which npx can be used, and it's a great tool to
    familiarize yourself with.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
- en: Another interesting exercise to try is to compare Prettier's formatting with
    the readily available VS Code's formatter. The VS Code's formatter is triggered
    using the *Shift* + *Alt* + *F* keyboard combination. We can quickly re-run the
    `npx prettier` command we just ran, by pressing the up arrow while inside VS Code's
    console.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
- en: Next, we'll make another little project to demonstrate working with ESLint.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
- en: Working with ESLint
  id: totrans-65
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: ESLint is a JavaScript linter. You can find it at [https://eslint.org/](https://eslint.org/).
    A linter performs code analysis. It compares your code against a certain standard.
    You could say it's a tool to check code quality. Linters are great for team environments,
    because they make our code base follow a certain code style, and because they
    ensure that, there's one less thing to talk about during code reviews.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
- en: 'An example of a code style can be found here: [https://github.com/airbnb/javascript](https://github.com/airbnb/javascript).
    This is Airbnb''s JavaScript style guide. If you scroll down the page, you''ll
    see that there is a lot of information to read through: how to access primitive
    types, how to reassign references, how to group shorthand properties in object
    declarations, and so on.'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
- en: It' s important to understand that ESLint only analyzes your code; it doesn't
    run it. However, it does locate errors, and can also fix them. Effectively, it
    can change your code if you set it up to do so.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
- en: There are other JavaScript linting tools out there, such as JSLint, or JSHint.
    ESLint is touted as more customizable.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
- en: Installing ESLint globally and unsuccessfully running it from the command line
  id: totrans-70
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To install ESLint node module globally, run the following command:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Now, our `eslint` command is globally available.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
- en: Now, we'll create a new folder, `eslint-practice`. Inside of it, we'll make
    a new file, `eslint-test.js`.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the file in VS Code and add this code to it:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Save the file.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, open the command line inside VS Code with *Ctrl* + *`*, and run the following
    command:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'The output you''ll receive is this:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Why did this happen? There is no ESLint config file, but why does ESLint need
    a config file to run?
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
- en: This is because the rules that ESLint will use to check our code are specified
    in the **config** file. If there's no config file, ESLint doesn't know which rules
    to apply when linting our code.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
- en: The solution for this problem is interesting. Without a `package.json`, we cannot
    initialize ESLint. Since we have to install a new NPM project, we might as well
    just install the ESLint node module locally. It's not a must, but it's a preferred
    option for a streamlined workflow.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
- en: Running eslint --init command
  id: totrans-85
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Obviously, we can''t run the `eslint` command without an ESLint config file.
    However, we can''t initialize an ESLint config file without a `package.json` file.
    This means we first need to run `npm init`, so let''s do that now as follows:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Now, we can initialize `eslint`. When we run the `eslint --init` command, we''ll
    be asked several questions in command-line prompts. Our ESLint configuration will
    depend on the answers we select. Here are the selections we need to pick for this
    example:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
- en: Pick `To check syntax, find problems, and enforce code style`
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Pick `None of these`
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Pick `None of these` (for this simple demonstration we won't use `Vue.js` because
    that would require installing additional dependencies, and at this point we are
    only test-driving ESLint)
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Pick `Browser`
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Pick `Answer questions about your style`
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Pick `JSON`
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Pick `Spaces`
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Pick `Single`
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Pick `Windows`
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Type *Y* (yes, we do require semicolons)
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Pick *''*`JavaScript`*''* (as the answer to the What format do you want your
    config file to be in?)
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Once you''ve answered all the questions, you''ll be greeted with the following
    output:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Reading this message, we can now appreciate that the maintainers of ESLint
    are nudging us toward the best practice of limiting the number of globally installed
    `npm` packages on our computers, and, instead choosing to install our node modules
    locally in our projects. The preceding message also reads that we need the `eslint@latest`
    dependency to be able to run our ESLint configuration, so let''s add it right
    now, as follows:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'It has been mentioned earlier in the book, but this is a great time for a refresher:
    the `--save-dev` flag means that the package we are installing is only to be used
    in development, not in production. The `--save-dev` option does not set the local
    module. You can install ESLint locally by simply running: `npm install estlint@latest`.
    However, both the `--save-dev` and `--verbose` flags have their place, but it
    needs to be clear that they don''t have anything to do with locally installing
    an `npm` package.'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
- en: Now, we are ready to run ESLint on our project's JavaScript file. Before we
    do, let's inspect the contents of the `.eslintrc.js`.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
- en: Understanding the structure of .eslintrc.js config file
  id: totrans-106
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Based on the rules we picked, our generated `.eslintrc.js` file looks like
    this:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Inside the exported object in the config file, we can see that the environment
    is set to `browser`, and that the `es6` property is set to `true`, which means
    the ES6 syntax is enabled automatically.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
- en: 'With `''extends'': ''eslint:recommended''`, we turn on the recommended core
    rules that report common problems. These rules are listed on the following page: [https://eslint.org/docs/rules/](https://eslint.org/docs/rules/).'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
- en: The `'globals'` entry lists additional global variables that will be accessed
    when ESLint is run using the specified configuration.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
- en: With the `parserOptions` property, we set the ECMA Script version to use as
    `2018`, which is, of course, ECMA Script 9\. Finally, the `'rules'` property specifies
    the rule to be applied, and at what **error level**.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
- en: Running ESLint on a JavaScript file
  id: totrans-113
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now, we can run the `eslint` command on our `eslint-test.js` file. Since it
    is installed globally, we could simply run `eslint eslint-test.js`.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
- en: 'However, since this is discouraged by the very maintainers of the module, let''s
    instead run it locally, with the following command:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Running the preceding command will produce the following output:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'We can also see the error right inside VS Code, as a single character, the
    `(` character, underlined with a wavy red color on line one of our `eslint-test.js`
    file. Of course, this error means that we are missing our function''s name. So
    let''s update the code to this:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Notice that we've also removed the semi-colon after the call to `console.log`
    method. Let's run `eslint` again.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
- en: 'This time we get five new errors showing as follows:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: Looking at the end of each line in the preceding output, we can see the specific **ESLint
    rules** that our code violates. At the beginning of each line, we can see the
    line number, followed by a colon, followed by the exact place of the first character
    that breaks an ESLint rule. Thus, 1:10 can be read as *line 1, character in the
    10th position*.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s run `eslint` again, with the suggested `--fix` flag as follows:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Now our code gets formatted, as follows:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'However, we still get some errors, as follows:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'What we can conclude from this little exercise, is that ESLint will do the
    following:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
- en: Point out rule violations in our code.
  id: totrans-132
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Allow us to pass the `--fix` flag to remedy those errors that are fixable by
    the tool itself.
  id: totrans-133
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Next, we'll update the error level rules.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
- en: Updating error level rules in ESLint
  id: totrans-135
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'By default, all rules have their error levels set to `''error''`. To manually
    set a different error level, such as `''warn''`, we might add an `errorLevel` constant
    and update our rules to this code:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: Now, with this update, our error level for the `linebreak-style` and `indent` rules
    will be `error`, and the error level for the `quotes` and `semi` rules will be `warn`.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
- en: Next, we'll work with ESLint in Vue CLI 3.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
- en: Configuring ESLint in Vue CLI 3
  id: totrans-140
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now that we''re familiar with Prettier and ESLint, we''ll install them into
    a new project using the Vue CLI 3\. Let''s point our Git Bash to the root of `Chapter6` folder
    and run this command:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Once VS Code is open, we''ll toggle on the command line, and run the following
    command:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: Then, we'll just accept the default installation with Babel and ESLint, and
    wait for the app to install.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
- en: Next, similar to what we did before, we will run `vue ui` and then import the
    `vc3-eslint` app to our Vue CLI 3 GUI Dashboard.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
- en: As we can see, ESLint comes as a default installation in our Vue CLI 3 apps.
    But how do we configure ESLint, as we did in the previous section of this chapter?
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
- en: Setting up ESLint configurations in Vue CLI 3 GUI
  id: totrans-148
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: With our `vc3-eslint` app loaded inside the Vue CLI 3 UI, let's click the configuration
    icon.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
- en: 'We''ll click the ESLint configuration, which will update the right-hand pane
    in the Project configuration window as follows:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/245a02c9-f576-489f-85a7-92884e8507f7.png)'
  id: totrans-151
  prefs: []
  type: TYPE_IMG
- en: 'Figure 6.1: Clicking the configuration icon shows possible configurations for
    your app'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
- en: 'There we can see two main entries in this view: Lint on save, and Select config.'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
- en: The Lint on save option is currently toggled on, but we can toggle it off by
    clicking on the green switch on the right-hand side of the Lint on save option.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
- en: We can also choose a different configuration in the Select config entry. The
    default setting can be changed to either the Strongly recommended or to the Recommended
    setting. We saw earlier in this chapter how this setting can be configured inside
    `eslintrc.js` file.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
- en: You also have the option to click on the Open eslintrc button in the top-right
    corner of the page to open our project's ESLint configuration file, so that you
    can edit it directly.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, we can see a list of all the ESLint rules in our project by clicking
    the Rules tab at the top of the configuration panel as follows:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/ef290a9f-6456-4c95-86dc-8a8eeca3c6e7.png)'
  id: totrans-158
  prefs: []
  type: TYPE_IMG
- en: 'Figure 6.2: Selecting individual rules in the ESLint configuration screen in
    Vue CLI 3 UI'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
- en: The screen will show the Essential rules that are applied by default in our
    ESLint configuration, whereas, on the General tab we can change the entire ruleset
    by clicking the drop down in the Select config entry; inside the rules tab, we
    can mix and match individual rules, and then save our updates. This makes it possible
    to update the rules and make custom changes any way we like.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
- en: Using ESLint and Prettier together in a Vue CLI 3 UI project
  id: totrans-161
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'If you are starting a project from scratch in Vue CLI 3 UI, you can also make
    ESLint and Prettier work together. Here''s how:'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
- en: 'We begin by pointing our Vue UI to a root folder as follows. It''s important
    to verify you are not inside an existing Vue app:'
  id: totrans-163
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/91292f7b-75fc-4cc6-97a6-c72f82a515ab.png)'
  id: totrans-164
  prefs: []
  type: TYPE_IMG
- en: 'Figure 6.3: Creating a new project in Vue CLI 3 UI'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, we''ll click the Select this folder button to proceed, and then choose
    our project''s name as follows:'
  id: totrans-166
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/201b603d-6613-4c65-a305-b32d971b8361.png)'
  id: totrans-167
  prefs: []
  type: TYPE_IMG
- en: 'Figure 6.4: Adding project name'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
- en: Next, we'll click the Select this folder button to proceed, and then choose
    our project's name. Click Next to proceed and you'll be taken to the Presets tab.
  id: totrans-169
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Once you''re on the Presets tab, select the Manual preset to manually select
    features, then click Next again. On the Features tab, the Babel and linter / formatter
    features should already be preselected, so just click Next again to go to the
    Configuration screen, as follows:'
  id: totrans-170
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/c963b523-75b9-4c53-add7-f5b575ef7274.png)'
  id: totrans-171
  prefs: []
  type: TYPE_IMG
- en: 'Figure 6.5: Choosing ESLint + Prettier from the Configuration screen'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
- en: 'The Pick a linter / formatter config gives us several options. Choose the *ESLint
    + Prettier* at the bottom. Once we click it, we''ll be greeted with an option
    to save the preset, so let''s save it as in the following image:'
  id: totrans-173
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/82ace185-cda8-4325-93a5-1bd033cf705f.png)'
  id: totrans-174
  prefs: []
  type: TYPE_IMG
- en: 'Figure 6.6: Saving a new preset in Vue CLI 3 UI'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
- en: Once we click the Create a new preset button, we've finished customizing our
    project, and we can wait for all the dependencies to be installed.
  id: totrans-176
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once it's done, you'll see the Welcome to your new project message. Now, you
    can click on the Project dependencies link on the left-hand menu. Besides the
    expected dependencies (`babel-eslint`, `eslint`, `eslint-plugin-vue`, and `vue-template-compiler`),
    you'll also see the `@vue/eslint-config-prettier` dev dependency. As we can see,
    this is an official `vue npm` module, as it has the `@vue` namespace.
  id: totrans-177
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Summary
  id: totrans-178
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we've looked at differences between `npm` and `npx`, and global
    and local installations of node modules. We've further discussed ESLint and Prettier.
    We've seen how to install each of them on a stand-alone project, and we've seen
    how to configure ESLint in a default Vue app using the Vue CLI 3 GUI. We've also
    seen how to set up ESLint with Prettier, inside Vue CLI 3.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will explore using CSS, SCSS, and PostCSS in Vue CLI
    3.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
