- en: Using ESLint and Prettier in Vue CLI 3
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we''ll learn why ESLint is useful and we''ll see how to lint
    our code with it. We''ll also discuss different style guides: standard, Airbnb,
    and Google. Specifically, we''ll look at the following subjects:'
  prefs: []
  type: TYPE_NORMAL
- en: What ESLint is, and how to configure it on its own
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The difference between installing npm packages locally and globally
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installing ESLint locally and running it with npx
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using ESLint in Vue CLI 3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Configuring ESLint using Vue CLI 3 UI
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We'll start by looking at what ESLint is and how to configure it as a standalone
    `npm` package.
  prefs: []
  type: TYPE_NORMAL
- en: What ESLint is, and how to configure it on its own
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we will discuss the role of ESLint. ESLint has to do with code
    quality. When you work on a team, every team member will bring their own little
    quirks and ideas on the best way to write JavaScript. Even if your team has some
    clear-cut rules on specific coding styles and how to write your code, how do you
    guarantee that each team member will follow the rules? How do you make sure that
    they deliver consistent code quality? We are human after all, which means that
    we all have those days when we do our best, but simply forget about one little
    thing that we had to pay attention to.
  prefs: []
  type: TYPE_NORMAL
- en: Given a long enough period of time, our team will begin producing stylistically
    inconsistent code. The next thing that happens is, everyone in the team starts
    perceiving the JavaScript style guide as *a suggestion*, not something that you
    should *really adhere to*.
  prefs: []
  type: TYPE_NORMAL
- en: Luckily, there are tools that allow us to automatically improve the look of
    our code and to format it when it doesn't follow the prescribed way of doing things.
    ESLint is an example of such a tool.
  prefs: []
  type: TYPE_NORMAL
- en: Basically, ESLint is a way for you to outsource the *tabs versus spaces* and
    other similar debates to a piece of software that will take care of these issues
    in a streamlined, consistent manner.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we'll also briefly mention the difference between global and
    local node modules, that is, the difference between installing `npm` packages
    globally and locally.
  prefs: []
  type: TYPE_NORMAL
- en: Installing npm packages globally versus installing npm packages locally
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Here''s an example of a global installation:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Here''s an example of a local installation:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: So, what's the difference?
  prefs: []
  type: TYPE_NORMAL
- en: Global packages are installed in one specific place on your computer. It does
    not matter what folder you were in when you installed them; *they are not saved
    inside that folder*, and they are made available globally in your command line.
    Thus, if we want to run a package from the command line, global installation is
    one way to do it.
  prefs: []
  type: TYPE_NORMAL
- en: You run the `npm install` command from a command-line program. A command-line
    program will always run from inside a directory. Using commands such as `cd ..`
    to go up a directory in you OS file system, or `cd <directory-name>` to drill
    down into a directory, you can choose what folder you want your command-line program
    to be in, when installing an `npm` package.
  prefs: []
  type: TYPE_NORMAL
- en: To install an `npm` package locally, means that the package is saved inside
    the current directory your command-line program points to. When the `npm install`
    command is run, the new package you're installing will be saved inside the `node_modules`
    directory of the current directory you're in. If the `node_modules` directory
    doesn't exist, it will be added when the `npm install` command is run, *inside
    the current directory*.
  prefs: []
  type: TYPE_NORMAL
- en: The downside of using global modules is the versioning problem. With local modules,
    each different directory and each different application on your machine has its
    own version of a module. However, if you have a global package and you decide
    to update it, the updated version of your globally installed module might break
    your application because of compatibility issues between that new version and
    the rest of the code in your specific app in a specific directory.
  prefs: []
  type: TYPE_NORMAL
- en: As a rule of thumb, the `npm` packages should be installed locally, since you
    avoid the versioning problem.
  prefs: []
  type: TYPE_NORMAL
- en: 'To learn more about installing `npm` packages locally, visit this web page:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://docs.npmjs.com/downloading-and-installing-packages-locally.](https://docs.npmjs.com/downloading-and-installing-packages-locally)'
  prefs: []
  type: TYPE_NORMAL
- en: One downside of using locally installed packages is that the specific command,
    such as `prettier`, `webpack`, or `eslint`, doesn't become available on the command
    line. Instead, you need to run a locally-installed node module as an npm script.
  prefs: []
  type: TYPE_NORMAL
- en: Alternatively, this locally-installed module can actually be run on the command
    line directly, using the `npx` command, which we'll discuss in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: What is Prettier?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Prettier is a code formatter. It formats your code whenever you save a file.
    The project website can be found at [https://prettier.io/](https://prettier.io/).
    In the example that follows, we'll be running a locally-installed Prettier npm
    module.
  prefs: []
  type: TYPE_NORMAL
- en: Running locally-installed npm modules on the command line using npx
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To begin working with Prettier, we''ll start a new project as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, inside the new `Chapter6` folder, we''ll add another folder, `prettier-practice`, as
    follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, we''ll initialize `npm` with defaults as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, let''s add one single file, `index.html`, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: The preceding command created and opened a new `index.html` file inside VS Code.
  prefs: []
  type: TYPE_NORMAL
- en: 'We''ll be adding a small Vue app without any build process. Let''s add the
    following code to our `index.html` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: You can see this simple Vue app running on CodePen, at this URL: [https://codepen.io/AjdinImsirovic/pen/jprwKe.](https://codepen.io/AjdinImsirovic/pen/jprwKe)
  prefs: []
  type: TYPE_NORMAL
- en: Next, let's add Prettier to see how it will format our code.
  prefs: []
  type: TYPE_NORMAL
- en: Installing Prettier globally and running it on index.html
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To install Prettier globally, we can use the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, to start using it, you can just run the `--help` flag to see all the
    options that are available, such as the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Now, you can run the `prettier index.html` command to see the formatted code
    right in your console. Alternatively, you can run the command `prettier index.html
    --write`, so that the formatted output actually gets saved in the file you specified.
  prefs: []
  type: TYPE_NORMAL
- en: Next, we'll see how to install Prettier locally and run it with npx.
  prefs: []
  type: TYPE_NORMAL
- en: Running Prettier with npx
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The npx utility is an **NPM package runner**. It was added to NPM in version
    5.2.0 (in the first half of 2017). It makes it easier to run packages from the
    `node_modules` directory, since we don't have to rely on `npm run <someScriptName>`
    as we did in `package.json` before.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this example, we''ll see how to install Prettier as a development dependency,
    and how to run it with npx. First, we need to install it with the `--save-dev`
    flag inside our `prettier-practice` folder as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Once it's completed, our `package.json` will be updated, and we can start using
    Prettier.
  prefs: []
  type: TYPE_NORMAL
- en: The easiest way to do so, is to simply run just the Prettier command inside
    VS Code's Terminal.
  prefs: []
  type: TYPE_NORMAL
- en: 'To see the available options, we can run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'To actually run a command with some options passed, we can run this code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: There are many other ways in which npx can be used, and it's a great tool to
    familiarize yourself with.
  prefs: []
  type: TYPE_NORMAL
- en: Another interesting exercise to try is to compare Prettier's formatting with
    the readily available VS Code's formatter. The VS Code's formatter is triggered
    using the *Shift* + *Alt* + *F* keyboard combination. We can quickly re-run the
    `npx prettier` command we just ran, by pressing the up arrow while inside VS Code's
    console.
  prefs: []
  type: TYPE_NORMAL
- en: Next, we'll make another little project to demonstrate working with ESLint.
  prefs: []
  type: TYPE_NORMAL
- en: Working with ESLint
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: ESLint is a JavaScript linter. You can find it at [https://eslint.org/](https://eslint.org/).
    A linter performs code analysis. It compares your code against a certain standard.
    You could say it's a tool to check code quality. Linters are great for team environments,
    because they make our code base follow a certain code style, and because they
    ensure that, there's one less thing to talk about during code reviews.
  prefs: []
  type: TYPE_NORMAL
- en: 'An example of a code style can be found here: [https://github.com/airbnb/javascript](https://github.com/airbnb/javascript).
    This is Airbnb''s JavaScript style guide. If you scroll down the page, you''ll
    see that there is a lot of information to read through: how to access primitive
    types, how to reassign references, how to group shorthand properties in object
    declarations, and so on.'
  prefs: []
  type: TYPE_NORMAL
- en: It' s important to understand that ESLint only analyzes your code; it doesn't
    run it. However, it does locate errors, and can also fix them. Effectively, it
    can change your code if you set it up to do so.
  prefs: []
  type: TYPE_NORMAL
- en: There are other JavaScript linting tools out there, such as JSLint, or JSHint.
    ESLint is touted as more customizable.
  prefs: []
  type: TYPE_NORMAL
- en: Installing ESLint globally and unsuccessfully running it from the command line
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To install ESLint node module globally, run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Now, our `eslint` command is globally available.
  prefs: []
  type: TYPE_NORMAL
- en: Now, we'll create a new folder, `eslint-practice`. Inside of it, we'll make
    a new file, `eslint-test.js`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the file in VS Code and add this code to it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Save the file.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, open the command line inside VS Code with *Ctrl* + *`*, and run the following
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'The output you''ll receive is this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: Why did this happen? There is no ESLint config file, but why does ESLint need
    a config file to run?
  prefs: []
  type: TYPE_NORMAL
- en: This is because the rules that ESLint will use to check our code are specified
    in the **config** file. If there's no config file, ESLint doesn't know which rules
    to apply when linting our code.
  prefs: []
  type: TYPE_NORMAL
- en: The solution for this problem is interesting. Without a `package.json`, we cannot
    initialize ESLint. Since we have to install a new NPM project, we might as well
    just install the ESLint node module locally. It's not a must, but it's a preferred
    option for a streamlined workflow.
  prefs: []
  type: TYPE_NORMAL
- en: Running eslint --init command
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Obviously, we can''t run the `eslint` command without an ESLint config file.
    However, we can''t initialize an ESLint config file without a `package.json` file.
    This means we first need to run `npm init`, so let''s do that now as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, we can initialize `eslint`. When we run the `eslint --init` command, we''ll
    be asked several questions in command-line prompts. Our ESLint configuration will
    depend on the answers we select. Here are the selections we need to pick for this
    example:'
  prefs: []
  type: TYPE_NORMAL
- en: Pick `To check syntax, find problems, and enforce code style`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Pick `None of these`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Pick `None of these` (for this simple demonstration we won't use `Vue.js` because
    that would require installing additional dependencies, and at this point we are
    only test-driving ESLint)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Pick `Browser`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Pick `Answer questions about your style`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Pick `JSON`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Pick `Spaces`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Pick `Single`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Pick `Windows`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Type *Y* (yes, we do require semicolons)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Pick *''*`JavaScript`*''* (as the answer to the What format do you want your
    config file to be in?)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Once you''ve answered all the questions, you''ll be greeted with the following
    output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'Reading this message, we can now appreciate that the maintainers of ESLint
    are nudging us toward the best practice of limiting the number of globally installed
    `npm` packages on our computers, and, instead choosing to install our node modules
    locally in our projects. The preceding message also reads that we need the `eslint@latest`
    dependency to be able to run our ESLint configuration, so let''s add it right
    now, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'It has been mentioned earlier in the book, but this is a great time for a refresher:
    the `--save-dev` flag means that the package we are installing is only to be used
    in development, not in production. The `--save-dev` option does not set the local
    module. You can install ESLint locally by simply running: `npm install estlint@latest`.
    However, both the `--save-dev` and `--verbose` flags have their place, but it
    needs to be clear that they don''t have anything to do with locally installing
    an `npm` package.'
  prefs: []
  type: TYPE_NORMAL
- en: Now, we are ready to run ESLint on our project's JavaScript file. Before we
    do, let's inspect the contents of the `.eslintrc.js`.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding the structure of .eslintrc.js config file
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Based on the rules we picked, our generated `.eslintrc.js` file looks like
    this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: Inside the exported object in the config file, we can see that the environment
    is set to `browser`, and that the `es6` property is set to `true`, which means
    the ES6 syntax is enabled automatically.
  prefs: []
  type: TYPE_NORMAL
- en: 'With `''extends'': ''eslint:recommended''`, we turn on the recommended core
    rules that report common problems. These rules are listed on the following page: [https://eslint.org/docs/rules/](https://eslint.org/docs/rules/).'
  prefs: []
  type: TYPE_NORMAL
- en: The `'globals'` entry lists additional global variables that will be accessed
    when ESLint is run using the specified configuration.
  prefs: []
  type: TYPE_NORMAL
- en: With the `parserOptions` property, we set the ECMA Script version to use as
    `2018`, which is, of course, ECMA Script 9\. Finally, the `'rules'` property specifies
    the rule to be applied, and at what **error level**.
  prefs: []
  type: TYPE_NORMAL
- en: Running ESLint on a JavaScript file
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now, we can run the `eslint` command on our `eslint-test.js` file. Since it
    is installed globally, we could simply run `eslint eslint-test.js`.
  prefs: []
  type: TYPE_NORMAL
- en: 'However, since this is discouraged by the very maintainers of the module, let''s
    instead run it locally, with the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'Running the preceding command will produce the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'We can also see the error right inside VS Code, as a single character, the
    `(` character, underlined with a wavy red color on line one of our `eslint-test.js`
    file. Of course, this error means that we are missing our function''s name. So
    let''s update the code to this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: Notice that we've also removed the semi-colon after the call to `console.log`
    method. Let's run `eslint` again.
  prefs: []
  type: TYPE_NORMAL
- en: 'This time we get five new errors showing as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: Looking at the end of each line in the preceding output, we can see the specific **ESLint
    rules** that our code violates. At the beginning of each line, we can see the
    line number, followed by a colon, followed by the exact place of the first character
    that breaks an ESLint rule. Thus, 1:10 can be read as *line 1, character in the
    10th position*.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s run `eslint` again, with the suggested `--fix` flag as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'Now our code gets formatted, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'However, we still get some errors, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'What we can conclude from this little exercise, is that ESLint will do the
    following:'
  prefs: []
  type: TYPE_NORMAL
- en: Point out rule violations in our code.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Allow us to pass the `--fix` flag to remedy those errors that are fixable by
    the tool itself.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Next, we'll update the error level rules.
  prefs: []
  type: TYPE_NORMAL
- en: Updating error level rules in ESLint
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'By default, all rules have their error levels set to `''error''`. To manually
    set a different error level, such as `''warn''`, we might add an `errorLevel` constant
    and update our rules to this code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: Now, with this update, our error level for the `linebreak-style` and `indent` rules
    will be `error`, and the error level for the `quotes` and `semi` rules will be `warn`.
  prefs: []
  type: TYPE_NORMAL
- en: Next, we'll work with ESLint in Vue CLI 3.
  prefs: []
  type: TYPE_NORMAL
- en: Configuring ESLint in Vue CLI 3
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now that we''re familiar with Prettier and ESLint, we''ll install them into
    a new project using the Vue CLI 3\. Let''s point our Git Bash to the root of `Chapter6` folder
    and run this command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'Once VS Code is open, we''ll toggle on the command line, and run the following
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: Then, we'll just accept the default installation with Babel and ESLint, and
    wait for the app to install.
  prefs: []
  type: TYPE_NORMAL
- en: Next, similar to what we did before, we will run `vue ui` and then import the
    `vc3-eslint` app to our Vue CLI 3 GUI Dashboard.
  prefs: []
  type: TYPE_NORMAL
- en: As we can see, ESLint comes as a default installation in our Vue CLI 3 apps.
    But how do we configure ESLint, as we did in the previous section of this chapter?
  prefs: []
  type: TYPE_NORMAL
- en: Setting up ESLint configurations in Vue CLI 3 GUI
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: With our `vc3-eslint` app loaded inside the Vue CLI 3 UI, let's click the configuration
    icon.
  prefs: []
  type: TYPE_NORMAL
- en: 'We''ll click the ESLint configuration, which will update the right-hand pane
    in the Project configuration window as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/245a02c9-f576-489f-85a7-92884e8507f7.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 6.1: Clicking the configuration icon shows possible configurations for
    your app'
  prefs: []
  type: TYPE_NORMAL
- en: 'There we can see two main entries in this view: Lint on save, and Select config.'
  prefs: []
  type: TYPE_NORMAL
- en: The Lint on save option is currently toggled on, but we can toggle it off by
    clicking on the green switch on the right-hand side of the Lint on save option.
  prefs: []
  type: TYPE_NORMAL
- en: We can also choose a different configuration in the Select config entry. The
    default setting can be changed to either the Strongly recommended or to the Recommended
    setting. We saw earlier in this chapter how this setting can be configured inside
    `eslintrc.js` file.
  prefs: []
  type: TYPE_NORMAL
- en: You also have the option to click on the Open eslintrc button in the top-right
    corner of the page to open our project's ESLint configuration file, so that you
    can edit it directly.
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, we can see a list of all the ESLint rules in our project by clicking
    the Rules tab at the top of the configuration panel as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/ef290a9f-6456-4c95-86dc-8a8eeca3c6e7.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 6.2: Selecting individual rules in the ESLint configuration screen in
    Vue CLI 3 UI'
  prefs: []
  type: TYPE_NORMAL
- en: The screen will show the Essential rules that are applied by default in our
    ESLint configuration, whereas, on the General tab we can change the entire ruleset
    by clicking the drop down in the Select config entry; inside the rules tab, we
    can mix and match individual rules, and then save our updates. This makes it possible
    to update the rules and make custom changes any way we like.
  prefs: []
  type: TYPE_NORMAL
- en: Using ESLint and Prettier together in a Vue CLI 3 UI project
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'If you are starting a project from scratch in Vue CLI 3 UI, you can also make
    ESLint and Prettier work together. Here''s how:'
  prefs: []
  type: TYPE_NORMAL
- en: 'We begin by pointing our Vue UI to a root folder as follows. It''s important
    to verify you are not inside an existing Vue app:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/91292f7b-75fc-4cc6-97a6-c72f82a515ab.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 6.3: Creating a new project in Vue CLI 3 UI'
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, we''ll click the Select this folder button to proceed, and then choose
    our project''s name as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/201b603d-6613-4c65-a305-b32d971b8361.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 6.4: Adding project name'
  prefs: []
  type: TYPE_NORMAL
- en: Next, we'll click the Select this folder button to proceed, and then choose
    our project's name. Click Next to proceed and you'll be taken to the Presets tab.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Once you''re on the Presets tab, select the Manual preset to manually select
    features, then click Next again. On the Features tab, the Babel and linter / formatter
    features should already be preselected, so just click Next again to go to the
    Configuration screen, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/c963b523-75b9-4c53-add7-f5b575ef7274.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 6.5: Choosing ESLint + Prettier from the Configuration screen'
  prefs: []
  type: TYPE_NORMAL
- en: 'The Pick a linter / formatter config gives us several options. Choose the *ESLint
    + Prettier* at the bottom. Once we click it, we''ll be greeted with an option
    to save the preset, so let''s save it as in the following image:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/82ace185-cda8-4325-93a5-1bd033cf705f.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 6.6: Saving a new preset in Vue CLI 3 UI'
  prefs: []
  type: TYPE_NORMAL
- en: Once we click the Create a new preset button, we've finished customizing our
    project, and we can wait for all the dependencies to be installed.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once it's done, you'll see the Welcome to your new project message. Now, you
    can click on the Project dependencies link on the left-hand menu. Besides the
    expected dependencies (`babel-eslint`, `eslint`, `eslint-plugin-vue`, and `vue-template-compiler`),
    you'll also see the `@vue/eslint-config-prettier` dev dependency. As we can see,
    this is an official `vue npm` module, as it has the `@vue` namespace.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we've looked at differences between `npm` and `npx`, and global
    and local installations of node modules. We've further discussed ESLint and Prettier.
    We've seen how to install each of them on a stand-alone project, and we've seen
    how to configure ESLint in a default Vue app using the Vue CLI 3 GUI. We've also
    seen how to set up ESLint with Prettier, inside Vue CLI 3.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will explore using CSS, SCSS, and PostCSS in Vue CLI
    3.
  prefs: []
  type: TYPE_NORMAL
