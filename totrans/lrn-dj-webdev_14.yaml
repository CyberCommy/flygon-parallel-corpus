- en: Chapter 14. Deploying Django Projects
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'So, you have done a lot of work on your web application and now it is time
    to make it live. To make sure that the transition from development to production
    goes smoothly, there are a number of changes that must be made to the application
    before it goes live. This chapter covers the changes to be made to the following
    topics to help make the launch of your web application successful:'
  prefs: []
  type: TYPE_NORMAL
- en: The production web server
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The production database
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Turning off the debug mode
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Changing configuration variables
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting error pages
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Django on cloud
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The production web server
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We have been using the development web server that comes with Django throughout
    this book. While this server is perfect for the development process, it's definitely
    not intended to be a production web server, as it wasn't developed with security
    or performance in mind. Therefore, it is certainly not suitable for production.
  prefs: []
  type: TYPE_NORMAL
- en: There are several options to choose from when it comes to the web server, but
    **Apache** is by far, the most popular choice and the Django development team
    actually recommends it. The details of how to set up Django with Apache depends
    on your hosting solution. Some hosting plans offer a preconfigured Django hosting
    solution, where you only have to copy your project files to the server, whereas
    other hosting plans give you the freedom to configure everything yourself.
  prefs: []
  type: TYPE_NORMAL
- en: The details of how to set up Apache varies depending on a number of factors
    that are beyond the scope of this book. If you want to configure Apache yourself,
    consult the Django documentation online at [https://docs.djangoproject.com/en/1.8/howto/deployment/wsgi/apache-auth/](https://docs.djangoproject.com/en/1.8/howto/deployment/wsgi/apache-auth/)
    for detailed instructions.
  prefs: []
  type: TYPE_NORMAL
- en: In this section, we are going to deploy our Django application on Apache and
    the `mod_wsgi` module. So, let's install these two first.
  prefs: []
  type: TYPE_NORMAL
- en: 'Run the following command to install Apache:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: The `mod_wsgi` parameter is an Apache HTTP server module that provides a **Web
    Server Gateway Interface** (**WSGI**) compliant interface to host web applications
    based on Python 2.3+ under Apache.
  prefs: []
  type: TYPE_NORMAL
- en: 'Run the following command to install the `mod_wsgi` module:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Django with Apache and the `mod_wsgi` module is the most popular way of deploying
    Django in production.
  prefs: []
  type: TYPE_NORMAL
- en: In most of the cases, the development machine and the deployment machine are
    different. Thus, it is advised that you copy the project folder to the `/var/www/html/`
    folder, so that your deployment files have limited permission and access.
  prefs: []
  type: TYPE_NORMAL
- en: 'As you have installed the Apache server, try visiting `localhost` in your browser,
    that is, `127.0.0.1`. By doing this, you should see the default Apache page, as
    shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The production web server](img/image00334.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: We have to make the Apache server our Django project. For that, we need to create
    the `configuration` file for Apache.
  prefs: []
  type: TYPE_NORMAL
- en: 'To do so, create a `mytweets.conf` file in the `sites-available` folder that
    you can find by navigating to `/etc/apache2/sites-available` with the following
    content:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s take a look at the following term list that describes the various parameters
    used in the preceding code snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '`ServerAdmin`: This e-mail address will be shown if you have not configured
    your custom error page, which will tell users to contact this e-mail address.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ServerName`: This is the name of the server you would like to run your project
    on.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ServerAlias`: This is the name of the site you want to run the project on.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`WSGIScriptAlias`: This is the location of the `wsgi.py` file of the project,
    which was already there when we ran the first command to create the Django project.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Alias`: This is the path alias, the actual location of the folder on the disk
    is mapped like a project directory.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Now, we need to enable this site configuration with the `a2ensite` command,
    and to disable an existing site configuration, you can use the `a2dissite` command.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s enable the `mytweets.conf` file for Apache by using the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'This will enable our `mytweets.conf` file. You can also disable the `default
    000-default.conf` configuration by using the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Verify the file permission of the static files of the project. Don't forget
    to write an entry in allowed host in the `settings.py` file.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, restart the server:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: That's all, Django now runs on the deployment mode, that is, it is now production
    ready.
  prefs: []
  type: TYPE_NORMAL
- en: The production database
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: So far, we have been using SQLite as our database engine. It is simple and does
    not require a resident server in memory. SQLite will perform fine in the production
    mode for small websites. However, it is highly recommended that you switch to
    a database engine that uses the client-server model in production. As we saw in
    an earlier chapter, Django supports several database engines, including all the
    popular ones. The Django team recommends you to use PostgreSQL, but MySQL should
    be fine as well. Regardless of your choice, you only have to change the database
    options in the `settings.py` file to switch to a different database engine.
  prefs: []
  type: TYPE_NORMAL
- en: If you want to use MySQL, create a database, username, and password for Django.
    Then, change the `DATABASE_*` variables accordingly. Everything else should remain
    the same. This is the whole point of the Django database layer.
  prefs: []
  type: TYPE_NORMAL
- en: Turning off the debug mode
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Whenever an error occurs during development, Django presents a detailed error
    page with a lot of useful information. However, when the application goes into
    production, you don't want your users to see such information. Apart from confusing
    your users, you risk exposing your website to security problems if you let strangers
    see such information.
  prefs: []
  type: TYPE_NORMAL
- en: In the beginning when we used the `django-admin.py mytweets` command, which
    created all the basic configuration for the project for which we used the `debug=True`
    parameter in the `settings.py` file when this mode was `True`. The following extra
    work is done by Django to help you debug the problem faster. The memory usage
    of Django is more, as all the queries are stored as `django.db.connection.queries`
    in the database.
  prefs: []
  type: TYPE_NORMAL
- en: For every error message, a proper stack trace of the message gets displayed,
    which is not recommended when you run in the production mode, as this may contain
    sensitive information and may weaken the security of the entire web application.
  prefs: []
  type: TYPE_NORMAL
- en: 'Turning off the debug mode is pretty easy. Open the `settings.py` file and
    change the `DEBUG` variable to `False`:'
  prefs: []
  type: TYPE_NORMAL
- en: '`DEBUG = False`'
  prefs: []
  type: TYPE_NORMAL
- en: Disabling debug information carries an additional benefit; you improve the performance
    of the website because Django doesn't have to keep track of the debug data in
    order to display it.
  prefs: []
  type: TYPE_NORMAL
- en: Changing configuration variables
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are many configuration variables that need to be created or updated for
    production. The production environment is a very hostile environment. The following
    is the checklist that you should go through for deployment. Check the `setting.py`
    file properly, as each setting must be defined in the right way to keep the project
    secure.
  prefs: []
  type: TYPE_NORMAL
- en: Settings can be environment-specific, such as when you run the settings locally.
    The database credentials might change and even the database can change according
    to the environment. While conducting the process of deployment, enable the optional
    security features.
  prefs: []
  type: TYPE_NORMAL
- en: Enable performance optimizations. The first step to do so is to disable debug,
    which enhances the performance of the website. If you have a proper error reporting
    mechanism, once `DEBUG` is `False`, it's difficult to know what went wrong, so
    you better have your logs prepared once you disable debug mode.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following are the critical settings that must be taken care of while going
    for Django''s deployment:'
  prefs: []
  type: TYPE_NORMAL
- en: '`SECRET_KEY`: This key must be chosen large and randomly and should be kept
    as a secret. In fact, it is recommended that you should never keep this information
    in the `settings.py` file or in the version control repository. Instead, keep
    this information somewhere safe in a nonversion controlled file or in the environment
    path:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'This imports the key from the current operating system''s environment. An alternate
    suggested method is to import it from a file, which can be done using:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: '`ALLOWED_HOSTS`: This must have a valid host configuration. When the debug
    mode is switched off, this is used to protect the CSRF attacks:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: '`ADMIN`: The `ADMIN` key holds the names and e-mail addresses of the site administrators.
    You will find it in the `settings.py` file, commented out as follows:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Insert your name and e-mail address here and remove the `#` symbol to uncomment
    it in order to receive e-mail notifications of code errors when they occur.
  prefs: []
  type: TYPE_NORMAL
- en: When `DEBUG=False` and a view raises an exception, Django will e-mail these
    people with the full exception information.
  prefs: []
  type: TYPE_NORMAL
- en: '`EMAIL`: Since the e-mail server of your production server most likely differs
    from your development machine, you may want to update your e-mail configuration
    variables. Look for the following variables in the `settings.py` file and update
    them:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`EMAIL_HOST`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`EMAIL_PORT`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`EMAIL_HOST_USER`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`EMAIL_HOST_PASSWORD`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Also, your web application now has its own domain name, so you need to update
    the following settings to reflect this: `SITE_HOST` and `DEFAULT_FROM_EMAIL`.'
  prefs: []
  type: TYPE_NORMAL
- en: Finally, if you use caching, make sure that you have the correct settings in
    the `CACHE_BACKEND` parameter (ideally, the `memcached` parameter); you don't
    want the development backend to be here while you are in production.
  prefs: []
  type: TYPE_NORMAL
- en: Setting error pages
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'With the debug mode disabled, you should create templates for the error pages,
    particularly these two files:'
  prefs: []
  type: TYPE_NORMAL
- en: '`404.html`: This template will be displayed when the requested URL does not
    exist; in other words, when a page is not found, such as an uncaught exception.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Create the two files with whatever content you like. You can, for example, put
    a "`Page not found`" message in the `404.html` template or a search form.
  prefs: []
  type: TYPE_NORMAL
- en: '`500.html`: This template will be displayed when an internal server error occurs.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It is recommended that you give these templates a consistent look by deriving
    them from the base template of your site. Put the templates at the top in your
    `templates` folder and Django will automatically use them.
  prefs: []
  type: TYPE_NORMAL
- en: This should cover the configuration changes that are essential for production.
    Of course, this section is not conclusive and there are other settings that you
    may be interested in. You can, for example, configure Django to notify you via
    e-mail when a requested page is not found or provide a list of IP addresses that
    can see debug information. For these and more, refer to the Django documentation
    in the `settings.py` file.
  prefs: []
  type: TYPE_NORMAL
- en: Hopefully, this section will help you make your transition from development
    to production much smoother.
  prefs: []
  type: TYPE_NORMAL
- en: Django on cloud
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Deployment in web development has changed over the course of time. Most of the
    start-ups are moving to a cloud setup and away from traditional VPS hosting methods,
    due to reliability, performance, and ease of scalability.
  prefs: []
  type: TYPE_NORMAL
- en: The most popular cloud platforms that provide **IAS** (**Infrastructure As a
    Service**) are Amazon EC2 and Google Compute Engine.
  prefs: []
  type: TYPE_NORMAL
- en: Then, we have other well-known options, such as **Platform as a Service** (**PaaS**),
    where you push your code, such as you push it to a normal repository so that is
    gets deployed automatically. These include Google App Engine, Heroku, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: Let's get introduced to them one by one.
  prefs: []
  type: TYPE_NORMAL
- en: EC2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Deployment on **EC2** is simple. Follow the given steps to deploy your desired
    settings on EC2:'
  prefs: []
  type: TYPE_NORMAL
- en: Create an account for AWS. Follow [http://aws.amazon.com](http://aws.amazon.com)
    and click on **Create a Free Account**, as shown in the following screenshot:![EC2](img/image00335.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Sign up and add your credit card for the billing details. Once you are done,
    log in and you will see a dashboard. For deployment, we need to create a server
    called EC2 instances (it can be treated as a server) on AWS.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on EC2 (in the top-left corner), as shown in the following screenshot:![EC2](img/image00336.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'As you can see in the preceding screenshot, I already have an instance running
    (**1 Running Instances**). Click on **Launch instance** to create a new instance.
    This will show you the available AWS images (which is like a screenshot in VMware
    or the last backup disk available) for the instance:'
  prefs: []
  type: TYPE_NORMAL
- en: '![EC2](img/image00337.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Scroll down to choose the Ubuntu 64-bit instance (the Ubuntu server).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Next, choose an instance type; initially, choose the free tier, which is given
    to every new account that AWS calls the **t2.micro** instance type. Check for
    other settings as most of them are kept at default. Move to the **Tag** instance
    and give a name to your instance:'
  prefs: []
  type: TYPE_NORMAL
- en: '![EC2](img/image00338.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: The next important thing to do is to choose a security group. AWS has this feature
    to protect your server from attacks. Here, you can configure which specific ports
    will be publicly accessible. Basically, you need to open two ports to make the
    tweets publicly accessible.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You should use SSH (Port 22) to connect the system from a local machine to deploy
    the code.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: HTTP (Port 80) is used to run your Django server.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: As the database we will use runs on the same instance, we are not going to add
    the MySQL port to the security group.
  prefs: []
  type: TYPE_NORMAL
- en: 'Make sure that you have configured something like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![EC2](img/image00339.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Next, review and launch the instance. Also, you must create a key pair to access
    your AWS machine through SSH. The key is a `.pem` file that you will use with
    SSH to log into your machine remotely. Create a key pair and download the `.pem`
    file.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Make sure that the `PEM` file has a specific permission of 400\. Your key file
    must not be publicly viewable if you want SSH to work. Use this command if needed:
    `chmod 400 mykey.pem`.'
  prefs: []
  type: TYPE_NORMAL
- en: It will take a while and will appear back on your dashboard as a running instance.
  prefs: []
  type: TYPE_NORMAL
- en: 'Click on the instances to the left of your screen. Then, you can see your running
    instance. Click on the instance row to get more details at the bottom of the screen,
    as shown in the following figure:'
  prefs: []
  type: TYPE_NORMAL
- en: '![EC2](img/image00340.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'On the right-hand side of the details, you can see the public DNS: `<public
    DNS>` and the public IP: `<public IP>`. That is all you need (and the `.pem` file,
    of course, to log in to your instance).'
  prefs: []
  type: TYPE_NORMAL
- en: On your machine, go to the folder from the terminal where you downloaded the
    `PEM` file and type `$ssh -i <pemfilename>.pem ubuntu@<pubic IP>` on your terminal.
  prefs: []
  type: TYPE_NORMAL
- en: 'Otherwise, type the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '`$ssh -i <pemfilename>.pem ubuntu@<public Dns>`.'
  prefs: []
  type: TYPE_NORMAL
- en: By doing this, you will be logged in to the remote server.
  prefs: []
  type: TYPE_NORMAL
- en: This is your online system from scratch. If you want to deploy the website on
    your own from your local machine, then you can go to the previous chapters and
    install everything required for a virtual environment. Django and Apache perform
    deployment on this server.
  prefs: []
  type: TYPE_NORMAL
- en: Once you have deployed, use the public IP we used for SSH and you should see
    the deployed server.
  prefs: []
  type: TYPE_NORMAL
- en: Google Compute Engine
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Google Compute Engine** works on the same concept as AWS EC2\. Google Compute
    Engine, at present, does not give a free tier.'
  prefs: []
  type: TYPE_NORMAL
- en: Google servers are known for their reliability and performance. So, if you are
    thinking of a project with such a need, go for them.
  prefs: []
  type: TYPE_NORMAL
- en: Google Cloud gives you a cloud SDK to use its instances, and most of its initial
    configuration can be done from the terminal.
  prefs: []
  type: TYPE_NORMAL
- en: 'To create an instance on Google Compute Engine go to:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://cloud.google.com/compute/docs/quickstart](https://cloud.google.com/compute/docs/quickstart).'
  prefs: []
  type: TYPE_NORMAL
- en: This link will help you set up the instance that runs on an Apache server.
  prefs: []
  type: TYPE_NORMAL
- en: The open hybrid cloud application platform by Red Hat
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Red Hat** gives another solution for cloud deployment, which is free upto
    some usage limit, with a service called **OpenShift**.'
  prefs: []
  type: TYPE_NORMAL
- en: You can create an OpenShift account and get a free basic 3 dynamo-based cloud
    server from [https://www.openshift.com/app/account/new](https://www.openshift.com/app/account/new).
  prefs: []
  type: TYPE_NORMAL
- en: After you create your account, you can go to [https://openshift.redhat.com/app/console/applications](https://openshift.redhat.com/app/console/applications)
    and add your account.
  prefs: []
  type: TYPE_NORMAL
- en: OpenShift gives a Django repository all set up for you with the version control
    pre-configured.
  prefs: []
  type: TYPE_NORMAL
- en: All you need is to make your changes and push the code. It will automatically
    deploy the code.
  prefs: []
  type: TYPE_NORMAL
- en: OpenShift also gives you the SSH feature to log in to your cloud server and
    some basic troubleshooting as well.
  prefs: []
  type: TYPE_NORMAL
- en: Heroku
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This is also a good platform for deploying your Django code to the cloud smoothly.
    Like Google Compute Engine, Heroku also gives you an SDK tool to install and perform
    the configurational changes from a local terminal. You need to get a toolbelt
    (an SDK for Heroku).
  prefs: []
  type: TYPE_NORMAL
- en: Create an account on Heroku at [https://signup.heroku.com](https://signup.heroku.com).
  prefs: []
  type: TYPE_NORMAL
- en: 'The following are the steps taken from [https://devcenter.heroku.com/articles/getting-started-with-python](https://devcenter.heroku.com/articles/getting-started-with-python).
    Check it out for the latest updates. The following steps explain how to create
    and use Heroku:'
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we need to install **Heroku Toolbelt**. This provides you access to
    the Heroku command-line utility:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'The following screen will appear:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Heroku](img/image00341.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'It will install Heroku Toolbelt on your local machine. Log in to Heroku from
    the command line:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Use the same username and password as you did for the Web login. Let's take
    a look at the following screenshot:![Heroku](img/image00342.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, go to [https://devcenter.heroku.com/articles/getting-started-with-django](https://devcenter.heroku.com/articles/getting-started-with-django)
    to deploy Django on Heroku.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Google Application Engine
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Google Application Engine** works differently, it does not work on the traditional
    database, instead it has its own database. Thus, to deploy Django on Google Application
    Engine, we will use a separate project called **Django-nonrel**.'
  prefs: []
  type: TYPE_NORMAL
- en: Django-nonrel is a project that allows developers to run native Django projects
    (including Django's ORM) on nonrelational databases, one of which is Google Application
    Engine's datastore. This is all in addition to the standard traditional SQL databases
    that were always supported by Django. Google Application Engine does come with
    some Django support, but the support is mainly regarding templating and views.
    For other tools that allow rapid development, such as forms, the built-in administration
    interface or Django authentication just won't run out of the box. Django-nonrel
    changes this for Django developers.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter covered a variety of interesting topics. You learned about several
    Django-based deployment options that are useful while deploying Django. You also
    learned how to move a Django project from a development environment to a production
    environment. Notably, the frameworks that you learned about are all very easy
    to use, so you will be able to effectively utilize them in your future projects.
  prefs: []
  type: TYPE_NORMAL
