- en: Test Management Approach
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Execution strategy in the test management approach plays a crucial role in determining
    the success or failure of the testing cycle. The strategy helps to identify optimized
    pathways to mitigate risks early. In this chapter, we will cover in detail the
    best approaches for selecting various project execution workflows based on the
    project's needs. We'll learn how to create ad hoc test runs and execute test cases
    in the test cycles as part of a test plan. Then, we'll understand the importance
    of each execution type, and its benefits and targeted purpose. Let's get started
    with the execution strategy for structured testing with **Test Management Approach** (**TMap**).
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we''ll cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Execution strategy for structured testing with TMap
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Execution in test cycles for selected release
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Best practices for test management
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Execution strategy for structured testing with TMap
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'With the evolution of the software industry and their standards, the emphasis
    is for processes to be driven by business objectives, rather than processes being
    drivers of business objectives. This led to the creation of the following two
    ways of assessing the test process:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Prescriptive**: In this approach, the model provides a framework along with
    the **key performance indicators** (**KPIs**) and questions to ask for each test
    unit. This helps you identify the root causes of inefficiencies. It also provides
    the order in which each of these inefficiencies should be tackled to improve the
    process.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Non-prescriptive**: In this approach, the model provides a framework along
    with the KPIs and questions to ...'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ad hoc test runs
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The testing team faces a variety of situations during the test process based
    on the maturity of the processes followed in the organization to deliver products
    on a schedule. The following are some examples of these situations:'
  prefs: []
  type: TYPE_NORMAL
- en: 'The turnaround window is short, such as in the following examples:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Testing for bug fixes after the product went live and needs to be fixed quickly
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A small change request in the maintenance phase that needs to be handled quickly
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The workflows to validate is less complex, such as in the following examples:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Testing for requirements where the scope is minimum and requires less testing,
    such as adding validation popups to forms to prompt end users to fill in all fields
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Cosmetic changes, such as changing the text on a button in the UI from OK to
    Accept
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In these situations, the underlying factor is that the changes are not drastic
    and the scope of testing is very limited. Hence, in such situations, we can adopt
    the ad hoc testing approach.
  prefs: []
  type: TYPE_NORMAL
- en: The **ad hoc testing** procedure is a three-step process of understanding requirements,
    building test cases for the test requirements, and executing them as needed. In
    this approach, a test professional simply creates the least possible number of
    test cases, links them to the relevant requirements, and then performs test execution
    at the test case level. During test execution, testers can update the status of
    the execution supported with the required artifacts. This saves considerable overhead
    and time on arranging meetings, preparing test plans, test cycles, waiting to
    get sign-off for test plans, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s see how we can execute test cases as part of an ad hoc test run in the
    synapseRT, Zephyr, and Test Management tools.
  prefs: []
  type: TYPE_NORMAL
- en: synapseRT
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Test cases can be executed as and when they''re needed as part of an ad hoc
    execution. In synapseRT, you can create the test case as a Jira ticket. Since
    a test case is just another type of Jira ticket, it has default fields like any
    other issue types in the Details section. However, it does contain Test Step,
    Automation, and Ad hoc Test Run sections, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/6b333dea-c528-4fee-96b4-052f92922998.png)'
  prefs: []
  type: TYPE_IMG
- en: Now, on clicking the Create button, an ad hoc test run is created for the selected
    test case. Testers can execute each step and update the status of the execution,
    add a new defect or link an existing one, attach artifacts, and so on, as shown
    in ...
  prefs: []
  type: TYPE_NORMAL
- en: Zephyr
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Zephyr executes the test case as an ad hoc run or as a part of the ad hoc test
    cycle. In order to do so, the user just needs to create a test case issue type
    and enter all the required details. Once it''s created, you can see the Execute
    button under the Test Case Summary field, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/49e5d1e2-e9b3-4823-95a7-6ed193d30510.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Alternatively, we can also create an ad hoc test cycle by navigating to Tests |
    Cycle Summary tab. It gives us an option to add or remove multiple test cases
    as part of an ad hoc test cycle:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/98e85880-e9e3-4161-88d2-0245bfe63240.png)'
  prefs: []
  type: TYPE_IMG
- en: 'After adding test cases to the ad hoc cycle, it looks like the following screenshot.
    As you can see, it gives us an option to organize the ad hoc test cycle as per
    your release. It also shows a detailed summary of the added test cases, including
    their ticket ID, Summary, current execution Status, and linked Defects:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/1c6ef7fa-1dad-41f4-ad34-c7958d4145fe.png)'
  prefs: []
  type: TYPE_IMG
- en: Test Management
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The ad hoc test execution option is not supported by the Test Management tool.
    However, it does support the execution in a test cycle, which we will see in detail
    in the following section.
  prefs: []
  type: TYPE_NORMAL
- en: Execution in test cycles for selected releases
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Ad hoc testing is a flexible and faster way to test shorter workflows. However,
    this approach isn''t effective when you want to plan for the entire release or
    want to cover several testing types/characteristics, such as performance, security,
    acceptance, and integration. In such cases, we can consider preparing test cycles
    and then executing test cases as per the test strategy defined in the test plan.
    Let’s consider some situations that a testing team faces when using the ad hoc
    approach:'
  prefs: []
  type: TYPE_NORMAL
- en: 'The turnaround time is longer, such as in the following examples:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The team is building a new project and is targeting the release of the product
    by the end of the year.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An upgrade of the product is planned to be released in this quarter.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The workflow to validate has more steps and/or is complex, such as in the following
    examples:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A customer has requested a change that has large, complex requirements, and
    it requires more thorough testing.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: When testing a reported bug to impact several components of an application,
    which requires rigorous testing.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'In these situations, we need to analyze the problem and plan our testing strategy.
    Planning and executing test cases in cycles can be the most effective way to ensure
    that we have covered all types of required testing for the desired product or
    application. Hence, we adopt the *execution in the test cycle* approach, which
    gives us an opportunity to prepare a detailed test plan that does the following
    things:'
  prefs: []
  type: TYPE_NORMAL
- en: Calls out all the dependencies
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Lists the input and output parameters required to execute the test cases
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Defines success criteria in order to pass the test
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Defines defect tracking and testing strategies
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Designs and performs end-to-end workflows as per the use cases
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Plans for different types of testing and integrates them in terms of the test
    cycles
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Designs test cases for smoke, sanity, integration, cross browser, or even environment
    testing, and so on
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Since the change is huge, as its impact, we are better prepared with the preceding
    approach. Let’s see in detail how Jira plugins can be used to plan our executions
    in different types of cycles.
  prefs: []
  type: TYPE_NORMAL
- en: synapseRT
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Test cycles are a part of the test plan ticket in synapseRT. Hence, in order
    to create test cycles, we need to create a test plan first. Once the test plan
    is ready, you can add the test cases or test suites, which can then be categorized
    under the test cycle based on their types, priority, or other execution criteria.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following screenshot shows a test plan with three test cycles—`Credit Card
    type A`, `Credit Card type B`, and `Regression Test`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/24f4f123-6d72-44c2-887a-be8532c53943.png)'
  prefs: []
  type: TYPE_IMG
- en: We'll cover how to track and execute these test cycles in detail in [Chapter
    7](f9aabeff-0258-4025-a04e-3c62fce7de8d.xhtml), *Test Execution Phase*.
  prefs: []
  type: TYPE_NORMAL
- en: Zephyr
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'On the other hand, if you want to create different types of test cycles based
    on the testing needs, Zephyr categorizes them under the Cycle Summary tab of the
    Tests section. The following image shows two main test cycles—`Loan Testing` and
    `Ad hoc`. `Loan testing` has the `Education loan`, `Personal loan`, `Car loan`,
    and `Home loan` subtest cycles:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/651fb620-7ca7-4cdb-9654-540c9890a017.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The test case ticket also has a Test Executions section, which shows how many
    times this test has been executed ad hoc or as a part of any other test cycles.
    As shown in the following screenshot, if we expand the Test Executions section,
    it shows all the test runs with the test cycle under which it has been executed.
    It also shows linked defects and the execution date:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/0df40a30-2edf-4551-a9dd-f1de1e43979d.png)'
  prefs: []
  type: TYPE_IMG
- en: Test management
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In the Test Management tool, test cycles can be created from the Cycles tab.
    As shown in the following screenshot, for a banking application, we have `Credit
    Score Release` as the main test cycle. Under this, we have three subtest cycles—`Acceptance
    Tests`, `Functional Tests`, and `Regression Tests`. Each cycle contains the required
    set of test cases, and their execution status can be viewed from the Progress
    column:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/6f9588a1-a502-4626-9af0-3ff505bc04f8.png)'
  prefs: []
  type: TYPE_IMG
- en: Best practices for test management
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The TMap provides guidance for implementing a structured testing approach in
    an organization. Here are a few important factors that''ll help you create a strong
    foundation to establish the test-management practice:'
  prefs: []
  type: TYPE_NORMAL
- en: Utilize a model for the testing activities based on the development process.
    In our case, we use the STLC model, which is a subset of the SDLC model for the
    testing activities. The TMap life cycle model can be used for the test management
    activities.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ensure that appropriate testing tools and techniques, such as checklists, are
    adopted to identify, execute, track, and communicate progress and results. Communication
    is essential to identify and tackle obstacles quickly and in time.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Establish the required test environments with the infrastructure that meets
    both the software and hardware requirements to operationalize the product in the
    test. This also includes setting up a test database and test data. This will enable
    a smoother execution phase.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For effective test management, the testing team should be a group with the right
    combination of testing skills and knowledge of the product. This also means that
    the organization should ensure the staff are trained and processes are improved
    so as to achieve the maturity levels necessary to establish a scalable and repeatable
    success story. Establishing a solid organization with mature processes ensures
    that the team follows common terminologies, approaches, tools, techniques, entry
    and exit criteria, weekly or daily calls, and reporting formats. This helps the
    top management in the generation of standard reporting artifacts.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Automation is key and hence the organization must try to incorporate open source
    or paid testing tools that will help testers to perform their job more efficiently.
    Automating repetitive activities can help testers to focus on exploratory testing,
    while the testing tool performs regression testing. Before adopting these tools,
    a cost-to-benefit analysis should be performed, since such tools require considerable
    ramp-up time for training and gaining skills before staff can use them productively.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Utilize the artifacts from each step of the BDTM process to ensure the test
    goals are clear and specific to the testing requirements. This helps in analyzing
    the test basis thoroughly, implementing strategies well in time, and achieving
    good test coverage.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The aim of testing is to have a feasible test coverage over the functions and
    requirements of the product. The bigger the project, the greater the test levels
    and test units. Hence, it's essential to use test suites to organize them. Also,
    avoid merging and covering large complex requirements in one test case by adding
    a large number of test steps—instead, add them to separate test cases to verify
    the functionality more accurately.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we covered the best approaches for selecting various project
    execution strategies, as well as different approaches to execute test cases during
    the test execution phase. The TMap provides a structured approach for testing.
    We learned about the BDTM approach. For shorter and less complex requirements,
    the ad hoc test strategy can be used to effectively and efficiently test and validate
    the requirements. We learned how ad hoc testing can be implemented using the Jira
    plugins. Execution in test cycles is required to organize and manage test cases
    for bigger and more complex projects. We learned how test cycles can be created
    and organized using the Jira plugins. Finally, we discussed the best practices
    to establish a ...
  prefs: []
  type: TYPE_NORMAL
