- en: Chapter 7. Building the Catalog Module
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The catalog module is an essential part of every web shop application. At the
    very basic level, it is responsible for the management and display of categories
    and products. It is a foundation for later modules, such as checkout, that add
    the actual sales capabilities to our web shop application.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
- en: The more robust catalog features might include mass product imports, product
    exports, multi-warehouse inventory management, private members categories, and
    so on. These however, are out of the scope of this chapter.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will be covering following topics:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
- en: Requirements
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Dependencies
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Implementation
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Unit testing
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Functional testing
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Requirements
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Following the high level application requirements, defined in [Chapter 4](ch04.html
    "Chapter 4. Requirement Specification for a Modular Web Shop App"), *Requirement
    Specification for Modular Web Shop App*, our module will have several entities
    and other specific features implemented.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
- en: 'Following is a list of required module entities:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
- en: Category
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Product
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The Category entity includes the following properties and their data types:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
- en: '`id`: integer, auto-increment'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`title`: string'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`url_key`: string, unique'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`description`: text'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`image`: string'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The Product entity includes the following properties:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
- en: '`id`: integer, auto-increment'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`category_id`: integer, foreign key that references the category table ID column'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`title`: string'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`price`: decimal'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`sku`: string, unique'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`url_key`: string, unique'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`description`: text'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`qty`: integer'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`image`: string'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`onsale`: boolean'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Aside from just adding these entities and their CRUD pages, we also need to
    override the core module services responsible for building the category menu and
    on sale items.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
- en: Dependencies
  id: totrans-32
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The module has no firm dependencies on any other module. The Symfony framework
    service layer enables us to code modules in such a way that, most of the time,
    there is no need for a dependency between them. While the module does override
    a service defined in the core module, the module itself is not dependent on it,
    as nothing will break if the overriding service is missing.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
- en: Implementation
  id: totrans-34
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We start off by creating a new module called `Foggyline\CatalogBundle`. We
    do so with the help of the console, by running the command as follows:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The command triggers an interactive process that asks us several questions
    along the way, as shown in the following screenshot:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
- en: '![Implementation](graphics/B05460_07_01.jpg)'
  id: totrans-38
  prefs: []
  type: TYPE_IMG
- en: 'Once done, the following structure is generated for us:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
- en: '![Implementation](graphics/B05460_07_03.jpg)'
  id: totrans-40
  prefs: []
  type: TYPE_IMG
- en: 'If we now take a look at the `app/AppKernel.php` file, we would see the following
    line under the `registerBundles` method:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Similarly, the `app/config/routing.yml` has the following route definition
    added to it:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Here we need to change `prefix: /` into `prefix: /catalog/`, so we don''t collide
    with core module routes. Leaving it as `prefix: /` would simply overrun our core
    `AppBundle` and output `Hello World!` from the `src/Foggyline/CatalogBundle/Resources/views/Default/index.html.twig`
    template to the browser at this point. We want to keep things nice and separated.
    What this means is that the module does not define the root route for itself.'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
- en: Creating entities
  id: totrans-46
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let''s go ahead and create a `Category` entity. We do so by using the console,
    as shown here:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '![Creating entities](graphics/B05460_07_04.jpg)'
  id: totrans-49
  prefs: []
  type: TYPE_IMG
- en: 'This creates the `Entity/Category.php` and `Repository/CategoryRepository.php`
    files within the `src/Foggyline/CatalogBundle/` directory. After this, we need
    to update the database, so it pulls in the `Category` entity, as shown in the
    following command line instance:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'This results in a screen that looks similar to the following screenshot:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating entities](graphics/B05460_07_05.jpg)'
  id: totrans-53
  prefs: []
  type: TYPE_IMG
- en: 'With entity in place, we are ready to generate its CRUD. We do so by using
    the following command:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'This results with interactive output as shown here:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating entities](graphics/B05460_07_06.jpg)'
  id: totrans-57
  prefs: []
  type: TYPE_IMG
- en: 'This results in `src/Foggyline/CatalogBundle/Controller/CategoryController.php`
    being created. It also adds an entry to our `app/config/routing.yml` file as follows:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Furthermore, the view files are created under the `app/Resources/views/category/`
    directory, which is not what we might expect. We want them under our module `src/Foggyline/CatalogBundle/Resources/views/Default/category/`
    directory, so we need to copy them over. Additionally, we need to modify all of
    the `$this->render` calls within our `CategoryController` by appending the `FoggylineCatalogBundle:default:
    string` to each of the template paths.'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, we go ahead and create the `Product` entity by using the interactive
    generator as discussed earlier:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'We follow the interactive generator, respecting the minimum of the following
    attributes: `title`, `price`, `sku`, `url_key`, `description`, `qty`, `category`,
    and `image`. Aside from `price` and `qty`, which are of types decimal and integer,
    all other attributes are of type string. Furthermore, `sku` and `url_key` are
    flagged as unique. This creates the `Entity/Product.php` and `Repository/ProductRepository.php`
    files within the `src/Foggyline/CatalogBundle/` directory.'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
- en: 'Similar to what we have done for the `Category view` templates, we need to
    do for the `Product view` templates. That is, copy them over from the `app/Resources/views/product/`
    directory to `src/Foggyline/CatalogBundle/Resources/views/Default/product/` and
    update all of the `$this->render` calls within our `ProductController` by appending
    the `FoggylineCatalogBundle:default: string` to each of the template paths.'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
- en: 'At this point, we won''t rush updating the schema, as we want to add proper
    relations to our code. Each product should be able to have a relation to a single
    `Category` entity. To achieve this, we need to edit `Category.php` and `Product.php`
    from within the `src/Foggyline/CatalogBundle/Entity/` directory, as follows:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'We further need to edit the `Category.php` file by adding the `__toString`
    method implementation to it, as follows:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'The reason we are doing so is that, later on, our Product-editing form would
    know what labels to list under the Category selection, otherwise the system would
    throw the following error:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'With the above changes in place, we can now run the schema update, as follows:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'If we now take a look at our database, the `CREATE` command syntax for our
    `product` table looks like the following:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'We can see two unique keys and one foreign key restraint defined, as per the
    entries provided to our interactive entity generator. Now we are ready to generate
    the CRUD for our `Product` entity. To do so, we run the `generate:doctrine:crud`
    command and follow the interactive generator as shown here:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating entities](graphics/B05460_07_07.jpg)'
  id: totrans-76
  prefs: []
  type: TYPE_IMG
- en: Managing image uploads
  id: totrans-77
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'At this point, if we access either `/category/new/` or `/product/new/` URL,
    the image field is just a simple input text field, not the actual image upload
    we would like. To make it into an image upload field, we need to edit the `$image`
    property of `Category.php` and `Product.php` as follows:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'As soon as we do so, the input fields turn into the file upload fields, as
    shown here:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
- en: '![Managing image uploads](graphics/B05460_07_09.jpg)'
  id: totrans-81
  prefs: []
  type: TYPE_IMG
- en: Next, we will go ahead and implement the upload functionality into the forms.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
- en: 'We do so by first defining the service that will handle the actual upload.
    Service is defined by adding the following entry into the `src/Foggyline/CatalogBundle/Resources/config/services.xml`
    file, under the `services` element:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: The `%foggyline_catalog_images_directory%` argument value is the name of a parameter
    the we will soon define.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
- en: 'We then create the `src/Foggyline/CatalogBundle/Service/ImageUploader.php`
    file with content as follows:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'We then create our own `parameters.yml` file within the `src/Foggyline/CatalogBundle/Resources/config`
    directory with content as follows:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: This is the parameter our service expects to find. It can easily be overridden
    with the same entry under `app/config/parameters.yml` if needed.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
- en: 'In order for our bundle to see the `parameters.yml` file, we still need to
    edit the `FoggylineCatalogExtension.php` file within the `src/Foggyline/CatalogBundle/DependencyInjection/
    directory`, by adding the following `loader` to the end of the `load` method:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'At this point, our Symfony module is able to read its `parameters.yml`, thus
    making it possible for the defined service to pickup the proper value for its
    argument. All that is left is to adjust the code for our `new` and `edit` forms,
    attaching the upload functionality to them. Since both forms are the same, the
    following is a `Category` example that equally applies to the `Product` form as
    well:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Both the `new` and `edit` forms should now be able to handle file uploads.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
- en: Overriding core module services
  id: totrans-96
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Now let's go ahead and address the category menu and the on-sale items. Back
    when we were building the core module, we defined the global variables under the
    `twig:global` section of the `app/config/config.yml` file. These variables were
    pointing to services defined in the `app/config/services.yml` file. In order for
    us to change the content of the category menu and the on sale items, we need to
    override those services.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
- en: 'We start off by adding the following two service definitions under the `src/Foggyline/CatalogBundle/Resources/config/services.xml`
    file:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Both of the services accept the Doctrine ORM entity manager and router service
    arguments, as we will need to use those internally.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
- en: 'We then create the actual `Category` and `OnSale` service classes within the
    `src/Foggyline/CatalogBundle/Service/Menu/` directory as follows:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'This alone won''t trigger the override of the core module services. Within
    the `src/Foggyline/CatalogBundle/DependencyInjection/Compiler/` directory we need
    to create an `OverrideServiceCompilerPass` class that implements the `CompilerPassInterface`.
    Within its process method, we can then change the definition of the service, as
    follows:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Finally, we need to edit the `build` method of the `src/Foggyline/CatalogBundle/FoggylineCatalogBundle.php`
    file in order to add this compiler pass as shown here:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Now our `Category` and `OnSale` services should override the ones defined in
    the core module, thus providing the right values for the header **Category** menu
    and **On Sale** section of the homepage.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
- en: Setting up a Category page
  id: totrans-108
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The auto-generated CRUD made a Category page for us with the layout as follows:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
- en: '![Setting up a Category page](graphics/B05460_07_10.jpg)'
  id: totrans-110
  prefs: []
  type: TYPE_IMG
- en: 'This is significantly different from the Category page defined under [Chapter
    4](ch04.html "Chapter 4. Requirement Specification for a Modular Web Shop App"),
    *Requirement Specification for Modular Web Shop App*. We therefore need to make
    amends to our Category Show page, by modifying the `show.html.twig` file within
    the `src/Foggyline/CatalogBundle/Resources/views/Default/category/` directory.
    We do so by replacing the entire content of `body` block with code as follows:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: The body is now sectioned into three areas. First, we are addressing the category
    title and description output. We are then fetching and looping through the list
    of products assigned to category, rendering each individual product. Finally,
    we are using the `is_granted` Twig extension to check if the current user role
    is `ROLE_ADMIN`, in which case we show the `Edit` and `Delete` links for the category.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
- en: Setting up a Product page
  id: totrans-114
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The auto-generated CRUD made a Product page for us with the layout as follows:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
- en: '![Setting up a Product page](graphics/B05460_07_11.jpg)'
  id: totrans-116
  prefs: []
  type: TYPE_IMG
- en: 'This differs from the Product page defined under [Chapter 4](ch04.html "Chapter 4. Requirement
    Specification for a Modular Web Shop App"), *Requirement Specification for Modular
    Web Shop App*. To rectify the problem, we need to make amends to our Product Show
    page, by modifying the `show.html.twig` file within the `src/Foggyline/CatalogBundle/Resources/views/Default/product/`
    directory. We do so by replacing entire content of `body` block with code as follows:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: The body is now sectioned into two main areas. First, we are addressing the
    product image, title, stock status, and add to cart output. The add to cart form
    uses the `add_to_cart_url` service to provide the right link. This service is
    defined under the core module and, at this point, only provides a dummy link.
    Later on, when we get to the checkout module, we will implement an override for
    this service and inject the right add to cart link. We then output the description
    section. Finally, we use the `is_granted` Twig extension, like we did on the Category
    example, to determine if the user can access the `Edit` and `Delete` links for
    a product.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
- en: Unit testing
  id: totrans-120
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We now have several class files that are not related to the controllers, meaning
    we can run unit tests against them. Still, we won't be going after a full code
    coverage as part of this book, rather focus on some of the little-big things,
    like using containers within our test classes.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
- en: 'We start of by adding the following line under the `testsuites` element of
    our `phpunit.xml.dist` file:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: With that in place, running the `phpunit` command from the root of our shop
    should pick up any test we have defined under the `src/Foggyline/CatalogBundle/Tests/`
    directory.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
- en: 'Now let''s go ahead and create a test for our Category service menu. We do
    so by creating an `src/Foggyline/CatalogBundle/Tests/Service/Menu/CategoryTest.php`
    file with the following content:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: The preceding example shows the usage of the `setUp` and `tearDown` method calls,
    which are analogous in behavior to the PHP's `__construct` and `__destruct` methods.
    We use the `setUp` method to set the entity manager and router service that we
    can use through out the rest of the class. The `tearDown` method is merely a clean
    up. Now if we run the `phpunit` command, we should see our test being picked up
    and executed alongside other tests.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
- en: 'We can even target this class specifically by executing a `phpunit` command
    with the full class path, as shown here:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: Similarly to what we did for `CategoryTest`, we can go ahead and create `OnSaleTest`;
    the only difference between the two being the class name.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
- en: Functional testing
  id: totrans-131
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The great thing about the auto-generate CRUD tool is that it generates even
    the functional tests for us. More specifically, in this case, it generated the
    `CategoryControllerTest.php` and `ProductControllerTest.php` files within the
    `src/Foggyline/CatalogBundle/Tests/Controller/` directory.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  id: totrans-133
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Auto-generated functional tests have a commented out methods within class body.
    This throws an error during the `phpunit` run. We need to at least define a dummy
    `test` method in them to allow `phpunit` to overlook them.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
- en: 'If we look into these two files, we can see that they both have a single `testCompleteScenario`
    method defined, which is entirely commented out. Let''s go ahead and change the
    `CategoryControllerTest.php` content as follows:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: We started off by setting `PHP_AUTH_USER` and `PHP_AUTH_PW` as parameters for
    the `createClient` method. This is because our `/new` and `/edit` routes are protected
    by the core module security. These settings allow us to pass the basic HTTP authentication
    along the request. We then tested if the category listing page can be accessed
    and if its Create a new entry link can be clicked. Furthermore, both the `create`
    and `edit` forms were tested, along with their results.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
- en: All that remains is to repeat the approach we just used for `CategoryControllerTest.php`
    with `ProductControllerTest.php`. We simply need to change a few labels within
    the `ProductControllerTest` class file to match the `product` routes and expected
    results.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 现在剩下的就是重复我们刚才在`CategoryControllerTest.php`中使用的方法，在`ProductControllerTest.php`中进行。我们只需要在`ProductControllerTest`类文件中更改一些标签，以匹配`product`路由和预期结果。
- en: Running the `phpunit` command now should successfully execute our tests.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 现在运行`phpunit`命令应该能成功执行我们的测试。
- en: Summary
  id: totrans-140
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: Throughout this chapter we have built a miniature, but functional, catalog module.
    It allowed us to create, edit, and delete categories and products. By adding a
    few custom lines of code on top of the auto-generated CRUD, we were able to achieve
    image upload functionality for both categories and products. We also saw how to
    override the core module service, by simply removing the existing service definition
    and providing a new one. In regard to tests, we saw how we can pass the authentication
    along our requests to test for protected routes.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们构建了一个微型但功能齐全的目录模块。它允许我们创建、编辑和删除类别和产品。通过在自动生成的CRUD之上添加几行自定义代码，我们能够为类别和产品实现图像上传功能。我们还看到了如何覆盖核心模块服务，只需删除现有的服务定义并提供一个新的定义。在测试方面，我们看到了如何在我们的请求中传递身份验证以测试受保护的路由。
- en: Moving forward, in the next chapter, we will build a customer module.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的章节中，我们将构建一个客户模块。
