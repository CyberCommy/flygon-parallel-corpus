- en: Chapter 3. Constructing a Simple Responsive Blog with Responsive.gs
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '*In the previous chapter, we installed a number of software that will facilitate
    our projects. Here, we will start off our very first project. In this project,
    we are going to build a responsive blog.*'
  prefs: []
  type: TYPE_NORMAL
- en: '*Having a blog is essential for a company. Even several Fortune 500 companies
    such as FedEx ([http://outofoffice.van.fedex.com/](http://outofoffice.van.fedex.com/)),
    Microsoft ([https://blogs.windows.com/](https://blogs.windows.com/)) and General
    Motors ([http://fastlane.gm.com/](http://fastlane.gm.com/)) have official corporate
    blogs. A blog is a great channel for the company to publish official news as well
    as to connect with their customers and the masses. Making the blog responsive
    is the way to go to make the blog more accessible to the readers who may access
    the site through a mobile device, such as a phone or tablet.*'
  prefs: []
  type: TYPE_NORMAL
- en: '*As the blog that we are going to build in this first project will not be that
    complex, this chapter would be an ideal chapter for those who have just come across
    responsive web design.*'
  prefs: []
  type: TYPE_NORMAL
- en: '*So let''s get started.*'
  prefs: []
  type: TYPE_NORMAL
- en: 'To sum up, in this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Dig into Responsive.gs components
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Examine the blog blueprint and design
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Organize the website files and folders
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Look into HTML5 elements for semantic markup
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Construct the blog markup
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Responsive.gs components
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As we mentioned in [Chapter 1](part0016.xhtml#aid-F8902 "Chapter 1. Responsive
    Web Design"), *Responsive Web Design*, Responsive.gs is a lightweight CSS framework.
    It comes only with the bare minimum requirements for building responsive websites.
    In this section, we are going to see what is included in Responsive.gs.
  prefs: []
  type: TYPE_NORMAL
- en: The classes
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Responsive.gs is shipped with a series of reusable classes to form the responsive
    grid that makes it easier and faster for web designers to build web page layout.
    These classes contain preset style rules that have been carefully calibrated and
    tested. So we can simply drop in these classes within the HTML element to construct
    the responsive grid. The following is a list of the classes in Responsive.gs:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Class name | Usage |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `container` | We use this class to set the web page container and align it
    to the center of the browser window. This class, however, does not give the element
    width. Responsive.gs gives us the flexibility to set the width as per our requirement.
    |'
  prefs: []
  type: TYPE_TB
- en: '| `row`, `group` | We use these two classes to wrap a group of columns. Both
    of these classes are set with so called self-clearing floats that fix some layout
    issues caused by the element with the CSS `float` property.Check the following
    references for further information about the CSS `float` property and the issue
    it may cause to a web page layout:'
  prefs: []
  type: TYPE_NORMAL
- en: '*The Mystery Of The CSS Float Property* by Louis Lazaris ([http://www.smashingmagazine.com/2009/10/19/the-mystery-of-css-float-property/](http://www.smashingmagazine.com/2009/10/19/the-mystery-of-css-float-property/))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*All About Floats* by Chris Coyier ([http://css-tricks.com/all-about-floats/](http://css-tricks.com/all-about-floats/))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| `col` | We use this class to define the column of the web page. This class
    is set with the CSS `float` property. So any elements set with this class have
    to be contained within an element with the `row` or `group` class to avoid the
    issues caused by the CSS `float` property. |'
  prefs: []
  type: TYPE_TB
- en: '| `gutters` | We use this class to add spaces between the columns set with
    the preceding `col` class. |'
  prefs: []
  type: TYPE_TB
- en: '| `span_{x}` | This class defines the column width. So we use this class in
    tandem with the `col` class.Responsive.gs comes in three variants of grid, which
    gives us flexibility while organizing the web page layout. Responsive.gs is available
    in the 12-, 16-, and 24-columns format. These variants are set in three separate
    style sheets. If you download Responsive.gs package and then unpack it, you will
    find three style sheets named `responsive.gs.12col.css`, `responsive.gs.16col.css`,
    and `responsive.gs.24col.css`.The only difference between these style sheets is
    the number of `span_` classes defined within it. It is apparent that the 24-column
    format style sheet has the most number of `span_{x}` classes; the class stretches
    from `span_1` to `span_24`. If you need greater flexibility on dividing your page,
    then using the 24-column format of Responsive.gs is the way to go. Though each
    column may be too narrow. |'
  prefs: []
  type: TYPE_TB
- en: '| `clr` | This class is provided to address the floating issue. We use this
    class in the occasion where using the row class would not be semantically appropriate.
    |'
  prefs: []
  type: TYPE_TB
- en: 'Now, let''s see how we apply them in an example to discover how they really
    work. Many times, you will see that a web page is divided into a multiple columns
    structure. Take that into account as our example here; we can do the following
    to construct a web page with two columns of content:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: As you can see from the preceding code snippet, we first added `container` that
    wraps all the contents. Then, it is followed by `div` with a `row` class to wrap
    the columns. At the same time, we also added the `gutters` class so that there
    will be blank space between the two columns. In this example, we used the 12-column
    format. Therefore, to split the page into two equal columns, we added the `span_6`
    class for each column. This is to say that the number of `span_{x}` classes should
    be equal to 12, 16, or 24 in accordance with the variant we are using in order
    for the columns to cover the entire container. So, if we used the 16-columns format,
    for example, we may add `span_8` instead.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the browser, we will see the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The classes](img/image00242.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Using HTML5 elements for semantic markups
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Paul Boag, in his article *Semantic code: What? Why? How?* ([http://boagworld.com/dev/semantic-code-what-why-how/](http://boagworld.com/dev/semantic-code-what-why-how/))
    wrote:'
  prefs: []
  type: TYPE_NORMAL
- en: '*HTML was originally intended as a means of describing the content of a document,
    not as a means to make it appear visually pleasing.*'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Unlike traditional content outlets such as newspapers or magazines, which are
    apparently intended for humans, the Web is read both by humans and machines such
    as search engines and screen readers that help visually impaired people navigate
    websites. So making our website structure semantic is really encouraged. Semantic
    markup allows these machines to understand the content better and also makes the
    content more accessible in different formats.
  prefs: []
  type: TYPE_NORMAL
- en: 'On that account, HTML5 introduces a bunch of new elements in its mission to
    make the web more semantic. The following is a list of elements that we are going
    to use for the blog:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Element | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `<header>` | The `<header>` element is used to specify the head of a section.
    While this element may be used commonly to specify the website header, it is also
    appropriate to use this element to specify, for example, the article header where
    we place the title and other supporting pieces of the article. We can use `<header>`
    multiple times in a single page where it is fitting. |'
  prefs: []
  type: TYPE_TB
- en: '| `<nav>` | The `<nav>` element is used to represent a group of links that
    is intended as the primary navigation of the website or a section of a page. |'
  prefs: []
  type: TYPE_TB
- en: '| `<article>` | The `<article>` element is quite self-explanatory. This element
    specifies the article of a website, such as the blog entry or the main page content.
    |'
  prefs: []
  type: TYPE_TB
- en: '| `<main>` | The `<main>` element defines the main portion of a section. This
    element can be used to do things such as wrapping the article content. |'
  prefs: []
  type: TYPE_TB
- en: '| `<figure>` | The `<figure>` element is used to specify document figures such
    as diagrams, illustrations, and images. The `<figure>` element can be used along
    with `<figcaption>` to add the figure''s caption, if needed. |'
  prefs: []
  type: TYPE_TB
- en: '| `<figcaption>` | As mentioned, `<figcaption>` represents the caption of the
    document''s figure. Thus, it must be used in tandem with the `<figure>` element.
    |'
  prefs: []
  type: TYPE_TB
- en: '| `<footer>` | Similar to the `<header>` element, the `<footer>` element is
    commonly used to specify the website footer. But it can also be used to represent
    the end or the lowest part of a section. |'
  prefs: []
  type: TYPE_TB
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Refer to the cheat sheet [http://websitesetup.org/html5-cheat-sheet/](http://websitesetup.org/html5-cheat-sheet/),
    to find more new HTML elements in HTML5.
  prefs: []
  type: TYPE_NORMAL
- en: HTML5 search input types
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Besides the new elements, we will also add one particular new type of input
    on the blog, search. As the name implies, the search input type is used to specify
    a search input. In the desktop browsers, you may not see a significant difference.
    You may also not immediately see how the search input type give advantages to
    the website and the users.
  prefs: []
  type: TYPE_NORMAL
- en: 'The search input type will boost the experience of mobile users. Mobile platforms
    such as iOS, Android, and the Windows Phone have been equipped with contextual
    screen keyboards. The keyboard will change according to the input type. You can
    see in the following screenshot that the keyboard displays the **Search** button,
    which allows users to perform a search more conveniently:'
  prefs: []
  type: TYPE_NORMAL
- en: '![HTML5 search input types](img/image00243.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: HTML5 placeholder attribute
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'HTML5 introduced a new attribute named `placeholder`. The specs described this
    attribute as a short hint (a word or short phrase) intended to aid the user with
    data entry when the control has no value, as shown in the following example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'You will see that **Search here…** in the `placeholder` attribute is shown
    in the input field, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![HTML5 placeholder attribute](img/image00244.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: In the past, we relied on JavaScript to achieve a similar effect. Today, with
    the `placeholder` attribute, the application gets much simpler.
  prefs: []
  type: TYPE_NORMAL
- en: HTML5 in Internet Explorer
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: These new HTML elements make our document markup more descriptive and meaningful.
    Unfortunately, Internet Explorer 6, 7, and 8 will not recognize them. Thus, the
    selectors and style rules that address these elements are inapplicable; it is
    as if these new elements are not included in the Internet Explorer dictionary.
  prefs: []
  type: TYPE_NORMAL
- en: This is where a polyfill named HTML5Shiv comes into play. We will include HTML5Shiv
    ([https://github.com/aFarkas/html5shiv](https://github.com/aFarkas/html5shiv))
    to make Internet Explorer 8 and its lower versions acknowledge these new elements.
    Read the following post ([http://paulirish.com/2011/the-history-of-the-html5-shiv/](http://paulirish.com/2011/the-history-of-the-html5-shiv/))
    by Paul Irish for the history behind HTML5Shiv; how it was invented and developed.
  prefs: []
  type: TYPE_NORMAL
- en: Furthermore, older Internet Explorer versions won't be able to render the content
    in the HTML5 `placeholder` attribute. Fortunately, we can patch mimic the `placeholder`
    attribute functionality in the old Internet Explorer with a polyfill ([https://github.com/UmbraEngineering/Placeholder](https://github.com/UmbraEngineering/Placeholder)).
    We will use it later on the blog as well.
  prefs: []
  type: TYPE_NORMAL
- en: A look into polyfills in the Responsive.gs package
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Responsive.gs is also shipped with two polyfills to enable certain features
    that are not supported in Internet Explorer 6, 7, and 8\. From now on, let's refer
    to these browser versions as "old Internet Explorer", shall we?
  prefs: []
  type: TYPE_NORMAL
- en: Box sizing polyfills
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The first polyfill is available through an **HTML Component** (**HTC**) file
    named `boxsizing.htc`.
  prefs: []
  type: TYPE_NORMAL
- en: An HTC file is much the same as JavaScript and is commonly used in tandem with
    the Internet Explorer proprietary CSS property `behavior` to add a specific functionality
    to Internet Explorer. The `boxsizing.htc` file that comes with Responsive.gs will
    apply a similar functionality as in the CSS3 `box-sizing` property.
  prefs: []
  type: TYPE_NORMAL
- en: 'Responsive.gs includes the `boxsizing.htc` file within the style sheets as
    follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: As shown in the preceding code snippet, Responsive.gs applies the `box-sizing`
    property and includes the `boxsizing.htc` file with the asterisk selector. This
    asterisk selector is also known as wildcard selector; it selects all the elements
    within the document, and that being said, `box-sizing`, in this case, will affect
    all elements within the document.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `boxsizing.htc` file path must be an absolute path or relative to the HTML
    document in order for polyfill to work. This is a hack. It is something we forcibly
    use to make old Internet Explorer behave like a modern browser. Using an HTC file
    such as the preceding one is not considered valid as per the W3C standards.
  prefs: []
  type: TYPE_NORMAL
- en: Please refer to this page by Microsoft regarding HTC files ([http://msdn.microsoft.com/en-us/library/ms531018(v=vs.85).aspx](http://msdn.microsoft.com/en-us/library/ms531018(v=vs.85).aspx)).
  prefs: []
  type: TYPE_NORMAL
- en: CSS3 media queries polyfill
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The second polyfill script that comes along with Responsive.gs is `respond.js`
    ([https://github.com/scottjehl/Respond](https://github.com/scottjehl/Respond)),
    which will "magically enable" CSS3 `respond.js` to work out of the box. There
    is no need for configuration; we can simply link the script within the `head`
    tag as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding code, we encapsulated the script inside `<!--[if lt IE 9]>`
    to make the script load only within the old Internet Explorer.
  prefs: []
  type: TYPE_NORMAL
- en: Examining the blog's wireframe
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Building a website is much the same as building a house; we need to examine
    the specification of every corner before we stack up all the bricks. So, before
    we jump in to building the blog, we will examine the blog's wireframe to see how
    the blog is laid out and also see the things that will be displayed on the blog.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s take a look at the following wireframe. This wireframe shows the blog
    layout when it is viewed on the desktop screen:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Examining the blog''s wireframe](img/image00245.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: As you can see in the preceding screenshot, the blog will be plain and simple.
    In the header, the blog will have a logo and a search form. Down below the header,
    consecutively, we will place the menu navigation, the blog post, the pagination
    for navigating to the next or previous list of posts, and the footer.
  prefs: []
  type: TYPE_NORMAL
- en: The blog post, as in general, will comprise the title, the publishing date,
    the post's featured image, and the post excerpt. This wireframe is an abstraction
    of the blog's layout. We use it as our visual reference of how the blog layout
    will be arranged. So, in spite of the fact that we have shown only one post within
    the preceding wireframe, we will actually add a few more post items on the actual
    blog later on.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is the blog layout when the viewport width is squeezed:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Examining the blog''s wireframe](img/image00246.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: When the viewport width gets narrow, the blog layout adapts. It is worth noticing
    that when we shift the layout, we should not alter the content flow as well as
    the UI hierarchy. Assuring the layout consistency between the desktop and the
    mobile version will help the users get familiar with a website quickly, regardless
    of where they are viewing the website. As shown in the preceding wireframe, we
    still have the UI set in the same order, albeit, they are now stacked vertically
    in order to fit in the limited area.
  prefs: []
  type: TYPE_NORMAL
- en: One thing that is worth mentioning from this wireframe is that the navigation
    turns into an HTML dropdown selection. We will discuss how to do so during the
    course of building the blog.
  prefs: []
  type: TYPE_NORMAL
- en: Now, as we have prepared the tools and checked out the blog layout, we are ready
    to start off the project. We will start off by creating and organizing the project
    directories and assets.
  prefs: []
  type: TYPE_NORMAL
- en: Organizing project directories and files
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Often, we will have to link to certain files, such as style sheets and images.
    Unfortunately, websites are not a clever thing; they cannot find these files on
    their own. So, we must set the filepath correctly to avoid broken link errors.
  prefs: []
  type: TYPE_NORMAL
- en: This is why having organized directories and files is essential when it comes
    to building websites. It will be exceptionally important when we are working on
    a very large project with a team of people and with dozens to hundreds of files
    to handle. Poorly managed directories could drive anyone in the team insane.
  prefs: []
  type: TYPE_NORMAL
- en: Having well-organized directories will help us minimize potential errors of
    broken links. It will also make the project more maintainable and easily scalable
    in the future.
  prefs: []
  type: TYPE_NORMAL
- en: Time for action – creating and organizing project directories and assets
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Perform the following steps to set up the project''s working directory:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Go to the `htdocs` folder. As a reminder, this folder is the folder in the
    local server located at:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`C:\xampp\htdocs` in Windows'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`/Applications/XAMPP/htdocs` in OSX'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`/opt/lampp/htdocs` in Ubuntu'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Create a new folder named `blog`. From now on, we will refer to this folder
    as the project directory.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a new folder named `css` to store style sheets.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a new folder named `image` to store images.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a new folder named `scripts` to store JavaScript files.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a new file named `index.html`; this HTML file will be the main page of
    the blog. Download the Responsive.gs package from [http://responsive.gs/](http://responsive.gs/).
    The package comes in the `.zip` format. Extract the package to unleash the files
    within the package. There, you will find a number of files, including style sheets
    and JavaScript files, as you can see from the following screenshot:![Time for
    action – creating and organizing project directories and assets](img/image00247.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The files that ship in Responsive.gs
  prefs: []
  type: TYPE_NORMAL
- en: Move `responsive.gs.12col.css` to the `css` folder of the project directory;
    it is the only style sheet of Responsive.gs that we need.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Move `boxsizing.htc` to the `scripts` folder of the project directory.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The `respond.js` file that ships in the Responsive.gs package is out-of-date.
    Let's download the latest version of Respond.js from the GitHub repository ([https://github.com/scottjehl/Respond/blob/master/src/respond.js](https://github.com/scottjehl/Respond/blob/master/src/respond.js))
    instead, and put it in the `scripts` folder of the project directory.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Download HTML5Shiv from [https://github.com/aFarkas/html5shiv](https://github.com/aFarkas/html5shiv).
    Put the JavaScript file `html5shiv.js` within the `scripts` folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We will also use the placeholder polyfill that is developed by James Brumond
    ([https://github.com/UmbraEngineering/Placeholder](https://github.com/UmbraEngineering/Placeholder)).
    James Brumond developed four different JavaScript files for cater to different
    scenarios.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The script that we are going to use here is `ie-behavior.js`, because this script
    specifically addresses Internet Explorer. Download the script ([https://raw.githubusercontent.com/UmbraEngineering/Placeholder/master/src/ie-behavior.js](https://raw.githubusercontent.com/UmbraEngineering/Placeholder/master/src/ie-behavior.js))
    and rename it as `placeholder.js` to make it more apparent that this script is
    a placeholder polyfill. Put it in the `scripts` folder of the project directory.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The blog will need a few images to use as the post's featured image. In this
    book, we will use the images shown in the following screenshot, consecutively
    taken by Levecque Charles ([https://twitter.com/Charleslevecque](https://twitter.com/Charleslevecque))
    and Jennifer Langley ([https://jennifer-langley.squarespace.com/photography/](https://jennifer-langley.squarespace.com/photography/)):![Time
    for action – creating and organizing project directories and assets](img/image00248.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Find more free high-definition images at Unsplash ([http://unsplash.com/](http://unsplash.com/)).
  prefs: []
  type: TYPE_NORMAL
- en: We will add a favicon to the blog. A favicon is a tiny icon that appears on
    the browser tab beside the title, which will be helpful for readers to quickly
    identify the blog. The following is a screenshot that shows a number of pinned
    tabs in Chrome. I bet that you are still able to recognize the websites within
    these tabs just by seeing the favicon:![Time for action – creating and organizing
    project directories and assets](img/image00249.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Google Chrome pinned tabs
  prefs: []
  type: TYPE_NORMAL
- en: Further, we will also add the iOS icon. In Apple devices such as iPhone and
    iPad, we can pin websites on the home screen to make it quick to access the website.
    This is where the Apple icon turns out to be useful. iOS (the iPhone/iPad operating
    system) will show the icon we provide, as shown in the following screenshot, as
    if it was a native application:![Time for action – creating and organizing project
    directories and assets](img/image00250.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Website added to the iOS home screen
  prefs: []
  type: TYPE_NORMAL
- en: These icons are provided in the source files that come along with this book.
    Copy these icons and paste them in the image folder that we have just created
    in step 5, as shown in the following screenshot:![Time for action – creating and
    organizing project directories and assets](img/image00251.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Create favicons and iOS icons quickly and easily with AppIconTemplate.
  prefs: []
  type: TYPE_NORMAL
- en: AppIconTemplate ([http://appicontemplate.com/](http://appicontemplate.com/))
    is a Photoshop template that makes it easy for us to design the icon. The template
    is also shipped with Photoshop Actions to generate the icons with a few clicks.
  prefs: []
  type: TYPE_NORMAL
- en: '*What just happened?*'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We have just created a directory for this project and put a couple of files
    in the directory. These files include the Responsive.gs style sheets and JavaScript
    files, images and icons, and a number of polyfills. We have also created an `index.html`
    file that will be the home page for the blog. At this point, the project directory
    should contain files as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![What just happened?](img/image00252.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: The current files and folders in the working directory
  prefs: []
  type: TYPE_NORMAL
- en: Have a go hero – making the directory structure more organized
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Many people have their own preferences for how to organize their project's directory
    structure. The one shown in the previous section was just an example, of how I
    personally manage the directory for this project.
  prefs: []
  type: TYPE_NORMAL
- en: 'Try going further to make the directory more organized and meet your own preference
    for organization. A few common ideas are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Make the folder name shorter, that is, `js` and `img`, instead of JavaScript
    and Image
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Group the folders `js`, `img`, and `css` all together in a new folder named
    `assets`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Pop quiz – using polyfill
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Earlier in this book, we discussed polyfill and also mentioned a few polyfill
    scripts that we are going to implement in the blog.
  prefs: []
  type: TYPE_NORMAL
- en: Q1\. When do you think would be an appropriate time to use the polyfill?
  prefs: []
  type: TYPE_NORMAL
- en: When the blog is viewed in Internet Explorer 6.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When the feature is not supported in the browser.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When we need to add new feature on the website.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We can use it at anytime.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The blog HTML structures
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We have laid the structure of the project directories and files in the previous
    section. Let's now start constructing the blog markup. As we mentioned, we will
    use a number of HTML5 elements to form a more meaningful HTML structure.
  prefs: []
  type: TYPE_NORMAL
- en: Time for action – constructing the blog
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Perform the following steps to build the blog:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the `index.html` file that we have created in step 6 of the previous section
    *Time for action – creating and organizing project directories and assets*. Let''s
    start by adding the most basic HTML5 structure as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Here, set `DOCTYPE`, which has been brought to the bare minimum form. The `DOCTYPE`
    format in HTML5 is now shorter and cleaner than the `DOCTYPE` format of its HTML4
    counterpart. Then, we set the language of our page, which in this case is set
    to `en` (English). You may change it to your local language; find the code for
    your local language at [http://en.wikipedia.org/wiki/List_of_ISO_639-1_codes](http://en.wikipedia.org/wiki/List_of_ISO_639-1_codes).
  prefs: []
  type: TYPE_NORMAL
- en: We have also set the character encoding to `UTF-8` to enable the browser to
    render the Unicode characters, such as `U+20AC`, to the readable format `€`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Below the `charset` meta tag in the `head` tag, add the following meta:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Internet Explorer can sometimes behave oddly, where it suddenly switches to
    compatibility mode and renders the page as viewed in Internet Explorer 8 and 7\.
    This meta tag addition will prevent that from happening. It will force Internet
    Explorer to render the page with the highest support of the latest standards available
    in Internet Explorer.
  prefs: []
  type: TYPE_NORMAL
- en: 'Below the `http-equiv` meta tag, add the following meta viewport tag:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: As we mentioned in [Chapter 1](part0016.xhtml#aid-F8902 "Chapter 1. Responsive
    Web Design"), *Responsive Web Design*, the preceding viewport meta tag specification
    defines the web page viewport width to follow the device viewport size. It also
    defines the web page scale at 1:1 upon opening the web page the first time.
  prefs: []
  type: TYPE_NORMAL
- en: 'Link the Apple icon with the `link` tag, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: As per Apple's official instructions, you would normally need to include multiple
    sources of icons to cater to iPhone, iPad, and the devices with a Retina screen.
    That isn't actually necessary for our blog. The trick is that we deliver the largest
    size required, which is 512 px square, through a single source, as shown in the
    previous screenshot.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Head over to the Apple documentation, specifying a web page icon for Web Clip
    ([https://developer.apple.com/library/ios/documentation/AppleApplications/Reference/SafariWebContent/ConfiguringWebApplications/ConfiguringWebApplications.html](https://developer.apple.com/library/ios/documentation/AppleApplications/Reference/SafariWebContent/ConfiguringWebApplications/ConfiguringWebApplications.html)),
    for further reference.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add a description meta tag below the title, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'This description of the blog will show up in **Search Engine Result Page**
    (**SERP**). In this step, we will construct the blog header. First, let''s add
    the HTML5 `<header>` element along with the classes for styling, to wrap the header
    content. Add the following within the `body` tag:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Within the `<header>` element that we added in step 9, add a new `<div>` element
    with the `container` and `gutters` class, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Referring to the table shown earlier in the chapter, the `container` class will
    align the blog header content to the center of the browser window, while the `gutters`
    class will add spaces between the columns, which we will add in the next steps.
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a new column to contain the blog logo/name with a `<div>` element along
    with the Responsive.gs `col` and `span_9` class to set the `<div>` element as
    column and specify the width. Don''t forget to add the class to add custom styles:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Referring to the blog wireframe, we will have a search form next to the blog
    logo/name. On that account, create another new column with a `<div>` element together
    with the `col` and `span_3` class of Responsive.gs, and the input search type.
    Add the `<div>` element below the logo markup as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: As we mentioned earlier in this chapter, we used an input search type to serve
    a better user experience. This input will show the mobile screen keyboard with
    a special key that allows users to hit the **Search** button and immediately run
    the search. We also added placeholder text with the HTML5 `placeholder` attribute
    to show the users that they can perform a search in the blog through the input
    field.
  prefs: []
  type: TYPE_NORMAL
- en: 'After constructing the header blog, we will construct the blog navigation.
    Here we will use the HTML5 `nav` element to define a new section as navigation.
    Create a `nav` element along with the supporting classes to style. Add the `nav`
    element below the header construction as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Inside the `nav` element, create a `div` element with the `container` class
    to align the navigation content to the center of the browser window:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'In accordance to the wireframe, the blog will have five items on the link menu.
    We will lay out this link with the `ul` element. Add the links within the container,
    as shown in the following code snippet:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Having done with constructing the navigation, we will construct the content
    section of the blog. Following the wireframe, the content will consist a list
    of posts. First, let''s add the HTML5 `<main>` element to wrap the content below
    the navigation as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: We use the `<main>` element as we consider the posts as the prime section of
    our blog.
  prefs: []
  type: TYPE_NORMAL
- en: 'Similar to the other blog sections—the header and the navigation—we add a container
    `<div>` to align the blog posts to the center. Add this `<div>` element within
    the `<main>` element:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'We will now create the blog post markup. Think of the blog post as an article.
    Thus, here we will use the `<article>` element. Add the `<article>` element within
    the container `<div>` that we will add in step 17 as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: As mentioned, the `<header>` element is not limited to define a header. The
    blog can be used to define the head of a section. In this case, apart from the
    blog header, we will use the `<header>` element to define the articles head section
    that contains the article title and publishing date.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the `<header>` element within the article element:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'A picture is worth a thousand words. So, it''s the norm to use an image to
    support the post. Here, we will display the image below the post header. We will
    group the featured image together with the post excerpt as the post summary, as
    shown in the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: Add a few more posts subsequently. Optionally, you may exclude the post featured
    image in the other posts.
  prefs: []
  type: TYPE_NORMAL
- en: After adding a pile of posts, we will now add the post pagination. The pagination
    is a form of common page navigation that allows us to jump to the next or previous
    list of posts. Normally, the pagination is located at the bottom of the page after
    the last post item.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The pagination of a blog consists of two links to navigate to the next and previous
    page, and a small section to place the page numbers to show what page the user
    is currently in.
  prefs: []
  type: TYPE_NORMAL
- en: 'So, add the following code after the last post:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, we will construct the blog footer. We can define the blog footer using
    the HTML5 `<footer>` element. The footer structure is identical to the one for
    the header. The footer will have two columns; each respectively contains the blog
    footer links (or, as we call it, secondary navigation) and copyright statement.
    These columns are wrapped with a `<div>` container. Add the following footer in
    the main section, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: '*What just happened?*'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We have just finished constructing the blog's HTML structure—the header, the
    navigation, the content, and the footer. Assuming that you have been following
    our instructions closely, you can access the blog at `http://localhost/blog/`
    or `http://{coputer-username}.local/blog/` in OS X.
  prefs: []
  type: TYPE_NORMAL
- en: 'However, as we haven''t applied any styles, you will find that the blog is
    looking plain and the layout is yet to be organized:'
  prefs: []
  type: TYPE_NORMAL
- en: '![What just happened?](img/image00253.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: The blog appearance at the current stage
  prefs: []
  type: TYPE_NORMAL
- en: We will style the blog in the next chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Have a go hero – creating more blog pages
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this book, we only build the blog's home page. However, you are free to extend
    the blog by creating more pages, such as adding an about page, a single post content
    page, and a page with a contact form. You may reuse the HTML structure that we
    have built in this chapter. Remove anything within the `<main>` element and replace
    it with content as per your requirement.
  prefs: []
  type: TYPE_NORMAL
- en: Pop quiz – HTML5 elements
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let''s end this chapter with simple questions regarding HTML5:'
  prefs: []
  type: TYPE_NORMAL
- en: Q1\. What is the `<header>` element used for?
  prefs: []
  type: TYPE_NORMAL
- en: It is used to represent the website header.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: It is used to represent a group of introductory and navigational aids.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Q2\. What is the `<footer>` element used for?
  prefs: []
  type: TYPE_NORMAL
- en: It is used to represent the website footer.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: It is used to represent the end or the lowest part of a section.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Q3\. Is it allowed to use the `<header>` and `<footer>` elements multiple times
    within a single page?
  prefs: []
  type: TYPE_NORMAL
- en: Yes, as long as it's semantically logical.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: No, it's considered redundant.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we started our first project. Earlier in the chapter, we explored
    the Responsive.gs components, looked into how Responsive.gs constructs a responsive
    grid, and what classes are used to shape the grid.
  prefs: []
  type: TYPE_NORMAL
- en: We also discussed HTML5, including the new elements, namely, the polyfills to
    mimic HTML5 features in the browsers that do not support particular features natively.
    Then, we used HTML5 to construct the blog markup.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will be focusing more on marking the blog up using CSS3
    and adding some JavaScript. We will also be debugging the blog for errors that
    turn up in old Internet Explorer.
  prefs: []
  type: TYPE_NORMAL
