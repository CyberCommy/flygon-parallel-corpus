- en: Preparing for an Application Penetration Test
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we are going to pentest various vulnerable applications via
    Burp to better understand how we can pentest efficiently with Burp Suite.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following topics will be covered in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Setup of vulnerable web applications
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Reconnaissance and file discovery
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Testing authentication schema with Burp
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setup of vulnerable web applications
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In order for us to commence with this chapter, the reader will have to download
    the following vulnerable apps:'
  prefs: []
  type: TYPE_NORMAL
- en: Xtreme Vulnerable Web Application
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: OWASP Broken Web Applications
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting up Xtreme Vulnerable Web Application
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In order to set up the Xtreme Vulnerable Web Application, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Download the Xtreme Vulnerable Web Application; visit [https://download.vulnhub.com/xvwa/](https://download.vulnhub.com/xvwa/)
    and click on `xvwa.iso`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Once downloaded, open VirtualBox and click on New:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/a86747de-adb5-4943-9075-10961de7fba1.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Set the name of the new virtual machine. We have given it the following name:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/80d4adf4-e585-4d98-8014-2f5463b15c48.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Provide around 1024 MB of RAM, as shown in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/cb8b621f-fb84-4a08-8b58-2f476f3b2ee8.png)'
  prefs: []
  type: TYPE_IMG
- en: Next, ...
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Setting up OWASP Broken Web Application
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In order to set up the OWASP Broken Web Application, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Download the OWASP BWA from: [https://download.vulnhub.com/owaspbwa/](https://download.vulnhub.com/owaspbwa/);
    go to website and click on `OWASP_Broken_Web_Apps_VM_1.2.7z`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once downloaded, open VirtualBox and, as shown in the following screenshot,
    click on New.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Set the name of the new virtual machine. We have given it the following name:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/5893c761-1f94-4240-a41c-5c9158398ea6.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Provide around 1024 MB of RAM and then, select the option Use an existing virtual
    hard disk file, as shown in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/9c04b8ce-c9ab-4672-b432-581f8c4bd3e4.png)'
  prefs: []
  type: TYPE_IMG
- en: Select the extracted OWASP Web Apps `.vmdk` file and click on Create. This will
    create a virtual machine. To start this virtual machine, select the machine from
    the list of machines and click on the Start button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Testing for authentication via Burp
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This topic primarily talks about trying to brute force authentication pages
    in case rate limiting is not put into place. We will be learning how we can use
    Burp on various login pages to try and brute force the authentication with a set
    of username and password dictionaries. Lastly, we will also check if the authentication
    page is vulnerable to SQL injection.
  prefs: []
  type: TYPE_NORMAL
- en: Brute forcing login pages using Burp Intruder
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let us not waste time and quickly head on to a few of the applications to see
    how we can use Burp to brute force credentials on authentication pages. The first
    application we will brute force is OrangeHRM in the OWASP BWA list.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/b68a9314-73a9-448e-8841-5bff0669f1c4.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Once you open the app, you will be shown a login page; there is no option to
    register this application. So we have two options, either test for SQL injection
    or brute-force dictionary-based passwords with the hope that one of the username
    and password combinations hit valid. The following screenshot shows the homepage:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/c69978bb-809f-4c5a-ba2c-ddf25fd741f8.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The default credentials of this application is `admin`:`admin`, however, for
    the purpose of showing how we can brute force the login page, the password has
    been changed to another dictionary word. Let us go ahead and type any random username
    and password, `test` and `test`, and click on Login. Ensure that while you do,
    your proxy is on and you receive the intercept to send this request to the intruder,
    as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/3ce96fac-ce63-4b5c-b79b-8c9671988a5b.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Go to the Intruder tab and click on the Clear § button to remove all the predefined
    attack points. Our core concern is to attack the username and password values,
    so we select the username and password fields and add them to our attack points,
    and change the Attack type to Cluster bomb, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/657a6572-c8a7-40cd-a3a4-91c41e77f54d.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now, before we proceed ahead, let us understand why we selected cluster bomb
    as the attack type. There are four different types of attack types in the intruder
    capability of Burp. The four attack types are:'
  prefs: []
  type: TYPE_NORMAL
- en: Sniper
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Battering ram
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Pitchfork
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Cluster bomb
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'We have already looked into these attack types in the previous chapter. Now
    that we have understood the different attack types, let us go ahead with our cluster
    bomb and feed in values for the username and password payloads. Go to the Payloads
    section and select Payload set 1 and in the payload options select Add from list..
    and select Usernames. If you are using Burp Basic, you can download wordlist from [https://github.com/danielmiessler/SecLists](https://github.com/danielmiessler/SecLists),
    select the Add option, and give the path of the username. For professional users,
    have a look at the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/283f0b74-34f0-492f-a573-e00a88716800.png)'
  prefs: []
  type: TYPE_IMG
- en: 'For basic users, once you download the list, just click on Load... and provide
    the path to the top usernames shortlist file, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/76fd4f0c-6776-4ac0-9957-536f95fb10a3.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Similarly, select Payload set 2 and select password for professional users
    via the add from the list, and for basic users, via load option. Professional
    users can also use a custom list if they don''t want to use the default list in
    Burp. So Payload set for password is set, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/e8099b04-f4e3-49e8-b4df-28ab20d2afbe.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Once the configuration is done, we can click on Start attack and it will brute
    force the set of usernames and passwords, giving us a valid credential if any
    of the combination hits are correct, for example:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/95c9ac8c-9548-4974-8901-d592c8acb198.png)'
  prefs: []
  type: TYPE_IMG
- en: 'As you can see, one of the combinations hit success and it gives status 302,
    meaning there is a chance this was the right password. Let''s go ahead and request
    this in the browser. Right-click on the request and select request in browser
    and then in current session you will be presented with a Burp URL. Copy and paste
    that in the URL space and, as you see from the following screenshot, you are successfully
    logged in:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/d49069ea-b3b3-4c81-8065-7c195a7c97dd.png)'
  prefs: []
  type: TYPE_IMG
- en: Testing for authentication page for SQL injection
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this module, we will see how to perform tests to verify if the application's
    authentication page is vulnerable to SQL injeciton. We will first understand how
    SQL injection affects the login page, what is the background logic to it, and
    how it executes and allows us to log in. Then we will test a few applications
    and see if the application is vulnerable to SQL injection or not.
  prefs: []
  type: TYPE_NORMAL
- en: The magic strings to test for SQL injection on the login page have the same
    logic but are represented differently due to validations. The whole aim is to
    try to come out of the input field of the SQL syntax and try to execute the payload
    as a part of the SQL query, which will result to true. For example, a few samples
    ...
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we setup the vulnerable web applications. Furthermore, we did
    reconnaissance to detect files and folders in the application via Burp. Finally,
    we learned how we can use Burp on various login pages to try and brute force the
    authentication with a set of username and password dictionaries.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will identify the vulnerabilities using Burp Suite
  prefs: []
  type: TYPE_NORMAL
