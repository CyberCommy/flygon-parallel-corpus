- en: Chapter 6. Other Raspberry Pi Projects
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Raspberry Pi was designed to be a system that can be customized for just
    about anything within the reach of a low budget OS. There are hundreds of documented
    use cases and many vendors posting ARM images scaled down to be part of the Raspberry
    Pi community. This includes creators of other penetration arsenals outside of
    Offensive Security's Kali Linux.
  prefs: []
  type: TYPE_NORMAL
- en: When evaluating other penetration testing ARM images for the Raspberry Pi, we
    found that most of the distributions were very similar to each other because they
    are using the same tools, and in many instances, the same builds. This means the
    upgrade life cycle and path for most applications will also be the same regardless
    of the ARM image you choose to go with. At the end of the day, you will need to
    pick a distribution that makes the most sense for you. If you are not sure what
    that is, then don't worry, it is Kali Linux.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following topics will be covered in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: PwnPi
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Raspberry Pwn
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: PwnBerry Pi
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Defending your network
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Intrusion detection and prevention
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Snort
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Content filters
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: KidSafe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Remote access with OpenVPN
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Tor relays and routers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Raspberry Tor
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Tor router
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Running Raspberry Pi on your PC using QEMU emulator
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Other Raspberry Pi uses
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Flight tracking using PiAware
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: PiPlay
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: PrivateEyePi
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let's look at some alternative penetration testing offerings aside from Kali
    Linux. The first one on the list is one of the most popular images, PwnPi, that
    some believe is a better option than Kali Linux.
  prefs: []
  type: TYPE_NORMAL
- en: PwnPi
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'PwnPi is an extremely mature penetration testing platform for the Raspberry
    Pi. At the time of writing this book, many people in the community claimed it
    is a more stable environment than Kali Linux specifically on the Raspberry Pi.
    However, we believe there is a shift in supporting Kali Linux for the Raspberry
    Pi rather than PwnPi because of the existing popularity and namesake of Kali Linux.
    Some people might call us biased, but hey, this is our second book on Kali Linux.
    The following screenshot is the PwnPi 3.0 introductory image when booting it up:'
  prefs: []
  type: TYPE_NORMAL
- en: '![PwnPi](img/6435OT_06_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: PwnPi brings some unique features such as support for over two hundred tools.
    PwnPi is built on Debian Wheezy optimized for the Raspberry Pi and has simple
    scripts to automatically configure reverse shell connections. You can learn more
    about PwnPi at [pwnpi.sourceforge.net](http://pwnpi.sourceforge.net).
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s look at installing and running PwnPi on a Raspberry Pi in the following
    manner:'
  prefs: []
  type: TYPE_NORMAL
- en: The first step is downloading PwnPi from the [pwnpi.sourceforge.net](http://pwnpi.sourceforge.net)
    website. The installation is similar to Kali Linux. For example, we used the `sudo
    dd if=pwnpi-3.0.img of=/dev/disk2` command to install the `pwnpi-3.0.img` file
    to our microSD card identified as `disk2` on our Mac computer.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Sometimes, we experienced booting problems when attempting to load the `pwnpi-3.0.img`.
    The work around is downloading the latest Raspberry Pi firmware from [https://github.com/raspberrypi/firmware](https://github.com/raspberrypi/firmware),
    which will be a ZIP file. Open that ZIP file and go to the `boot` folder. Copy
    everything in the `boot` folder and paste it in the `root` directory of the SD
    card once `pwnpi-3.0.img` has been installed. You will replace any existing files
    that overlap.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once this is done, put the microSD card into the Raspberry Pi and fire up PwnPi.
    We recommend backing up your current configuration and operating before proceeding.
    This method is described in detail in [Chapter 1](ch01.html "Chapter 1. Raspberry
    Pi and Kali Linux Basics"), *Raspberry Pi and Kali Linux Basics*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: We found that PwnPi as well as some other ARM images would not boot up at times
    due to drive problems. This is why we included the previous step covering how
    to add the firmware boot files prior to launching PwnPi. Try this technique if
    you run across an ARM image that does not boot properly.
  prefs: []
  type: TYPE_NORMAL
- en: Go and boot up your Raspberry Pi with your Raspberry Pwn image.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When you log in, you will be asked for a username and password. The default
    username is `root` and the default password is `toor`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We recommend running the `apt-get update` and `apt-get upgrade` commands at
    this point. PwnPi also has a basic web interface that you can launch, however,
    most tools will still need to be run from a terminal or command line. To launch
    the GUI desktop, just type `startx`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Since most tools will need to be run from the command line, the GUI provides
    some manageability for terminal windows and a list of some of the tools that come
    with PwnPi in the menus, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![PwnPi](img/6435OT_06_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: To launch any of the tools in PwnPi, simply navigate to the `/pentest` directory.
    You will find all the tools at this location. For example, if you want to run
    **Social-Engineer Toolkit**, simply type `/pentest/exploits/se-toolkit` from the
    terminal window. This will launch the tool. You can browse the directory for additional
    tools. Have a look at the previous chapters for information on how to use other
    popular tools found both in Kali Linux as well as PwnPi.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following screenshot shows the launch of **The Social-Engineer Toolkit**:'
  prefs: []
  type: TYPE_NORMAL
- en: '![PwnPi](img/6435OT_06_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Most security distributions will keep their tools in the `/pentest` directory.
    The actual tools themselves are exactly the same across distributions if you are
    using the same version of the tool.
  prefs: []
  type: TYPE_NORMAL
- en: Raspberry Pwn
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Raspberry Pwn is from the same team that brings you Pwn Pad and Pwn Phone. The
    Debian-based distribution will have your favorite tools such as SET, Wireshark,
    dnswalk, and various wireless testing applications. Consider it an alternative
    to Kali Linux containing many similar tools.
  prefs: []
  type: TYPE_NORMAL
- en: The installation process of Raspberry Pwn is different from a typical ARM image.
    This is because Raspberry Pwn basically sits on top of the Raspbian operating
    system.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s look at how to install and run Raspberry Pwn using the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: You need to first download a basic Debian Raspberry Pi (Raspbian) distribution
    found at [http://www.raspberrypi.org/downloads](http://www.raspberrypi.org/downloads).
    These images are constantly being updated so at the time of writing this book,
    we used the `2014-09-09-wheezy-raspbian.img` command, which worked fine.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You will need to install this image using the process covered in [Chapter 1](ch01.html
    "Chapter 1. Raspberry Pi and Kali Linux Basics"), *Raspberry Pi and Kali Linux
    Basics*. The command to install the Debian image is `sudo dd if=2014-09-09-wheezy-raspbian.img
    of=/dev/disk2`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once installed, put the microSD into your Raspberry Pi and make sure to connect
    it through the Ethernet port to an active port that provides access to the Internet.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Use the `sudo –i` command to become the root user.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Test network connectivity by pinging `google.com`. Once you confirm you have
    network connectivity, type `apt-get update` to update the firmware. This should
    only take a few minutes.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once the update process completes, type `apt-get install git` as shown in the
    preceding screenshot. This is followed by the `git clone https://github.com/pwnieexpress/Raspberry-Pwn.git`
    command to download the Raspberry Pwn software as shown in the following screenshot:![Raspberry
    Pwn](img/6435OT_06_05.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: After a few minutes, you should be ready to install the software. Go to the
    `Raspberry-Pwn` directory using `cd Raspberry-Pwn` and type `./INSTALL_raspberry_pwn.sh`
    to install the software as shown in the following screenshot:![Raspberry Pwn](img/6435OT_06_06.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: This process should take 10-20 minutes.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once the installation completes, you will come to a `raspberrypi login #` command
    prompt. Use the default Debian login, with the username `pi` and password `raspberry`.
    If you changed your Raspbian login, use that instead.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: It is normally not a bad idea to run `apt-get update` and `apt-get upgrade`
    at this point.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: To access the available tools, navigate to the `/pentesting` folder. In that
    folder, you will find a variety of tools seen in many popular penetration arsenals.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Warning: if you type `startx,` it will only launch the Raspbian **K Desktop
    Environment** (**KDE**). It has nothing that is specific to the Raspberry Pwn
    installation, and might cause corruption if used. We recommend not using the KDE
    desktop and staying only with command-line functionality.'
  prefs: []
  type: TYPE_NORMAL
- en: Raspberry Pwn is a great toolkit that is very efficient for network sniffing,
    social engineering attacks using SET, and other similar tools. It doesn't have
    the depth and breadth as Kali, but what it lacks, it makes up for in performance.
    Although it does not support it yet, we are hoping Pwnie Express will add the
    ability for Raspberry Pwn to be centrally managed through Pwnie Express's central
    management consoles making Raspberry Pwn a cheap sensor for that architecture.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following screenshot shows Raspberry Pwn released by Pwnie Express:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Raspberry Pwn](img/6435OT_06_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: PwnBerry Pi
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: PwnBerry Pi is advertised as "another penetration testing suite for Raspberry
    Pi" and it has many of the same tools as Kali Linux. Colleagues and other professionals
    have told us (the authors of this book) that the creators of PwnBerry Pi have
    done a good job in optimizing this platform for web-based attacks. We however,
    have not experienced this in our own personal testing.
  prefs: []
  type: TYPE_NORMAL
- en: It should also be noted that best practice is not to use many of the tools required
    for web-based penetration testing from a lower-end system such as a Raspberry
    Pi. For example, PwnBerry Pi includes the installation file for BeEF rather than
    installing it knowing most penetration testers wouldn't run this application from
    an ARM image. If you install BeEF on this ARM image, you will see a warning banner
    added by the PwnBerry Pi development team claiming they experienced erratic behavior
    when using BeEF from the PwnBerry Pi image.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s look at how to install PwnBerry Pi. The installation process of PwnBerry
    Pi is different from Kali Linux but similar to the Raspberry Pwn process. You
    will download the Raspbian image and run PwnBerry Pi on top of that image in the
    following manner:'
  prefs: []
  type: TYPE_NORMAL
- en: You need to first download a basic Debian distribution found at [http://www.raspberrypi.org/downloads](http://www.raspberrypi.org/downloads).
    These images are constantly being updated, so at the time of writing this book,
    we used the `2014-09-09-wheezy-raspbian.img` image, which worked fine.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Install the image using the process covered in [Chapter 1](ch01.html "Chapter 1. Raspberry
    Pi and Kali Linux Basics"), *Raspberry Pi and Kali Linux Basics*. The command
    to install the Debian image is `sudo dd if=2014-09-09-wheezy-raspbian.img of=/dev/disk2`
    assuming your microSD is seen as `disk2`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once installed, put the microSD into your PwnBerry Pi and make sure to connect
    it through the Ethernet port to an active port that provides access to the Internet.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Use the `sudo –i` command to become the root user.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Test network connectivity by pinging `google.com`. Once you confirm you have
    network connectivity, type `apt-get update` and `apt-get upgrade` to update the
    firmware. This should only take a few minutes.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once the upgrade process completes, type `apt-get install git` followed by `git
    clone https://github.com/g13net/PwnBerryPi.git` to download the PwnBerry Pi software.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: After a few minutes, you should be ready install the software. Go to the PwnBerry
    Pi directory using `cd PwnBerry Pi` and type `./install-pwnberrypi.sh` to install
    the software. This process should take 10-20 minutes.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Once the installation completes, you will see **PwnBerry Pi Release 1.0 installed
    successfully!** and a command prompt `raspberrypi login #`. Use the default Debian
    login to access the terminal, with the username `pi` and password `raspberry`.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Like many other distributions, the tools for PwnBerry Pi are stored under a
    folder called `pentest` accessed through a terminal window using the `cd /pentest`
    command. Once you access the `pentest` folder, you will see a bunch of folders
    containing various penetration testing tools available to install. The following
    screenshot shows opening a terminal from the GUI and using the `ls` command to
    list all the folders in the directory. Each folder is labeled for a set of available
    tools.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Warning: you do not want to use the `startx` command, because it will bring
    up the KDE for Raspbian. Running the KDE does not serve any purpose for PwnBerry
    Pi and could cause problems with running PwnBerry Pi tools.'
  prefs: []
  type: TYPE_NORMAL
- en: '![PwnBerry Pi](img/6435OT_06_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: There are a few notable exceptions. Metasploit is found under the `/opt/msf3`
    directory. You will notice that this is an older version of Metasploit. Newer
    versions did not work correctly with PwnBerry Pi. However, this particular version
    of Metasploit worked quite well with regards to performance.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Note that all tools are not preinstalled. You must first install a tool before
    it can be used.
  prefs: []
  type: TYPE_NORMAL
- en: Our testing found some of the tools functioned properly while others had warning
    banners regarding possible issues with using them on a Raspberry Pi. Overall,
    PwnBerry Pi is a decent option, however, we recommend a more established arsenal
    such as Kali Linux or PwnPi.
  prefs: []
  type: TYPE_NORMAL
- en: Defending your network
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Most topics in this book cover attack scenarios. Unfortunately, one day you
    might experience attempts against your own systems. This means your security defense
    measures will be challenged and hopefully you will have the right tools to identify
    and prevent the breach from causing damage to your organization.
  prefs: []
  type: TYPE_NORMAL
- en: We want to be clear that *the Raspberry Pi is not the ideal tool to leverage
    for cyber defense*. Best practice is layering security solutions that offer various
    features such as application layer controls, stateful firewall, intrusion prevention,
    access control, network segmentation, malware detection, network monitoring, data
    loss, and so on. Most tools that provide the level of protection you need to combat
    the threats seen on today's networks require very high power processing and tons
    of storage. Unfortunately, the Raspberry Pi does not offer this.
  prefs: []
  type: TYPE_NORMAL
- en: If you are looking to test some basic security concepts in a small lab such
    as segmentation using firewall features or scanning for basic threats with an
    IDS, the Raspberry Pi can act as a decent portable lab. Some ARM images claim
    to be ideal for home office protection, however, we would not recommend using
    a Raspberry Pi with the intention of protecting real assets.
  prefs: []
  type: TYPE_NORMAL
- en: Let's start off by looking at how to turn a Raspberry Pi into IDS/IPS. Later
    in this chapter, we will look at other Raspberry Pi security defense use cases
    such as how to use the Raspberry Pi as a VPN server, a content filer, or a Tor
    node.
  prefs: []
  type: TYPE_NORMAL
- en: Intrusion detection and prevention
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: There might be a time when you become the victim of a network breach. The best
    defense is layering multiple security solutions that cover various points on your
    network so if one gets bypassed, other tools are there to identify and stop the
    attacker. Common defense tools range from firewalls to detection technologies
    such as IDS/IPS solutions.
  prefs: []
  type: TYPE_NORMAL
- en: The Raspberry Pi can be configured as a low budget IDS/IPS to protect a part
    of your network. This should obviously only be considered for a very specific
    goal as there are far better options for providing real long term IPS/IDS solutions.
    The Raspberry Pi does not have the horsepower or storage for anything beyond basic
    detection and prevention, so consider this option for lab use and training purposes.
  prefs: []
  type: TYPE_NORMAL
- en: When considering an IPS/IDS, the first thing to decide is how it will be deployed.
    The typical use case is between a router and another device, or between a system
    and network. You could also be an intrusion detection system, meaning the device
    is a tap in the network viewing copies of the traffic and won't have any enforcement
    capabilities. In my example, I'll use Snort as an inline IPS between my laptop
    and external network acting as a man-in-the-middle. This could be ideal for connecting
    to an untrusted network while not leveraging VPN. This setup will require two
    Ethernet ports so I'll be utilizing a USB to Ethernet adapter to accommodate the
    second port.
  prefs: []
  type: TYPE_NORMAL
- en: 'Deploying the Raspberry Pi for man-in-the-middle attacks is similar to acting
    as a man-in-the-middle for IPS deployments. You will need to set the IP address
    of both interfaces as `0.0.0.0,` and use the bridge utility to bridge both interfaces
    together. We covered this process in [Chapter 3](ch03.html "Chapter 3. Penetration
    Testing"), *Penetration Testing* under the *Man-in-the-middle* section. A summary
    of the commands used to bridge the two interfaces together is shown in the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Intrusion detection and prevention](img/6435OT_06_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Snort
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The most popular open source IDS/IPS used today is Snort now owned by Cisco
    due to the acquisition of Sourcefire. The major problem with using Snort on a
    Raspberry Pi is the resource requirements that extend beyond what the Raspberry
    offers. It is recommended to tune down processes on Snort prior to running it
    to get decent functionality.
  prefs: []
  type: TYPE_NORMAL
- en: Snort can run from a Kali Linux installation but it is not preinstalled.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Make sure you download and update Snort prior to bridging your interfaces or
    you won't have Internet access. A possible work-around is adding a third wireless
    or Ethernet adapter to provide Internet access for updates while you leverage
    the other two ports for bridging.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s look at how to install and use Snort once your man-in-the-middle bridge
    is established in the following manner:'
  prefs: []
  type: TYPE_NORMAL
- en: 'The first step to is download required files using the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Snort also requires libraries that do not ship with the Kali Linux ARM image.
    To get the libraries required for Snort to function properly, type the following
    command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Next, you need to uncompress the file by using the `tar –zxvf libdnet-1.12.tgz`
    command. Once the file is uncompressed, use the `cd` command to navigate to the
    directory.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You will change the `CFLAGS` variables to be configured for a 64-bit OS by typing
    the `./configure CFLAGS="-fPIC"` command. Once this is done, type the `make` command.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Next, you need to build a symbolic link from the location of `libdnet` to where
    Snort expects `libdnet` to be located. Type the following command to do this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Now, you need to move to a directory used for Snort. We created a new directory
    called `snort` on our desktop by using the `mkdir snort` command from the desktop
    folder in command line or by right clicking on the desktop in the GUI and selecting
    it to make a new directory.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, we will need to download the Snort data acquisition libraries. Type the
    `wget https://www.snort.org/downloads/snort/daq-2.0.4.tar.gz` command to do this.
    Note the version we are using might be different from what is available. Check
    [snort.org](http://snort.org) to ensure you are using the latest version.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Download Snort with the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, we will unzip and install the Snort data acquisition libraries using
    the following commands:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: The last step is downloading either Oinkcode, or community rules. **Oinkcode**
    rules are unique keys associated with an existing Snort user account. If you do
    not have Oinkcode rules, you can download community rules.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We will download community rules by using the `wget https://www.snort.org/rules/community`
    command. This should download a file called `community.tar.gz` into your directory.
    You will need to uncompress the file using the `tar xvfz community.tar.gz -C /etc/snort/rules`
    command.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In some cases, you might need to add an extension to the file. If you only see
    community or some variation without the `.tar.gz` extension, type the `mv community
    community.tar.gz` command.
  prefs: []
  type: TYPE_NORMAL
- en: Now we are ready to install Snort. To install Snort, type `apt-get install snort`.
    You will get a prompt to configure the IP address and subnet mask of the Snort
    interface as shown in the following screenshot:![Snort](img/6435OT_06_10.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'You should see Snort complete its installation process, as shown in the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Snort](img/6435OT_06_11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: You have successfully configured Snort. There are many things you can do with
    Snort from this point such as analyzing traffic crossing the network bridge you
    set up in previous steps by using the `snort` command. We could write an entire
    book on Snort, and there are some books dedicated to the subject matter. If you
    are unfamiliar with Snort, we suggest you visit [www.snort.org](http://www.snort.org).
  prefs: []
  type: TYPE_NORMAL
- en: The easiest way to start Snort is just to type `./snort –i eth0`; this will
    start Snort and listen on Ethernet `0`. There are many more advanced configurations
    that allow you to capture and run everything to a syslog server for further analysis.
    By default, Snort will log everything to the terminal screen, as shown in the
    following screenshot. Don't worry if it is difficult to see, as the messages scroll
    fast on the screen and that is why most people will log to an external syslog
    server.
  prefs: []
  type: TYPE_NORMAL
- en: '![Snort](img/6435OT_06_12.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'One additional step you might take is setting up Snort to automatically start
    by creating a script. This is typically only used if you have the Raspberry Pi
    dedicated to Snort. The following example shows how to create a script to auto
    start snort when you boot up your Raspberry Pi:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Content filter
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A content filter is used to control the type of content a reader is authorized
    to access while surfing the Internet. Older content filters require lot of manual
    tuning based on updating URL lists, however, most commercial offerings provide
    content categories that are automatically updated with new website labels. The
    most common use case for requiring a content filter is blocking inappropriate
    content such as pornography from business networkers. Typically, content filters
    are bundled in with capabilities offered by network proxies or application layer
    firewalls.
  prefs: []
  type: TYPE_NORMAL
- en: Let's look at how to turn a Raspberry Pi into a home office content filter.
    This is great for parents wanting to keep their personal network kid-friendly.
  prefs: []
  type: TYPE_NORMAL
- en: KidSafe
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: KidSafe is used to filter inappropriate content while users surf the Internet.
    KidSafe accomplishes this by using open source web URL filtering services through
    a Squid proxy. This allows parents to control their children's Internet experience
    through an easy-to-use GUI.
  prefs: []
  type: TYPE_NORMAL
- en: KidSafe can be installed on any Linux-based system including Kali Linux for
    the Raspberry Pi. The application is suited for low powered, low cost computing
    systems making it ideal for home use. We recommend installing KidSafe on the Raspbian
    operating system so you don't have to worry about the additional settings associated
    with setting up Kali Linux. The Raspbian ARM image is typically installed by default
    when purchasing a Raspberry Pi. However, you can download it from [http://www.raspberrypi.org/downloads/](http://www.raspberrypi.org/downloads/).
    The installation process is similar to how we installed Kali Linux in [Chapter
    1](ch01.html "Chapter 1. Raspberry Pi and Kali Linux Basics"), *Raspberry Pi and
    Kali Linux Basics*.
  prefs: []
  type: TYPE_NORMAL
- en: 'The steps are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: 'The first step to prepare for KidSafe is changing the default **Dynamic Host
    Configuration Protocol** (**DHCP**) behavior to a static address so we don''t
    have to worry about our IP address changing. Clients such as PCs and phones will
    proxy to and from this IP address to connect to the Internet, so it is important
    to make sure a static address is selected that is reachable by other devices on
    the network. It is also important that it is static so endpoints don''t have to
    adjust their proxy settings. We can do this in the following way:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Let's change our IP address to a static address.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Type the `ifconfig` command to see your network interfaces. You should see something
    like what's shown in the following screenshot. Note what you see when you run
    the command.![KidSafe](img/6435OT_06_13.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You will edit the network interface file. We will use `vi`, but you can use
    your favorite editor. Type the `sudo nano /etc/network/interfaces` command. The
    launch of this command is shown in the following screenshot:![KidSafe](img/6435OT_06_14.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Look for the line that says something close to `iface eth0 inet dhcp`. You
    will change that line to a static address. In our example, we will change to a
    static IP of `10.0.1.167` with a subnet mask of `255.255.255.0` as well as default
    gateway of `10.0.1.1` using the commands in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![KidSafe](img/6435OT_06_15.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Now, let's install Tor using the `sudo apt-get install tor` command.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, install Squid using the `sudo apt-get install squid3` command.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, install a light web server using the `sudo apt-get install lighttpd` command.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: PHP is required for KidSafe. To install PHP, use the `sudo apt-get install php5-common
    php5-cgi php5 php5-mysql` command. You need to enable PHP scripts using the `sudo
    lighty-enable-mod fastcgi-phpa` command.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: At this point, you will need to reload the server using the `sudo service lighttpd
    force-reload` command.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The next step is to install the GUI admin tool for PHP. This is not required
    but we recommend it since it makes administrating PHP much easier. To install
    the GUI admin, use the `sudo apt-get install phpmyadmin` command. Once installed,
    you will be able to administer PHP from a web browser by accessing `http://localhost/phpmyadmin/`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, we will change the directory owner and group by typing the `sudo chown
    www-data:www-data /var/www` command. We also need to change permissions on our
    directory using the `sudo chmod 775 /var/www` command.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If you do not have a username, create one using the `sudo adduser proxy` command.
    Also, make sure to change the password for your username using the `sudo passwd
    proxy` command. You will add your username to the directory group to give it permissions
    to manage using the `sudo usermod -a -G www-data proxy` command.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Change to `/opt` directory. You can do so by typing in `sudo cd /opt`. Make
    sure you are in the `/opt` directory by using the `cd` command.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, we will download a helper application that is used to configure the proxy
    and Squid settings much easier. Go to [http://www.penguintutor.com/software/squid-kidsafe/0.2.0/kidsafe-squidapp-0.2.0.tgz](http://www.penguintutor.com/software/squid-kidsafe/0.2.0/kidsafe-squidapp-0.2.0.tgz)
    to download the application. You can do so by typing `sudo wget http://www.penguintutor.com/software/squid-kidsafe/0.2.0/kidsafe-squidapp-0.2.0.tgz`
    from the command line. Make sure you are in the `/opt` directory.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Check whether you are using and downloading the latest version. If not, adjust
    this to the latest version; most likely, only the version number will change when
    downloading the file.
  prefs: []
  type: TYPE_NORMAL
- en: Use the `sudo tar –zxvf kidsafe-squidapp-0.2.0.tgz` command to untar the file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You will edit the `/opt/kidsafe/kidsafe.squid3.inc` file using your favorite
    editor. Go to the last line of the file and change the `192.168.0.3` address to
    your IP address.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Change `acl local_acl dst 192.168.0.0/16` to what is appropriate for your subnet.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You will need to merge the Squid files with the KidSafe files. Do so by typing
    `include /opt/kidsafe/kidsafe.squid3.inc`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Several files will need their permissions changed or updated. Type in the following
    commands:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Now you can download and install the KidSafe application in the `/var/www` directory.
    To download KidSafe, type `sudo wget kidsafe-webapp-0.2.0.tgz`. Make sure you
    are in the `/var/www` directory. Also note the version you are downloading as
    it might differ from the example we used.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Uncompress the file using the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Now open up a web browser and go to `http://localhost/phpmyadmin/`. Click on
    **Databases** and select **Create New Database**. Name the database `kidsafe`.
    We will set the database type to **Local** as shown in the following screenshot:![KidSafe](img/6435OT_06_45.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Password** will be set to: <as defined in the `kidsafe-config.php` file>.
    Save and apply the configuration. In the **Database-specific privileges** menu
    select the `kidsafe` database. For **Privileges,** select only **SELECT**, **INSERT**,
    **UPDATE**, **DELETE**. For **Grant**, select **No**. For **Table-specific privileges,**
    select **No**.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now click on the **Databases** button on the left side of the tab. Go to the
    **SQL** tab and execute the commands (just copy and paste) from the following
    file at [http://www.penguintutor.com/software/squid-kidsafe/0.2.1/kidsafe-database.txt](http://www.penguintutor.com/software/squid-kidsafe/0.2.1/kidsafe-database.txt).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Alternatively you can get the same file at [http://www.drchaos.com/wp-content/uploads/2014/11/kidsafe-database.txt](http://www.drchaos.com/wp-content/uploads/2014/11/kidsafe-database.txt).
  prefs: []
  type: TYPE_NORMAL
- en: 'The following screenshot shows the **phpMyAdmin** page:'
  prefs: []
  type: TYPE_NORMAL
- en: '![KidSafe](img/6435OT_06_16.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Your PHP page will look significantly different than ours. That is because we
    are running multiple applications and databases.
  prefs: []
  type: TYPE_NORMAL
- en: 'You should change permissions on the `log` file. Type the following commands:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Setup is now complete. You can configure rules, logins, and other settings by
    going to `http://localhost/kidsafe`.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: For more information on how to use KidSafe check out [http://www.penguintutor.com/linux/raspberrypi-kidsafe](http://www.penguintutor.com/linux/raspberrypi-kidsafe).
  prefs: []
  type: TYPE_NORMAL
- en: 'The following screenshot shows the KidSafe administered **Website blocked**
    page:'
  prefs: []
  type: TYPE_NORMAL
- en: '![KidSafe](img/6435OT_06_17.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Don't manually manage websites you want to block. Download free blacklists from
    [http://www.squidguard.org/blacklists.html](http://www.squidguard.org/blacklists.html)
    to get updated lists that have categorized millions of websites.
  prefs: []
  type: TYPE_NORMAL
- en: Remote access with OpenVPN
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A **Virtual Private Network** (**VPN**) is an essential security element to
    many organizations. VPNs provide a method to connect directly to a remote network
    as if you are on-site and protect traffic in between the client and the connected
    network using encryption. This prevents many man-in-the-middle attacks and allows
    people to be more productive while out of the office. OpenVPN can turn a Raspberry
    Pi into a VPN concentrator providing these and other benefits at an extremely
    low cost.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s look at how to transform a Raspberry Pi into a VPN concentrator using
    the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: The first step is installing the latest Raspbian image through the NOOBS package
    or directly from the Raspberry Pi website following steps from [Chapter 1](ch01.html
    "Chapter 1. Raspberry Pi and Kali Linux Basics"), *Raspberry Pi and Kali Linux
    Basics*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We also suggest updating your image with the `apt-get update` and `apt-get upgrade`
    commands as specified for Kali Linux in [Chapter 1](ch01.html "Chapter 1. Raspberry
    Pi and Kali Linux Basics"), *Raspberry Pi and Kali Linux Basics*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Since the goal of this solution is to be outside-facing, we strongly suggest
    changing the default password before starting the OpenVPN configuration.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You need to be a `root` user prior to launching the update and upgrade commands
    using the `sudo –i` command.
  prefs: []
  type: TYPE_NORMAL
- en: Once your Raspbian build is upgraded, you will need to identify an accessible
    IP address to the outside network where you plan to connect from. You will also
    need to pick a port to connect through, such as UDP traffic on port 1194\. This
    would mean opening forward port 1194 on your router and firewall. You can use
    a different port or protocol, such as TCP depending on what you are confortable
    with opening on your router and firewall.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: OpenVPN isn't installed by default on most operating systems, so you will need
    to use `apt-get install openvpn` to install it as shown in the following screenshot:![Remote
    access with OpenVPN](img/6435OT_06_18.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Next you will want to generate keys to protect your VPN server. We will use
    `easy-rsa` for this purpose. You will need to be a `root` user so make sure to
    type `sudo –s` prior to moving forward. Use the following command to copy everything
    from the `easy-rsa/2.0` folder to the `easy-rsa` folder:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This type of certificate is fine for a small VPN deployment. However, if this
    grows, you might want to consider generating a **Certificate Signing Request**
    (**CSR**) using OpenSSL and getting that signed through a trusted certificate
    authority.
  prefs: []
  type: TYPE_NORMAL
- en: Next, go to the `easy-rsa` folder found with `cd /etc/openvpn/easy-rsa`. If
    you type `ls`, you should see a file called `vars`. We want to edit that, so type
    `nano vars`. Now, find and change the `EASY_RSA` variable to `export EASY_RSA="/etc/openvpn/easy-rsa"`.
    The following screenshot shows this adjustment at line 13:![Remote access with
    OpenVPN](img/6435OT_06_19.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You could increase the encryption method from 1024-bit to 2048-bit if you are
    paranoid. Just find the line that states `export KEY_SIZE=1024` and increase the
    value to `2048`. Once you are done, type *Ctrl* + *X* to save your changes.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now we need to build a **Certificate Authority** (**CA**) certificate and Root
    CA certificate. The Raspberry Pi will act as its own certificate authority and
    sign off on OpenVPN keys. You should still be in the `easy-rsa` folder. Type `source
    ./vars` to load the `vars` document. Type `./clean-all` to remove any previous
    keys.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Type `./build-ca` to build your certificate authority. You will be asked a bunch
    of questions regarding where you live, company name, and so on. The following
    screenshot shows the first question once I ran the previous commands:![Remote
    access with OpenVPN](img/6435OT_06_20.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: After you finish the last question regarding an e-mail address, you can name
    your server by using the `./build-key-server [Server_Name]` command. Once again,
    you will have to answer some optional fields. Make sure this time around you use
    the name you picked for the **Common Name** field, which should default to that
    name. You must also leave **A challenge password** field blank.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You will get a message saying your certificate will be signed for 3,650 more
    days and it will ask you to commit. Say yes (**y**) and it will generate your
    certificate.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now that the server side is up, let's build keys for the "clients" also known
    as users. For example, we will create a key for our laptop. To do this, use the
    `./build-key-pass [UserName]` command. So for our example, the user name is `laptop1`.
    It will ask you for a pass phrase to remember. Fill that out and go through the
    prompts. Make sure to leave **A challenge password** field blank. Confirm to sign
    the certificate and it will display that the database has been updated.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Go to the `keys` folder using `cd keys` and type `openssl rsa –in laptop1.key
    –des3 –out laptop1.3des.key`. This will apply `des3` also known as des encryption
    three times to each data block.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: At this point, you have created a server certificate and a client certificate.
    You can repeat the client process if you want to create certificates for other
    devices. When you are done, go back to the `easy-rsa` folder using `cd` so you
    can generate the Diffie-Hellman key exchange. Type `./build-dh` to execute this.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You might get a prompt to first enter `source /vars` prior to using the `./build-dh`
    command. Run that command before rerunning the `./build-dh` command.
  prefs: []
  type: TYPE_NORMAL
- en: This could take a while depending on your encryption size. If you increased
    things to 2048-bit encryption earlier on, expect to wait longer. We are stuck
    with 1024, so it took a few minutes to complete.
  prefs: []
  type: TYPE_NORMAL
- en: The next step is to enable **Denial of Service** (**DoS**) protection using
    a **Hash-based Message Authentication Code** (**HMAC**) key. This will have the
    Raspberry Pi first ask for a static key before attempting to authenticate an access
    request. This stops attackers from spamming the server with random repeated requests.
    Use the `openvpn –genkey –secret keys/ta.key` command to enable this.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'At this point, we have generated keys and had a CA sign them. Now let''s configure
    OpenVPN. We first need to create a `.conf` file that will be used by OpenVPN to
    list things such as where we are connecting from and the type of connections.
    Type `nano /etc/openvpn/server.conf`. This will open a blank document in the `openvpn`
    folder. Use the following commands to configure OpenVPN:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Make sure to adjust to your network where the comments are asking for your information.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Press *Ctrl* + *X* once you are finished to save.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, we need to create another file to configure the Raspberry Pi to forward
    Internet traffic. To do this, let''s edit a file called `sysctl.conf` by using
    the `nano /etc/sysctl.conf` command. Look for the line close to the top that says
    **# Uncomment the next line to enable packet forwarding for IPv4 and remove the
    #** to uncomment it. This will tell the Raspberry Pi to relay Internet traffic
    rather than just being a receiver. Press *Ctrl* + *X* to save changes.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, type `sysctl –p` to apply the changes. The `sysctl` command configures
    kernel parameters at runtime.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Everything regarding the VPN should be up, however, the Raspbian firewall will
    block incoming connections. Also, the Raspbian''s firewall configuration resets
    by default when the Pi is rebooted. We need to use a script to make sure the Raspberry
    Pi remembers that the OpenVPN connection is always permitted. Use the `nano /etc/firewall-openvpn-rules.sh`
    command to open a blank executable file. Enter the following commands into the
    file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: The `10.0.2.0/24` in the command is the default address for Raspberry Pi clients
    that are connected over the VPN. You need to update this to your Raspberry Pi's
    IP address. Note that the script specifies the `eth0` interface as the outside-facing
    interface. Type *Ctrl* + *X* to save the changes.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'You need to change this to an executable file by updating its permissions and
    ownership of the `etc/firewall-openvpn-rules.sh` file. We need to change the mode
    to `700,` meaning owner can read, write, execute, as well as change the owner
    to `root`. The commands to do this are:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: We need to place this script into the interface setup code so it runs on boot.
    This will punch the hole for OpenVPN to function properly. Type `nano /etc/network/interfaces`,
    look for the line that states `iface eth0 inet dhcp`, and add the line `pre-up
    /etc/firewall-openvpn-rules.sh` with an indent below this line. Type *Ctrl* +
    *X* to save your changes.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Reboot your Pi using `sudo reboot`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Congratulations, you have a fully functional VPN concentrator!
  prefs: []
  type: TYPE_NORMAL
- en: Now let's download an OpenVPN client and connect back to our Raspberry Pi OpenVPN
    server using the following steps. There are a variety of OpenVPN clients that
    are available. We actually prefer Viscosity from SparkLabs.
  prefs: []
  type: TYPE_NORMAL
- en: Go to [https://www.sparklabs.com/viscosity/](https://www.sparklabs.com/viscosity/)
    to download the Viscosity client.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: There are many OpenVPN clients available, including many free ones. The steps
    will be similar for other clients.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following screenshot shows the Viscosity client''s **Preferences** window:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Remote access with OpenVPN](img/6435OT_06_21.jpg)'
  prefs: []
  type: TYPE_IMG
- en: After you install the client, you will need to add a new connection. Put in
    the IP address of your VPN server so the client knows where to connect. This is
    the reachable IP address of your Raspberry Pi server. The following screenshot
    shows the **New Connection** window's **General** tab:![Remote access with OpenVPN](img/6435OT_06_22.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, click on the **Authentication** tab. In the drop-down list, select **PKCS12**.
    We have different authentication schemes available, however, if you remember when
    we set up our system, we generated client certificates. We can simply select the
    **PKCS12** certificate and import it directly into our client.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You will need to go back to your Raspberry Pi and export your client certificate
    so you can import it prior to this step. You can simply save your client certificate
    on a USB drive or e-mail it yourself.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following screenshot shows the menu under the **Authentication** tab:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Remote access with OpenVPN](img/6435OT_06_23.jpg)'
  prefs: []
  type: TYPE_IMG
- en: You can now click on **Save**, then right-click on the connection, and click
    **Connect** as shown in the following screenshot:![Remote access with OpenVPN](img/6435OT_06_24.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You are now connected to your OpenVPN server.
  prefs: []
  type: TYPE_NORMAL
- en: Tor relays and routers
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Tor, sometimes known as onion routing, is used for anonymous access to the Internet
    by using a system of volunteer nodes and services to route and mask traffic. Using
    Tor makes it difficult to track Internet usage. This is ideal when you want to
    defend against unwanted traffic analysis that can be used to violate your privacy.
    Detailed information around Tor can be found at [https://www.torproject.org/](https://www.torproject.org/).
  prefs: []
  type: TYPE_NORMAL
- en: 'A Tor relay works by randomly selecting systems to use as a path to communicate
    from one point to another. Endpoints access the Tor network by using special software
    that pushes traffic through the Tor network. The following diagram shows how two
    systems might use different paths to communicate back and forth on a Tor network:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Tor relays and routers](img/6435OT_06_25.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The Raspberry Pi can be configured as a Tor node and Tor router. A Tor node
    acts as a system passing through other users' traffic, meaning it is part of the
    Tor network helping other people remain anonymous while they access the Internet.
    A Tor router acts as an entry point for an internal network into the Tor network,
    so all devices surfing through the router will have their traffic randomized through
    the Tor network. A Tor router replaces the need for every user to run the special
    Tor software to access the Tor network, since all traffic is routed through Tor
    by the router.
  prefs: []
  type: TYPE_NORMAL
- en: Let's look at how to turn a Raspberry Pi into a Tor node and Tor router.
  prefs: []
  type: TYPE_NORMAL
- en: Raspberry Tor
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You can turn your Raspberry Pi running Kali Linux into a Tor node so that you
    can take part in the Tor project.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Running a TOR node might have legal or ethical constraints and requirements.
    We suggest you do your research before running Tor to completely understand what
    it means. Running a TOR node might mean anonymous users will be using your Internet
    connection for possibly malicious or illegal activities. Additionally, with the
    closure of Silk Road 2.0 and other law enforcement arrests, the anonymity of Tor
    has recently been questioned.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you are going to participate in the Tor network with your Kali Linux Raspberry
    Pi, you will need to do some cleanup work using the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: First, turn off any excess services or applications running on Raspberry Pi.
    If you are unsure, start with a clean install, or use the Raspbian distribution
    instead.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Change your `root` password. Use a minimum of twelve alphanumeric characters.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'We will install `sudo` packages and add a `tor` username. That way, you don''t
    have to work with the `root` username. We will also update and upgrade our software;
    use the following steps:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: We will also need to add the `tor` account to the list of `sudoers`. You can
    do this by editing the `/etc/sudoers` file. Type the `sudo visudo` command then
    add the line `tor ALL=(ALL) ALL`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `visudo` command is the traditional and most commonly accepted way to edit
    the list of `sudoers`. However, in some operating systems, this command is not
    available. In those situations, you will need to edit the `sudoers` file directly.
    You might do so with the `vi /etc/sudoers` command.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following screenshot shows the `/etc/sudoers` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Raspberry Tor](img/6435OT_06_26.jpg)'
  prefs: []
  type: TYPE_IMG
- en: We need to change the default DHCP behavior of Kali Linux to a static address.
    Technically, we could keep a DHCP address, but most likely you will need a static
    address on the device. Type the `ifconfig` command to see your network interfaces.
    You should see something like what's shown in the following screenshot. Write
    this down:![Raspberry Tor](img/6435OT_06_27.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You will edit the network interface file. We will use `vi`, but you can use
    your favorite editor. Use the `sudo vi /etc/network/interfaces` command.
  prefs: []
  type: TYPE_NORMAL
- en: 'Look for the line that says something close to `iface eth0 inet dhcp`, as shown
    in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Raspberry Tor](img/6435OT_06_28.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'You will change that line to a static address. In our example, we will change
    to a static IP of `10.0.1.167,` with a subnet mask of `255.255.255.0,` as well
    as default gateway of `10.0.1.1` using the following commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'The following screenshot shows the launch of the preceding commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Raspberry Tor](img/6435OT_06_29.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Now, let's install Tor. Type the `sudo apt-get install tor` command. Edit the
    `tor config` file in `/etc/tor/torrc`. You will need to add or change the configuration
    to match the following lines. It is okay if there is excess stuff in the configuration
    file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add or change the following to match the configuration:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'The following screenshot shows the launch of the `sudo apt-get install tor`
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Raspberry Tor](img/6435OT_06_30.jpg)'
  prefs: []
  type: TYPE_IMG
- en: You will need to ensure TCP ports 9030 and 9001 are open from your firewall
    to your Raspberry Pi. You will want to make sure that the outside world can contact
    these ports as well. You might need to **Network Address Translate** (**NAT**)
    your Raspberry Pi with a static (or one-to-one) NAT statement. If you have a home
    router, this is sometimes called a **Demilitarized Zone** (**DMZ**) or a Game
    port.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Reboot your system.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, start Tor by using the `sudo /etc/init.d/tor restart` command in CLI. Check
    the Tor `log` file to ensure the service has started. The Tor `log` files are
    located in `/var/log/tor/log`. You can view the `log` files by issuing the `less
    /var/log/tor/log` command. Look for the entry **Tor has successfully opened a
    circuit. Looks like client functionality is working**. If you see this, you have
    set up your system correctly.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'At this point, you will most likely want to use a Tor client to get on the
    Tor network. There are many clients available for a variety of operating systems.
    Here are a few links to help you get started:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Windows: [https://www.torproject.org/docs/tor-doc-windows.html.en](https://www.torproject.org/docs/tor-doc-windows.html.en)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Linux/Unix/BSD: [https://www.torproject.org/docs/tor-doc-unix.html.en](https://www.torproject.org/docs/tor-doc-unix.html.en)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Debian/Ubuntu: [https://www.torproject.org/docs/debian.html.en](https://www.torproject.org/docs/debian.html.en)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Mac OS X: [https://www.torproject.org/docs/tor-doc-osx.html.en](https://www.torproject.org/docs/tor-doc-osx.html.en)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Android: [https://www.torproject.org/docs/android.html.en](https://www.torproject.org/docs/android.html.en)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: At this point, you have a fully functional Tor relay point and a Tor client
    to access the Tor network. You will not see much when the product is configured,
    besides some information and status messages on the terminal. There are other
    views available that will give you more information on traffic and your node participation
    status as well, which you can toggle through.
  prefs: []
  type: TYPE_NORMAL
- en: '![Raspberry Tor](img/6435OT_06_31.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The Tor terminal
  prefs: []
  type: TYPE_NORMAL
- en: Tor router
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The previous section explained how Raspberry Tor turns the Raspberry Pi into
    a Tor node. You can connect to the node and be anonymous with your traffic as
    well as other users who are on the Tor network. To connect to a node, you typically
    need to use special software. What if you want to run your entire network through
    Tor so that all traffic coming from your network remains anonymous? This can be
    accomplished by turning a Raspberry Pi into a Tor router.
  prefs: []
  type: TYPE_NORMAL
- en: For example, you can have the Raspberry Pi plug into your outside router and
    broadcast a private SSID that users can connect to and have their traffic filtered
    through the Tor network. This is ideal for setting up a quick mobile hotspot that
    masks all user traffic using Tor.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s look at how to configure a Raspberry Pi into a Tor router using the
    following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: The first step is downloading the latest version of Raspbian from [http://www.raspberrypi.org/downloads/](http://www.raspberrypi.org/downloads/).
    The latest version in our case is `2014-09-09-wheezy-raspbian.img`. You will need
    to unzip the file after you have downloaded it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Install the Raspbian image onto a SD (microSD) card you will use in the Raspberry
    Pi. We covered this process in [Chapter 1](ch01.html "Chapter 1. Raspberry Pi
    and Kali Linux Basics"), *Raspberry Pi and Kali Linux Basics*. The command for
    our image is as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You can run any Debain-based Linux system for this project. We prefer using
    Kali Linux, however, the reason we selected Raspbian is because Kali Linux has
    many services that can be exploited if not turned off or properly configured.
  prefs: []
  type: TYPE_NORMAL
- en: Boot your Raspberry Pi with the Raspbian image you installed on your microSD.
    The default username and password for Raspbian is `pi` and `raspberry`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When you log in to the GUI desktop, open the terminal application on the desktop.
    Type the `sudo apt-get update` command followed by `sudo apt-get upgrade`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You need to install a DHCP server. You will get errors by doing this but ignore
    them. Type the `sudo apt-get install vim tor hostapd isc-dhcp-server` command.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, you will edit the `/etc/dhcp/dhcpd.conf` file with your favorite editor.
    Open up the `/etc/default/isc-dhcp-server` file and go to the last line. Edit
    the `INTERFACES` line to read `INTERFACES="wlan0"`. Make sure you include the
    quotes with `wlan0` in your configuration.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'You will need to edit the `wlan0` network configuration. Use your favorite
    editor to change the `/etc/network/interfaces` file. Go to the `wlan0` section
    and give it a static IP address. The file should look like the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Notice that we are commenting out some of the old configurations. It's considered
    best practice is to do this rather than delete them in the event we need to revert
    back.
  prefs: []
  type: TYPE_NORMAL
- en: Next, we will want to configure the Raspberry Pi with encryption so that our
    wireless network has security. You will need to create a new file called `/etc/hostapd/hostapd.conf`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Note that you will need to ensure your wireless card is compatible with `hostapt.conf`.
    If it is not, you will need to compile your own version or you cannot have wireless
    security. The people at Adafruit have an alternate `hostapd.conf` file that works
    with many other chipsets. You can find it at [http://www.adafruit.com/downloads/adafruit_hostapd.zip](http://www.adafruit.com/downloads/adafruit_hostapd.zip).
  prefs: []
  type: TYPE_NORMAL
- en: 'We will configure our `hostapd.conf` file for WPA2-PSK encryption, SSID of
    DrChaos, and a password of Kali Raspberry. Of course these settings can be changed
    to anything of your liking. Create a file called `/etc/hostapd/hostapd.conf` or
    download it from [http://www.adafruit.com/downloads/adafruit_hostapd.zip](http://www.adafruit.com/downloads/adafruit_hostapd.zip)
    and place it in the `/etc/hostapd` directory. You might need to create the directory
    in the following manner:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Go to `/sys/class/net/wlan0/device/driver/module/drivers` to see what driver
    you are using for the first line of the file.
  prefs: []
  type: TYPE_NORMAL
- en: Open the `/etc/sysctl.conf` file and remove the comment from the `net.ipv4.ip_forward=1`
    line to make it active.
  prefs: []
  type: TYPE_NORMAL
- en: 'Turn on IP forwarding by typing the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: Next, we will add some simple **iptable** rules to NAT and route our data from
    wireless to the Internet.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The following iptable rules are extremely relaxed. It is possible that these
    rules might expose the true IP address of the client under certain circumstances.
    If you would like to add an additional layer of security, then skip step 16 (or
    change the echo from `1` back to `0`), and explicitly state which connections
    you will allow.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following commands in iptables:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'The following screenshot shows our data being routed with `iptables`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Tor router](img/6435OT_06_32.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Next, you need to edit the `/etc/tor/torrc` file in the following manner:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: You can now plug in your wired connection on the Raspberry Pi to the Internet.
    At this point, your wireless users will be able to connect the DrChaos SSID using
    the password of Kali Raspberry to connect. All traffic will be funneled through
    the Tor network.
  prefs: []
  type: TYPE_NORMAL
- en: 'Open up a web browser and go to [https://check.torproject.org/](https://check.torproject.org/),
    and you will get a message showing whether you are on Tor or not as shown in the
    following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Tor router](img/6435OT_06_33.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Running Raspberry Pi on your PC with QEMU emulator
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You probably noticed a mixture of pictures and screenshots in this book. That
    is because when we were writing this book, we had to constantly change to different
    operating systems, take screenshots, test different adapters, and install various
    software programs. In some cases, we used SSH from a PC into the Raspberry Pi
    while in other cases, we used a X-Windows client. Sometimes, we even just took
    a picture of the screen with a camera since the Raspberry Pi's output was on a
    monitor that didn't offer screen captures. With all of these changes being considered,
    one tool we found invaluable was QEMU.
  prefs: []
  type: TYPE_NORMAL
- en: '**Quick EMUlator** (**QEMU**) is an emulator that lets you mimic many different
    processors and load many different operating systems. We mimicked the ARM-based
    processor in the Raspberry Pi and were successfully able to load and run multiple
    operating systems just like we would have done on a real Raspberry Pi. Emulation
    is not without its problems. Sometimes, operating systems would not load or would
    have performance issues, crash, stop working, and so on, even when they had absolutely
    no issues on the real Raspberry Pi hardware. We found that the time saved using
    this application outweighed the problems caused by emulation.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s look at how to install QEMU emulator using the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: The first step is going to [http://qemu.weilnetz.de/](http://qemu.weilnetz.de/)
    and downloading QEMU emulator for Windows, as shown in the following screenshot:![Running
    Raspberry Pi on your PC with QEMU emulator](img/6435OT_06_34.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: There is also a Linux version available as well as a Mac OS X port using Homebrew
    and XTools where you can achieve the same thing. We will showcase the PC version
    for our next example. We found the Windows version the easiest to install, Linux
    version the most reliable, and Mac version a little difficult to work with and
    get installed correctly. Your mileage may vary.
  prefs: []
  type: TYPE_NORMAL
- en: Select the appropriate version (64-bit or 32-bit). After you download the correct
    version, run the `install exe` file. You will see that in most cases, the PC (i386)
    system emulation is not selected. Ensure you select this option. Note the default
    installation directory for QEMU. In most cases, it is `C:\Program Files\qemu`.
    *Do not change it*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If you have not already downloaded the appropriate Raspberry image, you should
    do it now. Once again, you can use the Kali Linux ARM image, or you can download
    any compatible image. We will use the Raspbian operating system that can be downloaded
    at [http://www.raspberrypi.org/downloads/](http://www.raspberrypi.org/downloads/).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, you will need to download the Linux QEMU `kernel` file. You can do so
    by going to [http://xecdesign.com/downloads/linux-qemu/kernel-qemu](http://xecdesign.com/downloads/linux-qemu/kernel-qemu).
    Once you have downloaded the kernel, place it in the same directory as the QEMU
    folder you just unzipped.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: After you have unzipped the IMG file and placed it in the same directory as
    QEMU, you need to run it. Go to the DOS prompt and navigate to `c:\Program Files\qemu`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'You will launch the Raspbian image system (or any Raspberry Pi image system)
    with the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Note that `qemu-system-armw.exe` is used for Windows environments. All other
    environments will use `qemu-system-arm.exe`. The last command loads the operating
    system. Use the exact name of the uncompressed operating system you put in the
    same folder as QEMU. It can take several minutes for QEMU to start after you give
    the command. There have been reports that QEMU does not work well with Windows
    8/8.1 or Mac OS X Yosemite (10.10).
  prefs: []
  type: TYPE_NORMAL
- en: The first part of the command launches the emulator for the specific processor.
    The second part of the command specifies the disk image file. Notice, we renamed
    the image from `2014-09-09-wheezy-raspbian.img` to `raspbian.img` just to make
    life easier for us. Do not forget to use your extensions when specifying to QEMU
    what to launch.![Running Raspberry Pi on your PC with QEMU emulator](img/6435OT_06_35.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Launch of QEMU
  prefs: []
  type: TYPE_NORMAL
- en: Your Raspberry Pi operating system (in our case Raspbian) will boot up in a
    QEMU window. You can now interact with the operating system and test different
    applications and tools. Furthermore, the QEMU documentation has advanced configuration
    options for networking between multiple emulators, mapping to physical hardware
    devices, and other advanced configurations. In most cases, the emulator will work
    perfectly to test typical applications and connectivity.
  prefs: []
  type: TYPE_NORMAL
- en: Other Raspberry Pi uses
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This book focused on using the Raspberry Pi as a means of delivery penetration
    testing capabilities. There are a ton of other use cases beyond hacking such as
    preventing attacks, or on a less serious note, playing games. Check out the main
    Raspberry Pi website located at [http://www.raspberrypi.org/](http://www.raspberrypi.org/)
    for more information.
  prefs: []
  type: TYPE_NORMAL
- en: Here are some other software options we found beneficial for the Raspberry Pi.
  prefs: []
  type: TYPE_NORMAL
- en: Flight tracking using PiAware
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You can use your Raspberry Pi along with FlightAware ([www.flightaware.com](http://www.flightaware.com))
    to build an **Automatic Dependent Surveillance-Broadcast** (**ADS-B**) system.
    ADS–B is a cooperative aircraft surveillance technology used by air traffic control
    agencies all over the world that determines the position of aircrafts reported
    by satellite and other navigation systems. Aircrafts periodically broadcast their
    ADS–B location enabling it to be tracked.
  prefs: []
  type: TYPE_NORMAL
- en: 'FlightAware has a large number of its own receivers, but invites aviation hobbyists
    to track airline data and help FlightAware process it, so it may be used on their
    website for the entire community. PiAware is the tool that helps turn your Raspberry
    Pi into a radar-tracking system that can be used by FlightAware. The following
    image shows a Raspberry Pi built for this purpose:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Flight tracking using PiAware](img/6435OT_06_36.jpg)'
  prefs: []
  type: TYPE_IMG
- en: To kick off this project, you need to download the PiAware operating system
    and install it on your Raspberry Pi. Refer to [Chapter 1](ch01.html "Chapter 1. Raspberry
    Pi and Kali Linux Basics"), *Raspberry Pi and Kali Linux Basics* of this book
    on how to install operating systems on a microSD card for your Raspberry Pi. PiAware
    can be found at [http://piaware.flightcdn.com/piaware-sd-card-1.16.img.zip](http://piaware.flightcdn.com/piaware-sd-card-1.16.img.zip).
  prefs: []
  type: TYPE_NORMAL
- en: 'After you have booted your Raspberry Pi with the PiAware operating system,
    you will need to plug in your ADS-B USB receiver to your Raspberry Pi. We recommend
    the NooElec NESDR Mini USB RTL-SDR & ADS-B Receiver Set, which can be purchased
    in the United States for approximately $22\. The following image shows the NooElec
    NESDR Mini:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Flight tracking using PiAware](img/6435OT_06_37.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Aircraft signals are not meant to pass through buildings so you should put your
    antenna outside and in the line of sight for aircrafts to get the best signal.
    You will need to sign up for a free FlightAware account at [http://flightaware.com/account/join/?referer=/account/join/](http://flightaware.com/account/join/?referer=/account/join/).
    Your data will be processed by FlightAware and will be viewable after 30 minutes
    at [http://flightaware.com/adsb/stats](http://flightaware.com/adsb/stats).
  prefs: []
  type: TYPE_NORMAL
- en: Congratulations, you now have a working system!
  prefs: []
  type: TYPE_NORMAL
- en: '![Flight tracking using PiAware](img/6435OT_06_38.jpg)'
  prefs: []
  type: TYPE_IMG
- en: A fully operational flight tracker
  prefs: []
  type: TYPE_NORMAL
- en: PiPlay
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This book focuses on penetration testing and other security needs, however,
    we thought to add a cool ARM image that turns your Raspberry Pi into a gaming
    system. This includes emulators of many popular gaming systems such as PlayStation,
    Game Boy, **Super Nintendo Entertainment System** (**SNES**), NES, Atari, and
    so on. You can find more at [http://blog.sheasilverman.com/pimame-raspberry-pi-os-download/](http://blog.sheasilverman.com/pimame-raspberry-pi-os-download/).
  prefs: []
  type: TYPE_NORMAL
- en: 'To install PiPlay, use the same process as for Kali Linux. For example, I used
    `sudo dd if=piplay-0.8-beta6.img of=/dev/disk2` to install the 0.8 beta image
    on my microSD card found on the `disk2` space. Once installed, you have to just
    power up the Raspberry Pi with the installed **PiPlay** image and it should boot
    up to the main GUI, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![PiPlay](img/6435OT_06_39.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'If you click the arrow, you will find additional menu options for other gaming
    systems and configuration options. The following screenshot shows the second menu:'
  prefs: []
  type: TYPE_NORMAL
- en: '![PiPlay](img/6435OT_06_40.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The first thing you will want to do once PiPlay is up is look for updates. You
    do this by clicking the large arrows in the menu to the third screen that shows
    the **Update PiPlay** option. You must be online to do this so you can either
    plug in a Ethernet cable, or use the **Setup Wireless** button to establish a
    wireless connection prior to looking for updates. If you are online, you will
    see your IP address in the top right-hand corner of the main menu. The following
    screenshot shows the third menu screen and my PiPlay connected to the Internet
    represented by an IP address in the top right-hand corner. The previous screenshots
    displayed **No Network Connection** in this spot.
  prefs: []
  type: TYPE_NORMAL
- en: '![PiPlay](img/6435OT_06_41.jpg)'
  prefs: []
  type: TYPE_IMG
- en: If you click on an operating system such as SNES, you will notice you don't
    have any games. You can find tons of game files in the ROM format online.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Downloading ROMs or making backup copies might violate copyright or other laws.
    There are many sources of ROMs, some of them are original games created by the
    authors, which are distributed at no cost or at a nominal charge. Copies of ROMs
    are usually distributed through websites, usenet newsgroups, and peer-to-peer
    type networks.
  prefs: []
  type: TYPE_NORMAL
- en: 'PiPlay makes it pretty easy to install ROM with a few scraper applications
    built in. That''s all there is to it. Download a ROM, use the scraper app to install
    the ROM, identify the ROM that was added to your system, and you should be good
    to go. The following screenshot shows the start screen of a game called Cave Story
    that comes with the PiPlay installed image:'
  prefs: []
  type: TYPE_NORMAL
- en: '![PiPlay](img/6435OT_06_42.jpg)'
  prefs: []
  type: TYPE_IMG
- en: PrivateEyePi
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'PrivateEyePi is a home automation and security system that is open source and
    can take advantage of motion detectors, cameras, heat signatures, infrared, and
    night vision. It can be monitored and managed through a simple web interface or
    customized mobile applications. The following figure shows a detailed description
    of a **Home Monitor** system:'
  prefs: []
  type: TYPE_NORMAL
- en: '![PrivateEyePi](img/6435OT_06_43.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Since the system has many different options and can get overly complicated,
    we won't go into the details on how to configure it. The author by the name of
    Gadjet has documented the entire process, including parts, where to buy them,
    and step-by-step instructions on how to install them at [https://sites.google.com/site/gadjetnut/home/home-alarm-system-project](https://sites.google.com/site/gadjetnut/home/home-alarm-system-project).
  prefs: []
  type: TYPE_NORMAL
- en: 'The following figure shows an alarm triggered by the **Home Monitor** system:'
  prefs: []
  type: TYPE_NORMAL
- en: '![PrivateEyePi](img/6435OT_06_44.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Some basic low-level voltage experience is needed to build all the parts, or
    you can purchase many of them that are prebuilt. We did hear a few concerns about
    this project. These concerns mainly centered on how reliable this would be as
    a security system and whether the economics made sense, since basic alarm systems
    would cost around the same price. However, we believe this could be great as a
    team, classroom, or hobby project. Furthermore, the customization and options
    to expand the system can potentially be much greater than anything that is available
    from a major commercial vendor.
  prefs: []
  type: TYPE_NORMAL
- en: More uses
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are a ton of other uses of the Raspberry Pi, well beyond security that
    we did not touch upon. Some of our favorites include **OpenELEC** (short for **Open
    Embedded Linux Entertainment Center**) that can turn your Raspberry Pi into a
    home media hub. Other uses include building motion sensors, an earthquake detector,
    a gas detector, and many other things. We hope by concluding this chapter, you
    will be inspired to use your Raspberry Pi in new and productive ways.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This last chapter provided additional tools and use cases for using a Raspberry
    Pi. We briefly covered some alternative penetration testing arsenals to Kali Linux,
    but believe Kali Linux should see the most innovation based on its popularity
    in the IT community. We also touched upon ARM images that can be used for defensive
    purposes such as firewalls, IPS/IDS, and VPN. We closed with some fun ARM images
    that are not necessarily security-related, but cool regardless.
  prefs: []
  type: TYPE_NORMAL
- en: 'This wraps up this book. Hopefully, you enjoyed reading it. We would love to
    hear from you. Feel free to reach us on our respective blogs and share your thoughts.
    Aamir Lakhani can be reached at [www.drchaos.com](http://www.drchaos.com) and
    Joseph Muniz can be reached at [www.thesecurityblogger.com](http://www.thesecurityblogger.com).
    We had a ton of fun working through the topics covered and wish you the best with
    your Raspberry Pi experience. That includes those looking to do good or evil with
    this new knowledge. Aamir really wanted to close with the Spiderman quote about
    responsibility. So against Joseph''s suggestion, here it is: "With great power
    comes great responsibility". Have fun and happy hacking!'
  prefs: []
  type: TYPE_NORMAL
