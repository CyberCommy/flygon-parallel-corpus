- en: Chapter 11. What is next?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Docker ecosystem is converging towards a bigger picture, of which Swarm
    will be one of the core components. Let's hypothesize a roadmap.
  prefs: []
  type: TYPE_NORMAL
- en: The challenge of provisioning
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are no official tools to create a big Swarm at a scale yet. At the moment,
    operators use internal scripts, ad hoc tools (such as Belt), configuration managers
    (such as Puppet or Ansible), or orchestration templates (such as CloudFormation
    for AWS or Heat for OpenStack), as we have seen in the previous chapters. Recently,
    Docker For AWS and Azure came as alternatives.
  prefs: []
  type: TYPE_NORMAL
- en: But this use case will be probably addressed in a unified way with software-defined
    infrastructure toolkits.
  prefs: []
  type: TYPE_NORMAL
- en: Software defined infrastructure
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Starting from containers as building blocks to then creating systems to architect,
    orchestrate, scale, secure, and deploy not only apps but also infrastructures,
    as a long-term goal there is probably the *programmable Internet*.
  prefs: []
  type: TYPE_NORMAL
- en: After SwarmKit, that's the kit for orchestration, Docker open sourced in October
    2016 **Infrakit**, the kit for infrastructures.
  prefs: []
  type: TYPE_NORMAL
- en: Infrakit
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'While the focus of Docker Engine is containers and the focus of Docker Swarm
    is orchestration, the focus of Infrakit is on *groups* as primitives. Groups are
    intended of any object: Pets, cattle, unikernels, and Swarm clusters.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Infrakit is the answer to the problem of managing Docker in different infrastructures.
    Before Infrakit, this was difficult and not portable. The idea is to provide a
    consistent user experience from architecting data centers to run bare containers.
    Infrakit is the current highest level abstraction for creating programmable infrastructures
    by Docker and it describes itself as:'
  prefs: []
  type: TYPE_NORMAL
- en: '*"InfraKit is a toolkit for creating and managing declarative, self-healing
    infrastructure. It breaks infrastructure automation down into simple, pluggable
    components. These components work together to actively ensure the infrastructure
    state matches the user''s specifications."*'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Infrakit in the stack leans against the flank of container engines.
  prefs: []
  type: TYPE_NORMAL
- en: '![Infrakit](images/image_11_001.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The organization is per groups. There is a group for the Infrakit itself structure,
    made of managers keeping a configuration. There is exactly one leader at a time,
    and some followers, for instance, have two. Every manager includes some group
    declarations. Groups may be of cattle, pets, swarms, unikernels, and so on. Every
    group is defined with instances (the real resources, for example, containers),
    and flavors (the type of resource, for example, Ubuntu Xenial or a MySQL Docker
    image).
  prefs: []
  type: TYPE_NORMAL
- en: Infrakit is declarative. It relies on a JSON configuration and internally uses
    the well-known patterns of encapsulation and composition to make configurations
    as inputs to process and make infrastructures to converge to a specific configuration.
  prefs: []
  type: TYPE_NORMAL
- en: 'The goals of Infrakit are to:'
  prefs: []
  type: TYPE_NORMAL
- en: Provide a unified toolkit to manage groups
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Be pluggable
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Provide self healing
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Release rolling updates
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Groups abstract the notion of objects. They can be groups of any size and scale
    up, and down, they can be groups of named pets, unnamed cattle, Infrakit managers
    itself and/or all the above together. At the moment, in Infrakit there is only
    one default group configuration (the default plugin), but new group definitions
    may come later. The default group is an interface exposing actions such as watch/unwatch
    (start and stop groups), perform/stop updates, change group size.
  prefs: []
  type: TYPE_NORMAL
- en: Groups are made of instances. They may be physical resources such as VMs or
    containers, or interfaces to other services, such as Terraform.
  prefs: []
  type: TYPE_NORMAL
- en: On instances you can run flavors, for example, Zookeeper, MySQL, or Ubuntu Xenial.
  prefs: []
  type: TYPE_NORMAL
- en: 'Groups, instances, and flavors are pluggable: They run in fact as plugins that
    can be written in any language. At the moment, Infrakit ships some Go code, that
    when compiled gives a set of binaries, such as cli, which can be used to control,
    inspect, and perform operations on groups, instances, and flavors, and plugin
    binaries, such as terraform, swarm, or zookeeper.'
  prefs: []
  type: TYPE_NORMAL
- en: Infrakit is thought to be able to manage inconsistencies, by continuously monitoring,
    detecting anomalies, and triggering actions. This propriety is called self-healing
    and can be used to create more robust systems.
  prefs: []
  type: TYPE_NORMAL
- en: One of the major operations supported by Infrakit will be releasing rolling
    updates to update instances. For example, update a package in a container, update
    a container image, or others maybe by using **TUF** (**The Update Framework**),
    a project described in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Infrakit is so early and young at the time of writing that we can't show any
    example that's not a Hello World. On the Internet, it will be soon full of Infrakit
    Hello Worlds, and the Infrakit team itself released a step-by-step tutorial to
    use it with the file or Terraform plugins. We can just depict it as the architectural
    layer in the Docker ecosystem and expect it to be able to deploy even Swarms,
    provisioning the hosts and interconnecting them.
  prefs: []
  type: TYPE_NORMAL
- en: Infrakit is expected to be included into the Engine, maybe as experimental in
    version 1.14.
  prefs: []
  type: TYPE_NORMAL
- en: TUF - The Update Framework
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: At Docker Summit 16 in Berlin, another topic was discussed, TUF ([https://theupdateframework.github.io/](https://theupdateframework.github.io/)),
    a toolkit which has the goal to provide a secure way to roll updates.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are many update tools available, which do the update in practice, but
    TUF is much more. From the project''s home page:'
  prefs: []
  type: TYPE_NORMAL
- en: '*"TUF helps developers to secure new or existing software update systems, which
    are often found to be vulnerable to many known attacks. TUF addresses this widespread
    problem by providing a comprehensive, flexible security framework that developers
    can integrate with any software update system."*'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: TUF is already integrated into Docker, and the tool is called Notary, as we
    saw in [Chapter 9](ch09.html "Chapter 9. Securing a Swarm Cluster and the Docker
    Software Supply Chain"), *Securing a Swarm Cluster and the Docker Software Supply
    Chain*, Notary can be used. Notary can be used to verify content and make the
    keys management easy. With Notary, developers can sign their content offline using
    keys and later make the content available, by pushing their signed trusted collection
    to a Notary Server.
  prefs: []
  type: TYPE_NORMAL
- en: Will TUF be merged into Docker Infrakit as the rolling update mechanism? That
    would be another amazing step ahead.
  prefs: []
  type: TYPE_NORMAL
- en: Docker stacks and Compose
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Another Docker feature available to developers but still in experimental phase
    is Stacks. We introduced Stacks in [Chapter 6](ch06.html "Chapter 6. Deploy Real
    Applications on Swarm"), *Deploy Real Applications on Swarm*. They will become
    the default method of deploying applications on swarms. Instead of putting in
    motion containers, the idea is that groups of containers, packed into bundles,
    will be rather launched.
  prefs: []
  type: TYPE_NORMAL
- en: Also, a new integration between Compose and the new Swarm may be expected.
  prefs: []
  type: TYPE_NORMAL
- en: CaaS - Containers as a Service
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In the XaaS arena, where everything is treated as a software, not only are
    containers first class citizens, but orchestration systems and infrastructures
    will also be. All these abstractions will lead to a cloud-defined way of running
    this ecosystem of tools: Containers as a Service.'
  prefs: []
  type: TYPE_NORMAL
- en: An example of CaaS is the Docker Datacenter.
  prefs: []
  type: TYPE_NORMAL
- en: Unikernels
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: SwarmKit, as a kit, will run clusters not only of containers, but also unikernels,
    we said.
  prefs: []
  type: TYPE_NORMAL
- en: What are unikernels and why are they so fantastic?
  prefs: []
  type: TYPE_NORMAL
- en: If you use Docker For Mac, you're already using unikernels. They are the core
    of these systems. On Mac, **xhyve,** a port of the FreeBSD virtualization system
    **(bhyve),** runs a Docker host in unikernel mode.
  prefs: []
  type: TYPE_NORMAL
- en: We all love containers, because they are small and fast, but the security implications
    of having a mechanism abstracting the kernel and make its components (containers)
    to share system resources, libraries, binaries, are really a concern. Just look
    for CVEs bulletins regarding containers security on any search engine. That's
    a serious issue.
  prefs: []
  type: TYPE_NORMAL
- en: Unikernels promise a reassessment of software architecture at the highest level.
    This is quickly explained here. There is an efficient way to guarantee maximum
    security and because of their nature they run at a very very tiny size. In a world
    where we speak of Terabytes, Petabytes, and beyond, it will surprise you to know
    that a unikernel implementation of KVM like ukvm can fit in 67Kb (Kilobytes),
    web server binaries in 300Kb, or operating system images in order of some Megabytes.
  prefs: []
  type: TYPE_NORMAL
- en: This is possible because unikernels basically don't expose all the system calls
    to the stack, but those calls are included into the binary itself. A **ping**
    binary does not require any system call to access the disk, use cryptographic
    functions or manage system processes. So just why not cut off these calls to ping,
    and provide it with the minimal it requires? That's the main idea behind unikernels.
    A ping command will be compiled with *inside* some network I/O, raw sockets, and
    that's all.
  prefs: []
  type: TYPE_NORMAL
- en: With unikernels, there is no distinction between kernel and user space, as the
    address table is unified. This means that the address table is *continuous*. As
    explained earlier, this is possible because unikernel binaries are compiled embedding
    the system functions they need, such as I/O operations, memory management or shared
    libraries, *inside* the binary. In the traditional operating systems model, applications
    look and use the system calls at *runtime*, while with unikernels, these system
    calls are statically linked at *compile time*.
  prefs: []
  type: TYPE_NORMAL
- en: '![Unikernels](images/image_11_002.jpg)'
  prefs: []
  type: TYPE_IMG
- en: This can look strange at first sight but it's a tremendous advance in terms
    of process isolation and security. Even if someone is able to fraudulently introduce
    into some system running unikernel stuff, it's almost impossible for her to find
    any security breach. The attack surface is so minimal that it's highly improbable
    that there will be any exploitable unused system call or features, apart from
    the ones in use, possibly already hardened. There is no shell to invoke, there
    are no external utility libraries or scripts, there are no configuration or password
    files, there are no extra ports bind.
  prefs: []
  type: TYPE_NORMAL
- en: So what about unikernels and Docker?
  prefs: []
  type: TYPE_NORMAL
- en: At the DockerConEU 15 in Barcelona, some folks jump to the stage to show how
    to integrate Docker with unikernels, and later eventually Docker Inc. acquired
    the company, signing between the other things the birth of Docker For Mac.
  prefs: []
  type: TYPE_NORMAL
- en: At the Docker Summit 16 in Berlin, someone mentioned about unikernels running
    alongside with containers in SwarmKit. A future of integration is coming.
  prefs: []
  type: TYPE_NORMAL
- en: Contribute to Docker
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'All this innovation in Docker is possible because the projects rely on a very
    broad community. Docker is a very intense and active project, split into several
    Github repositories, the most notable of which are:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Docker itself, the engine: [www.github.com/docker/docker](https://github.com/docker/docker)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Machine, the Docker hosts instantiator: [www.github.com/docker/machine](https://github.com/docker/machine)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Swarm, the orchestration service: [www.github.com/docker/swarmkit](https://github.com/docker/swarmkit)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Compose, the tool to model micro services: [www.github.com/docker/compose](https://github.com/docker/compose)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Infrakit, the infrastructure manager: [www.github.com/docker/infrakit](https://github.com/docker/infrakit)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: But also, these projects would not run without their libraries, such as Libcontainer,
    Libnetwork, Libcompose (waiting to be merged with Compose), and many many others.
  prefs: []
  type: TYPE_NORMAL
- en: All this code would not exist without the commitment of the Docker team and
    the Docker community.
  prefs: []
  type: TYPE_NORMAL
- en: Github
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Any company or individual is encouraged to contribute to the projects. There
    are some guidelines at [https://github.com/docker/docker/blob/master/CONTRIBUTING.md](https://github.com/docker/docker/blob/master/CONTRIBUTING.md).
  prefs: []
  type: TYPE_NORMAL
- en: File issues
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: One great way to start is to report anomalies, bugs, or submit ideas, by opening
    issues on the GitHub space of the related project.
  prefs: []
  type: TYPE_NORMAL
- en: Code
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Another well-appreciated way to help is to submit pull requests to either fix
    things or propose new features. These PRs should follow and reference to some
    issue recorded into the Issues page, accordingly to the guidelines.
  prefs: []
  type: TYPE_NORMAL
- en: Belt and other projects
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Also, along with this books many mini side projects started:'
  prefs: []
  type: TYPE_NORMAL
- en: Swarm2k and Swarm3k, as community-oriented experiments to create Swarms at a
    scale. Some code, instructions, and results are available in the [www.github.com/swarmzilla](https://github.com/swarmzilla)
    respective repositories.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Belt as a Docker host provisioner. At the moment, it includes only the DigitalOcean
    driver, but it can be further extended.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ansible modules for Swarm, Machine, and Docker certificates, to be used in Ansible
    play books.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Containers pushed to the Docker Hub to illustrate specific components (such
    as `fsoppelsa/etcd`) or introduce new features (such as `fsoppelsa/swarmkit`).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Other minor pull requests, hacks and code portions..
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In the spirit of open source, all of the above are free software and any contribution,
    improvement, or critic is very well appreciated.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Finally, a couple of words on the history of this book and a note on how astonishingly
    fast is the development of Docker.
  prefs: []
  type: TYPE_NORMAL
- en: When the project of writing a book on Docker Swarm was just drafted, at the
    day there was only the old Docker Swarm standalone mode, where a Swarm container
    was responsible for orchestrating infrastructures of containers, having to rely
    on external discovery systems, such as Etcd, Consul, or Zookeeper.
  prefs: []
  type: TYPE_NORMAL
- en: Looking back at these times, just some months ago, is like thinking to prehistory.
    Just later in June, when SwarmKit was open sourced as an orchestration kit and
    it was included into the Engine as Swarm Mode, a major step ahead was made by
    the Docker in terms of orchestration. A full, scalable and secure by default,
    and easy way to orchestrate Docker natively was released. Then, it turned out
    that the best way of orchestrating Docker was just Docker itself.
  prefs: []
  type: TYPE_NORMAL
- en: 'But when Infrakit was open sourced in October 2016, a new big step ahead was
    done in terms of infrastructure: now not only orchestrations and group of containers
    are primitives, but also groups of other objects, even mixed in the original Infrakit
    intent, are: Containers, VMs, unikernels, and possibly bare metal.'
  prefs: []
  type: TYPE_NORMAL
- en: In the (near) future, we can expect all of these projects to be glued, having
    Infrakit as the infrastructure manager, capable of provisioning Swarms (of anything),
    where containers or other objects are orchestrated, interconnected, stored (state
    fully), roll updated, interconnected by overlay networks, and secured.
  prefs: []
  type: TYPE_NORMAL
- en: Swarm is just the beginning of this big-picture ecosystem.
  prefs: []
  type: TYPE_NORMAL
