- en: Chapter 5. Spring Integration with FTP
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: FTP involves sending files over the Internet from one computer to another using
    a file transfer protocol. Spring Integration also provides support to the file
    transfer protocol. File transfer can be done via FTP or using SFTP (secure FTP).
  prefs: []
  type: TYPE_NORMAL
- en: 'Some of the abbreviations used in FTP scenarios are listed as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**FTP**: **File** **Transfer Protocol**.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**FTPS**: **FTP Secure** is an extension to FTP that adds support for the **Transport
    Layer Security** (**TLS**) and **Secure Sockets Layer** (**SSL**) cryptographic
    protocols.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**SFTP**: **SSH** **File Transfer Protocol**, that is, FTP over Secure Shell,
    protocol.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In a real scenario, a file server will have an FTP address, username and password.
    The clients connect to the server to transfer the files. We can either upload
    a file to a remote location download a file from a remote location using FTP.
  prefs: []
  type: TYPE_NORMAL
- en: 'Spring''s integration package supports both sending and receiving files from
    the FTP or FTPS servers. It provides certain endpoints, and here are the endpoints/adapters
    available in Spring for FTP/FTPS:'
  prefs: []
  type: TYPE_NORMAL
- en: Inbound channel adapter
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Outbound channel adapter
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Outbound gateway
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The channel adapters are nothing but message endpoints, which actually connect
    the message to a message channel. We can obviously see, send, and receive configurations
    and methods while dealing with the channel adapters.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we shall see what Spring enables us to do with FTP, and develop
    a sample application that demonstrates Spring's integration ability to support
    file transfer over this protocol. We shall also see the configurations that we
    need to write and how inbound and outbound adapters can be used to transfer files
    over FTP using Spring integration package.
  prefs: []
  type: TYPE_NORMAL
- en: Maven dependency
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In order to create an FTP application using Spring integration framework, add
    the following dependency to the `pom.xml` file in your Maven project. The main
    packages are Spring Integration test and Spring Integration FTP. The libraries
    can be downloaded from the Maven repository or can be added to the project's `pom.xml`
    file.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here are the Maven dependencies that need to be added to the `pom.xml` file
    to start developing applications with the Spring Integration FTP package:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Spring's XSD for FTP
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let's look at the XSD that the Spring Integration package has provided for FTP.
    This has all the schema definitions and gives us all the configuration possibilities
    that are supported by Spring, so it becomes easier to configure the XML file.
  prefs: []
  type: TYPE_NORMAL
- en: The XSD ([http://www.springframework.org/schema/integration/ftp/spring-integration-ftp.xsd](http://www.springframework.org/schema/integration/ftp/spring-integration-ftp.xsd))
    offers a lot of information about the Spring integration with FTP. It gives us
    information about configuring the channel adapters in the XML configuration files.
  prefs: []
  type: TYPE_NORMAL
- en: 'The inbound and outbound channel adapters are the two main elements in the
    XSD. Here is an extract from the XSD available at the link we just mentioned:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: In the next sections, we shall see how we can configure each of the inbound
    and outbound channel adapters and configuration options supported by Spring integration
    for FTP.
  prefs: []
  type: TYPE_NORMAL
- en: Configuring an outbound channel adapter for FTP
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Outbound channel adapter configuration is for the remote directory. It''s meant
    to perform actions such as writing a file to the remote server (file upload),
    creating a new file, or adding a suffix on remote FTP servers. A few of the configurations
    that are available for outbound channel adapters from the XSD are listed here:'
  prefs: []
  type: TYPE_NORMAL
- en: 'It supports configuring the remote directory to write files using regular expression.
    The attribute used is as follows:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'We can also configure to automatically create a directory in a remote location:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'We can also configure to spring integration framework to work with FTP, to
    add a suffix to the file temporarily:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Another important configuration is to generate a filename in the remote location
    of the FTP server:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding feature is again advanced to support regular expressions:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Configuring an inbound channel adapter for FTP
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The inbound channel adapter configuration is for the local directory, that is,
    it is meant to perform actions such as writing a file from the remote server (file
    download), creating a new file, or adding a suffix on the local directory. The
    inbound channel adapter ensures that the local directory gets synchronized with
    the remote FTP directory.
  prefs: []
  type: TYPE_NORMAL
- en: 'A few of the configurations that are available for inbound channel adapters
    from the XSD are listed as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: 'It provides configuration options to auto-create a local directory if it doesn''t
    exist:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'It provides an option to configure the remote server, and to delete the remote
    source file after copying it to the local directory:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Ordering files in using the comparator configuration available:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Specify a comparator to be used while ordering files. If none is provided,
    the order will be determined by the `java.io` file implementation:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Configuring session caching using the following attribute:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Specify whether the sessions should be cached. The default value is `true`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'The configuration that can be done using the XSD reference is as follows:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: FTPSessionFactory and FTPSSessionFactory
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this section, let''s look at the two core classes for FTP using Spring integration,
    `FTPSessionFactory` and `FTPSSessionFactory`. These classes have lot of getters,
    setters, and instance variables, which give information about the data, file,
    and FTP mode. The instance variables and their usage are described as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: 'The class `org.springframework.integration.ftp.session.DefaultFtpSessionFactory`
    is used to configure the FTP details in the application. The class is configured
    as a simple bean in the configuration XML file .The class has getters and setters
    for the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '`Session`: This accepts session variables.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`postProcessClientAfterConnect`: This handles additional initialization after
    the client connection action is performed.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`postProcessClientBeforeConnect`: This handles additional initialization before
    the client connection action is performed.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`BufferSize`: This defines the size of the buffered data that gets transferred
    over FTP.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ClientMode`: There are two modes supported by FTP. They are as follows:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Active FTP mode**: This is specified in Spring FTP integration package as
    `ACTIVE_LOCAL_DATA_CONNECTION_MODE`. In active FTP mode, the server has to ensure
    that the random port `1023`< communication channels are open. In active FTP mode,
    the client connects from a random unprivileged port (`N > 1023`) to the FTP server''s
    command port, port `21`. Then, the client starts listening to port `N + 1` and
    sends the FTP command `PORT N + 1` to the FTP server. The server will then connect
    back to the client''s specified data port from its local data port, which is port
    `20`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Passive FTP mode**: This is specified in Spring FTP integration package as
    `PASSIVE_LOCAL_DATA_CONNECTION_MODE`. In passive FTP mode, the client initiates
    both connections to the server, solving the problem of firewalls filtering the
    incoming data port connection to the client from the server. On opening an FTP
    connection, the client opens two random unprivileged ports locally (`N > 1023`
    and `N + 1`). The first port contacts the server on port `21`, but instead of
    then issuing a `PORT` command and allowing the server to connect back to its data
    port, the client will issue the `PASV` command. The result of this is that the
    server then opens a random unprivileged port (`P > 1023`) and sends `P` back to
    the client in response to the `PASV` command. The client then initiates the connection
    from port `N + 1` to port `P` on the server to transfer data. The package `DefaultFTPClientFactory`
    has a setter method with a switch case to set the mode.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: '`Config`: This sets the FTP configuration object `org.apache.commons.net.ftp.FTPClientConfig
    config`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ConnectTimeout`: This specifies the connection timeout time after trying to
    connect to the client.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ControlEncoding`: This sets the encoding.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Data Timeout`: This sets the data timeout time during the file transfer.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Default Timeout`: This sets the socket timeout time.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`File Type`: The FTP protocol supports several file types. They are listed
    as follows:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**ASCII file type (default)**: The text file is transferred across the data
    connection in **Network Virtual Terminal** (**NVT**) ASCII. This requires the
    sender to convert the local text file into NVT ASCII and the receiver to convert
    NVT ASCII into the local text file type. The end of each line is transferred using
    the NVT ASCII representation of a carriage return followed by a linefeed. This
    means the receiver must scan every byte, looking for the CR, LF pair. (We saw
    the same scenario with TFTP''s ASCII file transfer in Section 15.2.)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**EBCDIC file type**: An alternative way of transferring text files when both
    ends are **Extended Binary Coded Decimal Interchange** **Code** (**EBCDIC**) systems.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Image file type**: This is also called the binary file type. The data is
    sent as a continuous stream of bits that are normally used to transfer binary
    files.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Local file type**: This is a way of transferring binary files between hosts
    with different byte sizes. The number of bits per byte is specified by the sender.
    For systems using 8-bits, a local file type with a byte size of eight is equivalent
    to the image file type. We should know that 8 bits make 1 byte.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Spring has the abstract class `AbstractFtpSessionFactory<T extends org.apache.commons.net.ftp.FTPClient>`
    which has defined the following parameters with static variables that can be used
    in the configuration of FTP:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: '`Host`: Specify the FTP host.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Password`: Specify the FTP password.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Port`: Specify the FTP port. There are two ports available, a data port and
    command port. The data port is configured as 20 and command port is configured
    as 21.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Username`: Specify the FTP username.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following configuration shows the `DefaultFtpSessionFactory` class as a
    bean with bean ID `ftpClientFactory` and its property values set as per the FTP
    server credentials:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'The `org.springframework.integration.ftp.session.DefaultFtpsSessionFactory`
    class enables us to use FTPS connections. The class contains getters and setters
    for the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '`BufferSize`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`clientMode`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`config`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ControlEncoding`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`DEFAULT_REMOTE_WORKING_DIRECTORY`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`fileType`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`host`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`password`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`port`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`username`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The preceding fields are inherited from an abstract class named `AbstarctFtpSessionFactory`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is a sample bean configuration of `DefaultFtpsClientFactory` and its properties
    that can be configured in the XML file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: Spring FTP using an outbound channel example
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this section, lets look at a simple scenario of transferring files from
    Location1 to a remote location, Location2\. For the sake of clarity, let''s define
    them as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Location1: `d:\folder1`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Location2: `d:\folder2`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let's create a simple application in Spring with the Spring integration package,
    to accomplish the task of transferring files from Location1 to Location2\. We
    need to have two main files to do this; the first one is the configuration file
    `applicationContext.xml` and the second is a Java class file that will intimate
    the Spring integration framework to upload the file to the remote location.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `applicationContext.xml` file will have the entire necessary bean configuration
    with XMLNS required to use Spring integration package. The XMLNS that needs to
    be integrated is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'We also need to configure `DefaultFtpSessionFactory` as a bean with `FtpChannel`
    and `FtpOutBoundAdpater`. The `DefaultFtpSessionFactory` has setters for all the
    FTP properties. `FTPOutboundeAdapter` will be configured with the `remoteFTP`
    location and `outboundchannel`. Here is the complete configuration file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'Now let''s create a simple Java class that intimates Spring to upload a file
    to Location2\. This class will load the `applicationContext.xml` file and instantiate
    `FTPChannel` using the bean ID that is configured in the XML file using the context
    object. A file object is created with the filename that needs to be transferred
    to the remote location. This file object is sent to the Spring integration message,
    which in turn sends the message to the channel for the file to be delivered at
    the destination. Here is the sample code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: Run the preceding class to see `report-Jan.txt` to be transferred to the remote
    location.
  prefs: []
  type: TYPE_NORMAL
- en: Configuring Spring FTP to read files in subfolders using the gateway
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this section, let's look at another configuration file that can be used to
    read subfolder reports.
  prefs: []
  type: TYPE_NORMAL
- en: 'We have used the expression attribute from the previous section dealing with
    FTP XSD. We shall further see how we can intimate the Spring integration FTP framework
    to trigger FTP commands with an expression attribute. Each of the commands executed
    in FTP will get a reply, usually three digits, for example:'
  prefs: []
  type: TYPE_NORMAL
- en: '`125`: Data connection already open; transfer starting'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`200`: Command OK'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`214`: Help message (for human user)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`331`: Username OK; password required'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`425`: Can''t open data connection'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`452`: Error writing file'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`500`: Syntax error (unrecognized command)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`501`: Syntax error (invalid arguments)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`502`: Unimplemented mode type'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The reply channels are created by gateways. In the following code, we have
    configured a reply channel for the splitters:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'With Spring integration support for FTP, we can also break the message into
    splits. This is configured using a `splitter` attribute (`AbstractMessageSplitter
    implements MessageHandler`) in the XML file, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: Logically, the `splitter` class has to split the messages and attach sequence
    numbers and size information to each split message, so that the sequence is not
    lost. The broken messages can be put together using aggregators and then sent
    across the channel.
  prefs: []
  type: TYPE_NORMAL
- en: Configuring Spring FTP in Java
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this section, let's see how we can configure FTP properties in a Java class
    by using annotations and creating an instance of the `DefaultFTPSession` factory
    and setting the properties using the setter methods available with the instance.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can use the `@Configuration` annotation to configure the FTP properties
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: Sending files over FTP using the Spring integration
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Think of a scenario in which you are sending files over an FTP channel. Consider
    that there are two files, say `Orders.txt` and `vendors.txt`, that need to be
    sent over FTP to a remote location. To accomplish this, we need to follow these
    steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Create `FTPChannel`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Make a directory in the base folder using `baseFolder.mkdirs()`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create two file objects at the base folder location.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Use `InputStream` and create two separate streams for orders and vendors.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Using the file utils available in Spring, copy the input streams to their specific
    files.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Using the `MessageBuilder` class, use the `withpayload()` method to convert
    the files into messages.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Lastly, send the message to the FTP channel and close the context.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Let''s write some sample code to do this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: FTP application using the Spring integration and Spring batch
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this section, we shall learn how to make FTP as a batch job. We shall create
    a configuration file in Java instead of XML. Here we shall set all the properties
    for a Spring batch database and tasklet using the `@Configuration` annotation.
    Then we have a properties file, which will set values to the instance variables
    in the `ApplicationConfiguration.java` file. The properties are loaded using the
    properties holder pattern available in Spring Framework.
  prefs: []
  type: TYPE_NORMAL
- en: 'We shall first update the configuration files. Here is a sample configuration
    file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: Let's use `property-placeholder` for further configuring the batch job.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a file named `batch.properties`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'Configure the application in the `context.xml` file or a separate file, the
    tasklet to run the FTP:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'Here is `MyApplicationFtpGetRemoteFilesTasklet`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we saw an overview of FTP and its abbreviations. We have seen
    different types of adapters, such as inbound and outbound adapters, with the outbound
    gateway and its configuration. We have also shown the `springs-integration-ftp.xsd`
    and have quoted various options available for each of the inbound and outbound
    adapters. We have also shown the libraries that are required to develop a maven
    application using the `spring-integration-ftp` package. Then we have looked at
    two important classes, `FTPSessionFactory` and `FTPsSessionFactory`, with getters
    and setters. We have also demonstrated an example of transferring files with `SpringFTP`
    using the outbound channel. We also demonstrated configuring FTP using Java via
    the `@Configuration` annotation. Lastly, we have demonstrated FTP as a tasklet.
    In the next chapter, we shall further look into Spring's integration with HTTP.
  prefs: []
  type: TYPE_NORMAL
