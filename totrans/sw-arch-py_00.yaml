- en: Preface
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Software architecture, or creating a blueprint design for a particular software
    application, is not a walk in the park. The two biggest challenges in software
    architecture are keeping the architecture in sync, first with the requirements
    as they are uncovered or evolve, and next with the implementation as it gets built
    and evolves.
  prefs: []
  type: TYPE_NORMAL
- en: Filled with examples and use cases, this guide takes a direct approach to helping
    you with everything it takes to become a successful software architect. This book
    will help you understand the ins and outs of Python so that you can architect
    and design highly scalable, robust, clean, and performant applications in Python.
  prefs: []
  type: TYPE_NORMAL
- en: What this book covers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '[Chapter 1](part0015.xhtml#aid-E9OE1 "Chapter 1. Principles of Software Architecture"),
    *Principles of Software Architecture*, introduces the topic of software architecture,
    giving you a brief on architectural quality attributes and the general principles
    behind them. This will enable you to have strong fundamentals in software architectural
    principles and foundational attributes.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 2](part0021.xhtml#aid-K0RQ1 "Chapter 2. Writing Modifiable and Readable
    Code"), *Writing Modifiable and Readable Code*, covers developmental architectural
    quality attributes, namely, modifiability and readability. It will help you gain
    an understanding of the architectural quality attribute of maintainability and
    tactics of writing code in Python to test your applications.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 3](part0029.xhtml#aid-RL0A2 "Chapter 3. Testability – Writing Testable
    Code"), *Testability Writing Testable Code*, helps you understand the architectural
    quality attribute of testability and how to architect Python applications for
    testability. You will also learn about various aspects of testability and software
    testing and the different libraries and modules available in Python to write testable
    applications.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 4](part0031.xhtml#aid-TI1E1 "Chapter 4. Good Performance is Rewarding!"),
    *Good Performance is Rewarding!*, covers the performance aspects of writing Python
    code. You will be equipped with the knowledge of performance as a quality attribute
    in architecture and when to optimize for performance. You will learn when to optimize
    for performance in the SDLC.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 5](part0040.xhtml#aid-164MG1 "Chapter 5. Writing Applications That
    Scale"), *Writing Applications that Scale*, talks about the importance of writing
    scalable applications. It discusses different ways to achieve of application scalability
    and discusses scalability techniques using Python. You will also learn about theoretical
    aspects of scalability and the best practices in the industry.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 6](part0053.xhtml#aid-1IHDQ1 "Chapter 6. Security – Writing Secure
    Code"), *Security Writing Secure Code*, discusses the security aspect of architecture
    and teaches you best practices and techniques of writing applications that are
    secure. You will understand the different security issues to watch out for and
    to and to architecture applications in Python that are secure from the ground
    up.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 7](part0061.xhtml#aid-1Q5IA1 "Chapter 7. Design Patterns in Python"),
    *Design Patterns in Python*, gives you an overview of design patterns in Python
    from a pragmatic programmer''s perspective, with brief theorotical background
    of each pattern. You will gain knowledge of design patterns in Python that are
    actually useful to pragmatic programmer.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 8](part0067.xhtml#aid-1VSLM2 "Chapter 8. Python – Architectural Patterns"),
    *Python Architectural Patterns – The Pythonic Approach*, introduces you to the
    modern architectural patterns in Python from a high-level perspective while giving
    examples of Python libraries and frameworks to realize the approaches of these
    patterns to solve high-level architecture problems.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 9](part0072.xhtml#aid-24L8G1 "Chapter 9. Deploying Python Applications"),
    *Deploying Applications with Python – Devops with Python*, covers the aspect of
    easily deploying your code on remote environments or on the cloud using Python
    the right way.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 10](part0077.xhtml#aid-29DRA2 "Chapter 10. Techniques for Debugging"),
    *Techniques for Debugging*, covers some of the debugging techniques for Python
    code––from the simplest, strategically placed print statement to logging and system
    call tracing which will be very handy to the programmer and also help the system
    architect to guide his team.'
  prefs: []
  type: TYPE_NORMAL
- en: What you need for this book
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To run most of the code samples shown in this book, you need to have Python
    3 installed on your system. The other prerequisites are mentioned at the respective
    instances.
  prefs: []
  type: TYPE_NORMAL
- en: Who this book is for
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This book is for experienced Python developers who are aspiring to become the
    architects of enterprise-grade applications or software architects who would like
    to leverage Python to create effective blueprints of applications.
  prefs: []
  type: TYPE_NORMAL
- en: Conventions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this book, you will find a number of text styles that distinguish between
    different kinds of information. Here are some examples of these styles and an
    explanation of their meaning.
  prefs: []
  type: TYPE_NORMAL
- en: 'Code words in text, database table names, folder names, filenames, file extensions,
    pathnames, dummy URLs, user input, and Twitter handles are shown as follows: "We
    can include other contexts through the use of the `include` directive."'
  prefs: []
  type: TYPE_NORMAL
- en: 'A block of code is set as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'When we wish to draw your attention to a particular part of a code block, the
    relevant lines or items are set in bold:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Any command-line input or output is written as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '**New terms** and **important words** are shown in bold. Words that you see
    on the screen, for example, in menus or dialog boxes, appear in the text like
    this: "Clicking the **Next** button moves you to the next screen."'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Warnings or important notes appear in a box like this.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Tips and tricks appear like this.
  prefs: []
  type: TYPE_NORMAL
