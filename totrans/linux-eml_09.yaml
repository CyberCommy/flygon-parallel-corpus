- en: Chapter 9. Antivirus Protection
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A common view is that Linux is not vulnerable to viruses, so why install an
    antivirus solution? While it is true that there are very few viruses for Linux,
    the primary objective is not to protect the mail server from infection, but to
    reduce or eliminate any risk to recipients. Your organization may have client
    PCs running Windows that are susceptible to viruses, or you could receive a virus
    laden e-mail that you may forward to a customer or business partner.
  prefs: []
  type: TYPE_NORMAL
- en: One of the many options for filtering with Procmail is to remove executable
    attachments from e-mails in order to protect your system from possible virus attacks.
    This will be, at best, a crude operation; at worst, it will remove files that
    do not contain viruses and possibly leave other infected documents such as scripts
    that are not executables.
  prefs: []
  type: TYPE_NORMAL
- en: It is also possible to scan e-mails on the client side. But in a company environment,
    it is not always possible to rely on every individual having their machines up-to-date
    and correctly installed with suitable virus checking software. The obvious solution
    is to run an efficient process on the server to ensure that all e-mail sent or
    received by the organization is correctly scanned for viruses.
  prefs: []
  type: TYPE_NORMAL
- en: There are a number of antivirus solutions available for Linux-based systems.
    We have chosen to focus on Clam AntiVirus, usually known as ClamAV. This is an
    open source software and regularly updates the database of viruses to be checked
    for before download.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will learn about:'
  prefs: []
  type: TYPE_NORMAL
- en: The types of documents which may contain viruses that ClamAV can detect
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installing and configuring the ClamAV components for detecting viruses
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting up procedures to maintain an up-to-date antivirus database
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Integrating ClamAV with Postfix to scan all incoming e-mail messages and attachments
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Extensively testing our installation with sample files containing test virus
    signatures and by using test e-mail bourne viruses
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding each ClamAV component into our system startup and shutdown procedures
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction to ClamAV
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Clam AntiVirus is an open source antivirus toolkit for Linux, Windows, and Mac
    OS X. The main design feature of ClamAV was to integrate it with mail servers
    to perform attachment scanning and help filter out known viruses. The package
    provides a flexible and scalable multithreaded daemon (`clamd`), a command-line
    scanner (`clamscan`), and a tool for automatic updating via the Internet (`freshclam`).
    The programs are based on a shared library, `libclamav`, distributed with the
    Clam AntiVirus package, which you can also use with your own software.
  prefs: []
  type: TYPE_NORMAL
- en: The version of ClamAV we are going to use in this chapter is the latest stable
    version, 0.95.2, that has an up-to-date virus database and signatures to enable
    detection of over 580,000 viruses, worms, and Trojans including Microsoft Office
    macro viruses, mobile malware, and other threats. Although not covered in this
    book, it is also able to perform on-access scanning under Linux with suitable
    installation into the Linux kernel.
  prefs: []
  type: TYPE_NORMAL
- en: Document types supported
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'A wide range of document types can contain or spread viruses and ClamAV provides
    protection from the majority of them:'
  prefs: []
  type: TYPE_NORMAL
- en: '**ELF** (**Executable and Linking Format)** files used by UNIX and UNIX-like
    operating systems such as Linux, Solaris, and OpenBSD.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Portable Executable** (**PE**) files (32/64-bit) compressed with UPX, FSG,
    Petite, WWPack32, and obfuscated with SUE, Yoda''s Cryptor, and others. This is
    the standard format for Microsoft Windows Executables and one of the most common
    transports for viruses.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Many forms of Microsoft documents can contain scripts or executables. The following
    document and archive types can be processed by ClamAV:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: MS OLE2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: MS Cabinet files
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: MS CHM (Compressed HTML)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: MS SZDD
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: MS Office Word and Excel documents
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Support for other special files and formats include:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: HTML
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: RTF
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: PDF
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Files encrypted with CryptFF and ScrEnc
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: uuencode
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: TNEF (winmail.dat)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Other common archive formats that may contain any form of document and that
    ClamAV can process include:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: RAR (2.0)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ZIP
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: gzip
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: bzip2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: tar
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: BinHex
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: SIS (SymbianOS packages)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: AutoIt
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Scanning of archives also includes the scanning of supported document formats
    held within the archives.
  prefs: []
  type: TYPE_NORMAL
- en: Downloading and installing ClamAV
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As viruses are being discovered on an almost daily basis, it is well worth installing
    the latest stable version of ClamAV software. If your system already has ClamAV
    installed, it is possible that the installation may be based on an out of date
    installation package. It is highly recommended that you download and install the
    latest version from the ClamAV website to ensure the highest level of security
    against viruses on your systems.
  prefs: []
  type: TYPE_NORMAL
- en: Adding a new system user and group
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You will have to add a new user and group to your system for the ClamAV system
    to use.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Installing from a package
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: There are a number of installation packages available for ClamAV and details
    can be found on the ClamAV website at [http://www.clamav.net/download/packages/packages-linux.](http://www.clamav.net/download/packages/packages-linux.)
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Due to licensing restrictions, most binary packages don't have a built-in RAR
    support. For this reason, we recommend that you install ClamAV from source until
    any licensing issues are resolved.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you are using a Red Hat-based system, the installation may be performed
    using either of the following options, depending on which distribution you have
    installed:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: or
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'If you are using a Debian-based system, the installation may be performed using
    the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Make sure you are installing version 0.95.2 or higher as there are significant
    enhancements over previous versions. In general, you should always install the
    latest stable version available.
  prefs: []
  type: TYPE_NORMAL
- en: Installing from source code
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Installing ClamAV from the original source code is not very difficult, and enables
    you to run any version you want and not just the version chosen by the package
    maintainer of your Linux distribution. The ClamAV source code can be downloaded
    from a number of mirrors accessible from the main ClamAV website ([http://www.clamav.net/download/sources](http://www.clamav.net/download/sources)).
  prefs: []
  type: TYPE_NORMAL
- en: Requirements
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The following elements are required to compile ClamAV:'
  prefs: []
  type: TYPE_NORMAL
- en: zlib and zlib-devel packages
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: gcc compiler suite
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following packages are optional but highly recommended:'
  prefs: []
  type: TYPE_NORMAL
- en: bzip2 and bzip2-devel library
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: UnRAR package
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Building and installing
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Once you have downloaded and unpacked the archive, `cd` to the directory, example,
    `clamav-0.95.2`. Before starting to build and install the software, it is well
    worthwhile reading through the `INSTALL` and `README` documents.
  prefs: []
  type: TYPE_NORMAL
- en: 'For most Linux systems, the simplest installation method can be reduced by
    following the steps listed here:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Run the `configure` utility to create the right build environment by running
    the `configure` command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: After the configuration script is complete, you can run the `make` command to
    build the software executables.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: The final step, as `root`, is to copy the executables into the correct position
    for operation on the system.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: In the last step, the software is installed into the `/usr/local` directory
    and the config files into `/etc` as specified by the`—sysconfdir` option as shown.
  prefs: []
  type: TYPE_NORMAL
- en: At all stages you should check the processes output for any significant errors
    or warnings.
  prefs: []
  type: TYPE_NORMAL
- en: As with all packages built from the source code, you may wish to delete the
    unpacked archive after completion of the building, installing, and testing steps
    in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Quick test
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'We can verify that the software is correctly installed, by trying the following
    test to scan the example test virus files in source directory recursively:'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The supplied test virus files do not contain real viruses and are harmless.
    They contain an industry agreed virus signature specifically designed for test
    purposes.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'It should find some test files in the `clamav-x.yz/test` directory. The scan
    result will be saved in the `scan.txt` log file. Check the log file, paying particular
    attention to any warnings indicating that support for a particular file or archive
    format has not been compiled in. The tail of the log file should contain a summary
    similar to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Quick test](img/8648_09_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Editing the config files
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: After installation of the software, two configuration files need to be edited.
    The first file, `/etc/clamd.conf`, is for the actual virus scanning software.
    Most of the important configuration options for this file are discussed in the
    following sections. The second configuration file, `/etc/freshclam.conf`, is covered
    later in this chapter. This is where we add the configuration options for the
    automatic virus database updates.
  prefs: []
  type: TYPE_NORMAL
- en: clamd
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You have to edit the configuration file in order to use the daemon, otherwise
    `clamd` won't run.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: This shows the location of the default configuration file. The format and options
    of this file are fully described in the `clamd.conf(5)` manual. The `config` file
    is well commented and configuration should be straightforward.
  prefs: []
  type: TYPE_NORMAL
- en: Examining the sample config file
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The sample `config` file that is provided is very well documented with comments
    at every significant configuration value. Here are some key values that you may
    wish to modify:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: The `Example` line will cause the program to halt with a configuration error
    and is a deliberate inclusion to force you to edit the file before the software
    operates correctly. Placing a `#` at the beginning of the line will be enough
    to resolve this problem after you have finished editing the file.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: It is well worth setting up a log file to enable you to check for errors and
    monitor correct operation over the first few weeks of operation. Thereafter, you
    can decide whether to stop the logging or leave it operational.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Enabling time stamping in the log files ensures that you can track down the
    time of the event being logged to aid in debugging problems and matching events
    to entries in other log files.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Make sure that the database directory is correctly configured so that it is
    known exactly where the virus signature information is being stored. The installation
    process will have created the file `main.cvd`, and possibly `daily.cld`, as the
    database files containing the virus signatures.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Using local mode is an important configuration change and is required to ensure
    the security of the system on which ClamAV is installed.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: This is useful to start and stop scripts. As shown in the previous example,
    the ClamAV directory must be writable.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: This is another security related configuration item to ensure that only local
    processes can gain access to the service.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: This could be a useful feature to consider in some situations. However, with
    the wide range and frequency of virus delivery, this could prove to be a significant
    annoyance to have messages arriving throughout the night or day.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: By creating a user especially for ClamAV, we can assign ownership of files and
    processes to this user ID and help improve security of the files by restricting
    access to only this user ID. Also, when running processes are listed on the system,
    it is easy to identify those owned by the ClamAV system.
  prefs: []
  type: TYPE_NORMAL
- en: freshclam
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You have to edit the configuration file, otherwise `freshclam` won't run.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: A sample `freshclam` configuration file is also included in the source distribution.
    If you need more information about the configuration options and format, you should
    refer to the *freshclam.conf(5)* manual page.
  prefs: []
  type: TYPE_NORMAL
- en: Closest mirrors
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: A number of mirror servers are available on the Internet from which you can
    download the latest antivirus database. To avoid overloading any one server, the
    configuration file should be set up to make sure that the download is being taken
    from the nearest available server. The included `update` utility makes use of
    the DNS system to locate a suitable server based on the country code you are requesting.
  prefs: []
  type: TYPE_NORMAL
- en: The configuration file entry that you need to modify is `DatabaseMirror`. You
    may also specify the parameter `MaxAttempts`—number of times the database is downloaded
    from the server.
  prefs: []
  type: TYPE_NORMAL
- en: The default database mirror is `clamav.database.net`, but you are able to apply
    multiple entries in the configuration file. The configuration entry should be
    made using the format `db.xx.clamav.net`, where `xx` represents your normal two-letter
    ISO country code. For example, if your server is in the United States, you should
    add the following lines to `freshclam.conf`. The full list of two-letters country
    codes is available at [http://www.iana.org/cctld/cctld-whois.htm](http://www.iana.org/cctld/cctld-whois.htm).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: If the connection to the first entry fails for any reason, an attempt will be
    made to download from the second mirror entry. You should not just use the default
    entry, as it may result in your server or IP address being blacklisted by the
    ClamAV database administrators for overloading and you may not able to obtain
    any updates at all.
  prefs: []
  type: TYPE_NORMAL
- en: Examining the sample config file
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The sample `config` file that is provided is very well documented with comments
    at every significant configuration value. Here are some key values that you may
    wish to modify:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: Make sure that this line is commented to allow the daemon to operate.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: Enabling the log file is useful to track the ongoing updates that are being
    applied and to monitor the correct operation of the system during early testing
    stages.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: The previous option enables more detailed error messages to be included in the
    update log file.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: This is an important configuration to reduce network traffic overheads and ensure
    that you are obtaining updates from a geographically close server.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: As the instruction says—leave this line alone.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: For busy servers with lots of traffic, it is worthwhile to update the virus
    database at a more frequent interval. However, this is recommended only for systems
    running version 0.8 or higher of the ClamAV software.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: To aid monitoring of the updates to configuration files, the options you have
    just seen are available to apply suitable actions if updates do or do not occur
    correctly.
  prefs: []
  type: TYPE_NORMAL
- en: File permissions
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Following the previous recommendation, `clamd` will be run as the `clamav`
    user and by default, when started, `freshclam` drops privileges and switches to
    the `clamav` user. Therefore, ownership of the socket, PID, and log files specified
    in the configuration files seen in the previous example should be set up using
    the following commands to allow correct access:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: The user under which `freshclam` and `clamd` run can be changed in `freshclam.conf`
    and `clamd.conf`. However, you should verify that the ClamAV processes have access
    to the virus definition database if you change these parameters.
  prefs: []
  type: TYPE_NORMAL
- en: Post installation testing
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that we have the main components of ClamAV installed, we can verify the
    correct operation of each component.
  prefs: []
  type: TYPE_NORMAL
- en: '`clamscan`—the command line scanner'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`clamd`—the ClamAV daemon'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`freshclam`—virus definitions updater'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For these tests, we are going to need a virus or at least a non-destructive
    file that looks like a virus.
  prefs: []
  type: TYPE_NORMAL
- en: EICAR test virus
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A number of antivirus researchers have already worked together to produce a
    file that their (and many other) products detect as if it were a virus. Agreeing
    on one file for such purposes simplifies matters for users.
  prefs: []
  type: TYPE_NORMAL
- en: This test file is known as the **EICAR** (**Europeanx Institute for Computer
    Anti-virus Research) standard antivirus test file**. The file itself is not a
    virus, it does not contain any program code at all, and is therefore safe to pass
    on to other people. However, most antivirus products will react to the file as
    though it really is a virus, which can make it a rather tricky file to manipulate
    or send via e-mail if you or the recipient has good virus protection systems in
    place.
  prefs: []
  type: TYPE_NORMAL
- en: 'The file is a text file consisting entirely of printable ASCII characters so
    that it can easily be created with a regular text editor. Any antivirus product
    that supports the EICAR test file should detect it in any file that starts with
    the following 68 characters:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: When you are creating this file, you should take note of the following facts.
    The file uses only upper case letters, digits, and punctuation marks, and does
    not include spaces. There are a couple of common mistakes that can be made when
    recreating this file. These include ensuring that the third character is the capital
    letter `O`, not the digit zero (0), and that all 68 characters are one line, which
    must be the very first line in the file.
  prefs: []
  type: TYPE_NORMAL
- en: For more information on the EICAR antivirus test file, visit [http://www.eicar.org/anti_virus_test_file.htm](http://www.eicar.org/anti_virus_test_file.htm).
  prefs: []
  type: TYPE_NORMAL
- en: Testing clamscan
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The first test we need to run is to make sure that the virus scanner is installed
    and that the virus definitions database is configured and included correctly.
    A virus database is supplied as part of the installation process.
  prefs: []
  type: TYPE_NORMAL
- en: 'The simplest way to do this is to create a copy of the EICAR test file on your
    server and then run the `clamscan` program. We are using the`—i` flag so that
    only infected files will be shown. You should get output like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Testing clamscan](img/8648_09_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Note the warning about an out-of-date virus database. This is normal and will
    be rectified during `freshclam` testing.
  prefs: []
  type: TYPE_NORMAL
- en: Testing clamd
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: By using the `clamdscan` program, we can again scan the test file, but do this
    by instructing the `clamd` process to do the scanning. This is an excellent test
    to make sure that the `clamd` daemon process is running.
  prefs: []
  type: TYPE_NORMAL
- en: 'The expected output should look something like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: If the clamd daemon is not running it can be started using the `# clamd` command.
  prefs: []
  type: TYPE_NORMAL
- en: You should also check the `clamd` log file, as configured in `clamd.conf`, for
    any unexpected errors or warnings after running this test.
  prefs: []
  type: TYPE_NORMAL
- en: Testing freshclam
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Using the `freshclam` program interactively we can update the virus database
    with the latest definitions. This test will update the database only once. We
    shall see later how to perform automatic updates. Using the following command
    (as superuser) we would expect output similar to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Testing freshclam](img/8648_09_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: From the output, we can see that the update process downloaded two differential
    updates successfully and failed with a network problem on the third. Downloading
    the differences between the latest and current database helps to reduce network
    traffic and server load. In this case `freshclam` detected the failure and downloaded
    the latest daily update to bring the virus database up-to-date with an increased
    number of virus signatures.
  prefs: []
  type: TYPE_NORMAL
- en: Now if you run the `clamscan` test again, you will notice that the out-of-date
    warning is no longer displayed.
  prefs: []
  type: TYPE_NORMAL
- en: You should also check that the `freshclam` log file contains output similar
    to the previous code after running this test.
  prefs: []
  type: TYPE_NORMAL
- en: Introduction to ClamSMTP
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In order to scan all e-mail passing through the server, a software interface
    is required between Postfix and ClamAV. The interface we are going to use is **ClamSMTP**.
    The following introduction from the ClamSMTP site ([http://memberwebs.com/stef/software/clamsmtp/](http://memberwebs.com/stef/software/clamsmtp/))
    describes the SMTP virus filter as:'
  prefs: []
  type: TYPE_NORMAL
- en: ClamSMTP is an SMTP filter that allows you to check for viruses using the ClamAV
    antivirus software. It accepts SMTP connections and forwards the SMTP commands
    and responses to another SMTP server. The 'DATA' email body is intercepted and
    scanned before forwarding. ClamSMTP aims to be lightweight, reliable, and simple
    rather than have a myriad of options. It's written in C without major dependencies.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Postfix is designed to allow external filters to be called to process mail messages
    and to return the processed data back to Postfix for onward delivery. ClamSMTP
    has been designed to work directly between Postfix and ClamAV to ensure efficient
    operation.
  prefs: []
  type: TYPE_NORMAL
- en: Some Linux distributions may have maintained packages for ClamSMTP, which can
    be installed via the relevant package manager. However, you should still complete
    the instructions that follow to configure and integrate ClamSMTP into Postfix.
  prefs: []
  type: TYPE_NORMAL
- en: The latest source code may be downloaded from [http://memberwebs.com/stef/software/clamsmtp/](http://memberwebs.com/stef/software/clamsmtp/),
    directly onto your Linux system using the `wget` command. Change to a suitable
    location to download and build the software. The command option for the current
    version (1.10) would be `wget <url>`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: You should check the website for the latest version that you can download. After
    you have downloaded the file, unpack the contents of the file using the `tar`
    command.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: This will create a directory structure with all the relevant files contained
    below the current directory.
  prefs: []
  type: TYPE_NORMAL
- en: Building and installing
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Before building and installing the software, it is well worthwhile reading through
    the `INSTALL` and `README` documents.
  prefs: []
  type: TYPE_NORMAL
- en: 'For most Linux systems, the simplest installation method is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Run the `configure` utility to create the right build environment by running
    the `configure` command.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: 'After the configuration script is complete, you can run the `make` command
    to build the software executables:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: 'The final step, as `root`, is to copy the executables into the correct position
    for operation on the system:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: In the last step, the software is installed into the `/usr/local` directory
    and the config files into `/etc`.
  prefs: []
  type: TYPE_NORMAL
- en: At all stages, you should check the processes output for any significant errors
    or warnings.
  prefs: []
  type: TYPE_NORMAL
- en: Configuring into Postfix
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Postfix provides support for mail filtering by passing mail items through external
    processes. This operation can be performed either before or after the mail has
    been queued. The way communication between Postfix and `clamsmtp` works is by
    pretending that `clamsmtp` is itself an SMTP server. This simple approach provides
    an easy way to create a distributed architecture whereby different processes could
    be working on different machines to spread the load in very busy networks. For
    our use, we will assume that we are using only one machine with all software running
    on that machine.
  prefs: []
  type: TYPE_NORMAL
- en: The `clamsmtp` filter interface was designed specifically to provide an interface
    between ClamAV and the Postfix mail system. The filter is implemented as an after-queue
    filter for antivirus scanning.
  prefs: []
  type: TYPE_NORMAL
- en: 'The first configuration option requires adding lines to the Postfix `main.cf`
    file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: The `content_filter` instruction forces Postfix to send all mail through the
    service named `scan` on port `10025`. The scan service will be the one that we
    set up using `clamsmtpd`. The instruction for `receive_override_options` configures
    Postfix to perform `no_address_mappings`. This prevents Postfix from expanding
    any e-mail aliases or groups, which otherwise would have resulted in duplicate
    e-mails being received.
  prefs: []
  type: TYPE_NORMAL
- en: The second configuration change needs to be made to the Postfix `master.cf`
    file.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The formatting of the files is very important. You should ensure that there
    are no spaces around the `=` (equal) sign or`, (commas) in the text you added.`
  prefs: []
  type: TYPE_NORMAL
- en: '`The first two lines, do the actual creation of the `scan` service. The remaining
    lines set up a service for accepting mail back into Postfix for delivery. The
    rest of the options are there to prevent a mail loop occurring and to relax address
    checking. When these changes have been made, you need to get Postfix to reread
    the modified configuration files by using the following command:`'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: '`Configuring clamSMTP`'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '`You have to create the configuration file, `/etc/clamsmtpd.conf`, otherwise
    `clamsmtpd` won''t run:`'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: '`A sample `clamsmtp.conf` configuration file is included in the source distribution
    `doc` directory. This needs to be copied to the correct location and edited before
    the `clamsmtp` software will operate correctly.`'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: '`The format and options of this file are fully described in the `clamsmtpd.conf(5)`
    manual.`'
  prefs: []
  type: TYPE_NORMAL
- en: '`Examining the sample config file`'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '`The sample **config**file that is provided is very well documented with comments
    for each significant configuration value. Here are some key values that you may
    wish to modify.`'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: '`As we are using just one machine in this configuration, we should specify
    the `OutAddress` option as `127.0.0.1:10026` to match the option specified in
    `master.cf`.`'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: '`This address matches the option specified in `main.cf`.`'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: '`This should match the `LocalSocket` option in the `clamd.conf` file.`'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: '`Throw away the message.`'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: '`It is important to make sure that the processes are run as the same user as
    you use to run `clamd` or you may find that each process has problems accessing
    the other''s temporary files.`'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: '`We are now ready to perform the start up of the `clamsmtpd` process. You should
    start this as `root` and verify that the process is present and running with the
    user id of `clamav`.`'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: '`If you have problems starting the service, make sure that the `clamd` (the
    ClamAV daemon) is running, and that it is listening on the socket you specified.
    You can set this in `clamd.conf` using the `LocalSocket` or `TCPSocket` directives
    (be sure that you only uncomment one of those lines). You should also make sure
    that the `ScanMail` directive is set to `on`.`'
  prefs: []
  type: TYPE_NORMAL
- en: '`# Testing e-mail filtering'
  prefs: []
  type: TYPE_NORMAL
- en: Viruses, by definition, are things that we would prefer to avoid having any
    contact with at all. But in order to be certain that our filtering and detection
    processes are working correctly and that we are fully protected, we need to have
    access to a virus for testing purposes. Using real viruses for testing in the
    real world in a production ready environment is rather like setting fire to the
    trash can in your office to see whether the smoke detector is working. Such a
    test will give meaningful results, but with unappealing risks and unacceptable
    side effects. Therefore, we need our EICAR test file that can safely be mailed
    around and which is obviously non-viral, but which your antivirus software will
    react to as if it were a virus.
  prefs: []
  type: TYPE_NORMAL
- en: Testing mail-borne virus filtering
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The first test is to check that you can still receive mail.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: 'You should receive your mail with the addition of the following line in the
    header:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: If you did not receive the mail, check the system, postfix, and clamd log files.
    If necessary, you can also stop and restart the `clamsmtpd` daemon with the `-d
    4` option for extra debugging output.
  prefs: []
  type: TYPE_NORMAL
- en: The second simple test of scanning for mail-borne viruses can be performed by
    simply sending yourself a copy of the EICAR virus as an e-mail attachment.
  prefs: []
  type: TYPE_NORMAL
- en: The sample EICAR virus file must be created as an attachment to an e-mail. The
    following command chain from the Linux command prompt will send a very simple
    uuencoded attachment copy of the virus-infected file.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: 'If everything is working and configured correctly, you should not receive the
    mail, as `clamsmtp` was instructed to drop the message. The absence of the message
    does not prove everything is working, so check the system or postfix log files
    for an entry similar to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: This proves the simple case of detecting a straightforward attachment containing
    a virus.
  prefs: []
  type: TYPE_NORMAL
- en: Of course, in the real world, viruses are slightly more clever than your average
    e-mail attachment. Thorough testing is required to be sure that the filtering
    is set up correctly. Luckily, there is a website ([http://www.gfi.com/emailsecuritytest/](http://www.gfi.com/emailsecuritytest/))
    available to send e-mails to you that contain the EICAR virus encoded within e-mails
    in a wide range of ways. Currently it supports 17 individual tests.
  prefs: []
  type: TYPE_NORMAL
- en: Thorough e-mail-borne testing
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The site [http://www.gfi.com/emailsecuritytest/](http://www.gfi.com/emailsecuritytest/)
    requires you to register the e-mail address you wish to test and sends a confirmation
    e-mail to that address. In this e-mail is a link to follow that confirms that
    you are the valid user in control of that e-mail address. You are then able to
    send any or all of the 17 virus and e-mail client exploit tests to this e-mail
    address. If any of the virus bearing e-mails end up unfiltered in your inbox,
    then the installation has failed.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: However, there are some test messages on the site that are not strictly viruses
    and so are not detected by the ClamAV process. This is because the messages do
    not themselves contain viruses and so there is nothing to find and therefore,
    nothing to stop.
  prefs: []
  type: TYPE_NORMAL
- en: By definition, ClamAV traps only malicious code. The gfi ([http://www.gfi.com/emailsecuritytest/](http://www.gfi.com/emailsecuritytest/))
    site sends this type of test messages. The nature of these messages is that they
    have some malformed MIME tags that can fool Outlook clients. It is not the job
    of an antivirus program to detect such messages.
  prefs: []
  type: TYPE_NORMAL
- en: Automating update of virus data
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: ClamAV is provided by volunteers, and the servers and bandwidth that are used
    to enable the software and virus database to be distributed are voluntarily funded.
    As such, it is important to ensure that there is a balance between the frequency
    of checking for updates to maintain an up-to-date database and overloading the
    various servers.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The ClamAV group recommends the following: If you are running ClamAV 0.8x or
    higher, you can check for database updates as often as four times per hour provided
    you have the following option in `freshclam.conf: DNSDatabaseInfo current.cvd.clamav.net`.'
  prefs: []
  type: TYPE_NORMAL
- en: If you don't have that option, you must stick with one check per hour.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up auto updating
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The virus database files for ClamAV can be downloaded from the ClamAV servers
    in a variety of ways. This includes using automated or manual tools such as `wget`.
    However, this is not the preferred way of doing the updates.
  prefs: []
  type: TYPE_NORMAL
- en: The `freshclam` utility we installed earlier with ClamAV is the preferred method
    to perform updates. It will download the latest antivirus database automatically
    on a regular basis. It can either be set up to work automatically from a `cron`
    entry or from the command line, or it can run as a daemon process and handle its
    own scheduling. When `freshclam` is started by a user with root privileges, it
    drops the special privileges and switches user ID to the `clamav` user.
  prefs: []
  type: TYPE_NORMAL
- en: '`freshclam` uses the capabilities of the DNS system to obtain details of the
    latest version of virus database that is ready to be downloaded and where it can
    be obtained from. This can significantly reduce the load on your own as well as
    remote systems, as in most cases the only action performed is a check with the
    DNS server. Only if a newer version is available, it will attempt to perform a
    download.'
  prefs: []
  type: TYPE_NORMAL
- en: 'We are now ready to start the `freshclam` process. If you have decided to run
    it as a daemon process, then simply execute the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: Then check that the process is running and that the log file is being updated
    correctly.
  prefs: []
  type: TYPE_NORMAL
- en: 'The other method available is to use the `cron` daemon to schedule the `freshclam`
    process to run at a regular period. To do this, you will need to add the following
    entry to the `crontab` file for either the `root` or the `clamav` user:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '`N` can be any number of your choice between `1` and `59`. Please don''t choose
    any multiple of 10, because there are already too many servers using those time
    slots.'
  prefs: []
  type: TYPE_NORMAL
- en: Proxy settings are only configurable via the configuration file, and `freshclam`
    will require strict read-only permissions for the owner of the config file when
    `HTTPProxyPassword` is enabled. For example,
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: 'The following is an example of proxy settings:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: Automating startup and shutdown
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If you installed any or all of the ClamAV and ClamSMTP components via a package
    manager rather than from source, the necessary startup scripts may have been provided.
    Check to see if the necessary scripts have been included in the boot startup sequence.
  prefs: []
  type: TYPE_NORMAL
- en: If you have installed ClamAV from the source code, the following scripts are
    examples for starting and stopping the necessary daemons at boot time. Depending
    on your distribution, the file locations may vary and you may need to execute
    additional commands to set run levels for each script. Please consult your distributions
    documentation.
  prefs: []
  type: TYPE_NORMAL
- en: ClamSMTP
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'One of the contributed scripts that are available in the ClamSMTP sources is
    a script to be used for automatically starting and stopping the operating daemon
    when the system is booted. Check that the path names in the script match those
    in the config file and the installed directory, and then execute the following
    command from the root of the ClamSMTP source tree:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs: []
  type: TYPE_PRE
- en: After copying the file, make sure that the script has execute permissions and
    is not modifiable by anyone other than the system root user.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs: []
  type: TYPE_PRE
- en: Add the script to the system startup.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs: []
  type: TYPE_PRE
- en: ClamAV
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Next is an example script to start and stop the `clamd` and `freshclamd` daemons
    at boot time. As before, verify the path names, adapt the script to your needs,
    and copy the script to the system initialization directory before adding it to
    the system startup.
  prefs: []
  type: TYPE_NORMAL
- en: If `freshclam` is run as a `cron` job, rather than as a daemon, then remove
    the lines that start and stop the `freshclam` process from the script.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs: []
  type: TYPE_PRE
- en: Monitoring log files
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: It is important to monitor the log file on a regular basis. Here you will be
    able to track the regular updating of the virus database and make sure that your
    system is as well protected as possible.
  prefs: []
  type: TYPE_NORMAL
- en: 'Regular update messages should appear similar to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Monitoring log files](img/8648_09_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Occasionally new software will be released and will need to be updated. In
    this case, you will get warning messages in the log file, such as the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Monitoring log files](img/8648_09_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: In cases when there are Internet connection problems or the remote files themselves
    are unavailable while being updated, the process may log transient error messages.
    No action needs to be taken provided that these errors do not persist.
  prefs: []
  type: TYPE_NORMAL
- en: Disinfecting files
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A common request is for files to be disinfected automatically before being forwarded
    on to the final recipient. In the current version (0.95), ClamAV cannot disinfect
    files. The following information is available from the ClamAV documentation.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will add support for disinfecting OLE2 files in one of the next stable releases.
    There are no plans for disinfecting other types of files. There are many reasons
    for it: cleaning viruses from files is virtually pointless these days. It is very
    seldom that there is anything useful left after cleaning, and even if there is,
    would you trust it?'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We have now installed and configured a very efficient antivirus system for checking
    all incoming e-mails for infected attachments, and have significantly secured
    our systems—both the server and the workstation—against attack.
  prefs: []
  type: TYPE_NORMAL
- en: Our Mail Transport Agent, Postfix, can now filter all messages using the ClamAV
    daemon via the ClamSMTP content filtering interface, to scan and detect a wide
    range of threats against a database of virus signatures. Using `freshclam`, we
    have ensured that our detection database has been kept up-to-date to guard against
    the latest threats and any new viruses released. Constant vigilance is still required
    to make sure that software and files are always kept totally up-to-date in this
    ongoing battle.`
  prefs: []
  type: TYPE_NORMAL
