- en: Authentication with Firebase
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous chapter, we learned about how we can integrate Firebase with
    ReactJS and how we can create a component in JSX. We also saw how we can interact
    with DOM elements to get the `onSubmit` form values and send them to the Firebase
    database to store and sync the form data in the cloud. React uses a fast, internal,
    synthetic DOM to perform to diffs and compute the most efficient DOM mutation
    for you where your component actively lives.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we'll create a `login` component with React and JSX to secure
    our helpdesk application with the Firebase authentication feature that allows
    only authorized users to view and add a new ticket.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here''s a list of the points that we''ll focus on this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: React and Firebase setup with Node.js
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Composite component with React and JSX
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Firebase Authentication Configuration
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Custom Authentication
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Third-Party Authentication with Facebook and Google
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: React and Firebase setup with Node.Js
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Earlier, we created a React application with plain JavaScript; now we need
    to do the same with React and Firebase setup with using node. For this, we must
    have Node.js and `npm` installed in our system; if not, first download the Node.js
    from [https://nodejs.org/en/download/](https://nodejs.org/en/download/). Once
    you are done with the installation, run the following command to ensure that node
    and `npm` are installed properly:'
  prefs: []
  type: TYPE_NORMAL
- en: 'For node, use this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'For `npm`, use the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'The output of the command should be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/c9177530-5920-4bb6-a7c5-c0db7e000ac3.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now we need to install the `create-react-app` module, which provides the initial
    and default setup, and gives us a quick start to the React app. Run the following
    command in your CMD, and it will install the `create-react-app` module globally (that
    is, with `-g` or `--global` appended to the command):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Once the installation is done, run the next command in your local directory
    where we need to create a project; that will generate the quick start project
    for React with no build configuration:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'This is how our folder structure looks after the installation is done:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/14f5b27a-0d25-48c3-bced-3c36f661653d.png)'
  prefs: []
  type: TYPE_IMG
- en: Here, we are done with the setup of React; now, we install the `firebase npm`
    package and integrate our existing application.
  prefs: []
  type: TYPE_NORMAL
- en: 'Run the following command to install the `firebase npm` package:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: After installing firebase, create a folder called firebase inside the `src`
    folder.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the `src` folder, create a file called `firebase-config.js`, which will
    host the configuration details of our project:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Similarly, we need to integrate our existing component view ticket and `addTicket`
    in the node using the import and export keywords, and using the `npm` command,
    we need to install React and firebase modules and their dependencies.
  prefs: []
  type: TYPE_NORMAL
- en: 'This how your `package.json` should look like:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Also, this is how the application folder structure looks after integrating
    the existing application:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/fca7a632-68f0-47ec-b404-0be0a1903c43.png)'
  prefs: []
  type: TYPE_IMG
- en: Firebase configuration for authentication
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Firebase Authentication is a very impressive feature for granting read/write
    access to your users via security rules. We haven't covered or added security
    rules in our helpdesk application. Firebase gives us the ability to authenticate
    with its own email/password and OAuth 2 integrations for Google, Facebook, Twitter,
    and GitHub. We'll also integrate our own auth system with Firebase to give access
    to the helpdesk application and allow the user to create an account on our systems.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s take a look at the list of firebase providers for authentication and
    perform the following steps to enable Firebase authentication for our application:'
  prefs: []
  type: TYPE_NORMAL
- en: Open [http://firebase.google.com](http://firebase.google.com) and log in with
    your credentials
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Click on the Authentication option inside the DEVELOP tab on the left section:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](Images/36b9e9a4-e023-43e0-97f8-e40802f235a0.png)'
  prefs: []
  type: TYPE_IMG
- en: 'In the preceding screenshot, if you can see, we have four tabs that are available
    in the authentication section, and we have enabled the provider''s authentication
    with the custom Email/Password option, which we can add to the user''s tab and
    Google authentication:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Users: Here, we can manage and add multiple users'' email IDs and passwords
    to authenticate with a variety of providers without writing any server-side code.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Sign-in Method: In this section, we can see the list of providers that are
    available in firebase. We can also manage the authorized domain, preventing the
    user from using the same email address and sign-in quota.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Templates: This feature allows us to customize the email templates sent by
    firebase when users sign up with email and password. We can also customize the
    template for Password reset, Email address change, and SMS verification.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'In this chapter, we''ll cover these three authentications:'
  prefs: []
  type: TYPE_NORMAL
- en: Facebook
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Google
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Email/password
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Authentication with Facebook
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To add a Facebook authentication to our helpdesk application, you need to create
    an account with Facebook if you don''t already have it. Otherwise, we need to
    log in to the Facebook developer forum at [https://developers.facebook.com/apps](https://developers.facebook.com/apps).
    Once we have logged in, it shows the list of apps and an Add a New App button
    to create a new app ID for authentication. Take a look at this for reference:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/cd96aa89-2743-46cb-b29b-68d3b7c1474f.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Click on the Add a New App button; it shows the popup to add the name of the
    application. Then, click on Create App Id that will redirect you to the dashboard
    of our application:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/6176e422-b29a-428d-be05-13d79bf80418.png)This is a screenshot of
    Facebook developer application dashboard. The Purpose of the image is just to
    show the list of APIs or Products provided by Facebook to integrate with any web
    application.'
  prefs: []
  type: TYPE_NORMAL
- en: 'For now, we need to select Facebook Login to set up:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/621e6610-baf7-496c-8307-ec7377a94f9a.png)'
  prefs: []
  type: TYPE_IMG
- en: If you can see the preceding screenshot, we need to set up for client OAuth.
    For this, we first need to enable the Embedded Browser OAuth Login feature to
    control the redirect for the OAuth login, and then copy the valid OAuth redirect
    URLs, which we can get when we enable the Facebook provider in Firebase.
  prefs: []
  type: TYPE_NORMAL
- en: 'To enable Facebook authentication in to the Firebase, we need to copy the **App
    ID** and **App Secret** from the Facebook app dashboard:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/46baa329-f0cf-4c14-a87a-e0e7a78d8b24.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Then, put those copied values in firebase input fields, copy the redirect URI,
    and paste it to Client OAuth Settings. Also, enable the facebook authentication
    and then click on the SAVE button, as illustrated here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/9d6bcc9f-bde3-4c45-9f71-cc4840a94f9b.png)'
  prefs: []
  type: TYPE_IMG
- en: This is the last thing we need to do in the Facebook developer forum and firebase
    for Facebook authentication.
  prefs: []
  type: TYPE_NORMAL
- en: 'Click on SAVE, and note that the status of provider is enabled now:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/a92cc442-34ba-4446-9ea7-6ffe92b50130.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now, click on the Database on the left-hand side of the section, and go to
    the RULES panel; it should look something like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/cf946010-0267-4b9d-9295-59470d4f2885.png)The purpose of the image
    is to show the list of tabs under the Realtime Database section and under the
    Rules tab. Here, we can add the security rules for our database to secure our
    data and with the help of SIMULATOR we can verify whether it''s working as expected
    or not.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Earlier in our application, everyone had the rights to our application and
    the database to read and write data. Now, we will change the preceding rule configuration
    so that only authorized users can access the application and write data to our
    database. Take a look at the given code and publish the changes:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Creating a login form with React for authentication
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As we have done with the authentication configuration for Firebase and Facebook
    and enabled the features for other providers, now we'll create a login form in
    react to secure the application that always validates whether the user logged
    in or not; it will redirect the user to the login page. So let's create a login
    page and also configure the React routing to redirect he user based on the path
    URL.
  prefs: []
  type: TYPE_NORMAL
- en: 'Open `firebase-config.js` from the firebase folder and export the following
    objects with different providers so that we can access those objects across the
    application:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding code, `new firebase.auth.GoogleAuthProvider()` will provide
    us with the way to authenticate the user to Google API.
  prefs: []
  type: TYPE_NORMAL
- en: Similarly, new `firebase.auth.FacebookAuthProvider()` will provide us with the
    way to authenticate the user with Facebook API.
  prefs: []
  type: TYPE_NORMAL
- en: 'Open `app.js` and add the following code into constructor to initialize the
    state of the application:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Here, we set the default value of authenticated to be false, because it's the
    initial state of the application and the user has not yet authenticated with Firebase;
    the default value of data is empty on the initial state of the component. We will
    change those states as the user logs in.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, let''s create the `Login` component in `login.js` and set the initial
    state of that component in `constructor()`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'We have set the default value of redirect `false` on the initial state, but
    that will change whenever a user logs in and out:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: In the `render` method, we will check the state and redirect the user to a different
    route `<Redirect>`. It will override the current route in the history stack, like
    server-side redirects (HTTP 3xx) do.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here''s a list of attributes that we can use with the `Redirect` component:'
  prefs: []
  type: TYPE_NORMAL
- en: '`to:String`: A redirect URL that we have also used.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`to:Object`: A location URL with parameters and other configs, such as state.
    Consider this example:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: '`: bool`: When it''s true, redirecting will push a new entry onto the history
    instead of replacing the current one.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`from: string`: A URL to redirect from the old URL. This can only be used to
    match a location inside of a `<Switch>`. Consider this example:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: All the preceding `<Redirect>` features are only available in React Router V4.
  prefs: []
  type: TYPE_NORMAL
- en: 'We have added the JSX for our login form and bound the methods and ref attribute
    to access the form values. We have also added the buttons for Facebook and Google
    authentication. Just look at the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'In `app.js`, we have configured a router like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding code, we are using React Router version 4, which is a fully
    rewritten router for react package. In the previous version of React router, they
    have used a very difficult configuration, which will be difficult to understand,
    and also, we need to create a separate component to manage the layout. In Router
    V4, everything works as a component.
  prefs: []
  type: TYPE_NORMAL
- en: In React router V4, we need to import from react-router-dom, not from react-router,
    as we do in V3\. The `<Router>` component and all other subcomponents get rendered
    if the route path matches.
  prefs: []
  type: TYPE_NORMAL
- en: Using the `<React.Fragment>` tag, we can wrap any JSX component without adding
    another node into the DOM.
  prefs: []
  type: TYPE_NORMAL
- en: In V4 react router, there is no more `<IndexRoute>`; using `<Route exact>` will
    do the same thing.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now we''ll change the header component where we have navigation and add the
    link to login and logout:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'It''s necessary to use this if we are working with the React router. Let''s
    add `<link>` in our navigation instead of the `<a>` tag and replace the `href`
    attribute with `to`. In V4, we can also use `<NavLink>`; it works the same as
    `<Link>`, but gives us the way to add extra styling. Look at this code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: Based on the authentication, we'll update the navigation with login and a logout
    link.
  prefs: []
  type: TYPE_NORMAL
- en: 'Start the server again by running the following command in Command Prompt:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'Once your server is started, open the browser and take a quick look:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/f45b9ea6-6056-4209-9ebf-d5e7fed704ba.png)'
  prefs: []
  type: TYPE_IMG
- en: 'If you just take a look at the preceding screen excerpt and note the address
    bar, I have tried to open another URL to view the tickets, but it''s not showing
    anything except header login link; so now, if we click on Login, it will render
    the login form. Refer to the following screenshot; it should look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/b8432ea6-e507-4764-bbca-61c82fcc3060.png)'
  prefs: []
  type: TYPE_IMG
- en: It's amazing that our login form looks great, as expected.
  prefs: []
  type: TYPE_NORMAL
- en: For more information about react router, you can go through [https://reacttraining.com/react-router/web/api](https://reacttraining.com/react-router/web/api).
  prefs: []
  type: TYPE_NORMAL
- en: Authentication with Facebook
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `onClick` of each of these buttons will point to three functions that will
    authenticate the user. The Facebook authentication method, which will handle our
    authentication with Firebase, will look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: Here, we call the `signInWithPopup()` method from the firebase `auth` module
    and pass the facebook provider.
  prefs: []
  type: TYPE_NORMAL
- en: To display the error messages on UI, we are using React Toaster module and passing
    those messages into it (don't forget to install and import the React Toaster module
    before using it). We also need to bind `authWithFacebook()` methods into the constructor.`npm
    install --save react-toastr-basic`
  prefs: []
  type: TYPE_NORMAL
- en: '`// In app.js import the container`'
  prefs: []
  type: TYPE_NORMAL
- en: '`import ToastrContainer from ''react-toastr-basic'';`'
  prefs: []
  type: TYPE_NORMAL
- en: '`//Inside the render method`'
  prefs: []
  type: TYPE_NORMAL
- en: '`<ToastrContainer />`'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, when we click on the Login with Facebook button, it will open a popup
    that gives us the option to sign in with a Facebook account, as shown:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/f88be669-622c-4468-838c-7dd194946679.png)'
  prefs: []
  type: TYPE_IMG
- en: '`signInWithPopup()` has a promise API that allows us to call `.then()` on it
    and pass in a callback. This callback will be provided with a result object that
    contains, among other things, an object called `user` that has all the information
    about the user who has just successfully signed in—including their name, email,
    and user photo URL. We will store this object inside of the state using `setState()`
    and display the name, email, and photo of the user on UI:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/c4e5d1f7-b041-4aa4-886e-6efcd4205989.png)'
  prefs: []
  type: TYPE_IMG
- en: Authentication with Google
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In the same way, we can configure Google authentication in our application;
    just add the following code into the `authWithGoogle()` method, and it will open
    the popup for login with Google:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'As you can see, I have added the additional OAuth 2.0 scopes that we want to
    request from the auth provider. To add a scope, call add the scope. We can also
    define the language code with `firebase.auth().languageCode = ''pt''`;. If we
    want to send a specific custom parameter with the request, we can call the `setCustomParamter()`
    method. Consider this example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'So, once you click on the Login with Google button, it will trigger the popup
    to authenticate with Google:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/6f3179e5-4f9f-4951-b3af-5182f374eeee.png)'
  prefs: []
  type: TYPE_IMG
- en: 'So if you are already logged in and try to log in with the same email ID with
    different providers, it throws errors, as illustrated:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/a2cae460-9223-4599-86d8-64cb7b80c31e.png)'
  prefs: []
  type: TYPE_IMG
- en: Okay, so now let's see how we can handle these types of errors.
  prefs: []
  type: TYPE_NORMAL
- en: Handling account exists errors
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Consider that we have enabled the One account per email address option in firebase
    settings. As you can see in the preceding screenshot when we tried to log in with
    the provider (Google) with an email that already exists in firebase with a different
    provider (such as Facebook), it throws the mentioned error—`auth/account-exists-with-different-credential`—which
    we can see in the preceding screenshot. To handle this error and complete the
    sign into the selected provider, the user has to sign in first to the existing
    provider (Facebook) and then link to the former AuthCredential (with Google ID
    token). After rewriting the `authWithFacebook()` method, this is how our code
    looks:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: To know more about the list of error codes, visit [https://firebase.google.com/docs/reference/js/firebase.auth.Auth#signInWithPopup](https://firebase.google.com/docs/reference/js/firebase.auth.Auth#signInWithPopup).
  prefs: []
  type: TYPE_NORMAL
- en: Managing the Login across Refresh
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As of right now, every time we refresh the page, our application forgets that
    the user was already logged in. However, Firebase has an event listener—`onAuthStateChange()`—that
    can actually check every single time the application loads to see whether the
    authentication state is changed or not, whether the user was already signed in
    the last time they visited the app. If it's true, then you can automatically sign
    them back in.
  prefs: []
  type: TYPE_NORMAL
- en: 'We''ll write this method inside our `componentDidMount()` in `app.js`. Just
    look at the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'Also, in `componentWillUnmount()`, we will remove that listener to avoid memory
    leaks:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: Now if you refresh the browser, it will not affect the state of the application;
    it remains the same if you already logged in.
  prefs: []
  type: TYPE_NORMAL
- en: 'After logging in with Facebook API or any other, we need to display user information
    in the UI. For this, if you look at that the router component again, we are sending
    this user information into the `Home` component with `userInfo` props:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'In the `Home` component''s render method, we''ll iterate the `userInfo` props
    that hold the user data who successfully logged in to the system:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'In the `Logout()` method, we will simply call the `signOut()` method from firebase
    auth; by using the Promise API, we remove the user data from our application''s
    state. With `this.state.data` now equal to null, the user will see the login link
    instead of the Logout button. It should look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: Authentication with email and password
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In Firebase, we can also integrate your own auth systems with Firebase Authentication
    to give users access to data without forcing them to create an account using third-party
    APIs of your existing systems. Firebase also allows for anonymous auth sessions,
    which are typically used to save small amounts of data while waiting for a client
    to authenticate with a permanent `auth` method. We can configure this anonymous
    session with last days, weeks, months, or even years until the user logs in with
    a permanent `login` method or clears their browser cache. For example, a shopping
    cart application can create an anonymous auth session for every user who adds
    something to their cart while doing a shopping. The shopping cart app will prompt
    the user to create an account for checkout; at that point, the cart will be persisted
    to the new user's account, and the anonymous session will be destroyed.
  prefs: []
  type: TYPE_NORMAL
- en: Supported types of Auth state persistence
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We can use one of the three types of the persistence that are available in
    firebase on specified Firebase Authentication `instance(.auth())` based on your
    application or user''s requirements:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Auth instance** | **Value** | **Description** |'
  prefs: []
  type: TYPE_TB
- en: '| `firebase.auth.Auth.Persistence.LOCAL` | ''local'' | It Indicates that the
    state will be persisted even if we closed the browser window or the activity is
    destroyed in React Native. For this, explicit sign out is needed to clear that
    state. |'
  prefs: []
  type: TYPE_TB
- en: '| `firebase.auth.Auth.Persistence.SESSION` | ''session'' | In this scenario,
    the state will persist only to the current session or tab and will be cleared
    when the tab or window is closed in which the user has authenticated. |'
  prefs: []
  type: TYPE_TB
- en: '| `firebase.auth.Auth.Persistence.NONE` | ''none'' | When we specify this,
    it means that the state will be only stored in the memory and will be cleared
    when window or application is refreshed. |'
  prefs: []
  type: TYPE_TB
- en: 'Consider this example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s create a function with the name of `authWithEmailPassword()` and add
    the following code to it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding code, first, we are getting the values from the form. When
    the user clicks on the submit button, then with the help of `fetchProvidersForEmail(email)`,
    we are validating whether the email exists in our current firebase system; if
    not, it will create a new user using the `createUserWithEmailAndPassword()` method.
    If it returns true, then we will validate the password; if the user entered the
    wrong password, it will prompt the user with Wrong password, otherwise sign them
    in using the same method—`signInWithEmailAndPassword()`—and we'll update the state
    of the component by redirecting true.
  prefs: []
  type: TYPE_NORMAL
- en: 'When we''ll create a new user in the `createUserWithEmailAndPassword()` method,
    it returns the following error code:'
  prefs: []
  type: TYPE_NORMAL
- en: auth/email-already-in-use
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: auth/invalid-email
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: auth/operation-not-allowed (if email/password accounts are not enabled in Firebase
    Console.)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: auth/weak-password (if the password is not strong enough.)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'When we''ll fetch the provider based on the email with `fetchProvidersForEmail(email)`,
    then it returns the following error code:'
  prefs: []
  type: TYPE_NORMAL
- en: auth/invalid-email (If a user entered the invalid email)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: To read the list of more auth methods and error codes, refer to [https://firebase.google.com/docs/reference/js/firebase.auth.Auth](https://firebase.google.com/docs/reference/js/firebase.auth.Auth).
  prefs: []
  type: TYPE_NORMAL
- en: 'We can also use the following firebase methods in our application to manipulate
    the user:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'After successful login, we''ll be redirected to an application dashboard page,
    and we''ll be able to see the full navigation where we can add and view the tickets:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/5b2ac244-7041-48ac-9302-9098beb44cf0.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now if you click on the logout button, nothing will happen, because we have
    not yet created any `logout` component. So in the logout button, what we need
    to do is simply call the `signOut()` method of the firebase:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding code, we created a component and set the state based on the
    passing value in the component props (authenticated); then, inside component lifecycle
    hook method `componentWillMount()`, we called the `firebaseApp.auth().signout()`
    method that signs out the user redirects them to the login page, and removes the
    data from the state.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we saw how we can make our application secure from unknown
    users with the help of firebase authentication system. We also saw how we can
    configure the React -Firebase application in node environment as well as how to
    create a login form in React and integrate the Firebase Authentication Sign-in
    method in React, such as Google, Facebook, and Email/Password. Similarly, we can
    integrate the other Authentication sign-in methods in your application.
  prefs: []
  type: TYPE_NORMAL
- en: We also covered handling the authentication errors based on the firebase auth
    error codes that help us perform an action in the application. To `Persist` the
    auth state, we can use `firebaseApp.auth().setPersistence('session')`, the method
    that allows us to maintain the firebase auth state.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will explore the power of Redux and create a realtime
    ticket booking application with React, Redux and Firebase.
  prefs: []
  type: TYPE_NORMAL
