- en: Chapter 11. Entering SQL Statements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter explains how we can enter our own SQL statements (queries) into
    phpMyAdmin, and how we can keep a history of those queries. Traditionally, one
    would interact with a MySQL server via the "mysql" command-line client by entering
    SQL statements and watching the server's response. Official MySQL training still
    involves directly typing statements to such a client.
  prefs: []
  type: TYPE_NORMAL
- en: The SQL query box
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'phpMyAdmin allows us to accomplish many database operations via its graphical
    interface. However, there will be times when we have to rely on SQL query input
    to achieve operations that are not directly supported by the interface. Following
    are two examples of such queries:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: To enter such queries, the SQL query box is available from a number of places
    within phpMyAdmin.
  prefs: []
  type: TYPE_NORMAL
- en: The Database view
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We encounter our first SQL query box when going to the **SQL** menu available
    in the `Database` view.
  prefs: []
  type: TYPE_NORMAL
- en: '![The Database view](img/7782_11_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: This box is simple—we type in some valid (hopefully) MySQL statement and click
    on **Go**. Under the query text area, there are bookmark-related choices (explained
    later in [Chapter 14)](ch14.html "Chapter 14. Using Query Bookmarks"). Usually,
    we don't have to change the standard SQL delimiter, which is a semicolon. However,
    there is a **Delimiter** dialog in case we need it (refer to [Chapter 17)](ch17.html
    "Chapter 17. Supporting Features Added in MySQL 5").
  prefs: []
  type: TYPE_NORMAL
- en: For a default query to appear in this box, we can set it with the `$cfg['DefaultQueryDatabase']`
    configuration directive, which is empty by default. We could put a query such
    as `SHOW TABLES FROM @DATABASE@` in this directive. The `@DATABASE@` placeholder
    in this query would be replaced by the current database name, resulting in `SHOW
    TABLES FROM `marc_book`` in the query box.
  prefs: []
  type: TYPE_NORMAL
- en: The Table view
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A slightly different box is available in the `Table` view of the `book` table
    from the **SQL** menu.
  prefs: []
  type: TYPE_NORMAL
- en: '![The Table view](img/7782_11_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The box already has a default query as seen in the previous screenshot. This
    default query is generated from the `$cfg[''DefaultQueryTable'']` configuration
    directive, which contains `SELECT * FROM @TABLE@ WHERE 1`. Here, the `@TABLE@`
    is replaced by the current table name. Another placeholder available in `$cfg[''DefaultQueryTable'']`
    is `@FIELDS@`. This placeholder would be replaced by the complete column''s list
    of this table, thus producing the following query:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '`WHERE 1` is a condition that is always true. Therefore, the query can be executed
    as it is. We can replace **1** with the condition we want, or we can type a completely
    different query.'
  prefs: []
  type: TYPE_NORMAL
- en: Because this SQL box appears in the `Table` view, the table name is known; therefore,
    phpMyAdmin shows buttons below the query box, which permit to quickly create common
    SQL queries which contain this table name. Most of the queries generated by these
    buttons contain the full column list.
  prefs: []
  type: TYPE_NORMAL
- en: The Columns selector
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The **Columns** selector is a way to speed up query generation. By choosing
    a column and clicking on the arrows**<<**, this column name is copied at the current
    cursor position in the query box. Here, we select the **author_id** column, remove
    the digit **1**, and click on**<<**. Then we add the condition **= 2** as shown
    in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The Columns selector](img/7782_11_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The **Show this query here again** option (checked by default) ensures that
    the query stays in the box after its execution if we are still on the same page.
    This can be seen more easily for a query like an `UPDATE` or `DELETE`, which affects
    a table, but does not produce a separate results page.
  prefs: []
  type: TYPE_NORMAL
- en: Clicking into the query box
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: We might want to change the behavior of a click inside the query box with the
    `$cfg['TextareaAutoSelect']` configuration directive. Its default value is `FALSE`,
    which means that no automatic selection of the contents is done upon a click.
    Should you change this directive to `TRUE`, the first click inside this box will
    select all its contents. (This is a way to quickly copy the contents elsewhere
    or delete them from the box.) The next click would put the cursor at the click
    position.
  prefs: []
  type: TYPE_NORMAL
- en: The Query window
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In [Chapter 3](ch03.html "Chapter 3. Over Viewing the Interface"), we discussed
    the purpose of this window, and the procedure for changing some parameters (such
    as dimensions). This window can easily be opened from the navigation panel using
    the **SQL** icon or the **Query window** link, as shown in the following screenshot,
    and is very convenient for entering a query and testing it:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The Query window](img/7782_11_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The following screenshot shows the Query window that appears over the main
    panel:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The Query window](img/7782_11_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The window seen in the screenshot contains the same **Columns** selector and**<<**
    button as that used in a `Table` view context. This distinct Query window is a
    feature supported only on JavaScript-enabled browsers.
  prefs: []
  type: TYPE_NORMAL
- en: Query window options
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The **SQL** tab is the default active tab in this window. This comes from the
    configuration directive `$cfg['QueryWindowDefTab']`, which contains `sql` by default.
  prefs: []
  type: TYPE_NORMAL
- en: If we want another tab to be the default active tab, we can replace `sql` with
    `files` or `history`. Another value, `full`, shows the contents of all the three
    tabs at once.
  prefs: []
  type: TYPE_NORMAL
- en: In the Query window, we see a checkbox for the **Do not overwrite this query
    from outside the window** choice. Normally, this checkbox is selected. If we deselect
    it, the changes we make while generating queries are reflected in the Query window.
    This is called **synchronization**. For example, choosing a different database
    or table from the navigation or main panel would update the Query window accordingly.
    However, if we start to type a query directly in this window, the checkbox will
    get checked in order to protect its contents and remove synchronization. This
    way, the query composed here will be locked and protected.
  prefs: []
  type: TYPE_NORMAL
- en: Session-based SQL history
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This feature collects all the successful SQL queries we execute as PHP session
    data, and modifies the Query window to make them available. This default type
    of history is temporary, as `$cfg['QueryHistoryDB']` is set to `FALSE` by default.
  prefs: []
  type: TYPE_NORMAL
- en: Database-based SQL history (permanent)
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As we installed the phpMyAdmin configuration storage (refer to [Chapter 1)](ch01.html
    "Chapter 1. Getting Started with phpMyAdmin"), a more powerful history mechanism
    is available. We should now enable this mechanism by setting `$cfg['QueryHistoryDB']`
    to `TRUE`.
  prefs: []
  type: TYPE_NORMAL
- en: 'After we try some queries from one of the query boxes, a history is built,
    visible only from the Query window as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Database-based SQL history (permanent)](img/7782_11_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: We see (in the reverse order) the last successful queries and the database on
    which they were made. Queries typed only from the query box are kept in this history,
    along with queries generated by phpMyAdmin (such as those generated by clicking
    on **Browse)**.
  prefs: []
  type: TYPE_NORMAL
- en: They are clickable for immediate execution, and the **Change** icon is available
    to insert a recorded query into the query box for editing.
  prefs: []
  type: TYPE_NORMAL
- en: The number of queries that will be kept is controlled by `$cfg['QueryHistoryMax']`,
    which is set to `25` by default. This limit is not kept for performance reasons,
    but as a practical limit in order to achieve a visually unencumbered view. Extra
    queries are eliminated at login time in a process traditionally called **garbage
    collection**. The queries are stored in the table configured in `$cfg['Servers'][$i]['history']`.
  prefs: []
  type: TYPE_NORMAL
- en: Editing queries
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'On the results page of a successful query, a header containing the executed
    query appears as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Editing queries](img/7782_11_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Clicking on **Edit** opens the Query window''s **SQL** tab, with this query
    ready to be modified. This happens because of the following default setting for
    this parameter:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: When it is set to `FALSE`, a click on **Edit** will not open the Query window;
    instead, the query will appear inside the query box of the **SQL** page.
  prefs: []
  type: TYPE_NORMAL
- en: Clicking on **Inline** replaces the displayed query by a text area where it's
    possible to edit and submit this query, without leaving the current results page.
  prefs: []
  type: TYPE_NORMAL
- en: Multi-statement queries
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In PHP and MySQL programming, we can send only one query at a time using the
    `mysql_query()` function call. phpMyAdmin allows us to send many queries in one
    transmission, using a semicolon as a separator. Suppose we type the following
    query in the query box:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'We will receive the following results screen:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Multi-statement queries](img/7782_11_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: We see the number of affected rows through comments because `$cfg['VerboseMultiSubmit']`
    is set to `TRUE`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let us send the same list of queries again and watch the results:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Multi-statement queries](img/7782_11_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: It is normal to receive a **Duplicate entry** error message that says the value
    **100** exists already. We are seeing the results of the first **INSERT** statement;
    but what happens to the next one? Execution stops at the first error because `$cfg['IgnoreMultiSubmitErrors']`
    is set to `FALSE` telling phpMyAdmin not to ignore errors in multiple statements.
    If it is set to `TRUE`, the program successively tries all the statements, and
    we see two **Duplicate entry** errors.
  prefs: []
  type: TYPE_NORMAL
- en: This feature would not work as expected, if we tried more than one `SELECT`
    statement. We would see the results of only the last `SELECT` statement.
  prefs: []
  type: TYPE_NORMAL
- en: Pretty printing (syntax highlighting)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: By default, phpMyAdmin parses and highlights the various elements of any MySQL
    statement it processes. This is controlled by `$cfg['SQP']['fmtType']`, which
    is set to`'html'` by default. This mode uses a specific color for each different
    element (a reserved word, a variable, a comment, and so on) as described in the
    `$cfg['SQP']['fmtColor']` array located in the theme-specific `layout.inc.php`
    file.
  prefs: []
  type: TYPE_NORMAL
- en: Setting `fmtType` to`'text'` would remove all color formatting, inserting line
    breaks at logical points inside a MySQL statement. Finally, setting `fmtType`
    to`'none'` removes every kind of formatting, leaving our syntax intact.
  prefs: []
  type: TYPE_NORMAL
- en: The SQL Validator
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Each time phpMyAdmin transmits a query, the MySQL server interprets it and provides
    feedback. The syntax of the query must follow MySQL rules, which are not the same
    as the SQL Standard. However, conforming to SQL Standard ensures that our queries
    are usable on other SQL implementations.
  prefs: []
  type: TYPE_NORMAL
- en: A free external service, the **Mimer SQL Validator**, is available to us, thanks
    to Mimer Information Technology AB. It validates our query according to the Core
    SQL-99 rules and generates a report. The Validator is available directly from
    phpMyAdmin, and its home page is located at [http://developer.mimer.com/validator/index.htm](http://developer.mimer.com/validator/index.htm).
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: For statistical purposes, this service anonymously stores on its server, the
    queries it receives. When storing the queries, it replaces database, table, and
    column names with generic names. Strings and numbers that are part of the query
    are replaced with generic values so as to protect the original information.
  prefs: []
  type: TYPE_NORMAL
- en: System requirements
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'This Validator is available as a SOAP service. Our PHP server must have XML,
    PCRE, and SOAP support. SOAP support is offered by either a PHP extension or by
    a PEAR module. If we choose the PEAR way, the following command (executed on the
    server by the system administrator) installs the modules we need:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'If we have problems with this command due to some of the modules being in a
    beta state, we can execute the following command, which installs SOAP and other
    dependent modules:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Making the Validator available
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Some parameters must be configured in `config.inc.php`. Setting `$cfg['SQLQuery']['Validate']`
    to `TRUE` enables the **Validate SQL** link.
  prefs: []
  type: TYPE_NORMAL
- en: We should also enable the Validator itself (as other validators might be available
    on future phpMyAdmin versions). This is done by setting `$cfg['SQLValidator']['use']`
    to `TRUE`.
  prefs: []
  type: TYPE_NORMAL
- en: 'The Validator is accessed with an anonymous Validator account by default, as
    configured using the following commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Instead, if Mimer Information Technology has provided us with an account, we
    can use that account information here.
  prefs: []
  type: TYPE_NORMAL
- en: Validator results
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: There are two kinds of reports returned by the Validator—one if the query conforms
    to the standard, and the other if it does not conform.
  prefs: []
  type: TYPE_NORMAL
- en: Standard-conforming queries
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'We will try a simple query: `SELECT COUNT(*) FROM book`. As usual, we enter
    this query in the query box and send it. On the results page, we now see an additional
    link— **Validate SQL** as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Standard-conforming queries](img/7782_11_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Clicking on **Validate SQL** produces a report as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Standard-conforming queries](img/7782_11_11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: We have the option of clicking on **Skip Validate SQL** to see our original
    query.
  prefs: []
  type: TYPE_NORMAL
- en: Non standard-conforming queries
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Let us try another query, which works correctly in MySQL: `SELECT * FROM book
    WHERE language = ''en''`. Sending it to the Validator produces a report as shown
    in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Non standard-conforming queries](img/7782_11_12.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Each time the Validator finds a problem, it adds a message such as **{error:
    1}** at the point of the error and adds a footnote in the report. In this query,
    the **language** column name is non-standard. Hence, the Validator tells us that
    it was expecting an identifier at this point. Another non-standard error is reported
    about the use of a `LIMIT` clause, which was added to the query by phpMyAdmin.'
  prefs: []
  type: TYPE_NORMAL
- en: Another case is that of the backquote. If we just click on **Browse** for the
    `book` table, phpMyAdmin generates `SELECT * FROM `book``, enclosing the table
    name with backquote. This is MySQL's way of protecting identifiers, which might
    contain special characters, such as spaces, international characters, or reserved
    words. However, sending this query to the Validator shows us that the backquotes
    do not conform to standard SQL. We may even get two errors, one for each backquote.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter helped us understand the purpose of query boxes and showed us where
    to find them. It also gave us an overview of how to use the column selector, the
    Query window options, how to get a history of the typed commands, multi-statement
    queries, and finally, how to use the SQL Validator.
  prefs: []
  type: TYPE_NORMAL
- en: The next chapter will show how to produce multi-table queries without typing
    much, thanks to phpMyAdmin's query generator.
  prefs: []
  type: TYPE_NORMAL
