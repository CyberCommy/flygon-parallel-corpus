- en: Chapter 10. Solutions to Exercises
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Exercise for chapter 1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In the end of the first chapter, there was the following exercise:'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The Pomodoro timer that we have built in the previous chapters is, without any
    doubt, great, but it still lacks some nice features. A really nice thing that
    it could provide would be showing random kittens from [http://thecatapi.com/](http://thecatapi.com/)
    during resting time. Can you implement this? Of course you can! But please do
    not confuse resting with working time! I am almost sure that your project manager
    will not like much if you stare at the kittens instead of working :)
  prefs: []
  type: TYPE_NORMAL
- en: Let's solve it.
  prefs: []
  type: TYPE_NORMAL
- en: Check the code for Pomodoro at [https://jsfiddle.net/chudaol/b6vmtzq1/](https://jsfiddle.net/chudaol/b6vmtzq1/).
  prefs: []
  type: TYPE_NORMAL
- en: Check [http://thecatapi.com/](http://thecatapi.com/) website.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s start by adding the well Bootstrap element with an image whose source
    points to the cat API:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'If you open the page you will see that the image is always visible. This is
    not what we want, we want, it to only be visible when we are in our Pomodoro resting
    interval. You already know how to do it. There are several ways of achieving this;
    let''s use the class binding method and bind a class that''s hidden when the state
    is working:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Now, if you open the page you will see that the image only appears when the
    working Pomodoro is finished.
  prefs: []
  type: TYPE_NORMAL
- en: However, the problem is that for all the time that we rest, the image is the
    same. It would be great if we could update it every, let's say, 10 seconds.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s use a cache buster mechanism for this purpose. If we attach some property
    to our URL and change it each 10 seconds, the URL will change and therefore we
    will obtain another random cat. Let''s add a `timestamp` variable to our Vue application
    and change it inside the `_tick` function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'After the timestamp is created and updated, we can use it in our image source
    URL:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: That's all! Check the whole code in this JSFiddle at [https://jsfiddle.net/chudaol/4hnbt0pd/2/](https://jsfiddle.net/chudaol/4hnbt0pd/2/).
  prefs: []
  type: TYPE_NORMAL
- en: Exercises for chapter 2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Enhancing MathPlugin
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Enhance our `MathPlugin` with trigonometrical functions (sine, cosine, and tangent).
  prefs: []
  type: TYPE_NORMAL
- en: 'Actually, it is just about adding the missing directives and using the `Math`
    object''s functions in it. Open `VueMathPlugin.js` and add the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'You can check how this directive works in the HTML file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: That's it!
  prefs: []
  type: TYPE_NORMAL
- en: Creating a Chrome application of the Pomodoro timer
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Please combine a solution of bootstrapping the application using a SCP-compliant
    version of Vue.js and the simple Pomodoro application that we created in [Chapter
    1](part0016.xhtml#aid-F8901 "Chapter 1. Going Shopping with Vue.js"), *Going Shopping
    with Vue.js*. Check the code in the `chrome-app-pomodoro` folder.
  prefs: []
  type: TYPE_NORMAL
- en: Exercises for chapter 3
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Exercise 1
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When we were rewriting the shopping list application using simple components,
    we lost the application's functionality. The exercise suggests using an events
    emitting system in order to bring the functionality back.
  prefs: []
  type: TYPE_NORMAL
- en: The code we ended up with in this section was looking similar to what is in
    the [chapter3/vue-shopping-list-simple-components](https://github.com/PacktPublishing/Learning-Vue.js-2/tree/master/chapter3/vue-shopping-list-simple-components)
    folder.
  prefs: []
  type: TYPE_NORMAL
- en: 'Why doesn''t it work? Check the devtools error console. It states the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Aha! This happens because inside `add-item-template` we are calling the `addItem`
    method which does not belong to this component. This method belongs to the parent
    component, and of course, the child component does not have access to it. What
    should we do? Let''s emit events! We already know how to do it. So, we don''t
    have to do too much. Actually, we have to do three small things:'
  prefs: []
  type: TYPE_NORMAL
- en: Attach the `addItem` method to `add-item-component` in which we will emit an
    event and pass this component's `newItem` property to it.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Modify/simplify the `addItem` method of the parent component. It should now
    just receive a text and add it to its `items` property.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Attach the `v-on` modifier with the name of the event to the component's invocation
    inside the main markup that will call the `addItem` method each time the event
    is emitted.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Let''s start by adding the `addItem` method to `add-item-component`. It is
    called each time the add button or *Enter* is hit. This method should check the
    `newItem` property, and if it contains a text, should emit an event. Let''s call
    this event `add`. Thus, the JavaScript code of our component will now look the
    follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'When the `add` event is emitted, somehow the `addItem` method of the main component
    should be invoked. Let''s bind the `add` event to `addItem` by attaching the `v-on:add`
    modifier to the `add-item-component` invocation:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Okay then. As you can see, this method does almost the same that the `addItem`
    method of the main component was doing before. It just doesn''t push `newItem`
    to the `items` array. Let''s modify the `addItem` method of the main component
    so it just receives already processed text and pushes it into the array of items:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: We're done! The full solution of this exercise can be found in the [appendix/chapter3/vue-shopping-list-simple-components](https://github.com/PacktPublishing/Learning-Vue.js-2/tree/master/Appendix/chapter3/vue-shopping-list-simple-components)
    folder.
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In the section called *Rewriting the shopping list application with single-file
    components* in [Chapter 3](part0036.xhtml#aid-12AK81 "Chapter 3. Components –
    Understanding and Using"), *Components – Understanding and Using*, we did quite
    a nice job of changing the shopping list application using single-file components,
    but there are still few things left. We have two missing functionalities: adding
    items to the items list, and changing the title.'
  prefs: []
  type: TYPE_NORMAL
- en: In order to achieve the first functionality, we have to emit an event from `AddItemComponent`
    and attach the `v-on` modifier to the `add-item-component` invocation with the
    main `App.vue` component, exactly like we have done in the case of dealing with
    simple components. You can basically just copy and paste the code.
  prefs: []
  type: TYPE_NORMAL
- en: The same goes for the changing title functionality. We should also emit an `input`
    event, just like we did in the simple components example.
  prefs: []
  type: TYPE_NORMAL
- en: Do not forget to add the style to the `App.vue` component to make it look just
    as it was before.
  prefs: []
  type: TYPE_NORMAL
- en: Check the full code in the [appendix/chapter3/shopping-list-single-file-components](https://github.com/PacktPublishing/Learning-Vue.js-2/tree/master/Appendix/chapter3/shopping-list-single-file-components)
    folder.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you learned how to make our applications available for everyone.
    You also learned how to deploy them using Heroku integration with the GitHub repository.
    You also learned how to do it automatically on each commit and push. We also used
    Travis for automatic builds on each deployment. Now our applications are being
    fully tested and automatically redeployed each time we commit a change. Congratulations!
  prefs: []
  type: TYPE_NORMAL
- en: You probably think that this is the end of the journey. No, it is not. This
    is just the beginning. In the next chapter, we will see what you can learn and
    what nice things you can do next with both the Pomodoro and shopping list applications.
    Stay with me!
  prefs: []
  type: TYPE_NORMAL
