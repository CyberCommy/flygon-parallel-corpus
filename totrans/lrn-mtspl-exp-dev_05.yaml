- en: Chapter 5. Vulnerability Scanning and Information Gathering
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In the previous chapter, we covered the various functions of Meterpreter and
    the approach that should be adopted for client exploitation. Now we slowly move
    on to the exploitation principles in depth, with the first phase as information
    gathering. We explain the various techniques through which we can gather information
    of our victim for pre-attack analysis. This information is used to know our victim
    better and gather platform-rich information for attacking the system. The rise
    in the amount of vulnerabilities has made us shift to using automated vulnerability
    scanners. This chapter is aimed at mastering the art of vulnerability scanning,
    which is the first step towards exploitation. Some of the modules that would be
    covered are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Information gathering through Metasploit
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Working with Nmap
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Working with Nessus
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Report importing in Metasploit
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Information Gathering through Metasploit
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Information gathering is a process of collecting information about a victim
    through various techniques. This is basically divided into two steps of footprinting
    and scanning. A lot of information is available publicly about an organization
    through the organization's website, business news, job portals, disgruntled employees,
    and so on. A malicious user may be able to find domain names belonging to an organization,
    remote access information, network architecture, public IP addresses, and much
    more through this phase.
  prefs: []
  type: TYPE_NORMAL
- en: 'Metasploit is a very strong tool and has a collection of some of the powerful
    tools in its kit for information gathering and analysis. Some of these include:
    Nmap, Nessus with Postgres support for porting the report, followed by exploitation
    using the gathered information through Metasploit, and so on. Metasploit is already
    integrated with Postgres, which indirectly helps in storing penetration testing
    results for longer duration during the testing phase. The information gathering
    phase is considered so important because attackers use these tools to gather important
    information for compromising their victim. The Metasploit auxiliary modules have
    various scans from ARP to SYN, and even service-based scans such as HTTP, SMB,
    SQL, and SSH. These actually help in fingerprinting the service version and even
    some information about probable platforms on which the service is being used.
    So, through these specifications our attack domain gets further restricted in
    hitting the victim really hard.'
  prefs: []
  type: TYPE_NORMAL
- en: '![Information Gathering through Metasploit](img/3589_05_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Image take from [http://s3.amazonaws.com/readers/2010/12/20/spyware_1.jpg](http://s3.amazonaws.com/readers/2010/12/20/spyware_1.jpg)
  prefs: []
  type: TYPE_NORMAL
- en: We move on to some hands on information gathering with the help of Metasploit.
    Let us suppose we are the attacker, and we have a domain which has to be exploited.
    The first step should be to retrieve all the information about the domain for
    our malicious purpose. `Whois` is one of the best methods for information gathering.
    It is widely used for querying databases that store registered users of an Internet
    resource such as domain name, IP address, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: Open `msfconsole` and type in `whois <domain name>`. For example, here we are
    using my own domain name `whois <techaditya.in>`.
  prefs: []
  type: TYPE_NORMAL
- en: '![Information Gathering through Metasploit](img/3589_05_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: We can see the amount of information gathered related to our domain. In Metasploit,
    there are a lot of auxiliary scanners, which are very useful for information gathering
    through e-mail harvesting. E-mail harvesting is a very useful tool to get the
    e-mail IDs associated with a particular domain.
  prefs: []
  type: TYPE_NORMAL
- en: For using the e-mail collector auxiliary module type in `use auxiliary/gather/search_email_collector`.
  prefs: []
  type: TYPE_NORMAL
- en: '![Information Gathering through Metasploit](img/3589_05_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Let's have a look at the available options. For this, type in `show options`.
  prefs: []
  type: TYPE_NORMAL
- en: '![Information Gathering through Metasploit](img/3589_05_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: We can see that the domain is blank and we have to set the domain address. So
    just type in `set domain <domain name>`; for example, we are using `set domain
    techaditya.in` here.
  prefs: []
  type: TYPE_NORMAL
- en: '![Information Gathering through Metasploit](img/3589_05_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Now let us run the auxiliary module; just type in `run` and it will show the
    results.
  prefs: []
  type: TYPE_NORMAL
- en: '![Information Gathering through Metasploit](img/3589_05_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: With these steps, we have gathered a lot of information publicly available about
    our victim.
  prefs: []
  type: TYPE_NORMAL
- en: Active Information Gathering
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now let us move on to some active information gathering for exploitation of
    our victim. Another useful auxiliary scanner is the telnet version scanner. To
    use this, type in `use auxiliary/scanner/telnet/telnet_version`.
  prefs: []
  type: TYPE_NORMAL
- en: '![Active Information Gathering](img/3589_05_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: After that type in `show options` to see the available options.
  prefs: []
  type: TYPE_NORMAL
- en: '![Active Information Gathering](img/3589_05_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: We can see that the `RHOSTS` option is empty and we have set the target IP address
    for scanning the telnet version, so type in `set RHOSTS<target IP address>`. For
    example, here we type `set RHOSTS 192.168.0.103`, and after that type in `run`
    for scanning.
  prefs: []
  type: TYPE_NORMAL
- en: '![Active Information Gathering](img/3589_05_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Our victim has been scanned and we can see the telnet version of his machine.
  prefs: []
  type: TYPE_NORMAL
- en: Another scanner we would use for finding out whether a **Remote Desktop** connection
    (**RDP**) is available is the RDP scanner. But for this purpose, we have to know
    the port number for the Remote Desktop connection, which is 3389, also known as
    the RDP port. Type in `use auxiliary/scanner/rdp/ms12_020_check` and then `show
    options` to see the detailed options for usage.
  prefs: []
  type: TYPE_NORMAL
- en: '![Active Information Gathering](img/3589_05_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: We can see the options and the ports which are predefined from 1-10000\. We
    do not need to scan all ports, so we define the port number on which RDP runs
    by default. After this, we set the `RHOST` as our target address. Type in `set
    PORTS 3389` and press *Enter*, then type `set RHOST 192.168.11.46`.
  prefs: []
  type: TYPE_NORMAL
- en: '![Active Information Gathering](img/3589_05_11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Once we have all the options set, type in `run`.
  prefs: []
  type: TYPE_NORMAL
- en: '![Active Information Gathering](img/3589_05_12.jpg)'
  prefs: []
  type: TYPE_IMG
- en: We can see in the result that TCP port 3389, which is used for Remote Desktop
    connection, is open.
  prefs: []
  type: TYPE_NORMAL
- en: Working with Nmap
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Nmap is a powerful security scanner developed by *Gordon Lyon*, and is used
    for host, service, and open ports detection on a computer network. It has many
    features such as stealth scan, aggressive scan, firewall evasion scan, and has
    the ability to fingerprint operating systems. It has its own Nmap Scripting Engine,
    which can be used along with the Lua programming language to write the customized
    scripts.
  prefs: []
  type: TYPE_NORMAL
- en: We start from basic techniques on Nmap scanning using Metasploit.
  prefs: []
  type: TYPE_NORMAL
- en: Scanning a single target—running Nmap with no command options will perform a
    basic scan on the target address. The target can be given as an IPV4 address or
    its hostname. Let's see how it works. Open terminal or `msfconsole`, and type
    `nmap <target>`, for example, `nmap 192.168.11.29`.
  prefs: []
  type: TYPE_NORMAL
- en: '![Working with Nmap](img/3589_05_13.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The scan result shows the status of detected ports on the target. The result
    is classified into three different columns namely `PORT`, `STATE`, and `SERVICE`.
    `PORT` column shows the port number, the `STATE` column shows the status of the
    port, whether it is open or closed, and the `SERVICE` shows the type of service
    that is running on that port.
  prefs: []
  type: TYPE_NORMAL
- en: 'The response of the ports are classified into six different status messages
    which are: open, close, filtered, unfiltered, open filtered, and closed filtered.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The following are some different types of Nmap scan options for scanning multiple
    hosts:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Scanning multiple targets**: Nmap scans for multiple hosts at the same time.
    The easiest way to do this is by putting all the targets in a string separated
    by a space. Type in `nmap <Target Target>`, for example, `nmap 192.168.11.46 192.168.11.29`.![Working
    with Nmap](img/3589_05_14.jpg)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We can see the results for both the IP addresses.
  prefs: []
  type: TYPE_NORMAL
- en: '**Scanning a list of targets**: Suppose we have a large number of target computers
    to scan. Then the easiest way to scan all the targets would be by putting all
    the targets in a text file. We just need to separate all targets by a new line
    or space. For example, here we have created a list named `list.txt`.![Working
    with Nmap](img/3589_05_15.jpg)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Now for scanning the whole list, type in `nmap –iL <list.txt>`. Here, the syntax
    `–iL` is used to instruct Nmap to extract the list of targets from the `list.txt`,
    for example, `nmap –iL list.txt`.
  prefs: []
  type: TYPE_NORMAL
- en: '![Working with Nmap](img/3589_05_16.jpg)'
  prefs: []
  type: TYPE_IMG
- en: We now move on to the various Nmap discovery options. So how does Nmap actually
    work? Whenever Nmap performs a scan, it delivers an ICMP echo request to the destination
    for checking whether the host is alive or dead. This process saves much time for
    Nmap when it scans multiple hosts at a time. Sometimes ICMP requests are blocked
    by firewalls, so as a secondary check Nmap tries to connect to default open ports,
    such as 80 and 443, which are used by the web server or HTTP.
  prefs: []
  type: TYPE_NORMAL
- en: Nmap discovery options
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Now we will move on to various Nmap command options, which can be used for host
    discovery on a scenario basis.
  prefs: []
  type: TYPE_NORMAL
- en: '![Nmap discovery options](img/3589OS_05_17.jpg)'
  prefs: []
  type: TYPE_IMG
- en: In the previous screenshot we can see all the scanning options available in
    Nmap. Let us test a few, since the complete coverage of commands is beyond the
    scope of this book.
  prefs: []
  type: TYPE_NORMAL
- en: '**Ping only scan**: This scan is used for finding the live hosts in a network.
    For executing the ping only scan, we use the command `nmap –sP <Target>`; for
    example, here we set `nmap –sP 192.168.11.2-60`.![Nmap discovery options](img/3589_05_18.jpg)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In the result we see that four hosts are up. So this scan saves time for performing
    a scan in a large network, and identifies all the live hosts, leaving the inactive
    ones.
  prefs: []
  type: TYPE_NORMAL
- en: '**TCP ACK ping**: This scan sends TCP ACK packets to the target. This method
    is used to discover hosts by collecting TCP responses from hosts (depends on TCP
    three-way handshake). When ICMP requests are blocked by the firewall, this method
    is useful for gathering information. For performing this scan, we use the command
    `nmap –PA <target>`; for example, here we set `nmap –PA 192.168.11.46`.![Nmap
    discovery options](img/3589_05_19.jpg)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**ICMP echo ping**: This option sends ICMP requests to the target for checking
    whether the host replies or not. This type of scan works best on the local network
    where ICMP packets are easily transmitted over the network. But many hosts do
    not respond to ICMP packet requests for security reasons. The command for this
    option is `nmap –PE 192.168.11.46`.![Nmap discovery options](img/3589_05_20.jpg)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Force reverse DNS resolution**: This scan is useful for performing reconnaissance
    on a target. Nmap will try to resolve the reverse DNS information of the target
    address. It reveals juicy information about the target IP address as you can see
    in the following screenshot. The command we used for scanning is `nmap –R <Target>`;
    for example, here we set `nmap –R 66.147.244.90`.![Nmap discovery options](img/3589_05_21.jpg)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Nmap advanced scanning options
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Now let us see some advanced scanning options. These are mainly used for bypassing
    firewall and finding services that are not common. The list of options are shown
    in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Nmap advanced scanning options](img/3589OS_05_22.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'We will explain some of them as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**TCP SYN scan**: TCP SYN scan attempts to identify ports by sending a SYN
    packet to the target and waiting for a response. A SYN packet is basically sent
    to indicate that a new connection is to be established. This type of scan is also
    known as the stealth scan because it does not attempt to open a full-fledged connection
    to the remote host. For performing this scan, we use the command `nmap –sS <target>`;
    for example, here we are using `nmap –sS 192.168.0.104`.![Nmap advanced scanning
    options](img/3589_05_23.jpg)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**TCP null scan**: This type of scan sends packets without TCP flags enabled.
    This is done by setting the header to zero. This type of scan is used for fooling
    a firewalled system in getting a response from them. The command for null scan
    is `nmap –sN <target>`; for example, here we are using `nmap –sN 192.168.0.103`.![Nmap
    advanced scanning options](img/3589_05_24.jpg)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Custom TCP scan**: This type of scan performs a custom scan using one or
    more TCP header flags. Any combination of flags can be used in this scan. The
    various types of TCP flags are shown in the following figure:![Nmap advanced scanning
    options](img/3589OS_05_25.jpg)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Any combination of these flags can be used with this scan. The command used
    is `nmap –scanflags SYNURG <target>`; for example, here we set `nmap –scanflags
    SYNURG 192.168.0.102`.
  prefs: []
  type: TYPE_NORMAL
- en: '![Nmap advanced scanning options](img/3589_05_26.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Port scanning options
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Next we move on to some more scanning techniques for specific ports, a range
    of ports, and port scanning based on protocols, names, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: '![Port scanning options](img/3589OS_05_27.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '**Fast scan**: In this scan, Nmap does a quick scan for only 100 ports out
    of the 1000 most common ports. Thus, the Nmap scanning speed gets tremendously
    increased by reducing the number of ports during the scan. The command used for
    fast scan is `nmap –F <Target >`; for example, here we are using `nmap –F 192.168.11.46`.![Port
    scanning options](img/3589_05_28.jpg)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Scan ports by name**: Scanning ports by name is very easy and we just have
    to specify the port name during the scan. The command used is `nmap –p (portname)
    <target>`; for example, here we are using `nmap –p http 192.168.11.57`.![Port
    scanning options](img/3589_05_29.jpg)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Performing a sequential port scan**: With the help of the sequential port
    scanner, Nmap scans its target by a sequential port order. This technique is quite
    useful for evading firewall and **Intrusion Prevention System**. The command used
    is `nmap –r <target>`; for example, here we are using `nmap –r 192.168.11.46`.![Port
    scanning options](img/3589_05_30.jpg)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'We sometimes face problems when we receive filtered port results while scanning.
    This case arises when a system is protected by a firewall or Intrusion prevention
    systems. Nmap has some features that help to bypass these protection mechanisms
    as well. We have listed a few options in the following table:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Port scanning options](img/3589OS_05_31.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'We will explain some of them as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Fragment Packets**: By using this option, Nmap sends very small 8 byte packets.
    This option is very useful for evading improperly configured firewall systems.
    The command used is `nmap –f <target>`; for example, here we are using `nmap –f
    192.168.11.29`.![Port scanning options](img/3589_05_32.jpg)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Idle Zombie Scan**: This is a very unique scanning technique in which Nmap
    uses a zombie host for scanning the target. It means, here Nmap uses two IP addresses
    for performing a scan. The command used is `nmap –sI <Zombie host> <Target>`;
    for example, here we are using `nmap –sI 192.168.11.29 192.168.11.46`.![Port scanning
    options](img/3589_05_33.jpg)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Spoof MAC Address**: This technique is useful when a firewalled-system detects
    a scanning process via the system''s MAC address, and blacklists those MAC addresses.
    But Nmap has a feature of spoofing MAC addresses. MAC addresses can be spoofed
    via three different arguments, which are listed in the following screenshot:![Port
    scanning options](img/3589OS_05_34.jpg)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The command used for this is `nmap –spoof-mac <Argument> <Target>`; for example,
    here we are using `nmap –spoof-mac Apple 192.168.11.29`.
  prefs: []
  type: TYPE_NORMAL
- en: '![Port scanning options](img/3589_05_35.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'After learning different types of scanning techniques, next we move on to how
    we can save the Nmap output results in various ways and formats. The options are
    listed in the following figure:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Port scanning options](img/3589OS_05_36.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Let us save an Nmap output result in an XML file. The command used is `nmap
    –oX <scan.xml> <Target>`; for example, here we are using `nmap –oN scan.txt 192.168.11.46`.
  prefs: []
  type: TYPE_NORMAL
- en: '![Port scanning options](img/3589_05_37.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Working with Nessus
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Nessus is a proprietary vulnerability scanner, which is available freely for
    noncommercial usage. It detects vulnerabilities, misconfigurations, default credentials
    on target systems, and is used in various compliance audits as well.
  prefs: []
  type: TYPE_NORMAL
- en: For starting Nessus in Metasploit, open `msfconsole` and type `load nessus`.
  prefs: []
  type: TYPE_NORMAL
- en: '![Working with Nessus](img/3589_05_38.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Let us use the Nessus `help` command by typing `nessus_help`.
  prefs: []
  type: TYPE_NORMAL
- en: '![Working with Nessus](img/3589_05_39.jpg)'
  prefs: []
  type: TYPE_IMG
- en: We have a list of various Nessus command-line options. Next we connect to Nessus
    from our localhost for starting the scans. For connecting to localhost, the command
    used is `nessus_connect <Your Username>:<Your Password>@localhost:8834 <ok>`,
    and here we are using `nessus_connect hacker:toor@localhost:8834 ok`.
  prefs: []
  type: TYPE_NORMAL
- en: '![Working with Nessus](img/3589_05_40.jpg)'
  prefs: []
  type: TYPE_IMG
- en: After getting successfully connected to Nessus on its default port, we will
    now check the Nessus scanning policies. For this, we type in `nessus_policy_list`.
  prefs: []
  type: TYPE_NORMAL
- en: '![Working with Nessus](img/3589_05_41.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Here we can see four policies of Nessus; the first is external network scan,
    which is used for scanning network vulnerabilities externally. The second is internal
    network scan, which is used for scanning network vulnerabilities internally. The
    third is Web App Tests, which is used for scanning web application for vulnerabilities.
    The fourth one is PCI-DSS (Payment Card Industry-data Security Standard) audits,
    which is used in the Payment Card Industry as the data security standard.
  prefs: []
  type: TYPE_NORMAL
- en: Now we are going to scan our victim machine. For scanning a machine we have
    to create a new scan, and the command used is `nessus_new_scan <policy ID> <scan
    name> <Target IP>`; for example, here we are using `nessus_new_scan -2 WindowsXPscan
    192.168.0.103`.
  prefs: []
  type: TYPE_NORMAL
- en: '![Working with Nessus](img/3589_05_42.jpg)'
  prefs: []
  type: TYPE_IMG
- en: We can check the status of the scanning process by typing in `nessus_scan_status`;
    it will show us the status of the scanning process, whether it has completed or
    not.
  prefs: []
  type: TYPE_NORMAL
- en: '![Working with Nessus](img/3589_05_43.jpg)'
  prefs: []
  type: TYPE_IMG
- en: After completing the scanning process, now it is time to check for the report
    list, so type in `nessus_report_list`.
  prefs: []
  type: TYPE_NORMAL
- en: '![Working with Nessus](img/3589_05_44.jpg)'
  prefs: []
  type: TYPE_IMG
- en: We can see the report with its **ID**. Its **Status** is marked as **completed**.
    For opening the report we use the command `nessus_report_hosts <report ID>`; for
    example, here we are using `nessus_report_hosts dc4583b5-22b8-6b1a-729e-9c92ee3916cc301e45e2881c93dd`.
  prefs: []
  type: TYPE_NORMAL
- en: '![Working with Nessus](img/3589_05_45.jpg)'
  prefs: []
  type: TYPE_IMG
- en: In the previous screenshot, we can see the result for the machine with the IP
    `192.168.0.103` that has a total severity of `41`. This means the total number
    of vulnerabilities is 41.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following are the classifications of the different vulnerabilities:'
  prefs: []
  type: TYPE_NORMAL
- en: Sev 0 indicates high-level vulnerabilities, which are 4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Sev 1 indicates medium-level vulnerabilities, which are 28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Sev 2 indicates low-level vulnerabilities, which are 4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Sev 3 indicates informational vulnerabilities, which are 9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We may see the vulnerabilities in detail with the protocol name and services
    using the command `nessus_report_hosts_ports <Target IP> <Report ID>`; for example,
    here we are using `nessus_report_host_ports 192.168.0.103 dc4583b5-22b8-6b1a-729e-9c92ee3916cc301e45e2881c93dd`.
  prefs: []
  type: TYPE_NORMAL
- en: '![Working with Nessus](img/3589_05_46.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Report importing in Metasploit
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Importing a report of vulnerability scanners into the Metasploit database is
    a very useful feature provided by Metasploit. In this chapter, we used two scanners,
    which are Nmap and Nessus. We already saw the various scanning techniques of Nmap
    used in different circumstances. Now we will see how to import an Nmap report
    via `msfconsole` in PostgreSQL database.
  prefs: []
  type: TYPE_NORMAL
- en: Scan any host and save the Nmap report in XML format because `msfconsole` does
    not support TXT format. So here we already have a scan report in XML format named
    `scan.xml`. Now the first thing we have to do is to check the database for connectivity
    with the `msfconsole` using the command `db_status`.
  prefs: []
  type: TYPE_NORMAL
- en: '![Report importing in Metasploit](img/3589_05_47.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Our database is connected with `msfconsole` and now it's time to import the
    Nmap report. We use the command `db_import <report path with name>`; for example,
    here we are importing our report from the desktop, so we are giving `db_import
    /root/Desktop/scan.xml`.
  prefs: []
  type: TYPE_NORMAL
- en: '![Report importing in Metasploit](img/3589_05_48.jpg)'
  prefs: []
  type: TYPE_IMG
- en: After successfully importing the report into the database, we may access it
    from `msfconsole`. We can see the host details by typing `host <hostname on which
    nmap scan performed>`; for example, here we are using `host 192.168.0.102`.
  prefs: []
  type: TYPE_NORMAL
- en: '![Report importing in Metasploit](img/3589_05_49.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Here we have some important information about the host such as the MAC address
    and the operating system version. Now after selecting the hosts, let us check
    for the open port details and the services running on those ports. The command
    used is `services <hostname>`; for example, here we are using `services 192.168.0.102`.
  prefs: []
  type: TYPE_NORMAL
- en: '![Report importing in Metasploit](img/3589_05_50.jpg)'
  prefs: []
  type: TYPE_IMG
- en: What we have here is all the information of open ports and services running
    on the victim machine. Now we can search for exploits for further attacks, which
    we already did in the previous chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Next we will learn to import the report of Nessus in `msfconsole`. It is as
    simple as importing the Nmap report using the same command, which is `db_import
    <report name with file location>`; for example, here we are using `db_import /root/Desktop/Nessus_scan.nessus`.
  prefs: []
  type: TYPE_NORMAL
- en: '![Report importing in Metasploit](img/3589_05_51.jpg)'
  prefs: []
  type: TYPE_IMG
- en: We can see that the report has been successfully imported for host 192.168.0.103,
    and now we can check the vulnerabilities for this host by typing in `vulns <hostname>`;
    for example, here we are using `vulns 192.168.0.103`.
  prefs: []
  type: TYPE_NORMAL
- en: '![Report importing in Metasploit](img/3589_05_52.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Now we can see the vulnerabilities of the victim machine; according to these
    vulnerabilities, we can search for exploits, payloads, and auxiliary modules for
    performing further attacks.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter we have covered the various techniques for gathering information
    against a victim using the modules of Metasploit. We covered some freely available
    tools along with some auxiliary scanners. Using some of the auxiliary scanners
    we were actually able to fingerprint a particular running service. Through Nmap
    we learned to perform a network scan for live systems, firewall protected systems,
    and the various other scanning techniques which can be used in different scenarios.
    We saw that Nessus is a very big tool, which can be used for vulnerability assessment
    of a victim machine. We also learned to import Nmap and Nessus reports into Metasploit.
    With this chapter, we are already one step ahead in exploiting our victim, and
    will move on to covering client-side exploitation in the next chapter.
  prefs: []
  type: TYPE_NORMAL
- en: References
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The following are some helpful references that shed further light on some of
    the topics covered in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://pentestlab.wordpress.com/2013/02/17/metasploit-storing-pen-test-results/](https://pentestlab.wordpress.com/2013/02/17/metasploit-storing-pen-test-results/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[http://www.offensive-security.com/metasploit-unleashed/Information_Gathering](http://www.offensive-security.com/metasploit-unleashed/Information_Gathering)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[http://www.firewalls.com/blog/metasploit_scanner_stay_secure/](http://www.firewalls.com/blog/metasploit_scanner_stay_secure/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[http://www.mustbegeek.com/security/ethical-hacking/](http://www.mustbegeek.com/security/ethical-hacking/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[http://backtrack-wifu.blogspot.in/2013/01/an-introduction-to-information-gathering.html](http://backtrack-wifu.blogspot.in/2013/01/an-introduction-to-information-gathering.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[http://www.offensive-security.com/metasploit-unleashed/Nessus_Via_Msfconsole](http://www.offensive-security.com/metasploit-unleashed/%E2%80%A8Nessus_Via_Msfconsole)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[http://en.wikipedia.org/wiki/Nmap](http://en.wikipedia.org/wiki/Nmap)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[http://en.wikipedia.org/wiki/Nessus_(software)](http://en.wikipedia.org/wiki/Nessus_(software))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
