- en: MySQL and SQLite Database Administrations
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you will learn about MySQL and SQLite database administration.
    You will learn to install MySQL and SQLite. You will also learn how to create
    users, grant privileges, create databases, create tables, insert data into a table,
    and view all records from the table specific records, and update and delete the
    data.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, you will learn the following:'
  prefs: []
  type: TYPE_NORMAL
- en: MySQL database administration
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: SQLite database administration
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: MySQL database administration
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This section will cover MySQL database administration using Python. You already
    know Python has various modules for `mysql` database administration. So, we will
    learn about the MySQLdb module here. The `mysqldb` module is an interface for
    MySQL database server and is used to provide Python database API.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s learn how to install MySQL and a Python `mysqldb` package. For this,
    run the following command in your Terminal:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'This command installs the MySQL server and various other packages. While installing
    the package, we are prompted to enter a password for the MySQL root account:'
  prefs: []
  type: TYPE_NORMAL
- en: 'The following code is used for checking for the `mysqldb` package to install:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'And the following is for installing the Python interface for MySQL:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, we will check if `mysql` is installed properly or not. For this, run the
    following command in Terminal:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Once the command runs, you will get the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'By running `sudo mysql -u root -p`, you will get the `mysql` console. There
    are some commands used for listing databases and tables, and using the database
    to store our work. We will see them one by one:'
  prefs: []
  type: TYPE_NORMAL
- en: 'This is for listing all the databases:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'And this is for using the database:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Whenever we come out of the MySQL console and log in again after some time,
    we must use the `use database_name;` statement. The purpose of using this command
    is that our work will be saved in our database. We can understand this in detail
    with the following examples:'
  prefs: []
  type: TYPE_NORMAL
- en: 'The following code is used for listing all the tables:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: These are the commands we use for listing databases, using the database, and
    listing the tables.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, we will create a database using a create database statement in the `mysql`
    console. Now, open the `mysql` console using `mysql -u root -p`, then enter your
    password, which you entered while installing, and press *Enter*. Next, create
    your database. In this section, we are going to create a database named `test`
    and we will use this database throughout this section:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: First, we listed all the databases using show databases. Next, we created our
    database test using the create `database` statement. Again, we executed show databases
    to find whether our database is created or not. Our database is now created. Next,
    we used that database to store the work we are doing.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, we are going to create a user and grant the privileges to that user. Run
    the following commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: We created a `test_user` user; the password for that user is `test123`. Next,
    we grant all the privileges to our `test_user` user. Now, come out of the `mysql`
    console by running a `quit;` or `exit;` command.
  prefs: []
  type: TYPE_NORMAL
- en: Now, we are going to see some examples for getting a database version, creating
    a table, inserting some data into the table, updating the data, and deleting the
    data.
  prefs: []
  type: TYPE_NORMAL
- en: Getting a database version
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'First, we will see an example of getting the database version. For that, we
    will create a `get_database_version.py` script and write the following content
    in it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: It is very important to follow the previous steps before running this script;
    they should not be skipped.
  prefs: []
  type: TYPE_NORMAL
- en: 'Run the script and you will get the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding example, we got the database version. For that, first we imported
    the MySQLdb module. Then we wrote the connection string. In the connection string,
    we mentioned our username, password, and database name. Next, we created a cursor
    object that is used for executing a SQL query. In `execute()`, we passed an SQL
    query. `fetchone()` retrieves the next row of query result. Next, we printed the
    result. The `close()` method closes the database connection.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a table and inserting data
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now, we are going to create a table and we will insert some data into it. For
    that, create a `create_insert_data.py` script and write the following content
    in it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the script and you will get the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'To check whether your table is created successfully or not, open your `mysql`
    console and run the following commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: You can see that your table books is created.
  prefs: []
  type: TYPE_NORMAL
- en: Retrieving the data
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To retrieve the data from the table, we use the `select` statement. Now, we
    are going to retrieve the data from our books table. For that, create a `retrieve_data.py`
    script and write the following content in it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the script and you will get the output as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding example, we retrieved data from tables. We used the MySQLdb
    module. We wrote a connection string and created a cursor object to execute the
    SQL query. In `execute()`, we wrote an SQL `select` statement. And last, we printed
    the records.
  prefs: []
  type: TYPE_NORMAL
- en: Updating the data
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now, if we want to make some changes in the records, we can use an SQL `update`
    statement. We are going to see an example of an `update` statement. For that,
    create a `update_data.py` script and write following content in it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the script as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, to check if your record is updated or not, run `retrieve_data.py` as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: You can see your data for ID `1` is updated. In the preceding example, in `execute()`,
    we have written an `update` statement that will update the data for ID `1`.
  prefs: []
  type: TYPE_NORMAL
- en: Deleting the data
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To delete a particular record from your table, use a `delete` statement. We
    are going to see an example of deleting data. Create a `delete_data.py` script and
    write the following content in it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the script as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, to check whether your record is deleted or not, run the `retrieve_data.py`
    script as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: You can see your record, whose ID is `5`, is deleted. In the preceding example,
    we used the `delete` statement to delete a particular record. Here, we deleted
    the record whose ID is `5`. You can also delete the record according to any field
    name of your choice.
  prefs: []
  type: TYPE_NORMAL
- en: SQLite database administration
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we are going to learn how to install and use SQLite. Python
    has the `sqlite3` module to do SQLite database tasks. SQLite is a serverless,
    zero configuration, transactional SQL database engine. SQLite is very fast and
    lightweight. The entire database is stored in a single disk file.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, we will install SQLite first. Run the following command in your Terminal:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'In this section, we are going to learn following the operations: creating database,
    creating tables, inserting data into table, retrieving the data, and updating
    and deleting the data from table. We will see each operation one by one.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, first, we will see how to create a database in SQLite. To create a database,
    you simply have to write the command in your Terminal as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'After running this command, you will get the `sqlite` console opened in your
    Terminal as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: There you go, your database has been created by simply running `sqlite3 test.db`.
  prefs: []
  type: TYPE_NORMAL
- en: Connecting to the database
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now, we will see how to connect to the database. For that, we are going to
    create a script. Python already has a `sqlite3` module included in the standard
    library. We just have to import it whenever we are going to work with SQLite.
    Create a `connect_database.py` script and write the following content in it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the script and you will get the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding example, we imported the `sqlite3` module to perform the functionality.
    Now, check your directory and you will find the `test.db` file created in your
    directory.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a table
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now, we are going to create a table in our database. For that, we will create
    a `create_table.py` script and write the following content in it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the script and you will get the output as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding example, we created a table books using a `CREATE TABLE` statement.
    First, we established a connection with our database using `test.db`. Next, we
    created a cursor object that we used to execute the SQL query on our database.
  prefs: []
  type: TYPE_NORMAL
- en: Inserting the data
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now, we will insert the data into our table. For that, we will create a `insert_data.py`
    script and write the following content in it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the script and you will get the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding example, we inserted some data into our table. For that, we
    used `insert` in the SQL statement. By using `commit()`, we are telling the database
    to save all the current transactions.
  prefs: []
  type: TYPE_NORMAL
- en: Retrieving the data
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now, we are going to retrieve the data from the table. For that, create a `retrieve_data.py`
    script and write the following content in it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the script and you will get the output as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding example, we imported the `sqlite3` module. Next, we connected
    with our `test.db` database . To retrieve the data, we used the `select` statement.
    And, last, we printed the retrieved data.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can also retrieve the data in the `sqlite3` console. For that, start the
    SQLite console first and then retrieve the data as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: Updating the data
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We can update the data from our table using the `update` statement. Now, we
    are going to see an example of updating data. For that, create a `update_data.py`
    script and write the following content in it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the script and you will get the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, to check that the data is actually updated or not, you can run `retrieve_data.py`,
    or else you can go to the SQLite console and run `select * from books;`. You will
    get the updated output as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: Deleting the data
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now, we will see an example of deleting data from a table. We are going to
    do this using the `delete` statement. Create a `delete_data.py` script and write
    the following content in it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the script and you will get the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: 'In the preceding example, we deleted a record from a table. We used the `delete`
    SQL statement. Now, to check whether the data is deleted successfully or not,
    run `retrieve_data.py` or start the SQLite console, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: 'You can see the record whose author was `john smith` is deleted:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we learned about MySQL as well as SQLite database administration.
    We created databases and tables. We then inserted a few records in tables. Using
    the `select` statement, we retrieved the records. We also learned about updating
    and deleting the data.
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: What is database used for?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What is CRUD in a database?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Can we connect a remote database? If yes, explain with an example.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Can we write triggers and procedures inside Python code?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What are DML and DDL statements?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Using PyMySQL library: [http://zetcode.com/python/pymysql/](http://zetcode.com/python/pymysql/)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: MySQLdb, a Python connection guide: [https://mysqlclient.readthedocs.io/](https://mysqlclient.readthedocs.io/)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The DB-API 2.0 interface for SQLite databases: [https://docs.python.org/3/library/sqlite3.html](https://docs.python.org/3/library/sqlite3.html)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
