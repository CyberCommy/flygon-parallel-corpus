- en: Putting It All Together
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: For our final act, we will get T.A.R.A.S to respond to control signals sent
    using MQTT from a JavaScript client. We will do this by modifying the code we
    have wrote up to this point. If you have been reading this book from the start,
    thank you for your perseverance. It has been a long journey to get here. We have
    finally made it. By the end of this chapter, we will have finished building the
    ultimate in IoT devices, an internet-controlled robot car.
  prefs: []
  type: TYPE_NORMAL
- en: Buckle up (pun intended)—it's time to take T.A.R.A.S to the next level.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter we will cover following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Build a JavaScript client to connect to our Raspberry Pi
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: JavaScript client to access our Robot Carʼs sensory data
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Enhance our JavaScript client to control our Robot Car
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Project overview
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will connect T.A.R.A.S to an MQTT Broker. Through the MQTT
    messages, we will control the movement of T.A.R.A.S as well as read from the distance
    sensor on T.A.R.A.S. The following is a diagram of what we are going to build:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/81f1811c-9a9e-42f9-b355-e13691cbb16d.png)'
  prefs: []
  type: TYPE_IMG
- en: We will start off by writing the HTML JavaScript Client (shown as **HTML Client**
    in the diagram) and use it to send and receive MQTT messages. We will then turn
    our attention to writing code on T.A.R.A.S to send and receive messages from the
    same MQTT Broker. We will use these messages to control T.A.R.A.S using a browser.
    Finally, we will livestream video from T.A.R.A.S using a browser as well.
  prefs: []
  type: TYPE_NORMAL
- en: This project should take half a day to complete.
  prefs: []
  type: TYPE_NORMAL
- en: Getting started
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To complete this project, the following will be required:'
  prefs: []
  type: TYPE_NORMAL
- en: A Raspberry Pi model 3 (2015 model or newer)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A USB power supply
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A computer monitor
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A USB keyboard
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A USB mouse
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A T.A.R.A.S robot car
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Building a JavaScript client to connect to our Raspberry Pi
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The following is a screenshot of the HTML JavaScript client we will build to
    control T.A.R.A.S over the network. The HTML JavaScript client won''t win any
    design awards, but it will serve as an excellent learning platform for sending
    robot control information over the internet:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/03b0f1b6-f68b-4d53-9ada-0d5ad736a6c1.png)'
  prefs: []
  type: TYPE_IMG
- en: The big purple buttons are used to send `Forward` and `Backwards` commands to
    T.A.R.A.S. The smaller green buttons send `Turn Left` and `Turn Right` control
    information to T.A.R.A.S. The small silver buttons at the bottom allow us to take
    a picture using the camera from T.A.R.A.S, set off an alarm on T.A.R.A.S, and
    make T.A.R.A.S dance. The `Track Distance` button connects the HTML JavaScript
    client to distance information coming from T.A.R.A.S.
  prefs: []
  type: TYPE_NORMAL
- en: We will track control information using the dashboard in CloudMQTT before we
    build a Python MQTT client for our Raspberry Pi.
  prefs: []
  type: TYPE_NORMAL
- en: Writing the HTML code
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We will start by writing the HTML code for our HTML JavaScript client. You
    may use a computer other than the Raspberry Pi:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a `project` folder on your computer and call it `HTML JavaScript Client`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Copy the Paho JavaScript library from [Chapter 17](b44cb570-263b-4f0b-9c3f-8efd9ace1e8a.xhtml), *Building
    the JavaScript Client*, into the `project` folder
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Using your favorite HTML editor, create a file called `index.html` and save
    it inside the folder you created in *step 1*
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Type the following into `index.html` and save it again:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Before we can view `index.html` in a browser, we must create a `.css` file
    for the styles. We will also create a folder for our JavaScript file:'
  prefs: []
  type: TYPE_NORMAL
- en: In your `project` folder, create a new folder and call it `styles`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create another folder in the `project` folder and call it `scripts`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Your `project` directory should look the same as the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/285b49bd-af91-4b65-a64a-2e12ece753d9.png)'
  prefs: []
  type: TYPE_IMG
- en: Inside the `styles` folder, create a file called `styles.css` using an HTML
    editor
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Type the following into the `styles.css` file and save it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Open up a browser and navigate to the `index.html` file in the `project` folder
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You should see the T.A.R.A.S robot car control dashboard
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Before we add the JavaScript code, let''s take a look at what we just wrote.
    We will start off by importing the resources we need. We will need the Paho MQTT
    library, an `index.js` file (which we haven''t wrote yet), and our `styles.css`
    file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'We will then create a series of buttons which we will tie to functions in our
    soon-to-be-written `index.js` JavaScript file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Since our buttons are pretty much similar, we will only discuss the first one.
    The first button is tied to the `moveForward` function in our JavaScript file
    through the `onclick` property. The style of the button is set by assigning `class`
    to `big_button`. We use the first button to move T.A.R.A.S forward.
  prefs: []
  type: TYPE_NORMAL
- en: Writing the JavaScript code to communicate with our MQTT Broker
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now that we have our HTML and CSS files, let''s create the JavaScript file
    that will make the magic of MQTT happen:'
  prefs: []
  type: TYPE_NORMAL
- en: Inside the `scripts` folder, create a file called `index.js` using an HTML editor.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Type the following into the `index.js` file and save it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: I have left the values of my CloudMQTT instance in the code. Just as we did
    in [Chapter 17](b44cb570-263b-4f0b-9c3f-8efd9ace1e8a.xhtml), *Building the JavaScript
    Client*, replace those values with the ones from your instance (`Server`, `Websockets
    Port`, `userName`, `password`).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Navigate back to `index.html` in your browser and refresh the page.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'We now have our HTML JavaScript client in place. What we have essentially done
    is modify the `index.js` code from [Chapter 17](b44cb570-263b-4f0b-9c3f-8efd9ace1e8a.xhtml), *Building
    the JavaScript Client*, so that we may send control messages to our MQTT Broker
    and ultimately our robot car:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: We have changed the code in the previous example. The `moveForward` function
    creates a Paho MQTT Client named `client` with `Server` and `Websockets Port`
    connection information taken from our CloudMQTT instance. A callback handler to
    handle when the connection is lost is set to the `onConnectionLost` function.
    The `options` variable is created using our `userName` and `password` information,
    which was taken from our CloudMQTT instance. We set a successful connection to
    the MQTT Broker to the `sendMoveForwardMessage` function. We then connect to our
    client by passing in the `options` variable.
  prefs: []
  type: TYPE_NORMAL
- en: The `sendMoveForwardMessage` function creates a new Paho MQTT message called
    `Forward`. This message is then assigned to the `RobotControl` topic and sent
    using our Paho MQTT Client object, `client`.
  prefs: []
  type: TYPE_NORMAL
- en: Functions to send messages to move backwards, turn right, turn left, take a
    picture, set off an alarm, and dance are written in a similar way to the `moveForward`
    function.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now that we have the HTML JavaScript client for controlling T.A.R.A.S over
    the web built, let''s test it out using the `WEBSOCKETS UI` page on our CloudMQTT
    instance:'
  prefs: []
  type: TYPE_NORMAL
- en: Navigate back to your CloudMQTT account.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the instance where you obtained the server, user, password, and web sockets
    port connection information (in [Chapter 17](b44cb570-263b-4f0b-9c3f-8efd9ace1e8a.xhtml),
    *Building the JavaScript Client*, we created the instance called `T.A.R.A.S`).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the WEBSOCKETS UI menu option on the left-hand side. You should get
    a notice on the right-hand side indicating a successful connection.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Navigate back to `index.html` and click on the Forward button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now, navigate back to your CloudMQTT instance. You should see a new message
    in the `Received messages` list:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/d27aef97-918d-4ec1-b8fa-ed685f711ea6.png)'
  prefs: []
  type: TYPE_IMG
- en: Congratulations! You have just connected a HTML JavaScript client to an MQTT
    Broker and sent a message. We will now develop another client on another device
    using a completely different programming language and then use that client to
    subscribe to the messages coming from our HTML JavaScript client.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a JavaScript client to access our robot car's sensory data
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `index.js` file we created contains functions that subscribe our HTML JavaScript
    client to the `distance` topic:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Similar to the code we wrote in [Chapter 17](b44cb570-263b-4f0b-9c3f-8efd9ace1e8a.xhtml),
    *Building the JavaScript Client*, the `subscribeDistanceData` function creates
    a Paho MQTT Client with the connection information from our CloudMQTT instance.
    Upon successful connection, the `onsubscribeDistanceDataSuccess` function is called,
    which subscribes `client` to the `distance` topic.
  prefs: []
  type: TYPE_NORMAL
- en: An alert is also created, telling us that the HTML JavaScript client is now
    subscribed to the `distance` topic.
  prefs: []
  type: TYPE_NORMAL
- en: Writing the code for T.A.R.A.S
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We will now turn our attention back to our Raspberry Pi robot car and write
    Python code to communicate with our MQTT Broker and ultimately our HTML JavaScript
    client. The following code should be run directly from T.A.R.A.S. If you''d like
    to run T.A.R.A.S without tethers, use the USB power supply to power the Raspberry
    Pi and disconnect the HDMI cable once the following program is run:'
  prefs: []
  type: TYPE_NORMAL
- en: Open up Thonny from Application Menu | Programming | Thonny Python IDE.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the New icon to create a new file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Type the following code into the file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Save the file as `MQTT-RobotControl.py`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Run the code from Thonny.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Navigate to the HTML JavaScript client and click on the Forward button:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/a3a9aa2f-9422-4ebf-9872-52f768cdc3d3.png)'
  prefs: []
  type: TYPE_IMG
- en: T.A.R.A.S should move forward for one second and then stop.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The small grey buttons at the bottom allow you to perform various tasks with
    T.A.R.A.S:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/4c7e63b9-3ddf-430a-80ea-19c0822004f3.png)'
  prefs: []
  type: TYPE_IMG
- en: Explore the functionality of each of these buttons by clicking on them. The
    `Take Picture` button will take a picture and store it in the filesystem, `T.A.R.A.S
    Alarm` will sound the alarm on T.A.R.A.S, and `T.A.R.A.S Dance` will make T.A.R.A.S
    dance.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'To subscribe to the `distance` data coming from the distance sensor on T.A.R.A.S,
    click on the Track Distance button:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/2cc958d7-a0e0-4e21-bd37-36ea31d9c59e.png)'
  prefs: []
  type: TYPE_IMG
- en: 'After clicking on the Track Distance button, you should see a popup that tells
    you that your HTML JavaScript client is now subscribed to the `distance` data:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/415dfa7a-89b4-48ad-8513-e091c2aa3d0e.png)'
  prefs: []
  type: TYPE_IMG
- en: Click Close to close out of the popup. You should now see distance data information
    from T.A.R.A.S displayed beside the Track Distance button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'As with all the code we have written so far, we write it to be as simple and
    self-explanatory as possible. At the heart of our code is the `watch_mode` method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: The `watch_mode` method is the default method in our code. It is called immediately
    after the code is run and is called whenever another method completes. In `watch_mode`,
    we need to create a MQTT client object called `mqttc` and then use it to connect
    to our CloudMQTT instance. From there, we set the `on_message` callback to the `on_message` method.
    We then subscribe to the `RobotControl` topic. The while loop that follows calls
    the `loop` method of our MQTT client, `mqttc`. Since we've set the `on_message`
    callback, any time a message is received from the `RobotControl` topic, the program
    is taken out of the while loop and the `on_message` method of our code is executed.
  prefs: []
  type: TYPE_NORMAL
- en: In `watch_mode`, the distance sensory information is published to the `distance`
    topic every 2 seconds. Since our HTML JavaScript client is set up to subscribe
    to messages on the `distance` topic, our HTML JavaScript client will update the
    `distance` information on the page every two seconds.
  prefs: []
  type: TYPE_NORMAL
- en: Livestreaming videos from T.A.R.A.S
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Amazing as it is to be able to control T.A.R.A.S from the web, it wouldn''t
    be of much use if we couldn''t see what what we were doing. Streaming live video
    from Raspberry Pi is actually quite simple if you install RPi-Cam-Web-Interface
    on your Raspberry Pi. Let''s do that now:'
  prefs: []
  type: TYPE_NORMAL
- en: If you do not have `git` installed on your Raspberry Pi, please install it with
    `sudo apt-get install git` from a Terminal.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Using the Terminal, get the installation files by running the `git clone https://github.com/silvanmelchior/RPi_Cam_Web_Interface.git` command.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Change directories with the `cd RPi_Cam_Web_Interface` command.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Run the installer with the `./install.sh` command.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'You should see the Configuration Options screen:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/721fe07d-1a6c-410b-9453-b884580c6170.png)'
  prefs: []
  type: TYPE_IMG
- en: Accept all the defaults by hitting *Tab* on your keyboard until the OK option
    is highlighted. Hit *Enter*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Select Yes when you see the Start camera system now dialog:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/61bcc260-0ba5-4de2-90f1-5a8dd2685c95.png)'
  prefs: []
  type: TYPE_IMG
- en: We are now ready to livestream video from our Raspberry Pi (T.A.R.A.S). On another
    computer, open a browser and type in the address `http://<<ip address of your
    raspberry pi>>/html` (use `ifconfig` on your Raspberry Pi in order to find your
    IP address; in my case, the URL for video streaming is `http://192.168.0.31/html`).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'You should now see the video streaming player load into your browser with live
    video from your Raspberry Pi. The following is a screenshot of the livestream
    from T.A.R.A.S in my office, looking up at my drones on display:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/2c0a7d4a-e9e2-493f-b74b-0585dc0461dd.png)'
  prefs: []
  type: TYPE_IMG
- en: The RPi-Cam-Web-Interface utility is an amazing tool. Take some time to experiment
    with the various options and functions that are available.
  prefs: []
  type: TYPE_NORMAL
- en: Enhancing our JavaScript client to control our robot car
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As we've mentioned already, our HTML JavaScript client is the most attractive
    of interfaces. I designed it to be as simple and straightforward as possible in
    order to explain various concepts. But what if we want to take it to another level?
    The following is a list of JavaScript libraries that may be used to enhance our
    HTML JavaScript client.
  prefs: []
  type: TYPE_NORMAL
- en: Nipple.js
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Nipple.js ([https://www.bypeople.com/touch-screen-joystick/](https://www.bypeople.com/touch-screen-joystick/))
    is a JavaScript touchscreen joystick library that may be used in the control of
    robots. Nipple.js is basically an onscreen version of pointing stick controls
    found on some laptops:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/279a34fc-8690-419e-a37f-3216132c51a3.png)'
  prefs: []
  type: TYPE_IMG
- en: If you are creating a JavaScript client for a touchscreen tablet or laptop,
    Nipple.js may be a good technology to build it on. Incorporating a technology
    such as Nipple.js into our design would require a fair bit of coding in order
    to translate the movements into messages that T.A.R.A.S would understand. A simple
    forward message might not suffice. The message may be something like `Forward-1-Left-2.3`
    and it would have to be parsed and information taken out to determine how the
    amount of time to turn the motor and which motors to move.
  prefs: []
  type: TYPE_NORMAL
- en: HTML5 Gamepad API
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Would you like to connect a physical joystick to control our robot car? You
    may do so with the HTML5 Gamepad API ([https://www.w3.org/TR/gamepad/](https://www.w3.org/TR/gamepad/)).
    With the HTML5 Gamepad API, you may utilize your standard gaming joystick in web
    applications you build. Controlling your robot car may be as easy as playing your
    favorite video game with a HTML5 Gamepad API.
  prefs: []
  type: TYPE_NORMAL
- en: Johnny-Five
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Johnny-Five ([http://johnny-five.io](http://johnny-five.io)) is a JavaScript
    Robotic and IoT platform. It is a completely different platform than what we have
    developed our robot car on. Now that we have built our robot car from scratch
    and have coded our control code by hand, we may be interested in trying something
    new. Johnny-Five may be that next technology you decide to become an expert in.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We've have done it! We've reached the end of our Raspberry Pi Internet of Things
    journey. In this chapter, we brought what we've learned together and created our
    own HTML JavaScript client that we used to control T.A.R.A.S using a web page.
    Our use of classes to control T.A.R.A.S made creating the control code relatively
    easy as we only had to call methods on the classes and not create control code
    from scratch.
  prefs: []
  type: TYPE_NORMAL
- en: We touched briefly on how easy it is to stream live video from our Raspberry
    Pi. Although we did all of this to control a robot car over our network, it is
    not too hard to imagine how we may use what we've learned to build any number
    of different IoT projects using Raspberry Pi.
  prefs: []
  type: TYPE_NORMAL
- en: We live in a very exciting time. Any one of us may build the next killer app
    using only our intellect and a few relatively inexpensive electronic components.
    If anything, I hope that I was able to inspire you to use the amazing Raspberry
    Pi computer to build your next great project.
  prefs: []
  type: TYPE_NORMAL
- en: For those who are questioning how we may view this as an Internet of Things
    project when we are only using our local network, please do some research into
    how you can open up ports on your router to the outside world. This is not a task
    that should be taken lightly, though, as there are security concerns that you
    must address whenever you do something like that. Please note, too, however, that
    your Internet Service Provider may not be giving you a static IP address and thus
    anything you build to access your network from the outside will break every time
    your IP address changes (I once built a PHP page that checked my IP address periodically,
    stored the latest address, and had outside clients which would go to that PHP
    for the address instead of having it hardcoded).
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Which topic do we publish control-type messages to in our project?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: True or false? MQTT Broker and MQTT Server are words used to describe the same
    thing.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: True or false? T.A.R.A.S publishes and subscribes on the same MQTT topic.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What color are the big forward and backwards buttons in our HTML JavaScript
    client?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: True or false? Using the HTML JavaScript client, we are able to remotely take
    a picture using the camera on T.A.R.A.S.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What is the name of the MQTT topic we use to subscribe to distance data coming
    from T.A.R.A.S?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: True or false? Our HTML JavaScript client incorporates an award-winning UI design.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: True or false? Using our CloudMQTT account, we are able to view published messages
    in our instance.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What is the name of the technology we use to livestream video from T.A.R.A.S?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: True or false? Johnny-Five is the name of a new fruit drink created by the Coca-Cola
    company.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We glossed over the RPi-Cam-Web-Interface web interface briefly when we set
    up live streaming on T.A.R.A.S. This web interface is quite amazing and a more in-depth
    understanding of it will only enhance our grasp of all of the things Raspberry
    Pi is capable of. Please visit [https://elinux.org/RPi-Cam-Web-Interface](https://elinux.org/RPi-Cam-Web-Interface)
    for more information.
  prefs: []
  type: TYPE_NORMAL
