- en: Day 08 - Test Your Skills – Build a Real-World Application
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'On the seventh day, we went through the OOP concepts in C# 7.0\. With the understanding
    of OOP concepts, our journey of this learning series needs a hands-on, practical,
    and real-world application, and this is the reason we are here. Today is our revision
    day of the seven-day learning series. In the past seven days, we learned a lot
    of stuff, including the following:'
  prefs: []
  type: TYPE_NORMAL
- en: .NET Framework and .NET Core
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Basic C# concepts, including statements, loops, classes, structures, and so
    on
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Advanced C# concepts, including delegates, generics, collections, file handling,
    attributes, and so on
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The new features of C# 7.0 and C# 7.1
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In the last seven days, we covered the aforementioned topics in detail, with
    the help of code snippets, and we discussed the code in detail. We started with
    the very basic concepts on Day 1, covered the intermediate stuff on Day 2 and
    Day 3, and then gradually went through advanced topics with code explanations.
  prefs: []
  type: TYPE_NORMAL
- en: 'Today, we will revisit everything and build a real-world application in C#
    7.0\. Here are the steps we will follow to complete the application:'
  prefs: []
  type: TYPE_NORMAL
- en: Discussing the requirements of our application.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Why are we developing this application?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Getting started with application development:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Prerequisites
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The database design
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Discussing the basic architecture
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Why are we developing this application?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Our application will be based on India's GST taxation system ([http://www.gstn.org/](http://www.gstn.org/)).
    In India, this system has been recently announced and there is a heavy demand
    in the industry to adopt it as soon as possible. This is the right time to create
    a real-world application that gives us a practical experience.
  prefs: []
  type: TYPE_NORMAL
- en: 'Discussing the requirements of our application:'
  prefs: []
  type: TYPE_NORMAL
- en: 'In this section, we will discuss our application and lay it out. First of all,
    let''s decide a name for our application; let''s call it *FlixOneInvoicing*—a
    system that generates invoices. As discussed in the previous section, today''s
    industry needs a system that can fulfill its demand to entertain all the parts
    of GST that we are demonstrating with the help of our example of GST-based application
    to . Here are the main requirements of the system:'
  prefs: []
  type: TYPE_NORMAL
- en: The system should be company-specific, and the company should be configurable
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The company can have multiple addresses (registered and shipping addresses may
    be different)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The company can be an individual or a registered entity
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The system should have client/customer features
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The system should support both service and goods industries
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The system should follow Indian GST rules
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The system should have a reports capability
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The system should have basic operations such as add, update, delete, and so
    on
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The aforementioned high-level requirements give us an idea of the kind of system
    we are going to develop. In the coming sections, we will develop an application
    based on these requirements.
  prefs: []
  type: TYPE_NORMAL
- en: Getting started with application development
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous sections, we discussed why we are going to develop this application
    and why it is required, as per industry demands. We also discussed the basic system
    requirements, and we laid out the system theoretically so that when we start with
    the actual coding, we can follow all these rules/requirements. In this section,
    we will start the actual development.
  prefs: []
  type: TYPE_NORMAL
- en: Prerequisites
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To start the development of this application, we need the following as prerequisites:'
  prefs: []
  type: TYPE_NORMAL
- en: Visual Studio 2017 update 3 or later
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: SQL Server 2008 R2 or later
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: C# 7.0 or later
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ASP.NET Core
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Entity Framework Core
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The database design
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To perform the database design, you should have a basic knowledge of the SQL
    Server and the core concepts of database. The following resources may be helpful
    if you want to learn database concepts:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://www.codeproject.com/Articles/359654/important-database-designing-rules-which-I-fo](https://www.codeproject.com/Articles/359654/important-database-designing-rules-which-I-fo)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://www.packtpub.com/big-data-and-business-intelligence/sql-server-2016-developer-guide](https://www.packtpub.com/big-data-and-business-intelligence/sql-server-2016-developer-guide)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[http://www.studytonight.com/dbms/database-normalization.php](http://www.studytonight.com/dbms/database-normalization.php)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: On the basis of the basic business requirements that we discussed in the previous
    section for laying our system out, let's design a complete database so that we
    can save the important application data.
  prefs: []
  type: TYPE_NORMAL
- en: Overview
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We need to develop our database in such a way that it should work on the basis
    of *single system, multiple companies*. The *single system, multiple companies*
    feature will enable our system to work within a corporate structure, where the
    company has multiple branches with one head office and separate users to maintain
    the system for other branches.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this section, we will discuss following database diagram:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00123.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: As per our requirements, our system is meant for multiple companies, which means
    that every company will have its own configuration, users, customers, and invoices.
    For example, if two different companies (*abc* and *xyz*) use the same system,
    then the users of *abc* can only access the information of *abc*.
  prefs: []
  type: TYPE_NORMAL
- en: The current system does not follow B2B or B2C categories.
  prefs: []
  type: TYPE_NORMAL
- en: Let's analyze the previous database diagram to understand the relational hierarchy
    in action. The **Company** table is referenced by the **User** table so that a
    user is specific to a company only. The **Address** table stands out of the **Company**
    and **Customer** tables, and is referenced by both the tables. Having the **Address**
    table refer to the **Company** and **Customer** tables allows us to have more
    than one address for each one of them.
  prefs: []
  type: TYPE_NORMAL
- en: The master data for countries and states is stored in the **Country** and **State**
    tables, respectively. The state can only belong to a specific country and, therefore,
    refers to the **Country** table accordingly.
  prefs: []
  type: TYPE_NORMAL
- en: We arrange our tables in this way to achieve normalization. Refer to [http://searchsqlserver.techtarget.com/definition/normalization](http://searchsqlserver.techtarget.com/definition/normalization)
    in order to understand the concept of normalization in a database.
  prefs: []
  type: TYPE_NORMAL
- en: 'Discussing the schema and table:'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the previous section, we got an overview of our database design. Let''s
    discuss the important tables and their usage in the system:'
  prefs: []
  type: TYPE_NORMAL
- en: '**User**: This table contains all the data related to *users* across the companies.
    These are the users who can operate on the system. This table holds the user information;
    **companyid** is a foreign key with the **Company** table, and it provides a relation
    between the **User** and **Company** tables to instruct the system that a particular
    user is meant for a specific company:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/00124.gif)'
  prefs: []
  type: TYPE_IMG
- en: '**Company**: This table contains all the information related to the company
    and stores the **name** and **GSTN** fields. The **GSTN** field is blank, if the
    company is not a registered company for GSTN. There is a foreign key relationship
    with the **Address** table, as one company may have multiple addresses. So, the
    the **Company** and **Address** tables exhibit a one-to-many relationship:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/00125.gif)'
  prefs: []
  type: TYPE_IMG
- en: '**Customer**: This table contains all the information related to a customer,
    including **Name** and **GSTN.** The **GSTN** field is blank, as an individual
    would not be registered for **GSTN.** This table also has a relationship with
    the **Address** table:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/00126.gif)'
  prefs: []
  type: TYPE_IMG
- en: '**Address**: This table contains all the information related to the company
    or customer addresses, which may be multiple:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/00127.gif)'
  prefs: []
  type: TYPE_IMG
- en: '**Invoice and InvoiceDetails**: These tables are transactional tables. The
    **Invoice** table contains all the details that are required to create an invoice,
    and the **InvoiceDetails** table contains the complete details of items/transactions
    for a specific invoice:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/00128.gif)'
  prefs: []
  type: TYPE_IMG
- en: '**Country and State**: These tables store the master record data. This data
    will not change, and no system transaction can affect the data stored in these
    two tables. As of now, these two tables contain the master data specific to India:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/00129.gif)'
  prefs: []
  type: TYPE_IMG
- en: As per our initial requirements, the preceding tables are fine; we can add/update
    the tables as and when we get more or updated requirements. The system is meant
    for updates.
  prefs: []
  type: TYPE_NORMAL
- en: You can refer to `Database_FlixOneInvoice.sql` for the complete database schema
    and master data that is available on GitHub repository [<url>] in Day-08.
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, we will discuss system architecture and the actual code
    that we are going to write.
  prefs: []
  type: TYPE_NORMAL
- en: Discussing the basic architecture
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we will discuss the basic architecture of our application;
    we will not discuss design patterns and other architecture-related stuff, which
    are beyond the scope of this book.
  prefs: []
  type: TYPE_NORMAL
- en: To understand design patterns, refer to [https://www.questpond.com/demo.html#designpattern](https://www.questpond.com/demo.html#designpattern).
  prefs: []
  type: TYPE_NORMAL
- en: As mentioned in the prerequisites, our application will be based on ASP.NET
    Core, which consumes the RESTful API. This is just a basic version, so we are
    not going to show too much implementation of the design patterns. The following
    image gives a schematic overview of our Visual Studio solution. We have a presentation
    and domain, you can split these layers to more layers to define business workflow.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00130.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: I wrote the actual code using C# 7.0; the application covers whatever we discussed
    on Day 7.
  prefs: []
  type: TYPE_NORMAL
- en: 'Complete application is shipped with this chapter on GitHub: <<Link>>'
  prefs: []
  type: TYPE_NORMAL
- en: In this section, we will cover the main code snippets of whatever we learned
    up to Day 7\. Download the complete application, open the solution in Visual Studio,
    and then visit the code. Relate the code with everything that you learned in this
    seven-day journey. For instance, see where we have used inheritance, encapsulation,
    and so on. Try to visualize the concepts we discussed in this book. You will be
    able to connect each and every statement of code written for our application.
  prefs: []
  type: TYPE_NORMAL
- en: Revisiting day 08
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This is the revision day of our book. Of course, this is the last chapter of
    the book, but this is just the beginning for you to start exploring more C#-related
    stuff. On this day, we developed an application based on the Indian GST system.
    With the help of this application, we revisited all that you learned in this seven-day
    learning series, including attributes, reflections, C# 7.0 features, and so on.
  prefs: []
  type: TYPE_NORMAL
