- en: Chapter 1. Ecosystem Overview
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第1章 生态系统概述
- en: It has been more than two decades now since the birth of PHP. Originally created
    by Rasmus Lerdorf in 1994, the PHP acronym initially stood for **Personal Home
    Page**. Back then, PHP was merely a few **Common Gateway Interface** (**CGI**)
    programs in C, used to power a simple web page.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 自PHP诞生以来已经过去了二十多年。最初由Rasmus Lerdorf于1994年创建，PHP首字母缩略词最初代表**个人主页**。当时，PHP只是用于支持简单网页的几个**公共网关接口**（**CGI**）程序。
- en: 'Though PHP was not intended to be a new programming language, the idea caught
    on. During the late nineties Zeev Suraski and Andi Gutmans, co-founders of Zend
    Technologies, continued the work on PHP by rewriting its entire parser, giving
    birth to PHP 3\. The PHP language name acronym now stood for **PHP: Hypertext
    Preprocessor**.'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管PHP并不打算成为一种新的编程语言，但这个想法却得到了认可。在90年代末，Zend Technologies的联合创始人Zeev Suraski和Andi
    Gutmans通过重写整个解析器继续了PHP的工作，从而诞生了PHP 3。PHP语言名称首字母缩略词现在代表**PHP：超文本预处理器**。
- en: PHP positions itself among the top ten programming languages in the world. According
    to TIOBE, the software quality company, it currently holds sixth place. For the
    last decade, especially since the release of PHP 5 in July 2004, PHP has been
    recognized as the popular solution for building web applications.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: PHP将自己定位在世界前十大编程语言之中。根据软件质量公司TIOBE的数据，它目前排名第六。特别是自2004年7月发布PHP 5以来的最后十年中，PHP一直被认为是构建Web应用程序的热门解决方案。
- en: Though PHP still presents itself as a scripting language, it's safe to say that
    as of PHP 5 it is far more than that. Some of the world web's most popular platforms
    like WordPress, Drupal, Magento, and PrestaShop are built in PHP. It is projects
    like these that played a role in further raising the popularity of PHP. Some of
    them stretch the boundaries of PHP by implementing complex OOP (Object Oriented
    Programming) design patterns found in other programming languages like Java, C#,
    and their frameworks.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管PHP仍然表现为一种脚本语言，但可以肯定的是，自PHP 5以来，它已经远远超出了这一范畴。像WordPress、Drupal、Magento和PrestaShop等世界上最受欢迎的平台都是用PHP构建的。正是这些项目进一步提高了PHP的受欢迎程度。其中一些项目通过实现其他编程语言（如Java、C＃）和它们的框架中找到的复杂OOP（面向对象编程）设计模式来拓展PHP的边界。
- en: Even though PHP 5 had decent OOP support, lots of things were still left to
    be dreamed of. Work on PHP 6 was planned to give more support for the PHP Unicode
    strings. Sadly, its development came to a halt and PHP 6 was canceled in 2010.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管PHP 5具有不错的面向对象编程（OOP）支持，但仍有许多事情有待实现。PHP 6的工作计划是为PHP Unicode字符串提供更多支持。遗憾的是，它的开发停滞不前，PHP
    6在2010年被取消了。
- en: That same year, Facebook announced its HipHop compiler. Their compiler was converting
    PHP code into C++ code. The C++ code was further compiled into native machine
    code via a C++ compiler. This concept brought major performance improvements for
    PHP. However, this approach was not very practical, because it took too long to
    compile PHP scripts all the way to native machine code.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 同年，Facebook宣布了他们的HipHop编译器。他们的编译器将PHP代码转换为C++代码。然后通过C++编译器将C++代码进一步编译成本机代码。这个概念为PHP带来了重大的性能改进。然而，这种方法并不是很实用，因为将PHP脚本编译成本机代码太耗时。
- en: Shortly after, Dmitry Stogov, Zend Technologies Chief Performance Engineer,
    announced a project called **PHPNG**, which became the basis for the next PHP
    version, PHP 7.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 不久之后，Zend Technologies首席性能工程师Dmitry Stogov宣布了一个名为**PHPNG**的项目，这成为了下一个PHP版本PHP
    7的基础。
- en: 'In Dec 2015, PHP 7 was released, bringing numerous improvements and new features:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 2015年12月，PHP 7发布，带来了许多改进和新功能：
- en: New version of the Zend Engine
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Zend Engine的新版本
- en: Improved performance (twice as fast as PHP 5.6)
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 性能提升（比PHP 5.6快两倍）
- en: Significantly reduced memory usage
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 显著减少的内存使用
- en: Abstract Syntax Tree
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 抽象语法树
- en: Consistent 64-bit support
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一致的64位支持
- en: Improved exception hierarchy
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 改进的异常层次结构
- en: Many fatal errors converted to exceptions
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 许多致命错误转换为异常
- en: Secure random number generator
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安全随机数生成器
- en: Removed old and unsupported SAPIs and extensions
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 删除了旧的和不受支持的SAPI和扩展
- en: The null coalescing operator
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 空合并运算符
- en: Return and Scalar type declarations
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 返回和标量类型声明
- en: Anonymous classes
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 匿名类
- en: Zero cost asserts
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 零成本断言
- en: 'In this chapter, we will look at the following topics:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将讨论以下主题：
- en: Getting ready for PHP 7
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为PHP 7做好准备
- en: Frameworks
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 框架
- en: Getting ready for PHP 7
  id: totrans-25
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为PHP 7做好准备
- en: PHP 7 comes with quite a big list of changes. These changes affect both the
    PHP interpreter and the various extensions and libraries. Though most of the PHP
    5 code will continue to operate normally on the PHP 7 interpreter, it is worth
    getting up to speed with the newly available features.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: PHP 7带来了一系列重大变化。这些变化影响了PHP解释器以及各种扩展和库。尽管大多数PHP 5代码在PHP 7解释器上仍将继续正常运行，但了解新提供的功能是值得的。
- en: Moving forward, we will look into some of these features and the benefits they
    provide.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将研究其中一些功能及其提供的好处。
- en: Scalar type hints
  id: totrans-28
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 标量类型提示
- en: Scalar type hints are not an entirely new feature in PHP. With the introduction
    of PHP 5.0 we were given the ability to type hint classes and interfaces. PHP
    5.1 extended this by introducing array type hinting. Later on, with PHP 5.4, we
    were additionally given the ability to type hint callable. Finally, PHP 7 introduced
    scalar type hints. Extending the type hints to scalars makes this probably one
    of the most exciting features added to PHP 7.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 标量类型提示在PHP中并不是一个全新的功能。随着PHP 5.0的引入，我们获得了对类和接口的类型提示的能力。PHP 5.1通过引入数组类型提示来扩展了这一功能。随后，PHP
    5.4还额外增加了对可调用类型的提示。最后，PHP 7引入了标量类型提示。将类型提示扩展到标量使得这可能是PHP 7中添加的最令人兴奋的功能之一。
- en: 'The following scalar type hints are now available:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 现在可用的标量类型提示如下：
- en: '`string`: Strings (for example, `hello`, `foo`, and `bar`)'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`string`：字符串（例如，`hello`，`foo`和`bar`）'
- en: '`int`: Integer numbers (for example, `1`, `2`, and `3`)'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`int`：整数（例如，`1`，`2`和`3`）'
- en: '`float`: Floating point numbers (for example, `1.2`, `2.4`, and `5.6`)'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`float`：浮点数（例如，`1.2`，`2.4`和`5.6`）'
- en: '`bool`: Boolean values (for example, `true` or `false`)'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`bool`：布尔值（例如，`true`或`false`）'
- en: By default, PHP 7 works in weak *type-checking* mode, and will attempt to convert
    to the specified type without complaint. We can control this mode using the `strict_typesdeclare()`
    directive.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，PHP 7以弱*类型检查*模式工作，并将尝试转换为指定类型而不投诉。我们可以使用`strict_typesdeclare()`指令来控制这种模式。
- en: 'The `declare(strict_types=1);` directive must be the first statement in a file,
    or else it will generate a compiler error. It only affects the specific file it
    is used in, and does not affect other included files. The directive is entirely
    compile-time and cannot be controlled at runtime:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: '`declare(strict_types=1);`指令必须是文件中的第一条语句，否则会生成编译器错误。它只影响它所在的特定文件，并不影响其他包含的文件。该指令完全是编译时的，不能在运行时控制。'
- en: '[PRE0]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Let's assume the following simple function that accepts hinted scalar types.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 假设以下是一个接受标量类型提示的简单函数。
- en: '[PRE1]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The weak type-checking rules for the new scalar type declarations are mostly
    the same as those of extensions and built-in PHP functions. Because of this automated
    conversion we might unknowingly lose data when passing it into a function. One
    simple example is passing a float into a function that requires an int; in which
    case conversion would simply strip away decimals.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 新标量类型声明的弱类型检查规则大多与扩展和内置PHP函数的规则相同。由于这种自动转换，当将数据传递给函数时，我们可能会不知不觉地丢失数据。一个简单的例子是将浮点数传递给需要整数的函数；在这种情况下，转换将简单地去掉小数部分。
- en: 'Assuming the weak type-checking is on, as by default, the following can be
    observed:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 假设弱类型检查是打开的，默认情况下，可以观察到以下情况：
- en: '[PRE2]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: We can see that the first function call passes on parameters as they are hinted.
    The second function call does not pass the exact types of parameters but still
    the function manages to execute as parameters go through conversion.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到第一个函数调用按照提示传递参数。第二个函数调用并没有传递确切类型的参数，但函数仍然能够执行，因为参数经过了转换。
- en: 'Assuming the weak type-checking is off, by using the `declare(strict_types=1);`
    directive, the following can be observed:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 假设弱类型检查关闭，通过使用`declare(strict_types=1);`指令，可以观察到以下情况：
- en: '[PRE3]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The function call broke on the first argument resulting in the `\TypeError`
    exception. The `strict_types=1` directive does not allow any type juggling. The
    parameter has to be of the same type, as hinted by the function definition.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 函数调用在第一个参数上中断，导致`\TypeError`异常。`strict_types=1`指令不允许任何类型转换。参数必须与函数定义提示的类型相同。
- en: Return type hints
  id: totrans-47
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 返回类型提示
- en: In addition to type hinting, we can also type hint the return *values*. All
    of the type hints that can be applied to function parameters can be applied to
    function return values. This also implies to the weak type-checking rules.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 除了类型提示，我们还可以对返回*值*进行类型提示。所有可以应用于函数参数的类型提示都可以应用于函数返回值。这也适用于弱类型检查规则。
- en: 'To add a return type hint, simply follow the parameter list with a colon and
    the return type, as shown in the following example:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 要添加返回类型提示，只需在参数列表后面加上冒号和返回类型，如下例所示：
- en: '[PRE4]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: The preceding function definition says that the `divide` function expects two
    parameters of the `int` type, and is supposed to return a parameter of the `int`
    type.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的函数定义表示`divide`函数期望两个`int`类型的参数，并且应该返回一个`int`类型的参数。
- en: 'Assuming the *weak type-checking* is on, as by default, the following can be
    observed:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 假设*弱类型检查*是打开的，默认情况下，可以观察到以下情况：
- en: '[PRE5]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Though the actual result of `divide(10, 3)`should be a float, the return type
    hint triggers conversion into an integer.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然`divide(10, 3)`的实际结果应该是一个浮点数，但返回类型提示会触发转换为整数。
- en: 'Assuming the weak type-checking is off, by using the `declare(strict_types=1);`
    directive, the following can be observed:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 假设弱类型检查关闭，通过使用`declare(strict_types=1);`指令，可以观察到以下情况：
- en: '[PRE6]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: With the `strict_types=1` directive in place, the `divide(10, 3)` fails with
    the `\TypeError` exception.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 在放置`strict_types=1`指令的情况下，`divide(10, 3)`会失败并抛出`\TypeError`异常。
- en: Tip
  id: totrans-58
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: Using scalar type hints and return type hints can improve our code readability
    as well as auto-complete features of IDE editors like NetBeans and PhpStorm.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 使用标量类型提示和返回类型提示可以提高我们的代码可读性，以及像NetBeans和PhpStorm这样的IDE编辑器的自动完成功能。
- en: Anonymous classes
  id: totrans-60
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 匿名类
- en: 'With the addition of anonymous classes, PHP objects gained closure-like capabilities.
    We can now instantiate objects through nameless classes, which brings us closer
    to object literal syntax found in other languages. Let''s take a look at the following
    simple example:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 随着匿名类的添加，PHP对象获得了类似闭包的能力。我们现在可以通过无名类实例化对象，这使我们更接近其他语言中的对象文字语法。让我们看一个简单的例子：
- en: '[PRE7]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'The preceding example shows an `$object` variable storing a reference to an
    instance of an anonymous class. The more likely usage would be to directly pass
    the new class to a function parameter, without storing it as a variable, as shown
    here:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的例子显示了一个`$object`变量存储了一个匿名类实例的引用。更可能的用法是直接将新类传递给函数参数，而不将其存储为变量，如下所示：
- en: '[PRE8]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Similar to any normal class, anonymous classes can pass arguments through to
    their constructors, extend other classes, implement interfaces, and use traits:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 与任何普通类一样，匿名类可以将参数传递给它们的构造函数，扩展其他类，实现接口，并使用特征：
- en: '[PRE9]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'The above example would output:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 上面的例子将输出：
- en: '[PRE10]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: The internal name of an anonymous class is generated with a unique reference
    based on its address.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 匿名类的内部名称是根据其地址生成的唯一引用。
- en: There is no definitive answer as to when to use anonymous classes. It depends
    almost entirely on the application we are building, and the objects, depending
    on their perspective and usage.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 关于何时使用匿名类并没有明确的答案。这几乎完全取决于我们正在构建的应用程序，以及对象，根据它们的视角和用法。
- en: 'Some of the benefits of using anonymous classes are as follows:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 使用匿名类的一些好处如下：
- en: Mocking application tests becomes trivial. We can create on-the-fly implementations
    for interfaces, avoiding using complex mocking APIs.
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 模拟应用程序测试变得微不足道。我们可以为接口创建临时实现，避免使用复杂的模拟API。
- en: Avoid invoking the autoloader every so often for simpler implementations.
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 避免为了更简单的实现而经常调用自动加载程序。
- en: Makes it clear to anyone reading the code that this class is used here and nowhere
    else.
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 清楚地告诉任何阅读代码的人，这个类在这里使用，而不是其他地方。
- en: 'Anonymous classes, or rather objects instantiated from anonymous classes, cannot
    be serialized. Trying to serialize them results in a fatal error as follows:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 匿名类，或者说从匿名类实例化的对象，不能被序列化。尝试对它们进行序列化会导致致命错误，如下所示：
- en: '[PRE11]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Nesting an anonymous class does not give it access to private or protected
    methods and properties of the outer class. In order to use the outer class protected
    methods and properties, the anonymous class can extend the outer class. Ignoring
    methods, private or protected properties of the outer class can be used in the
    anonymous class if passed through its constructor:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 嵌套的匿名类不能访问外部类的私有或受保护的方法和属性。为了使用外部类的受保护方法和属性，匿名类可以扩展外部类。忽略方法，外部类的私有或受保护属性可以在匿名类中使用，如果通过其构造函数传递：
- en: '[PRE12]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Though we labeled them as anonymous classes, they are not really anonymous in
    terms of the internal name the PHP engine assigns to objects instantiated from
    these classes. The internal name of an anonymous class is generated with a unique
    reference based on its address.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管我们将它们标记为匿名类，但从这些类实例化的对象的内部名称实际上并不是匿名的。匿名类的内部名称是根据其地址生成的唯一引用。
- en: The statement `get_class(new class{});` would result in something like `class@anonymous/php7.php0x7f33c22381c8`,
    where `0x7f33c22381c8` is the internal address. If we were to define the exact
    same anonymous class elsewhere in the code, its class name would be different
    as it would have a different memory address assigned. The resulting object in
    that case might have the same property values, which means they will be equal
    (`==`) but not identical (`===`).
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 语句`get_class(new class{});`将导致类似`class@anonymous/php7.php0x7f33c22381c8`的结果，其中`0x7f33c22381c8`是内部地址。如果我们在代码的其他地方定义完全相同的匿名类，它的类名将不同，因为它将分配不同的内存地址。在这种情况下，结果对象可能具有相同的属性值，这意味着它们将相等（`==`）但不是相同的（`===`）。
- en: The Closure::call() method
  id: totrans-81
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Closure::call()方法
- en: PHP introduced the Closure class in the 5.3 version. Closure class is used to
    represent anonymous functions. Anonymous functions, implemented in PHP 5.3, yield
    objects of this type. As of PHP 5.4, the Closure class got several methods (`bind`,
    `bindTo`) that allow further control of the anonymous function after it has been
    created. These methods basically duplicate the Closure with a specific bound object
    and class scope. PHP 7 introduced the call method on a Closure class. The `call`
    method does not duplicate the closure, it temporarily binds the closure to new
    this (`$newThis`), and calls it with any given parameters. It then returns the
    return value of the closure.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: PHP在5.3版本中引入了Closure类。Closure类用于表示匿名函数。在PHP 5.3中实现的匿名函数产生了这种类型的对象。从PHP 5.4开始，Closure类获得了几种方法（`bind`、`bindTo`），允许在创建匿名函数后进一步控制匿名函数。这些方法基本上是使用特定绑定对象和类范围复制闭包。PHP
    7在Closure类上引入了`call`方法。`call`方法不会复制闭包，它会临时将闭包绑定到新的this（`$newThis`），并使用任何给定的参数调用它。然后返回闭包的返回值。
- en: 'The `call` function signature looks like the following:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: '`call`函数签名如下：'
- en: '[PRE13]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: '`$newThis` is the object to bind the closure for the duration of the `call`.
    The parameters, which will be given as `$parameters` to the closure are optional,
    meaning zero or more.'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: $newThis是绑定闭包的对象，在“call”期间持续绑定。将作为$parameters给闭包的参数是可选的，意味着可以是零个或多个。
- en: 'Let''s take a look at the following example of a simple `Customer` class and
    a `$greeting` closure:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看一个简单的`Customer`类和一个`$greeting`闭包的以下示例：
- en: '[PRE14]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Within the actual `$greeting` closure, there is no `$this`, it does not exist
    until the actual binding occurs. We could easily confirm this by directly calling
    a closure like `$greeting('Hello');`. However, we assume `$this` will come in
    to existence when we bind the closure to a given object instance via its `call`
    function. In which case, `$this` within the closure becomes `$this` of the `customer`
    object instance. The preceding example shows binding of `$customer` to the closure
    using a `call` method call. The resulting output displays **Hello John Doe!**
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 在实际的`$greeting`闭包中，没有`$this`，直到实际绑定发生之前它都不存在。我们可以通过直接调用像`$greeting('Hello');`这样的闭包来轻松确认这一点。但是，我们假设当我们通过其`call`函数将闭包绑定到给定对象实例时，`$this`将出现。在这种情况下，闭包中的`$this`变成了`customer`对象实例的`$this`。前面的示例显示了使用`call`方法调用将`$customer`绑定到闭包的绑定。生成的输出显示**Hello
    John Doe!**
- en: Generator delegation
  id: totrans-89
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 生成器委托
- en: Generators provide a simple way to implement *iterators* without the overhead
    of implementing a class that implements the **Iterator** interface. They allow
    us to write code which uses `foreach` to iterate over a set of data without needing
    to build an array in memory. This eliminates the exceeds memory limit errors.
    They were not new to PHP, as they were added in PHP 5.5.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 生成器提供了一种简单的方法来实现*迭代器*，而无需实现实现**Iterator**接口的类的开销。它们允许我们编写使用`foreach`来迭代一组数据的代码，而无需在内存中构建数组。这消除了超出内存限制的错误。它们对于PHP并不是新的，因为它们是在PHP
    5.5中添加的。
- en: However, PHP 7 brings several new improvements to generators, one of which is
    generator delegation.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，PHP 7为生成器带来了几项新的改进，其中之一是生成器委托。
- en: Generator delegation allows a generator to yield other generators, arrays, or
    objects that implement the **Traversable** interface. In another words, we might
    say that generator delegation is yielding **subgenerators**.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 生成器委托允许生成器产生其他生成器、数组或实现**Traversable**接口的对象。换句话说，我们可以说生成器委托是产生**子生成器**。
- en: 'Let''s take a look at the following example with three generator type functions:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看一个带有三个生成器类型函数的以下示例：
- en: '[PRE15]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Yielding other generators requires using the `yield from <expression>` syntax.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 产生其他生成器需要使用`yield from <expression>`语法。
- en: Generator return expressions
  id: totrans-96
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 生成器返回表达式
- en: Prior to PHP 7, generator functions were not able to return expressions. The
    inability of generator functions to specify return values limited their usefulness
    for multitasking in co-routine contexts.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 在 PHP 7 之前，生成器函数无法返回表达式。生成器函数无法指定返回值的能力限制了它们在协程上下文中的实用性。
- en: PHP 7 made it possible for generators to return expressions. We can now call
    `$generator->getReturn()` to retrieve the `return` expression. Calling `$generator->getReturn()`
    when the generator has not yet returned, or has thrown an uncaught exception,
    will throw an exception.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: PHP 7 使生成器能够返回表达式。现在我们可以调用 `$generator->getReturn()` 来检索 `return` 表达式。当生成器尚未返回或抛出未捕获的异常时调用
    `$generator->getReturn()` 将抛出异常。
- en: If the generator has no return expression defined and has completed yielding,
    null is returned.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 如果生成器没有定义返回表达式并且已经完成了产出，将返回 null。
- en: 'Let''s take a look at the following example:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看下面的例子：
- en: '[PRE16]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Looking at the `gen()` function definition and its `return` expression, one
    might expect the value of the `$generator` variable to be equal to the `gen-return`
    string. However, this is not the case, as the `$generator` variable becomes the
    instance of the `\Generator` class. Calling the `getReturn()` method on the generator
    while it is still open (not iterated over) will result in a fatal error.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 看看 `gen()` 函数定义及其 `return` 表达式，人们可能期望 `$generator` 变量的值等于 `gen-return` 字符串。然而，情况并非如此，因为
    `$generator` 变量变成了 `\Generator` 类的实例。在生成器仍然打开（未迭代）时调用生成器上的 `getReturn()` 方法将导致致命错误。
- en: 'If the code is structured in such a way that it is not obvious if the generator
    has been closed, we can use the `valid` method to check, before fetching the return
    value:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 如果代码的结构使得不明显生成器是否已关闭，我们可以使用 `valid` 方法在获取返回值之前进行检查：
- en: '[PRE17]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: The null coalesce operator
  id: totrans-105
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 空合并运算符
- en: 'In PHP 5 we had the ternary operator which tests a value and then returns the
    second element if that value is `true`, or third element if that value is `false`,
    as shown in the following code block:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 在 PHP 5 中，我们有三元运算符，它测试一个值，然后如果该值为 `true`，则返回第二个元素，如果该值为 `false`，则返回第三个元素，如下面的代码块所示：
- en: '[PRE18]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'While processing user-provided data in web-centered languages such as PHP,
    it is common to check for variable existence. If a variable doesn''t exist, then
    set it to some default value. A ternary operator makes this easy for us, as shown
    here:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 在处理 PHP 等网络中心语言中的用户提供的数据时，通常会检查变量是否存在。如果变量不存在，则将其设置为某个默认值。三元运算符为我们提供了这种便利，如下所示：
- en: '[PRE19]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: However, easy is not always quick or elegant. With that in mind, PHP 7 set out
    to resolve one of the most common usage patterns, by introducing the null coalesce
    operator(`??`).
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，简单并不总是快速或优雅。考虑到这一点，PHP 7 旨在解决最常见的用法模式之一，引入了空合并运算符(`??`)。
- en: 'The null coalesce operator enables us to write even shorter expressions, as
    in the following code block:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 空合并运算符使我们能够编写更短的表达式，如下面的代码块中所示：
- en: '[PRE20]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: The coalesce operator(`??`) is added right after the `$_GET['role']` variable,
    which returns the result of its first operand if it exists and is not `NULL`,
    or else its second operand. This means the `$_GET['role'] ?? 'guest'` is completely
    safe and will not raise an `E_NOTICE`.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 合并运算符(`??`)被添加到 `$_GET['role']` 变量之后，如果第一个操作数存在且不为 `NULL`，则返回第一个操作数的结果，否则返回第二个操作数的结果。这意味着
    `$_GET['role'] ?? 'guest'` 是完全安全的，不会引发 `E_NOTICE`。
- en: 'We can also nest the coalesce operator:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以嵌套使用合并运算符：
- en: '[PRE21]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Reading from left to right, the first value which exists and is not null is
    the value that will be returned. The benefit of this construct is that it enables
    a clean and effective way to achieve safe fallback to the desired value.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 从左到右阅读，存在且不为 null 的第一个值将被返回。这种构造的好处在于它能够以一种清晰有效的方式实现对所需值的安全回退。
- en: Tip
  id: totrans-117
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: The code bundle for the book is also hosted on GitHub at [https://github.com/PacktPublishing/Modular-Programming-with-PHP7](https://github.com/PacktPublishing/Modular-Programming-with-PHP7).
    We also have other code bundles from our rich catalog of books and videos available
    at [https://github.com/PacktPublishing/](https://github.com/PacktPublishing/).
    Check them out!
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 该书的代码包也托管在 GitHub 上，网址为 [https://github.com/PacktPublishing/Modular-Programming-with-PHP7](https://github.com/PacktPublishing/Modular-Programming-with-PHP7)。我们还有其他丰富的书籍和视频代码包可供查阅，网址为
    [https://github.com/PacktPublishing/](https://github.com/PacktPublishing)。欢迎查看！
- en: The Spaceship operator
  id: totrans-119
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 太空船运算符
- en: 'The three-way comparison operator, also known as the Spaceship operator, was
    introduced in PHP 7\. Its syntax goes as follows:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 三向比较运算符，也称为太空船运算符，是在 PHP 7 中引入的。其语法如下：
- en: '[PRE22]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: The operator returns `0` if both operands are equal, `1` if the left is greater,
    and `-1` if the right is greater.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 如果两个操作数相等，则运算符返回 `0`，如果左边大，则返回 `1`，如果右边大，则返回 `-1`。
- en: 'It uses the same comparison rules as other existing comparison operators: `<`,
    `<=`, `==`, `>=`, and `>`:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 它使用与其他现有比较运算符相同的比较规则：`<`、`<=`、`==`、`>=` 和 `>`。
- en: '[PRE23]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'The following are some examples of Spaceship operator behavior:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一些太空船运算符行为的示例：
- en: '[PRE24]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'One practical use case for this operator is for writing callbacks used in sorting
    functions like `usort`, `uasort`, and `uksort`:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 这个运算符的一个实际用例是编写在排序函数中使用的回调，比如 `usort`、`uasort` 和 `uksort`：
- en: '[PRE25]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: Throwables
  id: totrans-129
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 可抛出对象
- en: Though PHP 5 introduced the exception model, overall errors and error handling
    remained somewhat unpolished. Basically PHP had two error handling systems. Traditional
    errors still popped out and were not handled by `try…catch` blocks.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管 PHP 5 引入了异常模型，但整体错误和错误处理仍然有些粗糙。基本上，PHP 有两种错误处理系统。传统错误仍然会弹出，并且不会被 `try…catch`
    块处理。
- en: 'Take the following `E_RECOVERABLE_ERROR` as an example:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 以 `E_RECOVERABLE_ERROR` 为例：
- en: '[PRE26]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'The `try…catch` block has no effect here, as the error is not interpreted as
    an exception, rather a catchable fatal error:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，`try…catch` 块没有效果，因为错误不被解释为异常，而是可捕获的致命错误：
- en: '[PRE27]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'A possible workaround involves setting a user-defined error handler by using
    the `set_error_handler` function as follows:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 一种可能的解决方法是使用 `set_error_handler` 函数设置用户定义的错误处理程序，如下所示：
- en: '[PRE28]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: The error handler, as written above, would now transform every error into an
    exception, therefore making it catchable with `try…catch` blocks.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 如上所述，错误处理程序现在会将每个错误转换为异常，因此可以通过`try…catch`块捕获。
- en: PHP 7 made fatal and catchable fatal errors part of engine exceptions, therefore
    catchable with `try…catch` blocks. This excludes warnings and notices which still
    do not pass through the exception system, which makes sense for backward compatibility
    reasons.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: PHP 7将致命错误和可捕获的致命错误作为引擎异常的一部分，因此可以通过`try…catch`块捕获。这不包括警告和通知，它们仍然不通过异常系统，这对于向后兼容性是有意义的。
- en: It also introduced a new exception hierarchy via the `\Throwable` interface.
    `\Exception` and `\Error` implement the `\Throwable` interface.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 它还通过`\Throwable`接口引入了一个新的异常层次结构。`\Exception`和`\Error`实现了`\Throwable`接口。
- en: Standard PHP fatal and catchable fatal are now thrown as `\Error` exceptions,
    though they will continue to trigger traditional fatal error if they are uncaught.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 标准的PHP致命错误和可捕获的致命错误现在作为`\Error`异常抛出，尽管如果它们未被捕获，它们仍将继续触发传统的致命错误。
- en: 'Throughout our application we must use `\Exception` and `\Error`, as we cannot
    implement the `\Throwable` interface directly. We could, however, use the following
    block to catch all errors, regardless of whether it is the `\Exception` or `\Error`
    type:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 在整个应用程序中，我们必须使用`\Exception`和`\Error`，因为我们不能直接实现`\Throwable`接口。但是，我们可以使用以下块来捕获所有错误，无论是`\Exception`还是`\Error`类型：
- en: '[PRE29]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: The \ParseError
  id: totrans-143
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: \ParseError
- en: The **ParseError** is a nice PHP 7 addition to error handling. We can now handle
    parse errors triggered by `eval()`, `include` and `require` statements, as well
    as those thrown by `\ParseError` exceptions. It extends `\Error`, which in turn
    implements a `\Throwable` interface.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: '**ParseError**是PHP 7对错误处理的一个很好的补充。我们现在可以处理由`eval()`、`include`和`require`语句触发的解析错误，以及由`\ParseError`异常抛出的解析错误。它扩展了`\Error`，而`\Error`又实现了`\Throwable`接口。'
- en: 'The following is an example of a broken PHP file, because of a missing "`,`"
    inbetween between array items:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一个破损的PHP文件的示例，因为数组项之间缺少“`,`”：
- en: '[PRE30]'
  id: totrans-146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'The following is an example of a file including `config.php`:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是包括`config.php`的文件的示例：
- en: '[PRE31]'
  id: totrans-148
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: We can now safely catch possible parse errors.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在可以安全地捕获可能的解析错误。
- en: Level support for the dirname() function
  id: totrans-150
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: dirname()函数的级别支持
- en: The `dirname` function has been with us since PHP 4\. It's probably one of the
    most often used functions in PHP. Up until PHP 7, this function only accepted
    the `path` parameter. With PHP 7, the new levels parameter was added.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: '`dirname`函数自PHP 4以来一直存在。这可能是PHP中最常用的函数之一。直到PHP 7，此函数只接受`path`参数。在PHP 7中，添加了新的levels参数。'
- en: 'Let''s take a look at the following example:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看下面的例子：
- en: '[PRE32]'
  id: totrans-153
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: By assigning the `levels` value, we indicate how many levels to go up from the
    assigned path value. Though small, the addition of the `levels` parameter will
    certainly make it easier to write some of the code that deals with paths.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 通过分配`levels`值，我们指示从分配的路径值向上移动多少级。虽然很小，但`levels`参数的添加肯定会使处理路径的某些代码更容易编写。
- en: The integer division function
  id: totrans-155
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 整数除法函数
- en: 'The `intdiv` is a new integer division function introduced in PHP 7\. The function
    accepts dividend and divisor as parameters and returns the integer quotient of
    their division, as shown here by the function description:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: '`intdiv`是PHP 7引入的新的整数除法函数。该函数接受被除数和除数作为参数，并返回它们的商的整数部分，如下面的函数描述所示：'
- en: '[PRE33]'
  id: totrans-157
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'Let''s take a look at the following few examples:'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看下面的几个例子：
- en: '[PRE34]'
  id: totrans-159
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: If the `dividend` is `PHP_INT_MIN` and the divisor is `-1`, then an `ArithmeticError`
    exception is thrown. If the divisor is `0`, then the `DivisionByZeroError` exception
    is thrown.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 如果`dividend`是`PHP_INT_MIN`，而除数是`-1`，那么会抛出`ArithmeticError`异常。如果除数是`0`，那么会抛出`DivisionByZeroError`异常。
- en: Constant arrays
  id: totrans-161
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 常量数组
- en: 'Prior to PHP 7, constants defined with `define()` could only contain scalar
    expressions, but not arrays. As of PHP 5.6, it is possible to define an array
    constant by using `const` keywords, and as of PHP 7, array constants can also
    be defined using `define()`:'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 在PHP 7之前，使用`define()`定义的常量只能包含标量表达式，而不能包含数组。从PHP 5.6开始，可以使用`const`关键字定义数组常量，从PHP
    7开始，也可以使用`define()`定义数组常量：
- en: '[PRE35]'
  id: totrans-163
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: Constants may not be redefined or undefined once they have been set.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 常量一旦设置后就不能重新定义或取消定义。
- en: Uniform variable syntax
  id: totrans-165
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 统一的变量语法
- en: To make PHP's parser more complete for various variable dereferences, PHP 7
    introduced a uniform variable syntax. With uniform variable syntax all variables
    are evaluated from left to right.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使PHP的解析器更完整，PHP 7引入了统一的变量语法。使用统一的变量语法，所有变量都是从左到右进行评估的。
- en: 'Unlike various functions, keywords, or settings being removed, changes in semantics
    like this one can be quite impacting for the existing code base. The following
    code demonstrates the syntax, its old meaning and new:'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 与删除各种函数、关键字或设置不同，像这样的语义变化对现有代码库的影响可能相当大。以下代码演示了语法、其旧含义和新含义：
- en: '[PRE36]'
  id: totrans-168
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: Aside from previously rewritten examples of old-to-new syntax, there are now
    a few newly supported syntax combinations.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 除了以前重写的旧到新语法示例之外，现在还支持一些新的语法组合。
- en: 'PHP 7 now supports nested double colons,`::`, and following is an example of
    it:'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: PHP 7现在支持嵌套双冒号`::`，以下是一个示例：
- en: '[PRE37]'
  id: totrans-171
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'We can also nest methods and function calls—or any callables—by doubling up
    on parentheses as shown in the following code examples:'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以通过在括号中加倍来嵌套方法和函数调用，或者任何可调用的内容，如下面的代码示例所示：
- en: '[PRE38]'
  id: totrans-173
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'Furthermore, we can now dereference any valid expression enclosed with parentheses:'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，我们现在可以对任何用括号括起来的有效表达式进行解引用：
- en: '[PRE39]'
  id: totrans-175
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: Secure random number generator
  id: totrans-176
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安全的随机数生成器
- en: PHP 7 introduced two new **CSPRNG** functions. CSPRNG is an acronym for **cryptographically
    secure pseudo-random number generator**.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: PHP 7引入了两个新的**CSPRNG**函数。CSPRNG是**密码学安全伪随机数生成器**的缩写。
- en: The first, `random_bytes`, generates an arbitrary length string of cryptographic
    random bytes that are suitable for cryptographic use, such as when generating
    *salts*, *keys*, or *initialization* vectors. The function accepts only one (`length`)
    parameter, representing the length of the random string that should be returned
    in bytes. It returns a string containing the requested number of cryptographically
    secure random bytes, or, optionally, it throws an exception if an appropriate
    source of randomness cannot be found.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个`random_bytes`生成一个任意长度的加密随机字节字符串，适用于加密用途，比如生成*盐*、*密钥*或*初始化*向量。该函数只接受一个（`length`）参数，表示应以字节返回的随机字符串的长度。它返回一个包含请求的数量的密码安全随机字节的字符串，或者在找不到适当的随机源时，它会抛出一个异常。
- en: 'The following is an example of `random_bytes` usage:'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是`random_bytes`的使用示例：
- en: '[PRE40]'
  id: totrans-180
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: The second, `random_int`, generates cryptographic random integers that are suitable
    for use where unbiased results are critical, such as when shuffling a deck of
    cards for a poker game. The function accepts two (`min`, `max`) parameters, representing
    the lowest value to be returned (must be `PHP_INT_MIN` or higher) and the highest
    value to be returned (must be less than or equal to `PHP_INT_MAX`). It returns
    a cryptographically secure random integer in the range min to max (inclusive).
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 第二个`random_int`生成适用于需要无偏结果的密码随机整数，比如在为扑克游戏洗牌时。该函数接受两个（`min`，`max`）参数，表示要返回的最小值（必须是`PHP_INT_MIN`或更高）和要返回的最大值（必须小于或等于`PHP_INT_MAX`）。它返回范围在min到max（包括min和max）之间的密码安全随机整数。
- en: 'The following is an example of `random_int` usage:'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是`random_int`的使用示例：
- en: '[PRE41]'
  id: totrans-183
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: Filtered unserialize()
  id: totrans-184
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 过滤反序列化()
- en: Serialized data can include objects. These objects can further include functions
    like destructors, `__toString`, and `__call`. In order to increase security when
    unserializing objects on unstructured data, PHP 7 introduced the optional `options`
    parameter to the existing `unserialize` function.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 序列化数据可以包括对象。这些对象还可以包括析构函数、`__toString`和`__call`等函数。为了在对非结构化数据上反序列化对象时提高安全性，PHP
    7引入了现有`unserialize`函数的可选`options`参数。
- en: The `options` parameter is of type array that currently only accepts the `allowed_classes`
    key.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: '`options`参数是一个数组类型，目前只接受`allowed_classes`键。'
- en: 'The `allowed_classes` can have one of three values:'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: '`allowed_classes`可以有三个值之一：'
- en: '`true`: This is a default value and allows all objects just as before'
  id: totrans-188
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`true`：这是默认值，和以前一样允许所有对象'
- en: '`false`: Here no objects allowed'
  id: totrans-189
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`false`：这里不允许对象'
- en: array of allowed class names, lists the allowed classes for unserialized objects
  id: totrans-190
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 允许的类名数组，列出了未序列化对象的允许类
- en: 'The following is an example of using the `allowed_classes` option:'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是使用`allowed_classes`选项的示例：
- en: '[PRE42]'
  id: totrans-192
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: We can see that the object of that class which is not accepted is instantiated
    as `__PHP_Incomplete_Class`.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到，该类的对象如果不被接受，则被实例化为`__PHP_Incomplete_Class`。
- en: Context sensitive lexer
  id: totrans-194
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 上下文敏感的词法分析器
- en: According to the [http://php.net/manual/en/reserved.keywords.php](http://php.net/manual/en/reserved.keywords.php)
    list, PHP has over 60 reserved keywords. These make up for language constructs,
    like names for properties, methods, constants within classes, interfaces, and
    traits.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 根据[http://php.net/manual/en/reserved.keywords.php](http://php.net/manual/en/reserved.keywords.php)列表，PHP有60多个保留关键字。这些构成了语言结构，比如类、接口和特征中的属性、方法、常量的名称。
- en: Sometimes these reserved words end up clashing with user defined API declarations.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 有时这些保留字最终会与用户定义的API声明发生冲突。
- en: To resolve the issue, PHP 7.0 introduced the context sensitive lexer. With the
    context sensitive lexer, we may now use keywords for property, function, and constant
    names within our code.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 为了解决这个问题，PHP 7.0引入了上下文敏感的词法分析器。有了上下文敏感的词法分析器，我们现在可以在我们的代码中使用关键字来表示属性、函数和常量的名称。
- en: 'The following are a few practical examples related to the impact of context
    sensitive lexer:'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: '以下是与上下文敏感的词法分析器的影响相关的一些实际示例： '
- en: '[PRE43]'
  id: totrans-199
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'The only exception being the `class` keyword, which remains reserved in *class
    constant context*, as shown here:'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 唯一的例外是`class`关键字，在*类常量上下文*中仍然保留，如下所示：
- en: '[PRE44]'
  id: totrans-201
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: Group use declarations
  id: totrans-202
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 组使用声明
- en: 'The *group use declarations* are introduced in PHP 7 as a way to cut verbosities
    when importing multiple classes from a common namespace. They enable shorthand
    syntax as follows:'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: '*组使用声明*在PHP 7中引入，用于从公共命名空间导入多个类时减少冗长。它们启用了如下的简写语法：'
- en: '[PRE45]'
  id: totrans-204
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'Let''s take a look at the following examples where class names within the *same
    namespace* are group used:'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看一下下面的例子，其中*相同命名空间*内的类名被组合使用：
- en: '[PRE46]'
  id: totrans-206
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: 'We can also use the *group use declarations* on part of namespaces, as shown
    in the following example:'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以在部分命名空间上使用*组使用声明*，如下面的示例所示：
- en: '[PRE47]'
  id: totrans-208
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: 'We can further use `group use` for importing functions and constants as shown
    in the following lines of code:'
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以像下面的代码行一样进一步使用`group use`来导入函数和常量：
- en: '[PRE48]'
  id: totrans-210
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: Unicode enhancements
  id: totrans-211
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Unicode增强
- en: Unicode, and UTF-8 in particular, have grown increasingly popular in PHP applications.
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: Unicode，特别是UTF-8，在PHP应用程序中越来越受欢迎。
- en: 'PHP 7 adds the new escape sequence for *double-quoted strings* and *heredocs*,
    with the syntax as follows:'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: PHP 7为*双引号字符串*和*heredocs*添加了新的转义序列，语法如下：
- en: '[PRE49]'
  id: totrans-214
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: It produces the UTF-8 encoding of a Unicode code point, specified with hexadecimal
    digits. It is worth noting that the length of the code-point within curly braces
    is arbitrary. This means that we can use `\u{FF}` or the more traditional `\u{00FF}`.
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 它产生了一个Unicode代码点的UTF-8编码，用十六进制数字指定。值得注意的是，花括号中的代码点长度是任意的。这意味着我们可以使用`\u{FF}`或更传统的`\u{00FF}`。
- en: 'The following is a simple listing of the four most traded currencies, their
    symbols, and their UTF-8 code points:'
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是四种最常用货币、它们的符号和它们的UTF-8代码点的简单列表：
- en: '[PRE50]'
  id: totrans-217
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: 'Some of these symbols usually exist directly on a keyboard, so it''s easy to
    write them down as shown here:'
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 其中一些符号通常直接存在于键盘上，所以很容易像这里显示的那样写下来：
- en: '[PRE51]'
  id: totrans-219
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: 'However, the majority of other symbols are not as easily accessible via the
    keyboard as single keystrokes, and therefore need to be written in the form of
    code-points, shown as follows:'
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE52]'
  id: totrans-221
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: 'In older versions of PHP, the resulting output of preceding statements would
    be the following:'
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE53]'
  id: totrans-223
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: This obviously did not parse code-points, as it was outputting them literally.
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
- en: 'PHP 7 introduced Unicode code-point escape sequence syntax to string literals,
    making previous statements result in the following output:'
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE54]php'
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
- en: Assertions
  id: totrans-227
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Assertions is a debug feature, used to check the given assertion and take appropriate
    action if its result is `false`. They have been part of PHP for years, ever since
    PHP 4.
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
- en: Assertions differ from error handling in a way that assertions cover for impossible
    cases, whereas errors are possible and need to be handled.
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
- en: Using assertions as a general-purpose error handling mechanism should be avoided.
    Assertions do not allow for recovery from errors. Assertion failure will normally
    halt the execution of a program.
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
- en: With modern debugging tools like Xdebug, not many developers use assertions
    for debugging.
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
- en: Assertions can be easily enabled and disabled using the `assert_options` function
    or the `assert.active INI` setting.
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
- en: 'To use assertions, we pass in either an expression or a string as shown in
    the following function signature:'
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE55]php'
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
- en: These two signatures differ in the second parameter. PHP 7 can accept either
    string `$description` or `$exception`.
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
- en: If the expression result or the result of evaluating the string evaluates to
    `false`, then a warning is raised. If the second parameter is passed as `$exception`,
    then an exception will be thrown instead of failure.
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
- en: 'In regards to `php.ini` configuration options, the `assert` function has been
    expanded to allow for so-called *zero-cost assertions*:'
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE56]php'
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
- en: With zero-cost settings, assertions have zero impact on performance and execution
    as they are not compiled.
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
- en: Finally, the `Boolean assert.exception` option was added to the **INI** setting.
    Setting it to `true`, results in `AssertionError` exceptions for the failed assertions.
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
- en: Changes to the list() construct
  id: totrans-241
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In PHP 5, `list()` assigns the values starting with the right-most parameter.
    In PHP 7, `list()` starts with the left-most parameter. Basically, values are
    now assigned to variables in the order they are defined.
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
- en: 'However, this only affects the case where `list()` is being used in conjunction
    with the `array []` operator, as discussed in the following code block:'
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE57]php'
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
- en: 'Output of the preceding code in PHP 5 would result in the following:'
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE58]php'
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
- en: 'Output of the preceding code in PHP 7 would result in the following:'
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE59]php'
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
- en: The order of assignment might change again in the future, so we should not rely
    heavily on it.
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
- en: Session options
  id: totrans-250
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Prior to PHP 7, the `session_start()` function did not directly accept any
    configuration options. Any configuration options we wanted to set on the session,
    needed to come from `php.ini`:'
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE60]php'
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
- en: 'Driven by the goal of performance optimization, a new `lazy_write` runtime
    configuration was added in PHP 7\. When `lazy_write` is set to `1`, the session
    data is only rewritten if it changes. This is the default behavior:'
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE61]php'
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
- en: While changes listed here might not look impressive at first, being able to
    override session options directly via the `session_start` function gives certain
    flexibility to our code.
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
- en: Deprecated features
  id: totrans-256
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Globally accepted, major versions of software have the luxury of breaking backward
    compatibility. Ideally, not much, but in order to keep the software moving forward,
    some old ideas need to be left behind. These changes don't come overnight. Certain
    features are first flagged as deprecated to warn developers that it will be removed
    in future versions of the language. Sometimes this period of deprecation takes
    years.
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
- en: Throughout PHP 5.x, a number of features have been marked as deprecated, and
    in PHP 7.0, they have all been removed.
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
- en: The **POSIX-compatible** regular expressions have been deprecated in PHP 5.3,
    and now completely removed in PHP 7.
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
- en: 'The following functions are no longer available for use:'
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
- en: '`ereg_replace`'
  id: totrans-261
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ereg`'
  id: totrans-262
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`eregi_replace`'
  id: totrans-263
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`eregi`'
  id: totrans-264
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`split`'
  id: totrans-265
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`spliti`'
  id: totrans-266
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`sql_regcase`'
  id: totrans-267
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We should instead use **Perl Compatible Regular Expressions** (**PCRE**). The
    [http://php.net/manual/en/book.pcre.php](http://php.net/manual/en/book.pcre.php)
    is a great source of documentation for these functions.
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
- en: The `mysql` extension, which had been deprecated in PHP 5.5, has now been removed.
    None of the `mysql_*` functions are available anymore. We should instead use the
    `mysqli` extension. The good thing is that moving from `mysql` to `mysqli` functions
    is mostly simple, as when adding `i` to our code, the `mysql_*` function calls
    and passes the database handle (returned by `mysqli_connect`) as the first parameter.
    The [http://php.net/manual/en/book.mysqli.php](http://php.net/manual/en/book.mysqli.php)
    is a great source of documentation for these functions.
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
- en: 'The PHP script and ASP tags are no longer available:'
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE62]'
  id: totrans-271
  prefs: []
  type: TYPE_PRE
  zh: '[PRE62]'
- en: Frameworks
  id: totrans-272
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Application frameworks are a collection of functions, classes, configurations,
    and conventions all designed to support the development of web applications, services,
    and APIs. Some applications are embracing an API first approach, whereas server-side
    REST and SOAP APIs are built via PHP, and client side in other technologies like
    JavaScript.
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
- en: 'When building a web application, we usually have three obvious choices:'
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
- en: We can build everything ourselves, from scratch. This way, our development process
    might be slow, but we can achieve architecture built entirely per our standards.
    Needless to say, this is a highly unproductive approach.
  id: totrans-275
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We can use one of the existing frameworks. This way, our development process
    is fast, but we need to be happy that our application is built on top of other
    things.
  id: totrans-276
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We can use one of the existing frameworks but also try to abstract it to the
    level where our application looks independent of it. This is a painful and slow
    approach, to say the least. It involves writing numerous adapters, wrappers, interfaces,
    and so on.
  id: totrans-277
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In a nutshell, frameworks are here to make it easier and quicker for us to build
    our software. A great deal of programming languages out there have popular frameworks.
    PHP is no exception to this.
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
- en: Given the popularity of PHP as a go-to web programming language, it is no surprise
    that dozens of frameworks have sprouted over the years. Choosing the "right" framework
    is a daunting task, even so more for fresh starters. What is right for one project
    or a team might not be right for another.
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
- en: 'However, there are some general, high level segments each modern framework
    should encompass. These account for:'
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
- en: '**Modular**: It supports modular application development, allowing us to neatly
    separate our code into functional building blocks, whereas it is built in a modular
    manner.'
  id: totrans-281
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Secure**: It provides various cryptographic and other security tooling expected
    of a modern web application. Provides seamless support for things like authentication,
    authorization, and data encryption.'
  id: totrans-282
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Extensible**: Manages to easily adopt our application needs, allowing us
    to extend it according to our application needs.'
  id: totrans-283
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Community**: It is actively developed and supported by a vibrant and active
    community.'
  id: totrans-284
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**High performing**: Built with performance in mind. Many frameworks brag about
    performance, but there are many variables to it. We need to be specific as to
    what we are evaluating here. Measuring cached performance against raw performance
    is often the misleading evaluation, as caching proxies can be put in front of
    many frameworks.'
  id: totrans-285
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Enterprise ready**: Depending on the type of project at hand, most likely
    we would want to target a framework which flags itself as enterprise ready. Making
    us confident enough of running critical and high-usage business applications on
    top of it.'
  id: totrans-286
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: While it's perfectly alright to code an entire web application in pure PHP without
    using any framework, the majority of today's projects do use frameworks.
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
- en: The benefits of using frameworks outweigh the purity of doing it all from scratch.
    Frameworks are usually well supported and documented, which makes it easier for
    teams to catch up with libraries, project structure, conventions, and other things.
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
- en: 'When it comes to PHP frameworks, it is worth pointing out a few popular ones:'
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
- en: '**Laravel**: [https://laravel.com](https://laravel.com)'
  id: totrans-290
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Symfony**: [http://symfony.com](http://symfony.com)'
  id: totrans-291
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Zend Framework**: [http://framework.zend.com](http://framework.zend.com)'
  id: totrans-292
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**CodeIgniter**: [https://www.codeigniter.com](https://www.codeigniter.com)'
  id: totrans-293
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**CakePHP**: [http://cakephp.org](http://cakephp.org)'
  id: totrans-294
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Slim**: [http://www.slimframework.com](http://www.slimframework.com)'
  id: totrans-295
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Yii**: [http://www.yiiframework.com](http://www.yiiframework.com)'
  id: totrans-296
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Phalcon**: [https://phalconphp.com](https://phalconphp.com)'
  id: totrans-297
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This is by no means a complete or even a popularity sorted list.
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
- en: Laravel framework
  id: totrans-299
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Laravel is released under an MIT license, and can be downloaded from [https://laravel.com/](https://laravel.com/).
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
- en: Aside from the usual routing, controllers, requests, responses, views, and (blade)
    templates, out of the box Laravel provides a large amount of additional services
    such as authentication, cache, events, localization, and many others.
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
- en: Another neat feature of Laravel, is **Artisan**, the command line tool, that
    provides a number of useful commands that we can use during development. Artisan
    can further be extended by writing our own console commands.
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
- en: Laravel has a pretty active and vibrant community. Its documentation is simple
    and clear, which makes it easy for newcomers to get started. Furthermore, there
    is also [https://laracasts.com](https://laracasts.com), which extends out beyond
    Laravel in terms of documentation and other content. Laracasts is a web service
    providing a series of expert screencasts, some of which are free.
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
- en: All of these features make Laravel a choice worth evaluating when it comes to
    the selection of a framework.
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
- en: Symfony
  id: totrans-305
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Symfony is released under an MIT license, and can be downloaded from [http://symfony.com](http://symfony.com).
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
- en: Over time, Symfony introduced the concept of **Long-term Support**(**LTS**)
    releases. This release process has been adopted as of Symfony 2.2, and strictly
    followed as of Symfony 2.4\. The standard version of Symfony is maintained for
    eight months. Long-term Support versions are supported for three years.
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
- en: 'One other interesting thing about new releases is the time-based release model.
    All of the new versions of Symfony releases come out every six months: one in
    May and one in November.'
  id: totrans-308
  prefs: []
  type: TYPE_NORMAL
- en: Symfony has great community support via mailing lists, IRC, and StackOverflow.
    Furthermore, SensioLabs professional support provides a full range of solutions
    from consulting, training, coaching, to certification.
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
- en: Lots of Symfony components are used in other web applications and frameworks,
    such as Laravel, Silex, Drupal 8, Sylius, and others.
  id: totrans-310
  prefs: []
  type: TYPE_NORMAL
- en: What made Symfony such a popular framework is its interoperability. The idea
    of "Don't lock yourself up within Symfony!" made it popular with developers as
    it allowed for building applications that precisely meet our needs.
  id: totrans-311
  prefs: []
  type: TYPE_NORMAL
- en: 'By embracing the "don''t reinvent the wheel" philosophy, Symfony itself makes
    heavy use of existing PHP open-source projects as part of the framework, including:'
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
- en: 'Doctrine (or Propel): Object-relational mapping layer'
  id: totrans-313
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: PDO database abstraction layer (Doctrine or Propel)
  id: totrans-314
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'PHPUnit: A unit testing framework'
  id: totrans-315
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Twig: A templating engine'
  id: totrans-316
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Swift Mailer: An e-mail library'
  id: totrans-317
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Depending on our project needs, we can choose to use a full-stack Symfony framework,
    the Silex micro-framework, or simply some of the components individually.
  id: totrans-318
  prefs: []
  type: TYPE_NORMAL
- en: Out of the box, Symfony provides a lot of structural ground for new web applications.
    It does so via its bundle system. Bundles are sort of like micro-applications
    inside our main application. Within them, the entire app is nicely structured
    into models, controllers, templates, configuration files, and other building blocks.
    Being able to fully separate logic from different domains helps us to keep a clean
    separation of concerns and autonomously develop every single feature of our domain.
  id: totrans-319
  prefs: []
  type: TYPE_NORMAL
- en: Symfony is one of the PHP pioneers when it comes to embracing the dependency
    injection across the framework, allowing it to achieve decoupled components and
    to keep high flexibility of code.
  id: totrans-320
  prefs: []
  type: TYPE_NORMAL
- en: Documented, modular, highly flexible, performant, supported, those are the attributes
    that make Symfony a choice worth evaluating.
  id: totrans-321
  prefs: []
  type: TYPE_NORMAL
- en: Zend Framework
  id: totrans-322
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Zend Framework is released under a new BSD license, and can be downloaded from
    [http://framework.zend.com](http://framework.zend.com).
  id: totrans-323
  prefs: []
  type: TYPE_NORMAL
- en: 'Zend Framework features include:'
  id: totrans-324
  prefs: []
  type: TYPE_NORMAL
- en: Fully object-oriented PHP components
  id: totrans-325
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Loosely coupled components
  id: totrans-326
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Extensible MVC supporting layouts and templates
  id: totrans-327
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Support for multiple database systems MySQL, Oracle, MS SQL, and so on
  id: totrans-328
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: E-mail handling via mbox, Maildir, POP3, and IMAP4
  id: totrans-329
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Flexible caching system
  id: totrans-330
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Aside from a free Zend Framework, Zend Technologies Ltd provides its own commercial
    version of a PHP stack called Zend Server, and Zend Studio IDE that includes features
    specifically to integrate with Zend Framework. While Zend Framework is perfectly
    fine running on any PHP stack, Zend Server is advertised as an optimized solution
    for running Zend Framework applications.
  id: totrans-331
  prefs: []
  type: TYPE_NORMAL
- en: By its architectural design, Zend Framework is merely a collection of classes.
    There is no strictly imposed structure our application needs to follow. This is
    one of the features that makes it so appealing to a certain range of developers.
    We could either utilize Zend MVC components to create a fully-functional Zend
    Framework project, or we can simply load the components we need.
  id: totrans-332
  prefs: []
  type: TYPE_NORMAL
- en: The so called full-stack frameworks impose structure, ORM implementations, code-generation,
    and other fixed things onto your projects. Zend Framework, on the other hand,
    with its decoupled nature, classifies for a glue type of framework. We can easily
    glue it to an existing application, or use it to build a new one.
  id: totrans-333
  prefs: []
  type: TYPE_NORMAL
- en: The latest versions of Zend Framework follow the **SOLID object oriented design**
    principle. The so called "use-at-will" design allows developers to use whichever
    components they want.
  id: totrans-334
  prefs: []
  type: TYPE_NORMAL
- en: Though the main driving force behind Zend Framework is Zend Technologies, many
    other companies have contributed significant features to the framework.
  id: totrans-335
  prefs: []
  type: TYPE_NORMAL
- en: Furthermore, Zend Technologies provides excellent Zend Certified PHP Engineer
    certifications. Quality community, official company support, education, hosting,
    and development tools make the Zend Framework choice worth evaluating.
  id: totrans-336
  prefs: []
  type: TYPE_NORMAL
- en: CodeIgniter
  id: totrans-337
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: CodeIgniter is released under an MIT license, and can be downloaded from [https://www.codeigniter.com](https://www.codeigniter.com).
  id: totrans-338
  prefs: []
  type: TYPE_NORMAL
- en: CodeIgniter prides itself in being lightweight. The core system requires only
    a handful of small libraries, which is not always the case with other frameworks.
  id: totrans-339
  prefs: []
  type: TYPE_NORMAL
- en: The framework uses the simple **Model-View-Control** approach, allowing for
    clean separation between logic and presentation. The View layer does not impose
    any special template language, so it uses native PHP out of the box.
  id: totrans-340
  prefs: []
  type: TYPE_NORMAL
- en: 'Here are some of the outstanding features of CodeIgniter:'
  id: totrans-341
  prefs: []
  type: TYPE_NORMAL
- en: Model-View-Control-based system
  id: totrans-342
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Extremely light weight
  id: totrans-343
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Full featured database classes with support for several platforms
  id: totrans-344
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Query builder database support
  id: totrans-345
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Form and data validation
  id: totrans-346
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Security and XSS filtering
  id: totrans-347
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Localization
  id: totrans-348
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Data encryption
  id: totrans-349
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Full page caching
  id: totrans-350
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Unit testing class
  id: totrans-351
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Search-engine friendly URLs
  id: totrans-352
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Flexible URI routing
  id: totrans-353
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Support for hooks and class extensions
  id: totrans-354
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Large library of helper functions
  id: totrans-355
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: CodeIgniter has an active community gathered around [http://forum.codeigniter.com](http://forum.codeigniter.com).
  id: totrans-356
  prefs: []
  type: TYPE_NORMAL
- en: Small footprint, flexibility, exceptional performance, near-zero configuration,
    and thorough documentation are what makes this framework choice worth evaluating.
  id: totrans-357
  prefs: []
  type: TYPE_NORMAL
- en: CakePHP
  id: totrans-358
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: CakePHP is released under an MIT license, and can be downloaded from [http://cakephp.org](http://cakephp.org).
  id: totrans-359
  prefs: []
  type: TYPE_NORMAL
- en: The CakePHP framework was greatly inspired by **Ruby on Rails**, using many
    of its concepts. It values conventions over configuration.
  id: totrans-360
  prefs: []
  type: TYPE_NORMAL
- en: It comes with "batteries included". Most of the things we need for modern web
    applications are already built-in. Translations, database access, caching, validation,
    authentication, and much more are all built-in.
  id: totrans-361
  prefs: []
  type: TYPE_NORMAL
- en: Security is another big part of the CakePHP philosophy. CakePHP comes with built-in
    tools for input validation, CSRF protection, form tampering protection, SQL injection
    prevention, and XSS prevention, helping us to secure our application.
  id: totrans-362
  prefs: []
  type: TYPE_NORMAL
- en: CakePHP supports a variety of database storage engines, such as MySQL, PostgreSQL,
    Microsoft SQL Server, and SQLite. The built-in CRUD feature is very handy for
    database interaction.
  id: totrans-363
  prefs: []
  type: TYPE_NORMAL
- en: It counts on a big community behind it. It also has a big list of plugins, available
    at [http://plugins.cakephp.org](http://plugins.cakephp.org).
  id: totrans-364
  prefs: []
  type: TYPE_NORMAL
- en: CakePHP provides a certification exam, whereby developers are tested in their
    knowledge of the CakePHP framework, MVC principles, and standards used within
    CakePHP. Certification is geared towards real world scenarios and intimate CakePHP
    specifics.
  id: totrans-365
  prefs: []
  type: TYPE_NORMAL
- en: Commercial support, consultation, code review, performance analysis, security
    audits, and even development services are provided by the Cake Development Corporation
    [http://www.cakedc.com](http://www.cakedc.com). The Cake Development Corporation
    is the commercial entity behind the framework, established in 2007 by Larry Masters,
    a founder of CakePHP.
  id: totrans-366
  prefs: []
  type: TYPE_NORMAL
- en: Slim
  id: totrans-367
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Slim is released under an MIT license, and can be downloaded from [http://www.slimframework.com](http://www.slimframework.com).
  id: totrans-368
  prefs: []
  type: TYPE_NORMAL
- en: While frameworks with the "batteries included" mindset provide robust libraries,
    directory structures, and configurations, micro frameworks get us started with
    a few lines of code.
  id: totrans-369
  prefs: []
  type: TYPE_NORMAL
- en: 'Micro frameworks usually lack even the basic framework features such as:'
  id: totrans-370
  prefs: []
  type: TYPE_NORMAL
- en: Authentication and authorization
  id: totrans-371
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ORM database abstraction
  id: totrans-372
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Input validation and sanitation
  id: totrans-373
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Template engine
  id: totrans-374
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This limits their use, but also makes them a great tool for rapid prototyping.
  id: totrans-375
  prefs: []
  type: TYPE_NORMAL
- en: Slim supports any PSR-7 HTTP message implementation. An HTTP message is either
    a request from a client to a server or a response from a server to a client. Slim
    functions like a dispatcher that receives an HTTP request, invokes an appropriate
    callback routine, and returns an HTTP response.
  id: totrans-376
  prefs: []
  type: TYPE_NORMAL
- en: 'The good thing about Slim is that it plays nicely with middleware. The middleware
    is basically a callable that accepts three arguments:'
  id: totrans-377
  prefs: []
  type: TYPE_NORMAL
- en: '`\Psr\Http\Message\ServerRequestInterface`: The PSR7 request object'
  id: totrans-378
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`\Psr\Http\Message\ResponseInterface`: The PSR7 response object'
  id: totrans-379
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`callable`: The next middleware callable'
  id: totrans-380
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Middlewares are free to manipulate request and response objects, as long as
    they return an instance of `\Psr\Http\Message\ResponseInterface`. Furthermore,
    each middleware needs to invoke the next middleware and pass it to request and
    response objects as arguments.
  id: totrans-381
  prefs: []
  type: TYPE_NORMAL
- en: This simple concept gives Slim the power of extensibility, through various possible
    third party middlewares.
  id: totrans-382
  prefs: []
  type: TYPE_NORMAL
- en: Even though Slim provides good documentation, a vibrant community, and the project
    is being actively developed to date, its usage is limited. Micro frameworks are
    hardly a choice for robust enterprise applications. Still, they have their place
    in development.
  id: totrans-383
  prefs: []
  type: TYPE_NORMAL
- en: Yii
  id: totrans-384
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Yii is released under a BSD License, and can be downloaded from [http://www.yiiframework.com](http://www.yiiframework.com).
  id: totrans-385
  prefs: []
  type: TYPE_NORMAL
- en: Yii's focus on performance optimization makes it a perfect choice for almost
    any type of project, including the enterprise type of applications.
  id: totrans-386
  prefs: []
  type: TYPE_NORMAL
- en: 'Some of the outstanding Yii features include:'
  id: totrans-387
  prefs: []
  type: TYPE_NORMAL
- en: The MVC design pattern
  id: totrans-388
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Automatic generation of complex service WSDL
  id: totrans-389
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Translation, localization, locale-sensitive formatting of dates, time, and numbers
  id: totrans-390
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Data caching, fragment caching, page caching, and HTTP caching
  id: totrans-391
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Error handler that displays errors based on the nature of the errors and the
    mode the application runs in
  id: totrans-392
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Security measures to help prevent SQL injection, **Cross-site scripting** (**XSS**),
    **Cross-site request forgery** (**CSRF**), and cookie tampering
  id: totrans-393
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Unit and functional testing based on **PHPUnit** and **Selenium**
  id: totrans-394
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: One of the neat features of Yii is a tool called **Gii**. It's an extension
    that provides a web-based code generator. We can use Gii's graphical interface
    to quickly set up generate models, forms, modules, CRUD, and so on. There is also
    a command line version of Gii for those who prefer consoles over GUI.
  id: totrans-395
  prefs: []
  type: TYPE_NORMAL
- en: Yii's architecture allows it to play nicely with third-party code, like PEAR
    libraries, Zend Framework, and the like. It adopts the MVC architecture, allowing
    for clean separation of concerns.
  id: totrans-396
  prefs: []
  type: TYPE_NORMAL
- en: Yii provides an impressive library of extensions available at [http://www.yiiframework.com/extensions](http://www.yiiframework.com/extensions).
    The majority of extensions are distributed as composer packages. They empower
    us with accelerated development. We can easily package our code as extensions
    and share it with others. This makes Yii even more interesting for modular application
    development.
  id: totrans-397
  prefs: []
  type: TYPE_NORMAL
- en: Official documentation is quite comprehensive. There are also several books
    available.
  id: totrans-398
  prefs: []
  type: TYPE_NORMAL
- en: Rich documentation, a vibrant community, active releases, performance optimization,
    security emphasis, feature richness, and flexibility make Yii a choice worth evaluating.
  id: totrans-399
  prefs: []
  type: TYPE_NORMAL
- en: Phalcon
  id: totrans-400
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Phalcon is released under a BSD License, and can be downloaded from [https://phalconphp.com](https://phalconphp.com).
  id: totrans-401
  prefs: []
  type: TYPE_NORMAL
- en: Phalcon was originally released in 2012, by Andres Gutierrez and collaborators.
    The goal of the project was to find a new approach to traditional web application
    frameworks written in PHP. This new approach came in the form of C language extensions.
    The entire Phalcon framework is developed as a C extension.
  id: totrans-402
  prefs: []
  type: TYPE_NORMAL
- en: The benefits of C-based frameworks lies in the fact that an entire PHP extension
    is loaded during runtime. This greatly reduces I/O operations massively since
    there is no need to load `.php` files any more. Furthermore, compiled C language
    code executes faster than PHP bytecode. Since C extensions are loaded together
    with PHP one time during the web server daemon start process, their memory footprint
    is small. The downside of C-based frameworks is that the code is compiled, so
    we cannot easily debug it and patch it as we would with PHP classes.
  id: totrans-403
  prefs: []
  type: TYPE_NORMAL
- en: Low-level architecture and optimizations make Phalcon one of the lowest overheads
    for MVC-based applications.
  id: totrans-404
  prefs: []
  type: TYPE_NORMAL
- en: Phalcon is a full-stack, loosely coupled framework. While it does provide full
    MVC structure to our application, it also allows us to use its objects as glue
    components based on the needs of our application. We can choose if we want to
    create a full blown MVC application, or the minimal style micro application. Micro
    applications are suitable to implement small applications, APIs, and prototypes
    in a practical way.
  id: totrans-405
  prefs: []
  type: TYPE_NORMAL
- en: All of the frameworks we mentioned so far enable some form of extensions, where
    we can add new libraries or entire packages to a framework. Since Phalcon is a
    C-code framework, contributions to the framework doesn't come in the form of PHP
    code. On the other hand, writing and compiling C language code can be somewhat
    challenging for an average PHP developer.
  id: totrans-406
  prefs: []
  type: TYPE_NORMAL
- en: '**Zephir** project [http://zephir-lang.com](http://zephir-lang.com) addresses
    these challenges by introducing high-level Zephir language. Zephir is designed
    to ease the creation and maintainability of C extensions for PHP with a focus
    on type and memory safety.'
  id: totrans-407
  prefs: []
  type: TYPE_NORMAL
- en: When communicating with databases, Phalcon uses **Phalcon Query Language**,
    **PhalconQL**, or simply **PHQL** for short. PHQL is a high-level, object-oriented
    SQL dialect that allows us to write queries using SQL-like language that works
    with objects instead of tables.
  id: totrans-408
  prefs: []
  type: TYPE_NORMAL
- en: View templates are handled by Volt, Phalcon's own templating engine. It is highly
    integrated with other components, and can be used independently in our applications.
  id: totrans-409
  prefs: []
  type: TYPE_NORMAL
- en: Phalcon is pretty easy to pick up. Its documentation covers both the MVC and
    micro applications style of using a framework, with practical examples. The framework
    itself is rich enough to support the structure and libraries we need for most
    of today's applications. On top of that, there is an official Phalcon website
    called **Phalconist** [https://phalconist.com](https://phalconist.com) which provides
    additional resources to framework.
  id: totrans-410
  prefs: []
  type: TYPE_NORMAL
- en: Though there is no official company behind it, no certifications, no commercial
    support, and similar enterprise looking things, Phalcon does a great job of positioning
    itself as a choice worth evaluating even with a robust enterprise application
    development.
  id: totrans-411
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  id: totrans-412
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Looking back on the release of PHP 5 and its support to OOP programming, we
    can see the enormous positive impact it had on the PHP ecosystem. A large number
    of frameworks and libraries have sprawled out, offering enterprise level solutions
    to web application development.
  id: totrans-413
  prefs: []
  type: TYPE_NORMAL
- en: The release of PHP 7 is likely to be another leap forward for the PHP ecosystem.
    Though none of the new features are revolutionary as such, as they can be found
    in other programming languages from years ago, they impact PHP greatly. We are
    yet to see how its new features will reshape existing and future frameworks and
    the way we write applications.
  id: totrans-414
  prefs: []
  type: TYPE_NORMAL
- en: The introduction of more advanced *errors to exceptions* handling, scalar type
    hints, and function return type hints will surely bring much awaited stability
    to applications and frameworks using them. The speed improvements compared to
    PHP 5.6 are significant enough to cut down the hosting costs for higher load sites.
    Thankfully, the PHP development team minimized backward incomparability changes,
    so they should not stand in the way of swift PHP 7 adoption.
  id: totrans-415
  prefs: []
  type: TYPE_NORMAL
- en: Choosing the right framework is all but an easy task. What classifies a framework
    as an enterprise class framework is more than just collection of classes. It has
    an entire ecosystem around it.
  id: totrans-416
  prefs: []
  type: TYPE_NORMAL
- en: 'One should never be driven by hype when evaluating a framework for a project.
    Questions like the following should be taken into consideration:'
  id: totrans-417
  prefs: []
  type: TYPE_NORMAL
- en: Is it company or community driven?
  id: totrans-418
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Does it provide quality documentation?
  id: totrans-419
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Does it have a stable and frequent release cycle?
  id: totrans-420
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Does it provide some official form of certification?
  id: totrans-421
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Does it provide free and commercial support?
  id: totrans-422
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Does it have occasional seminars we can attend?
  id: totrans-423
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Is it open towards community involvement, so we can submit functionalities and
    patches?
  id: totrans-424
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Is it a full-stack or glue type of framework?
  id: totrans-425
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Is it convention or configuration driven?
  id: totrans-426
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Does it provide enough libraries to get you started (security, validation, templating,
    database abstractions, ORMs, routing, internationalization, and so on)?
  id: totrans-427
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Can the core framework be extended and overridden enough to make it more future
    proof with possible changes?
  id: totrans-428
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There are a number of established PHP frameworks and libraries out there, so
    the choice is all but easy. Most of these frameworks and libraries are still to
    fully catch up with the latest features added in PHP 7.
  id: totrans-429
  prefs: []
  type: TYPE_NORMAL
- en: Moving forward, in the next chapter, we will look into common design patterns
    and how to integrate them in PHP.
  id: totrans-430
  prefs: []
  type: TYPE_NORMAL
