- en: Attacking Web Applications
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Web applications are the most targeted methods of compromise. Today, we have
    web applications that provide e-commerce services, a prized target for attackers
    since they can obtain details such as credit cards and personal identifiable information.
    Businesses that have an internet presence are bound to have a web application
    that is accessible by the public. Web penetration testing demands both skill and
    time, and understanding the components of a web application, the types of attacks,
    and the tools that can be used will help you to focus on the exploitable vulnerabilities
    within a short time frame.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, you will learn about web applications and their components.
    You will learn about the different types of web application security testing and
    how penetration testing fits in. You will also understand the basics of the HTTP
    protocol and how various aspects of it will be of interest during penetration
    testing. Finally, you will learn about some of the common web application attacks
    and how to perform various attacks using intuition by leveraging some of the tools
    within Kali Linux.
  prefs: []
  type: TYPE_NORMAL
- en: 'As you progress through this chapter, you will learn about the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Preparing your environment
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Types of web application security testing
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The components of a web application
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Understanding the HTTP protocol
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Common web application attacks
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Attacking web applications
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To follow along with the examples and instructions in this chapter, please
    ensure that you have the following technical requirements:'
  prefs: []
  type: TYPE_NORMAL
- en: Kali Linux 2019.1
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Metasploitable 2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Preparing your environment
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we will work with various web applications and tools.
  prefs: []
  type: TYPE_NORMAL
- en: In the previous chapter, you learned about using Burp Suite; we will leverage
    some parts of Burp Suite in this chapter, too.
  prefs: []
  type: TYPE_NORMAL
- en: Please take note of your Metasploitable 2 virtual machine IP address. We will
    actively use this during various parts of this chapter. To recap, the IP address
    can be obtained by logging in to the virtual machine (the default username and
    password is `msfadmin`) and typing in the `ifconfig` command.
  prefs: []
  type: TYPE_NORMAL
- en: Types of web application security testing
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'There are three types of web application testing, and these are defined as
    follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Dynamic testing**: This type of testing doesn''t require the source code
    of the web application. The aim is to find vulnerabilities that could be exploited
    by an attacker from an untrusted location such as the internet.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Static testing**: This type of testing uses the web application''s source
    code. It works by looking for vulnerabilities from within the web application
    as opposed to trying to breach the web application from an untrusted location.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Penetration testing**: This type of testing is what we will focus on in this
    chapter. It entails using the human element to imitate how an attacker might exploit
    a web application. It makes use of skill, intuition, and a variety of tools.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The components of a web application
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Web applications have evolved from being static web pages to complex applications
    that provide a multitude of functionality. You can think of a web application
    as a normal computer application that simply operates over the internet.
  prefs: []
  type: TYPE_NORMAL
- en: In this section, we will discuss the various components of web applications.
  prefs: []
  type: TYPE_NORMAL
- en: Web application architecture
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Web application architecture is the interaction between various components.
    The three primary types of web application architecture are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Single-Page Applications (SPA)**: These are common now, with **minimalism**
    being the in thing for web applications. These work by dynamically updating content
    to the current page. **Asynchronous Javascript and XML** (**AJAX**) is used to
    provide the dynamic content. These types of applications are still vulnerable
    to attacks.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Microservices**: These are lightweight and focus on a single function. Microservices
    leverage various coding languages, and so there are vulnerabilities in this architecture.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Serverless**: This makes use of cloud providers that handle the server and
    infrastructure management. This allows applications to work without worrying about
    the infrastructure. Vulnerabilities such as broken authentication, inadequate
    logging, insecure application storage, and more exist here.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In all three models, there are security risks that exist. Therefore, the need
    for penetration testing exists no matter what model is being used.
  prefs: []
  type: TYPE_NORMAL
- en: Web application languages
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Since web applications are so diverse and dynamic, there are several languages
    that are used for writing web applications. These languages can sometimes interact
    in ways that can have serious implications on the security of the overall web
    application.
  prefs: []
  type: TYPE_NORMAL
- en: These commonly used languages are Python, Ruby, and Java. Let's look at some
    of the caveats of these languages.
  prefs: []
  type: TYPE_NORMAL
- en: Python
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Python is a language that is used often due to its simplicity and power. It
    creates an ecosystem that works across many different applications that are not
    only related to web applications.
  prefs: []
  type: TYPE_NORMAL
- en: Python makes use of a serialization mechanism known as **pickles**. Serialization
    is the process of creating data in a structure that can be stored and later restored
    to its original form. Using **pickles** allows an object to be converted into
    a byte stream and then converted back. Using pickles can be used for a variety
    of things, such as cookie values, and `auth` tokens.
  prefs: []
  type: TYPE_NORMAL
- en: 'A sample pickle looks as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: This function is taking an `AuthToken`, which is base64 encoded, decoding it,
    and checking its value. Of course, this `AuthToken` can be decoded if it's intercepted
    by an attacker. Alternatively, the attacker could write an exploit to create a
    modified `AuthToken`.
  prefs: []
  type: TYPE_NORMAL
- en: This is just one aspect of a security flaw that web application developers might
    overlook.
  prefs: []
  type: TYPE_NORMAL
- en: Ruby
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Ruby is a popular language that is used for web applications due to Ruby on
    Rails. Ruby on Rails is a framework that includes everything a developer would
    need to create a web application that leverages a database. The framework is free
    to use and the community actively contributes to it, which makes it a popular
    choice.
  prefs: []
  type: TYPE_NORMAL
- en: Ruby is also vulnerable to attacks, for example, vulnerabilities that use `string
    interpolation`. String interpolation allows you to substitute the result of Ruby
    code.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, the following code would write out `Hello User!` since anything
    defined within `#{}` will be evaluated:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Modifying the field to `#{%x['ls']}` would trick the server into listing its
    directory structure.
  prefs: []
  type: TYPE_NORMAL
- en: Since Ruby is used for the rapid deployment of web applications, there might
    be cases where vulnerabilities such as the one we've just discussed is present.
    There are many more exploits that can be leveraged by poor coding within Ruby.
  prefs: []
  type: TYPE_NORMAL
- en: Java
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Java is a programming language that has been around for a long time. It is
    used extensively and not only in web applications. That being said, it is known
    for having security vulnerabilities. These vulnerabilities affect various aspects
    of the programming language, as well as applications that leverage it. To get
    an idea of the amount of vulnerabilities that exist within Java and how it spans
    multiple applications or operating systems, just perform a search on Rapid 7''s
    Vulnerability and Exploit database for **Java**. As shown in the following screenshot, the
    results are astonishing:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/9db334e7-abc4-41c4-a04c-9d9cec836879.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 1: List of Java vulnerabilities that exist'
  prefs: []
  type: TYPE_NORMAL
- en: You can access the latest search results by going to [https://www.rapid7.com/db/?q=Java&type=nexpose](https://www.rapid7.com/db/?q=Java&type=nexpose).
  prefs: []
  type: TYPE_NORMAL
- en: There are a lot more web application languages that exist today, and none of
    them are without vulnerabilities. When performing a penetration test, identifying
    the underlying programming language will help you to focus on the vulnerabilities
    that can exist for it.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding the HTTP protocol
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Hypertext Transfer Protocol** (**HTTP**) is a client-server protocol. The
    web browser is classified as the client, which makes requests to the server, who
    will provide a response to the request. By default, HTTP uses port `80`, but this
    port can be configured if desired.'
  prefs: []
  type: TYPE_NORMAL
- en: 'HTTP is stateless, which means that the server doesn''t store any information
    related to the various users that make requests to it. For example, you can send
    multiple requests to a web application and they will be treated separately. HTTP
    is also a clear text protocol, and so any sensitive information that''s sent over
    HTTP can be sniffed using tools such as Wireshark:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/a0fc8086-ff09-4c14-bfc0-903507b66812.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 2: Clear text credentials transmitted via HTTP'
  prefs: []
  type: TYPE_NORMAL
- en: SSL is used to secure the data, and the protocol that's used is **Hypertext
    Transfer Protocol Secure** (**HTTPS**). HTTPS operates on port `443` by default,
    and this too can be reconfigured if desired.
  prefs: []
  type: TYPE_NORMAL
- en: Let's take a look at some HTTP requests and responses.
  prefs: []
  type: TYPE_NORMAL
- en: HTTP requests and responses
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When a client sends a request to the server, this is called an HTTP request.
    Within this HTTP request, we have the header and a body. The header contains information
    such as the request, cookies, and encoding information. The body contains the
    actual data that will be exchanged.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the following screenshot, we have a sample of an HTTP request header:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/0a8e03ee-4b10-4862-83b4-82a861a4e6ad.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 3: HTTP request header'
  prefs: []
  type: TYPE_NORMAL
- en: The first line begins with the `GET` request method, and then we have the `/download.html` resource
    that was requested, as well as the HTTP version, that is, `HTTP/1.1`.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are a few other request methods that can be found in an HTTP request
    header. These are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '| `POST` | This is used to send data to the server. |'
  prefs: []
  type: TYPE_TB
- en: '| `DELETE` | This is used to delete a file. |'
  prefs: []
  type: TYPE_TB
- en: '| `PUT` | This is used to upload a file.  |'
  prefs: []
  type: TYPE_TB
- en: '| `HEAD` | This is used to `GET` the HTTP headers only. |'
  prefs: []
  type: TYPE_TB
- en: 'There are a few fields within this header. Let''s take a look at the relevant
    fields:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Host**: A web server may have multiple sites being hosted. This field is
    used to define the host that we are trying to access.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**User-agent**: This field defines the client that is being used to access
    the host.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Cookie**: This is exchanged in order to track session information.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Referer**: This field will show whether you have been redirected from another
    URL. Attackers will manipulate the referrer field to redirect users to a malicious
    website. This manipulation can be done with XSS.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'When the server responds, it will respond with an HTTP response, which shares
    a similar structure to the HTTP request. In the following screenshot, we have
    a sample of the HTTP response:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/03b7682b-1553-4b30-b8d9-f145f5e612c2.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 4: Sample of an HTTP Response'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the first line, we have a status code of `200`. The various codes that could
    appear are defined as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Status code** | **Definition** | **Example** |'
  prefs: []
  type: TYPE_TB
- en: '| `1xx` | Information | `100`: Server agrees to handle a client request |'
  prefs: []
  type: TYPE_TB
- en: '| `2xx` | Success | `200`: Request succeeded |'
  prefs: []
  type: TYPE_TB
- en: '| `3xx` | Redirection | `301`: Page moved |'
  prefs: []
  type: TYPE_TB
- en: '| `4xx` | Client error | `403`: Forbidden page |'
  prefs: []
  type: TYPE_TB
- en: '| `5xx` | Server error | `500`: Internal server error |'
  prefs: []
  type: TYPE_TB
- en: 'For a complete list of status codes, please visit the following URL: [https://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html](https://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html).'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the response, we have a few interesting fields:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Server**: This field defines the server version of the web server. Immediately,
    we can see that we have a piece of reconnaissance information that can be used
    in a penetration test.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Set-cookie**: This is not set in the preceding screenshot. This field will
    be populated with a cookie value that will be used by the server to identify the
    client.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Common web application attacks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Web application attacks and vectors are progressing at a rapid pace. With the
    volume of people using the internet, businesses have to adapt and leverage complex
    web applications to provide services to customers or even employees. Having these
    on the internet obviously exposes them to risks. Most businesses take security
    seriously and, with the use of various software development life cycles, there
    are some really secure web applications out there.
  prefs: []
  type: TYPE_NORMAL
- en: Nevertheless, as security measures become stronger, so do the attacks. Over
    and above the attacks becoming more sophisticated, there is human error that comes
    into the equation. All it takes is a piece of poorly written code to exploit the
    web application.
  prefs: []
  type: TYPE_NORMAL
- en: In this section, we will consider a few of the common web application attacks
    that exist today.
  prefs: []
  type: TYPE_NORMAL
- en: Inclusion attacks (LFI/RFI)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: File inclusion vulnerabilities exist within web applications that are poorly
    written. This type of vulnerability allows the attack to submit data into files
    on the server or even upload files.
  prefs: []
  type: TYPE_NORMAL
- en: '**Local File Inclusion** (**LFI**) vulnerabilities involve files that are local
    on the web application and the underlying operating system. If this vulnerability
    is exploited, the attacker would be able to read and execute files or code.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Remote File Inclusion** (**RFI**) vulnerabilities involve executing code
    that is remote to the web application. In this attack, the attacker can host vulnerable
    code on a server in a remote location. The attacker can then exploit the web application
    to access the remote server and execute the code.'
  prefs: []
  type: TYPE_NORMAL
- en: Cross-Site Request Forgery (CSRF)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To understand CSRF, let's take a step back and talk about how web applications
    handle sessions. When HTTP is in use, keeping track of a user's authentication
    is done using a cookie. Cookies should generally be secure by having a strong
    cryptographic strength and entropy and should be transmitted over a secure channel
    such as HTTPS.
  prefs: []
  type: TYPE_NORMAL
- en: When a browser submits that cookie to a website without checking the origin
    of the request, this leaves a gap, which CSRF takes advantage of. CSRF involves
    an attacker using malicious code that makes a request to the target website, which
    looks as if it originated from the original sender. The legitimate cookie is used
    and a forged request will be made to the target web application. The web application
    will find and accept this forged request since it has a valid cookie, and the
    actions defined in the request will be handled.
  prefs: []
  type: TYPE_NORMAL
- en: 'In order for CSRF to work, there are a few things that need to be in place:'
  prefs: []
  type: TYPE_NORMAL
- en: The web application that is being attacked should not check the referrer in
    the HTTP header.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This allows the web application to accept requests from external pages.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The web application will accept data modifications from URLs or forms.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The attacker must be able to determine all of the input values that the web
    application would expect. For example, when resetting a password, the web application
    would look for values of the password and probably password confirmation.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The user who is being attacked must load the malicious page.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An example of a CSRF attack would be a malicious page that has multiple images.
    When the unsuspecting user is directed to this page, the images load. Some images
    might be an **action**, causing the browser to perform some request to a targeted
    web application.
  prefs: []
  type: TYPE_NORMAL
- en: Cross-site scripting (XSS)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: XSS is one of the most common vulnerabilities that's found within web applications.
    This type of attack has been on the **OWASP Top 10** list of vulnerabilities for
    a while. This attack leverages injection techniques that allow the attacker to
    execute scripts that can perform various purposes. The browser will execute the
    script because it believes that the script originated from the web application.
  prefs: []
  type: TYPE_NORMAL
- en: 'Cross-site scripting can be split into three different types. These are defined
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Persistent (Type 1)**: In this type of XSS, the malicious input is stored
    within the target server. For example, it can be stored in its database, forums,
    and comment fields.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Reflected XSS (Type II)**: In this type of XSS, the data is immediately returned
    by the web application. This can be via an error message, search query, or any
    other response. The main point here is that the data is returned by a request.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**DOM-based XSS (Type 0)**: In this type of XSS, the vulnerability resides
    on the client side instead of the server side. For example, the server side HTML
    page won''t change, but on the client side, the page executes differently due
    to modifications in the **Document Object Model** (**DOM**) environment.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When an attacker leverages an XSS attack, access to components such as cookies,
    session keys, and other sensitive information is attainable.
  prefs: []
  type: TYPE_NORMAL
- en: SQL injection (SQLi)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: SQLi attacks have been around for a long time, and yet they are still effective
    in poorly written web applications today. This type of attack works on web applications
    that use backend databases such as Microsoft SQL, and MySQL.
  prefs: []
  type: TYPE_NORMAL
- en: When this attack is successful, sensitive information can be accessed. Data
    within the database can be modified (deleted, updated, and added), and it's possible
    to bypass authentication and authorization controls.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are various types of SQL injection attacks. Some of these are defined
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Error-based attacks**: This type of attack works by feeding invalid commands
    to the database. This is usually done through pieces of the web application that
    require input, for example, a user input. When these invalid commands are fed,
    we are hoping that the server will reply with an error that contains details that
    will provide us with information. For example, the server may reply with its operating
    system, version, or even full query results.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Union-based attacks**: This type of attack leverages the `UNION` operator
    to extend the results of the query, ultimately allowing the attacker to run multiple
    statements. The key is that the structure must remain the same as the original
    statement.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Blind injection attacks**: This type of attack is dubbed **blind** because
    there are no error messages being displayed. In this attack, the database is queried
    using a series of true and false queries to gain information that can be used
    for an attack.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Understanding these attacks is beneficial since they will help you to use the
    correct type of attack during your penetration test. We will leverage a tool known
    as `sqlmap` to perform some SQL injection attacks later in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Command execution
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Command execution is an attack in which commands destined for the operating
    system can be executed via the vulnerable web application. This is made possible
    by an application that passes unsafe user input to the server.
  prefs: []
  type: TYPE_NORMAL
- en: Command execution attacks can lead to serious compromise, depending on what
    kind of system commands you can execute and the privilege level of the web application.
  prefs: []
  type: TYPE_NORMAL
- en: Attacking web applications
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As a penetration tester, you shouldn't rely solely on tools that can be used
    for web application attacks. Being well-versed about them will certainly help
    during your penetration test as you may be pressed for time.
  prefs: []
  type: TYPE_NORMAL
- en: In this section, we will discuss various tools and look at how to use them to
    perform attacks against various web applications.
  prefs: []
  type: TYPE_NORMAL
- en: Nikto
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Nikto is a web server scanner that is included with Kali Linux by default.
    It is able to extract or identify information such as the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Server version
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Potentially dangerous programs or files
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Server configuration items
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installed web servers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Some of the main features of Nikto are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Support for SSL
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: HTTP proxy support
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ability to scan multiple targets using an input file
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ability to tune the scanning engine
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Nikto was not designed to be stealthy. Using this tool in a penetration test
    will likely lead to detection by an IPS/IDS.
  prefs: []
  type: TYPE_NORMAL
- en: Using Sqlmap
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Sqlmap is an open source tool that is included with Kali Linux by default. It
    is used to automate the detection and exploitation of SQL injection flaws, as
    well as to take over the databases of web applications. It makes use of a wide
    range of options that allow for fingerprinting, data access, execution, and more.
  prefs: []
  type: TYPE_NORMAL
- en: The syntax for `sqlmap` is `sqlmap <options>`.
  prefs: []
  type: TYPE_NORMAL
- en: 'The features of `sqlmap` are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: There's support for multiple SQL products, such as MySQL, PostgreSQL, Microsoft
    SQL, Oracle, and SQLite.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It supports SQL injection techniques such as Boolean and time-based blind, stacked
    queries, error-based, UNION query, and out of band.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It has the ability to enumerate users, password hashes, privileges, and more.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It has the ability to identify the type of password hash and provides support
    for cracking it using dictionary attacks.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It has the ability to interact with the database's underlying operating system.
    This can be used to download or upload files, create a reverse shell using an
    interactive command prompt or Meterpreter session, or execute commands.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It supports dumping the database as a whole, or specific pieces of it, such
    as specific columns or a range of entries or characters.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It has the ability to leverage the Meterpreter `getsystem` command for privilege
    escalation.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Now that we have covered a brief overview of Sqlmap, let's take a look at this
    tool in action. We will use this tool to perform a few attacks against the **Damn
    Vulnerable Web Application** (**DVWA**) that is built into Metasploitable 2.
  prefs: []
  type: TYPE_NORMAL
- en: Performing attacks using Sqlmap
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let's take a look at how we can use Sqlmap to perform various attacks against
    the DVWA that is installed by default in Metasploitable 2.
  prefs: []
  type: TYPE_NORMAL
- en: Information gathering
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The first thing we will do is some information gathering. Let''s look at what
    information we can obtain before performing any attacks:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Using Firefox ESR within Kali Linux, navigate to your Metasploitable 2 IP virtual
    machine''s IP address. Click on DVWA and log in with the following credentials:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Username**: `admin`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Password**: `password`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Click on DVWA Security on the left-hand navigation pane and select low under
    Script Security. Then, click on Submit:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/ea837aa3-f3c7-4724-accc-49ed01664e39.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 5: Setting DVWA security level to low'
  prefs: []
  type: TYPE_NORMAL
- en: Next, click on SQL Injection and put in the number 1 in the User ID: field.
    Before clicking on Submit, make sure that you have the Burp Suite proxy enabled
    and that your browser is configured to use the Burp Suite proxy. Once you have
    the proxy enabled, click on Submit.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Take note of the fields that were intercepted. We are interested in `cookie`
    and `PHPSESSID`*:*
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/a8520b58-ae1f-4cc2-a61f-f2ab2a73aae3.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 6: DVWA SQLi intercept'
  prefs: []
  type: TYPE_NORMAL
- en: 'The first thing we will do is try to enumerate all databases using the `--dbs`
    option. To do this, we will use the `cookie` and `PHPSESSID` values that we have
    captured. The command we will use is as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: In this command, we are defining the target URL with the `-u` parameter. This
    URL is the IP address of the DVWA web server (Metasploitable 2) with the `GET`
    request (`/dvwa/vulnerabilities/sqli/?id=1&Submit=Submit`). We specify the `cookie`
    and `PHPSESSID` values and use the `--dbs` option to list all databases.
  prefs: []
  type: TYPE_NORMAL
- en: 'Take note of the following output. Sqlmap was able to identify the database
    and asked us whether we wanted to continue with tests for other databases:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/69be8112-5d0e-4367-93ca-58da308cf533.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 7: Sqlmap database identification'
  prefs: []
  type: TYPE_NORMAL
- en: 'We will select *Y* to skip test payloads that are specific for other DMBSes
    and *N* for the questions that are prompted afterward. Once `sqlmap` is done,
    it will provide you with some valuable information. Here, we have some injection
    points identified, information about the underlying operating system, and the
    database names that exist:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/aab8d639-0c59-46dd-8034-e020b607e1f7.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 8: Sqlmap output with valuable information'
  prefs: []
  type: TYPE_NORMAL
- en: 'We can use the `-f` option to fingerprint the databases, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'We get the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/0f2eb51a-1563-4ece-a8fe-7514d06d9c58.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 9: Determining the software versions'
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have obtained information related to the DVWA, let's go further
    and perform some additional attacks.
  prefs: []
  type: TYPE_NORMAL
- en: Dumping user details from SQL tables
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The next attack we will perform is obtaining information about users from SQL
    databases. For this, we will target the `dvwa` database. Let''s get started:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Use the following command to obtain the current tables within the DB:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'In this command, we are looking for columns (`--columns`) that are related
    to the `dvwa` database (`-D dvwa`). Notice that, in the output, we have an interesting
    table, which is listed as `users` with columns such as `firstname`*,* `lastname`*,*
    `userid`, and `password`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/23bb7147-1dae-41e9-a9db-24fae21e5e17.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 10: Columns for the users table within the `dvwa` database'
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have identified an interesting table, let's proceed and dump the
    table to see whether we are able to crack the hashes using a dictionary attack.
  prefs: []
  type: TYPE_NORMAL
- en: 'By using the following command, we will dump the table entries for all tables:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'In this command, we are using the `--dump` option to look at all of the entries
    for all of the tables within the `dvwa` database. When the command runs, `sqlmap`
    will ask whether it should use a dictionary attack to attempt to crack the passwords.
    By choosing the `yes` option, `sqlmap` will prompt for a dictionary file. Using
    a built-in dictionary file will suffice for this demo. Take note of the output; you
    will see that we have the table of the user that was dumped, along with all of
    its details, including the passwords for each user in its hashed form and in clear
    text:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/23b1e9dd-7073-456b-9b67-3a5873a460ad.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 11: User details dumped using Sqlmap'
  prefs: []
  type: TYPE_NORMAL
- en: In this section, we have looked at the effectiveness of Sqlmap. Using this tool
    allows you to automate a few attacks when you have time constraints during a penetration
    test. We specifically looked at how to perform information gathering, enumerate
    tables, and extract user credentials. Sqlmap has a lot more features, and so it
    is a must-have in your penetration testing toolkit.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a backdoor using PHP
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let's take a look at using a malicious `php` file to create a backdoor into
    the underlying operating system of a web application. Here, we will use DVWA since
    it allows us to upload files.
  prefs: []
  type: TYPE_NORMAL
- en: Ensure that DVWA's security level is set to low. The default username to log
    in is `admin` and the password is `password`.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will use MSFvenom to create a PHP file that will provide us with a reverse
    shell. The handler that is used to listen for a connection will be set up within
    Metasploit. The steps are outlined as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: 'From a Terminal window within Kali Linux, enter the following command to create
    a malicious PHP backdoor:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: In this command, we are defining the payload (`-p`) as `php/meterpreter_reverse_tcp`,
    and then we define the attacking machine's IP address (`LHOST`) and port that
    the reverse shell will be established on (`LPORT`). We aren't using any encoders;
    we simply want the raw `php` file (`-f raw`). The filename should be `msfv-shell.php`
    ( `> msfv-shell.php`).
  prefs: []
  type: TYPE_NORMAL
- en: 'Once the PHP file has been generated, we will upload it to DVWA. Log in to
    DVWA and navigate to the Upload section on the left-hand side. Click on Browse...
    and navigate to the location where you created the `msfv-shell.php` file. Then,
    select it. Once the file has been uploaded, take note of the location it was uploaded
    to:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/876555ff-ef13-4388-a779-5c047f645c44.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 12: MSFVenom malicious PHP file uploaded'
  prefs: []
  type: TYPE_NORMAL
- en: Before we connect to the location of the uploaded PHP page, we need to set up
    a handler in Metasploit. To do this, we will open the Metasploit Framework using
    the `msfconsole` command.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Once the Metasploit Framework has loaded, we will create the handler using
    the following commands:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Once the handler has been created, we can navigate to the upload location and
    click on the msfv-shell.php file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/7d0b0ee3-bc19-4500-a314-aee181e06003.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 13: Accessing the malicious PHP file'
  prefs: []
  type: TYPE_NORMAL
- en: 'Once the file has been accessed, on the Metasploit console, you will have a
    Meterpreter session:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/958b3e80-c178-400e-93d1-9b8af210611f.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 14: Reverse Meterpreter shell established'
  prefs: []
  type: TYPE_NORMAL
- en: From here, you have the option to drop into the system shell, upload/download
    files, and more.
  prefs: []
  type: TYPE_NORMAL
- en: Performing XSS attacks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Here, we will use DVWA and look at how to perform a reflective and stored XSS
    attack. We will keep the security level of DVWA on the low setting.
  prefs: []
  type: TYPE_NORMAL
- en: Performing a reflective XSS attack
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this scenario, we will perform a reflective XSS attack. In this attack,
    we will send a request to the web application, forcing it to display some sensitive
    information. We will perform the attack as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Log in to the DVWA and click on XSS Reflected. The default action for this page
    is to simply `echo` any input that you put into the field. Therefore, we will
    try to force the application to provide us with information such as`cookie` and
    `PHPSESSID`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the Whats your name? field, we will put in a simple script that will provide
    us with the `cookie` and `PHPSESSID` data that we are looking for. Enter the following
    command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'In this script, we are telling the web application to **alert** us by providing
    a popup. Here, we are calling `document.cookie`, which will provide the current
    `cookie` and `PHPSESSID` values. Take note of the output; we now have the `cookie`
    and `PHPSESSID` values that we were after:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/1f023b4e-9cb3-49bb-93f6-4ceba811090b.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 15: Using reflective XSS to provide sensitive data'
  prefs: []
  type: TYPE_NORMAL
- en: 'Now that we have all of the required details, we will attempt to inject a form
    into this page to trick a user into entering their credentials. We will also force
    the web application to send the output elsewhere instead of popping up on screen:'
  prefs: []
  type: TYPE_NORMAL
- en: Open a Terminal window within Kali Linux. We will create a `netcat` simple web
    server on port `80` by using the `nc -lvp 80` command.In this command, we are
    starting `netcat` using the `nc` command. The `-l` switch is used to enable listen
    mode, `v` is for verbose output, and `p` defines the port number that we will
    listen on. Once the command has been executed, `netcat` will listen for connections.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Using the same XSS Reflected page, enter the following script:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: In this script, we are creating a simple form that's asking for a `username`
    and `password`. Take note of the `form action=` field. Here, we are using the
    IP address of the attacker PC (Kali Linux) where we started the `netcat` listener.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, we have a form being displayed. Enter a random `username` and `password`
    and hit Logon:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/9f1f6f03-dd12-4183-8afe-125bb73b021c.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 16: Malicious form injected using XSS'
  prefs: []
  type: TYPE_NORMAL
- en: 'Once you hit Logon, take a look at the output on the Terminal where you started
    the `netcat` listener. The web application has sent the login request to our listener,
    and the credentials are visible in clear text:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/c6e6d6ab-1349-4075-85be-8482b66bce46.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 17: Login request captured on netcat listener'
  prefs: []
  type: TYPE_NORMAL
- en: There are many more attacks that can be done by leveraging reflective XSS, but
    the point is the criticality of this vulnerability. As we have seen, it is possible
    to obtain sensitive data, which can be detrimental to any organization that has
    vulnerable web applications.
  prefs: []
  type: TYPE_NORMAL
- en: Performing a stored XSS attack
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s take a look at how we can perform a stored XSS attack. Here, we will
    use the XSS Stored section of DVWA. We will attempt to obtain `cookie` and `PHPSESSID`
    again:'
  prefs: []
  type: TYPE_NORMAL
- en: Log in to the DVWA and click on XSS stored. Here, we have a guestbook that people
    can sign. We will attempt to input some code into the message field.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Enter any value for the name, and then use the same script we used earlier:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Once you click on Sign guestboo, the `cookie` and `PHPSESSID` details will
    be displayed:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/eef38e48-0464-4749-b3d9-239176c672a5.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 18: Using stored XSS to provide sensitive data'
  prefs: []
  type: TYPE_NORMAL
- en: Since this is a stored XSS attack, if you navigate to another section of the
    DVWA web application and return to XSS stored, the popup will automatically appear,
    as the malicious script is stored in the database.
  prefs: []
  type: TYPE_NORMAL
- en: Performing a file inclusion attack
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let's perform a local and remote file inclusion attack. Both of these attacks
    will be done on DVWA, and we will keep the security level of DVWA on the low setting.
  prefs: []
  type: TYPE_NORMAL
- en: 'For the LFI attack, we will attempt to browse a local file on the web server.
    A valuable file that resides on Linux operating systems is the `/etc/passwd` file.
    Let''s get started:'
  prefs: []
  type: TYPE_NORMAL
- en: Once we're logged in to DWVA, click on File Inclusion on the left-hand side.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Let''s attempt to navigate to the `/etc/passwd` file. Since we don''t know
    what the local working directory that the web application is operating in is,
    we will use a sequence of characters to perform directory traversal. In the address
    bar, add in `../../../../../etc/passwd` after `?page=`, as shown in the following
    screenshot. The use of `../` is used in directory traversal to go back to the
    previous directory. Experimentation is needed here as you may not know the location
    of the target web application within the directory structure of the server:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/5e149484-82fa-4648-aaca-e7720038d9c7.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 19: Using directory traversal with LFI'
  prefs: []
  type: TYPE_NORMAL
- en: 'Once you hit *Enter*, you will have a lot of output. Within the output, you
    will find the contents of the `/etc/passwd` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/0aa54e4e-bfcf-4db5-b7c0-33d46dedbbc8.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 20: Contents of the /etc/passwd file exposed'
  prefs: []
  type: TYPE_NORMAL
- en: By using LFI attacks, you can do a lot more than expose system files. You can
    upload files to the web server and initiate reverse shells.
  prefs: []
  type: TYPE_NORMAL
- en: Performing a command execution attack
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We will use DVWA and look at how to perform a command execution attack. We
    will keep the security level of DVWA on the low setting:'
  prefs: []
  type: TYPE_NORMAL
- en: Log in to the DVWA application and click on Command Execution on the left-hand
    side.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Let's attempt to perform a simple command, such as listing the current directory.
    Since the form requires an IP address, we will define an IP but add in the additional
    command using an append character, `&&`. To list the directory, we will use `-ls
    -la`. The full comment will be `192.168.34.153 && ls -la`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In this command, we are defining a random IP (I am using the IP of my Kali
    virtual machine) and appending an additional command using the `&&`. This command
    is listing the `ls` directory. We can view these files by using a long listing,
    `-l`, and include all files, `a`. Here''s the output we receive:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/986bf30d-3560-49c5-ba52-4949593087c5.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 21: Command execution attack'
  prefs: []
  type: TYPE_NORMAL
- en: Here, we have the actual ping command, but at the bottom, we have the listing
    of the current directory. Now, we know that command execution is possible. Let's
    see if we can obtain a remote shell using Metasploit.
  prefs: []
  type: TYPE_NORMAL
- en: From a Terminal window, we will start the Metasploit Framework by using the `msfconsole` command.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'We will use the script delivery exploit. Enter the `use exploit/multi/script/web_delivery` command
    and then `show options` to view the available options:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/73085fa5-692d-4823-a007-991288763c2f.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 22: Loading the exploit in Metasploit'
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, we need to define the target. By using the `show targets` command, we
    can see what targets this exploit will work with. In our case, we will use `PHP`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/2f7b5ad8-d91d-4eea-b7f5-6083a2c4d058.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 23: Targets that are available with the exploit'
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, we will configure the exploit. Set the following options:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Remember that `LHOST` is your Kali virtual machine IP, and that `LPORT` can
    be any random port number. The payload we are using is a reverse TCP `meterpreter`
    shell. You can confirm your options by using the `show options` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/fc3fd8c5-35e0-4610-8ab1-2aa9c0c394a3.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 24: Configuring the exploit options'
  prefs: []
  type: TYPE_NORMAL
- en: 'Once you have configured these options, run the exploit using the `run` command.
    Take note of the output. The highlighted code is what we will use in the command
    execution attack to spawn a reverse shell to our attacking system. Copy that code,
    and don''t close the Terminal window or exit out of Metasploit:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/b4cbfdb6-84d4-4849-b5f9-029fb75bf700.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 25: Exploit running with reverse PHP script defined'
  prefs: []
  type: TYPE_NORMAL
- en: 'Return to the Command Execution page in DVWA. Now, type in an IP address and
    append it by using `&&` and the code that was generated by Metasploit:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/fa118290-8fbf-4227-8363-b205bb730082.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 26: Running the malicious script using a command execution attack'
  prefs: []
  type: TYPE_NORMAL
- en: Once you click on submit, you will start a `meterpreter` session. Return back
    to the Terminal window where you have configured the exploit.
  prefs: []
  type: TYPE_NORMAL
- en: 'You will now see that you have the `meterpreter` session up and running. Hitting
    *Enter* will take you back to the exploit configuration page, but your session
    will still be established. You can check this by using the `sessions -i` command.
    To access this session, use the `sessions -i [session ID]` command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/ae2950e6-16e0-4cc1-b319-701435ba7e97.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 27: Meterpreter sessions established'
  prefs: []
  type: TYPE_NORMAL
- en: 'From here, you will be able to leverage the full functionality of Meterpreter.
    You can access the operating system shell by using the `shell` command. From here,
    you will be able to take your attack further:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/0d255447-bcbe-4085-8805-819d11f9c162.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 28: Accessing the operating system shell'
  prefs: []
  type: TYPE_NORMAL
- en: As we have seen, with this attack, you have a number of options available to
    take the exploitation further. Command execution vulnerabilities can be easily
    exploited using tools such as the Metasploit Framework.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you have learned about web applications and their architecture,
    as well as their components. You have learned about the different types of web
    application testing, and we focused specifically on penetration testing. You gained
    insight into the HTTP protocol and what is detailed in the request and response
    headers. Finally, you learned about the various web application attacks and how
    to perform them in a testing environment.
  prefs: []
  type: TYPE_NORMAL
- en: In [Chapter 9](297a1e63-5c9b-4871-a46b-e4f2b25da48c.xhtml),* Getting Started
    with Wireless Attacks*, we will discuss wireless architecture, their attacks,
    and how to perform them.
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Name one of the three types of web application architecture.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What is the difference between HTTP and HTTPS?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What can be manipulated in an HTTP response header to perform an XSS attack?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Name two types of web application attacks.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What tool can be used to create a PHP backdoor payload?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
