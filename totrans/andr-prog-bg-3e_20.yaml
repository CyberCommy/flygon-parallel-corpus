- en: '*Chapter 20*: Drawing Graphics'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This entire chapter will be about the Android `Canvas` class and some related
    classes, including `Paint`, `Color`, and `Bitmap`. These classes combined bring
    great power when it comes to drawing to the screen. Sometimes the default UI provided
    by the Android API isn't what we need. If we want to make a drawing app, draw
    graphs, or perhaps create a game, we need to take control of every pixel that
    the Android device has to offer.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
- en: Understanding `Canvas` and related classes
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Writing a `Canvas`-based demo app
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Looking at the Android coordinate system so we know where to do our drawing
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Learning about drawing and manipulating bitmaps
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Writing a bitmap-based demo app
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let's draw!
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
- en: Technical requirements
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You can find the code files present in this chapter on GitHub at [https://github.com/PacktPublishing/Android-Programming-for-Beginners-Third-Edition/tree/main/chapter%2020](https://github.com/PacktPublishing/Android-Programming-for-Beginners-Third-Edition/tree/main/chapter%2020).
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
- en: Understanding the Canvas class
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `Canvas` class is part of the `android.graphics` package. In the next two
    chapters, we will be using all the following `import` statements from the `android.graphics`
    package and one more from the now-familiar `View` package. They give us access
    to some powerful drawing methods from the Android API:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: First, let's talk about `Bitmap`, `Canvas`, and `ImageView`, as highlighted
    in the previous code.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
- en: Getting started drawing with Bitmap, Canvas, and ImageView
  id: totrans-15
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As Android is designed to run all types of mobile apps, we can't immediately
    start typing our drawing code and expect it to work. We need to do a bit of preparation
    (coding) to consider the specific device our app is running on. It is true that
    some of this preparation can be slightly counterintuitive, but we will go through
    it a step at a time.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
- en: Canvas and Bitmap
  id: totrans-17
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Depending on how you use the `Canvas` class, the term can be slightly misleading.
    While the `Canvas` class *is* the class to which you draw your graphics, like
    a painting canvas, you still need a surface to transpose the canvas to.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
- en: 'The surface, in this case (and in our first two demo apps), will be from the
    `Bitmap` class. We can think of it like this: we get a `Canvas` object and a `Bitmap`
    object and then set the `Bitmap` object as the part of the `Canvas` object to
    draw upon.'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
- en: This is slightly counterintuitive if you take the word canvas in its literal
    sense but once it is all set up, we can forget about it and concentrate on the
    graphics we want to draw.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
- en: Note
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
- en: The `Canvas` class supplies the *ability* to draw. It has all the methods for
    doing things such as drawing shapes, text, lines, and image files (including other
    bitmaps), and even plotting individual pixels.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
- en: The `Bitmap` class is used by the `Canvas` class and is the surface that gets
    drawn upon. You can think of the `Bitmap` instance as being inside a picture frame
    on the `Canvas` instance.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
- en: Paint
  id: totrans-24
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In addition to the `Canvas` and `Bitmap` classes, we will be using the `Paint`
    class. This is much more easily understood. `Paint` is the class used to configure
    specific properties such as the color that we will draw on `Bitmap` (within `Canvas`).
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
- en: There is still another piece of the puzzle to cover before we can start drawing.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
- en: ImageView and Activity
  id: totrans-27
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `ImageView` class is the class that the `Activity` class will use to display
    output to the user. The reason for this third layer of abstraction is that as
    we have seen throughout the book, the `Activity` class needs to pass a `View`
    to the `setContentView` method to display something to the user. Throughout the
    book so far, this has been a layout that we created in the visual designer or
    in XML code.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
- en: This time, we don't want a regular UI; we want to draw lines, pixels, and shapes.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
- en: There are multiple types of classes that extend the `View` class, enabling many
    different types of apps to be made, and they will all be compatible with the `Activity`
    class, which is the foundation of all regular Android apps (including drawing
    apps and games).
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
- en: It is, therefore, necessary to associate the `Bitmap` class that gets drawn
    on (through its association with `Canvas`) with `ImageView`, once the drawing
    is done. The last step will be telling `Activity` that our `ImageView` class represents
    the content for the user to see by passing it to the `setContentView` method.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
- en: Canvas, Bitmap, Paint, and ImageView quick summary
  id: totrans-32
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If the theory of the code structure we need to set up seems like it is not simple,
    you will breathe a sigh of relief when you see the relatively simple code shortly.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
- en: 'A quick summary of what we know so far:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
- en: Every app needs an `Activity` class to interact with the user and the underlying
    operating system. Therefore, we must conform to the required hierarchy if we want
    to succeed.
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We will use the `ImageView` class, which is a type of the `View` class. The
    `View` class is what `Activity` needs to display our app to the user.
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `Canvas` class supplies the *ability* to draw lines, pixels, and other graphics
    too. It has all the methods for doing things such as drawing shapes, text, lines,
    and image files, and even plotting individual pixels.
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `Bitmap` class will be associated with the `Canvas` class and it is the
    surface that actually gets drawn upon.
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `Canvas` class uses the `Paint` class to configure details such as the color.
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Finally, once the bitmap has been drawn upon, we must associate it with the
    `ImageView` instance, which in turn is set as the view for `Activity` via the
    `setContentView` method.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
- en: The result will be what we draw on the `Bitmap` instance in the `Canvas` instance,
    which is displayed to the user through the `ImageView` instance via the call to
    the `setContentView` method. Phew!
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
- en: Note
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
- en: It doesn't matter if that isn't 100% clear. It is not that you aren't seeing
    things clearly – it simply isn't a clear relationship. Writing the code and using
    the techniques over and over will cause things to become clearer. Look at the
    code, do the demo apps in this chapter and the next, and then re-read this section.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
- en: Let's look at how to set up this relationship in code. Don't worry about typing
    the code; just study it first.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
- en: Using the Canvas class
  id: totrans-45
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let's look at the code and the different stages required to get drawing, and
    then we can quickly move on to drawing something for real, with the `Canvas` demo
    app.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
- en: Preparing the instances of the required classes
  id: totrans-47
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The first step is to declare the instances of the classes we require:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The previous code declares references of the `ImageView`, `Bitmap`, `Canvas`,
    and `Paint` types. They are named `myImageView`, `myBlankBitmap`, `myCanvas`,
    and `myPaint`, respectively.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
- en: Initializing the objects
  id: totrans-51
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Next, we need to initialize our new objects before using them:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Notice this comment in the previous code:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: This is where we would configure our color and draw stuff. Also, notice at the
    top of the code we declare and initialize two `int` variables called `widthInPixels`
    and `heightInPixels`. When we code the `Canvas` demo app, I will go into greater
    detail about some of those lines of code.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
- en: We are now ready to draw. All we must do is assign the `ImageView` instance
    to `Activity`.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
- en: Setting the Activity content
  id: totrans-58
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Finally, before we can see our drawing, we tell Android to use our `ImageView`
    instance called `myImageView` as the content to display to the user:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: As we have already seen in every app so far, the `setContentView` method is
    part of the `Activity` class and we pass in `myImageView` as an argument, instead
    of an XML layout as we have been doing throughout the book so far. That's it.
    All we must learn now is how to actually draw on that `Bitmap` instance.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
- en: Before we do some drawing, I thought it would be useful to start a real project,
    copy and paste the code we have just discussed, a step at a time, into the correct
    place, and then actually see something drawn to the screen.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们进行一些绘图之前，我认为开始一个真正的项目，逐步复制和粘贴我们刚刚讨论过的代码到正确的位置，然后实际看到一些东西被绘制到屏幕上会很有用。
- en: Let's do some drawing.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: '让我们进行一些绘制。 '
- en: Canvas demo app
  id: totrans-64
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 画布演示应用程序
- en: We will create a new project just to explore the topic of drawing with `Canvas`.
    We will reuse what we have just learned and this time, we will also draw to the
    `Bitmap` instance.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将创建一个新项目，只是为了探索使用`Canvas`进行绘制的主题。我们将重用我们刚刚学到的知识，这次还将绘制到`Bitmap`实例上。
- en: Creating a new project
  id: totrans-66
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建一个新项目
- en: Create a new project and call it `Canvas Demo`. Choose the **Empty Activity**
    template.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个新项目，命名为`Canvas Demo`。选择**空活动**模板。
- en: In addition, we are going to be using the vanilla version of the `Activity`
    class and the `MainActivity` class will therefore extend `Activity` instead of
    `AppCompatActivity` as we have been using previously. This is simply because we
    no longer need the extra features provided by the `AppCompatActivity` class.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，我们将使用`Activity`类的原始版本，因此`MainActivity`类将扩展`Activity`，而不是之前使用的`AppCompatActivity`。这仅仅是因为我们不再需要`AppCompatActivity`类提供的额外功能。
- en: Note
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: The complete code for this app can be found in the download bundle in the [*Chapter
    20*](B16773_20_ePub_RK.xhtml#_idTextAnchor345)`/Canvas Demo` folder.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 此应用程序的完整代码可以在[*第20章*](B16773_20_ePub_RK.xhtml#_idTextAnchor345)`/Canvas Demo`文件夹中的下载包中找到。
- en: Coding the Canvas demo app
  id: totrans-71
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 编写Canvas演示应用程序
- en: 'To get started, edit the code in `MainActivity.java`, including adding the
    `import` directives and changing the version of the `Activity` class that the
    `MainActivity` class inherits from. Also notice in the next code that the call
    to the `setContentView` method has also been deleted. We will replace it soon:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始，请编辑`MainActivity.java`中的代码，包括添加`import`指令和更改`MainActivity`类继承的`Activity`类的版本。还要注意下一个代码中`setContentView`方法的调用也已被删除。我们很快会替换它：
- en: '[PRE5]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Now that we have declared instances of the required classes, we can initialize
    them. Add the following code to the `onCreate` method after the call to `super.onCreate…`,
    as shown in this next code:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经声明了所需类的实例，我们可以初始化它们。在`onCreate`方法中调用`super.onCreate…`之后，添加以下代码，如下一个代码所示：
- en: '[PRE6]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: This code is the same as we saw when we were discussing `Canvas` earlier. It
    is worth exploring the `Bitmap` class initialization as it is not straightforward.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码与我们之前讨论`Canvas`时看到的一样。值得探索`Bitmap`类的初始化，因为它并不简单。
- en: Exploring the Bitmap initialization
  id: totrans-77
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 探索位图初始化
- en: Bitmaps, more typically in graphics-based apps and games, are used to represent
    objects such as different brushes to paint with, the player, backgrounds, game
    objects, and so on. Here we are simply using it to draw upon. In the next project,
    we will use bitmaps to represent the subject of our drawing, not just the surface
    to draw upon.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 位图，在基于图形的应用程序和游戏中更典型地用于表示不同的画笔、玩家、背景、游戏对象等。在这里，我们只是用它来绘制。在下一个项目中，我们将使用位图来表示我们绘制的主题，而不仅仅是绘制的表面。
- en: 'The method that needs explaining is the `createBitmap` method. The parameters
    from left to right are as follows:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 需要解释的方法是`createBitmap`方法。从左到右的参数如下：
- en: The width (in pixels)
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 宽度（以像素为单位）
- en: The height (in pixels)
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 高度（以像素为单位）
- en: The bitmap configuration
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 位图配置
- en: Bitmaps can be configured in several different ways. The `ARGB_8888` configuration
    means that each pixel is represented by 4 bytes of memory.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 位图可以以几种不同的方式配置。`ARGB_8888`配置意味着每个像素由4个字节的内存表示。
- en: There are a few bitmap formats that Android can use. This one is perfect for
    a good range of colors and will ensure that the bitmaps we use and the colors
    we request will be drawn as intended. There are higher and lower configurations
    but `ARGB_8888` is perfect for the entirety of this chapter.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: Android可以使用几种位图格式。这个对于一系列的颜色来说是完美的，并且将确保我们使用的位图和我们请求的颜色将按预期绘制。有更高和更低的配置，但`ARGB_8888`对于本章来说是完美的。
- en: Now we can do the actual drawing.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以进行实际的绘制了。
- en: Drawing on the screen
  id: totrans-86
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 在屏幕上绘制
- en: 'Add this next highlighted code after the initialization of `myPaint` and inside
    the closing curly brace of the `onCreate` method:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 在`myPaint`初始化之后，在`onCreate`方法的闭合大括号内添加下面突出显示的代码：
- en: '[PRE7]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: The previous code uses the `myCanvas.drawColor` method to fill the screen with
    color.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的代码使用`myCanvas.drawColor`方法来填充屏幕颜色。
- en: The `myPaint.setTextSize` method defines the size of the text that will be drawn
    next. The `myPaint.setColor` method determines what color any future drawing will
    be. The `myCanvas.drawText` method actually draws the text to the screen.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: '`myPaint.setTextSize`方法定义了接下来将绘制的文本的大小。`myPaint.setColor`方法确定了未来绘制的颜色。`myCanvas.drawText`方法实际将文本绘制到屏幕上。'
- en: Analyze the arguments passed into the `drawText` method and we can see that
    the text will say "Hello World!" and will be drawn 100 pixels from the left and
    100 pixels from the top of our bitmap (`myBitmap`).
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 分析传递给`drawText`方法的参数，我们可以看到文本将会显示“Hello World!”，并且将在我们的位图（`myBitmap`）的左侧100像素和顶部100像素处绘制。
- en: Next, we use the `setColor` method again to change the color that will be used
    for drawing. Finally, we use the `drawCircle` method to draw a circle that is
    400 pixels from the left and 100 pixels from the top. The circle will have a radius
    of 100 pixels.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们再次使用`setColor`方法来改变将用于绘制的颜色。最后，我们使用`drawCircle`方法来绘制一个距左侧400像素，顶部100像素的圆。圆的半径为100像素。
- en: I reserved explaining the `Color.argb` method until now.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 我保留了解释`Color.argb`方法直到现在。
- en: Explaining Color.argb
  id: totrans-94
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 解释Color.argb
- en: The `Color` class, unsurprisingly, helps us to manipulate and represent color.
    The `argb` method used previously returns a color constructed using the **alpha
    (opacity/transparency), red, green, blue** (**argb**) model. This model uses values
    ranging from 0 (no color) to 255 (full color) for each element. It is important
    to note, although on reflection it might seem obvious, that the colors mixed are
    intensities of light and are quite different to what happens when we mix paint,
    for example.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
- en: Note
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
- en: 'To devise an argb value and explore this model further, look at this handy
    website: [https://www.rapidtables.com/web/color/RGB_Color.html](https://www.rapidtables.com/web/color/RGB_Color.html).
    The site helps you pick the RGB values; you can then experiment with the alpha
    values.'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
- en: The values used to clear the drawing surface were `255, 0, 0, 255`. These values
    mean full opacity (solid color), no red, no green, and full blue. This makes a
    blue color.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
- en: The next call to the `argb` method is in the first call to `setColor` where
    we are setting the required color for the text. The values `255, 255, 255, 255`
    mean full opacity, full red, full green, and full blue. When you combine light
    with these values, you get white.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
- en: The final call to the `argb` method is in the final call to the `setColor` method
    when we are setting the color to draw the circle. `255, 21, 207, 62` makes a sun-yellow
    color.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
- en: 'The last step before we can run the code is to add the call to the `setContentView`
    method that places our `ImageView` (`myImageView`) as the `View` instance to be
    set as the content for this app. Here are the final lines of code to be added
    before the closing curly brace of the `onCreate` method:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Finally, we tell the `Activity` class to use `myImageView` by calling the `setContentView`
    method.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
- en: 'This is what the `Canvas` demo looks like when you run it. We can see an 800
    by 800-pixel drawing. In the next chapter, we will use more advanced techniques
    to utilize the entire screen and we will also learn about threads to make the
    graphics move in real time:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 20.1 – Canvas demo'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_20.1_B16773.jpg)'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
- en: Figure 20.1 – Canvas demo
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
- en: It will help to understand the result of the coordinates we use in our `Canvas`
    class drawing methods if we better understand the Android coordinate system.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
- en: The Android coordinate system
  id: totrans-109
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As we can see, drawing a bitmap is trivial. But the coordinate system that we
    use to draw our graphics onto needs a brief explanation.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
- en: Plotting and drawing
  id: totrans-111
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When we draw a `Bitmap` object to the screen, we pass in the coordinates we
    want to draw the object at. The available coordinates of a given Android device
    depend upon the resolution of its screen.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
- en: For example, the Google Pixel phone has a screen resolution of 1,920 pixels
    (across) by 1,080 pixels (down) when held in landscape view.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
- en: The numbering system of these coordinates starts in the top left-hand corner
    at `0, 0` and proceeds down and to the right until the bottom-right corner, which
    is pixel `1919, 1079`. The apparent 1-pixel disparity between `1920` and `1919`
    and `1080` and `1079` is because the numbering starts at 0\.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
- en: So, when we draw a bitmap or anything else to the screen (such as `Canvas` circles
    and rectangles), we must specify an `x, y` coordinate.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
- en: Furthermore, a bitmap (or `Canvas` shape) of course comprises many pixels. So,
    which pixel of a given bitmap is drawn at the `x, y` screen coordinate that we
    will be specifying?
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
- en: 'The answer is the top-left pixel of the `Bitmap` object. Look at the next figure,
    which should clarify the screen coordinates using the Google Pixel phone as an
    example. As a graphical means for explaining the Android coordinate drawing system,
    I will use a cute spaceship graphic:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 20.2 – Screen coordinates'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_20.2_B16773.jpg)'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
- en: Figure 20.2 – Screen coordinates
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
- en: Furthermore, the coordinates are relative to what you draw upon. So, in the
    `Canvas` demo app we just coded, as well as the next demo, the coordinates are
    relative to the bitmap (`myBitmap`). In the next chapter, we will use the entire
    screen and the previous figure will be an accurate representation of what is happening.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
- en: Let's do some more drawing, this time with bitmaps from a graphics file. We
    will use the same starting code as we have seen in this app.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
- en: Creating bitmaps
  id: totrans-123
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let's do a little bit of theory before we dive into the code and consider exactly
    how we are going to bring images to life on the screen. To draw a bitmap, we will
    use the `drawBitmap` method of the `Canvas` class.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
- en: First, we would need to add a bitmap to the project in the `res/drawable` folder;
    we will do this for real in the `Bitmap` demo app coming up shortly. For now,
    assume the graphics file/bitmap has the name `myImage.png`.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, we declare an object of the `Bitmap` type, just the same as we did for
    the `Bitmap` object we used for our background in the previous demo:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Next, we need to initialize the `mBitmap` object using our preferred image
    that we previously added to the project''s `drawable` folder:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: The static `decodeResource` method of the `BitmapFactory` method is used to
    initialize `mBitmap`. It takes two parameters. The first is a call to `getResources`,
    which is made available by the `Activity` class. This method, as the name suggests,
    gives access to the project resources, and the second parameter, `R.drawable.myImage`,
    points to the `myImage.png` file in the `drawable` folder. The bitmap (`mBitmap`)
    is now ready to be drawn by the `Canvas` class.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
- en: 'You could then draw the bitmap with the following code:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Here is what the spaceship graphic from the previous section looks like when
    drawn to the screen as a reference for when we talk about rotating bitmaps:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 20.3 – Spaceship graphic'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_20.3_B16773.jpg)'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
- en: Figure 20.3 – Spaceship graphic
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
- en: Manipulating bitmaps
  id: totrans-137
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Quite often, however, we need to draw bitmaps in a rotated or otherwise-altered
    state. It would be quite easy to use Photoshop or whatever your favorite image
    editing software happens to be to create more bitmaps from the original bitmap
    to face in other directions. Then, when we come to draw our bitmap, we can simply
    decide which way to face and draw the appropriate pre-loaded bitmap.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
- en: However, I thought it would be much more interesting and instructive if we worked
    with just one single source image and learned about the class that Android provides
    to manipulate images in our Java code. You will then be able to add rotating and
    inverting graphics to your app developer's toolkit.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
- en: What is a bitmap exactly?
  id: totrans-140
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'A bitmap is called a bitmap because that is exactly what it is: a *map of bits*.
    While there are many bitmap formats that use different ranges and values to represent
    colors and transparency, they all amount to the same thing. They are a grid/map
    of values and each value represents the color of a single pixel.'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
- en: Therefore, to rotate, scale, or invert a bitmap, we must perform the appropriate
    mathematical calculation upon each pixel/bit of the image/grid/map of the bitmap.
    The calculations are not terribly complicated, but they are not especially simple
    either. If you took math to the end of high school, you will probably understand
    the math without too much bother.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
- en: Unfortunately, understanding the math isn't enough. We would also need to devise
    efficient code, as well as understanding the bitmap format, and then modify our
    code for each format. This would not be trivial. Fortunately, the Android API
    has done it all for us. Meet the `Matrix` class.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
- en: The Matrix class
  id: totrans-144
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The class is named `Matrix` because it uses the mathematical concept and rules
    to perform calculations on a series of values known as matrices – the plural of
    matrix.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
- en: Note
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
- en: The Android `Matrix` class has nothing to do with the movie series of the same
    name. However, the author advises that all aspiring app developers take the red
    pill.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
- en: You might be familiar with matrices but don't worry if you're not because the
    `Matrix` class hides all the complexity away. Furthermore, the `Matrix` class
    not only allows us to perform calculations on a series of values, but it also
    has some pre-prepared calculations that enable us to do things such as rotating
    a point around another point by a specific number of degrees. All this without
    knowing anything about trigonometry.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
- en: Note
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
- en: 'If you are intrigued by how the math works and want an absolute beginner''s
    guide to the mathematics of rotating game objects, then look at this series of
    Android tutorials on my website that ends with a flyable and rotatable spaceship:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
- en: '[http://gamecodeschool.com/essentials/calculating-heading-in-2d-games-using-trigonometric-functions-part-1/](http://gamecodeschool.com/essentials/calculating-heading-in-2d-games-using-trigonometric-functions-part-1/)'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
- en: '[http://gamecodeschool.com/essentials/rotating-graphics-in-2d-games-using-trigonometric-functions-part-2/](http://gamecodeschool.com/essentials/rotating-graphics-in-2d-games-using-trigonometric-functions-part-2/)'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
- en: '[http://gamecodeschool.com/android/2d-rotation-and-heading-demo/](http://gamecodeschool.com/android/2d-rotation-and-heading-demo/)'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
- en: This book will stick to using the Android `Matrix` class, but we will do slightly
    more advanced math when we create a particle system in the next chapter.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
- en: Inverting a bitmap to face the opposite direction
  id: totrans-155
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'First, we need to create an instance of the `Matrix` class. This next line
    of code does so in a familiar way by calling `new` on the default constructor:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  id: totrans-157
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Note
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
- en: Note that you don't need to add any of this code to a project right now; it
    will all be shown again shortly with much more context. I just thought it would
    be easier to see all the `Matrix`-related code on its own beforehand.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
- en: 'Now we can use one of the many neat methods of the `Matrix` class. The `preScale`
    method takes two parameters: one for the horizontal change and one for the vertical
    change. Look at this line of code:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  id: totrans-161
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: What the `preScale` method will do is loop through every pixel position and
    multiply all the horizontal coordinates by `-1` and all the vertical coordinates
    by `1`.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
- en: 'The effect of these calculations is that all the vertical coordinates will
    remain the same because if you multiply by 1, then the number doesn''t change.
    However, when you multiply by -1, the horizontal position of the pixel will be
    inverted. Take the following example:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
- en: Horizontal positions 0, 1, 2, 3, and 4 will become 0, -1, -2, -3, and -4.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
- en: 'At this stage, we have created a matrix that can perform the necessary calculations
    on a bitmap. We haven''t actually done anything with the bitmap yet. To use the
    matrix, we call the `createBitmap` method of the `Bitmap` class such as this line
    of code shown next:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  id: totrans-166
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'The previous code assumes that `mBitmapLeft` is already initialized as well
    as `mBitmap`. The parameters of the `createBitmap` method are explained as follows:'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
- en: '`mBitmapHeadRight` is a `Bitmap` object that has already been created and scaled
    and has the image of a spaceship (facing the right) loaded into it. This is the
    image that will be used as the source for creating the new bitmap. The source
    bitmap will not actually be altered at all.'
  id: totrans-168
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`0, 0` is the horizontal and vertical starting position that we want the new
    bitmap to be mapped into.'
  id: totrans-169
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `25, 25` parameters are values that set the size that the bitmap is scaled
    to.
  id: totrans-170
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The next parameter is our pre-prepared `Matrix` instance, `matrix`.
  id: totrans-171
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The final parameter, `true`, instructs the `createBitmap` method that filtering
    is required to correctly handle the creation of the bitmap.
  id: totrans-172
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'This is what `mBitmapLeft` will look like when drawn to the screen:'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 20.4 – mBitmapLeft'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_20.4_B16773.jpg)'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
- en: Figure 20.4 – mBitmapLeft
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
- en: We can also create the bitmap facing up or down using a rotation matrix.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
- en: Rotating the bitmap to face up or down
  id: totrans-178
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Let''s look at rotating a bitmap, and then we can build the demo app. We already
    have an instance of the `Matrix` class, so all we must do is call the `preRotate`
    method to create a matrix capable of rotating every pixel by a specified number
    of degrees in the single argument to `preRotate`. Look at this line of code:'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  id: totrans-180
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: How simple was that? The `matrix` instance is now ready to rotate any series
    of numbers we pass to it, anti-clockwise (`-`), by `90` degrees.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
- en: 'This next line of code has exactly the same parameters as the previous call
    to `createBitmap` that we previously dissected, except that the new `Bitmap` instance
    is assigned to `mBitmapUp` and the effect of `matrix` is to perform the rotation
    instead of `preScale`:'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  id: totrans-183
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'This is what `mBitmapUp` will look like when drawn:'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 20.5 – mBitmapUp'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_20.5_B16773.jpg)'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
- en: Figure 20.5 – mBitmapUp
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
- en: You can also use the same technique but a different value in the argument to
    `preRotate` to turn the bitmap downward. Let's get on with the demo app to see
    all this stuff in action.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
- en: Bitmap manipulation demo app
  id: totrans-189
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that we have studied the theory, let's draw and spin some bitmaps. Create
    a new project using the `Manipulating Bitmaps`.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
- en: Adding the graphic to the project
  id: totrans-191
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Right-click and select `bob.png` graphics file from the download bundle in the
    [*Chapter 20*](B16773_20_ePub_RK.xhtml#_idTextAnchor345)`/Manipulating Bitmaps/drawable`
    folder.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
- en: 'In Android Studio, locate the `app/res/drawable` folder in the project explorer
    window. This next screenshot makes clear where this folder can be located and
    what it will look like with the `bob.png` image in it:'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 20.6 – app/res/drawable folder with bob.png'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_20.6_B16773.jpg)'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
- en: Figure 20.6 – app/res/drawable folder with bob.png
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
- en: Right-click on the `bob.png` file to the project. Click **OK** twice to confirm
    the default options for importing the file into the project.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
- en: 'Edit the code of the `MainActivity` class to include all the required `import`
    directives, the basic version of the `Activity` class, and a selection of member
    variables so we can get started. The state of the `MainActivity` class at this
    stage is shown next:'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  id: totrans-199
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Now we can initialize all the members in `onCreate`:'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  id: totrans-201
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Next, we add calls to three methods that we will write soon and set our new
    drawing as the view for the app:'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  id: totrans-203
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Now add the `drawRotatedBitmap` method that does the bitmap manipulation:'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  id: totrans-205
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: The previous code uses a `for` loop to loop through 360 degrees 30 degrees at
    a time. The value that each pass through the loop is used in the `Matrix` instance
    to rotate the image of Bob, and he is then drawn to the screen using the `drawBitmap`
    method.
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the final two methods as shown next:'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  id: totrans-208
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: The `drawEnlargedBitmap` method uses the `createScaledBitmap` method, which
    is 300 by 400 pixels. The `drawBitmap` method then draws it to the screen.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
- en: '`drawShrunkenBitmap` uses the exact same technique except it scales then draws
    a 50 by 75-pixel image.'
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
- en: 'Run the app to see Bob grow, then shrink, then spin around through 360 degrees
    at 30-degree intervals, as shown in this next screenshot:'
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 20.7 – How the app runs'
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_20.7_B16773.jpg)'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
- en: Figure 20.7 – How the app runs
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
- en: The only thing missing from our drawing repertoire is the ability to watch all
    this activity as it happens. We will fix this gap in our knowledge in the next
    chapter.
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
- en: Frequently asked question
  id: totrans-216
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: I know how to do all this drawing but I can't see anything move. Why?
  id: totrans-217
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: To see things move, you need to be able to regulate when each part of the drawing
    occurs. You need to use animation techniques. This is not trivial but it is not
    beyond the grasp of a determined beginner either. We will study the required topics
    in the next chapter.
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  id: totrans-219
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we saw how to draw custom shapes, text, and bitmaps. Now that
    we know how to draw and manipulate primitive shapes, text, and bitmaps, we can
    take things up a level.
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们看到了如何绘制自定义形状、文本和位图。现在我们知道如何绘制和操作基本形状、文本和位图，我们可以把事情提升到一个新水平。
- en: In the next chapter, we will start our next major app, which is a kid's drawing
    app that actually comes to life at the press of a button.
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将开始我们的下一个重要应用程序，这是一个儿童绘画应用程序，实际上在按下按钮时会活跃起来。
