- en: Chapter 4. Meterpreter Basics
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Meterpreter is one of the spearheads in the Metasploit Framework. It is used
    as a payload post exploitation of a vulnerable system. It uses in-memory DLL Injection
    Stagers and is extended over the network at runtime. In-memory DLL, Injection
    is a technique used for injecting code within the address space of a currently
    running process by forcing it to load a **DLL** (**Dynamic-link library**) file.
    Once an exploit is triggered and the Meterpreter is used as a payload, we get
    a Meterpreter shell for the compromised system. The uniqueness of its attack vector
    lies in its stealth feature. It does not create any files on the hard disk but
    just attaches itself to an active process in memory. The client-server intercommunication
    takes place using the Type Length Value Format and is encrypted. Within data communication
    protocols, optional information may be encoded as a type-length-value or TLV element
    inside the protocol. Here, Type indicates the kind of field that is a part of
    the message, Length indicates the size of the value field and Value indicates
    the variable-sized series of bytes, which contain data for this part of the message.
    This single payload is very effective with its multiple capabilities, which helps
    in acquiring password hashes of a victim machine, running a keylogger, and privilege
    escalation. The stealth feature makes it undetectable to many antivirus and host-based
    intrusion detection systems. Meterpreter also has the capability to switch between
    different processes to which it gets attached through DLL Injection, and stays
    by clinging to running applications on the compromised host rather than creating
    files on the system.
  prefs: []
  type: TYPE_NORMAL
- en: In the previous chapter, we compromised a system to get the reverse connection
    for the Meterpreter. Now we will discuss the functionalities we can use over the
    compromised system post exploitation, such as the working of the Meterpreter and
    the Meterpreter in action.
  prefs: []
  type: TYPE_NORMAL
- en: Working of the Meterpreter
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Once a system is compromised, we (the attacker) send a first-stage payload to
    the affected system. This payload connects back to the Meterpreter. Then a second
    DLL Injection Payload is sent followed by the Meterpreter Server DLL. This establishes
    a socket and a client-server communication can take place through the Meterpreter
    session. The best part of this session is that it is encrypted. This offers confidentiality
    and hence a session may not be sniffed by any network administrator.
  prefs: []
  type: TYPE_NORMAL
- en: '![Working of the Meterpreter](img/3589_04_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Meterpreter in action
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In [Chapter 3](ch03.html "Chapter 3. Exploitation Basics"), *Exploitation Basics*,
    we were able to exploit the victim machine and get a Meterpreter session from
    it. Now we will use this Meterpreter session to leverage the various functionalities
    of the Metasploit Framework.
  prefs: []
  type: TYPE_NORMAL
- en: '![Meterpreter in action](img/3589_04_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: We will now display all the weapons of attack that Meterpreter hosts. For this,
    enter `help`.
  prefs: []
  type: TYPE_NORMAL
- en: '![Meterpreter in action](img/3589_04_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: In the preceding screenshot, we see all of the Meterpreter commands that can
    be used on the compromised system.
  prefs: []
  type: TYPE_NORMAL
- en: 'We have a few classified commands based on their usage; they are listed as
    follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Command type | Command name | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| Process listing | `getuid` | It gets the system ID and the name of the computer.
    |'
  prefs: []
  type: TYPE_TB
- en: '|   | `kill` | It terminates a process. |'
  prefs: []
  type: TYPE_TB
- en: '|   | `ps` | It lists the running processes. |'
  prefs: []
  type: TYPE_TB
- en: '|   | `getpid` | It gets the current process identifier. |'
  prefs: []
  type: TYPE_TB
- en: '| Keylog Usage | `keyscan_start` | It starts the keylogging session. |'
  prefs: []
  type: TYPE_TB
- en: '|   | `keyscan_stop` | It stops the keylogging session. |'
  prefs: []
  type: TYPE_TB
- en: '|   | `keyscan_dump` | It dumps the keystrokes captured from the victim machine.
    |'
  prefs: []
  type: TYPE_TB
- en: '| Session | `enumdesktops` | It lists all of the accessible desktops and workstations.
    |'
  prefs: []
  type: TYPE_TB
- en: '|   | `getdesktop` | It gets the current Meterpreter desktop. |'
  prefs: []
  type: TYPE_TB
- en: '|   | `setdesktop` | It changes the Meterpreter''s current desktop. |'
  prefs: []
  type: TYPE_TB
- en: '| Sniffer Functions | `use sniffer` | It loads the sniffer functions. |'
  prefs: []
  type: TYPE_TB
- en: '|   | `sniffer_start` | It starts the sniffer for the interface. |'
  prefs: []
  type: TYPE_TB
- en: '|   | `sniffer_dump` | It dumps the network capture of the victim machine locally.
    |'
  prefs: []
  type: TYPE_TB
- en: '|   | `sniffer_stop` | It stops the sniffer for the interface. |'
  prefs: []
  type: TYPE_TB
- en: '| Webcam Commands | `webcam_list` | It lists all of the webcams of the system.
    |'
  prefs: []
  type: TYPE_TB
- en: '|   | `webcam_snap` | It captures snapshots of the victim machine |'
  prefs: []
  type: TYPE_TB
- en: '|   | `record_mic` | It records the sound of the environment from the default
    microphone on the machine |'
  prefs: []
  type: TYPE_TB
- en: Now we will start the penetration testing procedure and perform the first step
    by starting to gather information about our victim machine. Type `sysinfo` to
    check the system information.
  prefs: []
  type: TYPE_NORMAL
- en: '![Meterpreter in action](img/3589_04_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: We can see the system information in the preceding screenshot, the computer
    name and the operating system used by the victim. Now we will capture a screenshot
    of the victim machine. For this, type in `screenshot`.
  prefs: []
  type: TYPE_NORMAL
- en: '![Meterpreter in action](img/3589_04_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'We can see the victim machine''s screenshot as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Meterpreter in action](img/3589_04_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Let us check the list of all of the processes that are running on the victim
    machine. For this just type `ps` and it will show the running processes.
  prefs: []
  type: TYPE_NORMAL
- en: '![Meterpreter in action](img/3589_04_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: In the preceding screenshot, we can see the process list, with detailed information.
    The first column shows the PID, which means process ID and the second column shows
    the process name. The next column shows the architecture of the system, the user,
    and the path from where the process is running.
  prefs: []
  type: TYPE_NORMAL
- en: In the process list, we have to find the process ID for `explorer.exe` and then
    migrate with that process ID. For migrating with any process ID, we have to type
    `migrate <PID>`. Here, we are migrating with `explorer.exe`, so we type in `migrate
    1512`.
  prefs: []
  type: TYPE_NORMAL
- en: '![Meterpreter in action](img/3589_04_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: After migrating with a process, we then identify the current process. For this,
    type in `getpid`.
  prefs: []
  type: TYPE_NORMAL
- en: '![Meterpreter in action](img/3589_04_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: We can see the current process ID from which we have migrated to the victim
    machine.
  prefs: []
  type: TYPE_NORMAL
- en: Next, we move on to some real hacking stuff by using the keylogger service on
    the victim machine. We type in `keyscan_start` and the keylogger will start and
    wait for a few minutes to capture the keystrokes of the victim machine.
  prefs: []
  type: TYPE_NORMAL
- en: '![Meterpreter in action](img/3589_04_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The victim has started to type something in the Notepad. Let us check if we
    have the capture.
  prefs: []
  type: TYPE_NORMAL
- en: '![Meterpreter in action](img/3589_04_11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Now, let us stop the keylogger service and dump all of the keystroke logs from
    the victim machine. For this, type `keyscan_dump` and then type `keyscan_stop`
    to stop the keylogger service. You can see in the following screenshot that we
    have the exact capture. Bravo!
  prefs: []
  type: TYPE_NORMAL
- en: '![Meterpreter in action](img/3589_04_12.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Let's try some more interesting activities in our Meterpreter session. Let's
    check whether the victim's machine has a webcam available or not. For that, we
    type in `webcam_list` and it displays the webcam list from the victim machine.
    In the following screenshot, we can see that a webcam is available.
  prefs: []
  type: TYPE_NORMAL
- en: '![Meterpreter in action](img/3589_04_13.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Thus we know that the victim has an integrated webcam. So let's capture a snapshot
    of the victim from his/her webcam. Just type in `webcam_snap`.
  prefs: []
  type: TYPE_NORMAL
- en: '![Meterpreter in action](img/3589_04_14.jpg)'
  prefs: []
  type: TYPE_IMG
- en: In the previous screenshot, we can see that the webcam shot has been saved to
    the root directory and the image is named `yxGSMosP.jpeg`. So let us verify the
    captured image in the root directory.
  prefs: []
  type: TYPE_NORMAL
- en: '![Meterpreter in action](img/3589_04_15.jpg)'
  prefs: []
  type: TYPE_IMG
- en: After that, we will check the system ID and the name of the victim machine.
    Type in `getuid`.
  prefs: []
  type: TYPE_NORMAL
- en: '![Meterpreter in action](img/3589_04_16.jpg)'
  prefs: []
  type: TYPE_IMG
- en: After playing with the victim machine, now it is time for some serious stuff.
    We are going to access the victim's command shell to control his/her system. For
    this, just type in `shell` and it will open a new command prompt for you.
  prefs: []
  type: TYPE_NORMAL
- en: '![Meterpreter in action](img/3589_04_17.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Now let us make a directory on the victim machine. Type in `mkdir <directory
    name>`. We are creating a directory named `hacked` in `C:\Documents and Settings\Victim`.
  prefs: []
  type: TYPE_NORMAL
- en: '![Meterpreter in action](img/3589_04_18.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Let us verify whether the directory has been created or not under `C:\Documents
    and Settings\Victim`.
  prefs: []
  type: TYPE_NORMAL
- en: '![Meterpreter in action](img/3589_04_19.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Now we are going to shut down the victim computer by displaying a message on
    his screen. For this, type in `shutdown –s –t 15 -c "YOU ARE HACKED"`. In the
    following command, the syntax we are using is: `–s` for shutdown, `–t 15` for
    timeout, and `–c` for a message or comment.'
  prefs: []
  type: TYPE_NORMAL
- en: '![Meterpreter in action](img/3589_04_20.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Let's see what happened on the victim machine.
  prefs: []
  type: TYPE_NORMAL
- en: '![Meterpreter in action](img/3589_04_21.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: So, with this chapter, we have covered how a user compromises a system through
    the Meterpreter and what information he/she may be able to extract using the Meterpreter
    functionality post exploitation. Once we compromised the system of the victim,
    we were able to obtain the system information, which included the operating system
    name, architecture, and the computer name. After that, we were able to capture
    a screenshot of the victim machine's desktop. Through the Meterpreter, we got
    direct access to the shell of the victim machine and hence could check the processes
    that were running. We were able to install a keylogger and capture the active
    keystrokes of the victim machine. Using the Meterpreter, we could even use the
    victim's camera to capture his snapshot without being noticed.
  prefs: []
  type: TYPE_NORMAL
- en: This entire chapter had a sense of some real hacking involved and the different
    ways to use the victim machine to one's own command. Hence the victim machine
    was a mere puppet dancing to the attacker's commands. Since we had access to the
    victim's shell, we could format his hard disk, create new files, and even copy
    his confidential data. The next chapter will cover the information gathering and
    scanning phase.
  prefs: []
  type: TYPE_NORMAL
- en: References
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The following are some helpful references that shed further light on some of
    the topics covered in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://www.offensive-security.com/metasploit-unleashed/About_Meterpreter](http://www.offensive-security.com/metasploit-unleashed/%E2%80%A8About_Meterpreter)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[http://cyruslab.wordpress.com/2012/03/07/metasploit-about-meterpreter/](http://cyruslab.wordpress.com/2012/03/07/metasploit-about-meterpreter/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://github.com/rapid7/metasploit-framework/wiki/How-payloads-work](https://github.com/rapid7/metasploit-framework/wiki/%E2%80%A8How-payloads-work)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[http://www.isoc.my/profiles/blogs/working-with-meterpreter-on-metasploit](http://www.isoc.my/profiles/blogs/working-with-meterpreter-on-metasploit)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
