- en: Attacking Confidentiality
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following recipes:'
  prefs: []
  type: TYPE_NORMAL
- en: Creating an evil twin
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Man-in-the-middle with wireless
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Cracking WEP
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As we learned in the previous chapter, the integrity of data is an essential
    component of security, but it is only one piece of the CIA triad. Another leg
    of this triad is the aspect of confidentiality, which addresses the issues relating
    to the protection of information against unauthorized disclosure. This aspect
    alone can be a make or break issue for an organization, as losing control of information
    and having that same information appear on a website, in a newspaper, or another
    outlet can be the source of a lot of negative consequences—including lawsuits.
  prefs: []
  type: TYPE_NORMAL
- en: A great example of how a compromised wireless network can lead to serious consequences
    against a company is that of retailer TJ Maxx.
  prefs: []
  type: TYPE_NORMAL
- en: In the early 2000s, TJ Maxx left a wireless network unsecured, and it was this
    access point that was later discovered and used by cybercriminals to gather sensitive
    customer information in the form of credit cards, names, and addresses.
  prefs: []
  type: TYPE_NORMAL
- en: While the attack was eventually detected and thwarted and the criminals responsible
    brought to trial and punished, TJ Maxx still had problems to address outside of
    the actual crime in securing their technology. TJ Maxx was the subject of a large
    class action lawsuit filed by the customers who had their information stolen due
    to the retailer's negligence. The eventual payouts resulting from this lawsuit
    ended up costing the retailer millions.
  prefs: []
  type: TYPE_NORMAL
- en: In today's world, confidentiality of data is hugely important to an organization
    and must therefore not be overlooked. In fact, one of the issues that plagued
    the idea of infamy wireless networks in a business environment is the fact that
    they were perceived as being insecure and having a great potential to expose data
    to unauthorized parties. It is because of this reason that many businesses did
    not look to implement wireless networks for a long time, and in many cases these
    companies banned the use of wireless devices on business premises outright. This
    meant that wireless access points can be set up in the business. The business
    would also refrain from buying any devices that had wireless capability to avoid
    any problems that might be caused by someone attaching to a rogue or insecure
    access point on a device that was owned by the business and contained business-sensitive
    data. This was many years ago, and the world has since changed; many businesses
    have embraced wireless networks as part of their overall business strategy. While
    there is still is a justifiable amount of concern about the confidentiality and
    security of these wireless networks, they have been much more widely adopted and
    can be seen in many businesses where they were not present before.
  prefs: []
  type: TYPE_NORMAL
- en: What has led to the concern about confidentiality regarding wireless networks
    is the fact that they beam their signal out in all directions unless specialized
    antennas or equipment is used. With the inclusion of specialized antennas designed
    to focus a signal better, protection technologies and other techniques have been
    developed over the years enabling wireless networks to be much more widely-accepted.
  prefs: []
  type: TYPE_NORMAL
- en: 'Techniques have shown to be effective at protecting the confidentiality of
    wireless networks; let''s take a look at a few that can be used to protect wireless
    networks from unauthorized breaches and disclosure of data:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Encryption**: Encryption is probably one of the easiest and most widely-used
    technologies that can be used to improve the security of a wireless network, or
    any network for that matter. The type of encryption we are talking about here
    in a wireless network is going to be designed to protect data in transit, or in
    other words data that is moving from point A to point B. This is crucially important
    for a wireless network, as the process of moving data from point A to point B
    involves transmitting the information over the airways; as such, anyone who can
    intercept radio waves can potentially eavesdrop on the transmission and view unsecured
    data.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Cryptography**: Wireless networks come in many forms and use many different
    algorithms such as AES or 3DES to both secure data in terms of confidentiality,
    as well as providing other mechanisms for ensuring that data is not modified during
    transit.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Antennas**: This is one of the more interesting areas that can be used to
    protect wireless networks and wireless signals—the use of specialized antennas
    that focus and control a signal and its transmission in such a way that it does
    not indiscriminately beam information. Specialized antennas can be used to focus
    a signal into a specific area or even control the range or distance a signal can
    propagate; therefore, limiting in both cases who is able to listen in on the transmission.
    It is important to note that the antennas that are included with most wireless
    access points are considered to be omnidirectional antennas, which means they
    are antennas that are designed to beam their signal out in all directions equally
    to give maximum coverage to their area. While this is fine for a consumer- or
    home-based environment, where maximum coverage area is needed or desired, you
    may want to control that if you are in a multi-tenant environment or an environment
    where you wish to focus signal into an area where only the people that need it
    are able to access it.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Pre-Shared Key** (**PSK**): This type of mechanism is used to share a key
    and the access point among multiple workstations with the intent that this key
    will be used to encode and protect data, and secure it against modification or
    disclosure by unauthorized parties. These pre-shared key systems are very useful
    for environments that are small, or even home-based environments where a small
    number of systems need to be secured. This is largely due to the fact that the
    key has to be manually input on individual systems, whereas with other systems
    they can be centrally managed. If you have to manually input a key into each client
    system, along with the access point, things can become pretty tedious and cumbersome
    as the size of a network grows.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Enterprise authentication**: This type of system works in the same way as
    a PSK-based environment, except that the key management is centralized through
    the use of systems such as RADIUS. The benefit of these enterprise systems is
    that they can grow almost exponentially as the size of a business or deployment
    grows, meaning that key management and security can still be centrally managed.
    Enterprise authentication systems do have one downside, and that is they require
    more infrastructure and time to set up and configure properly; however, once this
    has been done, it becomes much more of a maintenance issue.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This is just a short list of potential measures that can be deployed to enforce
    confidentiality; however, there are many more that are available outside of the
    wireless environment that can supplement or replace what has been mentioned on
    this list.
  prefs: []
  type: TYPE_NORMAL
- en: Once network access is gained and the integrity of data called into question,
    the attacker may choose to alter things for whatever end they so choose.
  prefs: []
  type: TYPE_NORMAL
- en: Types of attack
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Confidentiality attacks against a wireless network are incredibly effective
    and powerful in the hands of a skilled and knowledgeable attacker or intruder.
    It's not uncommon for the mechanisms and devices that are used to protect a wireless
    network to be misconfigured, or to have the owners of these networks be unaware
    of the types of attacks available. A system owner that is unaware of misconfiguration
    issues, flaws, or defects in their wireless network or protection mechanisms themselves
    leave them wide open to a myriad of attacks that can be used against them, and
    in some cases to devastating effect. Just remember that wireless networks can
    be secured, but like anything you have to take the time and effort to ensure that
    the security is adequate and in place as intended.
  prefs: []
  type: TYPE_NORMAL
- en: 'Before we start exploring each of our attacks, let''s first lay out the attacks
    that will be covered in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Sniffing
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Data replays
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: WEP packet injections
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Detection of beacon frames
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Spoofing of beacon frames
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Remember, these are just a few of the types of attacks that can be used to subvert
    the confidentiality of a wireless network, they should never be considered the
    only types of attacks.
  prefs: []
  type: TYPE_NORMAL
- en: Creating an evil twin
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The first type of attack that can be used to attack confidentiality is known
    as the evil twin attack, or evil twin AP. This type of attack is generally not
    an attack that is used as a standalone, but rather used in conjunction with other
    attacks, as we will see.
  prefs: []
  type: TYPE_NORMAL
- en: The most common name for the type of attack we are mentioning here tends to
    be the evil twin moniker. However, do not be surprised to hear names such as rogue
    access point, shadow access point, wireless honeypot, as well as many other potential
    names. No matter what you call it, if you understand the mechanics of what is
    happening in this attack, you'll be fine no matter what name it goes by.
  prefs: []
  type: TYPE_NORMAL
- en: An evil twin attack takes place when a rogue access point is configured in a
    way that is identical to a legitimate access point and placed in close proximity.
    To the outside world and users, an evil twin that is placed closer and/or is generating
    a stronger signal will be the one they will most likely attach to instead of a
    legitimate access point. If the user chooses to connect to the access point manually
    or automatically, the evil twin will become the end user's access point and gateway
    to the internet. Since a malicious party will be in control of the evil twin,
    they will be able to intercept any traffic that transits their AP and even modify
    or redirect it as desired. This means that the attacker has the ability to steal
    information including sensitive data such as passwords, usernames, and other data.
  prefs: []
  type: TYPE_NORMAL
- en: In practice, an evil twin attack can be very effective if a little thought and
    planning is put into effect and you consider the way users will connect to a wireless
    network. Consider the fact that most users of devices such as laptops, cell phones,
    or tablets are used to being able to turn on their wireless device, find a wireless
    network, and connect to it. If they go into a public space such as airport, shopping
    mall, or even a coffee shop, they are used to being able to turn on their wireless
    device and search for a free wireless network. Keeping this in mind, it can be
    easy to construct a wireless access point that offers what appears to be free
    internet access and leave it unsecured so that a victim will connect to the wireless
    network and start browsing the internet or checking emails, thus leaving themselves
    vulnerable to attack. Also consider the fact that if you were to name a wireless
    network to resemble something that is owned by a company or organization, the
    user may very well connect to it thinking it is a completely legitimate and authentic
    access point—when in reality it is anything but. Once the user has connected to
    this access point and starts exchanging data, it may be too late for them to protect
    themselves. It is possible that a user connecting to an unsecured or unknown access
    point such as an evil twin may inadvertently be redirected to a website that others
    control, and in turn contain malware that can be deployed to their client's system.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To get things, started you will need to have the following items in place:'
  prefs: []
  type: TYPE_NORMAL
- en: A wireless card capable of entering monitor mode
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Kali Linux
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A second wired or wireless adapter to connect to the internet
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To create an evil twin, we will follow several steps, each designed to make
    a portion of the system ready to carry out the attack.
  prefs: []
  type: TYPE_NORMAL
- en: Step one – monitor mode airmon-ng
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The first step we have to do is put the wireless adapter into promiscuous mode
    or monitor mode. This is no different to what we have been doing in our previous
    chapters. In this case, we will assume that our wireless adapter uses the name
    `wlan0`, but double check it to ensure that the name is the same on your system.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Much like before, the `airmon-ng` utility has switched our wireless card into
    monitor mode, and in the process renamed it to something like `mon0`. Once this
    is done we will be capable of viewing all the traffic we need. The following image
    shows the result of the `airmon-ng` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/b442be8a-1c2c-4d01-af2b-3bbf78da148a.png)'
  prefs: []
  type: TYPE_IMG
- en: airmon-ng switching wlan0 into monitor mode.
  prefs: []
  type: TYPE_NORMAL
- en: Keep in mind that we will use this utility multiple times in this book and that
    the steps are almost identical in every case. The only thing that often changes
    when we use this utility is the steps that come after connection, as well as the
    name of the wireless interface that we use with it. Pay special attention to the
    syntax used with this command, so you can make your life easier during future
    attempts or exercises that make use of this command-line application.
  prefs: []
  type: TYPE_NORMAL
- en: Step two – airdump-ng
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'With monitor mode in place, we will now start to collect traffic with the same
    wireless adapter. To perform this operation using `airodump-ng`, we would type
    the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Note how we used the new name for the monitoring interface `mon0`; you should
    verify the name with `ifconfig` to ensure your new interface name is the same.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once this step is complete, you should start seeing access points; it is up
    to you to select the one you wish to create an evil twin of:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/8054f4e4-c4b3-4b81-af59-10c68318ecdd.png)'
  prefs: []
  type: TYPE_IMG
- en: Much like before, this utility is not one that you have seen the end of - in
    fact, it is used in a few other recipes in this book with almost exactly the same
    syntax that you see here. Pay close attention to the syntax and how you use it,
    as well as what it's doing, because it will save you time later on.
  prefs: []
  type: TYPE_NORMAL
- en: Step three – create a new AP with the same SSID and MAC address
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To create a new AP using the same SSID and MAC address, effectively cloning
    the good twin with a bad twin, we need to use the `airbase-ng` utility and assume
    we want to clone the network named `Tarlogic` from the preceding screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'If the process works, you should see results like the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/077cdeaa-8504-4dd8-83e2-2db5d5d054fa.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The results of using airbase-ng
  prefs: []
  type: TYPE_NORMAL
- en: Note that in the screenshot, we have created an access point and then shortly
    after a client associated with the access point.
  prefs: []
  type: TYPE_NORMAL
- en: It is possible that after you set up your access point and start broadcasting
    out a name that you may have clients connect fairly rapidly, but don't be discouraged
    if this does not occur. In some cases, you may have to wait for a period of time
    before a client actually attaches to your access point. How long it takes can
    vary on the situation. If you were to set up an access point that mimics the name
    of a coffee shop access point and where there are a lot of customers, it is likely
    that you will get people attaching to your access point because it looks and behaves
    like the coffee shop's access point. Keep in mind that I am not recommending that
    you create an access point that mimics a coffee shop's access point, or some other
    public access point, unless you have specific permission to do so. Setting one
    up because you want to is often illegal.
  prefs: []
  type: TYPE_NORMAL
- en: Step four – forcing a reconnect
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If you want to see if you can get clients to connect to the access point quicker
    than they would if you simply waited, you can effectively bump them off their
    current access point, the good twin, and get them to reconnect to your access
    point. To do this, we will fuse a deauthentication frame to boot everyone off
    a targeted access point. Once they are booted off, they will attach to our evil
    twin if we have positioned ourselves properly. Our next step is to bump the neighbor
    off his access point.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can do this by using `aireplay-ng` with the `deauth` packet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'What we have done with `aireplay` is send a `deauth` frame with the address
    of the `Tarlogic` access point. The following image shows the results of running
    the `-deauth` option in `aireplay`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/a435e89d-eb33-4749-9cd4-7ced265f9e4c.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Sending of a deauth frame
  prefs: []
  type: TYPE_NORMAL
- en: Step five – power up
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In order to ensure that we have the best chance of capturing clients, we need
    to ensure that our signal is better than the access point's we are cloning. In
    the event that you cannot position yourself closer, you can always turn up the
    power to ensure you have a stronger signal.
  prefs: []
  type: TYPE_NORMAL
- en: 'To generate a more powerful signal, we can do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'The following shows the result of the `iwconfig` command. Note the `Tx-Power`
    setting:'
  prefs: []
  type: TYPE_NORMAL
- en: By sending a deification packet out, we are purposely booting a client that
    has connected to a legitimate access point off the network in an effort to get
    them to reconnect to our network instead. While just sending deification frames
    to a client connected to, a specific access point is not enough to ensure that
    they will reattach to our access point instead, it does give them the opportunity
    to do so. It is possible that you have already captured a client that is connected
    to your access point without having to go further, but we want to have more insurance
    to make this happen. So, let's move on.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following shows the result of the `iwconfig` command. Note the `Tx-Power`
    setting:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/5b57c251-6c2f-4e6e-b562-975c12214773.png)'
  prefs: []
  type: TYPE_IMG
- en: The results of the iwconfig command
  prefs: []
  type: TYPE_NORMAL
- en: This command will boost the power of the AP to the maximum allowable in the
    United States, which is 27 dBm or 500 milliwatts. While it is possible to boost
    power beyond this limit on some cards, such as 2000 milliwatts, it is not only
    illegal, but will shorten the life of your card from the extra heat and strain.
  prefs: []
  type: TYPE_NORMAL
- en: It's worth stressing that increasing the power of your access point unnecessarily
    will lead to a lot of headaches. As we have mentioned, turning up the power of
    an access point over a certain threshold can be illegal in your country. The other
    concern with turning up the power on your access point or wireless device beyond
    capacity is that it does have a side effect of generating more heat, as the transceiver
    that is used to modulate the signal is pushed beyond its design specifications.
    As this heat builds up, it decreases the life span of that device. You could even
    turn your device into a fire risk. Finally, turning up the power unnecessarily
    high defies a legal standard, meaning that you may drown out the signals of other
    wireless devices that are in range of your access point. While this may sound
    like a good idea, it does enhance the possibility that you'll get caught. Make
    sure that you are aware of the issues of turning up the power of your wireless
    device beyond its design specifications or legal limits.
  prefs: []
  type: TYPE_NORMAL
- en: At this point, we could run `airodump` again to see if clients are attaching
    to our access point or not. We can also use a sniffer to capture traffic or run
    a man-in-the-middle attack, which we will do a little later. Remember what we
    have done so far is capture wireless traffic from clients and redirect them to
    our access point. It is also important to know at this point that all we've done
    in this recipe is set up the evil twin. What we have not done is set ourselves
    up to capture any traffic at all. How we do that is up to us.
  prefs: []
  type: TYPE_NORMAL
- en: Man-in-the-middle with wireless
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A more advanced form of attack that builds on previous actions is known as the
    man-in-the-middle attack. This attack occurs when a third party intercepts the
    communication between two systems and either observes the traffic or alters it
    in some manner. This type of attack definitely goes further than any eavesdropping
    carried out via sniffing, but initially it starts in a very similar way.
  prefs: []
  type: TYPE_NORMAL
- en: Let's start this attack off by discussing some basic points, starting with the
    topics of switches and spoofing.
  prefs: []
  type: TYPE_NORMAL
- en: Our explanation of switches is meant to act as a primer or refresher on what
    switches do and their placement, as well as the hierarchy of network devices.
    It is not meant to be an exhaustive discussion of the ins and outs of switches
    or the anatomy of what devices do and how they do it. If you are not familiar
    with switches, how they function, why you might place them on a network, and what
    their benefits are over other traditional network devices such as hubs, then you
    may want to go and review that information before you proceed. Doing so will help
    you get the most out of this recipe and to understand specifically what it is
    we are trying to accomplish.
  prefs: []
  type: TYPE_NORMAL
- en: As you may already know, switches are a device used to control the flow of traffic
    through the use of MAC addresses. These devices are used a lot in today's environments
    and are something you should be expected to understand and deal with in order
    to properly engage and defeat them when they block your attack attempt. Switches
    are popular as they allow for the reduction of network congestion and the associated
    network traffic, not to mention the fact that they only send traffic to the MAC
    address, that is, the intended destination. It is because of these abilities that
    switches have replaced hubs, devices that cannot control the flow of traffic or
    prevent other clients from eavesdropping on a connection that doesn't involve
    them. To counteract the security of switches, a number of techniques have been
    developed that include actions such as MAC flooding, DHCP starvation, and ARP
    spoofing. Some of these techniques are used to get around the switch, while others
    are intended to target the switch directly and make it operate as a hub, thus
    making our attack easier to carry out.
  prefs: []
  type: TYPE_NORMAL
- en: Typically, flooding does not work on switches that have been deployed in the
    last decade or more. Typically, modern switches no longer work, and even on the
    older ones, a vigilant network admin is going to notice the change in network
    traffic and volume. In order for switches to know where to send traffic, they
    maintain a CAM table that essentially maps IP addresses to MAC addresses. This
    table says that when traffic is intended for an IP address, `192.168.1.101` for
    instance, send that traffic to MAC address `11:22:33:44:EE:FF`, for example.
  prefs: []
  type: TYPE_NORMAL
- en: If we can change the entries in that table, we can successfully get someone
    else's traffic. This is called **ARP spoofing**, because the entries in the CAM
    table come from ARPs that are sent out by the switch to gather this information
    from the NIC.
  prefs: []
  type: TYPE_NORMAL
- en: In the recipe, we will be making use of a technique known as ARP spoofing, which
    is designed to allow us to insert ourselves between our targets and make them
    believe that they are still talking directly to one another.
  prefs: []
  type: TYPE_NORMAL
- en: ARP spoofing is a form of attack that is typically used as a component of or
    precursor to another attack. In this attack, a malicious part transmits a spoofed
    or falsified series of ARP messages on a local network. The intention of doing
    this is to create or change a connection or linkage of an IP and MAC address on
    a system or computer to be something different than what it should be. Once the
    attacker has completed the spoofing portion, they can effectively change the flow
    of traffic on a network segment. Once the attacker's MAC address is connected
    to an authentic IP address, the attacker will begin receiving any data that is
    intended for that IP address.
  prefs: []
  type: TYPE_NORMAL
- en: Something to remember with eavesdropping is that it can take place using many
    different protocols, such as FTP, HTTP, and others. Essentially any form of online
    communication can be subject to a man-in-the-middle attack if the right approach
    is utilized. In the recipe in this section we will be demonstrating how to perform
    the attack using only a specific protocol, but the example can be extended out
    to other protocols as appropriate.
  prefs: []
  type: TYPE_NORMAL
- en: One thing to remember when discussing a tool such as DCF is that it preys upon
    the fact that many protocols such as FTP and HTTP were designed in a day and age
    that did not take security into account. These protocols were designed to perform
    a very specific function, such as the transferring of files or other information,
    and that core function they perform exceptionally well and with very few problems.
    However, as the designers of these protocols never took the security problems
    that we see today into account, they did not take them into account during the
    actual design process. Thus, what has happened is this lack of security is preyed
    upon by tools such as dsniff or Wireshark, as well as plenty of others.
  prefs: []
  type: TYPE_NORMAL
- en: In the case of Wi-Fi networks, a man-in-the middle is a particularly attractive
    attack to carry out due to the design of the environment. In this environment,
    all an attacker has to do is wait for a client to attach and let the fun and games
    begin. Using methods such as a fake access point, as covered in a previous chapter,
    or cracking a WEP or WPA key and attaching to an existing network offer sufficiently
    effective methods for performing a man-in-the-middle attack.
  prefs: []
  type: TYPE_NORMAL
- en: Something important to point out with man -in-the-middle attacks is that they
    can be otherwise undetectable to the client that has been victimized by the attack.
    As far as the victim's concerned, when a man-in-the-middle attack is occurring
    they are communicating with whoever they were originally intending to communicate
    with; they don't know that there is a third party intercepting and potentially
    manipulating their traffic in some way. If the attacker doesn't do anything to
    make their presence known, or tip off anyone that they are there, it can be very
    difficult to pick up their presence. However, there are ways to do so. Devices
    such as network intrusion detection systems for one can pick up the changes in
    traffic and notify a system owner or administrator as to the change and allow
    them to take action in response.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To get things started, you will need to have the following items in place:'
  prefs: []
  type: TYPE_NORMAL
- en: A wireless card capable of entering monitor mode
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Kali Linux with Wireshark installed
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In order to perform a man-in-the-middle attack, we need to bring together a
    few tools and techniques both new and old. With that being said, let's get started.
  prefs: []
  type: TYPE_NORMAL
- en: One thing to focus on in this attack is that we will be using multiple Terminal
    windows in Kali at once. In fact, in this particular recipe, we will be using
    three simultaneous Terminal windows with utilities running, each performing a
    separate part of the process. So, remember to keep your focus and pay attention
    to which window you're supposed to be in during this recipe.
  prefs: []
  type: TYPE_NORMAL
- en: Keep in mind that in this book, as well as in real life, you're going to find
    yourself in numerous situations where you're running more than one Terminal window
    at once. This is generally because you need to run multiple utilities at the command
    line, with each one designed to perform one piece of a process or task. So, when
    performing these attacks, make sure you are really paying attention to which window
    you are in at any one time to ensure that you don't inadvertently cancel or run
    a command or sequence that will yield different results to what you expected.
  prefs: []
  type: TYPE_NORMAL
- en: During this recipe, we will be performing some steps designed to capture the
    information we are looking for.
  prefs: []
  type: TYPE_NORMAL
- en: The very first step that will take place is to run ARP spoofing, which is designed
    to help us redirect and capture traffic and then be able to capture credentials
    out of it in a later point.
  prefs: []
  type: TYPE_NORMAL
- en: One key thing to remember when you are trying to attempt this attack is that
    this attack will only work on a local network; it will not work across different
    subnets or even on two different networks. The reason for that is the ARP protocol
    only works on local networks—it's not designed to be. Attempting to perform this
    attack on anything except a local network, therefore, will result in nothing.
    This is a very important detail to remember, as forgetting it can prove very frustrating
    as the attack may fail.
  prefs: []
  type: TYPE_NORMAL
- en: We will perform our first step on the client by replacing the MAC address of
    the server with the MAC address of our local system. This will redirect traffic
    to our system instead of the actual server.
  prefs: []
  type: TYPE_NORMAL
- en: 'We perform this action by running `arpspoof` in one of the Terminal windows,
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: This will tell the client that we are the system they are looking for when they
    are trying to contact the server.
  prefs: []
  type: TYPE_NORMAL
- en: 'The next step is to replace the MAC address of the client with the MAC address
    of our system. This is done simply by reversing the order of the IP address used
    previously:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'The following screenshot shows the reversing the  order of IP address:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/e8b6e67b-7f4a-4e7f-b3ed-4e2847a11215.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Here, we are telling the server that we are the client.
  prefs: []
  type: TYPE_NORMAL
- en: Now execute both of these commands. When we do this, the client will think we
    are the server and the server will think we are the client!
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/ef77bcab-978c-42d3-b57b-02b317947f6a.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Once we have spoofed the MAC addresses of the clients to redirect their traffic,
    we need to perform a process known as forwarding, or IP forwarding. In essence,
    what we are doing is forwarding traffic through our system from client to server
    and server to client in order to ensure the request from one gets to the other
    and vice versa. If we don't perform forwarding, the connection will effectively
    be broken because the traffic that is routed from one network interface to another
    will not make it.
  prefs: []
  type: TYPE_NORMAL
- en: Remember that the success of this attack depends on keeping a reliable and consistent
    connection between the client and its intended destination. You are inserting
    yourself in the middle of this connection attempt and any subsequent exchange
    of information, and you are trying to keep your presence unknown and undetected
    for as long as it's required to collect the information that you are looking for.
  prefs: []
  type: TYPE_NORMAL
- en: To enable forwarding we use the `ip_forward` command, which is part of Linux
    by default and allows for the process we are attempting to configure. Under normal
    conditions this feature is disabled, so we will need to re-enable it. Linux has
    a built-in functionality to forward packets it receives.
  prefs: []
  type: TYPE_NORMAL
- en: 'We do this by using the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: '![](img/3a6b227a-55d7-4e73-a686-cc052c85d5e0.png)'
  prefs: []
  type: TYPE_IMG
- en: Now with our system inserted into the middle of these communicating hosts, and
    our client and server called, we can start the next phase, which is to start sniffing
    traffic with the intent of looking for credentials that will be of use.
  prefs: []
  type: TYPE_NORMAL
- en: Keep in mind that when using a man-in-the-middle attack, or any other attack
    that uses sniffing, that protocols that are unprotected such as HTTP or FTP will
    make your attack substantially easier. Technologies such as SSH, which employ
    encryption designed to protect the confidentiality and integrity of information,
    will make sniffing extremely ineffective at gathering useful information or credentials,
    as they are designed to protect clients' data.
  prefs: []
  type: TYPE_NORMAL
- en: In order to perform this step, we will use a suite of tools known as the `dsniff`
    suite, which has been around for several years but is still very useful in performing
    a myriad of different attacks. This suite includes a number of different tools
    designed to capture all types of traffic and extract useful information, such
    as credentials from FTP, telnet, HTTP, SNMP, POP, LDAP, and many others that are
    vulnerable to having their information intercepted and processed.
  prefs: []
  type: TYPE_NORMAL
- en: 'In order to use dsniff, we issue the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: '![](img/7cc8fb8b-eda5-4bd7-aa0e-761975631428.jpg)'
  prefs: []
  type: TYPE_IMG
- en: When we execute this command, you will see that `dsniff` will promptly respond
    that it is losing on `eth0`. However, it is possible using the `- I` command to
    tell it to listen on a different interface altogether.
  prefs: []
  type: TYPE_NORMAL
- en: 'With this command executed, all we have to do now is wait. What we are waiting
    for is for a client to attach to the server. With `dsniff` in our corner, we will
    find that once the client logs in they will become a victim of our sniffing effort
    and their credentials will be displayed directly on our screen, where we can note
    them down and later make use of them as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/a50da355-3538-44df-b335-6bb413822082.jpg)'
  prefs: []
  type: TYPE_IMG
- en: In this screenshot, you will note that DCF has captured the credentials of a
    client attaching to the server. In fact here, you can see who is attaching to
    whom and are thus able to establish the client/server relationship.
  prefs: []
  type: TYPE_NORMAL
- en: Once you have the credentials displayed on your screen you'll also see the IP
    address that those credentials were sent to, which means that now all you have
    to do is open up your FTP client and point it to that same IP address. After providing
    the username and password you have just captured, you can in turn log in to that
    system and browse whatever information and services are there.
  prefs: []
  type: TYPE_NORMAL
- en: Cracking WEP
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: One of the unique characteristics of wireless networks is of course the fact
    that they don't use traditional media and instead use radio waves to carry their
    information from point to point. This is what makes the networks so attractive
    and popular, in that a person can carry their device anywhere within range of
    the wireless network and still maintain that access without having to worry about
    cables and such. However, this strength comes at a price, and that is that radio
    signals are indiscriminate and anyone who is in a position to receive them will
    also be in a position to process the information they carry.
  prefs: []
  type: TYPE_NORMAL
- en: Fortunately for us, the designers of wireless networks saw this as an issue
    and decided to add protection to the initial specification of the IEEE 802.11b
    network design in the form of **Wired Equivalent Protocol** (**WEP**). At the
    time of release, WEP was viewed as a good feature, however, it wasn't too long
    before problems emerged and subsequently snowballed.
  prefs: []
  type: TYPE_NORMAL
- en: WEP, is the oldest and arguably the weakest of the available encryption protocols.
    The WEP standard was introduced as the initial solution to wireless security but
    was quickly found to be flawed and highly vulnerable. There is a myriad of reasons
    why the protocol was found to be flawed and therefore vulnerable; among them is
    the poor cryptographic implementation in the protocol. Not only was the implementation
    designed and implemented poorly, it was done so without the review of experienced
    cryptographers who may have been able to detect any flaws and vulnerabilities
    and resolve them.
  prefs: []
  type: TYPE_NORMAL
- en: WPA, or Wi-Fi Protected Access, was the successor to WEP and was intended to
    address many of the problems that plagued WEP. In many areas, it succeeded and
    made for a much tougher security protocol. WPA uses TKIP, MIC, and AES encryption
    as its main mechanisms for securing information.
  prefs: []
  type: TYPE_NORMAL
- en: WPA2 is the upgrade or successor to WPA and was intended to address and replace
    the problems with WPA. WPA2 is much stronger and uses tougher encryption in the
    form of AES and CCMP. The standard also comes in a version that uses stronger
    systems such as EAP, TKIP, and AES (with longer keys).
  prefs: []
  type: TYPE_NORMAL
- en: Before we get into the problems, however, let's see how WEP is supposed to work.
    After that, we will move on to how to exploit its problems.
  prefs: []
  type: TYPE_NORMAL
- en: WEP is the oldest of the wireless encryption protocols, and when originally
    introduced and integrated into the 802.11b standard it was viewed as a way of
    providing secure data transmissions more or less on a par with that of wired networks.
    As designed, the WEP protocol made use of some existing technologies including
    the RC4 encryption protocol.
  prefs: []
  type: TYPE_NORMAL
- en: 'When it was designed and debuted it was intended to accomplish the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Defeat eavesdropping on communications and attempts to reduce the unauthorized
    disclosure of data
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Check the integrity of data as it flows across the network
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use a shared secret key to encrypt packets prior to transmission
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Provide confidentiality, access control, and integrity in a lightweight, efficient
    system
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Its problems arise from the following circumstances:'
  prefs: []
  type: TYPE_NORMAL
- en: The protocol was designed without review from experienced cryptologists, the
    academic community, or even the public.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It provides no clearly-defined method for key distribution (such as centralized
    key management) other than pre-shared keys, which must be input manually into
    each station. As a result, the keys are cumbersome to change on a large scale
    and thus rarely changed.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Its design makes it possible to passively uncover the key using sniffing tools
    and cracking tools available freely in operating systems, such as the Linux-based
    Kali.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Key generators used by different vendors are inconsistently and poorly designed,
    leading to vulnerabilities such as issues with the use of 40-bit keys.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The algorithms used to perform key scheduling have been shown to be vulnerable
    to attack.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: CRC32 used in the integrity checking is flawed, and with slight modifications
    packets may be modified consistently by an attacker to produce their desired results.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Initialization Vectors** (**IVs**) are only 24-bits in length, meaning that
    an entire pool of IVs can be exhausted by a mildly active network in five hours
    or less.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It is susceptible to known plaintext attacks through the analysis of packets.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Keys may be uncovered through the analysis of packets, allowing for the creation
    of a decryption table.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It is susceptible to denial of service attacks through the use of associate
    and disassociate messages, which are not authenticated by WEP.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To get things started you will need to have the following items in place:'
  prefs: []
  type: TYPE_NORMAL
- en: A wireless card capable of entering monitor mode
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Kali Linux
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The items listed here are basic requirements and you could easily use more (or
    different) components if so desired. If you want enhanced range, for example,
    you could use a USB-based wireless card that has connections for an external antenna
    that could get better reception.
  prefs: []
  type: TYPE_NORMAL
- en: Something important to remember in this exercise is that we will be using a
    series of tools that all come from one suite of tools designed to crack and analyze
    the traffic from wireless networks. We will revisit different tools from the suite
    in subsequent chapters, as well as use them for different purposes along the way.
    This will serve as your first exploration of some of the members of the air-crack
    suite.
  prefs: []
  type: TYPE_NORMAL
- en: Step one – monitor mode airmon-ng
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The first step we have to do is put the wireless adapter into promiscuous mode
    or monitor mode. This is no different to what we have been doing in previous chapters.
    In this case, we will assume that our wireless adapter uses the name `wlan0`,
    but double check it to ensure that the name is the same on your system.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Much like before, the `airmon-ng` utility has switched our wireless card into
    monitor mode and should have renamed it to something along the lines of `mon0`.
    Once this is done, we will now be capable of viewing all the traffic we need.
    The following screenshot shows the result of the `airmon-ng` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/72ba8570-043e-4440-ae1f-32f0f6908fc5.png)'
  prefs: []
  type: TYPE_IMG
- en: airmon-ng switching wlan0 into monitor mode.
  prefs: []
  type: TYPE_NORMAL
- en: Step two – airdump-ng
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'With monitor mode in place, we will now start to collect traffic with this
    same wireless adapter. To perform this operation using `airodump-ng`, we would
    type the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Note how we used the new name for the monitoring interface, `mon0`. You should
    verify the name with `ifconfig` to ensure that your new interface name is the
    same.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once this step is completed you should start seeing access points, and it is
    up to you to select the one you wish to create an evil twin of:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/65417548-61cb-44d7-8258-6e25ab5962db.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Step three – airdump-ng and traffic capture
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: From the list of access points in this screenshot, you will note that there
    are two WEP-enabled access points, of which we will choose the one named `7871`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: This will start capturing packets from the SSID `7871` on channel `6` and write
    them to file crack, which will be in the `pcap` format. The problem with this
    method is that we need to capture a lot of packets or traffic to be able to actually
    break or retrieve the key. If you're someone who likes being patient, you can
    wait for 50 or 60,000—or even 100,000—packets to be captured before you proceed
    with the cracking process. However, that's not good enough; we want the key and
    we want to get it in the shortest amount of time possible. Let's do precisely
    that by setting up the circumstances that can make it happen.
  prefs: []
  type: TYPE_NORMAL
- en: There tends to be a little bit of an argument surrounding the actual number
    of packets that need to be captured to make this cracking process successful,
    so you may have to do a little experimenting to get consistent, reliable results.
    However, just for reference purposes, the amount of traffic that needs to be collected
    tends to be somewhere between 60,000 packets to over 100,000 or more.
  prefs: []
  type: TYPE_NORMAL
- en: Step four – replay that traffic
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: What we need to do to speed up this process is to generate a lot of traffic
    in a very short period of time. To do this, we are going to perform a process
    known as packet injection and we are also going to spoof a MAC address in order
    to induce a wave of traffic that we can in turn capture.
  prefs: []
  type: TYPE_NORMAL
- en: There are many different ways to perform replays of traffic, and in fact this
    technique is used to replay authentication traffic and other types of traffic
    on a network between host or applications. Keep in mind, however, that some types
    of traffic cannot be replayed easily, or at all. In fact, one of the biggest items
    that will thwart a data replay attack is time stamping, which includes information
    on a packet telling it when it was transmitted and how long it's valid for. Fortunately,
    ARP traffic does not have this protection on it by default, though it can be provided
    via other mechanisms. The techniques we're using here will not run into this limitation
    as we are not capturing or replaying traffic that is subject to this protection
    or limitation.
  prefs: []
  type: TYPE_NORMAL
- en: 'The components required to perform this step are going to be the SSID of the
    access point, the MAC address of the client that has connected to the access point,
    and a tool known as `aireplay-ng`. We will issue the command using the utility
    in the following format:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: If we have done everything correctly up to this point, the `airodump` we have
    run in another window will still be running and will be able to capture all the
    traffic we have generated into the file we named crack, which we will then use
    to run analysis on and retrieve the key.
  prefs: []
  type: TYPE_NORMAL
- en: Step five – crack that traffic
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Before we proceed with step five, which is where we will actually crack the
    traffic, we need to make sure that we have captured several tens of thousands
    of packets in order to ensure that we have enough traffic to properly analyze.
    If you do not capture enough traffic, the chances are that this process will fail
    and you'll have to re-generate traffic in an effort to capture more. So, remember
    to be patient, and ensure that you capture enough traffic to perform the process
    with a reasonable amount of success.
  prefs: []
  type: TYPE_NORMAL
- en: Something to remember when attempting to recover the key from captured traffic
    is that it can take a while depending on the resources available on the system
    that is attempting to recover the key. If you have a slower or older system, expect
    this process to take a little longer than it would on a system that has more processing
    power or memory. If you have collected enough traffic, the process should be successful
    - no matter how long it takes.
  prefs: []
  type: TYPE_NORMAL
- en: 'In order to crack traffic, we need to be in possession of a capture file, which
    we generated using `airodump` earlier. All the traffic that we have generated
    using `aireplay` should be captured into this file, which we can then perform
    analysis on using the following utility:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: If you are successful, `aircrack` will display the key in hexadecimal on your
    screen, which you can then use to enter into your wireless client when you associate
    with the targeted access point.
  prefs: []
  type: TYPE_NORMAL
- en: If you've performed the steps of this attack with patience and care you will
    find that you have a great chance of success and you should be able to gain access
    to any WEP-enabled network on demand. Also keep in mind that it can take a little
    bit of practice to ensure that you get enough traffic captured into a file using
    `airodump`; learning curves are normal.
  prefs: []
  type: TYPE_NORMAL
- en: It is largely because of the weakness exploited here in this particular recipe
    that this form of protection on wireless networks is frowned upon or shunned as
    a valid form of protection. When this protective mechanism debuted with early
    wireless networks it was seen as being a decent form of protection. However, as
    technology evolved and attackers sought different ways of capturing information,
    a vulnerability was soon discovered. It is this vulnerability that we are praying
    upon in this particular recipe. Networks nowadays should not be using this protection
    measure as their primary means of protecting the wireless traffic, as it is not
    that hard to break - all it takes is a little finesse and patience before you
    get the information you desire.
  prefs: []
  type: TYPE_NORMAL
