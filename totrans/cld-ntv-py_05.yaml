- en: Building WebViews with React
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: So far, we have been building our microservices and making our backend services
    more responsive and efficient. Also, we have been trying out different database
    services which can secure and increase the performance of the storage and retrieval
    of data, which is of essence here.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we will focus on building our frontend page using React and
    integrating these pages with the backend to form a complete application.
  prefs: []
  type: TYPE_NORMAL
- en: 'The topics that we will cover in this chapter are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Setting up a React environment
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a user authentication panel
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Integrating react with backend APIs
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Understanding React
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In simpler terms, React is the UI layer of your application. It is a Javascript
    library to build fast and quick user interfaces. React, basically, helps you to
    create awesome webViews for each state of your application. So, we are going to
    use React for this purpose. But before we do that, let''s understand a few concepts/key
    points of React, which are listed next:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Components**: All your collections of HTML and JavaScript are called **components**.
    React, basically, provides hooks to render HTML pages with JavaScript enabled.
    The important thing here is that React works as a controller to render different
    web pages for each state of your application.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Props for static version in React**: Usually, in HTML, you need a lot of
    code for showing all the data on the frontend and, moreover, it''s repetitive.
    React props help you solve this problem. Props, basically, keep the state of data
    and pass values from the parent to the child.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Identifying the minimal state**: To build your app correctly, you first need
    to think of the minimal set of the mutable state that your app needs. Like, in
    our case, we need to keep the state of users always available during the different
    states of the application.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Identifying active state**: React is all about one-way data flow down the
    component hierarchy. We need to understand every component that renders something
    based on that state. Also, we need to understand how states change at the level
    of component hierarchy.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**React-DOM**: The react-dom is a combination of React and DOM. React contains
    the functionality utilized in web and mobile apps. The react-dom functionality
    is utilized only in web apps.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting up the React environment
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In order to run React, we need to set up an initial environment, which includes
    installing a couple of libraries of `node.js`.
  prefs: []
  type: TYPE_NORMAL
- en: Installing node
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Before we start installing React and the package list, we need to have `node.js`
    installed on our system.
  prefs: []
  type: TYPE_NORMAL
- en: In Linux (Debian-based system), the process of installation is pretty simple.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we need to add PPA from the `node.js` official website by using the
    following commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Once it is set up, we can install `node.js` with the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Now let''s check the `node` and `npm` versions, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: In our setup, we use the aforementioned version, but the node version around
    v7.x should be fine, and for npm, v4.x should work fine.
  prefs: []
  type: TYPE_NORMAL
- en: Creating package.json
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This file is, basically, metadata for your application, which contains the complete
    libraries /dependencies that need to be installed for your application. Another
    real-world advantage is that it makes your build reproducible, which means that
    it's way easier to share it with other developers. There are different ways in
    which you can create your customized `package.json`.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is the minimum information that needs to be provided in `packages.json`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'In order to create the `package.json` template, you can use the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: It will ask for values such as name, version, description, author, license,
    and so on; fill in the values, and it will generate `package.json`.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you don''t want to fill the information in now, you can use the `--yes`
    or `-y` attribute to use the default values as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'For our application, I have generated `package.json`, which looks something
    like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, that we have generated `package.json`, we need to install these dependencies
    on our workstation using the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Please make sure that, when you execute the preceding command, `package.json`
    should be in the current working directory.
  prefs: []
  type: TYPE_NORMAL
- en: Building webViews with React
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'First of all, we will create a home view from which React will be called. So,
    let''s create `index.html`, which has the following contents, in the template
    directory:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: As you can see in the preceding HTML page, we have defined `id ="react"`, which
    we will use to call the React main function based on the ID, and perform a certain
    operation.
  prefs: []
  type: TYPE_NORMAL
- en: 'So, let''s create our `main.js`, which will send a response, with the following
    code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Now we have defined our basic structure of the React response. Since we are
    building an application with multiple views, we need a build tool which will help
    us put all our assets, including JavaScript, images, fonts, and CSS, under one
    package, and generate it into a single file.
  prefs: []
  type: TYPE_NORMAL
- en: '**Webpack** is the tool which will help us solve this problem.'
  prefs: []
  type: TYPE_NORMAL
- en: Webpack should already be available, as we defined the Webpack package as part
    of `package.json`, which we installed earlier.
  prefs: []
  type: TYPE_NORMAL
- en: Webpack, basically, reads a single entry file, which could be the `.js` file,
    reads its child components, and then converts them into a single `.js` file.
  prefs: []
  type: TYPE_NORMAL
- en: Since we have already defined it in `package.json`, it is already installed.
  prefs: []
  type: TYPE_NORMAL
- en: In Webpack, we need to define a configuration which will help it to identify
    the entry file and the loader that is to be used to generate a single `.js` file.
    Also, you need to define the filename for the generated code.
  prefs: []
  type: TYPE_NORMAL
- en: 'Our Webpack configuration would be something like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: You can extend the preceding configuration based on your use cases. Sometimes,
    developers try *.html as the entry point. In that case, you need to make appropriate
    changes.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s move on to build our first webView using the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: The `-d` attribute in the last command is used for debugging; it generates another
    file, `bundle.js.map`, which shows the activity of Webpack.
  prefs: []
  type: TYPE_NORMAL
- en: Since we are going to build the application repeatedly, we can use another flag,
    `--watch` or `-w`, which will keep track of the changes in the `main.js` file.
  prefs: []
  type: TYPE_NORMAL
- en: 'So, now our Webpack command should be something like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Now we have built our application. Remember to change your routes in `app.py`
    so that home should be navigated as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Let's check what our home page looks like now.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00061.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: You can also check whether we have React and react-dom running in the background
    in the inspect mode.
  prefs: []
  type: TYPE_NORMAL
- en: This is a very basic structure to understand the workings of React. Let's move
    on to our use case, where we have created tweet webViews, and the user can view
    the old tweets as well.
  prefs: []
  type: TYPE_NORMAL
- en: 'So, let''s create `Tweet.js`, which will have the basic structure of tweets,
    such as a textbox for contents, and a button to post tweets. Add the following
    code to `Tweet.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s call this function from `main.js`, so that it is loaded on the home
    page, by updating the `render` function as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: If you load the page now, it will be pretty simple. Since we want to create
    a web application, which should be attractive, we will use a couple of CSS here
    to do so. In our case, we are using Materialize CSS ([http://materializecss.com/getting-started.html](http://materializecss.com/getting-started.html)).
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following block of code in `index.html`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: Let's try to add tweets, and send them across with state so that some tweets
    should be shown.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the `Main` class of `main.js`, add the following constructor function to
    initialize the state:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'Now update the `render` function as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s create another file, `TweetList.js`, which will show the tweets, with
    the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: Great! Now we have added this template. Let's check out our home page and see
    how the CSS works there. But before that, since we are using Webpack for building,
    make sure you add the following line to load `bundle.js` every time--this will
    run the webViews in the `index.html` file.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'Awesome! The home page should look something like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00062.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Let's move forward to post tweets--we should be able to add new tweets, and
    they should be updated in `TweetList.js` as well.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s update our `Tweet.js` code so that it sends the tweets to `main.js`
    to process them. Now, we need to send our tweets to `main.js`, in order to do
    so , we need to update our `Tweet.js` file with the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'Also, be sure to update the `render` function with the `form onSubmit` attribute
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: So, after adding content into the text area, it should submit the tweet as well.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, let''s update the `render` function of `main.js` to add new tweets, as
    follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'We also need to add the `addTweet` function in the `Main` class, defined in
    the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'Your page, after adding the new tweet, should look something like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00063.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Currently, we are using React to hold the data in an array. Since we have built
    our microservices to hold this kind of data, we should integrate our webView with
    the backend services.
  prefs: []
  type: TYPE_NORMAL
- en: Integrating webView with microservices
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In order to integrate our microservices with webViews, we will use AJAX to make
    API calls.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'Similarly, we need to modify our `addTweet` function in our `main.js` as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'Since there will be multiple tweets which need to be iterated with a similar
    template of tweet, let''s create another component called `templatetweet.js` with
    the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: Remember, we have changed the field of props based on our database collection
    keys.
  prefs: []
  type: TYPE_NORMAL
- en: 'Also, we need to update our `TweetList.js` to use the preceding template by
    adding it as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'Great! Your home page should look like this now:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00064.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: User authentication
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: All our tweets are protected, and should react only to the audience which we
    want to showcase them to. Also, anonymous users should not be allowed to tweet.
    For that, we will create a database and web pages to enable new users to sign
    in and log in to the tweet webView as well. Remember, we will use Flask to authenticate
    users, and also to post data to the backend user.
  prefs: []
  type: TYPE_NORMAL
- en: Login user
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s create our login page template, where the existing users need to fill
    in their username and password to authenticate. The following is the code snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: We will post the data to the login page, which we will define in the `app.py`
    file.
  prefs: []
  type: TYPE_NORMAL
- en: 'But first, check if the session is present or not. If not, then you will be
    redirected to the login page. Add the following code to `app.py`, which will validate
    session details for the user:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: Let's create the route for login, and validate the credentials to authenticate
    users to tweet.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is the code snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'Once you are done with this, your login page will appear at the root URL, and
    it should look something like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00065.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: As you can see, we have provided a link, Sign up now, to create an account for
    the new user.
  prefs: []
  type: TYPE_NORMAL
- en: Remember, we are using APIs to authenticate the user from the user collection
    in our database.
  prefs: []
  type: TYPE_NORMAL
- en: Sign up user
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let's move on to create our sign up page to help register new users so that
    they can tweet as well.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s create `signup.html`, which will ask for user details. Check the following
    code snippet for this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: The preceding code is, basically, the template which needs the backend API to
    submit the data to the user.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: Once the user has signed up, it will set the session, and redirect it to your
    home page.
  prefs: []
  type: TYPE_NORMAL
- en: 'Your Sign up page should look something like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00066.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: We have authenticated the user, but what if he wants to update his/her personal
    information? Let's create a profile page, which will help them do so.
  prefs: []
  type: TYPE_NORMAL
- en: User profile
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let's create a profile page (`profile.html`), which will be accessible by the
    user already logged in at the home page in the navigation panel.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following code to `profile.html`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: Since we have created the profile, we need to create a route for the profile,
    which will read the database to get user details and POST back to the database
    as well.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: 'Once this last bit of code is added, your profile page should look something
    like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00067.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Also, we should add the profile link in `Tweet.js` in the navigation template
    by adding the following lines:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: 'Now your home page will look something like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00068.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Log out users
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: Now our application is fully built-up, starting from the users logging in, to
    submitting their tweets, and then logging out.
  prefs: []
  type: TYPE_NORMAL
- en: Testing the React webViews
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Since we are building webViews, we need to test them to catch some of the bugs
    before they happen. Also, testing will help you build better code.
  prefs: []
  type: TYPE_NORMAL
- en: There are a number of UI-testing frameworks which could help you test your web
    apps. Two of them are discussed in the following section.
  prefs: []
  type: TYPE_NORMAL
- en: Jest
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Jest is a unit testing framework, which is provided by Facebook to test JavaScript.
    It is used to test individual components. It is simple, standard, and standalone.
  prefs: []
  type: TYPE_NORMAL
- en: It tests your components based on fake DOM implementations, and runs different
    tests to check the functionalities. It automatically resolves dependencies. Also,
    you can run all the tests in parallel.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can refer to the following link, which could help you write test cases
    for your React application:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://facebook.github.io/jest/docs/tutorial-react.html](https://facebook.github.io/jest/docs/tutorial-react.html)'
  prefs: []
  type: TYPE_NORMAL
- en: Selenium
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Selenium is an open source and portable automated software testing tool for
    testing web applications. It provides end-to-end testing, which means that it
    is a process of executing test scenarios against a real browser to test the entire
    stack of a multi-tiered application.
  prefs: []
  type: TYPE_NORMAL
- en: 'It has the following different components:'
  prefs: []
  type: TYPE_NORMAL
- en: '**IDE**: This helps you describe the testing workflow.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Selenium WebDriver**: This automates browser testing. It sends commands directly
    to the browser and receives the results.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Selenium RC**: This remote control helps you to create test cases.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Grid**: This runs test cases across different browsers, and in parallel.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This is one of the best tools you can use to test our web application, which
    I would recommend.
  prefs: []
  type: TYPE_NORMAL
- en: You can gather more about Selenium at [http://www.seleniumhq.org/docs/](http://www.seleniumhq.org/docs/).
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, our focus was on creating frontend user webViews and how to
    improve them to attract consumers. You also learnt how React can help us to build
    these webViews and implement interactions with backend services. In the upcoming
    chapter, things will get more interesting, as we will play around with our frontend
    application, and will explain how we scale it using Flux to handle a large number
    of incoming requests from the internet.
  prefs: []
  type: TYPE_NORMAL
