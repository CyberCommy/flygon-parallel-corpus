- en: Creating a Generic Method
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you'll learn about generic methods, which are methods that
    can operate on different data types. You will also learn about constraining a
    method in terms of the data types that it can operate on, so we'll add a concept
    called *constraints*.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a button to exchange and then comparing two values
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Open up a project and click on the <html> tab. The only thing to put in there
    is a button. This time, we will not read any values from the user just to save
    time. So, go to Toolbox and grab a `Button` control. Drag and drop it below the
    line beginning with `<form id=...` (you can delete the `<div>` lines, as we won''t
    be needing them). Change the text on the button to say `Exchange And Compare`.
    So, this will exchange two values and then compare them. Your complete `Default.aspx`
    file should look like the one shown in *Figure 2.2.1*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/2102d1fc-25e4-4bbc-9ab2-a2d7caf8cc48.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 2.2.1: The complete HTML file for this chapter'
  prefs: []
  type: TYPE_NORMAL
- en: Writing a swap function
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'A *swap* function is a common thing to write: a function that swaps two values.
    To do this, go to Solution Explorer, right-click on the name of the website, select
    Add, and then click on Class. Name the class `GenMethods` to keep it simple, and
    then click on OK. When the Visual Studio message comes up, click on Yes.'
  prefs: []
  type: TYPE_NORMAL
- en: 'When the `GenMethods` file comes up, the only thing that you should leave there
    is `using System`. We don''t need the constructor for this class, so get rid of
    that. Then, within the body of `GenMethods`, define the following between the
    set of curly braces below the public class `GenMethods` line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'This will act at the class level: you don''t have to make an object of the
    `GenMethods` type. In a sense, the only thing that is new here is the fact that
    this is a `Swap<T>` function, which means that it can act on several different
    data types equally well. Now, also remember that the `ref` keyword indicates that
    with the `x` and `y` parameters in this line, when you change the values inside
    the method, those changed values are also accessible inside the calling code.
    Keep that in mind.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Before going ahead, let''s label this by entering the following comment above
    this line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: This basically means that the method can operate on multiple data types equally.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, between the set of curly braces beneath the preceding line, enter the
    following to swap the values:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Here, you''re taking the value of `x` and assigning it to a temporary one.
    Then, in the next stage, you can take `x` and assign `y` to it and then you can
    take `y` and assign `temp` to it, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s add the following comments before proceeding:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Here, the first line means overwrite the value of `x` with the value of `y`,
    and then you assign `y` to `x`. In the last stage, you assign `temp`, which is
    the original value of `x`, back to `y`. This represents the switching of the values.
  prefs: []
  type: TYPE_NORMAL
- en: Comparing values using the CompareTo method
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now, let''s do one more method. This one will be a little more sophisticated.
    It will be called `Compare`, and it will operate on different data types. So,
    enter the following beneath the closed curly brace at the end of the preceding
    lines:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Introducing constraints
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To compare values, you want to use the `CompareTo` method. It can be used if
    you have `where T : IComparable`. This is a new construct there. It''s a *constraint*.
    The `Compare` method works, but it only does so if the data type on which it is
    operating has `IComparable` implemented on it. In other words, it makes sense
    to compare the values.'
  prefs: []
  type: TYPE_NORMAL
- en: Completing the GenMethods class
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'For the next stage, you can say the following. Enter it within a set of curly
    braces below this line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, why do we write this? We write this because if you right-click on the
    `CompareTo` method and select Go To Definition in the drop-down menu (*F12*),
    you can see that it''s defined inside the `IComparable` interface. If you expand
    that and look at what it returns, it says: Values Meaning Less than zero This
    instance precedes obj in the sort order., as shown in *Figure 2.2.2*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/92313567-3fab-4068-9bba-f3cfcdf24f02.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 2.2.2: The definition of IComparable'
  prefs: []
  type: TYPE_NORMAL
- en: In other words, in our context, this means that `x` and `y` are related in the
    following sense.
  prefs: []
  type: TYPE_NORMAL
- en: If the value returned by `CompareTo` is less than `0`, then `x` is less than
    `y`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, enter the following within a set of curly braces beneath the preceding
    line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: In this line, you return and actually format a string, so that it's more than
    just a simple comparison. So, for example, you can say here `x` is less than `y`.
  prefs: []
  type: TYPE_NORMAL
- en: 'The other possibility is the reverse. Now, enter the following beneath the
    earlier closed curly brace:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'If you want to know more about `CompareTo`, right-click on it and select Go
    To Definition in the drop-down menu (*F12*). As seen under Returns in *Figure
    7.2.3*, it says: Zero This instance occurs in the same position in a sort order
    as obj. Greater than zero This instance follows object in the sort order.:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/f60931fc-b6c8-4700-96b8-5f8bbf4f9e79.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 2.2.3: The definition of CompareTo'
  prefs: []
  type: TYPE_NORMAL
- en: In the `if (x.CompareTo(y) < 0)` line, this instance signifies the `x` variable
    and object denotes the `y` variable.
  prefs: []
  type: TYPE_NORMAL
- en: 'So, this is the basic `GenMethods` class. The final version of the `GenMethods.cs`
    file, including comments, is shown in the following code block:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: As you can see, the `GenMethods` class contains a couple of generic functions
    because it can operate on different data types, except for the second `CompareTo`
    method, which is a slightly more restricted version, meaning that a constraint
    is applied of the `IComparable` type.
  prefs: []
  type: TYPE_NORMAL
- en: Hardcoding the values
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now, back in `Default.aspx`, go to the Design view and double-click on the Exchange
    and Compare button. All we will do is to hardcode the values to save time. We
    don't have to read them from the user. Of course, you can, if you want to, by
    putting in two boxes and process that using `double` convert.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, in `Default.aspx.cs`, between a set of curly braces below the line beginning
    with `protected void Button1_Click...`, enter the following lines:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Then use `sampLabel.Text` to display the original values on this screen, first
    displaying the value of `x` and then displaying the value of `y`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, to do the swapping of the values. Enter the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: First, you enter the name of class and then the function, which is `Swap`. You
    will see that `<T>` can now be replaced with `<double>`, because we are swapping
    doubles. Then, you'll put in `ref x` and `ref y`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Because we are using `ref`, the values of `x` and `y` have to be initialized
    and further now we can display them again, but swapped, as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Running the program
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s take a look at the effects and see if this is working as expected. So,
    give it a go in your browser. Click on the Exchange and Compare button. The results
    are shown in *Figure 2.2.4*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/036b4454-3a06-47de-a3e7-e88204134b6f.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 2.2.4: Results of the initial program run'
  prefs: []
  type: TYPE_NORMAL
- en: As you can see, x is 25 and y is 34\. Then, after you click on Exchange and
    Compare, x is 34 and y is 25\. So, this is working as expected.
  prefs: []
  type: TYPE_NORMAL
- en: Modifying the program for an additional type of comparison
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now, go back to `Default.aspx` and, in the next stage, in the Design view,
    we will also compare those values. For this, double-click on the Exchange and
    Compare button again and add the following beneath the last line we entered:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Remember that the way we designed `Compare`, it returns a string that returns
    one of the two values, depending on the specifics. So, in this line we will compare
    `double`; so you put that in there and then the two values will be `x`, `y`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s give it a shot in your browser. Click on the Exchange and Compare button
    once again. The new results are shown in *Figure 2.2.5*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/5b98daa6-276d-4edc-8be1-8484b1fbec4f.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 2.2.5: Results of the modified program run'
  prefs: []
  type: TYPE_NORMAL
- en: Now, x is 25 and y is 34\. When you exchange the values, x is 34 and y is 25\.
    Further, 34 is certainly more than 25\. It looks really nice and professional.
  prefs: []
  type: TYPE_NORMAL
- en: Modifying the program for different data types
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The nice thing now is this: imagine you want to redo this; you can just type
    `int` as an example and change the data type to an integer or decimal type and
    the methods. The code that we wrote in this chapter operates equally well on these
    things:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'The only thing is, of course, if you right-click on `int` and select Go To
    Definition in the drop-down menu (*F12*), you''ll see that it says `public struct
    Int32` and it implements `IComparable`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/6e99ea0c-c3b0-44d8-aab5-9743fe7c6419.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 2.2.6: Definition for public struct Int32'
  prefs: []
  type: TYPE_NORMAL
- en: 'This will work due to the fact that our function has a constraint where it
    says where `T` should be comparable, as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: These are the basics.
  prefs: []
  type: TYPE_NORMAL
- en: Chapter review
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'For review, the complete version of the `Default.aspx.cs` file for this chapter,
    including comments, is shown in the following code block:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you learned about generic methods, which are methods that can
    operate on different data types. You also learned about constraining a method
    in terms of the data types that it can operate on, a concept called *constraints*.
    You created a `GenMethods` class, wrote a `Swap` function, compared values using
    the `CompareTo` method, learned about constraints, and modified the program to
    perform additional types of comparisons and to work with different data types.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, you will learn about up casting, down casting, and then
    how to implement a generic interface and how that exactly helps us.
  prefs: []
  type: TYPE_NORMAL
