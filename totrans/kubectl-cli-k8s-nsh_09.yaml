- en: '*Chapter 6*: Debugging an Application'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are times when you need to debug an application to troubleshoot production-related
    issues. So far in this book, we have learned how to install, update, and delete
    an application.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we are going to cover application debugging by using `kubectl
    describe` to show the resolved object configuration and desired state before the
    actual events in the pod. Then we are going to check pod logs for errors, and
    finally, executing in a container (executing into a container means getting shell
    access in the running container) and running a command there.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we''re going to cover the following main topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Describing a pod
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Checking pod logs
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Executing a command in a running container
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Describing a pod
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In the previous chapter, we deleted a running application. For this chapter,
    then, let''s install another one. For the purpose of debugging an application,
    we are going to use the `bitnami/postgresql` Docker image from Docker Hub ([https://hub.docker.com/r/bitnami/postgresql](https://hub.docker.com/r/bitnami/postgresql))
    and we are going to install an application using the `deployment-postgresql.yaml`
    file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'To install the PostgreSQL deployment, run the following commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Oops, what happened there? By running the `$ kubectl get pods` command we are
    seeing an `ErrImagePull` error. Let''s look into it. In *Chapter 1*, *Introducing
    and Installing kubectl*, we learned about the `kubectl describe` command; let''s
    use it to check the pod status. To describe the PostgreSQL pod, run the following
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'We get the following output of `Events` after running the preceding command:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.1 – The output for the describe command'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/B16411_06_001.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 6.1 – The output for the describe command
  prefs: []
  type: TYPE_NORMAL
- en: In the preceding screenshot, as the output of `kubectl pod describe` is quite
    big, we are only showing the `Events` part, which we need to check to troubleshoot
    the issue.
  prefs: []
  type: TYPE_NORMAL
- en: 'Right here, we see why it fails to pull the image:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Looking at the preceding error, we can see that we have referenced the wrong
    tag for the `postgresql` Docker image. Let''s change it to `10.13.0` in the `deployment-postgresql.yaml`
    file and run `kubectl apply` again. To update the `postgresql` deployment, run
    the following commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'We are seeing a new pod, `postgresql-56dcb95567-8rdmd`, which is crashing too.
    To check this `postgresql` pod, run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'We get the following output after running the preceding command:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.2 – Checking the postgresql pod with fixed Docker tag'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/B16411_06_002.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 6.2 – Checking the postgresql pod with fixed Docker tag
  prefs: []
  type: TYPE_NORMAL
- en: Hmm, this time, `Events` does not list much information as to why the `postgresql`
    pod is in the `CrashLoopBackOff` state, as the `bitnami/postgresql:10.13.0` image
    was pulled successfully.
  prefs: []
  type: TYPE_NORMAL
- en: Let's learn what to do about this issue in the next section by checking the
    pod's logs.
  prefs: []
  type: TYPE_NORMAL
- en: Checking pod logs
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When `kubectl describe pod` does not show any information about an error, we
    can use another `kubectl` command, that is, `logs`. The `kubectl logs` command
    allows us to print container logs, and we can also view them in real time as well.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs: []
  type: TYPE_NORMAL
- en: 'You can use `kubectl logs` with a flag to print the logs for the previous instance
    of the container in a pod if it exists:'
  prefs: []
  type: TYPE_NORMAL
- en: '`$ kubectl logs -p some_pod`'
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, let''s check out this command on the crashing `postgresql` pod and try
    to find out what is going on with it – why it is failing. To get the pods list
    and check the pod logs, run the following commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'The output for the preceding commands is shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.3 – Getting error logs for the postgresql pod'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/B16411_06_003.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 6.3 – Getting error logs for the postgresql pod
  prefs: []
  type: TYPE_NORMAL
- en: Aha! As you can see from the preceding screenshot, the `postgresql` pod is failing
    as it needs the `POSTGRESQL_PASSWORD` environment variable to be set with some
    password, or the `ALLOW_EMPTY_PASSWORD` environment variable set to `yes`, which
    will allow the container to be started with the blank password.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s update the `deployment-postgresql.yaml` file with the `POSTGRESQL_PASSWORD`
    environment variable set with some password:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'To update the `postgresql` deployment, run the following commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: As you can see in the preceding code block, the `postgresql` deployment was
    updated, a new pod was created successfully, and the pod that was crashing has
    been terminated.
  prefs: []
  type: TYPE_NORMAL
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: Best practices do not recommend storing passwords directly in deployments and
    other Kubernetes templates, but storing them in Kubernetes Secrets instead.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now let''s see what the `postgresql` pod logs show in real time. To check the
    pod logs in real time, run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'The output of the preceding command is shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.4 – Reviewing the logs for postgresql'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/B16411_06_004.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 6.4 – Reviewing the logs for postgresql
  prefs: []
  type: TYPE_NORMAL
- en: Nice, the PostgreSQL deployment is up and running and is ready to accept connections.
    By leaving that command running, we can review the logs in real time when we need
    to see what is going on in the PostgreSQL container.
  prefs: []
  type: TYPE_NORMAL
- en: Executing a command in a running container
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: So, we have learned how to troubleshoot pods with `pod describe` and `logs`,
    but there might be some cases when you want to do even more advanced troubleshooting,
    such as checking some config files or running some commands in the container.
    These things can be done using the `kubectl exec` command, which will allow `exec`
    into the container and have an interactive session in the container or run your
    commands as well.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s see how to get the `postgresql.conf` file content using the `kubectl
    exec` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: The preceding command will show the `postgresql.conf` file content so you can
    check the PostgreSQL settings, which in this case, are set by default.
  prefs: []
  type: TYPE_NORMAL
- en: Next, let's `exec` into the `postgresql` pod, open a shell, and then run the
    `psql` command to check for available databases.
  prefs: []
  type: TYPE_NORMAL
- en: 'To execute into the `postgresql` pod please run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'The output for the preceding command is shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.5 – Execute into the postgresql pod'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/B16411_06_005.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 6.5 – Execute into the postgresql pod
  prefs: []
  type: TYPE_NORMAL
- en: As you see in the preceding screenshot, we used `exec` to get into the `postgresql`
    pod using the `bash` shell, then we ran `psql –Upostgres` to log in to the `postgresql`
    instance, before checking for available databases with `\l`. This is a nice example
    of how to use the interactive `exec` command and run different commands inside
    of a container.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we learned how to describe the pod, check logs, and troubleshoot
    issues, and also covered how to create a Kubernetes deployment from scratch for
    the `postgresql` Docker image.
  prefs: []
  type: TYPE_NORMAL
- en: The troubleshooting skills of using `kubectl describe`, `logs`, and `exec` are
    very useful and allow you to know what is happening in an application pod. These
    techniques can be used to help you to fix any issues you encounter.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we're going to learn how to extend `kubectl` with plugins.
  prefs: []
  type: TYPE_NORMAL
