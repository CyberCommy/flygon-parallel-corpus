- en: Chapter 10. Awk Fundamentals
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The stream editor is not alone in its family and has a big brother awk. In
    this chapter, we will run through the basics or fundamentals of awk and see the
    power of the awk programming language. We will learn why we need and love awk
    and how we can make use of some of the basic features before we start putting
    awk to practical use in the next two chapters. As we work our way through this,
    we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Filtering content from files
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Formatting output
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Displaying non-system users from `/etc/passwd`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using `awk` control files
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The history behind awk
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `awk` command is a mainstay in the command suite in both Unix and Linux.
    The Unix command `awk` was first developed by Bell Labs in the 1970''s and is
    named after the surnames of the main authors: Alfred Aho, Peter Weinberger, and
    Brian Kernighan. The `awk` command allows access to the awk programming language,
    which is designed to process data within text streams.'
  prefs: []
  type: TYPE_NORMAL
- en: 'To demonstrate the programming language that is provided with `awk`, we should
    create a `hello world` program. We know this is compulsory for all languages:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Not only can we see that this code will print the ubiquitous hello message,
    we can also generate header information with the `BEGIN` block. Later, we will
    see that we can create summary information with an `END` code block by allowing
    for a main code block.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can see the output of this basic command in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The history behind awk](img/00099.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Displaying and filtering content from files
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now of course we all want to be able to print a little more than just **Hello
    World**. The `awk` command can be used to filter content from files and if needed,
    very large files. We should begin by printing the complete file before filtering
    it. In this way, we will get a feel of the syntax of the command. Later, we will
    see how we can add this control information into `awk` files to ease the command
    line. Using the following command, we will print all the lines from the `/etc/passwd`
    file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'This is equivalent to using the `$0` variable with the `print` statement:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: The `$0` variable refers to the complete line. If there is no argument supplied
    to the `print` command, we assume that the complete line is to be printed. If
    we want to print just the first field from the `/etc/passwd` file, we can use
    the `$1` variable. However, we will need to specify that in this file the field
    separator used is a colon. The `awk` default delimiter is a space or any amount
    of spaces or tabs and newlines. There are two ways to specify the input delimiter;
    these are displayed in the following examples.
  prefs: []
  type: TYPE_NORMAL
- en: 'The first example is easy and simple to use. The -`F` option works well, especially
    where we do not need any additional header information:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'We could also do this within the `BEGIN` block; this is useful when we want
    to use the `BEGIN` block to display header information:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: We can see this clearly in the preceding example, which we named the `BEGIN`
    block and all of the code within it is corralled by the brace brackets. The main
    block has no name and is enclosed within the brace brackets.
  prefs: []
  type: TYPE_NORMAL
- en: 'After seeing the `BEGIN` block and the main code blocks, we will now look at
    the `END` code block. This is often used to display summary data. For example,
    if we want to print the total lines in the `passwd` file, we can make use of the
    `END` block. The code with the `BEGIN` and `END` blocks is processed just once,
    whereas the main block is processed for each line. The following example adds
    to the code we have written so far to include the total line count:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'The `awk` internal variable `NR` maintains the number of processed lines. If
    we want, we can add some additional text to this. This can be used to annotate
    the summary data. We can also make use of the single quotes that are used with
    the awk language; they will allow us to spread the code across multiple lines.
    Once we have opened the single quotes, we can add new lines to the command line
    right until we close the quote. This is demonstrated in the next example where
    we have extended the summary information:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'If we do not wish to end our awk experience here, we can easily display the
    running line count with each line as well as the final total. This is shown in
    the following example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'The following screenshot captures this command and partial output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Displaying and filtering content from files](img/00100.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'In the first example with `BEGIN`, we saw that there is no reason why we cannot
    use the `END` code block in isolation without a main code block. If we need to
    emulate the `wc -l` command, we can use the following `awk` statement:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'The output will be the line count from the file. The following screenshot shows
    both the use of the `awk` command and the `wc` command to count the lines in the
    `/etc/passwd` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Displaying and filtering content from files](img/00101.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Remarkably, we can see that the output does tally to 28 lines and our code has
    worked.
  prefs: []
  type: TYPE_NORMAL
- en: 'Another feature that we can practice with is about working on selected lines
    only. For example, if we want to print only the first five lines, we will use
    the following statement:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'If we want to print lines `8` through to `12`, we can use the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'We can also use regular expressions to match the text in the lines. Take a
    look at the following example where we look at the lines that end in the work
    bash:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'The example and the output it produces is shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Displaying and filtering content from files](img/00102.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Formatting output
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We have remained faithful to the `print` command so far, as we have been limited
    in what we require from the output. If we want to print out, say, the username,
    UID, and default shell we need to start formatting the output just a little. In
    this case, we can organize the output in well-shaped columns. Without formatting,
    the command we use will look similar to the following example where we use commas
    to separate the field that we want to print:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: We use the `BEGIN` block here, as we can make use of it to print column headers
    later.
  prefs: []
  type: TYPE_NORMAL
- en: 'To understand the problem a little better, we can take a look at the following
    screenshot that illustrates the uneven column widths:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Formatting output](img/00103.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'The issue that we have in the output is that the columns do not align, as the
    username is of an inconsistent length. To improve on this, we can use the `printf`
    function where we can specify the column width. The syntax for the `awk` statements
    will be similar to the following example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: The `printf` formatting is included within double quotes. We also need to include
    the newline with the `\n`. The `printf` function does not add a new line automatically,
    whereas the `print` function does. We print the three fields; the first accepts
    string values and is set to `10` characters wide. The middle field accepts up
    to 4 numbers and we finish with the default shell field where we allow up to `17`
    string characters.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following screenshot shows how the output can be improved:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Formatting output](img/00104.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'We can further enhance this by adding header information. Although the code
    starts to look untidy at this stage, we will later see how we can resolve this
    with awk control files. The following example shows the header information being
    added to the `Begin` block. The semi-colon is used to separate the two statements
    in the `BEGIN` block:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'In the following screenshot, we can see how this improves the output even further:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Formatting output](img/00105.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'In the previous chapter, we saw how we can augment the output with the use
    of colors in the shell. We may also use color from within awk by adding our own
    functions. In the next code example, you will see that awk allows for us to define
    our own functions to facilitate more complex operations and isolate the code.
    We will now modify the previous code to include green output in the header:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Creating the function within `awk` allows the color to be added where we require,
    in this case, green text. It will be easy to create functions to define other
    colors. The code and output is included in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Formatting output](img/00106.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Further filtering to display users by UID
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We have been able to build our skills with awk piece by piece and what we have
    learned has been useful. We can take these tiny steps and add them to start creating
    something a little more usable. Perhaps, we want to print just the standard users;
    these are usually users higher than 500 or 1000 depending on your particular distribution.
  prefs: []
  type: TYPE_NORMAL
- en: 'On the Raspbian distribution that I am using for this book, standard users
    start with UID 1000\. The UID is the third field. This is really a simple matter
    of using the value of the third field as the range operator. We can see this in
    the following example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'We can show users with UID 101 with the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: These just give you an idea of some of the possibilities available with awk.
    The reality is that we can play all day with our arithmetic comparison operators.
  prefs: []
  type: TYPE_NORMAL
- en: We have also seen that with some of these examples, the `awk` statements become
    a little long. This is where we can implement the `awk` control files. Let's take
    a look at these straight away before we get lost in a mix of syntax.
  prefs: []
  type: TYPE_NORMAL
- en: Awk control files
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Just as with `sed`, we can simplify the command line by creating and including
    control files. This also makes the later editing of the command more easily achievable.
    The control files contain all the statements that we want `awk` to execute. The
    main thing that we must consider with `sed`, `awk`, and, shell scripts is modularization;
    creating reusable elements that can be used to isolate and reuse the codes. This
    saves us time and work and we get more time for the tasks that we enjoy.
  prefs: []
  type: TYPE_NORMAL
- en: 'To see an example of an `awk` control file, we should revisit the formatting
    of the `passwd` file. Creating the following file will encapsulate the `awk` statements:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: We can save this file as `passwd.awk`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Being able to encompass all the `awk` statements in the one file is very convenient
    and the execution becomes clean and tidy:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: This certainly encourages more complex `awk` statements and allows you to extend
    more functionality to your code.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: I am hoping that you have a better and clearer understanding of what you can
    use the awk tool for. This is a data-processing tool that runs through text files,
    line by line, and processes the code you add. The main block is run for each line
    that matches the row criteria, if it has been added. Whereas, the `BEGIN` and
    `END` block code is executed just once.
  prefs: []
  type: TYPE_NORMAL
- en: In the next two chapters, we will continue working with awk and some practical
    examples of how awk is used in real life.
  prefs: []
  type: TYPE_NORMAL
