- en: '*Chapter 25*: Building a Simple Image Gallery App'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '`RecyclerView` widget, we can selectively load just the data required for the
    current page and perhaps the data for the previous and next pages.'
  prefs: []
  type: TYPE_NORMAL
- en: The Android API, as you will have come to expect, has some solutions for achieving
    paging in quite a simple manner.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will learn how to do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Achieve paging and swiping with images as you might find in a photo gallery
    app.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: First, let's look at a swiping example.
  prefs: []
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You can find the code files present in this chapter on GitHub at [https://github.com/PacktPublishing/Android-Programming-for-Beginners-Third-Edition/tree/main/chapter%2025](https://github.com/PacktPublishing/Android-Programming-for-Beginners-Third-Edition/tree/main/chapter%2025).
  prefs: []
  type: TYPE_NORMAL
- en: Angry Birds classic swipe menu
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Here we can see the famous Angry Birds level selection menu showing swiping/paging
    in action:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 25.1 – Angry Birds level selection menu'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_25.1_B16773.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 25.1 – Angry Birds level selection menu
  prefs: []
  type: TYPE_NORMAL
- en: Let's build a paging app.
  prefs: []
  type: TYPE_NORMAL
- en: Building an image gallery/slider app
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Create a new project in Android Studio called `Image Pager`. Use the **Empty
    Activity** template and leave all the rest of the settings at their defaults.
  prefs: []
  type: TYPE_NORMAL
- en: 'The images are in the download bundle in the [*Chapter 25*](B16773_25_ePub_RK.xhtml#_idTextAnchor430)`/Image
    Pager/drawable` folder. This next screenshot shows them in Windows File Explorer:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 25.2 – Add images'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_25.2_B16773.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 25.2 – Add images
  prefs: []
  type: TYPE_NORMAL
- en: Add the images to the `drawable` folder in the Project Explorer in Android Studio
    or you could add more interesting images, perhaps some photos you have taken.
  prefs: []
  type: TYPE_NORMAL
- en: Implementing the layout
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For a simple image paging app, we use the `PagerAdapter` class. We can think
    of this as being like `RecyclerAdapter` but for images as it will handle the display
    of an array of images in a `ViewPager` widget. This is much like how `RecyclerAdapter`
    handles the display of the contents of an `ArrayList` in a `ListView`. All we
    need to do is override the appropriate methods.
  prefs: []
  type: TYPE_NORMAL
- en: 'To implement an image gallery with `PagerAdapter`, we first need a `ViewPager`
    widget in our main layout. So you can see precisely what is required, here is
    the actual XML code for `activity_main.xml`. Edit `activity_main.xml` to look
    exactly like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: The class named `androidx.ViewPager.widget.ViewPager` is the class that makes
    this functionality available in Android versions that were released before `ViewPager`.
  prefs: []
  type: TYPE_NORMAL
- en: Next, a bit like how we needed a layout to represent a list item, we need a
    layout to represent an item, in this case, an image, in `ViewPager`. Create a
    new layout file in the usual way and call it `pager_item.xml`. Add a single `ImageView`
    with an ID of `imageView`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Use the visual designer to achieve this or copy the following XML into `pager_item.xml`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Now we can make a start on our `PagerAdapter` class.
  prefs: []
  type: TYPE_NORMAL
- en: Coding the PagerAdapter class
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Next, we need to extend `PagerAdapter` to handle images. Create a new class
    called `ImagePagerAdapter` and make it extend `PagerAdapter`.
  prefs: []
  type: TYPE_NORMAL
- en: Add the following imports to the top of the `ImagePagerAdapter` class. We often
    rely on using the *Alt* + *Enter* shortcut to add imports. We are doing things
    slightly differently this time because there are some very similarly named classes
    that will not suit our objectives.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following imports to the `ImagePagerAdapter` class:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Here is the class declaration with the `extends...` code added as well as a
    couple of member variables. These variables are a `Context` object that we will
    use shortly and an `int` array called `images`. The reason for having an `int`
    array for images is that we will store `int` identifiers for each of the images.
    We'll see how this works in a few code blocks time. The last member variable is
    a `LayoutInflater` instance, which you can probably guess will be used to inflate
    each of the instances of `pager_item.xml`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Extend the `PagerAdapter` class and add the member variables we have just discussed:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Now we need a constructor that sets up `ImagerPagerAdapter` by receiving the
    `Context` from the `MainActivity` class as well as the `int` array for the images
    and initializing the member variables with them.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the constructor method to the `ImagePagerAdapter` class:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Now we must override the required methods of `PagerAdapter`. Immediately after
    the previous code, add the overridden `getCount` method, which simply returns
    the number of image IDs in the array. This method is used internally by the class:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Now we must override the `isViewFromObject` method, which returns a Boolean
    depending upon whether the current `View` instance is the same or associated with
    the current `Object` as passed in as a parameter. Again, this is a method that
    is used internally by the class. Immediately after the previous code, add this
    `Override` method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Now we must override the `instantiateItem` method; this is where we get most
    of the work that concerns us done. First, we declare a new `ImageView` object,
    and then we initialize our `LayoutInflater` member. Next, we use the `LayoutInflater`
    instance to declare and initialize a new `View` instance from our `pager_item.xml`
    layout file.
  prefs: []
  type: TYPE_NORMAL
- en: After this, we get a reference to the `ImageView` widget inside the `pager_item.xml`
    layout. We can now add the appropriate image as the content of the `ImageView`
    widget based on the `position` parameter of the `instantiateItem` method and the
    appropriate ID integer from the `images` array.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, we add the layout to the `PagerAdapter` instance with the `addView`
    method and return from the method.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the method we have just discussed:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: The last method we must override is the `destroyItem` method, which the class
    can call when it needs to remove an appropriate item based on the value of the
    `position` parameter.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the `destroyItem` method after the previous code and before the closing
    curly brace of the `ImagePagerAdapter` class:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: As we saw when coding the `ImagePagerAdapter` class, there is very little to
    it. It is just a case of properly implementing the overridden methods that the
    `ImagePagerAdapter` class uses to help make things work smoothly behind the scenes.
  prefs: []
  type: TYPE_NORMAL
- en: Now we can code the `MainActivity` class, which will use our `ImagePagerAdapter`
    implementation.
  prefs: []
  type: TYPE_NORMAL
- en: Coding the MainActivity class
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Finally, we can code our `MainActivity` class. As with the `ImagePagerAdapter`
    class, for clarity, add the following `import` statements manually to the `MainActivity.java`
    class before the class declaration as shown next:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: We need a few member variables. Unsurprisingly, we need a `ViewPager` instance,
    which will be used to hold a reference to the `ViewPager` in our layout. Also,
    we need an `ImagePagerAdapter` reference for the class we have just coded. We
    also need an `int` array to hold an array of image IDs.
  prefs: []
  type: TYPE_NORMAL
- en: 'Adapt the `MainActivity` class to be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: All the rest of the code goes in the `onCreate` method. We initialize our `int`
    array with each of the images that we added to the `drawable-xhdpi` folder.
  prefs: []
  type: TYPE_NORMAL
- en: We initialize the `ViewPager` in the usual way with the `findViewById` method.
    We also initialize our `ImagePagerAdapter` instance by passing in a reference
    of the `MainActivity` class and the `images` array, as required by the constructor
    that we coded previously. Finally, we bind the adapter to the pager with the `setAdapter`
    method.
  prefs: []
  type: TYPE_NORMAL
- en: 'Code the `onCreate` method to look just like this next code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Now we are ready to run the app.
  prefs: []
  type: TYPE_NORMAL
- en: Running the gallery app
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Here we can see the first image from our `int` array:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 25.3 – First image'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_25.3_B16773.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 25.3 – First image
  prefs: []
  type: TYPE_NORMAL
- en: 'Swipe a little right and left to see the smooth, pleasing way the images transition:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 25.4 – Swipe to view images'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_25.4_B16773.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 25.4 – Swipe to view images
  prefs: []
  type: TYPE_NORMAL
- en: That's it for this chapter. Let's review what we have done.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we saw how we can use pagers for simple image galleries with
    just a few lines of code and some very simple layouts. We achieved this so easily
    because of the `ImagePagerAdapter` class.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will look at another really cool UI element that is
    used in many of the latest Android apps, probably because it looks great and is
    a real pleasure, as well as extremely practical, to use. The `NavigationView`
    layout will enable us to design and implement different layouts with entirely
    different behavior (code). Let's take a look at the `NavigationView` layout.
  prefs: []
  type: TYPE_NORMAL
