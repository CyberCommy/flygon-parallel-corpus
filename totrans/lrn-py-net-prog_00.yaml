- en: Preface
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Welcome to the world of network programming with Python. Python is a full-featured
    object-oriented programming language with a standard library that includes everything
    needed to rapidly build powerful network applications. In addition, it has a multitude
    of third-party libraries and packages that extend Python to every sphere of network
    programming. Combined with the fun of using Python, with this book, we hope to
    get you started on your journey so that you master these tools and produce some
    great networking code.
  prefs: []
  type: TYPE_NORMAL
- en: In this book, we are squarely targeting Python 3\. Although Python 3 is still
    establishing itself as the successor to Python 2, version 3 is the future of the
    language, and we want to demonstrate that it is ready for network programming
    prime time. It offers many improvements over the previous version, many of which
    improve the network programming experience, with enhanced standard library modules
    and new additions.
  prefs: []
  type: TYPE_NORMAL
- en: We hope you enjoy this introduction to network programming with Python.
  prefs: []
  type: TYPE_NORMAL
- en: What this book covers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '[Chapter 1](ch01.html "Chapter 1. Network Programming and Python"), *Network
    Programming and Python*, introduces core networking concepts for readers that
    are new to networking, and also covers how network programming is approached in
    Python.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 2](ch02.html "Chapter 2. HTTP and Working with the Web"), *HTTP and
    Working with the Web*, introduces you to the HTTP protocol and covers how we can
    retrieve and manipulate web content using Python as an HTTP client. We also take
    a look at the standard library `urllib` and third-party `Requests` modules.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 3](ch03.html "Chapter 3. APIs in Action"), *APIs in Action*, introduces
    you to working with web APIs using HTTP. We also cover the XML and JSON data formats,
    and walk you through developing applications using the Amazon Web Services Simple
    Storage Service (S3) and Twitter APIs.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 4](ch04.html "Chapter 4. Engaging with E-mails"), *Engaging with E-mails*,
    covers the principle protocols used in sending and receiving e-mails, such as
    SMTP, POP3, and IMAP, and how to work with them in Python 3.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 5](ch05.html "Chapter 5. Interacting with Remote Systems"), *Interacting
    with Remote Systems*, guides you through the ways of using Python to connect to
    servers and performing common administrative tasks, including the execution of
    shell commands through SSH, file transfers with FTP and SMB, authentication with
    LDAP, and to monitor systems with SNMP.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 6](ch06.html "Chapter 6. IP and DNS"), *IP and DNS*, discusses the
    details of the Internet Protocol (IP), ways of working with IP in Python, and
    how to use DNS to resolve hostnames.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 7](ch07.html "Chapter 7. Programming with Sockets"), *Programming
    with Sockets*, covers using TCP and UDP sockets from Python for writing low-level
    network applications. We also cover HTTPS and TLS for secure data transport.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 8](ch08.html "Chapter 8. Client and Server Applications"), *Client
    and* *Server Applications*, looks at writing client and server programs for socket-based
    communication. By writing an echo application and a chat application we look at
    developing basic protocols, framing network data, and compare the multithreading
    and event-based server architectures.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 9](ch09.html "Chapter 9. Applications for the Web"), *Applications
    for the Web*, introduces you to writing web applications in Python. We cover the
    main approaches, methods of hosting Python web applications, and develop an example
    application in the Flask microframework.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Appendix](apa.html "Appendix A. Working with Wireshark"), *Working with Wireshark*,
    covers packet sniffers, the installation of Wireshark, and how to capture and
    filter packets using the Wireshark application.'
  prefs: []
  type: TYPE_NORMAL
- en: What you need for this book
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This book is aimed at Python 3\. While many of the examples will work in Python
    2, you'll get the best experience working through this book with a recent version
    of Python 3\. At the time of writing, the latest version is 3.4.3, and the examples
    were tested against this.
  prefs: []
  type: TYPE_NORMAL
- en: 'Though Python 3.4 is the preferred version, all the examples should run on
    Python 3.1 or later, except for the following:'
  prefs: []
  type: TYPE_NORMAL
- en: The `asyncio` example in [Chapter 8](ch08.html "Chapter 8. Client and Server
    Applications"), *Client and Server Applications*, as the `asyncio` module was
    only included in Version 3.4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Flask example in [Chapter 9](ch09.html "Chapter 9. Applications for the
    Web"), *Applications for the Web*, which requires Python 3.3 or later
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We're also targeting the Linux operating system, and the assumption is made
    that you are working on a Linux OS. The examples have been tested on Windows though,
    and we'll make a note of where there may be differences in the requirements or
    outcomes.
  prefs: []
  type: TYPE_NORMAL
- en: Virtual environments
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: It is highly recommended that you use Python virtual environments, or "**venvs**",
    when you work with this book, and in fact, when doing any work with Python. A
    venv is an isolated copy of the Python executable and associated files, which
    provides a separate environment for installing Python modules, independent from
    the system Python installation. You can have as many venvs as you need, which
    means that you can have multiple module configurations set up, and you can switch
    between them easily.
  prefs: []
  type: TYPE_NORMAL
- en: From version 3.3, Python includes a `venv` module, which provides this functionality.
    The documentation and examples are available at [https://docs.python.org/3/using/scripts.html](https://docs.python.org/3/using/scripts.html).
    There is also a standalone tool available for earlier versions, which can be found
    at [https://virtualenv.pypa.io/en/latest/](https://virtualenv.pypa.io/en/latest/).
  prefs: []
  type: TYPE_NORMAL
- en: Installing Python 3
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Most major Linux distributions come preinstalled with Python 2\. When installing
    Python 3 on such a system, it is important to note that we're not replacing the
    installation of Python 2\. Many distributions use Python 2 for core system operations,
    and these will be tuned for the major version of the system Python. Replacing
    the system Python can have severe consequences for the running of the OS. Instead,
    when we install Python 3, it is installed side by side with Python 2\. After installing
    Python 3, it is invoked using the `python3.x` executable, where `x` is replaced
    with the corresponding installed minor version. Most packages also provide a `symlink`
    to this executable called `python3`, which can be run instead.
  prefs: []
  type: TYPE_NORMAL
- en: Packages to install Python 3.4 are available for most recent distributions,
    we'll go through the major ones here. If packages are not available, there are
    still some options that you can use to install a working Python 3.4 environment.
  prefs: []
  type: TYPE_NORMAL
- en: Ubuntu and Debian
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Ubuntu 15.04 and 14.04 come with Python 3.4 already installed; so if you're
    running these versions, you're already good to go. Note that there is a bug in
    14.04, which means pip must be installed manually in any venvs created using the
    bundled `venv` module. You can find information on working around this at [http://askubuntu.com/questions/488529/pyvenv-3-4-error-returned-non-zero-exit-status-1](http://askubuntu.com/questions/488529/pyvenv-3-4-error-returned-non-zero-exit-status-1).
  prefs: []
  type: TYPE_NORMAL
- en: For earlier versions of Ubuntu, Felix Krull maintains a repository of up-to-date
    Python installations for Ubuntu. The complete details can be found at [https://launchpad.net/~fkrull/+archive/ubuntu/deadsnakes](https://launchpad.net/~fkrull/+archive/ubuntu/deadsnakes).
  prefs: []
  type: TYPE_NORMAL
- en: On Debian, Jessie has a Python 3.4 package (`python3.4`), which can be installed
    directly with `apt-get`. Wheezy has a package for 3.2 (`python3.2`), and Squeeze
    has `python3.1`, which can be installed similarly. In order to get working Python
    3.4 installations on these latter two, it's easiest to use Felix Krull's repositories
    for Ubuntu.
  prefs: []
  type: TYPE_NORMAL
- en: RHEL, CentOS, Scientific Linux
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: These distributions don't provide up-to-date Python 3 packages, so we need to
    use a third-party repository. For Red Hat Enterprise Linux, CentOS, and Scientific
    Linux, Python 3 can be obtained from the community supported Software Collections
    (SCL) repository. Instructions on using this repository can be found at [https://www.softwarecollections.org/en/scls/rhscl/python33/](https://www.softwarecollections.org/en/scls/rhscl/python33/).
    At the time of writing, Python 3.3 is the latest available version.
  prefs: []
  type: TYPE_NORMAL
- en: Python 3.4 is available from another repository, the IUS Community repository,
    sponsored by Rackspace. Instructions on the installation can be found at [https://iuscommunity.org/pages/IUSClientUsageGuide.html](https://iuscommunity.org/pages/IUSClientUsageGuide.html).
  prefs: []
  type: TYPE_NORMAL
- en: Fedora
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Fedora 21 and 22 provide Python 3.4 with the `python3` package:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: For earlier versions of Fedora, use the repositories listed in the preceding
    Red Hat section.
  prefs: []
  type: TYPE_NORMAL
- en: Alternative installation methods
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If you're working on a system, which isn't one of the systems mentioned earlier,
    and you can't find packages for your system to install an up-to-date Python 3,
    there are still other ways of getting it installed. We'll discuss two methods,
    `Pythonz` and `JuJu`.
  prefs: []
  type: TYPE_NORMAL
- en: Pythonz
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Pythonz is a program that manages the compilation of Python interpreters from
    source code. It downloads and compiles Python from source and installs the compiled
    Python interpreters in your home directory. These binaries can then be used to
    create venvs. The only limitation with this installation method is that you need
    a build environment (that is, a C compiler and supporting packages) installed
    on your system, and dependencies to compile Python. If this doesn't come with
    your distribution, you will need root access to install this initially. The complete
    instructions can be found at [https://github.com/saghul/pythonz](https://github.com/saghul/pythonz).
  prefs: []
  type: TYPE_NORMAL
- en: JuJu
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: JuJu can be used as a last resort, it allows a working Python 3.4 installation
    on any system without needing root access. It works by creating a tiny Arch Linux
    installation in a folder, in your home folder and provides tools that allow us
    to switch to this installation and run commands in it. Using this, we can install
    Arch's Python 3.4 package, and you can run Python programs using this. The Arch
    environment even shares your home folder with your system, so sharing files between
    environments is easy. The JuJu home page is available at [https://github.com/fsquillace/juju](https://github.com/fsquillace/juju).
  prefs: []
  type: TYPE_NORMAL
- en: 'JuJu should work on any distribution. To install it we need to do this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'This downloads and extracts the JuJu image to `~/.juju`. You''ll need to replace
    the `x86_64` with `x86` if you''re running on a 32-bit system. Next, set up `PATH`
    to pick up the JuJu commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'It''s a good idea to add this to your .`bashrc`, so you don''t need to run
    it every time you log in. Next, we install Python in the `JuJu` environment, we
    only need to do this once:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'These commands first activate the `JuJu` environment as root, then use the
    `pacman` Arch Linux package manager to update the system and install Python 3.4\.
    The final `exit` command exits the `JuJu` environment. Finally, we can access
    the `JuJu` environment as a regular user:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'We can then start using the installed Python 3:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Windows
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Compared to some of the older Linux distributions, installing Python 3.4 on
    Windows is relatively easy; just download the Python 3.4 installer from [http://www.python.org](http://www.python.org)
    and run it. The only hitch is that it requires administrator privileges to do
    so, so if you're on a locked down machine, things are trickier. The best solution
    at the moment is WinPython, which is available at [http://winpython.github.io](http://winpython.github.io).
  prefs: []
  type: TYPE_NORMAL
- en: Other requirements
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We assume that you have a working Internet connection. Several chapters use
    Internet resources extensively, and there is no real way to emulate these offline.
    Having a second computer is also useful to explore some networking concepts, and
    for trying out network applications across a real network.
  prefs: []
  type: TYPE_NORMAL
- en: We also use the Wireshark packet sniffer in several chapters. This will require
    a machine where you have root access (or administrator access in Windows). Wireshark
    installers and installation instructions are available at [https://www.wireshark.org](https://www.wireshark.org).
    An introduction to using Wireshark can be found in the [Appendix](apa.html "Appendix A. Working
    with Wireshark"), *Working with Wireshark*.
  prefs: []
  type: TYPE_NORMAL
- en: Who this book is for
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If you're a Python developer, or system administrator with Python experience,
    and you're looking forward to take your first step in network programming, then
    this book is for you. Whether you're working with networks for the first time
    or looking to enhance your existing networking and Python skills, you will find
    this book very useful.
  prefs: []
  type: TYPE_NORMAL
- en: Conventions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this book, you will find a number of text styles that distinguish between
    different kinds of information. Here are some examples of these styles and an
    explanation of their meaning.
  prefs: []
  type: TYPE_NORMAL
- en: 'Code words in text, database table names, folder names, filenames, file extensions,
    pathnames, dummy URLs, user input, and Twitter handles are shown as follows: "IP
    addresses have been assigned to your computer by running the `ip addr` or `ipconfig
    /all` command on Windows."'
  prefs: []
  type: TYPE_NORMAL
- en: 'A block of code is set as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'When we wish to draw your attention to a particular part of a code block, the
    relevant lines or items are highlighted:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Any command-line input or output is written as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: '**New terms** and **important words** are shown in bold. Words that you see
    on the screen, for example, in menus or dialog boxes, appear in the text like
    this: "We can see there''s a list of interfaces below the **Start** button."'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Warnings or important notes appear in a box like this.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Tips and tricks appear like this.
  prefs: []
  type: TYPE_NORMAL
- en: We follow PEP 8 as closely as we can, but we also follow the principle that
    practicality beats purity, and do deviate in a few areas. Imports are often performed
    on a single line to save space, and we may not strictly adhere to wrapping conventions
    do to the nature of printed media; we aim for "readability counts".
  prefs: []
  type: TYPE_NORMAL
- en: We have also chosen to focus on the procedural programming style rather than
    use object-oriented examples. The reason for this is that it is generally easier
    for someone familiar with object oriented programming to rework procedural examples
    into an object oriented format than it is for someone unfamiliar with OOP to do
    the reverse.
  prefs: []
  type: TYPE_NORMAL
