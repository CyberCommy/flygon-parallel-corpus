- en: Ionic Decorators and Services
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In the last chapter, we went through a few Ionic components, using which one
    could easily build classy Mobile Hybrid apps. In this chapter, we will be working
    with Ionic 2 decorators and services. The entire Ionic 2 ecosystem is divided
    into two parts: the Components and the Service APIs. Components include buttons,
    cards, and lists, as we saw in the last chapter, and Service APIs include platform,
    `config`, `NavController`, `Storage`, and so on.'
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we are going to take a look at the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Ionic module
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Component decorator
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Config service
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Platform service
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Storage API
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Decorators
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Before we start working with Ionic built-in decorators, we will quickly get
    an understanding of what decorators are and how they can make our life easy.
  prefs: []
  type: TYPE_NORMAL
- en: In simple words, a decorator is a function that takes a class and extend its
    behavior without actually modifying it.
  prefs: []
  type: TYPE_NORMAL
- en: For instance, if we had a person class and we want to add more information about
    the person to the class, such as age and gender, we can do so quite easily.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is an example of how we can write our own decorator in TypeScript:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'And the `MoreInfo` decorator would look something like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'In the same way, Ionic also provides two decorators:'
  prefs: []
  type: TYPE_NORMAL
- en: Ionic Module or `NgModule` decorator
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Component decorator
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ionic module
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The Ionic module or `NgModule` decorator bootstraps the Ionic app. If we open
    up any of the existing Ionic projects and look up `src/app/app.module.ts` file,
    we will see the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: This is the place where we bootstrap the Ionic app. This app can also be configured
    by using `forRoot` on the `IonicModule`. `forRoot` takes care of providing and
    configuring services at the same time.
  prefs: []
  type: TYPE_NORMAL
- en: 'An example implementation of `forRoot` on `IonicModule` would look like the
    following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Platform-specific configuration can also be passed, as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'You can read more about the Ionic Module at [https://ionicframework.com/docs/v2/api/IonicModule/](https://ionicframework.com/docs/v2/api/IonicModule/),
    about config at: [https://ionicframework.com/docs/v2/api/config/Config/](https://ionicframework.com/docs/v2/api/config/Config/)
    , and about `NgModule` at [https://angular.io/docs/ts/latest/guide/ngmodule.html](https://angular.io/docs/ts/latest/guide/ngmodule.html).'
  prefs: []
  type: TYPE_NORMAL
- en: Component decorator
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `Component` decorator marks a class as an Angular component and collects
    component configuration metadata. A simple component decorator would look like
    this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Components have all the Ionic and Angular core components and directives included,
    so we need not explicitly declare the directive property. Only the dependent properties
    on the child/parent component need to be explicitly specified.
  prefs: []
  type: TYPE_NORMAL
- en: To know more about the `Component` decorator, refer to [https://angular.io/docs/ts/latest/api/core/index/Component-decorator.html](https://angular.io/docs/ts/latest/api/core/index/Component-decorator.html).
  prefs: []
  type: TYPE_NORMAL
- en: Navigation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous chapter, we saw a basic implementation of navigation between
    two pages. In this section, we will dig deeper into the same.
  prefs: []
  type: TYPE_NORMAL
- en: 'To start off, we will scaffold a blank Ionic app. Create a new folder named
    `chapter4` and, inside that folder, open a new command prompt/terminal and run
    the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Once the app has been scaffolded, `cd` into the `example9` folder. If we navigate
    to `example9/src/app/app.component.ts`, we should see the App component defined
    by a class named `MyApp`. And if we navigate to the corresponding template `example9/src/app/app.html`,
    we should see the `ion-nav` component.
  prefs: []
  type: TYPE_NORMAL
- en: The `ion-nav` component takes in an input property named root. The root property
    indicates which component will act as the root component/root page. In this example,
    we have indicated Home Page as the `root` from our `MyApp` class (`example9/src/app/app.component.ts`).
  prefs: []
  type: TYPE_NORMAL
- en: 'Now we are going to generate one new page named about, using the Ionic CLI''s
    generate command. Run the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: This command will create a new component inside the `src/pages` folder.
  prefs: []
  type: TYPE_NORMAL
- en: If we look at the `example9/src/pages/home/` and `example9/src/pages/about/`
    contents, we should see two standalone components.
  prefs: []
  type: TYPE_NORMAL
- en: 'Before we start stitching these two pages together, we will first need to register
    the about page with the `@NgModule`. Open `example9/src/app/app.module.ts` and
    update it as shown follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, we will add a button on the Home Page and when we click on it, we will
    show the about page. Update `example9/src/pages/home/home.html` as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, we will add the logic to navigate between pages. Update `example9/src/pages/home/home.ts`
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Using `this.navCtrl.push(AboutPage);`, we move from the Home Page to the about
    page.
  prefs: []
  type: TYPE_NORMAL
- en: 'If we save the files and execute `ionic serve`, we should see the home page
    with the button. And when we click on the button, we should see the about page:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00049.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Now, if we want to navigate back, we can use the auto-generated back button
    or we can create a button on the About page to go back. To do that, update `example9/src/pages/about/about.html`
    as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'And update `example9/src/pages/about/about.ts` as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Do note `this.navCtrl.pop();` --that is how we pop a page from the view.
  prefs: []
  type: TYPE_NORMAL
- en: If we save all the files and go back to the browser, then navigate from Home
    to About, we should see a Back button. Clicking on this will lead us back to the
    Home page.
  prefs: []
  type: TYPE_NORMAL
- en: This is a simple example of how we can stitch two pages together.
  prefs: []
  type: TYPE_NORMAL
- en: 'Along with this, we have page events that indicate the various stages of a
    page. To understand this better, we will update `example9/src/pages/about/about.ts`
    as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Save all the files, navigate to the browser, and navigate from Home to About
    and back, and we should see the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00050.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Based on this, we can hook onto various events and act accordingly if needed.
  prefs: []
  type: TYPE_NORMAL
- en: Passing data between pages
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: So far, we have seen how we can move from one page to another. Now, using `NavParams`,
    we will be passing data from one page to another.
  prefs: []
  type: TYPE_NORMAL
- en: In the same `example9` project, we will be adding on this functionality. On
    the home page, we will present a textbox for the user to enter data. Once the
    user enters the data and clicks on Go to About, we will take the value of the
    `textbox` and pass it on to the About page and print the text that we have captured
    on the Home page in the About page.
  prefs: []
  type: TYPE_NORMAL
- en: 'To get started, we will update `example9/src/pages/home/home.html` as shown
    here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'Do note that we have updated the `openAbout` method to take the text value.
    Next, we will update `example9/src/pages/home/home.ts`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Do notice the second argument that we are passing to the push method of the
    `navCtrl`. This is how we pass the data from the Home page. Now we will update
    `example9/src/pages/about/about.ts` to catch the data:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: To catch the data, we need to import `NavParams` from `ionic-angular`. And using
    `navParams.get(data);`, we fetch the data that is passed from the Home Page inside
    the constructor.
  prefs: []
  type: TYPE_NORMAL
- en: 'And finally, to display the data in the About page, update `example9/src/pages/about/about.html`
    as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'Save all the files and head back to the browser and we should be able to see
    the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00051.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Now we know how to stitch two pages together and pass data between them.
  prefs: []
  type: TYPE_NORMAL
- en: We can implement navigation and lazy loading using the `@IonicPage` decorator.
    You can find more information about the same in [Chapter 11](part0170.html#523VK0-9757c8e51afd47e0a7a9ced32db749b8),
    *Ionic 3*.
  prefs: []
  type: TYPE_NORMAL
- en: Config service
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This service lets you configure and set up app-specific preferences.
  prefs: []
  type: TYPE_NORMAL
- en: To customize the look and feel of the app across platforms or within the same
    platform for various components, we use the config service.
  prefs: []
  type: TYPE_NORMAL
- en: 'To understand this service better, we will scaffold a new app and work with
    it. Run the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: And then run `ionic serve --lab`.
  prefs: []
  type: TYPE_NORMAL
- en: This will run the tabs app in the lab view, where we can see the Android iOS
    and Windows apps side by side.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can view the Ionic app in any of the three platform views by using the following
    URLs as well:'
  prefs: []
  type: TYPE_NORMAL
- en: 'iOS: [http://localhost:8100/?ionicplatform=ios](http://localhost:8100/?ionicplatform=ios)
    Android: [http://localhost:8100/?ionicplatform=android](http://localhost:8100/?ionicplatform=android)
    Windows: [http://localhost:8100/?ionicplatform=windows](http://localhost:8100/?ionicplatform=windows)'
  prefs: []
  type: TYPE_NORMAL
- en: 'And we should see something like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00052.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Config is set up on the `@NgModule`. If we open `example10/src/app/app.module.ts`,
    we should find the `NgModule` decorator, inside which we can find `IonicModule.forRoot(MyApp)`.
  prefs: []
  type: TYPE_NORMAL
- en: 'A simple config would look like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'This will make the look and feel default to the material design irrespective
    of the platform. We should be able to see the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00053.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'You can also set other config values like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: The preceding values are quite self-explanatory.
  prefs: []
  type: TYPE_NORMAL
- en: The properties in the config can be overwritten at the app level, platform level,
    and component level.
  prefs: []
  type: TYPE_NORMAL
- en: 'For instance, you can overwrite the `tabberPlacement` property at the app level
    as well as the platform level, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'And we will see the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00054.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'And we can also overwrite at the component level as well. Update `example10/src/pages/tabs/tabs.html`
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'And we should see the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00055.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: For quick testing, we can also set the config property in the URL, without any
    overrides defined. For instance, to test how tabs would look when placed on top,
    we can navigate to this URL: [http://localhost:8100/?ionicTabsPlacement=top](http://localhost:8100/?ionicTabsPlacement=top)
  prefs: []
  type: TYPE_NORMAL
- en: 'We can also set custom properties to the config and extract them later on.
    For instance, we can set the following properties:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'And then we can get the value using the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'We can import `config` from `ionic-angular`, for example `import {Config} from
    ''ionic-angular'';` and then initialize `config` in the constructor: `constructor(private
    config : Config) { //**// }`'
  prefs: []
  type: TYPE_NORMAL
- en: Platform service
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The platform service returns the available information about the current platform.
    The new and improved platform service of Ionic has more information that helps
    us to customize the app based on the device type.
  prefs: []
  type: TYPE_NORMAL
- en: 'To understand the platform service better, we will scaffold a blank app. Run
    the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: And then run `ionic serve` to launch the blank app.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now we are going to add a reference to the Platform class in `example11/src/pages/home/home.ts`.
    Update `home.ts` as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: And now we will start working with various features of the `Platform` class.
  prefs: []
  type: TYPE_NORMAL
- en: The first one we are going to look at is the `userAgent` string. To access the
    `userAgent`, we can execute `userAgent()` on the platform.
  prefs: []
  type: TYPE_NORMAL
- en: 'Update the `example11/src/pages/home/home.html` content section as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'We should see the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00056.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Next, we will find out the platform on which the app is running; for that,
    we update the `ion-content` contents in `home.html` as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'And when the browser refreshes, we should see the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00057.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: As we can see from the screenshot, when run in the browser, the preceding platform
    names are the values.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, let us add the browser platform and see if anything changes. Run the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'And then run:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'You should be able to see the Ionic app launch in the browser with Cordova
    support and now the output should look like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00058.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: If we notice carefully, we can see that in the preceding screenshot, that cordova
    is now set to true.
  prefs: []
  type: TYPE_NORMAL
- en: Using the preceding cross-section of platform names, we can easily customize
    the app and tailor the user experience.
  prefs: []
  type: TYPE_NORMAL
- en: To find out more about the platform service, refer to [http://ionicframework.com/docs/api/platform/Platform/](http://ionicframework.com/docs/api/platform/Platform/)
  prefs: []
  type: TYPE_NORMAL
- en: Storage service
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we are going to take a look at the Storage service. The Storage
    class from Ionic helps us interact with various storage options that are available
    when the app runs in the native container.
  prefs: []
  type: TYPE_NORMAL
- en: 'Quoting the Ionic documentation:'
  prefs: []
  type: TYPE_NORMAL
- en: Storage is an easy way to store key/value pairs and JSON objects. Storage uses
    a variety of storage engines underneath, picking the best one available depending
    on the platform.
  prefs: []
  type: TYPE_NORMAL
- en: When running in a native app context, Storage will prioritize using SQLite,
    as it's one of the most stable and widely used file-based databases, and avoids
    some of the pitfalls of things like localstorage and IndexedDB, such as the OS
    deciding to clear out such data in low disk-space situations.
  prefs: []
  type: TYPE_NORMAL
- en: When running in the web or as a Progressive Web App, Storage will attempt to
    use IndexedDB, WebSQL, and localstorage, in that order.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, to start working with the Storage class, we will create a new app. Run
    the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: And then run `ionic serve` to launch it in the browser.
  prefs: []
  type: TYPE_NORMAL
- en: To understand how to use Storage, we will be building a simple user management
    app. In this app, we can add a user, persist that data in storage, and then remove
    it later on. The main purpose of this app is to explore the storage class.
  prefs: []
  type: TYPE_NORMAL
- en: 'The final app will look something like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00059.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Before we start working with the `Storage` class, we need to add it to our
    `Ionic` project. Run the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, we need to add it as a provider. Update `example12/src/app/app.module.ts`
    as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, we will build the interface. Open `example12/src/pages/home/home.html`.
    We will update the header first to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, in the content section, we will create two divisions, one for the form
    where the user will enter the name and age, and one more division for displaying
    the list of users:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: Next, we will start working with the logic. Update `example12/src/pages/home/home.ts`
    as shown here
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding code, first we have imported the `Storage` from `@ionic/storage`.
    Next, we have instantiated the same in the constructor.
  prefs: []
  type: TYPE_NORMAL
- en: We have created a class variable named `users` that will be used to store all
    the users we are creating in memory. Inside the constructor, we are invoking `getUsers()`
    to fetch the users from the storage on load. We have created two functions, `addUser()`
    and `removeUser()`, to add a user and remove a user.
  prefs: []
  type: TYPE_NORMAL
- en: Since the storage is a key value store, we are creating the keys of the user
    we are storing using the ID of the user. For instance, if the ID of the user is
    1, we create the key as `user-1`. This way, we know that all keys in the storage
    belonging to our app start with *user*, in case there are other entities using
    Storage in the same app.
  prefs: []
  type: TYPE_NORMAL
- en: We are using `genRandomId()` to generate a random number between 1 and 9,999.
  prefs: []
  type: TYPE_NORMAL
- en: 'If we save all the files, go back to the browser, and open the console, we
    should see something like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00060.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Do notice the message in the console. This message shows us the data will be
    stored in asynStorage. So, in Chrome, it would be IndexedDB.
  prefs: []
  type: TYPE_NORMAL
- en: 'So, in Chrome, if we click on the Applications tab in the development tools
    and navigate to IndexedDB, we should see something like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00061.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Now, let us add a user using the form. And the updated screen and storage should
    look like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00062.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Now, on clicking on delete, we should see the storage cleared and the UI updated
    without any users.
  prefs: []
  type: TYPE_NORMAL
- en: So, using storage, we can easily start working with data persistence in our
    Ionic app, without worrying about the underlying implementation.
  prefs: []
  type: TYPE_NORMAL
- en: 'If needed, we can override `IonicStorageModule.forRoot()` as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: 'You can find more configurations and properties here: [https://ionicframework.com/docs/storage/](https://ionicframework.com/docs/storage/)'
  prefs: []
  type: TYPE_NORMAL
- en: With this, we complete the overview of Storage in Ionic.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we have gone through the two main decorators of Ionic. Then
    we have gone through the config and platform services and seen how we can customize
    the app based on the platform and configuration. After that, we have gone through
    the Storage API in Ionic.  Refer to [Chapter 11](part0170.html#523VK0-9757c8e51afd47e0a7a9ced32db749b8),
    *Ionic 3*, to take a look at the all new `IonicPage` directive and `IonicPage`
    module.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will be working with theming Ionic apps.
  prefs: []
  type: TYPE_NORMAL
