- en: Getting to Know the Burp Suite of Tools
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following recipes:'
  prefs: []
  type: TYPE_NORMAL
- en: Setting the Target Site Map
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Understanding Message Editor
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Repeating with Repeater
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Decoding with Decoder
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Intruding with Intruder
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter provides overviews of the most commonly used tools within Burp
    Suite. The chapter begins by establishing the Target scope within the Target Site
    Map. This is followed by an introduction to the Message Editor. Then, there will
    be some hands-on recipes using **OWASP Mutillidae II** to get acquainted with
    Proxy, Repeater, Decoder, and Intruder.
  prefs: []
  type: TYPE_NORMAL
- en: Software tool requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To complete the recipes in this chapter, you will need the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Burp Proxy Community or Professional ([https://portswigger.net/burp/](https://portswigger.net/burp/))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Firefox browser configured to allow Burp to proxy traffic ([https://www.mozilla.org/en-US/firefox/new/](https://www.mozilla.org/en-US/firefox/new/))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting the Target Site Map
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that we have traffic flowing between your browser, Burp, and the OWASP BWA
    virtual machine, we can begin setting the scope of our test. For this recipe,
    we will use the OWASP Mutillidae II link (`http://<Your_VM_Assigned_IP_Address>/mutillidae/`)
    available in the OWASP BWA VM as our target application.
  prefs: []
  type: TYPE_NORMAL
- en: 'Looking more closely at the Target tab, you will notice there are two subtabs
    available: Site map and Scope. From the initial proxy setup between your browser,
    Burp, and the web server, you should now have some URLs, folders, and files shown
    in the Target | Site map tab. You may find the amount of information overwhelming,
    but setting the scope for our project will help to focus our attention better.'
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Using the Target | Site map and Target | Scope tab, we will assign the URL for
    mutillidae (`http://<Your_VM_Assigned_IP_Address>/mutillidae/`) as the** scope.**
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Execute the following steps to set the Target Site Map:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Search for the folder `mutillidae` and right-click onAdd to scope. Notice the
    brief highlighting of the Target | Scope subtab, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00026.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Upon adding the folder `mutillidae` to your scope, you may be presented with
    a Proxy history logging dialog box, as follows. You may choose to avoid collecting
    messages out of your cope by clicking Yes. Or you may choose to continue to have
    the **Proxy HTTP History** table collect any messages passing through Burp, even
    if those messages fall outside the scope you''ve identified. For our purposes,
    we will select **Yes**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00027.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Flipping over the Target | Scope tab, you should now see the full URL for the
    OWASP Mutillidae II, shown in the Include in scope table, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00028.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Message Editor displays detailed information any HTTP message flowing through
    the Proxy listener. After setting up Proxy to capture HTTP traffic, as seen in
    your Target | Site map and Burp Proxy | HTTP history tab, you are able to select
    any single message to reveal the Message Editor. Each editor contains the request
    and response sides of the message, so long as the message is properly proxied
    through Burp.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding the Message Editor
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: On almost every tool and tab within Burp Suite that display an HTTP message,
    you will see an editor identifying the request and response. This is commonly
    referred to as the Message Editor. The Message Editor allows viewing and editing
    HTTP requests and responses with specialties.
  prefs: []
  type: TYPE_NORMAL
- en: 'Within the Message Editor are multiple subtabs. The subtabs for a request message, at
    a minimum, include the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Raw**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Headers**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Hex**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The subtabs for a response message include the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Raw**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Headers**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Hex**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**HTML** (sometimes)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Render** (sometimes)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Raw tab gives you the message in its raw HTTP form. The Headers tab displays
    HTTP header parameters in tabular format. The parameters are editable, and columns
    can be added, removed, or modified in the table within tools such as Proxy and
    Repeater.
  prefs: []
  type: TYPE_NORMAL
- en: For requests containing parameters or cookies, the Params tab is present. Parameters
    are editable, and columns can be added, removed, or modified in the table within
    tools such as Proxy and Repeater.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, there's the Hex tab, which presents the message in hexadecimal format;
    it is, in essence, a hex editor. You are permitted to edit individual bytes within
    tools such as Proxy and Repeater, but those values must be given in two-digit
    hexadecimal form, from 00 through FF.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let's explore the multiple tabs available in the Message Editor for each request
    and response captured in Burp.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Ensure you have traffic flowing between your browser, Burp, and the OWASP BWA
    virtual machine.
  prefs: []
  type: TYPE_NORMAL
- en: 'Looking at the Target | Site map tab, notice the Message Editor section:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00029.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'When viewing a request, note that the subtabs available include Raw, Headers,
    and Hex, at a minimum. However, in the case of a request containing parameters
    or cookies, the Params subtab is also available:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00030.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'The other side of the message is the **Response** tab, containing the **Raw**,
    **Headers**, **Hex** subtabs, and sometimes **HTML** and **Render**. These are
    the various formats provided for the HTTP response to the request. If the content
    is HTML, then the tab will appear. Likewise, the **Render** tab enables HTML display
    as it would be presented in a browser but without any JavaScript executed:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00031.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Repeating with Repeater
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Repeater allows for slight changes or tweaks to the request, and it is displayed
    in the left-hand window. A **Go** button allows the request to be reissued, and
    the response is displayed in the right-hand window.
  prefs: []
  type: TYPE_NORMAL
- en: Details related to your HTTP request include standard Message Editor details
    such as **Raw**, **Params** (for requests with parameters or cookies), **Headers**,
    and **Hex**.
  prefs: []
  type: TYPE_NORMAL
- en: Details related to the HTTP Response include standard Message Editor details
    including **Raw**, **Headers**, **Hex**, and, sometimes, **HTML** and **Render**.
  prefs: []
  type: TYPE_NORMAL
- en: At the bottom of each panel is a search-text box, allowing the tester to quickly
    find a value present in a message.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Repeater allows you to manually modify and then re-issue an individual HTTP
    request, analyzing the response that you receive.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'From the **Target** | **Site map** or from **Proxy** | **HTTP history** tabs
    (shown in the following screenshot), right-click a message and select **Send to
    Repeater**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00032.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Switch over to the **Repeater** tab. Note the **HTTP Request** is ready for
    the tester to tweak parameters, and then send the request to the application via
    the **Go** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Note the search boxes at the bottom of each panel:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00033.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: We will use Repeater quite a bit throughout this book. This chapter is just
    an introduction to the Repeater and to understand its purpose.
  prefs: []
  type: TYPE_NORMAL
- en: Decoding with Decoder
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Burp Decoder** is a tool that allows the tester to convert raw data into
    encoded data or to take encoded data and convert it back to plain text. Decoder
    supports several formats including URL encoding, HTML encoding, Base64 encoding,
    binary code, hashed data, and others. Decoder also includes a built-in hex editor.'
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As a web penetration test progresses, a tester might happen upon an encoded
    value. Burp eases the decoding process by allowing the tester to send the encoded
    value to Decoder and try the various decoding functions available.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let's try to decode the value of the session token PHPSESSID found in the OWASP
    Mutillidae II application. When a user initially browses to the URL (`http://<Your_VM_Assigned_IP_Address>/mutillidae/`),
    that user will be assigned a PHPSESSID cookie. The PHPSESSID value appears to
    be encrypted and then wrapped in base 64 encoding. Using Decoder, we can unwrap
    the value.
  prefs: []
  type: TYPE_NORMAL
- en: Browse to the `http://<Your_VM_Assigned_IP_Address>/mutillidae/` application.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Find the HTTP request you just generated from your browse within the **Proxy**
    | **HTTP history** tab (shown in the next screenshot). Highlight the PHPSESSID
    value, not the parameter name, right-click, and select **Send to Decoder**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00034.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'In the **Decoder** tab, in the **Decode as…** drop-down as follows, select
    **Base 64**. Note the results are viewed in the **Hex** editor and are encrypted:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00035.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: In this example, we cannot proceed any further. We can confirm the value was,
    indeed, wrapped in Base 64\. However, the value that is unwrapped is encrypted.
    The purpose of this recipe is to show you how you can use Decoder to manipulate
    encoded values.
  prefs: []
  type: TYPE_NORMAL
- en: Intruding with Intruder
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Burp Intruder allows a tester to brute-force or fuzz specific portions of
    an HTTP message, using customized payloads.
  prefs: []
  type: TYPE_NORMAL
- en: 'To properly set up customized attacks in Intruder, a tester will need to use
    the settings available in the four subtabs of **Intruder**:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00036.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A tester may wish to fuzz or brute-force parameter values within a message.
    Burp Intruder eases this process by providing various intruder attack styles,
    payloads, and options.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Browse to the login screen of Mutillidae and attempt to log into the application.
    For example, type a username of `admin` and a password of `adminpass`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Find the login attempt in the **Proxy** | **HTTP history** tab. Your request
    number (that is, the **#** sign on the left-hand side) will be different from
    the one shown next.  Select the message that captured your attempt to log in.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'As the login attempt message is highlighted in the **HTTP history** table,
    right-click the **Request** tab, and select **Send to Intruder**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00037.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Target
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The Intruder **Target** tab defines your targeted web application. These settings
    are pre-populated for you by Burp:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00038.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Positions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The **Positions** tab identifies where the payload markers are to be defined
    within the **Payload** | **Positions** section. For our purposes, click the **Clear
    §** (that is, payload markers) from the right-hand side menu. Manually select
    the password field by highlighting it with your cursor. Now click the **Add §**
    button on the right-hand side menu. You should have the payload markers wrapping
    around the password field as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00039.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Payloads
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: After the **Positions** tab is the **Payloads** tab. The **Payloads** tab identifies
    wordlist values or numbers you wish to be inserted into the positions you identified
    on the previous tab. There are several sections within the **Payloads** tab, including
    **Payload Sets**, **Payload Options**, **Payload Processing**, and **Payload Encoding**.
  prefs: []
  type: TYPE_NORMAL
- en: Payload Sets
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Payload Sets** allows for the setting of the number of payloads as well as
    the type. For our purposes, we will use the default settings for Sniper, allowing
    us to use one payload with a **Payload type** of **Simple list**:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00040.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Payload Options
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the **Payload Options** section, a tester can configure a custom payload
    or load a preconfigured one from a file.
  prefs: []
  type: TYPE_NORMAL
- en: 'For our purposes, we will add one value to our payload. In the text box, type
    `admin`, and then click the **Add** button to create our custom payload:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00041.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Payload Processing
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Payload Processing is useful when configuring special rules to be used while
    Intruder substitutes payloads into payload marker positions. For this recipe,
    we do not need any special payload-processing rules:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00042.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Payload Encoding
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Payload Encoding is applied to the payload value prior to sending the request
    to the web server. Many web servers may block offensive payloads (for example,
    `<script>` tags), so the encoding feature is a means to circumvent any blacklist
    blocking.
  prefs: []
  type: TYPE_NORMAL
- en: 'For the purpose of this recipe, leave the default box checked:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00043.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Options
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Finally, the **Intruder** | **Options** tab provides attack table customizations,
    particularly related to responses captured such as specific error messages. There
    are several sections within the **Intruder** | **Options** tab, including **Request
    Headers**, **Request Engine**, **Attack Results**, **Grep-Match**, **Grep-Extract**,
    **Grep - Payloads**, and **Redirections**:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00044.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Request Headers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Request Headers** offers configurations specific to header parameters while
    Intruder is running attacks. For the purpose of this recipe, leave the default
    boxes checked:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00045.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Request Engine
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Request Engine** should be modified if a tester wishes to create less noise
    on the network while running Intruder. For example, a tester can throttle attack
    requests using variable timings so they seem more random to network devices. This
    is also the location for lowering the number of threads Intruder will run against
    the target application.'
  prefs: []
  type: TYPE_NORMAL
- en: 'For purpose of this recipe, leave the default setting as-is:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00046.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Attack Results
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: After starting the attack, Intruder creates an attack table. The **Attack Results**
    section offers some settings around what is captured within that table.
  prefs: []
  type: TYPE_NORMAL
- en: 'For the purpose of this recipe, leave the default settings as-is:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00047.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Grep - Match
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Grep - Match** is a highly useful feature that, when enabled, creates additional
    columns in the attack table results to quickly identify errors, exceptions, or
    even a custom string within the response.'
  prefs: []
  type: TYPE_NORMAL
- en: 'For the purpose of this recipe, leave the default settings as-is:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00048.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Grep - Extract
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Grep - Extract**, when enabled, is another option for adding a column in
    the attack table whose label is specific to a string found in the response. This
    option differs from **Grep - Match**, since Grep - Extract values are taken from
    an actual  HTTP response, as opposed to an arbitrary string.'
  prefs: []
  type: TYPE_NORMAL
- en: 'For the purpose of this recipe, leave the default settings as-is:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00049.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Grep - Payloads
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Grep - Payloads** provides a tester the ability to add columns in the attack
    table in which responses contain reflections of payloads.'
  prefs: []
  type: TYPE_NORMAL
- en: 'For the purpose of this recipe, leave the default settings as-is:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00050.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Redirections
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Redirections** instructs Intruder to never, conditionally, or always follow
    redirections. This feature is very useful, particularly when brute-forcing logins,
    since a 302 redirect is generally an indication of entry.'
  prefs: []
  type: TYPE_NORMAL
- en: 'For the purpose of this recipe, leave the default settings as-is:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00051.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Start attack button
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Finally, we are ready to start Intruder. On either the **Payloads** or the **Options**
    tabs, click the **Start attack** button to begin:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00052.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: When the attack has started, an attack results table will appear. This allows
    the tester to review all requests using the payloads within the payload marker
    positions. It also allows us to review of all responses and columns showing **Status**,
    **Error**, **Timeout**, **Length**, and **Comment**.
  prefs: []
  type: TYPE_NORMAL
- en: 'For the purpose of this recipe, we note that the payload of admin in the `password`
    parameter produced a status code of `302`, which is a redirect. This means we
    logged into the Mutillidae application successfully:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00053.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Looking at **Response** | **Render** within the attack table allows us to see
    how the web application responded to our payload. As you can see, we are successfully
    logged in as an admin:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00054.jpeg)'
  prefs: []
  type: TYPE_IMG
