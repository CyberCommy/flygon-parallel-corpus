- en: Evasion with Metasploit
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We have covered all of the major phases of a penetration test in the last eight
    chapters. In this chapter, we will include the problems that tend to occur for
    a penetration tester in real-world scenarios. Gone are the days where a straightforward
    attack would pop you a shell in Metasploit. With the increase of attack surface
    these days, security perspectives have also increased gradually. Hence, tricky
    mechanisms are required to circumvent security controls of various natures. In
    this chapter, we''ll look at different methods and techniques that can prevent
    security controls deployed at the target''s endpoint. Throughout this chapter,
    we will cover:'
  prefs: []
  type: TYPE_NORMAL
- en: Bypassing AV detection for Meterpreter payloads
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bypassing IDS systems
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bypassing firewalls and blocked ports
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: So, let's get started with the evasion techniques.
  prefs: []
  type: TYPE_NORMAL
- en: Evading Meterpreter using C wrappers and custom encoders
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Meterpreter is one of the most popular payloads used by security researchers.
    However, being popular, it is detected by most of the AV solutions out there and
    tends to get flagged in a flash. Let''s generate a simple Metasploit executable
    using `msfvenom` as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/5ddba1a4-be28-4168-a7c0-8a0d8ba862bf.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We created a simple reverse TCP Meterpreter executable backdoor using the `msfvenom`
    command. Additionally, we have mentioned `LHOST` and `LPORT` followed by the format,
    which is EXE for the PE/COFF executable. We have also prevented null, line feed,
    and carriage return bad characters by mentioning them using the `-b` switch. We
    can see that the executable was generated successfully. Let''s move this executable
    to the `apache` folder and try downloading and executing it on the Windows 10
    operating system secured by Windows Defender and Qihoo 360 Antivirus. However,
    before running it, let''s start a matching handler as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/bef384f4-f63f-4844-9cd0-38256e707d93.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We can see that we started a matching handler on port `4444` as a background
    job. Let''s try downloading and executing the Meterpreter backdoor on the Windows
    system and check whether we get the reverse connection or not:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/d4903df9-f206-402c-b47c-81b1df91c631.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Oops! It looks like the AV is not even allowing the file to download. Well,
    that''s quite typical in the case of a plain Meterpreter payload backdoor. Let''s
    quickly calculate the MD5 hash of the `Sample.exe` file as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/5dee96cb-1a90-4cd1-84f4-76a000e0d789.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Let''s check the file on a popular online AV scanner such as [http://nodistribute.com/](http://nodistribute.com/),
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/82eb15e4-d099-4cb8-ade2-55f35220f0e4.png)'
  prefs: []
  type: TYPE_IMG
- en: Well! We can see that 27/37 Antivirus solutions detected the file. Pretty bad,
    right? Let's look at how we can circumvent the situation by making use of C programming
    and a little encoding. Let's get started.
  prefs: []
  type: TYPE_NORMAL
- en: Writing a custom Meterpreter encoder/decoder in C
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To circumvent the security controls at the target, we will make use of custom
    encoding schemes, say XOR encoding, followed by one or two other encodings. Additionally,
    we will not use the conventional PE/COFF format and instead we will generate shellcode
    to work things around. Let''s use `msfvenom` in a similar way as we did previously
    for the PE format. However, we will change the output format to C, as shown in
    the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/68131936-78fd-4fcf-a68a-67838e2e55b4.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Viewing the contents of the `Sample.c` file, we have the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/57947eb7-ddcf-441f-9ddf-e13d88ab5f29.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Since we have the shellcode ready, we will build an encoder in C, which will
    XOR encode the shellcode with the byte of our choice, which is `0xAA`, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/ce358121-f247-4bc6-ab51-9f6077d8e11a.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Let''s see how we can create an encoder program in C as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'This is a straightforward program where we have copied the generated shellcode
    into an array `buf[]` and simply iterated through it and used Xor on each of its
    bytes with the `0xAA` byte and printed it on the screen. Compiling and running
    this program will output the following encoded payload:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/13486eca-c31a-4283-8d79-fd9e11831a9a.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now that we have the encoded payload, we will need to write a decryption stub
    executable which will convert this payload into the original payload upon execution.
    The decryption stub executable will actually be the final executable to be delivered
    to the target. To understand what happens when a target executes the decryption
    stub executable, we can refer to the following diagram:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/451beaca-4d35-40d9-972e-c0b20d37a8b6.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We can see that upon execution, the encoded shellcode gets decoded to its original
    form and is executed. Let''s write a simple C program demonstrating this, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Again, a very straightforward program; we used the `VirtualAlloc` function
    to reserve space in the virtual address space of the calling program. We have
    also used `memcpy` to copy the decoded bytes into the space reserved by the `VirtualAlloc`
    pointer. Next, we execute the bytes held at the pointer. So, let''s test our program
    and see how it works on the target''s environment. We will follow the same steps;
    let''s find the MD5 hash of the program as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/5618bdf3-5ade-4f9e-b88b-976fbf72bf8d.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Let''s try downloading and executing the program as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/8a548de0-bb45-4956-bf86-535ab30927cd.png)'
  prefs: []
  type: TYPE_IMG
- en: 'No issues with the download! Yippee! It''s a normal pop-up saying the file
    is unknown; nothing to worry about. Let''s try executing the file now, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/bbc42f2a-c24d-47b1-a6a3-03b2a9a71ff5.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Bang bang! We got the Meterpreter access to the target running Qihoo 360 Premium
    Antivirus on a 64-bit Windows 10 OS, fully protected and patched. Let''s give
    it a try on [http://nodistribute.com/](http://nodistribute.com/) as well:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/62fdbbdc-e501-4dc3-bd18-2a3cf0d58605.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We can see that a few of the antivirus solutions still flagged the executable
    as malware. However, our technique bypassed some of the major players which included
    Avast, AVG, Avira, Kaspersky, Comodo, and even Norton and McAfee. The rest of
    the nine AV solutions can be bypassed as well with some tricks such as delayed
    execution, file pumping, and much more. Let''s confirm the check by right-clicking
    and scanning with Qihoo 360 Antivirus as well:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/564f4424-7c8a-4f16-9faa-fa509d952776.png)'
  prefs: []
  type: TYPE_IMG
- en: No problems whatsoever! Throughout this exercise, we saw the journey of a payload
    from its executable state to its shellcode form. We saw how a little custom decoder
    application could do wonders when it comes to bypassing AV solutions.
  prefs: []
  type: TYPE_NORMAL
- en: Evading intrusion detection systems with Metasploit
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Your sessions on the target can be short-lived if an intrusion detection system
    is in place. **Snort**, a popular IDS system, can generate quick alerts when an
    anomaly is found on the network. Consider the following case of exploiting a Rejetto
    HFS server with a target with Snort IDS enabled:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/2cd53825-34da-4496-9c8e-0c311c4a519f.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We can see that we successfully got the Meterpreter session. However, the image
    on the right suggests some priority one issues. I must admit that the rules created
    by the Snort team and the community are pretty strict and tough to bypass at times.
    However, for the maximum coverage of Metasploit evasion techniques and for the
    sake of learning, we have created a simple rule to detect logins at the vulnerable
    HFS server, which is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: The preceding rule is a simple one suggesting that if any `GET` request generated
    from an external network is using any port to the target network on HTTP ports,
    the message must be displayed. Can you think of how we can bypass such a standard
    rule? Let's discuss it in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Using random cases for fun and profit
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Since we are working with the HTTP requests, we can always use the Burp repeater
    to aid quick testing. So, let''s work with Snort and Burp side by side and begin
    some testing:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/73fdda54-4a07-4b89-bb2e-2d418a4e7bc1.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We can see that as soon as we sent out a request to the target URI, it got
    logged to Snort, which is not good news. Nevertheless, we saw the rule, and we
    know that Snort tries to match the contents of `GET` to the one in the request.
    Let''s try modifying the case of the `GET` request and repeat the request as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/1db79df2-d221-4e13-93f7-a4f92acdc3ed.png)'
  prefs: []
  type: TYPE_IMG
- en: 'No new logs have been generated! Nice. We just saw how we can change the casing
    of the method and fool a simple rule. However, we still don''t know how we can
    achieve this technique in Metasploit. Let me introduce you to the evasion options
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/487c0e72-9ed9-4e9f-9170-720ab9a94986.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We can see that we have plenty of evasion options available to us. I know you
    have guessed this one. However, if you haven''t, we are going to use the `HTTP::method_random_case`
    option here, and we will retry the exploit as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/ac405b5a-334a-42a4-9725-40499fb22887.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Let''s exploit the target as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/9a0e1ff6-5c30-4c9f-ba54-2d71eff3c127.png)'
  prefs: []
  type: TYPE_IMG
- en: We are clean! Yup! We bypassed the rule with ease. Let's try some more complicated
    scenarios in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Using fake relatives to fool IDS systems
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Similar to the previous approach, we can use fake relatives in Metasploit to
    eventually reach the same conclusion while juggling directories. Let''s see the
    following ruleset:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/407ae463-d3a1-4c57-b2e4-0d723ab9daf1.png)'
  prefs: []
  type: TYPE_IMG
- en: We can see that the preceding Snort rule checks for `POST /script` content in
    the incoming packets. We can do this in multiple ways, but let's use a new method,
    which is fake directory relatives. This technique will add previous random directories
    to reach the same directory; for example, if a file exists in the `/Nipun/abc.txt`
    folder, the module will use something like `/root/whatever/../../Nipun/abc.txt`,
    which means it has used some other directory and eventually came back to the same
    directory in the end. Hence, this makes the URL long enough for IDS to improve
    efficiency cycles. Let's consider an example.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this exercise, we will use the Jenkins `script_console` command execution
    vulnerability to exploit the target running at `192.168.1.149`, as shown in the
    following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/c907e3c3-7398-42ce-a58d-cce8bf2c269f.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We can see that we have Jenkins running on port `8888` of the target IP, `192.168.1.149`.
    Let''s use `exploit/multi/http/Jenkins_script_console module` to exploit the target.
    We can see that we have already set options such as `RHOST`, `RPORT`, and `TARGEURI`.
    Let''s exploit the system:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/282a21d7-4f4d-4482-9058-24b757373cc1.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Success! We can see that we got Meterpreter access to the target with ease.
    Let''s see what Snort has in store for us:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/791e6f5d-44fa-41db-8995-a42338f3f550.png)'
  prefs: []
  type: TYPE_IMG
- en: 'It looks like we just got caught! Let''s set the following evasion option in
    Metasploit:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/7a7c47d8-51c4-42fd-872d-c1961127b156.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now let''s rerun the exploit and see if we can get anything in Snort:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/62879983-1596-4577-a2a3-0299424c4a38.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Nothing in Snort! Let''s see how our exploit went:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/13dfb0f9-c600-45f8-a2f5-032de9a54477.png)'
  prefs: []
  type: TYPE_IMG
- en: Nice! We evaded Snort yet again! Feel free to try all other Snort rules to have
    a better understanding of how things work behind the scenes.
  prefs: []
  type: TYPE_NORMAL
- en: Bypassing Windows firewall blocked ports
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'When we try to execute Meterpreter on a Windows target system, we may never
    get Meterpreter access. This is common in situations where an administrator has
    blocked a particular set of ports on the system. In this example, let''s try circumventing
    such cases with a smart Metasploit payload. Let''s quickly set up a scenario as
    follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/6cda48ca-1c52-4569-b2c1-084aa6d00543.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We can see that we have set up a new firewall rule and specified port numbers
    `4444-6666`. Proceeding to the next step, we will choose to block these outbound
    ports, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/40a2eaf4-aeeb-45db-8583-99911e206125.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Let''s check the firewall status and our rule:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/23ccbae1-c8af-4084-9004-c5a20638767b.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We can see that the rule is set up and our firewall is enabled on both home
    and public networks. Consider that we have Disk Pulse Enterprise software running
    at the target. We already saw in the previous chapters that we can exploit this
    software. Let''s try executing the exploit:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/40216a0d-611c-46ab-ab4a-d882cc6a596b.png)'
  prefs: []
  type: TYPE_IMG
- en: We can see that the exploit did run, but we didn't get access to the target
    because the firewall blocked us out on port `4444`.
  prefs: []
  type: TYPE_NORMAL
- en: Using the reverse Meterpreter on all ports
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To circumvent this situation, we will use the `windows/meterpreter/reverse_tcp_allports`
    payload, which will try every port and will provide us with access to the one
    that isn''t blocked. Also, since we are listening on port `4444` only, we will
    need to redirect the traffic from all the random ports to port `4444` on our end.
    We can do this using the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/f24bc475-e0db-4ff5-a6f9-7a1114e18c9d.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Let''s execute the exploit again with all ports using the reverse `tcp meterpreter`
    payload:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/5c34c905-caf8-4991-a477-bff3f8c5205d.png)'
  prefs: []
  type: TYPE_IMG
- en: We can see that we got Meterpreter access to the target with ease. We circumvented
    the Windows firewall and got a Meterpreter connection. This technique is beneficial
    in situations where admins keep a pro-active approach towards the inbound and
    outbound ports.
  prefs: []
  type: TYPE_NORMAL
- en: 'At this point, you might be wondering if the preceding technique was a big
    deal, right? Or, you might be confused. Let''s view the whole process in Wireshark
    to understand things at the packet level:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/0d1244a2-1930-4363-ae33-3510937c9db4.png)'
  prefs: []
  type: TYPE_IMG
- en: We can see that initially, the data from our kali machine was sent to port `80`,
    causing the buffer to overflow. As soon as the attack was successful, a connection
    from the target system to port `6667` (the first port after the blocked range
    of ports) was established. Also, since we routed all the ports from `4444-7777`
    to port `4444`, it got routed and eventually led back to port `4444`, and we got
    Meterpreter access.
  prefs: []
  type: TYPE_NORMAL
- en: Summary and exercises
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Throughout this chapter, we learned AV evasion techniques using custom encoders,
    we bypassed the signature matching of IDS systems, and we also avoided Windows
    firewall blocked ports using the all-TCP-ports Meterpreter payload.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can try the following exercises to enhance your evasion skills:'
  prefs: []
  type: TYPE_NORMAL
- en: Try delaying execution of the payload without using `sleep()` function in the
    decoder and analyze the detection ratio change
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Try using other logical operations such as NOT, double XOR, and use simple ciphers
    such as ROT with the payloads
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bypass at least 3 signatures from Snort and get them fixed
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Learn and use SSH tunneling for bypassing firewalls
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The next chapter relies heavily on these techniques and takes a deep dive into
    Metasploit.
  prefs: []
  type: TYPE_NORMAL
