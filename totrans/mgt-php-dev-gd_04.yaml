- en: Chapter 4. Frontend Development
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: So far, we have focused on the theory behind Magento, its architecture, and
    getting familiar with common and important concepts of everyday Magento development.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we will give a practical use to the skills and knowledge we
    have acquired so far by incrementally building a Magento extension for our frontend.
    We will build a fully functional Gift Registry extension.
  prefs: []
  type: TYPE_NORMAL
- en: Extending Magento
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Before jumping ahead and start building our extension, let's define an example
    scenario and a scope for our extension. This way we will have a clear idea of
    what we are building and more importantly, of what we are not building.
  prefs: []
  type: TYPE_NORMAL
- en: Scenario
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Our scenario is simple; we want to extend Magento to allow customers to create
    gift registry lists and share them with friends and family. Customers should be
    able to create multiple gift registries and specify the recipients of those gift
    registries.
  prefs: []
  type: TYPE_NORMAL
- en: 'A gift registry will hold the following information:'
  prefs: []
  type: TYPE_NORMAL
- en: Event type
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Event name
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Event date
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Event location
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: List of products
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Features
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Have a look at the following features:'
  prefs: []
  type: TYPE_NORMAL
- en: Store administrator can define multiple event types (birthdays, weddings, and
    gift registries)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Create events and assign multiple gift registry lists to each event
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Customers can add products to their registries from the cart, wish list, or
    directly from the product pages
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Customers can have multiple gift registries
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: People can share their registries with friends and family through e-mail and/or
    direct link
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Friends and family can buy the items from the gift registry
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Further improvements
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The following is a list of possible features that have been left out of this
    example extension due to their complexity, or in the case of social media due
    to the fact that their APIs and the amount of social media platforms is ever-changing,
    but they are still a good challenge for readers who want to extend this module
    even further:'
  prefs: []
  type: TYPE_NORMAL
- en: Social media integration
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The registry can keep track of the request and fulfilled quantities for each
    registry item
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Specify multiple and different registry owners
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Delivery to registry owner address
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Hello Magento
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In previous chapters, we learned about the Magento code pools (core, community,
    local). Since we don't intend to distribute our module on Magento Connect, we
    will be creating it under the local directory.
  prefs: []
  type: TYPE_NORMAL
- en: All Magento modules are kept inside packages or namespaces; for example, all
    the Core Magento modules are kept under the Mage namespace. For the purpose of
    this book, we will use **Magento Developers Guide** (**MDG**).
  prefs: []
  type: TYPE_NORMAL
- en: The Magento naming convention for modules is `Namespace_Modulename` .
  prefs: []
  type: TYPE_NORMAL
- en: Our next step will be to create the module structure and configuration files.
    We need to create a namespace directory under `app/code/local/`. The namespace
    can be anything you like. The accepted convention is to use the company's name
    or the author's name as the namespace. So our first step will be to create the
    directory `app/code/local/Mdg/`. This directory will also hold not only our gift
    registry module but also any future modules we develop.
  prefs: []
  type: TYPE_NORMAL
- en: Under our namespace directory, we will also need to create a new directory with
    the name of our module, which will hold all the code of custom extension.
  prefs: []
  type: TYPE_NORMAL
- en: So let's go ahead and create a `Giftregistry` directory. Once that is done,
    let's create the rest of our directory structure.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Note that Magento is a bit sensitive to the use of camel-casing due to its use
    of factory methods. In general, it's a good idea to avoid using camel—casing in
    our module/controller/action names. For more information on Magento naming conventions,
    please see the [Appendix](apa.html "Appendix A. Hello Magento") of this book.
  prefs: []
  type: TYPE_NORMAL
- en: The file location is `/app/code/local/Mdg/Giftregistry/`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: As we have learned so far, Magento uses `.xml` files as a central part of its
    configuration. In order for a module to be recognized and activated by Magento,
    we need to create a single file under `app/etc/modules/`, following the `Namespace_Modulename.xml`
    convention. Let's create our file.
  prefs: []
  type: TYPE_NORMAL
- en: The file location is `app/etc/modules/Mdg_Giftregistry.xml`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Downloading the example code**'
  prefs: []
  type: TYPE_NORMAL
- en: You can download the example code files for all Packt books you have purchased
    from your account at [http://www.packtpub.com](http://www.packtpub.com). If you
    purchased this book elsewhere, you can visit [http://www.packtpub.com/support](http://www.packtpub.com/support)
    and register to have the files e-mailed directly to you.
  prefs: []
  type: TYPE_NORMAL
- en: 'After creating this file or making any changes to our module configuration
    files, we will need to refresh the Magento configuration cache:'
  prefs: []
  type: TYPE_NORMAL
- en: Navigate to the Magento backend.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open **System** | **Cache Management**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on **Flush Magento**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Since we are working on a development extension and we are going to be making
    frequent changes to the configuration and extension code, it is a good idea to
    disable the cache. Follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Navigate to the Magento Backend.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open **System** | **Cache Management**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select all the **Cache Type** checkboxes.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select **Disable** from the **Actions** drop-down list.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Submit** button.![Hello Magento](graphics/3060OS_04_01_revised.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once we have cleared the cache, we can confirm that our extension is being made
    active by going into **System** | **Advanced**.
  prefs: []
  type: TYPE_NORMAL
- en: '![Hello Magento](graphics/3060_04_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Magento now knows about our module, but we haven't told Magento what our module
    is supposed to do; for that, we will need to set up the module configuration.
  prefs: []
  type: TYPE_NORMAL
- en: XML module configuration
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'There are two main files involved in a module configuration: `config.xml` and
    `system.xml`. In addition to these module configurations, these are also stored
    in:'
  prefs: []
  type: TYPE_NORMAL
- en: '`api.xml`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`adminhtml.xml`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`cache.xml`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`widget.xml`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`wsdl.xml`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`wsi.xml`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`convert.xml`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'In this chapter, we will focus only on the `config.xml` file. Let''s create
    our base file and break down each of the nodes by following these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Start by creating the `config.xml` file under our module `etc/directory`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now, copy the following code to the `config.xml` file (the file location is
    `app/code/local/Mdg/Giftregistry/etc/config.xml`):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: All module configurations are contained inside the `<config>` node. Inside this
    node, we have the `<global>` and `<modules>` nodes.
  prefs: []
  type: TYPE_NORMAL
- en: The `<modules>` node is just used to specify the current module version, which
    is later used to decide which installation and upgrade files to run.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are three main configuration nodes that are most commonly used to specify
    the configuration scope:'
  prefs: []
  type: TYPE_NORMAL
- en: '`<global>`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`<adminhtml>`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`<frontend>`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'For now, we will be working on the `<global>` scope. This will make any configuration
    available to both, the Magento Frontend and Backend. Under the `<global>` node,
    we have the following nodes:'
  prefs: []
  type: TYPE_NORMAL
- en: '`<models>`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`<blocks>`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`<helpers>`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`<resources>`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'As we can see, each node follows the same configuration pattern:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Each of the nodes that are used by the Magento class factories instantiate our
    custom objects. The `<factory_alias>` node is a critical part of our extension
    configuration. The `<factory_alias>` node is used by the factory methods, such
    as `Mage::getModel()` or `Mage::getHelper()`.
  prefs: []
  type: TYPE_NORMAL
- en: Notice that we are not defining each specific Model, Block, or Helper, just
    the path where Magento factories can find them. Magento naming convention allows
    us to have any folder structure under each of these folders, and Magento will
    be smart enough to load the appropriate class in Magento's class names.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In Magento, class names and directory structures are one and the same.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, we could have created a new model class under `app/code/local/Mdg/Giftregistry/Models/Folder1/Folder2/Folder3`,
    and the factory name for instantiating an object from this class would be:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Let's create our first model, or to be more specific, a helper class. Helpers
    are used to contain utility methods that are used to perform common tasks and
    can be shared among different classes.
  prefs: []
  type: TYPE_NORMAL
- en: Let's go ahead and create an empty `helper` class; we will add the helper logic
    later in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: 'The file location is `app/code/loca/Mdg/Giftregistry/Helper/Data.php`. Refer
    to the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: It might seem odd that we are naming our helper `Data`, but this is actually
    part of Magento's standards that each module has a default `helper` class called
    `Data`. Another interesting thing with `helper` classes is that we can just pass
    the `<factory_alias>` node without a class-specific class name to the `helper`
    factory method, and this will default to the `Data` helper class.
  prefs: []
  type: TYPE_NORMAL
- en: 'So if we wanted to instantiate our default `helper` class, we only need to
    perform the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Models and saving data
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Before jumping straight into creating our models, we need to define clearly
    what type of models we are going to build and how many. So let''s review our example
    scenario. For our gift registry, it appears that we will need two different models:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Registry Model**: This model is used to store the gift registry information,
    such as gift registry type, address, and recipient information'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Registry Item**: This model is used to store the information of each of the
    gift registry items (quantity requested, quantity bought, `product_id`)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Although this approach is correct, it does not meet all the requirements of
    our example scenario. By having all the registry information stored into a single
    table, we cannot add more registry types without modifying the code.
  prefs: []
  type: TYPE_NORMAL
- en: 'So, in this case, we will want to break down our data into multiple tables:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Registry Entity**: This table is used to store the gift registry and event
    information'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Registry Type**: By storing the gift registry type into a separate table,
    we can add or remove event types'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Registry Item**: This table is used to store the information of each of the
    gift registry items (quantity requested, quantity bought, `product_id)`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Now that we have defined our data structure, we can start building the corresponding
    models that will allow us to access and manipulate our data.
  prefs: []
  type: TYPE_NORMAL
- en: Creating the models
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let''s start by creating the Gift Registry type model, which is used to manage
    the registry types (wedding, birthday, baby shower, and so on). To do so, follow
    these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Navigate to the `Model` folder on our module directory.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a new file called `Type.php` and copy the following content into the
    file (the file location is `app/code/local/Mdg/Giftregistry/Model/Type.php`):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'We will also need to create a resource class; every Magento Data model has
    its own resource class. It is also important to clarify that only models that
    handle the data directly, be it a simple data model or an EAV model, will require
    a `resource` class. To do so, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Navigate to the `Model` folder on our module directory.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a new folder under `Model` called `Mysql4`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a new file called `Type.php` and copy the following content into the
    file (the file location is `app/code/local/Mdg/Giftregistry/Model/Mysql4/Type.php`):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, we will also need a `collection` class to retrieve all available event
    types:'
  prefs: []
  type: TYPE_NORMAL
- en: Navigate to the `Model` folder on our module directory.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a new file called `Type.php` and copy the following content into the
    file (the file location is `app/code/local/Mdg/Giftregistry/Model/Mysql4/Type/Collection.php`):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s do the same by creating a model that handles the gift registry items.
    This model will hold all the relevant product information for the registry items.
    To do so, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Navigate to the `Model` folder on our module directory.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a new file called `Item.php` and copy the following content into the
    file (the file location is `app/code/local/Mdg/Giftregistry/Model/Item.php`):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s go ahead and create the resource class:'
  prefs: []
  type: TYPE_NORMAL
- en: Navigate to the `Model` folder on our module directory.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open the `Mysql4` folder
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a new file called `Item.php` and copy the following content into the
    file (the file location is `app/code/local/Mdg/Giftregistry/Model/Mysql4/Item.php`):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'And, finally, let''s create the corresponding `collection` class:'
  prefs: []
  type: TYPE_NORMAL
- en: Navigate to the `Model` folder on our module directory.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a new file called `Collection.php` and copy the following content into
    the file (the file location is `app/code/local/Mdg/Giftregistry/Model/Mysql4/Item/Collection.php`):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Our next step will be to create our Registry entity; this is the core of our
    registry and is the model that ties everything together. To do so, follow these
    steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Navigate to the `Model` folder on our module directory.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a new file called `Entity.php` and copy the following content into the
    file (the file location is `app/code/local/Mdg/Giftregistry/Model/Entity.php`):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s go ahead and create the `resource` class:'
  prefs: []
  type: TYPE_NORMAL
- en: Navigate to the `Model` folder on our module directory.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open the `Mysql4` folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a new file called `Entity.php` and copy the following content into the
    file (the file location is `app/code/local/Mdg/Giftregistry/Model/Mysql4/Entity.php`):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'And, finally, let''s create the corresponding `collection` class:'
  prefs: []
  type: TYPE_NORMAL
- en: Navigate to the `Model` folder on our module directory.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a new file called `Collection.php` and copy the following content into
    the file (the file location is `app/code/local/Mdg/Giftregistry/Model/Mysql4/Entity/Collection.php`):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: So far, we haven't done anything other than blindly creating new models by copying
    code and adding model classes to our module. Let's test our newly created models
    using the **Interactive Magento Console** (**IMC**).
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s fire up IMC and try out the new models by running the following command
    in the root of our Magento installation:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'The following code assumes that you are running a Magento test installation
    with sample data, and if you are using the Vagrant box installation, you already
    have all the preloaded data:'
  prefs: []
  type: TYPE_NORMAL
- en: 'We will start by loading the customer model:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'Next we need to instantiate a new registry object:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'One handy function that is part of all Magento models is the `getData()` function,
    which returns an array of all the object attributes. Let''s run this function
    on both a, the registry and customer object and compare the output:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'As we notice, the customer has all the data set for our John Doe example record,
    while the registry object returns completely empty `$regiarray`. Let''s change
    this by running the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'Now let''s try to print the registry data one more time by running:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, to make our changes permanent, we need to call the model `save` function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'And oops! Something went wrong when saving the product; we got the following
    error in the console:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: What happened? The `save()` function that is being called is part of the parent
    class `Mage_Core_Model_Mysql4_Abstract`, which in turn calls the abstract class
    `save()` function, but we are missing a critical part of our `config.xml` file.
  prefs: []
  type: TYPE_NORMAL
- en: 'In order for Magento to properly identify which resource class to use, we need
    to specify the resource model class and the matching table for each entity. Let''s
    go ahead and update our configuration file by following these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Navigate to the extension `etc/` folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open `config.xml`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Update the `<model>` node with the following code (the file location is `app/code/local/Mdg/Giftregistry/Model/Entity.php`):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: Now, before we can actually save a product to the database, we have to create
    our database tables first; next, we will learn how to use setup resources for
    creating our table structures and setting our default data.
  prefs: []
  type: TYPE_NORMAL
- en: Setup resources
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Now that we have created our model code, we need to create setup resources in
    order to be able to save them. The setup resources will take care of creating
    the corresponding database tables. Now, we could just use straight SQL or a tool
    such as PHPMyAdmin to create all the tables, but this is not the standard practice,
    and by general rule, we should never modify the Magento Database directly.
  prefs: []
  type: TYPE_NORMAL
- en: 'To achieve this, we will do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Define a setup resource on our configuration file
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Create a resource class
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Create an installer script
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Create a data script
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Create an upgrade script
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Defining a setup resource
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'When we first defined our configuration file, we defined a `<resources>` node:'
  prefs: []
  type: TYPE_NORMAL
- en: 'The file location is `app/code/local/Mdg/Giftregistry/etc/config.xml`. Refer
    to the following code snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: The first thing to notice is that the `<mdg_giftregistry_setup>` node is used
    as a unique identifier for our setup resource; the standard naming convention
    is `<modulename_setup>`, and while it is not required, it is highly recommended
    to follow this naming convention.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will also need to make a change to the `<setup>` node, add an additional
    class node, and read and write connections:'
  prefs: []
  type: TYPE_NORMAL
- en: The file location is `app/code/local/Mdg/Giftregistry/etc/config.xml`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: Creating this setup resource is not required for the basic setup scripts, and
    `Mage_Core_Model_Resource_Setup` can be used instead, but by creating our own
    setup class, we are planning ahead and giving ourselves more flexibility for future
    improvements. Next, we will create the setup resource class under the file location,
    otherwise we will be getting an error saying that Magento can't find the setup
    resource class.
  prefs: []
  type: TYPE_NORMAL
- en: 'Create the setup resource class under the file location, `app/code/local/Mdg/Giftregistry/Model/Resource/Setup.php`.
    Refer to the following code snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: For now, we don't need to do anything else with the setup resource class.
  prefs: []
  type: TYPE_NORMAL
- en: Creating the Installer Script
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Our next step will be to create an installation script. This script contains
    all the SQL code for creating our tables and is run when we initialize our module.
    First, let's take another quick look to our `config.xml` file. If we remember,
    the first node defined before our `<global>` node was the `<modules>` node.
  prefs: []
  type: TYPE_NORMAL
- en: 'The file location is `app/code/local/Mdg/Giftregistry/etc/config.xml`. Refer
    to the following code snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: As we mentioned before, this node is required on all Magento modules and is
    used to identify the current installed version of our module. This version number
    is used by Magento to identify if and which installation and upgrade scripts to
    run.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'A word on naming conventions: Since Magento 1.6, the setup script naming conventions
    have changed. Originally, the `Mysql4-install-x.x.x.php` naming convention was
    used and is currently deprecated but still supported.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Since Magento 1.6, the naming convention for the setup script has changed and
    now developers can make use of three different script types:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Install**: This script is used when the module is first installed and no
    record of it exists on the `core_resource` table'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Upgrade**: This script is used if the version in the `core_resource` table
    is lower than the one in the `config.xml` file'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Data**: This script will run after the matching version install/upgrade script
    and are used to populate the tables with required data'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Data script are introduced in Magento 1.6 and are stored under the data/directory
    directly under our Module root. They follow a slightly different convention than
    the install and upgrade scripts by adding the prefix.
  prefs: []
  type: TYPE_NORMAL
- en: Let's continue creating our registry entity table in our installation script
    under.
  prefs: []
  type: TYPE_NORMAL
- en: 'The file location is `app/code/local/Mdg/Giftregistry/sql/mdg_giftregistry_setup/install-0.1.0.php`.
    Refer to the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Please note that due to space constraints we are not adding the full installation
    script; you still need to add the installer code for the item and type tables.
    The full installation file and the code files can be downloaded directly from
    [https://github.com/amacgregor/mdg_giftreg](https://github.com/amacgregor/mdg_giftreg).
  prefs: []
  type: TYPE_NORMAL
- en: Now that might look like a lot of code, but it is only creating one output of
    the tables, in order to make sense of it, lets break it down, and see what is
    exactly the code doing.
  prefs: []
  type: TYPE_NORMAL
- en: The first thing to notice is that even if we are creating and setting database
    tables, we are not writing any SQL code. Magento ORM provides an adapter with
    the database. All the installation, upgrade, and data scripts inherit from `Mage_Core_Model_Resource_Setup`.
    Let's break down each of the functions being used on our installation script.
  prefs: []
  type: TYPE_NORMAL
- en: 'The first three lines of the script instantiate both `resource_setup` model
    and the connection. The rest of the script deals with setting up a new table instance
    and calling the following functions on it:'
  prefs: []
  type: TYPE_NORMAL
- en: '`addColumn`: This function is used to define each of the table columns and
    takes the following five parameters:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`name`: This is the name of the column'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`type`: This is the data storage type (`int`, `varchar`, `text`, and so on)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`size`: This is the column length'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`options`: This is an array of additional options for the data storage'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Comment`: This is the column description'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`addIndex`: This function is used to define the indexes of a particular table
    and takes the following three parameters:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`index`: This is an index name'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`columns`: This can be a string with a single column name or an array with
    multiple ones'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`options`: This is an array of additional options for the data storage'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`addForeginKey`: This function is used to define foreign key relationships,
    and it takes the following six parameters:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`fkName`: This is a foreign key name'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`column`: This is a foreign key column name'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`refTable`: This is a reference table name'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`refColumn`: This is a reference table column name'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`onDelete`: This is an action to take on delete row'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`onUpdate`: This is an action to take on update of row'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The code creating each of our tables is basically composed of those three functions,
    and after each table definition, the following code is executed:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'This is telling our database adapter to convert our code into SQL and run it
    against the database. There is one important thing to notice; that is, instead
    of providing or hard-coding the database names, the following code is called:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: This is the table alias that we defined before inside our `config.xml` files.
    To finish our installer, we need to create a `newTable` instance for each of our
    entities.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Here's a challenge for you. Create the missing tables by using your Installer
    Script. To see the answer with the complete code and full breakdown, visit [http://www.magedevguide.com/challenge/chapter4/1](http://www.magedevguide.com/challenge/chapter4/1).
  prefs: []
  type: TYPE_NORMAL
- en: The data scripts can be used to populate our tables; in our case, this will
    come in handy to set up some base event types.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will first need to create a data installation script under the `data` folder;
    as we mentioned before, the structure is very similar to the SQL folder, and the
    only difference is that we append the data prefix to the matching installation/upgrade
    script. To do so, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Navigate to the module data folder `app/code/local/Mdg/Giftregistry/data/`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a new directory based on resource; in this case, it would be `mdg_giftregistry_setup`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Under `mdg_giftregistry_setup`, create a file called `data-install-0.1.0.php`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Copy the following code into the `data-install-0.1.0.php` file (the file location
    is `app/code/local/Mdg/Giftregistry/data/mdg_giftregistry_setup/data-install-0.1.0.php`):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s take a closer look at the last conditional block on the `data-install-0.1.0.php`
    script:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, if we refresh our Magento installation, the error should be gone, and
    if we take a close look at the `mdg_giftregistry_type` table, we should see the
    following records:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating the Installer Script](graphics/3060_04_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: As we learned before, the installation and data scripts will run the first time
    our module is installed. But what happens in our case where Magento already thinks
    our module is installed?
  prefs: []
  type: TYPE_NORMAL
- en: Since the module is already registered in the `core_resource` table, the installation
    scripts will not be run again, unless Magento detects a version change in the
    extension. This is great for handling multiple releases of an extension but not
    very practical for development purposes.
  prefs: []
  type: TYPE_NORMAL
- en: 'Fortunately, it is easy to trick Magento into running our extension installation
    scripts again. We only have to delete the corresponding entry in the `core_resource`
    table. To do so, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Open your MySQL console; if you are using our Vagrant box, you can just open
    it by typing `mysql`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once we are in the MySQL shell, we need to select our working database; in our
    case, it is `ce1702_magento`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Finally, we need to enter the `core_resource` table using the following query:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: What have we learned?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'So far, we have learned to:'
  prefs: []
  type: TYPE_NORMAL
- en: Create the base directory structure for our Magento module
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The role and importance of the configuration files
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating models and setup resources
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The role and order of installation, upgrade, and data scripts
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Here's a challenge for you. Try improving the model structure for our module
    even further by converting the entity into an EAV model; this will require modifications
    to the installation scripts and to the resource model. To see the answer with
    the complete code and full breakdown, visit [http://www.magedevguide.com/challenge/chapter4/2](http://www.magedevguide.com/challenge/chapter4/2).
  prefs: []
  type: TYPE_NORMAL
- en: Setting up our routes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that we are capable of saving and manipulating the data by using our models,
    we need to provide a way for customers to interact with the actual gift registries;
    that is our first step. We need to create valid routes or URLs in the frontend.
  prefs: []
  type: TYPE_NORMAL
- en: As with many things in Magento, this is controlled by the configuration file.
    A route will convert a URL into a valid controller, action, and method.
  prefs: []
  type: TYPE_NORMAL
- en: 'Open our `config.xml` file. The file location is `app/code/local/Mdg/Giftregistry/etc/config.xml`.
    Refer to the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s break down the configuration code we just added:'
  prefs: []
  type: TYPE_NORMAL
- en: '`<frontend>`: Previously, we added all the configuration inside the global
    scope; since we want our routes to be only available in the frontend, we need
    to declare our custom routes under the frontend scope'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`<routers>`: This is the container tag that holds the configuration for our
    custom routes'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`<mdg_giftregistry>`: The naming convention for this tag is to match the module
    name and is the unique identifier for our route'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`<frontName>`: As we learned in [Chapter 2](ch02.html "Chapter 2. Magento Fundamentals
    for Developers"), *Magento Fundamentals for Developers*, Magento breaks down the
    URLs into `http://localhost.com /frontName/actionControllerName/actionMethod/`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Once we have defined our route configuration, we need to create an actual controller
    to handle all the incoming requests.
  prefs: []
  type: TYPE_NORMAL
- en: The index controller
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Our first step is to create `IndexController` under our module controllers directory.
    Magento will always try to load `IndexController` if no controller name is specified.
  prefs: []
  type: TYPE_NORMAL
- en: 'The file location is `app/code/local/Mdg/Giftregistry/controllers/Index.php`.
    Refer to the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: 'After creating our file, if we go to `http://localhost.com/giftregistry/index/index`,
    we should see a blank page with a message saying, **This is our test controller**.
    This is because we are not properly loading the layout of our customer controller.
    The file location is `app/code/local/Mdg/Giftregistry/controllers/IndexController.php`.
    We need to change our action code to:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: Before going into the details of what is happening within the controller action;
    let's create the rest of the controllers and corresponding actions.
  prefs: []
  type: TYPE_NORMAL
- en: We will need a controller that takes care of the basic operations for customers
    so they are able to create, manage, and delete their registries. Also, we will
    require a search controller so family and friends can locate the matching gift
    registries, and finally, we will require a view controller for showing the registry
    details.
  prefs: []
  type: TYPE_NORMAL
- en: 'Our first step will be to add the remaining actions to the index controller
    (the file location is `app/code/local/Mdg/Giftregistry/controllers/IndexController.php`):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: Before we start adding all the logic to the index controller, we need to take
    an extra step to prevent not logged in customers to access the `giftregistry`
    functionality. Magento Front Controller is already very useful for handling this;
    it's called the `preDispatch()` function, which is executed before any other action
    in the controller.
  prefs: []
  type: TYPE_NORMAL
- en: Open your `IndexController.php` and add the following code at the beginning
    of the class.
  prefs: []
  type: TYPE_NORMAL
- en: 'The file location is `app/code/local/Mdg/Giftregistry/controllers/IndexController.php`.
    Refer to the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: Now, if we try to load `http://localhost.com/giftregistry/index/index`, we will
    be redirected to the login page unless we are logged in to the frontend.
  prefs: []
  type: TYPE_NORMAL
- en: Our next step will be to add all the logic to each of the controller actions
    so the controller can properly handle creation, update, and deletion.
  prefs: []
  type: TYPE_NORMAL
- en: The index, new, and edit actions are mostly used to load and render the layout,
    so there is not much logic involved in controller, `newPostAction()`, `editPostAction()`,
    and `deleteAction()`; on the other hand, they handle a heavier and more complicated
    logic.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s get started with `newPostAction()`. This action is used to handle the
    data received from the `newAction`() form. To do so, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Open `IndexController.php`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The first thing we will add to the action is an `if` statement to check if
    the request is a post-request, which we can retrieve by using the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: 'In addition to that, we also want to check that the request has actual data;
    for that, we can use the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: 'Once we have validated that, the request is a proper request, and while we
    are receiving data, we need to actually create gift registry. To do so, we will
    add a new function inside our registry model by following these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the registry entity model.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a new function called `updateRegistryData()` and make sure the function
    takes two parameters: `$customer` and `$data`.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The file location is `app/code/local/Mdg/Giftregistry/Model/Entity.php`. Add
    the following code inside this function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: 'This function will help us out by adding the form data into the current instance
    of the registry object, which means we need to create one inside our controller.
    Let''s put the code for our controller together:'
  prefs: []
  type: TYPE_NORMAL
- en: 'The file location is `app/code/local/Mdg/Giftregistry/controllers/IndexController.php`.
    Refer to the following code snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: We have created a very basic controller action that will handle the registry
    creation and that will handle most of the possible exceptions.
  prefs: []
  type: TYPE_NORMAL
- en: Let's continue by creating `editPostAction`; this action is very similar to
    the `newPostAction`. The main difference is that in the case of `editPostAction`,
    we are working with an already existing registry record, so we will need to add
    some validation before setting the data.
  prefs: []
  type: TYPE_NORMAL
- en: 'The file location is `app/code/local/Mdg/Giftregistry/controllers/IndexController.php`.
    Let''s take a closer look at the following action code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: As we can see, this code is pretty much the same as our `newPostAction()` controller
    with the critical distinction that it tries to load an existing registry before
    updating the data.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Here's a challenge for you. Since the code between `editPostAction()` and `newPostAction()`
    are very similar, try combining both into a single post action that can be reused.
    To see the answer with the complete code and full breakdown, visit [http://www.magedevguide.com/challenge/chapter4/3](http://www.magedevguide.com/challenge/chapter4/3).
  prefs: []
  type: TYPE_NORMAL
- en: To finalize `IndexController`, we need to add an action that allows us to delete
    a specific registry record; for that, we will use `deleteAction()`.
  prefs: []
  type: TYPE_NORMAL
- en: Thanks to the Magento ORM system, this process is really simple, as Magento
    models inherit the `delete()` function, which as the name implies will simply
    delete that specific model instance.
  prefs: []
  type: TYPE_NORMAL
- en: 'The file location is `app/code/local/Mdg/Giftregistry/controllers/IndexController.php`.
    Inside `IndexController`, add the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: 'The important actions to notice in our delete controller are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: We check for the right type of request into our action.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We instantiate the registry object and verify if it is a valid one.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Finally, we call the `delete()` function on the registry instance.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You might notice by now that since we have made a critical omission, there is
    no way to add an actual product to our cart.
  prefs: []
  type: TYPE_NORMAL
- en: We will be skipping that particular action for now, and we will create it after
    we have a better understanding of the blocks and layouts involved and how it interacts
    with our custom controllers.
  prefs: []
  type: TYPE_NORMAL
- en: The search controller
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Now that we have a working `IndexController` that will handle most of the logic
    for modifying actual registries, the next controller that we will create is `SearchController`.
    To do so, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a new controller under the controllers directory with the name `SearchController`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The file location is `app/code/local/Mdg/Giftregistry/controllers/SearchController.php`.
    Copy the following code into the search controller:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: We will leave `indexAction` for now, and we will focus on the logic involved
    in `resultsAction()` , which will be taking the search parameters and loading
    a registry collection.
  prefs: []
  type: TYPE_NORMAL
- en: 'The file location is `app/code/local/Mdg/Giftregistry/controllers/SearchController.php`.
    Let''s take a look at the complete action code and break it down:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: As with previous actions, we are taking the request parameters, but in this
    particular case, we load a gift registry collection and apply a field filter for
    each of the available fields. One thing to stand out is that this is the first
    time we are interacting with the layout directly from a Magento controller.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: What we are doing here is making the loaded registry collection available to
    that particular block instance.
  prefs: []
  type: TYPE_NORMAL
- en: The view controller
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Finally, we need a controller that allows displaying registry details regardless
    of whether a customer is logged in or not. Follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a new controller under the controllers directory with the name `ViewController`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Open the controller that we just created and refer to the following placeholder
    code (the file location is `app/code/local/Mdg/Giftregistry/controllers/ViewController.php`):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: 'So here we are using a new function, `Mage::register()`, which is setting a
    global variable that we can later retrieve into the application flow by any method.
    This function is part of the Magento Registry pattern that is compromised of the
    following three functions:'
  prefs: []
  type: TYPE_NORMAL
- en: '`Mage::register()`: This function is used to set global variables'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Mage::unregister()`: This function is used to unset global variables'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Mage::registry()`: This function is used to retrieve global variables'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We are using the registry function in this case to provide access to the registry
    entity further ahead the application flow and particularly in the view block that
    we will be creating next.
  prefs: []
  type: TYPE_NORMAL
- en: Block and layouts
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As we learned in [Chapter 2](ch02.html "Chapter 2. Magento Fundamentals for
    Developers"), *Magento Fundamentals for Developers*, Magento separates its view
    layer into blocks, templates, and layout files. Blocks are objects that handle
    parts of the logic. Templates are `phtml` files that are a mix of HTML and PHP
    code. Layout files are XML files that control the position of blocks.
  prefs: []
  type: TYPE_NORMAL
- en: 'Each module has its own layout file that is in charge of updating that specific
    module layout. We need to start by creating a layout file for our module by following
    these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Navigate to `app/design/frontend/base/default/layout/`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a file named `mdg_giftregistry.xml`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following code (the file location is `app/design/frontend/base/default/layout/mdg_giftregistry.xml`):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Note that by adding our templates and layouts to the base/default theme, we'll
    make our templates and layouts available to all stores and themes.
  prefs: []
  type: TYPE_NORMAL
- en: If we take a closer look at the XML we just pasted, we can see that we have
    a default `<xml>` tag and several other sets of tags. As we mentioned earlier,
    in Magento, routes are formed by a frontend name, a controller, and an action.
  prefs: []
  type: TYPE_NORMAL
- en: Each of the XML tags in the layout file represents one of our controllers and
    actions; for example, `<giftregistry_index_index>` will control the layout of
    our `IndexController` action; Magento assigns each page a unique handle.
  prefs: []
  type: TYPE_NORMAL
- en: 'In order for Magento to recognize our layout file, we need to declare the layout
    file inside the `config.xml` file by following these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Navigate to the `extension etc/` folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open `config.xml`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following code inside the `<frontend>` node (the file location is `app/design/frontend/base/default/layout/mdg_giftregistry.xml`):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: IndexController blocks and views
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'As we did before, we will start by building the index controller. Let''s define
    which templates and blocks we need to define for each of the actions:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Index**: This is the list of the current customer available registries'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**New**: This provides a new form to capture the registry information'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Edit**: This loads a specific registry data and loads them in the form'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'For the index action, we will need to create a new block called `List.php`.
    Let''s start by creating the registry list block by following these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Navigate to `app/code/local/Mdg/Giftregistry/Block/`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a file named `List.php`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Copy the following code (the file location is `app/code/local/Mdg/Giftregistry/Block/List.php`.):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: The previous code declares our list block that will be used in `IndexController`.
    The blocks declares the `getCustomerRegistries()` method, which will check for
    the current customer and try to retrieve a collection of registries based on that
    customer.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now that we created a new block, we need to add it to our layout XML file:'
  prefs: []
  type: TYPE_NORMAL
- en: Open `mdg_giftregistry.xml`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following code inside `<mdg_gifregistry_index_index>` (the file location
    is `app/design/frontend/base/default/layout/mdg_giftregistry.xml`):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: In the layout, we are declaring our block; inside that declaration, we are setting
    the block name, template, and type. If we try loading the index controller page
    right now, since we have not created our template file, we should then see an
    error about the missing template.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s create the template file:'
  prefs: []
  type: TYPE_NORMAL
- en: Navigate to `design/frontend/base/default/template/`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create the `mdg/` folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Inside that folder, create a file called `list.phtml` (the file location is
    `app/design/frontend/base/default/template/mdg/list.phtml`):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: This is the first time we generate a .`phtml` file. As we mentioned before,
    `.phtml` files are just a combination of PHP and HTML code.
  prefs: []
  type: TYPE_NORMAL
- en: In case of the `list.phtml` file, the first thing we are doing is to load a
    collection by calling the `getCustomerRegistries()` method; one thing to notice
    is that we are actually calling `$this->getCustomerRegistries()`, as each template
    is assigned to a specific block.
  prefs: []
  type: TYPE_NORMAL
- en: 'We are missing a couple of important things, which are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: If there are no registries for the current customer, we would only display an
    empty unordered list
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There is no link to delete or edit a specific registry
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: One quick way of checking if the collection has registries is to call the `count`
    function and display an error message if the collection is actually empty.
  prefs: []
  type: TYPE_NORMAL
- en: 'The file location is `app/design/frontend/base/default/template/mdg/list.phtml`.
    Refer to the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: We have added a new `if` statement to check that the collection count is not
    empty and a link to the `IndexController` edit action. Finally, if there are no
    registries to show, we are displaying an error message linking to the new action.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s continue by adding the block and templates for the new action:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the `mdg_giftregistry.xml` layout file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following code inside the `<mdg_gifregistry_index_new>` node (the file
    location is `app/design/frontend/base/default/layout/mdg_giftregistry.xml`):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: Since we are just displaying a form to post the registry information to `newPostAction()`,
    we are just creating a core/template block with the custom template file that
    will contain the form code. Our template file will look like the following code.
  prefs: []
  type: TYPE_NORMAL
- en: 'The file location is `app/design/frontend/base/default/template/mdg/new.phtml`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: 'This time we are doing something new here. We are calling a helper; a helper
    is a class that contains methods that can be reused from blocks, templates, controllers,
    and so on. In our case, we are creating a helper that will retrieve all available
    registry types. Follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Navigate to `app/code/local/Mdg/Giftregistry/Helper`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open the `Data.php` class.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following code inside it (the file location is `app/code/local/Mdg/Giftregistry/Helper/Data.php`):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs: []
  type: TYPE_PRE
- en: Finally, we need to set up the edit template; the edit template will be exactly
    the same as the new template but with one major difference. We will check for
    the existence of a loaded registry and prepopulate the values of our fields.
  prefs: []
  type: TYPE_NORMAL
- en: 'The file location is `app/design/frontend/base/default/template/mdg/edit.phtml`.
    Refer to the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s continue by adding the block and templates for the edit action:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the `mdg_giftregistry.xml` layout file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following code inside the `<mdg_gifregistry_index_edit>` node (the
    file location is `app/design/frontend/base/default/layout/mdg_giftregistry.xml`):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs: []
  type: TYPE_PRE
- en: Once that is set, we can try creating a couple of test registries and modifying
    their properties.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Here's a challenge for you. As with the controller, the edit and new form can
    be combined into a single reusable form. Try to combine them to see the answer
    with the complete code and full breakdown, visit [http://www.magedevguide.com/challenge/chapter4/4](http://www.magedevguide.com/challenge/chapter4/4).
  prefs: []
  type: TYPE_NORMAL
- en: SearchController blocks and views
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'For our search controller, we will need a search template for our index. For
    the results, we can actually reuse the registry list template by simply making
    a change to our controller by following these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Navigate to the template folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a file called `search.phtml`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following code (the file location is `app/design/frontend/base/default/template/mdg/search.phtml`):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs: []
  type: TYPE_PRE
- en: 'A couple of things to notice:'
  prefs: []
  type: TYPE_NORMAL
- en: We are using the helper model to populate the `Event` type IDs
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We are posting directly to the search/results
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Now, let''s make the appropriate change to our layout file:'
  prefs: []
  type: TYPE_NORMAL
- en: Open `mdg_giftregistry.xml`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following code inside `<mdg_gifregistry_search_index>` (the file location
    is `app/design/frontend/base/default/layout/mdg_giftregistry.xml`):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs: []
  type: TYPE_PRE
- en: For the search results, we don't need to create a new block type since we are
    passing the results collection directly to the block. In the layout, our changes
    will be minimal, and we can reuse the list block for displaying the search registry
    results.
  prefs: []
  type: TYPE_NORMAL
- en: However, we do need to make a change in the controller. We need to change the
    function from `setResults()` to `setCustomerRegistries()`.
  prefs: []
  type: TYPE_NORMAL
- en: 'The file location is `app/code/local/Mdg/Giftregistry/controllers/SearchController.php`.
    Refer to the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE63]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, let''s update the layout files by following these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Open `mdg_giftregistry.xml`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following code inside `<mdg_gifregistry_search_results>` (the file
    location is `app/design/frontend/base/default/layout/mdg_giftregistry.xml`):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE64]'
  prefs: []
  type: TYPE_PRE
- en: And that would be the end of our `SearchController` template; however, there
    is a problem that our search results are displaying. For the delete and edit links
    of a registry, we need a way to restrict these links only to the owner.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can do that with the following `Helper` function:'
  prefs: []
  type: TYPE_NORMAL
- en: 'The file location is `app/code/local/Mdg/Giftregistry/Helper/Data.php`. Refer
    to the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE65]'
  prefs: []
  type: TYPE_PRE
- en: And let's update our template to use the new `helper` method.
  prefs: []
  type: TYPE_NORMAL
- en: 'The file location is `app/design/frontend/base/default/template/mdg/list.phtml`.
    Refer to the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE66]'
  prefs: []
  type: TYPE_PRE
- en: ViewController block and views
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'For our view, we just need to create a new template file and a new entry in
    the `layout.xml` file:'
  prefs: []
  type: TYPE_NORMAL
- en: Navigate to the template directory.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a template called `view.phtml`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following code (the file location is `app/design/frontend/base/default/template/mdg/view.phtml`):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE67]'
  prefs: []
  type: TYPE_PRE
- en: Update the layout XML file, `<mdg_gifregistry_view_view>`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE68]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Here's a challenge for you. Improve the view form to return an error if there
    is not an actual loaded registry. To see the answer with the complete code and
    full breakdown, visit [http://www.magedevguide.com/challenge/chapter4/5](http://www.magedevguide.com/challenge/chapter4/5).
  prefs: []
  type: TYPE_NORMAL
- en: Adding products to the registry
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We are almost at the end of the chapter, and we are yet to cover how to add
    products to our registries. Due to space concerns in this book, I decided to move
    this section to [http://www.magedevguide.com/chapter6/adding-products-registry](http://www.magedevguide.com/chapter6/adding-products-registry).
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we have covered a lot of ground. We have learned how to extend
    the frontend of Magento and how to work with routes and controllers.
  prefs: []
  type: TYPE_NORMAL
- en: The Magento layout system allows us to modify and control blocks and display
    it on our store. We also started working with Magento Data models, and we learned
    how to use them, as well as how to handle and manipulate our data.
  prefs: []
  type: TYPE_NORMAL
- en: We have only touched the surface of the frontend development and of the Data
    models. In the next chapter, we will expand a little bit more on the topics of
    configuration, models, and data, and we will explore and create an admin section
    on the Magento backend.
  prefs: []
  type: TYPE_NORMAL
