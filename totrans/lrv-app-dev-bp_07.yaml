- en: Chapter 7. Creating a Newsletter System
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover an advanced newsletter system, which will use
    Laravel''s `queue` and `email` libraries. After this section, we will learn how
    to set and fire/trigger queued tasks, and how to parse e-mail templates and send
    mass e-mails to subscribers. The topics covered in this chapter are:'
  prefs: []
  type: TYPE_NORMAL
- en: Creating a database and migrating the subscriber's table
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a subscriber's model
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating our subscription form
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Validating and processing the form
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a queue system to process the e-mail
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using the Email class to process e-mails inside the queue
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Testing the system
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Sending e-mails with the queue directly
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In this chapter, we will be using third-party services, which will require access
    to your script, so before proceeding, make sure your project is available online.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a database and migrating the subscribers table
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: After successfully installing Laravel 4 and defining database credentials from
    `app/config/database.php`, create a database called `chapter7`.
  prefs: []
  type: TYPE_NORMAL
- en: 'After creating the database, open up your terminal and navigate through your
    project folder, and run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding command will generate a new MySQL migration named `subscribers`
    for us. Now navigate to the `migrations` folder in `app/database/` and open up
    the migration file just created by the preceding command, and change its contents
    as shown in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: For this chapter, we will only need the `email` column, which will hold the
    e-mail address, of the subscribers. I set this column to be, at most, 100 characters
    long, having datatype `VARCHAR,` and it is not to be left as null.
  prefs: []
  type: TYPE_NORMAL
- en: 'After saving the file, run the following command to execute migration:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: If no error has occurred, you are ready for the next step of the project.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a subscribers model
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To benefit from Eloquent ORM, the best practice is to create a model.
  prefs: []
  type: TYPE_NORMAL
- en: 'Save the following code in `subscribers.php` at `app/models/`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: We set the table name with the variable `$table`, and columns in which the value
    must be filled by the user are set with the `$fillable` variable. Now that our
    model is ready, we can proceed to the next step, and start creating our controller,
    along with the form.
  prefs: []
  type: TYPE_NORMAL
- en: Creating our subscription form
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now we should create a form to save records to the database and specify its
    properties.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, open your terminal and type the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: This command will generate a `SubscribersController.php` file for you with some
    blank methods in the `app/controllers` directory.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The default controller methods generated by the `artisan` command are not RESTful.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, open up `app/routes.php` and add the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Instead of defining all actions one by one, we can define all actions declared
    on a controller with one line of code. If your method names are usable as `get`
    or `post` actions directly, using the `controller()` method can save a lot of
    time. The first parameter sets the **URI** (**Uniform Resource Identifier**) for
    the controller and the second parameter defines which class in the controllers
    folder will be accessed and defined.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Controllers which are set like this are automatically RESTful.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, let''s create the form''s controller. Remove all methods inside the auto-generated
    class and add the following code in your controller file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: First, we defined the process. It is quite simple here; we named the method
    as `getCreate()` , because we want our `Create` method to be RESTful. We simply
    loaded a view file, which we will be generating in the next step directly.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now let''s create our view file. In this example, I''ve used the Ajax POST
    technique using jQuery. Save this file as `subscribe_form.blade.php` at `app/views/`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding code will produce a simple form as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating our subscription form](graphics/2111_07_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Now that our form is ready, we can continue and process the form.
  prefs: []
  type: TYPE_NORMAL
- en: Validating and processing the form
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that we have the form, we need to validate and store the data. We also need
    to check whether the request is an Ajax request. Also, we need to return successful
    code or error messages back to the form with Ajax methods, so that the end-user
    can understand what has happened at the backend.
  prefs: []
  type: TYPE_NORMAL
- en: 'Save the data inside `SubscribersController.php` at `app/controllers/`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'The following points explain the preceding code:'
  prefs: []
  type: TYPE_NORMAL
- en: With the `ajax()` method of the `Request` class, you can check whether the request
    is an Ajax request or not. If it's not an Ajax request, we are redirected back
    to our subscriber's page (the form itself).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If it's a valid request, then we run our form using the `make()` method of the
    `Validation` class. In this example, I've written the rules directly, but the
    best practice is to set them in models and call them to the controller directly.
    The rule `required` checks whether the field is filled. The rule `email` checks
    if the input is in a valid e-mail format, and lastly, the rule `unique` helps
    us to know whether the value is already on a row or not.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If the form validation fails, we return the first error message directly. Returned
    content will be Ajax's response that will be echoed out into our form page. Since
    the error message is an auto-generated meaningful text message, it's safe to use
    it in our example directly. This message will show all errors from our validation.
    For example, it will echo out if the field is not a valid e-mail address, or if
    the e-mail has been submitted to the database already.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If the form validation passes, we try to add the e-mail to our database with
    the `create()` method of Laravel's Eloquent ORM.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Creating a queue system for basic e-mail sending
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Queues, which are featured in Laravel 4, are one of the best features that
    come with the framework. Imagine you have a long process, such as resizing all
    images, sending mass e-mails, or mass database operations. When you process these,
    they will take time. So why should we wait? Instead we will put these processes
    in a queue. With Laravel v4, this is quite easy to manage. In this section, we
    are going to create a simple queue and loop through the e-mails and will try to
    send an e-mail to each subscriber using the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we need a queue driver for our project. This may be **Amazon SQS**,
    **Beanstalkd**, or **Iron IO**. I chose Iron IO because, currently, it''s the
    only queue driver that supports push queues. Then we need to get the package from
    packagist. Add `"iron-io/iron_mq": "dev-master"` to the `require` key of `composer.json`.
    It should look like the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Now you should run the following command to update/download new packages:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: We need an account from one of the queue services that Laravel officially supports.
    In this example, I'll be using the free **Iron.io** service.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: First, sign up to the website [http://iron.io](http://iron.io).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Second, after you're logged in, create a project named `laravel`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Then, click on your project. There is a key icon that will give you the project's
    credentials. Click on that; it will provide you with `project_id` and `token`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now navigate to `app/config/queue.php`, and change the default key driver to
    iron.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the `queue` file that we opened, there is a key named `iron`, which you will
    be using to fill the credentials. Provide your `token` and `project_id` information
    there, and for the `queue` key, type `laravel`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, open your terminal and type the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'If everything went okay, you will get an output as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Now, when you check the queues tab on the Iron.io project page, you will see
    a new `push` queue generated by Laravel. Because it's a push queue, the queue
    will call us when its time comes.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now we need some methods to catch the `push` request, to marshal it, and to
    fire it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: First, we will need a `get` method to trigger the `push` queue (which will mimic
    the codes to trigger the queue).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following code into your `routes.php` file in the `app` folder:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: This code will make a `push` request to a class called `SendEmail`, which we
    will be creating in further steps.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now we will need a listener to marshal the queue. Add the following code into
    your `routes.php` file in the `app` folder:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: This code will get the `push` request from our queue driver, which will put
    it up in the queue and run.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will need a class to fire up the queue and send e-mails, but first we need
    an e-mail template. Save the code as `test.blade.php` in the `app/views/ emails/`
    directory:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: This is a simple e-mail template that will wrap our e-mail.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now we need a class to fire up the queue and send the e-mail. Save these class
    files directly into the `routes.php` file in the `app` folder:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: The class `SendEmail`, which we have written in the preceding code, will cover
    the queue job that we will be assigning. The method `fire()` is Laravel's own
    method to process the queue event. So when the queue is marshaled, the code inside
    the method `fire()` will be run. We can also pass parameters to `job` as a second
    parameter while we are calling the `Queue::push()` method.
  prefs: []
  type: TYPE_NORMAL
- en: With the help of Eloquent ORM, we have obtained all the subscriber methods from
    the database using the `all()` method, then with a `foreach` loop, we looped through
    all the records.
  prefs: []
  type: TYPE_NORMAL
- en: After `job` is processed successfully, at the bottom, we use the `delete()`
    method so the job won't be started again on the next queue call.
  prefs: []
  type: TYPE_NORMAL
- en: Before digging into the code further, we must learn the basics of Laravel 4's
    new feature, **Email class**.
  prefs: []
  type: TYPE_NORMAL
- en: Using the Email class to process e-mails inside the queue
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Before proceeding further, we need to make sure that our e-mail credentials
    are correct and we have set all the values correctly. Open the `mail.php` file
    in the `app/config/` directory, and fill the settings according to your configuration:'
  prefs: []
  type: TYPE_NORMAL
- en: The parameter driver sets which e-mail driver is to be used; `mail`, `sendmail`,
    and `smtp` are the default mail-sending parameters.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If you are using `smtp`, you will need to fill the `host`, `port`, `encryption`,
    `username`, and `password` fields according to your provider.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You can also set a default from-address with the field `from`, so you won't
    have to type the same address over and over again.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If you're using `sendmail` as the mail-sending driver, you should make sure
    its path in the parameter `sendmail` is correct. Otherwise, the e-mails won't
    be sent.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If you're still testing your application, or you are in a live environment and
    want to test your updates without the risk of sending the wrong/unfinished e-mails,
    you should set `pretend` to `true`, so instead of actually sending the e-mails,
    it will keep them on the logfiles for you to debug.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: While we were looping through all the records, we used Laravel's new e-mail
    sender, the `Mail` class, which is based on the popular component, `Swiftmailer`.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `Mail::send()` method takes three major parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: The first parameter is the path of the e-mail template file in which the e-mail
    will be wrapped
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The second parameter is the variable that will be sent to the view
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The third parameter is a closure function, where we can set the titles `from`,
    `to`, `CC/BCC`, and `attachments`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Additionally, you can also use the method `attach()` to add attachments to the
    e-mail
  prefs: []
  type: TYPE_NORMAL
- en: Testing the system
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'After we set the queue system and the `email` class, we are ready to test the
    code we''ve written:'
  prefs: []
  type: TYPE_NORMAL
- en: First, make sure there are some valid e-mail addresses in the database.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now navigate through your browser and type [http://your-site-url/queue/process](http://your-site-url/queue/process).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'When you see the message `Queue Processed`, this means the queue was sent to
    our queue driver successfully. I want to describe what''s happening here, step
    by step:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: First, we ping our queue driver containing `Queue::push()` with the parameters
    and additional data that we need to queue
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Then, after the queue driver gets our response, it will make a post request
    to our post route `queue`/`push`, which we had set up with the `queue:subscribe`
    artisan command earlier
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: When the `push` request is received from the queue driver by our script, it
    marshals and triggers the queued event
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: After it's triggered, the method `fire()` that is inside the class runs and
    does the job that we assigned to it
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: After a while, if everything went okay, you will start to receive those e-mails
    in your inbox(es).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Sending e-mails with the queue directly
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In some e-mail-sending cases, especially if we are using a third-party SMTP
    and if we are sending user registration, validation e-mails, and so on, queue
    calling may not be the best solution, but it would be great if we could queue
    it directly while sending the e-mails. Laravel's `Email` class also handles this.
    Instead of using `Mail::send()`, if we use `Mail::queue()` with the same parameters,
    the e-mail sending will be done with the help of the queue driver, and the response
    times for the end-user will be faster.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Throughout this chapter, we've created a simple newsletter subscription form
    using Laravel's `Form Builder` class using jQuery's Ajax post methods. We've validated
    and processed the form and saved the data into the database. We've also learned
    how to queue long processes easily with Laravel's `queue` class using a third-party
    queue driver. We've also covered the basics of e-mail sending with Laravel 4.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will be writing a **Q&A** site, which will have a pagination
    system, a tag system, a third-party authentication library, a question and answer
    voting system, options to choose the best answer, and a search system for questions.
  prefs: []
  type: TYPE_NORMAL
