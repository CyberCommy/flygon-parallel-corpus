- en: Chapter 5. Adding a Webcam to Monitor Your Security System
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous chapters, we talked about topics such as sensors connected to
    the Arduino and monitoring from the Raspberry Pi Zero, using a network across
    devices, the importance of our home security projects, and domotics to monitor
    what's happening in the real world. For that, we have a proposal for this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will configure our Raspberry Pi Zero to monitor a web camera
    and install a TTL serial camera to interact with Arduino boards; we will achieve
    that with the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Interaction between Arduino and Raspberry Pi
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Controlling an output connected to Arduino from Raspberry Pi Zero
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Connecting a TTL serial camera to Arduino and saving pictures to a Micro SD
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Detecting motion with the serial TTL camera
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Controlling a snapshot from Raspberry Pi
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Controlling your camera from a web page
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Monitoring your USB camera for security in a network
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Interaction between Arduino and Raspberry Pi
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we will look at how the Raspberry Pi can work as a terminal
    computer to program, not only having the device as a server and deploying pages
    or applications but also have an IDE for programming the Arduino board. To do
    this we need to have the Raspberry Pi connected to the Arduino, so that they can
    communicate with each other.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here are some interfaces that the Raspberry Pi has, all of these which included
    in the device: I2C protocol, SPI communication, USB ports, and serial **UART**
    ports. In this case, we will use the USB port to communicate between Arduino and
    the Raspberry Pi.'
  prefs: []
  type: TYPE_NORMAL
- en: 'These are the steps to configure Arduino and Raspberry Pi to interact with
    each other:'
  prefs: []
  type: TYPE_NORMAL
- en: Install Arduino IDE for the Raspberry Pi
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open your terminal with PuTTY and check the IP address of your Raspberry Pi
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Execute remote access, and type the IP address
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open Arduino IDE in the graphical interface
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Installing Arduino IDE in Raspbian
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Type the following command to install Arduino IDE on the Raspberry Pi:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Remote access to Raspberry Pi
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this section, we will look at the screen to access the Remote desk to execute
    the Arduino IDE installed in the Raspian operating system: once the screen pops
    up, type your username and password:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Remote access to Raspberry Pi](graphics/B05170_05_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Executing Arduino in a graphical interface
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Now that we have the main screen, we go to the **Programming** menu, and if
    we see the icon to enter the Arduino IDE, everything is installed. Click on the
    icon of the **Arduino IDE**:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Executing Arduino in a graphical interface](graphics/B05170_05_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Arduino interface in Raspian
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Here we have the interface of the Arduino IDE, similar to the ones we have
    in a computer. From the Arduino IDE running in the Raspberry Pi, we can interact
    between both boards:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Arduino interface in Raspian](graphics/B05170_05_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Preparing the interface
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We need to verify that we selected the proper board; in this case, we''re using
    an Arduino UNO. Select the board in the following window:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Preparing the interface](graphics/B05170_05_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Selecting the serial port
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'After we have selected the board that we will use, we need to verify and select
    the port that will communicate with our Arduino connected to the USB port of the
    Raspberry Pi; we need to select the name port: `/dev/ttyACM0`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Selecting the serial port](graphics/B05170_05_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Downloading a sketch from the graphical interface
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The main thing that we need is to communicate with Arduino from our Raspberry
    Pi Zero and download the sketch to the Arduino board without using a computer,
    so that we can use our Raspberry Pi for other purposes.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following screenshot shows you the interface with the sketch:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Downloading a sketch from the graphical interface](graphics/B05170_05_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'We should download the sketch in the interface. The following image shows the
    connected Arduino-Raspberry Pi: that''s cool!'
  prefs: []
  type: TYPE_NORMAL
- en: '![Downloading a sketch from the graphical interface](graphics/image_05_007.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Controlling an output connected to Arduino from Raspberry Pi Zero
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now we will look at an example of controlling an output from the Raspberry Pi,
    using Python.
  prefs: []
  type: TYPE_NORMAL
- en: 'First we need to download the sketch to the Arduino board. To test our communication,
    we will show an example of testing the link between the Arduino and the Raspberry
    Pi:'
  prefs: []
  type: TYPE_NORMAL
- en: 'We declare the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'We start with the setup in the program:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Then we mention the output pin:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Start the serial communication at 9600:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Declare the loop of the program:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'This is where we check weather serial port is available or not:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'If something found it reads something and saves the content in `c` variable:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'If it reads a letter `H` which is marked for high:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: The output will turn on the LED connected to pin **13**
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'In case it reads a letter `L` which is marked for low:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'The output will turn off the LED connected to pin **13**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Controlling the Arduino board from Python
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'First we need to install the serial library, as this helps to communicate with
    Arduino via the USB port communication. Type the following command to install
    the library:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: The following code controls Arduino from Raspberry Pi; you can now either copy
    the code inside a file called `ControlArduinoFromRasp.py`, or just get the complete
    code from the folder for this project.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following snippet imports the serial library in Python:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'We define the serial communication:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'Print a message to see that the communication is done:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'While this executes, the user can enter a command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'If it''s an `H` it prints the message; in case it is false it displays LED
    off:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'Close the connection:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: Hardware connections
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'This is the LED connected to Arduino UNO, and it can be controlled from the
    Raspberry Pi using Python:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Hardware connections](graphics/B05170_05_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Connecting a TTL serial camera to Arduino and saving pictures to a micro SD
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Here we have the schema, with the connections of the micro SD card with the
    TTL serial camera; I use a camera model from Adafruit. The following link has
    all the information you need, [https://www.adafruit.com/product/397](https://www.adafruit.com/product/397).
    In the following image, we have the connections of the project:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Connecting a TTL serial camera to Arduino and saving pictures to a micro
    SD](graphics/image_05_009.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Now we will explain how to take a picture and save it to a micro SD; the main
    idea is to connect a camera to the Arduino, so we can implement this in a system
    monitoring for home security.
  prefs: []
  type: TYPE_NORMAL
- en: The following is the code for testing the TTL camera, taking a picture, and
    saving it on a micro SD. Note that the code is too long, but I will be explaining
    the most important and necessary code to do the previous actions. All the code
    for these examples is included with the book for more complete information.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here we have the import files from the TTL camera, and the files to communicate
    with the micro SD:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'We define the library software to communicate via serial:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'define the `chipSelect` to pin 10:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'The code will pin for connections:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'Then we will need to start the camera:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'Here we define the image size:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'This will display the image size:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'The code  will take a picture:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'Create the file to save the image taken:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'Code to save the file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'Prepare the micro SD to save the files:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'Open the file taken for prewview:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'To show the size of the image taken:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'Read the data from the file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'Write the file into the memory:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'Display the file on the screen:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: 'Display the number of bytes read:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: 'Close the file which is open:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: Detecting motion with the serial TTL camera
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Turn on the motion detection of TTL camera:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: 'Verify if the motion is activated:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: 'What happens when motion is detected by the camera:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: 'If motion is detected, take the picture or display the message:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: Controlling a snapshot from Raspberry Pi
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now that we have seen how to communicate between Arduino and Raspberry Pi,
    to control the board, we can apply this to our security system project. We need
    to do this for communicating with and controlling our camera from the Raspberry
    Pi:'
  prefs: []
  type: TYPE_NORMAL
- en: Connect the Arduino and Raspberry Pi to each other
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Create a serial connection at 9,600 mbps
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Call the function that will take the picture and save it in the micro SD
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'On the Raspberry Pi we need to do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Create the script for calling the function in the Arduino that will take the
    picture
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Open and execute the script using your PuTTY terminal
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following section is the sketch that should be download in the Arduino
    board:'
  prefs: []
  type: TYPE_NORMAL
- en: 'First we start the serial communication:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: 'This is the function that will tell the camera to take the picture:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: Code for the function to take a picture
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Here we discuss the code to define the function that will prompt the camera
    to take the picture.
  prefs: []
  type: TYPE_NORMAL
- en: 'The function has the code that will take the picture:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: 'Take a picture:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: 'Here we create the file to save:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: 'Here we save the file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: 'Prepare the micro SD to save the files:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: 'Open the file for preview:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: 'Get the size of the file before saving:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: 'Read the data from the file that was saved:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: 'Write the file into the memory:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: 'Display the file after saving:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: 'Display the number of bytes read:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: 'Close the file which are open:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: Controlling your camera from a web page
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this section, we will look ar how to control our camera from a web page
    in PHP and run a web server in the Raspberry Pi. We will need the following to
    run PHP files and web server:'
  prefs: []
  type: TYPE_NORMAL
- en: Running the Apache server on Raspberry Pi
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installing PHP software
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'For the web page, for controlling we will have to create our PHP files in the
    following path: `/var/www/html`, for instance we need to edit the `index.php`
    file, and copy the following lines.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The following HTML file includes PHP:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: 'Here we define the function to perform action for taking the picture:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: 'Here we define the action to taken if motion detected:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: Calling the Python scripts from PHP
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this section, we need to call the Python script from the web page and execute
    the file that has the script:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs: []
  type: TYPE_PRE
- en: Code for Python scripts
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'On the server side, that is the Raspberry Pi, we have the Python scripts that
    will be called from the web page:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs: []
  type: TYPE_PRE
- en: 'If everything is configured perfectly, the following page will appear: in your
    favorite browser, type IP address of your `PI/index.php`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Code for Python scripts](graphics/B05170_05_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Monitoring your USB camera for security in a network
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we will create a project that allows us to monitor a USB camera
    that is connected to an Arduino YUN, which has a USB port and includes communication
    with Ethernet and Wi-Fi. So, it has many advantages. We will work on making a
    network between the Raspberry Pi and the Arduino YUN, so the main idea is to monitor
    the camera from a web page, from the Raspberry Pi. The page will be stored in
    the Raspberry Pi.
  prefs: []
  type: TYPE_NORMAL
- en: Configuring Arduino YUN
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We will use a Logitech camera that supports the UVC protocol:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Configuring Arduino YUN](graphics/B05170_05_11-1.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Now we will explain the steps to install our camera in the Arduino YUN:'
  prefs: []
  type: TYPE_NORMAL
- en: Connect the board to your Wi-Fi router
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Verify the IP address of the Arduino YUN
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'After we type the IP address, the following screen appears:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Configuring Arduino YUN](graphics/B05170_05_12-1.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'We will now issue a series of commands at the Command Prompt to complete the
    setup:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Update the package:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs: []
  type: TYPE_PRE
- en: 'Install the UVC protocol:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs: []
  type: TYPE_PRE
- en: 'Install the camera driver:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs: []
  type: TYPE_PRE
- en: 'Download the `Mjpgstreamer`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE63]'
  prefs: []
  type: TYPE_PRE
- en: 'Install the `Mjpgstreamer`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE64]'
  prefs: []
  type: TYPE_PRE
- en: 'To start the camera manually, use the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE65]'
  prefs: []
  type: TYPE_PRE
- en: 'To start the camera automatically, we will use the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Install the `nano` program:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE66]'
  prefs: []
  type: TYPE_PRE
- en: 'Enter the following file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE67]'
  prefs: []
  type: TYPE_PRE
- en: 'Configure the camera with the following parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE68]'
  prefs: []
  type: TYPE_PRE
- en: 'Use the following command to start the service:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE69]'
  prefs: []
  type: TYPE_PRE
- en: Monitoring from the MJPG-STREAMER server
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Once you have accessed the server of the Arduino YUN, type the IP Address of
    your Arduino YUN, `http://Arduino.local:8080`, in your web browser. The results
    of the configuration are shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Monitoring from the MJPG-STREAMER server](graphics/B05170_05_13.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Monitoring the USB camera from the Raspberry Pi
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: With the camera connected to the Arduino YUN, now we can monitor in real time
    from a web page published in the Raspberry Pi.
  prefs: []
  type: TYPE_NORMAL
- en: 'Provide a title for the web page:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE70]'
  prefs: []
  type: TYPE_PRE
- en: 'We call the camera image by putting the IP address of the Arduino YUN:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE71]'
  prefs: []
  type: TYPE_PRE
- en: 'Access the web page from a browser by typing the IP address of the Raspberry
    Pi ( `http://192.168.1.106/index.html`):'
  prefs: []
  type: TYPE_NORMAL
- en: '![Monitoring the USB camera from the Raspberry Pi](graphics/B05170_05_14.jpg)'
  prefs: []
  type: TYPE_IMG
- en: In the next section, we will look how to configure the connected devices and
    the hardware that will be interacting in a network.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following image  represents the network that we created with devices that
    can be monitored; for example, we monitor each room of a house, connect all the
    devices with a Wi-Fi network, and monitor them from the Raspberry Pi:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Monitoring the USB camera from the Raspberry Pi](graphics/image_05_015.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you have learned how to configure a web cam connected to the
    network and monitor your security system for the Internet of Things. We used your
    Arduino Board to connect the security camera, and Raspberry Pi Zero connected
    to the network to monitor the system. In the next chapter, we will integrate our
    system, the Raspberry Pi Zero, with Arduino, to build a complete system-connected
    device and monitor.
  prefs: []
  type: TYPE_NORMAL
