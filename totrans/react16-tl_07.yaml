- en: Isolating Components with Storybook
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'React components are smaller pieces of a larger user interface. Naturally,
    you want to develop your UI components in tandem with the rest of the application.
    On the other hand, experimenting with component changes can prove tricky if the
    only environment you have is inside the larger UI. The focus of this chapter is
    showing you how the Storybook tool can be leveraged to provide an isolated sandbox
    for developing React components. You will learn:'
  prefs: []
  type: TYPE_NORMAL
- en: The importance of isolated component development
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installing Storybook and getting it set up
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Developing components using stories
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bringing components into the application
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The need for isolated component development
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Isolating React components during development can be difficult. Often, the only
    context available to developers and the React components that they're making is
    the application itself. Rarely do things go exactly as planned while a component
    is being developed. Part of the debug process for a React component is, well,
    playing with it.
  prefs: []
  type: TYPE_NORMAL
- en: I often find myself doing weird things in application code to accommodate for
    temporary changes that we make to components as I troubleshoot problems. For example,
    I'll change the type of container element to see if this is what's causing the
    layout issues that I'm seeing; or, I'll change the markup that's internal to the
    component; or, I'll completely fabricate some state or props that the component
    uses.
  prefs: []
  type: TYPE_NORMAL
- en: The point is that there are random experiments that you're going to want to
    perform over the course of developing component. Trying to do this within the
    application that you're building can be cumbersome. This is mostly because you're
    forced to take in everything else around the component, which can be distracting
    when all you care about is seeing what your component does.
  prefs: []
  type: TYPE_NORMAL
- en: Sometimes, I end up creating a whole new page, or a whole new app, just so that
    I can see what my component does all on its own. This is a painful process and
    other people feel the same way, which is why **Storybook** exists. React tools
    exist to automate something for the React developer. With Storybook, you're automating
    a sandboxed environment for you to work with. It also handles all the build steps
    for you, so you can just write a story for your components and see the result.
  prefs: []
  type: TYPE_NORMAL
- en: The best way to think about Storybook is as a site like JSFiddle ([https://jsfiddle.net/](https://jsfiddle.net/))
    or JSBin ([https://jsbin.com/](https://jsbin.com/)). They let you experiment with
    small pieces of code without having to set up and maintain an environment. Storybook
    is like JSFiddle for React that exists as an integral part of your project.
  prefs: []
  type: TYPE_NORMAL
- en: Installing and configuring Storybook
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The first step to using Storybook is installing the global command-line tool.
    It''s installed as a global tool because it can be used with many projects at
    the same time, and it can be used to bootstrap new projects. Let''s start with
    this first step:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Once this installation is done, you have the command-line tool that''s used
    to modify your `package.json` dependencies and generate boilerplate Storybook
    files. Let''s assume that you''ve used `create-react-app` to create a new application.
    Change into your application directory, and use the Storybook command-line tool
    to add Storybook to your current project:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'The `getstorybook` command does a number of things for you when you run it.
    Here''s what you should see as the output when you run this command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'It will try to figure out what type of project you have before adding anything
    because different types of projects will have different organizational requirements.
    `getstorybook` takes this into account. Then, it''ll install dependencies, boilerplate
    files, and add scripts to your `package.json`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'The output tells you have to run the Storybook server within your project.
    Here''s what the `scripts` section of your `package.json` should look like at
    this point:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: We'll look at the `build-storybook` script later on in the chapter; you'll use
    the `storybook` script more often.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, let''s look at the boilerplate files that `getstorybook` has created
    for you. First, you''ll notice that there''s a new `.storybook` directory in the
    top-level directory of your project:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'The two files added are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`addons.js`: This file imports add-on modules for Storybook. By default, the
    actions and links add-ons are used, but these can be removed if they''re not used.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`config.js`: This file imports the stories for this project and configures
    Storybook to use them.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'You''ll also find a new directory called `stories` within your `src` directory:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Remember how `getstorybook` figured out that you''re using `create-react-app`
    with your project? This is how it knows to put the `stories` directory under `src`.
    This is where you''ll find two demo stories to help get you started:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Don''t worry about figuring out what''s going on in this file just yet, we''ll
    get there. These default stories will be replaced by stories that you come up
    with for your component. It''s also helpful to have these default stories in place
    so that you have something to look at when you fire up the Storybook server for
    the first time. Let''s do that now:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'After a few seconds, you should see console output that tells you where the
    server is running so that you can open it in your browser:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Here''s what you should see when you look at the Storybook app in your browser:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/53c9334f-ba6d-4f76-aed5-3a3962bb2bc7.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Here''s a rough breakdown of what you''re looking at:'
  prefs: []
  type: TYPE_NORMAL
- en: The left pane is where you'll find all of your stories. This is where the two
    default Storybook stories are displayed.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The main pane is where you'll see rendered content from the selected story.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The bottom actions pane is where you'll see triggered actions logged.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Let''s try selecting a different story in the left pane:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/76b9a4a5-12c8-4fab-a347-83b36072774e.png)'
  prefs: []
  type: TYPE_IMG
- en: As soon as you change story selections in the left pane, you'll see the rendered
    component output in the main pane. In this case, it's a basic button.
  prefs: []
  type: TYPE_NORMAL
- en: Developing components with stories
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The value of Storybook is that you don't have to set up an application to start
    hacking components. Or, if you already have an application under development,
    you don't have to figure out how to integrate in-progress components into your
    app. Storybook is a tool that enables experimentation. Through the use of add-ons,
    you can test almost any aspect of your component before worrying about integrating
    it into your application.
  prefs: []
  type: TYPE_NORMAL
- en: Experimenting with props
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Perhaps, the most straightforward way to get started with developing components
    in Storybook is to start experimenting with different property values. To do so,
    you just have to create different stories of your component, each with different
    property values.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, let''s take a look at the component that you''re working on:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: There isn't much to this component. It takes four props and renders some HTML
    markup. The `title` and the `content` prop values are simple strings. The `titleStyle`
    and the `contentStyle` props are objects that are assigned to the `style` prop
    of the appropriate HTML element.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s start writing stories for this component. Let''s assume that the same
    approach as the preceding section was used:'
  prefs: []
  type: TYPE_NORMAL
- en: '`create-react-app` is used to create the React application structure and install
    dependencies'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`getstorybook` is used to examine the current project and add the appropriate
    boilerplate and dependencies'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'You can open up `src/stories/index.js` and get started with the `storiesOf()`
    function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'This is the top-level subject that will appear in the left pane when you launch
    the Storybook UI. Underneath this function is where you add individual stories.
    Since you''re currently interested in testing out different property values, the
    stories that you add will be for the purpose of reflecting different property
    values:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'This adds a story called `No Props` to the left pane in Storybook. When you
    click on it, you''ll see what `MyComponent` looks like in the main pane when it''s
    rendered without any props:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/b0588569-8f37-48c7-ad1c-b19b8198d29f.png)'
  prefs: []
  type: TYPE_IMG
- en: 'There''s nothing to see here because both the `title` and the `content` props
    are missing. Since these two values are the only visible rendered content, there''s
    nothing to display. Let''s switch to the next story:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/191017c1-328b-4013-8204-76cbf478f95f.png)'
  prefs: []
  type: TYPE_IMG
- en: 'This time, with the Just "title" story selected, you can see different React
    component output rendered. As the story title suggests, only the `title` property
    is being passed to `MyComponent`. Here''s the code for this story:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'The next story only passes the `content` property. Here is the result:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/888a25e6-b1eb-47ea-be79-7e19bf06f86d.png)'
  prefs: []
  type: TYPE_IMG
- en: 'And here is the code that passes just the `content` property:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'The next story passes both the `title` and the `content` properties to `MyComponent`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/d88b2ede-3ba4-4168-95f5-7544d7e6b640.png)'
  prefs: []
  type: TYPE_IMG
- en: 'And here is the code that renders both of these props in a story:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: At this point, you have three stories for your component and they've already
    proven useful. You've seen how `MyComponent` looks when it's rendered without
    content or without a title, for example. Based on the result, you might decide
    to make both of these props mandatory or to provide default values.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s move onto the style properties next. First, you''ll pass in just the
    `titleStyle` prop, like so:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'Note that you''re also passing the `title` and `content` properties. This way,
    you can see how the styles actually affect the content that''s rendered by `MyComponent`.
    Here''s the result:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/f36bbc51-e0c7-4de7-bc74-e42d4623d055.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Next, you''ll pass just the `contentStyle` prop:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'Here''s what this looks like:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/417a9c5e-ff34-482b-9407-650144cb4aa5.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Finally, let''s pass every possible prop to `MyComponent`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'Here''s what `MyComponent` looks like with every prop passed to it:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/ad8de25f-37c4-4154-bd79-54209d0f9d21.png)'
  prefs: []
  type: TYPE_IMG
- en: You just created seven stories for a simple component. Using the Storybook dev
    server and the Storybook user interface, it's easy to toggle between the different
    stories that you create for your component so that you can easily see the differences
    between them. This works especially well for functional components that only deal
    with props, as you just saw.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here''s all of the stories that you just implemented so that you can see what
    they look like all together:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: What's nice about adding stories where each one has a different prop configuration
    for your component is that it's like taking a static snapshot of your component.
    Then, once you have several stories for your component, you can toggle between
    the snapshots. On the other hand, you might not be ready to start implementing
    several stories this way just yet. If you just want to fiddle around with prop
    values, there's a Storybook add-on called **Knobs**.
  prefs: []
  type: TYPE_NORMAL
- en: 'The Knobs add-on allows you to play with React component prop values through
    form controls in the Storybook UI. Let''s try out this add-on now. The first step
    is installing it in your project:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, you have to tell your Storybook configuration that you want to use the
    add-on. Add the following line to `.storybook/addons.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: Now you can import the `withKnobs` decorator into your `stories/index.js` file,
    which is used to tell Storybook that the stories that follow will use controls
    to play with prop values. You'll also want to import the various types of knob
    controls. These are simple functions that pass values to your components as the
    values in the Storybook UI change.
  prefs: []
  type: TYPE_NORMAL
- en: 'As an example, let''s copy the same storyline as you just implemented for `MyComponent`.
    This time, instead of building a whole bunch of static stories where each one
    sets particular property values, you''ll just add one story that uses the Knobs
    add-on to control prop values. Here is what you''ll need to add as imports:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'Here is the new context for stories, along with a default story that uses knob
    controls to set and change your React component property values:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: The two functions that you imported from the Knobs add-on, `text()` and `object()`,
    are used to set the label for a knob control, and a default value. For example,
    `title` is using the `text()` function with a default string value, while `contentStyle`
    is using the `object()` function with a default style object.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here''s what the result looks like in the Storybook user interface:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/0e07dc05-62de-4056-ad26-dc3a635e7820.png)'
  prefs: []
  type: TYPE_IMG
- en: 'If you look at the bottom pane, you''ll see that there''s a KNOBS tab beside
    the ACTION LOGGER tab. Based on the functions from the Knobs add-on that you used
    to declare your story, these form controls are created. Now you can go ahead and
    play around with component prop values and watch the rendered content change on
    the fly:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/b06e39bd-adf6-4806-beda-87b2cbce7cc6.png)'
  prefs: []
  type: TYPE_IMG
- en: If you end up finding prop values that you like, while experimenting with knob
    fields, you take these values and hardcode them into a story. It's like bookmarking
    a component configuration that works so that you can go back to it later on.
  prefs: []
  type: TYPE_NORMAL
- en: Experimenting with actions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let's shift our attention to another add-on—Actions. This add-on is enabled
    in your Storybook by default. The idea with Actions is that once you select a
    story, you can interact with the rendered page elements in the main pane. Actions
    provide you with a mechanism that logs user interactions in the Storybook UI.
    Additionally, Actions can serve as a general-purpose tool to help you monitor
    data as it flows through your components.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s start with a simple button component:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: The `MyButton` component re
  prefs: []
  type: TYPE_NORMAL
- en: 'nders a `<button>` element and assigns it an `onClick` event handler. The handler
    is actually defined by `MyComponent`; it''s passed in as a prop. So let''s create
    a story for this component and pass it an `onClick` handler function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'Do you see the `action()` function that''s imported from `@storybook/addon-actions`?
    This is a higher-order function—a function that returns another function. When
    you call `action(''my component clicked'')`, you''re getting a new function in
    return. The new function behaves kind of like `console.log()`, in that you can
    assign it a label and log arbitrary values. The difference is that functions created
    by the Storybook `action()` add-on function is that the output is rendered right
    in the actions pane of the Storybook UI:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/15be61dc-fc60-4a15-b122-47298b1d7f2a.png)'
  prefs: []
  type: TYPE_IMG
- en: As usual, the `<button>` element is rendered in the main pane. The content that
    you're seeing in the actions pane is the result of clicking on the button three
    times. The output is the exact same with every click, so the output is all grouped
    under the `my component clicked` label that you assigned to the handler function.
  prefs: []
  type: TYPE_NORMAL
- en: In the preceding example, the event handler functions that `action()` creates
    are useful for as a substitute for actual event handler functions that you would
    pass to your components. Other times, you actually need the event handling behavior
    to run. For example, you have a controlled form field that maintains its own state
    and you want to see what happens as the state changes.
  prefs: []
  type: TYPE_NORMAL
- en: 'For cases like these, I find the simplest and most effective approach is to
    add event handler props, even if you''re not using them for anything else. Let''s
    take a look at an example of this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s start by taking a look at the `defaultProps` of this component. By default,
    this component has two default handler functions for `onChange` and `onRender`—these
    do nothing so that if they''re not set, they can still be called and nothing will
    happen. As you might have guessed, we can now pass `action()` handlers to `MyRangeInput`
    components. Let''s try this out. Here''s what your `stories/index.js` looks like
    now:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'Now when you view this story in the Storybook UI, you should see lots of actions
    logged when you slide the range input slider:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/7c18980a-87db-4227-a3b5-76ae7b9e307f.png)'
  prefs: []
  type: TYPE_IMG
- en: As the slider handle moves, you can see the two event handler functions that
    you've passed to the component are logging the value at different stages of the
    component rendering life cycle. The most recent action is logged at the top of
    the pane, unlike browser dev tools which logs the most recent value at the bottom.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s revisit the `MyRangeInput` code for a moment. The first function that''s
    called when the slider handle moves is the change handler:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: This `onChange()` method is internal to `MyRangeInput`. It's needed because
    the `<input>` element that it renders uses the component state as the single source
    of truth. These are called controlled components in React terminology. First,
    it sets the state of the value using the `target.value` property from the event
    argument. Then, it calls `this.props.onChange()`, passing it the same value. This
    is how you can see the even value in the Storybook UI.
  prefs: []
  type: TYPE_NORMAL
- en: Note that this isn't the right place to log the updated state of the component.
    When you call `setState()`, you have to make the assumption that you're done dealing
    with state in the function because it doesn't always update synchronously. Calling
    `setState()` only schedules the state update and the subsequent re-render of your
    component.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here''s an example of how this can cause problems. Let''s say that instead
    of logging the value from the event argument, you logged the value state after
    setting it:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/64116467-b4fd-4379-a34d-158e29be003e.png)'
  prefs: []
  type: TYPE_IMG
- en: There's a bit of a problem here now. The `onChange` handler is logging the old
    state while the `onRender` handler is logging the updated state. This sort of
    logging output is super confusing if you're trying to trace an event value to
    rendered output—things don't line up! Never log state values after calling `setState()`.
  prefs: []
  type: TYPE_NORMAL
- en: If the idea of calling noop functions makes you feel uncomfortable, then maybe
    this approach to displaying actions in Storybook isn't for you. On the other hand,
    you might find that having a utility to log essentially anything at any point
    in the life cycle of your component without the need to write a bunch of debugging
    code inside your component. For such cases, Actions are the way to go.
  prefs: []
  type: TYPE_NORMAL
- en: Linking stories together
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Links Storybook add-on allows you to link stories together in the same way
    that you would link regular web pages together. Storybook has a navigation pane
    that allows you to switch from story to story. This is useful as a table of contents.
    But when you're reading content on the web, you typically find several links in
    a single paragraph of text. Imagine if the only way to move around on the web
    were to look through the links in the table of contents in each document, it'd
    be painful.
  prefs: []
  type: TYPE_NORMAL
- en: 'For the same reason that embedding links within content on the web is valuable,
    embedding links in Storybook output is valuable: they provide context. Let''s
    take a look at an example of links in action. Like Actions, the links add-on is
    enabled by default when you run the `getstorybook` command in your project. Here''s
    the component that you''ll write stories for:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'This component accepts `headingText` and `children` properties. Now let''s
    write some Storybook stories that are linked together. Here are three stories
    that are all linked to each other within the output pane:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s walk through each of these stories so that you can see how they''re
    linked to each other. First, there''s the default story:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/f5870cd4-8d7c-4af9-89b6-f2db070f02a9.png)'
  prefs: []
  type: TYPE_IMG
- en: 'You can see the rendered content of `MyComponent`, which consists only of heading
    text because you didn''t pass it any children. Moreover, this is just the default
    heading text, as the content rendered below the component explains. The content
    handily links to a story that renders different heading text:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/c749e9bb-4030-467f-a6b5-3a2e774214eb.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Once again, you can see the rendered component with the custom `headingText`
    prop value and a note below the component that links to another story. In this
    case, the link takes the user to a story that passes a child element to `MyComponent`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'There''s also a button that uses the `linkTo()` function to build a callback
    function that takes the user to the linked story instead of the `<LinkTo>` component
    which renders a link:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: Both approaches take a kind argument, but they're omitted here because we're
    linking from within the `MyComponent` kind. The ability to link stories together
    like this takes you a step closer to using Storybook as a tool for documenting
    your React components.
  prefs: []
  type: TYPE_NORMAL
- en: Stories as documentation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Storybook is much more than a convenient place to isolate your components while
    they're developed. With add-ons, it's also an effective tool for documenting your
    components. As your application grows, it's all the more compelling to have something
    like Storybook in place. Other developers are likely going to have to work with
    components that you've created. Wouldn't it be nice if they could look at Storybook
    stories to see the various ways your component can be used?
  prefs: []
  type: TYPE_NORMAL
- en: The last add-on that we'll look at in this chapter is called Info. It provides
    usage info about the component in a nicely-presented format, in addition to the
    standard rendered component output.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s create a couple of components that we want to document. Instead of writing
    every story in `stories/index.js` like you have been throughout this chapter,
    let''s separate your stories into something more consumable:'
  prefs: []
  type: TYPE_NORMAL
- en: '`stories/MyButton.story.js`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`stories/MyList.story.js`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The stories for the two components that you''re about to implement will be
    separated in their own modules, which will be a little easier to maintain going
    forward. Another change that you''ll have to make in order to support this new
    file layout is in `.storybook/config.js`. Here, you''ll have to require your two
    story modules individually:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s take a look at the components now. First, there''s `MyButton`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: 'You can see that `MyButton` defines a `propTypes` property; you''ll see why
    this is important for the Info Storybook add-on shortly. Next, let''s look at
    the `MyList` component:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: This component also defines a `propTypes` property. It defines a `defaultProps`
    property as well so that when the `items` property isn't provided, it has an empty
    array by default so that the call to `map()` still works.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now you''re ready to write stories for these two components. Keeping in mind
    that you also want these stories to serve as the main source of documentation
    for your components, you''ll use the Info add-on for Storybook to give users more
    usage information for any given story. Let''s start with `MyButton.story.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: Here, you're documenting `MyButton` using two stories, each of which show a
    different way to use the component. The first story shows the basic usage and
    the second story shows how to pass a click handler property. The new addition
    to these stories is the call to `withInfo()`. This function is from the Info Storybook
    add-on, and you can pass it some text (markdown supported) that goes into more
    detail about the story. In other words, this is where you document a specific
    use of your component.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now let''s look at `MyList.story.js` before we see what the output of the Info
    add-on looks like in the Storybook UI:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: This looks a lot like the stories defined for `MyButton`—different docs and
    components, same overall structure and approach.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s take a look at the default usage story for `MyButton`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/173851a2-9514-4873-95b8-f97a22cb9643.png)'
  prefs: []
  type: TYPE_IMG
- en: 'As expected, the button is rendered in the output pane so that users can see
    what they''re working with. In the top-right corner of the output pane, there''s
    an info button. When you click on it, you see all of the extra info provided by
    calling `withInfo()` in your story:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/2c317cd2-ae23-4c2a-9426-5ac0f3ec2975.png)'
  prefs: []
  type: TYPE_IMG
- en: 'This reveals all sorts of information about the story, and the component that
    you''re documenting. From top to bottom, here is what it displays:'
  prefs: []
  type: TYPE_NORMAL
- en: Component name
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Story name
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Usage documentation (provided as an argument to `withInfo()`)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Source used to render component
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Properties available to component (read from `propTypes`)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The nice thing about the Info add-on is that it shows your users the source
    used to render the output that they're looking at, and shows the available properties
    if you provide them as prop types. This means that someone who is trying to understand
    and use your components can get the information they need without you, the component
    author, putting in a ton of extra effort.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s take a look at the `MyList` component when it''s passed an array of
    items:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/2395c76a-2243-4bf8-8060-29eb28788f9a.png)'
  prefs: []
  type: TYPE_IMG
- en: 'It renders a list of items that it gets through a prop. Let''s look at the
    info for this story now:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/8d69e330-f9e9-440c-a697-7b86d579b607.png)'
  prefs: []
  type: TYPE_IMG
- en: By looking at the information about this story, you can see at a glance the
    props that this component accepts, what their default values are, and the code
    that was used to generate the example, all in one place. I also like the fact
    that the info pane is hidden by default, meaning that you can navigate through
    stories and look for the end result that you need, and only then worry about the
    details.
  prefs: []
  type: TYPE_NORMAL
- en: Building static Storybook apps
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If you're building component library that you either want to distribute as an
    open source project or as something that's shared with various teams within your
    organization, you can use Storybook as the tool that documents how to work with
    your components. That said, you might not want to have a Storybook server running
    or you might just want to host the Storybook documentation.
  prefs: []
  type: TYPE_NORMAL
- en: In either scenario, you need a static build of the stories that you've written
    for your component library. Storybook provides you with this utility when you
    run the `getstorybook` command.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s continue with the example from the preceding section where you used
    Storybook to document the usage scenarios of your two components. To build your
    static Storybook documentation, all you have to do is run the following command
    from within your project directory:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: 'You should see output that looks like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: Once built, you'll see a new `storybook-static` directory in your project folder.
    Inside, you'll see several files, including the static JavaScript bundles created
    by Webpack and an `index.html` file that you can serve from any web server or
    simply open directly in your web browser.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter was the focus of a tool called Storybook. Storybook provides React
    developers with a sandboxed environment that makes it easy to develop React components
    on their own. This can be difficult when the only environment you have is the
    application that you're working on. Storybook provides a level of development
    isolation.
  prefs: []
  type: TYPE_NORMAL
- en: First, you learned how to install the global Storybook command-line utility
    and how to use this utility to get Storybook set up in your `create-react-app`
    projects. Next, you learned how to write stories that show different perspectives
    of a component.
  prefs: []
  type: TYPE_NORMAL
- en: Then, you learned that a good portion of Storybook functionality comes from
    add-ons. You learned that Actions help with logging and that links provide a mechanism
    for navigation beyond the default. You also learned how to write documentation
    for React components using Storybook. We closed the chapter with a look at building
    static Storybook content.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, you'll explore the React tooling available within web browsers.
  prefs: []
  type: TYPE_NORMAL
