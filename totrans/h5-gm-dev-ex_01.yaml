- en: Chapter 1. Introducing HTML5 Games
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Hyper-Text Markup Language, HTML, has been shaping the Internet in the last
    few decades. It defines how content is structured in web and the linkage between
    related pages. HTML keeps evolving from version 2 to HTML 4.1, and later XHTML
    1.1\. Thanks to those web applications and social network applications, HTML is
    now on the way to HTML5.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**Cascading Style Sheet** (**CSS**) defines how web pages are presented visually.
    It styles all HTML elements and the styles of their states, such as hover and
    active.'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: JavaScript is the logic controller of the web page. It makes the web page dynamic
    and provides client-side interaction between the page and users. It accesses the
    HTML through **Document Object Model** (**DOM**). It re-styles the HTML elements
    by applying different CSS styles.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: These three receipts bring us the new game market, HTML5 Games. With the new
    power from them, we can design games with HTML5 elements, CSS3 properties, and
    JavaScript to play in the browsers.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we shall:'
  prefs: []
  type: TYPE_NORMAL
- en: Discover new features in HTML5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Discuss what makes us so excited around HTML5 and CSS3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Take a look at what others are playing with HTML5 on game designing
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Preview what games we are going to build in later chapters
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: So let's get started.
  prefs: []
  type: TYPE_NORMAL
- en: Discovering new features in HTML5
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are many new things introduced in HTML5 and CSS3\. Before getting our
    hands dirty in creating the games, let's take an overview of the new features
    and see how we can use them to create games.
  prefs: []
  type: TYPE_NORMAL
- en: Canvas
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Canvas** is an HTML5 element that provides drawing shapes and bitmap manipulation
    functions in low level. We can imagine the Canvas element as a dynamic image tag.
    The traditional`<img>` tag shows a static image. Whether the image is dynamically
    generated or statically loaded from the server, the image is static and will not
    be changed. We can change the`<img>` tag to another image source or apply styles
    to the image, but we cannot modify the image bitmap context itself.'
  prefs: []
  type: TYPE_NORMAL
- en: On the other hand, Canvas is like a client-side dynamic`<img>` tag. We can load
    images inside it, draw shapes there, and interact with it by JavaScript.
  prefs: []
  type: TYPE_NORMAL
- en: Canvas plays an important role in HTML5 game development. It is one of our main
    focuses in this book.
  prefs: []
  type: TYPE_NORMAL
- en: Audio
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Background music and sound effects are often an essential element in game design.
    HTML5 comes with native audio support by the `audio` tag. Thanks to this feature,
    we do not require the proprietary Flash Player to play sound effects in our HTML5
    games. We will discuss the usage of the `audio` tag in Chapter 6, *Building Music
    Games with HTML5 Audio Elements*.
  prefs: []
  type: TYPE_NORMAL
- en: GeoLocation
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**GeoLocation** lets the web page retrieve the latitude and longitude of the
    user''s computer. This feature may not have been so useful years ago when everyone
    was using the Internet with their desktop PC. There are not many things that we
    need the road level location accuracy of the user. We can get the rough location
    by analyzing the IP address.'
  prefs: []
  type: TYPE_NORMAL
- en: These days, more and more users are going on the Internet with their powerful
    smartphones. Webkit and other modern mobile browsers are in everyone's pocket.
    GeoLocation lets us design mobile applications and games to play with the location.
  prefs: []
  type: TYPE_NORMAL
- en: Location-based services have been used in several social networking applications
    such as foursquare ([http://foursquare.com](http://foursquare.com)) and Gowalla
    ([http://gowalla.com](http://gowalla.com)). The success of this type of location-based
    social community creates a trend of using location services with our smartphone.
  prefs: []
  type: TYPE_NORMAL
- en: WebGL
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: WebGL extends the Canvas element by providing a set of 3D graphics API in the
    web browser. The API follows the standard of OpenGL ES 2.0\. The WebGL provides
    a real 3D rendering place for 3D HTML5 games. However, not all browsers natively
    support the WebGL yet at the time of writing this book. Currently only Mozilla
    Firefox 4, Google Chrome, and a nightly build of WebKit browser support it natively.
  prefs: []
  type: TYPE_NORMAL
- en: The technique of creating games for WebGL is quite different from usual HTML5
    game developments. Creating games in WebGL requires handing the 3D models and
    use of API similar to the OpenGL. Therefore, we will not discuss the WebGL game
    development in this book.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following screenshot from Google Body ([http://bodybrowser.googlelabs.com](http://bodybrowser.googlelabs.com))
    demonstrates how they use WebGL to show a 3D human body that responds to the user''s
    input:'
  prefs: []
  type: TYPE_NORMAL
- en: '![WebGL](img/1260_01_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The LearningWebGL ([http://learnwebgl.com](http://learnwebgl.com)) provides
    a collection of tutorials on getting started with WebGL. It is a good starting
    point if you want to learn more on using it.
  prefs: []
  type: TYPE_NORMAL
- en: WebSocket
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: WebSocket is part of the HTML5 spec for connecting the web page to a socket
    server. It provides us with an event-driven connection between the browser and
    server. That means the client does not need to poll the server for new data every
    short period. The server will push updates to the browsers whenever there is any
    data to update. One benefit of this feature is that the game players can interact
    with each other almost in real time. When one player does something and sends
    data to the server, the server will broadcast an event to every other connected
    browser to acknowledge what the player just did. This creates the possibility
    of creating multiplayer HTML5 games.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Due to a security issue, WebSocket is now temporary disabled by Mozilla Firefox
    and Opera. Safari and Chrome may also drop the support on WebSocket until the
    issue is fixed. You can learn more on this issue by visiting the following link:
    [http://hacks.mozilla.org/2010/12/websockets-disabled-in-firefox-4/](http://hacks.mozilla.org/2010/12/websockets-disabled-in-firefox-4/).'
  prefs: []
  type: TYPE_NORMAL
- en: Local Storage
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: HTML5 provides a persistent data storage solution to web browsers.
  prefs: []
  type: TYPE_NORMAL
- en: Local Storage stores key-value paired data persistently. The data is still there
    after the browser terminates. Moreover, the data is not limited to be accessible
    only to the browsers that created it. It is available to all browser instances
    with the same domain. Thanks to Local Storage, we can easily save game status,
    such as progress and earn achievements, locally in web browsers.
  prefs: []
  type: TYPE_NORMAL
- en: HTML5 also provides Web SQL Database. It is a client-side relational database
    and is currently supported by Safari, Chrome, and Opera. With the database storage,
    we can not only store key-value paired data but also complicated relational structures
    that support SQL queries.
  prefs: []
  type: TYPE_NORMAL
- en: Local Storage and Web SQL Database are useful for us to save game state locally
    when creating games.
  prefs: []
  type: TYPE_NORMAL
- en: Besides Local Storage, some other storage approaches are now being supported
    by web browsers. These include Web SQL Database and IndexedDB. These approaches
    support querying the stored data with condition and thus are more powerful for
    supporting a complicated data structure.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can find more information on using the Web SQL Database and IndexedDB in
    the following link from Mozilla: [http://hacks.mozilla.org/2010/06/comparing-indexeddb-and-webdatabase/](http://hacks.mozilla.org/2010/06/comparing-indexeddb-and-webdatabase/).'
  prefs: []
  type: TYPE_NORMAL
- en: Offline application
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Normally we need an Internet connection to browse web pages. Sometimes we can
    browse cached offline web pages. These cached offline web pages usually expire
    quickly. With the next offline application introduced by HTML5, we can declare
    our cache manifest. It is a list of files that will be stored for later access
    without an Internet connection.
  prefs: []
  type: TYPE_NORMAL
- en: With the cache manifest, we can store all the game graphics, game control JavaScript
    files, CSS stylesheets, and the HTML files locally. We can pack our HTML5 games
    as an offline game on the desktop or the mobile device. Players can play the games
    even in airplane mode.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following screenshot from the Pie Guy game ([http://mrgan.com/pieguy](http://mrgan.com/pieguy))
    shows an HTML5 game in iPhone without an Internet connection. Note the little
    airplane symbol indicating the offline status:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Offline application](img/1260_01_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Discovering new features in CSS3
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: CSS is the presentation layer as HTML is the content layer. It defines how the
    HTML looks. We cannot miss the CSS when creating games with HTML5, especially
    for DOM-based games. We may purely use JavaScript to create and style the games
    with a Canvas element. But we need CSS when creating DOM-based HTML5 games. Therefore,
    let's take a look at what is new in CSS3 and how we can use the new properties
    to create games.
  prefs: []
  type: TYPE_NORMAL
- en: Instead of directly drawing and interacting on the Canvas drawing board, new
    CSS3 properties let us animate the DOM in different ways. This makes it possible
    to make more complicated DOM-based browser games.
  prefs: []
  type: TYPE_NORMAL
- en: CSS3 transition
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Traditionally, the style changes immediately when we apply a new style to an
    element. CSS3 transition applies tweening during the style changes of the target
    elements.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, we have a blue box here and want to change it to red when we do
    a mouseover. We will use the following code snippets:'
  prefs: []
  type: TYPE_NORMAL
- en: 'HTML:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'CSS:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'The box changes to red immediately when we do a mouseover. With CSS3 transition
    applied, we can tween the styles with a specific duration and the easing value:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Downloading the example code for this book**'
  prefs: []
  type: TYPE_NORMAL
- en: You can download the example code files for all Packt books you have purchased
    from your account at [http://www.PacktPub.com](http://www.PacktPub.com). If you
    purchased this book elsewhere, you can visit [http://www.PacktPub.com/support](http://www.PacktPub.com/support)
    and register to have the files e-mailed directly to you.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following screenshot shows the box hover effect with the transition applied:'
  prefs: []
  type: TYPE_NORMAL
- en: '![CSS3 transition](img/1260_01_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Since the CSS3 spec is still in draft and not yet fixed, the implementation
    from different browser vendors may have some minor differences to the W3C spec.
    Therefore, browser vendors tend to implement their CSS3 properties with a vendor
    prefix to prevent conflict.
  prefs: []
  type: TYPE_NORMAL
- en: Safari and Chrome use the `-webkit-` prefix. Opera uses the `-o-` prefix. Firefox
    uses the `-moz-` prefix and IE uses the `-ms-` prefix. It is a little complex
    now to declare a CSS3 property, such as box-shadow, with several lines of the
    same rule for several browsers. We can expect the prefix to be eliminated after
    that property spec is fixed.
  prefs: []
  type: TYPE_NORMAL
- en: I will just use the `-webkit-` prefix in most examples to prevent putting so
    many similar lines in the book. It is more important to get the concept instead
    of reading the same rules with different vendors prefixed here.
  prefs: []
  type: TYPE_NORMAL
- en: CSS3 transform
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: CSS3 transform lets us scale the elements, rotate the elements, and translate
    their position. CSS3 transform is divided into 2D and 3D.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can reposition an element with translate:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'or scale the element with scale transformation:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'We can also scale and rotate the elements with CSS3 transform and combine other
    transformations:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'The following screenshots show the CSS3 transform effect when we do a mouseover:'
  prefs: []
  type: TYPE_NORMAL
- en: '![CSS3 transform](img/1260_01_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'CSS3 transform 3D further extends the spaces into three axes and it currently
    works only on Safari and Mobile Safari. The following screenshot from [WebKit.org](http://WebKit.org)
    shows a 3D card flipping effect when we do a mouseover:'
  prefs: []
  type: TYPE_NORMAL
- en: '![CSS3 transform](img/1260_01_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: CSS3 animation
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: CSS3 transition is one type of animation. It declares the tweening animation
    between two styles of the elements.
  prefs: []
  type: TYPE_NORMAL
- en: CSS3 animation is one step further. We can define key frames of an animation.
    Each key frame contains a set of properties that should change at that moment.
    It is like a set of CSS3 transitions applied in sequence to the target element.
  prefs: []
  type: TYPE_NORMAL
- en: 'The AT-AT Walker ([http://anthonycalzadilla.com/css3-ATAT/index-bones.html](http://anthonycalzadilla.com/css3-ATAT/index-bones.html))
    shows a nice demo on creating a skeleton bone animation with CSS3 animation key
    frames, transform, and transition:'
  prefs: []
  type: TYPE_NORMAL
- en: '![CSS3 animation](img/1260_01_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Learning more detail of new HTML5 and CSS3 features
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: HTML5Rocks ([http://html5rocks.com](http://html5rocks.com)) from Google provides
    a solid quick start guide on new HTML5 elements and CSS3 properties.
  prefs: []
  type: TYPE_NORMAL
- en: Apple also showcases how appealing it can be by using HTML5 in the WebKit-based
    browser in their homepage ([http://apple.com/html5](http://apple.com/html5)).
  prefs: []
  type: TYPE_NORMAL
- en: CSS3 Info ([http://www.css3.info](http://www.css3.info)) is a blog with the
    latest CSS3 news. It is a good place to get the latest CSS3 spec status, compatible
    list, and basic CSS3 codes.
  prefs: []
  type: TYPE_NORMAL
- en: The benefit of creating HTML5 games
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We explored several key new features from HTML5 and CSS3\. With these features,
    we can create HTML5 games on browsers. But why do we need to do that? What is
    the benefit of creating HTML5 games?
  prefs: []
  type: TYPE_NORMAL
- en: No third-party plugin required
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: With the native support of all those features in modern browsers, we do not
    require the users to pre-install any third-party plugin in order to play. These
    plugins are not standard. They are proprietary and usually require an extra plugin
    installation that we may not be able to install.
  prefs: []
  type: TYPE_NORMAL
- en: Supporting iOS devices without plugin
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Millions of Apple iOS devices around the world do not support third-party plugins
    such as Flash Player. Despite whatever reason Apple does not allow Flash Player
    running on their Mobile Safaris, HTML5 and related web standard is what they get
    in their browsers. We can reach this user base by creating HTML5 games that optimize
    for mobiles.
  prefs: []
  type: TYPE_NORMAL
- en: Breaking the boundary of usual browser games
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In traditional game designing, we build games within a boundary box. We play
    video games on a television. We play Flash games in web browsers with a rectangle
    boundary.
  prefs: []
  type: TYPE_NORMAL
- en: With creativity, we are not bound in a rectangle game stage any more. We can
    have fun with all the page elements and we can even use many browser windows to
    compose a game. Furthermore, we can even just use the URL bar to create a game
    ([http://probablyinteractive.com/url-hunter](http://probablyinteractive.com/url-hunter)).
    It may sound confusing, but it is because not many web pages have done this yet.
  prefs: []
  type: TYPE_NORMAL
- en: Photojojo ([http://photojojo.com/store/awesomeness/cell-phone-lenses](http://photojojo.com/store/awesomeness/cell-phone-lenses)),
    an online photography store, provides a fun Easter egg feature on their store
    page. There is a switch button on the page with a caption **Do not pull**. When
    the user clicks on it, an orange arm appears from the top with frame-by-frame
    animation. It holds the web page like a holding cloth and pulls the whole page
    up to create a funny scroll-down effect. This is not a game, but it is fun enough
    to demonstrate how we can break the boundary.
  prefs: []
  type: TYPE_NORMAL
- en: '![Breaking the boundary of usual browser games](img/1260_01_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Here is another example named Twitch ([http://reas.com/twitch/](http://reas.com/twitch/))
    from Chrome Experiments. It is a collection of mini games where the player has
    to carry the ball from the starting point to the end point. The fun part is that
    each mini game is a small browser window. When the ball reaches the destination
    point of that mini game, it is transferred into the newly created mini game browser
    to continue the journey. The following screenshot shows the whole map of Twitch
    with the individual web browser:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Breaking the boundary of usual browser games](img/1260_01_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Building HTML5 games
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Thanks to the new features from HTML5 and CSS3, we can now create an entire
    game in the browser. We can control every element in the DOM. We can animate each
    document object with CSS3\. We have Canvas to dynamically draw things and interact
    with them. We have an audio element to handle the background music and sound effects.
    We also have Local Storage to save game data and WebSocket to create a real time
    multiplayers game. Most modern browsers are already supporting these features.
    It is now time to build HTML5 games.
  prefs: []
  type: TYPE_NORMAL
- en: What others are playing with HTML5
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: It is a good chance to study how different HTML5 games perform by watching other
    HTML5 games made with different techniques.
  prefs: []
  type: TYPE_NORMAL
- en: Matching game
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The Match game ([http://10k.aneventapart.com/Uploads/300/](http://10k.aneventapart.com/Uploads/300/))
    demonstrates a beautiful matching game with CSS3 animation and other visual enhancements.
    The game starts when you press the 3D-like CSS button. The cards present at the
    back and the front side are flipped using 3D rotation. The front side patterns
    are fetched dynamically from an online gallery.
  prefs: []
  type: TYPE_NORMAL
- en: '![Matching game](img/1260_01_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Sinuous
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Sinuous ([http://10k.aneventapart.com/Uploads/83/](http://10k.aneventapart.com/Uploads/83/)),
    winner of the 10K Apart, shows us how a simple game idea with proper implementation
    can get people addicted to it. The player controls the big dots in the space with
    the mouse. The aim is to move the dots to avoid the flying comets. It sounds easy
    and simple, but it is definitely addictive and a just-one-more-try game. The game
    is created with a Canvas tag. Players can also play this game with their webkit-enabled
    mobile devices, such as iPhone, iPad, and Android.
  prefs: []
  type: TYPE_NORMAL
- en: '![Sinuous](img/1260_01_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Asteroid-styled bookmarklet
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Erik, a web designer from Sweden, created an interesting bookmarklet. It is
    an asteroid-styled game for any web page. Yes, any web page. It shows an abnormal
    way to interact with any web page. It creates a plane on the website you are reading
    from. You can then fly the plane using arrow keys and fire bullets using the space
    bar. The fun part is that the bullets will destroy the HTML elements on the page.
    Your goal is to destroy all the things on the web page you choose. This bookmarklet
    is another example of breaking the boundary of usual browser games. It tells us
    that we can think outside the box while designing HTML5 games.
  prefs: []
  type: TYPE_NORMAL
- en: The bookmarklet is available for installation at [http://erkie.github.com/](http://erkie.github.com/).
  prefs: []
  type: TYPE_NORMAL
- en: 'The following screenshot shows the plane destroying the content on the web
    page:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Asteroid-styled bookmarklet](img/1260_01_11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Quake 2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Google demonstrates a WebGL HTML5 port of the first person shooter game, Quake
    2\. Players move around using the WSAD key and shoot enemies with their mouse.
    Players can even play with each other in real time by using WebSocket. According
    to Google, the frame-per-seconds of the HTML5 Quake 2 can be up to 60 fps.
  prefs: []
  type: TYPE_NORMAL
- en: '![Quake 2](img/1260_01_12.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The Quake 2 port is available on Google Code at [http://code.google.com/p/quake2-gwt-port/](http://code.google.com/p/quake2-gwt-port/).
  prefs: []
  type: TYPE_NORMAL
- en: RumpeTroll
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: RumpeTroll ([http://rumpetroll.com/](http://rumpetroll.com/)) is an experiment
    of the HTML5 community where everyone gets connected via WebSocket. We can give
    our creatures names and move around through mouse clicks. We can also type anything
    to start a chat. Moreover, we can see what others are doing in real time, thanks
    to the WebSocketInsert.
  prefs: []
  type: TYPE_NORMAL
- en: '![RumpeTroll](img/1260_01_13.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Scrabb.ly
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Scrabb.ly ([http://scrabb.ly](http://scrabb.ly)) is a multiplayer crossword
    board game which won the popularity prize in the Node.js Knockout contest. It
    connects users together with HTML5 WebSocket. This online board game is DOM-based
    and driven by JavaScript.
  prefs: []
  type: TYPE_NORMAL
- en: '![Scrabb.ly](img/1260_01_14.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Node.js (http://nodejs.org) is an event-driven server-side JavaScript. It can
    be used as a server connecting concurrent WebSocket clients.
  prefs: []
  type: TYPE_NORMAL
- en: Aves Engine
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Aves Engine is an HTML5 game development framework developed by dextrose. It
    provides tools and API for game developers building their own isometric browser
    game world with the map editor. The following screenshot captured from the official
    demonstration video shows how it creates an isometric world:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Aves Engine](img/1260_01_15.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The engine also takes care of the 2.5 dimension isometric coordinate system,
    collision detection, and other basic virtual world features. This game engine
    even works well on mobile devices such as iPad and iPhone. The Aves Engine has
    gained a lot of attention since its debut and is now acquired by Zynga Game Network
    Inc, a big social game company.
  prefs: []
  type: TYPE_NORMAL
- en: 'The video demonstration of the Aves Engine is available on YouTube at the following
    link:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://tinyurl.com/dextrose-aves-engine-sneak](http://tinyurl.com/dextrose-aves-engine-sneak)'
  prefs: []
  type: TYPE_NORMAL
- en: Browsing more HTML5 games
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'These examples are just a selected few. The following sites provide updates
    on HTML5 games created by others:'
  prefs: []
  type: TYPE_NORMAL
- en: Canvas Demo ([http://canvasdemo.com](http://canvasdemo.com)) collects a set
    of applications and games using the HTML5 Canvas tag. It also provides a bunch
    of Canvas tutorial resources. It is a good place to start learning Canvas.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: HTML5 games ([http://html5games.com](http://html5games.com)) collect many HTML5
    games and organizes them into categories.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Mozilla Labs hosted a HTML5 game design contest in early 2011 and many great
    games were submitted to the contest. The contest is now over and the list of all
    the entries is at the following link: [https://gaming.mozillalabs.com/games/](http://https://gaming.mozillalabs.com/games/).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The HTML5 Game Jam ([http://www.html5gamejam.com/games](http://www.html5gamejam.com/games))
    is an HTML5 event and the website lists a collection of fun HTML5 games and also
    some useful resources.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What we are going to create in this book
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the following chapters, we are going to build six games. We are going to
    first create a DOM-based Ping Pong game that can be played by two players in the
    same machine. Then we will create a memory matching game with CSS3 animation.
    Later, we will use Canvas to create an untangle puzzle game. Next, we will build
    a music game with audio elements. Then we will create a multiplayer draw and guess
    game with WebSocket. Lastly, we will use the Box2D JavaScript port to create a
    prototype of a physics car game. The following screenshot is of the memory matching
    game that we will build in [Chapter 3](ch03.html "Chapter 3. Building a Memory
    Matching Game in CSS3"), *Building a Memory Matching Game in CSS3*
  prefs: []
  type: TYPE_NORMAL
- en: '![What we are going to create in this book](img/1260_01_16.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We learned a lot in this chapter about basic information of HTML5 games.
  prefs: []
  type: TYPE_NORMAL
- en: 'Specifically, we covered:'
  prefs: []
  type: TYPE_NORMAL
- en: New features from HTML5 and CSS3\. We had a glimpse of what techniques we will
    use to create our games in later chapters. Canvas, audio, CSS animation, and more
    new features were introduced. We will have many new features to play with.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The benefit of creating HTML5 games. We discussed why we want to create HTML5
    games. We want to meet the web standard, meet the mobile devices, and break the
    boundary of a game.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: HTML5 games that others are playing. We listed several existing HTML5 games
    that were created with different techniques that we will use. We can test those
    games before creating our own.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We also previewed the games that we are going to build throughout the book.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Now that we've learned about some background information of HTML5 games, we're
    ready to create our first DOM-based JavaScript-driven game in the next chapter.
  prefs: []
  type: TYPE_NORMAL
