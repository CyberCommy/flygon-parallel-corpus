- en: Active Information Gathering
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Active information gathering can be used to provide very useful results during
    the reconnaissance phase of a penetration test. With this active approach, the
    penetration tester makes a direct connection to the actual target to gather specific
    details that **Open Source Intelligence** (**OSINT**) is unable to provide. Using
    active information gathering, the penetration tester is able to create a very
    detailed profile of the target, gathering information such as the type of operating
    system and running services. This information helps to research and identify vulnerabilities
    in relation to the target, thereby narrowing the scope in choosing specific exploits
    to unleash against it.
  prefs: []
  type: TYPE_NORMAL
- en: For this entire chapter, we will focus on directly engaging the target to gather
    specific details about it in order to help us profile any running services. Understanding
    how to perform active reconnaissance will provide us with vital assistance for
    the exploitation phase. During the information-gathering phase, you'll be able
    to identify vulnerabilities and determine suitable exploits to break into a system
    and network. You will also be able to retrieve sensitive information from network
    devices and systems.
  prefs: []
  type: TYPE_NORMAL
- en: 'During the course of this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Understanding active information gathering
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: DNS interrogation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Scanning
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Nmap
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Hping3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: SMB, LDAP enumeration, and null sessions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Web footprints and enumeration with EyeWitness
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Metasploit auxiliary modules
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The following are the technical requirements for this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Kali Linux: [www.kali.org](http://www.kali.org)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Wireshark: [www.wireshark.org](http://www.wireshark.org)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'JXplorer: [https://github.com/pegacat/jxplorer](https://github.com/pegacat/jxplorer)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'EyeWitness: [https://github.com/FortyNorthSecurity/EyeWitness](https://github.com/FortyNorthSecurity/EyeWitness)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Understanding active information gathering
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Active information gathering uses a direct approach to engage with our target;
    it involves actually making a connection between our machine and the target network
    and systems. By performing active information gathering, we are able to gather
    specific and detailed data such as live hosts, running services and application
    versions, network file shares, and user account information.
  prefs: []
  type: TYPE_NORMAL
- en: Performing active information gathering does pose a risk of detection.
  prefs: []
  type: TYPE_NORMAL
- en: Determining live hosts will give us an idea of the number of devices that are
    online. It doesn't make sense to target an offline device as it would be unresponsive.
    Knowing the operating system and running services on a target helps us to understand
    the role of that device in the network and the resources it provides to its clients.
  prefs: []
  type: TYPE_NORMAL
- en: For example, if we were to find lots of file shares on the target system during
    active information gathering, this could mean that the target may be a file server
    that has a lot of important data on its shared drive. When performing active information
    gathering, the attacker machine (in our case, a Kali Linux-based machine) sends
    special queries to the potential victim in the hope that the victim machine will
    respond by providing some sort of confidential information (such as network shares
    and service versions) in return.
  prefs: []
  type: TYPE_NORMAL
- en: Now that you have a better understanding of what active information gathering
    is, let's dive deep into its practices in the following sections.
  prefs: []
  type: TYPE_NORMAL
- en: DNS interrogation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'As a future cybersecurity professional, understanding the purpose of various
    applications and network protocols is very important. In this section, we are
    going to focus on a particular protocol: **Domain Name System** (**DNS**).'
  prefs: []
  type: TYPE_NORMAL
- en: Let's begin by further understanding the role of DNS and how we can obtain information
    as a penetration tester.
  prefs: []
  type: TYPE_NORMAL
- en: What is DNS and why do we need it on a network?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: DNS is like a telephone directory containing names, addresses, and telephone
    numbers. DNS is used on networksâ€”both the internal networks of organizations and
    external networks across the internet. The DNS protocol is used to resolve hostnames
    (domain names) to IP addresses.
  prefs: []
  type: TYPE_NORMAL
- en: Before DNS, each computer contained a `hosts` file located in the `C:\Windows\System32\drivers\etc`
    directory. This file needed to be updated frequently to ensure that users were
    able to reach various websites or servers by specifying their hostnames or domain
    names. If the `hosts` file was not present, a user needed to specify the IP address
    of the server they would like to visit.
  prefs: []
  type: TYPE_NORMAL
- en: All devices on a network have an assigned IP address. Remembering all of the
    IP addresses for each server or website you want to visit would be quite challenging.
    If the `hosts` file doesn't contain the most up-to-date records of new servers
    and websites, the user would have difficulty in reaching their destination.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following screenshot shows current entries within the `hosts` file of a
    Windows operating system:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/e917ba89-ee3a-46d0-87d6-56818b1b673e.png)'
  prefs: []
  type: TYPE_IMG
- en: Windows hosts file record
  prefs: []
  type: TYPE_NORMAL
- en: DNS helps us to avoid depending on the `hosts` file. Many popular internet companies,
    such as Cisco, Google, and Cloudflare, have established public DNS servers that
    contain records of almost every domain name on the internet. To elaborate further,
    let's use a simple example to help you to understand how DNS works.
  prefs: []
  type: TYPE_NORMAL
- en: 'Imagine you would like to visit a website, such as [www.example.com](http://www.example.com):'
  prefs: []
  type: TYPE_NORMAL
- en: Whenever a computer or device needs to resolve a hostname to an IP address,
    it sends a DNS query message to its DNS server, as indicated in *Step 1* in the
    following screenshot.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The DNS server will check its records and respond with a DNS reply providing
    the client computer with the IP address of the domain, as displayed in *Step 2*
    in the following screenshot.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Finally, the client receives the IP address and establishes a session between
    itself and the `www.example.com` domain, as shown in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/b062ba1c-4040-4a76-a34f-bd46e6318028.png)'
  prefs: []
  type: TYPE_IMG
- en: DNS transactions
  prefs: []
  type: TYPE_NORMAL
- en: 'There are many public DNS servers on the internet; some are malicious in nature,
    capturing your DNS information and redirecting you to harmful websites and domains.
    As a result, I recommend using a trusted DNS provider on all of your networking
    devices and computers to improve your online safety. The following are some popular
    DNS servers on the internet:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Cloudflare DNS: [https://1.1.1.1/](https://1.1.1.1/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Google Public DNS: [https://developers.google.com/speed/public-dns/](https://developers.google.com/speed/public-dns/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Cisco OpenDNS: [https://www.opendns.com/](https://www.opendns.com/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Additionally, DNS servers not only resolve a hostname to an IP address, they
    also contain various records that are used for various types of resolution.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following are the different record types:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/6e4b82f0-90c5-48cb-9e0a-627241b01a4a.png)'
  prefs: []
  type: TYPE_IMG
- en: DNS record types
  prefs: []
  type: TYPE_NORMAL
- en: An example of the **A** record type would be mapping the hostname of `www.example.com`
    to the IPv4 address `93.184.216.34`; the **AAAA** record of the same hostname
    would contain the IPv6 address `2606:2800:220:1:248:1893:25c8:1946`, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: The **`nslookup`** utility is a very useful tool for validating DNS information.
    `nslookup` can perform various tasks, such as resolving each type of DNS record
    for a given domain, and it has the ability to query specific DNS servers.
  prefs: []
  type: TYPE_NORMAL
- en: '**DNS enumeration** is the technique of probing specific DNS records for a
    specific organization''s domain. In other words, we ask a DNS server about the
    IP addresses and server names for a target organization. Additionally, we attempt
    to perform a DNS zone transfer. A **DNS zone transfer** would allow the zone file
    to be copied from a master DNS server to another DNS server, such as a secondary
    DNS server.'
  prefs: []
  type: TYPE_NORMAL
- en: However, DNS server administrators sometimes forget to apply security controls
    to prevent the copying of zone files to unauthorized servers. A successful DNS
    zone transfer can lead to a penetration tester obtaining the corporate network
    layout. In a worst-case scenario (for a targeted organization, that is), an organization
    may not separate the internal and external namespaces on their DNS servers. Such
    misconfigurations can lead to someone obtaining such information for malicious
    purposes.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the following exercises, we are going to attempt the extraction of various
    DNS records for a given domain:'
  prefs: []
  type: TYPE_NORMAL
- en: DNS enumeration
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: DNS zone transfer
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using the `host` utility to perform DNS analysis
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: DNS interrogation using **Fierce**
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let's dive in and have some fun with DNS and Kali Linux!
  prefs: []
  type: TYPE_NORMAL
- en: Performing DNS enumeration and zone transfer using dnsenum
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'dnsenum is a very simple and easy-to-use tool for enumerating and resolving
    DNS information for a given target. Additionally, it has the ability to automatically
    perform DNS zone transfers using the **nameserver** details:'
  prefs: []
  type: TYPE_NORMAL
- en: Open a new Terminal window and execute the `dnsenum` command. The Help menu
    appears, providing detailed descriptions of various operators/parameters and their
    use.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Use the `dnsenum zonetransfer.me` command to perform DNS enumeration on the
    `zonetransfer.me` domain, as shown in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/4195abba-027d-480e-97fd-800e33abba18.png)'
  prefs: []
  type: TYPE_IMG
- en: dnsenum
  prefs: []
  type: TYPE_NORMAL
- en: dnsenum will attempt to obtain all of the servers and hostnames for the given
    domain. We are able to obtain the nameservers, mail servers (used for email exchange),
    and IP addresses for each server and hostname found.
  prefs: []
  type: TYPE_NORMAL
- en: 'dnsenum will attempt to perform a DNS zone transfer by querying the specific
    nameservers found during the enumeration process, as shown in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/f5f241fe-9328-4b4f-896e-082f394169bf.png)'
  prefs: []
  type: TYPE_IMG
- en: DNS zone transfer
  prefs: []
  type: TYPE_NORMAL
- en: As in the preceding snippet, the dnsenum tool was able to successfully extract/replicate
    the **master zone records** from the `nsztml.digi.ninja` nameserver. Using the
    information found, a penetration tester will have better insights into the target
    organization's (`zonetransfer.me`) internal and external network devices.
  prefs: []
  type: TYPE_NORMAL
- en: Access to sensitive information such as what we have found can potentially lead
    to a successful network breach in the target organization.
  prefs: []
  type: TYPE_NORMAL
- en: Up next, we will attempt to perform DNS analysis using a native Linux tool.
  prefs: []
  type: TYPE_NORMAL
- en: Using the host utility to perform DNS analysis
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `host` utility is native to the Linux operating system and can help us
    to obtain various DNS information about a target domain:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open a new Terminal on Kali Linux and execute the `host zonetransfer.me` command;
    the `host` tool will attempt to obtain the DNS records, such as the **A** and
    **MX** records, for the domain:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/bb8cb216-fd91-4deb-8354-669c799333d1.png)'
  prefs: []
  type: TYPE_IMG
- en: Retrieving DNS records using host
  prefs: []
  type: TYPE_NORMAL
- en: 'Use the `host -t ns zonetransfer.me` command to attempt enumeration by obtaining
    the nameservers for the domain. The `-t` operator allows you to specify the DNS
    record:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/8df4df6e-b71b-45c0-8215-4a0679b422ef.png)'
  prefs: []
  type: TYPE_IMG
- en: Nameserver records
  prefs: []
  type: TYPE_NORMAL
- en: 'Now that we have obtained the nameservers for the domain, let''s use the information
    we have gathered so far. Let''s attempt to perform a DNS zone transfer by querying
    nameservers for the domain by using the `host -l zonetransfer.me nsztml.digi.ninja`
    command, as shown in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/8bedac8b-859f-4508-9ae7-4b8f86edc438.png)'
  prefs: []
  type: TYPE_IMG
- en: DNS zone transfer with host
  prefs: []
  type: TYPE_NORMAL
- en: Be sure to query all nameservers for a given domainâ€”sometimes, one server may
    be misconfigured even though the others are secured.
  prefs: []
  type: TYPE_NORMAL
- en: Now that you have the skills to perform DNS enumeration and zone transfers,
    let's attempt to discover subdomains using DNS.
  prefs: []
  type: TYPE_NORMAL
- en: Finding subdomains with dnsmap
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**dnsmap** works a bit differently from the tools we looked at in the previous
    examples. dnsmap attempts to enumerate the subdomains of an organization''s domain
    name by querying a built-in wordlist on the Kali Linux operating system. Once
    a subdomain has been found, dnsmap will attempt to resolve the IP address.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Using the `dnsmap microsoft.com` command, we are able to find subdomains for
    the organization and their corresponding IP addresses:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/150a577c-3a18-46ee-be35-617dd1f91147.png)'
  prefs: []
  type: TYPE_IMG
- en: dnsmap results
  prefs: []
  type: TYPE_NORMAL
- en: As mentioned in a previous section, discovering the subdomains of an organization
    can lead to finding hidden and sensitive portals and directories in a domain.
  prefs: []
  type: TYPE_NORMAL
- en: As you may have noticed, each tool we have used so far gives us a bit more detail.
    In the next section, we will use a more aggressive tool to help us to extract
    more details about a target domain.
  prefs: []
  type: TYPE_NORMAL
- en: DNS interrogation using Fierce
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Fierce is considered a semi-lightweight DNS interrogation tool. It performs
    extensive lookups on IP spaces and hostnames for a given target domain. To use
    Fierce, we can execute the `fierce -dns example.com` command, as shown in the
    following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/f5b43e27-e343-40e5-9fe8-a6f01fe70811.png)'
  prefs: []
  type: TYPE_IMG
- en: Fierce DNS interrogation
  prefs: []
  type: TYPE_NORMAL
- en: Fierce will attempt to obtain all of the DNS records for a given domain and
    discover any subdomains with their corresponding IP addresses. This tool may take
    some time to complete its interrogation, as it implements an in-depth analysis
    of the target domain.
  prefs: []
  type: TYPE_NORMAL
- en: We have now completed the exercises in this section. Next, we will directly
    engage the target to gather more specific details using various scanning techniques.
  prefs: []
  type: TYPE_NORMAL
- en: Scanning
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s take our information gathering phase a bit further than we have done
    before. In this section, we are going to perform various scan types on a target.
    These will include the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Ping sweep
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Operating system and service version detection
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Scanning for host devices that have ICMP disabled
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Performing stealth scanning
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Scanning UDP ports using Nmap
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Performing evasion scanning techniques using Nmap
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The objective of scanning is to identify live hosts on a network, determine
    open and closed ports on a system, identify running services on a target, and
    create a network diagram of the target's network infrastructure. The information
    obtained during the network-scanning phase is key in creating a profile of a target
    organization.
  prefs: []
  type: TYPE_NORMAL
- en: Scanning a target without permission is illegal in many countries. For this
    reason, we will be scanning devices within our lab.
  prefs: []
  type: TYPE_NORMAL
- en: Within a packet, there are many types of TCP flag that are used during communication
    between two or more hosts on a network. As a penetration tester, we can leverage
    certain vulnerabilities within the TCP/IP stack while performing our network scans.
    In other words, we are going to send specially crafted flags to a target to determine
    their port status, operating system, the services running, and their versions;
    we'll also to determine whether a firewall is monitoring inbound or outbound traffic,
    and so on.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following TCP flags are within a packet:'
  prefs: []
  type: TYPE_NORMAL
- en: '`URG`: (**Urgent**) Indicates this packet should be processed immediately'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`PSH`: (**Push**) Sends buffered data immediately'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`FIN`: (**Finish**) Indicates there are no more transmissions to be sent'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ACK`: (**Acknowledgement**) Confirms receipt of a message'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`RST`: (**Reset**) Resets a network connection'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`SYN`: (**Synchronization**) Used to initialize a connection between host devices'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: By using a tool such as Wireshark ([www.wireshark.org](http://www.wireshark.org)),
    you can observe every detail within packets on a network.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following snippet is a capture of a network packet where the `ACK` flag
    is set:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/c5cb2d83-88ca-4217-aa77-c2a4ba04b59c.png)'
  prefs: []
  type: TYPE_IMG
- en: A packet with the ACK flag enabled
  prefs: []
  type: TYPE_NORMAL
- en: Additionally, by observing the details in the packet, you can see the source
    and destination MAC addresses, IP addresses, ports, and other important characteristics.
    Wireshark is considered to be one of the best network protocol analyzers and sniffers
    among network and cybersecurity professionals alike.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we understand the importance of scanning, let's learn about one of
    the most popular scanning tools in the industry, Nmap.
  prefs: []
  type: TYPE_NORMAL
- en: Nmap
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Nmap is free and is one of the most powerful network scanning tools available
    for both Windows and Linux platforms. Nmap can help both network administrators
    and cybersecurity professionals in many ways.
  prefs: []
  type: TYPE_NORMAL
- en: 'Nmap features include the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Creating a network inventory
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Checking for live hosts
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Determining operating systems
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Determining running services and their version
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Identifying vulnerabilities on a host
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Detecting sniffers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Determining whether a firewall is present on a network
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We will go over, to begin with, the basics of Nmap and move gradually on to
    advanced scanning techniques. As penetration testers, we must ensure that we have
    an arsenal of tools that will help us to perform our jobs efficiently. However,
    as professionals, we must also ensure that we are very familiar with, and know
    how to use, each tool available to us.
  prefs: []
  type: TYPE_NORMAL
- en: 'So, we are going to start by performing a basic scan on a target:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s begin by opening a new Terminal and using the following syntax: `nmap
    <target IP or hostname>`.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'We are going to scan a website that has given us legal permission to perform
    a scan. Let''s use the `nmap scanme.nmap.org` command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/73168080-b963-4a51-9621-5977998d41ce.png)'
  prefs: []
  type: TYPE_IMG
- en: Nmap scan 1
  prefs: []
  type: TYPE_NORMAL
- en: By performing a regular scan on a target or network, Nmap checks the 1,000 most
    commonly used TCP/IP ports on the target.
  prefs: []
  type: TYPE_NORMAL
- en: Observing the output, Nmap was able to identify the open ports, determine whether
    the open ports are TCP or UDP, identify the application layer protocols, and find
    out the IP addresses (IPv4 and IPv6) of the target.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Identifying open ports on a target is like discovering an open door into the
    system, and identifying services can help us to narrow our scope in searching
    for, and exploiting, vulnerabilities.
  prefs: []
  type: TYPE_NORMAL
- en: 'To perform a scan on an IPv6 address, you can include the `-6` operator, as
    in: `nmap -6 2600:3c01::f03c:91ff:fel8:bb2f`.'
  prefs: []
  type: TYPE_NORMAL
- en: Nmap isn't that difficult, right? Let's take a few more steps with Nmap in the
    upcoming sections.
  prefs: []
  type: TYPE_NORMAL
- en: Performing a ping sweep with Nmap
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'At times, you may need to identify all live hosts on a network during a penetration
    test. Nmap is able to perform a ping sweep across multiple targets, whether specifying
    a range or an entire subnet. Using the `-sn` operator will allow you to perform
    a ping scan only on the target:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/3266d5e1-d6ed-4c09-9512-3859e5c59b7a.png)'
  prefs: []
  type: TYPE_IMG
- en: Ping sweep with Nmap
  prefs: []
  type: TYPE_NORMAL
- en: In the preceding snippet, Nmap has presented only the hosts that it thinks are
    alive on the network segment and was able to look up the MAC addresses of each
    host to determine the vendor.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you would like to perform a range scan, you can use the following syntax:
    `nmap start ip addr - end ip addr`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'If you would like to scan specific IP devices on a network, use the following
    syntax: `nmap host1 host2 host3`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Nmap also has support for scanning hosts that are listed within a text file
    by using the following syntax: `nmap â€“iL file.txt`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let's now take things up a notch and learn more about how to use Nmap in the
    following section.
  prefs: []
  type: TYPE_NORMAL
- en: Obtaining operating system and service versions using Nmap
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: So far, we have been able to gather basic details about a target. We can use
    Nmap to help users determine the operating system, the operating system version,
    and the service versions of any running applications on a target.
  prefs: []
  type: TYPE_NORMAL
- en: Using the `-A` operator will initiate an aggressive scan, `-O` will profile
    the operating system, and `-sV` will identify service versions.
  prefs: []
  type: TYPE_NORMAL
- en: Performing an aggressive type of scan can potentially be flagged by an **Intrusive
    Detection System**/**Intrusive Prevention System** (**IDS**/**IPS**) or a firewall
    appliance. Be wary of this, as a big part of penetration testing is being as silent
    as possible to avoid detection.
  prefs: []
  type: TYPE_NORMAL
- en: Using the `nmap -A -O -sV target` command on our Metasploitable VM as our target
    system, we will be able to obtain much more meaningful information about the target.
  prefs: []
  type: TYPE_NORMAL
- en: 'As you can see in the following snippet, for each port that is open, Nmap has
    identified a particular service operating on the port, and we were able to retrieve
    the application service version details as well:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/7ef78224-85f8-43ca-a260-b12cb5d06f53.png)'
  prefs: []
  type: TYPE_IMG
- en: Operating system and service version
  prefs: []
  type: TYPE_NORMAL
- en: 'Scrolling down a bit more on the output, we can see that, by using the `-O`
    parameter, Nmap was able to determine the type of operating system:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/adc54871-b19e-4032-9e42-a7ded6b2f17a.png)'
  prefs: []
  type: TYPE_IMG
- en: Detecting the kernel version
  prefs: []
  type: TYPE_NORMAL
- en: At this point, we have a much better idea of our target, the Metasploitable
    VM. We know all of the open ports, services, and service versions that are currently
    running, as well as the operating system.
  prefs: []
  type: TYPE_NORMAL
- en: Nmap is awesome, isn't it? Let's learn how to use Nmap to scan a device that
    has ICMP disabled.
  prefs: []
  type: TYPE_NORMAL
- en: Scanning host devices with ICMP disabled
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When Nmap is about to perform a scan on a host, it sends a ping packet to the
    host to determine whether the target is alive. If the target does not respond,
    Nmap will not attempt to execute the scan. However, system administration and
    cybersecurity professionals usually disable **Internet Control Message Protocol**
    (**ICMP**) responses on servers. Not receiving an ICMP echo reply from a target
    would indicate that the target device is down/offline; however, this technique
    sets out to basically trick a novice hacker into thinking the host is simply not
    available. Using the `â€“Pn` operator during an Nmap scan will skip the host discovery
    phase and treat the target as online.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is an example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: During a penetration test, if you are not able to discover live hosts on the
    network, don't be overly concerned as network security professionals tend to apply
    security controls to their end devices and networks. Nmap can detect hidden systems,
    bypassing firewalls and network sniffers to detect security vulnerabilities on
    a host.
  prefs: []
  type: TYPE_NORMAL
- en: When performing a scan, there's a high possibility that the target will know
    a port scan is being done by an attacker or a penetration tester. In the next
    section, we will describe how to perform a stealth scan using Nmap.
  prefs: []
  type: TYPE_NORMAL
- en: Performing a stealth scan using Nmap
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'By default, Nmap establishes a **TCP three-way handshake** on any open TCP
    ports found. After the handshake has been established, the messages are exchanged.
    The following snippet displays the handshake process, where **Host A** wants to
    communicate with **Host B**:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/c7b26f71-e515-4559-9794-452593e8cb45.png)'
  prefs: []
  type: TYPE_IMG
- en: TCP three-way handshake
  prefs: []
  type: TYPE_NORMAL
- en: During a penetration test, we need to remain as stealthy as possible on the
    network. This creates the effect of an actual hacker attempting to compromise
    the system/network without being caught by the organization's security controls
    and systems. By establishing a TCP three-way handshake with our target devices,
    we are making ourselves known to the target.
  prefs: []
  type: TYPE_NORMAL
- en: 'Therefore, we are going to perform a stealth scan (half-open) using Nmap. A
    stealth scan does not establish a full TCP handshake with the target:'
  prefs: []
  type: TYPE_NORMAL
- en: The attacker machine tricks the target by sending a TCP SYN packet to a particular
    port on the target if the port is open on the target.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A TCP SYN/ACK packet is returned to the attacker machine.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Lastly, the attacker sends a TCP RST packet to reset the connection state on
    the target:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/d9da960d-f408-47cd-89c3-9b88b7b14e47.png)'
  prefs: []
  type: TYPE_IMG
- en: Stealth scan
  prefs: []
  type: TYPE_NORMAL
- en: 'In our exercise, we are going to probe port `80` on our Metasploitable VM using
    stealth scanning with Nmap. Using the `-sS` operator to indicate a stealth scan,
    and with the `-p` operator scanning (probing) a particular port, we can execute
    the `nmap -sS -p 80 10.10.10.100` command on our Kali Linux machine:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/aac02726-20c1-4e0a-8390-41e3079f4d34.png)'
  prefs: []
  type: TYPE_IMG
- en: A stealth scan using Nmap
  prefs: []
  type: TYPE_NORMAL
- en: 'Using Wireshark, we are able to see the flow of packets between our Kali Linux
    machine and the target. Packet number 18 indicates that an [SYN] packet was sent
    to the Metasploitable VM, packet number 19 indicates that an [SYN, ACK] packet
    was returned to the Kali Linux machine, and finally, packet number 20 indicates
    that our Kali Linux machine sent an [RST] packet to reset the connection:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/be8c86d0-df1a-4b30-bd7d-42f5b4699fee.png)'
  prefs: []
  type: TYPE_IMG
- en: Stealth scan detected in Wireshark
  prefs: []
  type: TYPE_NORMAL
- en: The final result is that we were able to successfully probe a given port on
    a target system and did not establish a network session between our machine and
    the target.
  prefs: []
  type: TYPE_NORMAL
- en: There are many services and protocols that use UDP as a preferred transportation
    method. UDP applications do not respond to a typical port scan by default. Whenever
    you perform a network/port scan using Nmap, the scanning engine searches for open
    TCP ports by default; this means UDP ports are usually missed in the results.
    In the next section, we'll take a look at performing a UDP port scan.
  prefs: []
  type: TYPE_NORMAL
- en: Scanning UDP ports using Nmap
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'There are many application layer protocols that use **User Datagram Protocol**
    (**UDP**) as their preferred transport protocol. Using the `-sU` operator will
    indicate the need to perform a UDP port scan on a given target. Using the following
    command, we can achieve this task:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: We have now acquired the skills to perform a UDP scan on a target device or
    network. In the next section, we will take a look at evading security appliance
    and detection using Nmap.
  prefs: []
  type: TYPE_NORMAL
- en: Evading detection using Nmap
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Whenever a packet is sent from one device to another, the source IP address
    is included within the header of the packet. This is the default behavior of the
    TCP/IP stack; all address details must be included within all packets that need
    to traverse a network. In performing a network scan on a target, our source IP
    address is included within all packets that our machine, Kali Linux, sends to
    the target.
  prefs: []
  type: TYPE_NORMAL
- en: 'Nmap has the capability of using decoys to trick the target into believing
    that the network scans are originating from multiple sources rather than a single
    source IP address. The `-D` operator is followed by random IP addresses, which
    are the decoys. Let''s assume we want to scan an IP address, `10.10.10.100`, and
    set three decoys: `10.10.10.14`, `10.10.10.15`, and `10.10.10.19`. We can use
    the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Observing the following Wireshark capture, we can see that packets containing
    both our source IP address and the decoys'' IP addresses were used during the
    port scan on our target:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/80c22611-9926-4be5-9550-9ec75d43947f.png)'
  prefs: []
  type: TYPE_IMG
- en: Detecting decoys in Wireshark
  prefs: []
  type: TYPE_NORMAL
- en: However, an RST packet is sent from the actual source address. Additionally,
    we can use other operators such as `--spoof-mac` to spoof the source MAC address.
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, we will learn how to evade firewall detection while performing
    a network scan using Nmap.
  prefs: []
  type: TYPE_NORMAL
- en: Evading firewalls with Nmap
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: During your career as a cybersecurity professional, penetration tester, or ethical
    hacker, you'll often encounter organizationsâ€”be they small, medium, or large enterprisesâ€”that
    have some sort of firewall appliance or software on their network infrastructure.
  prefs: []
  type: TYPE_NORMAL
- en: 'Firewalls can prevent network scans and create a challenge for us as penetration
    testers. The following are various operators that can be used in Nmap to evade
    firewalls:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/ac7a1430-aad4-41b8-a51e-d0d5d19dc849.png)'
  prefs: []
  type: TYPE_IMG
- en: Nmap's firewall evasion operators
  prefs: []
  type: TYPE_NORMAL
- en: Additionally, we can send custom probes with specific flags to a target and
    analyze the responses.
  prefs: []
  type: TYPE_NORMAL
- en: In the following sections, we'll take a look at how to determine whether a stateful
    firewall is present on a network.
  prefs: []
  type: TYPE_NORMAL
- en: Checking for a stateful firewall
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In checking for a stateful firewall, we can send a probe to the target with
    the ACK flag enabled. If no response is provided from the target, this would indicate
    that a firewall is present:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/9746582b-7a7c-493b-9bc2-b12d74b70367.png)'
  prefs: []
  type: TYPE_IMG
- en: Stateful firewall present
  prefs: []
  type: TYPE_NORMAL
- en: 'However, if a packet is returned with the RST flag set, this would indicate
    that there is no firewall on the target system:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/85436ee2-05c1-4737-b0aa-d379b7824871.png)'
  prefs: []
  type: TYPE_IMG
- en: Stateful firewall is not present
  prefs: []
  type: TYPE_NORMAL
- en: 'We can use the `â€“sA` operator on Nmap to perform an ACK scan on a target. Let''s
    perform a scan on our Metasploitable VM to determine whether port `80` is open,
    and whether the system has a firewall present:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Use the `nmap -sA -p 80 <target>` command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/f8b7d739-aa20-4443-a031-71981f137e48.png)'
  prefs: []
  type: TYPE_IMG
- en: ACK scan using Nmap
  prefs: []
  type: TYPE_NORMAL
- en: 'We were able to identify port `80` as opened and unfiltered (no firewall) on
    the target. Additionally, by observing the packets, we saw that an RST packet
    was returned to our Kali Linux (attacker) machine:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/1f287ce9-f845-48ec-9d42-8381cc64e60f.png)'
  prefs: []
  type: TYPE_IMG
- en: The port scan shown in Wireshark
  prefs: []
  type: TYPE_NORMAL
- en: 'Whenever you run a scan on a target and the results indicate `filtered`, this
    means there is a firewall present and that it''s actively monitoring the port,
    as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/8fa76c5f-be8b-4b82-af3a-a2d2b3287f13.png)'
  prefs: []
  type: TYPE_IMG
- en: Detecting a filtered port using Nmap
  prefs: []
  type: TYPE_NORMAL
- en: 'Additionally, the following operators can be used to determine whether a firewall
    is present on a system:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Operator** | **Description** |'
  prefs: []
  type: TYPE_TB
- en: '| `-sX` | Performs an XMAS scan. The URG, FIN, and PSH flags are all set. |'
  prefs: []
  type: TYPE_TB
- en: '| `-sF` | Performs a FIN scan. Only the FIN flag is set. |'
  prefs: []
  type: TYPE_TB
- en: '| `-sN` | Performs a Null scan. No flags are set. |'
  prefs: []
  type: TYPE_TB
- en: Additional Nmap operators
  prefs: []
  type: TYPE_NORMAL
- en: Nmap will interpret the responses and determine whether the ports on a target
    are filtered or unfiltered.
  prefs: []
  type: TYPE_NORMAL
- en: Having completed this section, you are now able to use Nmap to profile a target.
    In the next section, we will learn about the **Nmap Scripting Engine** (**NSE**).
  prefs: []
  type: TYPE_NORMAL
- en: NSE scripts
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: NSE is one of the most powerful features within Nmap. It allows users to create
    and automate scripting to perform customized scans on a target device. By performing
    scans using various Nmap scripts, you can quickly detect whether your target is
    susceptible to a known vulnerability, malware, open backdoors, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following are the main categories of NSE scripts:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/72161386-df94-4f48-8eb8-e2179bd803a6.png)'
  prefs: []
  type: TYPE_IMG
- en: NSE categories
  prefs: []
  type: TYPE_NORMAL
- en: 'To execute an entire category of scripts, we can use the `--script category`
    command. The following snippet is an example of using the `vuln` category of scripts
    during an Nmap scan:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/9175a49e-9f88-4e4c-a09d-e07e9163b187.png)'
  prefs: []
  type: TYPE_IMG
- en: Vulnerability found using NSE
  prefs: []
  type: TYPE_NORMAL
- en: 'Running an entire category of scripts may not always be suitable for various
    situations. If you are performing a scan to search for systems that contain a
    specific vulnerability, such as **vsFTPd 2.3.4 backdoor (CVE-2011-2523)**, you
    can use the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Each NSE script is stored locally on Kali Linux in the `/usr/share/nmap/scripts`
    directory. However, you should become familiar with using NSE scripts, as this
    will help you to save time and find specific information about a target much more
    quickly. To help you to further understand NSE scripts, please visit the official
    NSE documentation website at [https://nmap.org/nsedoc/](https://nmap.org/nsedoc/).
    The repository contains a detailed description of each NSE script available.
  prefs: []
  type: TYPE_NORMAL
- en: Having completed this section on Nmap and NSE, let's now learn about Zenmap,
    the GUI version of Nmap.
  prefs: []
  type: TYPE_NORMAL
- en: Zenmap
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Zenmap is the **graphical user interface** (**GUI**) version of Nmap and is
    supported on multiple platforms, such as Windows, Linux, and macOS. The creation
    of Zenmap was geared toward beginners as it's easier to use than the traditional
    command-line interface of Nmap. To download Zenmap on your system, please visit
    [https://nmap.org/zenmap/](https://nmap.org/zenmap/).
  prefs: []
  type: TYPE_NORMAL
- en: 'The following shows the Zenmap interface. It''s quite simple to use: simply
    enter the target and select the type of scan you would like to perform. Depending
    on the type of scan you select, the necessary Nmap operators will be set in the
    command field.'
  prefs: []
  type: TYPE_NORMAL
- en: 'To demonstrate, let''s perform a quick scan on our Metasploitable VM by observing
    the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Enter the IP address of our target.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the Quick scan option from the Profile menu.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Click on Scan to begin, as shown in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/19b1db05-aac6-41c9-bc1b-3ce37048de50.png)'
  prefs: []
  type: TYPE_IMG
- en: The Zenmap interface
  prefs: []
  type: TYPE_NORMAL
- en: Once the scan has completed, click on each tab to get further details about
    the target. If you're performing a scan on an entire network, the Topology tab
    will help you create a network diagram of the target network.
  prefs: []
  type: TYPE_NORMAL
- en: 'Customized scanning profiles can be created on Zenmap by performing the following
    steps:'
  prefs: []
  type: TYPE_NORMAL
- en: To create a new scanning profile, click on Profile | New Profile or Command.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The Profile Editor will open, providing you with all of the options available
    for scanning in Nmap, as shown in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/dacd1ddd-3956-44d8-8600-8e0b1f36d278.png)'
  prefs: []
  type: TYPE_IMG
- en: Zenmap Profile Editor
  prefs: []
  type: TYPE_NORMAL
- en: Be sure to visit each tab and familiarize yourself with the various options
    available, since they will be useful in the future.
  prefs: []
  type: TYPE_NORMAL
- en: As you saw, Zenmap is very easy to use and user-friendly. In the next section,
    we will learn about Hping3, another tool with which to perform scanning.
  prefs: []
  type: TYPE_NORMAL
- en: Hping3
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Hping3 is a command-line tool that allows a user to analyze TCP/IP messages
    on a network. Additionally, Hping3 allows use to assemble network packets, which
    can be beneficial to a penetration tester in performing device and service discovery
    and offensive actions, such as a **Denial-of-Service** (**DoS**) attack.
  prefs: []
  type: TYPE_NORMAL
- en: 'Hping3 is a tool that can perform the following tasks:'
  prefs: []
  type: TYPE_NORMAL
- en: Host discovery on a network
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fingerprinting host devices to determine services
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Sniffing network traffic
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Flooding packets (DoS)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: File transfer
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: As mentioned in the previous section, there are many servers and devices that
    have ICMP responses disabled as a security precaution. We can use Hping3 to probe
    a port on a target system to force an ICMP response back to our attacker machine.
  prefs: []
  type: TYPE_NORMAL
- en: 'To get started using Hping3, let''s use the following steps to perform a port
    scan on port `80`:'
  prefs: []
  type: TYPE_NORMAL
- en: 'We use the `ping` utility to send four ICMP echo request messages to our Windows
    Server machine (firewall enabled and ICMP disabled):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/91d4a945-3d52-4322-a7c9-09c74daa1b52.png)'
  prefs: []
  type: TYPE_IMG
- en: Pinging a target
  prefs: []
  type: TYPE_NORMAL
- en: 'Our attacker machine (Kali Linux) did not receive any responses from the target.
    A novice hacker would assume the target is offline and would probably move on.
    However, using Hping3 to probe a specific port by sending SYN packets will force
    the target to reveal itself. Using the `hping3 -S target ip addr -p port -c 2`
    syntax, we get the following responses:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/9f70b9a5-1094-4f99-af14-7b38b8b7904a.png)'
  prefs: []
  type: TYPE_IMG
- en: Port scan using Hping3
  prefs: []
  type: TYPE_NORMAL
- en: By looking at our results, we can see we have received successful responses
    from our target. This means that the `10.10.10.14` device is online and that port
    `80` is open.
  prefs: []
  type: TYPE_NORMAL
- en: The `-S` operator indicates the sending of SYN packets, `-p` allows you to specify
    destination port numbers, and `-c` specifies the number of packets to be sent.
  prefs: []
  type: TYPE_NORMAL
- en: 'Additionally, we can take this step a bit further by performing port scanning
    on a range of network ports on a target device. Using the `hping3 -8 20-1000 -S
    10.10.10.14` command, we are able to perform an SYN scan on a range of ports from
    `20`-`1000` on our target. The following snippet indicates that ports `80`, `135`,
    `139`, `445`, `902`, and `912` are open on our target:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/d0a189ae-a036-46ba-b258-c401f5ecb998.png)'
  prefs: []
  type: TYPE_IMG
- en: Stealth scan using Hping3
  prefs: []
  type: TYPE_NORMAL
- en: There are many more operators that can be combined when using Hping3; please
    be sure to check out the Help menu using the `hping3 -h` command on the Terminal.
  prefs: []
  type: TYPE_NORMAL
- en: Now that you are familiar with using Hping3 as a scanner, let's take a deep
    dive into performing enumeration on a target device.
  prefs: []
  type: TYPE_NORMAL
- en: SMB, LDAP enumeration, and null sessions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we are going to take a look at using various application protocols
    to help us extract sensitive data and records from a target system.
  prefs: []
  type: TYPE_NORMAL
- en: SMBmap and SMBclient
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**SMBmap** is a popular and easy-to-use tool that is used to help us discover
    any SMB shares on a device and detect permissions on any shares found:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Using the `smbmap -H target` syntax, we can attempt to perform a port scan,
    looking for ports that are used by the SMB service; in our target, it''s `445`
    and it''s open:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/481ba446-50dd-486d-bbbf-d484989bb080.png)'
  prefs: []
  type: TYPE_IMG
- en: SMB shares
  prefs: []
  type: TYPE_NORMAL
- en: SMBmap will attempt to establish a session between the attacker machine and
    the target on port `445` to enumerate any share drives and folders. On our target
    (Metasploitable), there's the `tmp` folder, which gives us read and write permissions.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Using the `smbmap -H 10.10.10.100 -r tmp` command, we will be able to list
    the contents of the directory specified. In our example, we are listing the content
    of the `tmp` folder, as shown in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/1a809591-326b-4b25-be51-cbe066e69961.png)'
  prefs: []
  type: TYPE_IMG
- en: SMBmap enumeration
  prefs: []
  type: TYPE_NORMAL
- en: SMBmap is an excellent tool for enumerating SMB shares on target devices; however,
    it's always good to have another tool available in your arsenal. Other tools include
    SMBlookup, SMBclient, and Nmap.
  prefs: []
  type: TYPE_NORMAL
- en: 'Further information about SMBmap can be found at: [https://tools.kali.org/information-gathering/smbmap](https://tools.kali.org/information-gathering/smbmap).'
  prefs: []
  type: TYPE_NORMAL
- en: '**SMBclient** is another handy tool and works in a similar fashion to SMBmap.
    To enumerate SMB services on a target, we can use the `smbclient -L //target`
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/2a63d131-89cd-4585-adac-f67b2512e8fe.png)'
  prefs: []
  type: TYPE_IMG
- en: SMBclient enumeration
  prefs: []
  type: TYPE_NORMAL
- en: 'SMBclient will attempt to extract any shares on the target device, as seen
    in the previous screenshot. Further information on SMBclient can be found at:
    [https://www.samba.org/samba/docs/current/man-html/smbclient.1.html](https://www.samba.org/samba/docs/current/man-html/smbclient.1.html).'
  prefs: []
  type: TYPE_NORMAL
- en: Having completed this section, you have gained the skills to use both SMBmap
    and SMBclient to perform SMB enumeration on a target. In the next section, we
    will briefly discuss another popular tool for SMB enumeration, Enum4linux.
  prefs: []
  type: TYPE_NORMAL
- en: Enum4linux
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Enum4linux** is an enumeration tool capable of detecting and extracting data
    from Windows and Linux operating systems, including those that are **Samba** (**SMB**)
    hosts on a network. Enum4linux is capable of discovering the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Password policies on a target
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The operating system of a remote target
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Shares on a device (drives and folders)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Domain and group membership
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: User listings
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'To scan a target, use the following command: `enum4linux target`. The tool
    will perform all the checks and enumeration that it can perform. The output can
    be a bit overwhelming at first: be sure to check the details carefully as they
    will contain meaningful information about your target.'
  prefs: []
  type: TYPE_NORMAL
- en: Enum4linux comes in handy at times for performing a scan on the network to discover
    any shared resources. In the next section, we will take a deep dive into LDAP
    enumeration on a Windows network.
  prefs: []
  type: TYPE_NORMAL
- en: LDAP enumeration
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The **Lightweight Directory Access Protocol** (**LDAP**) is used to query a
    database or directory type of service. A common example is a corporate environment
    with an **Active Directory** (**AD**) server that manages the user accounts of
    the entire organization. End devices such as desktop computers need to query the
    AD server each time a user is attempting to log in to that desktop computer.
  prefs: []
  type: TYPE_NORMAL
- en: LDAP uses port `389` by default; however, packets are sent across the network
    in plaintext. Additionally, using **LDAPS** (**LDAP Secure**) ensures that the
    information sent between a client and the LDAP server is encrypted by default;
    LDAPS uses port `636` by default. We can use Nmap to scan for devices on a network
    that has ports `389` and `636` open.
  prefs: []
  type: TYPE_NORMAL
- en: We can use a tool called JXplorer ([http://jxplorer.org](http://jxplorer.org))
    to perform LDAP enumeration. This tool is not natively installed in Kali Linux;
    therefore, we'll need to download it from its GitHub repository and run it.
  prefs: []
  type: TYPE_NORMAL
- en: 'To get started with LDAP enumeration, let''s use the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Use the following command to download and execute the tool:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Once you successfully execute the `./jxplorer.sh` script, the user interface
    will open. Click the Connect icon (located under File) to insert the details of
    your target:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/207f67b3-e9fd-4e47-a5a7-b0f7f5b23047.png)'
  prefs: []
  type: TYPE_IMG
- en: The JXplorer interface
  prefs: []
  type: TYPE_NORMAL
- en: 'In our lab, we have a Windows Server machine with the following configurations:'
  prefs: []
  type: TYPE_NORMAL
- en: Active Directory Domain Service installed
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Active Directory Lightweight Directory Services installed
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Domain: `pentestlab.local`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The user account created: `bob` (belongs to the domain admin user group)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Assuming that, by using a packet sniffing tool such as Wireshark during a penetration
    test, you are able to capture user credentials while they are attempting to authenticate
    to the AD server, you can use these user accounts in the Security field in the
    preceding screenshot.
  prefs: []
  type: TYPE_NORMAL
- en: 'Using an administrator user account will provide the necessary privileges to
    extract information in JXplorer; you''ll be able to enumerate sensitive information
    from the Active Directory server, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/e7b8c7b8-0bf1-4981-bd94-70102e37d663.png)'
  prefs: []
  type: TYPE_IMG
- en: LDAP enumeration with JXplorer
  prefs: []
  type: TYPE_NORMAL
- en: You'll be able to view the entire directory from your attacker machine and extract
    sensitive information. If the service only uses LDAPS, this will be a challenge
    as the user credentials will be concealed.
  prefs: []
  type: TYPE_NORMAL
- en: Having completed this exercise, let's use the **rpcclient** tool to perform
    a null session attack in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Null sessions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In a null session, an attacker is able to log in to a target using a null account.
    A null account is an account that does not actually exist. How is this possible?
    Some systems are vulnerable to allowing anonymous login. Once a user is able to
    log in anonymously, the null user is able to retrieve sensitive information stored
    on the target.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can attempt a null session enumeration from our Kali Linux machine (attacker)
    on to the target, Metasploitable, by using the `rpcclient -U "" 10.10.10.100`
    command, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/39cd647e-81c9-4cca-bbe8-f78fa963c091.png)'
  prefs: []
  type: TYPE_IMG
- en: A null session attack
  prefs: []
  type: TYPE_NORMAL
- en: Using the `srvinfo` command, the target will return its operating system type
    to us. For a full listing of query commands, you can use the `rpcclient --help`
    command. Additionally, you can visit [https://www.samba.org/samba/docs/current/man-html/rpcclient.1.html](https://www.samba.org/samba/docs/current/man-html/rpcclient.1.html).
  prefs: []
  type: TYPE_NORMAL
- en: Keep in mind that not all machines are vulnerable to this type of attack, but
    it's still worth performing during a penetration test. In the next section, we
    will discuss user enumeration through noisy authentication controls.
  prefs: []
  type: TYPE_NORMAL
- en: User enumeration through noisy authentication controls
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Enumeration is the technique in which a hacker or a penetration tester attempts
    to perform a brute-force attack to either guess or confirm valid users on a target
    system. A simple example is where a malicious user or a penetration tester performs
    a password-guessing or brute-force attack on an email portal.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is an example of a typical login portal. The credentials shown
    in the following screenshot are an example and are not real:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/5860f2b0-7691-426d-b5f3-d7ee75d908af.png)'
  prefs: []
  type: TYPE_IMG
- en: An attacker can attempt various combinations of possible usernames and passwords
    until a valid user is found. However, such attacks are considered noisy rather
    than stealthy (quiet). As a comparison, imagine you are playing an online first-person
    shooter game, and your task is to invade the enemy base and steal a trophy without
    alerting the guards. If you are not careful enough and make any loud noises, the
    guards will be alerted and the mission will fail. In this analogy, the guards
    are the security controls, and the sensors are the firewalls, IDS/IPS, and anti-malware
    protection. Hence, this technique is not quiet on a network; however, this method
    can still get you access to a system, provided that the security controls do not
    perform a lockout action before you can gain access.
  prefs: []
  type: TYPE_NORMAL
- en: A lot of times, when a user enters an incorrect username on a login portal,
    an error message is returned, usually stating that an incorrect username has been
    entered. This clearly tells an attacker that the username provided does not exist
    in the database. Additionally, if the incorrect password was entered, the system
    usually returns a message stating that an incorrect password was entered for the
    username. So, from an attacker's point of view, the system is telling us that
    the username exists in the database, but we have not provided the correct password
    for it.
  prefs: []
  type: TYPE_NORMAL
- en: 'Web developers and security professionals now include generic responses when
    either a username or password is incorrect, with a similar message to this: *The
    username/password is incorrect*. This message does not state exactly which value
    is correct or incorrect.'
  prefs: []
  type: TYPE_NORMAL
- en: Now that you have a better understanding of noisy authentication controls, let's
    attempt to perform web enumeration in the following section.
  prefs: []
  type: TYPE_NORMAL
- en: Web footprints and enumeration with EyeWitness
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**EyeWitness** is a tool that allows a penetration tester to capture screenshots
    of a website without leaving the Terminalâ€”the tool does all of the work in the
    background. Imagine having to visually profile multiple websites, open **Virtual
    Network Computing** (**VNC**) servers, and use **Remote Desktop Protocols** (**RDPs**).
    This can be a time-consuming task. EyeWitness takes the screenshots, stores them
    offline, and provides an HTML report:'
  prefs: []
  type: TYPE_NORMAL
- en: To begin, you'll need to download EyeWitness from its GitHub repository using
    `git clone https://github.com/FortyNorthSecurity/EyeWitness.git`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Once the download has completed, access the `root/EyeWitness/setup` directory
    and run the `setup.sh` script using the following sequence of commands:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/12d98d7c-a8ae-45c8-97b2-8eaf1f551d31.png)'
  prefs: []
  type: TYPE_IMG
- en: EyeWitness setup screen
  prefs: []
  type: TYPE_NORMAL
- en: 'Once the setup process is complete, use the `cd ..` command to go one directory
    up to the `root/EyeWitness` directory. To screenshot a single website, use the
    following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: You can try this tool on one of the web applications on Metasploitable or OWASP
    BWA virtual machines.
  prefs: []
  type: TYPE_NORMAL
- en: 'EyeWitness allows you to specify various protocols using operators such as:
    `--web`, `--rdp`, `--vnc`, and `--all-protocols`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Once the task completes, EyeWitness will indicate whether it was successful
    in capturing screenshots of the target(s) and provide you with the location of
    the offline report, as seen in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/46f904e0-5e3b-4dd1-a605-0eea354e98d2.png)'
  prefs: []
  type: TYPE_IMG
- en: EyeWitness reporting wizard
  prefs: []
  type: TYPE_NORMAL
- en: 'Upon opening the HTML report, the left-hand column contains information about
    the web request, while the right-hand column contains the screenshots:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/7f541fd7-bdcc-45e5-a921-1bc05a3dd3e0.png)'
  prefs: []
  type: TYPE_IMG
- en: Report from EyeWitness
  prefs: []
  type: TYPE_NORMAL
- en: This tool is very handy when profiling multiple services and websites at once.
  prefs: []
  type: TYPE_NORMAL
- en: Further information on EyeWitness can be found at [https://tools.kali.org/information-gathering/eyewitness](https://tools.kali.org/information-gathering/eyewitness).
  prefs: []
  type: TYPE_NORMAL
- en: Now that you have completed this section, you are able to perform web enumeration
    using the EyeWitness tool.
  prefs: []
  type: TYPE_NORMAL
- en: Metasploit auxiliary modules
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Metasploit is an exploitation development framework created by Rapid7 ([www.rapid7.com](http://www.rapid7.com)).
    Metasploit contains many features and functions for penetration testing. There
    are many modules, such as exploits, payloads, encoders, and auxiliary. The auxiliary
    module contains port scanners, network sniffers, fuzzers, and a lot more to facilitate
    the information-gathering phase of a penetration test:'
  prefs: []
  type: TYPE_NORMAL
- en: 'To access the Metasploit interface, open a new Terminal and execute the following
    commands:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Once the user interface loads, the `show auxiliary` command will provide a
    list of all of the auxiliary modules within Metasploit. Let''s use a simple example
    to demonstrate how to use a module: let''s imagine you would like to perform a
    stealth (SYN) scan on a target. You can begin by selecting a module.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Use the `use auxiliary/scanner/portscan/syn` command.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Check the description and requirements by using the `show options` command.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: This module requires that a remote host is configured; use the `set RHOSTS target`
    command.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: To execute the module, use the `run` command.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The following screenshot is a demonstration of a stealth scan on our Windows
    Server machine (`10.10.10.14`) and the results provided at the bottom indicate
    that various ports were found open:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/71c7c9fa-34f1-49f2-8355-67fdcef8df66.png)'
  prefs: []
  type: TYPE_IMG
- en: Additionally, to search for a module within Metasploit, using the `search keyword`
    syntax can be very useful as there are a lot of different modules in the framework,
    and learning them all can be very challenging and overwhelming.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the later chapters in this book, we will dive deeper into using Metasploit
    to perform exploitation on target devices in our lab.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: During this chapter, we covered various DNS interrogation techniques using a
    variety of tools to discover important servers, subdomains, and IP addresses,
    and were able to successfully extract the zone files from a DNS server (zone transfer)
    due to a misconfiguration on the target's DNS server.
  prefs: []
  type: TYPE_NORMAL
- en: Then, we used Nmap to perform various types of port scanning to determine the
    port status, running services and their versions, and the target's operating system;
    we also gained an indication of whether there's a firewall on the target. Finally,
    to close this chapter, we performed SMB and LDAP enumeration to gather user shares
    and directory records on our network devices.
  prefs: []
  type: TYPE_NORMAL
- en: Now that you have completed this chapter, you'll be able to successfully perform
    DNS zone transfers on vulnerable DNS servers; profile a system to discover its
    operating system, running services, and security vulnerabilities; evade detection
    while performing network scans; and perform LDAP and system enumeration on a target.
    You also obtained the skills to visually profile multiple websites at once. I
    hope this chapter has been helpful to your journey in learning penetration testing.
  prefs: []
  type: TYPE_NORMAL
- en: In [Chapter 7](075f58ca-ff2a-48c7-9b90-17ddd4e408c9.xhtml), *Working with Vulnerability
    Scanners*, we will cover the importance of using vulnerability scanners to find
    security weaknesses and flaws on a target.
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The following are some questions based on the topics we have covered in this
    chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: What is the primary purpose of using DNS?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What is meant by a DNS zone transfer?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What tool allows us to perform a scan on a target system and determine its running
    services and operating system?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What method is used to evade a firewall during a scan?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What tool can be used to enumerate Active Directory?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Information Gathering and Vulnerability Assessment**: [https://hub.packtpub.com/information-gathering-and-vulnerability-assessment-0/](https://hub.packtpub.com/information-gathering-and-vulnerability-assessment-0/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Open Source Intelligence**: [https://hub.packtpub.com/open-source-intelligence/](https://hub.packtpub.com/open-source-intelligence/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Gather Intel and Plan Attack Strategies**: [https://hub.packtpub.com/gather-intel-and-plan-attack-strategies/](https://hub.packtpub.com/gather-intel-and-plan-attack-strategies/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
