- en: Chapter 6. Advanced Topics
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous chapters, we have run through the basics of creating a project
    in FuelPHP. We've touched upon how useful packages can be, but they can't be matched
    directly to a URL. In this chapter, we will introduce modules, which, unlike packages,
    can be accessed directly from a URL. We will also run through some of the more
    advanced topics related to FuelPHP.
  prefs: []
  type: TYPE_NORMAL
- en: 'The topics covered in this chapter are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Modules—what they are and how to use them
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Tasks
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Routing
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Unit testing
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Profiling
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What modules are and how to use them
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous chapter, we touched upon the fact that packages don't relate
    directly to a URL; they need controllers and views in the application to do this.
    Modules, on the other hand, are a group of MVC elements that can act independently
    from the project application. They allow for the encapsulation and reusability
    of your code, so that you can share a module between projects without needing
    to write an application code to fully utilize the functionality.
  prefs: []
  type: TYPE_NORMAL
- en: Modules are expected to reside within the modules folder within the application.
    If you would prefer to store them elsewhere, this path and folder can be changed
    in the application configuration. It's recommended to use modules on larger projects
    that consist of a large code base as they can help keep the code in order.
  prefs: []
  type: TYPE_NORMAL
- en: Modules can be used independently and they don't need access to the global application
    code. A route can be created to allow for a module to be directly accessed via
    a URL. Since modules can include views and controllers, they can be thought of
    as mini applications in their own right.
  prefs: []
  type: TYPE_NORMAL
- en: 'By default, modules are expected to reside in the modules folder within the
    application; for example, `[rootOfProject]/fuel/app/modules`. This can be changed
    in your application `config.php` file—it appears in the section named `module_paths`.
    If you need to change the path to the modules, you will need to ensure that the
    end of the path includes the DS global variable. For example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Namespaces
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Historically, naming classes and functions is a difficult job. We often prefer
    class names to have meaning and indicate what the class does; this can lead to
    conflicts between our code and that of a third-party code that we may also be
    using on the project. In PHP Version 5.3, we have been able to (optionally) use
    namespaces to avoid these conflicts, in FuelPHP all modules are required to have
    their own namespaces to avoid these kinds of conflicts. The namespaces must be
    named identically to the folder name for the module. For example, a module in
    the `Examplemodule` folder will have a controller like the following one:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: In addition to the namespace and controller names, the module folder name also
    influences the name in the URL if you want to route to the controllers in the
    module. So, choosing the right name is important; but even without the perfect
    name, we can still change the URL routes from within the main application.
  prefs: []
  type: TYPE_NORMAL
- en: The module folder structure
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Speaking of the folder name of the module, we should treat the module as a
    self-contained application, complete with an expected folder structure. The following
    is the expected folder structure for any module:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: As you will notice, the folder structure is similar to the full application
    folder structure.
  prefs: []
  type: TYPE_NORMAL
- en: Using the module from the main application
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Sometimes, we may want to use some of the functions in the modules from the
    main application. In these cases, we need to autoload the class before we can
    reference the module in the code. This can be done in the following two ways:'
  prefs: []
  type: TYPE_NORMAL
- en: The first is to autoload the module in the application `config.php` file, like
    we did with the example packages
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'In the `''always_load''` array in the `config.php` file, you will notice a
    section for modules:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: An alternative way of loading the module is to autoload it only when we need
    to, in the classes that require the module functionality.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'This can be done using the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Once you have loaded the module, you can call the functions from the module
    in the following way:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: As modules tend to be self-contained applications, each has a specific use and
    they are not as widely open sourced as packages are.
  prefs: []
  type: TYPE_NORMAL
- en: Tasks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Sometimes, we will want background processes, periodic tasks, or maintenance
    tasks to occur. This is where FuelPHP tasks come in handy. They can be run via
    the command-line tool, or set up as a periodic task on Windows, or **cron** job
    on Mac OSX and *nix. They can call upon modules and other classes just like controllers
    can.
  prefs: []
  type: TYPE_NORMAL
- en: Tasks should be placed in the `fuel/app/tasks` folder and, by default, only
    a `run()` method needs to be defined within the class. If you need other methods,
    these can be added in the usual way for PHP classes.
  prefs: []
  type: TYPE_NORMAL
- en: The tasks are called using the Oil `refine` command. FuelPHP comes with an example
    task called `robots` and will be included in the `fuel/app/tasks` folder.
  prefs: []
  type: TYPE_NORMAL
- en: 'To call the main method of the robot task, you can run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'The `run()` method in the `robot` task has a variable defined, allowing you
    to pass a string via the `oil refine` command. Typing the following command line
    will change the message in the task:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'If you look at the `robots.php` file, you will notice a second method called
    `protect()`—this can be called using the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Tasks in FuelPHP are very useful for periodic actions and are very similar to
    controllers, making them straightforward to write. They also have the advantage
    of having the same access to the core FuelPHP functionality.
  prefs: []
  type: TYPE_NORMAL
- en: Routing
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As with other frameworks, FuelPHP has fairly extensive routing capabilities.
    In this section, we will run through the basics.
  prefs: []
  type: TYPE_NORMAL
- en: 'Firstly, there are a couple of reserved routes; they are: `_root_` and `_404_`.
    The `_root_` key is used when there is no URL specified; for example, the home
    page or root page. The second (`_404_`) is for when the requested content controller
    or view can''t be found.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The routes exist in the `config` folder of the application in a file called
    `routes.php`. Let''s load the `routes.php` file from the following path comprising
    the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '`[rootOfProject]/fuel/app/config/routes.php`'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: As you can see from the `routes` configuration file, the routes are stored as
    an array. The key on the left is matched to the URL and then the items on the
    right are executed by FuelPHP. This is fairly straightforward, but can lend itself
    to complex URL and keyword matching.
  prefs: []
  type: TYPE_NORMAL
- en: 'The simplest routes are the ones that match a URL string directly to a controller
    and an action. These can look as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Our applications would tend to be fairly dynamic in nature, so specifying all
    the possible routes in the application would be a tedious job. This is where more
    advanced routing comes in handy. For this, we can use keywords and basic regular
    expressions to match strings in the URL and translate them to the controller method.
    These expressions make use of keywords preceded by a colon as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`:any`: This keyword matches anything from that point on.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`:segment`: This keyword matches a single segment in the URL. The segment can
    be anything. This can be useful for language strings in the URL.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`:num`: This keyword matches numeric values in the URL.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`:alpha`: This keyword matches any alpha characters.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`:alnum`: This keyword matches any alphanumeric characters.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Using the following code, the router will match *any* journal entry and then
    send the entry name to the `entry` method in the `journal` controller:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'The code in the following example will allow any preceding segment to be used
    for URLs like `/en/contact` and will send the language flag as a variable to the
    `contact` method in the site controller. The final URL would be something like
    `/site/contact/en`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'As developers, we often try to make our code more readable by choosing clear
    and descriptive variable names. The same can be done with more advanced routing
    in FuelPHP, as it allows you to use named parameters in the routes. These named
    segments can then be accessed from within your methods or actions. For example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'In this route, `/journal/2013/11/5/name` would be routed to the entry method
    within the journal controller. In the entry method, we can get the named segments
    in the following manner:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'FuelPHP uses regex for the named segments to work within the route. Each segment
    counts as a back reference, for example, the `$1` and `$2` regex placeholders—we
    often use these when making use of regular expressions in PHP. Back references
    are a regex term and more information can be found at the following website:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://www.regular-expressions.info/brackets.html#usebackrefinregex](http://www.regular-expressions.info/brackets.html#usebackrefinregex)'
  prefs: []
  type: TYPE_NORMAL
- en: In a route of `:name/(\d{2}`, the digit (`d{2}`)would be found using the variable
    `$2` and the variable `$1` would return the value of the `:name` segment.
  prefs: []
  type: TYPE_NORMAL
- en: We mentioned the RESTful controller template in the previous chapters. These
    can be used in conjunction with verb-based routing to direct requests to the correct
    methods in the RESTful controllers. This allows the route to a certain URL to
    be routed through to different methods and controllers in order to fit with the
    functionality.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example:'
  prefs: []
  type: TYPE_NORMAL
- en: A `POST` request to `/journal` could be routed to the `create` method in the
    journal controller
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A `GET` request to `/journal` could be routed to the `index` method in the journal
    controller
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'These requests all follow the recommended use of the HTTP verbs to perform
    actions in the application and the route in the `routes.php` file would look something
    like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: We could do something similar for the `PUT` and `DELETE` verbs and use regex
    and named parameters to make it easier to get the relevant information from the
    URL.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you are working with user profile information and data, we would look to
    use HTTPS or secure connections; again, routing in FuelPHP supports this. The
    following example would only load the route if the request is sent via HTTPS,
    rather than just HTTP:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: The third parameter ensures that the named route is only used when HTTPS is
    used.
  prefs: []
  type: TYPE_NORMAL
- en: 'During development, we often rearrange the structure of the application to
    reflect the changing functionality. One feature of routes in FuelPHP, that aim
    to make routing easier, is called named routes and reverse routing. With this
    feature, instead of editing all of our views, we can simply change the named route
    in the main `routes.php` file. For this to work, we need to use the name of the
    route in our views. In the following example, we change `''admin/app/dashboard''`
    to `''admin/dashboard''`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'In our views that need to link to the dashboard, we would use the following
    `anchor` code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This only works for application code and will not work for module routes.
  prefs: []
  type: TYPE_NORMAL
- en: Unit testing
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: No modern framework would be complete without the ability to test the application
    code and functionality. FuelPHP has been built with this in mind and, thus, includes
    tests and test cases based on the PHPUnit testing framework.
  prefs: []
  type: TYPE_NORMAL
- en: So what is unit testing?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Unit tests are automated tests written to check whether or not the units of
    functionality (methods and functions) are working as expected. The tests typically
    test whether or not, for a given input, the output is correct, treating the functions
    as a black box to ensure that the internal logic works.
  prefs: []
  type: TYPE_NORMAL
- en: Since unit testing is automated, it's easy to ensure that the recent code changes
    don't break other functionality. It also allows for the use of a continuous integration
    server such as Jenkins ([http://jenkins-ci.org](http://jenkins-ci.org)). A continuous
    integration server will automatically deploy your code for you once the code passes
    the unit testing, allowing you to concentrate on the actual code.
  prefs: []
  type: TYPE_NORMAL
- en: PHPUnit
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'There are several unit testing tools available in PHP, but the de facto standard
    is PHPUnit by Sebastian Bergmann. This is the testing framework supported by FuelPHP
    and is run using the Oil command-line tool. But, before using it, you will need
    to ensure that PHPUnit is installed. For the most up-to-date installation instructions,
    I''d recommend browsing the official documentation available at the following
    link:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://www.phpunit.de/manual/current/en/installation.html](http://www.phpunit.de/manual/current/en/installation.html)'
  prefs: []
  type: TYPE_NORMAL
- en: Running unit tests
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Unit tests are run using the FuelPHP Oil command-line tool and can be run using
    `php oil test`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: Creating unit tests
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The tests are located in the application in the `fuel/app/tests` folder and
    will read any tests in its subfolders. The tests files should follow a similar
    structure to the classes they are testing. So, if you were testing the category
    model (`/fuel/app/classes/model/category.php`) it would have a test file located
    at `fuel/app/tests/model/category.php`. The test cases should extend the `TestCase`
    class, which is an extension of the `PHPUnit_Framework_TestCase` class. This means
    that you will be able to use the usual PHPUnit assertions and methods in your
    tests.
  prefs: []
  type: TYPE_NORMAL
- en: 'The name of the class should be prefixed with `Test_`. Similarly, the category
    test should be named `Test_Model_Category`. The class should look something like
    the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'The official documentation lists many assertions and recommended ways of writing
    unit tests. The documentation can be found at the following link:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://www.phpunit.de/manual/current/en/writing-tests-for-phpunit.html](http://www.phpunit.de/manual/current/en/writing-tests-for-phpunit.html)'
  prefs: []
  type: TYPE_NORMAL
- en: Grouping unit tests
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'As your application grows, sometimes, running all the unit tests can be time
    consuming; as such, we can group tests together and then only test certain groups.
    This is done with the `--group=` command at the end of the usual `test` command.
    So, running the `User` group of tests can be done using the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'The grouping is done in a `docbloc` comment in each testing class and each
    test case can be assigned to multiple groups. The following code snippet would
    assign the category model `Test` to `Blog` and `App` groups:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: Configuration and module testing
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: FuelPHP uses configuration in the `phpunit.xml` file, which is included in the
    `fuel/core/` folder. To customize the configuration, we need to copy this file
    to our application and then make the changes there. FuelPHP will load the application
    `phpunit.xml` in favor of the core version.
  prefs: []
  type: TYPE_NORMAL
- en: 'As mentioned earlier, modules are applications in their own right—like unit
    testing. The unit tests should be included in a `test` folder within the top level
    of each module. For FuelPHP to run the tests in modules, it needs to know that
    they exist. This is done by including the modules folder in the `phpunit.xml`
    file. Once you have made a copy of the core FuelPHP `phpunit.xml` file, you can
    add the following code snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: Now that you know a little about unit testing in FuelPHP, let's cover another
    aspect of development—the ability to profile your application.
  prefs: []
  type: TYPE_NORMAL
- en: Profiling
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: FuelPHP includes a **profiler** which is based on **PHP Quick Profiler**. This
    allows you to profile and debug your code, all without needing to write extra
    functions within the application. The profiler can be switched on and off via
    the application `config.php` file. To enable the profiler, simply change the `'profiling'`
    variable to `true`, and set it to `false` to disable the profiler.
  prefs: []
  type: TYPE_NORMAL
- en: 'The profiler also includes a database-profiling tool, but, due to the resources
    required, it is disabled by default. The database profiler will need to be enabled
    corresponding to the environment used so that the development environment can
    have it enabled without affecting other environments. It can be enabled in the
    environment''s `db.php` file using the `true` value, as shown in the following
    code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: '![Profiling](graphics/0366_06_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The profiler has a tabbed interface and consists of the following tabs:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Console**: This is the default tab giving information about errors, log entries,
    and memory usage, along with execution timings'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Load Time**: This tab shows the request load time'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Database**: This tab shows the execution time and number of database queries
    executed'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Memory Used**: This is the peak memory used by the page load'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Included**: This tab shows the list of files loaded with their filenames
    and sizes'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**items loaded**: This tab show the final configuration variables at the end
    of the page load'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**vars loaded**: This tab shows the contents of the session at the end of the
    page load'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**GET**: This tab shows the `$_GET` array contents'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**POST**: This tab shows the `$_POST` array contents'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The profiler provides a lot of information that can help you in optimizing your
    application.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we have introduced modules and how we can use them to quickly
    build our applications. We have touched upon unit testing and how to enable the
    profiler to optimize our code.
  prefs: []
  type: TYPE_NORMAL
- en: We have configured some basic routes and detailed where any changes will need
    to be placed. Named routes are a very powerful tool that can be used to counter
    changing project and client requirements. They allow us to reduce the number of
    changes that need to be made.
  prefs: []
  type: TYPE_NORMAL
- en: Tasks are a great way of building background or period functionality in our
    application and are really easy to run with the FuelPHP Oil command-line utility.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will introduce some ways to publicize our applications,
    packages, or modules within the FuelPHP community.
  prefs: []
  type: TYPE_NORMAL
