- en: Working with Frameworks and Libraries
  prefs: []
  type: TYPE_NORMAL
- en: Very few languages exist in a self-contained, monolithic ivory tower. Almost
    always, especially with any modern language, third-party code is used in programs
    for added functionality. Using third-party code, such as libraries and frameworks,
    is also an integral part of working with JavaScript. Let's examine a few of the
    more popular open source tools in our toolkit.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following topics will be covered in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: jQuery
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Angular
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: React and React Native
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Vue.js
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Be prepared to work with the code provided in the `Chapter-8` directory of the
    repository: [https://github.com/PacktPublishing/Hands-on-JavaScript-for-Python-Developers/tree/master/chapter-8](https://github.com/PacktPublishing/Hands-on-JavaScript-for-Python-Developers/tree/master/chapter-8).
    As we'll be working with command-line tools, also have your Terminal or command-line
    shell available. We'll need a modern browser and a local code editor.
  prefs: []
  type: TYPE_NORMAL
- en: jQuery
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: One of the principal reasons for creating or using a JavaScript library is to
    ease repetitive or complex tasks. After all, you can't fundamentally *change*
    a language with a plugin or library—all you can do is augment or alter the existing
    functionality.
  prefs: []
  type: TYPE_NORMAL
- en: 'As we discussed in [Chapter 1](0883b2ef-ba56-4fbd-b20a-d48997d21a58.xhtml),
    *The Entrance of JavaScript into Mainstream Programming*, JavaScript''s early
    history was a bit of a Wild West scenario. The browser wars were in full effect,
    features were not standardized, and even making an Ajax call required two different
    sets of code: one for Internet Explorer and one for the other browsers.'
  prefs: []
  type: TYPE_NORMAL
- en: Enter jQuery in 2006, created by John Resign.
  prefs: []
  type: TYPE_NORMAL
- en: The lack of standardization across browsers was the impetus for creating jQuery.
    From DOM manipulation to Ajax calls, the syntax and structure of jQuery are a
    "write once, use in all browsers" paradigm. With the development of ES6 and beyond,
    JavaScript *is* getting more standardized. However, there's over a decade of jQuery
    code out there that the majority of JavaScript-heavy websites use. Because of
    these legacy applications, it still enjoys quite a bit of popularity, so it's
    important to our discussion. It's also open source, so there are no licensing
    fees associated with using it.
  prefs: []
  type: TYPE_NORMAL
- en: Advantages of jQuery
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Consider the following examples, which do the same thing:'
  prefs: []
  type: TYPE_NORMAL
- en: '**JavaScript ES6**: `document.querySelector("#main").classList.add`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`("red")`'
  prefs: []
  type: TYPE_NORMAL
- en: '**jQuery**: `$("#main").addClass("red");`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'As you can see, jQuery construction is much shorter. Great! Concise code is
    usually a good thing. So, let''s break down this example:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/7b3452fc-c3e8-4c49-80e3-05c835b167cc.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.1 – jQuery syntax
  prefs: []
  type: TYPE_NORMAL
- en: We start almost all jQuery statements with `$`. This is a convention that's
    been used in many libraries, and actually, it's possible to override the dollar
    notation and use anything you'd like, so you may see examples that start with
    `jQuery`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Our selector is a CSS selector, just as we use with `document.querySelector()`.
    A convention is to preface DOM nodes that you've selected via jQuery with dollar
    notation if you store them for later use. So, if we were to store `#main` as a
    variable, it might look like: `const $main = $("#main")`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: jQuery has its own list of functions that are usually legible shorthands for
    internal functionality.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'One interesting fact about jQuery: you can mix jQuery with vanilla JavaScript
    (which is not using any frameworks or libraries). In fact, the term "vanilla JavaScript"
    is a popular way of referring to non-jQuery code.'
  prefs: []
  type: TYPE_NORMAL
- en: Additionally, some frontend libraries, such as Bootstrap, prior to Bootstrap
    5, are built with jQuery, so understanding its usage can help you understand other
    libraries and frameworks. It's not a *bad* thing, but important to be aware of
    as you navigate the brave new world of frontend development.
  prefs: []
  type: TYPE_NORMAL
- en: Disadvantages of jQuery
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Using jQuery, as with any library, requires an additional download on the client
    side. As of the time of writing, jQuery version 3.4.1''s minified version clocks
    in at 88 KB. Now, while that''s pretty negligible and will be cached by the browser,
    keep in mind that this must be executed and loaded on every single page, so it''s
    not just the download size but also the execution time that should be considered.
    Wes Bos also has some great information about scoping in ES6 versus jQuery: [https://wesbos.com/javascript-arrow-functions/](https://wesbos.com/javascript-arrow-functions/).'
  prefs: []
  type: TYPE_NORMAL
- en: Also, while not true in all cases, much of jQuery's usage exists to standardize
    ES5, so the majority of code you'll see online and in examples will be ES5.
  prefs: []
  type: TYPE_NORMAL
- en: Examples of jQuery
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Let's compare our original Star Wars exploration from [Chapter 7](72ec1a13-fd17-4319-8693-8afa18746a72.xhtml), *Events,
    Event-Driven Design, and APIs* ([https://github.com/PacktPublishing/Hands-on-JavaScript-for-Python-Developers/tree/master/chapter-8/swapi](https://github.com/PacktPublishing/Hands-on-JavaScript-for-Python-Developers/tree/master/chapter-8/swapi))
    with a jQuery version ([https://github.com/PacktPublishing/Hands-on-JavaScript-for-Python-Developers/tree/master/chapter-8/swapi-jQuery](https://github.com/PacktPublishing/Hands-on-JavaScript-for-Python-Developers/tree/master/chapter-8/swapi-jQuery)).
  prefs: []
  type: TYPE_NORMAL
- en: Now, I'll grant that this is not the most elegant piece of jQuery, but there
    are reasons for why that is so. Let's break this down.
  prefs: []
  type: TYPE_NORMAL
- en: 'First up—HTML:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **ES6** | **jQuery** |'
  prefs: []
  type: TYPE_TB
- en: '| No change | Addition of `<script src="https://code.jquery.com/jquery-3.4.1.min.js"></script>`
    |'
  prefs: []
  type: TYPE_TB
- en: As we discussed, adding in a JavaScript library or framework inherently needs
    another file download and/or overhead processing time from local files. Usually,
    the size is negligible, so in this case, the only relevant factor is that we're
    adding a line of HTML to load the jQuery file from a global content delivery network.
  prefs: []
  type: TYPE_NORMAL
- en: 'There will be no change to the CSS, as expected. So let''s dive into the JavaScript:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **ES6** | **jQuery** |'
  prefs: []
  type: TYPE_TB
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: OK, now we're seeing some major differences. As mentioned, this isn't necessarily
    the most ideal jQuery program, but I think it gets the point across. To start
    with, while jQuery and ES6 are compatible, most jQuery is used where ES6 isn't
    available—or the code hasn't been upgraded yet to ES6\. One of the first things
    you'll notice about most jQuery code is that it uses semicolons at the end of
    lines and uses `var` instead of `let` or `const`. This isn't unique to jQuery;
    rather, they are ES5 conventions.
  prefs: []
  type: TYPE_NORMAL
- en: 'Instead of using classes, ES5 usually uses manipulation of an object prototype,
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Classes are arguably cleaner ways to do work because they are more self-contained
    and explicit in their methods and usage. However, this convention wasn't around
    when jQuery was popular, so we'll use ES5 prototypal inheritance.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s now take a side-by-side look at how making Ajax calls with ES6 and jQuery
    differ:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **ES6** | **jQuery** |'
  prefs: []
  type: TYPE_TB
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: Here's a great example of the why of jQuery and how its creation contributed
    to some simplifications in ES6\. In ES5, making an Ajax request required two different
    methods of doing so—one for Internet Explorer and one for other browsers—as the
    requesting methods weren't standardized. jQuery helped by doing that browser detection
    and code-switching *under the hood* so that a developer only needed to write one
    statement. With `fetch`, however, this is no longer needed. However, we do see
    that the jQuery code is a little shorter because we don't have the first `.then` function to
    return the JSON from the request. Is this a design flaw or feature? It's actually
    the latter, as APIs could return many different kinds of responses. The `fetch`
    method does some conversion for you under the hood, whereas jQuery expects you
    to pretty much know what your data is and how to work with it.
  prefs: []
  type: TYPE_NORMAL
- en: 'W3Schools has great examples and reference material on jQuery: [https://www.w3schools.com/jquery/](https://www.w3schools.com/jquery/).'
  prefs: []
  type: TYPE_NORMAL
- en: 'If you review the rest of the code in the jQuery version of the code, you''ll
    find many other interesting examples of differences, but for now—onward from jQuery!
    Let''s take a look at a fully fledged *web framework*: Angular.'
  prefs: []
  type: TYPE_NORMAL
- en: Angular
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Angular was created by Google as *AngularJS.* In 2016, it was rewritten as
    version 2, separating it from AngularJS. It''s open source and a framework, versus
    a library, which now raises the question: what''s the difference between a **framework**
    and a **library**?'
  prefs: []
  type: TYPE_NORMAL
- en: A *library* is a toolkit to more easily write your code, for varying purposes.
    To use an architectural analogy, a library is like a set of bricks that can be
    used to assemble a house. Conversely, a *framework* is more aligned with the blueprints
    used to design the house. It may use some of the same bricks—or it might not!
    One of the main differences is that libraries, in general, allow you to write
    your code as you would like to write it without the library dictating opinions
    on how to structure your code. Frameworks, on the other hand, are more opinionated
    and ask you to structure your code in the best practices of *that* framework.
    It's a nebulous (and sometimes overloaded) term, so there's an understandable
    amount of debate on what's a library and what's a framework. Just search *Stack
    Overflow* and you'll find competing definitions. A good simplified statement is
    that a **framework** can be a collection of technologies with a specified use
    pattern, whereas a **library** is more likely to be one technology that helps
    manipulate your data.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s consider this diagram:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/fd9b66a9-b387-4586-99af-a7a15553517f.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.2 – Framework composition
  prefs: []
  type: TYPE_NORMAL
- en: As we can see, a framework can, in fact, be comprised of multiple libraries.
    The design pattern of the framework usually dictates how and when these libraries
    are used.
  prefs: []
  type: TYPE_NORMAL
- en: Angular uses *TypeScript*, which is an open source programming language. Originally
    developed by Microsoft, it's JavaScript with some additional functionality that
    is—or can be—appealing to some developers. Even though TypeScript is classified
    as its own language, it's a superset of JavaScript, so it transpiles down to normal
    JavaScript and thus doesn't require any additional work to run in a browser, aside
    from executing the Angular build process.
  prefs: []
  type: TYPE_NORMAL
- en: Advantages of Angular
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Angular, like most frameworks, is opinionated about your file structure and code
    syntax (especially with TypeScript in the mix). This may sound like a disadvantage,
    but it''s actually really important when working in a team: you have been seeded
    with existing file structures regarding how to work with your code, and this is
    a *good* thing.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Angular also does not exist in isolation. It''s part of a **technology stack**,
    which means that it''s a soup-to-nuts solution encompassing the frontend to a
    database. You may have encountered the term **MEAN** stack: **MongoDB, Express,
    Angular, and Node.js**. While you can use Angular outside of this stack, it provides
    an easy-to-setup ecosystem for development that is well understood by others.'
  prefs: []
  type: TYPE_NORMAL
- en: If you're not familiar with the **Model-View-Controller** (**MVC**) paradigm,
    now is a good time to get acquainted with it. Many technology stacks across multiple
    languages utilize this paradigm to separate concerns in your code base. For example,
    the **model** in your program works with the data acquisition and manipulation
    from your data source(s) (such as a database and/or APIs), while the **controller**
    manages the interactions between the model, data sources, and the **view** layer.
    The **view** mostly controls the visual display of the information in a full-stack
    environment. There is debate within the full-stack MVC community, as far as approaches
    go, between the so-called "fat model, skinny controller" approaches, and the converse.
    It's not important right now to go into that distinction, but you'll see that
    debate in the community.
  prefs: []
  type: TYPE_NORMAL
- en: Speaking of community, there's the fact that Angular developers have formed
    an ad hoc network of people helping each other out. The discussions alone are
    valuable and help you navigate the landscape.
  prefs: []
  type: TYPE_NORMAL
- en: There are a few other advantages to Angular, such as two-way data binding (making
    sure the model and view talk to each other) and specialized directives bound to
    HTML elements, but those are nuances that aren't important to discuss right now.
  prefs: []
  type: TYPE_NORMAL
- en: Disadvantages of Angular
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The main con of Angular is its steep learning curve. Along with the discrepancy
    between the original AngularJS and the more modern Angular iterations, Angular
    is, unfortunately, suffering from decreasing popularity among developers. Additionally,
    it is *quite* verbose and complex. According to some Angular developers, tasks
    such as working with third-party libraries can be repetitive.
  prefs: []
  type: TYPE_NORMAL
- en: The use of TypeScript instead of standard ES6 is also a point of concern. While
    TypeScript is useful, it adds to the learning curve of using Angular. That being
    said, Angular is indeed very versatile.
  prefs: []
  type: TYPE_NORMAL
- en: Examples of Angular
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Let's build a small "Hello World" application with Angular. We'll need a few
    tools to start our work, such as `npm`. Refer to [Chapter 2](94fc54d0-7655-4e18-ac2b-762a0752afaa.xhtml),
    *Can We Use JavaScript Server-Side? Sure!,* for installation of `npm` and its
    friends. If you'd prefer, you can also follow along with the code provided at
    [https://github.com/PacktPublishing/Hands-on-JavaScript-for-Python-Developers/tree/master/chapter-8/angular-example](https://github.com/PacktPublishing/Hands-on-JavaScript-for-Python-Developers/tree/master/chapter-8/angular-example).
  prefs: []
  type: TYPE_NORMAL
- en: 'Here are our steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Begin by installing the Angular CLI: `npm install -g @angular-cli`.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a new example project with `ng new example`. Accept the defaults for
    this installation by pressing *Enter* at the prompts.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Go into the directory that was just created: `cd example`.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Begin the server: `ng serve --open`.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'At this point, your web browser should open this page at `http://localhost:4200/`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/02598c51-13b8-48aa-929c-53bed1e9d762.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.3 – Example start page
  prefs: []
  type: TYPE_NORMAL
- en: 'OK, great. This looks like a simple enough page for us to work with. Here''s
    the file structure that our CLI created:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s look at the code that was generated. Open `src/index.html`. Here''s
    what you''ll see:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: That's it! You see, this is just a template for Angular to create the page we
    were just looking at, and then the JavaScript does the rest. If you view the source
    of the page in the browser, you'll see something very similar, but just with a
    few script calls. All JavaScript for a **single-page app** (**SPA**) is downloaded
    at once or possibly chunked into blocks intended to be used in harmony.
  prefs: []
  type: TYPE_NORMAL
- en: Single-page applications
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: It's worth discussing exactly what a SPA is. We've touched on this topic before,
    but let's now take a look at why Angular (and React and Vue, which we'll get to
    shortly) are popular and compelling to use. Think of a standard, HTML-based website.
    It probably has a consistent header, footer, and styling. However, a standard
    website needs to download (or serve from local cache) these assets every time
    you navigate to a different page (not to mention retrieving the HTML and rerendering
    it). A SPA eliminates this redundancy by packaging together all of the relevant
    data into one unified package that's transmitted to the browser. The browser then
    parses the JavaScript and renders it. The result is a fast, smooth experience
    that essentially eliminates page load time lag. You've used these already. If
    you use Gmail or most of the modern online email systems, you may have noticed
    that the page load time is negligible, or, at worst, has a small loading icon.
    The load time and ostensibly wasteful redownload of resources and content is one
    problem that SPAs are designed to handle.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we've discussed how a SPA can help increase our efficiency, let's take
    a look at the JavaScript behind our Angular example.
  prefs: []
  type: TYPE_NORMAL
- en: The JavaScript
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'First of all, let''s open `src/app/app.component.html` and look at line 2:
    `{{ title }}!`.'
  prefs: []
  type: TYPE_NORMAL
- en: Hm, what are these curly braces? If you're familiar with other templating languages,
    you may recognize this as a template token that's intended to be replaced by our
    rendering language before being rendered. So, what is the method to replace it?
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s now look at `src/app/app.component.ts`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: We can see that the template is referencing `app.component.html` and our `AppComponent`
    class is specifying `title` as `app works!`. That's exactly what we saw in our
    browser. Welcome to the power of a templating system!
  prefs: []
  type: TYPE_NORMAL
- en: For now, we won't get into the SPA feature of Angular, but check out the Angular
    tutorial at [https://angular.io/tutorial](https://angular.io/tutorial) for more
    details.
  prefs: []
  type: TYPE_NORMAL
- en: Now, let's continue on our tour with React.
  prefs: []
  type: TYPE_NORMAL
- en: React and React Native
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Originally created by Jordan Walke at Facebook in 2013, React has quickly evolved
    into one of the leading user interface libraries currently in use. In contrast
    with Angular, React does not seek to be a complete framework, but rather focuses
    on specific parts of the web workflow. Since web pages are inherently *stateless*
    (that is, no real information is transferred from page to page), SPAs aim to store
    certain pieces of state in JavaScript memory, enabling subsequent views to be
    populated with data. React is a prime example of how this type of architecture
    works while still not encompassing the entire framework paradigm. In MVC terminology,
    React deals with the view layer.
  prefs: []
  type: TYPE_NORMAL
- en: Advantages of React
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Since React *itself* only deals with views, it relies on other libraries to
    round out its feature set, such as React Router and Hooks. That is, the base architecture
    of React is designed to be modular and have add-ons used to do other parts of
    the workflow. At the moment, it's not important to know about React Router, Hooks,
    or Redux, but just be aware that React is only one part of the puzzle for a complete
    website.
  prefs: []
  type: TYPE_NORMAL
- en: So, why is this an advantage? Unlike some other JavaScript tools, such as Angular,
    React doesn't try to reinvent the wheel with its own rules and regulations or
    language structures. It feels like you're coding in basic JavaScript because,
    for the most part, you are!
  prefs: []
  type: TYPE_NORMAL
- en: Another advantage of React is how it deals with components and templates. Components
    are simply reusable pieces of code that can be used in multiple places in your
    program with different data to populate the view. React also has a great step-by-step
    tutorial at [https://reactjs.org/tutorial/tutorial.html](https://reactjs.org/tutorial/tutorial.html).
    We'll dissect this in the *Examples of React* section. For now, of course, we
    need to discuss the disadvantages.
  prefs: []
  type: TYPE_NORMAL
- en: Disadvantages of React
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To be honest, the learning curve for React (and especially its newer sister
    technologies, such as Redux and Hooks, which simplify state-based management)
    is steep. However, by the community, that''s not even considered a major disadvantage,
    because the same is true with almost all libraries and frameworks. A major disadvantage,
    however, is its rapid pace of development. Now, you may be thinking: *but a continually
    evolving technology is good*! That is good thinking, but in practice, it can be
    a bit daunting, especially when dealing with breaking changes.'
  prefs: []
  type: TYPE_NORMAL
- en: Another turn-off for some developers is the mixing of HTML and JavaScript inside
    JavaScript. It uses a syntax extension that allows adding HTML within your JavaScript
    that is called JSX. For purists, the mixing of presentation layer code into logic
    structures may seem foreign and an architectural anti-pattern. There is, again,
    a learning curve to JSX.
  prefs: []
  type: TYPE_NORMAL
- en: 'It''s time to take a look at a classic React example application: Tic Tac Toe.'
  prefs: []
  type: TYPE_NORMAL
- en: Example of React
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'You can follow along a step-by-step tutorial to build this application at [https://reactjs.org/tutorial/tutorial.html](https://reactjs.org/tutorial/tutorial.html),
    and for ease of use, you can use this GitHub directory—[https://github.com/PacktPublishing/Hands-on-JavaScript-for-Python-Developers/tree/master/chapter-8/react-tic-tac-toe](https://github.com/PacktPublishing/Hands-on-JavaScript-for-Python-Developers/tree/master/chapter-8/react-tic-tac-toe)—for
    the completed example:'
  prefs: []
  type: TYPE_NORMAL
- en: Clone the repository and `cd` into the `react-tic-tac-toe` directory.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Execute `yarn start`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Don't be surprised by the new `yarn` command. It's a different package manager
    that is similar to `npm`.
  prefs: []
  type: TYPE_NORMAL
- en: 'When `yarn start` is complete, it will provide you with a URL similar to `http://localhost:3000/`.
    Open it in your browser. You should see this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/b835bbd5-7d50-4e48-85b0-2cfa2d433f29.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.4 – React Tic Tac Toe, starting
  prefs: []
  type: TYPE_NORMAL
- en: If you're not familiar with the game Tic Tac Toe, the logic is simple. Two players
    alternate marking an X or an O in a 3-by-3 grid until one player has three of
    their marks in a row, whether horizontally, vertically, or diagonally.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s play! If you click the boxes, here''s what you may arrive at:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/c72eaaa5-a451-4068-8d2c-56d9562eb12a.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.5 – React Tic Tac Toe, possible end state
  prefs: []
  type: TYPE_NORMAL
- en: Notice that the example also maintains a state history with the buttons on the
    right side of the screen. You can rewind play into any of those states by clicking
    the buttons. This is an example of how React uses **state** in order to maintain
    a sense of continuity across parts of the application.
  prefs: []
  type: TYPE_NORMAL
- en: Components
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: To illustrate the concept of reusable components, consider the code for the
    top row of the Tic Tac Toe grid. Take a peek at `src/index.js`.
  prefs: []
  type: TYPE_NORMAL
- en: 'You should see this starting on line 27:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: '`renderSquare` is a fairly simple function that renders JavaScript XML, or
    **JSX**. As mentioned before, JSX is an extension to JavaScript. It introduces
    XML-like capabilities in a standard JavaScript file, marrying JavaScript syntax
    with a set of HTML and XML to construct the components we''ve been talking about.
    It''s not its own fully fledged templating language per se, but it might, in some
    ways, actually be more powerful.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Here''s `renderSquare`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'So far, so good…it''s fairly standard-looking…except for one thing. What is
    `Square`? That''s not an HTML tag! Here''s the power of JSX: we can define our
    own reusable tags as these wonderful components we''ve been talking about. Think
    of them as LEGO® bricks we can use to assemble our own application. From basic
    building blocks, we can construct a very sophisticated SPA.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Thus, `Square` is simply a function that returns a standard HTML button with
    a few properties, such as its `onClick` handler. You can see what this handler
    does later on in the code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: We've really only scratched the surface of React, but I hope you've gotten a
    sense of its power. In fact, it's poised to be the dominant frontend framework
    in the ecosystem. At the time of writing, React has far eclipsed Angular in the
    number of job openings in the technology world.
  prefs: []
  type: TYPE_NORMAL
- en: React Native
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A discussion of React would be incomplete without mentioning React Native. One
    of the difficult aspects of native mobile application development is, well, native
    languages. The Android platform utilizes Java, while iOS relies on Swift as a
    programming language. We won't get into the details of mobile development here
    (or React Native), but it's important to note that there are major differences
    between React and React Native. When I first began experimenting with React, I
    was under the impression that the components were reusable between React and React
    Native. To an extent, this is *mildly* true, but the differences between the two
    outweigh the similarities.
  prefs: []
  type: TYPE_NORMAL
- en: Native's main strength comes from the fact that you're not writing in another
    language; rather, you're still writing JavaScript. With that being said, there
    are additional complexities to Native, especially when dealing with the native
    features of a mobile device, such as the camera. To that end, I advise you to
    consider carefully the use of React Native in your project lifespan and do *not*
    assume all knowledge transfers from one to the other.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, let''s discuss a relative newcomer to the JavaScript world: Vue.js.'
  prefs: []
  type: TYPE_NORMAL
- en: Vue.js
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Another newcomer to the JavaScript framework ecosystem is Vue.js (more commonly
    referred to simply as Vue). Developed in 2014 by Evan You, it's another open source
    framework that's designed to provide advanced functionality for SPAs and user
    interfaces. Evan You felt that there were worthwhile parts of Angular worth keeping,
    yet room for improvement. It's an admirable goal! Some may say the project succeeded
    in doing just that, while others find other projects superior. However, the goal
    of this chapter isn't to pass judgment on any technology but rather to expose
    you to various extensions of JavaScript that will make your work easier and more
    adherent to modern standards.
  prefs: []
  type: TYPE_NORMAL
- en: Vue, unlike React, includes *routing*, *state*, and *build tooling* out of the
    box. It also has a learning curve, as do many similar technologies, so be sure
    to give yourself space and time to learn if you choose to explore Vue.
  prefs: []
  type: TYPE_NORMAL
- en: We'll be investigating the base example of Vue from the official guide at [https://vuejs.org/v2/guide/](https://vuejs.org/v2/guide/). If
    you look at the lesson in the *Declarative Rendering *section, you'll find a Scrimba
    lesson. Feel free to watch the tutorial or access the code from [https://github.com/PacktPublishing/Hands-on-JavaScript-for-Python-Developers/tree/master/chapter-8/vue-tutorial](https://github.com/PacktPublishing/Hands-on-JavaScript-for-Python-Developers/tree/master/chapter-8/vue-tutorial),
    but here are the basics.
  prefs: []
  type: TYPE_NORMAL
- en: 'The HTML of Vue looks fairly similar to any other framework that uses curly-brace
    tokens for content replacement:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: It's worth noting that the curly-brace syntax will likely conflict with other
    templating systems, such as Mustache, but we'll continue using the built-in Vue
    technologies for now.
  prefs: []
  type: TYPE_NORMAL
- en: Since you have the `{{ message }}` token, let's see what powers it.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you look at the `index.js` file, you''ll find it is very simple:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'This basic structure should look familiar: it''s an instantiation of a class
    with an object as a parameter. Note that the data element contains a key of the
    message with the value `Hello Vue`. This is what is passed to the view layer as
    `{{ message }}` and thus our app renders our message:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/dbd93645-a1f0-44fc-b42b-7fb6f8b1598d.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.6 – Vue's "Hello World" example
  prefs: []
  type: TYPE_NORMAL
- en: So far, its abilities seem similar to other tools we've explored, so let's dive
    into the advantages and disadvantages.
  prefs: []
  type: TYPE_NORMAL
- en: Features of Vue.js
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'As the only competitor to Vue in practice is React, it might be enough to leave
    this comparison in your hands: [https://vuejs.org/v2/guide/comparison.html](https://vuejs.org/v2/guide/comparison.html).
    However, let''s break down a couple of points of the comparison with a more objective
    eye, as even the author(s) of the comparison admitted it was biased toward Vue
    (as one would expect):'
  prefs: []
  type: TYPE_NORMAL
- en: '**Performance**: Ideally, any framework or library adds only a negligible load
    time or instantiation time to an application, but in practice, this varies. I''m
    sure we all remember the days of multi-second Ajax or Flash (or even Java servlet!)
    loaders, but in general, these delays have been mitigated by an asynchronous,
    step-by-step loading pattern. One of the signature details of a modern web technology
    should be its unobtrusive and progressive enhancement of the user experience.
    To that point, Vue does an excellent job of being an additive experience.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**HTML + JavaScript + CSS**: Vue allows an unprecedented mixing and matching
    of technologies, whereby it can take standard HTML, CSS, and JavaScript combined
    with JSX and Vue-specific syntax in order to construct an application. It''s a
    bit of a mixed bag to say whether this is a benefit or a liability, but it is
    a fact of the technology.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Angular ideas**: Unlike React, which rejects almost all Angular conventions,
    Vue leverages a few learning points from Angular. This could make it a worthwhile
    framework for someone looking to leave Angular, though the jury is still out on
    the value/efficacy of this approach.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Now, let's look at an example of Vue.
  prefs: []
  type: TYPE_NORMAL
- en: Example of Vue.js
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let''s work with the Vue CLI to create a sample project:'
  prefs: []
  type: TYPE_NORMAL
- en: Install the CLI with `npm install -g @vue/cli`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Execute `vue create vue-example` in a new directory. For our purposes, you can
    use the default options by pressing *Enter* at each prompt.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Enter the directory: `cd vue-example`.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Start the program with `yarn serve`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/1d33161d-5c7b-4bbc-9880-0ad1eb76c6fb.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.7 – Vue generator home page
  prefs: []
  type: TYPE_NORMAL
- en: 'Vue''s CLI generator created a number of files for us in the `vue-example`
    directory:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s examine the pieces that it created for us:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open `src/App.vue`. We''ll see this in the script block:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: We don't see any of the links we saw in our browser, but the `import` line tells
    us where the content is.
  prefs: []
  type: TYPE_NORMAL
- en: Open `src/components/HelloWorld.vue`. Now, we see the content of our page in
    a `<template>` node. Feel free to change some of the markup and experiment with
    the different variables.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: And that's Vue in a nutshell! You'll find that after going through Angular and
    React, the concepts in Vue are a logical progression and will not be difficult
    to pick up.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Frontend frameworks are powerful tools, but they're not interchangeable. Each
    has its pros and cons and your use of them should not only be dictated by what's
    en vogue at the moment but also by the community support available, performance
    considerations, and longevity of the project. At the end of the day, choosing
    a framework is a nuanced process that requires careful thought and planning. At
    this point in time, React has quite the uptick in adoption, but as time goes by,
    all frameworks fall in and out of favor. What we've covered here only scratches
    the surface of each of these frameworks, so be sure to do your research before
    committing to one.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the next chapter, we''ll explore debugging JavaScript, because let''s face
    it: we''re going to make mistakes and we''ll need to know how to fix them.'
  prefs: []
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Browser wars: [https://en.wikipedia.org/wiki/Browser_wars](https://en.wikipedia.org/wiki/Browser_wars)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: jQuery: [https://en.wikipedia.org/wiki/JQuery](https://en.wikipedia.org/wiki/JQuery)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Understanding ES6 arrow functions for jQuery developers: [https://wesbos.com/javascript-arrow-functions/](https://wesbos.com/javascript-arrow-functions/)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: jQuery tutorial and reference: [https://www.w3schools.com/jquery/](https://www.w3schools.com/jquery/)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Angular tutorial: [https://angular.io/tutorial](https://angular.io/tutorial)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Navigating the React ecosystem: [https://www.toptal.com/react/navigating-the-react-ecosystem](https://www.toptal.com/react/navigating-the-react-ecosystem)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: React tutorial: [https://reactjs.org/tutorial/tutorial.html](https://reactjs.org/tutorial/tutorial.html)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Vue guide: [https://vuejs.org/v2/guide/](https://vuejs.org/v2/guide/)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Vue comparison with other frameworks: [https://vuejs.org/v2/guide/comparison.html](https://vuejs.org/v2/guide/comparison.html)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
