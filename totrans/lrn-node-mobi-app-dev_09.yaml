- en: Chapter 9. Accessing Native Phone Features
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The main thing that sets hybrid apps apart from ordinary, mobile-friendly web
    apps is the ability to interact with the operating system and hardware of the
    underlying mobile device. Modern devices offer a plethora of services to app developers,
    from GPS and database functionality to Bluetooth, NFC, and other communication
    technologies. Making good use of these services allows us to build apps that meet
    the needs of mobile users in the best way possible.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we will continue building on the brief introduction to mobile
    services that we saw in the last chapter, and we'll do some refreshing as necessary.
    Our goal is to use the GPS receiver, which is one of the most ubiquitous smartphone
    features, in order to build a simple navigation app. In doing so, we will also
    get familiar with a new, fundamental AngularJS component called the directive.
  prefs: []
  type: TYPE_NORMAL
- en: Creating the project
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We will start off by setting up the basic structure of our app. As before,
    we will go for a blank project and build our app from scratch to make sure that
    we understand how everything works:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a new project folder for your app. Next, enter into the folder and execute
    the following from your terminal or command line:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Ionic will now download and configure everything you need in order to deploy
    a basic app (albeit not a very interesting one). You can see what it looks like
    by going into your project folder and executing the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'The output of this command is shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating the project](img/B04653_09_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Now that we have the basics in place, let's start adding some basic functionality.
  prefs: []
  type: TYPE_NORMAL
- en: Creating the basic app structure
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We want to keep our app as simple as possible—a single screen with a map, together
    with a toolbar where we can place buttons for various utilities, such as finding
    the user's current location.
  prefs: []
  type: TYPE_NORMAL
- en: Let's create a basic view that meets this requirement.
  prefs: []
  type: TYPE_NORMAL
- en: 'Open your app''s `index.html` file and make sure that it looks like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'The browser preview should now look like this (if you closed the server after
    the previous step, feel free to start it up again and leave it running; it will
    automatically load any changes made to the underlying sources):'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating the basic app structure](img/B04653_09_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: A little bit more content, but nothing exciting as of yet. Have patience; we
    are getting there.
  prefs: []
  type: TYPE_NORMAL
- en: Integrating Google Maps into the app
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Next, we want to integrate the most essential feature of our UI—the map. To
    do so, we will use **Google Maps**, one of the most popular map services.
  prefs: []
  type: TYPE_NORMAL
- en: If you have ever used the Google Maps application on a mobile device or checked
    directions to a location on Google, you are already familiar with what Google
    Maps looks like and some of what it can do. In essence, Google Maps is a complete
    package that offers everything—scalable maps, satellite imagery, geocoding, and
    much more. For our purposes here, it is perfect.
  prefs: []
  type: TYPE_NORMAL
- en: 'To integrate Google Maps into the app , we need to import the Google Maps JavaScript
    SDK, which is freely available. To do so, add the following import to the `index.html`
    file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, we will need to designate an area of the UI where the app should be drawn.
    Change the existing `div id` tag to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'In order to render the map properly, we will need to add some custom CSS to
    force the map to fill its parent container. Open the `www/css/style.css` file
    and add the following to it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Also note that we added a binding for a controller for our map. We will use
    this in order to perform the initial configuration needed in order to render and
    work with the map. So, let''s go ahead and add it! Create the `www/js/controllers.js`
    file in your project and make sure that it contains the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Here, we defined a new `supernav.controllers` module, which will contain the
    controllers of our app. For now, it only has one such controller—`MapCtrl`. Let''s
    go through it and consider what it does:'
  prefs: []
  type: TYPE_NORMAL
- en: We first defined the map scope variable, which will be used to simply refer
    to the map that we are working with. We also defined a scope function in order
    to bind a value to this variable.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'We defined the `initialize` local function, which will be used in order to
    set up and configure a Google Maps instance as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Here, we defined the `mapOptions` object, which provides the initial settings
    for the map to be created. It has the following properties:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`center`: This property includes latitude and longitude coordinates for the
    point on the Earth''s surface on which the map will initially be centered on.
    The coordinate pair is passed as an instance of Google Maps'' own `LatLng` object.'
  prefs: []
  type: TYPE_NORMAL
- en: '`zoom`: This is the degree of zooming the location that needs to be applied
    to the map.'
  prefs: []
  type: TYPE_NORMAL
- en: '`mapTypeId`: This is the kind of map that we want to show. Google Maps supports
    several different view modes, ranging from raw satellite imagery to detailed views
    of roads, businesses, and more.'
  prefs: []
  type: TYPE_NORMAL
- en: 'We then created the actual `Map` object. We pass the following to its constructor:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This is the part of the **Document Object Model** (**DOM**) where we want to
    bind the map. In our case, it is the `div` with the `map` ID, which was earlier
    defined in our view. We used the standard `getElementById` DOM function in order
    to retrieve a reference.
  prefs: []
  type: TYPE_NORMAL
- en: Then we have `mapOptions` that we defined earlier.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, after the `map` has been created, we bind it to the `map` scope object
    that we defined earlier.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, if the DOM is fully loaded, we attempt to execute the `initialize`
    function that we just defined. If the DOM is not ready yet, we instead register
    it as a callback that needs to be run once it is.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'All we need to do now is make sure that the controller is properly loaded and
    put in charge of the map. To do so, first make sure that the JavaScript file is
    imported by adding the following to your `index.html` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, modify the `app.js` file in order to make sure that the module is listed
    as a dependency, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'That''s it! The browser preview should now look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Integrating Google Maps into the app](img/B04653_09_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: We have come pretty far already. While we do not have any advanced navigation
    capabilities yet, we have successfully built a basic app that people can use just
    for the purpose of browsing the maps of the world. Not bad for work that took
    just 10 minutes!
  prefs: []
  type: TYPE_NORMAL
- en: Before we move on though, it is worth pausing and considering the architectural
    road that we have travelled so far. Everything we have done here is standard AngularJS
    practice—create a `view` for the element that we want to display (in this case,
    a `map`), create a `controller` for it and some logic, and activate the controller
    by integrating the map into the app. However, you may recall that we mentioned
    earlier in the book that the the greatest advantage of AngularJS is the creation
    of enhanced HTML. We have already seen how this works through data binding, live
    DOM updates, and other things. However, AngularJS also offers us the ability to
    define custom HTML tags in order to define elements, which can be reused in several
    parts of the application. Our map, which we created here, is a good candidate.
    What if we could just encapsulate it in a `<map>` tag? We can, and to get there,
    we need to talk about directives.
  prefs: []
  type: TYPE_NORMAL
- en: Angular directives
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Simply put, directives are custom HTML elements. You write them like ordinary
    HTML elements, but their functionality is defined entirely programmatically. Thus,
    they extend the standard HTML syntax by letting us add whatever we need to it
    in order to build truly dynamic pages.
  prefs: []
  type: TYPE_NORMAL
- en: Creating directives
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Like the services and controllers that we have already seen, directives are
    defined as components of modules, and AngularJS gives us the tools that are necessary
    to create them. We will explore this process by creating a directive for the map
    that we created earlier.
  prefs: []
  type: TYPE_NORMAL
- en: 'The first thing that we will need to do is create a new file named `www/js/directives.js`
    for the directives of our project. Create this file and add the following to it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: The directive `module` function is used to define a directive for a module,
    and as you might have guessed, its first parameter is the name of the `directive`
    itself, while the second one is a `factory` function that gives us an object describing
    how the directive works. In that sense, directives are similar to the services
    that we studied earlier.
  prefs: []
  type: TYPE_NORMAL
- en: Restricting directives
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let''s start building the factory function for our `map` directive. The first
    thing that we should do is add a restriction to the `directive` in order to tell
    the AngularJS parser which kinds of HTML elements this particular directive may
    occur as:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Right now, you are probably exclaiming, *E? What is this E of which you speak?*
    Well, AngularJS allows us to confine a directive to the following three different
    classes of elements:'
  prefs: []
  type: TYPE_NORMAL
- en: '**E (Elements)**: These are your standard HTML tags, such as `<map></map>`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**A (Attributes)**: These are the element attributes, such as `<div map></div>`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**C (Classes)**: These are the customized element class attributes that are
    mapped to the directive, such as `<div class="map"></div>`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'You are not required to stick with just one restriction. For example, you can
    also write the following in order to restrict it to elements and attributes:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Hence, the Angular parser will detect the directive if you write either `<map></map>`
    or `<div map></map>`.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You will frequently find that it makes sense to restrict directives only to
    a single kind of element. This is good practice as it reduces the complexity of
    your app.
  prefs: []
  type: TYPE_NORMAL
- en: Scope isolation
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Just like controllers, directives are able to access the scope in which they
    are operating. However, it is also possible (and generally considered good practice)
    to create an isolated scope for the directive. This scope will contain a set of
    data that only the current instance of the directive is aware of. In addition
    to this, scope isolation also helps you create reusable widgets, which enhance
    code quality.
  prefs: []
  type: TYPE_NORMAL
- en: 'We achieve this by defining scope injection points in our `directive`, which
    will take the form of the standard HTML attributes:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Here, we defined an injection point called `onCreate`, which maps the directives
    to a `function` in the parent scope that we are isolating (the `&` symbol signifies
    a binding by delegation). For example, let''s say that we want to inject the `onCreate`
    method from `MapCtrl` into the isolated scope. We will then write our directive
    like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: At this point, the `map` parameter is not bound. Later, we will see how to define
    and pass it to the function from within the `directive` itself in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: However, before we move on, did you observe that although we name our injection
    point `onCreate`, we wrote it as `on-create` in the actual HTML? This is due to
    an AngularJS process called **normalization**. Through this, attributes and tags
    are translated into a more concise form. Part of the process involves replacing
    **hyphen-bound** words with **camel-cased** words. We will give you the reference
    to the documentation if you wish to know more about how it works, since understanding
    it is not crucial to developing our directive here.
  prefs: []
  type: TYPE_NORMAL
- en: DOM manipulation
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Ultimately, we want our map directive to expand and show a map where it occurs
    in the DOM. To do so, we will need to allow it to actually manipulate the DOM
    itself.
  prefs: []
  type: TYPE_NORMAL
- en: 'The typical way to achieve this is by providing the `directive` with a `link`
    function, which allows it to look into the DOM update process. Let''s add one
    link to our `map` directive, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'Looks oddly familiar, doesn''t it? This is the same `initialize` function and
    associated map setup procedure that we defined in our `controller` earlier, albeit
    with some slight modifications. We have already covered how this works. So, let''s
    go over how it figures in the context of the `link` function:'
  prefs: []
  type: TYPE_NORMAL
- en: 'The `link` function takes the following three parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`$scope`: This is the scope under which the directive is rendered.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`$element`: This is the tag to which the directive is bound, which is `<map>`
    in our case. The tag is wrapped in the JQuery-like jqLite library, which allows
    us to perform direct manipulations on it.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`$attr`: This defines the attributes for the directive element along with their
    associated values.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Inside the `initialize` function itself, we now use `$element[0]` in order to
    get the name of the tag itself (`map` in our case). We also use the `$scope` parameter
    in order to call the `onCreate` delegate in the parent scope (note how we explicitly
    need to define the parameter name and its associated value in this case).
  prefs: []
  type: TYPE_NORMAL
- en: Putting it all together
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We now have a full-fledged directive, and it''s time to integrate it into our
    app. First, make sure that the new directive is properly loaded. The first line
    of the `app.js` file should look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Likewise, the `index.html` file should contain the following import:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, make sure that the `ion-content` section in `index.html` now looks like
    this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, since we moved the rendering logic for the `map` into the directive,
    remove it from the `controller.js` file, which should now look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, we need to make some slight modifications to `style.css` in order
    to make sure that the `map` directive will render on app properly. Make sure that
    it looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: That's it! Ensure that you reload the preview in your browser if necessary.
    It should look just the same as it did when we were not using a directive. We
    have succeeded in putting all together!
  prefs: []
  type: TYPE_NORMAL
- en: Adding geolocation via GPS
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that we have an even better working map view, let's go ahead and add some
    basic navigation features to it, namely, the ability to focus the map on our current
    physical location.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, let''s add a `button` to the footer toolbar for now. Make sure that
    the `ion-footer-bar` tag looks like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'Your preview should now look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Adding geolocation via GPS](img/B04653_09_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Now, we need to hook into the location capabilities of the native device in
    order to find the user''s current location. Fortunately, this can be done directly
    through the HTML5 geolocation interface. To see it in action, let''s add the following
    to the `controller.js` file inside the `MapCtrl` controller:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: Note what we did here.
  prefs: []
  type: TYPE_NORMAL
- en: We defined the `centerOnUser()` scoped function. This function is in turn bound
    to the location button that we just defined in the `index.html` file.
  prefs: []
  type: TYPE_NORMAL
- en: In this function, we have the `navigator.geolocation.getCurrentPosition` function,
    a part of the HTML5 standard, in order to retrieve the current location of the
    user. This function takes a callback as an argument, which in turn takes a position
    object, `pos`, as an argument.
  prefs: []
  type: TYPE_NORMAL
- en: Inside the callback, we use the latitude and longitude value stored in `pos`
    in order to recenter the map using the `setCenter()` method provided by Google
    Maps.
  prefs: []
  type: TYPE_NORMAL
- en: You can now try out the navigation for yourself in the preview. Clicking on
    the location button should change the focus of the map to your current location.
    That's it. We are done!
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we worked directly with the Google Maps API in order to render
    the map and work with maps. While this is perfectly fine, we also recommend that
    you check out the module that can be found at [http://angular-ui.github.io/angular-google-maps/#!/](http://angular-ui.github.io/angular-google-maps/#!/),
    which makes it even easier to work with Google Maps in AngularJS.
  prefs: []
  type: TYPE_NORMAL
- en: Apart from the navigation features that we covered here, there are of course
    a plethora of services offered by mobile devices. Fortunately, almost all of the
    services have a corresponding Cordova plugin, which will let you make use of these
    services. We recommend that you refer to the Cordova plugin registry, which can
    be found at [http://plugins.cordova.io/#/](http://plugins.cordova.io/#/), whenever
    you need to find one.
  prefs: []
  type: TYPE_NORMAL
- en: You can do much, much more with Google Maps than what we explored here. We highly
    recommend that you explore the developer's page for Google Map, which can be found
    at [https://developers.google.com/maps/](https://developers.google.com/maps/),
    to get a better view of the available possibilities regarding Google Map.
  prefs: []
  type: TYPE_NORMAL
- en: The navigation app that we built here is really the `map` starter app in Ionic.
    You can find the complete source code for it at [https://github.com/driftyco/ionic-starter-maps](https://github.com/driftyco/ionic-starter-maps).
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, you learned how to use native phone features and Google Maps
    in order to build a simple navigation app. Most importantly, you also studied
    directives in AngularJS, a powerful feature that lets you create custom HTML elements.
  prefs: []
  type: TYPE_NORMAL
