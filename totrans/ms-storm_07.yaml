- en: Monitoring of Storm Cluster
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous chapters, we learned how we can deploy topologies on remote
    Storm clusters, how we can configure the parallelism of a topology, the different
    types of stream grouping, and so on. In this chapter, we will focus on how we
    can monitor and collect the statistics of topologies running on Storm clusters.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will be covering the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Collecting Storm metrics through the Nimbus thrift port
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Integration of Storm with Ganglia
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installation of Graphite
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Cluster statistics using the Nimbus thrift client
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This section covers how we can collect cluster details (similar to the details
    shown on the Storm UI page) using the Nimbus thrift client. Extracting/collecting
    information through the Nimbus thrift client allows us to visualize the data.
  prefs: []
  type: TYPE_NORMAL
- en: The Nimbus thrift API is very rich, and exposes all the necessary information
    required to monitor the Storm cluster.
  prefs: []
  type: TYPE_NORMAL
- en: Fetching information with Nimbus thrift
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this section, we will be creating a Java project that will contain classes
    that will perform the following operations using the Nimbus thrift client:'
  prefs: []
  type: TYPE_NORMAL
- en: Collect the Nimbus configuration
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Collect the supervisor statistics
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Collect the topology statistics
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Collect the spout statistics for a given topology
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Collect the bolt statistics for a given topology
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Kill the given topology
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following are the steps to fetch the cluster details using the Nimbus thrift
    client:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a Maven project by using `com.stormadvance` as `groupId` and `stormmonitoring`
    as `artifactId`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following dependencies to the `pom.xml` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a utility class, `ThriftClient`, in the `com.stormadvance` package.
    The `ThriftClient` class contains logic to make a connection with the Nimbus thrift
    server and return the Nimbus client:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s create a class, `NimbusConfiguration`, in the `com.stormadvance` package.
    This class contains logic to collect the Nimbus configuration using the Nimbus
    client:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: The preceding code uses the `getNimbusConf()` method of the class `org.apache.storm.generated.Nimbus.Client`
    to fetch the Nimbus configuration.
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a class, `SupervisorStatistics`, in the `com.stormadvance` package to
    collect the information of all the supervisor nodes running in the Storm cluster:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: The `SupervisorStatistics` class uses the `getClusterInfo()` method of the `org.apache.storm.generated.Nimbus.Client`
    class to collect the cluster summary and then calls the `get_supervisors_iterator()`
    method of the `org.apache.storm.generated.ClusterSummary` class to get an iterator
    over the `org.apache.storm.generated.SupervisorSummary` class.
  prefs: []
  type: TYPE_NORMAL
- en: 'See the following for the output of the `SupervisorStatistics` class:'
  prefs: []
  type: TYPE_NORMAL
- en: '**![](img/00044.jpeg)**'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a class `TopologyStatistics` in the `com.stormadvance` package to collect
    the information of all the topologies running in the Storm cluster:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: The `TopologyStatistics` class uses the `get_topologies_iterator()` method of
    the `org.apache.storm.generated.ClusterSummary` class to get an iterator over
    class `org.apache.storm.generated.TopologySummary`. The class `TopologyStatistics`
    will print the value of the number of executors, the number of tasks, and the
    number of worker processes assigned to each topology.
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a class `SpoutStatistics` in the `com.stormadvance` package to get the
    statistics of the spouts. The class `SpoutStatistics` contains a method `printSpoutStatistics(String
    topologyId)` to print the details of all the spouts served by a given topology:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding class uses the `getTopologyInfo(topologyId)` method of the class
    `org.apache.storm.generated.Nimbus.Client` to fetch the information of a given
    topology. The `SpoutStatistics` class prints the following statistics of the spout:'
  prefs: []
  type: TYPE_NORMAL
- en: Spout ID
  prefs:
  - PREF_UL
  - PREF_UL
  type: TYPE_NORMAL
- en: Number of tuples emitted
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Number of tuples failed
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Number of tuples acknowledged
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Create a class `BoltStatistics` in the `com.stormadvance` package to get the
    statistics of the bolts. The class `BoltStatistics` contains a method `printBoltStatistics(String
    topologyId)` to print the information of all the bolts served by a given topology:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding class uses the `getTopologyInfo(topologyId)` method of the class
    `backtype.storm.generated.Nimbus.Client` to fetch the information of a given topology.
    The class `BoltStatistics` prints the following statistics of bolt:'
  prefs: []
  type: TYPE_NORMAL
- en: Bolt ID
  prefs:
  - PREF_UL
  - PREF_UL
  type: TYPE_NORMAL
- en: Number of tuples emitted
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Number of tuples failed
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Number of tuples acknowledged
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Create a class `killTopology` in `com.stormadvance` package and define a method
    `kill` as mentioned as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: The preceding class uses the `killTopology(topologyId)` method of the class
    `org.apache.storm.generated.Nimbus.Client` to kill the topology.
  prefs: []
  type: TYPE_NORMAL
- en: In this section, we covered several methods of collecting the Storm cluster
    metrics/details using the Nimbus thrift client.
  prefs: []
  type: TYPE_NORMAL
- en: Monitoring the Storm cluster using JMX
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This section will explain how we can monitor the Storm cluster using **Java
    Management Extensions** (**JMX**). The JMX is a set of specifications used to
    manage and monitor applications running in the JVM. We can collect or display
    Storm metrics, such as heap size, non-heap size, number of threads, number of
    loaded classes, heap and non-heap memory, virtual machine arguments, and managed
    objects on the JMX console. The following are the steps we need to perform to
    monitor the Storm cluster using JMX:'
  prefs: []
  type: TYPE_NORMAL
- en: 'We will need to add the following line in the `storm.yaml` file of each supervisor
    node to enable JMX on each of them:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Here, `12346` is the port number used to collect the supervisor JVM metrics
    through JMX.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following line in the `storm.yaml` file of the Nimbus machine to enable
    JMX on the Nimbus node:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Here, `12345` is the port number used to collect the Nimbus JVM metrics through
    JMX.
  prefs: []
  type: TYPE_NORMAL
- en: 'Also, you can collect the JVM metrics of worker processes by adding the following
    line in the `storm.yaml` file of each supervisor node:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Here, `%ID%` denotes the port number of the worker processes. If the port of
    the worker process is `6700`, then its JVM metrics are published on port number
    `26700` (`2%ID%`).
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, run the following commands on any machine where Java is installed to start
    the JConsole:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'The following screenshot shows how we can connect to the supervisor JMX port
    using the JConsole:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00045.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: If you open the JMX console on a machine other than the supervisor machine,
    then you need to use the IP address of the supervisor machine in the preceding
    screenshot instead of `127.0.0.1`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, click on the Connect button to view the metrics of the supervisor node.
    The following screenshot shows what the metrics of the Storm supervisor node look
    like on the JMX console:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00046.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Similarly, you can collect the JVM metrics of the Nimbus node by specifying
    the IP address and the JMX port of the Nimbus machine on the JMX console.
  prefs: []
  type: TYPE_NORMAL
- en: The following section will explain how you can display the Storm cluster metrics
    on Ganglia.
  prefs: []
  type: TYPE_NORMAL
- en: Monitoring the Storm cluster using Ganglia
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Ganglia is a monitoring tool that is used to collect the metrics of different
    types of processes that run on a cluster. In most applications, Ganglia is used
    as the centralized monitoring tool to display the metrics of all the processes
    that run on a cluster. Hence, it is essential that you enable the monitoring of
    the Storm cluster through Ganglia.
  prefs: []
  type: TYPE_NORMAL
- en: 'Ganglia has three important components:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Gmond**: This is a monitoring daemon of Ganglia that collects the metrics
    of nodes and sends this information to the Gmetad server. To collect the metrics
    of each Storm node, you will need to install the Gmond daemon on each of them.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Gmetad**: This gathers the metrics from all the Gmond nodes and stores them
    in the round-robin database.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Ganglia web interface**: This displays the metrics information in a graphical
    form.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Storm doesn't have built-in support to monitor the Storm cluster using Ganglia.
    However, with JMXTrans, you can enable Storm monitoring using Ganglia. The JMXTrans tool
    allows you to connect to any JVM, and fetches its JVM metrics without writing
    a single line of code. The JVM metrics exposed via JMX can be displayed on Ganglia
    using JMXTrans. Hence, JMXTrans acts as a bridge between Storm and Ganglia.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following diagram shows how JMXTrans is used between the Storm node and
    Ganglia:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00047.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Perform the following steps to set up JMXTrans and Ganglia:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Run the following commands to download and install the JMXTrans tool on each
    Storm node:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the following commands to install the Ganglia Gmond and Gmetad packages
    on any machine in a network. You can deploy the Gmetad and Gmond processes on
    a machine that will not be a part of the Storm cluster:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'Edit the following line in the `gmetad.conf` configuration file, which is located
    at `/etc/ganglia` in the Gmetad process. We are editing this file to specify the
    name of the data source and the IP address of the Ganglia Gmetad machine:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: You can replace `127.0.0.1` with the IP address of the Ganglia Gmetad machine.
  prefs: []
  type: TYPE_NORMAL
- en: 'Edit the following line in the `gmond.conf` configuration file, which is located
    at `/etc/ganglia`, in the Gmond process:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'Here, `127.0.0.1` is the IP address of the Storm node. You need to replace
    `127.0.0.1` with the actual IP address of the machine. We have mainly edited the
    following entries in the Gmond configuration file:'
  prefs: []
  type: TYPE_NORMAL
- en: The cluster name
  prefs:
  - PREF_UL
  - PREF_UL
  type: TYPE_NORMAL
- en: The host address of the head Gmond node in the `udp_send` channel
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The port in the `udp_recv` channel
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Edit the following line in the `ganglia.conf` file, which is located at `/etc/
    httpd/conf.d`. We are editing the `ganglia.conf` file to enable access on the
    Ganglia UI from all machines:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: The `ganglia.conf` file can be found on the node where the Ganglia web frontend
    application is installed. In our case, the Ganglia web interface and the Gmetad
    server are installed on the same machine.
  prefs: []
  type: TYPE_NORMAL
- en: 'Run the following commands to start the Ganglia Gmond, Gmetad, and web UI processes:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: Now, go to `http://127.0.0.1/ganglia` to verify the installation of Ganglia,
    and replace `127.0.0.1` with the IP address of the Ganglia web interface machine.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now, you will need to write a `supervisor.json` file on each supervisor node
    to collect the JVM metrics of the Storm supervisor node using JMXTrans and then
    publish them on Ganglia using the `com.googlecode.jmxtrans.model. output.GangliaWriter
    OutputWriters` class. The `com.googlecode. jmxtrans.model.output.GangliaWriter
    OutputWriters` class is used to process the input JVM metrics and convert them
    into the format used by Ganglia. The following is the content for the `supervisor.json`
    JSON file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: Here, `12346` is the JMX port of the supervisor specified in the `storm.yaml`
    file.
  prefs: []
  type: TYPE_NORMAL
- en: You need to replace the `IP_OF_SUPERVISOR_MACHINE` value with the IP address
    of the supervisor machine. If you have two supervisors in a cluster, then the
    `supervisor.json` file of node 1 contains the IP address of node 1, and the `supervisor.json`
    file of node 2 contains the IP address of node 2.
  prefs: []
  type: TYPE_NORMAL
- en: You need to replace the `IP_OF_GANGLIA_GMOND_SERVER` value with the IP address
    of the Ganglia Gmond server.
  prefs: []
  type: TYPE_NORMAL
- en: 'Create the `nimbus.json` file on the Nimbus node. Using JMXTrans, collect the
    Storm Nimbus''s process JVM metrics and publish them on Ganglia using the `com.googlecode.jmxtrans.model.output.GangliaWriter
    OutputWriters` class. The following are the contents of the `nimbus.json` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: Here, `12345` is the JMX port of the Nimbus machine specified in the `storm.yaml`
    file.
  prefs: []
  type: TYPE_NORMAL
- en: You need to replace the `IP_OF_NIMBUS_MACHINE` value with the IP address of
    the Nimbus machine.
  prefs: []
  type: TYPE_NORMAL
- en: You need to replace the `IP_OF_GANGLIA_GMOND_SERVER` value with the IP address
    of the Ganglia Gmond server.
  prefs: []
  type: TYPE_NORMAL
- en: 'Run the following commands on each Storm node to start the JMXTrans process:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: Here, `PATH_OF_JSON_FILE` is the location of the `supervisor.json` and `nimbus.json`
    files.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, go to the Ganglia page at `http://127.0.0.1/ganglia` to view the Storm
    metrics. The following screenshot shows what the Storm metrics look like:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00048.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Perform the following steps to view the metrics of Storm Nimbus and the supervisor
    processed on the Ganglia UI:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the Ganglia page.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now click on the `stormcluster` link to view the metrics of the Storm cluster.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The following screenshot shows the metrics of the Storm supervisor node:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00049.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'The following screenshot shows the metrics of the Storm Nimbus node:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00050.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we covered the monitoring of the Storm cluster through the
    Nimbus thrift client--similar to what we covered through the Storm UI. We also
    covered how we can configure the Storm to publish the JMX metrics and the integration
    of Storm with Ganglia.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we are going to cover the integration of Storm with Kafka
    and look at some sample examples to illustrate the process.
  prefs: []
  type: TYPE_NORMAL
