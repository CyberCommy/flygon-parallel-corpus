- en: Chapter 4. Networking and the Internet
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter we will cover:'
  prefs: []
  type: TYPE_NORMAL
- en: Troubleshooting bad connections
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Copying files to another machine–FTP and SCP
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Logging into another machine – Telnet and Secure Shell
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Getting a web page without a browser – wget
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Browsing the web – Firefox
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: E-mail – using a web mail program
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Running your own web server – httpd
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What is using that port? The /etc/services file
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: IPv4 versus IPv6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Being "on the net" is crucial in today's world. Here we explain connectivity
    and what to do when it doesn't work. But first we will explain the pros and cons
    of a wired versus a wireless connection.
  prefs: []
  type: TYPE_NORMAL
- en: A typical wired Ethernet connection is fast and reliable. It does not normally
    suffer from dropouts or lost packets. A good quality wire such as Cat 5E or Cat
    6 can run for several feet without any loss of signal.
  prefs: []
  type: TYPE_NORMAL
- en: Wireless connectivity gives you the freedom to, well, not have a wire for one
    thing. When properly configured it can be effortless to use and be very reliable.
  prefs: []
  type: TYPE_NORMAL
- en: 'Wired connection has the following pros:'
  prefs: []
  type: TYPE_NORMAL
- en: Wired connection is typically faster than wireless
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In general, it is more reliable
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It doesn't suffer from periodic dropouts or lost packets
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Is easier to configure and troubleshoot
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Wired connection has the following cons:'
  prefs: []
  type: TYPE_NORMAL
- en: We need to use wires; it can be very difficult to rearrange or change, especially
    in a computer lab environment
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We need someone to design and physically connect the network
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It can be confusing when using large servers with multiple Ethernet ports
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Wireless connection has the following pros:'
  prefs: []
  type: TYPE_NORMAL
- en: It is convenient; we don't have to deal with wires
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In some cases, it can go pretty far from the base router
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It is easily set up for guest access
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Wireless connection has the following cons:'
  prefs: []
  type: TYPE_NORMAL
- en: It is not always reliable. Dropped packets happen much more frequently than
    with a wired connection.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It can be hard to set up, especially for the first time.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We have to deal with passwords and encryption to prevent unwanted access.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Troubleshooting bad connections
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This seems to happen occasionally, and at the worst possible time. These are
    the steps I normally take to diagnose and solve the problem on a wired connection.
    It is assumed that the connection worked properly at some time in the past.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: There is no special setup for this example, unless you happen to have a broken
    machine somewhere. You can run most of these commands without fear of hurting
    a good system.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Try these steps when diagnosing a network issue:'
  prefs: []
  type: TYPE_NORMAL
- en: 'First let''s make sure the connection is really down by pinging a known external
    address. I use Road Runner as my ISP, so for me the command would be:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Something like this should appear:![How to do it...](img/3008OS_04_00.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Press*Ctrl* + *C* to stop the output. If the command line says timed out, or
    says something about no host or bad route, the connection is indeed down. Let's
    try to fix it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Find your gateway address. Run the `route` command; your gateway should show
    up at the top of the output. Note, the `route` command taking a long time to complete
    is also a sign the connection is down.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Ping the gateway provided by route above. If it pings successfully, then the
    problem is most likely on the router, or at the ISP itself.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If it doesn't get a good ping, let's try this. If you already know the interface
    name, skip to the next step. If not, find it by using the `ifconfig` command.
    Look for a stanza that has something like `eth0` or `p3p2`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Run the `ethtool` command on the interface. In my case it is `ethtool eth0`.
    Look at the last line; it should say:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: If it does not, the problem may be the wire. If your port has LEDs see if they
    are on. One of them should blink from time to time. Try wiggling the wire. Of
    course, if you have a known good wire, try replacing it. Note, a "known good wire"
    does *not* necessarily mean one right out of the package. Got bit by that once.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If the wire seems okay, let's look deeper. Make sure, in the steps above, you
    have the right interface. Note at this point you may want to just read these steps
    instead of running the commands, as they will take your network down.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Try running the `ifdown` `<interface>` command. You probably will not see any
    output.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now run the `ifup` `<interface>` command. It may take a few seconds, and then
    you should see some output. If you are using DHCP, you should see the connection
    being made. When you get the prompt back, try the ping again.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: I'll assume if you're still reading, the `ping` failed and the connection is
    still down. It is possible your router and/or modem has become jammed up. Try
    turning those off, wait about a minute, and then turn them back on.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: After waiting for the network to settle in try the `ping` again. If it is still
    down, continue with the next steps.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Even though I despise this as a solution, at this point, I would suggest a
    cold shutdown. Close down all except one terminal and run the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: I like to wait a few minutes before rebooting, just to make sure the memory
    is actually clear. Okay, so turn it back on and wait for it to boot all the way
    up.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Try the `ping` command again. If it now works, I would suspect some kind of
    transient error or problem. If it continues to work, well that's great. However,
    if it fails again I would suspect the hardware might be going bad.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If the `ping` command stills fails after a reboot, I would try booting up a
    Live Media image. If this works and gets on the net, something is out of whack
    in the files on your base system. If it does not work, I would suspect the hardware
    again.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: One last thing; make sure no one has made any changes to your DHCP server. A
    misconfigured server can cause all kinds of bad things to happen, such as not
    getting a connection.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: I hope this section has been useful. These steps have worked for me countless
    times in the past. One more thing I would suggest is to look at your `/var/log/messages`
    file (and/or `dmesg`). It may shed some light on why the connection is failing.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Working with IP addresses, subnets, domains, and so on**'
  prefs: []
  type: TYPE_NORMAL
- en: This will serve as a very brief overview of what is meant by an IP address,
    subnet, and domain. Understanding this information will help you with future sections
    of this book.
  prefs: []
  type: TYPE_NORMAL
- en: An IP address, in general, is what distinguishes one computer from another on
    a network. It is a set of numbers such as `66.69.172.30`. Within a home network,
    since **NAT** (**Network Address Translation**) is most likely used, you may be
    more familiar with the local addresses, such as `192.168.1.115`.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is a quick list of the terminology:'
  prefs: []
  type: TYPE_NORMAL
- en: '**IP address**: The Internet Protocol address of this machine, for example,
    `192.168.1.115`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Subnet**: The third octet (or set of numbers) is the subnet. For example,
    `192.168.1.115` and `192.168.1.120` are on the same subnet. However, `192.168.2.115`
    is not.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Domain**: A domain is usually referred to by a hostname, such as [rr.com](http://rr.com).
    It too has a numeric IP. Use the `ping` command to determine what IP a hostname
    is using.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Copying files to another machine – FTP and SCP
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Not counting email, the two most common ways to copy files to another machine
    are **FTP** (**File Transfer Protocol**)and **SCP** (**Secure copy**). Here we
    will discuss both.
  prefs: []
  type: TYPE_NORMAL
- en: FTP has been around for many years and is still used quite a lot today. However,
    standard FTP does have a serious drawback. The data is sent in what is called
    "clear text". This means a knowledgeable person could obtain the data under the
    right conditions. We will talk about this a bit later.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We will assume an FTP server has already been set up and is available for this
    exercise. Normally you would use `ftp` command from one machine (the client) to
    another (the server). However, for this example I am using just one machine. The
    command to start an FTP session is `ftp server-name` where server-name can be
    a host name known on your network, or a numeric IP address. For this example,
    I have created a file in `/tmp` named `f1.txt` and a file in `/home/jklewis` named
    `f5.txt`.
  prefs: []
  type: TYPE_NORMAL
- en: Most Linux distributions are already set up to allow the `scp` command, which
    is very convenient. We will assume your distro allows this. Note that some do
    not allow root access so we will use a guest account.
  prefs: []
  type: TYPE_NORMAL
- en: The syntax for SCP comprises of the given commands.
  prefs: []
  type: TYPE_NORMAL
- en: 'To copy to a machine:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'To copy from a machine:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: (Don't forget the colon above.)
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is a screenshot of the FTP help screen on Fedora 18:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Getting ready](img/3008OS_04_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Here is how to use the`ftp` command:'
  prefs: []
  type: TYPE_NORMAL
- en: 'In a terminal session on the client, run the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: It should present you with a prompt. Type in the username and press *Enter*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Type in the password and press *Enter*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'It should show something like **Login successful**. If it doesn''t, then you
    are not logged in, although there will still be an FTP prompt. Assuming it logged
    in run the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: You should see a listing of files. Run `help` to show a list of commands. They
    might not all be available on your system (which I consider a bug).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'One thing to remember when using`ftp`is to know where you are at all times.
    It is very easy to get confused. Use `pwd` often. Run it now:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'The commands you type are on the server. To run a command locally, prefix it
    with an exclamation point. Try these commands:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'So, let''s actually do something. Change your local directory to `/tmp` by
    running :'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the `!ls` command. Now let''s copy file `f1.txt` to the server:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Now let''s retrieve file `f5.txt` from the server:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: This may appear a bit confusing at first. That's because it is. However, if
    you use it a lot it will become much easier. Remember, you put it to the server,
    and get it from the server.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'When you are finished with your FTP session run the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Now let''s run some `scp` commands, to begin:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a test file by running:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: Enter the password for user `guest`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Assuming file `f5.txt` is on the remote `/temp`, to get it run:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: Don't forget the colon above. Run `ls -la` to see how it went.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: I mentioned that FTP sends its data in clear text. The Secure Shell commands
    (more on that in the next section) use encryption and so security is not a problem.
    Also, it is possible to set up a machine so that the password is not required.
    For more on this, see the `ssh-keygen` command. This topic is also covered in
    [Appendix A](apa.html "Appendix A. Linux Best Practices"), *Linux Best Practices*.
    To configure `sshd`, for example, to change how root logins work, see the `sshd_config`
    file.
  prefs: []
  type: TYPE_NORMAL
- en: Logging into another machine – Telnet and Secure Shell
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Telnet** is an older protocol but is still used a lot today. It suffers from
    the same security problem as FTP; it sends text in a non-encrypted format. However,
    it is still useful in say a lab environment protected by a good firewall.'
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: I will again use the same machine as both the client and server. For this example,
    we will assume both the Telnet client and server are already installed and operational.
  prefs: []
  type: TYPE_NORMAL
- en: The command to start a Telnet session is `telnet hostname`. The hostname can
    be a name reachable on your network or a numeric IP.
  prefs: []
  type: TYPE_NORMAL
- en: '**Secure Shell** (**SSH)**, is a more popular protocol as it provides for strong
    encryption of both the password and text. It''s also much easier to use, in my
    opinion.'
  prefs: []
  type: TYPE_NORMAL
- en: 'To start a secure shell, the command is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Here we will run a few Telnet and SSH commands:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Run the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: A banner and prompt should appear. Enter the username.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter the password.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The message of the day (`/etc/motd)` file will probably be displayed. This is
    a good place to put messages and other information for anyone who is logging in.
    In this terminal you can run pretty much any text-mode command you want. Try `pwd`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You can change to another directory, edit files, and pretty much whatever you
    would normally do if you were actually on the system.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'When you are done with the session, run:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'This is a screenshot of Telnet running on Fedora 18:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/3008OS_04_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Now let''s try running a Secure Shell session:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'Enter your password. The `/etc/motd` file should display as before. Let''s
    try some commands. Run the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'As with Telnet, every text-based command should work just as if you were on
    the actual machine. When done with the session, run:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Secure copy and Secure Shell are the best ways to copy files and to access remote
    machines. Get to know them well. I mentioned above that the `ssh-keygen` program
    allows one to copy files without a password. This works for SSH as well. I use
    this on all my home machines, and also on my website, which is hosted by a service
    provider. For more information on this very cool feature run `man ssh-keygen`.
  prefs: []
  type: TYPE_NORMAL
- en: One other thing, I mentioned that the Telnet and SSH sessions should work just
    like you were on the actual machine. This is not always true when the client is
    running on a non-Linux machine. For example, some of the key strokes may be mapped
    differently. Take a look at the documentation for the client program you are using
    as there may be a way to adjust the key mappings.
  prefs: []
  type: TYPE_NORMAL
- en: Getting a web page without a browser – wget
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Probably everyone has received an e-mail from a questionable source. You know
    you shouldn't click on any of the links, but wouldn't it be nice if there was
    a safe way to determine what was on that site? Well, there is.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `wget` program allows you to download files from URLs. Although it can
    do a lot, the simplest form of the command is: `wget <some URL>`. Assuming no
    errors, it will place that file in the current directory. If you do not specify
    a filename, by default it will attempt to get the `index.html` file.'
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The following is the method to run `wget`:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Run the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: The resulting file will be named `index.html`. View it with more `index.html`.
    Yes, it's my personal web page.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'You can also refer to specific files. Try:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: Try it with some other sites. You can do this on a suspicious site to see if
    it is safe.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If you have a suspect site in mind do a `wget` on the file. View it and look
    for links to other sites. If you see something like `http:/DoWeCheatThemAndHow.com`.
    I probably wouldn't click on that.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `wget` command can do a lot more. With the right parameters, it can be used
    to clone entire websites and a lot of other neat things. Consult the man page
    for more information.
  prefs: []
  type: TYPE_NORMAL
- en: Browsing the web – Firefox
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are several different browsers to choose from for your Linux system. Here
    we will focus on Firefox by Mozilla.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Firefoxis usually available by clicking on the browser icon on your desktop.
    You can also start it from the command line. For this example we will start Firefox
    for the first time with user `jklewis`.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following screenshot shows how Firefox looked like the first time I opened
    it under user `jklewis`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Getting ready](img/3008OS_04_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The following is the method to run Firefox from a terminal:'
  prefs: []
  type: TYPE_NORMAL
- en: Open a terminal session for a guest user. For this example, I ran `su - jklewis`
    and entered my password
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Run `firefox &` (the ampersand tells it to run the command in the background
    so you can still access that terminal. Error messages will also be displayed here).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Firefox should come up with the default settings. Let's change some of them.
    **Go to Edit | Preferences**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: The **Firefox Preferences** screen should come up, on the**General**section.
    See where it shows **Home Page**, change it to something more useful. I changed
    mine to [http://jklewis.com](http://jklewis.com).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The **General** section is also where you can control the behavior of the**Downloads**
    window. I have chosen to leave that checked for this user.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now click on the **Tabs** section. I personally despise browser tabs and so
    I have turned them off. To do this remove the check mark from **Open new windows
    in a new tab instead** and **Always show the tab bar**. Note you do not have to
    do that for this exercise.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The **Content** section allows you to control what gets displayed. Take a good
    look at this page, however, I usually leave these settings as is.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The **Applications** section shows what browser plugins are available. I don't
    change anything here.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now click on the **Privacy** section. This is where you can clear your history
    and deal with cookies.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now click on **Security**. I suggest leaving this as it is.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The **Sync** section lets you sync up with a mobile device.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The **Advanced** section has a few pages to it. The **General** page lets you
    control how the browser operates. Now click on the **Network** page. This is where
    you configure the cache.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The **Update** page deals with what gets updated automatically, and the **Encryption**
    page is where the protocols are set and where you can view and modify your certificates.
    I suggest leaving these as they are.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now close out the **Preferences** dialog.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now let's view a website and bookmark it. Go to the URL field and double-click
    on it. Press the **Delete** key. Now enter `jklewis.com`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The "www" is not normally required.
  prefs: []
  type: TYPE_NORMAL
- en: You should see my web page. Now click on **Bookmarks**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on **Bookmark This Page**. A dialog titled **Page Bookmarked** will appear
    (actually this is absolutely wrong as the page has *not* been bookmarked yet).
    Here you can change the title of the bookmark, or the folder to put it in. For
    now just click on **Done** to finish.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The page should now be bookmarked.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As you can see, there are quite a few more options. Explore these as you need
    them. The following are a few more tips when browsing.
  prefs: []
  type: TYPE_NORMAL
- en: When bookmarking a page, take a good look at the title given. For some reason
    they don't always give a good descriptive name. "Account Login" just doesn't tell
    me much. However, if I change it to "Hi-Fee Bank and Trust – Login" that tells
    me exactly which account it is.
  prefs: []
  type: TYPE_NORMAL
- en: I highly recommend your browser be run from a guest account, and not root. Note
    that if you are running your desktop under a guest user (also highly recommended)
    starting Firefox from the icon will be fine.
  prefs: []
  type: TYPE_NORMAL
- en: On the right of the URL field is a star. Clicking on this brings up **History**.
    Next to that is a semi-circle with an arrow. This is the **Refresh** button. If
    a page ever seems to be loading too slowly, or is just not working right, try
    refreshing the page by clicking on this icon.
  prefs: []
  type: TYPE_NORMAL
- en: E-mail – Using a web mail program
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are many web mail clients available, such as **Evolution** and **Thunderbird**.
    I have used both and find them lacking in some areas. For this reason and others
    I use a browser web mail app instead.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If you already use a web mail program this will probably be old hat to you.
    However, if you have not used one before this should be very helpful. Note, for
    this section I do not suggest you try and run these commands, just read them.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The following is the method to access a webmail client usingFirefox:'
  prefs: []
  type: TYPE_NORMAL
- en: Log in to your account on your provider's website. Somewhere on there should
    be a link to to access your e-mail. Your provider may even give you a choice of
    which web mail app to use. I chose **Squirrel Mail**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Whichever one you pick, it should open up and ask for your email account password.
    Remember that this might be different from the password you used to get into your
    provider's main account.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once you are in the mail app should present you with the contents of your inbox.
    Here you can respond to mails, forward them, provide attachments, and so on.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: There should also be an address book. Find it, open it, and get to know how
    to use it. If the provider has a way to export the address book file to your computer
    make frequent use of that feature so you can restore it later if it gets corrupted.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Keep this in mind; if you are going to compose an email and attach a file to
    it, attach the file first before doing anything else. Then go fill out the other
    fields and compose the text. Trust me, your friends, family, potential employers,
    and so on will all thank you for not forgetting the attachment.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Most web mail programs do not auto refresh the screen. So, if you leave it open
    (which I do all the time) and leave the computer, when you come back be sure to
    refresh the email session. This is usually done by clicking on the **Inbox** title.
    You can also click on the browser's Refresh button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: One last thing about web mailers; the mail will probably eventually fill up
    your allocated space, and you might even get some e-mails about it from your provider.
    What I do is wait until I have used approximately 80 percent of my space in the
    inbox. I then go directly to the last page (usually page 30 or so) and move these
    to the trash. I go through and delete these one page at a time until I am back
    on page 20.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Some people delete mail as they go. This is fine if you are good at it. I am
    not. If I do it that way I'll eventually delete something I wish I could get back.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Speaking of getting a file back, you can usually recover a deleted file by looking
    for it in the **Trash** folder. However, once you have purged the folder, the
    e-mails will be gone for good. The purge usually occurs automatically about once
    a week (configurable on some mailers).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: One of the nice features of a web mailer is you should be able to access your
    email from any browser on any machine. All of the information is stored on the
    provider's website.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is a screenshot of **Squirrel Mail** | **Options**:'
  prefs: []
  type: TYPE_NORMAL
- en: '![There''s more...](img/3008OS_04_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Running your own web server – httpd
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There may come a time when you will want to run your own web server. In my career
    as a software engineer I have been often asked to run the department lab. The
    easiest way to keep my users informed as to what is going on is to put the notes
    and files on my own local website that I control. This may sound hard but it really
    isn't.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This assumes you have a Linux system available to try this out on. If not, you
    can still get a lot out of this section. This also assumes that **httpd** is not
    already installed. These steps were performed on my laptop running Fedora 18.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The following are the steps to install your own Apache httpd server on Fedora:'
  prefs: []
  type: TYPE_NORMAL
- en: 'First install httpd:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'Now change to the configuration directory:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'Make a backup copy of the file: `cp httpd.conf /tmp/httpd.conf.orig`. You may
    want to choose a more suitable backup directory.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Edit the file with a text editor:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: This file contains almost everything you need to know in order to set up your
    httpd server. Read the first page very closely where it talks about ServerRoot.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In brief, if a filename begins with a slash, the server will use that path
    as indicated. However, if a relative path is used, the value of ServerRoot is
    prepended. For example, scroll down to this line:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: Since this is a relative path and ServerRoot is set to `/etc/httpd`, the directory
    that will be included is really `/etc/httpd/conf.modules.d`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In another terminal change to that directory now:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: Be sure to remember how ServerRoot works! It will save you a lot of time. Now
    let's go through the `httpd.conf` file a bit more. The `Listen` directive tells
    httpd which port to use. Leave it at `80` for now.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Scroll down to ServerName. This is where you can enter the name of your particular
    server. Leave it blank for now.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The last one we will talk about is DocumentRoot. This is the directory where
    your web pages will be served from. It should be set to `/var/www/html`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Let's actually start the httpd service. Run `systemctl start httpd.service`.
    This should silently return back to the command line.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We have to enable it as well using the command `systemctl enable httpd.service`.
    This should show a successful link message.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now let''s try it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'Run `ls -la`. It is probably empty. Create a file by running:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: Now either go to or open a browser session. We will check things locally first,
    so in the URL field enter `file:///var/www/html/dmesg1.txt`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The file contents should be displayed. Now let''s create another file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: 'Substituting your IP for mine, try this in the URL field: `192.168.1.115:/newfile.txt`.
    The contents of `newfile.txt` should be displayed.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If you decide to do a lot of "web serving" be sure to read and understand the
    `httpd.conf` file. There is also quite a lot of information available on the net.
  prefs: []
  type: TYPE_NORMAL
- en: You may find that you cannot actually access your files from another computer
    on your network. That is most likely due to a firewall (`iptables`) issue; however,
    your router may need some configuring as well. This will be covered in [Chapter
    5](ch05.html "Chapter 5. Permissions, Access, and Security"), *Permissions, Access,
    and Security*.
  prefs: []
  type: TYPE_NORMAL
- en: What is using that port? The /etc/services file
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: From time to time you may need to know what service is running on a particular
    port. The `/etc/services` file contains that information and more.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Here we will take a look at some common services on a Linux system:'
  prefs: []
  type: TYPE_NORMAL
- en: 'View your `/etc/services` file: `more /etc/services`.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Press the Space bar once to scroll the page down. See where it shows `"ftp"?`.
    The `21` in the next column indicates the port that FTP is using. The `/tcp` and`/udp`
    means that port is available for both protocols.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You should also see `telnet` (if not, press *Enter* a few times). It should
    show port `23`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now let's search for a service. Press the Backspace key a few times to go back
    to the top, and enter `/nameserver`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We can see that `nameserver` is using port `42` and is available for both TCP
    and UDP.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The file is quite long (over 11,000 lines on my system) as there are many, many
    standard ports.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: By convention, ports numbered `0` to `1023` are considered the "well-known ports".
    Ports numbered `1024` to `49151` are the "Registered Ports". The Private and Dynamic
    ports go from `49152` to `65535`. If you are developing an application or are
    otherwise dealing with ports be sure to follow this port use convention.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is a screenshot of the first few lines of `/etc/services` on
    Fedora 18:'
  prefs: []
  type: TYPE_NORMAL
- en: '![There''s more...](img/3008OS_04_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: IPv4 versus IPv6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As of the writing of this book, **Internet Protocol Version 4** (**IPv4**)is
    used to route most of the network traffic on the Internet. It uses 32-bit (4 byte)
    addresses, which allows for a space of 232 addresses. Under IPv4, there are not
    enough addresses remaining to accommodate all of the Internet devices now in use,
    which is why **IPv6** was created. In this section we will first run some commands
    and then discuss IPv4 and IPv6.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let''s try some commands using both protocols:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s start with IPv4\. Run the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, run the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: Now let's try IPv6\. First let's see if your computer has an IPv6 address. Run
    `ifconfig` on your interface; on my laptop it's `ifconfig wlan0`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'You should see something like the following output:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: 'You should also see something like the following output: `inet6 2002:244:b303:0:221:5eff:feff:f15d`.
    Try pinging it. On mine, it''s `ping 2002:244:b303:0:221:5eff:feff:f15d`**.**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Did you get a `ping: unknown host` error? That''s because we have to use theIPv6
    version of ping. Try again, but like the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: 'Now try`ssh`, it seems to already know about IPv6:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In general, under IPv4,a numeric IP address is written as `xxx.yyy.zzz.www`
    which is called dotted decimal format. Each of the 3 numbers separated by the
    dots are called an octet. The high order octet, the `xxx` in this example, indicates
    which class of IP this is. The following is a partial list of the classes available
    in IPv4:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Classes | Ports |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| Private network | 10.0.0.0 |'
  prefs: []
  type: TYPE_TB
- en: '| Local loopback | 127.0.0.1 |'
  prefs: []
  type: TYPE_TB
- en: '| Link-local | 169.254.0.0 |'
  prefs: []
  type: TYPE_TB
- en: '| Private network | 192.168.0.0 |'
  prefs: []
  type: TYPE_TB
- en: '| IP multicast | 224.0.0.0 |'
  prefs: []
  type: TYPE_TB
- en: '| Broadcast | 255.255.255.255 |'
  prefs: []
  type: TYPE_TB
- en: 'You have already seen some examples of the private addresses I use on my home
    network. The format is usually something like the following set of commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: The IPv4 address space became officially exhausted in 2011\. For this, and other
    reasons, IPv6 was created.
  prefs: []
  type: TYPE_NORMAL
- en: IPv6 is the most current version of the internet protocol. As opposed to IPv4
    which uses a 32-bit address, IPv6 uses a 128-bit address. This is 2128 addresses,
    or enough for every person on Earth to each have well over a million for their
    own use. We probably won't run out of these anytime soon.
  prefs: []
  type: TYPE_NORMAL
- en: 'An IPv6 address has 8 groups of 4 hex digits, separated by colons: `2002:4244:b323:0:4687:fcff:fe69:4d0f`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Yes, this looks formidable but there were several reasons for the change:'
  prefs: []
  type: TYPE_NORMAL
- en: The longer address allows for more efficient routing
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It allows for special addressing techniques
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The size of a subnet is now 264 addresses
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Renumbering an existing network under IPv4 can be very complicated; when configured
    correctly, this is not an issue with IPv6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Multicasting is done more efficiently
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: IPv6 has **Stateless Address Autoconfiguration** (**SLAAC**)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'IPv6 addresses can be abbreviated as follows: leading zeroes can be omitted.'
  prefs: []
  type: TYPE_NORMAL
- en: Consecutive groups of zeroes can be omitted and replaced with two colons.
  prefs: []
  type: TYPE_NORMAL
- en: 'Look at the following example: the IP address is `2002:0244:0000:0000:0000:fcff:fe69:4d0f`.'
  prefs: []
  type: TYPE_NORMAL
- en: Omit leading zeroes, we get `2002:244:0:0:0:fcff:fe69:4d0f`.
  prefs: []
  type: TYPE_NORMAL
- en: Now omit the zero groups and we get `2002:244::fcff:fe69:4d0f`.
  prefs: []
  type: TYPE_NORMAL
- en: For more information consult the man pages and Internet. Large usage of IPv6
    is still a long way off, but will be here eventually.
  prefs: []
  type: TYPE_NORMAL
