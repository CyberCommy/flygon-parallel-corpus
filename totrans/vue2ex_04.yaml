- en: Getting a List of Files Using the Dropbox API
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Dropbox API获取文件列表
- en: Over the next few chapters, we are going to be building a Vue-based Dropbox
    browser. This app will take your Dropbox API key and allow you to navigate to
    folders and download files. You will learn about interacting with an API within
    a Vue app, the Vue life cycle hooks, including the `created()` method, and finally
    we will introduce a library called `Vuex` to handle the caching and state of the
    app. The app will have shareable URLs and retrieve the contents of the folder
    passed in via the `#` URL parameter.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的几章中，我们将构建一个基于Vue的Dropbox浏览器。这个应用程序将使用您的Dropbox API密钥，允许您浏览文件夹并下载文件。您将学习如何在Vue应用程序中与API进行交互，了解Vue的生命周期钩子，包括`created()`方法，并最后介绍一个名为`Vuex`的库来处理应用程序的缓存和状态。该应用程序将具有可共享的URL，并通过`＃`URL参数检索文件夹的内容。
- en: This kind of app would be useful if you wanted to give users access to the contents
    of your Dropbox without giving out a username and password. Be warned, however,
    a tech-savvy user could find your API key in the code and abuse it, so don't publish
    this code to the World Wide Web.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想让用户访问您的Dropbox内容而不提供用户名和密码，这种应用程序将非常有用。但请注意，一个精通技术的用户可能会在代码中找到您的API密钥并滥用它，因此不要将此代码发布到互联网上。
- en: 'This chapter is going to cover:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下内容：
- en: Loading and querying the Dropbox API
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 加载和查询Dropbox API
- en: Listing the directories and files from your Dropbox account
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 列出来自您的Dropbox帐户的目录和文件
- en: Adding a loading state to your app
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为您的应用程序添加加载状态
- en: Using Vue animations
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Vue动画
- en: You will need a Dropbox account to follow these next few chapters. If you don't
    have one, sign up and add a few dummy files and folders. The contents of the Dropbox
    don't matter, but having folders to navigate through will help with understanding
    the code.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 您需要一个Dropbox帐户来跟随接下来的几章。如果您没有帐户，请注册并添加一些虚拟文件和文件夹。Dropbox的内容并不重要，但有助于理解代码的文件夹。
- en: Getting started—loading the libraries
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 入门-加载库
- en: 'Create a new HTML page for your app to run in. Create the HTML structure required
    for a web page and include your app view wrapper:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 为您的应用程序创建一个新的HTML页面以运行。创建所需的网页HTML结构，并包含您的应用程序视图包装器：
- en: '[PRE0]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: It's called `#app` here, but call it whatever you want - just remember to update
    the JavaScript.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 这里称为`＃app`，但您可以随意更改名称 - 只需记住更新JavaScript。
- en: As our app code is going to get quite chunky, make a separate JavaScript file
    and include it at the bottom of the document. You will also need to include Vue
    and the Dropbox API SDK.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们的应用程序代码将变得相当庞大，因此请创建一个单独的JavaScript文件并将其包含在文档底部。您还需要包含Vue和Dropbox API SDK。
- en: 'As with before, you can either reference the remote files or download a local
    copy of the library files. Download a local copy for both speed and compatibility reasons.
    Include your three JavaScript files at the bottom of your HTML file:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 与之前一样，您可以引用远程文件或下载库文件的本地副本。出于速度和兼容性的原因，请在HTML文件底部包含您的三个JavaScript文件。
- en: '[PRE1]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Create your `app.js` and initialize a new Vue instance, using the `el` tag to
    mount the instance onto the ID in your view.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 创建您的`app.js`并初始化一个新的Vue实例，使用`el`标签将实例挂载到视图中的ID上。
- en: '[PRE2]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Creating a Dropbox app and initializing the SDK
  id: totrans-18
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建Dropbox应用程序并初始化SDK
- en: Before we interact with the Vue instance, we need to connect to the Dropbox
    API through the SDK. This is done via an API key that is generated by Dropbox
    itself to keep track of what is connecting to your account and where Dropbox requires
    you to make a custom Dropbox app.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 在与Vue实例交互之前，我们需要通过SDK连接到Dropbox API。这是通过Dropbox自动生成的API密钥完成的，用于跟踪连接到您的帐户的内容和位置，Dropbox要求您创建一个自定义的Dropbox应用程序。
- en: Head to the Dropbox developers area and select Create your app. Choose Dropbox
    API and select either a restricted folder *or *full access. This depends on your
    needs, but for testing, choose Full Dropbox. Give your app a name and click the
    button Create app.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 转到Dropbox开发者区域，选择创建您的应用程序。选择Dropbox API并选择受限文件夹或完全访问。这取决于您的需求，但是为了测试，选择完全访问。给您的应用程序命名并单击“创建应用程序”按钮。
- en: 'Generate an access token to your app. To do so, when viewing the app details
    page, click the Generate button under the Generated access token. This will give
    you a long string of numbers and letters - copy and paste that into your editor
    and store it as a variable at the top of your JavaScript. In this book, the API
    key will be referred to as `XXXX`:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 为您的应用程序生成访问令牌。要这样做，在查看应用程序详细信息页面时，单击“生成”按钮下的“生成访问令牌”。这将为您提供一长串数字和字母-将其复制并粘贴到您的编辑器中，并将其存储为JavaScript顶部的变量。在本书中，API密钥将被称为`XXXX`：
- en: '[PRE3]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Now that we have our API key, we can access the files and folders from our
    Dropbox. Initialize the API and pass in your `accessToken` variable to the `accessToken` property
    of the Dropbox API:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们有了API密钥，我们可以访问Dropbox中的文件和文件夹。初始化API并将您的`accessToken`变量传递给Dropbox API的`accessToken`属性：
- en: '[PRE4]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'We now have access to Dropbox via the `dbx` variable. We can verify our connection
    to Dropbox is working by connecting and outputting the contents of the root path:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以通过`dbx`变量访问Dropbox。我们可以通过连接并输出根路径的内容来验证我们与Dropbox的连接是否正常：
- en: '[PRE5]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: This code uses JavaScript promises, which are a way of adding actions to code
    without requiring callback functions. If you are unfamiliar with promises, check
    out this blog post from Google ([https://developers.google.com/web/fundamentals/primers/promises](https://developers.google.com/web/fundamentals/primers/promises)).
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 此代码使用JavaScript promises，这是一种在不需要回调函数的情况下向代码添加操作的方法。如果您对promises不熟悉，请查看Google的这篇博文（[https://developers.google.com/web/fundamentals/primers/promises](https://developers.google.com/web/fundamentals/primers/promises)）。
- en: Take a note of the first line, particularly the `path` variable. This lets us
    pass in a folder path to list the files and folders within that directory. For
    example, if you had a folder called `images` in your Dropbox, you could change
    the parameter value to `/images` and the file list returned would be the files
    and folders within that directory.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 注意第一行，特别是`path`变量。这使我们能够传入一个文件夹路径来列出该目录中的文件和文件夹。例如，如果您在Dropbox中有一个名为`images`的文件夹，您可以将参数值更改为`/images`，返回的文件列表将是该目录中的文件和文件夹。
- en: Open your JavaScript console and check the output; you should get an array containing
    several objects - one for each file or folder in the root of your Dropbox.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 打开您的JavaScript控制台并检查输出；您应该得到一个包含多个对象的数组-每个对象对应Dropbox根目录中的一个文件或文件夹。
- en: Displaying your data and using Vue to get it
  id: totrans-30
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 显示您的数据并使用Vue获取它。
- en: Now that we can retrieve our data using the Dropbox API, it's time to retrieve
    it within our Vue instance and display in our view. This app is going to be entirely
    built using components so we can take advantage of the compartmentalized data
    and methods. It will also mean the code is modular and shareable, should you want
    to integrate into other apps.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以使用Dropbox API检索我们的数据，是时候在Vue实例中检索它并在视图中显示了。这个应用程序将完全使用组件构建，这样我们就可以利用分隔的数据和方法。这也意味着代码是模块化和可共享的，如果您想要集成到其他应用程序中。
- en: We are also going to take advantage of the native Vue `created()` function -
    we'll cover it when it gets triggered in a bit.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还将利用Vue的原生`created()`函数-稍后会介绍它何时被触发。
- en: Create the component
  id: totrans-33
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建组件
- en: 'First off, create your custom HTML element, `<dropbox-viewer>`, in your View.
    Create a `<script>` template block at the bottom of the page for our HTML layout:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Initialize your component in your `app.js` file, pointing it to the template
    ID:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Viewing the app in the browser should show the heading from the template. The
    next step is to integrate the Dropbox API into the component.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
- en: Retrieve the Dropbox data
  id: totrans-39
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Create a new method called `dropbox`. In there, move the code that calls the
    Dropbox class and returns the instance. This will now give us access to the Dropbox
    API through the component by calling `this.dropbox()`:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'We are also going to integrate our API key into the component. Create a data
    function that returns an object containing your access token. Update the Dropbox
    method to use the local version of the key:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: We now need to add the ability for the component to get the directory list.
    For this, we are going to create another method that takes a single parameter—the
    path. This will give us the ability later to request the structure of a different
    path or folder if required.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
- en: 'Use the code provided earlier - changing the `dbx` variable to `this.dropbox()`:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Update the Dropbox `filesListFolder` function to accept the path parameter passed
    in, rather than a fixed value. Running this app in the browser will show the Dropbox
    heading, but won't retrieve any folders because the methods have not been called
    yet.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
- en: The Vue life cycle hooks
  id: totrans-48
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This is where the `created()` function comes in. The `created()` function gets
    called once the Vue instance has initialized the data and methods, but has yet
    to mount the instance on the HTML component. There are several other functions
    available at various points in the life cycle; more about these can be read at Alligator.io.
    The life cycle is as follows:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00009.gif)'
  id: totrans-50
  prefs: []
  type: TYPE_IMG
- en: Using the `created()` function gives us access to the methods and data while
    being able to start our retrieval process as Vue is mounting the app. The time
    between these various stages is split-second, but every moment counts when it
    comes to performance and creating a quick app. There is no point waiting for the
    app to be fully mounted before processing data if we can start the task early.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
- en: 'Create the `created()` function on your component and call the `getFolderStructure`
    method, passing in an empty string for the path to get the root of your Dropbox:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Running the app now in your browser will output the folder list to your console,
    which should give the same result as before.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
- en: We now need to display our list of files in the view. To do this, we are going
    to create an empty array in our component and populate it with the result of our
    Dropbox query. This has the advantage of giving Vue a variable to loop through
    in the view, even before it has any content.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
- en: Displaying the Dropbox data
  id: totrans-56
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Create a new property in your data object titled `structure`, and assign this
    to an empty array. In the response function of the folder retrieval, assign `response.entries`
    to `this.structure`. Leave `console.log` as we will need to inspect the entries
    to work out what to output in our template:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: We can now update our view to display the folders and files from your Dropbox.
    As the structure array is available in our view, create a `<ul>` with a repeatable
    `<li>` looping through the structure.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
- en: 'As we are now adding a second element, Vue requires templates to have one containing
    the element, wrap your heading and list in a `<div>`:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Viewing the app in the browser will show a number of empty bullet points when
    the array appears in the JavaScript console. To work out what fields and properties
    you can display, expand the array in the JavaScript console and then further for
    each object. You should notice that each object has a collection of similar properties
    and a few that vary between folders and files.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
- en: 'The first property, `.tag`, helps us identify whether the item is a file or
    a folder. Both types then have the following properties in common:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
- en: '`id`: A unique identifier to Dropbox'
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`name`: The name of the file or folder, irrespective of where the item is'
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`path_display`: The full path of the item with the case matching that of the
    files and folders'
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`path_lower`: Same as `path_display` but all lowercase'
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Items with a `.tag` of a file also contain several more fields for us to display:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
- en: '`client_modified`: This is the date when the file was added to Dropbox.'
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`content_hash`: A hash of the file, used for identifying whether it is different
    from a local or remote copy. More can be read about this on the Dropbox website.'
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`rev`: A unique identifier of the version of the file.'
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`server_modified`: The last time the file was modified on Dropbox.'
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`size`: The size of the file in bytes.'
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'To begin with, we are going to display the name of the item and the size, if
    present. Update the list item to show these properties:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: More file meta information
  id: totrans-76
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To make our file and folder view a bit more useful, we can add more rich content
    and metadata to files such as images. These details are available by enabling
    the `include_media_info` option in the Dropbox API.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
- en: 'Head back to your `getFolderStructure` method and add the parameter after `path`.
    Here are some new lines of readability:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Inspecting the results from this new API call will reveal the `media_info`
    key for videos and images. Expanding this will reveal several more pieces of information
    about the file, for example, dimensions. If you want to add these, you will need
    to check that the `media_info` object exists before displaying the information:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Try updating the path when retrieving the data from Dropbox. For example, if
    you have a folder called `images`, change the `this.getFolderStructure` parameter
    to `/images`. If you''re not sure what the path is, analyze the data in the JavaScript
    console and copy the value of the `path_lower` attribute of a folder, for example:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Formatting the file sizes
  id: totrans-84
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: With the file size being output in plain bytes it can be quite hard for a user
    to dechiper. To combat this, we can add a formatting method to output a file size
    which is more user-friendly, for example displaying <q class="calibre31">1kb</q>
    instead of <q class="calibre31">1024</q>.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
- en: 'First, create a new key on the data object that contains an array of units
    called `byteSizes`:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: This is what will get appended to the figure, so feel free to make these properties
    either lowercase or full words, for example, *megabyte*.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, add a new method, `bytesToSize`, to your component. This will take one
    parameter of `bytes` and output a formatted string with the unit at the end:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'We can now utilize this method in our view:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Adding a loading screen
  id: totrans-93
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The last step of this chapter is to make a loading screen for our app. This
    will tell the user the app is loading, should the Dropbox API be running slowly
    (or you have a lot of data to show!).
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
- en: The theory behind this loading screen is fairly basic. We will set a loading
    variable to `true` by default that then gets set to `false` once the data has
    loaded. Based on the result of this variable, we will utilize view attributes
    to show, and then hide, an element with the loading text or animation in and also
    reveal the loaded data list.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a new key in the data object titled `isLoading`. Set this variable to
    `true` by default:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Within the `getFolderStructure` method on your component, set the `isLoading`
    variable to `false`. This should happen within the promise after you have set
    the structure:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: We can now utilize this variable in our view to show and hide a loading container.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a new `<div>` before the unordered list containing some loading text.
    Feel free to add a CSS animation or an animated gif—anything to let the user know
    the app is retrieving data:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: We now need to only show the loading div if the app is loading and the list
    once the data has loaded. As this is just one change to the DOM, we can use the
    `v-if` directive. To give you the freedom of rearranging the HTML, add the attribute
    to both instead of using `v-else`.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
- en: 'To show or hide, we just need to check the status of the `isLoading` variable.
    We can prepend an exclamation mark to the list to only show if the app is not
    loading:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Our app should now show the loading container once mounted, and then it should
    show the list once the app data has been gathered. To recap, our complete component
    code now looks like this:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: Animating between states
  id: totrans-108
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As a nice enhancement for the user, we can add some transitions between components
    and states. Helpfully, Vue includes some built-in transition effects. Working
    with CSS, these transitions allow you to add fades, swipes, and other CSS animations
    easily when DOM elements are being inserted. More information about transitions
    can be found in the Vue documentation.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
- en: 'The first step is to add the Vue custom HTML `<transition>` element. Wrap both
    your loading and list with separate transition elements and give it an attribute
    of `name` and a value of `fade`:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Now add the following CSS to either the head of your document or a separate
    style sheet if you already have one:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'With the transition element, Vue adds and removes various CSS classes based
    on the state and time of the transition. All of these begin with the name passed
    in via the attribute and are appended with the current stage of transition:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00010.gif)'
  id: totrans-115
  prefs: []
  type: TYPE_IMG
- en: Try the app in your browser, you should notice the loading container fading
    out and the file list fading in. Although in this basic example, the list jumps
    up once the fading has completed, it's an example to help you understand using
    transitions in Vue.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  id: totrans-117
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we learned how to make a Dropbox viewer, which is a single-page
    application that lists out files and folders from our Dropbox account and allows
    us to show different folder contents by updating the code. We have learned how
    to add a basic loading state to our apps and use the Vue animations for navigation.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
- en: In [Chapter 5](part0089.html#2KS220-985bf4ae118d4f62b18ae64204cb251c), *Navigating
    through the File Tree and Loading Folders from the URL*, we are going to navigate
    through our app folders and add download links to our files.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
