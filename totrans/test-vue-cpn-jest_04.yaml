- en: '*Chapter 4*'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Test Properties and Custom Events
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are different ways to test properties, events, and custom events.
  prefs: []
  type: TYPE_NORMAL
- en: 'Properties are custom attributes that are passed down from parent components
    to child components. Custom events do just the opposite: they send data out to
    the direct parent via an event. When they are combined, they are the wires of
    interaction and communication in Vue.js components.'
  prefs: []
  type: TYPE_NORMAL
- en: In unit testing, testing the ins and outs (properties and custom events) means
    testing how a component behaves when it receives and sends out data in isolation.
    So, let's get our hands dirty.
  prefs: []
  type: TYPE_NORMAL
- en: Properties
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'When we are testing component properties, we can test how the component behaves
    when we pass it certain properties. However, before going on, consider this important
    note:'
  prefs: []
  type: TYPE_NORMAL
- en: To pass properties to components, use `propsData` and not `props`. The latter
    is used to define properties, not to pass data.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, create a `Message.test.js` file and add the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: We group test cases within a `describe` expression, and they can be nested.
    So, we can use this strategy to group the tests for properties and events separately.
  prefs: []
  type: TYPE_NORMAL
- en: 'Then, we''ll create a helper factory function to create a message component,
    and give it some properties:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Testing Property Existence
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The most obvious thing that we can test is whether or not a property exists.
    Remember that the `Message.vue` component has a `message` property, so let''s
    assume it receives that property correctly. vue-test-utils comes with a `hasProp(prop,
    value)` function, which is very handy for this case:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Properties behave in such a way that they will only be received if they''re
    declared in the component. This means that if we pass a **property that is not
    defined, then it won''t be received**. Therefore, to check for the non-existence
    of a property, you could use a non-existing property:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'However, in this case, the test will fail because Vue has **non-props attributes**
    ([https://vuejs.org/v2/guide/components.html#Non-Prop-Attributes](https://vuejs.org/v2/guide/components.html#Non-Prop-Attributes)).
    This sets it to the root of the `Message` component, thus being recognized as
    a prop, so the test will then return `true`. Changing it to `toBeTruty` will make
    it pass for this example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'We can test the **default value** as well. Go to `Message.vue` and change the
    `props` as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, the test could be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Asserting Properties Validation
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Properties can have validation rules, ensuring that a property is required
    or that it is of a determined type. Let''s write the `message` property as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Going further, you could use custom constructors types or custom validation
    rules, as you can see in `the documentation` ([https://vuejs.org/v2/guide/components.html#Prop-Validation](https://vuejs.org/v2/guide/components.html#Prop-Validation)).
    Don''t do this right now; I''m just showing it as an example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Whenever a validation rule is not fulfilled, Vue shows a `console.error`. For
    example, for `createCmp({ message: 1 })`, the error would be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'At the time of writing, `vue-test-utils` doesn''t have a utility to test this.
    We could use `jest.spyOn` to test it instead:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Here, we're spying on the `console.error` function, and checking that it shows
    a message containing a specific string. This is not an ideal way to check it since
    we're spying on global objects and relying on side effects.
  prefs: []
  type: TYPE_NORMAL
- en: 'Fortunately, there is an easier way to do it, which is by checking `vm.$options`.
    Here''s where Vue stores the component options expanded. By expanded, I mean that
    you can define your properties in different ways:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'But they all will end up in the most expanded object form (such as the last
    one). So, if we check the `cmp.vm.$option.props.message` for the first case, they
    all will be in `{ type: X }` format (although, for the first example, it will
    be `{ type: null}`).'
  prefs: []
  type: TYPE_NORMAL
- en: 'With this in mind, we could write a test suite to test that the `message` property
    has the expected validation rules:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Custom Events
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We can test at least two things in custom events:'
  prefs: []
  type: TYPE_NORMAL
- en: Asserting that an event gets triggered after an action
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Checking that an event listener calls when it gets triggered
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'This, in the case of the `MessageList.vue` and `Message.vue` components example,
    gets translated to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Assert that the `Message` components trigger a `message-clicked` when a message
    is clicked.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Check `MessageList` to ensure that when a `message-clicked` is triggered, a
    `handleMessageClick` function is called
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'First, go to `Message.vue` and use `$emit` to trigger that custom event:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, in `MessageList.vue`, handle the event using `@message-clicked`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'Now it''s time to write a unit test. Create a nested `describe` within the
    `test/Message.spec.js` file and prepare the bare bones of the *"Assert that the*
    `Message` *components trigger a* `message-clicked` *when a message gets clicked"*
    that we mentioned before:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: Testing that the Event Click Calls a Method Handler
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The first thing we can test is that when clicking a message, the `handleClick`
    function gets called. For that, we can use a `trigger` of the wrapper component,
    and a Jest spy using the `spyOn` function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: See the `cmp.update()`. When we change things that are used in the template
    – `handleClick`, in this case – and we want the template to apply the changes,
    we need to use the `update` function.
  prefs: []
  type: TYPE_NORMAL
- en: 'Bear in mind that, by using a spy, the original `handleClick` method will be
    called. You will probably intentionally want that; however, normally, we want
    to avoid it and just check that on click, the method is indeed called. For that,
    we can use a Jest Mock function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: Here, we're totally replacing the `handleClick` method, which is accessible
    on the `vm` of the wrapper component returned by the `mount` function.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can make it even easier by using the `setMethods` helper that the official
    tools provide us with:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: Using `setMethods` is the suggested way to do it, since it is an abstraction
    that official tools give us in case the Vue internals change.
  prefs: []
  type: TYPE_NORMAL
- en: Testing that the Custom Event message-clicked Is Emitted
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We''ve tested that the click method calls its handler, but we haven''t tested
    whether the handler emits the `message-clicked` event itself. We can directly
    call the `handleClick` method, and use a Jest Mock function in combination with
    the Vue `vm` `$on` method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: See that, here, we're using `toBeCalledWith`, so we can assert exactly which
    parameters we expect, making the test even more robust. That's not to say we're
    not using `cmp.update()` here since we're making no changes that need to propagate
    to the template.
  prefs: []
  type: TYPE_NORMAL
- en: Testing that @message-clicked Triggers an Event
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'For custom events, we cannot use the `trigger` method, since it''s just for
    DOM events. However, we can emit the event ourselves, by getting the `Message`
    component and using its `vm.$emit` method. So, add the following test to `MessageList.test.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: I'll leave it up to you to test what `handleMessageClicked` does.
  prefs: []
  type: TYPE_NORMAL
- en: Wrapping Up
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we've explored several cases of testing properties and events.
    `vue-test-utils`, the official Vue testing tool, makes this much easier indeed.
  prefs: []
  type: TYPE_NORMAL
- en: You can find the working code we've used here on **GitHub** ([https://github.com/alexjoverm/vue-testing-series/tree/Test-Properties-and-Custom-Events-in-Vue-js-Components-with-Jest](https://github.com/alexjoverm/vue-testing-series/tree/Test-Properties-and-Custom-Events-in-Vue-js-Components-with-Jest)).
  prefs: []
  type: TYPE_NORMAL
