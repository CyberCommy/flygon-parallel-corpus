- en: Chapter 7. Debugging
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter shows how you can use the browser object to inspect some internal
    states of your application.
  prefs: []
  type: TYPE_NORMAL
- en: 'Topics covered in this chapter include:'
  prefs: []
  type: TYPE_NORMAL
- en: Enabling the debugging output
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Dumping the browser state
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'By default, Zombie does not output the internal events to the console, but
    you can run Zombie with the `DEBUG` environment variable set to `true`. If you
    have a UNIX shell command line, you can prefix the launching of your test suite
    with `DEBUG=true`, shown as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'If you are running Windows, you can set and unset the `DEBUG` environment variable
    shown as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'By enabling this environment variable, Zombie will output every HTTP request
    that it makes, along with the received HTTP status code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: As you can see, Zombie also reports all the `3xx-class` HTTP redirects and what
    the new URL is.
  prefs: []
  type: TYPE_NORMAL
- en: This output may be helpful for debugging some URL loading problems, but it can
    be hard to track down which test a specific HTTP request is referring to.
  prefs: []
  type: TYPE_NORMAL
- en: Fortunately, there is a way to bring some clarification to the test output by
    changing the Mocha reporter. Mocha comes with a feature called reporters. So far
    we've used the default reporter, which reports a colored point for every test.
    But if you specify the `spec` reporter, Mocha outputs the test name right before
    the test starts and right after the test ends.
  prefs: []
  type: TYPE_NORMAL
- en: 'To enable the `spec` reporter, just add `-R spec` to the Mocha arguments shown
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'This way you will get an output that is similar to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: This not only tells you which resource loads corresponding to a given test,
    it also informs you of how much time was spent running that test.
  prefs: []
  type: TYPE_NORMAL
- en: Running a specific test
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If you are having trouble with a specific test, you don't need to run the whole
    test suite or even the whole test file. Mocha accepts a `-g <expression>` command-line
    option, and will only run the tests that match that expression.
  prefs: []
  type: TYPE_NORMAL
- en: 'For instance, you can run only the tests that have the word `remove` in the
    description, shown as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: This way you will be running only these specific tests.
  prefs: []
  type: TYPE_NORMAL
- en: Enabling the debugging output per test
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Setting the `DEBUG` environment variable to `true` enables debugging output
    for all tests, but you can instead specify which tests you want to debug, by setting
    `browser.debug` to `true`. For instance, change the `test/todos.js` file and around
    line 204 add this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'This way you don''t need to specify the `DEBUG` environment variable when running
    the following test:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Here you can see that, as intended, Zombie only outputs debugging information
    for the test named `should allow you to remove`.
  prefs: []
  type: TYPE_NORMAL
- en: Using the browser JavaScript console
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Other than the HTTP requests that the browser makes, Zombie doesn't output much
    else that may be interesting or useful while debugging for you to debug your application.
  prefs: []
  type: TYPE_NORMAL
- en: A good option, which provides far more flexibility and insight, is to run your
    application inside a real browser with developer tools and/or a debugger.
  prefs: []
  type: TYPE_NORMAL
- en: A particularly useful alternative for debugging issues that are encountered
    specifically in Zombie.js is to use the `console.log()` function inside your browser
    code (the code that, in the case of this app, sits inside the `public/js` directory).
  prefs: []
  type: TYPE_NORMAL
- en: 'As an example, suppose that you were having a problem with the to-do creation
    form: the alarm option was not correctly triggering the show and hide option of
    the alarm option pane. For this, we can introduce the following `console.log`
    statement in the `public/js/todos.js` file, in order to inspect the value of the
    `ringAlarm` variable: function `hideOrShowDateTime()`.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'This way, when you run the test, you will get the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Using this technique, you can then inspect the state of your application when
    the tests are being run.
  prefs: []
  type: TYPE_NORMAL
- en: Dumping the browser state
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You can also inspect the browser state by doing a `browser.dump()` function
    call inside your test code.
  prefs: []
  type: TYPE_NORMAL
- en: 'For instance, you may want to know the full browser state inside the `should
    present the alarm date form fields when alarm` test in the `test/todos.js` file.
    For this, introduce a `browser.dump()` call immediately after we choose the `No
    Alarm` option:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Make the change in the file and run this test:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'When performing a `browser.dump()` call, you will get the following in the
    output:'
  prefs: []
  type: TYPE_NORMAL
- en: The current URL
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The history, that is, all the URLs that this browser instance visited after
    creation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The offline storage, if you use any
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The event loop state: if it''s waiting on any processing or timers'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The first lines of the HTML document, which may be enough to debug the current
    state
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Dumping the whole document
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'If at any time you need to inspect the entire contents of your document, you
    can inspect the return value of `browser.html()`. For instance, if you want to
    inspect the document''s state right before the browser is reloaded, you can add
    the following line to the `test/todo.js` file, in place of `browser.dump()`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'You can now run the test and observe the output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Your browser developer tools are better suited for debugging your browser application.
    However, if you run into Zombie-specific issues, there are several techniques
    that may help you.
  prefs: []
  type: TYPE_NORMAL
- en: One is to enable the Zombie debugging output. This will show you which resources
    the browser is loading and what the corresponding response status codes that are
    shown alongside are.
  prefs: []
  type: TYPE_NORMAL
- en: You can run specific tests. When debugging a specific problem in a test, you
    can also restrict Mocha to run only that test by using the `-g <pattern>` option.
  prefs: []
  type: TYPE_NORMAL
- en: You can use the `console.log` command in the code that runs in the browser;
    the output will appear in the console.
  prefs: []
  type: TYPE_NORMAL
- en: You can view the current browser state. You can inspect the browser state by
    using the `browser.dump` call, or by logging the result of `browser.html` to the
    console.
  prefs: []
  type: TYPE_NORMAL
- en: If you need to access the whole document at some stage of your test, you can
    also log the return value of `browser.html()`.
  prefs: []
  type: TYPE_NORMAL
