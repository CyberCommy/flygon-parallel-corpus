- en: Date and Time
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Problems
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Here are the problem-solving sections for this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: 39\. Measuring function execution time
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Write a function that can measure the execution time of a function (with any
    number of arguments) in any required duration (such as seconds, milliseconds,
    microseconds, and so on).
  prefs: []
  type: TYPE_NORMAL
- en: 40\. Number of days between two dates
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Write a function that, given two dates, returns the number of days between the
    two dates. The function should work regardless of the order of the input dates.
  prefs: []
  type: TYPE_NORMAL
- en: 41\. Day of the week
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Write a function that, given a date, determines the day of the week. This function
    should return a value between 1 (for Monday) and 7 (for Sunday).
  prefs: []
  type: TYPE_NORMAL
- en: 42\. Day and week of the year
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Write a function that, given a date, returns the day of the year (from 1 to
    365 or 366 for leap years) and another function that, for the same input, returns
    the calendar week of the year.
  prefs: []
  type: TYPE_NORMAL
- en: 43\. Meeting time for multiple time zones
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Write a function that, given a list of meeting participants and their time zones,
    displays the local meeting time for each participant.
  prefs: []
  type: TYPE_NORMAL
- en: 44\. Monthly calendar
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Write a function that, given a year and month, prints to the console the month
    calendar. The expected output format is as follows (the example is for December
    2017):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Solutions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Here are the solutions for the above problem-solving sections.
  prefs: []
  type: TYPE_NORMAL
- en: 39\. Measuring function execution time
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To measure the execution time of a function, you should retrieve the current
    time before the function execution, execute the function, then retrieve the current
    time again and determine how much time passed between the two time points. For
    convenience, this can all be put in a `variadic` function template that takes
    as arguments the function to execute and its arguments, and:'
  prefs: []
  type: TYPE_NORMAL
- en: Uses `std::high_resolution_clock` by default to determine the current time.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Uses `std::invoke()` to execute the function to measure, with its specified
    arguments.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Returns a duration and not a number of ticks for a particular duration. This
    is important so that you don''t lose resolution. It enables you to add execution
    time duration of various resolutions, such as seconds and milliseconds, which
    would not be possible by returning a tick count:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'This function template can be used as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 40\. Number of days between two dates
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As of C++17, the `chrono` standard library does not have support for working
    with dates, weeks, calendars, time zones, and other useful related features. This
    will change in C++20, as time zones and calendar support have been added to the
    standard at the Jacksonville meeting, in March 2018\. The new additions are based
    on an open source library called `date`, built on top of `chrono`, developed by
    Howard Hinnant and available on GitHub at [https://github.com/HowardHinnant/date](https://github.com/HowardHinnant/date).
    We will use this library to solve several of the problems in this chapter. Although
    in this implementation the namespace is `date`, in C++20 it will be part of `std::chrono`.
    However, you should be able to simply replace the namespace without any further
    code changes.
  prefs: []
  type: TYPE_NORMAL
- en: 'To solve this task, you could use the `date::sys_days` class, available in
    the `date.h `header. It represents a count of days since the `std::system_clock` epoch.
    This is a `time_point` with a resolution of a day and is implicitly convertible
    to `std::system_clock::time_point`. Basically, you have to construct two objects
    of this type and subtract them. The result is exactly the number of days between
    the two dates. The following is a simple implementation of such a function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Here are a couple of examples of how these overloaded functions could be used:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 41\. Day of the week
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Solving this problem is again relatively straightforward if you use the `date`
    library. However, this time, you have to use the following types:'
  prefs: []
  type: TYPE_NORMAL
- en: '`date::year_month_day`, a structure that represents a day with fields for year,
    month (1 to 12), and day (1 to 31).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`date::iso_week::year_weeknum_weekday`, from the `iso_week.h `header, is a
    structure that has fields for year, number of weeks in a year, and number of days
    in a week (1 to 7). This class is implicitly convertible to and from `date::sys_days`,
    which makes it explicitly convertible to any other calendar system that is implicitly
    convertible to and from `date::sys_days`, such as `date::year_month_day`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'With that being said, the problem resolves to creating a `year_month_day` object
    to represent the desired date and then a `year_weeknum_weekday` object from it,
    and retrieving the day of the week with `weekday()`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 42\. Day and week of the year
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The solution to this two-part problem should be straightforward from the previous
    two:'
  prefs: []
  type: TYPE_NORMAL
- en: To compute the day of the year, you subtract two `date::sys_days` objects, one
    representing the given day and the other January 0 of the same year. Alternatively,
    you could start from January 1 and add 1 to the result.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'To determine the week number of the year, construct a `year_weeknum_weekday`
    object, like in the previous problem, and retrieve the `weeknum()` value:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'These functions can be used as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 43\. Meeting time for multiple time zones
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To work with time zones, you must use the `tz.h` header of the `date` library.
    However, this needs the *IANA Time Zone Database* to be downloaded and uncompressed
    on your machine.
  prefs: []
  type: TYPE_NORMAL
- en: 'This is how to prepare the time zone database for the date library:'
  prefs: []
  type: TYPE_NORMAL
- en: Download the latest version of the database from [https://www.iana.org/time-zones](https://www.iana.org/time-zones).
    Currently, the latest version is called `tzdata2017c.tar.gz`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Uncompress this to any location on your machine, in a subdirectory called `tzdata`.
    Let's suppose the parent directory is `c:\work\challenges\libs\date` (on a Windows
    machine); this will have a subdirectory called `tzdata`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For Windows, you need to download a file called `windowsZones.xml`, containing
    mappings of Windows time zones to IANA time zones. This is available at [https://unicode.org/repos/cldr/trunk/common/supplemental/windowsZones.xml](https://unicode.org/repos/cldr/trunk/common/supplemental/windowsZones.xml).
    The file must be stored in the same `tzdata` subdirectory created earlier.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In your project settings, define a preprocessor macro called `INSTALL` that
    indicates the parent directory for the `tzdata` subdirectory. For the example
    given here, you should have `INSTALL=c:\\work\\challenges\\libs\\date`. (Note
    that the double backslash is necessary because the macro is used to create a file
    path using stringification and concatenation, and would otherwise result in an
    incorrect path.)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'To solve this problem, we will consider a user structure with minimal information,
    such as name and time zone. The time zone is created using the `date::locate_zone()` function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'A function that displays a list of users and their local time for the start
    of a meeting should transform the given time from a reference zone to the time
    in their own zone. To do that, we can use a conversion constructor of the `date::zoned_time`
    class:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'This function can be used as follows, where the given time (hour and minute)
    is represented in the current time zone:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 44\. Monthly calendar
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Solving this task is actually partially based on the previous tasks. In order
    to print the days of the month as indicated in the problem, you should know:'
  prefs: []
  type: TYPE_NORMAL
- en: What weekday is the first day of the month. This can be determined using the
    `week_day()` function created for a previous problem.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The number of days in the month. This can be determined using the `date::year_month_day_last`
    structure and retrieving the value of `day()`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'With this information determined first, you should:'
  prefs: []
  type: TYPE_NORMAL
- en: Print empty values for the first week before the first weekday
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Print the day number with the proper formatting from 1 to the last day of the
    month
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Break on a new line after every seven days (counting from day 1 of the first
    week, even though that could belong to the previous month)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The implementation of all this is shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
