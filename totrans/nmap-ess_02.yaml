- en: Chapter 2. Network Fundamentals
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Before it's possible for us to use Nmap as a tool, we first need to understand
    the very basics of how it works. In order to scan networks (including the Internet),
    we must initially understand the concepts on which all networks are built. Although
    this book will not describe in-depth networking concepts—you won't become a *packet
    ninja* by learning to use Nmap—we do need to ensure that we can interpret the
    scan results from standard and advanced Nmap scans. Without the fundamentals of
    networking, we will not be able to scan at all!
  prefs: []
  type: TYPE_NORMAL
- en: 'The following topics will be covered in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: How networks work
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The difference between TCP and UDP
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An introduction to ports
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How port scanning works
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How service version detection and banner grabbing work
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The structure of the Internet
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Before we go into some of the complexities of networked software, it's important
    to understand how the Internet itself is designed. In many ways, the Internet
    functions the same as a large network that you might have at your home or office—the
    difference, of course, is that instead of workstations, the Internet has Internet-facing
    services. Most homes, for example, have many computers that are on the same **Local
    Area Network** (**LAN**), but only one IP address on the Internet. If someone
    were to scan this network from their Internet-connected device, they would only
    see Internet-facing services—not each family member's individual computer. This
    is important to note because across the Internet, only ports that are forwarded
    to a machine may be accessible on a given IP address. There are some exceptions
    to this rule that we will look at later.
  prefs: []
  type: TYPE_NORMAL
- en: When scanning a computer on your LAN, however, you will generally be able to
    see all the ports that are open. This is because when packets are traveling on
    a local network, rather than over the Internet, you have direct access to the
    target machine—you don't have to pass through a router or switch that would block
    all of these ports over the Internet. This is why, for example, when hosting a
    server at a LAN party, no one has to forward any ports in a third-party device.
  prefs: []
  type: TYPE_NORMAL
- en: When conducting scans throughout the rest of this book, please keep in mind
    that there are several different elements that may help or stop the scan from
    detecting every service that is listening. We'll go through some of the pitfalls
    in later chapters, and give useful work-arounds whenever possible.
  prefs: []
  type: TYPE_NORMAL
- en: The OSI model
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To understand how packets—which are the bits of information that travel from
    one machine to another—run networks, it's a good idea to have a basic idea of
    the **Open Systems Interconnection** (**OSI**) model. This is a conceptual way
    to think about how networks work on different layers. It's easy to understand
    that physically, networks are just pieces of hardware with electrical signals
    running across them; it's actually much more difficult to conceptualize the logical
    networks that developers and network operations staff (as well as computers) work
    with.
  prefs: []
  type: TYPE_NORMAL
- en: The simplest explanation is that different protocols and bits of information
    work on different layers of the model, and work off of each other. The following
    diagram briefly explains which layer performs which role, so that we can understand
    how service banners and ports work later in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: '![The OSI model](img/4065OS_02_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: It isn't necessary to understand all the intricacies of the OSI model or low-level
    networking in order to use Nmap effectively, and to interpret scan results that
    are accurate. It is necessary, however, to realize that not all networking information
    is created equally—some information is readily accessible at certain times, while
    it is more difficult to access certain data at other times. If you're interested
    in learning more about networking from an in-depth perspective, it's worth checking
    out tools such as Wireshark that can capture packets or view them in transit.
  prefs: []
  type: TYPE_NORMAL
- en: Port scanning
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Nmap is a port scanner, but we haven't yet covered what a port actually is.
    As the name somewhat implies, a port is a way to access a networked service on
    a computer. Each computer has 65,535 ports that can be either open, or closed
    at any time. Some services such as HTTP (that serves web pages) or FTP (that allows
    file transfer) have ports that are associated with them by default. HTTP runs
    on port 80, FTP runs on port 21, and so on. There are huge lists of commonly used
    ports that we can reference later—fortunately for us, Nmap has these lists included
    with its distribution package.
  prefs: []
  type: TYPE_NORMAL
- en: One way to conceptualize a port is to think about an apartment building. In
    this analogy, one apartment building would be an IP address—each apartment within
    the building would be a different port. In this case, the building would have
    to have 65,535 apartments—quite a big property!
  prefs: []
  type: TYPE_NORMAL
- en: When you visit an IP address, it's just like delivering a pizza to the apartment
    building; you know where it is in the world, but you don't know exactly where
    you need to be. That's where ports come in! A port is analogous to an apartment
    number; using a port number, we will know that we're going to 5505 Internet St,
    Apartment 443, to deliver HTTPS traffic!
  prefs: []
  type: TYPE_NORMAL
- en: Ports are commonly identified by putting a colon after an IP address. If you
    see an address that looks something like 127.0.0.1:22, then you can safely assume
    that you are being pointed to the IP address 127.0.0.1 and port 22.
  prefs: []
  type: TYPE_NORMAL
- en: TCP and UDP
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'One area that is important to understand about networking is the two primary
    protocols that networked services can use: TCP and UDP. Services can listen on
    these ports using either of the protocol—and many a times do. TCP (frequently
    shown as TCP/IP) is used for connections that need things to be ordered specifically—for
    example, loading a web page. UDP, however, is a connectionless protocol; being
    connectionless means that UDP connections work like a fire hose of data moving
    from one IP address (the source address) to another (the destination address).
    Because of the way the Internet works, though—it is a large packet-switched network—these
    packets don''t always arrive in order. For something like loading a web page,
    this would be a huge problem. For other uses, however, it makes perfect sense
    to have data arrive in whatever order it received.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Voice over IP** (**VoIP**) calls, for example, usually use the UDP protocol.
    It''s more important for the data to get to its source, even if a packet is missed
    or out of order. This way, while there might be a small audible hiccup in the
    connection, it would not lag while waiting for the data to load. Most of the services
    that we''ll examine in this book are TCP-based, but it''s certainly possible to
    use Nmap to scan UDP services as well (using the `-sU` flag). UDP does not receive
    a reply upon successful transmission of a packet, though; so it can be very time-consuming
    to find out if a service is actually listening on a given UDP port, or simply
    not replying at all.'
  prefs: []
  type: TYPE_NORMAL
- en: Service banners
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that we understand the very basics of how networks, ports, TCP, and UDP
    work, we can start to learn the intricacies of Nmap—a powerful tool that leverages
    various different elements of how computers and networks communicate, to help
    give us useful information about what services various different computers are
    running.
  prefs: []
  type: TYPE_NORMAL
- en: The most common use of Nmap—and its original design—was a simple port scanner.
    A port scanner is simply a piece of software that attempts to connect to each
    specific target port and see if that port is open—determining whether or not a
    TCP three-way handshake can be established.
  prefs: []
  type: TYPE_NORMAL
- en: 'A TCP three-way handshake is a simple way to establish a network-based connection
    before applications begin to communicate with one another. The structure is very
    simple—and don''t worry if these flags don''t mean much to you right now. The
    three-way handshake, as you might expect, consists of three steps between two
    speakers (let''s call them Alice and Bob). The handshake works as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Alice is requesting a connection with Bob. Alice sends a **SYN** to Bob at the
    specified port.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If Bob wants to establish this connection, Bob sends a response to Alice of
    **SYN/ACK**.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Alice receives the **SYN/ACK**, and verifies that the connection is established
    by sending Bob an **ACK**.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'You can visually understand how this works by referring to the following diagram:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Service banners](img/4065OS_02_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Once you understand how a connection on a certain port is established, it is
    relatively easy to understand how the most basic Nmap port scan—a SYN scan—works.
    Nmap sends a **SYN** request to every port in scope (usually either the most common
    1,000 ports, or the full 65,535 ports on a host) and waits for a **SYN/ACK** response.
    If a **SYN/ACK** response is received, then there is a service listening on that
    open port. Congratulations! We've now covered how basic port scans work. There
    are many different types of scans—not just SYN scans—but the basic idea of the
    request/response model should now be fairly clear.
  prefs: []
  type: TYPE_NORMAL
- en: When we're scanning ports, though, we're usually interested in more than just
    whether or not a port is online. Although most web servers listen on port 80 (which
    is the HTTP assigned port), someone could just as easily put a web server on port
    12345 or 1337\. More than just understanding if a port is open, it's important
    to understand what service is actually listening.
  prefs: []
  type: TYPE_NORMAL
- en: Fortunately for us, Nmap comes with a service version detection module built
    in. This functionality works by creating a connection to the actual service listening,
    and looking for a service banner. Nearly every network-based service is identifiable
    by its initial service banner; even if it's not, though, protocol detection allows
    Nmap to identify the protocol, if not the exact server version that is running.
    We will learn how to conduct basic scans—including service version detection—in
    the next chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: After reading this chapter, you should have a fundamental understanding of how
    computer networks work. Specifically, it's important to understand how TCP and
    UDP differ and how port scanning itself functions. Now that you know that the
    Internet works as a very large computer network—and that you can also scan machines
    locally on your LAN—you should have a solid foundation to continue learning how
    Nmap works, and the advanced features that you can use in a plethora of situations.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will learn how to conduct a basic Nmap scan in order
    to get results in the most common situations. This next chapter will get you on
    your feet and scanning different types of ports and services!
  prefs: []
  type: TYPE_NORMAL
