- en: '*Appendix*'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: About
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This section is included to assist the students in performing the activities
    in the book. It includes detailed steps that are to be performed by the students
    to achieve the objectives of the activities.
  prefs: []
  type: TYPE_NORMAL
- en: 'Chapter 1: Introducing ECMAScript 6'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Activity 1 – Implementing Generators
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You have been tasked with building a simple app that generates numbers in the
    Fibonacci sequence upon request. The app generates the next number in the sequence
    for each request and resets the sequence it is given an input. Use a generator
    to generate the Fibonacci sequence. If a value is passed into the generator, reset
    the sequence. You may start the Fibonacci sequence at n=1 for simplicity.
  prefs: []
  type: TYPE_NORMAL
- en: 'To highlight how the generators can be used to build iterative datasets, follow
    these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Look up the Fibonacci sequence and understand how the next value is calculated.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a generator for the Fibonacci sequence.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Inside the generator, set up the default values for `current` and `next` (0,
    1) using variables `n2` and `n1`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create an infinite `while` loop.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Inside the `while` loop, use the `yield` keyword to provide the current value
    in the sequence and save the return value of the yield statement into a variable
    called `input`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If input contains a value, reset the variables `n2` and `n1` to their starting
    values.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Inside the `while` loop, calculate the new next value from `current` + `next`
    and save it into the variable next.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Otherwise update `n2` to contain the value from `n1` (the `next` value) and
    set `n1` to the `next` value that we calculated at the top of the `while` loop.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Code:**'
  prefs: []
  type: TYPE_NORMAL
- en: '**index.js**'
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Snippet 1.87: Implementing a generator'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: https://bit.ly/2CV4KAi
  prefs: []
  type: TYPE_NORMAL
- en: '**Outcome:**'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.19: Fibonacci sequence with a generator](image/Figure_1.19.jpg)'
  prefs: []
  type: TYPE_IMG
- en: .
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'Figure 1.19: Fibonacci sequence with a generator'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: You have successfully demonstrated how generators can be used to build an iterative
    data set based on the Fibonacci sequence.
  prefs: []
  type: TYPE_NORMAL
- en: 'Chapter 2: Asynchronous JavaScript'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Activity 2 – Using Async/Await
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'You have been tasked with building a server that interfaces with a database.
    You must write some code to look up sets and look up basic user objects in the
    database. Import the `simple_db.js` file. Using the `get` and `insert` commands,
    write the following program using the async/await syntax:'
  prefs: []
  type: TYPE_NORMAL
- en: Look up the key called `john`, the key `sam`, and your first name as a database
    key.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If the database entry exists, log the `age` field of the result object.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If your name does not exist in the database, insert your name and associate
    an object containing your first name, last name, and age. Look up the new data association
    and log the age.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For any `db.get` operation that fails, save the key into an array. At the end
    of the program, print the keys that failed.
  prefs: []
  type: TYPE_NORMAL
- en: '**DB API:**'
  prefs: []
  type: TYPE_NORMAL
- en: '`db.get( index ):`'
  prefs: []
  type: TYPE_NORMAL
- en: This takes in an index and returns a promise. The promise is fulfilled with
    the `db` entry associated with that index. If the index does not exist, the db
    lookup fails, or the key parameter is not specified, the promise is rejected with
    an error.
  prefs: []
  type: TYPE_NORMAL
- en: '`db.insert( index, insertData ):`'
  prefs: []
  type: TYPE_NORMAL
- en: This takes in an index and some data and returns a promise. The promise is fulfilled
    with the key inserted if the operation completes. If the operation fails, or there
    is no key or inserted data specified, the promise is rejected with an error.
  prefs: []
  type: TYPE_NORMAL
- en: 'To utilize promises and the async/await syntax to build a program, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Import the database API with `require( ‘./simple_db’ )` and save it into the
    variable `db`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Write an async main function. All of the operations will go in here.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create an array to keep track of the keys that cause `db` errors. Save it into
    the variable `missingKeys`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a try-catch block.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Inside the try section, look up the key `john` from the database with async/await
    and the `db.get()` function.
  prefs: []
  type: TYPE_NORMAL
- en: Save the value into the variable `user`.
  prefs: []
  type: TYPE_NORMAL
- en: Log the age of the user we looked up.
  prefs: []
  type: TYPE_NORMAL
- en: In the catch section, push the key `john` to the `missingKeys` array.
  prefs: []
  type: TYPE_NORMAL
- en: Create a second try-catch block.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Inside the try section look up the key `sam` from the database with async/await
    and the `db.get()` function
  prefs: []
  type: TYPE_NORMAL
- en: Save the value into the variable `user`.
  prefs: []
  type: TYPE_NORMAL
- en: Log the age of the user we looked up.
  prefs: []
  type: TYPE_NORMAL
- en: In the catch section, push the key `sam` to the `missingKeys` array.
  prefs: []
  type: TYPE_NORMAL
- en: Create a third try-catch block.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Inside the try section, look up the key that is your name from the database
    with async/await and the `db.get()` function.
  prefs: []
  type: TYPE_NORMAL
- en: Save the value into the variable `user`.
  prefs: []
  type: TYPE_NORMAL
- en: Log the age of the user we looked up.
  prefs: []
  type: TYPE_NORMAL
- en: In the catch section, push the key to the `missingKeys` array.
  prefs: []
  type: TYPE_NORMAL
- en: In the catch section, insert your `user` object into the `db` with await and
    `db.insert()`.
  prefs: []
  type: TYPE_NORMAL
- en: In the catch section, create a new try-catch block inside the `catch` block.
    In the new try section, look up the user we just added to the db with async/await.
    Save the found user into the `variable` `user`. Log the age of the user we found.
    In the catch section, push the key to the `missingKeys` array.
  prefs: []
  type: TYPE_NORMAL
- en: Outside all of the try-catch blocks, at the end of the main function, return
    the `missingKeys` `array`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Call the `main` function and attach a `then()` and `catch()` handler to the
    returned promise.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The `then()` handler should be passed a function that logs the promise resolution
    value.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The `catch()` handler should be passed a function that logs the error’s message field.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Code:**'
  prefs: []
  type: TYPE_NORMAL
- en: '**index.js**'
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Snippet 2.43: Using async/await'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: https://bit.ly/2FvhPo2
  prefs: []
  type: TYPE_NORMAL
- en: '**Outcome:**'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.12: Names and ages displayed'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/Figure_2.12.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 2.12: Names and ages displayed'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: You have successfully implemented file-tracking commands and navigated the repository's
    history.
  prefs: []
  type: TYPE_NORMAL
- en: 'Chapter 3: DOM Manipulation and Event Handling'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Activity 3 – Implementing jQuery
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You want to make a web app that controls your home's smart LED light system.
    You have three LEDs that can be individually turned on or off, or all toggled
    together. You must build a simple HTML and jQuery interface that shows the on
    state of the lights. It must also have buttons to control the lights.
  prefs: []
  type: TYPE_NORMAL
- en: 'To utilize jQuery to build a functioning application, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a directory for the activity and in that directory, in the command prompt,
    run `npm run init` to set up `package.json`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Run `npm install jquery -s` to install jQuery.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create an HTML file for the activity and give the HTML block a body.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add a style block.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add a div to hold all of the buttons and lights.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add a `script` tag with the source to the `jQuery` file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Add a `script` tag to hold the main JavaScript code.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add a `light` class to the CSS style sheet with the following settings:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Width and height: `100px`'
  prefs: []
  type: TYPE_NORMAL
- en: 'Background-color: `white`'
  prefs: []
  type: TYPE_NORMAL
- en: Add a toggle button to the div by using the `id=toggle.`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add a div to hold the lights with the id `lights`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add three divs inside this div.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Each div should have a div with the `light` class and a button with the `lightButton`
    class`.`
  prefs: []
  type: TYPE_NORMAL
- en: 'In the code script, set up a function to run when the DOM loads:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`$( () => { ... } )`'
  prefs: []
  type: TYPE_NORMAL
- en: 'Select all the `lightButton` class buttons and add on-click handler that does
    the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Stops the event propagation and selects the element target and get the `light`
    div by traversing DOM.
  prefs: []
  type: TYPE_NORMAL
- en: Check the `lit` attribute. If lit, unset the `lit` attribute. Otherwise, set
    it with `jQuery.attr()`
  prefs: []
  type: TYPE_NORMAL
- en: Change the `background-color css` style to reflect the `lit` attribute with
    `jQuery.css().`
  prefs: []
  type: TYPE_NORMAL
- en: 'Select the `toggle` button by ID and add an on click handler that does the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Stops the event propagation and selects all the light buttons by CSS class
    and trigger a click event on them:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Code:**'
  prefs: []
  type: TYPE_NORMAL
- en: '**activity.html**'
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: The following is the condensed code. The full solution can be found at `activities/activity3/index.html`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Snippet 3.32: jQuery function application'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: https://bit.ly/2VV9DlB
  prefs: []
  type: TYPE_NORMAL
- en: '**Outcome****:**'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.14: Adding buttons after each div'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/Figure_3.14.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 3.14: Adding buttons after each div'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: '![Figure 3.15: Adding toggle buttons](image/Figure_3.21.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 3.15: Adding toggle buttons'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: You have successfully utilized jQuery to build a functioning application.
  prefs: []
  type: TYPE_NORMAL
- en: 'Chapter 4: Testing JavaScript'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Activity 4 – Utilizing Test Environments
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You have been tasked with upgrading your Fibonacci sequence test code to use
    the Mocha test framework. Take the Fibonacci sequence code and test code you created
    for Activity 1 and upgrade it to use the Mocha test framework to test the code.
    You should write tests for the n=0 condition, then implement the n=0 condition,
    then write tests for and implement the n=1 condition, then write tests for and
    implement the n=2 condition, and finally do so for the n=5, n=7, and n=9 conditions.
    If the `it()` test passes, call the `done` callback with no argument. Otherwise,
    call the `test done` callback with an error or other truthy value.
  prefs: []
  type: TYPE_NORMAL
- en: 'To utilize the Mocha test framework to write and run tests, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Set up the project directory with `npm run init.` Install mocha globally with
    `npm install mocha -s -g`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create `index.js` to hold the code and `test.js` to hold the tests.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add the test script to `package.json` in the `scripts` field. The test should
    call the `mocha` module and pass in the `test.js` file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add the recursive Fibonacci sequence code to `index.js`. You can use the code
    built in `Exercise 24`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Export the function with `module.exports = { fibonacci }.`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Import the Fibonacci function into the test file using the following command:
    `const { fibonacci } = require( ''./index.js'' )`;'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Write a `describe` block for the tests. Pass in the string `fibonacci` and a
    callback function
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Calculate the expected value by hand for each item in the fibonacci sequence
    (you can also look up the sequence on Google to avoid doing too much math by hand).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'For each test condition (n=0, n=1, n=2, n=5, n=7, and n=9) do the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a mocha test with the `it()` function and pass in a description of the
    test as the first parameter.
  prefs: []
  type: TYPE_NORMAL
- en: Pass a callback as the second parameter. The callback should take in one argument,
    `done`.
  prefs: []
  type: TYPE_NORMAL
- en: Inside the callback call the fibonacci sequence and compare its result to the
    expected value with a not equal comparison.
  prefs: []
  type: TYPE_NORMAL
- en: Call the `done()` function and pass in the test comparison result.
  prefs: []
  type: TYPE_NORMAL
- en: If the test fails, return `done( error )`. Otherwise, return `done(null)` or
    `done(false)`.
  prefs: []
  type: TYPE_NORMAL
- en: Run the tests from the command line with `npm run test`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Code:**'
  prefs: []
  type: TYPE_NORMAL
- en: '**test.js**'
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Snippet 4.9: Utilizing test environments'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: https://bit.ly/2CcDpJE
  prefs: []
  type: TYPE_NORMAL
- en: 'Take a look at the following output screenshot below:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.8 : Displaying the Fibonacci series](image/Figure_4.71.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 4.8 : Displaying the Fibonacci series'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: '**Outcome**'
  prefs: []
  type: TYPE_NORMAL
- en: You have successfully utilized the Mocha test framework to write and run tests.
  prefs: []
  type: TYPE_NORMAL
- en: 'Chapter 5: Functional Programming'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Activity 1 – Recursive Immutability
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You are building an application in JavaScript and your team has been told that
    it cannot use any third-party libraries for security reasons. You must now use
    Functional Programming (FP) principles for this application and you need an algorithm
    to create immutable objects and arrays. Create a recursive function that enforces
    the immutability of objects and arrays at all levels of nesting with `Object.freeze()`.
    For simplicity, you can assume that there are no null or classes nested in the
    objects. Write your function in `activities/activity5/activity-test.js`. This
    file contains code to test your implementation.
  prefs: []
  type: TYPE_NORMAL
- en: 'Todemonstrate forcing immutability in objects, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the activity test file at `activities/activity5/activity-test.js`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a function called `immutable` that takes in a single argument, `data`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Check to see if `data` is not of type `object`. If it is not, then return.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Freeze the `data` object. You don't need to freeze non-objects.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Loop through the object values with `object.values` and a `forEach()` loop.
    Recursively call the immutable function for each.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Run the code contained in the test file. If any tests fail, fix the bugs and
    rerun the test
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Code:**'
  prefs: []
  type: TYPE_NORMAL
- en: '**activity-solution.js**'
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Snippet 5.11: Recursive immutability'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: https://bit.ly/2H56ah1
  prefs: []
  type: TYPE_NORMAL
- en: 'Take a look at the following output screenshot below:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.7 : Passed Tests output display'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/Figure_5.11.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 5.7 : Passed Tests output display'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: '**Outcome:**'
  prefs: []
  type: TYPE_NORMAL
- en: You have successfully demonstrated forcing immutability in objects.
  prefs: []
  type: TYPE_NORMAL
- en: 'Chapter 6: JavaScript Ecosystem'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Activity 6 – Building a Frontend with React
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The frontend team working on your note-taking app from Exercise 35 has unexpectedly
    quit. You must build the frontend for this application using React. Your frontend
    should have two views: a Home view and an `Edit` view. Create a React component
    for each view. The `Home` view should have a button that changes the view to the
    Edit view. The Edit view should have a button that switches back to the Home view,
    a text input that contains the note text, a load button that calls the API load
    route, and a save button that calls the API save route. A Node.js server has been
    provided. Write your React code in `activities/activity6/activity/src/index.js`.
    When you are ready to test your code, run the build script (defined in `package.json`)
    before starting the server. You can reference the `index.html` file from Exercise
    35 for hints on how to call the API routes.'
  prefs: []
  type: TYPE_NORMAL
- en: 'To build a working React frontend and integrate it with a Node.js express server,
    follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Begin working in "activity/activity6/activity". Run `npm install` to install
    the required dependencies.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In src/index.js, create React components called `Home` and `Editor`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add a constructor to the App react component. In the constructor:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Take in the `props` variable. Call `super` and pass `props` into `super`.
  prefs: []
  type: TYPE_NORMAL
- en: Set the `state` object in the `this` scope. It must have a property called `view`
    with the value `home`.
  prefs: []
  type: TYPE_NORMAL
- en: Add a `changeView` method to the app.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The `changeView` method should take in a parameter called `view`.
  prefs: []
  type: TYPE_NORMAL
- en: Update the state with `setState` and set the `view` property of the `state`
    equal to the provided parameter `view`.
  prefs: []
  type: TYPE_NORMAL
- en: In the constructor, add a line that sets `this.changeView` equal to `this.changeView.bind(this)`.
  prefs: []
  type: TYPE_NORMAL
- en: 'In App’s `render` function, create a conditional rendering based on the value
    of `this.state.view` that does the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If `state.view` is equal to `home`, show the home view. Otherwise, show the
    editor view.
  prefs: []
  type: TYPE_NORMAL
- en: Pass the `changeView` function as a parameter to both views, which are `<Editor`
    `changeView={this.changeView}/>` and `<Home changeView={this.changeView}/>`.
  prefs: []
  type: TYPE_NORMAL
- en: In the `Home` component, add a `goEdit()` function, which `calls` the `changeView`
    function passed in through `props` (`this.props.changeView`). and passes in the
    string `editor` to the `changeView` function.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create the `render` function in the `Home` component:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Return a JSX expression.
  prefs: []
  type: TYPE_NORMAL
- en: To the returned JSX expression, add a `div` that contains a title heading `title`
    of the app `Note Editor App`, and add a button that changes the view to the `Edit` view.
  prefs: []
  type: TYPE_NORMAL
- en: The button should call the `goEdit` function on click. Be sure to properly bind
    the `this` state to the `goEdit` function.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add a constructor to the `Editor` component:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Take in the `props` parameter
  prefs: []
  type: TYPE_NORMAL
- en: Call `super` and pass in the `props` variable.
  prefs: []
  type: TYPE_NORMAL
- en: 'Set the `state` variable in the `this` scope equal to the `{value: ‘’}` object.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Add a function called `handleChage` to `Editor`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Takes in an argument, `e`, that represents the event object.
  prefs: []
  type: TYPE_NORMAL
- en: 'Update the state with `setState` to set the state property `value` equal to
    the event target’s value:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Create a `save` function in `Editor` that makes an HTTP request to the API save route.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a new XHR request and save it into the `xhttp` variable.
  prefs: []
  type: TYPE_NORMAL
- en: Set the `xhttp` property `onreadystatechange` to a function that checks if this.`readyState`
    is equal to `4`. If it is not, then return. Also, check if `this.status` is equal
    to `200`. If it is not, then throw an error.
  prefs: []
  type: TYPE_NORMAL
- en: Open the `xhr` request by calling the `open` function on `xhttp`. Pass in the
    parameters `POST`, `/save`, and `true`.
  prefs: []
  type: TYPE_NORMAL
- en: Set the request header `Content-Type` to `application/json;charset=UTF-8` by
    calling the `setRequestHeader` on the `xhttp` object. Pass in the values specified.
  prefs: []
  type: TYPE_NORMAL
- en: Send the JSON data of the text input with `xhttp.send`.
  prefs: []
  type: TYPE_NORMAL
- en: The value to which, we must send is stored in `this.state`. Stringify the value
    before sending it.
  prefs: []
  type: TYPE_NORMAL
- en: Create a `load` function in `Editor` that makes an HTTP request to the API load route.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a new XHR request and save it into the `xhttp` variable.
  prefs: []
  type: TYPE_NORMAL
- en: Save the `this` scope into a variable called `that` so that it can be used inside
    the `xhr` request.
  prefs: []
  type: TYPE_NORMAL
- en: Set the `xhttp` property `onreadystatechange` to a function that checks if `this.readyState`
    is equal to `4`. If it isn’t, then return. It then checks if `this.status` is
    equal to `200`. If it is not, then throw an error. It calls the `setState` function
    on the React component’s scope, which is saved in the `that` variable.
  prefs: []
  type: TYPE_NORMAL
- en: Pass in an object with the key `value` equal to the parsed response of the request.
    Parse the HTTP response value from the `this.response` variable with the `JSON.parse`
    function.
  prefs: []
  type: TYPE_NORMAL
- en: Open the HTTP request by calling the `open` function on the `xhttp` variable.
    Pass in the parameters `GET`, `/load`, and `true`.
  prefs: []
  type: TYPE_NORMAL
- en: Send the XHR request by calling the `send()` method on the `xhttp` object.
  prefs: []
  type: TYPE_NORMAL
- en: Create a `goHome` function in `Editor`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Call the `changeView` function that was passed in through the React element
    properties object (`this.props.changeView()`).
  prefs: []
  type: TYPE_NORMAL
- en: Pass in the string `home`.
  prefs: []
  type: TYPE_NORMAL
- en: Create the `render` function in `Editor`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add a button that, once clicked, calls the `goHome` function that contains the
    text `Back to home`. It calls the `goHome` function on the click event. Make sure
    to properly bind the `this` scope to the function.
  prefs: []
  type: TYPE_NORMAL
- en: Add a `text` input that contains the note text. The text input loads its value
    from the `state.value` field. The `text` field calls the `handleChange` function
    on a change event. Make sure to properly bind the `this` scope to the `handleChange`
    function.
  prefs: []
  type: TYPE_NORMAL
- en: Add a button to load the note data from the server that contains the text `Load`.
    It calls the `load` function on the click event. Be sure to properly bind the
    `this` scope to the load function call.
  prefs: []
  type: TYPE_NORMAL
- en: Add a button to save the note data to the server that contains the text `Save`.
    It calls the `save` function on the click event. Be sure to properly bind the
    `this` scope to the save function call.
  prefs: []
  type: TYPE_NORMAL
- en: Be sure to bind the `this` state properly to all listeners.
  prefs: []
  type: TYPE_NORMAL
- en: 'Test the code when ready by doing the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Running `npm run build` in the root project folder to transpile the code from JSX.
  prefs: []
  type: TYPE_NORMAL
- en: Running `npm start` to start the server.
  prefs: []
  type: TYPE_NORMAL
- en: Loading the URL specified when the server start (`127.0.0.1:PORT`).
  prefs: []
  type: TYPE_NORMAL
- en: Testing the view changes by clicking the **Edit** and `Back to home` buttons.
  prefs: []
  type: TYPE_NORMAL
- en: Testing the `save` functionality by entering text into the `text` input, saving
    it, and checking the text file that was created in the folder to see if it matches.
  prefs: []
  type: TYPE_NORMAL
- en: Testing the `load` functionality by entering text into the text file, loading
    it, and making sure that the value in the `text` input matches the value in text
    file.
  prefs: []
  type: TYPE_NORMAL
- en: A condensed snippet is provided in the following snippet. Refer to `activities/activity6/solution/src/index.js`
    for the full solution code.
  prefs: []
  type: TYPE_NORMAL
- en: Index.js
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Snippet 6.42: React component'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: https://bit.ly/2RzxKI2
  prefs: []
  type: TYPE_NORMAL
- en: '**Outcome:**'
  prefs: []
  type: TYPE_NORMAL
- en: 'Take a look at the output screenshots here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.13 : Edit view'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/Figure_6.13.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 6.13 : Edit view'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: '![Figure 6.14 : Server view'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/Figure_6.21.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 6.14 : Server view'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: '![Figure 6.15 : Running the server to test code'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/Figure_6.31.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 6.15 : Running the server to test code'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: You have successfully built a working React frontend and integrated it with
    a Node.js express server.
  prefs: []
  type: TYPE_NORMAL
