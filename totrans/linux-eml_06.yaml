- en: Chapter 6. Getting Started with Procmail
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Procmail is a versatile e-mail filter that is typically used to process messages
    before they are delivered to a user's inbox.
  prefs: []
  type: TYPE_NORMAL
- en: 'This chapter includes the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: A brief introduction to Procmail
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The typical filtering tasks that can be performed by Procmail
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How a mail filtering system can be installed and set up on the server to handle
    the repetitive sorting and storing tasks that you would rather not spend your
    time on every day
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The basic structure of the rules and actions within a Procmail recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to create and test the rules within our recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Finally, some example recipes to perform filtering
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: By the end of the chapter, you will understand the basics of the filtering process
    how to set up the system to perform filtering and how to perform a number of very
    simple but extremely useful filtering operations on your own mail. All of which
    will help you keep on top of all the mail you have already or will soon be receiving.
  prefs: []
  type: TYPE_NORMAL
- en: Introduction to Procmail
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Procmail is a mail filter that is executed after messages have arrived on the
    mail server but before final delivery to the intended recipient. The behavior
    of Procmail is controlled by a number of user written recipes (or scripts). Each
    recipe can contain a number of pattern matching rules to select messages based
    on at least, the recipient, the subject, and the message content. If the match
    criteria in a rule selects the message as a candidate, the recipe may perform
    a number of actions to move the message to a folder, reply to the sender, or even
    discard the message before delivery. As with the rules, actions are user written
    in the recipe and can perform almost any operation on a message.
  prefs: []
  type: TYPE_NORMAL
- en: The Procmail home page is located at [http://www.procmail.org.](http://www.procmail.org.)
  prefs: []
  type: TYPE_NORMAL
- en: Who wrote it and when
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Version 1.0 was released in the late 1990's and has evolved to represent one
    of the best and most commonly used mail filtering solutions for UNIX-based mail
    systems. Procmail was originally designed and developed by Stephen R. van den
    Berg (`<[srb@cuci.nl](mailto:srb@cuci.nl)>`). In the fall of 1998, recognizing
    that he didn't have the time to maintain Procmail on his own, Stephen created
    a mailing list for discussion of future development and deputized Philip Guenther
    (`<[guenther@sendmail.com](mailto:guenther@sendmail.com)>`) as a maintainer.
  prefs: []
  type: TYPE_NORMAL
- en: Procmail has been stable since Version 3.22, which was released in September
    2001, so most recent installations will have this latest version installed, and
    this is the version we will be using throughout this book.
  prefs: []
  type: TYPE_NORMAL
- en: How can a filtering system help me?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: By now you should have an e-mail system up and running, and sending and receiving
    e-mails. You have probably registered with a number of useful mailing lists with
    messages arriving at varying intervals. You should also be receiving messages
    informing you of the status of the system. All this extra, low priority information
    can easily distract and get in the way of the important e-mails that you need
    to read ahead of others.
  prefs: []
  type: TYPE_NORMAL
- en: How you organize your mail is up to your own personal taste; if you are very
    organized you may have already set up some folders in your e-mail client and move
    messages into appropriate locations when you have read them. Nevertheless, one
    thing you have probably realized is that it would be very useful to be able to
    have some messages stored automatically by the system in a different location
    than your important e-mail.
  prefs: []
  type: TYPE_NORMAL
- en: What you will need to think about while setting up an automatic process, is
    how you identify what the mail item is about. The most important indicators are
    to whom it was sent, the title or subject line, and also the sender details. If
    you take a few minutes now to make a few notes on how you already handle your
    mail, the types of messages that arrive and what you do with them, you will have
    a clearer idea of what automatic processes you may want to set up.
  prefs: []
  type: TYPE_NORMAL
- en: In general terms there are several different classes of messages that you might
    receive.
  prefs: []
  type: TYPE_NORMAL
- en: '**Membership of mailing lists:** Mail arriving from a mail group, or mailing
    list, is normally easy to identify from the sender information or possibly from
    the subject line. A number of groups send messages every few minutes while others
    may only send a couple of messages a month. Typically different mail group items
    are identified by different pieces of information. For example, some groups send
    messages with the "From" address being that of the real sender while others add
    a fake or system-generated "From" address. Some groups may, for example, automatically
    add a prefix to the "Subject" field.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Automated system messages:** Your server generates a number of messages each
    day. Although normally they are sent only to the system administrator or root
    user, one of the first things to do is to make sure that you receive a copy of
    the mail so that you are kept informed of the system status and events. This you
    would do by editing the default destinations in the `/etc/mail/aliases` or `/etc/aliases`
    file depending on how your system is set up. These system-generated messages are
    nearly always identifiable as originating from a small number of specific system
    user IDs. These are typically `root` and `cron.`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Unsolicited bulk e-mail:** Messages identified as spam would normally be
    considered unimportant. As such you may choose to move these items to a separate
    folder for later review or even discard them completely. Discarding spam automatically
    is not advised, as any mail misidentified would be lost forever.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Individual messages:** Mail arriving from clients, colleagues, or friends
    would generally be considered as important. As such it would normally be delivered
    to your Inbox giving you the opportunity to provide a more timely response. Individual
    messages are more difficult to identify with a filter, especially those from new
    clients or colleagues, so messages that do not fit into one of the categories
    just discussed should be delivered normally.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: After completing the work in this chapter, you should have the tools and knowledge
    to start to examining mail in more detail and set up some basic filtering operations.
  prefs: []
  type: TYPE_NORMAL
- en: Potential uses of mail filtering
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The basic mail system you have already set up has some inbuilt abilities of
    its own to process incoming mail according to a user setup. The default operation
    would be for messages to go to your Inbox; other options are to automatically
    forward all your mail to another user. Consider you have multiple mail accounts
    on different systems and want all your mail to end up in one particular mail account.
    You can then have that mail sent to a particular file, or have it passed to a
    program or application to allow it to do its own work.
  prefs: []
  type: TYPE_NORMAL
- en: The downside of this setup is that all your mail has to follow one particular
    route, so over time a number of options have been created to intelligently filter
    mail. One of the most powerful and popular of these is Procmail.
  prefs: []
  type: TYPE_NORMAL
- en: Filtering and sorting mail
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Procmail is designed to handle a wide variety of processing and filtering tasks
    on mail being received by users within the system. Filtering only applies to users
    who have an account on the system—not to virtual users—and may be applied system
    wide to all users or individual users may add their own filters.
  prefs: []
  type: TYPE_NORMAL
- en: For system administrators, Procmail offers a range of facilities for applying
    rules and operations to all the mail being received by users of the system. Such
    actions may include making a copy of all mail for historical purposes or in businesses
    where the content of e-mail messages may be used in some form of legal or business
    situation.
  prefs: []
  type: TYPE_NORMAL
- en: Elsewhere in this book, we will be discussing ways of identifying e-mail-borne
    viruses and spam. Procmail can take the information provided by these processes
    and perform actions based on the information added by these processes, such as
    storing all mail items containing a virus in a secure mail folder that is checked
    by system administrators.
  prefs: []
  type: TYPE_NORMAL
- en: 'For a system user, the most common operation to perform on incoming mail is
    to sort it into some organized layout so that you can easily find the items you
    are looking for, based on the topic area that you are interested in. A typical
    organizational layout could be a hierarchical one similar to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: If you plan on keeping mail in store for long periods of time for historical
    reference, it may be worth adding an extra layer or two to separate the mail into
    years and months. This makes it easier in the future to archive or purge older
    e-mail, and it also means that searching and sorting will be quicker.
  prefs: []
  type: TYPE_NORMAL
- en: Forwarding mail
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Sometimes you may get lots of e-mail that is easily identified as needing to
    be sent to another user at another e-mail address. In this case, rather than storing
    the file on the system, you may set up a rule that will forward the e-mail to
    one or more other e-mail addresses. Of course you need to be careful to make sure
    that the forwarding does not end up coming back to you, creating a never-ending
    loop.
  prefs: []
  type: TYPE_NORMAL
- en: Forwarding of mail in this way has a big advantage over the manual forwarding
    of mail from within your mail client software, quite apart from not needing any
    manual intervention. Mail forwarded by Procmail is transparent, it appears to
    the recipient as if the mail has arrived directly from the original sender. Whereas,
    if it was forwarded using a mail client, it would appear as though it had been
    sent by the person or account doing the forwarding.
  prefs: []
  type: TYPE_NORMAL
- en: Where all mail items for a single address need forwarding to a single other
    address, a more efficient way to achieve this is using the aliasing mechanism
    of the Postfix mailing system. Procmail should only be used where an intelligent
    filtering of the mail is required dependent upon factors that can only be determined
    at the time of receipt of the message.
  prefs: []
  type: TYPE_NORMAL
- en: Processing the mail in an application
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Some mail items could be suitable for passing through to an application where
    the application program does some work on the e-mail. Perhaps it could read the
    contents and then store the information in a bug-tracking database or update the
    company history log for a client activity. These are more advanced topics that
    are briefly covered in the following chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Acknowledgements and out of office/vacation replies
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If you wanted to send an automatic reply to certain messages, a filter or rule
    could be set up to send such a message. When you are away from the office for
    a prolonged period of time on holiday, vacation, or perhaps illness, it is possible
    to set up a reply service to inform the sender that it will be some time before
    you are able to respond to their mail and perhaps give them alternative contact
    details or ask them to contact another person.
  prefs: []
  type: TYPE_NORMAL
- en: It is important that you organize such a feature carefully. You shouldn't send
    such a reply to a mailing group or keep sending repeated replies to people who
    already know that you are away but need to send you information for after your
    return. This requires that a log of the addresses that the message is sent to
    is kept to avoid repeat messages being sent. We will investigate the setting up
    of such a service in the next chapter.
  prefs: []
  type: TYPE_NORMAL
- en: File locking and integrity
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: An important concept to keep in mind during all your work with Procmail is that
    it is always possible for multiple mail messages to be arriving at the same time,
    all vying to be processed. Therefore, it is quite possible that two or more messages
    are going to be stored in the same location at the same time—a recipe for disaster
    exists. Assume the simple example of two items arriving at the same time. The
    first mail opens the storage location and starts to write the contents of the
    message, and then the second process does the same. A variety of possible results
    could occur from this, ranging from one message being lost totally through, to
    both messages being stored intertwined and totally illegible.
  prefs: []
  type: TYPE_NORMAL
- en: To make sure that this doesn't happen, a strict locking protocol needs to be
    observed to ensure that only one process can write at a time and all other applications
    need to wait patiently for their turn. Procmail itself has the ability to enforce
    a locking protocol appropriate to the type of process being applied and will,
    by default, lock the physical file in which a mail is being stored.
  prefs: []
  type: TYPE_NORMAL
- en: In some cases, the mail is being processed by an application and Procmail can
    be instructed by the use of flags within the rule to use an appropriate locking
    mechanism. This is covered more completely in Chapter 7.
  prefs: []
  type: TYPE_NORMAL
- en: What Procmail is not suitable for
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: There are some very specific mail filtering and processing requirements for
    which Procmail may be considered to be suitable. In most cases, it is flexible
    and capable enough to perform the task at least at a rudimentary level. Such tasks
    could be filtering of spam-related e-mails or filtering out viruses or running
    a mailing list operation. For each of these, there are a number of solutions available
    that go beyond the capabilities of using just Procmail filters. We will be looking
    at SpamAssassin for performing spam filtering and a virus filtering solution later
    in Chapter 8.
  prefs: []
  type: TYPE_NORMAL
- en: We have already mentioned that Procmail is suitable only for users having accounts
    on the system that Procmail runs on. Nevertheless, it is worth reinforcing that
    Procmail is unable to process mail that is being delivered to a virtual user and
    such mails will end up on another system. If it is necessary to process mail for
    such a user, it is possible to create a real user account on the system and then
    use Procmail to perform the final forwarding as part of its filtering processes.
    This is not an ideal use as the Postfix system is much more efficient if it is
    allowed to do this work rather than using Procmail.
  prefs: []
  type: TYPE_NORMAL
- en: Downloading and installing Procmail
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As the software is now reasonably mature, Procmail is usually available for
    installation on most Linux distributions and can be installed by using the package
    manager. This is the recommended way to install Procmail. If it is not available
    via a package manager in your Linux distribution, it can also be installed from
    the source code.
  prefs: []
  type: TYPE_NORMAL
- en: Installing via a package manager
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'For Fedora users, the simple way to install Procmail if it isn''t already installed
    is to use the `yum` command as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'For Debian-based users you could use the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: This will ensure that the binary of Procmail is correctly installed on your
    system and you can then decide how you want it to integrate into your Postfix
    system.
  prefs: []
  type: TYPE_NORMAL
- en: Installing from source
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Procmail may be obtained from a number of sources but the official distribution
    is maintained and available from [www.procmail.org](http://www.procmail.org).
    There you will find links to a number of mirror services from which you can download
    the source files. The version used in this book can be downloaded from [http://www.procmail.org/procmail-3.22.tar.gz](http://www.procmail.org/procmail-3.22.tar.gz).
  prefs: []
  type: TYPE_NORMAL
- en: 'It can be downloaded by using the `wget` command as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Once you have downloaded and unpacked the archive, `cd` to the directory, example
    `procmail-3.22`. Before starting to build and install the software, it is well
    worthwhile reading through the `INSTALL` and `README` documents.
  prefs: []
  type: TYPE_NORMAL
- en: 'For most Linux systems, the simplest installation method can be reduced by
    following the steps listed here:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Run the `configure` utility to create the right build environment by running
    the `configure` command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'After the configuration script is completed, you can run the `make` command
    to build the software executables:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'The final step, as `root`, is to copy the executables into the correct position
    for operation on the system:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: In the last step, the software is installed into the `/usr/local` directory.
  prefs: []
  type: TYPE_NORMAL
- en: At all stages, you should check the processes output for any significant errors
    or warnings.
  prefs: []
  type: TYPE_NORMAL
- en: Installation options/considerations
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For most people following the instructions, throughout this book you will be
    the system administrator of the machine or machines you are managing and will
    probably be applying the installation to process all mail for all users on the
    system. If you are not an administrator, or you wish only a limited number of
    people on the system to take advantage of the features of Procmail, you can install
    Procmail for individual users.
  prefs: []
  type: TYPE_NORMAL
- en: Individual installation
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If you are installing Procmail for your own use or for only a few people on
    your server, the most common method is to call the Procmail program directly from
    the `.forward` file in your home directory on the server (this file needs to be
    world-readable).
  prefs: []
  type: TYPE_NORMAL
- en: 'The entry in `.forward` when using Postfix as an MTA should be like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: The quotes are required and the username should be substituted for your username.
    The syntax for other MTAs may be different so consult the MTA documentation.
  prefs: []
  type: TYPE_NORMAL
- en: You will also need to install a `.procmailrc` file in the home directory—this
    is the file that holds the rules that Procmail will use to filter and deliver
    your e-mail.
  prefs: []
  type: TYPE_NORMAL
- en: System-wide installation
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If you are a system administrator, you can decide to install Procmail globally.
    This has the advantage that users do not need to have a `.forward` file anymore.
    Simply having a `.procmailrc` file in each user's `HOME` directory will suffice.
    The operation is transparent in this case—if no `.procmailrc` file is present
    in the `HOME` directory, the mail will be delivered as usual.
  prefs: []
  type: TYPE_NORMAL
- en: A global `.procmailrc` file can be created that takes effect before the user's
    own file. In this case, you need to be careful to ensure that the configuration
    has the following instruction included so that messages are stored with the end
    user's privileges rather than the root user's privileges.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: This also helps protect against weaknesses in your system security. This file
    is normally stored in the `/etc` directory as `/etc/procmailrc` where it is intended
    to provide a default set of personal rules for all users as they are added to
    the system. It will be worth configuring a `.procmailrc` file in the skeleton
    account that is used by the `add user` capabilities of your system. Consult your
    Linux documentation for information on how this can be set up.
  prefs: []
  type: TYPE_NORMAL
- en: Integration with Postfix for system-wide delivery
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To integrate Procmail into the Postfix system is simple but, as with any other
    configuration change, care must be taken. Postfix runs all external commands such
    as Procmail with the user ID of nobody. So it would be unable to deliver mail
    to the user `root`. To ensure that important system messages are still received,
    you should make sure that an alias is configured so that all mail intended for
    the root user is forwarded to a real user who will read the mailbox.
  prefs: []
  type: TYPE_NORMAL
- en: Creating an alias for system accounts
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: To create an alias for the root user, you must edit the appropriate `alias`
    file, normally found in `/etc/aliases or /etc/mail/aliases`.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you are unable to find the file, use the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'The entry in the alias file should be as follows with just a single tab character
    between the colon (:) and the start of the e-mail address and no trailing spaces:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: After creating the text entry, you should run the `newaliases` command to convert
    the text file into a database file ready for Postfix to read.
  prefs: []
  type: TYPE_NORMAL
- en: 'It is worthwhile to add additional aliases for any other system accounts that
    may receive mail. For example you may end up with an `aliases` file similar to
    the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Adding Procmail to the Postfix configuration
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: For system-wide delivery of mail by Procmail, it is necessary to modify the
    Postfix `main.cf` file to specify the application that will be responsible for
    the actual delivery.
  prefs: []
  type: TYPE_NORMAL
- en: 'Edit the `/etc/postfix/main.cf` file and add the following line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'When the change has been made, you need to instruct Postfix that the file has
    changed using the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Postfix-provided environment variables
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Postfix exports information regarding the mail package by use of a number of
    environment variables. The variables are modified to avoid any shell expansion
    issues by replacing all characters that may have special meaning to the shell,
    including whitespace with the underscore character. The following is a list of
    variables that are exported and their meaning:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Variable | Meaning |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `DOMAIN` | The text to the right-hand side of the `@` in the recipient address
    |'
  prefs: []
  type: TYPE_TB
- en: '| `EXTENSION` | Optional address-extension part |'
  prefs: []
  type: TYPE_TB
- en: '| `HOME` | The recipient''s home directory |'
  prefs: []
  type: TYPE_TB
- en: '| `LOCAL` | The text to the left-hand side of the `@` in the recipient address,
    for example, `$USER+$EXTENSION` |'
  prefs: []
  type: TYPE_TB
- en: '| `LOGNAME` | The recipient username |'
  prefs: []
  type: TYPE_TB
- en: '| `RECIPIENT` | The entire recipient address, `$LOCAL@$DOMAIN` |'
  prefs: []
  type: TYPE_TB
- en: '| `SENDER` | The complete sender address |'
  prefs: []
  type: TYPE_TB
- en: '| `SHELL` | The recipient''s login shell |'
  prefs: []
  type: TYPE_TB
- en: Basic operations
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When a mail item arrives and is passed to the Procmail program, the sequence
    of operations follows a set format. It starts by loading the various configuration
    files to obtain the rules that have been set up for that particular user. The
    message is then tested by each of these rules in turn and when a suitable match
    is made, the rule is applied. Some rules terminate when they have completed, while
    others return control so that the message can be assessed against remaining rules
    for potential processing.
  prefs: []
  type: TYPE_NORMAL
- en: Configuration file
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The system-wide configuration is normally made in `/etc/procmailrc`, while personal
    configuration files are normally stored in the user's home directory and called
    `.procmailrc`. Individual rules can be stored in separate files or grouped together
    into a number of files and then included as part of the mail filtering process
    by the main `.procmailrc` file. Typically these files would be stored in the `Procmail`
    subdirectory of your home directory.
  prefs: []
  type: TYPE_NORMAL
- en: File format
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Entries in the configuration file are made in a simple text format according
    to a basic layout. Comments are allowed and are formed by the text following a
    `#` character; empty lines are simply ignored. Rules themselves do not have to
    be laid out in any particular format, though for ease of maintenance and readability,
    it is well worth writing the rules in a consistent and simple format.
  prefs: []
  type: TYPE_NORMAL
- en: Configuration file dissection
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The Procmail configuration file contents can be classified into three main
    sections:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Variables:** Information necessary for Procmail to do its work may be assigned
    to variables within the configuration file in a manner similar to how they are
    used in shell programming. Some of the variables are obtained from the shell environment
    that Procmail is running in, others are created by Procmail itself for use within
    the scripts, while other variables can be assigned within the script itself. An
    additional use for variables is to set flags as to how Procmail itself should
    operate.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'A few useful variables can be set in most scripts:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: The `VERBOSE` variable is used to affect the level of logging that is performed,
    while the `NEWLINE` embedded in the `LOG` variable is deliberate and intended
    to make log files easier to read.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Chapter 7 also includes a short script that displays all the variables assigned
    within Procmail.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Comments:** A `#` character and all the following characters up to a `NEWLINE`
    are ignored. This does not apply to condition lines that cannot be commented.
    Blank lines are ignored and may be used in conjunction with comments to document
    your configuration and to aid readability. You should comment your rules as what
    makes obvious sense today as you are writing your rules may well defy explanation
    in six months time without checking the manual.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Rules or recipes:** Recipe is a common name for rules we create. A line starting
    with a colon (:) marks the beginning of a recipe. A recipe has the following format:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: The `:0` is a hangover from earlier versions of Procmail. The number following
    the `:` was originally intended to indicate the number of actions contained within
    the rule, this is now calculated automatically by the Procmail parser. However,
    the `:0` is required for compatibility purposes.
  prefs: []
  type: TYPE_NORMAL
- en: Analyzing a simple rule
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let us assume that we are receiving large amounts of mail from a particular
    mail group that we subscribed to. The mail is interesting, but isn't important
    and we would prefer to read it at our leisure. The subject is "mythical monsters"
    and all e-mail arriving from this mailing list has a "To" address of `<[mythical@monsters.com](mailto:mythical@monsters.com)>`.
    We have decided that we will create a special folder just for these items of mail,
    and copy all the mail into this folder. This is a simple rule that you will be
    able to easily copy and modify to process your own mail in the future.
  prefs: []
  type: TYPE_NORMAL
- en: The rule structure
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The following is an example copy of a very simple `.procmail` file taken from
    a user's home directory and is intended to explain some of the basic features
    of a Procmail configuration. The rule itself is designed to store all mail sent
    to a certain e-mail address, `<[mythical@monsters.com](mailto:mythical@monsters.com)>`,
    in a special folder called `monsters`. Most mail will be sent to multiple people
    including yourself and the "To" address can hold a useful indication of the mail
    contents. For example, mail may be sent to a distribution list at `info@yourcompany.com`
    and you need to prioritize this e-mail.
  prefs: []
  type: TYPE_NORMAL
- en: Take a few moments to read the contents of the file and then we will break down
    each section in turn and analyze what its function is.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: Variable analysis
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: To examine this file in detail, we can start with the definition statements
    where the variables are assigned with specific values. These values will override
    any values that Procmail has already assigned. By doing this manual assignment,
    we can ensure that paths are optimized for the script operation and that we are
    certain of what values are being used rather than assuming the values that Procmail
    may assign.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'These set up instructions to Procmail to define some basic parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: The `PATH` instruction specifies where Procmail can find any programs it may
    need to execute as part of the processing.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`MAILDIR` specifies the directory that all the mail items will be stored in.
    This directory should exist.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`DEFAULT` defines where mail will be stored if a specific location is not defined
    for the individual rule. Following the recommendation in the chapter on Postfix
    about selecting the mailbox format, the trailing / (slash) indicates to Procmail
    that it should deliver mail in Maildir format.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`LOGFILE` is the file where all tracking information will be stored so that
    we can see what is happening.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Rule analysis
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Next we have the recipe instructions beginning with `:0`. The second `:` instructs
    Procmail to create a lock file to ensure only one mail message is written to the
    file at a time, in order to avoid corruption of the message store. The single
    line rule may be broken down as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`*:` All rule lines begin with an `*`. This is the way Procmail knows that
    they are rules. There may be one or more rules per recipe.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`^TO_:` This is a special Procmail built-in macro that searches most headers
    that can carry your address in them, such as `To:, Apparently-To:, Cc:, Resent-To:`,
    and so on, and will match if it finds the address `<[mythical@monsters.com.](mailto:mythical@monsters.com.)>`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The final line is the action line and by default specifies a mail folder in
    the directory specified by the `MAILDIR` variable.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The trailing slash is required on folder names for Maildir format mailboxes,
    otherwise mail is delivered in unix mbox format which is not supported by Courier-IMAP.
    If you are using IMAP, folder names should also be prefixed with a . (period)
    because the period character is designated as a hierarchy separator.
  prefs: []
  type: TYPE_NORMAL
- en: Creating and testing a rule
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Procmail allows you to organize your rules and recipes into multiple files and
    then process each file in turn. This makes it much easier to manage the rules
    and also to switch rules on and off as the needs change. For this first test case,
    we will create a special rule set for testing and organize all our rules in a
    subdirectory of our home directory. Typically, the subdirectory is called `Procmail`
    but you are free to use your own name.
  prefs: []
  type: TYPE_NORMAL
- en: We will start off by looking at a simple personal rule and testing it for a
    single user. Later in the chapter, when we have covered all of the basics and
    you are comfortable with the process of creating and setting up rules, we will
    show how to start applying rules to all system users.
  prefs: []
  type: TYPE_NORMAL
- en: A "hello world" example
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Almost all books on programming start off with a very simple "hello world" example
    to show the basics of the programming language. In this case, we will create a
    simple personal rule that processes all e-mails received by a user and checks
    to see if the subject contains the words "hello world". If the mail subject contains
    these particular words, the mail message will be stored in a special folder. If
    it does not contain these magic words, the mail will be stored in the user's normal
    inbox.
  prefs: []
  type: TYPE_NORMAL
- en: Creating rc.testing
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'When you are working in a production environment, it is important to make sure
    that the rules being written and tested do not interfere with your normal day-to-day
    mail activities. One way of controlling this is to create a special file specifically
    for testing new rules and only include it in the Procmail processing when you
    are actually doing the testing work. When you are happy with the rule operation,
    you can move it to a specific file of its own, or add it to other similar or related
    rules. In this example, we will create a new file for testing rules called `rc.testing`.
    In the `$HOME/Procmail` directory, use your favorite editor to create the file
    `rc.testing` and enter the following lines:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: By now, you are hopefully beginning to recognize the structure of the rules.
    This one is broken down as follows.
  prefs: []
  type: TYPE_NORMAL
- en: The first few lines set up variables that are applicable to our testing environment.
    As they are assigned within the testing script, they will only apply while the
    script is being included in the processing. As soon as we exclude the test script,
    the testing settings will, of course, not be applied.
  prefs: []
  type: TYPE_NORMAL
- en: Match all lines that begin (^) with the string `Subject:` and containing the
    string `hello world`. We have deliberately not used a string such as `test`, as
    a small number of systems can strip out messages that appear to be test messages.
    Remember that default operation of Procmail is to be case independent so we don't
    need to test for all variations such as `Hello World.`
  prefs: []
  type: TYPE_NORMAL
- en: The last line directs Procmail to store the output in the `TEST-HelloWorld`
    file.
  prefs: []
  type: TYPE_NORMAL
- en: 'Create `testmail.txt` in the `$HOME/Procmail` directory, use your favorite
    editor to create the file `testmail.txt` and enter the following lines:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: The subject line is mixed case compared to our rule in `rc.testing` that contains
    the candidate string in order to demonstrate case-insensitive matching.
  prefs: []
  type: TYPE_NORMAL
- en: Performing static testing of the script
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Running the following command from the `Procmail` directory will generate the
    debugging output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: During static testing, we have defined the variable `PMDIR` in the previous
    command to be our current directory.
  prefs: []
  type: TYPE_NORMAL
- en: After running the command, you can look at the log file for error messages.
    If everything worked fine, you would see the creation of the file `TEST-HelloWorld`
    with the contents of `testmail.txt` and following output in the log.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'If the `Subject` line had not contained the relevant matching phrase, you might
    have seen the following output in the log:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: Configuring Procmail to process rc.testing
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'You will need to edit your `.procmailrc` configuration file. There may well
    be some entries in there already, so it is worth making a backup of the file before
    you make any changes. Ensure that the following lines are included in the file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: Some lines are deliberately commented out using `#`. These may be required if
    we need to do some more detailed debugging later.
  prefs: []
  type: TYPE_NORMAL
- en: Testing the setup
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Using the following command, send yourself two messages:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: One should include the string `hello world` in the subject line and one should
    not include this particular string.
  prefs: []
  type: TYPE_NORMAL
- en: When you check your mail, you should find that the message with the key word
    in the subject has been stored in the `TEST-HelloWorld` mail folder, while the
    other message was left in the normal mail inbox.
  prefs: []
  type: TYPE_NORMAL
- en: Configuration debugging
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If this has all worked correctly—congratulations! You are well on the way to
    organizing your mail.
  prefs: []
  type: TYPE_NORMAL
- en: If it didn't quite work as expected, there are a number of simple things we
    can do to find out what the problem is.
  prefs: []
  type: TYPE_NORMAL
- en: Checking for typos in the scripts
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As with any programming process, if at first it doesn't work, check the code
    to make sure that there were no obvious typos introduced during the editing phase.
  prefs: []
  type: TYPE_NORMAL
- en: Looking at the log file for error messages
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'If that doesn''t highlight anything, you can look at the log file created by
    Procmail. In this case, the log file is called `pmlog` in the `~/Procmail` directory.
    To look at just the last few lines, use the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'In the following example there is a missing `:0` so that the rule lines are
    being skipped:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'This would give the following errors:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: Here there is no storage instruction to follow the rule `:0:`
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'This would give the following errors:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: Checking file and directory permissions
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Use the `ls` command to check the permissions on the `~/.procmailrc` and `~/Procmail/*`
    files and the `~/ home` directory. The rules files should be writable by users
    other than the owner and should have permissions similar to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'The home directory should have permissions such as the following where the
    `?` may be either `r` or :'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: Turning on Full Logging
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'When you are creating more complex rules, or if you still have a problem, you
    need to enable the **Full Logging** capability of Procmail. To do this, you need
    to remove the comment `#` from the lines in the `~/.procmailrc` file so that they
    are enabled as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: Now resend the two sample messages and check the log file for the output information.
    The log file should indicate some areas of problems for you to investigate.
  prefs: []
  type: TYPE_NORMAL
- en: Taking steps to avoid disasters
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The following recipe inserted early in the `.procmailrc` file will ensure that
    the last 32 messages received are each stored in the `backup` directory, ensuring
    that valuable mail is not lost in cases where a recipe contains a fault or has
    an unexpected side effect.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: For now we will assume that this works, and in the next chapter we will analyze
    the recipe in detail to see how exactly it works and what it does.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding e-mail structure
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In order to make full use of the capabilities of Procmail, it is worth taking
    some time to understand the basic structure of a typical e-mail message. Over
    time, the structure has grown in complexity, but it can still be broken down into
    two discrete blocks.
  prefs: []
  type: TYPE_NORMAL
- en: Message body
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The message body is separated from the headers by a single blank line (all the
    headers must be on consecutive lines, as any headers following a blank line will
    be assumed to be part of the message body).
  prefs: []
  type: TYPE_NORMAL
- en: The message body itself may be either a simple text message composed normally
    of simple ASCII characters or it may be a complex combination of parts encoded
    using something known as **MIME**. This has allowed e-mail to be able to transfer
    all forms of data ranging from simple text, HTML, or other formatted pages, and
    to include information such as attachments or embedded objects such as images.
    Discussion of MIME encoding is beyond the scope of this book, and is not necessary
    for most processes that you are likely to come across in mail filtering.
  prefs: []
  type: TYPE_NORMAL
- en: If you decide to try to process the data held in the message body, it is important
    to remember that what you see as the output of the mail program, may be very different
    from the actual data transmitted in the raw mail message.
  prefs: []
  type: TYPE_NORMAL
- en: E-mail headers
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The headers are the tags that an e-mail contains that permit the various mailing
    components to send and process messages. The typical format of a mail header is
    a simple two-part construction composed of a keyword terminated by a `:` and followed
    by the information assigned to the keyword. The headers provide a lot of information
    about how the e-mail was created, what form of mail program created the message,
    from whom it came, to whom it should go, and how it reached your mailbox.
  prefs: []
  type: TYPE_NORMAL
- en: The following mail headers relate to an e-mail received from one of a number
    of mailing lists at `freelancers.net`. The most useful identifying feature of
    the e-mail is the subject line as most of the other mail groups use the same values
    for the other headers discussed.
  prefs: []
  type: TYPE_NORMAL
- en: '![E-mail headers](img/8648_06_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Header structure
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The previous example contains a large number of headers inserted by a number
    of processes that the mail has been through on its journey from sender to recipient.
    There is, however, a small number of key headers that are very useful for processing
    e-mail and are used in a significant number of recipes.
  prefs: []
  type: TYPE_NORMAL
- en: Official definitions for headers
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: All headers that do not begin with `X-` are assigned specific functions by the
    relevant standards authority. More information about them may be found in the
    **RFC (Request for Comment) Document 822** at [http://www.ietf.org/rfc/rfc0822.txt](http://www.ietf.org/rfc/rfc0822.txt).
  prefs: []
  type: TYPE_NORMAL
- en: Headers beginning with `X-` are user defined and are applicable to a specific
    application only. However, some applications may use the same header tag as other
    applications, but for different reasons and with a different format for the information
    provided.
  prefs: []
  type: TYPE_NORMAL
- en: Example rule sets
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In order to help you understand the way Procmail rules work, we will go through
    the design and setup of several simple but very useful rule sets. This should
    help to get you into the swing of designing your own rule sets as you find more
    specific needs to filter your incoming mail items.
  prefs: []
  type: TYPE_NORMAL
- en: All these examples are based on the mail messages received from the Freelancers
    Mailing List from which the previous example headers were taken. They all achieve
    the same result and once again prove that there is no one correct solution to
    a programming problem.
  prefs: []
  type: TYPE_NORMAL
- en: From header
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This header explains who the originator of the e-mail was. There are a variety
    of formats that may be used and are formed of various combinations of human-readable
    and computer-readable items of information. When you have looked at a few e-mails,
    you will begin to see the various patterns that can be used by differing mail
    systems and software. The actual formatting of this header is not necessarily
    important, as you are looking to generate rules to match specific e-mails.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: Return-Path Header
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This field is added by the final transport system that delivers the message
    to its recipient. The field is intended to contain definitive information about
    the address and route back to the message's originator.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: Filtering by Return-Path
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The majority of mailing lists use the `Return-Path` header:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: This is a useful way of easily filtering mailing list items. Here, the `^` character
    performs a special function that instructs Procmail to start the match process
    at the beginning of a new line. This means that lines that contain the phrase
    embedded in the middle of the line are not matched. The default operation for
    Procmail is to return a match if the string is found anywhere within the header
    or anywhere within the mail body, depending on where the script has been set to
    search.
  prefs: []
  type: TYPE_NORMAL
- en: To and Cc headers
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Messages are normally sent to one or more people who are listed in the To:
    or Cc: headers of the e-mail. Like the From: header, these addresses may be formatted
    in several ways. These headers are visible to all mail recipients and allow you
    to see all the public recipients listed.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: 'There is a third recipient header that is not quite as common as the To: and
    Cc: but is used quite a lot in bulk mailings. This is the Bcc: (Blind Carbon Copy).
    Unfortunately, as the name implies, this is a blind header and so the information
    is not included in the actual header information and hence not available for processing.'
  prefs: []
  type: TYPE_NORMAL
- en: Filtering by To or Cc
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Procmail has a number of special built-in macros that can be used to identify
    mail items. The special rule `^TO_` is intended to search all the destination
    headers available. The rule must be written as exactly four characters with no
    spaces and with both `T` and `O` in capitals. The phrase being matched must follow
    immediately after the `_` again without a space.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: Subject header
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The subject line is usually included in the e-mail headers unless the sender
    has decided not to include a subject line at all.
  prefs: []
  type: TYPE_NORMAL
- en: '**Subject: FN-PROJECTS Freelance Web Designers**'
  prefs: []
  type: TYPE_NORMAL
- en: In this example, all the mail items sent to this particular list start with
    the phrase "FN-PROJECTS" and so are sometimes suitable for filtering.
  prefs: []
  type: TYPE_NORMAL
- en: Filtering by subject
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'When mailing lists add a prefix to subject lines, this prefix may be suitable
    for filtering:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: System-wide rules
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that we have covered all the basics of setting up rules, analyzing e-mails,
    and generally seeing how all of the processing operations interact, we will look
    through a couple of examples for system-wide filtering, testing, and operations.
  prefs: []
  type: TYPE_NORMAL
- en: Removing executables
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In Chapter 9, we will see how to integrate a complete virus checking system
    into the Postfix mail architecture. This will perform accurate virus signature
    recognition and add suitable flags to the mail headers to indicate if a virus
    is present in the mail. However, if it is not possible to set up such a system,
    this rule will provide an alternative but more brutal approach to block all e-mails
    with executable attachments.
  prefs: []
  type: TYPE_NORMAL
- en: If you place the following in `/etc/procmailrc`, it will affect all mail traveling
    through the system that contains certain types of documents as attachments.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: The rule starts with the customary `:0` instruction.
  prefs: []
  type: TYPE_NORMAL
- en: 'The conditions are applied as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Firstly, ensure that we are only going to filter messages less than 256 KB in
    size. This is primarily for efficiency and most spam is smaller than this size.
    You could obviously increase it if you are getting viruses that are bigger, but
    there could be a higher load on your system.
  prefs: []
  type: TYPE_NORMAL
- en: The next line says that we also only look at those messages that are MIME types
    (that is, not plain text), as attachments, by definition, cannot be included in
    a plain text message.
  prefs: []
  type: TYPE_NORMAL
- en: We have a subfilter between the curly braces. The `:0B` says we are processing
    the body of the message, rather than the headers. We have to do this because attachments
    come in the body, not the headers. We then look for lines that have the signature
    of being a MIME heading for an executable file. You can amend the filename extensions
    if you wish; these are simply the ones that are commonly used to transmit viruses.
  prefs: []
  type: TYPE_NORMAL
- en: The action in this case is to send this message to `/dev/null` if it matches.
    Note that this means no message bounce or error message to the sender; the message
    is simply dropped, never to be seen again. You may of course store the messages
    in a secure location and nominate someone to monitor the account for valid messages
    that do not contain viruses. For a more elegant solution to this problem, remember
    to check [Chapter 9](ch09.html "Chapter 9. Antivirus Protection").
  prefs: []
  type: TYPE_NORMAL
- en: Large e-mails
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: With the ever increasing use of high speed, always-on Internet connections,
    people are starting to send larger and larger e-mail messages. Once upon a time,
    it was considered rude to have more than four lines in your signature file, nowadays
    people happily include images and wallpapers, and send both HTML and text versions
    of the e-mail all without realizing the size of message they are sending.
  prefs: []
  type: TYPE_NORMAL
- en: Storing such large messages in your Inbox adds considerably to the processing
    overhead to search through your mail messages. One simple solution is to move
    all messages over a certain size into an oversize folder. This can be achieved
    very simply by using the following rule that looks for messages over 100,000 bytes
    in size and stores them in the `largemail` folder.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: The downside of this rule is that your users need to remember to check on a
    regular basis both their Inbox and the `largemail` folder. A more elegant solution
    will allow you to copy the first few lines of the message together with the headers
    and subject line, and store that in the Inbox and inform you that the complete
    version needs to be checked for. Such a solution can be seen in the examples at
    the end of the next chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we have discovered some of the basics of Procmail. By now you
    should be familiar with the various files that Procmail uses to load recipes,
    the core principles of filtering, and the options available. We have also analyzed
    e-mails, set up individual and system wide filters, and looked at some of the
    simple testing, logging, and debugging options that will help us manage a company's
    mail more effectively.
  prefs: []
  type: TYPE_NORMAL
- en: We have just scratched the surface of what is possible, but hopefully this little
    taste has already provided you with a whole load of ideas about how you could
    go about processing and filtering your daily overload of e-mail. It may well have
    given you ideas for more advanced filters and the next chapter will provide more
    advice and explanations of how to go about setting these up.
  prefs: []
  type: TYPE_NORMAL
