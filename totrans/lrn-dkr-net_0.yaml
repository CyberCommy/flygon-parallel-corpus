- en: Preface
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This book helps the reader to learn, create, deploy, and provide administration
    steps for Docker networking. Docker is a Linux container implementation that enables
    the creation of light-weight portable development and production-quality environments.
    These environments can be updated incrementally. Docker achieves this by leveraging
    containment principles, such as cgroups and Linux namespaces, along with overlay
    filesystem-based portable images.
  prefs: []
  type: TYPE_NORMAL
- en: Docker provides the networking primitives that allow administrators to specify
    how different containers network with each application, connect to each of their
    components, then distribute them across a large number of servers, and ensure
    coordination between them irrespective of the host or the VM that they are running
    on. This book aggregates all the latest Docker networking technology and provides
    great in depth explanation with setup details.
  prefs: []
  type: TYPE_NORMAL
- en: What this book covers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '[Chapter 1](part0014_split_000.html#DB7S1-2d417e3c905d4b6c9e03acfd1355cc86
    "Chapter 1. Docker Networking Primer"), *Docker Networking Primer*, explains the
    essential components of Docker networking, which have evolved from coupling simple
    Docker abstractions and powerful network components, such as Linux bridges, Open
    vSwitch, and so on. This chapter also explains how Docker containers can be created
    with various modes. In the default mode, port mapping helps us through the use
    of iptables NAT rules, allowing traffic arriving at the host to reach containers.
    Later in this chapter, basic linking of the container is covered and the next
    generation of Docker networking, which is libnetwork, is also discussed.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 2](part0022_split_000.html#KVCC1-2d417e3c905d4b6c9e03acfd1355cc86
    "Chapter 2. Docker Networking Internals"), *Docker Networking Internals*, discusses
    Docker''s internal networking architecture. We will learn about IPv4, IPv6, and
    DNS configurations in Docker. Later in this chapter, Docker bridge and communication
    between containers in single host and multihost is covered. This chapter also
    explains overlay tunneling and different methods that are implemented on Docker
    networking, such as OVS, Flannel, and Weave.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 3](part0027_split_000.html#PNV61-2d417e3c905d4b6c9e03acfd1355cc86
    "Chapter 3. Building Your First Docker Network"), *Building Your First Docker
    Network*, shows how Docker containers communicate from multiple hosts using different
    networking options, such as Weave, OVS, and Flannel. Pipework uses legacy Linux
    bridge, Weave creates a virtual network, OVS uses GRE tunneling technology, and
    Flannel provides a separate subnet to each host to connect containers on multiple
    hosts. Some of the implementations, such as Pipework, are legacy and will become
    obsolete over a period of time, while others are designed to be used in the context
    of specific OSes, such as Flannel with CoreOS. Basic comparisons of Docker networking
    options are also covered in this chapter.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 4](part0032_split_000.html#UGI02-2d417e3c905d4b6c9e03acfd1355cc86
    "Chapter 4. Networking in a Docker Cluster"), *Networking in a Docker Cluster*,
    explains Docker networking in depth using various frameworks, such as native Docker
    Swarm, where using the libnetwork or the out-of the-box overlay network, Swarm,
    provides the multihost networking features. Kubernetes, on the other hand, has
    a different perspective from Docker, where each pod will get a unique IP address
    and communication between pods can occur with the help of services. Using Open
    vSwitch or IP-forwarding advanced routing rules, the Kubernetes networking can
    be enhanced to provide connectivity between pods on different subnets across hosts
    and expose the pods to the external world. In the case of Mesosphere, we can see
    that Marathon is used as a backend for the networking of the deployed containers.
    In the case of DCOS of the Mesosphere, the entire deployed stack of machines is
    treated as one machine to provide a rich-networking experience between deployed
    container services.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 5](part0036_split_000.html#12AK81-2d417e3c905d4b6c9e03acfd1355cc86
    "Chapter 5. Security and QoS for Docker Containers"), *Security and QoS for Docker
    Containers*, takes a dive into Docker security by referring to kernel and cgroups
    namespaces. We will also visit some of the aspects of filesystems and various
    Linux capabilities, which containers leverage in order to provide more features,
    such as the privileged container but at the cost of exposing itself more on the
    threat side. We will also see how containers can be deployed in a secured environment
    in AWS ECS using proxy containers to restrict the vulnerable traffic. We will
    also talk about how AppArmor is also provided with a rich set of **Mandatory Access
    Control** (**MAC**) system, which provides kernel-enhancement features in order
    to confine applications to a limited set of resources. Leveraging their benefits
    to Docker containers helps us deploy them in a secured environment. In the last
    section, we take a quick dive into Docker security benchmarks and some of the
    important recommendations that can be followed during auditing and Docker deployment
    in a production environment.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 6](part0043_split_000.html#190861-2d417e3c905d4b6c9e03acfd1355cc86
    "Chapter 6. Next Generation Networking Stack for Docker: libnetwork"), *Next Generation
    Networking Stack for Docker: libnetwork*, will look into some of the deeper and
    conceptual aspects of Docker networking. One of these is libnetworking—the future
    of the Docker network model, which is already getting into shape with the release
    of Docker 1.9\. While explaining the libnetworking concept, we will also study
    the CNM model, its various objects and components, along with its implementation
    code snippets. Next, we will look into drivers of CNM, the prime one being the
    overlay driver, in detail with deployment as part of Vagrant setup. We will look
    at standalone integrations of containers with overlay network with Docker Swarm
    and Docker Machine as well. In the next section, we explain the CNI interface,
    its executable plugins, and give a tutorial to configure Docker networking with
    the CNI plugin. In the last section, Project Calico is explained in detail, which
    provides scalable networking solutions that are based out of libnetwork and provides
    integration with Docker, Kubernetes, Mesos, bare-metal, and VMs, primarily.'
  prefs: []
  type: TYPE_NORMAL
- en: What you need for this book
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Mostly all of the setups basically require Ubuntu 14.04 (either installed on
    a physical machine or as a virtual machine) and Docker 1.9, which is the latest
    version to date. Specific OS and software requirements (Open Source Git Projects)
    are mentioned before each setup if required.
  prefs: []
  type: TYPE_NORMAL
- en: Who this book is for
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If you are a Linux administrator who wants to learn networking using Docker
    to ensure the efficient administration of core elements and applications, then
    this book is for you. Basic knowledge of LXC/Docker is assumed.
  prefs: []
  type: TYPE_NORMAL
- en: Conventions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You will also find a number of text styles that distinguish between different
    kinds of information. Here are some examples of these styles and an explanation
    of their meaning.
  prefs: []
  type: TYPE_NORMAL
- en: 'Code words in text, database table names, folder names, filenames, file extensions,
    pathnames, dummy URLs, user input, and Twitter handles are shown as follows: "You
    may notice that we used the Unix command, `rm`, to remove the `Drush` directory
    rather than the DOS `del` command."'
  prefs: []
  type: TYPE_NORMAL
- en: 'A block of code is set as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'When we wish to draw your attention to a particular part of a code block, the
    relevant lines or items are set in bold:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Any command-line input or output is written as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '**New** **terms** and **important** **words** are shown in bold. Words that
    you see on the screen, in menus or dialog boxes for example, appear in the text
    like this: "On the **Select** **Destination** **Location** screen, click on **Next**
    to accept the default destination."'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Warnings or important notes appear in a box like this.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Tips and tricks appear like this.
  prefs: []
  type: TYPE_NORMAL
