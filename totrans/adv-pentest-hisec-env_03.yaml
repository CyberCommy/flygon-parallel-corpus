- en: 'Chapter 3. Enumeration: Choosing Your Targets Wisely'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To successfully penetrate a secured environment you must have a good understanding
    of what you are facing. The enumeration data gathered will assist in determining
    target prioritization. By the end of this chapter, you should be able to choose
    which targets are ideal candidates for your initial attacks. Certain attack types
    make more "noise" than others, thus a targeted attack will be less likely to be
    noticed. Thanks to the hard work of the open source community we have a large
    selection of tools available to help us enumerate networks. In this chapter, we
    will discuss the following:'
  prefs: []
  type: TYPE_NORMAL
- en: How to add an additional computer to our virtual lab
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Advanced Nmap scanning techniques
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding custom Nmap scripts to your arsenal
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Saving time with SNMP
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Base lining your target networks with PBNJ
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Avoiding enumeration attempts — confusing the enemy
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Some examples in this chapter take advantage of firewalls and IDS logs to allow
    the reader to understand the impact certain scans and techniques have on the network.
    We will review the installation and configuration of both in later chapters.
  prefs: []
  type: TYPE_NORMAL
- en: Adding another virtual machine to our lab
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We have reached a point in the book where having an additional system in our
    lab is beneficial. In this section, we will install another machine on our network
    so that we can try out the enumeration techniques described.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Although beneficial, installing another virtual system at this point is not
    absolutely necessary. All examples are clearly documented in the book.
  prefs: []
  type: TYPE_NORMAL
- en: We will be using Ubuntu **10.04 LTS 64-bit** for our examples in this text.
    You can download Ubuntu 10.04 LTS from [http://www.ubuntu.com/download/ubuntu/download](http://www.ubuntu.com/download/ubuntu/download).
    Once you have grabbed a copy of the ISO we can start the installation.
  prefs: []
  type: TYPE_NORMAL
- en: 'Prepare a new virtual machine in VirtualBox as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Name:***Ubuntu_TestMachine_1*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Operating system:** *Linux*, **Version:***Ubuntu OR Ubuntu 64 (64 bit)*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Memory:***512 minimum*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Create new hard disk:***VDI, Dynamically allocated, 10 GB minimum*![Adding
    another virtual machine to our lab](img/7744_03_01.jpg)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Start the **Ubuntu_TestMachine_1** virtual machine and use the **First Run Wizard**
    to select the Ubuntu ISO you have downloaded as the installation media. Follow
    the standard Ubuntu installation process using the complete Virtual Machine (VBOX
    ATA) drive.
  prefs: []
  type: TYPE_NORMAL
- en: 'Choose the following settings during the install:'
  prefs: []
  type: TYPE_NORMAL
- en: 'What is your name: Student'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'What name do you want to use to log in: Student'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Choose a password: 1easyPassword'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'What is the name of this computer?: Phobos'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Require my password to login: Selected'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Once you have successfully installed Ubuntu it will need to be updated. Open
    up a terminal window by going to the top-left menu and choosing **Applications
    | Accessories | Terminal** and typing:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'followed by:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: As we will be using this system as an example of what might be seen on a typical
    network we will need to install some interesting services.
  prefs: []
  type: TYPE_NORMAL
- en: 'Open up a terminal session and type the following command which will install
    Apache, MySQL, and PHP:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: The installation will proceed and after some files have been downloaded, you
    will be required to enter your choice of **MySQL** password for the root user.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Confirm your password and press *Enter*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The system has been updated and we have some interesting ports available for
    our scans. We can now shut down the new guest machine and use the **VM VirtualBox
    Manager Settings** icon to change the network settings to **Internal Network**
    with Name set to: **Vlab_1**. Setting the **Network adapter** to **Internal Network**
    allows our BackTrack system to share the same subnet with the newly-created Ubuntu
    machine.'
  prefs: []
  type: TYPE_NORMAL
- en: '![Adding another virtual machine to our lab](img/7744_03_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Configuring and testing our Vlab_1 clients
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Let's start both of our virtual machines, then configure and test the network
    connectivity.
  prefs: []
  type: TYPE_NORMAL
- en: BackTrack Manual ifconfig
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'In **BT5_R1_Tester1** open up a terminal and type the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: We have set `eth1` which is on our virtual `VLab_1` segment to the IP address
    of `192.168.50.10`, the **network mask** to `255.255.255.0`, and the `broadcast`
    address to `192.168.50.255`. As an added bonus we have also set the device into
    **promiscuous** mode.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In order for promiscuous mode to work, it must be enabled. The option is in
    the **VM Manager** under **Network settings**. By default this setting is disabled
    for all network adapters.
  prefs: []
  type: TYPE_NORMAL
- en: Promiscuous mode allows you to monitor traffic on your network segment.
  prefs: []
  type: TYPE_NORMAL
- en: Ubuntu — Manual ifconfig
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Open up a terminal in the `Ubuntu_TestMachine_1` by using the top menu bar and
    clicking through **Applications | Accessories | Terminal**. Type `sudo ifconfig`
    to check your current configuration. If everything is configured correctly, you
    should not have an IP address assigned to `eth0`. We will rectify that situation
    by repeating the steps used for our BackTrack machine. This time we will use `eth0`
    rather than `eth1`, and we will not place this network adapter in promiscuous
    mode.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Verifying connectivity
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'We will attempt to ping the machines to verify connectivity. On **BT5_R1_Tester1**
    type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'On **Ubuntu_TestMachine_1** type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'If everything is configured correctly, you should see something along the lines
    of the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Verifying connectivity](img/7744_03_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Maintaining IP settings after reboot
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If you would like to have the network information statically assigned without
    having to manually enter this information each time, you can edit the `/etc/network/interfaces`
    file for the appropriate Ethernet device.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The following step may be completed for both virtual machines. Be sure to use
    the proper IP and adapter information for each machine.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is an example of what you would need to change in that file for the BackTrack
    guest machine:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Be sure to restart the network service after modifying this file (/etc/init.d/networking
    `restart)`.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Ubuntu users can use `ufw` (Uncomplicated Firewall) to manage the host-based
    iptables firewall. The examples in this chapter that mention the use of a host-based
    firewall are taking advantage of this fact. More information about UFW can be
    found on the Web at [https://help.ubuntu.com/10.04/serverguide/C/firewall.html](http://https://help.ubuntu.com/10.04/serverguide/C/firewall.html).
  prefs: []
  type: TYPE_NORMAL
- en: 'This firewall is easy to configure and very stable. UFW is disabled by default
    but can be enabled by simply typing: `sudo ufw enable`.'
  prefs: []
  type: TYPE_NORMAL
- en: Nmap — getting to know you
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If you are reading this text, odds are that you have used Nmap before. For those
    who have not, here is a short description of this powerful enumeration tool. Nmap
    (Network Mapper) has been around since 1997, and was originally created by Gordon
    "Fyodor" Lyon. Even if you have never used the program before, you have probably
    seen its output in at least one of the many films it has been in.
  prefs: []
  type: TYPE_NORMAL
- en: Nmap can be used to scan a network, monitor services, assist in system inventory
    tasks, and so on. Depending on which options are selected, Nmap will be able to
    provide operating system type, open ports, and more. As if that is not enough,
    the Nmap Scripting Engine can be used to extend base functionality even further.
  prefs: []
  type: TYPE_NORMAL
- en: According to the [http://nmap.org](http://nmap.org) website there are now 177
    scripts included in Nmap 5\. The purpose of these scripts range from guessing
    **Apple Filing Protocol** passwords to verifying whether connectivity can be established
    to X-servers.
  prefs: []
  type: TYPE_NORMAL
- en: 'The Nmap suite also includes:'
  prefs: []
  type: TYPE_NORMAL
- en: '**ZenMap:** Graphical user interface for Nmap.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Ncat:** Based on netcat, but updated with a larger feature set such as ncat
    chaining, SSL support, and more. Binaries are available.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Ncrack:** Used to test authentication implementations and password strength.
    Has support for many commonly used protocols.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Ndiff:** Can be used to baseline a network. Compare nmap scans against each
    other.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Nping:** Allows you to craft custom packets that can then be integrated into
    your scans. Able to perform raw packet manipulation.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Some examples used in the following section display sample output that required
    a combination of firewall and IDS to demonstrate certain aspects of how the tool
    behaves. Setting up these devices is fully covered in further chapters of the
    book, but is beyond the scope of this particular chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Commonly seen Nmap scan types and options
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Nmap command syntax: `nmap -{type(s)} -{opt(s)} {target}`'
  prefs: []
  type: TYPE_NORMAL
- en: '**Useful options:**'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Scan option** | **Title** | **Function** |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `-g` | Specify source port | Uses a specified source port to send packets.
    |'
  prefs: []
  type: TYPE_TB
- en: '| `--spoof_mac` | Spoof Mac | Creates a fake Mac address to send packets from.
    Can randomize MAC. |'
  prefs: []
  type: TYPE_TB
- en: '| `-S` | Source IP address | Spoofs a source IP address or tells Nmap which
    IP to use. |'
  prefs: []
  type: TYPE_TB
- en: '| `-e` | Choose Ethernet Interface | Determines which eth to send and receive
    packets on. |'
  prefs: []
  type: TYPE_TB
- en: '| `-F` | Fast scan | Reduces default scan to 100 ports in the nmap-services
    file. |'
  prefs: []
  type: TYPE_TB
- en: '| `-p` | Specify port range | Determines which ports are scanned. |'
  prefs: []
  type: TYPE_TB
- en: '| `-R` | Reverse lookup | Forces reverse lookup. |'
  prefs: []
  type: TYPE_TB
- en: '| `-N` | DNS resolution | Performs reverse lookup. |'
  prefs: []
  type: TYPE_TB
- en: '| `-n` | No DNS resolution | Does not do reverse lookup. |'
  prefs: []
  type: TYPE_TB
- en: '| `-h` | Help text | Provides Nmap help text. |'
  prefs: []
  type: TYPE_TB
- en: '| `-6` | IPv6 enable | Scans IPv6. |'
  prefs: []
  type: TYPE_TB
- en: '| `-A` | Aggressive | Initiates many options at once such as version and script
    scanning. Use with caution. |'
  prefs: []
  type: TYPE_TB
- en: '| `-T(0-5)` | Timing options | Determines how aggressive you want the scan
    to be. |'
  prefs: []
  type: TYPE_TB
- en: '| `--scan_delay` | Add delay | Adds a delays between probes. |'
  prefs: []
  type: TYPE_TB
- en: '| `-sV` | Service version | Probes for service software versions. |'
  prefs: []
  type: TYPE_TB
- en: '**Useful types:**'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Scan types** | **Title** | **Function** |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `-sA` | ACK scan | Checks if ports are stateful. Useful for testing firewalls.
    |'
  prefs: []
  type: TYPE_TB
- en: '| `-sP` | Ping scan | Used for fast network discovery. |'
  prefs: []
  type: TYPE_TB
- en: '| `-sR` | RPC scan | Locates RPC applications. May leave initiate log entries
    on successfully scanned hosts. This is now an alias to `-sV`. |'
  prefs: []
  type: TYPE_TB
- en: '| `-sS` | TCP SYN scan | Very fast and stealthy. Half-open scan. |'
  prefs: []
  type: TYPE_TB
- en: '| `-sT` | TCP scan | Makes full connections. Not efficient. Very noisy scan
    type that will be noticed easily. |'
  prefs: []
  type: TYPE_TB
- en: '| `-sU` | UDP scan | Determines if certain UDP ports are open. |'
  prefs: []
  type: TYPE_TB
- en: '| `-sX` | XMAS scan | Stealthy scan useful against certain firewall configurations.
    Looks for RST packets to determine if port is closed. Good for scanning UNIX systems.
    |'
  prefs: []
  type: TYPE_TB
- en: '| `-sL` | List scan | Lists the IP addresses that will be scanned. Use `-n`
    to ensure no packets are sent on the network. |'
  prefs: []
  type: TYPE_TB
- en: '| `-sO` | IP protocol scan | Searches for IP protocols in use on host. |'
  prefs: []
  type: TYPE_TB
- en: '| `-sM` | FIN/ACK | Stealthy scan. Good against UNIX-based systems. Looks for
    RST packets. |'
  prefs: []
  type: TYPE_TB
- en: '| `-sI` | Idle scan | Zombie Host Scan very stealthy scan. |'
  prefs: []
  type: TYPE_TB
- en: '| `-sW` | Window scan | Looks at RST packet TCP Window value to determine Open
    or Closed port. |'
  prefs: []
  type: TYPE_TB
- en: '**Output types:**'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Output types** | **Title** | **Function** |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `-oA` | All | Grepable, Normal, XML. |'
  prefs: []
  type: TYPE_TB
- en: '| `-oG` | Grepable | Formatted for grepping. |'
  prefs: []
  type: TYPE_TB
- en: '| `-oX` | XML | Output results to XML. |'
  prefs: []
  type: TYPE_TB
- en: '| `-oN` | Normal | Human Readable Output. |'
  prefs: []
  type: TYPE_TB
- en: Basic scans — warming up
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We will begin by trying some basic scans against our **Ubuntu_TestMachine_1**
    at `192.168.50.20`. Here we will perform a simple scan to determine what ports
    are open on our target system using the `-A` option.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Looking at the highlighted results we can determine that there is an open port
    at `80/tcp` running an `Apache httpd web server version 2.2.14`. We also see that
    the operating system running on the target is Linux 2.6.x. In addition, the `-A`
    flag initiated a `traceroute` command that provides us with the fact that the
    target is only one hop away.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The NMAP `-A` scan is very noisy and should not be used when stealth is required.
  prefs: []
  type: TYPE_NORMAL
- en: That is a lot of information gained from a very simple command. Let's move on
    to some more advanced features of this awesome tool.
  prefs: []
  type: TYPE_NORMAL
- en: Other Nmap techniques
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Nmap can be used for a variety of purposes. In addition to being a fast network
    discovery tool, it can also be used to stealthily baseline your network, fingerprint
    services, map out firewall rules, and be configured to bypass IDS signatures.
    We will now try out some of the more advanced features that Nmap makes available
    to us. This information is by no means holistic, so we will be focused on the
    features that will assist us in testing secured environments.
  prefs: []
  type: TYPE_NORMAL
- en: Remaining stealthy
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The network scanning process involves sending specially crafted packets to network
    hosts and examining the results for certain criteria. Based on these results you
    will hopefully be able to determine which hosts are on the network, what services
    they are running, and at which version level these services are. This information
    is then used to decide what types of attacks are likely to be successful. There
    are several methods we can use to try to determine this information, some are
    akin to walking down the street screaming your name, whereas others are analogous
    to creeping along in the shadows at night.
  prefs: []
  type: TYPE_NORMAL
- en: 'In a secured environment you are likely to be dealing with IDS''s that look
    for specific behaviors such as: how many packets were sent out and how fast they
    were sent, is the traffic unusual, and so on. Firewalls will be prone to flag
    any abnormal connection attempts. To ensure you have a slight opportunity at remaining
    undetected there are certain measures that need to be taken.'
  prefs: []
  type: TYPE_NORMAL
- en: Taking your time
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'You can change the timing of your scans by using the following nmap options:'
  prefs: []
  type: TYPE_NORMAL
- en: '**-T(0-5)** templates allow you to set the aggressiveness of the scan. This
    is the most simplistic method of detection avoidance. 0 is paranoid, 5 is insane
    which should be used only on a LAN. This is much faster than setting these options
    individually, but reduces the control you have of the scan.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**--max-hostgroup** will limit the hosts that are scanned to only one at a
    time. You can change the value to anything you are comfortable with, but remember
    that IDS''s will combine the probes you send out when checking against their signatures
    (for example, 5 probes in 2 minutes, and so on).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**--max-retries:** In penetration testing this is a setting that you may not
    want to adjust unless you are very certain of the network stability. You could
    reduce this value to 0 if you are very paranoid and not concerned with missing
    a potentially vulnerable system in your scan.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**-max-parallelism** **10** would only allow 10 outstanding probes to be out
    at once. Use this to control how many probes you want out at once.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**--scan-delay** allows you to set a pause between probes.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Let''s try some of these options in the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Retransmission caps will be hit; ports will be given up upon. By the time the
    scan completes we will know which systems are live on the 192.168.50.X subnet.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Do not use the `--scan_delay` option when using `--max_parallelism` as they
    are not compatible with each other.
  prefs: []
  type: TYPE_NORMAL
- en: Trying different scan types
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: This is the result of a typical scan from 192.168.50.10 to 192.168.75.11.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: We can see from this output that 21, 79, 80, 110, and 443 are open on this host.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This scan type would be detected by most IDS's even if they are running in a
    default configuration; however, network and host-based firewalls may ignore the
    traffic by default unless specifically configured to log permitted traffic. If
    you want to see the results in action turn on UFW and use it to open and close
    specific ports. This exercise may help to fully understand the resulting output.
  prefs: []
  type: TYPE_NORMAL
- en: 'Were you to try this scan with a stateful host-based firewall blocking traffic
    to port 79 and 21 you would see traffic similar to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: By reviewing the highlighted code closely we can see that the port state is
    `filtered` for ports `21` and `79`. Although we were not able to establish if
    the ports are open, we do know that they exist on the target machine in some context.
  prefs: []
  type: TYPE_NORMAL
- en: SYN scan
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: 'Using `-sS` against a wide open host at 192.168.50.10 from 192.168.75.11 we
    see the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Just as in the preceding example, this indicates that we have at least five
    open and/or filtered ports available. Be sure to use different scan types when
    attempting enumeration of the target network or you may miss out on something
    that could make a huge difference in your testing efforts!
  prefs: []
  type: TYPE_NORMAL
- en: Null scan
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: 'If the only scan we had attempted had been the null scan, we would have been
    very disappointed:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: This tells us that all of the ports are `open|filtered`. We can assume we have
    some firewall action, but we did not actually learn anything immediately useful.
  prefs: []
  type: TYPE_NORMAL
- en: ACK scan
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: As we did not find anything on our Null scan, we proceed to use the ACK scan
    type.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: At least this scan provided us with one unfiltered port. If we really wanted
    to perform testing we would need all of the open ports, not just one!
  prefs: []
  type: TYPE_NORMAL
- en: Conclusion
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: Using different scan types might draw more attention to you, but sometimes it's
    necessary to gather the data you need. Ideally, you would begin by scanning with
    the least noticeable scan types and work your way up based on the type of information
    you are gathering. Always double-check before you move on to the next subnet,
    especially if you have good reason to believe that there are some valuable ports
    available that are just not showing up.
  prefs: []
  type: TYPE_NORMAL
- en: Shifting blame — the zombies did it!
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Since the odds of remaining undetected are slim, we will need to try to deflect
    the blame. We can use an idle scan to have a zombie take all of the credit for
    our scan.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `nmap.org` site has a very detailed and thorough description of how an idle
    scan works. Take a look at [http://nmap.org/book/idlescan.html](http://nmap.org/book/idlescan.html)
    for a full overview of how these work.
  prefs: []
  type: TYPE_NORMAL
- en: An important item to remember about idle scanning (`-s`I) is that you will need
    to find a zombie host that has a good **TCP Sequence Prediction** rating. The
    idle scan is aptly named, as the machine being used as our scapegoat must be as
    close to idle as possible. Many in the industry suggest network enabled printers
    as perfect zombies because they typically do not have constant traffic, and their
    sequence prediction difficulty ratings are usually very low.
  prefs: []
  type: TYPE_NORMAL
- en: 'The first step of an idle scan is to locate possible zombies. You can find
    the TCP Sequence Prediction ratings by performing the following (verbose, OS detection,
    no ping, no name resolution):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'The section of the output that you will want to focus on is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: The system above is not ideal, but should be able to be used as a zombie. The
    higher the difficulty rating is, the more likely your attempt to use this machine
    as a zombie will fail. Also, the fact that generation is sequential will improve
    the likelihood that the scan will be successful.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s review the concept of an idle scan:'
  prefs: []
  type: TYPE_NORMAL
- en: Send SYN/ACK to zombie which in turn provides an RST with a fragment identification
    number (IPID).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A specially crafted packet with the IP address of the zombie host is sent to
    the target machine.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A closed port on the target machine will cause a RST to be sent to the zombie
    in which case nothing happens. An open port on the other hand will cause the target
    machine to respond to the IP address of our forged packet with a SYN/ACK which
    in turn caused our zombie machine to send the target a RST once it realizes there
    is no valid connection. The IPID has now been incremented!
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We close the loop by sending our zombie another SYN/ACK and checking to see
    if the IPID has increased by 2 once for our RST and once for the target machines
    RST.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Repeat until all target machine ports have been probed!
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When looking at how the zombie scan works, it is easy to see that the proper
    usage of an idle scan can be useful in slowing down members of the blue team (defensive
    security professionals).
  prefs: []
  type: TYPE_NORMAL
- en: 'So, what is the syntax of this command anyhow? With this much power it has
    to be super difficult right? You might be pleasantly surprised when looking at
    the following command structure:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'Here we used `-p` to initiate a scan of TCP ports that we already know are
    opened; we also indicated we did not want to ping (which would give us away) with
    `-Pn`, and then initiated an idle scan (-sI) using `192.168.1.88` as our zombie
    and `192.168.1.111` as our target. This results in the following output on this
    sample network:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: If we look at the output from Wireshark we can see some strange activity going
    on coming from `192.168.1.88` to `192.168.1.111:`
  prefs: []
  type: TYPE_NORMAL
- en: '![Shifting blame — the zombies did it!](img/7744_03_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Looking at the Wireshark results, we see that the previous Nmap command initiated
    a lot of traffic from `192.168.1.88` to `192.168.1.111` on our network. This traffic
    is what will initiate the activity needed to increase the IPID that tells us that
    the target system has open ports.
  prefs: []
  type: TYPE_NORMAL
- en: IDS rules, how to avoid them
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The only way to truly avoid an IDS rule is to know what they are, and to test
    your attacks in a virtual environment. We will dedicate an entire chapter of this
    book to avoiding detection. Be prepared to take the time to understand what an
    IDS looks for and use the methods we have already described to manage your scans
    to perform detection avoidance.
  prefs: []
  type: TYPE_NORMAL
- en: Using decoys
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The use of Nmap decoys can be an interesting concept. We tell Nmap to add additional
    hosts to the scan. You will not get any response from these decoys, but they will
    make it more difficult for an administrator to determine which IP is actively
    scanning, and which IP is just there to muddy the water so to speak. Ideally,
    you would be initiating a scan that will have enough LIVE decoys to drive down
    the detection capability of the targets administrators.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Use live decoys when scanning. This will make it more difficult to determine
    which system is actively scanning. Live decoys are IPs that are currently active
    on the network.
  prefs: []
  type: TYPE_NORMAL
- en: An item of note is that you are able to perform many of the scan types when
    using decoys. You will not be restricted and can use all of your tricks without
    hesitation.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s give this a try in our virtual lab:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: Here we invoke Nmap followed by the `-D` switch that will cause us to perform
    a decoy scan. We follow this command with a listing of decoys of our choice, all
    of which are live machines in this case. Once again we do not want to send out
    a ping request so we stop this action by using `-Pn`. The chosen port range was
    set with `-p` as `80,21,22,25`, and `443`.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '`ME` can be used instead of typing your localhost IP address.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Here are the results of this scan:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'Nothing new here; we have once again determined which ports are opened, filtered,
    or closed. The real magic occurred on the wire. Let''s take a look at what is
    seen by a network-based firewall:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Using decoys](img/7744_03_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: If you take a look at the source field you should notice that the decoys we
    have used are now populating the firewall filter that has been set to record all
    traffic. Using enough decoys, you could create a storm of sorts and thus fully
    confuse and delay the administrator of the network while you are performing your
    enumeration.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Wireshark can be used on the BackTrack machine if you want to look at this scan
    in action. We also fully cover adding firewalls to the lab in later chapters.
  prefs: []
  type: TYPE_NORMAL
- en: Adding custom Nmap scripts to your arsenal
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The Nmap scripting engine allows you to create and use custom scripts that perform
    many different functions. As previously mentioned, Nmap comes with many of these
    scripts already packaged for you. The fully detailed guide to the Nmap Scripting
    Engine is available at [http://nmap.org/book/nse.html](http://nmap.org/book/nse.html).
    By using the `--script` option you are able to invoke your own scripts, or pick
    and choose from the vast repository of scripts that are already available.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Make sure that you **fully** understand any script that you run. NSE is very
    powerful and could potentially cause damage if you do not understand each step
    of the process! Do not just blindly run all scripts you find or you may end up
    regretting it later.
  prefs: []
  type: TYPE_NORMAL
- en: How to decide if a script is right for you
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Using Nmap''s `--script-help` option will allow you to display several helpful
    fields of a particular script without actually running it. For instance, if we
    looked at BackTracks nmap''s script folder at `/usr/local/share/nmap/scripts`
    and performed an `ls -lah` we see a long list of unknowns:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: This list continues much further than what is displayed in this book and is
    constantly being updated. Not too long ago, Fyodor provided a great presentation
    on the Nmap Scripting Engine at the Defcon 18 conference and the number of penetration
    testers and developers who have been adding their scripts to the repository has
    been rising.
  prefs: []
  type: TYPE_NORMAL
- en: 'So what if we want to learn about `banner.nse?` This script looks interesting
    and we can make assumptions based on the name, but it would be better to look
    at the description provided by the author by typing:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'This results in the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: So, in this case our assumption was more than likely correct. Not only do we
    learn that the `banner.nse` file is used to connect to open TCP ports for banner
    grabbing, but also that it is considered to fall under the category of `discovery`
    and `safe`, both of which are categories that you can call when using the script
    option from the command line. You can also visit [http://nmap.org/nsedoc/](http://nmap.org/nsedoc/)
    for easy access to script information.
  prefs: []
  type: TYPE_NORMAL
- en: We do not yet have anything that `banner.nse` would work on in our lab, but
    let's go ahead and run the 50+ scripts that are initiated by the simple `-sC`
    option. If you have not already looked at the Nmap NSE website to see which scripts
    these are, you may want to give it a quick visit to ensure you fully understand
    the scripts that are being initiated before this is tried on a production network.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The Ubuntu machine in the virtual lab has been updated to make interesting services
    available for this example. Your output will most likely be different.
  prefs: []
  type: TYPE_NORMAL
- en: 'Take a look at the output produced by the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: The `-sC` option provides us with many details that the other scan types just
    did not manage to present. There is a cost associated with this. Many of the scripts
    that you have just seen run are very noticeable on the network and/or on the host
    they are being run on. Taking a look at the previous output we can now see that
    not only is `pop3` open at `port 110`, but also that it has `capa` and `APOP`
    capabilities. We also know now that this system will support connections to `SSLv2`
    which is a known vulnerable protocol that we can possibly exploit to our advantage.
  prefs: []
  type: TYPE_NORMAL
- en: Adding a new script to the database
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: All of these preloaded scripts are great, but what if you want to add additional
    scripts to your arsenal, either because you wrote them yourself or because someone
    you trust has provided you with the latest and greatest thing they have developed
    and you want to take advantage of it when performing your penetration tests? This
    can be very simple!
  prefs: []
  type: TYPE_NORMAL
- en: Add the `script .nse` file to the directory where the other Nmap NSE scripts
    are located.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Run the following command to update the database that bundles the scripts via
    categories:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: Now you can use your new scripts via the nmap `--script "scriptname.nse`" or
    by using the categorical grouping that the script was associated with.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'SNMP: A goldmine of information just waiting to be discovered'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Simple Network Management Protocol (SNMP)** is commonly mismanaged by busy
    administrators and developers. Frequently, you will see default community strings,
    or community strings that are reused throughout the entire organization you are
    testing. You will want to ensure that your clients are using the most secure version
    of SNMP and that you cannot simply walk in to a building, unplug a phone, and
    sniff the community string. Newer versions of SNMP include strong encryption to
    avoid such flaws.'
  prefs: []
  type: TYPE_NORMAL
- en: SNMPEnum
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Luckily for us there are many tools available that make testing for SNMP simple.
    We will start off by using SNMPEnum which is a Perl script that can be found in
    BackTrack 5 R1 in the `/pentest/enumeration/snmp/snmpenum` directory.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you would like to follow along with these examples you can either skip ahead
    a few chapters and follow the pfSense installation and configuration walkthroughs
    or the Ubuntu machine could be set up to use SNMP. This can be done as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: For this example a firewall virtual appliance has been set up and SNMP has been
    enabled with the very weak community string of "public".
  prefs: []
  type: TYPE_NORMAL
- en: Here we will display what type of information it will disclose to a penetration
    tester using `snmpenum.pl`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'This command invokes the `snmpenum.pl` Perl script and passes on the target
    IP `192.168.121.252` and the selected community string `public. linux.txt` which
    is found in the working directory of the `snmpenum` tool, in the given import
    file. We have specified that the output is to be placed in `myFW.txt` as there
    is such a wealth of information provided by a successful connection to a SNMP
    daemon. Here are a few of the more interesting sections of what we have just learned:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'WOW! We have managed to get all of the open ports for this device by simply
    sending ONE simple request to the SNMP daemon running on this router/firewall.
    In this case we could simply skip trying to run Nmap (which is a shame as we have
    learned so much about it in this chapter!) and just start our banner grabbing
    exercises. There is much more to be in the `myFW.txt` file however:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: Now we also know what exactly this machine is named, what its purpose is (a
    quick check on `google.com` will tell you all about pfSense) and which operating
    system and version we are dealing with.
  prefs: []
  type: TYPE_NORMAL
- en: What else can we get out of the SNMP scan we ran?
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: If there are flaws to be taken advantage of during your testing, at this point
    you have everything you would ever need. I encourage you to visit the manufacturers'
    sites and familiarize yourself with the type of information you can obtain via
    SNMP. If used properly, it can be extremely beneficial to an organization; however,
    if not configured properly SNMP is a potential epic fail.
  prefs: []
  type: TYPE_NORMAL
- en: SNMPCheck
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Another great tool included with BackTrack is `snmpcheck`, which was provided
    by Matteo Cantoni from `Nothink.org`. This Perl script allows you to enumerate
    the SNMP devices and places the output in a very human readable friendly format.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: 'This command assumes that the device will respond to the `public` community
    string, but you can easily change which string to use by adding the `-c` switch.
    On a successful scan the output will be similar to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: The preceding output has been shortened tremendously, but what we have provided
    here should give an idea of the type of data that this tool makes available to
    a penetration tester.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '`snmpcheck` has been ported over to Metasploit and can be used directly from
    within that framework.'
  prefs: []
  type: TYPE_NORMAL
- en: When the SNMP community string is NOT "public"
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: More than likely you will not find many community strings that are set at default.
    That is when you must dig into your toolset and earn your pay. There are many
    utilities that assist in actions such as brute forcing SNMP community names. One
    of my favorites is called `onesixtyone`. This scanner is fast and efficient and
    will send requests in parallel to speed things up.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Please keep the following in mind when testing: just because a tool is very
    functional for most tasks doesn''t mean it will be functional for all. There is
    the possibility that you may have to reach back into your toolbox and try something
    different. The more you know about how a tool functions, the more likely you are
    to be successful in your testing. For instance, onesixtyone is looking for a particular
    value when it makes the SNMP request. The firewall used in my virtual lab probably
    does not use this value and therefore, it is invisible to the tool. After seeing
    the wealth of knowledge we obtained in the preceding section, would it not be
    horrible to miss out on this information just because we only used one tool for
    the task at hand?'
  prefs: []
  type: TYPE_NORMAL
- en: 'The command syntax for onesixtyone is straightforward:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: 'Where we have onesixtyone use the provided `dict.txt` file to check against
    `192.168.50.10` which results in the following on my virtual network:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: 'Looking at these results, we notice that the host we scanned uses a Ubuntu
    Linux operating system and has the previously unknown community string of public.
    Let''s change this on the host and see how we fare when using the same command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: As expected, since we no longer had the community name in our list we were unable
    to find it. We can create our own `dict.txt` file, or add to the one that is already
    provided to us.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: When dealing with dictionary files, it is better to have several available to
    meet specific needs. It would be a good idea to have at least three available
    just for SNMP purposes. One with many defaults, another with popular names that
    people use for community names, and lastly a large file with many names that can
    be customized to your client based on company names, usernames, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: Creating network baselines with scanPBNJ
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When performing a penetration test it is important to know when and what changed
    over a period of time. Administrators are typically overworked and will probably
    still need to get work completed while you are doing your testing. One method
    of ensuring that you are not playing on an ever changing field is to grab a baseline
    of the network you are testing. PBNJ is very capable of this task. The website
    for scanPBNJ is located at [http://pbnj.sourceforge.net](http://pbnj.sourceforge.net)
    and the tool is also available as part of the BackTrack 5 R1 distribution. The
    key item of note about `scanPBNJ` is that it uses Nmap to scan the network and
    then stores the results in a database for you along with timestamps of when the
    scan had been performed.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up MySQL for PBNJ
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: BackTrack comes with MySQL preinstalled. We will take advantage of this and
    have PBNJ deposit our scan findings into a MySQL database that will prepare.
  prefs: []
  type: TYPE_NORMAL
- en: Starting MySQL
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Type the following at the command line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: The service should be started. You can also use `service stop` or `service restart`
    in the same manner.
  prefs: []
  type: TYPE_NORMAL
- en: Preparing the PBNJ database
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Prepare the PBNJ database using the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: We have created a database named `BTpbnj`, added a user named `tester` with
    a password of `password`, granted that user full database access, and exited the
    database.
  prefs: []
  type: TYPE_NORMAL
- en: Now we need to edit the PBNJ configuration file to use our newly-create database.
    Make a directory under root named `.pbnj-2.0/` (mkdir `-p .pbnj-2.0)` and then
    change to that hidden directory. Perform the following command to copy your `mysql.yaml`
    configuration file to `config.yaml:`
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: 'Once the file has been copied, we need to edit several items using nano:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: 'The following fields in `config.yaml` that are highlighted need to be changed
    to the match following:'
  prefs: []
  type: TYPE_NORMAL
- en: 'db: **mysql**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'database: **BTpbnj**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'user: **"tester**"'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'password: **"password**"'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'host: **"127.0.0.1**"'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'port: **"3306**"'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Exit out of nano by first saving your work with *CTRL + O* followed by *Enter*,
    and then *CTRL + X* to exit.
  prefs: []
  type: TYPE_NORMAL
- en: First scan
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Here we scan `192.168.75.0/24:`
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: This command initiates `scanpbnj` and uses the `-a` flag to use one of the now
    familiar Nmap flags. We targeted the `192.168.75.0/24` network in this example.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If following along with the examples replace `192.168.75.0/24` with the IP range
    of your lab or network.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once the scan is complete you will see something along the lines of the following
    output appear on your screen:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: That's all there is to it. We now have a record of what is on our `192.168.75.0/24`
    network sitting in a database ready for our review.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The default scan settings will perform Nmap's very verbose Operating System
    Detection, SYN scan, on the first 1025 ports excluding the little used port 0.
  prefs: []
  type: TYPE_NORMAL
- en: Reviewing the data
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Information is in the database now, but how can we review it? Well, because
    we have decided to use MySQL we can rely on our previous MySQL knowledge to perform
    any type of query we like! Here are some examples:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Log in to the database and tell it to use the `BTpbnj` database:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE58]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE59]'
  prefs: []
  type: TYPE_PRE
- en: 'Once we have logged in let''s try some queries:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE61]'
  prefs: []
  type: TYPE_PRE
- en: There are two tables in the MySQL `BTpbnj` database.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE63]'
  prefs: []
  type: TYPE_PRE
- en: Now we have some fields that we can base our next query on. Notice the `created_on`
    and `machine_created` fields. These timestamps come in handy when performing your
    baselines.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE64]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE65]'
  prefs: []
  type: TYPE_PRE
- en: We have selected the `ip,os`, and `created_on` fields from our database. Now
    let's move on to some more interesting information.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE66]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE67]'
  prefs: []
  type: TYPE_PRE
- en: Looking at this information we can see that we are now able to pull queries
    not just for one host, but for all hosts at once. Also, the output from this database
    could be in XML and then transferred to whichever tool we are using to track our
    penetration testing results.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: MySQL commands can be run from the command line so that output can be exported
    into the format of your choice. Use the `-X` or `-H` switches when invoking the
    MySQL command to save to each respective file type. Most penetration testers will
    need a good understanding of MySQL command syntax to be fully effective.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s see what type of data was collected in our simple scan:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE68]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE69]'
  prefs: []
  type: TYPE_PRE
- en: Using a database to store your findings is very efficient and highly recommended.
    Scan your virtual lab and test some of the different methods of extracting your
    data. By using this data wisely it is possible to quickly determine the network
    environment, standard software versions, and other information that will be critical
    to determining which targets you should focus on during the next stages of the
    penetration test.
  prefs: []
  type: TYPE_NORMAL
- en: Enumeration avoidance techniques
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As seen in the content of this chapter, an attacker can gain a lot of critical
    infrastructure information by using freely available tools and techniques. As
    penetration testers we cannot simply focus on the attacking of the network, we
    must also understand the mitigating controls sufficiently to be able to offer
    advice and guidance to our customers. There are several methods that can be used
    by a corporation that will make it more difficult for an attacker to gain the
    information necessary to make a stealthy, successful attack on the customer's
    assets.
  prefs: []
  type: TYPE_NORMAL
- en: Naming conventions
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Administrators should be encouraged to use naming schemes that do not give
    away information about the devices. For instance, if you were to use your Nmap-Fu
    or DNS-Fu to pull the hostnames and find that the machines are labeled as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`dns1.example.com`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`mail.example.com`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`domainserver`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`devserver`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`administratorspivotpoint`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`rogueWAP`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This would instantly give you an idea of which systems you would want to target
    first. A better method of naming could be along the lines of some tokenization
    such as ST1 = DNS server, or that all development servers have 71 as part of the
    name. This would make things more difficult to understand for an intruder, and
    at the same time would allow a valid administrator to quickly identify assets
    for what they are.
  prefs: []
  type: TYPE_NORMAL
- en: Port knocking
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Frequently, administrators can chose to use **port knocking** to avoid port
    enumeration attempts. The concept can be as simple as requiring someone to connect
    to a secret port prior to connecting to a valid management port such as SSH.
  prefs: []
  type: TYPE_NORMAL
- en: A more advanced usage of port knocking would be to set up a telnet server and
    have your host-based firewall fire off rules that temporarily block an IP from
    connecting to any port on the system once it touches the telnet port.
  prefs: []
  type: TYPE_NORMAL
- en: Intrusion detection and avoidance systems
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Although these do not provide the perfect security that vendors often claim,
    a properly configured Intrusion Detection System (host-based OR network-based)
    can make a big difference in detecting enumeration attempts. These devices should
    be used as part of the corporation's defense in depth strategy and should be properly
    managed, monitored, and updated to provide the most benefit to the security posture
    of the corporation in question.
  prefs: []
  type: TYPE_NORMAL
- en: Trigger points
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Strategically placed systems that issue alerts when accessed can be used as
    an early warning system similar to using a perimeter motion detector in physical
    security. An administrator can set up a system on a segment that automatically
    sends alerts or initiates certain actions when devious connection attempts are
    made.
  prefs: []
  type: TYPE_NORMAL
- en: Administrators should avoid trying to "sweeten the deal" by opening up as many
    ports as possible on this system, as this may give away the purpose of the system.
    One item of note is that if such systems are used in the environment, it is critical
    that they are maintained with the same diligence as other systems on the network.
    Having an unpatched system on your network would definitely make an inviting target
    for an attacker; however, giving said attacker a quick method of gaining a foothold
    within your network is NOT a good idea. Once a pivot point has been established
    the attacker's job is much easier, and by the time you can respond to your trigger
    point alerts, the attacker may have already set up backdoors into your network
    on other systems.
  prefs: []
  type: TYPE_NORMAL
- en: SNMP lockdown
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Ensure that the administrators use SNMP in a secured manner. As previously demonstrated,
    SNMP can be used to gain a wealth of knowledge and in the hands of an attacker,
    this would basically become the end game. SNMP should be using the latest security
    mechanisms available such as encryption. Use the latest version of SNMP that is
    available if you have vetted it to be secure. It should also be locked down and
    restricted to only be accessible to certain hosts. Most important is that the
    public community should be removed.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: There may be times that your clients are unable to use the latest versions of
    SNMP for various reasons. In these cases attempt to secure the protocol as much
    as possible. For example, you could advise they lock SNMP down to specific hosts.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: At this point we have discussed several methods necessary to enumerate a network.
    We have created an additional machine to add to our virtual lab so that we can
    test these methods and gain the experience necessary to perform these actions
    on live networks.
  prefs: []
  type: TYPE_NORMAL
- en: You should have a good understanding of the tools and techniques available to
    you such as onesixtyone for SNMP brute forcing, or Nmap for network scanning.
    With the power of PBNJ data we determined that it is simple to get a baseline
    of the network in MySQL format, and then use that data to quickly select the right
    targets for the next stage of our penetration testing.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will dive into the topic of exploitation. You will be
    introduced to compiling or rewriting proof of concept (POC) exploit code from
    the Web, using Metasploit, cracking passwords, and manual exploitation of remote
    vulnerabilities.
  prefs: []
  type: TYPE_NORMAL
