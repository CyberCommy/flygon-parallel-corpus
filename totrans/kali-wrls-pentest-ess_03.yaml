- en: Chapter 3. WLAN Reconnaissance
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we are going to introduce the basic concepts behind wireless
    **LANs** (**Local Area Networks**) and see how to carry out the reconnaissance
    and information gathering phase of our penetration test.
  prefs: []
  type: TYPE_NORMAL
- en: 'This chapter deals with wireless networks scanning and information gathering,
    enumerating visible and hidden networks, identifying the security protocols used,
    their possible vulnerabilities and the connected clients. The topics covered are
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Introduction to 802.11 standard and wireless LAN
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction to wireless scanning
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Wireless scanning with `airodump-ng`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Wireless scanning with Kismet
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction to 802.11 standard and wireless LAN
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Before diving into the hands-on part, it is worth recalling the basic concepts
    of the 802.11 standard on which wireless local area networks are based.
  prefs: []
  type: TYPE_NORMAL
- en: The 802.11 is the second layer (link layer) standard for implementing wireless
    LAN developed by the IEEE. Devices and networks that use the 802.11 standard are
    commonly known as **Wi-Fi**, a trademark of the **Wi-Fi Alliance**.
  prefs: []
  type: TYPE_NORMAL
- en: There have been subsequent specifications of the standard over the time, the
    main ones are 802.11a, 802.11b, 802.11g, and 802.11n.
  prefs: []
  type: TYPE_NORMAL
- en: 802.11a operates on the 5 GHz frequency range while 802.11b/g on the 2.4 GHz
    frequency range, which is by far the most used by Wi-Fi networks nowadays. 802.11n
    supports both these frequency bands and is backward compatible with the other
    802.11 specifications.
  prefs: []
  type: TYPE_NORMAL
- en: The range of the Wi-Fi signal depends on the standard used, on the power of
    the transmitting device and on the presence of physical obstacles and radio interferences.
  prefs: []
  type: TYPE_NORMAL
- en: For common Wi-Fi devices, it typically varies from a maximum of 20-25 meters
    indoors to 100 meters and more outdoors.
  prefs: []
  type: TYPE_NORMAL
- en: The maximum throughput, that is, the maximum data rate, of the 802.11 standard
    varies from the 11 Mbps of the 802.11a/b standards to the 600 Mbps of the 802.11n
    standard.
  prefs: []
  type: TYPE_NORMAL
- en: Each frequency band is subdivided into multiple channels, which are subsets
    that include smaller frequency ranges. The 2.4 GHz band is subdivided into 14
    distinct channels, but not all of them are always used. Most of the countries
    typically allow only a subset of these channels, while some countries allow all
    the channels.
  prefs: []
  type: TYPE_NORMAL
- en: For example, United States allows channels from 1 to 11, while Japan allows
    all 14 channels. Indeed, every country has established its own *regulatory domain*
    (*regdomain*), a set of rules that defines the radio spectrum allocation for wireless
    transmission. The regulatory domains also define the maximum transmit power allowed.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**About Wi-Fi channels**'
  prefs: []
  type: TYPE_NORMAL
- en: To get more information about Wi-Fi channels and regulatory domains, refer to
    the resource on Wikipedia at [https://en.wikipedia.org/wiki/List_of_WLAN_channels](https://en.wikipedia.org/wiki/List_of_WLAN_channels).
  prefs: []
  type: TYPE_NORMAL
- en: 802.11 frames, types, and subtypes
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'A 802.11 frame is composed of the **MAC header**, **Payload**, and **Frame
    Check Sequence** (**FCS**) sections, as shown in the following diagram:'
  prefs: []
  type: TYPE_NORMAL
- en: '![802.11 frames, types, and subtypes](img/B04527_03_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The MAC header section is divided into various fields, among which are the
    **Type** and **Subtype** fields. The 802.11 standard defines three different types
    of frames:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Management frames**: These frames coordinate communication between access
    points and clients on a wireless LAN. Management frames include the following
    subtypes:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Beacon frames**: These are used to announce the presence and the basic configuration
    of an access point (AP).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Probe request frames**: These are sent by the clients to test for the presence
    of APs or a specific AP to connect to.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Probe response frames**: These are sent by the AP in response to probe requests,
    containing information about the network.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Authentication request frames**: These are sent by clients to begin the authentication
    phase prior to connect to an AP.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Authentication response frames**: These are sent by the AP to accept or reject
    the authentication of the client.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Association request frames**: These are used by the client to associate with
    the AP. It must contain the SSID.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Association response frames**: These are sent by the AP to accept or reject
    the association with the client.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Control frames**: They are used to control the flow of data traffic on the
    network. The subtypes of control frames are **Request-to-send** (**RTS**) frames
    and **Clear-to-send** (**CTS**) frames, which provide an optional mechanism to
    reduce frame collisions and **Acknowledgment** (**ACK**) frames that are sent
    by the receiving station to confirm the correct receipt of a data frame.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Data frames**: These contain the data transmitted over the network, with
    packets of higher-layer protocols encapsulated in the 802.11 frames.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In the next section, we are going to recall the structure and the building blocks
    of a wireless network.
  prefs: []
  type: TYPE_NORMAL
- en: Infrastructure mode and wireless access points
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Wi-Fi networks use the 802.11 standard in infrastructure mode. In this mode,
    devices called **access points** (**APs**) are used to connect the wireless client
    stations with a wired LAN or with the Internet. Access points could be seen as
    the analogue of switches for wired networks but they offer more functionalities
    such as network layer routing, DHCP, NAT, and advanced management capabilities
    through the remote console or the web administration panel.
  prefs: []
  type: TYPE_NORMAL
- en: A wireless network formed by a single AP is called a **Basic Service Set** (**BSS**)
    while a network with multiple APs is known as an **Extended Service Set** (**ESS**).
    Each AP is identified by the **Basic Service Set ID** (**BSSID**), which typically
    corresponds to the MAC address of the wireless interface on the AP. A wireless
    LAN is instead identified by the **Service Set ID** (**SSID**) or **Extended Service
    Set ID** (**ESSID**), which is usually a readable string that is used as the name
    of the network.
  prefs: []
  type: TYPE_NORMAL
- en: '![Infrastructure mode and wireless access points](img/B04527_03_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Access points periodically send out broadcast beacon frames to announce their
    presence. Typically, the beacons also contain the SSID of the AP, so that it is
    easily identifiable by clients, which can send authentication and association
    requests to the AP, to connect to the wireless network.
  prefs: []
  type: TYPE_NORMAL
- en: Wireless security
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Data transmission on wireless networks is inherently less secure compared to
    wired networks regarding the physical media, because anyone nearby could sniff
    the traffic easily. Wireless LANs can use open authentication, such as free Wi-Fi
    hotspots do, and in this case no authentication is required from the clients and
    the traffic is not encrypted, making open networks totally insecure.
  prefs: []
  type: TYPE_NORMAL
- en: 'Two security protocols that provide authentication and encryption to wireless
    LANs have been developed over the time: **Wired Equivalent Privacy** (**WEP**)
    and **Wi-Fi Protected Access** (**WPA**/**WPA2**).'
  prefs: []
  type: TYPE_NORMAL
- en: The WEP and WPA/WPA2 authentication protocols and their relative cracking techniques
    will be discussed in [Chapter 4](ch04.html "Chapter 4. WEP Cracking"), *WEP Cracking*
    and [Chapter 5](ch05.html "Chapter 5. WPA/WPA2 Cracking"), *WPA/WPA2 Cracking*,
    respectively.
  prefs: []
  type: TYPE_NORMAL
- en: Wireless LAN scanning
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The process of thoroughly examining the radio waves to find wireless network
    is called *wireless scanning*.
  prefs: []
  type: TYPE_NORMAL
- en: Wireless networks scanning has become quite popular, even among nontechnical
    people, also due to the so-called *wardriving* phenomenon. Wardriving is the activity
    of pinpointing wireless networks outdoors, usually driving a car and equipped
    with a laptop, a high-gain antenna and a GPS receiver.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are two main types of scanning: **active** and **passive**.'
  prefs: []
  type: TYPE_NORMAL
- en: Active scanning involves sending broadcast probe request packets and waiting
    for probe response packets from access points, taking note of the discovered ones.
    This is the standard method used by clients to identify wireless networks that
    are available nearby. The disadvantage of this method is that an access point
    can be configured to ignore the broadcast probe request packets and to exclude
    its SSID from the beacons it sends (**hidden AP**), so in this case, active scanning
    could not identify the network.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Passive scanning provides better results in regard of wireless Reconnaissance
    and is the method adopted by wireless scanners. In passive scanning, we don't
    send broadcast probe requests. The wireless adapter is instead put in monitor
    mode so that it can sniff all the traffic going on a given channel of the Wi-Fi
    frequency range. The captured packets are analyzed to determine which access points
    are transmitting, from the BSSID contained in the beacons, and which clients are
    connected. This way, access points that are hidden from active scanning can also
    be revealed.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The tools for scanning wireless networks included in Kali Linux fall in the
    category of passive scanners. We cover the two most popular of these tools in
    this chapter, `airodump-ng` and `Kismet`, but also tools such as Fern Wi-Fi Cracker
    and Wifite can be used for this purpose. In the upcoming subsection, we see how
    to configure our wireless adapter in monitor mode.
  prefs: []
  type: TYPE_NORMAL
- en: Configuring the wireless adapter in monitor mode
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In the previous chapter, we have seen how to put the wireless interface in monitor
    mode, to verify that it is compatible with packet sniffing. Now, we analyze the
    details of this procedure.
  prefs: []
  type: TYPE_NORMAL
- en: 'Recall that we issued the `airmon-ng start wlan0` command, as shown in the
    following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Configuring the wireless adapter in monitor mode](img/B04527_03_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The `airmon-ng` tool also indicates us the chipset and the driver in use by
    the adapter. Notice that the `mon0` interface is created with monitor mode enabled,
    while the `wlan0` interface is in managed mode (which is the default mode for
    wireless adapters), as shown in the following output of the `iwconfig` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Configuring the wireless adapter in monitor mode](img/B04527_03_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The `mon0` interface is listening on all the channels. If we want to listen
    on a specific channel, we can issue the `airmon-ng start wlan0 <channel>` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Configuring the wireless adapter in monitor mode](img/B04527_03_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: We see that another interface named `mon1` has been created in monitor mode.
    We can create multiple monitor mode interfaces related to a physical wireless
    interface. While running `airmon-ng`, we notice a warning telling us that some
    processes may interfere with other tools of the `Aircrack-ng` suite. To stop these
    processes, we can execute `airmon-ng check kill`.
  prefs: []
  type: TYPE_NORMAL
- en: 'If we want to stop the `mon0` interface, we run the `airmon-ng stop mon0` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Configuring the wireless adapter in monitor mode](img/B04527_03_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Now that the interface is in monitor mode, we can proceed with wireless scanning.
  prefs: []
  type: TYPE_NORMAL
- en: Wireless scanning with airodump-ng
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `airodump-ng` tool is one of the many tools included in the `Aircrack-ng`
    suite. It is capable of sniffing and capturing 802.11 frames, besides recording
    information relative to discovered access points and clients. `Airodump-ng` scans
    the Wi-Fi frequency band, hopping from one channel to another. To use it, after
    having put the wireless interface in monitor mode, as we saw previously, we run
    the `airodump-ng mon0` command. The following screenshot shows its output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Wireless scanning with airodump-ng](img/B04527_03_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The first line shows the last association between an AP and a client, with the
    current channel, the elapsed running time, and the security protocol used. As
    we can notice in the preceding screenshot, the top half of the screen displays
    the APs while the bottom half displays the clients.
  prefs: []
  type: TYPE_NORMAL
- en: 'For each AP found, the following information is shown:'
  prefs: []
  type: TYPE_NORMAL
- en: The BSSID (MAC address)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Power Level (PWR) and the Receive Quality (RXQ) of the signal
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The number of beacons sent and the number of captured data packets
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The channel (CH)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The maximum speed supported (MB)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The encryption algorithm (ENC), the cipher (CIPHER), and the authentication
    protocol (AUTH) used
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The wireless network name or SSID (ESSID)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'If `<length: number>` appears in the ESSID field, it means that the SSID is
    hidden and the AP only reveals its length (number of characters). If the number
    is 0 or 1, it means the AP does not reveal the actual length of the SSID.'
  prefs: []
  type: TYPE_NORMAL
- en: In the bottom half, the `STATION` field is about the MAC address of the clients,
    which can be associated with an AP. If associated, the BSSID of the AP is shown
    in the relative field; otherwise, the `not associated` state is displayed.
  prefs: []
  type: TYPE_NORMAL
- en: The `Probes` field indicates the SSIDs of the APs the client is trying to connect
    to, if it is not currently associated. This can reveal a hidden AP when it responds
    to a probe request or to an association request from a client.
  prefs: []
  type: TYPE_NORMAL
- en: There are other methods to get a hidden SSID. We could force the connected clients
    to reassociate with the AP sending them de-authentication packets, as we will
    see in [Chapter 7](ch07.html "Chapter 7. Wireless Client Attacks"), *Wireless
    Client Attacks*. We could also analyze captured association and probe request/response
    packets with Wireshark to recover the SSID. We will cover packet dumping and analysis
    on [Chapter 4](ch04.html "Chapter 4. WEP Cracking"), *WEP Cracking* and [Chapter
    5](ch05.html "Chapter 5. WPA/WPA2 Cracking"), *WPA/WPA2 Cracking*, about WEP and
    WPA/WPA2 cracking.
  prefs: []
  type: TYPE_NORMAL
- en: We can write the output to a file using the `-w` or -`-write` options followed
    by the file name. `Airodump-ng` can save the output in various formats (`pcap`,
    `ivs`, `csv`, `gps`, `kismet`, and `netxml`), compatible with Kismet and packet
    analysis tools such as Wireshark.
  prefs: []
  type: TYPE_NORMAL
- en: '`Airodump-ng` also allows to select specific channels through the -`-channel`
    or `-c <ch_nr1,ch_nr2…..ch_nrN>` option:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '![Wireless scanning with airodump-ng](img/B04527_03_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Wireless scanning with Kismet
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Kismet is a powerful passive scanner available for different platforms and is
    installed by default on Kali. It is not simply a scanner, but also a wireless
    frame analysis and intrusion detection tool.
  prefs: []
  type: TYPE_NORMAL
- en: 'Kismet is composed of two main processes: `kismet_server` and `kismet_client`.
    The `kismet_server` component does the job of capturing, logging, and decoding
    wireless frames. Its configuration file is `kismet.conf` and it is located at
    `/etc/kismet/` on Kali Linux. The `kismet_client` frontend is a ncurses-based
    interface that displays the detected APs, statistics, and network details. To
    run it, we type `kismet` on the command line or navigate to **Kali Linux** | **Wireless
    Attacks** | **802.11 Wireless Tools** | **Kismet** from the **Application** Menu:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Wireless scanning with Kismet](img/B04527_03_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'As we can see, Kismet prompts us to start the server and we choose `Yes` and
    then `Start` in the following prompt. Then a message saying that no packet sources
    are defined could appear and we are asked to add a packet source:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Wireless scanning with Kismet](img/B04527_03_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The packet source is our monitor mode interface `mon0` and we insert it in
    the `Intf` field in the subsequent prompt:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Wireless scanning with Kismet](img/B04527_03_11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The packet source can also be set in the `kismet.conf` file, in the `ncsource`
    directive, as we can see in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Wireless scanning with Kismet](img/B04527_03_12.jpg)'
  prefs: []
  type: TYPE_IMG
- en: This is the recommended way to configure the packet source, avoiding to do it
    manually each time Kismet is started.
  prefs: []
  type: TYPE_NORMAL
- en: 'We close the server console and the client interface is displayed. To access
    the menu on the top of the window, we press the *~* key and move over the entries
    with the arrow keys. Kismet interface and behavior are customizable by navigating
    to **Kismet** | **Preferences**:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Wireless scanning with Kismet](img/B04527_03_13.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The screen is divided into the following main sections, from the top to the
    bottom: network list, client list, packet graph, status, and the general info
    side panel on the right. You can choose which sections to visualize in the **View**
    menu:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Wireless scanning with Kismet](img/B04527_03_14.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The Network List shows the detected networks in the default Auto-fit mode.
  prefs: []
  type: TYPE_NORMAL
- en: 'To select a network and see its details and the clients connected, we need
    to change the sorting method to another, for example, using **Type** or **Channel**
    in the **Sort** menu. Then we can select a network on the list by clicking on
    it with the mouse:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Wireless scanning with Kismet](img/B04527_03_15.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Navigate to **Windows** | **Network Details** for more detailed information,
    such as the BSSID, the channel, the manufacturer, the signal level, packet rate,
    and so on:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Wireless scanning with Kismet](img/B04527_03_16.jpg)'
  prefs: []
  type: TYPE_IMG
- en: If we select the **Clients** options, we can see the clients connected to the
    network, along with useful information such as the MAC address, the packets exchanged
    and the client device manufacturer.
  prefs: []
  type: TYPE_NORMAL
- en: '![Wireless scanning with Kismet](img/B04527_03_17.jpg)'
  prefs: []
  type: TYPE_IMG
- en: In case of networks with cloaked SSID, Kismet shows the string `<Hidden SSID>`
    in place of the network name. When a client tries to connect to the network, the
    AP sends the SSID in clear in the response packets, allowing Kismet to uncover
    it, as we have already seen with `Airodump-ng`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Kismet generates the following log files, by default in the directory from
    which it has been started (but we can change this in the `logtemplate` directive
    in `kismet.conf`):'
  prefs: []
  type: TYPE_NORMAL
- en: A packet capture file
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Networks in text format (`.nettxt`)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Networks in XML format (`.netxml`)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: GPS data in XML format (`.gpsxml`)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The packet capture files can then be examined by Wireshark and can contain spectrum
    data, signal and noise levels, and GPS data.
  prefs: []
  type: TYPE_NORMAL
- en: Indeed, Kismet, as well as `Airodump-ng`, can be integrated with a GPS receiver,
    through the `gpsd` daemon, to establish the coordinates of the networks, which
    could also be used to realize graphical maps with apposite tools, such as GISKismet.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**GISKismet**'
  prefs: []
  type: TYPE_NORMAL
- en: GISKismet is a visualization tool for Kismet, included by default in Kali Linux
    that allows to import the `.netxml` files into a SQLite database, so that we can
    execute SQL queries on it, and to build graphs and maps of the networks. This
    tool could be very useful especially when scanning large networks with many access
    points. For more information, see the GISKismet website [http://trac.assembla.com/giskismet/wiki](http://trac.assembla.com/giskismet/wiki).
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we introduced the IEEE 802.11 standard and the typical wireless
    LAN deployment in infrastructure mode. Then we covered the basic concepts of wireless
    scanning and saw how to practically discover and gather information about wireless
    networks, using two of the most effective tools included in Kali Linux: `airodump-ng`
    and Kismet.'
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will cover the WEP protocol, explaining why it is insecure,
    and see how it can be cracked using the tools provided with Kali Linux.
  prefs: []
  type: TYPE_NORMAL
