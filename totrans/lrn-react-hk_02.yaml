- en: Introducing React and React Hooks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: React is a JavaScript library that can be used to build efficient and extensible
    web applications. React was developed by Facebook, and is used in many large-scale
    web applications, such as Facebook, Instagram, Netflix, and WhatsApp Web.
  prefs: []
  type: TYPE_NORMAL
- en: In this book, we are going to learn how to build complex and efficient user
    interfaces with React, while keeping the code simple and extensible. Using the
    new paradigm of React Hooks, we can greatly simplify dealing with state management
    and side effects in web applications, ensuring the potential for growing and extending
    the application later on. We are also going to learn about **React context** and
    **React Suspense**, as well as how they can be used with Hooks. Afterward, we
    are going to learn how to integrate **Redux** and **MobX** with React Hooks. Finally,
    we are going to learn how to migrate from existing React class components, Redux,
    and MobX web applications, to React Hooks.
  prefs: []
  type: TYPE_NORMAL
- en: In the first chapter of this book, we are going to learn about the fundamental
    principles of React and React Hooks. We start by learning what React and React
    Hooks are, and why we should use them. Then, we move on to learn about the functionality
    of Hooks. Finally, we give an introduction to the kinds of Hooks that are provided
    by React, and a couple of Hooks that we are going to learn about throughout the
    book. By learning the fundamentals of React and React Hooks, we will be better
    able to understand the concepts that will be introduced in this book.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following topics will be covered in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Learning about the fundamental principles of React
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Motivating the need for React Hooks
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Getting started with React Hooks
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Giving an overview of various Hooks
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A fairly recent version of Node.js should already be installed (v11.12.0, or
    higher). The `npm` package manager for Node.js also needs to be installed.
  prefs: []
  type: TYPE_NORMAL
- en: The code for this chapter can be found on the GitHub repository: [https://github.com/PacktPublishing/Learn-React-Hooks/tree/master/Chapter01](https://github.com/PacktPublishing/Learn-React-Hooks/tree/master/Chapter01).
  prefs: []
  type: TYPE_NORMAL
- en: 'Check out the following video to see the code in action:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://bit.ly/2Mm9yoC](http://bit.ly/2Mm9yoC)'
  prefs: []
  type: TYPE_NORMAL
- en: Please note that it is highly recommended that you write the code on your own.
    Do not simply run the code examples that were previously provided. It is important
    to write the code yourself in order to learn and understand it properly. However,
    if you run into any issues, you can always refer to the code example.
  prefs: []
  type: TYPE_NORMAL
- en: Now, let's get started with the chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Principles of React
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Before we start learning about React Hooks, we are going to learn about the
    three fundamental principles of React. These principles allow us to easily write
    scalable web applications. The fundamental principles are important to know, as
    they will help us to understand how and why Hooks fit into the React ecosystem.
  prefs: []
  type: TYPE_NORMAL
- en: 'React is based on three fundamental principles:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Declarative**: Instead of telling React how to do things, we tell it what
    we want it to do. As a result, we can easily design our applications and React
    will efficiently update and render just the right components when the data changes.
    For example, the following code, which duplicates strings in an array is imperative,
    which is the opposite of declarative:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'As we can see, in imperative code, we need to tell the computer exactly what
    to do, step by step. However, with declarative code, we can simply tell the computer
    what we want, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: In the previous declarative code, we tell the computer that we want to map each
    element of the `input` array from `str` to `str + str`. As we can see, declarative
    code is much more concise.
  prefs: []
  type: TYPE_NORMAL
- en: '**Component-based**: React encapsulates components that manage their own state
    and views, and then allows us to compose them in order to create complex user
    interfaces.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Learn once, write anywhere**: React does not make assumptions about your
    technology stack, and tries to ensure that you can develop apps without rewriting
    existing code as much as possible.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'We just mentioned that React is component-based. In React, there are two types
    of components:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Function components**: JavaScript functions that take the props as an argument,
    and return the user interface (usually via JSX)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Class components**: JavaScript classes that provide a `render` method, which
    returns the user interface (usually via JSX)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: While function components are easier to define and understand, class components
    were needed to deal with state, contexts, and many more of React's advanced features.
    However, with React Hooks, we can deal with React's advanced features without
    needing a class component!
  prefs: []
  type: TYPE_NORMAL
- en: Motivation for using React Hooks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: React's three fundamental principles make it easy to write code, encapsulate
    components, and share code across multiple platforms. Instead of reinventing the
    wheel, React always tries to make use of existing JavaScript features as much
    as possible. As a result, we are going to learn software design patterns that
    will be applicable in many more cases than just designing user interfaces.
  prefs: []
  type: TYPE_NORMAL
- en: React always strives to make the developer experience as smooth as possible,
    while ensuring that it is kept performant enough, without the developer having
    to worry too much about how to optimize performance. However, throughout the years
    of using React, a couple of problems have been identified.
  prefs: []
  type: TYPE_NORMAL
- en: Let's take a look at these problems in detail in the following sections.
  prefs: []
  type: TYPE_NORMAL
- en: Confusing classes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the past, we had to use class components with special functions called life
    cycle methods, such as `componentDidUpdate`, and special state-handling methods,
    such as `this.setState`, in order to deal with state changes. React classes, and
    especially the `this` context, which is a JavaScript object, are hard to read
    and understand for both humans and machines.
  prefs: []
  type: TYPE_NORMAL
- en: '`this` is a special keyword in JavaScript that always refers to the object
    that it belongs to:'
  prefs: []
  type: TYPE_NORMAL
- en: In a method, `this` refers to the class object (instance of the class).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In an event handler, `this` refers to the element that received the event.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In a function or when standing alone, `this` refers to the global object. For
    example, in a browser, the global object is the `Window` object.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In strict mode, `this` is `undefined` in a function.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Additionally, methods such as `call()` and `apply()` can change the object that
    `this` refers to, so it can refer to any object.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For humans, classes are hard because `this` always refers to different things,
    so sometimes (for example, in event handlers) we need to manually rebind it to
    the class object. For machines, classes are hard, because the machines do not
    know which methods in a class will be called, and how `this` will be modified,
    making it hard to optimize performance and remove unused code.
  prefs: []
  type: TYPE_NORMAL
- en: 'Furthermore, classes sometimes require us to write code in multiple places
    at once. For example, if we want to fetch data when the component renders, or
    the data updates, we need to do this using two methods: once in `componentDidMount`,
    and once in `componentDidUpdate`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'To give an example, let''s define a class component that fetches data from
    an **Application Programming Interface** (**API**):'
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we define our class component by extending the `React.Component` class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, we define the `componentDidMount` life cycle method, where we pull data
    from an API:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'However, we also need to define the `componentDidUpdate` life cycle method
    in case the `name` prop changes. Additionally, we need to add a manual check here,
    in order to ensure that we only re-fetch data if the `name` prop changed, and
    not when other props change:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'To make our code less repetitive, we could define a separate method called `fetchData`,
    in order to fetch our data, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, we could call the method in `componentDidMount` and `componentDidUpdate`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: However, even then we still need to call `fetchData` in two places. Whenever
    we update arguments that are passed to the method, we need to update them in two
    places, which makes this pattern very prone to errors and future bugs.
  prefs: []
  type: TYPE_NORMAL
- en: Wrapper hell
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Before Hooks, if we wanted to encapsulate state management logic, we had to
    use higher-order components and render props. For example, we create a React component
    that uses contexts to deal with user authentication as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: 'We start by importing the `authenticateUser` function in order to wrap our
    component with the context, and the `AuthenticationContext` component in order
    to access the context:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, we define our `App` component, where we make use of the `AuthenticationContext.Consumer`
    component and the `user` render prop:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, we display different texts depending on whether the user is logged in
    or not:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Here, we used two JavaScript concepts:'
  prefs: []
  type: TYPE_NORMAL
- en: 'A ternary operator, which is an inline version of the `if` conditional. It
    looks as follows: `ifThisIsTrue ? returnThis : otherwiseReturnThis`.'
  prefs:
  - PREF_UL
  - PREF_UL
  type: TYPE_NORMAL
- en: A template string, which can be used to insert variables into a string. It is
    defined with backticks ([PRE11]
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: </AuthenticationContext.Consumer>
  prefs: []
  type: TYPE_NORMAL
- en: )
  prefs: []
  type: TYPE_NORMAL
- en: export default authenticateUser(App)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: <AuthenticationContext.Consumer>
  prefs: []
  type: TYPE_NORMAL
- en: '{user => ('
  prefs: []
  type: TYPE_NORMAL
- en: <LanguageContext.Consumer>
  prefs: []
  type: TYPE_NORMAL
- en: '{language => ('
  prefs: []
  type: TYPE_NORMAL
- en: <StatusContext.Consumer>
  prefs: []
  type: TYPE_NORMAL
- en: '{status => ('
  prefs: []
  type: TYPE_NORMAL
- en: '...'
  prefs: []
  type: TYPE_NORMAL
- en: )}
  prefs: []
  type: TYPE_NORMAL
- en: </StatusContext.Consumer>
  prefs: []
  type: TYPE_NORMAL
- en: )}
  prefs: []
  type: TYPE_NORMAL
- en: </LanguageContext.Consumer>
  prefs: []
  type: TYPE_NORMAL
- en: )}
  prefs: []
  type: TYPE_NORMAL
- en: </AuthenticationContext.Consumer>
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: function Example ({ name }) {
  prefs: []
  type: TYPE_NORMAL
- en: useEffect(() => {
  prefs: []
  type: TYPE_NORMAL
- en: fetch(`http://my.api/${this.props.name}`)
  prefs: []
  type: TYPE_NORMAL
- en: .then(...)
  prefs: []
  type: TYPE_NORMAL
- en: '}, [ name ])'
  prefs: []
  type: TYPE_NORMAL
- en: // ...
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: const user = useContext(AuthenticationContext)
  prefs: []
  type: TYPE_NORMAL
- en: const language = useContext(LanguageContext)
  prefs: []
  type: TYPE_NORMAL
- en: const status = useContext(StatusContext)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: npx create-react-app <app-name>
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: npx create-react-app chapter1_1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: npm start
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: npm run-script build
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: npm install -g serve
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: serve -s build
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: npx create-react-app chapter1_1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: import React from 'react'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: class MyName extends React.Component {
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: constructor (props) {
  prefs: []
  type: TYPE_NORMAL
- en: super(props)
  prefs: []
  type: TYPE_NORMAL
- en: 'this.state = { name: '''' }'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: handleChange (evt) {
  prefs: []
  type: TYPE_NORMAL
- en: 'this.setState({ name: evt.target.value })'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: render () {
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: const { name } = this.state
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: const name = this.state.name
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: return (
  prefs: []
  type: TYPE_NORMAL
- en: <div>
  prefs: []
  type: TYPE_NORMAL
- en: '<h1>My name is: {name}</h1>'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: <input type="text" value={name} onChange={this.handleChange} />
  prefs: []
  type: TYPE_NORMAL
- en: </div>
  prefs: []
  type: TYPE_NORMAL
- en: )
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: export default MyName
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: constructor (props) {
  prefs: []
  type: TYPE_NORMAL
- en: super(props)
  prefs: []
  type: TYPE_NORMAL
- en: 'this.state = { name: '''' }'
  prefs: []
  type: TYPE_NORMAL
- en: this.handleChange = this.handleChange.bind(this)
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: npx create-react-app chapter1_2
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: import React, { useState } from 'react'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: function MyName () {
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: const [ name, setName ] = useState('')
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: const nameHook = useState('')
  prefs: []
  type: TYPE_NORMAL
- en: const name = nameHook[0]
  prefs: []
  type: TYPE_NORMAL
- en: const setName = nameHook[1]
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: function handleChange (evt) {
  prefs: []
  type: TYPE_NORMAL
- en: setName(evt.target.value)
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: return (
  prefs: []
  type: TYPE_NORMAL
- en: <div>
  prefs: []
  type: TYPE_NORMAL
- en: '<h1>My name is: {name}</h1>'
  prefs: []
  type: TYPE_NORMAL
- en: <input type="text" value={name} onChange={handleChange} />
  prefs: []
  type: TYPE_NORMAL
- en: </div>
  prefs: []
  type: TYPE_NORMAL
- en: )
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: export default MyName
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: import React from 'react'
  prefs: []
  type: TYPE_NORMAL
- en: class MyName extends React.Component {
  prefs: []
  type: TYPE_NORMAL
- en: constructor (props) {
  prefs: []
  type: TYPE_NORMAL
- en: super(props)
  prefs: []
  type: TYPE_NORMAL
- en: 'this.state = { name: '''' }'
  prefs: []
  type: TYPE_NORMAL
- en: this.handleChange = this.handleChange.bind(this)
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: handleChange (evt) {
  prefs: []
  type: TYPE_NORMAL
- en: 'this.setState({ name: evt.target.value })'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: render () {
  prefs: []
  type: TYPE_NORMAL
- en: const { name } = this.state
  prefs: []
  type: TYPE_NORMAL
- en: return (
  prefs: []
  type: TYPE_NORMAL
- en: <div>
  prefs: []
  type: TYPE_NORMAL
- en: '<h1>My name is: {name}</h1>'
  prefs: []
  type: TYPE_NORMAL
- en: <input type="text" value={name} onChange={this.handleChange} />
  prefs: []
  type: TYPE_NORMAL
- en: </div>
  prefs: []
  type: TYPE_NORMAL
- en: )
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: export default MyName
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: import React, { useState } from 'react'
  prefs: []
  type: TYPE_NORMAL
- en: function MyName () {
  prefs: []
  type: TYPE_NORMAL
- en: const [ name, setName ] = useState('')
  prefs: []
  type: TYPE_NORMAL
- en: function handleChange (evt) {
  prefs: []
  type: TYPE_NORMAL
- en: setName(evt.target.value)
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: return (
  prefs: []
  type: TYPE_NORMAL
- en: <div>
  prefs: []
  type: TYPE_NORMAL
- en: '<h1>My name is: {name}</h1>'
  prefs: []
  type: TYPE_NORMAL
- en: <input type="text" value={name} onChange={handleChange} />
  prefs: []
  type: TYPE_NORMAL
- en: </div>
  prefs: []
  type: TYPE_NORMAL
- en: )
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: export default MyName
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: import { useState } from 'react'
  prefs: []
  type: TYPE_NORMAL
- en: const [ state, setState ] = useState(initialState)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: import { useEffect } from 'react'
  prefs: []
  type: TYPE_NORMAL
- en: useEffect(didUpdate)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: import { useContext } from 'react'
  prefs: []
  type: TYPE_NORMAL
- en: const value = useContext(MyContext)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: import { useRef } from 'react'
  prefs: []
  type: TYPE_NORMAL
- en: const refContainer = useRef(initialValue)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: import { useReducer } from 'react'
  prefs: []
  type: TYPE_NORMAL
- en: const [ state, dispatch ] = useReducer(reducer, initialArg, init)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: import { useMemo } from 'react'
  prefs: []
  type: TYPE_NORMAL
- en: const memoizedValue = useMemo(() => computeExpensiveValue(a, b), [a, b])
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: import { useCallback } from 'react'
  prefs: []
  type: TYPE_NORMAL
- en: const memoizedCallback = useCallback(
  prefs: []
  type: TYPE_NORMAL
- en: () => {
  prefs: []
  type: TYPE_NORMAL
- en: doSomething(a, b)
  prefs: []
  type: TYPE_NORMAL
- en: '},'
  prefs: []
  type: TYPE_NORMAL
- en: '[a, b]'
  prefs: []
  type: TYPE_NORMAL
- en: )
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: import { useLayoutEffect } from 'react'
  prefs: []
  type: TYPE_NORMAL
- en: useLayoutEffect(didUpdate)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: import { useDebugValue } from 'react'
  prefs: []
  type: TYPE_NORMAL
- en: useDebugValue(value)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: import { useInput } from 'react-hookedup'
  prefs: []
  type: TYPE_NORMAL
- en: function App () {
  prefs: []
  type: TYPE_NORMAL
- en: const { value, onChange } = useInput('')
  prefs: []
  type: TYPE_NORMAL
- en: return <input value={value} onChange={onChange} />
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: import { useRequest } from 'react-request-hook'
  prefs: []
  type: TYPE_NORMAL
- en: const [profile, getProfile] = useResource(id => ({
  prefs: []
  type: TYPE_NORMAL
- en: 'url: `/user/${id}`,'
  prefs: []
  type: TYPE_NORMAL
- en: 'method: ''GET'''
  prefs: []
  type: TYPE_NORMAL
- en: '})'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: import { useCurrentRoute, useNavigation } from 'react-navi'
  prefs: []
  type: TYPE_NORMAL
- en: const { views, url, data, status } = useCurrentRoute()
  prefs: []
  type: TYPE_NORMAL
- en: const { navigate } = useNavigation()
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: import { useOnMount, useOnUnmount } from 'react-hookedup'
  prefs: []
  type: TYPE_NORMAL
- en: useOnMount(() => { ... })
  prefs: []
  type: TYPE_NORMAL
- en: useOnUnmount(() => { ... })
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: import { useInterval, useTimeout } from 'react-hookedup'
  prefs: []
  type: TYPE_NORMAL
- en: useInterval(() => { ... }, 1000)
  prefs: []
  type: TYPE_NORMAL
- en: useTimeout(() => { ... }, 1000)
  prefs: []
  type: TYPE_NORMAL
- en: '```'
  prefs: []
  type: TYPE_NORMAL
- en: As we can see, Hooks greatly simplify how we deal with intervals and timeouts
    in React.
  prefs: []
  type: TYPE_NORMAL
- en: Other community Hooks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'As you can imagine, there are many more Hooks that are provided by the community.
    We will learn about the previously mentioned community Hooks in depth, and various
    other community Hooks in [Chapter 8](67dd0114-4264-4be6-989a-0b1e1f78dcb7.xhtml):
    *Using Community Hooks*.'
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this first chapter of the book, we started out by learning the fundamental
    principles of React and which types of components it provides. We then moved on
    to learning about common problems with class components, and using existing features
    of React, and how they break the fundamental principles. Next, we implemented
    a simple application using class components and function components with Hooks,
    in order to be able to compare the differences between the two solutions. As we
    found out, function components with Hooks are a much better fit for React's fundamental
    principles, as they do not suffer from the same problems as class components,
    and they make our code much more
  prefs: []
  type: TYPE_NORMAL
- en: concise and easy to understand! Finally, we got our first glimpse of the various
    Hooks that we are going to learn about throughout this book. After this chapter,
    the basics of React and React Hooks are clear. We can now move on to more advanced
    concepts of Hooks.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we are going to gain an in-depth knowledge of how the State
    Hook works, by reimplementing it from scratch. By doing so, we are going to get
    a grasp on how Hooks work internally, and what their limitations are. Afterward,
    we are going to create a small blog application using the State Hook!
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To recap what we have learned in this chapter, try answering the following
    questions:'
  prefs: []
  type: TYPE_NORMAL
- en: What are React's three fundamental principles?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What are the two types of components in React?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What are the problems with class components in React?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What is the problem of using higher-order components in React?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Which tool can we use to set up a React project, and what is the command that
    we need to run to use it?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'What do we need to do if we get the following error with class components: *TypeError:
    undefined is not an object (evaluating ''this.setState'')*?'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How do we access and set React state using Hooks?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What are the advantages of using function components with Hooks, in comparison
    to class components?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Do we need to replace all class components with function components using Hooks
    when updating React?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What are the three basic Hooks that are provided by React?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'If you are interested in more information about the concepts that we have learned
    in this chapter, take a look at the following reading material:'
  prefs: []
  type: TYPE_NORMAL
- en: Create React App on GitHub: [https://github.com/facebook/create-react-app#create-react-app--](https://github.com/facebook/create-react-app#create-react-app--)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: RFC for React Hooks: [https://github.com/reactjs/rfcs/blob/master/text/0068-react-hooks.md](https://github.com/reactjs/rfcs/blob/master/text/0068-react-hooks.md)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Handling input with React: [https://reactjs.org/docs/forms.html](https://reactjs.org/docs/forms.html)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: State and life cycle in React with class components: [https://reactjs.org/docs/state-and-lifecycle.html](https://reactjs.org/docs/state-and-lifecycle.html)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Destructuring: [http://exploringjs.com/es6/ch_destructuring.html](http://exploringjs.com/es6/ch_destructuring.html)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Template strings: [https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ternary operator: [https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Conditional_Operator](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Conditional_Operator)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
