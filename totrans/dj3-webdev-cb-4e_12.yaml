- en: Deployment
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following recipes:'
  prefs: []
  type: TYPE_NORMAL
- en: Releasing a reusable Django app
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Deploying on Apache with mod_wsgi for the staging environment
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Deploying on Apache with mod_wsgi for the production environment
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Deploying on Nginx and Gunicorn for the staging environment
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Deploying on Nginx and Gunicorn for the production environment
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Once you have a working website or reusable app, you will want to make it public.
    Deploying websites is one of the most difficult activities of development with
    Django, because there are lots of moving parts that you have to tackle:'
  prefs: []
  type: TYPE_NORMAL
- en: Managing the web server
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Configuring the database
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Serving static and media files
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Processing the Django project
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Configuring caching
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting up email sending
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Managing domains
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Arranging background tasks and cron jobs
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting up continuous integration
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Other tasks, depending on your project's scale and complexity
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In bigger teams, all those tasks are done by DevOps engineers and they require
    skills like deeply understanding networking and computer architecture, administering
    Linux servers, bash scripting, using vim, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: Professional websites usually have **development**, **staging**, and **production** environments.
    Each of them has a specific purpose. Development environments are used for creating
    the project. The production environment is the server (or servers) on which your
    public website is hosted. The staging environment is a system technically analogous
    to production, but is used to check the new features and optimizations before
    publishing them.
  prefs: []
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: For working with the code of this chapter, you will need the latest stable version
    of Python, MySQL, or PostgreSQL, and a Django project with a virtual environment.
  prefs: []
  type: TYPE_NORMAL
- en: You can find all the code for this chapter at the `ch12` directory of the GitHub
    repository, at [https://github.com/PacktPublishing/Django-3-Web-Development-Cookbook-Fourth-Edition](https://github.com/PacktPublishing/Django-3-Web-Development-Cookbook-Fourth-Edition).
  prefs: []
  type: TYPE_NORMAL
- en: Releasing a reusable Django app
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Django documentation has a tutorial on how to package your reusable apps
    so that they can be installed later, with pip, in any virtual environment. This
    can be viewed at [https://docs.djangoproject.com/en/3.0/intro/reusable-apps/](https://docs.djangoproject.com/en/3.0/intro/reusable-apps/)​.
  prefs: []
  type: TYPE_NORMAL
- en: However, there is another (and arguably better) way to package and release a
    reusable Django app, using the tool, which creates templates for different coding
    projects, such as the new Django CMS website, the Flask website, or the jQuery
    plugin. One of the available project templates is `cookiecutter-djangopackage`.
    In this recipe, you will learn how to use it to distribute the reusable `likes` app.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Create a new project with a virtual environment and install `cookiecutter`
    there, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To release your `likes` app, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Start a new Django app project, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Or, since this is a GitHub-hosted `cookiecutter` template, we can use a shorthand
    syntax, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Answer the questions to create the app template, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'This will create a basic file structure for the releasable Django package,
    similar to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Copy the files of the `likes` app from the Django project where you are using
    it to the `django-likes/likes` directory. In cases where `cookiecutter` created
    the same files, the content will need to be merged, rather than overwritten. For
    instance, the `likes/__init__.py` file will need to contain a version string to
    work properly with `setup.py` in later steps, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Rework dependencies so that there are no imports from the Django project and
    all the used functions and classes are inside of this app. For example, in the `likes` app,
    we have a dependency upon some mixins in the `core` app. We'll need to copy the
    related code directly into the files in the `django-likes` app.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Alternatively, if there is a lot of dependent code, we can release the `core` app
    as an uncoupled package, but then we have to maintain it separately.
  prefs: []
  type: TYPE_NORMAL
- en: Add the reusable app project to the Git repository in GitHub, using the `repo_name` that
    was entered previously.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Explore the different files and complete the license, `README`, documentation,
    configuration, and other files.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Make sure that the app passes the `cookiecutter` template tests:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'If your package is closed source, create a shareable release as a ZIP archive,
    as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'This will create a `django-likes/dist/django-likes-0.1.0.tar.gz` file that
    can then be installed or uninstalled into a virtual environment of any project
    with `pip`, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'If your package is open source, you can register and publish your app to the
    Python Package Index (PyPI):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Also, to spread the word, add your app to the Django packages by submitting
    a form at [https://www.djangopackages.com/packages/add/](https://www.djangopackages.com/packages/add/).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Cookiecutter** fills in the requested data in different parts of the Django
    app project template, using the defaults given in [square brackets] if you simply
    press *Enter* without entering anything. As a result, you get the `setup.py` file
    ready for distribution to the Python Package Index, Sphinx documentation, MIT
    as the default license, the universal text editor configuration for the project,
    static files and templates included in your app, and other goodies.'
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The *Creating a project file structure* recipe in [Chapter 1](87d1a2a0-31bb-4c77-ab38-98b738f55fa1.xhtml)*,
    Getting Started with Django 3.0*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Working with Docker containers for Django, Gunicorn, Nginx, and PostgreSQL* recipe
    in [Chapter 1](87d1a2a0-31bb-4c77-ab38-98b738f55fa1.xhtml)*, Getting Started with
    Django 3.0*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Handling project dependencies with pip* recipe in [Chapter 1](87d1a2a0-31bb-4c77-ab38-98b738f55fa1.xhtml)*,
    Getting Started with Django 3.0*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Implementing the Like widget* recipe in [Chapter 4](707758de-0bea-479d-8e79-3e4de6c956d5.xhtml)*,
    Templates and JavaScript*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Testing views with mock* recipe in [Chapter 11](f22676ec-495d-430d-a535-06a7c9001e61.xhtml)*,
    Testing*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Deploying on Apache with mod_wsgi for the staging environment
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, I will show you how to create a script for deploying your project
    to a staging environment on a virtual machine on your computer. The project will
    be using the **Apache** web server with the **mod_wsgi** module. For the installation,
    we are going to use **Ansible**, **Vagrant**, and **VirtualBox**. As mentioned
    before, there are lots of details to take care of and usually, several days are
    necessary to develop an optimal deployment script similar to this.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Go through the deployment checklist and make sure that your configuration passes
    all security recommendations, as listed at [https://docs.djangoproject.com/en/3.0/howto/deployment/checklist/](https://docs.djangoproject.com/en/3.0/howto/deployment/checklist/).
    At least make sure that your project configuration doesn''t raise warnings when
    you run the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Install the latest stable versions of Ansible, Vagrant, and VirtualBox. You
    can get them from the following official websites:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Ansible**: [https://docs.ansible.com/ansible/latest/installation_guide/intro_installation.html](https://docs.ansible.com/ansible/latest/installation_guide/intro_installation.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**VirtualBox**: [https://www.virtualbox.org/wiki/Downloads](https://www.virtualbox.org/wiki/Downloads)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Vagrant**: [https://www.vagrantup.com/downloads.html](https://www.vagrantup.com/downloads.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'On macOS X, you can install all of them with **HomeBrew**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'First of all, we''ll need to create some configuration templates for different
    services used on the server. Both staging and production deployment procedures
    will be using them:'
  prefs: []
  type: TYPE_NORMAL
- en: In your Django project, create a `deployment` directory and, inside of it, create
    an `ansible_templates` directory.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a Jinja template file for time zone configuration:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a Jinja template file for Apache domain configuration before setting
    up the SSL certificates:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Create a Jinja template file `deployment/ansible_templates/apache_site.conf.j2`
    for Apache domain configuration also including SSL certificates. For this file,
    copy the content from [https://raw.githubusercontent.com/PacktPublishing/Django-3-Web-Development-Cookbook-Fourth-Edition/master/ch12/myproject_virtualenv/src/django-myproject/deployment-apache/ansible_templates/apache_site.conf.j2](https://raw.githubusercontent.com/PacktPublishing/Django-3-Web-Development-Cookbook-Fourth-Edition/master/ch12/myproject_virtualenv/src/django-myproject/deployment-apache/ansible_templates/apache_site.conf.j2)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a template for the PostgreSQL configuration file `deployment/ansible_templates/postgresql.j2`
    with content from [https://github.com/postgres/postgres/blob/REL_10_STABLE/src/backend/utils/misc/postgresql.conf.sample](https://github.com/postgres/postgres/blob/REL_10_STABLE/src/backend/utils/misc/postgresql.conf.sample).
    Later you can tweak the configuration there to match your server needs.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a template for the PostgreSQL permissions configuration file (currently,
    it is very permissive, but you can tweak it later according to your needs):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a template for the Postfix email server configuration:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a template for the email forwarding configuration:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a template for the `memcached` configuration:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, create a Jinja template for the `secrets.json` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, let''s work on the Vagrant and Ansible scripts specific to the staging
    environment:'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the `.gitignore` file, add lines to ignore some Vagrant- and Ansible-specific
    files:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: Create two directories, `deployment/staging` and `deployment/staging/ansible`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a `Vagrantfile` file there with the following script to set up a virtual
    machine with Ubuntu 18 and run the Ansible script in it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a `hosts` directory containing a `vagrant` file with the following content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a `vars.yml` file there with the variables that will be used in the
    installation scripts and Jinja templates for configurations:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'Also, we''ll need a `secrets.yml` file with secret values including passwords
    and authentication keys. First, create a `sample_secrets.yml` file that will have
    no sensitive information, but only the variable names, and then copy it to `secrets.yml` and
    fill in the secrets. The former file will be under version control, whereas the
    latter will be ignored:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: Now create an Ansible script (a so-called *playbook*) at `deployment/staging/ansible/setup.yml`
    for installing all the dependencies and configuring services. Copy the content
    for this file from [https://raw.githubusercontent.com/PacktPublishing/Django-3-Web-Development-Cookbook-Fourth-Edition/master/ch12/myproject_virtualenv/src/django-myproject/deployment-apache/staging/ansible/setup.yml](https://raw.githubusercontent.com/PacktPublishing/Django-3-Web-Development-Cookbook-Fourth-Edition/master/ch12/myproject_virtualenv/src/django-myproject/deployment-apache/staging/ansible/setup.yml).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Then create another Ansible script at `deployment/staging/ansible/deploy.yml`
    for dealing with the Django project. Copy the content for this file from [https://raw.githubusercontent.com/PacktPublishing/Django-3-Web-Development-Cookbook-Fourth-Edition/master/ch12/myproject_virtualenv/src/django-myproject/deployment-apache/staging/ansible/deploy.yml](https://raw.githubusercontent.com/PacktPublishing/Django-3-Web-Development-Cookbook-Fourth-Edition/master/ch12/myproject_virtualenv/src/django-myproject/deployment-apache/staging/ansible/deploy.yml).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'And create a bash script that you can execute to start the deployment:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'Add execution permissions for the bash script and run it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'If the script fails with errors, it''s likely that the virtual machine needs
    to be rebooted for the changes to take effect. You can do that by connecting to
    the virtual machine via `ssh`, changing to the root user, and then rebooting as
    follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'To browse the Django project directories, `ssh` to the virtual machine and
    change the user to `myproject` as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: VirtualBox allows you to have multiple virtual machines on your computer with
    different operating systems. Vagrant is a tool allowing you to create those virtual
    machines and to download and install operating systems on them using a script.
    Ansible is a Python-based utility that reads instructions from a `.yaml` configuration
    file and executes them on a remote server.
  prefs: []
  type: TYPE_NORMAL
- en: 'The deployment scripts we have just written do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a virtual machine in VirtualBox and install Ubuntu 18 there
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Assign the IP of `192.168.50.5` to the virtual machine
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Set a hostname for the virtual machine
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Upgrade the Linux packages
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Set the localization settings for the server
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Install all Linux dependencies, including Python, Apache, PostgreSQL, Postfix,
    Memcached, and so on
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Create a Linux user and `home` directory for the Django project
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Create a virtual environment for the Django project
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Create the PostgreSQL database user and database
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Configure the Apache web server
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Install a self-signed SSL certificate
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Configure the Memcached caching service
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Configure the Postfix email server
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Clone the Django project repository
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Install Python dependencies
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Create the `secrets.json` file
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Migrate the database
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Collect static files
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Restart Apache
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Now the Django website will be accessible at `https://www.myproject.192.168.50.5.xip.io` and
    will show you a Hello, World! page. Note that some browsers, such as Chrome, might
    not want to open a website with a self-signed SSL certificate and will block it
    as a security measure.
  prefs: []
  type: TYPE_NORMAL
- en: xip.io is a wildcard DNS service that points IP-specific subdomains to the IP
    and allows you to use that for SSL certificates or other website features that
    require a domain.
  prefs: []
  type: TYPE_NORMAL
- en: If you want to experiment with different configurations or additional commands,
    it is reasonable to do the changes incrementally in small steps. For some parts,
    you will need to test things out directly on the virtual machine before converting
    the tasks to Ansible instructions.
  prefs: []
  type: TYPE_NORMAL
- en: For information how to use Ansible, check the official documentation at [https://docs.ansible.com/ansible/latest/index.html](https://docs.ansible.com/ansible/latest/index.html).
    It shows lots of useful instruction examples for most use cases.
  prefs: []
  type: TYPE_NORMAL
- en: If you get any errors with any service, `ssh` to the virtual machine, switch
    to the root user, and inspect the logs of that service. Googling the error messages
    will get you closer to a working system.
  prefs: []
  type: TYPE_NORMAL
- en: 'To rebuild the virtual machine, use the following commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The *Creating a virtual environment project file structure* recipe in [Chapter
    1](87d1a2a0-31bb-4c77-ab38-98b738f55fa1.xhtml)*, Getting Started with Django 3.0*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Handling project dependencies with pip* recipe in [Chapter 1](87d1a2a0-31bb-4c77-ab38-98b738f55fa1.xhtml)*,
    Getting Started with Django 3.0*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Setting up STATIC_URL dynamically for Git users* recipe in[Chapter 1](87d1a2a0-31bb-4c77-ab38-98b738f55fa1.xhtml)**,
    Getting Started with Django 3.0**
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Deploying on Apache with mod_wsgi for the production environment* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Deploying on Nginx and Gunicorn for the staging environment* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Deploying on Nginx and Gunicorn for the production environment* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Creating and restoring PostgreSQL database backups* recipe in [Chapter
    13](498be2b9-4d46-4b50-ab7a-27c535792ae6.xhtml)*, Maintenance*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Setting up cron jobs for regular tasks* recipe in [Chapter 13](498be2b9-4d46-4b50-ab7a-27c535792ae6.xhtml)*,
    Maintenance*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Deploying on Apache with mod_wsgi for the production environment
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Apache is one of the most popular web servers. It makes sense to deploy your
    Django project under Apache if you also have to run some services for server management,
    monitoring, analytics, blogging, e-commerce, and so on that require Apache on
    the same server.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we will continue working from the previous recipe and will implement
    an Ansible script (a *playbook*) to set up a production environment on **Apache** with
    the **mod_wsgi** module.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Make sure that your project configuration doesn''t raise warnings when you
    run the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: Make sure you have the latest stable version of Ansible.
  prefs: []
  type: TYPE_NORMAL
- en: Choose a server provider and create a dedicated server there with root access
    via SSH with private and public key authentication. My provider of choice is DigitalOcean
    ([https://www.digitalocean.com/](https://www.digitalocean.com/)), with which I
    created a dedicated server (Droplet) with Ubuntu 18\. I can connect to the server
    by its IP, `142.93.167.30`, using a new SSH private and public key-pair, `~/.ssh/id_rsa_django_cookbook` and `~/.ssh/id_rsa_django_cookbook.pub`
    respectively.
  prefs: []
  type: TYPE_NORMAL
- en: 'Locally, we need to configure SSH connections by creating or modifying the
    `~/.ssh/config` file with the following content:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, we should be able to connect to the dedicated server as the root user
    via SSH using this command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: In your domain configuration, point the **DNS A record** of your domain to the
    IP address of the dedicated server. In our case, we will just be using `myproject.142.93.167.30.xip.io` to
    show how to set up the server with an SSL certificate for the Django website.
  prefs: []
  type: TYPE_NORMAL
- en: As mentioned before, xip.io is a wildcard DNS service that points IP-specific
    subdomains to the IP and allows you to use that for SSL certificates or other
    website features that require a domain.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To create a deployment script for production, perform these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Make sure to have the `deployment/ansible_templates` directory with the Jinja
    templates for service configuration that we created in the previous *Deploying
    on Apache with mod_wsgi for the staging environment* recipe.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create the `deployment/production` and `deployment/production/ansible` directories
    for the Ansible scripts.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'There, create a `hosts` directory with a `remote` file containing the following
    content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a `vars.yml` file there with the variables that will be used in the
    installation scripts and Jinja templates for configurations:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'Also, we''ll need a `secrets.yml` file with secret values including passwords
    and authentication keys. First, create a `sample_secrets.yml` file that will have
    no sensitive information, but only the variable names, and then copy it to `secrets.yml` and
    fill in the secrets. The former file will be under version control whereas the
    latter will be ignored:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: Now create an Ansible script (a *playbook*) at `deployment/production/ansible/setup.yml` for
    installing all the dependencies and configuring services. Copy the content for
    this file from [https://raw.githubusercontent.com/PacktPublishing/Django-3-Web-Development-Cookbook-Fourth-Edition/master/ch12/myproject_virtualenv/src/django-myproject/deployment-apache/production/ansible/setup.yml](https://raw.githubusercontent.com/PacktPublishing/Django-3-Web-Development-Cookbook-Fourth-Edition/master/ch12/myproject_virtualenv/src/django-myproject/deployment-apache/production/ansible/setup.yml).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Then create another Ansible script, `deployment/production/ansible/deploy.yml`, for
    dealing with the Django project. Copy the content for this file from [https://raw.githubusercontent.com/PacktPublishing/Django-3-Web-Development-Cookbook-Fourth-Edition/master/ch12/myproject_virtualenv/src/django-myproject/deployment-apache/production/ansible/deploy.yml](https://raw.githubusercontent.com/PacktPublishing/Django-3-Web-Development-Cookbook-Fourth-Edition/master/ch12/myproject_virtualenv/src/django-myproject/deployment-apache/production/ansible/deploy.yml).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a bash script that you can execute to start the deployment:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: 'Add execution permissions for the bash script and run it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: 'If the script fails with errors, it''s likely that the dedicated server needs
    to be rebooted for the changes to take effect. You can do that by connecting to
    the server via `ssh` and rebooting as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: 'Create another bash script just for updating the Django project:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: 'Add execution permissions for this bash script:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'An Ansible script (a *playbook*) is idempotent. It means that you can execute
    it multiple times and you will always get the same result: an up-to-date dedicated
    server with a Django website installed and running. If you have any technical
    hardware issues with the server and have backups of the database and media files,
    you can relatively quickly install the same configuration on another dedicated
    server.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The production deployment scripts do these things:'
  prefs: []
  type: TYPE_NORMAL
- en: Set a hostname for the virtual machine
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Upgrade the Linux packages
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Set the localization settings for the server
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Install all Linux dependencies including Python, Apache, PostgreSQL, Postfix,
    Memcached, and so on
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Create a Linux user and `home` directory for the Django project
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Create a virtual environment for the Django project
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Create the PostgreSQL database user and database
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Configure the Apache web server
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Install the *Let's Encrypt* SSL certificate
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Configure the Memcached caching service
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Configure the Postfix email server
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Clone the Django project repository
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Install Python dependencies
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Create the `secrets.json` file
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Migrate the database
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Collect static files
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Restart Apache
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Run the `setup_remotely.sh` script when you need to install the services and
    dependencies for the first time. Later, you can use `deploy_remotely.sh` if you
    need to update just the Django project. As you can see, the installation is very
    similar to the one on the staging server, but, to keep it flexible and more tweakable,
    we saved it separately in the `deployment/production` directory.
  prefs: []
  type: TYPE_NORMAL
- en: Theoretically, you could skip the staging environment altogether, but it is
    more practical to try out the deployment procedure in a virtual machine at first
    rather than experimenting with installing directly on a remote server.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The *Creating a virtual environment project file structure* recipe in [Chapter
    1](87d1a2a0-31bb-4c77-ab38-98b738f55fa1.xhtml)*, Getting Started with Django 3.0*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Handling project dependencies with pip* recipe in [Chapter 1](87d1a2a0-31bb-4c77-ab38-98b738f55fa1.xhtml)*,
    Getting Started with Django 3.0*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Setting up STATIC_URL dynamically for Git users* recipe in[Chapter 1](87d1a2a0-31bb-4c77-ab38-98b738f55fa1.xhtml)*,
    Getting Started with Django 3.0*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Deploying on Apache with mod_wsgi for the staging environment* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Deploying on Nginx and Gunicorn for the staging environment* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Deploying on Nginx and Gunicorn for the production environment* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Creating and restoring PostgreSQL database backups* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Setting up cron jobs for regular tasks* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Deploying on Nginx and Gunicorn for the staging environment
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Apache with mod_wsgi is a good and stable approach for deployment, but when
    you need high performance, it is recommended to use **Nginx** with **Gunicorn** to
    serve your Django website. Gunicorn is a Python server running WSGI scripts. Nginx
    is a web server that parses domain configurations and passes requests to Gunicorn.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, I will show you how to create a script for deploying your project
    to a staging environment on a virtual machine on your computer. To do this, we
    are going to use **Ansible**, **Vagrant**, and **VirtualBox**. As mentioned before,
    there are lots of details to bear in mind and several days are usually necessary
    to develop an optimal deployment script similar to this.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Go through the deployment checklist and make sure that your configuration passes
    all security recommendations at [https://docs.djangoproject.com/en/3.0/howto/deployment/checklist/](https://docs.djangoproject.com/en/3.0/howto/deployment/checklist/).
    At least make sure that your project configuration doesn''t raise warnings when
    you run the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: 'Install the latest stable versions of Ansible, Vagrant, and VirtualBox. You
    can get them from the following official websites:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Ansible**: [https://docs.ansible.com/ansible/latest/installation_guide/intro_installation.html](https://docs.ansible.com/ansible/latest/installation_guide/intro_installation.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**VirtualBox**: [https://www.virtualbox.org/wiki/Downloads](https://www.virtualbox.org/wiki/Downloads)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Vagrant**: [https://www.vagrantup.com/downloads.html](https://www.vagrantup.com/downloads.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'On macOS X you can install all of them with **HomeBrew**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'First of all, we''ll need to create some configuration templates for the different
    services used on the server. These will be used by both deployment procedures:
    staging and production.'
  prefs: []
  type: TYPE_NORMAL
- en: In your Django project, create a `deployment` directory and inside of it create
    an `ansible_templates` directory.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a Jinja template file for time zone configuration:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a Jinja template file for Nginx domain configuration before setting
    the SSL certificates:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: Create a Jinja template file at `deployment/ansible_templates/nginx.j2` for
    our Nginx domain configuration, including the SSL certificates. For this file,
    copy the content from [https://raw.githubusercontent.com/PacktPublishing/Django-3-Web-Development-Cookbook-Fourth-Edition/master/ch12/myproject_virtualenv/src/django-myproject/deployment-nginx/ansible_templates/nginx.j2](https://raw.githubusercontent.com/PacktPublishing/Django-3-Web-Development-Cookbook-Fourth-Edition/master/ch12/myproject_virtualenv/src/django-myproject/deployment-nginx/ansible_templates/nginx.j2).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a template for the Gunicorn service configuration:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: Create a template for the PostgreSQL configuration file at `deployment/ansible_templates/postgresql.j2` with
    content from [https://github.com/postgres/postgres/blob/REL_10_STABLE/src/backend/utils/misc/postgresql.conf.sample](https://github.com/postgres/postgres/blob/REL_10_STABLE/src/backend/utils/misc/postgresql.conf.sample).
    Later you can tweak the configuration in this file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a template for the PostgreSQL permissions configuration file (currently,
    it is very permissive, but you can tweak it later according to your needs):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a template for the Postfix email server configuration:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a template for the email forwarding configuration:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a template for the `memcached` configuration:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, create a Jinja template for the `secrets.json` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: 'Now let''s work on the Vagrant and Ansible scripts specific to the staging
    environment:'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the `.gitignore` file, add the following lines to ignore some Vagrant- and
    Ansible-specific files:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: Create the `deployment/staging` and `deployment/staging/ansible` directories.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the `deployment/staging/ansible` directory, create a `Vagrantfile` file
    with the following script to set up a virtual machine with Ubuntu 18 and run the
    Ansible script in it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a `hosts` directory with a `vagrant` file containing the following content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a `vars.yml` file there with the variables that will be used in the
    installation scripts and Jinja templates for configurations:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: 'We''ll also need a `secrets.yml` file containing secret values, such as passwords
    and authentication keys. First, create a `sample_secrets.yml` file that will have
    no sensitive information, but only the variable names, and then copy it to `secrets.yml` and
    fill in the secrets. The former file will be under version control whereas the
    latter will be ignored:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: Now create an Ansible script (a *playbook*) at `deployment/staging/ansible/setup.yml` for
    installing all the dependencies and configuring services. Copy the content for
    this file from [https://raw.githubusercontent.com/PacktPublishing/Django-3-Web-Development-Cookbook-Fourth-Edition/master/ch12/myproject_virtualenv/src/django-myproject/deployment-nginx/staging/ansible/setup.yml](https://raw.githubusercontent.com/PacktPublishing/Django-3-Web-Development-Cookbook-Fourth-Edition/master/ch12/myproject_virtualenv/src/django-myproject/deployment-nginx/staging/ansible/setup.yml).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Then create another Ansible script at `deployment/staging/ansible/deploy.yml` for
    dealing with the Django project. Copy the content for this file from [https://raw.githubusercontent.com/PacktPublishing/Django-3-Web-Development-Cookbook-Fourth-Edition/master/ch12/myproject_virtualenv/src/django-myproject/deployment-nginx/staging/ansible/deploy.yml](https://raw.githubusercontent.com/PacktPublishing/Django-3-Web-Development-Cookbook-Fourth-Edition/master/ch12/myproject_virtualenv/src/django-myproject/deployment-nginx/staging/ansible/deploy.yml).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'And create a bash script that you can execute to start the deployment:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: 'Add execution permissions for the bash script and run it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: 'If the script fails with errors, it''s likely that the virtual machine needs
    to be rebooted for the changes to take effect. You can do that by connecting to
    the virtual machine via `ssh`, changing to the root user, and then rebooting as
    follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: 'To browse the Django project directories, `ssh` to the virtual machine and
    change the user to `myproject` as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: VirtualBox allows you to have multiple virtual machines on your computer with
    different operating systems. Vagrant is a tool that creates those virtual machines
    and lets you download and install operating systems on them. Ansible is a Python-based
    utility that reads instructions from a `.yaml` configuration file and executes
    them on a remote server.
  prefs: []
  type: TYPE_NORMAL
- en: 'The deployment scripts we have just written do these things:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a virtual machine in a VirtualBox and installs Ubuntu 18 there
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Assign an IP of `192.168.50.5` to the virtual machine
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Set a hostname for the virtual machine
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Upgrade the Linux packages
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Set localization settings for the server
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Install all Linux dependencies, including Python, Nginx, PostgreSQL, Postfix,
    Memcached, and so on
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Create a Linux user and `home` directory for the Django project
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Create a virtual environment for the Django project
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Create the PostgreSQL database user and database
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Configure the Nginx web server
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Install the self-signed SSL certificate
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Configure the Memcached caching service
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Configure the Postfix email server
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Clone the Django project repository
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Install Python dependencies
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Set up Gunicorn
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Create the `secrets.json` file
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Migrate the database
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Collect static files
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Restart Nginx
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Now the Django website will be accessible at `https://www.myproject.192.168.50.5.xip.io` and
    will show you a Hello, World! page. Note that some browsers including Chrome might
    not want to open a website with a self-signed SSL certificate and will block it
    as a security measure.
  prefs: []
  type: TYPE_NORMAL
- en: xip.io is a wildcard DNS service that points IP-specific subdomains to the IP
    and allows you to use that for SSL certificates or other website features that
    require a domain.
  prefs: []
  type: TYPE_NORMAL
- en: If you want to experiment with different configurations or additional commands,
    it is reasonable to do the changes incrementally in small steps. For some parts,
    you will need to test things out directly on the virtual machine before converting
    the tasks to Ansible instructions.
  prefs: []
  type: TYPE_NORMAL
- en: For information about how to use Ansible, check the official documentation at [https://docs.ansible.com/ansible/latest/index.html](https://docs.ansible.com/ansible/latest/index.html).
    It shows lots of useful instruction examples for most use cases.
  prefs: []
  type: TYPE_NORMAL
- en: If you get any errors with any service, `ssh` to the virtual machine, switch
    to the root user, and inspect the logs of that service. Googling the error messages
    will get you closer to a working system.
  prefs: []
  type: TYPE_NORMAL
- en: 'To rebuild the virtual machine, use the following commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The *Creating a virtual environment project file structure* recipe in [Chapter
    1](87d1a2a0-31bb-4c77-ab38-98b738f55fa1.xhtml)*, Getting Started with Django 3.0*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Handling project dependencies with pip* recipe in[Chapter 1](87d1a2a0-31bb-4c77-ab38-98b738f55fa1.xhtml)*,
    Getting Started with Django 3.0*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Setting up STATIC_URL dynamically for Git users* recipe in [Chapter 1](87d1a2a0-31bb-4c77-ab38-98b738f55fa1.xhtml)**,
    Getting Started with Django 3.0**
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Deploying on Apache with mod_wsgi for the staging environment* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Deploying on Apache with mod_wsgi for the production environment* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Deploying on Nginx and Gunicorn for the production environment* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Creating and restoring PostgreSQL database backups* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Setting up cron jobs for regular tasks* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Deploying on Nginx and Gunicorn for the production environment
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will continue working from the previous recipe and will implement
    an **Ansible** script (playbook) to set up a production environment with **Nginx** and **Gunicorn**.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Check that your project configuration doesn''t raise warnings when you run
    the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs: []
  type: TYPE_PRE
- en: Make sure to have the latest stable version of Ansible.
  prefs: []
  type: TYPE_NORMAL
- en: Choose a server provider and create a dedicated server there with root access
    via `ssh` by private and public key authentication. My provider of choice is DigitalOcean
    ([https://www.digitalocean.com/](https://www.digitalocean.com/)). At DigitalOcean
    control panel, I created a dedicated server (Droplet) with Ubuntu 18\. I can connect
    to the server by its IP of `46.101.136.102` using a new SSH private and public
    key pair, `~/.ssh/id_rsa_django_cookbook` and `~/.ssh/id_rsa_django_cookbook.pub`
    respectively.
  prefs: []
  type: TYPE_NORMAL
- en: 'Locally, we need to configure SSH connections by creating or modifying a `~/.ssh/config` file with
    the following content:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs: []
  type: TYPE_PRE
- en: 'Now we should be able to connect to the dedicated server as the root user via
    `ssh` using this command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs: []
  type: TYPE_PRE
- en: In your domain configuration, point the **DNS A record** of your domain to the
    IP address of the dedicated server. In our case, we will just be using `myproject.46.101.136.102.xip.io` to
    show how to set up the server with an SSL certificate for the Django website.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To create a deployment script for production, perform these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Make sure to have a `deployment/ansible_templates` directory with the Jinja
    templates for service configuration that we created in the previous *Deploying
    on Nginx with Gunicorn for the staging environment* recipe.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create the `deployment/production` and `deployment/production/ansible` directories
    for the Ansible scripts.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a `hosts` directory with a `remote` file containing the following content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE63]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a `vars.yml` file there with the variables that will be used in the
    installation scripts and Jinja templates for configurations:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE64]'
  prefs: []
  type: TYPE_PRE
- en: 'We''ll also need a `secrets.yml` file with secret values such as passwords
    and authentication keys. First, create a `sample_secrets.yml` file that will have
    no sensitive information, but only the variable names, and then copy it to `secrets.yml` and
    fill in the secrets. The former file will be under version control, whereas the
    latter will be ignored:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE65]'
  prefs: []
  type: TYPE_PRE
- en: Now create an Ansible script (a *playbook*) at `deployment/production/ansible/setup.yml` for
    installing all the dependencies and configuring services. Copy the contents for
    this file from [https://raw.githubusercontent.com/PacktPublishing/Django-3-Web-Development-Cookbook-Fourth-Edition/master/ch12/myproject_virtualenv/src/django-myproject/deployment-nginx/production/ansible/setup.yml](https://raw.githubusercontent.com/PacktPublishing/Django-3-Web-Development-Cookbook-Fourth-Edition/master/ch12/myproject_virtualenv/src/django-myproject/deployment-nginx/production/ansible/setup.yml).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Then create another Ansible script at `deployment/production/ansible/deploy.yml` for
    dealing with the Django project. Copy the contents for this file from [https://raw.githubusercontent.com/PacktPublishing/Django-3-Web-Development-Cookbook-Fourth-Edition/master/ch12/myproject_virtualenv/src/django-myproject/deployment-nginx/production/ansible/deploy.yml](https://raw.githubusercontent.com/PacktPublishing/Django-3-Web-Development-Cookbook-Fourth-Edition/master/ch12/myproject_virtualenv/src/django-myproject/deployment-nginx/production/ansible/deploy.yml).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a bash script that you can execute to start the deployment:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE66]'
  prefs: []
  type: TYPE_PRE
- en: 'Add execution permissions for the bash script and run it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE67]'
  prefs: []
  type: TYPE_PRE
- en: 'If the script fails with errors, it''s likely that the dedicated server needs
    to be rebooted for the changes to take effect. You can do that by connecting to
    the server via `ssh` and rebooting as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE68]'
  prefs: []
  type: TYPE_PRE
- en: 'Create another bash script just for updating the Django project:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE69]'
  prefs: []
  type: TYPE_PRE
- en: 'Add execution permissions for the bash script:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE70]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: An Ansible script (a *playbook*) is idempotent. It means that you can execute
    it multiple times and you will always get the same results, an up-to-date dedicated
    server with Django website installed and running. If you have any technical hardware
    issues with the server and have backups of the database and media files, you can
    relatively quickly install the same configuration on another dedicated server.
  prefs: []
  type: TYPE_NORMAL
- en: 'The production deployment scripts do these things:'
  prefs: []
  type: TYPE_NORMAL
- en: Set a hostname for the virtual machine
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Upgrade the Linux packages
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Set the localization settings for the server
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Install all Linux dependencies such as Python, Nginx, PostgreSQL, Postfix, Memcached,
    and so on
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Create a Linux user and `home` directory for the Django projec
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Create a virtual environment for the Django project
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Create the PostgreSQL database user and database
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Configure the Nginx web server
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Install the *Let's Encrypt* SSL certificate
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Configure the Memcached caching service
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Configure the Postfix email server
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Clone the Django project repository
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Install Python dependencies
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Set up Gunicorn
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Create the `secrets.json` file
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Migrate the database
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Collect static files
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Restart Nginx
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: As you can see, the installation is very similar to the one on the staging server,
    but, to keep it flexible and more tweakable, we saved it separately in the `deployment/production` directory.
  prefs: []
  type: TYPE_NORMAL
- en: Theoretically, you could skip the staging environment altogether, but it is
    practical to try out the deployment procedure in a virtual machine rather than
    experimenting with installing directly on a remote server.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The *Creating a virtual environment project file structure* recipe in [Chapter
    1](87d1a2a0-31bb-4c77-ab38-98b738f55fa1.xhtml)*, Getting Started with Django 3.0*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Handling project dependencies with pip* recipe in [Chapter 1](87d1a2a0-31bb-4c77-ab38-98b738f55fa1.xhtml)*,
    Getting Started with Django 3.0*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Setting up STATIC_URL dynamically for Git users* recipe in [Chapter 1](87d1a2a0-31bb-4c77-ab38-98b738f55fa1.xhtml)*,
    Getting Started with Django 3.0*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Deploying on Apache with mod_wsgi for the staging environment* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Deploying on Apache with mod_wsgi for the production environment* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Deploying on Nginx and Gunicorn for the staging environment* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Creating and restoring PostgreSQL database backups* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Setting up cron jobs for regular tasks* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
