- en: An Overview of Software Quality Assurance
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Do we, as human beings, make mistakes? The answer to that is an overwhelming
    *yes*. There are examples of failures in quality control and decision-making that
    have shaken the world and resulted in huge losses to the companies involved. For
    example, we all remember the tragic accident with the Challenger space shuttle
    that exploded on launch. Was this a case of simple oversight or was it possible
    to have adequately tested the systems to control the threat of failure and avoid
    the explosion?
  prefs: []
  type: TYPE_NORMAL
- en: To get to the bottom of such incidents, we need to learn from the very people
    who are involved in the design and production of such systems. Mistakes are generally
    unavoidable and can happen at any stage of production, due to reasons such as
    weak or unclear requirements, hurrying to meet deadlines, or insufficient knowledge
    about a system. What we can do, however, is follow a process that can help reduce
    making or introducing any new errors, while preventing known errors from being
    repeated. This calls for a change in thought processes and a reliance on crafting
    standard practices in order to produce more successful products. Let's first understand
    what quality means before we embark on our journey to rewire ourselves to create
    sustainable and repeatable best practices for delivering defect-free software.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we''ll be covering the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: What is quality?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How do we ensure quality?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Software testing thought process
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Quality Management Systems
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Software Development Life Cycle versus Software Testing Life Cycle
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Types of testing
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Preparing test data and managing test artifacts
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What is quality?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Quality, just like any other measure, requires a frame of reference or standards
    for us to compare against customer needs. These standards can help us to maintain
    and promote the consistency of the products developed, minimize the amount of
    rework required, and produce a customer-oriented product.
  prefs: []
  type: TYPE_NORMAL
- en: Quality can be defined in different ways. According to the** International Organization
    for Standardization** (**ISO**) 13628-2:2006, quality can be defined as conformance
    to specified requirements.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are seven main ISO principles (by ISO 9000) that revolve around making
    a good quality product:'
  prefs: []
  type: TYPE_NORMAL
- en: Customer focus
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Leadership
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Engagement of people
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Process approach
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Improvement
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Evidence-based decision-making
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Relationship management
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The quality ...
  prefs: []
  type: TYPE_NORMAL
- en: Why should you care about quality?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: It takes a lot of work to establish a brand and even more work to continue to
    build it and to sustain trust in the brand. To survive in today's competitive
    market and to maintain a good reputation, organizations incorporate testing phases
    and dedicate time to testing and debugging software products in the Software Development
    Life Cycle. Building quality products reduces the risk involved and boosts performance.
    A well-designed product can decrease the level of user dissatisfaction and frustration.
    It also increases the product's reliability and improves the end user's experience,
    resulting in happy customers.
  prefs: []
  type: TYPE_NORMAL
- en: Who is responsible for quality?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Products and services have a direct impact on their customer base, since they
    are released on the market to solve a problem that customers face. Thus, it is
    imperative that organizations that provide such services or products are responsible
    for their quality both before and after they hit the market. Organizations need
    to consider both internal and external environmental factors that can affect a
    product. This requires proper planning and delegation to dedicate teams and resources
    to each facet of the product. Usually, teams consist of the following roles:'
  prefs: []
  type: TYPE_NORMAL
- en: Product managers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Project managers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Quality Assurance** (**QA**) managers'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Business analysts
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Software developers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: QA engineers/testers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This team works toward the ...
  prefs: []
  type: TYPE_NORMAL
- en: How do we ensure quality?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Quality assurance is the key to the success of any business. The software development
    process goes through various phases, and ensuring quality at every step is a must.
    In the previous section, we saw why it's important to deliver a quality product.
    In this section, we'll learn how we can deliver quality products.
  prefs: []
  type: TYPE_NORMAL
- en: Delivering a project with a defined scope within a specified amount of time,
    with a set budget, and with certain quality standards expected by the customer
    are key factors in making a project successful. However, reaching a reasonable
    trade-off between these factors is necessary to get to market quickly and to remain
    competitive.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, if the scope of the project increases while the resources and
    time remain the same, it will affect quality directly, since the team to remain
    to deliver more within the stipulated time frame. Since their work hours do not
    change, the team might have to cut the testing time or reduce test coverage to
    deliver on time. The following diagram depicts the Iron Triangle:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/7c58d782-581b-49e0-aa1b-202b0e1e2560.png)'
  prefs: []
  type: TYPE_IMG
- en: The Iron Triangle
  prefs: []
  type: TYPE_NORMAL
- en: 'The objectives of the triangle—also referred to as the Iron Triangle—help us
    to deliver projects successfully. To ensure quality, we need to satisfy the Iron
    Triangle''s objectives. A traditional project management triangle consists of
    the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **SCOPE** |'
  prefs: []
  type: TYPE_TB
- en: Ensuring that we have verified and confirmed the scope of the project with the
    customer and excluded what is out of the scope of the project
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ensuring that we have designed a requirement specification document and all
    supporting documents that are required for the completion of the project
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ensuring that we have identified all sets of test cases and scenarios to validate
    the scope as specified in the requirement document and test plan
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Time** |'
  prefs: []
  type: TYPE_TB
- en: Ensuring that all activities and their dependent activities are planned appropriately
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ensuring that activities also constitute meeting time, sanctioned holidays,
    resource availability, and buffer time as part of the contingency plan
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ensuring that every project kickoff occurs on time
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Cost** |'
  prefs: []
  type: TYPE_TB
- en: Ensuring that all resources based on skill set and budget have been identified
    for the project
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ensuring that all the required tools, vendor products, and purchasing licenses
    have been either acquired or renewed to fit the specified budget
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| **QUALITY** |'
  prefs: []
  type: TYPE_TB
- en: Ensuring that test managers and test leaders have done a requirement-gap analysis
    and are ready with a test plan
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ensuring that the test plan lists all of the factors that might affect the quality
    of the software product, such as resources, their skill level, the tools required,
    things within scope, things out of scope, testing strategies, test methodologies,
    compatibility, and supported browsers versions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: The Iron Triangle helps project managers to analyze and understand the trade-offs
    while catering to these factors. A proper balance must be achieved to ensure the
    desired levels of quality to produce a successful product.
  prefs: []
  type: TYPE_NORMAL
- en: Software testing thought process
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Software products are the result of a multidisciplinary team coming together
    to make a concrete product that serves customer needs. Although the team is formed
    of several roles, such as managers, analysts, developers, and testers, each role
    is essential to deliver a suitable and robust product. This requires each of these
    contributors to be a part of the quality process.
  prefs: []
  type: TYPE_NORMAL
- en: If every role has a part in ensuring quality, why do we need a separate role
    for testers? One simple reason is to introduce a fresh set of eyes. While it is
    possible for a developer to test their own code or software, it requires a different
    mindset to ensure quality. A developer's mindset is to prove that their software
    works, but a tester's ...
  prefs: []
  type: TYPE_NORMAL
- en: Quality Management Systems
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As we have seen so far, there are various ways we can ensure quality in our
    projects, but how do we evaluate whether the quality system we pick is effective?
    This becomes more of a concern if one organization needs to contract its work
    to another and needs to know whether the contractor will be able to provide quality
    services and products. This need for the quality system to be auditable necessitates
    the use of a **Quality Management System** (**QMS**).
  prefs: []
  type: TYPE_NORMAL
- en: A QMS is a set of standards that defines how an organization can meet the requirements
    of its customers and other stakeholders. Quality standards are a set of guidelines,
    rather than actual standards, that have been widely accepted in the software industry
    with defined processes and evaluation metrics to help improve the quality of software.
    The motivation for the selection of a standard is left to the business and the
    management to decide. Once certified, it is imperative to have the quality plan
    in place based on the certification that is opted for.
  prefs: []
  type: TYPE_NORMAL
- en: 'All quality standards have the same underlying principles:'
  prefs: []
  type: TYPE_NORMAL
- en: Well-defined processes to develop software
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Aligning people with processes to synergize and promote commitment to the quality-improvement
    program
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Enforcing the requirement to produce documentation for each process
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Thus, processes should be used as facilitators for quality improvement rather
    than a hindrance. It is the management's responsibility to foster a culture within
    the organization that works within the well-defined framework for development
    while promoting incentives to drive quality at every step of the development process.
  prefs: []
  type: TYPE_NORMAL
- en: There are several software-engineering standards that have been developed by
    major standardization and certification bodies. The ISO 9000 and **Capability
    Maturity Model Integration** (**CMMI**) are the most widely-used international
    standards in software-engineering and product-development organizations. Let's
    look at them in detail to understand how implementing standards can help an organization
    to ensure quality.
  prefs: []
  type: TYPE_NORMAL
- en: ISO 9000 series
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: ISO 9000 is a set of standards defined by ISO. If an organization needed to
    be certified, it would certify for the latest standard, ISO 9001:2015, which replaced
    the previous version, ISO 9001:2008. ISO 9001:2015 provides guidelines that drive
    continual improvement for an organization.
  prefs: []
  type: TYPE_NORMAL
- en: This latest update is based on the **High-Level Structure** (**HLS**)—Annex
    SL, which helps organizations incorporate more than one management system into
    core business processes and make efficiencies.
  prefs: []
  type: TYPE_NORMAL
- en: 'The ISO 9001:2015 standard specifies 10 clauses, as summarized in the following
    points:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Clause 1 (Scope)**: Explains what the standard is for and what it encompasses.
    The scope clause covers the following aspects:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The goals and objectives of the standard ...
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: CMMI
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: CMMI is a set of guidelines that enable organizations to produce good-quality
    software and improve its performance. CMMI was developed mainly to assess an organization's
    ability to take on large development projects for the US Department of Defense.
  prefs: []
  type: TYPE_NORMAL
- en: CMMI released version 2 of the model in March 2018\. This was an update from
    version 1.3\. CMMI v2.0 is divided into 4 categories and 10 capabilities with
    25 practice areas.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now let''s understand the categories and the practice areas:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Doing**: This category deals with designing and developing high-quality products
    that adhere to customer needs while reducing supply-chain risks. The doing stage
    includes four capabilities with 10 practice areas, as follows:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Ensuring quality** (**ENQ**):'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Developing and managing requirements**: Obtaining requirements, ensuring
    the mutual understanding of stakeholders, and aligning requirements, plans, and
    work products.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Process quality assurance**: Verifying and enabling the improvement of the
    quality of the processes performed and the resulting products.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Verification and validation**: Processes for this practice area should do
    the following:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Verify that the selected solutions and components meet their requirements
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Validate that the selected solutions and components fulfill their intended use
    in their target environments
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Peer review**: Utilize **subject matter experts** (**SMEs**) and peers to
    review the product to identify and address issues.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Engineering and Developing Products** (**EDP**):'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Product integration**: Integrating and delivering a quality solution that
    meets the required functionality'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Technical solution**: Designing and building solutions that meet customer
    requirements'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Delivering and Managing Services** (**DMS**):'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Service delivery management**: Delivering products and services while conforming
    to **service-level agreements** (**SLAs**)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Strategic service management**: Establishing and maintaining data regarding
    the organization’s capabilities and strategic needs, which serve as standard services'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Selecting and Managing Suppliers** (**SMS**):'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Supplier source selection**: Selecting a supplier by evaluating whether the
    supplier-delivered solution meets the expected requirements'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Supplier agreement management**: Establishing an agreement with the selected
    suppliers and ensuring that the terms are adhered to by both supplier and acquirer'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Managing**: This category deals with improving staff productivity while managing
    disruptions from the Porter’s Five Forces model to achieve speed-to-market. This
    category includes three capabilities with seven practice areas, as follows:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Planning and Managing Work** (**PMW**):'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Estimating**: Forecasting the factors of the Iron Triangle needed to produce quality
    product or solution.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Planning**: Developing plans describing delivery processes based on the standards
    and constraints of the organization. This includes budget, schedule, and resources,
    as well as stakeholders and the development team.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Monitor and Control**: Tracking the project''s progress to assert appropriate
    controls if the project deviates from the plan.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Managing Business Resilience** (**MBR**):'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Risk management and opportunity management**: Identifying, recording, and
    managing potential risks and opportunities'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Incident resolution and prevention**: Analyzing nonconformance to find the
    root cause and create a plan to prevent the event from recurring'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Continuity**: Establishing contingency plans for sustaining operations during
    emergencies'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Managing the Workforce** (**MWF**):'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Organizational training**: Developing the skills and knowledge of personnel
    so that they perform their roles efficiently and effectively'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Enabling**: This category deals with securing stakeholder buy-in and assuring
    product integrity. It includes one capability with three practice areas, as follows:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Supporting Implementation** (**SI**):'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Causal analysis and resolution**: Understanding the root cause of all results
    and acting to prevent the recurrence of nonconformities and/or acting to ensure
    conformities'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Decision analysis and resolution**: Making and recording decisions using
    a recorded process that analyzes alternatives'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Configuration management**: Managing the integrity of deliveries using version
    control, change control, and appropriate audit mechanisms'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Improving**: This category deals with ensuring that performance goals support
    business needs while establishing sustainable efficiencies. It includes two capabilities
    and five practice areas, as follows:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Improving Performance** (**IMP**):'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Process management**: Managing and implementing the continuous improvement
    of processes and infrastructure to identify the most beneficial process improvements
    that support accomplishing business objectives in a sustainable way'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Process asset development**: Recording and maintaining the list of processes
    used to perform the work'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Managing performance and measurement**: Managing performance using measurement
    and analysis to achieve business objectives'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Sustaining Habit and Persistence** (**SHP**):'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Governance**: Counselling top management in the sponsorship and governance
    of process activities'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Implementation infrastructure**: Ensuring that processes important to the
    organization are continuously used and improved'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: To learn more and get updates about the new CMMI v2.0, please visit [https://www.cmmiinstitute.com/cmmi/model-viewer](https://www.cmmiinstitute.com/cmmi/model-viewer).
  prefs: []
  type: TYPE_NORMAL
- en: Maturity levels
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The previously-mentioned categories and process areas are basically factors
    to improve the business performance of an organization. The ranks at which these
    organizations would be at, based on how they have implemented those process areas,
    are called **maturity levels**.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following diagram shows the levels of software-process maturity. Based
    on software-process maturity, an organization can be at one of these six maturity
    levels:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/ea141ea7-69b3-48f4-9185-7f431b0bc667.png)'
  prefs: []
  type: TYPE_IMG
- en: https://commons.wikimedia.org/wiki/File:Characteristics_of_Capability_Maturity_Model.svg
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s look at these maturity levels in detail:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Maturity Level 0 (Incomplete)**: Organizations at this level do ...'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Software Development Life Cycle versus Software Testing Life Cycle
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The **Software Development Life Cycle** (**SDLC**) is a process to develop and
    deliver software products or services that details the end-to-end phase, from
    designing, coding, and testing, to maintaining the product after release. The
    **Software Testing Life Cycle** (**STLC**) is a subset of the SDLC. Let's explore
    both the SDLC and STLC in detail.
  prefs: []
  type: TYPE_NORMAL
- en: SDLC
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The SDLC is a planned and organized process that divides software development
    tasks into various phases. These phases help the team to build a product that
    adheres to the factors of scope, time, cost, and quality. It also helps the project
    manager to monitor and control project activities at each stage and perform risk
    analysis effectively.
  prefs: []
  type: TYPE_NORMAL
- en: 'Any traditional SDLC comprises the following basic, but critical, phases:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Requirement analysis: **A software product exists to solve a problem for
    the customer. Understanding customer needs is hence essential to building one.
    Requirement analysis is the phase where this is achieved. This is the stage where
    we try to answer the question, *what do we want to build and why?*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We create formal documentation ...
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: STLC
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The STLC is part of the SDLC. It''s a systematic approach that ensures the
    quality of a software product or services. Like the SDLC, the STLC also consists
    of different phases, listed as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Requirement analysis: **Once the project gets initiated, the team actively
    starts working on gathering customer requirements. In this phase, testers, business
    analysts, and developers take a closer look at each specification requested by
    users. For requirement analysis in STLC, testers can do the following things:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Testers need to break drown broader and more complex requirements into smaller
    pieces to understand the testable requirements, the scope of the testing, and
    verification key points, and to identify the gaps in the requirements
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: They can clarify their doubts regarding technology or software requirements,
    limitations and dependencies, and so on with the developers and business analysts,
    and improve suggestions or highlight missing information that needs to be added
    into the requirements
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Testers can also highlight risks and develop risk-mitigation strategies before
    proceeding to the test-planning phase
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Test planning: **This is where testers (usually lead testers or managers)
    plan testing activities and milestones based on various factors, such as time,
    scope, and resources that help them to track the progress of the project. Let''s
    check out some activities that the tester performs during test planning:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In this phase, testers plan test activities and strategies that can be used
    effectively during the subsequent testing phases
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Also, the scope of testing needs to be identified and parts out of scope should
    be marked as well
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: They also need to decide on the testing techniques and types that will be implemented
    during the test-execution phase based on the current product requirements
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Along with that, an understanding of the tool's requirements and the number
    of resources required with their skill level can help them plan tasks better
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Considering these factors and the timelines for the selected project, a tester
    can prepare an effective test plan that will fit into the project budget and help
    the team to create a quality product.
  prefs: []
  type: TYPE_NORMAL
- en: '**Test designing: **This is where the test team starts to break down each requirement
    and converts them into test scenarios. These test scenarios cover happy path,
    positive testing, the critical path that needs to be verified, and functions that
    need to be verified with a different set of parameters. It also consists of negatives
    scenarios, acceptance tests, and scenarios based on user-interaction workflows
    and data flows.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Based on the type of application and the types of testing listed in the requirement
    analysis, phase testers can work on creating automated test scripts, adding scenarios
    for stress and load testing, and performance testing can help testers to test
    the application better and find more defects.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Once the scenarios are ready and reviewed, testers move on to preparing the
    test cases or test scripts (in the case of automation testing) in order to list
    the detailed steps.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: One scenario can have one or more test cases, whereas a requirement can be linked
    to one or more scenarios. This mapping is helpful when creating a **Requirement
    Traceability Matrix** (**RTM**).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Environment setup: **Establishing a separate test environment is always good
    practice. Keeping testing code distinct from development code can help both testers
    and developers debug the code in the specific version and get to the root cause
    more quickly. Also, it gives developers a chance to make bug fixes in the code
    and in their copy of the code, and to verify it in their environment to confirm
    that the fix is working before sending it to the testers. It saves the time and
    effort needed to log defects and collect artifacts.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: When setting up the environment, testers need to ensure that they have configured
    the required version of the tool, the software, the hardware, and the test data.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: They also need to make sure that they have authorization to access the environment
    with the required roles to test the application, databases, and other tools required.
    The testing environment should mimic the end user's environment. This results
    in documenting the known behavior of the product and helps to manage expectations
    after delivery.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Test execution: **Once the code is ready and unit tested by the developers,
    it''s deployed in the test environment so that testers can initiate the test-execution
    phase.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The first test that testers perform is a smoke test to validate whether the
    software product or service caters to the basic requirements
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: After the software passes the smoke test, testers can continue with the validation
    process, following the types of testing as planned during the test-planning phase
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: During the execution phase, testers log an undesirable result as a defect. Once
    the defects have been fixed, testers need to retest the parts that have been changed
    and the part of the application that has not been changed, as part of regression
    testing
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Test reporting: **It is very important for testers, leads, and managers to
    track and monitor the progress of the project consistently so that it becomes
    easy to identify obstacles or risks early. It also helps being agile to provide
    the solution and resolve the problem.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Reporting the test helps the stakeholders to know the status of the test execution
    after each iteration or test cycle.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It also helps defect managers to identify the blocked test case that is dependent
    on the defect.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Accordingly, its priority or severity can be changed so that it can help to
    progress test execution.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: At the end of all iterations, a final report is prepared with the number of
    defects found during the test execution phase, the number of defects closed or
    marked as deferred, and the number of test cases passed or marked N/A. Along with
    this report, all the artifacts are validated and made sure that it's been added
    whenever it's needed.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Closure: **During the closure phase, test managers or test leads make sure
    that all the tests completed successfully, as per the schedule.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Team leads or managers make sure that all the required deliverables and closure
    documents are approved and accepted as per the evaluation criteria, and signed
    off as part of the closure phase
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We will be learning more about each phase in the STLC, along with its practical
    implementation in Jira and using its plugin, in the following chapters.
  prefs: []
  type: TYPE_NORMAL
- en: Types of testing
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To ensure the quality of the product, we need to understand our application
    and its testing needs to make it more robust and bug-free. Based on the customer
    requirements and the type of product we are developing, we can come up with a
    list of the types of testing that are needed during the test planning phase of
    STLC.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this section, we will be learning about the different testing types that
    can be used during the test-execution phase:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Black-box testing: **Pays attention to external behavior, specifications,
    and desirable end results produced by the application by passing a set of known
    input parameters rather than the internal structure of the code. The main goal
    here is to verify the software in the way the end user will ...'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Preparing test data and managing test artifacts
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In software testing, verifying test scenarios with valid or invalid parameters,
    and different sets of input values is crucial to make sure that it behaves as
    per the designed test. In order to validate end-to-end scenarios and happy path
    workflows, we need to create test data. However, sometimes, it's a requirement
    of the test to bring the system to the initial level from where testing can begin.
    All these things can be done as a part of the test data preparation phase.
  prefs: []
  type: TYPE_NORMAL
- en: Depending on system requirements, testers can create different sets of authorized
    and unauthorized users with different roles, such as admin, or customer support
    executive, all of whom have different sets of permissions to access the application.
    Creating a concurrent set of users to access the application is also part of test
    data preparation.
  prefs: []
  type: TYPE_NORMAL
- en: Testers may also have to use different types of files, such as `.doc`, `.docx`,
    `.txt`, `.pdf`, `.xls`, `.xlsx`, `.csv`, `.png`, or `.jpeg` to import the data
    in order to make sure that it works, or doesn't work as defined in the test case.
    In these files, they can add valid or invalid users, leave some fields blank,
    or add unacceptable values that will break the application or throw an error.
  prefs: []
  type: TYPE_NORMAL
- en: Testers also use these files as an input for their automated test scripts, which,
    in turn, do the job of test validation by inserting test data read from these
    input files.
  prefs: []
  type: TYPE_NORMAL
- en: Managing test artifacts
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Managing test artifacts involves storing and managing the evidence that has
    been generated as a part of the test execution phase, or it can also be a set
    of deliverables generated after any phase of the SDLC.
  prefs: []
  type: TYPE_NORMAL
- en: 'These artifacts are very useful when managed properly:'
  prefs: []
  type: TYPE_NORMAL
- en: Artifacts generated during defect logging and retesting saves time for both
    developers and testers, preventing them from having to debug every part of the
    code, reproducing tests using specified test data, a build version and environment.
    Log error files, screenshots, database queries with the result set, input parameters,
    the URL of the application used during testing, the environment, the date tested
    on, the build number, and so on.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Deliverables generated ...
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we discussed software quality assurance in detail. Let's summarize
    the important points—a quality product refers to products that meet customer requirements.
    The ISO/IEC 25010:2011 quality model enumerates 13 characteristics that help us
    to assess the quality of products. Producing quality products requires a combination
    of complementary skills and roles as part of the product-development team. Scope,
    time, cost, and quality are intertwined, and hence a balance between them is essential
    when developing a product that caters to an organization's capabilities as well
    as customer satisfaction. A test-to-break attitude is necessary for a tester to
    be successful in their career. We looked at the thought process a tester needs
    to bring to the table to be proficient at the job. A quality management system
    addresses the processes to be followed to develop quality products. We discussed
    ISO 9001:2015 and CMMI v2.0 in detail. We looked at the five stages of the SDLC
    and learned how the STLC fits into the picture. We discussed the seven types of
    testing that a tester can utilize when planning tests based on customer and product
    needs. In the final section, we learned about how test data and artifacts are
    prepared, managed, retained, and shared for effective test management.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will look at project organization in Jira and explore
    the Zephyr, Test Management, and synapseRT plugins, which will be used to implement
    test management in Jira.
  prefs: []
  type: TYPE_NORMAL
