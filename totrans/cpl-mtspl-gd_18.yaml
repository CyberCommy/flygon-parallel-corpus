- en: Metasploit Extended
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter will cover the extended usage and hardcore post-exploitation features
    of Metasploit. Throughout this chapter, we will focus on out-of-the-box approaches
    for post-exploitation, and will also cover tedious tasks such as privilege escalation,
    getting passwords in clear text, finding juicy information, and much more.
  prefs: []
  type: TYPE_NORMAL
- en: 'During this chapter, we will cover and understand the following key aspects:'
  prefs: []
  type: TYPE_NORMAL
- en: Using advanced post-exploitation modules
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Speeding up penetration testing using automated scripts
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Privilege escalation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Finding passwords from the memory
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let's now jump into the post-exploitation features of Metasploit and start with
    the basics in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Basics of post-exploitation with Metasploit
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We have already covered many post-exploitation modules and scripts in the previous
    chapters. In this chapter, we will focus on the features that we did not include
    previously. So, let's get started with the most basic commands used in post-exploitation
    in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Basic post-exploitation commands
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Core Meterpreter commands provide the essential core post-exploitation features
    that are available on most of the exploited systems through a Meterpreter. Let's
    get started with some of the most basic commands that aid post-exploitation.
  prefs: []
  type: TYPE_NORMAL
- en: The help menu
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We can always refer to the help menu to list all the various commands that
    are usable on the target by issuing `help` or `?`, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/a4fcbe96-4d90-4a61-a0fc-8dfe18839536.png)'
  prefs: []
  type: TYPE_IMG
- en: The background command
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'While carrying out post-exploitation, we may run into a situation where we
    need to perform additional tasks, such as testing for a different exploit, or
    running a privilege escalation exploit. In such cases, we need to put our current
    Meterpreter session in the background. We can do this by issuing the `background`
    command, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/70a3bdcc-dd91-4991-ac83-8b33abcfca26.png)'
  prefs: []
  type: TYPE_IMG
- en: We can see in the preceding screenshot that we successfully managed to put our
    session in the background and re-interacted with the session using the `sessions
    -i` command followed by the session identifier, which is `1` in the case of the
    preceding screenshot.
  prefs: []
  type: TYPE_NORMAL
- en: Reading from a channel
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Meterpreter interacts with the target through numerous channels. Carrying out
    post-exploitation, we may be required to list and read from a particular channel.
    We can do this by issuing the `channel` command as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/0a766419-c1ba-4172-9a22-9994b9755d42.png)'
  prefs: []
  type: TYPE_IMG
- en: In the preceding screenshot, we listed all the available channels by issuing
    the `channel -l` command. We can read a channel by issuing `channel -r [channel-id]`.
    The channel subsystem allows for reading, listing, and writing through all the
    logical channels that exist as communication sub-channels through the Meterpreter
    shell.
  prefs: []
  type: TYPE_NORMAL
- en: File operation commands
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We covered some of the file operations in the previous chapters. Let''s revise
    a few of the file operation commands like `pwd`. Using the `pwd` command, we can
    view the present directory as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/d0b489dc-ff22-4b63-b7a1-cceb4b4c5910.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Additionally, we can browse the target filesystem using the `cd` command and
    create directories with the `mkdir` command, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/a28c5146-202d-4a15-adef-7ff2ebfd597a.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The Meterpreter shell allows us to upload files to the target system using
    the `upload` command. Let''s see how it works:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/443076ec-30ca-42f0-8a2a-ed7aa7f07248.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We can edit any file on the target by issuing the `edit` command followed by
    the filename, as shown:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/c2d0a2ad-c18f-4098-97ec-ee54ff6c4fe2.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Let''s now view the content of the file by issuing the `cat` command as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/dd284c93-8114-46b9-9b30-ded5be62b877.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We can use the `ls` command to list all files in the directory as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/81cd0b2e-60a6-44e4-b33b-9b6bcd61b0ba.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We can use the `rmdir` command to remove a particular directory from the target
    and the `rm` command to remove a file as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/654088e5-a2a3-4fbb-bafa-6f279cdefe6b.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Also, we can download files from the target using the `download` command as
    follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/a00d089d-188d-469d-b70a-029fe54f30f8.png)'
  prefs: []
  type: TYPE_IMG
- en: Desktop commands
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Metasploit features desktop commands such as enumerating desktops, taking pictures
    with a web camera, recording from the mic, streaming cams, and much more. Let''s
    look at these features:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/6bf5748e-803b-4795-81d3-d79def888efc.png)'
  prefs: []
  type: TYPE_IMG
- en: Information associated with the target desktop can be gained using `enumdesktops`
    and `getdesktop`. The `enumdesktop` command lists all the available desktops,
    whereas `getdesktop` lists information related to the current desktop.
  prefs: []
  type: TYPE_NORMAL
- en: Screenshots and camera enumeration
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'It is mandatory for the tester to get prior permissions before taking screenshots,
    taking webcam shots, running a live stream, or keylogging. Nevertheless, we can
    view the target''s desktop by taking a snapshot using the `snapshot` command,
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/e05c7cf8-bc4c-4bc9-8024-9a8ea9dfd1d9.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Viewing the saved JPEG file, we have this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/32e72209-18bb-486a-ad64-9ec15725c418.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Let''s see if we can enumerate the cameras and see who is working on the system:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/d6899588-d2a7-411f-bb02-2cf25f3e6119.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Using the `webcam_list` command, we can find out the number of cameras associated
    with the target. Let''s stream the cameras using the `webcam_stream` command as
    follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/ab6b0917-a7e9-4610-88c1-53a37ee1c199.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Issuing the preceding command opens a web camera stream in the browser, as
    shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/e1e6e105-6734-4e13-a83b-6104cb44f406.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We can also opt for a snapshot instead of streaming, by issuing the `webcam_snap`
    command as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/c5600898-9c41-403f-9a54-a7909966cd73.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Sometimes, we are required to listen to the environment for surveillance purposes.
    To achieve that, we can use the `record_mic` command, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/bc725fed-cd3a-44b3-a574-0cff3a635cb6.png)'
  prefs: []
  type: TYPE_IMG
- en: We can set the duration of capture with the `record_mic` command by passing
    the number of seconds with the `-d` switch.
  prefs: []
  type: TYPE_NORMAL
- en: 'Another great feature is finding the idle time to figure out the usage timelines,
    and attacking the system when the user on the target machine is less active. We
    can achieve this by using the `idletime` command, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/ffddb760-3c26-49c9-9ec9-2dac7cfad893.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Other interesting information that can be gained from the target is **keylogs**.
    We can dump keylogs by starting the keyboard sniffer module by issuing the `keyscan_start`
    command, as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/6f2c1124-70ea-42e0-8eb9-8b4d3c307af6.png)'
  prefs: []
  type: TYPE_IMG
- en: 'After a few seconds, we can dump the keylogs using the `keyscan_dump` command,
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/41fe6e25-60e9-415f-87f1-40c840d2701f.png)'
  prefs: []
  type: TYPE_IMG
- en: Throughout this section, we've seen many commands. Let's now move on to the
    advanced section for post-exploitation.
  prefs: []
  type: TYPE_NORMAL
- en: Advanced post-exploitation with Metasploit
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we will use the information gathered from primary commands
    to achieve further success and access the levels of the target.
  prefs: []
  type: TYPE_NORMAL
- en: Obtaining system privileges
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'If the application we broke into is running with administrator privileges,
    it is effortless to gain system-level privileges by issuing the `getsystem` command,
    as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/ebf35d62-73ba-45f8-b7ea-9c4b5f36a044.png)'
  prefs: []
  type: TYPE_IMG
- en: The system-level privileges provide the highest level of rights, with the ability
    to perform almost anything on to the target system.
  prefs: []
  type: TYPE_NORMAL
- en: The `getsystem` module is not as reliable on the newer version of Windows. It
    is advisable to try local privilege escalation methods and modules to elevate.
  prefs: []
  type: TYPE_NORMAL
- en: Changing access, modification, and creation time with timestomp
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Metasploit is used everywhere, from private organizations to law enforcement.
    Therefore, while carrying out covert operations, it is highly recommended to change
    the time of the files accessed, modified, or created. We can alter the time and
    date of files using the `timestomp` command. In the previous section, we created
    a file called `creditcard.txt`. Let''s change its time properties with the `timestomp`
    command, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/7e4b3834-1676-4654-a95c-f6d41ee9cc20.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We can see the access time is `2016-06-19 23:23:15`. We can use the `-z` switch
    to modify it to `1999-11-26 15:15:25`, as shown in the preceding screenshot. Let''s
    see if the file was modified correctly or not:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/f5dc327e-4a6a-4b0c-ab46-59ac669d06b5.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We successfully managed to change the timestamp of the `creditcard.txt` file.
    We can also blank all the time details for a file using the `-b` switch, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/e9894411-9156-4a83-ad23-617ff91aa4c6.png)'
  prefs: []
  type: TYPE_IMG
- en: By using `timestomp,` we can individually change modified, accessed, and creation
    times as well.
  prefs: []
  type: TYPE_NORMAL
- en: Additional post-exploitation modules
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Metasploit offers 250 plus post-exploitation modules; however, we will only
    cover a few interesting ones, and will leave the rest for you to cover as an exercise.
  prefs: []
  type: TYPE_NORMAL
- en: Gathering wireless SSIDs with Metasploit
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Wireless networks around the target system can be discovered efficiently using
    the `wlan_bss_list` module. The module allows us to fingerprint the location and
    other necessary information about the Wi-Fi networks around the target, as shown
    in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/6841ec66-4ec0-4787-8147-c8e3a0bbe904.png)'
  prefs: []
  type: TYPE_IMG
- en: Gathering Wi-Fi passwords with Metasploit
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Similar to the preceding module, we have the `wlan_profile` module, which collects
    all saved credentials for the Wi-Fi from the target system. We can use the module
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/98437bb3-1d01-483f-b071-d2852096ff46.png)'
  prefs: []
  type: TYPE_IMG
- en: We can see the name of the network in the `<name>` tag, and the password in
    the `<keyMaterial>` tag in the preceding screenshot.
  prefs: []
  type: TYPE_NORMAL
- en: Getting the applications list
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Metasploit offers credential harvesters for various types of application; however,
    to figure out which apps are installed on the target, we need to fetch the list
    of the applications using the `get_application_list` module, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/525ef5c8-2200-462c-9152-41409accf66b.png)'
  prefs: []
  type: TYPE_IMG
- en: Figuring out the applications, we can run various information-gathering modules
    over the target.
  prefs: []
  type: TYPE_NORMAL
- en: Gathering Skype passwords
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Suppose we figured out that the target system was running Skype. Metasploit
    offers a great module to fetch Skype passwords using the `skype` module:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/94bd060a-827d-4dd3-bc3e-7958d15de06f.png)'
  prefs: []
  type: TYPE_IMG
- en: Gathering USB history
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Metasploit features a USB history recovery module that figures out which USB
    devices were used on the target system. This module is handy in scenarios where
    USB protection is set in place, and only specific devices are allowed to connect.
    Spoofing the USB descriptors and hardware IDs becomes a lot easier with this module.
  prefs: []
  type: TYPE_NORMAL
- en: For more on Spoofing USB descriptors and bypassing endpoint protection, refer
    to [https://www.slideshare.net/the_netlocksmith/defcon-2012-hacking-using-usb-devices](https://www.slideshare.net/the_netlocksmith/defcon-2012-hacking-using-usb-devices).
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s see how we can use the module:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/8dfbd30f-6b8a-4e93-bd04-c06fbfe9fb74.png)'
  prefs: []
  type: TYPE_IMG
- en: Searching files with Metasploit
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Metasploit offers a cool command to search for interesting files, which can
    be downloaded further. We can use the `search` command to list all the files with
    particular file extensions, such as `*.doc`, `*.xls`, and so on, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/0e091a3c-a77c-4b41-8f30-20f9d7604e1c.png)'
  prefs: []
  type: TYPE_IMG
- en: Wiping logs from the target with the clearev command
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'All logs from the target system can be cleared using the `clearev` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/0affc886-7466-46f4-85e0-52cf1206aac5.png)'
  prefs: []
  type: TYPE_IMG
- en: 'However, if you are not a law enforcement agent, you should not clear logs
    from the target, because logs provide essential information to the blue teams
    to strengthen their defenses. Another excellent module for playing with logs,
    known as `event_manager`, exists in Metasploit, and can be used as shown in the
    following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/ae0e6e98-3c17-4fb7-a66a-ceac56003dff.png)'
  prefs: []
  type: TYPE_IMG
- en: Let's jump into the advanced extended features of Metasploit in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Advanced extended features of Metasploit
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Throughout this chapter, we've covered a lot of post-exploitation. Let's now
    cover some of the advanced features of Metasploit in this section.
  prefs: []
  type: TYPE_NORMAL
- en: Using pushm and popm commands
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Metasploit offers two great commands, `pushm` and `popm`. The `pushm` command
    pushes the current module on to the module stack, while `popm` pops the pushed
    module from the top of the module stack; however, this is not the standard stack
    available to processes. Instead, it is the utilization of the same concept by
    Metasploit, but it's otherwise unrelated. The advantage of using these commands
    is speedy operations, which saves a lot of time and effort.
  prefs: []
  type: TYPE_NORMAL
- en: Consider a scenario where we are testing an internal server with multiple vulnerabilities.
    We have two exploitable services running on every system on the internal network.
    To exploit both services on every machine, we require a fast-switching mechanism
    between modules for both the vulnerabilities, without leaving the options. In
    such cases, we can use the `pushm` and `popm` commands. We can test a server for
    a single vulnerability using a module, and then can push the module on the stack
    and load the other module. After completing tasks with the second module, we can
    pop the first module from the stack using the `popm` command with all the options
    intact.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s learn more about the concept through the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/3ca2192e-6b8e-4657-a229-1533997c4f12.png)'
  prefs: []
  type: TYPE_IMG
- en: 'In the preceding screenshot, we can see that we pushed the `psexec` module
    on to the stack using the `pushm` command, and we loaded the `exploit/multi/handler`
    module. As soon as we are done carrying out operations with the `multi/handler`
    module, we can use the `popm` command to reload the `psexec` module from the stack,
    as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/9dc88576-e245-4778-a707-abe9db238ebe.png)'
  prefs: []
  type: TYPE_IMG
- en: We can see that all the options for the `psexec` module were saved, along with
    the modules on the stack. Therefore, we do not need to set the options again.
  prefs: []
  type: TYPE_NORMAL
- en: Speeding up development using the reload, edit, and reload_all commands
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: During the development phase of a module, we may need to test a module several
    times. Shutting down Metasploit every time while making changes to the new module
    is a tedious, tiresome, and time-consuming task. There must be a mechanism to
    make module development an easy, short, and fun job. Fortunately, Metasploit provides
    the `reload`, `edit`, and `reload_all` commands, which make the lives of module
    developers comparatively easy. We can edit any Metasploit module on the fly using
    the `edit` command, and reload the edited module using the `reload` command, without
    shutting down Metasploit. If changes are made in multiple modules, we can use
    the `reload_all` command to reload all Metasploit modules at once.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s look at an example:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/58ff579f-e73e-451a-9458-e6adedda87ae.png)'
  prefs: []
  type: TYPE_IMG
- en: 'In the preceding screenshot, we are editing the `freefloatftp_user.rb` exploit
    from the `exploit/windows/ftp` directory, because we issued the `edit` command.
    We changed the payload size from `444` to `448`, and saved the file. Next, we
    need to issue the `reload` command to update the source code of the module in
    Metasploit, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/045e9bfd-2c9c-421c-b1ed-26b8436fe2b6.png)'
  prefs: []
  type: TYPE_IMG
- en: Using the `reload` command, we eliminated the need to restart Metasploit while
    working on the new modules.
  prefs: []
  type: TYPE_NORMAL
- en: The `edit` command launches Metasploit modules for editing in the vi editor.
    Learn more about vi editor commands at [http://www.tutorialspoint.com/unix/unix-vi-editor.htm](http://www.tutorialspoint.com/unix/unix-vi-editor.htm).
  prefs: []
  type: TYPE_NORMAL
- en: Making use of resource scripts
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Metasploit offers automation through resource scripts. The resource scripts
    eliminate the task of setting the options manually by setting up everything automatically,
    thus saving the time that is required to set up the options of a module and the
    payload.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are two ways to create a resource script: either by which are creating
    the script manually, or using the `makerc` command. I recommend the `makerc` command
    over manual scripting, since it eliminates typing errors. The `makerc` command
    saves all the previously issued commands in a file, which can be used with the
    `resource` command. Let''s see an example:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/c63d7b93-6767-48e3-b5c5-48c735fd7ae3.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We can see in the preceding screenshot that we launched an exploit handler
    module by setting up its associated payload and options, such as `LHOST` and `LPORT`.
    Issuing the `makerc` command will systematically save all these commands into
    a file of our choice, which is `multi_hand` in this case. We can see that `makerc`
    successfully saved the last six commands into the `multi_hand` resource file.
    Let''s use the resource script as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/af00fb54-a71d-4baf-8647-46bd7d2af595.png)'
  prefs: []
  type: TYPE_IMG
- en: We can see that just by issuing the `resource` command followed by our script,
    it replicated all the commands we saved automatically, which eliminated the task
    of setting up the options repeatedly.
  prefs: []
  type: TYPE_NORMAL
- en: Using AutoRunScript in Metasploit
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Metasploit offers another great feature of using `AutoRunScript`. The `AutoRunScript`
    option can be populated by issuing the `show advanced` command. The `AutoRunScript`
    automates post-exploitation, and executes once access to the target is gained.
    We can either set the `AutoRunScript` option manually by issuing `set AutoRunScript
    [script-name]`, or in the resource script itself, which automates exploitation
    and post-exploitation together.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `AutoRunScript` can also run more than one post-exploitation script, by
    making use of the `multi_script` and `multi_console_command` modules as well.
    Let''s take an example in which we have two scripts, one for automating the exploitation,
    and the other for automating the post-exploitation, as shown in the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/97a51a26-82ea-4e0c-bcec-62818316faf0.png)'
  prefs: []
  type: TYPE_IMG
- en: 'This a small post-exploitation script that automates `checkvm` (a module to
    check if the target is running on virtual environment) and `migrate` (a module
    that helps to migrate from the exploited process to safer ones). Let''s have a
    look at the exploitation script:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/c33ec025-632f-44b9-a8cf-36d5442a61c5.png)'
  prefs: []
  type: TYPE_IMG
- en: The preceding resource script automates the exploitation of the HFS file server
    by setting up all the required parameters. We also set the `AutoRunScript` option
    with the `multi_console_command` option, which allows for execution of the multiple
    post-exploitation scripts. We define our post-exploitation script to `multi_console_command`
    using `-rc` switch, as shown in the preceding screenshot.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s run the exploitation script and analyze its results in the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/536bfcae-84f4-4dcc-8f56-1a4ac1bf57e8.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We can see in the preceding screenshot that soon after the exploit is completed,
    the `checkvm` and `migrate` modules are executed, which states that the target
    is a `Sun VirtualBox Virtual Machine`, and the process is migrated to `notepad.exe`.
    The successful execution of our script can be seen in the following remaining
    section of the output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/b761b85f-fabb-4ccf-ade2-965f6d6cd7b9.png)'
  prefs: []
  type: TYPE_IMG
- en: We successfully migrated to the `notepad.exe` process; however, if there are
    multiple instances of `notepad.exe`, the process migration may hop over other
    processes as well.
  prefs: []
  type: TYPE_NORMAL
- en: Using the multiscript module in AutoRunScript option
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We can also use a `multiscript` module instead of the `multi_console_command`
    module. Let''s create a new post-exploitation script, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/ece24491-5185-4601-af5a-81b4b6c9f739.png)'
  prefs: []
  type: TYPE_IMG
- en: 'As we can see in the preceding screenshot, we created a new post-exploitation
    script named `multi_scr.rc`. We need to make changes to our exploitation script
    to accommodate the changes, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/8bf54c36-68fc-4fe1-ad9b-73ed3593cd2c.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We merely replaced `multi_console_command` with `multiscript`, and updated
    the path of our post-exploitation script, as shown in the preceding screenshot.
    Let''s see what happens when we run the `exploit` script:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/16b2b873-b862-4aff-9cc1-182325892a17.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We can see that after access to the target is gained, the `checkvm` module
    executes, which is followed by the `migrate`, `get_env`, and `event_manager` commands,
    as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/d68f52d2-70fb-443a-9aa0-e7fe512decc9.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The `event_manager` module displays all the logs from the target system, because
    we supplied the `-i` switch along with the command in our resource script. The
    results of the `event_manager` command are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/5c58aa65-de2b-4411-a9f1-ed0dd9bc8048.png)'
  prefs: []
  type: TYPE_IMG
- en: Privilege escalation using Metasploit
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'During a penetration test, we often run into situations where we have limited
    access, and if we run commands such as `hashdump`, we might get the following
    error:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/4d754ab2-cdb9-472a-a892-e045ad18b44c.png)'
  prefs: []
  type: TYPE_IMG
- en: 'In such cases, if we try to get system privileges with the `getsystem` command,
    we get the following errors:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/eefae71d-7266-45e2-885d-71f47fe7f14f.png)'
  prefs: []
  type: TYPE_IMG
- en: 'So, what shall we do in these cases? The answer is to escalate privileges using
    post-exploitation to achieve the highest level of access. The following demonstration
    is conducted over a Windows Server 2008 SP1 OS, where we used a local exploit
    to bypass the restrictions and gain complete access to the target:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/db955683-4dc3-4d9b-9bca-ee4737b3226b.png)'
  prefs: []
  type: TYPE_IMG
- en: 'In the preceding screenshot, we used the `exploit/windows/local/ms10_015_kitrap0d`
    exploit to escalate privileges, and to gain the highest level of access. Let''s
    check the level of access using the `getuid` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/c2839884-d17f-4473-9835-6add414c3f6c.png)'
  prefs: []
  type: TYPE_IMG
- en: Now, we can see that we have system-level access, and can now perform anything
    on the target.
  prefs: []
  type: TYPE_NORMAL
- en: For more info on the KiTrap0D exploit, refer to [https://docs.microsoft.com/en-us/security-updates/SecurityBulletins/2010/ms10-015](https://docs.microsoft.com/en-us/security-updates/SecurityBulletins/2010/ms10-015).
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s now run the `hashdump` command, and check if it works:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/c6748078-134a-4bb3-a641-b295ae2e7671.png)'
  prefs: []
  type: TYPE_IMG
- en: Bingo! We got the hashes with ease.
  prefs: []
  type: TYPE_NORMAL
- en: Finding passwords in clear text using mimikatz
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**mimikatz** is an excellent addition to Metasploit that can recover passwords
    in clear text from the lsass service. We have already used the hash by using the
    pass-the-hash attack; however, sometimes, passwords can also be required to save
    time in the first place, as well as for the use of HTTP basic authentication,
    which requires the other party to know the password rather than the hash.'
  prefs: []
  type: TYPE_NORMAL
- en: 'mimikatz can be loaded using the `load mimikatz` command in Metasploit. The
    passwords can be found using the `kerberos` command made available by the mimikatz
    module:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/fbb58de2-f09d-4d25-96f6-703dd8a8f21a.png)'
  prefs: []
  type: TYPE_IMG
- en: Sniffing traffic with Metasploit
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Yes, Metasploit does provide the feature of sniffing traffic from the target
    host. Not only can we sniff a particular interface, but also any specified interface
    on the target. To run this module, we will first need to list all interfaces,
    and choose any one amongst them:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/b5f859bb-2615-437e-8cbb-9a7b2e5b07e2.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We can see we have multiple interfaces. Let''s start sniffing on the wireless
    interface, which is assigned `2` as the ID, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/f287b005-361a-4791-b6d4-2607c6775669.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We start the sniffer by issuing a `sniffer_start` command on the wireless interface
    with the ID as `2`, and `1000` packets as the buffer size. We can see that by
    issuing the `sniffer_dump` command, we downloaded the PCAP successfully. Let''s
    see what data we have gathered by launching the captured PCAP file in Wireshark.
    We can do this by issuing the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/a94dc1c9-588d-485f-b232-e113c4b652e8.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We can see a variety of data in the PCAP file, which comprises DNS queries,
    HTTP requests, and clear-text passwords:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/d2994157-6e20-4ca5-8716-325633b3dd92.png)'
  prefs: []
  type: TYPE_IMG
- en: Host file injection with Metasploit
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We can perform a variety of phishing attacks on the target by injecting the
    host file. We can add entries to the host file for specific domains, allowing
    us to leverage our phishing attacks with ease.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s see how we can perform a host file injection with Metasploit:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/3052c857-2477-463a-b014-3318fe8201ff.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We can see that we used the `post/windows/manage/inject_host` module on `SESSION
    1`, and inserted the entry into the target''s host file. Let''s see what happens
    when a target opens [https://www.yahoo.com/](https://www.yahoo.com/):'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/5c1a3514-af96-45ad-aa98-357832081bb6.png)'
  prefs: []
  type: TYPE_IMG
- en: We can see that the target is redirected to our malicious server, which can
    host phishing pages with ease.
  prefs: []
  type: TYPE_NORMAL
- en: Phishing Windows login passwords
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Metasploit includes a module that can phish for login passwords. It generates
    a login popup similar to an authentic Windows popup that can harvest credentials,
    and since it is posing as a legitimate login, the user is forced to fill in the
    credentials and then proceed with this ongoing operation. We can phish for a user''s
    login by running `post/windows/gather/phish_login_pass`. As soon as we run this
    module, the fake login box pops up at the target, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/eb87be4a-7342-4df6-bfde-56d761df3ae2.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Once the target fills out the credentials, we are provided with the credentials
    in plain text, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/2da7e422-f896-4e66-82e9-1e209329ba2f.png)'
  prefs: []
  type: TYPE_IMG
- en: Voila! We got the credentials with ease. As we have seen in this chapter, Metasploit
    provides tons of great features for post-exploitation, by working with standalone
    tools such as mimikatz and native scripts as well.
  prefs: []
  type: TYPE_NORMAL
- en: Summary and exercises
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Throughout this chapter, we covered post-exploitation in detail. We looked at
    post-exploitation scenarios, from basic to advanced. We also looked at privileged
    escalation in a Windows environment, and a couple of other advanced techniques.
  prefs: []
  type: TYPE_NORMAL
- en: 'Following are the exercises you should try on your own:'
  prefs: []
  type: TYPE_NORMAL
- en: Develop your own post-exploitation modules for the features which are not already
    present in Metasploit
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Develop automation scripts for gaining access, maintaining access, and clearing
    tracks
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Try contributing to Metasploit with at least one post-exploitation module for
    Linux based operating systems
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In the next chapter, we will make use of most of the post-exploitation tricks
    we covered in this chapter to circumvent and evade protections at the target system.
    We will perform some of the most cutting-edge Metasploit Kung Fu, and will try
    to defeat the AVs and firewalls.
  prefs: []
  type: TYPE_NORMAL
