- en: Chapter 1. Forms and Their Significance
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Using forms in a web page is the most effective way to gather relevant data
    from the user. Forms are how users really interact with the application whether
    it's a search form, a login screen, or a multipage registration wizard. Forms
    can have inputs such as name, gender, credit card number, password, images, or
    upload files into the forms.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Web forms and their benefits
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The new HTML5 `<form>` elements
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Building a web form
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Guidelines to build a web form
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Understanding web forms
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Before we start learning about HTML5 forms, let us understand what a web form
    is.
  prefs: []
  type: TYPE_NORMAL
- en: Forms on a web page provide an interface where information can be shared between
    a client and a user more easily and securely in comparison to paper-based forms.
    They are a collection of various `<input>` types, such as `textbox`, `radiobutton`,
    and `checkbox`, which allow users to perform various actions and simplifies decision
    making.
  prefs: []
  type: TYPE_NORMAL
- en: Forms have always been a fundamental part of the Web. Without them, various
    web transactions, discussions, and efficient searches would simply not be possible.
    Web-based forms are supported in most browsers and can be used to give feedback
    after purchasing a product, retrieve search results from a search engine, contact
    for any service, and much more.
  prefs: []
  type: TYPE_NORMAL
- en: With a simple example, let us understand what a web form is. Say you once went
    to a hospital and the receptionist gave you a printed form to fill out. You would
    have come across many fields that collect information about a patient. Some of
    them asked you to write the patient's name and address in what looked like a textbox
    or a text area, and other details such as type of room and so on; you were also
    asked to choose one or multiple radio buttons or checkboxes from the options.
    The same concept follows for HTML5 forms. You have to fill out the fields of that
    form and press a button to send this information to the server, rather than going
    to the hospital and handing the form over to the receptionist.
  prefs: []
  type: TYPE_NORMAL
- en: Benefits
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Forms in web pages offer plenty of advantages over paper-based forms. Apart
    from being used to gather data online, web forms offer convenience and speed for
    both the user and the form owner.
  prefs: []
  type: TYPE_NORMAL
- en: 'Some advantages of web forms are:'
  prefs: []
  type: TYPE_NORMAL
- en: Online forms help the customers to talk to the companies as they contain digitally
    stored data and deduce that data to meaningful information
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The form owners can quickly build and distribute the HTML5 interface, targeting
    a large audience
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The form owner can easily update and modify forms as needed
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Cascading Style Sheets (CSS) and JavaScript attributes allow authors to
    customize form controls with specific styles and functions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Web forms are time saving and cost effective as they require no manpower to
    gather information
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: They provide a visibility for decision making, for example, shopping online
    on websites such as eBay
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: As the data is entered directly by the customer,it can be easily sorted to get
    the required information
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Even if forms have many benefits, building them is not the nicest job and can
    become a headache as some forms can get very complicated if we talk about validation,
    error handling, and styling. We either validate or catch the errors using a server-side
    language or we use JavaScript, or even both. Whichever the case, the web forms
    can take up a lot of your development time and this can be a problem. With HTML5,
    however, some of this pain has been taken away by the introduction of the new
    `<form>` types, which we can use.
  prefs: []
  type: TYPE_NORMAL
- en: 'In spite of many enhancements in HTML5, some things are kept the same such
    as:'
  prefs: []
  type: TYPE_NORMAL
- en: Forms still send the values to the server when the user clicks on the **Submit**
    button
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Forms are still enclosed in the `<form>` element, as shown in the following
    code snippet:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Form controls are still fully scriptable
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: However, for the HTML5 forms, there is no need to enclose the `<form>` controls
    in the `<form>` element.
  prefs: []
  type: TYPE_NORMAL
- en: HTML versus HTML5 forms
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'An HTML5 form provides two major advantages over previous versions. They are:'
  prefs: []
  type: TYPE_NORMAL
- en: Tedious scripting and styling of forms that was required in earlier versions
    of HTML was removed because HTML5's new `<form>` types and inbuilt validations
    takes semantic markup to the next level
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Even if scripting is disabled in the browser, users can experience the benefits
    of HTML5 forms
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The form <input> types, elements, and attributes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The HTML5 forms focus on enhancing the existing simple HTML forms to encompass
    more types of controls and address the limitations that web developers face today.
    One of the best things about them is that you can use almost all the new input
    types, elements, and attributes right now and the HTML5 forms are fully backward
    compatible. The browser, which supports the new HTML5 elements, enhances their
    features, otherwise the browser, which does not support it, displays them as a
    textbox.
  prefs: []
  type: TYPE_NORMAL
- en: In this section, we will learn the new HTML5 `<form>` elements, such as the
    `<input>` types, elements, and attributes that are introduced to enhance the capabilities
    of forms.
  prefs: []
  type: TYPE_NORMAL
- en: The <form> <input> types
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '`date`: The `date` type allows the user to select a date with no time zone.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It is supported in ![The <form> <input> types](img/4661OS_01_01.jpg).
  prefs: []
  type: TYPE_NORMAL
- en: 'Syntax:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Attributes:'
  prefs: []
  type: TYPE_NORMAL
- en: '`value`: The initial value. The format is yyyy-mm-dd'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`min`, `max`: The range in which the smallest and largest dates can be selected'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`datetime`: The `datetime` type allows the user to select a date and a time
    with the time zone set to UTC.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The format is yyyy-mm-dd HH:MM.
  prefs: []
  type: TYPE_NORMAL
- en: It is supported in ![The <form> <input> types](img/4661OS_01_02.jpg).
  prefs: []
  type: TYPE_NORMAL
- en: 'Syntax:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '`datetime-local`: The `datetime-local` type allows the user to select a date
    and time with no time zone. The format used is yyyy-mm-dd HH:MM.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It is supported in ![The <form> <input> types](img/4661OS_01_03.jpg).
  prefs: []
  type: TYPE_NORMAL
- en: 'Syntax:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '`color`: The `color` type results in opening a color chooser pop up and is
    used to choose a color of the `<input>` type `#rrggbb` (hex value). It could be
    represented by a swatch or a wheel picker.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The value chosen must be a valid simple color's hex value such as `#ffffff`.
  prefs: []
  type: TYPE_NORMAL
- en: It is supported in ![The <form> <input> types](img/4661OS_01_04.jpg).
  prefs: []
  type: TYPE_NORMAL
- en: 'Syntax:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Attributes:'
  prefs: []
  type: TYPE_NORMAL
- en: '`value`: The initial value'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`number`: The `number` type allows the user to input the numbers in either
    `integer` or `floating point`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It is also called a spinner.
  prefs: []
  type: TYPE_NORMAL
- en: We can set restrictions on what numbers are accepted.
  prefs: []
  type: TYPE_NORMAL
- en: It is supported in ![The <form> <input> types](img/4661OS_01_05.jpg).
  prefs: []
  type: TYPE_NORMAL
- en: 'Syntax:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Attributes:'
  prefs: []
  type: TYPE_NORMAL
- en: '`value`: The initial value'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`min`, `max`: The range in which the smallest and largest values can be selected
    with the up/down arrows'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`step`: This tells us how much to change the values when we scroll the spinner'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`range`: The `range` type allows the user to input the numbers in either integer
    or floating point from a range of numbers. It is displayed in the form of a slider.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using this, the exact value is not shown unless you use JavaScript, so use `<input
    type="number" />` if you want the user to choose an exact value.
  prefs: []
  type: TYPE_NORMAL
- en: We can set restrictions on what numbers are accepted.
  prefs: []
  type: TYPE_NORMAL
- en: It is supported in ![The <form> <input> types](img/4661OS_01_06.jpg).
  prefs: []
  type: TYPE_NORMAL
- en: 'Syntax:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Attributes:'
  prefs: []
  type: TYPE_NORMAL
- en: '`value`: The initial value. The default value is the mid of the slider.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`min`, `max`: The range in which the smallest and largest values can be selected.
    The default for min is 0 and max is 100.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`step`: This tells us how much to change the values when we scroll the spinner.
    The default is 1.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`email`: The `email` type allows the user to enter the text in e-mail address
    format `email@example.com`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The entered text is automatically validated when clicked on the **Submit** button.
  prefs: []
  type: TYPE_NORMAL
- en: If multiple attributes are specified, multiple e-mail addresses can be entered,
    separated by commas.
  prefs: []
  type: TYPE_NORMAL
- en: It is supported in ![The <form> <input> types](img/4661OS_01_07.jpg).
  prefs: []
  type: TYPE_NORMAL
- en: 'Syntax:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Attributes:'
  prefs: []
  type: TYPE_NORMAL
- en: '`value`: The initial value (a legal e-mail address)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using multiple attributes, that is, more than one e-mail ID, is accepted and
    each attribute is separated by a comma.
  prefs: []
  type: TYPE_NORMAL
- en: '`search`: The `<input>` type `search` allows the user to enter text that the
    user wants to search for.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A search field behaves like a standard text field and has inbuilt clear text
    functionality, such as the cross button in WebKit browsers.
  prefs: []
  type: TYPE_NORMAL
- en: It is supported in ![The <form> <input> types](img/4661OS_01_08.jpg).
  prefs: []
  type: TYPE_NORMAL
- en: 'Syntax:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Attributes:'
  prefs: []
  type: TYPE_NORMAL
- en: '`value`: The initial value'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`tel`: The `tel` type allows the user to input a telephone number. `tel` does
    not provide any default syntax, so if you want to ensure a particular format,
    you can use `pattern` to do additional validation.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: No browser support till now.
  prefs: []
  type: TYPE_NORMAL
- en: 'Syntax:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Attributes:'
  prefs: []
  type: TYPE_NORMAL
- en: '`value`: The initial value as a phone number'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`month`: The `month` type allows the user to select a month and a year with
    no time zone.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It is supported in ![The <form> <input> types](img/4661OS_01_09.jpg).
  prefs: []
  type: TYPE_NORMAL
- en: 'Syntax:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Attributes:'
  prefs: []
  type: TYPE_NORMAL
- en: '`value`: The initial value. The format is yyyy-mm.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`min`, `max`: The range in which the smallest and largest values can be selected.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`time`: The `time` type allows the user to select a time value with hour, minutes,
    seconds, and fractional seconds with no time zone.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It is supported in ![The <form> <input> types](img/4661OS_01_10.jpg).
  prefs: []
  type: TYPE_NORMAL
- en: 'Syntax:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: '`url`: The `url` type allows the user to input an absolute URL.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The entered text is automatically validated when clicked on the **Submit** button.
  prefs: []
  type: TYPE_NORMAL
- en: It is supported in ![The <form> <input> types](img/4661OS_01_11.jpg).
  prefs: []
  type: TYPE_NORMAL
- en: 'Syntax:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Attributes:'
  prefs: []
  type: TYPE_NORMAL
- en: '`value`: The initial value as an absolute URL'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`week`: The `week` type allows the user to select a week and a year with no
    time zone.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It is supported in ![The <form> <input> types](img/4661OS_01_12.jpg).
  prefs: []
  type: TYPE_NORMAL
- en: 'Syntax:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Attributes:'
  prefs: []
  type: TYPE_NORMAL
- en: '`value`: The initial value. The format is yyyy-mmW.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: So far we have learned about the various `<input>` types. Now let's see the
    new HTML5 `<form>` elements.
  prefs: []
  type: TYPE_NORMAL
- en: The <form> elements
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '`<datalist>`: The `<datalist>` element provides a list of predefined options
    for form controls to the user as they input data. It is used to provide an `autocomplete`
    feature on the `<form>` elements.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For instance, if a user enters some text in a text field, a list would drop
    down with prefilled values that they could choose from.
  prefs: []
  type: TYPE_NORMAL
- en: It is supported in ![The <form> elements](img/4661OS_01_13.jpg).
  prefs: []
  type: TYPE_NORMAL
- en: 'For example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: '`<keygen>`: The `<keygen>` element is used to provide a secure way to authenticate
    users.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: When the form is submitted, the private key is stored in the local keystore
    and the public key is packaged and sent to the server.
  prefs: []
  type: TYPE_NORMAL
- en: It is supported in ![The <form> elements](img/4661OS_01_14.jpg).
  prefs: []
  type: TYPE_NORMAL
- en: 'For example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: '`<output>`: The `<output>` element represents the result of a calculation performed
    like the one performed by scripts.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It is supported in ![The <form> elements](img/4661OS_01_15.jpg).
  prefs: []
  type: TYPE_NORMAL
- en: 'For example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: Now let us see the new HTML5 `<form>` attributes.
  prefs: []
  type: TYPE_NORMAL
- en: The <form> attributes
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '`autocomplete`: The `autocomplete` attribute allows users to complete the forms
    based on earlier inputs. We can have an autocomplete `on` option for the form
    and an `off` option for specific input fields or vice versa.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It works with both the `<form>` and `<input>` types such as `textbox`, `datepicker`,
    `range`, `color`, `url`, `tel`, `search`, and `email`.
  prefs: []
  type: TYPE_NORMAL
- en: It is supported in ![The <form> attributes](img/4661OS_01_16.jpg).
  prefs: []
  type: TYPE_NORMAL
- en: 'For example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: '`autofocus`: When the `autofocus` attribute is added, an `<input>`type automatically
    gets focus when the page loads.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For instance, when we open the Google home page or any search engine, the focus
    automatically goes to the textbox where a user enters the text to perform a search.
  prefs: []
  type: TYPE_NORMAL
- en: It works with the `<input>` types, `textbox`, `search`, `url`, `email`, `tel`,
    and `password`.
  prefs: []
  type: TYPE_NORMAL
- en: It is supported in ![The <form> attributes](img/4661OS_01_17.jpg).
  prefs: []
  type: TYPE_NORMAL
- en: 'For example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: '`placeholder`: The `placeholder` attribute gives users a hint that describes
    the expected value of an `<input>` field.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It disappears when the control is clicked on or gains focus.
  prefs: []
  type: TYPE_NORMAL
- en: It should be used only for short descriptions or else use the `title` attribute.
  prefs: []
  type: TYPE_NORMAL
- en: It works with the `<input>` types, `textbox`, `search`, `url`, `email`, `tel`,
    and `password`.
  prefs: []
  type: TYPE_NORMAL
- en: It is supported in ![The <form> attributes](img/4661OS_01_18.jpg).
  prefs: []
  type: TYPE_NORMAL
- en: 'For example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: '`min` and `max`: The `min` and `max` attributes are used to specify the minimum
    and maximum value to an `<input>` type.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It works with the `<input>` types, `number`, `range`, `date`, `datetime`, `datetime-local`,
    `month`, `time`, and `week`.
  prefs: []
  type: TYPE_NORMAL
- en: It is supported in ![The <form> attributes](img/4661OS_01_19.jpg).
  prefs: []
  type: TYPE_NORMAL
- en: 'For example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: '`list`: The `list` attribute refers to a `<datalist>` element that contains
    predefined options for an `<input>` element.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It is used to provide an `autocomplete` feature on the `<form>`elements.
  prefs: []
  type: TYPE_NORMAL
- en: For instance, if a user enters some text in a text field, a list would drop
    down with prefilled values from which they could choose.
  prefs: []
  type: TYPE_NORMAL
- en: It works with the `<input>` types, `textbox`, `search`, `url`, `email`, `tel`.
  prefs: []
  type: TYPE_NORMAL
- en: It is supported in ![The <form> attributes](img/4661OS_01_20.jpg).
  prefs: []
  type: TYPE_NORMAL
- en: 'For example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: '`formnovalidate`: The `formnovalidate` attribute specifies that the form should
    not be validated during submission. It overrides the `novalidate` attribute of
    the `<form>`elements.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It works with the `<input>` types, `submit` and `image`.
  prefs: []
  type: TYPE_NORMAL
- en: It is supported in ![The <form> attributes](img/4661OS_01_21.jpg).
  prefs: []
  type: TYPE_NORMAL
- en: 'For example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: '`form`: The `form` attribute specifies one or more forms that an `<input>`
    type belongs to, or in other words, it allows the users to associate any orphaned
    form control with any `<form>` element on the page.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It is supported in ![The <form> attributes](img/4661OS_01_22.jpg).
  prefs: []
  type: TYPE_NORMAL
- en: 'For example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: '`formaction`: The `formaction` attribute specifies the URL of a file or application
    that will submit the form.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It works with the `<input>` types, `submit` and `image`.
  prefs: []
  type: TYPE_NORMAL
- en: It is supported in ![The <form> attributes](img/4661OS_01_23.jpg).
  prefs: []
  type: TYPE_NORMAL
- en: 'For example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: '`formenctype`: The `formenctype` attribute specifies how the form data is encoded
    when submitting to the server.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It works with the `post` method only.
  prefs: []
  type: TYPE_NORMAL
- en: It works with the `<input>` types, `submit` and `image`.
  prefs: []
  type: TYPE_NORMAL
- en: It is supported in ![The <form> attributes](img/4661OS_01_24.jpg).
  prefs: []
  type: TYPE_NORMAL
- en: 'For example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: '`formmethod`: The `formmethod` attribute specifies which HTTP method such as
    `GET`, `POST`, `PUT`, and `DELETE` will be used to submit the form data.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It works with the `<input>` types, `submit` and `image`.
  prefs: []
  type: TYPE_NORMAL
- en: It is supported in ![The <form> attributes](img/4661OS_01_25.jpg).
  prefs: []
  type: TYPE_NORMAL
- en: 'For example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: '`formtarget`: The `formtarget` attribute specifies the target window to display
    the response received after submitting the form.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It works with the `<input>` types, `submit` and `image`.
  prefs: []
  type: TYPE_NORMAL
- en: It is supported in ![The <form> attributes](img/4661OS_01_26.jpg).
  prefs: []
  type: TYPE_NORMAL
- en: 'For example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'Values:'
  prefs: []
  type: TYPE_NORMAL
- en: '`blank`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`self`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`parent`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`top`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`framename`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`multiple`: The `multiple` attribute allows users to enter more than one value
    to the `<input>` types.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It works with the `<input>` types, `email` and `file`.
  prefs: []
  type: TYPE_NORMAL
- en: It is supported in ![The <form> attributes](img/4661OS_01_27.jpg).
  prefs: []
  type: TYPE_NORMAL
- en: 'For example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: '`novalidate`: The `novalidate` attribute specifies that the form should not
    be validated when the **Submit** button is clicked.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It is supported in ![The <form> attributes](img/4661OS_01_28.jpg).
  prefs: []
  type: TYPE_NORMAL
- en: 'For example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: '`step`: Let us understand the `step` attribute with an example. If `step=`
    `2`, legal numbers could be `2`, `0`, `2`, `4`, and `6`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It works with the `<input>` types, `number`, `range`, `date`, `datetime`, `datetime-local`,
    `month`, `time`, and `week`.
  prefs: []
  type: TYPE_NORMAL
- en: It is supported in ![The <form> attributes](img/4661OS_01_29.jpg).
  prefs: []
  type: TYPE_NORMAL
- en: 'For example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: '`required`: The `required` attribute, when added, enforces that an input field
    must be filled out before submitting the form.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Currently, the error messages are specific to the browsers and cannot be controlled
    by the CSS.
  prefs: []
  type: TYPE_NORMAL
- en: It replaces the basic `<form>` validations that were implemented with JavaScript,
    thus saving development time.
  prefs: []
  type: TYPE_NORMAL
- en: It is supported in ![The <form> attributes](img/4661OS_01_30.jpg).
  prefs: []
  type: TYPE_NORMAL
- en: 'For example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: '`pattern`: Using the `pattern` attribute, you can declare your own requirements
    for validation using `Regular Expressions` (`regex`).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It works with the `<input>` types, `text`, `search`, `url`, `tel`, `email`,
    and `password`.
  prefs: []
  type: TYPE_NORMAL
- en: In case, the value entered by a user does not match the pattern, it will display
    a browser generic message.
  prefs: []
  type: TYPE_NORMAL
- en: It is supported in ![The <form> attributes](img/4661OS_01_31.jpg).
  prefs: []
  type: TYPE_NORMAL
- en: 'For example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: Building an HTML5 form
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: So far, what we have learned about HTML5 forms is only theoretical, but now
    it's time to take this learning to the next level. Taking it to the next level
    means that in this section, we will build a sample form with some understanding
    of how they are structured and the new `<form>` types, which we have already discussed.
  prefs: []
  type: TYPE_NORMAL
- en: Here we will spend less time on styling or functionality such as design and
    validations but more on the core of the new `<form>` types of HTML5\. This form
    is best supported in browsers that support HTML5 features.
  prefs: []
  type: TYPE_NORMAL
- en: In this example, we will build a health survey form.
  prefs: []
  type: TYPE_NORMAL
- en: This example demonstrates a simple form, using basic HTML elements and new `<form>`
    elements, and the code should be self-explanatory.
  prefs: []
  type: TYPE_NORMAL
- en: Now, let us take a look at the code. The following code is the CSS of the form
    and is maintained in a separate file with a `.css` extension (external CSS file),
    which is linked to the main HTML page. Having a separate CSS file is also a good
    practice.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: The following code is the main HTML page in which we built the structure of
    the form. The `<fieldset>` tags are enclosed within the `<form>` tag.
  prefs: []
  type: TYPE_NORMAL
- en: The structure is broken into sections for better understanding. Moreover, the
    `<form>` types are highlighted in bold.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is a code snippet for displaying a form for personal information:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Downloading the example code**'
  prefs: []
  type: TYPE_NORMAL
- en: You can download the example code files for all Packt books you have purchased
    from your account at [http://www.packtpub.com](http://www.packtpub.com). If you
    purchased this book elsewhere, you can visit [http://www.packtpub.com/support](http://www.packtpub.com/support)
    and register to have the files e-mailed directly to you.
  prefs: []
  type: TYPE_NORMAL
- en: 'The output of the code is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Building an HTML5 form](img/4661OS_01_32.jpg)'
  prefs: []
  type: TYPE_IMG
- en: This section asks the respondents about their personal information such as name,
    address, and other details. We have used `<label>` with descriptive text and tied
    it to the form control.
  prefs: []
  type: TYPE_NORMAL
- en: We have also used the `autofocus` attribute on the first textbox so that an
    `<input>` element automatically gets focus when the page loads. The `placeholder`
    attribute is used several times in the first textbox as `First` to give a hint
    to the respondents of what is required as content. For date of birth, we have
    used the `<input>` type `date`, which opens as a calendar.
  prefs: []
  type: TYPE_NORMAL
- en: The basic HTML elements' `<input>` types, such as `radiobutton`, `textbox`,
    and the drop-down list have also been used.
  prefs: []
  type: TYPE_NORMAL
- en: Similarly, for the phone number field, the `<input>` type `tel` is used, and
    for the e-mail address field the `<input>` type `email` is used.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is a code snippet for displaying a general information form:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: 'The output of the code is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Building an HTML5 form](img/4661OS_01_33.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The top section of the form asks the respondents about general information,
    such as age, weight, height, and other information about their daily routine.
  prefs: []
  type: TYPE_NORMAL
- en: Here, we have used basic HTML `<form>` `<input>` types, such as `textbox`, `radiobutton`,
    and `checkbox` along with the new `<form>` attributes such as `placeholder,` for
    taking the inputs from the respondent.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following code snippet displays a form to store medical information:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: 'The output of the code is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Building an HTML5 form](img/4661OS_01_34.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Our final section of the form asks the respondents about their medical information.
    To get information about various diseases or symptoms a respondent has, we have
    used the basic HTML `<form>` `<input>` type `checkbox`.
  prefs: []
  type: TYPE_NORMAL
- en: '`Textarea` is a free text field, which contains detailed text and, in our case,
    allows the respondent to enter information, such as medication allergies and medication.
    The rows and columns of the `textarea` determine the displayable size of the `textarea`
    text field in the form. We can also set the limit by setting `maxlength` to restrict
    the respondent from entering lengthy details.'
  prefs: []
  type: TYPE_NORMAL
- en: '`radiobutton` is used to restrict the respondent from choosing only one option
    from multiple options.'
  prefs: []
  type: TYPE_NORMAL
- en: With the `<input>` type `number`, we created a spinner, which is a precise control
    for selecting the string represented by a number. Here, we have set the limit
    by setting the min value to `1` and the max value to `5`.
  prefs: []
  type: TYPE_NORMAL
- en: With the `<input>` type `range`, we created a slider, which is an imprecise
    control for setting the value to a string representing a number. Here, we have
    set the limit by setting the min value to `1` and the max value to `5`.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, the `<input>` type `submit` sends the data to the server.
  prefs: []
  type: TYPE_NORMAL
- en: Guidelines
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A good practice or guideline is to design and develop a standard approach, which
    has always shown better results.
  prefs: []
  type: TYPE_NORMAL
- en: 'Some of the best practices to create effective forms are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Use relevant content groupings to organize forms
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Minimize the amount of help and tips required to fill out a form
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Employ flexible data entry
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For long forms, show progress and save options
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Maintain a consistent approach
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Maintain a clear relationship between the initial selection options
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use inline validation of inputs that have potentially high error rates
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Provide actionable remedies to correct errors
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Disable the **Submit** button after a user clicks on it to avoid multiple submissions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Clearly communicate about the submission of data and provide feedback
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Maintain separate files for CSS and JavaScript
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Using best practices:'
  prefs: []
  type: TYPE_NORMAL
- en: Improves cross-browser compatibility
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Increases performance
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Saves time and reduces cost
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Project understanding becomes easy
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Code maintenance becomes easy
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we learned about forms and the benefits of using them. We have
    seen the difference between basic HTML forms and HTML5 forms.
  prefs: []
  type: TYPE_NORMAL
- en: We learned about the new `<form>` controls, `date`, `week`, `tel`, `email`,
    `range`, `numbers`, and many more for which we do not have to rely on JavaScript
    and how they work in the modern browsers.
  prefs: []
  type: TYPE_NORMAL
- en: We also built a sample form to get well versed with the forms and at the end
    of the chapter we learned the best practices to create effective web forms.
  prefs: []
  type: TYPE_NORMAL
- en: Overall, we've seen ways to reduce the amount of scripting and development time
    when users need to create full-featured forms with the help of HTML5.
  prefs: []
  type: TYPE_NORMAL
