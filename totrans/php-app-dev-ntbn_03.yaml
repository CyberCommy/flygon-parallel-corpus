- en: Chapter 3. Building a Facebook-like Status Poster using NetBeans
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we are going to build a cool PHP project using NetBeans IDE.
    Our plan is straightforward and simple.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'We will be creating a Facebook-like status poster through the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Planning the project
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a status stream display list
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a status poster using PHP-AJAX
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Most of the social networking platforms, such as Facebook, Twitter, and Google
    Plus, provide a status-posting feature among a user's friends, and also let the
    user view their friends' status posts. So, we will snoop around on how this works
    and how we can build alike. Let's choose to implement an interesting feature similar
    to the most popular social networking platform—Facebook.
  prefs: []
  type: TYPE_NORMAL
- en: Also, we will discuss MySQL database connection and PHP class creation along
    with our workflow. So, let's go for it...
  prefs: []
  type: TYPE_NORMAL
- en: Planning the project
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Proper planning of a project is crucial for the smart development and use of
    mockups, diagrams, and flow charts, so that the project can visualize the requirements
    easily. Moreover, it depicts what you are going to do, and how.
  prefs: []
  type: TYPE_NORMAL
- en: We will create a simple Facebook-like ([http://www.facebook.com](http://www.facebook.com))
    status poster, and add a list below it to display the status posts from friends,
    as well as your own statuses. In this single, frontend PHP application, we will
    exercise the JavaScript library **jQuery** ([http://jquery.com/](http://jquery.com/))
    to post the status with **AJAX** ([http://api.jquery.com/jQuery.ajax/](http://api.jquery.com/jQuery.ajax/)).
    The posted status will be displayed on top of the status stack without reloading
    the page.
  prefs: []
  type: TYPE_NORMAL
- en: While planning our project, we will view the final look of the web application
    in advance, and try to understand how we can place a particular functionality
    to work. To discuss various points of the workflow, we will have the workflow
    diagram as well.
  prefs: []
  type: TYPE_NORMAL
- en: Let's have a look at what we will be building in the final stage.
  prefs: []
  type: TYPE_NORMAL
- en: '![Planning the project](graphics/5801_03_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'This **Status Poster** will be functional in the following fashion:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Planning the project](graphics/5801_03_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: According to this figure, the user types in the status box and clicks on the
    **Share** button to trigger the bound JavaScript method inside `Status.js`, to
    post the status via AJAX to the server. The server-side script, `StatusPoster.php`,
    receives the status to save into the database, and responds with a success message
    after accomplishing the task. The frontend code receives the success notification
    and prepends the status at the top of the status post's display stack.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, we will break the project into two parts as follows, and will develop
    them accordingly:'
  prefs: []
  type: TYPE_NORMAL
- en: Status stream display list
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Status poster using PHP-AJAX
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We have gathered concepts regarding project workflow. So, we can start implementing
    the project right away, as per our planning. From this point, we will directly
    start PHP application development using NetBeans with a new PHP project, and make
    a good practice of the IDE. We know what to do, and within a few minutes we will
    learn how to do it.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding JSON-JavaScript Object Notation
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**JavaScript Object Notation (JSON)** is a lightweight, data-interchange format,
    and is easy for humans to read and write with. It is an easy format for machines
    to parse and generate, and is based on a subset of the JavaScript programming
    language. JSON is a text format that is completely language-independent.'
  prefs: []
  type: TYPE_NORMAL
- en: 'JSON is built on two structures:'
  prefs: []
  type: TYPE_NORMAL
- en: 'A collection of name/value pairs: In various languages, this is realized as
    an object, record, struct, dictionary, hash table, keyed list, or an associative
    array.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'An ordered list of values: In most languages, this is realized as an array,
    vector, list, or sequence.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'For example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Introducing jQuery-the definitive JavaScript library
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: jQuery is a fast and concise JavaScript library, which simplifies **DOM** (**Document
    Object Model**) traversing, event handling, animating, and AJAX interactions for
    rapid web development. jQuery is designed to change the way that you write JavaScript—[http://jquery.com/](http://jquery.com/).
  prefs: []
  type: TYPE_NORMAL
- en: 'Some of the reasons why we should use jQuery are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Free and open source software
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Lightweight footprint
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: CSS3-compliant
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Cross-browser
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Minimal code
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Off-the-shelf plugins
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In simple terms, jQuery enables you to produce powerful and dynamic user interfaces.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: With the help of various jQuery plugins, including image slider, content slider,
    pop-up boxes, tabbed content, and so on, the developer's job might be minimized,
    because all they have to do is tweak or customize the small parts of the jQuery
    plugin into bigger parts, which they've used to match their demands.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding AJAX-asynchronous JavaScript and XML
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Asynchronous JavaScript and XML** (**AJAX**) is a programming technique or
    approach used on the client-side to asynchronously retrieve the data from the
    server in the background, without interfering with the display and behavior of
    the existing page. Data is usually retrieved using the `XMLHttpRequest` object.
    Despite the name, the use of XML is not actually required, nor do the requests
    need to be asynchronous.'
  prefs: []
  type: TYPE_NORMAL
- en: The jQuery library has a full suite of AJAX capabilities. The functions and
    methods therein allow us to load the data from the server without a browser page
    refresh.
  prefs: []
  type: TYPE_NORMAL
- en: Introducing jQuery.ajax()
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Let's have a look at the sample `jQuery.ajax()` API.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'In the `$.ajax()` function, you can see that the AJAX configuration object
    (created using the JavaScript object literal) is passed into it, and those configurations
    can be described as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`url` denotes the URL of the server script to communicate with'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`type` denotes the HTTP request type; that is `GET/POST`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`data` contains the data to be sent to the server in the form of either a key
    value pair or as URL parameters'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`success` holds the AJAX success callback or method to perform on fetched data'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`error` holds the AJAX error callback'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Now, let''s have another example where `jQuery.ajax()` simply loads a JavaScript
    file from the server:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Here, `dataType` defines the kind of data to be retrieved from the server; such
    a kind can be XML, JSON, `script`, plain text, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: Introducing PHP Data Objects (PDO)
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The **PHP Data Objects** (**PDO**) extension defines a lightweight and consistent
    interface for accessing databases in PHP. PDO provides a data-access abstraction
    layer, which means that regardless of which database you're using, you use the
    same functions to issue the queries and fetch the data. PDO does not provide database
    abstraction; it doesn't rewrite SQL or emulate missing features. You should use
    a full-blown abstraction layer if you need that facility.
  prefs: []
  type: TYPE_NORMAL
- en: 'It''s worth mentioning that PDO supports prepared statements, which are:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Safer:** PDO or the underlying database library will take care of escaping
    the bound variables for you. You will never be vulnerable to SQL injection attacks
    if you always use prepared statements.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**(Sometimes) Faster:** Many databases will cache the query plan for a prepared
    statement and refer to the prepared statement with a symbol, instead of retransmitting
    the entire query text. This is most noticeable if you prepare a statement only
    once, and then reuse the prepared statement object with different variables.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: PHP 5.3 comes with a PDO and PDO_MYSQL driver built-in. More at [http://www.php.net/manual/en/book.pdo.php](http://www.php.net/manual/en/book.pdo.php).
  prefs: []
  type: TYPE_NORMAL
- en: Creating the NetBeans PHP project
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: After finishing planning the task, we are going the deal with its practical
    implementation.
  prefs: []
  type: TYPE_NORMAL
- en: Press *Ctrl+Shift+N* to start the new NetBeans PHP project and proceed with
    the creation of a new project as already discussed in [Chapter 1](ch01.html "Chapter 1. Setting
    up your Development Environment"), *Setting up your Development Environment*.
    Let's name the project as `chapter3` for our tutorial.
  prefs: []
  type: TYPE_NORMAL
- en: As we have created the PHP project, we will have the `index.php` file created
    automatically inside the project. So, the project can be located by pointing your
    browser to `http://localhost/chapter3/`.
  prefs: []
  type: TYPE_NORMAL
- en: Creating the status stream display list
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: According to the first part of our project, we will now create the status stream
    display list. In order to do this, we need a PHP class and a MySQL database, filled
    with some dummy data representing status posts. The PHP class, `StatusPoster.php`,
    will contain the MySQL database connection using the PDO inside its constructor,
    and a method to fetch the rows of status entries from the database.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up the database server
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To store and retrieve the status posts from the database, we connect with the
    MySQL database server, create the database and table to insert status entries,
    and fetch those entries to display within a status stream.
  prefs: []
  type: TYPE_NORMAL
- en: Time for action — connecting with MySQL database server
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this section, we will create a MySQL server connection by giving access
    credentials to the IDE, which displays a list of available databases under that
    connection in the IDE:'
  prefs: []
  type: TYPE_NORMAL
- en: First of all, we will create the MySQL database server connection inside the
    IDE; press *Ctrl+5* to bring the **Services** window to focus, expand the **Databases**
    node, right-click on **MySQL Database Server**, and choose **Properties** to open
    the **MySQL Server Properties** window, as shown in the following screenshot:![Time
    for action — connecting with MySQL database server](graphics/5801_03_03.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the previous screenshot, the IDE already filled in the default values for
    the MySQL server details, such as the hostname, port number, username, and the
    password you just added. You may update these details at any time, as and when
    you need to.
  prefs: []
  type: TYPE_NORMAL
- en: Click on the **Admin Properties** tab, which allows you to enter the information
    for controlling your MySQL server. Click on the **OK** button to save the setting.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, you should have all the available databases listed under the **MySQL Server**
    node, as shown in the following screenshot:![Time for action — connecting with
    MySQL database server](graphics/5801_03_04.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What just happened?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We have successfully connected with the MySQL server and listed all the databases
    available for the provided database user. We actually made the MySQL databases
    accessible from the IDE, so that we can directly operate any sort of database
    queries from the IDE in a quick way. Now, we will create a new database and table
    in there.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: See *Appendix* for NetBeans IDE keyboard shortcuts.
  prefs: []
  type: TYPE_NORMAL
- en: Creating the database and table
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: It's a common practice to have separate databases for each project. So, we will
    use a new database for our project, and a table to store entries. The IDE provides
    excellent GUI facilities for database management, such as SQL editor, query output
    viewer, and table viewer with column list.
  prefs: []
  type: TYPE_NORMAL
- en: Time for action — creating MySQL database and table
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: From the **MySQL Server** node, we shall create a new database and run a query
    to create the table along with the necessary column fields.
  prefs: []
  type: TYPE_NORMAL
- en: From the **Services** window, right-click on the **MySQL Server** node, and
    select **Create Database...**. A new dialog box will appear, as shown in the following
    screenshot:![Time for action — creating MySQL database and table](graphics/5801_03_05.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter the name `status_poster` as the value for the **New Database Name** field.
    Leave the checkbox for **Grant Full Access to** unselected. You may grant access
    to a given user, using this checkbox and drop-down list. By default, the `admin`
    user has all the permissions.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on **OK** to have the new database listed under the server node, and also
    to have the new database connection node created under the **Databases** node,
    as shown in the following screenshot:![Time for action — creating MySQL database
    and table](graphics/5801_03_06.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: According to this screenshot, there are three subfolders under the status_poster
    connection node—**Tables, Views,** and **Procedures**.
  prefs: []
  type: TYPE_NORMAL
- en: Now, to create a new table in our database, right-click on the **Tables** folder
    and choose **Execute Command...** to open the **SQL Editor** canvas in the main
    window, as follows:![Time for action — creating MySQL database and table](graphics/5801_03_07.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the SQL editor, type the following query to create the new `Status` table:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: As you can see, we have `id` (auto incremented with each entry) as the primary
    key in the `status` table. We have the `name` field to store user names of up
    to `50` characters. Th`e image` field will store user thumbnail images of up to
    `100` characters. The status field will store user status posts of maximum 500
    characters, and the `timestamp` field will keep a track of the time when the status
    was posted. The database engine has chosen `MyISAM` to provide faster table entries.
  prefs: []
  type: TYPE_NORMAL
- en: So, all you need to do is just type in the MySQL query inside the NetBeans query
    editor, and run the query to have your database ready.
  prefs: []
  type: TYPE_NORMAL
- en: To execute the query, either click on the **Run SQL** button in the task bar
    at the top (*Ctrl+Shift+E*), or right-click within the SQL editor and choose **Run
    Statement**. The IDE then generates the status table in the database, and you
    will receive a message similar to the following in the **Output** window:![Time
    for action — creating MySQL database and table](graphics/5801_03_08.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You will also have your table status listed under the **Table** subfolder, under
    the `status_poster` database connection, as shown in the following screenshot:![Time
    for action — creating MySQL database and table](graphics/5801_03_09.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In this screenshot, the expanded status table shows the created columns with
    the primary key marked in red.
  prefs: []
  type: TYPE_NORMAL
- en: What just happened?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The IDE reveals the database management features; the creation of all those
    databases and tables can be done with a few clicks and keystrokes. Queries can
    be run within the IDE in a prompt manner, and the SQL command's execution output
    is displayed in a separate window. Next, we will insert a few sample entries into
    the created table to display them at the status stream list. We have to add some
    demo user-image files as well for this tutorial.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You can create a table by using the **Create Table** wizard, in **Database Explorer—right-click**
    on the **Tables** node and choose **Create Table**. The **Create Table** dialog
    box opens, from where you can add columns for the table with specific attributes.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: See *Appendix* for NetBeans IDE keyboard shortcuts.
  prefs: []
  type: TYPE_NORMAL
- en: Inserting sample rows into the table
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Right-click on the `status` table under the **Tables** subfolder, choose **Execute
    Command...**, and type the following query in the SQL editor, to insert some sample
    rows into the `status` table:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: You can see that we have a few MySQL `INSERT` queries to store some test users'
    data, such as name, image, status post, and Unix timestamp, for the status stream
    display list. Each such `INSERT` query inserts a row into the `status` table.
  prefs: []
  type: TYPE_NORMAL
- en: 'So, we have some sample rows in our table. In order to verify that the records
    have been added to the `status` table, right-click on the `status` table and choose
    **View Data...**. A new SQL editor tab opens in the main window with the `select
    * from status` query inside the SQL editor. Executing this statement will generate
    a tabular data viewer in the lower region of the main window, as shown in the
    following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Inserting sample rows into the table](graphics/5801_03_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: This SQL query is quite self-explanatory, where the `SELECT` keyword is used
    to select data from the table, and the SQL shorthand`-*` is used to denote that
    all the columns should be selected from the table.
  prefs: []
  type: TYPE_NORMAL
- en: Adding sample user image files
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this tutorial, we have inserted some sample rows to the `status` table; in
    the `image` column, we have some user image filenames, which we actually stored
    under the `user` folder, inside the project's `images` directory. Those sample
    user images can be found inside the project's source of this chapter. Download
    this complete project source from the Packt Publishing website and copy the sample
    user images.
  prefs: []
  type: TYPE_NORMAL
- en: To create a subfolder inside the `project` folder, right-click on the `chapter3`
    project node, and select **New | Folder...**; type the folder name `images` inside
    the **New Folder** dialog box, and click on **Finish** to create the folder. Now
    create another folder under the `images` directory named "user" in the same way,
    and put the copied sample user image files there.
  prefs: []
  type: TYPE_NORMAL
- en: Creating the StatusPoster PHP class
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The purpose of the `StatusPoster` PHP class is to query the database for fetching
    and inserting status entries. A method of this class will be used to insert the
    status entries into that database table, and another method will be used to perform
    the action of fetching entries from the table. Simply, the class will serve as
    a database agent and can be used for necessary database operations.
  prefs: []
  type: TYPE_NORMAL
- en: Time for action — creating a class, adding a constructor, and creating methods
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We will create the `StatusPoster.php` file and the class skeleton using the
    NetBeans code template, and to create methods within the class, we will use the
    `function` template as well. We will create a MySQL database connection using
    a PDO inside the class constructor, so that the database connection is created
    along with the object instantiation and `getStatusPosts()` method to fetch the
    status posts from the table.
  prefs: []
  type: TYPE_NORMAL
- en: From the **Projects** pane, right-click on project name `chapter3`, select **New
    | PHP File...**, and name the file `StatusPoster`, as shown in the following screenshot:![Time
    for action — creating a class, adding a constructor, and creating methods](graphics/5801_03_11.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on **Finish** to have the file added to our project and automatically
    opened in the editor. You will see PHP starting and ending tags placed inside
    the file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In order to create the PHP class skeleton, we will use PHP code templates. We
    type `cls` and press the *Tab* key to obtain the class skeleton with a constructor
    inside, as follows:![Time for action — creating a class, adding a constructor,
    and creating methods](graphics/5801_03_12.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the preceding screenshot, `classname` is already selected. You will just
    have to type `StatusPoster` as the value for `classname`, and press the *Tab key*
    to select the constructor name, as shown in the following screenshot:![Time for
    action — creating a class, adding a constructor, and creating methods](graphics/5801_03_13.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The constructor name remains intact, as it is the default PHP 5 naming convention
    for the constructor.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, add some class constants and attributes to hold the database credentials,
    as shown in the following code snippet:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: You can see the class constants added, which contain database information, such
    as the database server name, username, password, and database name, respectively.
    A `private` class variable `$db` has been added to hold the database connection
    inside a PDO object. You may modify those constants as per your own requirements.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Private:** This property or method can be used only by the class or object
    that it is a part of; it cannot be accessed elsewhere.'
  prefs: []
  type: TYPE_NORMAL
- en: 'To fetch the status posts from the `status` table, we will add an empty method
    named `getStatusPosts` inside the class. To do this, type `fnc` and press *Tab*
    to have the empty function code generated with the selected function name. Type
    the selected function name as `getStatusPosts`, and drop the parameter `$param`
    variable this time. Our class skeleton will look similar to the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: We have our class skeleton ready, and we shall add code inside those class methods.
    Now, we will create the database connection code inside the constructor.
  prefs: []
  type: TYPE_NORMAL
- en: 'To connect MySQL using PDO, type the following lines inside the class constructor
    so that it looks similar to the following code snippet:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: '`public function __construct ()` connects with the MySQL database using a PDO—the
    database connection in terms of a PDO instance is stored in the class''s private
    variable.'
  prefs: []
  type: TYPE_NORMAL
- en: The `$dsn` variable contains **Data Source Name (DSN)**, which holds the information
    required to connect to the database. One of the biggest advantages of using PDO
    is that if we want to migrate to other SQL solutions, then all we need to do is
    adjust the DSN parameter string.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following line creates a PDO instance to represent a connection to the
    requested database, and returns a PDO object on success:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Note that it throws a `PDOException` exception if the attempt to connect to
    the requested database fails.
  prefs: []
  type: TYPE_NORMAL
- en: 'To select the status posts from the table, we shall write a `select` query
    with the help of an auto completion code inside the `getStatusPosts` method. As
    we discussed in the previous chapter, SQL code completion begins with the SQL
    keyword `SELECT` and by pressing *Ctrl+Space bar*. So, we will proceed according
    to these steps and write the following query code inside this method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: With this code, we selected columns (`name, image, status,` and `timestamp`),
    from the table status ordered by timestamp, in descending order. We also selected
    id in ascending order, by default. The `prepare()` method prepares the SQL statement
    to be executed by the `PDOStatement::execute()` method. After the `execute()`
    method, if rows are found, then it fetches and returns all the table entries.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, we will instantiate an object of this class at the bottom of this file,
    with the following line:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: What just happened?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The PDO instance is created at the class constructor and is stored in the `$db`
    variable, so other member methods can access this class variable as `$this->db`,
    to use PDO methods such as `prepare(), execute()`.
  prefs: []
  type: TYPE_NORMAL
- en: Calling `PDO::prepare()` and `PDOStatement::execute()` for statements that will
    be issued multiple times optimizes the performance, by caching of the query plan
    and meta information, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: Up to now, we have our database operations code ready inside `StatusPoster.php`.
    We will create an HTML user interface to display the status list fetched from
    the database table status.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: See *Appendix* for NetBeans IDE keyboard shortcuts.
  prefs: []
  type: TYPE_NORMAL
- en: Pop quiz — understanding PDO
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Which one is not a PDO feature?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Prepared statements
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Bind value
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Bind object
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Data access abstraction
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Firing the user interface for displaying the status list
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The HTML user interface will display the status list retrieved by the `getStatusPosts`
    method from the `StatusPoster` class, and the user will be able to view the list
    of status posts from his test friends along with his own posts. The interface
    will use jQuery and the status list styled by the CSS classes.
  prefs: []
  type: TYPE_NORMAL
- en: Time for action — adding CSS support to the document
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We shall use `index.php` as our single page interface for the application,
    and will add the CSS stylesheet support to the document. To maintain practice,
    we will try to put style attributes into classes, so that they become reusable
    and can be utilized as an element''s class name whenever a specific class of styles
    is required. So, let''s create the CSS classes first:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a folder named `styles` inside our project source directory for our CSS
    file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'To create a **Cascading Style Sheet** where CSS classes reside, right-click
    on the `styles` folder inside the project, select **New | Cascading Style Sheet**
    from the **New Cascading Style Sheet** dialog box, name the CSS file as `styles.css`,
    and hit **Finish**. Drop all the comments and code blocks in the opened CSS file.
    Type the following style classes in the CSS file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: We will use a `container` class to apply styles on the application interface
    container `<div>` inside the document body; `ul` li will represent the listed
    items, which are status `li` items with the parent `ul` element, and other HTML
    elements, such as h1, `img`, and `textarea`, which are also styled using CSS classes.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following PHP code snippet at the top of the `index.php` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: We have defined a PHP constant for defining the base URL for the web application.
    The base URL can be used to provide an absolute path for the project asset files
    (CSS or JS files). You may put your project directory name in place of [Chapter
    3](ch03.html "Chapter 3. Building a Facebook-like Status Poster using NetBeans").
  prefs: []
  type: TYPE_NORMAL
- en: Now, add the following line to your `index.php` document heading below the `<title>`
    tag, to include the CSS file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: With this line, we have embedded the CSS file into our HTML document. Here,
    `BASE_URL` tells us that the file `styles/styles.css` is available under the project
    directory. So, our interface elements will inherit styles from the `styles.css`
    file.
  prefs: []
  type: TYPE_NORMAL
- en: What just happened?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In order to maintain a consistent interface over browsers, various HTML elements
    have been styled using the CSS classes, and some classes are written from where
    the assignee elements will inherit the styles.
  prefs: []
  type: TYPE_NORMAL
- en: 'In order to maintain the CSS code to minimum lines, comma separated classes
    or element names have been used for sharing common attributes, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Here, the `padding:5px`; style will be applied to the mentioned elements or
    with the given classes. Therefore, common attributes among the classes can be
    mitigated in this way.
  prefs: []
  type: TYPE_NORMAL
- en: 'To understand the class reusability issue, let''s have a look at the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: We can use `left` as the class name for multiple elements, which need the `float:left`
    style, such as `<div class="left">, <img class="left" />`, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: Time for action — adding jQuery support and custom JS library
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We will add a jQuery (a JavaScript library; more at [http://jquery.com/)](http://jquery.com/))
    support to the document and create a jQuery-based, custom JS library.
  prefs: []
  type: TYPE_NORMAL
- en: 'For the JS library, we will create a separate JavaScript file, `status.js`,
    where the interface JS code will reside to serve interface tasks, such as posting
    statuses via AJAX and some utility methods for displaying the local date-time.
    So, let''s create our custom JS library:'
  prefs: []
  type: TYPE_NORMAL
- en: 'To add the jQuery support from Google Content Delivery Network (CDN) to our
    document, add the following lines to your `index.php` document heading below the
    `<link>` tag:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: With this line, we have the latest jQuery version from the CDN. Note that version
    1.7 means the latest available version, which is 1.7.X, unless you have specified
    the exact number, which is 1.7.2 or greater. Now, our document is jQuery-enabled
    and ready to use the jQuery features.
  prefs: []
  type: TYPE_NORMAL
- en: 'To create the jQuery-based custom JS library, add a new JavaScript file inside
    the `js` folder, and name it as `status.js`. Include the file in your document
    head, so that the `<head>` tag looks similar to the following code snippet:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, create the `Status` JS library skeleton inside the `status.js` file, as
    follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: You can see that the variable `Status` contains an object using the JavaScript
    object literal (key value pairs enclosed within curly braces).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: Note that the library code is wrapped with the jQuery `$(document).ready()`
    function.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s write some utility JavaScript methods inside the `status` object and
    type the following `currentTime ()` method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: The `currentTime ()` method returns the local time converted from the Unix timestamp.
    Remember that if the timestamp is not present, then it returns the current local
    time. A sample output could be 3:22 AM or 2:30 PM.
  prefs: []
  type: TYPE_NORMAL
- en: You can see that in the line `var currentTime = new Date(timestamp * 1000);`,
    the Unix timestamp has been converted to the JS timestamp in milliseconds, and
    a new Date object has been created. Hours and minutes are picked from the `currentTime.getHours()`
    and `currentTime. getMinutes ()` methods, respectively. Note that the `currentTime
    () method` is delimited with a comma (,).
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the `currentDate ()` method inside the `Status` object, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: The `currentDate ()` method returns the converted local date. Similar to the
    previous method in `step 4`, it fetches the date, month, and year from the Date
    object.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, add the `getLocalTimeStr ()` method as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: The above method returns the formatted time and date concatenated in a string.
  prefs: []
  type: TYPE_NORMAL
- en: What just happened?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: jQuery provides us with a special utility on the document object called `ready`,
    allowing us to execute the code only after the DOM has completely finished loading.
    Using `$(document).ready()`, we can queue up a series of events and have them
    executed after the DOM is initialized. The `$(document).ready()` method takes
    a function (anonymous) as its argument, which is passed to be called after the
    DOM has finished loading, and executes the code inside the function.
  prefs: []
  type: TYPE_NORMAL
- en: If you are developing code for distribution, it's always important to compensate
    for any possible name clashing. So we passed `$` as an argument for the anonymous
    function. That `$` refers to `jQuery` inside, and hence the other `$` functions,
    which are imported after the script, don't conflict.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, to obtain the local date and time from the UNIX timestamp, we have
    added the utility methods in our custom JavaScript library. As for a usage example,
    the `currentDate()` utility method can be called as `this.currentDate()and Status.currentDate()`
    from the object's inside and outside scope, respectively.
  prefs: []
  type: TYPE_NORMAL
- en: Time for action — showing the status list
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We shall put the interface elements inside `index.php`, and embed the PHP code
    in an appropriate way. So, let''s go through the steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Modify the `index.php` file inside the `<body>` tag, drop the PHP tag, and
    place the status entries in the `<div>` container tag and elements, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: From this code, you can see that our application interface will be within the
    `<div>` container with the id container, and the `<ul>` tag will hold the inner
    `<li>` items' stack containing the status posts from the users, which will be
    populated by some PHP codes.
  prefs: []
  type: TYPE_NORMAL
- en: 'Above the `<!DOCTYPE html>` tag, at the top PHP code snippet of the `index.php`
    file, type the following lines to integrate the `StatusPoster` class so that the
    code snippet looks similar to the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: From the code, the PHP class file is required once to integrate the class, and
    use its instance into our application. At this line, we called the `getStatusPosts()`
    method of the `$status` object to get all the status entries from the database,
    and the returned resultant array is stored into `$result` as well.
  prefs: []
  type: TYPE_NORMAL
- en: 'To display a status stream, we will write the following PHP code to loop through
    the `$result` array inside the `<ul>` tag:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'At first, the `$result` array has been verified for its proper type. We looped
    through the array to have each entry into the `$row` variable. The preceding server
    script generates one `<li>` item for each status entry, and each `<li>` item contains
    a user image, a hyperlinked name, a user status text, and a UNIX timestamp element.
    Note that the timestamp has been dumped into the `data-timestamp` attribute of
    a `span` element with the class name `localtime`. For a better understanding,
    an item skeleton of the status list is shown in the following diagram:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Time for action — showing the status list](graphics/5801_03_14.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Now, we need to convert the PHP-dumped timestamp inside the `data-timestamp`
    attribute using the jQuery code, as soon as the DOM is ready. Add the following
    method inside the `Status` object of the library `status.js:`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: The method, using jQuery selector, selects all the span elements having the
    data-timestamp attribute with `$('span.localtime[data-timestamp]');.` For each
    element, it parses the timestamp with `$(this).attr('data-timestamp')`, and passes
    to `Status.getLocalTimeStr()` to obtain the local time string. Finally, it sets
    the inner HTML of each `span` element with that local time string.
  prefs: []
  type: TYPE_NORMAL
- en: 'To enable `Status.showLocalTime()` to work immediately with DOM, call the method,
    as follows, before the termination line of `ready()` method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: So, the users will be displayed with their local date and time under each post.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, point your browser with the project URL, or press the **Run Project
    (chapter3)** button from the toolbar, or press *F6* from the IDE to have the status
    stream display the list, which looks similar to the following screenshot:![Time
    for action — showing the status list](graphics/5801_03_15.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What just happened?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The PHP script dumps the `<li>` items inside the `<ul>` tag, and the interface
    JS code `Status.showLocalTime()`; parses the dumped timestamp and displays it
    in the user's local time, as soon as the DOM is ready. In case we display the
    date and time from the UNIX timestamp without the time zone conversion, then we
    may have to deliver the server's date and time, which may not conform to the user's
    time. Again, the user's local timezone is unknown to the server and known to the
    client interface. So in a quick way, we used a client-end code to solve the local
    time display issue.
  prefs: []
  type: TYPE_NORMAL
- en: Hence, we've completed the first part of our project. We have created the interface
    where the status stream looks like Facebook.
  prefs: []
  type: TYPE_NORMAL
- en: Until now, we have been able to deal with the database operation using the IDE,
    and with the PHP class and method creation using the NetBeans code template, we
    have also been able to create the necessary user interface files for our web application.
  prefs: []
  type: TYPE_NORMAL
- en: Have a go hero — tweaking the CSS
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For large status posts, the interface can be found broken inside each `<li>`,
    so it would be best to fix the user interface issue. You may add fixed width into
    the `.content` class in the corresponding CSS file.
  prefs: []
  type: TYPE_NORMAL
- en: Pop quiz — understanding CSS
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: What does CSS stand for?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Cascaded Style Sheet
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Cascading Style Sheet
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Colorful Style Sheet
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Computer Style Sheet
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What is the correct HTML format for referring to an external stylesheet?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`<link rel="stylesheet" type="text/css" href="mystyle.css">`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`<style src="mystyle.css">`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`<stylesheet>mystyle.css</stylesheet>`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What property needs to be added into the CSS class to have some space around
    that element?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`padding`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`margin`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`padding-bottom and padding-top`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`display`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Hatching out the status poster using PHP-AJAX
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The user's status text should be submitted to the server without reloading the
    page. To do this we can use the AJAX approach, where the user's data can be sent
    to the server with the HTTP methods, and wait for the server's response. As soon
    as the server responds, we can parse the response data and may take our decision
    programmatically. In our case, if the server responded with a success result,
    we will update our interface DOM according to that.
  prefs: []
  type: TYPE_NORMAL
- en: Simply, we will use AJAX to submit the user's status text with the `HTTP POST`
    method to our server-side PHP code residing at `index.php`, and we will configure
    the expected data type from the server to be JSON. So, we can easily parse the
    JSON and determine whether the status was saved successfully or not. From a successful
    server response, we can update the status stream display list and place the newly
    posted status at the top of that list. However, in the case of any failure or
    error, we can parse the error message and display that into the interface as well.
  prefs: []
  type: TYPE_NORMAL
- en: Time for action — adding the status input box to the interface
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we will simply add an HTML form consisting of one text area
    for the status post and a **Submit** button for the form submission. We will add
    the form wrapped with a `div` element before the `<ul>` tag at `index.php`.
  prefs: []
  type: TYPE_NORMAL
- en: 'In order to add the status poster box, we add the following HTML code inside
    the `div#container`, before the `<ul>` tag:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: So, the `div.inputbox` will contain the status input box with a `share` or `submit`
    button. `div#postStatus` will display the post submission progress information
    status that conveys it, whether the status was successfully posted or not. We
    will use some fancy loading `.gif` image while the AJAX post is in progress. The
    `ajaxload.gif` image is also kept inside the project's `images` directory.
  prefs: []
  type: TYPE_NORMAL
- en: Now, refresh your browser with the project URL, and the status input box should
    look similar to the following screenshot:![Time for action — adding the status
    input box to the interface](graphics/5801_03_16.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What just happened?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Check out the line where the `form` tag opened, `<form id="statusFrom" action="index.php"
    method="post" >`. The form can be selected with the `id` attribute using the jQuery
    `action` attribute that contains the script name as `index.php`, which means that
    it will be posted to the same file we are working on. You can see that the `method`
    attribute contains the HTTP method type in which the form will be submitted. We
    don't need the `action` and `method` attributes for the jQuery code. Rather, we
    will keep them in this case. If the browser's JavaScript is disabled, then we
    could still submit the form to `index.php` in the `POST` method.
  prefs: []
  type: TYPE_NORMAL
- en: Note that `div#postStatus` is hidden by default using the CSS class `hidden`,
    and will be visible only while AJAX works in progress.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: See *Appendix* for the NetBeans IDE keyboard shortcuts.
  prefs: []
  type: TYPE_NORMAL
- en: Adding new status post template to index.php
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We need to maintain a separation of behavior while coding, as HTML markups shall
    be kept separate from JavaScript codes. Also, we need to update the status stream
    display list, and put the new status post at the top of the list without page
    reloading.
  prefs: []
  type: TYPE_NORMAL
- en: We know that each status entry can be organized inside an `<li>` item, where
    inside that item, the entry values such as username, image, and status post with
    local date-time mentioned beneath, should be crafted with appropriate markup elements.
    So, we need to create an entry template for the new status post. Using the template,
    JavaScript code can generate a new interface entry to be placed on top of the
    status stream.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following template inside the document `<body>` tag, below the `div#container`
    ending tag:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: We can see that there are placeholders, such as `#SRC` for the profile picture's
    image URL, `#NAME` for name of the user for the entry, `#STATUS` for status text,
    and `#TIME` for local date-time. By making a copy of this template, these placeholders
    can be replaced with appropriate values and prepended at the `<ul>` element. Note
    that the entire template is kept inside a hidden `div` element to exclude it from
    the user's view.
  prefs: []
  type: TYPE_NORMAL
- en: Creating the AJAX status poster
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: AJAX is used to communicate frequently from a browser to the web server. Such
    a famous technique is being vastly used in **Rich Internet Applications** (**RIA**),
    and jQuery provides a very simple AJAX framework. The AJAX poster will post the
    status texts without page reloading, and will update the status stack with the
    latest status entry at the top.
  prefs: []
  type: TYPE_NORMAL
- en: Time for action — creating status poster using JQuery AJAX
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We will create a `post()` method inside the `status.js` library, and bind the
    method with the click event on the **Submit** button. We will create the method
    by adding code lines one after another, as shown in the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'At our `status.js` library, type the following `post()` method, terminated
    with a comma, to add it inside the `Status` library:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: At the variable declaration section, the `myname` and `myimage` variables contain
    a demo logged-in, user's name and profile picture URL. The `loadingHtml` contains
    the img tag for displaying the loading GIF animation. Also, you can see that `statusTxt`
    contains the status box value obtained using `$('#status_box').val()`, and `postStatus`
    caches the `div#postStatus` element.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, add the following line after the variables declaration section within
    the `post()` method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: This code validates `statusTxt` if it is empty or if it contains a default input
    message, and even if it is within the maximum input limit of 500 characters. The
    method is returned after the execution, if any such validation fails.
  prefs: []
  type: TYPE_NORMAL
- en: To display animation loading while the AJAX operation is in progress, we can
    add the following line after the previous line *(step 2):*
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: It fades in `#postStatus` of the div element with the loading image inside.
  prefs: []
  type: TYPE_NORMAL
- en: Now, it's time to add the AJAX feature inside the method. Add the following
    jQuery code after the previous line *(step 3):*
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: In this code, you can see that the AJAX skeleton is added, and the jQuery `$.ajax()`
    method passed with configuration object. The configuration object is created using
    the JavaScript object literal technique. You can see those key-value pairs; for
    example, `data` contains the serialized values of the form using `$('form').serialize(),
    url` holds the server URL where the data is to be submitted, `dataType` is given
    as JSON so that we will have a JSON object passed inside the `success()` callback
    method. Check out the default `success` and `error` callback methods; you can
    see a variable `response` passed into the `success` callback, which is actually
    a JSON object fetched from the server using AJAX.
  prefs: []
  type: TYPE_NORMAL
- en: 'On successful AJAX submission, let''s type the following code inside the `success`
    callback method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: As `response` passed-in is a JSON object, we examine the `response` object for
    the `response.success` attribute, which contains Boolean true or false values.
    If the `response.success` attribute is not set to `true`, then display the error
    message from response.error inside the element `div#postStatus`.
  prefs: []
  type: TYPE_NORMAL
- en: So, for a success response from the server, we display the message inside `successMsg`
    and clear the input `text_area#status_box` value for the next input. Now, in the
    line `var statusHtml = $('#statusTemplate').html();`, we cached the entry template
    inside the `statusHtml` variable. At the consecutive lines, we have replaced the
    placeholders with proper entry values, and finally prepended the new entry item
    in the `<ul>` element, using the line `$('#container ul').prepend(statusHtml)`.
  prefs: []
  type: TYPE_NORMAL
- en: 'In order to trigger `Status.post()` with the event, we bind the method with
    the *click* event on the `Submit` (**share**) button. Add the following code inside
    `status.js` library before the termination of the `$(document).ready()` method
    (after `Status.showLocalTime()` line):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: What just happened?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We have serialized the form values to be sent to the server via AJAX, and the
    server response was parsed by the jQuery AJAX feature to obtain a JSON object
    inside the `success` callback method. We examined whether the `response` object
    carries the `success` flag or not. In case a success flag was found, we used it
    to parse the status entry template to prepare the entry HTMLs and prepend the
    entry at the top of the status list.
  prefs: []
  type: TYPE_NORMAL
- en: So, we have the AJAX status poster method `post()` bound with the status **Submit**
    button, which fires with a click on the button. Note that we reflect the `success`
    or `error` messages at the user interface while the `post()` method executes,
    and even displays the loading animation. Hence, we made our application responsive.
  prefs: []
  type: TYPE_NORMAL
- en: Now, let's add the server code to respond to the AJAX request.
  prefs: []
  type: TYPE_NORMAL
- en: Working with StatusPoster.php again
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'To insert an entry into the database table''s `status` field, we add a `StatusPoster`
    method to our PHP class, named `insertStatus` as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: The method takes the field values passed in an associative array, `$values`,
    prepares the MySQL insert query for the `status` table, and executes the query.
    Note that we have kept the field names in the `$fields` array and the field values
    in the `$vals` array extracted from the keys and values of the passed arrays.
    We have used `?` in place of all the given values for the prepared statement,
    each of which will be replaced with corresponding values bound with the `PDOStatement::bindValue()`
    method. The `bindValue()` method binds a value to a parameter.
  prefs: []
  type: TYPE_NORMAL
- en: Note that variables containing direct user input should be escaped in order
    to make this data safe before sending in a query to MySQL. A PDO-prepared statement
    takes care of the escaping bound values for you.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, the method returns, irrespective of whether the `execute()` method
    was successful or not.
  prefs: []
  type: TYPE_NORMAL
- en: Adding AJAX responder code to index.php
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Add the following AJAX responder code inside the PHP code located at the top
    of the `index.php` file, below the line `require_once 'StatusPoster.php';:`
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: This code checks if there is any `POST` value contained by `$_POST['status']`;
    if yes, it trims the posted status value, and determines the length of the posted
    status string contained in `$statusStr`. The length is measured using the multi-byte,
    string length function `mb_strlen()`. If the string length is within the mentioned
    range, compact the status entry values with the associated database column names
    within an array, and pass the `insertStatus` method of the `StatusPoster` class
    to save the status.
  prefs: []
  type: TYPE_NORMAL
- en: As the `insertStatus` method returns `true` for successful database insertion,
    we kept the returned value into the `$success` variable. Also, an AJAX request
    can be identified at server by verifying the `$_SERVER['HTTP_X_REQUESTED_WITH']`
    value is `XMLHttpRequest`.
  prefs: []
  type: TYPE_NORMAL
- en: So, for an AJAX request, we will deliver the JSON string; `{"success":true}`
    for `$success` contains Boolean `true`, or `{"error":"Error posting status"}`
    for `$success` contains Boolean `false`.
  prefs: []
  type: TYPE_NORMAL
- en: Therefore, checking for the value `XMLHttpRequest` ensures the JSON string delivery
    only for the AJAX request. Finally, the preceding PHP code inserts the status
    post with or without the AJAX request. So, in the case where JavaScript is disabled
    in the client browser, the status poster form can still be submitted and the submitted
    data could be inserted as well.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The complete project source for this chapter can be downloaded from the Packt
    website URL.
  prefs: []
  type: TYPE_NORMAL
- en: Testing the usability of the status poster
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We have the status poster project ready. The interface JavaScript code posts
    to the server, the server-side code performs the instructed actions and response,
    and the interface code updates the DOM along with the response.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can test the status poster by typing in the box with your status texts,
    and clicking on the **Share** button. With the **Share** button-click, you should
    see a loading image below the input box. Within a few moments, you will see a
    **Status posted successfully** message, as the status gets prepended at the status
    display list. Finally, immediately after a status **"hello world"** has been posted,
    the screen looks similar to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Testing the usability of the status poster](graphics/5801_03_17.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The completed project directory structure looks similar to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Testing the usability of the status poster](graphics/5801_03_18.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Pop quiz — Reviewing jQuery knowledge
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Which sign does jQuery use as a shortcut for jQuery?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The `?` Sign
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The `%` sign
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The `$` sign
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The jQuery sign
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Which of the following is correct, to get the value of an input box using the
    `#element_id` ID?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`$(''#element_id'').value()`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`$(''#element_id'').text()`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`$(''#element_id'').html()`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`$(''#element_id'').val()`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Which of the following returns the length of a string stored inside the `stringVar`
    variable in JavaScript?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`stringVar.size`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`length(stringVar)`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`stringVar.length`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What will be the correct statement to add a `DIV` element, inside at the beginning
    of another element?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`$(''#container'').append(''<div></div>'')`;'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`$(''#container'').html(''<div></div>'')`;'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`$(''#container'').prepend(''<div></div>'')`;'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Which one of the following will cause an element to disappear gradually?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`$(''#element'').hide()`;'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`$(''#element'').fadeOut(''slow'')`;'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`$(''#element'').blur(''slow'')`;'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Which one of the following will be the correct code to obtain the inner HTML
    of `element1` to use as inner HTML of `element2?`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`$(''#element2'').html( ) = $(''#element1'').html( )`;'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`$(''#element2'').html( $(''#element1'').innerHTML )`;'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`$(''#element1'').html( $(''#element2'').html() )`;'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`$(''#element2'').html( $(''#element1'').html( ) )`;'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Have a go hero — sanitizing the status input
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Since the status input provided by the user is not sanitized enough, there are
    chances that raw markups or HTML tags placed inside the input will break the interface.
    So, sanitize the status input properly, and also take care of the JavaScript code
    that displays this new status entry without refreshing the page on success of
    AJAX. You may strip tags using the `trip_tags()` method from the input before
    inserting it into the `INSERT` query, if you wish not to allow tags. Again you
    may use the PHP `htmlspecialchars()` function if you wish to keep the tags. You
    have to refactor your JS codes as well; that is, you may use `$('#status_box').text()`
    instead of `$('#status_box').val()`.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we have done a real-life PHP project, and we are now able to
    create and maintain a PHP project using the NetBeans IDE. Also, we are now familiar
    with the usage of the IDE for faster development. Practicing those keyboard shortcuts,
    code completion short codes, code generators, and other IDE features will quicken
    your pace and smoothen your development. All these features are meant to simplify
    your tasks and make your life easier.
  prefs: []
  type: TYPE_NORMAL
- en: 'We have specially worked on:'
  prefs: []
  type: TYPE_NORMAL
- en: Setting up the database
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating the JavaScript library
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Real-life, PHP AJAX, web application development
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using NetBeans code templates
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: So far, we have developed a PHP project using NetBeans. In the next chapter,
    we will perform debugging and testing on some demo PHP projects to have more skills
    in dealing with critical moments in a project.
  prefs: []
  type: TYPE_NORMAL
