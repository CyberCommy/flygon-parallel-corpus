- en: Testing an Ionic 2 App
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we are going to look at testing a Mobile Hybrid app built
    using Cordova (and Ionic 2). Testing can be done in multiple layers, the first
    being unit testing, followed by end-to-end testing, and finally deploying the
    app on to an actual device and executing tests. In this chapter, we are going
    to take the Ionic 2 Todo app we have built in [Chapter 8](part0133.html#3UQQQ0-9757c8e51afd47e0a7a9ced32db749b8),
    *Ionic 2 Migration Guide* and execute the following tests on it:'
  prefs: []
  type: TYPE_NORMAL
- en: Unit testing
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: End-to-end testing
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Monkey OR Fuzz testing with AWS Device Farm
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Testing with AWS Device Farm
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Testing methodologies
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In the world of app development, there are two ways in which testing comes
    into the app development life cycle. One is the more traditional way where the
    development happens first and then test runs are designed and executed based on
    the requirements. The other and more effective way is to adopt **Test Driven Development**
    (**TDD**). Over a period of time, TDD has proven to produce a more bug-free way
    of developing apps. You can read more about TDD here: [http://agiledata.org/essays/tdd.html](http://agiledata.org/essays/tdd.html).'
  prefs: []
  type: TYPE_NORMAL
- en: The by-product of TDD is **Behavioural Driven Testing** (**BDT**). BDT revolves
    more around behavior testing than requirement testing. A good combination of unit
    testing and automation testing with BDT would yield an excellent product with
    minimal bugs. Since BDT involves more user-centric testing, one can easily discover
    issues that the end user might encounter during the testing phase itself.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we are going to follow the more traditional process of testing
    an app, which is after it is built. We are going to implement unit testing, end-to-end
    testing, and then we will upload the app to AWS Device Farm and perform monkey
    testing.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up the unit testing environment
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The app scaffolded by Ionic CLI does not include any test setup as of the day
    of writing this chapter. So, we need to add the required testing setup ourselves.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up the project
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To start with, we will create a new folder named `chapter9` and copy the `todoapp_v2`
    from `chapter8` folder to the `chapter9` folder.
  prefs: []
  type: TYPE_NORMAL
- en: Install the dependencies if they are missing by running `npm install` from the
    root of the `chapter9/todoapp_v2` folder.
  prefs: []
  type: TYPE_NORMAL
- en: Run `ionic serve` and see if the app is working as expected. When you create,
    update, and delete a `todo`, you may see a warning in the console mentioning that
    the Cordova environment is not present. This is because we are using the local
    notification plugin inside the browser.
  prefs: []
  type: TYPE_NORMAL
- en: 'The environment setup we are going to do for unit testing our Todo app is going
    to be based on the article: *Ionic 2 Unit Testing Setup: The Best Way* ([http://www.roblouie.com/article/376/ionic-2-set-up-unit-testing-the-best-way/](http://www.roblouie.com/article/376/ionic-2-set-up-unit-testing-the-best-way/)).'
  prefs: []
  type: TYPE_NORMAL
- en: 'To get started we are going to install Karma and Jasmine:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Karma**: Karma is a JavaScript test runner that runs on Node.js. Quoting
    from Karma''s documentation, *Karma is essentially a tool which spawns a web server
    that executes source code against test code for each of the browsers connected.
    The results of each test against each browser are examined and displayed via the
    command line to the developer such that they can see which browsers and tests
    passed or failed.*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'We are going to use Karma to execute the test cases we are going to write:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Jasmine**: Jasmine is a behavior-driven development framework for testing
    JavaScript code. It does not depend on any other JavaScript frameworks. It does
    not require a DOM. And it has a clean, obvious syntax so that we can easily write
    tests.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We are going to use Jasmine to define our tests and write assertions. We would
    generally start off a test by writing a describe block. And then we start defining
    our test cases using the `it` construct.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Assertions are simple comparison statements that validate the actual result
    and expected result:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: And so on.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have a basic understanding of Karma and Jasmine, we will install
    the required dependencies.
  prefs: []
  type: TYPE_NORMAL
- en: During the installation, if you see any errors, please update to the latest
    version of Node.js.
  prefs: []
  type: TYPE_NORMAL
- en: 'To install Karma run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, install Jasmine and the related dependencies:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Once this is done, we will add the required configuration files.
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a new folder named `test-config` at the root of the `todoapp_v2` folder.
    Inside the `test-config` folder, create a file named `webpack.test.js`. Update
    `todoapp_v2/test-config/webpack.test.js` with the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, create another file named `karma-test-shim.js` inside the `test-config`
    folder. Update `todoapp_v2/test-config/karma-test-shim.js` with the following
    code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, create a file named `karma.conf.js` inside the `test-config` folder.
    Update `todoapp_v2/test-config/karma.conf.js` with the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: With this we finish the basic configuration needed to run unit tests.
  prefs: []
  type: TYPE_NORMAL
- en: 'The article mentioned earlier itself has the required information about the
    three configuration files we have added. For more information, refer to: [https://angular.io/docs/ts/latest/guide/webpack.html#!#test-configuration](https://angular.io/docs/ts/latest/guide/webpack.html#!#test-configuration).'
  prefs: []
  type: TYPE_NORMAL
- en: Writing unit tests
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that we have the required setup, we are going to start writing the unit
    tests. Unit tests are written in a file next to the source file with `.spec` added
    to the filename. For example, if we are writing test cases for `app.component.ts`,
    we would create a file named `app.component.spec.ts` in the same folder and write
    the required test cases.
  prefs: []
  type: TYPE_NORMAL
- en: Refer to [https://angular.io/docs/ts/latest/guide/testing.html#!#q-spec-file-location](https://angular.io/docs/ts/latest/guide/testing.html#!#q-spec-file-location)
    and [https://angular.io/docs/ts/latest/guide/style-guide.html#!#02-10](https://angular.io/docs/ts/latest/guide/style-guide.html#!#02-10)
    for more information.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we would start off by writing tests for the app component. We are going
    to test the following cases:'
  prefs: []
  type: TYPE_NORMAL
- en: If the component has been created.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If `rootPage` is set as `LoginPage`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Now, create a file named `app.component.spec.ts` inside the `todoapp_v2/src/app`
    folder. Update `todoapp_v2/src/app/app.component.spec.ts` with the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: There is quite a lot going on. First, we have imported the required dependencies.
    Next, we have added the describe block. Inside the describe block, we have added
    `beforeEach()`. `beforeEach()` runs before each test gets executed. In the first
    `beforeEach()`, we are defining the `TestBed`. In the second `beforeEach()`, we
    are creating the required component and getting its instance.
  prefs: []
  type: TYPE_NORMAL
- en: '`TestBed` configures and initializes the environment for unit tests. To know
    in-depth on how testing is set up and performed in Angular 2, check out: *Testing
    Angular 2, Julie Ralph* available at: [https://www.youtube.com/watch?v=f493Xf0F2yU](https://www.youtube.com/watch?v=f493Xf0F2yU).'
  prefs: []
  type: TYPE_NORMAL
- en: Once the `TestBed` is defined and the components have been initialized, we write
    our test cases.
  prefs: []
  type: TYPE_NORMAL
- en: 'Note: we have wrapped the callback function of `beforeEach()` with `async`.
    `async` does not let the next test start till all the pending tasking are completed.
    To know when to use `async` while testing, refer to *Angular 2 Testing -- Async
    function call --when to use*: [http://stackoverflow.com/a/40127164/1015046](http://stackoverflow.com/a/40127164/1015046).'
  prefs: []
  type: TYPE_NORMAL
- en: Next, we are going to test the login page.
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a filename `login.spec.ts` inside the `todoapp_v2/src/pages/login` folder.
    We are going to test the following:'
  prefs: []
  type: TYPE_NORMAL
- en: That the component has been created
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: That the `userIp` variable is initialized to an empty string
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: That the user object contains an e-mail with the value `a@a.com`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: That the user object contains a password with the value `a`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Update `todoapp_v2/src/pages/login/login.spec.ts` with the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: The preceding code is quite self-explanatory.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, we move on to the home page component. Create a file named `home.spec.ts`
    inside the `todoapp_v2/src/pages/home` folder. In this component, we are going
    to test the following:'
  prefs: []
  type: TYPE_NORMAL
- en: That the component has been created
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: That the `userIp` variable is initialized to an empty string
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: That the `userTodos` variable is initialized to an empty array
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: When a local notification is fired (this is how we do unit testing on Ionic
    Native plugins)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Update `todoapp_v2/src/pages/home/home.spec.ts` with the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: The key thing to notice from the preceding code is the provider's property passed
    to `TestBed.configureTestingModule()`. Since we are running the tests inside a
    simulated environment, where there is no Cordova, we need to simulate or mock
    the `LocalNotifications` service.
  prefs: []
  type: TYPE_NORMAL
- en: The way we do that is to create another class named `LocalNotificationsMocks`
    and use it when `LocalNotifications` is called. In `LocalNotificationsMocks`,
    we implement dummy methods that return predefined values to mock the service.
  prefs: []
  type: TYPE_NORMAL
- en: 'So, we are going to create a mock service for `LocalNotifications`. Inside
    the `src` folder, create a folder named mocks. Inside the `mocks` folder, create
    a file named `localNotificationMocks.ts`. Update `todoapp_v2/src/mocks/localNotificationMocks.ts` with
    the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: We are overriding the `schedule()` to return void based on the original definition.
  prefs: []
  type: TYPE_NORMAL
- en: With this we are done with testing components. Next, we are going to test the
    providers.
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a file named `ip.spec.ts` inside the `todoapp_v2/src/providers` folder.
    In this provider, we are going to mock an HTTP request and compare the output
    of the mock response with a hardcoded response. The cases we are going to test
    are:'
  prefs: []
  type: TYPE_NORMAL
- en: The provider is constructed
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We get an IP address from the mock backend service
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Open `todoapp_v2/src/providers/ip.spec.ts` and update it with the following
    code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Do notice the provider for HTTP. We have wired it to `MockBackend` and are returning
    a `mockResponse` when a request is made.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next comes the Auth provider. Create a file named `auth.spec.ts` inside the
    `todoapp_v2/src/providers` folder. We are going to test the following in this
    provider:'
  prefs: []
  type: TYPE_NORMAL
- en: That the provider is constructed
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: That there is a successful login with valid credentials
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: That there is a successful failure with invalid credentials
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The value of `isAuthenticated()`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The value of `authStatus` on `logout()`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Open `todoapp_v2/src/providers/auth.spec.ts` and update it with the following
    code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'To execute the preceding test cases successfully, we need to mock the `IonicStorageModule`.
    Create a new file named `storageMocks.ts` inside the `todoapp_v2/src/mocks` folder.
    Update `todoapp_v2/src/mocks/storageMocks.ts` with the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Here we are overriding the behavior of the `IonicStorageModule` using an in-memory
    object.
  prefs: []
  type: TYPE_NORMAL
- en: 'The last provider that we are going to test is Todos. Create a file named `todos.spec.ts`
    inside the `todoapp_v2/src/providers` folder. We are going to test the following:'
  prefs: []
  type: TYPE_NORMAL
- en: That the provider is constructed
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: That Todos has an initial length of `0`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Saving a todo
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Updating a todo
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Deleting a todo
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Open `todoapp_v2/src/providers/todos.spec.ts` and update it as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Do notice the `StorageMocks` setup in the provider. With this, we are done writing
    the test cases. The next step is execution.
  prefs: []
  type: TYPE_NORMAL
- en: Executing unit tests
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To start the execution process, we will add a script to the `package.json` file,
    so we can run tests easily by executing `npm test` from the command prompt/terminal.
  prefs: []
  type: TYPE_NORMAL
- en: 'Open `package.json` and add the following line to the scripts section:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Now run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'And you should see a browser launch and our test case execute. The command
    prompt/terminal log should look something like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'And you should also see a file named `unit-test-report.html` created inside
    the `test-config` folder. If you launch this file in the browser, you should see
    the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00117.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: The preceding table summarizes the tests that were executed.
  prefs: []
  type: TYPE_NORMAL
- en: driftyco/ionic-unit-testing-example
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Three days before writing this chapter, the Ionic team released a blog post
    indicating that they are going to support unit and end-to-end testing and this
    will be a part of the Ionic scaffolded project itself. More information can be
    found here: [http://blog.ionic.io/basic-unit-testing-in-ionic/](http://blog.ionic.io/basic-unit-testing-in-ionic/).'
  prefs: []
  type: TYPE_NORMAL
- en: This project is based on a couple of very valuable contributors in the Ionic
    2 testing space as mentioned in the blog post. As of today, the *driftyco/ionic-unit-testing-example*
    ([https://github.com/driftyco/ionic-unit-testing-example](https://github.com/driftyco/ionic-unit-testing-example))
    repo does not have the complete implementation and supports only unit tests.
  prefs: []
  type: TYPE_NORMAL
- en: But by the time the book is out, they would have launched it. The setup inside
    `driftyco/ionic-unit-testing-example` should still be along the same lines we
    have followed here. I have brought this to your notice so you can follow the project.
  prefs: []
  type: TYPE_NORMAL
- en: E2E testing
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In unit testing, we have tested units of code. In end-to-end testing, we are
    going to test a complete feature such as login or logout, or fetch IP address,
    and so on. Here we are going to look at the app as a whole instead of just one
    piece of functionality. Some people refer to this as integration testing as well.
  prefs: []
  type: TYPE_NORMAL
- en: We are going to use Protractor to help us with the execution of E2E tests. We
    are still going to use Jasmine to describe our tests, only the test runner changes
    from Karma to Protractor.
  prefs: []
  type: TYPE_NORMAL
- en: 'Quoting from [http://www.protractortest.org](http://www.protractortest.org):'
  prefs: []
  type: TYPE_NORMAL
- en: '"Protractor is an end-to-end test framework for Angular apps. Protractor runs
    tests against your app running in a real browser, interacting with it as a user
    would."'
  prefs: []
  type: TYPE_NORMAL
- en: YouTube has quite a lot of videos which explain Protractor and Selenium in depth
    as well as various APIs of Protractor that can be used for testing, in case you
    want more information on Protractor.
  prefs: []
  type: TYPE_NORMAL
- en: 'The testing we are going to do is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Login to the app
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Validate login
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Logout of the app
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Validate logout
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting up the project
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: I am going to follow the article named E2E (End-to-End) Testing in *Ionic 2
    - An Introduction* ([https://www.joshmorony.com/e2e-end-to-end-testing-in-ionic-2-an-introduction/](https://www.joshmorony.com/e2e-end-to-end-testing-in-ionic-2-an-introduction/))
    to set up the E2E environment.
  prefs: []
  type: TYPE_NORMAL
- en: We will be using the same example on which we have implemented the unit tests.
  prefs: []
  type: TYPE_NORMAL
- en: 'First install protractor by running the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, install the `webdriver-manager` and update it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, we will install the dependencies for Protractor by running the following
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: Do notice the version of Jasmine types. It is hardcoded to `2.5.41`. At the
    time of writing, there are some conflicts between the TypeScript version of Jasmine
    types and the Ionic 2 project. If you are using Ionic 3.0, this should have been
    fixed.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, at the root of the `todoapp_v2` project folder, create a file named `protractor.conf.js`.
    Update `todoapp_v2/protractor.conf.js` with the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: This file defines the launch properties of Protractor and Selenium.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, we are going to create a folder named `e2e` at the root of `todoapp_v2` folder.
    Inside the `todoapp_v2/e2e` folder, create a file named `tsconfig.json`. Update
    `todoapp_v2/e2e/tsconfig.json` with the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: This completes our setup for end-to-end testing. Now, we will start writing
    the tests.
  prefs: []
  type: TYPE_NORMAL
- en: Writing E2E tests
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that we have the required setup, we will start writing the tests. Create
    a new file named `test.e2e-spec.ts` inside the `todoapp_v2/e2e`folder.
  prefs: []
  type: TYPE_NORMAL
- en: 'As mentioned earlier, we are going to perform a simple test -- login to the
    app, validating login, logging out of the app, and validating logout. The required
    tests should look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: The preceding code is a self-explanatory. Do notice that I have hardcoded my
    IP address to validate the same while testing. Do update the IP address before
    you start executing the E2E tests.
  prefs: []
  type: TYPE_NORMAL
- en: Executing E2E tests
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now that we have completed writing the tests, we will execute the same. Open
    a command prompt/terminal at the root of the project and run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'You may face an error, which looks something like:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'If so, run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: And after that run `protractor` or `./node_modules/.bin/protractor`.
  prefs: []
  type: TYPE_NORMAL
- en: 'And you should see a browser launch and the app being navigated. If everything
    goes well, you should see the following output in the command prompt/terminal:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: With this we complete the two major types of testing on an Ionic app.
  prefs: []
  type: TYPE_NORMAL
- en: The final test we are going to do is using AWS Device Farm.
  prefs: []
  type: TYPE_NORMAL
- en: 'Note: While testing Cordova features, you can always mock them like we have
    seen earlier. Instead of updating the test bed, we will update the `app.module.ts`
    directly before executing the E2E tests. But do remember to change it back once
    the testing is completed.'
  prefs: []
  type: TYPE_NORMAL
- en: Code coverage
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Checking code coverage is a very important activity while testing. Code coverage
    helps us understand how much code written by us is tested. You can refer to the *karma-coverage*
    ([https://github.com/karma-runner/karma-coverage](https://github.com/karma-runner/karma-coverage))
    module and the *remap-istanbul* ([https://github.com/SitePen/remap-istanbul](https://github.com/SitePen/remap-istanbul))
    module to implement code coverage.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can also refer to *How to Add a Test Coverage Report to an Angular 2 Project*:
    [https://www.angularonrails.com/add-test-coverage-report-angular-2-project/](https://www.angularonrails.com/add-test-coverage-report-angular-2-project/)
    for further reference.'
  prefs: []
  type: TYPE_NORMAL
- en: AWS Device Farm
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that we have unit tested as well as end-to-end tested our app, we will deploy
    the app on to an actual device and test it.
  prefs: []
  type: TYPE_NORMAL
- en: To start testing on actual devices, we need to borrow or purchase them, which
    may not seem practical for an one-off app. That is where the concept of device
    farms comes into the picture. Device farms are collections of various devices
    that can be accessed through a web interface. These devices can be accessed and
    tested over the web in a similar way how one would do testing on an actual device.
  prefs: []
  type: TYPE_NORMAL
- en: There are many providers out there who offer pay-as-you-go device farms. After
    a lot of hits and misses with many device farms, I kind of grew a liking towards
    AWS Device Farm. It is simple, easy to use, and quite verbose with the error logging,
    screenshots, and videos. The latter really helps you in identifying an issue that
    your end user or a bug crash reporter reported on a specific device.
  prefs: []
  type: TYPE_NORMAL
- en: As of the day of writing this chapter, AWS charges $0.17/device minute with
    the first 250 minutes free. Or if you are a heavy user, you can subscribe for
    an unlimited testing plan based on your usage as well. This starts from $250 a
    month.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this topic, using AWS Device Farm, we are going to upload the APK of our
    Todo app that we have migrated in [Chapter 8](part0133.html#3UQQQ0-9757c8e51afd47e0a7a9ced32db749b8),
    *Ionic 2 Migration Guide*, and execute two tests:'
  prefs: []
  type: TYPE_NORMAL
- en: Monkey testing the app to see if the app crashes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Manually testing the app on an actual device
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting up AWS Device Farm
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Before we get started with testing on actual devices, we will set up a new AWS
    account, if you don't have one. You can navigate to [https://aws.amazon.com/](https://aws.amazon.com/)
    to sign up and sign in.
  prefs: []
  type: TYPE_NORMAL
- en: Once you are inside the AWS console, select Device Farm from the Services option
    in the header of the page. Device Farm is AWS region agonistic. You need not be
    in a specific region to access it.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once you are at the home page of AWS Device Farm, you should see a screen like
    this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00120.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Click on Get started. This will prompt us to enter a project name. A project
    in Device Farm is a logic grouping of types of tests that we would execute, types
    of devices we want to test, or versions of our app.
  prefs: []
  type: TYPE_NORMAL
- en: 'I am going to name my project as `Todo App v1`. When I have another release
    I am going to name it as `Todo App v2`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00121.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Note: Here `v1` refers to the v1 release of our Todo app and not the Todo app
    built with Ionic v1.'
  prefs: []
  type: TYPE_NORMAL
- en: Click on Create project and you should land on the project home page.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up Todo app
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now that we are ready to test our app, let us go ahead and build it. Navigate
    to the `todoapp_v2` folder and open a new command prompt/terminal. Run `ionic
    platform add android` or `ionic platform add ios` and then build the app:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: For this example, I am going to build for Android and use the APK for device
    testing. Once the build is completed, navigate to the `todoapp_v2/platforms/android/build/outputs/apk`
    folder and you should find a file named `android-debug.apk`. We are going to upload
    this APK file for testing.
  prefs: []
  type: TYPE_NORMAL
- en: The process for iOS testing is also similar, except we upload an IPA file.
  prefs: []
  type: TYPE_NORMAL
- en: Monkey testing the Todo app
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Monkey testing or fuzz testing is an automated testing technique where a test
    executer will enter random inputs, executing random clicks at random parts of
    the app or page to see if the app crashes. To know more about monkey testing,
    refer to: [https://en.wikipedia.org/wiki/Monkey_testing](https://en.wikipedia.org/wiki/Monkey_testing).'
  prefs: []
  type: TYPE_NORMAL
- en: Device Farm offers this as a good starting point for testing an app on a device.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once we are on the project home page, we should see two tabs: Automated tests
    and Remote access:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00122.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'On the Automated tests tab, click on Create a new run. In the Choose your application
    section, select your choice, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00123.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Next upload the APK or IPA file. Once the app is successfully uploaded, we
    should see something like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00124.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Click Next step.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the configure test section, select Built-in: Fuzz as shown in the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00125.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: There are other automation testing frameworks such as Appium or Calabash that
    can be used to build automation testing suites as well. Device Farm supports those
    as well.
  prefs: []
  type: TYPE_NORMAL
- en: Click Next step.
  prefs: []
  type: TYPE_NORMAL
- en: 'This is where we select the targeted devices. By default, AWS Device Farm picks
    Top Devices. We can either go with this or build our own device pool:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00126.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: For this example, I am going to go with the Top Devices selection.
  prefs: []
  type: TYPE_NORMAL
- en: 'Click Next step to move to the Specify device state section. Here, we can override
    device features if needed:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00127.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: We are going to leave this as is.
  prefs: []
  type: TYPE_NORMAL
- en: 'Click Next step and here we set the estimates for our test. I have selected
    5 minutes per device as shown:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00128.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Click Confirm and start run to kick off the monkey testing. This will take approximately
    25 minutes to complete. You can go for a run or get a coffee or do some yoga,
    basically you need to kill 25 minutes.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now that the tests are completed, you should see a screen like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00129.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Looks like the Todo app passed monkey testing on five devices. If we click
    on the row, we should see the in-depth analysis of the results:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00130.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'As you can see from the preceding steps, we have the results per device and
    screenshots of all the devices. To get deeper insights, we will click on a device:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00131.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'As you can see from the preceding image, we can view the test execution video,
    logs, performance, and screenshots as well:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00132.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: An overview of the performance would be as shown in the preceding screenshot.
  prefs: []
  type: TYPE_NORMAL
- en: This kind of helps us quickly to do some random testing of our app on various
    devices.
  prefs: []
  type: TYPE_NORMAL
- en: Manually testing the Todo app on various devices
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we are going to gain remote access to a device and test our
    app on it. This feature is very helpful when a user reports a bug on a specific
    device that you are not able to replicate on other devices.
  prefs: []
  type: TYPE_NORMAL
- en: To start the manual testing, navigate to the project home page and click on
    the Remote Access tab. And then click on the Start a new session button.
  prefs: []
  type: TYPE_NORMAL
- en: 'This will redirect to another page, where we need to select a device as shown:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00133.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'I have picked an Android device and initiated a new session by clicking on
    Confirm and start session. This will kick off a new session:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00134.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Once a device is made available, we should see something like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00135.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: By default, the APK we have recently uploaded will be installed on this device.
    Otherwise you can use Install applications in the top right to install a specific
    app as shown in the preceding screenshot.
  prefs: []
  type: TYPE_NORMAL
- en: 'I have navigated to the `TodoApp-v2` from the menu as shown:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00136.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'After launching the app, we can perform a login, manage todos, check out notifications,
    and so on:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00137.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Once the testing is completed, we can stop the session. Once the session has
    been successfully terminated, we can get a copy of logs, videos, and network traffic
    in a downloadable format for further debugging:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00138.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: With this we have seen how to manually test an app on various devices.
  prefs: []
  type: TYPE_NORMAL
- en: Automation testing
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Apart from the aforementioned ways of testing an app, we can build automated
    test cases using frameworks such as Appium ([http://appium.io/](http://appium.io/)).
    This way, using the Device Farm, we can upload the APK or IPA followed by the
    automation test suite. Then we pick a group of devices and execute the tests on
    them.
  prefs: []
  type: TYPE_NORMAL
- en: You can look up *Automating hybrid apps *([http://appium.io/slate/en/master/?ruby#automating-hybrid-apps](http://appium.io/slate/en/master/?ruby#automating-hybrid-apps))
    and *Verifying a Cordova or PhoneGap build with Smoke Tests and Appium *([http://ezosaleh.com/verifying-a-cordovaphonegap-build-with-smoke-tests-appium](http://ezosaleh.com/verifying-a-cordovaphonegap-build-with-smoke-tests-appium))
    to get an idea on writing automated tests for your hybrid app.
  prefs: []
  type: TYPE_NORMAL
- en: You can run these automated tests locally too in an emulator if you choose to.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we have gone through the two main ways of testing-unit and
    end-to-end testing. We have used Karma with Jasmine to unit test the Todo app.
    We have used Protractor with Jasmine for our end-to-end testing. We have also
    tested our app using AWS Device Farm's fuzz testing as well as by installing an
    app on a remote device of our choice.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will take a look at releasing and managing an Ionic
    app.
  prefs: []
  type: TYPE_NORMAL
