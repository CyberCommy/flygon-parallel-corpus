- en: Adding a React Frontend to Complete MERN
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A web application is incomplete without a frontend. It is the part that users
    interact with and it is crucial to any web experience. In this chapter, we will
    use React to add an interactive user interface to the basic user and auth features
    implemented for the backend of the MERN skeleton application that we started building
    in the previous chapter.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will cover the following topics to add a working frontend and complete the
    MERN skeleton application:'
  prefs: []
  type: TYPE_NORMAL
- en: Frontend features of the skeleton
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting up development with React, React Router, and Material-UI
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Backend user API integration
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Auth integration
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Home, Users, Sign-Up, Sign-In, User Profile, Edit, and Delete views
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Navigation menu
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Basic server-side rendering
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Skeleton frontend
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In order to fully implement the skeleton application features discussed in
    the *Feature breakdown* section of [Chapter 3](1d83847c-9ed2-4640-a717-3b280a257145.xhtml),
    *Building a Backend with MongoDB, Express, and Node*, we will add the following
    user interface components to our base application:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Home page**: A view that renders at the root URL to welcome users to the
    web application'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**User list page**: A view that fetches and shows a list of all the users in
    the database, and also links to individual user profiles'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Sign-up page**: A view with a form for user sign-up, allowing new users to
    create a user account and redirecting them to a sign in page when successfully
    created'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Sign-in page**: A view with a sign-in form that allows existing users to
    sign in so they have access to protected views and actions'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Profile page**: A component that fetches and displays an individual user''s
    information, is only accessible by signed-in users, and also contains edit and
    delete options, which are visible only if the signed-in user is looking at their
    own profile'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Edit profile page**: A form that fetches the user''s information in the form,
    allows them to edit the information, and is accessible only if the logged-in user
    is trying to edit their own profile'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Delete user component**: An option that allows the signed-in user to delete
    only their own profile after confirming their intent'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Menu navigation bar**: A component that lists all the available and relevant
    views to the user, and also helps to indicate the user''s current location in
    the application'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following React component tree diagram shows all the React components we
    will develop to build out the views for this base application:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/a7c89a42-7cb4-41d2-a7b8-db331fbb9301.png)'
  prefs: []
  type: TYPE_IMG
- en: '**MainRouter** will be the root React component that contains all the other
    custom React views in the application. **Home**, **Signup**, **Signin**, **Users**,
    **Profile**, and **EditProfile** will render at individual routes declared with
    React Router, whereas the **Menu** component will render across all these views,
    and **DeleteUser** will be a part of the **Profile** view.'
  prefs: []
  type: TYPE_NORMAL
- en: The code discussed in this chapter, and for the complete skeleton, is available
    on GitHub in the repository at [github.com/shamahoque/mern-skeleton](https://github.com/shamahoque/mern-skeleton).
    You can clone this code and run the application as you go through the code explanations
    in the rest of this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Folder and file structure
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The following folder structure shows the new folders and files to be added
    to the skeleton to complete it with a React frontend:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: The client folder will contain the React components, helpers, and frontend assets,
    such as images and CSS. Besides this folder and the Webpack config for compiling
    and bundling the client code, we will also modify some of the other existing files
    to integrate the complete skeleton.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up for React development
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Before we can start developing with React in our existing skeleton code base,
    we first need to add configuration to compile and bundle the frontend code, add
    the React-related dependencies necessary to build the interactive interface, and
    tie it all together in the MERN development flow.
  prefs: []
  type: TYPE_NORMAL
- en: Configuring Babel and Webpack
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To compile and bundle the client code to run it during development and also
    bundle it for production, we will update the configuration for Babel and Webpack.
  prefs: []
  type: TYPE_NORMAL
- en: Babel
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'For compiling React, first install the Babel React preset module as a development
    dependency:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Then, update `.babelrc` to include the module and also configure the `react-hot-loader`
    Babel plugin as required for the `react-hot-loader` module.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-skeleton/.babelrc`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Webpack
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To bundle client-side code after compiling it with Babel, and also to enable
    `react-hot-loader` for faster development, install the following modules:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Then, to configure Webpack for the frontend development and to build the production
    bundle, we will add a `webpack.config.client.js` file and a `webpack.config.client.production.js`
    file with the same configuration code described in [Chapter 2](844f64fb-8fc2-47a1-94a4-dea6bc8f5665.xhtml),
    *Preparing the Development Environment*.
  prefs: []
  type: TYPE_NORMAL
- en: Loading Webpack middleware for development
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: During development, when we run the server, the Express app should load the
    Webpack middleware relevant to the frontend with respect to the configuration
    set for the client-side code, so that the frontend and backend development workflow
    is integrated. To enable this, we will use the `devBundle.js` file discussed in
    [Chapter 2](844f64fb-8fc2-47a1-94a4-dea6bc8f5665.xhtml), *Preparing the Development
    Environment,* to set up a `compile` method that takes the Express app and configures
    it to use the Webpack middleware. The `devBundle.js` in the `server` folder will
    be as follows.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-skeleton/server/devBundle.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Then, import and call this `compile` method in `express.js` by adding the following
    highlighted lines only while developing.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-skeleton/server/express.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: These two highlighted lines are only meant for development mode and should be
    commented out when building the code for production. This code will import the
    middleware and the Webpack configuration before initiating Webpack to compile
    and bundle the client-side code when the Express app runs in development mode.
    The bundled code will be placed in the `dist` folder.
  prefs: []
  type: TYPE_NORMAL
- en: Serving static files with Express
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To ensure that the Express server properly handles the requests to static files
    such as CSS files, images, or the bundled client-side JS, we will configure it
    to serve static files from the `dist` folder by adding the following configuration
    in `express.js`.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-skeleton/server/express.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Updating the template to load a bundled script
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In order to add the bundled frontend code in the HTML view, we will update the
    `template.js` file to add the script file from the `dist` folder to the end of
    the `<body>` tag.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-skeleton/template.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Adding React dependencies
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The frontend views will primarily be implemented using React. In addition, to
    enable client-side routing we will use React Router, and to enhance the user experience
    with a sleek look and feel we will use Material-UI.
  prefs: []
  type: TYPE_NORMAL
- en: React
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Throughout this book, we will use React 16 to code up the frontend. To start
    writing the `React` component code, we will need to install the following modules
    as regular dependencies:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: React Router
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'React Router provides a collection of navigational components that enable routing
    on the frontend for React applications. To utilize declarative routing and have
    bookmarkable URL routes, we will add the following React Router modules:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Material-UI
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In order to keep the UI in our MERN applications sleek without delving too
    much into UI design and implementation, we will utilize the `Material-UI` library.
    It provides ready-to-use and customizable `React` components that implement Google''s
    material design. To start using Material-UI components to make the frontend, we
    need to install the following modules:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: At the time of writing, the latest pre-release version of Material-UI is `1.0.0-beta.43` and
    it is recommended to install this exact version in order to ensure the code for
    the example projects do not break.
  prefs: []
  type: TYPE_NORMAL
- en: 'To add the `Roboto` fonts as recommended by Material-UI, and use the `Material-UI`
    icons, we will add the relevant style links into the `template.js` file, in the
    HTML document''s `<head>` section:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: With development configuration all set up, and the necessary React modules added
    to the code base, we can now start implementing the custom React components.
  prefs: []
  type: TYPE_NORMAL
- en: Implementing React views
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A functional frontend should integrate React components with the backend API
    and allow users to navigate seamlessly within the application based on authorization.
    To demonstrate how to implement a functional frontend view for this MERN skeleton,
    we will start by detailing how to render the home page component at the root route,
    then cover the backend API and user auth integration, before highlighting the
    unique aspects of implementing the remaining view components.
  prefs: []
  type: TYPE_NORMAL
- en: Rendering a home page
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The process of implementing and rendering a working `Home` component at the
    root route will also expose the basic structure of the frontend code in the skeleton.
    We will start with the top-level entry component that houses the whole React app
    and renders the main router component that links all the React components in the
    application.
  prefs: []
  type: TYPE_NORMAL
- en: Entry point at main.js
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `client/main.js` file in the client folder will be the entry point to render
    the complete React app. In this code, we import the root or top-level React component
    that will contain the complete frontend and render it to the `div` element with
    the ID `'root'` specified in the HTML document in `template.js`.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-skeleton/client/main.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Root React component
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The top-level React component that will contain all the components for the application's
    frontend is defined in the `client/App.js` file. In this file, we configure the
    React app to render the view components with a customized Material-UI theme, enable
    frontend routing, and ensure that React Hot Loader can instantly load changes
    as we develop the components.
  prefs: []
  type: TYPE_NORMAL
- en: Customizing the Material-UI theme
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Material-UI theme can be easily customized using the `MuiThemeProvider`
    component, and by configuring custom values to theme variables in `createMuiTheme()`.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-skeleton/client/App.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: For the skeleton, we only apply minimal customization by setting some color
    values to be used in the UI. The theme variables generated here will be passed
    to, and available in, all the components we build.
  prefs: []
  type: TYPE_NORMAL
- en: Wrapping the root component with MUI theme and BrowserRouter
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The custom React components that we create to make up the user interface will
    be accessed with frontend routes specified in the `MainRouter` component. Essentially,
    this component houses all the custom views developed for the application. When
    defining the root component in `App.js`, we wrap the `MainRouter` component with
    the `MuiThemeProvider` to give it access to the Material-UI theme, and `BrowserRouter`
    to enable frontend routing with React Router. The custom theme variables defined
    previously are passed as a prop to the `MuiThemeProvider`, making the theme available
    in all our custom React components.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-skeleton/client/App.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Marking the root component as hot-exported
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The last line of code in `App.js` to export the `App` component uses the `hot`
    module from `react-hot-loader` to mark the root component as `hot`. This will
    enable live reloading of the React components during development.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-skeleton/client/App.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: For our MERN applications, we won't have to change the `main.js` and `App.js`
    code all that much after this point, and we can continue building out the rest
    of the React app by injecting new components in the `MainRouter` component.
  prefs: []
  type: TYPE_NORMAL
- en: Adding a home route to MainRouter
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `MainRouter.js` code will help render our custom React components with respect
    to routes or locations in the application. In this first version, we will only
    add the root route to render the `Home` component.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-skeleton/client/MainRouter.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: As we develop more view components, we will update the `MainRouter` to add routes
    for the new components inside the `Switch` component.
  prefs: []
  type: TYPE_NORMAL
- en: The `Switch` component in React Router renders a route exclusively. In other
    words, it only renders the first child that matches the requested route path.
    Whereas, without being nested in a `Switch`, every `Route` component renders inclusively
    when there is a path match. For example, a request at `'/'` also matches a route
    at `'/contact'`.
  prefs: []
  type: TYPE_NORMAL
- en: Home component
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `Home` component will be rendered on the browser when the user visits the
    root route, and we will compose it with Material-UI components. The following
    screenshot shows the `Home` component and the `Menu` component, which will be
    implemented later in the chapter as an individual component to provide navigation
    across the application:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/c3f41131-6f5c-4a1f-8de4-5451b50a243f.png)'
  prefs: []
  type: TYPE_IMG
- en: The `Home` component and other view components that will be rendered in the
    browser for the user to interact with will follow a common code structure containing
    the following parts in the given order.
  prefs: []
  type: TYPE_NORMAL
- en: Imports
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The component file will start with imports from React, Material-UI, React Router
    modules, images, CSS, API fetch, and auth helpers from our code as required by
    the specific component. For example, for the `Home` component code in `Home.js`,
    we use the following imports.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-skeleton/client/core/Home.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: The image file is kept in the `client/assets/images/` folder and imported/added
    to the `Home` component.
  prefs: []
  type: TYPE_NORMAL
- en: Style declarations
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: After the imports, we will define CSS styles utilizing the `Material-UI` theme
    variables as required to style the elements in the component. For the `Home` component
    in `Home.js`, we have the following styles.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-skeleton/client/core/Home.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: The JSS style objects defined here will be injected into the component and used
    to style the elements in the component, as shown in the following `Home` component
    definition.
  prefs: []
  type: TYPE_NORMAL
- en: Material-UI uses JSS, which is a CSS-in-JS styling solution to add styles to
    the components. JSS uses JavaScript as a language to describe styles. This book
    will not cover CSS and styling implementations in detail. It will most rely on
    the default look and feel of Material-UI components. To learn more about JSS,
    visit [http://cssinjs.org/?v=v9.8.1](http://cssinjs.org/?v=v9.8.1). For examples
    of how to customize the `Material-UI` component styles, check out the Material-UI
    documentation at [https://material-ui-next.com/](https://material-ui-next.com/).
  prefs: []
  type: TYPE_NORMAL
- en: Component definition
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the component definition, we will compose the content and behavior of the
    component. The `Home` component will contain a Material-UI `Card` with a headline,
    an image, and a caption, all styled with the classes defined earlier and passed
    in as props.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-skeleton/client/core/Home.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: PropTypes validation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To validate the required injection of style declarations as props to the component,
    we add the `PropTypes` requirement validator to the defined component.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-skeleton/client/core/Home.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: Export component
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Finally, in the last line of code in the component file, we will export the
    component with the defined styles passed in using `withStyles` from `Material-UI`. Using
    `withStyles` like this creates a **Higher-order component** (**HOC**) that has
    access to the defined style objects as props.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-skeleton/client/core/Home.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: The exported component can now be used for composition within other components,
    as we did with this `Home` component in a route in the `MainRouter` component
    discussed earlier.
  prefs: []
  type: TYPE_NORMAL
- en: The other view components to be implemented in our MERN applications will adhere
    to the same structure. In the rest of the book, we will focus mainly on the component
    definition, highlighting the unique aspects of the implemented component.
  prefs: []
  type: TYPE_NORMAL
- en: Bundling image assets
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The static image file that we imported into the `Home` component view must also
    be included in the bundle with the rest of the compiled JS code so that the code
    can access and load it. To enable this, we need to update the Webpack configuration
    files to add a module rule to load, bundle, and emit image files to the output
    directory, which contains the compiled frontend and backend code.
  prefs: []
  type: TYPE_NORMAL
- en: 'Update the `webpack.config.client.js`, `webpack.config.server.js`, and `webpack.config.client.production.js` files
    to add the following module rule after the use of `babel-loader`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'This module rule uses the `file-loader` npm module for Webpack, which needs
    to be installed as a development dependency, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: Running and opening in the browser
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The client code up to this point can be run to view the `Home` component in
    the browser at the root URL. To run the application, use the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: Then, open the root URL (`http://localhost:3000`) in the browser to see the
    `Home` component.
  prefs: []
  type: TYPE_NORMAL
- en: The `Home` component developed here is a basic view component without interactive
    features and does not require the use of the backend APIs for user CRUD or auth.
    However, the remaining view components for our skeleton frontend will need the
    backend APIs and auth.
  prefs: []
  type: TYPE_NORMAL
- en: Backend API integration
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Users should be able to use the frontend views to fetch and modify user data
    in the database based on authentication and authorization. To implement these
    functionalities, the React components will access the API endpoints exposed by
    the backend using the Fetch API.
  prefs: []
  type: TYPE_NORMAL
- en: The Fetch API is a newer standard to make network requests similar to **XMLHttpRequest**
    (**XHR**) but using promises instead, enabling a simpler and cleaner API. To learn
    more about the Fetch API, visit [https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API](https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API).
  prefs: []
  type: TYPE_NORMAL
- en: Fetch for User CRUD
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the `client/user/api-user.js` file, we will add methods for accessing each
    of the user CRUD API endpoints, which the React components can use to exchange
    user data with the server and database as required.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a user
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `create` method will take user data from the view component, use `fetch`
    to make a `POST` call to create a new user in the backend, and finally return
    the response from the server to the component as a promise.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-skeleton/client/user/api-user.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: Listing users
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `list` method will use fetch to make a `GET` call to retrieve all the users
    in the database, and then return the response from the server as a promise to
    the component.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-skeleton/client/user/api-user.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: Reading a user profile
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `read` method will use fetch to make a `GET` call to retrieve a specific
    user by ID. Since this is a protected route, besides passing the user ID as a
    parameter, the requesting component must also provide valid credentials, which
    in this case will be a valid JWT received after successful sign-in.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-skeleton/client/user/api-user.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: The JWT is attached to the `GET` fetch call in the `Authorization` header using
    the `Bearer` scheme, and then the response from the server is returned to the
    component in a promise.
  prefs: []
  type: TYPE_NORMAL
- en: Updating a user's data
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `update` method will take changed user data from the view component for
    a specific user, then use `fetch` to make a `PUT` call to update the existing
    user in the backend. This is also a protected route that will require a valid
    JWT as credential.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-skeleton/client/user/api-user.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: Deleting a user
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `remove` method will allow the view component to delete a specific user
    from the database, using fetch to make a `DELETE` call. This, again, is a protected
    route that will require a valid JWT as a credential, similar to the `read` and
    `update` methods. The response from the server to the delete request will be returned
    to the component as a promise.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-skeleton/client/user/api-user.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: Finally, export the user API helper methods to be imported and used by the React
    components as required.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-skeleton/client/user/api-user.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: Fetch for auth API
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In order to integrate the auth API endpoints from the server with the frontend
    React components, we will add methods for fetching sign-in and sign-out API endpoints
    in the `client/auth/api-auth.js` file.
  prefs: []
  type: TYPE_NORMAL
- en: Sign-in
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `signin` method will take user sign-in data from the view component, then
    use `fetch` to make a `POST` call to verify the user with the backend. The response
    from the server will be returned to the component in a promise, which may contain
    the JWT if sign-in was successful.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-skeleton/client/user/api-auth.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: Sign-out
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `signout` method will use fetch to make a GET call to the signout API endpoint
    on the server.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-skeleton/client/user/api-auth.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: At the end of the `api-auth.js` file, export the `signin` and `signout` methods.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-skeleton/client/user/api-auth.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: With these API fetch methods, the React frontend has complete access to the
    endpoints available in the backend.
  prefs: []
  type: TYPE_NORMAL
- en: Auth in the frontend
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As discussed in the previous chapter, implementing authentication with JWT relinquishes
    responsibility to the client side to manage and store user auth state. To this
    end, we need to write code that will allow the client-side to store the JWT received
    from the server on successful sign-in, make it available when accessing protected
    routes, delete or invalidate the token when the user signs out, and also restrict
    access to views and components on the frontend based on the user auth state.
  prefs: []
  type: TYPE_NORMAL
- en: Using examples of auth workflow from the React Router documentation, we will
    write helper methods to manage auth state across the components, and also use
    a custom `PrivateRoute` component to add protected routes to the frontend.
  prefs: []
  type: TYPE_NORMAL
- en: Managing auth state
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In `client/auth/auth-helper.js`, we will define the following helper methods
    to store and retrieve JWT credentials from client-side `sessionStorage`, and also
    clear out the `sessionStorage` on user sign-out:'
  prefs: []
  type: TYPE_NORMAL
- en: '`authenticate(jwt, cb)`: Save credentials on successful sign-in:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: '`isAuthenticated()`: Retrieve credentials if signed-in:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: '`signout(cb)`: Delete credentials and sign out:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: Using the methods defined here, the React components we build will be able to
    check and manage user auth state to restrict access in the frontend, as demonstrated
    in the following with the custom `PrivateRoute`.
  prefs: []
  type: TYPE_NORMAL
- en: PrivateRoute component
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `client/auth/PrivateRoute.js` defines the `PrivateRoute` component as shown
    in an auth flow example from [https://reacttraining.com/react-router/web/example/auth-workflow](https://reacttraining.com/react-router/web/example/auth-workflow)
    in the React Router documentation. It will allow us to declare protected routes
    for the frontend to restrict view access based on user auth.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-skeleton/client/auth/PrivateRoute.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: Components to be rendered in this `PrivateRoute` will only load when the user
    is authenticated, otherwise the user will be redirected to the `Signin` component.
  prefs: []
  type: TYPE_NORMAL
- en: With the backend APIs integrated, and auth management helper methods ready for
    use in the components, we can start building the remaining view components.
  prefs: []
  type: TYPE_NORMAL
- en: User and auth components
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The React components described in this section complete the interactive features
    defined for the skeleton by allowing users to view, create, and modify user data
    stored in the database with respect to auth restrictions. For each of the following
    components, we will go over the unique aspects of each component, and how to add
    the component to the application in the `MainRouter`.
  prefs: []
  type: TYPE_NORMAL
- en: Users component
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `Users` component in `client/user/Users.js`, shows the names of all the
    users fetched from the database, and links each name to the user profile. This
    component can be viewed by any visitor to the application and will render at the
    path `''/users''`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/896050db-1fcc-47db-b597-a90f8af964a1.png)'
  prefs: []
  type: TYPE_IMG
- en: In the component definition, we first initialize the state with an empty array
    of users.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-skeleton/client/user/Users.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: Next, in `componentDidMount`, we use the `list` method from the `api-user.js`
    helper methods, to fetch the user list from the backend, and load the user data
    into the component by updating the state.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-skeleton/client/user/Users.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: The `render` function contains the actual view content of the `Users` component,
    and is composed with Material-UI components such as `Paper`, `List`, and `ListItems`.
    The elements are styled with the CSS defined and passed in as props.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-skeleton/client/user/Users.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: To generate each list item, we iterate through the array of users in the state
    using the map function.
  prefs: []
  type: TYPE_NORMAL
- en: To add this `Users` component to the React application, we need to update the
    `MainRouter` component with a `Route` that renders this component at the `'/users'` path.
    Add the `Route` inside the `Switch` component after the `Home` route.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-skeleton/client/MainRouter.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: 'To see this view rendered in the browser, you can temporarily add a `Link`
    component in the `Home` component to route to the `Users` component:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: Signup component
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `Signup` component in `client/user/Signup.js`, presents a form with name,
    email, and password fields to the user for sign-up at the `''/signup''` path:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/b478e453-909d-4348-af22-0a44ac3ff566.png)'
  prefs: []
  type: TYPE_IMG
- en: In the component definition, we first initialize the state with empty input
    field values, empty error message, and set the dialog open variable to false.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-skeleton/client/user/Signup.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: We also define two handler functions to be called when the input value changes
    or the submit button is clicked. The `handleChange` function takes the new value
    entered in the input field and sets it to `state`.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-skeleton/client/user/Signup.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: The `clickSubmit` function is called when the form is submitted. It takes the
    input values from state and calls the `create` fetch method to sign up the user
    with the backend. Then, depending on the response from the server, either an error
    message is shown or a success dialog is shown.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-skeleton/client/user/Signup.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: In the `render` function we compose and style the form components in the Sign-up
    view using components such as `TextField` from Material-UI.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-skeleton/client/user/Signup.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: The render also contains an error message block along with a `Dialog` component
    that is conditionally rendered depending on the sign up response from the server. The
    `Dialog` component in `Signup.js` is composed as follows.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-skeleton/client/user/Signup.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: 'On successful account creation, the user is given confirmation, and asked to
    sign in using this `Dialog` component, which links to the `Signin` component:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/fc581278-d930-463d-af2b-d9fad6cc69a0.png)'
  prefs: []
  type: TYPE_IMG
- en: To add the `Signup` component to the app, add the following `Route` to the `MainRouter`
    in the `Switch` component.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-skeleton/client/MainRouter.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: This will render the `Signup` view at `'/signup'`.
  prefs: []
  type: TYPE_NORMAL
- en: Signin component
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `Signin` component in `client/auth/Signin.js` is also a form with only
    email and password fields for signing in. This component is quite similar to the
    `Signup` component and will render at the `''/signin''` path. The key difference
    is in the implementation of redirection after successful sign-in and storing of
    the received JWT:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/590ab772-2a8f-431e-94ab-7c4fe4a57620.png)'
  prefs: []
  type: TYPE_IMG
- en: 'For redirection, we will use the `Redirect` component from React Router. First,
    initialize a `redirectToReferrer` value to `false` in the state with the other
    fields:'
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-skeleton/client/auth/Signin.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: The `redirectToReferrer` should be set to `true` when the user successfully
    signs in after submitting the form and the received JWT is stored in the `sessionStorage`.
    To store the JWT and redirect afterwords, we will call the `authenticate()` method
    defined in `auth-helper.js`. This code will go in the `clickSubmit()` function
    to be called on form submit.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-skeleton/client/auth/Signin.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: 'The redirection will happen conditionally based on the `redirectToReferrer`
    value with the `Redirect` component in the `render` function. Add the redirect
    code in the render function before the return as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-skeleton/client/auth/Signin.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: The `Redirect` component, if rendered, will take the app to the last location
    or to the `Home` component at the root.
  prefs: []
  type: TYPE_NORMAL
- en: The return will contain the form elements similar to that of `Signup`, with
    just `email` and `password` fields, a conditional error message, and the `submit`
    button.
  prefs: []
  type: TYPE_NORMAL
- en: To add the `Signin` component to the app, add the following Route to the `MainRouter`
    in the `Switch` component.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-skeleton/client/MainRouter.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: This will render the `Signin` component at `"/signin"`.
  prefs: []
  type: TYPE_NORMAL
- en: Profile component
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `Profile` component in `client/user/Profile.js` shows a single user''s
    information in the view at the `''/user/:userId''` path, where the `userId` parameter
    represents the ID of the specific user:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/cb24bc18-4a74-4041-b29f-ab6635c68723.png)'
  prefs: []
  type: TYPE_IMG
- en: This profile information can be fetched from the server only if the user is
    signed in, and to verify this, the component has to provide the JWT to the `read`
    fetch call, otherwise, the user should be redirected to the Sign In view.
  prefs: []
  type: TYPE_NORMAL
- en: In the `Profile` component definition, we first need to initialize the state
    with an empty user and set `redirectToSignin` to `false`.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-skeleton/client/user/Profile.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: We also need to get access to the match props passed by the `Route` component,
    which will contain `:userId` param value and can be accessed as `this.match.params.userId`
    when the component mounts.
  prefs: []
  type: TYPE_NORMAL
- en: The `Profile` component should fetch user information and render it when the
    `userId` parameter changes in the route. However, when the app goes from one profile
    view to the other, and it is just a param change in the route path, the React
    component does not re-mount. Rather, it passes the new props in `componentWillReceiveProps`.
    In order to make sure the component loads the relevant user's information when
    the route param updates, we will place the `read` fetch call in the `init()` function,
    which can then be called in both `componentDidMount` and `componentWillReceiveProps`.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-skeleton/client/user/Profile.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: The `init(userId)` function takes the `userId` value, and calls the read user
    fetch method. Since this method also requires credentials to authorize the signed-in
    user, the JWT is retrieved from `sessionStorage` using the `isAuthenticated` method
    from `auth-helper.js`. Once the server responds, either the state is updated with
    the user information or the view is redirected to the Sign-in view.
  prefs: []
  type: TYPE_NORMAL
- en: This `init` function is called in `componentDidMount` and `componentWillReceiveProps`
    with the relevant `userId` value passed in as a parameter so that the correct
    user information is fetched and loaded in the component.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-skeleton/client/user/Profile.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: 'In the `render` function, we set up the conditional redirect to Signin view,
    and return the content of the `Profile` view:'
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-skeleton/client/user/Profile.js`'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: The `render` function will return the `Profile` view with the following elements
    if the user currently signed-in is viewing another user's profile.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-skeleton/client/user/Profile.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs: []
  type: TYPE_PRE
- en: 'However, if the user currently signed-in is viewing their own profile, they
    will be able to see an edit and delete option in the `Profile` component, as shown
    in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/a262128f-e3dd-41d9-b1ea-584aa9ffa927.png)'
  prefs: []
  type: TYPE_IMG
- en: To implement this feature, in the first `ListItem` component in the `Profile`,
    add a `ListItemSecondaryAction` component containing the `Edit` button and a `DeleteUser`
    component, which will render conditionally based on whether the current user is
    viewing their own profile.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-skeleton/client/user/Profile.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs: []
  type: TYPE_PRE
- en: The `Edit` button will route to the `EditProfile` component, and the custom
    `DeleteUser` component used here will handle the delete operation with the `userId`
    passed to it as a prop.
  prefs: []
  type: TYPE_NORMAL
- en: To add the `Profile` component to the app, add the `Route` to the `MainRouter`
    in the `Switch` component.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-skeleton/client/MainRouter.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs: []
  type: TYPE_PRE
- en: EditProfile component
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `EditProfile` component in `client/user/EditProfile.js` has similarities
    in implementation with both the `Signup` and `Profile` components. It will allow
    the authorized user to edit their own profile information in a form similar to
    the sign up form:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/0927ca58-eb21-4f74-97e9-fcc0d81d0943.png)'
  prefs: []
  type: TYPE_IMG
- en: Upon load at `'/user/edit/:userId'`, the component will fetch the user's information
    with ID after verifying JWT for auth, then load the form with the received user
    information. The form will allow the user to edit and submit only the changed
    information to the `update` fetch call, and on successful update, redirect the
    user to the `Profile` view with updated information.
  prefs: []
  type: TYPE_NORMAL
- en: '`EditProfile` will load the user information the same way as in the `Profile`
    component, by fetching with `read` in `componentDidMount` using the `userId` param
    from `this.match.params`, and credentials from `auth.isAuthenticated`. The form
    view will have the same elements as the `Signup` component with input values updated
    in the state on change.'
  prefs: []
  type: TYPE_NORMAL
- en: On form submit, the component will call the `update` fetch method with the `userId`,
    JWT, and updated user data.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-skeleton/client/user/EditProfile.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs: []
  type: TYPE_PRE
- en: Depending on the response from the server, the user will either see an error
    message or be redirected to the updated Profile page with the following `Redirect`
    component in the render function.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-skeleton/client/user/EditProfile.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs: []
  type: TYPE_PRE
- en: To add the `EditProfile` component to the app, we will use a `PrivateRoute`
    this time, to restrict the component from loading at all if the user is not signed
    in. The order of placement in `MainRouter` will also be important.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-skeleton/client/MainRouter.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE63]'
  prefs: []
  type: TYPE_PRE
- en: The route with path `'/user/edit/:userId'` needs to be placed before the route
    with path `'/user/:userId'`, so that the edit path is matched first exclusively
    in the Switch component when this route is requested, and not confused with the
    `Profile` route.
  prefs: []
  type: TYPE_NORMAL
- en: DeleteUser component
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `DeleteUser` component in `client/user/DeleteUser.js` is basically a button
    that we will add to the Profile view, which when clicked opens a `Dialog` component
    asking the user to confirm the `delete` action:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/9107c796-0e36-4350-9124-4bcb51662b99.png)'
  prefs: []
  type: TYPE_IMG
- en: The component first initializes the state with `open` set to `false` for the
    `Dialog` component, and `redirect` also set to `false` so it isn't rendered first.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-skeleton/client/user/DeleteUser.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE64]'
  prefs: []
  type: TYPE_PRE
- en: Next, we need handler methods to open and close the `dialog` button. The dialog
    is opened when the user clicks the `delete` button.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-skeleton/client/user/DeleteUser.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE65]'
  prefs: []
  type: TYPE_PRE
- en: The dialog is closed when the user clicks `cancel` on the dialog.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-skeleton/client/user/DeleteUser.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE66]'
  prefs: []
  type: TYPE_PRE
- en: The component will have access to the `userId` passed in as a prop from the
    `Profile` component, which is needed to call the `remove` fetch method along with
    the JWT, after the user confirms the `delete` action in the dialog.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-skeleton/client/user/DeleteUser.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE67]'
  prefs: []
  type: TYPE_PRE
- en: On confirmation, the `deleteAccount` function calls the `remove` fetch method
    with the `userId` from props and JWT from `isAuthenticated`. On successful deletion
    in the server, the user will be signed out and redirected to the Home view.
  prefs: []
  type: TYPE_NORMAL
- en: 'The render function contains the conditional `Redirect` to Home view and returns
    the `DeleteUser` component elements, a `DeleteIcon` button and the confirmation
    `Dialog`:'
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-skeleton/client/user/DeleteUser.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE68]'
  prefs: []
  type: TYPE_PRE
- en: '`DeleteUser` takes the `userId` as a prop to be used in the `delete` fetch
    call, so we add a `propType` check for the required prop `userId`.'
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-skeleton/client/user/DeleteUser.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE69]'
  prefs: []
  type: TYPE_PRE
- en: As we are using the `DeleteUser` component in the `Profile` component, it gets
    added to the application view when `Profile` is added in `MainRouter`.
  prefs: []
  type: TYPE_NORMAL
- en: Menu component
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `Menu` component will function as a navigation bar across the frontend application
    by providing links to all the available views, and also be indicating the current
    location in the application.
  prefs: []
  type: TYPE_NORMAL
- en: To implement these navigation bar functionalities, we will use the HOC `withRouter` from
    React Router to get access to the history object's properties. The following code
    in the `Menu` component adds just the title, the `Home` icon linked to the root
    Route, and `Users` button linked to the `'/users'` route.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-skeleton/client/core/Menu.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE70]'
  prefs: []
  type: TYPE_PRE
- en: To indicate the current location of the application on the `Menu`, we will highlight
    the link that matches with the current location path by changing the color conditionally.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-skeleton/client/core/Menu.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE71]'
  prefs: []
  type: TYPE_PRE
- en: 'The `isActive` function is used to apply color to the buttons in the `Menu`
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE72]'
  prefs: []
  type: TYPE_PRE
- en: 'The remaining links such as SIGN IN, SIGN UP, MY PROFILE, and SIGN OUT will
    show up on the `Menu` based on whether the user is signed in or not:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/0771a0a9-9fbc-4b22-b1d7-4b195a068d13.png)'
  prefs: []
  type: TYPE_IMG
- en: For example, the links to SIGN UP and SIGN IN should only show on the menu when
    the user is not signed in. So we need to add it to the `Menu` component after
    the `Users` button with a condition.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-skeleton/client/core/Menu.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE73]'
  prefs: []
  type: TYPE_PRE
- en: Similarly, the link to `MY PROFILE` and the `SIGN OUT` button should only show
    on the menu when the user is signed in, and should be added to the `Menu` component
    with this condition check.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-skeleton/client/core/Menu.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE74]'
  prefs: []
  type: TYPE_PRE
- en: 'The `MY PROFILE` button uses the signed-in user''s information to link to the
    user''s own profile, and the `SIGN OUT` button calls the `auth.signout()` method
    when clicked. When the user is signed in, the Menu will look as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/0cab70a8-b7d1-461c-93f7-6ba69b4281af.png)'
  prefs: []
  type: TYPE_IMG
- en: To have the `Menu` navigation bar present in all the views, we need to add it
    to the `MainRouter` before all the other routes, and outside the `Switch` component.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-skeleton/client/MainRouter.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE75]'
  prefs: []
  type: TYPE_PRE
- en: This will make the `Menu` component render on top of all the other components
    when the component is accessed at a route.
  prefs: []
  type: TYPE_NORMAL
- en: The skeleton frontend is complete with all components necessary to enable a
    user to sign up, view, and modify user data on the backend with consideration
    to authentication and authorization restrictions. However, it is still not possible
    to visit the frontend routes directly in the browser address bar, and can only
    be accessed when linked from within the frontend view. To enable this functionality
    in the skeleton application, we need to implement basic server-side rendering.
  prefs: []
  type: TYPE_NORMAL
- en: Basic server-side rendering
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Currently, when the React Router routes or pathnames are directly entered in
    the browser address bar or when a view that is not at the root path is refreshed,
    the URL does not work. This happens because the server does not recognize the
    React Router routes. We have to implement basic server-side rendering on the backend,
    so the server is able to respond when it receives a request to a frontend route.
  prefs: []
  type: TYPE_NORMAL
- en: To render relevant React components properly when the server receives requests
    to the frontend routes, we need to render the React components server side with
    regard to the React Router and Material-UI components.
  prefs: []
  type: TYPE_NORMAL
- en: The basic idea behind server-side rendering of React apps is to use the `renderToString`
    method from `react-dom` to convert the root React component to markup string,
    and attach it to the template that the server renders when it receives a request.
  prefs: []
  type: TYPE_NORMAL
- en: 'In `express.js`, we will replace the code that returns `template.js` in response
    to the `GET` request for `''/''`, with code, which on receiving any incoming GET
    request, generates server-side rendered markup of the relevant React components,
    and adds this markup to the template. This code will have the following structure:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE76]'
  prefs: []
  type: TYPE_PRE
- en: Modules for server-side rendering
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To implement basic server-side rendering, we will need to import the following
    React, React Router, and Material-UI-specific modules into the server code. In
    our code structure, these modules will be imported into `server/express.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '**React modules**: Required to render the React components and use `renderToString`:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE77]'
  prefs: []
  type: TYPE_PRE
- en: '**Router modules**: The `StaticRouter` is a stateless router that takes the
    requested URL to match the frontend route and the `MainRouter` component, which
    is the root component in our frontend:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE78]'
  prefs: []
  type: TYPE_PRE
- en: '**Material-UI modules**: The following modules will help generate the CSS styles
    for the frontend components based on the Material-UI theme used on the frontend:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE79]'
  prefs: []
  type: TYPE_PRE
- en: With these modules, we can prepare, generate, and return server-side rendered
    frontend code.
  prefs: []
  type: TYPE_NORMAL
- en: Preparing Material-UI styles for SSR
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When the server receives any request, prior to responding with the generated
    markup containing the React view, we need to prepare the CSS styles that should
    also be added to the markup, so the UI does not break on initial render.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-skeleton/server/express.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE80]'
  prefs: []
  type: TYPE_PRE
- en: In order to inject the Material-UI styles, on every request we first generate
    a new `SheetsRegistry` and MUI theme instance, matching what is used in the frontend
    code.
  prefs: []
  type: TYPE_NORMAL
- en: Generating markup
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The purpose of using `renderToString` is to generate an HTML string version
    of the React component that is to be shown to the user in response to the requested
    URL:'
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-skeleton/server/express.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE81]'
  prefs: []
  type: TYPE_PRE
- en: The client app's root component, `MainRouter`, is wrapped with the Material-UI
    theme and JSS to provide the styling props needed by the `MainRouter` child components.
    The stateless `StaticRouter` is used here instead of the `BrowserRouter` used
    on the client side, to wrap `MainRouter` and provide the routing props used in
    implementing the client-side components. Based on these values, such as the requested
    `location` route and theme passed in as props to the wrapping components, the
    `renderToString` will return markup containing the relevant view.
  prefs: []
  type: TYPE_NORMAL
- en: Sending a template with markup and CSS
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Once the markup is generated, we first check if there was a `redirect` rendered
    in the component to be sent in the markup. If there was no redirect, then we generate
    the CSS string from the `sheetsRegistry`, and in the response send the template
    back with the markup and CSS injected.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-skeleton/server/express.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE82]'
  prefs: []
  type: TYPE_PRE
- en: An example of a case where redirect is rendered in the component is when trying
    to access a `PrivateRoute` via server-side render. As the server side cannot access
    the auth token from client-side `sessionStorage`, the redirect in the `PrivateRoute`
    will render. The `context.url`, in this case, will have the `'/signin'` route,
    and hence instead of trying to render the `PrivateRoute` component, it will redirect
    to the `'/signin'` route.
  prefs: []
  type: TYPE_NORMAL
- en: Updating template.js
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The markup and CSS generated on the server must be added to the `template.js` 
    HTML code as follows for it to be loaded when the server renders the template.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-skeleton/template.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE83]'
  prefs: []
  type: TYPE_PRE
- en: Updating MainRouter
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Once the code rendered on the server side reaches the browser, and the frontend
    script takes over, we need to remove the server-side injected CSS when the main
    component mounts. This will give back full control over rendering the React app
    to the client side:'
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-skeleton/client/MainRouter.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE84]'
  prefs: []
  type: TYPE_PRE
- en: Hydrate instead of render
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now that the React components will be rendered on the server side, we can update
    the `main.js` code to use `ReactDOM.hydrate()` instead of `ReactDOM.render()`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE85]'
  prefs: []
  type: TYPE_PRE
- en: The `hydrate` function hydrates a container that already has HTML content rendered
    by `ReactDOMServer`. This means the server-rendered markup is preserved and only
    event-handlers are attached when React takes over in the browser, allowing the
    initial load performance to be better.
  prefs: []
  type: TYPE_NORMAL
- en: With basic server-side rendering implemented, direct requests to the frontend
    routes from the browser address bar can now be handled properly by the server,
    making it possible to bookmark the React frontend views.
  prefs: []
  type: TYPE_NORMAL
- en: The skeleton MERN application developed here is now a completely functioning
    MERN web application with basic user features. We can extend the code in this
    skeleton to add a variety of features for different applications.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we completed the MERN skeleton application by adding a working
    React frontend, including frontend routing and basic server-side rendering of
    the React views.
  prefs: []
  type: TYPE_NORMAL
- en: We started off by updating the development flow to include client-side code
    bundling for the React views. We updated configuration for Webpack and Babel to
    compile the React code and discussed how to load the configured Webpack middleware
    from the Express app to initiate server-side and client-side code compilation
    from one place during development.
  prefs: []
  type: TYPE_NORMAL
- en: With the development flow updated and before building out the frontend, we added
    the relevant React dependencies along with React Router for frontend routing and
    Material-UI to use their existing components in the skeleton app's user interface.
  prefs: []
  type: TYPE_NORMAL
- en: Then, we implemented the top-level root React components, and integrated React
    Router that allowed us to add client-side routes for navigation. Using these routes,
    we loaded the custom React components that we developed using Material-UI components to
    make up the skeleton application's user interface.
  prefs: []
  type: TYPE_NORMAL
- en: To make these React views dynamic and interactive with data fetched from the
    backend, we used the Fetch API to connect to the backend user APIs. Then we incorporated
    authentication and authorization on the frontend views using `sessionStorage`
    to store user-specific details and JWT fetched from the server on successful sign-in,
    and also by limiting access to certain views using a `PrivateRoute` component.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, we modified the server code to implement basic server-side rendering
    that allows loading the frontend routes directly in the browser with server-side
    rendered markup after the server recognizes that the incoming request is actually
    for a React route.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will use the concepts learned while developing this
    basic MERN application, and extend the skeleton application code to build a fully-featured
    social media application.
  prefs: []
  type: TYPE_NORMAL
