- en: Chapter 7. Video Killed the Radio Star
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Working with the CSS and HTML `video` element is, at the time of this writing,
    still sort of like practicing black magic. The main problem is that each browser
    leverages its particular video implementation technique; some of them use the
    GPU, while others use the same rendering engine used for the rest of the page.
    In this chapter, we''ll explore how to create masks and effects on a running video
    by leveraging the power of SVG and CSS. Here''s a list of the topics we''ll cover:'
  prefs: []
  type: TYPE_NORMAL
- en: The HTML5 `video` element
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Masking with SVG
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: SVG animations
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: WebKit-specific masking properties
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: CSS filters
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The HTML5 video element
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The HTML5 specification introduced new multimedia elements to allow a better
    integration of video and audio within a web page without the need to embed external
    plugins, such as Flash. Embedding a video is now as simple as writing this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'There are a few caveats to consider, though; first of all, each browser supports
    only a fraction of the video codecs available, so if we want our element to be
    played, we need to encode our video at least in `mp4` and `webm` and then use
    an alternative syntax to include both of these formats, as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '**Miro** ([http://www.mirovideoconverter.com/](http://www.mirovideoconverter.com/))
    is a good, free video converting software and works with both the Mac and Windows
    operating systems. It''s really easy to use—just choose the desired output format
    and drop the file into the application window to begin the conversion process.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Once we set up our `video` element, we''ll soon discover that most of the common
    CSS3 properties that should affect this element''s shape don''t behave the same
    way on all the browsers. For example, the `border-radius` property; in the following
    screenshot, this property is shown in action displaying videos in various browsers
    (note how this property behaves differently in different browsers):'
  prefs: []
  type: TYPE_NORMAL
- en: '![The HTML5 video element](img/3264OT_07_1.jpg)'
  prefs: []
  type: TYPE_IMG
- en: WebKit-based browsers seem to ignore this property whereas Firefox and IE9 implement
    it correctly. This is probably due to the fact that Chrome and Safari play videos
    using the GPU and are thus less able to apply CSS modification on this content.
  prefs: []
  type: TYPE_NORMAL
- en: These differences between layout engines require a careful approach when dealing
    with video and CSS.
  prefs: []
  type: TYPE_NORMAL
- en: In the project, we're going to develop, using CSS, a small selection of modifications
    that can be applied to a video at runtime. Let's start with some basic masks.
  prefs: []
  type: TYPE_NORMAL
- en: Masks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Masks** are useful tools when we need to hide part of some content; they
    are even more useful with videos because we can apply interesting effects that
    otherwise would require some dedicated software. There are several techniques
    we can employ to create a mask using HTML5/CSS3; however, support across browsers
    is inconsistent. In order to account for the inconsistencies, we will combine
    several techniques in our series.'
  prefs: []
  type: TYPE_NORMAL
- en: 'To some small extent, we can use `border-radius` to mask our video, thus:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: As can you see, this method works with Firefox and IE, but for WebKit-based
    browsers we need to use a different approach.
  prefs: []
  type: TYPE_NORMAL
- en: 'If we''re working using a web server (such as Apache or IIS), we may want to
    configure it to serve video files with the appropriate content type. To achieve
    this, we can create a `.htaccess` file in the root of our project (if we''re using
    Apache) with the following content:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: If we're using IIS, there is another procedure to be followed. This is fully
    explained in the guide at [http://blog.j6consultants.com.au/2011/01/10/cross-browser-html5-video-running-under-iis-7-5/](http://blog.j6consultants.com.au/2011/01/10/cross-browser-html5-video-running-under-iis-7-5/).
  prefs: []
  type: TYPE_NORMAL
- en: 'Since 2008, WebKit has supported a set of CSS properties that manage masks.
    We will use the `webkit-mask-box-image` selector to apply an image mask to our
    movie example. For this, we need a `300px` black circle similar to the one in
    the following image:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Masks](img/3264OT_07_2.jpg)'
  prefs: []
  type: TYPE_IMG
- en: And then, we will use the property introduced previously to set this black circle
    as the mask of the `video` element. When applied, the black parts of this image
    will let the underlying content be viewable whereas the white parts will keep
    the content completely hidden. Of course, gray colors can be used to partially
    hide/show the content.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'And here''s the result:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Masks](img/3264OT_07_3.jpg)'
  prefs: []
  type: TYPE_IMG
- en: More advanced masking
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For now, we can only afford to work with basic types of masking, that is everything
    that can be emulated with the `border-radius` property. But, if we simply try
    to create a mask with a small circle at its center, we discover that this combination
    is not feasible with the previous technique because a rounded corner can only
    lie on an element side. Luckily, we can switch to a more complex but powerful
    one, which involves the SVG format.
  prefs: []
  type: TYPE_NORMAL
- en: Both Gecko and WebKit support SVG masking via different CSS properties—Gecko-based
    browsers use the `mask` property, and WebKit uses `-webkit-mask-image`.
  prefs: []
  type: TYPE_NORMAL
- en: 'These properties don''t just differ by name, they also behave differently:'
  prefs: []
  type: TYPE_NORMAL
- en: The `mask` property needs to be linked to an SVG element called `<mask>` that
    basically is a container for all the shapes we'll use to mask our `html` element
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `-webkit-mask-image` property, on the other hand, needs to point to an SVG
    element containing all the shapes we want to overlay our video with
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'So, for example, here''s how we can implement the `mask` property properly:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'And here''s how we can deal with the `-webkit-mask-image` property:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Here, the SVG file, `svg/mask-circle.svg`, is defined as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'In both these cases, the final result is the same and it''s shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![More advanced masking](img/3264OT_07_4.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The drawback of this method is that we have to create two distinct SVG fragments
    to suit both layout engines. Here comes a small improvement that can lead us to
    a better solution; by taking advantage of the `<use>` element, we can suit the
    needs of both properties in a single SVG file, named `svg/mask.svg`, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'By using this method, we can obtain the same result as the previous image on
    both browsers and with a single CSS statement:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Well done! Now we're ready to implement some masks in our project.
  prefs: []
  type: TYPE_NORMAL
- en: Implementing the project
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this project, we'll use the beautiful trailer of Sintel ([http://www.sintel.org/about/](http://www.sintel.org/about/)),
    a movie released under the Creative Commons license.
  prefs: []
  type: TYPE_NORMAL
- en: As usual, we'll need a basic project structure with some folders (`css`, `img`,
    `svg`, `js`, `video`). The videos used in this project are either available on
    the Sintel website or can be downloaded from Packt's website ([www.packtpub.com](http://www.packtpub.com))
    along with the completed project. We are also going to use **Prefix Free** ([http://leaverou.github.com/prefixfree/](http://leaverou.github.com/prefixfree/)),
    so let's download it and put it inside the `js` folder.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s create an `index.html` file to begin with:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, in `application.css`, let''s do some basic CSS styling as well as the
    masking techniques that we just introduced:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'And here''s the result once the **mask** button is pressed:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Implementing the project](img/3264OT_07_5.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Animating masks
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: SVG supports animations via some special elements. In this chapter, we'll use
    the most generic one, `<animate>`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here''s an example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: The element that contains `<animate>` gets its property animated as described
    by the options specified within the tag's attributes. In the preceding code, we
    ask the browser to animate the opacity of the circle from being completely visible
    to getting hidden in five seconds.
  prefs: []
  type: TYPE_NORMAL
- en: 'So, we''ll be able to obtain an animation that works both on Gecko and WebKit
    browsers if we create a new SVG file, named `svg/mask-animate.svg`, with the following
    code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Here''s the CSS we need to add to `css/application.css`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'And here''s the result with the mask that grows and shrinks in a 5-second animation:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Animating masks](img/3264OT_07_6.jpg)'
  prefs: []
  type: TYPE_IMG
- en: WebKit-specific properties
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'There are some extra properties related to masking that are available only
    for WebKit browsers; these work exactly as their `background` property counterparts,
    so here''s the list, taken from the original WebKit blog post:'
  prefs: []
  type: TYPE_NORMAL
- en: '`-webkit-mask` (`background`): This is a shortcut for all the other properties'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-webkit-mask-attachment` (`background-attachment`): This defines whether the
    mask should scroll within the content or not'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-webkit-mask-clip` (`background-clip`): This specifies the clipping area of
    the mask'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-webkit-mask-position` (`background-position`): This property specifies the
    position of the mask within the element'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-webkit-mask-origin` (`background-origin`): This specifies where the coordinates
    0,0 should be placed within the element (for example, at the beginning of the
    padding area using `padding-box` as the value)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-webkit-mask-image` (`background-image`): This points to one or more images
    or gradients to be used as masks'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-webkit-mask-repeat` (`background-repeat`): This defines whether the mask
    should be repeated or not and and also whether in one or both directions'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-webkit-mask-composite` (`background-composite`): This specifies how two masks
    should merge when overlapping with each other'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-webkit-mask-box-image` (`border-image`): This points to one or more images
    or gradients to be used as masks with the same properties and behavior used to
    define border images'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'With these new properties, we can create some extra effects by taking advantage
    of CSS transitions, for example, we can mask our movie with a gradient and then,
    using `:hover`, change its mask position; here''s the CSS code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Due to the fact that these WebKit-mask properties were created during 2008
    and were probably never updated since then, we have to use the old WebKit gradient
    syntax; apart from that, everything else is pretty straightforward, as shown is
    the following image:'
  prefs: []
  type: TYPE_NORMAL
- en: '![WebKit-specific properties](img/3264OT_07_7.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Masking with text
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We can use text to mask a `video` element; the procedure is similar to what
    we saw previously, but of course, we need to craft another ad hoc SVG file, named
    `svg/mask-text.svg`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: Here, we cannot take advantage of the `<use>` element because of another difference
    between how mask positioning and mask size are determined.
  prefs: []
  type: TYPE_NORMAL
- en: Gecko-based browsers can only afford fixed coordinates, while WebKit-based browsers
    can stretch the mask to fit the screen, if instead of `-webkit-mask-image`, we
    use `-webkit-mask-box-image` (as we saw in the very first example in this chapter).
  prefs: []
  type: TYPE_NORMAL
- en: 'Here''s the required CSS:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'And here''s a screenshot of the result:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Masking with text](img/3264OT_07_8.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Filters
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Along with masks, filters are other powerful modifiers that can be applied
    to elements in order to obtain various effects, such as blur, grayscale, and many
    more. Of course, there are drawbacks; at the time of writing, filters support
    is inhomogeneous. The following are some of the drawbacks:'
  prefs: []
  type: TYPE_NORMAL
- en: IE9 supports some effects using the well-known `progid` filters
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Firefox supports filters if declared within an SVG fragment
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Chrome, Safari, and other WebKit-based browsers support the last CSS filter
    specification
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: IE10 has not yet confirmed support for these properties, plus it will drop support
    for `progid` filters
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'So, let''s implement the blur filter trying to keep the support as wide as
    possible. First, we''ll handle WebKit, which is very easy:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'The parameter passed to the `blur` function is the pixel radius of the effect.
    Next comes Gecko support; for this we have to use the `feGaussianBlur` element
    within a properly done SVG file, named `svg/filters.svg`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'And then, we can refer to this effect using the `filter` property supported
    by Gecko:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, we can also implement this effect on IE9 by using the `progid` filters:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'Here''s the final CSS. Note how we added a `:hover` selector trick to change
    the blur on mouseover; this actually works only on WebKit-based browsers, but
    the support can easily be extended by following the previously-stated rules:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: We also have to deal with the fact that both Gecko and IE9 refer to the same
    `filter` property but with really different valorizations. To find a way around
    this problem, we can use the special `-ms-` class added by Lea Verou's prefixfree
    library on the top-level `html` element.
  prefs: []
  type: TYPE_NORMAL
- en: 'And here''s the result:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Filters](img/3264OT_07_9.jpg)'
  prefs: []
  type: TYPE_IMG
- en: On the current stable Chrome version, the `filter` property seems as if it is
    not working out of the box. This is because we need to enable filters on accelerated
    elements. So let's open a new tab and type `about:flags` into the address bar
    and enable the **GPU Accelerated SVG and CSS Filters** experimental feature.
  prefs: []
  type: TYPE_NORMAL
- en: Grayscale filter
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Let's look at one more filter, grayscale! A grayscale filter basically turns
    all the colors of the target image or video to a corresponding gray value.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here''s the complete CSS:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'And here''s the SVG snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'And finally, here''s a screenshot taken from IE9:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Grayscale filter](img/3264OT_07_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'There are many more filters that can be applied to our elements; for a complete
    list, we can have a look at:'
  prefs: []
  type: TYPE_NORMAL
- en: The official filter draft specifications at [https://dvcs.w3.org/hg/FXTF/raw-file/tip/filters/index.html](https://dvcs.w3.org/hg/FXTF/raw-file/tip/filters/index.html)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The **Filter Effects** section of the SVG specifications at [http://www.w3.org/TR/SVG/filters.html](http://www.w3.org/TR/SVG/filters.html)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The **Filters** section on MSDN at [http://msdn.microsoft.com/en-us/library/ms532847(v=vs.85).aspx](http://msdn.microsoft.com/en-us/library/ms532847(v=vs.85).aspx)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we discovered how to deal with HTML5 `video` elements using
    CSS; we learned that browsers behave very differently, and therefore we have to
    implement various techniques to achieve compatibility.
  prefs: []
  type: TYPE_NORMAL
- en: We figured out how to dynamically add masks—static or animated—and how to create
    a filter, either using SVG or the new W3C specifications.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter we'll learn how to deal with complex animations.
  prefs: []
  type: TYPE_NORMAL
