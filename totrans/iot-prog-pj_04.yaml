- en: Subscribing to Web Services
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Many of us take the technologies that the internet is built on top of for granted.
    When we visit our favorite websites, we care little that the web pages we are
    viewing are crafted for our eyes. However, lying underneath is the internet protocol
    suite of communication protocols. Machines can also take advantage of these protocols
    and communicate machine to machine through web services.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we will continue our journey toward connecting devices through
    the **Internet of Things** (**IoT**). We will explore web services and the various
    technologies behind them. We will conclude our chapter with some Python code where
    we call a live weather service and extract information in real time.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following topics will be covered in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Cloud services for IoT
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Writing a Python program to extract live weather data
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Prerequisites
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The reader should have a working knowledge of the Python programming language
    to complete this chapter as well as an understanding of basic object-oriented
    programming. This will serveÂ the reader well, as we will be separating our code
    into objects.
  prefs: []
  type: TYPE_NORMAL
- en: Project overview
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this project, we will explore the various web services that are available
    and touch on their core strengths. We will then write code that calls the Yahoo!
    Weather web service. We will conclude by having a "ticker" display of real-time
    weather data using the Raspberry Pi Sense HAT emulator.
  prefs: []
  type: TYPE_NORMAL
- en: This chapter should take a morning or afternoon to complete.
  prefs: []
  type: TYPE_NORMAL
- en: Getting started
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To complete this project, the following will be required:'
  prefs: []
  type: TYPE_NORMAL
- en: A Raspberry Pi Model 3 (2015 model or newer)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A USB power supply
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A computer monitor (with HDMI support)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A USB keyboard
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A USB mouse
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Internet access
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Cloud services for IoT
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are many cloud services that we may use for IoT development. Some of the
    biggest companies in technology have thrown their weight behind IoT and in particular
    IoT with artificial intelligence.
  prefs: []
  type: TYPE_NORMAL
- en: The following are the details of some of these services.
  prefs: []
  type: TYPE_NORMAL
- en: Amazon Web Services IoT
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Amazon Web Services IoT is a cloud platform that allows connected devices
    to securely interact with other devices or cloud applications. These are offered
    as pay-as-you-go services without the need for a server, thereby simplifying deployment
    and scalability.
  prefs: []
  type: TYPE_NORMAL
- en: '**Amazon Web Services** (**AWS**) services that may be used by the AWS IoT
    Core are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: AWS Lambda
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Amazon Kinesis
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Amazon S3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Amazon Machine Learning
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Amazon DynamoDB
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Amazon CloudWatch
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: AWS CloudTrail
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Amazon Elasticsearch Service
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: AWS IoT Core applications allow for the gathering, processing, and analysis
    of data generated by connected devices without the need to manage infrastructure.
    Pricing is per messages sent and received.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is a diagram of how AWS IoT may be used. In this scenario, road
    conditions data from a car is sent to the cloud and stored within an S3 Cloud
    Storage service. The AWS service broadcasts this data to other cars, warning them
    of potential hazardous road conditions:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/ec770430-be8c-48e1-b7d6-52bc9189240e.png)'
  prefs: []
  type: TYPE_IMG
- en: IBM Watson platform
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: IBM Watson is a system capable of answering questions posted in natural language.
    Originally designed to compete on the TV game show *Jeopardy!*, Watson was named
    after IBM's first CEO, Thomas J. Watson. In 2011, Watson took on *Jeopardy!* champions
    Brad Rutter and Ken Jennings and won.
  prefs: []
  type: TYPE_NORMAL
- en: Applications using the IBM Watson Developer Cloud may be created with API calls.
    The potential for processing IoT information with Watson is immense.
  prefs: []
  type: TYPE_NORMAL
- en: To put it bluntly, Watson is a supercomputer from IBM that may be accessed over
    the web through API calls.
  prefs: []
  type: TYPE_NORMAL
- en: 'One such use of Watson with IoT is the IBM Watson Assistant for Automotive,
    an integrated solution provided to manufacturers for use in cars. Through this
    technology, the driver and passengers may interact with the outside world for
    such things as booking reservations at restaurants and checking on appointments
    in their calendars. Sensors in the car may be integrated, providing IBM Watson
    Assistant with information on the state of the car such as tire pressure. The
    following is a diagram illustrating a scenario where Watson warns the driver of
    low tire pressure, suggests having it fixed, and then books an appointment at
    the garage:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/aae158bc-7e55-4d14-af47-1db370364d77.png)'
  prefs: []
  type: TYPE_IMG
- en: IBM Watson Assistant for Automotive is sold as a white-label service so that
    manufacturers may label it to suit their needs. The success of IBM Watson Assistant
    for Automotive will depend on how well it competes with other AI assistant services
    such as Amazon's Alexa and Google's AI assistant. Integration with popular services
    such as Spotify for music and Amazon for shopping will also play a role in future
    success.
  prefs: []
  type: TYPE_NORMAL
- en: Google Cloud platform
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Although not as extensive and well-documented as AWS IoT, Google is taking on
    IoT with a lot of interest. A developer may take advantage of Google's processing,
    analytics, and machine intelligence technologies through the use of Google Cloud
    Services.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is a list of some of the services offered through Google Cloud
    Services:'
  prefs: []
  type: TYPE_NORMAL
- en: '**App engine**: Application hosting service'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**BigQuery**: Large-scale database analytics service'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Bigtable**: Scalable database service'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Cloud AutoML**: Machine learning services that allow developers access to
    Google''s Neural Architecture Search technology'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Cloud machine learning engine**: Machine learning service for TensorFlow
    models'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Google video intelligence**: Service to analyze videos and create metadata'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Cloud Vision API**: Service to return data on images through the use of machine
    learning'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following is a diagram of how the Google Cloud Vision API may be used.
    An image of a dog standing next to an upside-down flowerpot is passed to the service
    through the API. The image is scanned and, using machine learning, objects are
    identified in the photo. The returning JSON file contains the results in percentages:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/1699693d-94f5-49ec-91f7-180558df180d.png)'
  prefs: []
  type: TYPE_IMG
- en: Google's focus on keeping things easy and fast gives developers access to Google's
    own private global network. Pricing for the Google Cloud Platform is lower than
    AWS IoT.
  prefs: []
  type: TYPE_NORMAL
- en: Microsoft Azure
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Microsoft Azure (known formerly as Windows Azure) is a cloud-based service from
    Microsoft that allows developers to build, test, deploy, and manage applications
    using Microsoft's vast array of data centers. It supports many different programming
    languages, which are both Microsoft-specific and from outside third parties.
  prefs: []
  type: TYPE_NORMAL
- en: 'Azure Sphere, part of the Microsoft Azure framework, was launched in April
    of 2018 and is Azure''s IoT solution. The following is a scenario where Azure
    Sphere (or Azure IoT, as shown in the diagram) may be used. In this scenario,
    a robot arm located in a remote factory is monitored and controlled by a cellphone
    app somewhere else:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/71cf93b4-2b0e-46e1-a77b-190e426a4551.png)'
  prefs: []
  type: TYPE_IMG
- en: You may have noticed that the previous examples could be set up with any of
    the competing cloud services, and that really is the point. By competing with
    each other, the services become better and cheaper, and as a result, more accessible.
  prefs: []
  type: TYPE_NORMAL
- en: With these large companies such as IBM, Amazon, Google, and Microsoft taking
    on the processing of IoT data, the future of IoT is boundless.
  prefs: []
  type: TYPE_NORMAL
- en: Weather Underground
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Although not heavyweight like the Googles and IBMs of the world, Weather Underground
    offers a web service of weather information that developers may tie their applications
    into. Through the use of a developer account, IoT applications utilizing current
    weather conditions may be built.
  prefs: []
  type: TYPE_NORMAL
- en: At the time of writing this chapter, the Weather Underground network offered
    APIs for developers to use to access weather information. An end-of-service notice
    has been posted to the Weather Underground API site since. To keep up to date
    on the state of this service, visitÂ [https://www.wunderground.com/weather/api/](https://www.wunderground.com/weather/api/).
  prefs: []
  type: TYPE_NORMAL
- en: A basic Python program to pull data from the cloud
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In [Chapter 2](f310884c-55e6-48a4-8329-05ff04e48e19.xhtml), *Writing Python
    Programs Using Raspberry Pi*, we introduced a package called `weather-api` that
    allows us to access the Yahoo! Weather web service. In this section, we will wrap
    up theÂ `Weather`Â object from the `weather-api`Â package in our own class. We will
    reuse the name `CurrentWeather` for our class. After testing out our `CurrentWeather`
    class, we will utilize the Sense Hat Emulator in Raspbian and build a weather
    information ticker.
  prefs: []
  type: TYPE_NORMAL
- en: Accessing the web service
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We will start out by modifying our `CurrentWeather` class to make web service
    calls to Yahoo! Weather through the `weather-api` package:'
  prefs: []
  type: TYPE_NORMAL
- en: Open up Thonny from Application Menu | Programming | Thonny Python IDE.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the New icon to create a new file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Type the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Save the file as `CurrentWeather.py`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Run the code.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'You should see weather information from the web service printed to the shell
    in Thonny. When I ran the program, I saw the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, let''s take a closer look at the code to see what is going on. We start
    off by importing the resources from packages we need for our program:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'We then define our class name, `CurrentWeather`, and set the class variables
    (`temperature`, `weather_conditions`, `wind_speed`, andÂ `city`) to initial values:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'In the `init` method, we set our class variables based on the `city` that is
    passed into the method. We do this by instantiating a variable we call `weather`
    as a `Weather` object with the `unit` set to `CELSIUS`. The `lookup`Â variable
    is created based on the `city` name we pass in. From there, it is a simple matter
    of setting our class variablesÂ (`temperature`, `weather_conditions`, and `wind_speed`)
    from values we extract from `lookup`. The `weather-api` does all of the heavy
    lifting for us as we are able to access values with dot notation. There is no
    need for us to parse XML or JSON data:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'With the class variables set in the `init` method, we use method calls to return
    these class variables:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Since we are running `CurrentWeather.py` as a program in Thonny, we are able
    to use the `if __name__=="__main__"` method and utilizeÂ the `CurrentWeather` class.
    Note that theÂ `if __name__=="__main__"` method has the sameÂ indentation as the
    class name. It would not work if it didn't.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: With every module in Python, there is an attribute called `__name__`. If you
    were to check this attribute for a module you have imported into your program,
    you would get the name of the module returned. For example, if we were to put
    the lineÂ `print(Weather.__name__)`Â in the preceding code, we would get the name
    `Weather` returned. Checking for `__name__`Â in a file we are running returns theÂ `__main__`Â value.
  prefs: []
  type: TYPE_NORMAL
- en: 'In theÂ `if __name__=="__main__"` method, we create an object called `current_weather`
    of type `CurrentWeather`, passing in the city name `Montreal`. We then print out
    the values for `city`, `temperature`, `weather conditions`, and `wind speed` usingÂ theÂ appropriate
    method calls:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Using the Sense HAT Emulator
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now, let''s use the Raspberry Pi Sense HATÂ Emulator to display weather data.
    We will utilize the `CurrentWeather`Â class we just created. To see weather information
    displayed in the Sense HAT Emulator, do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Open up Thonny from Application Menu | Programming | Thonny Python IDE
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the New icon to create a new file
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Type the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Save the file as `DisplayWeather.py`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Load the Sense HAT Emulator fromÂ Application Menu | Programming | Sense HAT
    Emulator
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Position the Sense HAT Emulator so that you can see the display
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Run the code
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'You should see a ticker of the weather information for `Toronto` on the Sense
    HAT Emulator display, similar to the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/9cfaaa47-606f-426e-a44c-1c86b418d7dd.png)'
  prefs: []
  type: TYPE_IMG
- en: 'So, how did we accomplish this? The `init` and `message` methods are at the
    heart of this program. We initialize the `DisplayWeather` class by setting the
    classÂ variableÂ `current_weather`. Once `current_weather` is set, we extract values
    from it in the `display` method in order to build a message we call `message`.
    We then create a `SenseHat` emulator object in the `display`Â method as well and
    call it `sense_hat_emulator`. We pass in our message to the `show_message` method
    of the `SenseHat` emulator through the line `sense_hat_emulator.show_message(message)`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We began this chapter by discussing some of the various web services that are
    available. We discussed the work of some of the biggest companies in information
    technology in the fields of artificial intelligence and IoT.
  prefs: []
  type: TYPE_NORMAL
- en: Both Amazon and Google are aiming to become the platforms that IoT devices connect
    with. Using its vast resources, Amazon, through its Amazon Web Services, provides
    significant documentation and support for its offerings. Not to be outdone, Google
    is also building a powerful platform for IoT. Which platform wins out remains
    to be seen.
  prefs: []
  type: TYPE_NORMAL
- en: IBM's foray into artificial intelligence centers on Watson, their *Jeopardy!*
    playing champion. Winning game shows against the best human players is of course
    not the ultimate goal for Watson. However, the knowledge and technology built
    from such pursuits will find its way into areas we can only imagine today. Watson
    may prove to be the so-called killer app for the IoT world.
  prefs: []
  type: TYPE_NORMAL
- en: There is probably nothing that people talk about more than the weather. In this
    chapter, we used the `weather-api` package to build a weather information ticker
    by utilizing the Raspberry Pi Sense HAT Emulator that's built into the Raspbian
    operating system.
  prefs: []
  type: TYPE_NORMAL
- en: In [Chapter 5](a180e8ce-8d3b-4158-b260-981ee3697af4.xhtml), *Controlling a Servo
    with Python*, we will explore other ways to communicate with the outside world
    by using servo motors to provide an analog display.
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: What is IBM Watson?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: True or false?Â Amazon's IoT web services allows access to other cloud-based
    services from Amazon.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: True or false?Â Watson is a champion of the game show *Jeopardy!*
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: True or false?Â Google has their own global private network.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: True or false?Â We need to change the names of our functions such as `getTemperature`
    when we introduce web service data.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: True or false?Â It is a good idea to use test code in your classes in order to
    isolate the functionality of that class.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What is the purpose of the `DisplayWeather` class in our code?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Which method of the `SenseHat` object do we use to display weather information
    in the Sense HAT Emulator?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A Google search on the various web services that are available is a good place
    to start in order to expand your knowledge of web services.
  prefs: []
  type: TYPE_NORMAL
