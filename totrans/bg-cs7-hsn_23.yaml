- en: Creating a Page That Uses the File Upload Control
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, you will learn how to use the Upload feature in ASP.NET. To
    do this, we will create an interface with the following controls on the page:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/16689440-5eeb-400f-ba62-78e177c79e61.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 23.2.1: The controls for our user interface'
  prefs: []
  type: TYPE_NORMAL
- en: 'When you click on the Browse button, you should get some sample files, as shown
    in *Figure 23.2.2*. Select one of these files, for example, `samp.txt`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/c2531110-7d04-4382-918f-978699cd147d.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 23.2.2: The C:\data directory file listing'
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, when you click on the Upload button, and once the file is uploaded, browser
    will display a message like the one shown in *Figure 23.2.3*, displaying where
    the files have been uploaded, how many files are inside the directory, and what
    they are named. This is our objective here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/70e9e326-c38c-48da-a952-2971061391dd.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 23.2.3: Message displayed when the Upload button is clicked'
  prefs: []
  type: TYPE_NORMAL
- en: 'Make sure that you have `data` as a folder in the root directory of your hard
    drive, and within that folder, you have another folder called `uploads`. To do
    this at the command-line level, go to Command Prompt (`C:\`) and follow these
    steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Type `cd..` to change to the root directory.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Then, type `cd data` and press *Enter*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'At the `C:\data` directory, type `dir`, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'At the `C:\data` directory, type `cd uploads`, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'At the `C:\data\uploads` directory, type `dir` again:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Your screen will look similar to the one shown in *Figure 23.2.4*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/e0c6727c-d0cc-43c9-b845-4fba66beabd4.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 23.2.4: Command line directory listing of C:\data\uploads'
  prefs: []
  type: TYPE_NORMAL
- en: Now let's make this happen.
  prefs: []
  type: TYPE_NORMAL
- en: Starting our project from scratch
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let's make a new project from scratch. Go to File | New | Web Site...; then,
    go to Solution Explorer and click on `Default.aspx`.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can now see a basic HTML. Let''s place a `FileUpload` control into it. To
    do this, go to Toolbox, grab a `FileUpload` control, and drag and drop it below
    the line that begins with `<form id=...`, and add a `<br/>` tag to it, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, let''s put in a button underneath this line, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Change the text on the button so that it says something more meaningful, such
    as `Upload`.
  prefs: []
  type: TYPE_NORMAL
- en: Delete the two `<div>` lines—you won't need them.
  prefs: []
  type: TYPE_NORMAL
- en: 'When you go to the Design view, you have this simple interface, as shown in
    *Figure 23.2.5*. You have a Browse button, which is part of the upload control,
    so that it doesn''t have to be put in there separately, and an Upload button:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/cadad1bf-014f-4382-a250-4d222d9c786f.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 23.2.5: The simple interface for our project'
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, double-click on the Upload button. This takes you into `Default.aspx.cs`.
    Delete the `Page_Load` block. The relevant portion of the starting code for this
    project should look like *Figure 23.2.6*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/af8f4fff-cef9-4e04-b971-8aefc607577b.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 23.2.6: The starting code for this project'
  prefs: []
  type: TYPE_NORMAL
- en: Adding a namespace
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'For reading files, begin by inserting the following after `using System` near
    the top of the file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Saving a file to a specific location
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The first thing that you need to do is to specify a place where files should
    be saved. So, enter the following between a set of curly braces under the line
    that begins with `protected void Button1_Click...` :'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Here, `savePath` is the name of the path where file will be saved. You enter
    the `@` symbol to make a verbatim string, and `c:\data\uploads` is where it will
    be saved. Keep in mind that if you remove the `@` symbol it results in errors,
    because it means read the string exactly as it is.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, enter the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Here, `HasFile` is a simple property. Then, you can say the following (between
    a set of curly braces):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: This line gets the filename, and here again, `FileName` is a property.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, enter the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: So, `savePath` begins by being the folder structure, and then you also attach
    to it the filename.
  prefs: []
  type: TYPE_NORMAL
- en: Saving the file
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now, to actually save the file, enter the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Remember, anytime you want to learn more about any of these terms, you can do
    so. Just right-click on them and select Go To Definition. For example, as shown
    in *Figure 23.2.7*, if you expand the `public void SaveAs` line, it says Saves
    the contents of an uploaded file to specified path on the Web server. Also, it
    throws exceptions, so there is the possibility of errors. Keep that in mind.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/fd772e1e-4fde-43ac-933c-f8c3867972bf.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 23.2.7: The explanation of SaveAs within Go To Definition'
  prefs: []
  type: TYPE_NORMAL
- en: Displaying messages to the user
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Next, let''s display some useful diagnostic messages to the user. To do this,
    enter the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'The other possibility is that there is no file. So, in other words, `FileUpload1.HasFile`
    is false. If that''s the case—there''s no file, you can take the preceding line,
    paste it down below, and change the text so that it makes sense. Start by typing
    `else` below the preceding closing brace, and then enter the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Determining which files are stored in a directory
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Next, let''s go and see what files are inside the directory. So, enter the
    following below the closing brace underneath the preceding line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Again, you'll get it from the same place as in the earlier line that begins
    with `String savePath...`, and paste `c:\data\uploads\` in this line here.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, you start by typing `try` on the line that follows, and between a set
    of curly braces under that, enter this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: The tooltip that appears while entering `EnumerateFiles` says that there are
    a couple of overloads—`string path` and `string searchPattern`. So, here the path
    will be `sourceDirectory`, and `searchPattern` will be used to search for everything
    ending with `.txt`. Hence we put `*.txt` at the end. This is how you can enumerate
    all of the files.
  prefs: []
  type: TYPE_NORMAL
- en: Determining the return type
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'If you hover your mouse over `var` in the preceding line, the pop-up tooltip
    tells you what the return type is. It says `IEnumerable`. Now hover your mouse
    over `EnumerateFiles`, right-click on it, and select Go To Definition:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/ba46a154-8434-469a-99b7-d60c0f37b6dc.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 23.2.8: In the definition, it shows that the return type is IEnumerable'
  prefs: []
  type: TYPE_NORMAL
- en: As shown in *Figure 23.2.8*, the return type is `IEnumerable`, which means that
    you can iterate over the results, or display them using a `foreach` statement.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, enter the following beneath the preceding line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Then just below this, enter the following (indented):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: Exploring the exceptions for EnumerateFiles
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now, again hold your mouse over `EnumerateFiles`, right-click on it, and select
    Go To Definition. Expand the definition and look at the exceptions that it can
    throw. There are quite a few of them, a sampling of which is shown in *Figure
    23.2.9*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/d1b84299-e127-475b-acd6-3d0c765d517d.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 23.2.9: A partial listing of the exceptions that EnumerateFiles can
    throw'
  prefs: []
  type: TYPE_NORMAL
- en: As an example, `DirectoryNotFound` might be a common exception; `path` is a
    filename, `PathTooLong` and `SecurityException` are also common exceptions. So,
    there are quite a few for `EnumerateFiles`.
  prefs: []
  type: TYPE_NORMAL
- en: Catching the exceptions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In other words, you need to insert some kind of `catch` to handle these things.
    So, enter the following after the last closed curly brace:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, between a set of curly braces, enter the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: Here, `ex.Message` represents the message from the exception object to be displayed
    on the screen.
  prefs: []
  type: TYPE_NORMAL
- en: Running the program
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now let's confirm that this will work, so crank it up in your browser. Click
    on Browse, and grab the `temp.txt` file from the `C:\data` directory. Click on
    Upload. As you can see in *Figure 23.2.10*, your file has been saved, and there
    are the other files in that same directory. Perfect!
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/85942736-a8cf-4235-bf44-c79eff9e2f9f.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 23.2.10: The results of running our program'
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, imagine that you made an error like the following (typing `upload` instead
    of *uploads*):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'If you run it again, by clicking on Browse and selecting the `samplefile.txt`
    file, you can see from the error message shown in *Figure 23.2.11* that it Could
    not find a part of the path... :'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/4b4d6d4f-3a63-475b-b336-aba922d0a8e9.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 23.2.11: Error message displayed when the path is incorrectly entered'
  prefs: []
  type: TYPE_NORMAL
- en: So these are the basics of making this work. Again, be sure to enter and run
    this code a few times, and then you'll know exactly what's going on. Remember,
    we can do this safely because the web page is accessible only on our local computer.
    In a more realistic situation, you would need to be more concerned with security
    and guard against malicious uploads.
  prefs: []
  type: TYPE_NORMAL
- en: Chapter review
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The complete version of the `Default.aspx.cs` file for this chapter, including
    comments, is shown in the following code block:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you learned how to use the Upload feature in ASP.NET. You saved
    a file to a specific location, displayed messages to the user, determined which
    files are stored in a directory, explored the exceptions for `EnumerateFiles`,
    and wrote the code to catch the exceptions.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, you will learn another way of saving objects with the hard
    drive using serialization. Then, you will learn about the process of rebuilding
    an object from the hard drive, which is called **deserialization**.
  prefs: []
  type: TYPE_NORMAL
