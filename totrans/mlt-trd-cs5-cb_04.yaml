- en: Chapter 4. Using Task Parallel Library
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will dive into a new asynchronous programming paradigm,
    Task Parallel Library. You will learn the following:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
- en: Creating a task
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Performing basic operations with a task
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Combining tasks together
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Converting the APM pattern to tasks
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Converting the EAP pattern to tasks
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Implementing a cancellation option
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Handling exceptions in tasks
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Running tasks in parallel
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Tweaking tasks execution with TaskScheduler
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous chapters, we learned what a thread is, how to use threads, and
    why we need a thread pool. Using a thread pool allows us to save operating system
    resources at the cost of reducing a parallelism degree. We can think of thread
    pool as an **abstraction layer** that hides details of thread usage from a programmer,
    allowing us to concentrate on a program's logic rather than on threading issues.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
- en: However, using a thread pool is complicated as well. There is no easy way to
    get a result from a thread pool worker thread. We need to implement our own way
    to get a result back, and in case of exception, we have to propagate it to the
    original thread properly. Besides this, there is no easy way to create a set of
    dependent asynchronous actions, where one action runs after another finishes its
    work.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
- en: There were several attempts to work around those issues, which resulted in the
    creation of Asynchronous Programming Model and Event-based Asynchronous Pattern,
    mentioned in [Chapter 3](ch03.html "Chapter 3. Using a Thread Pool"), *Using a
    Thread Pool*. These patterns made getting results easier, and did a good work
    with propagating exceptions, but combining asynchronous actions together still
    required a lot of work and resulted in a large amount of code.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
- en: To resolve all these problems, a new API for asynchronous operations was introduced
    in .Net Framework 4.0\. It is called **Task Parallel Library** (**TPL**). It was
    changed slightly in .Net Framework 4.5, and to make it clear, we will work with
    the latest version of TPL by using the 4.5 Version of .Net Framework in our projects.
    TPL can be considered as one more abstraction layer over a thread pool, hiding
    the lower-level code that will work with the thread pool from a programmer, and
    supplying a more convenient and fine-grained API.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
- en: The core concept of TPL is a task. A task represents an asynchronous operation,
    which can be run in a variety of ways, using a separate thread or not. We will
    look through all possibilities in detail in this chapter.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
- en: Note
  id: totrans-17
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: By default, a programmer is not aware how exactly the task is executing. TPL
    raises the level of abstraction by hiding the task implementation details from
    the user. Unfortunately, in some cases this could lead to mysterious errors, such
    as hanging the application while trying to get a result from the task. This chapter
    will help to understand mechanics under the hood of TPL, and how to avoid using
    it in improper ways.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
- en: A task can be combined with other tasks in different variations. For example,
    we are able to start several tasks simultaneously, wait for all of them to complete,
    and then run a task that will perform some calculations over all the previous
    tasks' results. Convenient APIs for task combination is one of the key advantages
    of TPL compared to the previous patterns.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
- en: There are also several ways to deal with exceptions resulting from tasks. Since
    a task may consist of several another tasks, and they in turn have their child
    tasks as well, there is a concept of `AggregateException`. This type of exception
    is holding all exceptions from underlying tasks inside, allowing handling them
    separately.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
- en: And, last but not least, C# 5.0 has built-in support for TPL, allowing us to
    work with tasks in a very smooth and comfortable way using the new `await` and
    `async` keywords. We will discuss this topic in [Chapter 5](ch05.html "Chapter 5. Using
    C# 5.0"), *Using C# 5.0*.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we will learn to use TPL to execute asynchronous operations.
    We will learn what a task is, cover different ways to create tasks, and how to
    combine tasks together. We will also discuss how to convert legacy APM and EAP
    patterns to use tasks, how to handle exceptions properly, how to cancel tasks,
    and how to work with several tasks executing simultaneously. In addition, we will
    find out how to deal with tasks in Windows GUI applications properly.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
- en: Creating a task
  id: totrans-23
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This recipe shows a basic concept of what a task is. You will learn how to create
    and execute tasks.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  id: totrans-25
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To step through this recipe, you will need **Visual Studio 2012**. There are
    no other prerequisites. The source code for this recipe could be found at `BookSamples\Chapter4\Recipe1`.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  id: totrans-27
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To create and execute a task, perform the following steps:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
- en: Start Visual Studio 2012\. Create a new C# **Console Application** project.
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  id: totrans-30
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This time, please make sure that you are using .Net Framework 4.5\. From now
    on, we will be using this version for every project.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/7644OT_04_01.jpg)'
  id: totrans-32
  prefs: []
  type: TYPE_IMG
- en: 'In the `Program.cs` file, add the following `using` directives:'
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Add the following code snippet below the `Main` method:'
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Add the following code snippet inside the `Main` method:'
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Run the program.
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  id: totrans-40
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When the program runs, it creates two tasks with its constructor. We pass the
    lambda expression as the `Action` delegate; this allows us to provide a string
    parameter to `TaskMethod`. Then, we run these tasks by using the `Start` method.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
- en: Note
  id: totrans-42
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Please note that until we call the `Start` method on those tasks, they will
    not start executing. It is very easy to forget to actually start the task.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
- en: Then, we run two more tasks using the `Task.Run` and `Task.Factory.StartNew`
    methods. The difference is that both the created tasks immediately start working,
    so we do not need to call the `Start` method on the tasks explicitly. All of the
    tasks, number `Task 1` to `Task 4`, are placed on thread pool worker threads and
    run in an unspecified order. If you run the program several times, you will find
    that the tasks' execution order is not defined.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
- en: The `Task.Run` method is just a shortcut to `Task.Factory.StartNew`, but the
    latter method has additional options. In general, use the former method unless
    you need to do something special, as in case of `Task 5`. We mark this task as
    long running, and as a result, this task will be run on a separate thread not
    using a thread pool. However, this behavior could change, depending on the current
    **task scheduler** that runs the task. You will learn what a task scheduler is
    in the last recipe of this chapter.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
- en: Performing basic operations with a task
  id: totrans-46
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This recipe will describe how to get the result value from a task. We will go
    through several scenarios to understand the difference between running a task
    on a thread pool or on a main thread.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  id: totrans-48
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To start this recipe, you will need Visual Studio 2012\. There are no other
    prerequisites. The source code for this recipe could be found at `BookSamples\Chapter4\Recipe2`.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  id: totrans-50
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To perform basic operations with a task, perform the following steps:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
- en: Start Visual Studio 2012\. Create a new C# **Console Application** project.
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the `Program.cs` file, add the following `using` directives:'
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Add the following code snippet below the `Main` method:'
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Add the following code snippet inside the `Main` method:'
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Run the program.
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  id: totrans-60
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: At first, we run `TaskMethod` without wrapping it into a task. As a result,
    it is executing synchronously, providing us with the information about the main
    thread. Obviously, it is not a thread-pool thread.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
- en: Then we run `Task 1`, starting it with the `Start` method and waiting for the
    result. This task will be placed on a thread pool, and the main thread waits and
    is blocked until the task returns.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
- en: We do the same with `Task 2`, except that we run it using the `RunSynchronously()`
    method. This task will run on the main thread, and we get exactly the same output
    as in the very first case when we just called `TaskMethod` synchronously. This
    is a very useful optimization, allowing us to avoid thread pool usage for very
    short-lived operations.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
- en: We run `Task 3` in the same way we did with `Task 1`, but instead of blocking
    the main thread, we just spin, printing out the task status until the task is
    completed. This shows several task statuses, which are `Created`, `Running`, and
    `RanToCompletion` respectively.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
- en: Combining tasks together
  id: totrans-65
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This recipe will show how to set up tasks that are dependent on each other.
    We will learn how to create a task that will run after the parent task completes.
    In addition, we will discover a possibility to save thread usage for very short-lived
    tasks.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  id: totrans-67
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To step through this recipe, you will need Visual Studio 2012\. There are no
    other prerequisites. The source code for this recipe can be found at `BookSamples\Chapter4\Recipe3`.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  id: totrans-69
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'For combining tasks together, perform the following steps:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
- en: Start Visual Studio 2012\. Create a new C# **Console Application** project.
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the `Program.cs` file, add the following `using` directives:'
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Add the following code snippet below the `Main` method:'
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Add the following code snippet inside the `Main` method:'
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Run the program.
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  id: totrans-79
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When the main program starts, we create two tasks, and for the first task we
    set up a **continuation** (a block of code that runs after the antecedent task
    is complete). Then we start both the tasks and wait for 4 seconds, which is enough
    for both tasks to complete. Then we run another continuation to the second task
    and try to execute it synchronously by specifying a `TaskContinuationOptions.ExecuteSynchronously`
    option. This is a useful technique when the continuation is very short-lived,
    and it will be faster to run it on the main thread than to put it on a thread
    pool. We are able to achieve this because the second task is completed by that
    moment. If we comment out the 4 seconds `Thread.Sleep` method, we will see that
    this code will be put on a thread pool because we do not have the result from
    the antecedent task yet.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
- en: Finally, we define a continuation for the previous continuation, but in a slightly
    different manner, using the new `GetAwaiter` and `OnCompleted` methods. These
    methods are intended to be used along with C# 5.0 language asynchronous mechanics.
    We will cover this topic later in [Chapter 5](ch05.html "Chapter 5. Using C# 5.0"),
    *Using C# 5.0*.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
- en: The last part of the demo is about the parent-child task relationships. We create
    a new task, and while running this task, we run a so-called child task by providing
    a `TaskCreationOptions.AttachedToParent` option.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  id: totrans-83
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The child task must be created while running a parent task to attach to the
    parent properly!
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
- en: This means that the parent task *will not complete* until all child tasks finish
    its work. We are also able to run continuations on a child tasks providing a `TaskContinuationOptions.AttachedToParent`
    option. This continuation will affect the parent task as well, and it will not
    complete until the very last child task ends.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
- en: Converting the APM pattern to tasks
  id: totrans-86
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will see how to convert an old-fashioned APM API to a task.
    There are examples of different situations that could happen in the process of
    conversion.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  id: totrans-88
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To start this recipe, you will need Visual Studio 2012\. There are no other
    prerequisites. The source code for this recipe can be found at `BookSamples\Chapter4\Recipe4`.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  id: totrans-90
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'For converting the APM pattern to tasks, perform the following steps:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
- en: Start Visual Studio 2012\. Create a new C# **Console Application** project.
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the `Program.cs` file, add the following `using` directives:'
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Add the following code snippet below the `Main` method:'
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Add the following code snippet inside the `Main` method:'
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Run the program.
  id: totrans-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  id: totrans-100
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Here we define two kinds of delegates; one of them is using the `out` parameter
    and therefore is incompatible with the standard TPL API for converting the APM
    pattern to tasks. Then we have three examples of such a conversion.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
- en: The key point for converting APM to TPL is a `Task<T>.Factory.FromAsync` method,
    where `T` is the asynchronous operation result type. There are several overloads
    of this method; in the first case, we pass `IAsyncResult` and `Func<IAsyncResult,
    string>`, which is a method that accepts `IAsyncResult` implementation and returns
    a string. Since the first delegate type provides `EndMethod` that is compatible
    with this signature, we have no problem converting this delegate asynchronous
    call to a task.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
- en: In the second example, we do almost the same, but use a different `FromAsync`
    method overload, which does not allow specifying a callback that will be executed
    after the asynchronous delegate call completes. We are able to replace this with
    continuation, but if the callback is important, we can use the first example.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
- en: The last example shows a little trick. This time, `EndMethod` of the `IncompatibleAsynchronousTask`
    delegate uses the `out` parameter, and is not compatible with any `FromAsync`
    method overload. However, it is very easy to wrap the `EndMethod` call into a
    lambda expression that will be suitable for the task factory.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
- en: To see what is going on with the underlying task, we are printing its status
    while waiting for the asynchronous operation's result. We see that the first task's
    status is `WaitingForActivation`, which means that the task was not actually started
    yet by the TPL infrastructure.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
- en: Converting the EAP pattern to tasks
  id: totrans-106
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This recipe will describe how to translate event-based asynchronous operations
    to tasks. In this recipe, you will find a solid pattern that is suitable for every
    event-based asynchronous API in the .NET Framework class library.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  id: totrans-108
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To begin this recipe, you will need Visual Studio 2012\. There are no other
    prerequisites. The source code for this recipe can be found at `BookSamples\Chapter4\Recipe5`.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  id: totrans-110
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'For converting the EAP pattern to tasks, perform the following steps:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
- en: Start Visual Studio 2012\. Create a new C# **Console Application** project.
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the `Program.cs` file, add the following `using` directives:'
  id: totrans-113
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Add the following code snippet below the `Main` method:'
  id: totrans-115
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Add the following code snippet inside the `Main` method:'
  id: totrans-117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Run the program.
  id: totrans-119
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  id: totrans-120
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This is a very simple and elegant example of converting EAP patterns to tasks.
    The key point is to use the `TaskCompletionSource<T>` type, where `T` is an asynchronous
    operation result type.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
- en: It is also important to not forget to wrap the `tcs.SetResult` method call into
    the `try` **-** `catch` block to guarantee that the error information is always
    set to the task completion source object. It is also possible to use the `TrySetResult`
    method instead of `SetResult` to make sure that the result has been set successfully.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
- en: Implementing a cancellation option
  id: totrans-123
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This recipe is about implementing the cancellation process for task-based asynchronous
    operations. We will learn how to use the cancellation token properly for tasks,
    and how to find out whether a task is cancelled before it was actually run.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  id: totrans-125
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To start with this recipe, you will need Visual Studio 2012\. There are no other
    prerequisites. The source code for this recipe can be found at `BookSamples\Chapter4\Recipe6`.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  id: totrans-127
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'For implementing a cancellation option for task-based asynchronous operations,
    perform the following steps:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
- en: Start Visual Studio 2012\. Create a new C# **Console Application** project.
  id: totrans-129
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the `Program.cs` file, add the following `using` directives:'
  id: totrans-130
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Add the following code snippet below the `Main` method:'
  id: totrans-132
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Add the following code snippet inside the `Main` method:'
  id: totrans-134
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Run the program.
  id: totrans-136
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  id: totrans-137
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This is another very simple example of how to implement the cancellation option
    for a TPL task, as you are already familiar with the cancellation token concept
    we discussed in [Chapter 3](ch03.html "Chapter 3. Using a Thread Pool"), *Using
    a Thread Pool*.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
- en: First, let's look closely at the `longTask` creation code. We'll pass a cancellation
    token to the underlying task once and then to the task constructor the second
    time. *Why do we need to supply this token twice?*
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
- en: The answer is that if we cancel the task before it was actually started, its
    TPL infrastructure is responsible for dealing with the cancellation, because our
    code will not execute at all. We know that the first task was canceled by getting
    its status. If we will try to call the `Start` method on this task, we will get
    `InvalidOperationException`.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
- en: Then, we deal with the cancellation process from our own code. This means that
    we are now fully responsible for the cancellation process, and after we canceled
    the task, its status is still `RanToCompletion`, because from TPL's perspective,
    the task finished its job normally. It is very important to distinguish these
    two situations and understand the responsibility difference in each case.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
- en: Handling exceptions in tasks
  id: totrans-142
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This recipe describes the very important topic of handling exceptions in asynchronous
    tasks. We will go through different aspects of what happens to exceptions thrown
    from tasks and how to get to their information.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  id: totrans-144
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To step through this recipe, you will need Visual Studio 2012\. There are no
    other prerequisites. The source code for this recipe can be found at `BookSamples\Chapter4\Recipe7`.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  id: totrans-146
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'For handling exceptions in tasks, perform the following steps:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
- en: Start Visual Studio 2012\. Create a new C# **Console Application** project.
  id: totrans-148
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the `Program.cs` file, add the following `using` directives:'
  id: totrans-149
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  id: totrans-150
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Add the following code snippet below the `Main` method:'
  id: totrans-151
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  id: totrans-152
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Add the following code snippet inside the `Main` method:'
  id: totrans-153
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  id: totrans-154
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Run the program.
  id: totrans-155
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  id: totrans-156
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When the program starts, we create a task and try to get the task results synchronously.
    The `Get` part of the `Result` property makes the current thread wait until the
    completion of the task and propagates the exception to the current thread. In
    this case, we easily catch the exception in catch block, but this exception is
    a wrapper exception called `AggregateException`. In this case, it holds only one
    exception inside, because only one task has thrown this exception, and it is possible
    to get the underlying exception by accessing the `InnerException` property.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
- en: The second example is mostly the same, but to access the task result we use
    the `GetAwaiter` and `GetResult` methods. In this case, we do not have wrapper
    exception because it is unwrapped by the TPL infrastructure. We have an original
    exception at once, which is quite comfortable if we have only one underlying task.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
- en: The last example shows the situation where we have two task-throwing exceptions.
    To handle exceptions, we use now a continuation, which is executed only in case
    the antecedent task finishes with exception. This behavior is achieved by providing
    a `TaskContinuationOptions.OnlyOnFaulted` option to a continuation. As a result,
    we have `AggregateException` being printed out, and we have two inner exceptions
    from the both tasks inside it.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
- en: There's more…
  id: totrans-160
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As tasks may be connected in a very different manner, the resulting `AggregateException`
    exception might contain other aggregate exceptions inside along with the usual
    exceptions. Those inner aggregate exceptions might themselves contain other aggregate
    exceptions within them.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
- en: To get rid of those wrappers, we should use the root aggregate exception's `Flatten`
    method. It will return a collection of all the inner exceptions of every child
    aggregate exception in the hierarchy.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
- en: Running tasks in parallel
  id: totrans-163
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This recipe shows how to handle many asynchronous tasks running simultaneously.
    We will learn how to be notified effectively when all tasks are complete or any
    of the running tasks have to finish their work.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 这个示例展示了如何处理同时运行的许多异步任务。我们将学习如何在所有任务完成或任何正在运行的任务必须完成它们的工作时有效地得到通知。
- en: Getting ready
  id: totrans-165
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: To start this recipe, you will need Visual Studio 2012\. There are no other
    prerequisites. The source code for this recipe can be found at `BookSamples\Chapter4\Recipe8`.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始这个示例，你需要Visual Studio 2012。没有其他先决条件。这个示例的源代码可以在`BookSamples\Chapter4\Recipe8`中找到。
- en: How to do it...
  id: totrans-167
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'For running tasks in parallel, perform the following steps:'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 要并行运行任务，执行以下步骤：
- en: Start Visual Studio 2012\. Create a new C# **Console Application** project.
  id: totrans-169
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动Visual Studio 2012。创建一个新的C#控制台应用程序项目。
- en: 'In the `Program.cs` file, add the following `using` directives:'
  id: totrans-170
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Program.cs`文件中，添加以下`using`指令：
- en: '[PRE21]'
  id: totrans-171
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Add the following code snippet below the `Main` method:'
  id: totrans-172
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Main`方法下面添加以下代码片段：
- en: '[PRE22]'
  id: totrans-173
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Add the following code snippet inside the `Main` method:'
  id: totrans-174
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Main`方法内部添加以下代码片段：
- en: '[PRE23]'
  id: totrans-175
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: Run the program.
  id: totrans-176
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行程序。
- en: How it works...
  id: totrans-177
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理...
- en: When the program starts, we create two tasks, and then with the help of the
    `Task.WhenAll` method, we create a third task, which will complete after all the
    tasks are complete. The resulting task provides us with an answers array, where
    the first element holds the first task's result, the second element holds the
    second result, and so on.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 程序启动时，我们创建两个任务，然后借助`Task.WhenAll`方法创建一个第三个任务，该任务将在所有任务完成后完成。结果任务为我们提供了一个答案数组，其中第一个元素保存第一个任务的结果，第二个元素保存第二个结果，依此类推。
- en: Then, we create another list of tasks and wait for any of those tasks to complete
    with the `Task.WhenAny` method. After we have one finished task, we remove it
    from the list and continue to wait for the other tasks to complete until the list
    is empty. This method is useful to get the tasks' completion progress or to use
    timeout while running the tasks. For example, we wait for a number of tasks and
    one of those tasks is counting a timeout. If this task completes first, we just
    cancel those tasks that are not completed yet.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们创建另一个任务列表，并使用`Task.WhenAny`方法等待其中任何一个任务完成。在我们有一个完成的任务后，我们将其从列表中移除，并继续等待其他任务完成，直到列表为空。这种方法对于获取任务的完成进度或在运行任务时使用超时非常有用。例如，我们等待一些任务，其中一个任务正在计算超时。如果这个任务首先完成，我们就取消那些尚未完成的任务。
- en: Tweaking tasks execution with TaskScheduler
  id: totrans-180
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用TaskScheduler调整任务执行
- en: This recipe describes another very important aspect of dealing with tasks, which
    is a proper way to work with UI from the asynchronous code. We will learn what
    a task scheduler is, why it is so important, how it can harm our application,
    and how to use it to avoid errors.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 这个示例描述了处理任务的另一个非常重要的方面，即从异步代码中正确处理UI的方法。我们将学习任务调度程序是什么，为什么它如此重要，它如何损害我们的应用程序，以及如何使用它来避免错误。
- en: Getting ready
  id: totrans-182
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: To step through this recipe, you will need Visual Studio 2012\. There are no
    other prerequisites. The source code for this recipe can be found at `BookSamples\Chapter4\Recipe9`.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 要完成这个示例，你需要Visual Studio 2012。没有其他先决条件。这个示例的源代码可以在`BookSamples\Chapter4\Recipe9`中找到。
- en: How to do it...
  id: totrans-184
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'For tweaking tasks execution with `TaskScheduler`, perform the following steps:'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 通过使用`TaskScheduler`调整任务执行，执行以下步骤：
- en: Start Visual Studio 2012\. Create a new C# **WPF Application** project. This
    time we will need a UI thread with a message loop, which is not available in console
    applications.![How to do it...](img/7644OT_04_02.jpg)
  id: totrans-186
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动Visual Studio 2012。创建一个新的C# WPF应用程序项目。这一次，我们将需要一个带有消息循环的UI线程，这在控制台应用程序中是不可用的。
- en: 'In the `MainWindow.xaml` file, add the following markup inside a grid element
    (that is, between the `<Grid>` and `</Grid>` tags):'
  id: totrans-187
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`MainWindow.xaml`文件中，在一个网格元素内添加以下标记（即在`<Grid>`和`</Grid>`标记之间）：
- en: '[PRE24]'
  id: totrans-188
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'In the `MainWindow.xaml.cs` file, use the following `using` directives:'
  id: totrans-189
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`MainWindow.xaml.cs`文件中，使用以下`using`指令：
- en: '[PRE25]'
  id: totrans-190
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Add the following code snippet below the `MainWindow` constructor:'
  id: totrans-191
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`MainWindow`构造函数下面添加以下代码片段：
- en: '[PRE26]'
  id: totrans-192
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: Run the program.
  id: totrans-193
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行程序。
- en: How it works...
  id: totrans-194
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理...
- en: Here we meet many new things. First, we created a WPF application instead of
    a console application. It is necessary because we need a user interface thread
    with a message loop to demonstrate the different options of running a task asynchronously.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们遇到了许多新的东西。首先，我们创建了一个WPF应用程序，而不是控制台应用程序。这是必要的，因为我们需要一个用户界面线程和消息循环来演示异步运行任务的不同选项。
- en: There is a very important abstraction called `TaskScheduler`. This component
    is actually responsible for how the task will be executed. The default task scheduler
    puts tasks on a thread pool worker thread. This is the most common scenario and
    there's no surprise that it is the default option in TPL. We also know how to
    run a task synchronously and how to attach them to the parent tasks to run those
    tasks together. Now let us see what else we can do with tasks.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 有一个非常重要的抽象叫做`TaskScheduler`。这个组件实际上负责任务的执行方式。默认的任务调度程序将任务放在线程池工作线程上。这是最常见的情况，也不奇怪它是TPL中的默认选项。我们还知道如何同步运行任务，以及如何将它们附加到父任务以一起运行。现在让我们看看我们可以用任务做什么。
- en: When the program starts, we create a window with three buttons. The first button
    invokes a synchronous task execution. The code is placed inside the `ButtonSync_Click`
    method. While the task runs, even we are not able to move the application window.
    The user interface is totally frozen while the user interface thread is busy running
    the task, and cannot respond to any message loop until the task is complete. This
    is quite a common bad practice for GUI Windows application, and we need to find
    a way to work around this issue.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 程序启动时，我们创建一个带有三个按钮的窗口。第一个按钮调用同步任务执行。代码放在`ButtonSync_Click`方法中。当任务运行时，即使我们无法移动应用程序窗口。用户界面在任务运行时完全冻结，直到任务完成之前，用户界面线程无法响应任何消息循环。这是GUI
    Windows应用程序的一个常见的不良实践，我们需要找到一种解决这个问题的方法。
- en: The second problem is that we try to access the UI controls from another thread.
    The graphical user interface controls have never been designed to be used from
    multiple threads, and to avoid possible errors, you are not allowed to access
    these components from a thread other than the one on which it was created. When
    we try to do that, we get an exception, and the exception message is printed on
    the main window in 5 seconds.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 第二个问题是，我们试图从另一个线程访问UI控件。图形用户界面控件从未设计为从多个线程中使用，并且为了避免可能的错误，不允许您从创建它的线程之外的线程访问这些组件。当我们尝试这样做时，我们会收到异常，并且异常消息将在5秒钟后打印在主窗口中。
- en: To resolve the first problem, we try to run the task asynchronously. This is
    what the second button does; the code for this is placed inside the `ButtonAsync_Click`
    method. If you run the task under debugger, you will see that it is placed on
    a thread pool, and in the end, we will get the same exception. However, the user
    interface remains responsive all the time while the task runs. This is a good
    thing, but we need to get rid of the exception.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 为了解决第一个问题，我们尝试异步运行任务。这就是第二个按钮的作用；其中的代码放在`ButtonAsync_Click`方法中。如果在调试器下运行任务，您将看到它被放置在线程池中，最后，我们将得到相同的异常。然而，用户界面在任务运行时始终保持响应。这是一件好事，但我们需要摆脱异常。
- en: And we already did that! To output the error message, a continuation was provided
    with the `TaskScheduler.FromCurrentSynchronizationContext` option. If this is
    not done, we would not see the error message because we would get the same exception
    that happened inside the task. This option instructs the TPL infrastructure to
    put a code inside the continuation on the UI thread and run it asynchronously
    with a help of the UI thread message loop. This resolves the problem with accessing
    UI controls from another thread, but still keeps our UI responsive.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经做到了！为了输出错误消息，使用了`TaskScheduler.FromCurrentSynchronizationContext`选项提供了一个继续。如果不这样做，我们将看不到错误消息，因为我们会得到与任务内部发生的相同异常。此选项指示TPL基础结构将代码放在UI线程的继续中，并借助UI线程消息循环异步运行它。这解决了从另一个线程访问UI控件的问题，但仍然保持了我们的UI响应性。
- en: To check if it is true, we press the last button that runs the code inside the
    `ButtonAsyncOK_Click` method. All that is different is that we provide the UI
    thread task scheduler to our task. After the task completes, you will see that
    it runs on the UI thread in an asynchronous manner. The UI remains responsive,
    and it is even possible to press another button despite the wait cursor being
    active.
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 要检查这是否属实，我们按下最后一个按钮，运行`ButtonAsyncOK_Click`方法中的代码。唯一不同的是，我们为我们的任务提供了UI线程任务调度程序。任务完成后，您将看到它以异步方式在UI线程上运行。UI保持响应，并且即使等待光标处于活动状态，也可以按下另一个按钮。
- en: 'However, there are some tricks for using the UI thread for running tasks. If
    we go back to the synchronous task code and uncomment the line with getting the
    result with the UI thread task scheduler provided, we will never get any result.
    This is a classical deadlock situation: we are dispatching an operation in the
    queue of the UI thread and the UI thread waits for this operation to complete,
    but as it waits, it cannot run the operation, which will never end (not even start).
    This will also happen if we call the `Wait` method on task. To avoid the deadlock,
    never use the synchronous operations on task scheduled to the UI thread; just
    use `ContinueWith`, or `async`/`await` from C# 5.0.'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，对于在UI线程上运行任务有一些技巧。如果我们回到同步任务代码，并取消注释使用UI线程任务调度程序获取结果的行，我们将永远得不到任何结果。这是一个经典的死锁情况：我们正在将操作调度到UI线程的队列中，而UI线程等待此操作完成，但当它等待时，它无法运行操作，这将永远不会结束（甚至不会开始）。如果在任务上调用`Wait`方法，也会发生这种情况。为了避免死锁，永远不要在计划为UI线程的任务上使用同步操作；只使用`ContinueWith`，或者来自C#
    5.0的`async`/`await`。
