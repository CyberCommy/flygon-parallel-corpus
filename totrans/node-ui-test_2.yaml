- en: Chapter 2. Creating a Simple Web App
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: By the time you reach the end of this chapter, you should be able to create
    a simple web application using Node.js, CouchDB, and Flatiron.
  prefs: []
  type: TYPE_NORMAL
- en: 'The topics covered in this chapter are:'
  prefs: []
  type: TYPE_NORMAL
- en: Setting up Node and Flatiron
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating and processing a user form
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Defining the requirements of our web app
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Before we dive too much into the Zombie.js world, we need to create a target
    for our tests, that is, a web application that provides a to-do list. This is
    the set of top-level requirements for such an application:'
  prefs: []
  type: TYPE_NORMAL
- en: A user can sign up for the service for which he should provide an e-mail address
    as username and a password. By providing the username and the password, the user
    can create an authenticated session that will identify him throughout further
    interactions.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The user can create a to-do item.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The user can view a list of to-dos.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The user can remove a to-do item.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: To implement this application we will use Node.js, a platform for building networking
    applications in JavaScript that Zombie.js also uses. We'll also use Flatiron,
    a set of components that will help you in building a web application on top of
    Node.js.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In the interest of keeping things simple, we're building our application in
    Node.js. However, Zombie.js is suitable for testing applications built with any
    framework utilizing a dynamic HTTP server.
  prefs: []
  type: TYPE_NORMAL
- en: Also, bear in mind that the goal of building this web application is not to
    show you how to build a web app, but to provide a working application on a known
    and simple domain that we can use as the subject of our tests.
  prefs: []
  type: TYPE_NORMAL
- en: In the next sections you'll learn how to install Node.js and Flatiron and how
    to create your to-do application server.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up Node.js and Flatiron
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If you don't have the latest version of Node.js installed, you will need to
    install it. You will need Node.js for several reasons. Our web application will
    use Flatiron, which runs on top of Node.js. You will also need to use the **Node
    Package Manager** (**NPM**), which comes bundled with Node. Finally, you will
    need Node.js to install and run your Zombie.js tests.
  prefs: []
  type: TYPE_NORMAL
- en: Installing Node.js
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To install Node.js head out to the nodejs.org website.![Installing Node.js](img/0526OS_02_01.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Then click on the **Download** button, which should open the following page:![Installing
    Node.js](img/0526OS_02_02.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If you're running a Windows or a Macintosh system, click on the respective installer
    icon. That should download and start up the graphical installer.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Installing Node from the source code
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'If you''re not running one of these systems and you are on a Unix-like system,
    you can install Node.js from the source code by following these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Click on the source code icon, which will start downloading the source code
    tarball. Once downloaded, expand it using the terminal:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Navigate to the created dir:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Configure it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Build it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'And finally install it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'If you don''t have sufficient permissions to copy the node binaries to the
    final destination, you will need to prefix your command with `sudo`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Now you should have Node.js installed on your system. Try running it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Now let''s try to open the Node command line and type something:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'If you press *Enter* now, you should get the following output:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'By installing Node.js, you also installed its faithful companion NPM, the Node
    Package Manager. You can try invoking it from the terminal:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Installing Flatiron and starting your application
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Now you need to install the Flatiron framework so you can start building your
    application.
  prefs: []
  type: TYPE_NORMAL
- en: 'Use NPM to download and install Flatiron as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Again, if you don't have enough permissions to install Flatiron, run the last
    command prefixed by `sudo`.
  prefs: []
  type: TYPE_NORMAL
- en: This installs Flatiron globally, making the `flatiron` command-line utility
    available.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now you should step in a directory that will have the application code. You
    can then create the basic scaffolding for your web app by executing the following
    command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'After prompting you for the name of the author, the app description, and the
    homepage (which is optional), it will create a directory named `todo` containing
    the base for your application code. Step into that directory using the following
    command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'There you will find two files and three folders:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: One of these files, `package.json` contains the application manifest, which,
    among other fields, contains the packages that your application depends on. For
    now you're going to remove the `devDependencies` field from that file.
  prefs: []
  type: TYPE_NORMAL
- en: You'll also need to add a dependency for the package named `plates`, which will
    be used for changing HTML templates on the fly.
  prefs: []
  type: TYPE_NORMAL
- en: Also, you will be serving some static files that won't need any modification.
    For that you will use a package named `node-static`, which you also need to add
    to the dependencies list of your application manifest.
  prefs: []
  type: TYPE_NORMAL
- en: 'By now your `package.json` should look something like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, install those dependencies by using the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'This will install all the dependencies in a local `node_modules` directory
    and should output something like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You don't have to worry about this, since Node will be able to pick up these
    dependencies automatically.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now you can try to start up your app:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'If you open a browser and point it to `http://localhost:3000`, you will get
    the following response:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: Creating your to-do app
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that you have a Flatiron "hello world" example running, you need to extend
    it so that our to-do application takes shape. For this you will need to create
    and change some files. If you ever get lost, you can always refer to the chapter's
    source code. Also, for your reference, there is a complete list of the project
    files included at the end of this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up the database
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As in any real application, you will need a reliable way to persist data. Here
    we will use CouchDB, the open-source and document-oriented database. You can either
    choose to install CouchDB locally or use a service over the Internet, such as
    Iris Couch.
  prefs: []
  type: TYPE_NORMAL
- en: If you choose to install CouchDB on your local development machine, you can
    head out and visit [http://couchdb.apache.org/](http://couchdb.apache.org/), click
    on **Download** and follow the instructions.
  prefs: []
  type: TYPE_NORMAL
- en: If you prefer to simply use CouchDB over the Internet, you can head out to [http://www.iriscouch.com/](http://www.iriscouch.com/),
    click on the **Sign Up Now** button and fill the registration form. You should
    have a running CouchDB instance in a matter of seconds.
  prefs: []
  type: TYPE_NORMAL
- en: '![Setting up the database](img/0526OS_02_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: As of this writing, Iris Couch is a service that is free for small databases
    with low traffic, which makes it ideal for prototyping an application such as
    this one.
  prefs: []
  type: TYPE_NORMAL
- en: Accessing CouchDB from Node
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To access a CouchDB database from Node we will use a library called `nano`,
    which you will add to the dependencies section of your `package.json` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'Now you can install this missing dependency by running the following command
    at the root of your application:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: This installs `nano` inside the `node_modules` folder, making it available for
    help while building this app.
  prefs: []
  type: TYPE_NORMAL
- en: To actually connect to the database, you need to define the CouchDB server URL.
    If you're running CouchDB locally, the URL should be similar to `ht` `tp://127.0.0.1:5984`.
    If you are running CouchDB in Iris Couch or a similar service, your URL will be
    similar to `https://mytodoappcouchdb.iriscouch.com`.
  prefs: []
  type: TYPE_NORMAL
- en: In any of these cases, if you need to access using a username and a password,
    you should encode these in the URL, `http://username:password@mytodoappco` `uchdb.iriscouch.com`
  prefs: []
  type: TYPE_NORMAL
- en: 'This URL should now be entered into a configuration file under `config/config.json`,
    under the `couchdb` key:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, encapsulate the access to the database by providing a simple module under
    `lib/couchdb.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: This module will be used to get a CouchDB server object instead of repeating
    the `config` and `nano` dance several times throughout the code.
  prefs: []
  type: TYPE_NORMAL
- en: Application layout
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'As many websites do nowadays, we will be using the Twitter Bootstrap framework
    to help us in getting the website look and feel minimal yet presentable. For that
    you will head out to the Bootstrap website [http://twitter.github.com/bootstrap/](http://twitter.github.com/bootstrap/)
    and click on the **Download Bootstrap** button:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Application layout](img/0526OS_02_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'You will get a zip file, which you should expand into the local `public` folder,
    ending up with these files:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: You will also need to add jQuery into the mix since Bootstrap depends on it.
    Download jQuery from [http://jquery.com](http://jquery.com) and name it `public/js/jquery.min.js`.
  prefs: []
  type: TYPE_NORMAL
- en: Developing the frontend
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Now that we have Bootstrap and jQuery installed, it's time to create the frontend
    of our application.
  prefs: []
  type: TYPE_NORMAL
- en: 'First we will set up the layout HTML template, which defines the outer structure
    for all the pages. For hosting all the templates, we will have a directory named
    `templates`, containing the following under `templates/layout.html`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: This template loads the CSS and scripts and contains the placeholders for the
    messages and main section.
  prefs: []
  type: TYPE_NORMAL
- en: 'We also need a small module that gets the main content and some other options
    and applies them to this template. We''ll place it inside `templates/layout.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: In Node.js, a module is simply a JavaScript file that is intended to be used
    by other modules. All the variables inside a module are private; if the module
    author wishes to expose a value or a function to the outside world, it modifies
    or sets the special variable in `module.exports`.
  prefs: []
  type: TYPE_NORMAL
- en: In our case, this module exports a function that gets the markup for the main
    page content, the page title, and some options such as the info or the error message
    and applies it to the layout template.
  prefs: []
  type: TYPE_NORMAL
- en: 'We also need to place the following markup file under `templates/alert.html`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: Now we're ready to start implementing some of the requirements.
  prefs: []
  type: TYPE_NORMAL
- en: User registration
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This app will be offering users a personal to-do list. Before they can access
    it, they need to be signed up in the system. For that you need to define some
    URLs that the user will use to fetch our user sign-up form and submit it.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now you will be changing the `app.js` file. This file contains a set of initialization
    procedures, including this block:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: This block is routing all the HTTP requests having a `/` URL and where the HTTP
    method is `GET` to the given function. This function will then be invoked for
    every request with these two characteristics in which case you are replying, `{"hello":"world"}`,
    which the user will see printed on the browser.
  prefs: []
  type: TYPE_NORMAL
- en: Now we need to remove this routing and add some routes that allow a user to
    register himself.
  prefs: []
  type: TYPE_NORMAL
- en: 'For that, create a folder named `routes` where you will place all the routing
    modules. The first one is `routes/users.js` and will contain the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: This new module exports a function that will bind two new routes `GET /new`
    and `POST /`. These routes will later be appended to the `/users` namespace, which
    means that they will get activated when the server receives a `GET` request to
    `/users/new` and a `POST` request to `/users`.
  prefs: []
  type: TYPE_NORMAL
- en: 'On the `GET /new` route, we will present a template that contains a user form.
    Place it under `templates/users/new.html`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'We will also need to create a `Thank you for registering` template, which you
    need to place in `templates/users/show.html`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: In the `POST /` route handler, we'll do some simple validation and insert the
    user document into the CouchDB database by calling the function named `insert`.
    This function tries to insert the user document and makes use of some clever error
    handling. If the error is a "404 Not Found", it means that the `users` database
    hasn't been created, and we take the opportunity to create it and automatically
    repeat the user document insertion.
  prefs: []
  type: TYPE_NORMAL
- en: You're also catching the 409 Conflict HTTP status code, which CouchDB will return
    if we try to insert a document with a key that already exists. Since we're using
    the user e-mail as the document key, we inform the user that such a username already
    exists.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Here, among other simplifications, you're storing the user password in plain
    text inside the database. This is obviously not recommended, but since the core
    of this book is not how to create a web application, this implementation detail
    is not relevant to your goals.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now we need to attach these new routes to the `/users/` URL namespace by updating
    and adding a line right before `app.start(3000)` in the file `app.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'Now you can start your application by typing in the command line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'This starts the server. Then open a web browser and hit `http://localhost:3000/users/new`.
    You will get a user form:'
  prefs: []
  type: TYPE_NORMAL
- en: '![User registration](img/0526OS_02_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Submit an e-mail and a password and you will get a confirmation screen:'
  prefs: []
  type: TYPE_NORMAL
- en: '![User registration](img/0526OS_02_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: This screen will present you with a link to the `/session/new` URL, which doesn't
    exist yet.
  prefs: []
  type: TYPE_NORMAL
- en: Now you're ready to implement the login screens.
  prefs: []
  type: TYPE_NORMAL
- en: Logging in and session management
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To be able to keep a session, your HTTP server needs to be able to do two things:
    parse cookies and store session data. For this we use two modules, namely, `flatware-cookie-parser`
    and `flatware-session`, which you should add to the `package.json` manifest:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, install the missing dependencies:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, add these middleware components to your server in the file `app.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: 'We also need to create a `routes/session.js` module to handle the new session
    routes:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: 'Next we need to add a view template under `templates/session/new.html` that
    contains the login form:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, stop the server if it''s still running (by pressing *Ctrl* + *C*) and
    start it again:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: 'Point your browser to `http://localhost:3000/session/new` and insert the e-mail
    and password of a user you already have registered:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Logging in and session management](img/0526OS_02_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: If the loginsucceeds, you will be redirected to the `/todos` URL, which the
    server does not respond to yet.
  prefs: []
  type: TYPE_NORMAL
- en: Next we're going to make the to-do list work.
  prefs: []
  type: TYPE_NORMAL
- en: The to-do list
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For displaying the to-do list, we're going to use a table. It would be nice
    to sort the to-do items by using drag-and-drop. An easy way to enable this is
    by using jQuery UI. For this feature alone you don't need the full jQuery UI library,
    you can download a custom-built one by pointing your browser to `http://jqueryui.com/download`,
    deselecting every option except the **Sortable** option in the **Interactions**
    element, and clicking on the **Download** button. Unzip the resulting file and
    copy the `jquery-ui-1.8.23.custom.min.js` file into `public/js`.
  prefs: []
  type: TYPE_NORMAL
- en: '![The to-do list](img/0526OS_02_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'We need to refer this script in the `templates.html` or `layout.html` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: You should also add a file under `public/js/todos.js` that will contain some
    frontend interactive code.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now we need to respond to the `/todos` URL by firstly including the new routing
    in the `app.js` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: 'Then we need to place the new to-do routes module under `routes/todos.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: 'This module responds to the to-do index (`GET /todos`), fetching and presenting
    all the to-do items for the logged-in user. Place the following template under
    `templates/todos/index.html`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: 'Another new route is `GET /todos/new`, presenting the user a form for creating
    a new to-do item. This route makes use of a new template placed in `templates/todos/new.html`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: The `POST /todos` route creates a new to-do item by calling the local `insert`
    function, which handles the error for when the database does not exist, creating
    it as needed and retrying the `insert` function later.
  prefs: []
  type: TYPE_NORMAL
- en: 'The index template depends on the existence of a client-side script placed
    under `public/js/todos.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: This file activates and handles the drag-and-drop item, making an AJAX call
    to the `/todos/sort` URL with the new order of the to-do items.
  prefs: []
  type: TYPE_NORMAL
- en: The **Delete** button on each item is also handled in the `todos.js` routing
    module by loading the user to-do items, removing the item at the given position
    and storing the items back.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You may have noticed by now that we store all the to-do items for a given user
    inside one document in the `todos` database. This technique is simple and works
    well if all users keep the number of to-dos relatively low. Anyway, this detail
    is not important for our purpose.
  prefs: []
  type: TYPE_NORMAL
- en: 'To make this work, we need to provide a routing middleware under `middleware/logged_in.js`.
    This middleware component is responsible for protecting some routes and, when
    the user is not logged in, redirecting the user to the login screen instead of
    executing that route:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, stop the server if it''s still running (by hitting *Ctrl* + *C*) and
    start it up again:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: Point your browser to `http://localhost:3000/session/new` , and enter the e-mail
    and password of the user you already have registered. You will then be redirected
    to the to-do list of the user, which will start off empty.
  prefs: []
  type: TYPE_NORMAL
- en: '![The to-do list](img/0526OS_02_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'You can now click on the **New To-Do** button, obtaining the following form:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The to-do list](img/0526OS_02_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Insert some text and click on the **Create** button. The to-do item will be
    inserted in the database and the updated to-do list will be presented:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The to-do list](img/0526OS_02_11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: You can insert as many to-do items as you like. Once you've had enough, you
    can try to reorder them by dragging-and-dropping the table rows.
  prefs: []
  type: TYPE_NORMAL
- en: '![The to-do list](img/0526OS_02_12.jpg)'
  prefs: []
  type: TYPE_IMG
- en: You can also click on the **Delete** button to remove a specific to-do item.
  prefs: []
  type: TYPE_NORMAL
- en: File summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The following is a list of the files that compose this application:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter you learned how to create a simple web application using Node.js,
    Flatiron.js, and some other components.
  prefs: []
  type: TYPE_NORMAL
- en: This application will be the target of our user-interface tests in future chapters.
  prefs: []
  type: TYPE_NORMAL
