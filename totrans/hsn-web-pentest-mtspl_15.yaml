- en: Penetration Testing on Technological Platforms - JBoss
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The previous chapters of this book explained how to perform penetration tests
    on **Content Management Systems** (**CMSes**). Now that we have a clear understanding
    of the different CMS architectures and the different ways to go about carrying
    out a test, let''s move on to learning how we can carry out tests on different
    technologies. In this chapter, we''ll learn about JBoss, its architecture, and
    its exploitation. JBoss is one of the most easily deployable applications for
    an organization focused on automating deployments of a Java-based application.
    Due to its flexible architecture, many organizations opt for JBoss, but it is
    because of its great ease of use to organizations that JBoss is also widely targeted
    by threat actors. The following topics will be covered in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: An introduction to JBoss
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Performing reconnaissance on a JBoss - based application server using Metasploit
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Vulnerability assessments on JBoss
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Carrying out JBoss exploitation with the help of Metasploit modules
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The following are the prerequisites for this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: A JBoss **Application Server** (**AS**) instance ([https://jbossas.jboss.org/](https://jbossas.jboss.org/))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Metasploit Framework ([https://www.metasploit.com/](https://www.metasploit.com/))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: JexBoss, which is a third-party tool ([https://github.com/joaomatosf/jexboss](https://github.com/joaomatosf/jexboss))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An introduction to JBoss
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: JBoss AS is an open source **Java Enterprise Edition** (**Java EE**)-based application
    server. The project was started by Mark Fluery in 1999\. Since then, JBoss Group
    (LLC) was formed in 2001, and in 2004, JBoss became a corporation under the name
    of JBoss, Inc. In early 2006, Oracle sought to buy JBoss, Inc., but later on in
    the same year, RedHat succeeded in buying the corporation.
  prefs: []
  type: TYPE_NORMAL
- en: 'As JBoss AS is based on Java, the application server supports cross-platform
    installation and, unlike other proprietary software in the market, JBoss offers
    the same features at very low prices. The following are some of the advantages
    of JBoss:'
  prefs: []
  type: TYPE_NORMAL
- en: Flexibility due to plugin-based architecture
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ease of installation and setup
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Provides the full Java EE stack, including **Enterprise JavaBeans** (**EJB**),
    **Java Messaging Service** (**JMS**), **Java Management Extension** (**JMX**),
    and **Java Naming and Directory Interface** (**JNDI**)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Can run an **Enterprise Application** (**EA**)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Is cost-efficient
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Due to the flexible plugin architecture, developers don't have to spend time
    developing services for their applications. The goal here is to save money and
    resources so that developers can focus more time on the products they're developing.
  prefs: []
  type: TYPE_NORMAL
- en: The JBoss architecture (JBoss 5)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The JBoss architecture has changed gradually over the last few years and with
    each major release, new services have been added. In this chapter, we will look
    at an architectural overview of JBoss AS 5 and cover the exploitation part of
    the architecture in the *JBoss exploitation* section later in this chapter. To
    understand the JBoss AS architecture, refer to the following diagram:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/ead9fe86-c45c-4e7d-834c-a77cc9c0dc0a.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We can divide the architecture into four main components, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**User applications**: As the name suggests, this component handles user applications
    and contains the XML config files, **Web Application Resource** (**WAR**) files,
    and so on. This is where user applications are deployed.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Component deployers**: Deployers are used in JBoss to deploy components.
    `MainDeployer`, `JARDeployer`, and `SARDeployer` are hardcoded deployers in the
    JBoss server core. All other deployers are **Managed Bean** (**MBean**) services
    that register themselves as deployers with `MainDeployer`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Enterprise services**: This component is responsible for handling multiple
    things, such as transactions, security, and the web server.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**The JBoss microcontainer**: This can be used as a standalone container outside
    of JBoss AS. It is designed to provide an environment to configure and manage
    **Plain Old Java Objects** (**POJOs**).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Now, let's look at the directory structure.
  prefs: []
  type: TYPE_NORMAL
- en: JBoss files and the directory structure
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'JBoss has a simplified directory structure. By browsing to the JBoss `home`
    directory and listing the contents, we can see the structure shown in the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/373822c3-8295-4c5f-8db6-5cb1300c5c13.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Let''s try to understand what these directories are and what files and folders
    they contain:'
  prefs: []
  type: TYPE_NORMAL
- en: '`bin`: This directory contains all the entry point **Java Archives** (**JARs**) and
    scripts, including startup and shutdown.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`client`: This directory stores the configuration files that may be used by
    an external Java client application.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`common`: This directory contains all of the server''s common JAR and config
    files.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`docs`: This directory contains the JBoss documentation and schemas, which
    are helpful during the development process.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`lib`: This directory contains all the JARs required for JBoss to start up.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`server`: This directory contains the files related to different server profiles,
    including production and testing.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'By going further into the `server` directory and listing the contents, we can
    see the structure shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/09273d72-b27a-4366-8940-34ffe73f3fbc.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Let''s open one of these profiles and learn about the structure. The following
    screenshot shows the listing of the `default` folder:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/84e26978-9be2-4e9f-ab3c-03562e8bab9c.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Let''s look at a breakdown of the directories in the preceding screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '`conf`: This directory contains config files, including `login-config` and `bootstrap
    config`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`data`: This directory is available for services that store content in the
    filesystem.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`deploy`: This directory contains the WAR files that are deployed on the server.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`lib`: The `lib` directory is the default location for static Java libraries
    that are loaded to the shared classpath at startup.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`log`: This directory is where all the logs are written to.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`tmp`: This directory is used by JBoss to store temporary files.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`work`: This directory contains the compiled JSP and class files.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'By going further into the `deploy` directory and listing the contents, we can
    see various WAR files, XML files, and so on, as in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/d67933e1-5126-4dd9-82a2-43c0c1952595.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Some of the files we need to know about are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`admin-console.war` is the admin console for JBoss AS.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ROOT.war` is the `/root` web application.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`jbossweb.sar` is the Tomcat servlet engine deployed on the server.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`jbossws.sar` is the JBoss service that supports web services.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Most of the time, we will find `admin-console` missing from the server as JBoss
    administrators remove the `admin-console`, `web-console`, and `JMX-console` applications
    from the server. Though it's a pretty neat way of protecting the JBoss instance,
    this won't work against threat actors. JBoss AS can also be managed using MBeans.
    Even though they are a feature for administrators, MBeans also work as a live
    door that allows actors to penetrate the network. To access MBeans, let's first
    learn about the file and directory structure, as that will help us learn how to
    access the MBeans in the process. The vast number of MBeans deployed in JBoss
    AS can be accessed directly via `JMX-console` and `web-console`, which raises
    many security concerns regarding deployment.
  prefs: []
  type: TYPE_NORMAL
- en: Before jumping into the JBoss exploitation, let's first understand how we can
    perform reconnaissance and enumeration on a JBoss AS deployment.
  prefs: []
  type: TYPE_NORMAL
- en: Reconnaissance and enumeration
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we will focus on the reconnaissance and enumeration of JBoss
    servers. There are various methods for identifying a JBoss server, such as the
    fact that JBoss, by default, listens on HTTP port `8080`. Let's look at some common
    techniques used for JBoss reconnaissance.
  prefs: []
  type: TYPE_NORMAL
- en: Detection via the home page
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'One of the very basic techniques we can use is to visit the web server home
    page, which shows the JBoss logo, as we can see in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/383af0ec-3d7d-4c0b-a786-5b436de15814.png)'
  prefs: []
  type: TYPE_IMG
- en: When we open the JBoss home page, the default JBoss setup shows other hyperlinks
    that we can browse to get further information.
  prefs: []
  type: TYPE_NORMAL
- en: Detection via the error page
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'There may be times where we find JBoss AS running on port `8080`, but the home
    page is unavailable. In cases like this, a `404` error page can also disclose
    the JBoss AS header and version number for the JBoss application instance in use:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/a3d569f5-541d-45bd-a026-9abdefd0186f.png)'
  prefs: []
  type: TYPE_IMG
- en: A `404` error page can be generated by opening any random non-existent link,
    which will give us an error, as we can see in the preceding screenshot.
  prefs: []
  type: TYPE_NORMAL
- en: Detection via the title HTML tag
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'There are some cases where, when we try to visit JBoss AS, we get a blank page.
    This generally happens to protect the home page from public exposure and unauthenticated
    access. As the home page contains quite valuable information, JBoss administrators
    tend to secure the page via reverse proxy authentication or by removing the JMX
    console, web console, and admin console from the application (as mentioned earlier
    in this chapter). These consoles will be discussed further in the scanning and
    exploitation phase of this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/7a5e1c1a-5c53-45a4-a568-17b3c08188e0.png)'
  prefs: []
  type: TYPE_IMG
- en: If we get a blank page, we can still identify JBoss through the HTML `<title>` tag,
    which discloses some information in the page title, as in the preceding screenshot.
  prefs: []
  type: TYPE_NORMAL
- en: Detection via X-Powered-By
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'JBoss also discloses its version number and build information in the HTTP response
    headers, as in the following screenshot. We can locate the version and build information
    in the `X-Powered-By` HTTP response header. This is visible even when the admin
    console or web console is not accessible, as applications deployed in JBoss are
    not configured to hide the header:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/a40f3703-2f37-4a1a-90e3-df07a3b7a655.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Most threat actors detect that JBoss AS is being used by searching the same
    header information on Shodan, Censys, and so on. At the time of writing this book,
    there are over 19,000 JBoss AS servers that are potentially exploitable if they
    are not securely configured:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/81913347-fe18-4757-a1f7-86df23bc62e0.png)'
  prefs: []
  type: TYPE_IMG
- en: Threat actors look for this information and run an automated scanner to find
    the vulnerable JBoss instances for exploitation. Once exploited, JBoss can open
    doors for actors to enter the network of an organization.
  prefs: []
  type: TYPE_NORMAL
- en: Detection via hashing favicon.ico
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This technique is not commonly known to pen testers as it involves the hashing
    of an icon. This is actually another cool way of telling whether or not a server
    is running JBoss AS. We can MD5 hash the `favicon.ico` file (an icon file), as
    in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/f46a22d7-858c-4a61-875e-4bb9d5e33eab.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Searching the hash in the OWASP favicon database will show us whether the server
    is running JBoss:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/19585426-6fb8-4ff7-aab4-5dc6367921f0.png)'
  prefs: []
  type: TYPE_IMG
- en: As the OWASP favicon database is very limited, we could always create our own
    database to carry out this activity.
  prefs: []
  type: TYPE_NORMAL
- en: Detection via stylesheets (CSS)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Looking at the HTML source code, we can see the JBoss stylesheet (`jboss.css`),
    shown in the following screenshot, which is a clear indication that JBoss AS is
    running:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/08288cdb-1e8b-4d85-9e0a-621bdb9e85e6.png)'
  prefs: []
  type: TYPE_IMG
- en: Sometimes, the administrators change the naming conventions of the files for
    JBoss, but in the process of doing this, they forget to add the necessary security
    configuration. Now that we have manually gathered the information for identifying
    the use of a JBoss AS instance, let's try to identify the instance using Metasploit.
  prefs: []
  type: TYPE_NORMAL
- en: Carrying out a JBoss status scan using Metasploit
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Metasploit also has built-in auxiliary modules for JBoss enumeration, one of
    which is `auxiliary/scanner/http/jboss_status`. This module looks for the status
    page, which shows the status history of the application server running. We can
    use the following command in `msfconsole` to load the module:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'The following screenshot shows the output of the preceding command:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/3acf9452-ce65-41c5-bf1d-b923cc71e6a8.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The preceding screenshot shows the options required by the module to run the
    auxiliary. Once we set the options and then run the auxiliary, as in the following screenshot,
    the server will confirm that the application server is JBoss-based on the discovered
    status page:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/2363aab6-03f9-4454-92a6-93660854f204.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The module looks for text on the page with the following regex:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/1da0987d-4a4a-4aaf-936c-ccc5ceb04b52.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The module does the following:'
  prefs: []
  type: TYPE_NORMAL
- en: It sends a `GET` request to the server to look for the `/status` page (the default
    page is set to the `Target_uri` option).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If it finds a `200 OK` response from the server, it looks for the `Tomcat Status` string in
    the HTML `<title>` tag.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If the tag is found, the module looks for data according to the regex, as in
    the preceding screenshot.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'When the module executes, the source IP, destination IP, and called page are
    stored by JBoss. This information is then printed out. We can have a look for
    it in the `/status` page, as in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00733b7e-31e2-4205-9d32-94011c998be8.png)'
  prefs: []
  type: TYPE_IMG
- en: The `jboss_status` module looks for this specific information to fingerprint
    the instance of JBoss AS.
  prefs: []
  type: TYPE_NORMAL
- en: JBoss service enumeration
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'A list of services that run on **JBoss Web Service** (**JBoss WS**) can also
    provide us with information regarding the JBoss server:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/600b4385-5873-433a-b708-aa099a4fd943.png)'
  prefs: []
  type: TYPE_IMG
- en: Opening the JBoss WS URI (that is, browsing to `/jbossws/services`) will confirm
    whether JBoss AS is running, as we can see in the preceding screenshot. Now that
    we have a better understanding of how to enumerate the JBoss running services
    and gather more information about them, let's move on to the next section, which
    will show us how we can perform a vulnerability scan on a JBoss AS instance.
  prefs: []
  type: TYPE_NORMAL
- en: Performing a vulnerability assessment on JBoss AS
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'If we find a JBoss AS instance on a machine and we need to perform a vulnerability
    assessment, we can always use Metasploit for this. Metasploit has a module for
    this called `auxiliary/scanner/http/jboss_vulnscan`, which we can use to perform
    vulnerability scanning on JBoss AS. The module checks for a few vulnerabilities,
    such as authentication bypass, a default password, and accessible `JMX-console`
    functions. The following are the steps we can observe to carry out a vulnerability
    assessment on JBoss AS:'
  prefs: []
  type: TYPE_NORMAL
- en: 'To use `jboss_vulnscan`, we type the following command in `msfconsole`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'The following screenshot shows the output of the preceding command:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/3060a4be-251b-4e9c-b921-a1c82423c429.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We set the required options, as shown:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/2d670cc4-6790-4484-bd47-c62f1828b7b6.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Once we run the scanner, it will check against various vulnerabilities and
    report which vulnerabilities are found on the server, as shown:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/ea198d8d-cd9b-4e04-910b-844c82716b3c.png)'
  prefs: []
  type: TYPE_IMG
- en: This module looks through the specific files in the application and the Java
    naming services that are running on different ports.
  prefs: []
  type: TYPE_NORMAL
- en: Vulnerability scanning using JexBoss
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There is also another extremely powerful tool, called JexBoss, that is made
    for JBoss and other cases of technology enumeration and exploitation. It was developed
    by João F. M. Figueiredo. In this section, we will take a quick look at using
    JexBoss. The tool can be downloaded and installed at [https://github.com/joaomatosf/jexboss](https://github.com/joaomatosf/jexboss).
  prefs: []
  type: TYPE_NORMAL
- en: 'Once this is all set up, we can run the tool using the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s use this tool (shown in the following screenshot) to find the vulnerabilities
    in a JBoss AS instance:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/87b5d03a-1a69-40d7-91cc-f874878e9b15.png)'
  prefs: []
  type: TYPE_IMG
- en: The command used in the preceding screenshot will look for vulnerable Apache
    Tomcat Struts, servlet deserialization, and Jenkins. The tool will also check
    for various JBoss vulnerabilities and we will find out whether the server is vulnerable
    to any of them.
  prefs: []
  type: TYPE_NORMAL
- en: Vulnerable JBoss entry points
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'As we know, JBoss comes with a number of fully functional and operational add-ons
    and extensions, such as JNDI, JMX and JMS so the number of possible entry points
    for JBoss exploitation increases accordingly. The following table lists the vulnerable
    MBeans, with their respective service and method names, that can be used for JBoss
    reconnaissance and exploitation:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Category** | **MBean domain name** | **MBean service name** | **MBean method
    name** | **MBean method description** |'
  prefs: []
  type: TYPE_TB
- en: '| Exploitation | `jboss.system` | `MainDeployer` | `deploy()`, `undeploy()`,
    and `redeploy()` | The `deploy()` method is used to deploy the applications. The
    `undeploy()` method is used to un-deploy the deployed application.The `redeploy()`
    method is used by the server to redeploy the deployed application stored in the
    server itself (the local file). |'
  prefs: []
  type: TYPE_TB
- en: '| Reconnaissance | `jboss.system` | `Server` | `exit()`, `shutdown()`, and`halt()`
    | The `exit()`, `shutdown()`, and `halt()` methods are quite dangerous methods.
    A threat actor can use these methods to disrupt the service by shutting down the
    application server. |'
  prefs: []
  type: TYPE_TB
- en: '| Reconnaissance | `jboss.system` | `ServerInfo` | N/A | N/A |'
  prefs: []
  type: TYPE_TB
- en: '| Reconnaissance | `jboss.system` | `ServerConfig` | N/A | N/A |'
  prefs: []
  type: TYPE_TB
- en: '| Exploitation | `jboss.deployment` | `DeploymentScanner` | `addURL()` and`listDeployedURLs()`
    | The `addURL()` method is used to add a remote/local application by URL for the
    deployment.The `listDeploymentURLs()` method is used to list all the previously
    deployed applications with their URLs. This method is helpful for finding out
    whether the current JBoss AS instance has already been exploited. |'
  prefs: []
  type: TYPE_TB
- en: '| Exploitation | `jboss.deployer` | `BSHDeployer` | `createScriptDeployment()`,`deploy()`,`undeploy()`,
    and`redeploy()` | The `createScriptDeployment()` method is used to deploy the
    application via a **Bean Shell** (**BSH**) script. The script content should be
    mentioned in this method for deployment. The MBean then creates a temporary file
    with a `.bsh` extension, which will be used for the deployment.The `deploy()`,
    `undeploy()`, and `redeploy()` methods are used to manage the deployment using
    BSH scripts. |'
  prefs: []
  type: TYPE_TB
- en: '| Exploitation | `jboss.admin` | `DeploymentFileRepository` | `store()` | The
    `store()` method is used by the deployer to store the filename with its extension,
    folder name, and timestamp. A threat actor just needs to mention the WAR file
    with the aforementioned information and the payload will be directly deployed
    on the server. |'
  prefs: []
  type: TYPE_TB
- en: The `MainDeployer` MBean is the deployment entry point and all the requests
    for component deployment are sent over to `MainDeployer`. `MainDeployer` can deploy
    WAR archives, **JARs**, **Enterprise Application Archives** (**EARs**), **Resource
    Archives** (**RARs**), **Hibernate Archives** (**HARs**), **Service Archives**
    (**SARs**), **BSHes**, and many other deployment packages.
  prefs: []
  type: TYPE_NORMAL
- en: JBoss exploitation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now that we have a clear understanding of JBoss''s reconnaissance and vulnerability
    scanning capabilities, let''s learn about JBoss exploitation. A few basic methods
    that we can use to exploit JBoss are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: JBoss exploitation via the **administration console** (`admin-console`)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: JBoss exploitation via the JMX console using the `MainDeployer` service
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: JBoss exploitation via the JMX console using the `MainDeployer` service (the
    Metasploit version)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: JBoss exploitation via the JMX console using the `BSHDeployer` service
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: JBoss exploitation via the JMX console using the `BSHDeployer` service (the
    Metasploit version)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: JBoss exploitation via the web console using a Java applet
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: JBoss exploitation via the web console using the `Invoker` method
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: JBoss exploitation via the web console using third-party tools
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let's go through each of these methods for exploitation.
  prefs: []
  type: TYPE_NORMAL
- en: JBoss exploitation via the administration console
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this section, we will begin the exploitation process. The first step is
    to get access to the administration console, which, by default, is configured
    with a username and password of `admin` and `admin`, respectively. The following
    screenshot shows the administration login page:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/7a9e93c7-7c86-490b-b096-07b77df25442.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Once we have successfully logged in, we will see the page shown in the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/e8daf257-f5cd-456d-a794-cddce4600c40.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The next step for the exploitation is finding a way to execute commands on
    the server so that we get server-level access. From the left-hand side menu, choose
    the Web Application (WAR) option and you will be redirected to the page shown
    in the following screenshot. We will click on the Add a new resource button:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/06cb8a26-8af6-4c99-afe0-2f617bd5a053.png)'
  prefs: []
  type: TYPE_IMG
- en: 'This will take us to a new page, where we will be presented with the option
    of uploading a WAR file. A WAR file can be generated by using `msfvenom` with
    the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Once we have generated the WAR-based Metasploit payload, we''ll upload the
    file to the Web Application (WAR) section of the console, as you can see in the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/ecada5d0-cd8f-4a8f-a965-fa3c580e165d.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Once the file has been uploaded successfully, we just need to go to the directory
    it was extracted to and open it on our web browser to get a Meterpreter connection,
    as in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/3ed42436-8f10-4367-bfb6-beea5686b4ff.png)'
  prefs: []
  type: TYPE_IMG
- en: There are a few things that we need to consider before running the payload,
    the most important being to check the egress connection. If the payload is executed
    but the firewall is blocking egress traffic (outbound connections) to our server,
    we'll need to find a way to get a reverse shell. If there's no way of getting
    this, we can always opt for a bind connection to the server.
  prefs: []
  type: TYPE_NORMAL
- en: Exploitation via the JMX console (the MainDeployer method)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Consider the following quote from the official JBoss documentation (available
    at [https://docs.jboss.org/jbossas/docs/Getting_Started_Guide/4/html-single/index.html](https://docs.jboss.org/jbossas/docs/Getting_Started_Guide/4/html-single/index.html)):'
  prefs: []
  type: TYPE_NORMAL
- en: '"The JMX Console is the JBoss Management Console, which provides a raw view
    of the JMX MBeans that make up the server. They can provide a lot of information
    about the running server and allow you to modify its configuration, start and
    stop components, and so on."'
  prefs: []
  type: TYPE_NORMAL
- en: 'If we find an open instance of JBoss with unauthenticated access to the JMX
    console, we can upload the shell to the server using the `MainDeployer` option.
    This allows us to fetch a WAR file from a URL and deploy it on the server. The
    JMX console is shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/da21be8d-8f8d-42a9-923a-0c5f1a44a8d0.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Let''s implement the following steps for exploitation:'
  prefs: []
  type: TYPE_NORMAL
- en: 'On the console page, search for the `MainDeployer` service option, as shown:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/3b40d6fa-23e8-4864-8d47-c6ae46bc102f.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Clicking on the option will redirect us to a new page, as shown:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/9347d1f8-33e1-43ce-994d-a4e8518682ee.png)'
  prefs: []
  type: TYPE_IMG
- en: 'By scrolling further down the page, we will see multiple `deploy` methods.
    Choose the `URL Deploy` method, which will allow us to fetch a WAR file from a
    remote URL:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/ccef5707-375f-4b50-9229-2fb75bd3e477.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Let''s generate a WAR-based Metasploit payload using the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'We now need to host the WAR file on an HTTP server and paste the URL in the
    input field, as shown:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/6f90207a-c92b-435d-b963-ae52e389f404.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Let''s set our exploit handler as shown:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/cf918cfe-c4ba-4ca3-b9dd-38ffb5f1dec0.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Once it has been successfully invoked, we will get the following message from
    the server:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/9dba5cbf-d778-4ec8-b3e6-d192e8f23c6c.png)'
  prefs: []
  type: TYPE_IMG
- en: Our `s.war` payload has been deployed.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next up, we need to find the correct stager name so that we can call the file.
    Let''s decompress the file generated by Metasploit, as shown:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/4b56ef15-5785-4e95-93f8-94b83d0fd255.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We locate the servlet name in the `web.xml` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/f359e8a9-319e-462b-81ed-3a05cee2c4cd.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Let''s call the payload by adding the servlet name to the URL, as shown in
    the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/46b190cd-4419-4691-bb2c-db1259a6d88b.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The output will be blank, but we can check the stager request on our Metasploit
    exploit handler, as shown:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/5e887d77-945c-4ecc-a6e0-dde180f307a0.png)'
  prefs: []
  type: TYPE_IMG
- en: It's always better to customize the WAR file and obfuscate the contents using
    commonly known techniques. Also, to help further avoid detection, we need to change
    the filename from a random name to a more specific and common name, such as `login.jsp`,
    `about.jsp`, or `logout.jsp`.
  prefs: []
  type: TYPE_NORMAL
- en: Exploitation via the JMX console using Metasploit (MainDeployer)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Metasploit also has an inbuilt exploit module that can be used to exploit the
    JMX console using the `MainDeployer` method. Let''s now use the Metasploit module
    to upload a shell via the JMX console. We load the exploit by using the following
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'We will see the following available options:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/5155d221-364a-41ae-9d39-24f241fb867f.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We can set the required options, such as `rhosts`, and `rport` as shown:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/606df825-72af-4280-a36b-87e3aec54dbe.png)'
  prefs: []
  type: TYPE_IMG
- en: 'When everything is set, we can run the exploit and Metasploit will perform
    the same steps that we carried out manually in the previous section to give us
    Meterpreter access on the server, as shown:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/e218a9e1-c77c-4a1f-9e65-74a1519e4ba9.png)'
  prefs: []
  type: TYPE_IMG
- en: Sometimes, the module may not work if the JMX console is protected with authentication.
    We can always try to perform a dictionary attack on the authentication and, if
    successful, we can use the username and password (found during the dictionary
    attack) on this module by setting up the `HttpUsername` and `HttpPassword` options.
  prefs: []
  type: TYPE_NORMAL
- en: Exploitation via the JMX console (BSHDeployer)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Another way to achieve code execution on JBoss via the JMX console is by using
    the **BeanShell Deployer** (`BSHDeployer`). `BSHDeployer` allows us to deploy
    one-time execution scripts and services in JBoss in the form of a Bean shell script. After
    getting access to the JMX console, we can look for the `service=BSHDeployer` object
    name, as shown:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/975f3cf3-7107-4a51-b1c1-13d90527ec8a.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Clicking on this object will redirect us to the deployer page, as shown:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/68f238ba-364c-44a1-8aba-74700f25fba1.png)'
  prefs: []
  type: TYPE_IMG
- en: Here, we need to put the URL of the BSH file that will be used to deploy our
    payload on the server. An easy way would be to use the third-party tools for exploitation
    via `BSHDeployer`, such as JexBoss. This can also be achieved using Metasploit,
    as we will see now.
  prefs: []
  type: TYPE_NORMAL
- en: Exploitation via the JMX console using Metasploit (BSHDeployer)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Metasploit can also be used to deploy a BSH to achieve code execution on the
    server. Metasploit has the `jboss_bshdeployer` exploit module for this purpose,
    so let''s look at its usage. We can load the exploit in `msfconsole` using the
    following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'To view the list of options, we need to type `show options`, as shown:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/9dedc6e9-677f-49e2-b587-c0a539c7f596.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We need to then set the respective options before running the exploit, as shown:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/c21b1280-eec3-40b8-9e11-a1349c930fbd.png)'
  prefs: []
  type: TYPE_IMG
- en: We need to set the payload that we're using in this module (by default, `java/meterpreter/reverse_tcp`).
    A universal option is to use the Java-based Meterpreter, but in cases where the
    Java payload doesn't work, we can always try to use the payload based on the OS
    flavor and architecture.
  prefs: []
  type: TYPE_NORMAL
- en: 'Upon running the exploit, Metasploit will create a BSH script and call the
    deployer, which will then deploy and extract the shellcode. Calling the JSP shellcode
    will execute our payload and we will get a reverse connection, as shown:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/fbb060ac-cad8-482e-8a69-0991b64a72b3.png)'
  prefs: []
  type: TYPE_IMG
- en: Now that we know how to exploit the JMX console via `BSHDeployer`, let's look
    at exploiting through the web console.
  prefs: []
  type: TYPE_NORMAL
- en: Exploitation via the web console (Java applet)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this section, we will discuss the JBoss web console. Note that the JBoss
    web console has been deprecated and was replaced with the administration console,
    but it is still useful to us because, on older versions of the JBoss server, the
    web console can still be exploited. We may also face some errors while opening
    the web console in the browser, as shown:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/20baf348-48f0-459a-b576-f11d5001b481.png)'
  prefs: []
  type: TYPE_IMG
- en: 'To allow the applet to run, we need to change our Java security settings and
    add the domain name and IP address of the JBoss instance to the Java exception
    site list, as shown:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/ccd29179-d62c-4411-861f-0cd71f15d637.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Once the exception is added, we will still get a warning from the browser,
    but we can go ahead and click Continue, as shown:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/f8a310a3-7e60-4c68-95db-96ecdffd36df.png)'
  prefs: []
  type: TYPE_IMG
- en: 'In the next popup, we need to click on the Run button to allow the application
    to run, as shown:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/e9f7d898-883a-4222-a781-84bc0316f70c.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We are then presented with the web console of the JBoss server. Here, we can
    continue with the same steps that we covered in the previous section to upload
    the shell using `MainDeployer`. As the following screenshot shows, all we need
    to do is find and select the object in the left-hand side pane:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/9bc50662-0832-410d-9561-8e0edee2ce7f.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Clicking on the `MainDeployer` item will take us to the page where the WAR
    file can be deployed on the server to achieve code execution, as shown:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/2a28a7cd-23a9-476d-85a2-c8b1c10f47bf.png)'
  prefs: []
  type: TYPE_IMG
- en: By default, running Java applets is disabled in most browsers, so sometimes,
    when visiting the web console page on the discovery of a JBoss server, we may
    just get a blank page. Encountering a blank page while opening the web console
    does not mean that the service is not accessible. It just means that we have to
    tweak our browsers a little to allow the Java applet execution.
  prefs: []
  type: TYPE_NORMAL
- en: Exploitation via the web console (the Invoker method)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Another way of exploiting a JBoss AS instance is via the web console''s `Invoker`
    method. Executing a `curl` command while requesting the `/web-console/Invoker`
    URI path will get us a response from the server with the `0xAC` and `0xED` hex
    code characters (`aced`) in the first 4 bytes of the file. We can see this at
    the beginning of any Java serialized object, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/3c98d94d-5f14-4cf6-b9fd-5cf86b1bfb2b.png)'
  prefs: []
  type: TYPE_IMG
- en: The `Invoker` servlet can be found in the web console or `Invoker` at `http://example.com/web-console/Invoker`. This
    can mostly be accessed without authentication. We can send a serialized post request
    to this `Invoker` to execute commands on the server.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here''s the breakdown of the bytes in the preceding screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '**ac ed**: `STREAM_MAGIC`specifies that this is a serialization protocol.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**00 o5**: `STREAM_VERSION` specifies the serialization version in use.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**0x73**: `TC_OBJECT` specifies that this is a new object.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**0x72**: `TC_CLASSDESC` specifies that this is a new class.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**00 24**: This specifies the length of the class name.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**{6F 72 67 2E 6A 62 6F 73 ****73 2E 69 6E 76 6F 63 61** **74 69 ****6F 6E
    2E 4D 61 72 ****73 68 61 6C 6C 65 64 56** **61 6C 75 65}** **org.jboss. invocation.MarshalledValue**:
    This specifies the class name.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**EA CC E0 D1 F4 4A D0 99**: `SerialVersionUID` specifies the serial version
    identifier of this class.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**0x0C**: This specifies the tag number.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**00 00**: This specifies the number of fields in this class.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**0x78**: `TC_ENDBLOCKDATA` marks the end of block objects.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**0x70**: `TC_NULL` represents the fact that there are no more superclasses
    because we have reached the top of the class hierarchy.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Exploitation via the web console using a third-party tool.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Before jumping into Metasploit's module, let's look at another set of scripts
    developed by RedTeam Pentesting. The archive can be downloaded from their website
    at [https://www.redteam-pentesting.de/files/redteam-jboss.tar.gz](https://www.redteam-pentesting.de/files/redteam-jboss.tar.gz).
  prefs: []
  type: TYPE_NORMAL
- en: 'The archive contains the following files:'
  prefs: []
  type: TYPE_NORMAL
- en: '`BeanShellDeployer/mkbeanshell.rb`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`WAR/shell.jsp`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`WAR/WEB-INF/web.xml`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Webconsole-Invoker/webconsole_invoker.rb`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`JMXInvokerServlet/http_invoker.rb`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`JMXInvokerServlet/jmxinvokerservlet.rb`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`jboss_jars/console-mgr-classes.jar`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`jboss_jars/jbossall-client.jar`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`README`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`setpath.sh`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Rakefile`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following screenshot shows the different scripts released by the team:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/4f60675d-1e68-4d79-9cc7-2163291ca60f.png)'
  prefs: []
  type: TYPE_IMG
- en: We can use this tool to create custom BSH scripts, deploy the BSH scripts via
    the web console `Invoker`, create a `JMXInvokerServlet` payload, and so on. Let's
    see how we can use this tool to create a BSH script.
  prefs: []
  type: TYPE_NORMAL
- en: Creating BSH scripts
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'One of the scripts in the archive is `mkbeanshell`. This script takes a WAR
    file as input and then creates a BSH script as output:'
  prefs: []
  type: TYPE_NORMAL
- en: 'We can see a list of all options available to us  by executing the script with
    the `-h` flag, as shown:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/7fad0f3f-500d-4b6a-8e11-7dfe499d7766.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now, we can create a BSH using the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'The output of the command (that is, the BSH script) will be saved in the output
    file, which is mentioned in the preceding command. In this case, the file created
    is `redteam.bsh`, as we can see in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/89703368-2469-4027-8d97-42cea710a66c.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The source file (that is, the WAR file used, in this case) is the generic payload
    file. Inside this WAR file is our JSP web shell, whose content can be seen in
    the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/17f1b6ff-1cc5-4e12-8660-6f946de3bdf2.png)'
  prefs: []
  type: TYPE_IMG
- en: 'By default, if we open the BSH script that was created, we will see that it
    uses the `/tmp/` directory on the server to extract and deploy the WAR archive.
    Now, Windows servers do not have the `/tmp/` directory, and the `mkbeanshell` Ruby
    script only has the option to alter the path and, in most cases, we may not know
    the path on the server at all. The following screenshot shows the BSH script''s
    code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/de424d35-8b7e-46da-a552-42f6f6cbffa0.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We can replace the last lines of code (in the previous screenshot) with the
    following lines of code to get the generic file locations:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Here, we can see that `System.getProperty("jboss.server.home.dir");` fetches
    the JBoss directory. This is a platform-independent code that can be used on Windows
    as well as *nix-based servers. All we need to do is create a new directory in
    the `home` directory named `deploy` using `new File(jboss_home + "/deploy/").mkdir();` then, `Base64`
    is decoded and written in the `deploy` directory as `test.war`. The following
    screenshot shows the BSH script''s final code after these changes have been made:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/83489199-617c-47e6-84d8-eda3612e5347.png)'
  prefs: []
  type: TYPE_IMG
- en: Once the BSH script is ready, we can use the `webconsole_invoker.rb` script,
    which comes with the same third-party tool, `redteam-jboss.tar.gz`, to deploy
    our BSH script remotely onto the JBoss AS instance.
  prefs: []
  type: TYPE_NORMAL
- en: Deploying the BSH script using webconsole_invoker.rb
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We can deploy the BSH script using the `webconsole_invoker.rb` script:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Executing the Ruby script with the `-h` flag will show us a list of options,
    as in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/f3d1603b-ac1c-4e54-a8fc-d1cd754bb143.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We now run the script and pass the target `Invoker` URL along with the `Invoke`
    method. In our case, we will use the `createScriptDeployment()` method. This method
    takes two input types, both as `String`, so we pass them in the `-s` flag, and
    then we pass the path to our BSH file (with the filename and the name of the deployer
    passed with the `-p` flag), as shown:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/75e66d68-9f8c-4e97-bf52-b5045cdde2b4.png)'
  prefs: []
  type: TYPE_IMG
- en: 'After executing the script, our `test.war` file will be deployed, which will
    create our shell in the `/test/` directory inside our `home` directory:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/8aaf4d5f-730a-4be5-81f4-cd0480e27ca6.png)'
  prefs: []
  type: TYPE_IMG
- en: Browsing to the URL allows us to access the JSP-based web shell that was uploaded,
    as we can see in the preceding screenshot.
  prefs: []
  type: TYPE_NORMAL
- en: Exploitation via JMXInvokerServlet (JexBoss)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Another great tool for JBoss exploitation is JexBoss. JexBoss is a tool for
    testing and exploiting vulnerabilities in JBoss AS and other Java platforms, frameworks,
    and applications. It''s open source and available on GitHub at [https://github.com/joaomatosf/jexboss](https://github.com/joaomatosf/jexboss):'
  prefs: []
  type: TYPE_NORMAL
- en: 'Once we have downloaded and run the tool, we can perform the exploitation with
    a few keystrokes. All we need to do is pass the URL of the running JBoss server
    using the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: If Python has not been properly configured, we can execute the preceding command
    using the `python jexboss.py --jboss -P` syntax. Both options work.
  prefs: []
  type: TYPE_NORMAL
- en: 'As the following screenshot shows, the tool has identified multiple vulnerable
    endpoints that can be exploited to gain access to the server. We will use `JMXInvokerServlet`,
    which is similar to  `Invoker` and receives serialized post data:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/f1f69410-458e-4ad7-a718-c2c0558593e8.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Choose `yes` when the tools ask for confirmation of exploitation:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/71cca431-2ae6-4d50-a749-2252f82e6e89.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Once the exploitation is complete, we will get a shell through which we can
    execute commands on the server, as shown:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/5d557433-8281-4720-8d99-5c54e10fa7b2.png)'
  prefs: []
  type: TYPE_IMG
- en: Further exploitation is also possible by using the `jexremote` command. Now
    that we have a better understanding of exploiting JBoss using JexBoss, let's move
    on to the next section—exploitation via `JMXInvokerServlet` using Metasploit
  prefs: []
  type: TYPE_NORMAL
- en: Exploitation via JMXInvokerServlet using Metasploit
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Metasploit also has a module for `JMXInvokerServlet`, which can be loaded using
    the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Before using this `exploit` module, we need to make sure that the `/invoker/JMXInvokerServlet`
    URI path exists on the server. If the path doesn''t exist, the exploit will fail.
    The following screenshot shows the output of the preceding command:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/bd5741cb-022c-4bb7-bd69-6fb19d6ab62a.png)'
  prefs: []
  type: TYPE_IMG
- en: 'To see whether the `/invoker/JMXInvokerServlet` URI path exists, we can use
    the following command for confirmation:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/ee5a533b-f889-416d-8b1e-7ef2875939c8.png)'
  prefs: []
  type: TYPE_IMG
- en: 'If the server responds with serialized data in the form of bytes, starting
    with `ac ed`, we can run the exploit, which will give us access to the server via
    Meterpreter, as we can see in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/ac382d68-262d-44fb-9617-288a49170c09.png)**Note: **In cases where we
    are not able to get a successful reverse shell, we can always opt for bind shell
    connections.'
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we learned about the basics of JBoss, and then moved on to
    studying the file and directory structure. Next, we looked at the enumeration
    of JBoss, and then we moved on to carrying out vulnerability assessments using
    the Metasploit framework, after which we got to the exploitation process via the
    administration console. Finally, we performed exploitation through the web console.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will learn about pentesting on Apache Tomcat.
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Is JBoss free to download?
  prefs: []
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The JBoss directory structure:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://www.protechtraining.com/content/jboss_admin_tutorial-directory_structure](https://www.protechtraining.com/content/jboss_admin_tutorial-directory_structure)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://access.redhat.com/documentation/en-us/jboss_enterprise_application_platform/5/html/administration_and_configuration_guide/server_directory_structure](https://access.redhat.com/documentation/en-us/jboss_enterprise_application_platform/5/html/administration_and_configuration_guide/server_directory_structure)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The Java serialized format:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://www.programering.com/a/MTN0UjNwATE.html](https://www.programering.com/a/MTN0UjNwATE.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://www.javaworld.com/article/2072752/the-java-serialization-algorithm-revealed.html](https://www.javaworld.com/article/2072752/the-java-serialization-algorithm-revealed.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
