- en: Chapter 1. Introduction to Docker Monitoring
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Docker has been a recent but very important addition to a SysAdmins toolbox.
  prefs: []
  type: TYPE_NORMAL
- en: Docker describes itself as an open platform for building, shipping, and running
    distributed applications. This means that developers can bundle their code and
    pass it to their operations team. From here, they can deploy safe in the knowledge
    that it will be done so in a way that introduces consistency with the environment
    in which the code is running.
  prefs: []
  type: TYPE_NORMAL
- en: When this process is followed, it should make the age-old developers versus
    operations argument of "it worked on my local development server"—a thing of the
    past. Since before its "production ready" 1.0 release back in June 2014, there
    had been over 10,000 Dockerized applications available. By the end of 2014, that
    number had risen to over 71,000\. You can see how Docker grew in 2014 by looking
    at the infographic that was published by Docker in early 2015, which can be found
    at [https://blog.docker.com/2015/01/docker-project-2014-a-whirlwind-year-in-review/](https://blog.docker.com/2015/01/docker-project-2014-a-whirlwind-year-in-review/).
  prefs: []
  type: TYPE_NORMAL
- en: While the debate is still raging about how production ready the technology is,
    Docker has gained an impressive list of technology partners, including RedHat,
    Canonical, HP, and even Microsoft.
  prefs: []
  type: TYPE_NORMAL
- en: Companies such as Google, Spotify, Soundcloud, and CenturyLink, have all open
    sourced tools that support Docker in some way, shape, or form and there has also
    been numerous independent developers who have released apps that provide additional
    functionality to the core Docker product set. Also, all the companies have sprung
    up around the Docker ecosystem.
  prefs: []
  type: TYPE_NORMAL
- en: This book assumes that you have had some level of experience building, running,
    and managing Docker containers, and that you would now like to start to metrics
    from your running applications to further tune them, or that you would like to
    know when a problem occurs with a container so that you can debug any ongoing
    issues.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you have never used Docker before, you may want to try one of the excellent
    books that serve and introduce you to all the things that Docker provides, books
    such as *Learning Docker*, *Packt Publishing*, or Docker''s own introduction to
    containers, which can be found at their documentation pages, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Learning Docker: [https://www.packtpub.com/virtualization-and-cloud/learning-docker](https://www.packtpub.com/virtualization-and-cloud/learning-docker)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Official Docker docs: [https://docs.docker.com/](https://docs.docker.com/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Now, we have a brought ourselves up to speed with what Docker is; the rest
    of this chapter will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: How different is it to monitor containers versus more traditional servers such
    as virtual machines, bare metal machine, and cloud instances (Pets, Cattle, Chickens,
    and Snowflakes).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What are the minimum versions of Docker you should be running?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to follow instructions on bringing up an environment locally using Vagrant
    in order to follow the practical exercises in this book
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Pets, Cattle, Chickens, and Snowflakes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Before we start discussing the various ways in which you can monitor your containers,
    we should get an understanding of what a SysAdmins world looks like these days
    and also where containers fit into it.
  prefs: []
  type: TYPE_NORMAL
- en: A typical SysAdmin will probably be looking after an estate of servers that
    are hosted in either an on-site or third-party data center, some may even manage
    instances hosted in a public cloud such as Amazon Web Services or Microsoft Azure,
    and some SysAdmins may juggle all their server estates across multiple hosting
    environments.
  prefs: []
  type: TYPE_NORMAL
- en: Each of these different environments has its own way of doing things, as well
    as performing best practices. Back in February 2012, Randy Bias gave a talk at
    Cloudscaling that discussed architectures for open and scalable clouds. Towards
    the end of the slide deck, Randy introduced the concept of Pets versus Cattle
    (which he attributes to Bill Baker, who was then an engineer at Microsoft).
  prefs: []
  type: TYPE_NORMAL
- en: You can view the original slide deck at [http://www.slideshare.net/randybias/architectures-for-open-and-scalable-clouds](http://www.slideshare.net/randybias/architectures-for-open-and-scalable-clouds).
  prefs: []
  type: TYPE_NORMAL
- en: Pets versus Cattle is now widely accepted as a good analogy to describe modern
    hosting practices.
  prefs: []
  type: TYPE_NORMAL
- en: Pets
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Pets are akin to traditional physical servers or virtual machines, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Each pet has a name; for example, `myserver.domain.com`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: When they're not well, you take them to the vet to help them get better. You
    employ SysAdmins to look after them.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You pay close attention to them, sometimes for years. You take backups, patch
    them, and ensure that they are fully documented.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Cattle
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Cattle, on the other hand, represent more modern cloud computing instances,
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: You've got too many to name, so you give them numbers; for example, the URL
    could look something like `ip123123123123.eu.public-cloud.com`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'When they get sick, you shoot them and if your herd requires it, you replace
    anything you''ve killed: A server crashes or shows signs that it is having problems,
    you terminate it and your configuration automatically replaces it with an exact
    replica.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You put them in a field and watch them from far and you don't expect them to
    live long. Rather than monitoring the individual instances, you monitor the cluster.
    When more resources are needed, you add more instances and once the resource is
    no longer required, you terminate the instances to get you back to your base configuration.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Chickens
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Next up is a term that is a good way of describing how containers fit into
    the Pets versus Cattle world; in a blog post title "Cloud Computing: Pets, Cattle
    and ... Chickens?" on ActiveState, Bernard Golden describes containers as Chickens:'
  prefs: []
  type: TYPE_NORMAL
- en: They're more efficient than cattle when it comes to resource use. A container
    can boot in seconds where a instance or server can take minutes; it also uses
    less CPU power than a typical virtual machine or cloud instance.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There are many more chickens than cattle. You can quite densely pack containers
    onto your instances or servers.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Chickens tend to have a shorter lifespan than cattle and pets. Containers lend
    themselves to running micros-services; these containers may only be active for
    a few minutes.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The original blog post can be found at [http://www.activestate.com/blog/2015/02/cloud-computing-pets-cattle-and-chickens](http://www.activestate.com/blog/2015/02/cloud-computing-pets-cattle-and-chickens).
  prefs: []
  type: TYPE_NORMAL
- en: Snowflakes
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The final term is not animal-related and it describes a type of server that
    you defiantly don''t want to have in your server estate, a Snowflake. This term
    was penned by Martin Fowler in a blog post titled "SnowflakeServer". Snowflakes
    is a term applied to "legacy" or "inherited" servers:'
  prefs: []
  type: TYPE_NORMAL
- en: Snowflakes are delicate and are treated with kid gloves. Typically, the server
    has been in the data center since you started. No one knows who originally configured
    it and there is no documentation of it; all you know is that it is important.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Each one is unique and is impossible to exactly reproduce. Even the most hardened
    SysAdmin fears to reboot the machine incase it doesn't boot afterwards, as it
    is running end-of-life software that can not easily be reinstalled.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Martin's post can be found at [http://martinfowler.com/bliki/SnowflakeServer.html](http://martinfowler.com/bliki/SnowflakeServer.html).
  prefs: []
  type: TYPE_NORMAL
- en: So what does this all mean?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Depending on your requirements and the application you want to deploy, your
    containers can be launched onto either pet or cattle style servers. You can also
    create a clutch of chickens and have your containers run micro-services.
  prefs: []
  type: TYPE_NORMAL
- en: Also, in theory, you can replace your feared snowflake servers with a container-based
    application that meets all the end-of-life software requirements while remaining
    deployable on a modern supportable platform.
  prefs: []
  type: TYPE_NORMAL
- en: Each of the different styles of server has different monitoring requirements,
    in the final chapter we will look at Pets, Cattle, Chickens, and Snowflakes again
    and discuss the tools we have covered in the coming chapters. We will also cover
    best practices you should take into consideration when planning your monitoring.
  prefs: []
  type: TYPE_NORMAL
- en: Docker
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: While Docker hit its version 1.0 milestone over a year ago, it is still in it's
    infancy; with each new release comes new features, bug fixes, and even support
    for some early functionality that is being depreciated.
  prefs: []
  type: TYPE_NORMAL
- en: 'Docker itself is now a collection of several smaller projects; these include
    the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Docker Engine
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Docker Machine
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Docker Compose
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Docker Swarm
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Docker Hub
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Docker Registry
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Kitmatic
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In this book, we will be using Docker Engine, Docker Compose, and the Docker
    Hub.
  prefs: []
  type: TYPE_NORMAL
- en: Docker Engine is the core component of the Docker project and it provides the
    main bulk of the Docker functionality. Whenever Docker or the `docker` command
    is mentioned in this book, I will be referring to Docker Engine.
  prefs: []
  type: TYPE_NORMAL
- en: The book assumes you have Docker Engine version 1.71 or later installed; older
    versions of Docker Engine may not contain the necessary functionality required
    to run the commands and software covered in the upcoming chapters.
  prefs: []
  type: TYPE_NORMAL
- en: Docker Compose started its life as a third-party orchestration tool called **Fig**
    before being purchased by Docker in 2014\. It is described as a way of defining
    a multi-container application using YAML ([http://yaml.org](http://yaml.org)).
    Simply put, this means that you quickly deploy complex applications using a single
    command that calls a human readable configuration file.
  prefs: []
  type: TYPE_NORMAL
- en: We assume that you have Docker Compose 1.3.3 or later installed; the `docker-compose.yml`
    files mentioned in this book have been written with this version in mind.
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, the majority of the images we will be deploying during this book will
    be sourced from the Docker Hub ([https://hub.docker.com/](https://hub.docker.com/)),
    which not only houses a public registry containing over 40,000 public images but
    also 100 official images. The following screenshot shows the official repositories
    listing on the Docker Hub website:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Docker](../images/00002.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: You can also sign up and use the Docker Hub to host your own public and private
    images.
  prefs: []
  type: TYPE_NORMAL
- en: Launching a local environment
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Wherever possible, I will try to ensure that the practical exercises in this
    book will be able to be run on a local machine such as your desktop or laptop.
    For the purposes of this book, I will assume that your local machine is running
    either a recent version OS X or an up-to-date Linux distribution and has a high
    enough specification to run the software mentioned in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: The two tools we will be using to launch our Docker instances will also run
    on Windows; therefore, it should be possible to follow the instructions within
    this, although you may have to refer the usage guides for any changes to the syntax.
  prefs: []
  type: TYPE_NORMAL
- en: Due to the way in which Docker is architected, a lot of the content of this
    book will have you running commands and interacting with the command line on the
    virtual server that is acting as the host machine, rather than the containers
    themselves. Because of this, we will not be using either Docker Machine or Kitematic.
  prefs: []
  type: TYPE_NORMAL
- en: Both of these are tools provided by Docker to quickly bootstrap a Docker-enabled
    virtual server on your local machine, as unfortunately the host machines deployed
    by these tools contain a stripped down operating system that is optimized for
    running Docker with the smallest footprint as possible.
  prefs: []
  type: TYPE_NORMAL
- en: As we will be installing additional packages on the host machines, a stripped
    down "Docker only" operating system may not have the components available to meet
    the prerequisites of the software that we will be running in the later chapters;
    therefore, to ensure that there are no problems further on, we be running a full
    operating system.
  prefs: []
  type: TYPE_NORMAL
- en: Personally, I prefer a RPM-based operating system such as RedHat Enterprise
    Linux, Fedora, or CentOS, as I have been using them pretty much since the day
    I first logged into a Linux server.
  prefs: []
  type: TYPE_NORMAL
- en: However, as a lot of readers will be familiar with the Debian-based Ubuntu,
    I will be providing practical examples for both operating systems.
  prefs: []
  type: TYPE_NORMAL
- en: To ensure the experience is as consistent as possible, we will be installing
    Vagrant and VirtualBox to run the virtual machine that will act as a host to run
    our containers.
  prefs: []
  type: TYPE_NORMAL
- en: Vagrant, written by Mitchell Hashimoto, is a command line tool for creating
    and configuring reproducible and portable virtual machine environments. There
    have been numerous blog posts and articles that actually pitch Docker against
    Vagrant; however, in our case, the two technologies work quite well together in
    providing a repeatable and consistent environment.
  prefs: []
  type: TYPE_NORMAL
- en: Vagrant is available for Linux, OS X, and Windows. For details on how to install,
    go to the Vagrant website at [https://www.vagrantup.com/](https://www.vagrantup.com/).
  prefs: []
  type: TYPE_NORMAL
- en: VirtualBox is a great all round open source virtualization platform originally
    developed by Sun and now maintained by Oracle. It allows you to run both 32-bit
    and 64-bit guest operating systems on your local machine. Details on how to download
    and install VirtualBox can be found at [https://www.virtualbox.org/](https://www.virtualbox.org/);
    again, VirtualBox can be installed on Linux, OS X, and Windows.
  prefs: []
  type: TYPE_NORMAL
- en: Cloning the environment
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The source for the environment along with the practical examples can be found
    on GitHub in the Monitoring Docker repository at [https://github.com/russmckendrick/monitoring-docker](https://github.com/russmckendrick/monitoring-docker).
  prefs: []
  type: TYPE_NORMAL
- en: 'To clone the repository on a terminal on your local machine, run the following
    commands (replacing the file path as needed):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Once cloned, you should see a directory called `monitoring-docker` and then
    enter that directory, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Running a virtual server
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the repository, you will find two folders containing the necessary `Vagrant`
    file to launch either a CentOS 7 or a Ubuntu 14.04 virtual server.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you would like to use the CentOS 7 vagrant box, change the directory to
    `vagrant-centos`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Once you are in the vagrant-centos directory, you will see that there is a `Vagrant`
    file; this file is all you need to launch a CentOS 7 virtual server. After the
    virtual server has been booted, the latest version of `docker` and `docker-compose`
    will be installed and the `monitoring-docker` directory will also be mounted inside
    the virtual machine using the mount point `/monitoring-docker`.
  prefs: []
  type: TYPE_NORMAL
- en: 'To launch the virtual server, simply type the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: This will download the latest version of the vagrant box from [https://atlas.hashicorp.com/russmckendrick/boxes/centos71](https://atlas.hashicorp.com/russmckendrick/boxes/centos71)
    and then boot the virtual server; it's a 450 MB download so it may take several
    minutes to download; it only has to do this once.
  prefs: []
  type: TYPE_NORMAL
- en: 'If all goes well, you should see something similar to the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Running a virtual server](../images/00003.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Now that you have booted the virtual server, you can connect to it using the
    following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Once logged in, you should verify that `docker` and `docker-compose` are both
    available:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Running a virtual server](../images/00004.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Finally, you can try running the `hello-world` container using the following
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'If everything goes as expected, you should see the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Running a virtual server](../images/00005.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'To try something more ambitious, you can run an Ubuntu container with the following
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Before we launch and enter the Ubuntu container, lets confirm that we are running
    the CentOS host machine by checking the release file that can be found in `/etc`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Running a virtual server](../images/00006.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Now, we can launch the Ubuntu container. Using the same command, we can confirm
    that we are inside the Ubuntu container by viewing its release file:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Running a virtual server](../images/00007.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: To exit the container just type in `exit`. This will stop the container from
    running, as it has terminated the only running process within the container, which
    was bash, and returned you to the host CentOS machine.
  prefs: []
  type: TYPE_NORMAL
- en: As you can see here from our CentOS 7 host, we have launched and removed an
    Ubuntu container.
  prefs: []
  type: TYPE_NORMAL
- en: Both the CentOS 7 and Ubuntu Vagrant files will configure a static IP address
    on your virtual machine. It is `192.168.33.10`; also, there is a DNS record for
    this IP address available at [docker.media-glass.es](http://docker.media-glass.es).
    These will allow you to access any containers that expose themselves to a browser
    at either `http://192.168.33.10/` or [http://docker.media-glass.es/](http://docker.media-glass.es/).
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The URL [http://docker.media-glass.es/](http://docker.media-glass.es/) will
    only work while the vagrant box is up, and you have a container running which
    serves Web pages.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can see this in action by running the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Downloading the example code**'
  prefs: []
  type: TYPE_NORMAL
- en: You can download the example code files from your account at [http://www.packtpub.com](http://www.packtpub.com)
    for all the Packt Publishing books you have purchased. If you purchased this book
    elsewhere, you can visit [http://www.packtpub.com/support](http://www.packtpub.com/support)
    and register to have the files e-mailed directly to you.
  prefs: []
  type: TYPE_NORMAL
- en: 'This will download and launch a container running NGINX. You can then go to
    `http://192.168.33.10/` or [http://docker.media-glass.es/](http://docker.media-glass.es/)
    in your browser; you should see a forbidden page. This is because we have not
    yet given NGINX any content to serve (more on this will be covered later in the
    book):'
  prefs: []
  type: TYPE_NORMAL
- en: '![Running a virtual server](../images/00008.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: For more examples and ideas, go to the website at [http://docs.docker.com/userguide/](http://docs.docker.com/userguide/).
  prefs: []
  type: TYPE_NORMAL
- en: Halting the virtual server
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To log out of the virtual server and return to your local machine, you type
    `exit`.
  prefs: []
  type: TYPE_NORMAL
- en: 'You should now see your local machine''s terminal prompt; however, the virtual
    server you booted will still be running in the background happily, using resources,
    until you either power it down using the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Terminate the virtual server altogether using `vagrant destroy`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'To check the current status of the virtual server, you can run the following
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'The result of the preceding command is given in the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Halting the virtual server](../images/00009.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Either powering the virtual server back on or creating it from scratch again,
    can be achieved by issuing the `vagrant up` command again.
  prefs: []
  type: TYPE_NORMAL
- en: 'The preceding details show how to use the CentOS 7 vagrant box. If you would
    prefer to launch an Ubuntu 14.04 virtual server, you can download and install
    the vagrant box by going into the `vagrant-ubuntu` directory using the following
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: From here, you will be able run vagrant up and follow the same instructions
    used to boot and interact with the CentOS 7 virtual server.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we talked about different types of server and also discussed
    how your containerized applications can fit into each of the categories. We have
    also installed VirtualBox and used Vagrant to launch either a CentOS 7 or Ubuntu
    14.04 virtual server, with `docker` and `docker-compose` installed.
  prefs: []
  type: TYPE_NORMAL
- en: Our new virtual server environment will be used throughout the upcoming chapters
    to test the various different types of monitoring. In the next chapter, we will
    start our journey by using Docker's in-built functionality to explore metrics
    about our running containers.
  prefs: []
  type: TYPE_NORMAL
