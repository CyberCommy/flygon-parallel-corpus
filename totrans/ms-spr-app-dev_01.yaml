- en: Chapter 1. Spring Mongo Integration
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: MongoDB is a popular NoSQL database and is a document-based one too. It is written
    using the popular and powerful C++ language, which makes it a document-oriented
    database. Queries are also document-based, and it also provides indexing using
    JSON style to store and retrieve data. MongoDB works on the concept of **collection**
    and **documentation**.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s look at few terminology differences between MySQL and MongoDB:'
  prefs: []
  type: TYPE_NORMAL
- en: '| MySQL | MongoDB |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| Table | Collection |'
  prefs: []
  type: TYPE_TB
- en: '| Row | Document |'
  prefs: []
  type: TYPE_TB
- en: '| Column | Field |'
  prefs: []
  type: TYPE_TB
- en: '| Joins | Embedded documents linking |'
  prefs: []
  type: TYPE_TB
- en: In MongoDB, a collection is a set or a group of documents. It is the same as
    RDBMS tables.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we shall start by setting up a MongoDB NoSQL database and will
    integrate a spring application with MongoDB to perform CRUD operations. The first
    example demonstrates updating single document values. The second example considers
    an order use case where it requires two document references to be stored in the
    collection. It demonstrates the flexibility in referencing different documents
    of MongoDB using `objectId` references.
  prefs: []
  type: TYPE_NORMAL
- en: We need to go for a NoSQL database only if the applications have heavy write
    operations. MongoDB also suits the cloud environment very well, where we can take
    copies of databases easily.
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, we shall see how we can get started with MongoDB, beginning
    with installing it, using the Spring Framework, and integrating MongoDB. To get
    started, we shall show basic **Create, Retrieve, Update, and Delete** (**CRUD**)
    operations with various use cases.
  prefs: []
  type: TYPE_NORMAL
- en: Installing MongoDB and creating a database
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this section we shall install MongoDB and create a database:'
  prefs: []
  type: TYPE_NORMAL
- en: Download the MongoDB database at [http://www.mongodb.org/downloads](http://www.mongodb.org/downloads).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Configure the data folder by executing the following command in the `bin` folder:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Start `mongod.exe` in another Command Prompt.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Execute the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: The `>show dbs` command also works fine with MongoDB.
  prefs: []
  type: TYPE_NORMAL
- en: Execute the following command to create a new database, namely `eshopdb`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Executing `> show dbs` will still show that `eshopdb` hasn't been created yet;
    this is because it doesn't contain any collections. Let's add some collections
    in the next step, once a collection is added.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Execute the following snippet in the Command Prompt. The following snippets
    will insert sample documents into the collection:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Setting up a batch file for MongoDB
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: It's always easy to create a batch file to start MongoDB, and it's best to create
    a script file to start Mongo. This way, we won't have an error with the configuration.
    This would also save us a lot of time.
  prefs: []
  type: TYPE_NORMAL
- en: Create a `mongodbstart.bat` file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Edit the file and type in the following command and save it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: The next time you want to start MongoDB, just click on the batch file.
  prefs: []
  type: TYPE_NORMAL
- en: Order use case with Spring and MongoDB
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let us look at the Order use case to implement a simple CRUD operation using
    Spring and MongoDB. We are performing CRUD operations on Product, Customer, and
    Order documents. The scenario is this: a customer selects a product and places
    an order.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Following is the Order use case. The actor is the application user and will
    have the following options:'
  prefs: []
  type: TYPE_NORMAL
- en: CRUD operation on Product Document
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: CRUD operation on Customer Document
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: CRUD operation on Order by selecting Product and Customer
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Saving the Product Document Object ID and Customer Document Object ID in Order
    Document
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Mapping a Mongo document to Spring Bean
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Spring provides a simple way to map Mongo documents. The following table depicts
    the mapping of Bean with MongoDB collections:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Bean | Mongo Collections |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `Customer.java` | `db.customer.find()` |'
  prefs: []
  type: TYPE_TB
- en: '| `Order.java` | `db.order.find()` |'
  prefs: []
  type: TYPE_TB
- en: '| `Product.java` | `db.product.find()` |'
  prefs: []
  type: TYPE_TB
- en: Setting up a Spring-MongoDB project
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We need to create a simple web application project using Maven.
  prefs: []
  type: TYPE_NORMAL
- en: 'Execute the following command in your Maven command prompt:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Create a simple Maven project with a web application archetype. Add the latest
    `4.0.2.RELEASE` spring dependency.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The following is an extract from the `pom.xml` file. These are the mandatory
    dependencies to be added to the `pom.xml` file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Application design
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The following table contains the classes used to develop a simple CRUD application.
    The request flows from controller to model and back. The Repository classes are
    marked with the `@Repository` annotation and connect to MongoDB using the `mongoTemplate`
    class.
  prefs: []
  type: TYPE_NORMAL
- en: '| Controller | Model | JSP | Bean |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `Customer Controller.java` | `Customer Repository.java` | `customer.jsp``editcutomer.jsp``allcustomers.jsp`
    | `Customer.java` |'
  prefs: []
  type: TYPE_TB
- en: '| `Order Controller.java` | `Order Repository.java` | `order.jsp``editorder.jsp``allorders.jsp`
    | `Order.java` |'
  prefs: []
  type: TYPE_TB
- en: '| `Product Controller.java` | `Product Repository.java` | `product.jsp``editproduct.jsp``allproducts.jsp`
    | `Product.java` |'
  prefs: []
  type: TYPE_TB
- en: Application implementation of Spring with MongoDB
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The following are the steps are for the implementation of the `Spring4MongoDB_Chapter1`
    application:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a web-based Maven project with the name `Spring4MongoDB_Chapter1`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Import the project into Eclipse for the implementation. I have used Eclipse
    Juno.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We need to create the controller to map the requests.
  prefs: []
  type: TYPE_NORMAL
- en: 'The controller request is mapped to the `GET` and `POST` methods, as shown
    in the following table:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Request | Request Method | Model Attributes |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `/product` | `GET` | `productList` |'
  prefs: []
  type: TYPE_TB
- en: '| `/product/save` | `POST` | `productList` |'
  prefs: []
  type: TYPE_TB
- en: '| `/product/update` | `POST` | `productList` |'
  prefs: []
  type: TYPE_TB
- en: '| `/product/geteditproduct` | `GET` | `productAttribute` |'
  prefs: []
  type: TYPE_TB
- en: '| `/product/deleteproduct` | `GET` | `productAttribute` |'
  prefs: []
  type: TYPE_TB
- en: '| `/product/getallproducts` | `GET` | `productList` |'
  prefs: []
  type: TYPE_TB
- en: Following is the implementation of `ProductController.java`. We have used the
    `@Controller` annotation to indicate that the `ProductController.java` class is
    a controller class. The `@Autowired` annotation ties the `ProductRepository` class
    with the `ProductController.java` file.
  prefs: []
  type: TYPE_NORMAL
- en: The property `productList` is a list of type `Product` that holds the products
    that are to be displayed on screen. The `@PostConstruct` annotation will call
    the method decorated by it. Once the constructor of the class is called and all
    properties are set, and before any business methods are called, it's worthy to
    note as it's only called once.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: The `Product.java` file has an `@Document` annotation and an `@ID` annotation,
    which is identified as a MongoDB collection that maps the `Product` entity to
    product collection in MongoDB.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: The `ProducRepository.java` file has `@Repository` annotation. This is the persistence
    layer, and tells spring that this class performs operations on the database. The
    connection to Mongo is set up in Mongo template.
  prefs: []
  type: TYPE_NORMAL
- en: '**ProductRepository.java**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: The `.jsp` file displays the products available and allows the user to perform
    CRUD operations on the `Product` bean. The following screenshot is the output
    of editing product information using the product `ObjectId` stored in MongoDB.
  prefs: []
  type: TYPE_NORMAL
- en: '![Application implementation of Spring with MongoDB](img/7320OS__01_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '**Product.jsp file**'
  prefs: []
  type: TYPE_NORMAL
- en: This file serves as a view layer to the user. This has the product creation
    form and includes a file that lists all the products stored in MongoDB.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: If all goes well, you should see the following screen, where you can play around
    with products. The following screenshot is the output of the **Register Product**
    and list Product functionality using Spring and MongoDB.
  prefs: []
  type: TYPE_NORMAL
- en: '![Application implementation of Spring with MongoDB](img/7320OS__01_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The following `dispatcher-servlet.xml` file shows the configuration for component
    scan and MongoDB template. It also shows the MongoDB database name configuration.
  prefs: []
  type: TYPE_NORMAL
- en: '**dispatcher-servlet.xml**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: You can see that the `mongoDbFactory` bean has been configured with MongoDB
    database details. You will also observe that `mongoTemplate` has also been configured.
    The property of the `mongoTemplate` bean is `mongoDbFactory` bean, and so when
    the template is called the connection gets established.
  prefs: []
  type: TYPE_NORMAL
- en: 'Just run the following commands in the MongoDB database in order to test the
    Order use case:'
  prefs: []
  type: TYPE_NORMAL
- en: '`db.order.find()`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`db.order.remove()`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '`RoboMongo` is a free tool like `Toad` to access the MongoDB database.'
  prefs: []
  type: TYPE_NORMAL
- en: Order management use case
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let's consider a complex scenario for this section. In the use case that we
    have considered, the Order use case has customer and product objects in the class.
    When a user places an order, the user will select a product and customer.
  prefs: []
  type: TYPE_NORMAL
- en: Our aim here is to store the `customer` and `product` classes directly in the
    `Order` collection in MongoDB. Let's first implement the `OrderBean` class with
    getter and setters.
  prefs: []
  type: TYPE_NORMAL
- en: '**Order.java**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: The next step would be to define the methods in the `OrderRepository.java` file.
  prefs: []
  type: TYPE_NORMAL
- en: '![Order management use case](img/7320OS__01_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Below are the code snippets of the `update` and `save` methods in the `repository`
    class.
  prefs: []
  type: TYPE_NORMAL
- en: Creating and inserting Order
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We see that the update `Order` method accepts the `Order` object. We used the
    `addCriteria()` method to get a particular order based on the object ID. The `Order`
    object retrieved is stored in the `temp` object. The values are then set to the
    `temp` object based on the object that is passed to the method. Then, the `mongoTemplate.save(Object)`
    method is called to update the saved object.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: The `saveObject` method only accepts the `Order` object and sets the ID to the
    `Order` object before saving it.
  prefs: []
  type: TYPE_NORMAL
- en: We have seen how to perform an update and an insert. The following method is
    invoked to save the Order details. This shows that `mongoTemplate` has the methods
    `insert()` and `save()`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Controller to handle requests
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `controller` class has the customer repository and product repository references
    as per the use case. The application user needs to select the customer and product
    to place an order.
  prefs: []
  type: TYPE_NORMAL
- en: 'The initial Skelton of `OrderController` is shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: Adding the @Modelattribute annotation at the Method level
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The `controller` class is to handle the `Order` requests. The `@ModelAttribute`
    annotation is added to the method. The product list and customer list is always
    available as a model attribute to the controller. The following is the code snippet
    of the `OrderController` class:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: CRUD operations of the OrderController class
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The methods are mapped to a particular request, `@ModelAttribute("Order")`,
    to make the order object easily accessible at the JSP level. You can observe that
    using `@ModelAttribute` at the method level; this will minimize adding `@ModelAttribute`
    to the method.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: JSP files
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `Order.jsp` file demonstrates the use of `@ModelAttribute`, which gets mapped
    to the Model Order defined in the controller class. The setter methods set the
    values to the objects, which minimizes the coding. This showcases a feature in
    spring, which simplifies the coding process.
  prefs: []
  type: TYPE_NORMAL
- en: '**Orders.jsp**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: The `allorders.jsp` file displays the list of orders with an option to edit.
    Use of MongoDB has made displaying the `orderList` simpler.
  prefs: []
  type: TYPE_NORMAL
- en: '**Allorders.jsp**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'The following is a screenshot of the page to add your order:'
  prefs: []
  type: TYPE_NORMAL
- en: '![JSP files](img/7320OS__01_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The following is a screenshot of the page to edit your order:'
  prefs: []
  type: TYPE_NORMAL
- en: '![JSP files](img/7320OS__01_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we learned how to install MongoDB and create a database and
    collections. In MongoDB, we have used the latest version of spring that was available
    during the writing of this chapter. We also learned how to integrate Spring MVC
    with MongoDB. We have built a CRUD operation. We have also seen the usage of annotations
    such as `@Repository`, `@Document`, and `@Controller`. In the next chapter, let
    us see how we can integrate spring message brokers using `jms` templates.
  prefs: []
  type: TYPE_NORMAL
