- en: Docker and Kubernetes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we will be taking a look at Kubernetes. Like Docker Swarm,
    you can use Kubernetes to create and manage clusters that run your container-based
    applications.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following topics will be covered in the chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: An introduction to Kubernetes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Enabling Kubernetes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using Kubernetes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Kubernetes and other Docker tools
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Kubernetes within Docker is only supported by Docker for Mac and Docker for
    Windows desktop clients. Like previous chapters, I will be using my preferred
    operating system, which is macOS. As before, some of the supporting commands,
    which will be few and far between, may only apply to macOS.
  prefs: []
  type: TYPE_NORMAL
- en: 'Check out the following video to see the Code in Action:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://bit.ly/2q6xpwl](http://bit.ly/2q6xpwl)'
  prefs: []
  type: TYPE_NORMAL
- en: An introduction to Kubernetes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If you have been thinking about looking at containers, then you would have come
    across Kubernetes at some point on your travels, so before we enable it within
    our Docker desktop installation, let's take a moment to look at where Kubernetes
    came from.
  prefs: []
  type: TYPE_NORMAL
- en: '**Kubernetes** (which is pronounced **koo-ber-net-eez**) originates from the
    Greek name given to a helmsman or captain of a ship. **Kubernetes** (which is
    also known as **K8s**), an open source project, that originated at Google, allows
    you to automate the deployment, management and scaling of your containerized applications.'
  prefs: []
  type: TYPE_NORMAL
- en: A brief history of containers at Google
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Google has been working on Linux container-based solutions for quite a long
    time. It took its first steps in 2006 by working on the Linux kernel feature called
    **Control Groups** (**cgroups**). This feature was merged into the Linux kernel
    in 2008 within release 2.6.24\. The feature allows you to isolate resources, such
    as CPU, RAM, networking, and disc I/O, or one or more processes. Control Groups
    remains a core requirement for Linux containers and is not only used by Docker
    but also other container tools.
  prefs: []
  type: TYPE_NORMAL
- en: Google next dipped their toe into container waters with a container stack called
    **lmctfy,** which stands for **Let Me Contain That For You**. This was an alternative
    to the **LXC** collection of tools and libraries. It was an open sourced version
    of their own internal tools, which they used to manage containers in their own
    applications.
  prefs: []
  type: TYPE_NORMAL
- en: The next time Google hit the news about their container usage was following
    a talk given by Joe Beda at Gluecon in May 2014\. During the talk, Beda revealed
    that pretty much everything within Google was container based and that they were
    launching around 2 billion containers a week. It was stated that this number did
    not include any long-running containers, meaning that the containers were only
    active for a short amount of time. However, after some quick math, this meant
    that on average Google was launching around 3,000 containers per second!
  prefs: []
  type: TYPE_NORMAL
- en: Later in the talk, Beda mentioned that Google was using a scheduler so they
    didn't have to manually manage 2 billion containers a week or even worry about
    where they were launched and, to a lesser extent, each container's availability.
  prefs: []
  type: TYPE_NORMAL
- en: Google also published a paper called *Large-scale cluster management at Google
    with Borg*. This paper not only let people outside of Google know the name of
    the scheduler they were using, **Borg**, but it also went into great detail about
    the design decisions they made when designing the scheduler.
  prefs: []
  type: TYPE_NORMAL
- en: The paper mentioned that as well as their internal tools, Google was running
    its customer-facing applications, such as Google Docs, Google Mail, and Google
    Search in containers running clusters, which are managed by Borg.
  prefs: []
  type: TYPE_NORMAL
- en: '**Borg** was named after the alien race, the Borg, from the *Star Trek: The
    Next Generation* TV show. In the TV show, the Borg are a race of cybernetic beings
    who''s civilization is based on a hive mind known as the collective. This gives
    them not only the ability to share the same thoughts but also, through a sub-space
    network, ensure that each member of the collective is given guidance and supervision
    from the collective consciousness. I am sure you will agree, the characteristics
    of the Borg race matches that closely of how you would want your cluster of containers
    to run.'
  prefs: []
  type: TYPE_NORMAL
- en: Borg was running within Google for several years and it was eventually replaced
    by a more modern scheduler called **Omega.** It was around this time that Google
    announced it that it would be taking some of the core functionality of Borg and
    reproducing it as a new open source project. This project, known internally as
    **Seven**, was worked on by several of the core contributors to Borg. Its aim
    was to create a friendlier version of Borg which wasn't closely tied into Google's
    own internal procedures and ways of working.
  prefs: []
  type: TYPE_NORMAL
- en: '**Seven**, which was named after the *Star Trek: Voyager* character, Seven
    of Nine, who was a Borg that broke away from the collective, would eventually
    be named **Kubernetes** by the time of its first public commit.'
  prefs: []
  type: TYPE_NORMAL
- en: An overview of Kubernetes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: So, now we now know how Kubernetes came to be, we can dig a little deeper into
    what Kubernetes is. The bulk of the project, 88.5% to be precise, is written in
    **Go**, which should come as no surprise as Go is a programming language that
    was developed internally at Google before it was open sourced in 2011\. The rest
    of the project files are made up of Python and Shell helper scripts and HTML documentation.
  prefs: []
  type: TYPE_NORMAL
- en: A typical Kubernetes cluster is made up of servers that take on either a master
    or node role. You can also run a standalone installation that takes on both roles.
  prefs: []
  type: TYPE_NORMAL
- en: The master role is where the magic happens and it is the brains of the cluster.
    It is responsible for making decisions on where pods are launched and for monitoring
    the health of both the cluster itself and also the pods running within the cluster.
    We will discuss pods once we have finished looking at the two roles.
  prefs: []
  type: TYPE_NORMAL
- en: 'Typically, the core components that are deployed to a host that has been given
    the role of a master are:'
  prefs: []
  type: TYPE_NORMAL
- en: '`kube-apiserver`: This component exposes the main Kubernetes API. It is designed
    to horizontally scale, which means that you can keep adding more instances of
    it to make your cluster highly available.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`etcd`: This is a highly available consistent key-value store. It is used to
    store the state of the cluster.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`kube-scheduler`: This component is responsible for making the decisions on
    where pods are launched.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`kube-controller-manager`**:** This component runs controllers. These controllers
    have several functions within Kubernetes, such as monitoring the nodes, keeping
    an eye on the replication, managing the endpoints, and generating service accounts
    and tokens.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`cloud-controller-manager`: This component takes on the management of the various
    controllers, which interact with third-party clouds to launch and configure supporting
    services.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Now that we have our management components covered, we need to discuss what
    they are managing. A node is made up of the following components:'
  prefs: []
  type: TYPE_NORMAL
- en: '`kubelet`: This agent runs on each node within the cluster and it is the means
    by which the managers interact with the nodes. It is also responsible for managing
    the pods.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`kube-proxy`: This component manages all of the routing of requests and traffic
    for both the node and also the pods.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`container runtime`: This could be Docker RKT or any other OCI-compliant runtime.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You may have noticed that I have not mentioned containers much so far. This
    is because Kubernetes doesn't actually directly interact with your containers;
    instead, it communicates with a pod. Think of a pod as a complete application;
    a little like when we looked at launching an application made up of multiple containers
    using Docker Compose.
  prefs: []
  type: TYPE_NORMAL
- en: Kubernetes and Docker
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Kubernetes was originally seen as a competitive technology to Docker Swarm,
    Docker's own clustering technology. However, over the last few years, Kubernetes
    has emerged as pretty much the de facto standard for container orchestration.
  prefs: []
  type: TYPE_NORMAL
- en: 'All of the major cloud providers provide Kubernetes-as-a-Service. We have the
    following:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Google Cloud: **Google Kubernetes Engine** (**GKE**)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Microsoft Azure: **Azure Kubernetes Service** (**AKS**)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Amazon Web Services: Amazon **Elastic Container Service for Kubernetes** (**EKS**)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'IBM: IBM Cloud Kubernetes Service'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Oracle Cloud: Oracle Container Engine for Kubernetes'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'DigitalOcean: Kubernetes on DigitalOcean'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: On the face of it, all of the major players supporting Kubernetes may not seem
    like that big a deal. However, consider that we now know a consistent way of deploying
    our containerized applications across multiple platforms. Traditionally, these
    platforms have been walled gardens and have very different ways of interacting
    with them.
  prefs: []
  type: TYPE_NORMAL
- en: While Docker's announcement in October 2017 at DockerCon Europe initially came
    as a surprise, once the dust settled the announcement made perfect sense. Providing
    developers with an environment where they could work on their applications locally
    using Docker for Mac and Docker for Windows, and then using Docker Enterprise
    Edition to deploy and manage their own Kubernetes clusters, or even use one of
    the cloud services mentioned previously, fits in with the trying to solve the
    "works on my machine" problem we discussed in [Chapter 1](db23d482-1df4-41c2-af33-d38a98fc5a1c.xhtml)*, Docker
    Overview*.
  prefs: []
  type: TYPE_NORMAL
- en: Let's now take a look at how you can enable support in the Docker software and
    get stuck in with using it.
  prefs: []
  type: TYPE_NORMAL
- en: Enabling Kubernetes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Docker has made the installation process extremely simple. All you need to
    do to enable Kubernetes support is open Preferences and click on the Kubernetes
    tab:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/f8afeef8-84b7-4a46-9736-c66e4c55fad1.png)'
  prefs: []
  type: TYPE_IMG
- en: 'As you can see, there are two main options. Tick the **Enable Kubernetes**
    box and then select **Kubernetes** as the default orchestrator. Leave **Show systems
    containers** unticked for now; we look at this in a little more detail once we
    have enabled the service. Clicking **Apply** will pop up the following message:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/05f430c4-01bf-4762-b57b-73baa62a256c.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Hitting the **Install** button will download the required containers needed
    to enable Kubernetes support on your Docker installation:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/da563414-8ffb-4c6c-80a8-b6ddd796ef84.png)'
  prefs: []
  type: TYPE_IMG
- en: 'As mentioned in the first dialogue box, it will take a short while for Docker
    to download, configure, and launch the cluster. Once complete, you should see
    a green dot next to Kubernetes is running:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/50d81853-7da1-42ac-bbb2-bff9d816bda9.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Open a Terminal and run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'This should show you that there is nothing out of the ordinary running. Run
    the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'This should show you a list of Kubernetes-related images:'
  prefs: []
  type: TYPE_NORMAL
- en: '`docker/kube-compose-controller`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`docker/kube-compose-api-server`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`k8s.gcr.io/kube-proxy-amd64`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`k8s.gcr.io/kube-scheduler-amd64`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`k8s.gcr.io/kube-apiserver-amd64`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`k8s.gcr.io/kube-controller-manager-amd64`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`k8s.gcr.io/etcd-amd64`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`k8s.gcr.io/k8s-dns-dnsmasq-nanny-amd64`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`k8s.gcr.io/k8s-dns-sidecar-amd64`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`k8s.gcr.io/k8s-dns-kube-dns-amd64`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`k8s.gcr.io/pause-amd64`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The images are sourced from both Docker and also the official Kubernetes images
    that are available from the Google Container Registry (`k8s.gcr.io`).
  prefs: []
  type: TYPE_NORMAL
- en: 'As you may have already guessed, ticking the **Show system containers (advanced)** box
    and then running the following command will show you a list of all of the containers
    running that enable the Kubernetes service on your local Docker installation:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'As there is a lot of output when running the preceding command, the following
    screenshot shows just the names of the containers. To do this, I ran the following
    :'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Running the command gave me the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/1e714f65-62af-41da-8cca-59d3b6cea891.png)'
  prefs: []
  type: TYPE_IMG
- en: There are 18 running containers, which is why you have the option of hiding
    them. As you can see, nearly all of the components we discussed in the previous
    section are covered as well as a few additional components, which provide the
    integration with Docker. I would recommend unticking the **Show system containers
    box**, as we do not need to see a list of 18 containers running each time we look
    at the running containers.
  prefs: []
  type: TYPE_NORMAL
- en: 'The other thing to note at this point is that the Kubernetes menu item now
    has content in it. This menu can be used for switching between Kubernetes clusters.
    As we only have one cluster active at the moment, there is only one listed:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/ebc6ad44-b922-4b56-9512-072df178d34c.png)'
  prefs: []
  type: TYPE_IMG
- en: Now that we have our local Kubernetes cluster up and running, we can start to
    use it.
  prefs: []
  type: TYPE_NORMAL
- en: Using Kubernetes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that we have our Kubernetes cluster up and running on our Docker desktop
    installation, we can start to interact with it. To start with, we are going to
    look at the command line that was installed alongside the Docker desktop component, `kubectl`.
  prefs: []
  type: TYPE_NORMAL
- en: 'As mentioned, `kubectl` was installed alongside. The following command will
    show some information about the client and also the cluster it is connected to:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '![](Images/5005937f-00f6-4be5-a2a8-06ddbfdb23d1.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Next, we can run the following to see if `kubectl` can see our node:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '![](Images/05607ef3-a64a-4c33-96bf-8ead71987a7b.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now that we have our client interacting with our node, we can view the `namespaces`
    that are configured by default within Kubernetes by running the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Then we can view the `pods` within a namespace with the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: '![](Images/f5f27507-e03d-458a-aca5-341fdda41a14.png)'
  prefs: []
  type: TYPE_IMG
- en: Namespaces within Kubernetes are a great way of isolating resources within your
    cluster. As you can see from the Terminal output, there are four namespaces within
    our cluster. There is the `default` namespace, which is typically empty. There
    are two namespaces for the main Kubernetes services: `docker` and `kube-system`.
    These contain the pods that make up our cluster and the final namespace, `kube-public`,
    like the default namespace, is empty.
  prefs: []
  type: TYPE_NORMAL
- en: 'Before we launch our own pod, let''s take a quick look at how we can interact
    with the pods we have running, starting with how we can find more information
    about our pod:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: The preceding command will print out details of the `kube-scheduler-docker-for-desktop`
    pod. You might notice that we had to pass the namespace using the `--namespace`
    flag. If we didn't, then `kubectl` would default to the default namespace where
    there isn't a pod called `kube-scheduler-docker-for-desktop` running.
  prefs: []
  type: TYPE_NORMAL
- en: 'The full output of the command is shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: As you can see, there is a lot of information about the pod, including a list
    of containers; we only have one called `kube-scheduler`. We can see the container
    ID, the image used, the flags the container was launched with, and also the data
    used by the Kubernetes scheduler to launch and maintain the pod.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now that we know a container name, we can start to interact with it. For example,
    running the following command will print the logs for our one container:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: '![](Images/f153d87e-fd6b-40e0-a0c2-bd142037ee33.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Running the following command would fetch the `logs` for each container in
    the pod:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Like Docker, you can also execute commands on your pods and containers. For
    example, the following commands will run the `uname -a` command:'
  prefs: []
  type: TYPE_NORMAL
- en: Please ensure you add the space after the `--` in the following two commands.
    Failing to do so will result in errors.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Again, we have the option of running the command on a named container or across
    all containers within the pod:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/8ea74f60-7de1-418a-8bcb-7499fa8c9d1b.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Let''s find out a little more about our Kubernetes cluster by installing and
    logging into the web-based dashboard. While this does not ship with Docker by
    default, installing it using the definition file provided by the Kubernetes project
    is simple. We just need to run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: '![](Images/20527938-448d-441a-bee4-90a1f5db0896.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Once the services and deployments have been created, it will take a few minutes
    to launch. You can check on the status by running the following commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'Once your output looks like the following, your dashboard should be installed
    and ready:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/1f52f317-e1e9-4018-ac30-f73aa6933cfa.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now that we have our dashboard running, we will find a way to access it. We
    can do this using the inbuilt proxy service in `kubectl`. Just run the following
    command to start it up:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: '![](Images/315bb32e-3b82-4a00-b8af-91af2501ccd3.png)'
  prefs: []
  type: TYPE_IMG
- en: 'This will start the proxy and opening your browser and going to `http://127.0.0.1:8001/version/`
    will show you some information on your cluster:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/6750c373-4a9e-4a2f-a7e0-b391af94acba.png)'
  prefs: []
  type: TYPE_IMG
- en: However, it's the dashboard we want to see. This can be accessed at `http://localhost:8001/api/v1/namespaces/kube-system/services/https:kubernetes-dashboard:/proxy/`.
  prefs: []
  type: TYPE_NORMAL
- en: 'You will be greeted with a login screen when you first open the URL in your
    browser. As we are accessing the dashboard through the proxy, we can just press
    the **SKIP** button:'
  prefs: []
  type: TYPE_NORMAL
- en: '**![](Images/ddd8e4aa-30aa-4377-a812-693beee5b196.png)**'
  prefs: []
  type: TYPE_NORMAL
- en: 'Once logged in, you will be able to see quite a bit of information on your
    cluster:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/5f146b4a-3f88-4d8f-9c2b-eec242281cbe.png)'
  prefs: []
  type: TYPE_IMG
- en: Now that we have our cluster up and running, we can now look at launching a
    few sample applications.
  prefs: []
  type: TYPE_NORMAL
- en: Kubernetes and other Docker tools
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'When we enabled Kubernetes, we selected Kubernetes as the default orchestrator
    for Docker stack commands. In the previous chapter, the Docker `stack` command
    would launch our Docker Compose files in Docker Swarm. The Docker Compose we used
    looked like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'Before we launch the application on Kubernetes, we need to make a slight adjustment
    and remove the placement, which leaves our file looking like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'Once the file has been edited, running the following command will launch the
    `stack`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: '![](Images/1a9cfbdc-f787-4737-b52f-c5197eec5a00.png)'
  prefs: []
  type: TYPE_IMG
- en: 'As you can see, Docker waits until the stack is available before returning
    you to your prompt. We can also run the same commands we used to view some information
    about our stack as we did when we launched our stack on Docker Swarm:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: '![](Images/db628bed-b212-4e3a-9ab8-a28cd4264f59.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We can also see details using `kubectl`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: '![](Images/73e1ed2f-01d7-4cb2-82d3-ce93d24c7126.png)'
  prefs: []
  type: TYPE_IMG
- en: You may have noticed that this time we did not need to provide a namespace.
    This is because our stack was launched in the default namespace. Also, when the
    services were listed, a ClusterIP and LoadBalancer are listed for the cluster
    stack. Looking at the LoadBalancer, you can see that the external IP is `localhost`
    and that the port is `80`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Opening [http://localhost/](http://localhost/) in our browser shows the application:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/875e57d6-b43c-453c-b980-bdaed5ad4397.png)'
  prefs: []
  type: TYPE_IMG
- en: 'If you still have the dashboard open, you can explore your stack and even open
    a Terminal to one of the containers:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/8536ae3e-d84c-4df9-b481-2823300abb52.png)'
  prefs: []
  type: TYPE_IMG
- en: 'You can remove the `stack` by running the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: One last thing—you may be thinking to yourself, great, I can run my Docker Compose
    files anywhere on a Kubernetes cluster. Well, that is not strictly true. As mentioned,
    when we first enabled Kubernetes, there are some Docker only components launched.
    These are there to make sure that Docker is integrated as tightly as possible.
    However, as these components won't exist in non-Docker managed clusters, then
    you won't be back to use the `docker stack` commands.
  prefs: []
  type: TYPE_NORMAL
- en: All is not lost though. There is a tool called **Kompose** provided as part
    of the Kubernetes project, which can take a Docker Compose file and convert it
    on the fly to Kubernetes definition files.
  prefs: []
  type: TYPE_NORMAL
- en: 'To install Kompose on macOS, run the following commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'Windows 10 users can use Chocolatey to install the binary:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Chocolatey** is a command-line based package manager that can be used to
    install various software packages on your Windows-based machine, similar to how
    you can use `yum` or `apt-get` on Linux machines or `brew` on macOS.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, Linux users can run the following commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'Once installed, you can launch your Docker Compose file by running the following
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'You will get something like the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/90c65ca1-44e3-419b-9896-98dc7f5d225f.png)'
  prefs: []
  type: TYPE_IMG
- en: 'As suggested by the output, running the following command will give you details
    on the service and pod we just launched:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: '![](Images/7dc83cb6-26c1-4e87-a584-802608ede4c7.png)'
  prefs: []
  type: TYPE_IMG
- en: 'You can remove the services and pods by running the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: '![](Images/d3076f4e-b5ad-4eda-8243-150499252542.png)'
  prefs: []
  type: TYPE_IMG
- en: 'While you can use `kompose up` and `kompose down`, I would recommend generating
    the Kubernetes definition files and tweaking them as needed. To do this simply
    run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'This will generate the pod and service files:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/1a7d963d-ee6f-40e4-935b-f52c9a15467f.png)'
  prefs: []
  type: TYPE_IMG
- en: 'You will be able to see quite a difference between the Docker Compose file
    and the two files generated. The `cluster-pod.yaml` file looks like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'The `cluster-service.yaml` file looks like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'You can then launch these files by running the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: '![](Images/4909293e-096a-4729-9f2c-2af7c39e8d52.png)'
  prefs: []
  type: TYPE_IMG
- en: 'To remove the cluster pod and service, we just need to run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: While Kubernetes will be popping up in upcoming chapters, you may want to disable
    the Kubernetes integration within your Docker desktop installation as it does
    add a slight overhead when it is idle. To do this, just untick **Enable Kubernetes**.
    When you click **Apply**, Docker will stop all the containers it needed for running
    Kubernetes; it won't, however, remove the images so that when you re-enable it,
    it doesn't take as long.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we looked at Kubernetes from the point of view of Docker desktop
    software. There is a lot more to Kubernetes than we have covered in this chapter,
    so please don't think this is all there is. After discussing the origins of Kubernetes,
    we looked at how you can enable it on your local machine using Docker for Mac
    or Docker for Windows.
  prefs: []
  type: TYPE_NORMAL
- en: We then discussed some basic usage of `kubectl` before looking at running how
    we can use `docker stack` commands to launch our applications as we did for Docker
    Swarm.
  prefs: []
  type: TYPE_NORMAL
- en: At the end of the chapter, we discussed Kompose, which is a tool under the Kubernetes
    project. It helps you convert your Docker Compose files for use with Kubernetes,
    allowing you to get a head start on moving your applications to pure Kubernetes.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we are going to take a look at Docker on public clouds,
    such as Amazon Web Services, along with briefly revisiting Kubernetes.
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'True or false: When **Show system containers (advanced)** is unticked, you
    cannot see the images used to launch Kubernetes.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Which of the four namespaces hosts the containers used to run Kubernetes and
    enable support within Docker?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Which command would you run to find out details about a container running in
    a pod?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Which command would you use to launch a Kubernetes definition YAML file?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Typically, which port does the command `kubectl` proxy open on your local machine?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What was the original name of Google container orchestration platform?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Some of the Google tools, presentations, and white papers mentioned at the
    start of the chapter can be found at:'
  prefs: []
  type: TYPE_NORMAL
- en: cgroups: [http://man7.org/linux/man-pages/man7/cgroups.7.html](http://man7.org/linux/man-pages/man7/cgroups.7.html)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: lmctfy:[ https://github.com/google/lmctfy/](https://github.com/google/lmctfy/)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Containers at Scale, Joe Beda's slides from GluCon: [https://pdfs.semanticscholar.org/presentation/4df0/b2bcd39b7757867b1ead3009a628e07d8b57.pdf](https://pdfs.semanticscholar.org/presentation/4df0/b2bcd39b7757867b1ead3009a628e07d8b57.pdf)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Large-scale cluster management at Google with Borg: [https://ai.google/research/pubs/pub43438](https://ai.google/research/pubs/pub43438)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: LXC - [https://linuxcontainers.org/](https://linuxcontainers.org/)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'You can find details on the cloud services mentioned in the chapter at:'
  prefs: []
  type: TYPE_NORMAL
- en: Google Kubernetes Engine (GKE): [https://cloud.google.com/kubernetes-engine/](https://cloud.google.com/kubernetes-engine/)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Azure Kubernetes Service (AKS): [https://azure.microsoft.com/en-gb/services/kubernetes-service/](https://azure.microsoft.com/en-gb/services/kubernetes-service/)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Amazon Elastic Container Service for Kubernetes (Amazon EKS): [https://aws.amazon.com/eks/](https://aws.amazon.com/eks/)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: IBM Cloud Kubernetes Service: [https://www.ibm.com/cloud/container-service](https://www.ibm.com/cloud/container-service)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Oracle Container Engine for Kubernetes: [https://cloud.oracle.com/containers/kubernetes-engine](https://cloud.oracle.com/containers/kubernetes-engine)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Kubernetes on DigitalOcean: [https://www.digitalocean.com/products/kubernetes/](https://www.digitalocean.com/products/kubernetes/)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'You can find Docker''s announcements about Kubernetes support at:'
  prefs: []
  type: TYPE_NORMAL
- en: Kubernetes for Docker Enterprise announcement: [https://blog.docker.com/2017/10/docker-enterprise-edition-kubernetes/](https://blog.docker.com/2017/10/docker-enterprise-edition-kubernetes/)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Kubernetes makes the stable release:[ https://blog.docker.com/2018/07/kubernetes-is-now-available-in-docker-desktop-stable-channel/](https://blog.docker.com/2018/07/kubernetes-is-now-available-in-docker-desktop-stable-channel/)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Finally, the home page for Kompose can be found at:'
  prefs: []
  type: TYPE_NORMAL
- en: Kompose - [http://kompose.io/](http://kompose.io/)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
