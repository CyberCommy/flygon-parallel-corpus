- en: Testing and Debugging
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, the following recipes will be covered:'
  prefs: []
  type: TYPE_NORMAL
- en: Testing our first component with Jest and Enzyme
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Testing a Redux Container, Actions, and Reducers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Debugging a React application using React and Redux Dev Tools
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Simulating events
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Testing and debugging are very important for any project that wants to have
    high quality. Unfortunately, many developers do not care about testing (unit tests)
    because they think that will reduce the speed of the development and some of them
    leave it until the end of the project. In my personal experience, I can say that
    testing from the beginning of the project will save you time because, at the end,
    you will have fewer bugs to fix. React uses Jest to test its components, containers,
    actions, and reducers.
  prefs: []
  type: TYPE_NORMAL
- en: In the following recipes, we are also going to learn how to debug our React/Redux
    application.
  prefs: []
  type: TYPE_NORMAL
- en: Testing our first component with Jest and Enzyme
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we are going to learn how to install and configure Jest in our
    project.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this recipe, we need to install a few packages to test our React application:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'After we''ve installed Jest, we need to configure it:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the `tests` scripts and the Jest configuration into our `package.json`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'File: package.json'
  prefs: []
  type: TYPE_NORMAL
- en: 'As you can see in our Jest configuration, we need to add the `setupTestFramework.js` file
    where we''ll configure our enzyme to use it with Jest:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'File: config/jest/setupTestFramework.js'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the `setupFiles` node, we can specify our `browserMocks.js` file, which
    is where we can mock any browser method we use in our App. For example, if you
    want to test `localStorage` in your app, this file is the proper place to mock
    it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'File: config/jest/browserMocks.js'
  prefs: []
  type: TYPE_NORMAL
- en: If you are using Sass, Stylus, or Less in your components, you need to specify
    the `moduleNameMapper` mode with a regex to match all the `.scss` files (or `.styl`/`.less`)
    in your project and handle those files with `identity-obj-proxy`, which is a package
    that mocks Webpack imports, such as CSS modules.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'You may have noticed we added two new NPM scripts: one for test our app and
    the other to get the coverage (percentage of covered unit tests). For those, we
    are using a particular script, which is at `scripts/test.js`, let''s create that
    file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'File: scripts/test.js'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s imagine we have this `Home` component:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'File: src/client/home/index.jsx'
  prefs: []
  type: TYPE_NORMAL
- en: 'If you want to test this component, you need to create a file with the same
    name but add the `.test` suffix in the file. In this case, our test file will
    be named `index.test.jsx`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'File: src/client/home/index.test.jsx'
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'If you want to test your application, you need to run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'If your test is correct, you should see this result:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/06f4d070-eb65-4f5e-8c03-3ce0c38da895.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The `PASS` label means that all of your tests in that file passed successfully;
    if you failed at least one test, you would see the `FAIL` label. Let''s modify
    our `"should has .Home class` test. I''m going to change the value to `"Home2"`
    to force the fail:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/fafaa5db-75bc-4f49-a392-b8d84e029ed7.png)'
  prefs: []
  type: TYPE_IMG
- en: As you can see, now we got the `FAIL` label and specified with an X the failed
    test. Also, the `Expected` and `Received` values provide useful information, with
    these, we can see which value is expected and which value is being received.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now if you want to see the coverage percentage of all your unit tests, you
    can use the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Right now we only have 1 unit test for our `Home` component as you can see
    is in color green and at 100%, all the other files are in red with 0% because
    those have not been tested yet:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/4e139a3d-06f8-4f18-b59d-74853a9fe635.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Also, the coverage command generates an HTML version of the result. There is
    a directory called `"coverage"` and inside other called `"Icov-report"`. If you
    open `index.html` in your browser, you will see something like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/c4d20b1a-8bc7-4bcd-acd3-a656736525f8.png)'
  prefs: []
  type: TYPE_IMG
- en: Testing a Redux Container, Actions, and Reducers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we are going to test a Redux Container, Actions, and Reducers.
    For this example, we will test the Todo list that we created in [Chapter 11](884074f8-0a8a-4e3f-b9dc-b817e0f3f7c3.xhtml)*,
    Implementing Server-Side Rendering.*
  prefs: []
  type: TYPE_NORMAL
- en: Remember always that we use an existing recipe you must run npm install command
    first to restore all the project dependencies otherwise, you will get dependency
    errors.
  prefs: []
  type: TYPE_NORMAL
- en: Getting Ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We need to install the `redux-mock-store`, `moxios`, and `redux-thunk` packages
    to test our Redux containers. You will need to run `npm install` first to install
    all the dependencies:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s test our Redux containers:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Redux containers should not have any JSX code; the best practice is to have `mapStateToProps`
    and `mapDispatchToProps` in our `connect` method passing another component (such
    as a `Layout` component) in the export, for example, let''s see our Todo List
    Container:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'File: src/client/todo/container/index.js'
  prefs: []
  type: TYPE_NORMAL
- en: 'You might be wondering what exactly we need to test in here. Well, the most
    important things we need to test in a container are the action dispatch (the `fetchTodo`
    action) and get our `todo` state from Redux with data. That being said, this is
    our container unit test file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'File: src/client/todo/container/index.test.js'
  prefs: []
  type: TYPE_NORMAL
- en: 'Test the `fetchTodo` action. This is the code for our action file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'File: src/client/todo/actions/index.js'
  prefs: []
  type: TYPE_NORMAL
- en: 'This is our `actionTypes.js` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'File: src/client/todo/actions/actionTypes.js'
  prefs: []
  type: TYPE_NORMAL
- en: 'To test an async Redux Action, we need to use `redux-thunk` and `moxios` to
    test an action that is using `axios` to retrieve data from the server. Our test
    file should look like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'File: src/client/todo/actions/index.test.js'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s test our reducer. This is the Todo reducer file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'File: src/client/todo/reducer/index.js'
  prefs: []
  type: TYPE_NORMAL
- en: 'We need to test two things in our reducer: the initial state and the state
    when the `FETCH_TODO` action is a success:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'File: src/client/todo/reducer/index.test.js'
  prefs: []
  type: TYPE_NORMAL
- en: Debugging a React application using React and Redux Dev Tools
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Debugging is essential for any application, it helps us to identify and fix
    bugs. Chrome has two powerful tools to debug React/Redux applications integrating
    those to its Developer Tools. React Dev Tool and Redux Dev Tool.
  prefs: []
  type: TYPE_NORMAL
- en: Getting Ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Using Google Chrome, you have to install both extensions:'
  prefs: []
  type: TYPE_NORMAL
- en: '**React Developer Tools**: [https://chrome.google.com/webstore/detail/react-developer-tools/fmkadmapgofadopljbjfkapdkoienihi](https://chrome.google.com/webstore/detail/react-developer-tools/fmkadmapgofadopljbjfkapdkoienihi)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Redux DevTools**: [https://chrome.google.com/webstore/detail/redux-devtools/lmhkpmbekcpmknklioeibfkpmmfibljd?hl=es](https://chrome.google.com/webstore/detail/redux-devtools/lmhkpmbekcpmknklioeibfkpmmfibljd?hl=es)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Also, you need to install the `redux-devtools-extension` package:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: Once you've installed React Developer Tools and Redux DevTools, you need to
    configure them.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you try to use Redux DevTools directly, it won''t work; this is because
    we need to pass the `composeWithDevTools` method into our Redux store, this should
    be our `configureStore.js` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: File: src/shared/redux/configureStore.js
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s debug our application:'
  prefs: []
  type: TYPE_NORMAL
- en: 'If you want to debug your React application, open your application with Google
    Chrome (`http://localhost:3000/todo`), open your Google Dev Tools (Right click
    > Inspect), select the React tab, and you will see your React components:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/6ad319a8-580f-42d5-8dd8-3b8878e0af58.png)'
  prefs: []
  type: TYPE_IMG
- en: 'You can select the component you want to debug, and one of the coolest things
    is that you can see the props of your component in the right side:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/7ea082be-ef33-48bc-9b64-0dda7be0e9a6.png)'
  prefs: []
  type: TYPE_IMG
- en: 'If you want to debug Redux in your application and see which actions are being
    dispatched, you need to select the Redux tab in your Chrome Dev Tools:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/32c8b4c0-9815-4fd0-8a83-50fda8bef7df.png)'
  prefs: []
  type: TYPE_IMG
- en: We are dispatching two actions in our Todo application: `FETCH_TODO_REQUEST`
    and `FETCH_TODO_SUCCESS`. The `@@INIT` action is being dispatched by default in
    Redux, and this happens in any application.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'If you select the `FETCH_TODO_REQUEST` action, you will see that on the Diff
    tab it says, "(states are equal)". That means there were no changes within that
    action, but you have four tabs: Action, State, Diff, and Test.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'If you select the Action tab, you can see that specific action:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/63d061e4-e5f4-40dc-8884-014baa38dfe7.png)'
  prefs: []
  type: TYPE_IMG
- en: 'If you select `FETCH_TODO_SUCCESS`, you will see the data for the todo reducer:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/eb869384-482d-4f3a-be4f-6e607f09a13e.png)'
  prefs: []
  type: TYPE_IMG
- en: Simulating Events
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we are going to learn how to simulate the `onClick` and `onChange`
    events on a simple Calculator component.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We will re-use the code of the last recipe (`Repository: Chapter12/Recipe3/debugging`):'
  prefs: []
  type: TYPE_NORMAL
- en: 'We will create a simple `Calculator` component to sum two values (input) and
    then we will get the result when the user clicks on the equals (`=`) button:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'File: src/client/calculator/index.jsx'
  prefs: []
  type: TYPE_NORMAL
- en: 'If you want to see this component in your browser (it was created for testing
    purpose), you need to include it in your routes file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'File: src/shared/routes/index.jsx'
  prefs: []
  type: TYPE_NORMAL
- en: 'If you want to see some basic styles, we can use these:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'File: src/client/calculator/Calculator.scss'
  prefs: []
  type: TYPE_NORMAL
- en: 'In our test file, we need to simulate the `onChange` event to change the values
    of our input and then simulate the click on the equals (`=`) button:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'If you want to see the component in your browser, run the application using
    `npm start`, and you will see something like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/9886aeca-21eb-4807-9527-61e5538643b6.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now let''s test our calculator by using the `npm test` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/3c81c289-7a97-4cc0-9ffd-3e02d50c3e04.png)'
  prefs: []
  type: TYPE_IMG
