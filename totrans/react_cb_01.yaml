- en: Working with React
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, the following recipes will be covered:'
  prefs: []
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Working with the latest JS features in React
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What's new in React?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using React on Windows
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: React is a JavaScript library (MIT License) made by Facebook to create interactive
    UIs. It's used to create dynamic and reusable components. The most powerful thing
    about React is that can be used in the client, server, mobile applications, and
    even VR applications.
  prefs: []
  type: TYPE_NORMAL
- en: In the modern web, we need to manipulate the DOM constantly; the problem is
    that doing this a lot may affect the performance of our application seriously.
    React uses a Virtual DOM, which means that all updates occur in memory (this is
    faster than manipulating the real DOM directly). The learning curve of React is
    short in comparison with other JavaScript frameworks such as Angular, Vue, or
    Backbone, mainly because the React code is mostly written with modern JavaScript
    (classes, arrow functions, string templates, and so on) and does not have too
    many patterns used to write code, like Dependency Injection, or a template system,
    like in Angular.
  prefs: []
  type: TYPE_NORMAL
- en: Companies such as Airbnb, Microsoft, Netflix, Disney, Dropbox, Twitter, PayPal,
    Salesforce, Tesla, and Uber are extensively using React in their projects. In
    this book, you will learn how to develop your React applications in the way they
    do, using best practices.
  prefs: []
  type: TYPE_NORMAL
- en: Working with the latest JS features in React
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As I said in the introduction, React is mainly written with modern JavaScript
    (ES6, ES7, and ES8). If you want to take advantage of React, there are some modern
    JS features that you should master to get the best results for your React applications.
    In this first recipe, we are going to cover the essential JS features so you are
    ready and can start working on your first React application.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this section, we will see how to use the most important JS features in React:'
  prefs: []
  type: TYPE_NORMAL
- en: '`let` and `const`: The new way to declare variables in JavaScript is by using
    `let` or `const`. You can use `let` to declare variables that can change their
    value but in block scope. The difference between `let` and `var` is that `let`
    is a block scoped variable that cannot be global, and with `var`, you can declare
    a global variable, for example:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'The best way to understand "block scope" is by declaring a `for` loop with
    `var` and `let`. First, let''s use `var` and see its behavior:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'If we write the same code, but with `let`, this will happen:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'With `const`, we can declare constants, which means the value can''t be changed
    (except for arrays and objects):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'If we declare an array with `const`, we can manipulate the array elements (add,
    remove, or modify elements):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Also, using objects, we can add, remove, or modify the nodes:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '**Spread operator**:The spread operator (...) splits an iterable object into
    individual values. In React, it can be used to push values into another array,
    for example when we want to add a new item to a Todo list by utilizing `setState`
    (this will be explained in the next chapter):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Also, the Spread operator can be used in React to spread attributes (props)
    in JSX:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: '**Rest parameter:** The `rest` parameter is also represented by `...`. The
    last parameter in a function prefixed with `...` is called the rest parameter.
    The rest parameter is an array that will contain the rest of the parameters of
    a function when the number of arguments exceeds the number of named parameters:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: '**Destructuring**: The destructuring assignment feature is the most used in
    React. It is an expression that allows us to assign the values or properties of
    an iterable object to variables. Generally, with this we can convert our component
    props into variables (or constants):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: '**Arrow functions**: ES6 provides a new way to create functions using the `=>`
    operator. These functions are called arrow functions. This new method has a shorter
    syntax, and the arrow functions are anonymous functions. In React, arrow functions
    are used as a way to bind the `this` object in our methods instead of binding
    it in the constructor:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: '**Template literals**: The template literal is a new way to create a string
    using backticks (` `) instead of single quotes ('' '')   or double quotes (" ").
    React use template literals to concatenate class names or to render a string using
    a ternary operator:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: '**M****ap**: The `map()` method returns a new array with the results of calling
    a provided function on each element in the calling array. Map use is widespread
    in React, and is mainly used to render multiple elements inside a React component;
    for example, it can be used to render a list of tasks:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: '**Object.assign()**: The `Object.assign()` method is used to copy the values
    of all enumerable own properties from one or more source objects to a target object.
    It will return the target object. This method is used mainly with Redux to create
    immutable objects and return a new state to the reducers (Redux will be covered
    in [Chapter 5](dafa4ab9-3353-4faf-8af0-f3739c6d5e78.xhtml), *Mastering Redux*):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: '**Classes**: JavaScript classes, introduced in ES6, are mainly a new syntax
    for the existing prototype-based inheritance. Classes are functions and are not
    hoisted. React uses classes to create class *Components*:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: '**Static methods**: Static methods are not called on instances of the class.
    Instead, they''re called on the class itself. These are often utility functions,
    such as functions to create or clone objects. In React, they can be used to define
    the `PropTypes` in a component:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: '**Promises**:The `Promise` object represents the eventual completion (or failure)
    of an asynchronous operation and its resulting value. We will use promises in
    React to handle requests by using axios or fetch; also, we are going to use Promises
    to implement the server-side rendering (this will be covered in [Chapter 11](884074f8-0a8a-4e3f-b9dc-b817e0f3f7c3.xhtml)*,
    Implementing Server-Side Rendering*).'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**async/await**: The async function declaration defines an asynchronous function,
    which returns an `AsyncFunction` object. This also can be used to perform a server
    request, for example using axios:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: What's new in React?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This paragraph was written on August 14, 2018, and the latest version of React
    was 16.4.2\. The React 16 version has a new core architecture named Fiber.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we will see the most important updates in this version that
    you should be aware of to get the most out of React.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s see the new updates:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Components can now return arrays and strings from render**: Before, React
    forced you to return an element wrapped with a <div> or any other tag; now it
    is possible to return an array or string directly:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'Also, React now has a new feature called **Fragment**, which also works as
    a special wrapper for elements. It can be specified with empty tags (`<></>`)
    or directly using `React.Fragment`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: '**Error boundaries** with from the official website:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A JavaScript error in a part of the UI shouldn’t break the whole app. To solve
    this problem for React users, React 16 introduces a new concept of an "error boundary". Error
    boundaries are React components that catch JavaScript errors anywhere in their
    child component tree, log those errors, and display a fallback UI instead of the
    component tree that crashed. Error boundaries catch errors during rendering, in
    lifecycle methods, and in constructors of the whole tree below them. A class component
    becomes an error boundary if it defines a new lifecycle method called componentDidCatch(error,
    info).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: '**Better server-side rendering** with from the official site:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '*React 16 includes a completely rewritten server renderer. It''s really fast.
    It supports streaming, so you can start sending bytes to the client faster. And
    thanks to a new packaging strategy that compiles away process.env checks (Believe
    it or not, reading process.env in Node is really slow!), you no longer need to
    bundle React to get good server-rendering performance.*'
  prefs: []
  type: TYPE_NORMAL
- en: '****Reduced file size**** with from the official site:**** "****Despite all
    these additions, React 16 is actually smaller compared to 15.6.1.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: react is 5.3 kb (2.2 kb gzipped), down from 20.7 kb (6.9 kb gzipped)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: react-dom is 103.7 kb (32.6 kb gzipped), down from 141 kb (42.9 kb gzipped)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: react + react-dom is 109 kb (34.8 kb gzipped), down from 161.7 kb (49.8 kb gzipped)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: That amounts to a combined 32% size decrease compared to the previous version
    (30% post-gzip)."
  prefs: []
  type: TYPE_NORMAL
- en: 'If you want to check the latest updates on React, you can visit the official
    React blog: [https://reactjs.org/blog](https://reactjs.org/blog).'
  prefs: []
  type: TYPE_NORMAL
- en: Using React on Windows
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: I'm not a big fan of Windows for development since it's kind of problematic
    to configure sometimes. I will always prefer Linux or Mac, but I'm aware that
    a lot of people who are reading this book will use Windows. In this recipe, I'll
    show you the most common problems you may have when you try to follow the recipes
    in this book using Windows.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We''ll now see the most common problems using Windows for development:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Terminal**: The first problem you will face is to use the Windows terminal
    (CMD) because it does not support Unix commands (like Linux or Mac). The solution
    is to install a Unix Terminal; the most highly recommended is to use the **Git
    Bash** Terminal, which is included with **Git** when you install it ([https://git-scm.com](https://git-scm.com)),
    and the second option is to install **Cygwin**, which is a Linux Terminal in Windows
    ([https://www.cygwin.com](https://www.cygwin.com)).'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Environment variables**: Another common problem using Windows is to set environment
    variables. Generally, when we write npm scripts, we set environment variables
    such as `NODE_ENV=production` or `BABEL_ENV=development`, but to set those variables
    in Windows, you use the `SET` command, which means you need to do `SET NODE_ENV=production`
    or `SET BABEL_ENV=development`. The problem with this is that if you are working
    with other people that use Linux or Mac, they will have problems with the `SET`
    command, and probably you will need to ignore this file and modify it only for
    your local environment. This can be tedious. The solution to this problem is to
    use a package called cross-env; you can install it by doing `npm install cross-env`,
    and this will work in Windows, Mac, and Linux:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: '**Case-sensitive files or directories**: In reality, this also happens on Linux,
    but sometimes it is very difficult to identify this problem, for example, if you
    create a component in the `components/**home**/Home.jsx` directory but in your
    code you''re trying to import the component like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: Normally, this won't cause any problems on Mac but can generate an error on
    Linux or Windows because we are trying to import a file with a different name
    (because it's case-sensitive) into the directory.
  prefs: []
  type: TYPE_NORMAL
- en: '**Paths**: Windows uses a backslash (`\`) to define a path, while in Mac or
    Linux they use a forward slash (`/`). This is problematic because sometimes we
    need to define a path (in Node.js mostly) and we need to do something like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
