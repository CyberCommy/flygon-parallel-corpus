- en: Chapter 2. Building the Home Page
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we are going to start using the 320 and Up framework to immediately
    get started on building the home page of our example portfolio site. We will start
    off with some basics of where specific code goes and why. We will then quickly
    move on to building our page with many of the typical elements of a portfolio
    home page: navigation, hero/slider, and a triplet of content panels. If you don''t
    know what these terms mean, don''t worry, you will soon!'
  prefs: []
  type: TYPE_NORMAL
- en: If you have successfully downloaded and unzipped all the code from the link
    at the end of [Chapter 1](ch01.html "Chapter 1. Mobile First – How and Why?"),
    *Mobile First – How and Why?*, you are ready to go. If not, go back and use the
    link there to download the sample code and return.
  prefs: []
  type: TYPE_NORMAL
- en: Preparing and planning your workspace
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Everyone has preferred methods for where they keep their code and how they
    organize it, and there are a lot of conventions in web development about organization
    that are great to know about. Ultimately, if you have a workflow you like for
    working with code, especially code from tutorials, please just go ahead and use
    it. But for those of you who don''t, I suggest you place the code you download
    in some kind of working directory where you keep (or plan to keep) all web projects.
    I typically keep all my web code in a directory I call `work` in my `home` folder.
    So on a Unix or Mac OS X machine, it would look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: A few last notes about where to put your code. If you are using this book specifically
    for the purpose of building something you want to deploy and use, you may only
    want to use the sample code as a reference and build your project using only the
    320 and Up framework files provided. However, ensure that you put all of it in
    a directory named something other than 320 and Up.
  prefs: []
  type: TYPE_NORMAL
- en: Regardless of how you proceed from your end, I will provide the before and after
    code in every chapter so that you can have a template of sorts to get started
    and also an example of the final product that we will have by the end of this
    chapter. If you're just getting started and all this confuses you, just copy the
    code and edit it. You can always download a fresh copy if you need it later.
  prefs: []
  type: TYPE_NORMAL
- en: If you look inside the `ch2` directory, you should see the two folders `before`
    and `after`. From here on, I am going to assume that you will take the simplest
    route and directly edit the `before` files. But please do carry on with your preferred
    way.
  prefs: []
  type: TYPE_NORMAL
- en: 'Go ahead and move to or look into the `before` directory. You will see the
    `320andup` folder that I cloned from Andy Clarke''s GitHub repository (`repo`).
    All I did was change location into the `before` directory by typing the following
    command line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Then I cloned the code from the repo:'
  prefs: []
  type: TYPE_NORMAL
- en: '`git clone git@github.com:malarkey/320andup.git`'
  prefs: []
  type: TYPE_NORMAL
- en: If you don't want to mess around with any of this, just use the code I have
    provided. I just want you to know how I got the code there.
  prefs: []
  type: TYPE_NORMAL
- en: Once you look inside the `320andup` folder, you will see a lot of files. Don't
    get stressed out. I will explain what we are working with as we go. And some of
    the files we simply won't use. If you were going to deploy this code, I would
    encourage you to go through some kind of production process to deploy only the
    code you really need. That is beyond the scope of this book though, because we
    will focus exclusively on building.
  prefs: []
  type: TYPE_NORMAL
- en: Planning ahead
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: I know you are probably excited to get started on writing some code, but first
    we need to do a bit of planning on what it is we will be building. When I prepare
    to build a site, this is what I do first so that I have a reference for what I
    am building with code. It's good practice; you don't want to just wing it. But
    it also gets more complicated when you are building a responsive site.
  prefs: []
  type: TYPE_NORMAL
- en: 'That said, here is the formula we will follow for each page that we will build:'
  prefs: []
  type: TYPE_NORMAL
- en: Describe the elements we want on the page and their hierarchy.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Draw some simple pictures (called **wireframes**) of the elements on the page
    for all the different screen sizes we are coding to.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Write some code for a 320 px wide screen (with some thinking ahead).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Write some code for the other screen sizes we need to code for.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Let''s start with step 1\. Our portfolio site is going to have the following
    elements on the home page:'
  prefs: []
  type: TYPE_NORMAL
- en: Navigation menu
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Hero/slider
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Triad of content panels
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Footer
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'This is a fairly effective page layout for a portfolio site but it can work
    just as well for a company website. Before even designing a page, we should take
    a moment to plan out what the page content will look like in a really abstract
    way. Typically, the best way to represent this is with a wireframe. A wireframe
    should show where the content is placed on the page as well as the relative size.
    Here is what our site looks like as a desktop layout:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Planning ahead](img/6463_02_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: I quickly made that image in Photoshop, but you can easily do it in any image
    editor (in fact, many of my colleagues and I really like doing it with simple
    collaborative image editors, such as the one in Google Drive). You might want
    to take a moment right now to make your own image if you are making something
    that is different from this example.
  prefs: []
  type: TYPE_NORMAL
- en: The important thing in this phase is not to think about dimensions just yet
    (but that will come soon), and think instead about each kind of content and evaluate
    its importance with regard to the purpose of the site. The purpose of this portfolio
    site is to showoff our work so that we can get hired. To achieve that end, we've
    decided to have a home page, a gallery page, a contact form, and an **About Me**
    page. Not groundbreaking, but pretty effective. Next, let's examine how the home
    page can support the purpose of the site.
  prefs: []
  type: TYPE_NORMAL
- en: Navigation
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'On the home page, the navigation area will link to those pages I listed in
    the previous section:'
  prefs: []
  type: TYPE_NORMAL
- en: '**A logo**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Home**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Gallery**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Contact**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**About Me**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Hero/slider
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This area is large and eye-catching. Let's plan to put some bold images and/or
    text here to drive people to the gallery work we want to highlight as well as
    the contact form.
  prefs: []
  type: TYPE_NORMAL
- en: Content panels
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'These areas should highlight the purpose of the site. I think that these areas
    are for those who will take the initiative to scroll down. In other words, those
    willing to scroll down are curious and we should supply them with more details
    about the purpose of the site. For example, my content might highlight three skill
    areas: frontend engineering, user experience, and visual design. Since I am mainly
    a frontend engineer, it is the highest priority; the next priority being user
    experience and the last being visual design. While all three will be visible at
    once on a desktop or a larger tablet, we can''t comfortably fit all three in view
    on smaller tablets and mobiles.'
  prefs: []
  type: TYPE_NORMAL
- en: For yourself, think carefully about the three areas you want to highlight. It's
    common to dedicate a panel to social media integration as well. Whatever you decide
    on, make sure it gives more detail and doesn't just repeat the same content on
    the page.
  prefs: []
  type: TYPE_NORMAL
- en: Footer
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The footer will have a short statement and a link at the top for the purpose
    of getting back to the main navigation. There's a really good reason to have a
    link to the top, especially on mobiles. On a mobile device, we need to provide
    an easy way for users to navigate from the top to the bottom of the page without
    having to manually scroll.
  prefs: []
  type: TYPE_NORMAL
- en: Ok, now we have our content prioritized and categorized, but you should have
    noticed a problem with the wireframe. I started with a desktop view but this book
    is mainly about designing for mobiles first, right? The reason I made that wireframe
    first is because I assume that most readers have designed a desktop page before
    moving on to mobile designs. In fact, it is common to only design for the desktop
    view! From here on, we will strictly be focusing on mobiles first. I promise!
  prefs: []
  type: TYPE_NORMAL
- en: 'So knowing what our content is, we now need to make a layout that will work
    for mobiles. First, I''ll show you what I think our layout should be and then
    explain the reason. Here it is:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Footer](img/6463_02_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Notice that we have to account for the address bar and the toolbar. Keep in
    mind that we aren't only designing for the iPhone. I just made that as a quick
    example, mostly because it is familiar to so many. The point is, on mobiles not
    only are you dealing with a small screen, you can't even count on getting all
    of the small screen since most mobile web browsers need some "chrome" for address
    and toolbar. There are some things we can do to try to reclaim that real estate,
    but more on that later. For now, we need to make a pessimistic assumption in order
    to plan our layout. And if we are using the currently very popular iPhone 4/4S's
    mobile Safari browser as an example, we only have 320 px by 376 px to work with
    because we use 60 px for the address bar and 44 px for the toolbar. The iPhone
    5 is taller by about 88 px. To repeat though, we are not designing this just for
    the iPhone. We are looking at this example mainly to make a point—you can't necessarily
    fit a lot of content in the viewport.
  prefs: []
  type: TYPE_NORMAL
- en: In fact, it looks like we can only fit a navigation bar and the hero/slider.
    Better make sure that the content in the hero/slider counts for something! We
    won't focus too much on content strategy in this book, as there are a lot of other
    people who are far more experienced at it than me; nevertheless, let's do our
    best to put some well-chosen content there.
  prefs: []
  type: TYPE_NORMAL
- en: 'That said, we can still include all the other content; it''s just out of view
    for now. If the users scroll down, they should still be able to see the three
    content panels just stacked rather than spread along the width of the page. A
    user who has scrolled down should see this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Footer](img/6463_02_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: If the users continue to scroll down, they will see the third panel and eventually
    the footer. To reiterate, by the time they get to the footer, it might be really
    helpful to have an easy access to site navigation from here.
  prefs: []
  type: TYPE_NORMAL
- en: Ok, so I bet you are eager to write some code and build! We can do it now that
    we know what we are building. Since a 320 px wide screen needs everything to fill
    the width of the screen, and all the main blocks are to be stacked, the HTML and
    CSS code will be quite simple!
  prefs: []
  type: TYPE_NORMAL
- en: 'Go ahead and open up the `index.html` file inside the `320andup` directory;
    or follow in the code sample and open up the file in this path:'
  prefs: []
  type: TYPE_NORMAL
- en: '`ch2/before/320andup/index.html`'
  prefs: []
  type: TYPE_NORMAL
- en: We are going to take a quick look at this page in a browser and then we are
    going to change it to add our own content. Go ahead and view this file in a browser
    in your preferred manner. I prefer to use a Python simple HTTP server (see the
    following tip). But since we are only working with a static site, you can just
    double-click on the file or even drag it into a browser window.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Python simple HTTP server**'
  prefs: []
  type: TYPE_NORMAL
- en: I hate to be so Mac OS X-centric, but if you are using a Mac this will be easy.
    If you are using another *nix OS, it will still be pretty easy. If you are using
    Windows, it will be a little more work; nevertheless, it will probably be worth
    it.
  prefs: []
  type: TYPE_NORMAL
- en: 'To start a Python simple server on a Mac, you simply browse (via the command
    line) to the directory you want to serve up to a browser and type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: If using another *nix OS, you may need to install Python using your package
    manager and then run the preceding command. For Windows, you will need to install
    it from [http://www.python.org/getit/](http://www.python.org/getit/). Follow the
    instructions to get it all going and then use the command line to run the same
    command.
  prefs: []
  type: TYPE_NORMAL
- en: 'For those of you familiar with WAMP/MAMP solutions, you may want to use those
    instead. You can find them at:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://www.apachefriends.org/en/xampp.html](http://www.apachefriends.org/en/xampp.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[http://www.mamp.info/en/index.html](http://www.mamp.info/en/index.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: I highly recommend that you use a cutting edge browser, such as Chrome or Firefox,
    for the work we will be doing in this book, as they have really useful development
    tools that help you see what is going on with your code. Development tools make
    it easy for you to understand how things work as well as how to solve problems.
    In fact, many of the features we will be using are only available in modern browsers.
    So if you don't have one, go get one; they are all free and easy to install. For
    the record, my main development browser is Chrome.
  prefs: []
  type: TYPE_NORMAL
- en: Ok, once you have this in your browser, you should see what I have in the following
    image. Take a moment to read through it. You may have a lot of questions, and
    that is a good thing. By the time we build things, you will know a lot more.
  prefs: []
  type: TYPE_NORMAL
- en: '![Footer](img/6463_02_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: So, the first thing we need to do is edit this file (the one on the path `ch2/before/320andup/index.html`)
    to make it our own. Basically, we want to hollow out this page by removing the
    header, footer, and everything in between. In the `before` directory, I have provided
    an example called `index_stripped.html`. Feel free to compare your effort with
    that example file (if you are just beginning as a developer, don't be tempted
    to just change the name of `index_stripped.html` to `index.html` and use it; make
    the effort to edit the code successfully).
  prefs: []
  type: TYPE_NORMAL
- en: 'One more thing we will want to do right off the bat is make it so that we can
    pull in the JavaScript library jQuery from Google''s servers. Google is very nice
    and hosts a ton of JavaScript and AJAX related libraries. So, many of us can use
    Google as a **Content Delivery Network** (**CDN**). However, you may notice that
    the line of HTML that pulls it in from Google''s service is missing something:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: It's missing the HTTP protocol, which is fancy talk for the first part of a
    URL, before the slash. I bet you're thinking why? The reason is that we need it
    to work within either `http` or `https` domains, depending on what our site is.
    Leaving it off essentially makes it so that it defaults to whatever the HTTP protocol
    is for the page this code lives in. If you specify it incorrectly as `http` within
    an `https` site (which is secure), it will throw a security warning to all well-made
    browsers because you can't serve up insecure content within the context of a secure
    site. Otherwise, `http` is just fine (you can also leave this out entirely and
    whatever protocol your site is using will apply).
  prefs: []
  type: TYPE_NORMAL
- en: 'For this project, I am using `http`; however, if you are building a secure
    site, by all means, make sure you make this secure as well. Here is what your
    code should look like now:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Now if you refresh the page, you should not notice anything unless you look
    under the hood to see where your jQuery came from. If you don''t know how to inspect
    whether site resources are downloading, don''t worry about it too much right now.
    But if you are seeing errors, just double-check to make sure your code matches
    the example. You can check to see if you are getting JavaScript errors in any
    developer console, regardless of the browser you are using (even IE). Once this
    is working correctly, you can first have the page request that the jQuery library
    come from Google''s service. If that fails, it will come from your site''s server.
    Again, I won''t go too much into the details of this boilerplate code, but it
    is good to know that the following line of HTML is a backup in case Google can''t
    serve up the jQuery file when you request it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Let's build!
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: OK! All the fundamentals are now in place. Let's build the components of the
    page for a small screen first. Let's go from the top of the page to the bottom.
    As I mentioned earlier, it typically makes sense for all the content to span the
    full width of small screens. Let's begin with the header and navigation.
  prefs: []
  type: TYPE_NORMAL
- en: 'Just below the opening body tag, let''s put some HTML for our navigation. It
    should look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Header
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: We created a header block. We are using this for both semantic and layout reasons.
    The header will mainly contain the logo and navigation.
  prefs: []
  type: TYPE_NORMAL
- en: Logo
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The logo will be contained in an `<a>` tag. This follows the unofficial web
    convention that the site logo should link back to the home page. We will still
    have an explicit link to the home page but it is helpful to offer both the links
    to users without being confusing. I use the shorthand ./ in order to have the
    page link back to the root of the current level of depth; for production, you
    may want to take the extra step of having it linked to your fully qualified root
    domain (for example, [www.yourdomain.com/index.html](http://www.yourdomain.com/index.html)).
  prefs: []
  type: TYPE_NORMAL
- en: Navigation
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: We create a semantic `<nav>` block and place some nested containers ending in
    an `<ul>` (unordered list) inside. Each `<li>` (list item) will have a link to
    each page on our website. For this project, we will handcode each link, but if
    you were using some kind of framework, these links would be generated dynamically.
    I went ahead and created links to pages that don't exist yet, so if you click
    on them you will get a **404 file not found** message.
  prefs: []
  type: TYPE_NORMAL
- en: There are a few key things to notice about navigation. Right now, without any
    CSS applied, the basic layout is virtually what we want. Each link is stacked
    vertically and with some additional padding that will be a clear target for fat
    fingers the world around. This is all pretty ideal, since it's always good to
    know that your site will still function without CSS. This is good for many reasons.
    One being the case that your CSS fails to get served up for some reason. Another
    includes users who are using text-only browsers. You will also notice that there
    are a few relatively non-semantic containers here that function as utility containers.
    A few we will use soon.
  prefs: []
  type: TYPE_NORMAL
- en: One problem with this navigation is that once we style it properly, it will
    eat up a lot of screen real estate. The minimum area for an element that requires
    interaction on touch interfaces is roughly 50 px by 50 px so that it is wide enough
    for a fingertip. There is some leeway here though. For example, if the touch target
    is really wide, you can get away with making it about 40 px tall but that can
    get risky. Some usability experts recommend making your touch targets as wide
    as 60 px to accommodate the fattest finger—the thumb, since many users use it
    to get around on a mobile. For argument's sake though, let's make a compromise
    and assume each element to be 40 px tall and full-width, or at least 320 px wide.
    That means our navigation with the logo will be 200 px tall. We have potentially
    eaten up over half our screen real estate with just navigation and we do need
    to remember the potential chrome that we have to plan for. Greeting users with
    only navigation and no actual content is just plain bad.
  prefs: []
  type: TYPE_NORMAL
- en: We will need to do something about this!
  prefs: []
  type: TYPE_NORMAL
- en: Luckily, a convention has rapidly emerged to solve just this problem. Most mobile-friendly
    websites and mobile apps use an icon with a series of three parallel lines to
    signify a hidden navigation menu.
  prefs: []
  type: TYPE_NORMAL
- en: '![Navigation](img/6463_02_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: To the user, this should indicate that a touch or click of this element will
    reveal or hide the navigation. This assumes that the user knows the convention,
    of course. For this reason, there may be some situations where this is not appropriate,
    especially on sites where there is little navigation. That said, we are going
    to go ahead and build our navigation following this convention in order to save
    screen space and learn how to make this enhancement.
  prefs: []
  type: TYPE_NORMAL
- en: Here is the basic strategy we will use. We will hide and show the menu via CSS
    and use JavaScript to only change the class. This way, if users have no JS, they
    will still get the menu, but unfortunately it will be completely expanded.
  prefs: []
  type: TYPE_NORMAL
- en: 'So first things first; we will add a button. Add your button just below the
    `<a>` tag that will hold our logo. We will style the menu in a bit to organize
    things better, but let''s get this working first. Here is what your navigation
    HTML should look like now:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: If you refresh, you will now see a little nubbin of a button just to the left
    of your logo. It's not much to look at now, but be patient. We will write the
    JS code that will toggle some class to hide/show the navigation menu. Go ahead
    and open up the file in the path `ch2/before/320andup/js/script.js`. At this point,
    it should be an empty file. We are going to write some simple JavaScript that
    will hide and show the menu. Again, if a user doesn't have JS, the menu simply
    stays open. This is just one small example of progressive enhancement, there are
    more to come.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, we''ll write this JS to assign a new class to the menu when a user touches
    the button. We are going to use some simple, elegant jQuery:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Here is what this code does. The JS that appears first, `$(document).ready()`,
    is some jQuery that basically waits for the moment when the DOM has loaded, then
    executes all code placed within the `ready` function. It is typical to use this
    to make sure all the elements of the DOM are there so that the code that calls
    specific elements are actually all there.
  prefs: []
  type: TYPE_NORMAL
- en: The next line, `$('.navbar').removeClass('open')`, will remove the `open` class
    that we will use later to make the menu open and close with some CSS. If the device
    has no JS, then this class is never removed and the open style is the only one
    that will ever be applied to the menu!
  prefs: []
  type: TYPE_NORMAL
- en: The next line of code beginning with `$('.menu-button').on('click', function(){`
    attaches an event listener to the button that has a class of `.menu-button`. When
    a user clicks on the button, the code inside that function runs. Additionally,
    a touch event is translated into a click by mobile browsers, so both kinds of
    events are handled with this code. But getting back to the function—after a user
    touches or clicks, the function simply adds or removes the class `open` on the
    element with a class `navbar`. From here on, I won't go into too many details
    about the JavaScript we write. If you need more help in understanding it, that
    is beyond the scope of this book. But if you don't feel ready to dig into JavaScript,
    just follow along and you should learn something!
  prefs: []
  type: TYPE_NORMAL
- en: Now, if you save this code and reload your page, you can try this out. If you
    open your favorite developer tools and look at the `<nav>` tag when you click
    on the button, you should see the class `open` appear and disappear from that
    element. If it's not happening, or if you are getting errors, try retracing your
    steps and see if you missed some code. Also, try running the complete version
    of code from this chapter to see if it works properly. If the code I've provided
    you doesn't work, something other than the code is amiss.
  prefs: []
  type: TYPE_NORMAL
- en: If you don't see any errors, but at the same time don't see anything changing
    in your browser's inspector, just hang tight. It may not be updating the DOM for
    some reason. But we will soon see proof of its working once we add some styles.
  prefs: []
  type: TYPE_NORMAL
- en: Most of the CSS I will be writing can be written in plain CSS, SASS, or LESS.
    For a few reasons, I prefer to work with SASS. This subject too is outside the
    scope of this book. But for brevity, I will do my best to show you how to do all
    the CSS code examples both in SASS and plain CSS. Please read [Appendix B](apb.html
    "Appendix B. Using CSS Preprocessors"), *Using CSS Preprocessors* and other preprocessors
    if you need to learn more. Otherwise, follow along and I will continue to show
    code examples of both CSS and SASS. The finished code samples are all in CSS and
    SASS/SCSS.
  prefs: []
  type: TYPE_NORMAL
- en: First things first, let's arrange the navigation menu so that things are laid
    out in a way that enhances usability and appearance. For example, let's get all
    those stacked elements to be 40 px tall.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you are following and using SCSS, go ahead and open `_page.scss` inside
    the `scss` folder and make sure you change the name of the `css` file that is
    linked in the header of your page to:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'There are other ways you could handle this, of course, but let''s keep it simple.
    If you are editing the plain CSS, just open the file in the path:'
  prefs: []
  type: TYPE_NORMAL
- en: '`ch2/before/320andup/css/320andup.css`'
  prefs: []
  type: TYPE_NORMAL
- en: Again, you can always change the name of this file and the one linked to in
    your header if you wish, but I suggest we keep it simple for now and leave it
    as it is. Now, let's start styling this page. Just a quick note—for many of these
    styles, I am borrowing heavily from the great and powerful Twitter Bootstrap framework,
    which is a frontend framework that includes boilerplate CSS and HTML. You can
    include it with 320 and Up, but I decided not to include it in this book for simplicity.
    That said, if you decide to combine the two (and if you like building things well
    and quickly, I highly recommend you do), you will find that many of the styles
    I use are quite compatible with it. Now let's go!
  prefs: []
  type: TYPE_NORMAL
- en: 'First, let''s get the button moved to where it should be and get it to look
    good:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: The button is far away from all our links, so that users won't accidentally
    touch it when they are trying to open a link. It also looks a little better, but
    still needs those three lines that we discussed earlier. We won't need any images
    though.
  prefs: []
  type: TYPE_NORMAL
- en: If you are using any SASS or LESS, you can take advantage of one of the many
    handy mixins provided in 320 and Up. You should open up `_mixins.scss` and take
    a quick look at all of them. Again, if you are new to them, I will quickly give
    an example of what is so cool about them in just a moment; however, first a quick
    explanation of what mixins are in SASS and why they are so great.
  prefs: []
  type: TYPE_NORMAL
- en: 'In SASS, you can define mixins by typing `@mixin` followed by some CSS that
    you want to generate. This is great if you have a complicated task that you want
    to accomplish without repeated efforts. This harkens back to the concept of DRY;
    for example, we can make three rounded rectangles by using the rounded corners
    of CSS3 for the menu button. The trouble is that currently there are at least
    three different ways to declare rounded corners, thanks to vendor prefixes. For
    all rounded corners, we have to define them like so:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: So, we could type the preceding code every time we need a rounded corner anywhere
    in our site styles. Or, we could save the effort and put these in a mixin. The
    rounded mixin does just that for you. Have a look at it in the `_mixins` file
    right now. Mixins in SASS do a lot of things, but this case alone is compelling.
    It essentially behaves like a callable function that executes when the code is
    compiled to CSS (read [Appendix B](apb.html "Appendix B. Using CSS Preprocessors"),
    *Using CSS Preprocessors*, for more details). You code `@include rounded` and
    the CSS inside that mixin is rendered to your final CSS. In this case, you get
    all those ways of creating rounded corners without all the typing.
  prefs: []
  type: TYPE_NORMAL
- en: If you're already using SASS, here is all you need to do to see it in action
    on your site (if you're not, read [Appendix B](apb.html "Appendix B. Using CSS
    Preprocessors"), *Using CSS Preprocessors*, to see how to get it going). First,
    we will add some new markup to our button.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Write this SCSS nested inside your `.menu-button` SCSS:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'The rounded mixin will render the following CSS (or you can handcode this if
    you wish):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: The last three lines are generated by the mixin when the SCSS is processed.
    This is quite a time-saver. By now your button should be looking neat and floating
    over to the right!
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, let''s get all those links to look neat. Here is what your SCSS should
    look like:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'And here is the CSS:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: This will give a neat contrast and make the links 40 px tall. But now we need
    to do something to get that menu hiding and showing. My preference is to do it
    without JavaScript animation. Ok, it's more than a preference actually. CSS3 animations
    will be smoother for the most part, furthermore; this really comports with the
    ideology of progressive enhancement. If a device does not support CSS3 animations,
    it is quite possible that it isn't really powerful enough to deal with JavaScript
    animations either, so why are you forcing it to run JS loops just for a nice-to-have
    feature? On the other hand, most devices that support CSS3 animations optimize
    these animations by utilizing the GPU. Even if they don't, they will still play
    a JS animation as well.
  prefs: []
  type: TYPE_NORMAL
- en: I won't get too clever with my arguments, but this code essentially works well
    if you are on a slow device that doesn't support CSS3 animations and if you are
    on the slickest mobile out there.
  prefs: []
  type: TYPE_NORMAL
- en: First things first, we need to make one embarrassing concession here. CSS3 animations
    will not work when the height of an element is automatically calculated (yet!).
    This doesn't have to matter for us, since we can easily know the height of our
    navigation menu. But if you wanted to use this kind of animation on a menu of
    an unknown size, you could not use this approach. There are other approaches for
    that scenario; however, they are not included in this book. ![Navigation](img/01.jpg)
  prefs: []
  type: TYPE_NORMAL
- en: 'So, here is what your SCSS now needs to look like:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'And the CSS:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: We set the maximum height of the open menu 5 x 44 = 220px. There are five stacked
    elements in `nav` and we know that they are each 44 px tall (I could tell by looking
    in my dev tools). By extension, the closed version, the version that has had the
    `open` class removed should have a max-height of 44 px. We need the overflow to
    be hidden so that the other elements aren't visible when the menu collapses to
    a smaller height.
  prefs: []
  type: TYPE_NORMAL
- en: 'You should also notice that the five different ways of creating the CSS3 transition
    animations were written with one line of SCSS (another mixin):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: Things are looking really nice now! Play around with it and enjoy. This was
    a pretty intense section. The rest will be a tad simpler, I promise!
  prefs: []
  type: TYPE_NORMAL
- en: Next, let's move on to our *Hero* section. For now, we will simply have a background
    with some placeholder text and a button. But I will provide some tips and suggestions
    for making a slide show later in this section.
  prefs: []
  type: TYPE_NORMAL
- en: Hero
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Let's keep the markup simple for now. Later, we will come back and make this
    a simple slideshow.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: The `hero` `div` acts as a container for some styles and content that we will
    add. For now, we will just stick to adding a headline, some text, and a button
    that will eventually take users to our contact page.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is what the SCSS should look like:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: '…and the CSS:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: Again, you can see the use of a mixin. We used the gradient mixin, `@horizontal`,
    to create eight lines of plain 'ol CSS. Convinced you should be using SASS yet?
  prefs: []
  type: TYPE_NORMAL
- en: Everything else is relatively straightforward. You may notice that I had to
    override the text-shadow of the button with a black colored shadow, since the
    peachy-colored shadow would have looked pretty terrible behind white text on a
    black button. All the other choices are just some basic styles for this area,
    which you can feel free to adjust according to your taste.
  prefs: []
  type: TYPE_NORMAL
- en: Now, let's move on to the trio of content panels that will go at the bottom.
  prefs: []
  type: TYPE_NORMAL
- en: Content panels
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Now below the hero, place this example code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: Now, I have to confess at this juncture that all I did for this section was
    copy Andy's example from his panel `upstart`. These are darn useful. You can find
    his examples inside any of the preprocessor folders, but I got mine from `ch2/before/320andup/scss/320andup-panels/index.html`.
  prefs: []
  type: TYPE_NORMAL
- en: Not only are these automagically (that's silly developer speak for something
    that happens automatically but seems mysterious and magical) laid out for us but,
    as you will soon see, they are already responsive without us having to make any
    effort. This is a huge payoff!
  prefs: []
  type: TYPE_NORMAL
- en: 'The only change I want to make is to the background color of the `div` with
    a class of `full`. The bluish color doesn''t go well with my orange theme. But
    if you look at the SCSS for the panel upstart (in `upstarts/320andup-panels/_upstart.scss`),
    you will notice that the color for the background is calculated from a `$basecolor`
    variable:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'That means you need to assign the `$basecolor` variable to something. Let''s
    just use one of the shades of orange from our hero gradient! Open up `_variables.scss`
    and change `$basecolor` to this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: You will notice that our button in the hero changed color! Whoa! That's actually
    Ok, I planned for it. This is a powerful feature of tying your styles together
    with variables, but it can bite you if you don't pay attention.
  prefs: []
  type: TYPE_NORMAL
- en: Ok! Now things are looking really sharp! If you resize your browser, you can
    see the content panels change size and layout. We just need to make a footer,
    then we can add some responsive styles of our own for the things 320 and Up has
    not done for us.
  prefs: []
  type: TYPE_NORMAL
- en: Footer
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let''s keep things simple again:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'We will style it like so. First the SCSS:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'And the CSS:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: Hopefully, you've gotten the hang of this now. But you can once again see the
    use of some variables as well as the ampersand sign in the SCSS to help write
    code faster.
  prefs: []
  type: TYPE_NORMAL
- en: Next, we handle what happens to the layout on larger screens.
  prefs: []
  type: TYPE_NORMAL
- en: Making our page responsive
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The best way to see when you need to add new styles is to take your browser
    window from its narrowest and gradually drag it wider. When the design starts
    to look weird or broken, it's time to restyle it.
  prefs: []
  type: TYPE_NORMAL
- en: In our case, the main things we will need to restyle for larger screens are
    the navigation, the hero, and the footer. The content panels are already taken
    care of for us. Let's start with the navigation.
  prefs: []
  type: TYPE_NORMAL
- en: In the case of the navigation, we implemented the hide/show functionality to
    save valuable screen space, but at some point we don't need to make users click
    to reveal the menu. We can simply leave the navigation fully displayed at all
    times like a desktop site navigation that we are used to. In order to find the
    point where that layout breaks, we could drag our browser width, which could quickly
    get tedious. Also, in reality, responsive websites aren't for wackos that resize
    their browsers spontaneously and repeatedly, like yours truly, but for devices
    of different sizes. Luckily, 320 and Up has a useful tool in its toolbox to help
    out.
  prefs: []
  type: TYPE_NORMAL
- en: If you open up an HTML file called `responsive.html` in the directory you're
    working in (to remind you it's `ch2/before/320andup/responsive.html`), it should
    just automatically load your `index.html` file. Now, by scrolling left and right,
    you can see your layout in five good layout breakpoints (not to be confused with
    breakpoints used in debugging code). Of course, there will be exceptions, but
    these breakpoints are a real time-saving place to start as they tend to hit the
    range of devices currently available. I encourage you to critique and question,
    but for now, let's take advantage of them as they are paired up with 320 and Up
    and will speed up development that is going to support a good design in almost
    all cases. If you open this page through your computer's filesystem, it won't
    load the pages. See my note earlier in the chapter to find a good way to open
    up this page. But to restate, my personal favorite for something this simple is
    the Python simple HTTP server.
  prefs: []
  type: TYPE_NORMAL
- en: Ok, so when you successfully get this page to load, what do you see? You should
    notice that the design works really well on the mobile and small tablet layouts.
    Based on the minimal amount of placeholder content I have in here, it doesn't
    look too sparse nor does it look too cramped. And as a bonus, those neat content
    panels expand to fill the extra real estate. The framework facilitates this via
    `@media` queries. More on this in a minute.
  prefs: []
  type: TYPE_NORMAL
- en: That said, what do you think about the tablet — portrait layout? It usually
    works, but we have more room in that hero area now. That doesn't mean we have
    to add more content but we can probably make that text a little bigger to fill
    it out. To heck with that, let's make it really bold and get people's attention.
    The nice thing is that 320 and Up already has all the structure in place to make
    it easy to change the size. First let's look at the code, then I will explain
    what goes on under the hood.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you are using SASS, this is super easy. Open the `_768.sass` or `_768.scss`
    file and add this code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'or in CSS, find the point in your file that says:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'and within the curly braces add this code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: So, if you are new to SASS or `@media` queries, I will take a moment to help
    you understand what is happening here. First, I will explain the `@media` query.
    Quite simply, in this case all it does is tell the browser that once the screen
    is a minimum width of 768 px, the contained styles should be applied. You can
    set other dimensions and other conditions as well.
  prefs: []
  type: TYPE_NORMAL
- en: 'As for the magic in SASS that allows us to organize these styles in separate
    files, there is a similar syntax that is only in the `.sass` or `.scss` file (not
    the `.css` file) and is, in essence, an instruction to the preprocessor to pull
    in separate files. You may have noticed that the file you edited (and a bunch
    of others) has an underscore at the beginning of the name. That indicates that
    it is a partial file. If you look at the `320andup-sass.sass` file or the corresponding
    file for the language you chose, you will notice that inside all the `@media`
    queries, there are `@import` statements. For the file we just edited, there is
    an `@import 768` statement inside the same exact `@media` query you see in the
    plain CSS file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: When it gets to this point in the file, it tells the SASS preprocessor to go
    find the file with the name `_768.sass` and render whatever code is there into
    this place. So, not exactly rocket science, but a lot of the busy work of setting
    all this up has been taken care of for you.
  prefs: []
  type: TYPE_NORMAL
- en: 'Ok, now back to getting this design to respond to this tablet size. The other
    thing you will notice is that we probably don''t need to have the navigation elements
    hidden anymore. If we can keep the navigation convenient and show a lot of content
    as well, then we''ve accomplished some very important missions! So let''s go back
    to that `_786.sass` file and add this above our previous chunk of code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: You'll notice this structure mirrors the structure of our original `site.sass`
    file. This is just a good practice for maintenance reasons as well as making sure
    that the styles actually override the other ones.
  prefs: []
  type: TYPE_NORMAL
- en: Refresh your screen if necessary and now you'll see that the navigation elements
    extend from left to right. This is probably what you are used to seeing on a regular
    old desktop website. And there was much rejoicing. There is the possibility of
    moving this style into the `_480` file layout too, but it looks a bit crowded
    to my eye. That said, if you had less navigation and a small logo (or no logo),
    you might want to apply that style at 480 px instead.
  prefs: []
  type: TYPE_NORMAL
- en: 'There is one more neat little tweak that we should make at this point. All
    the content in the navigation and hero is sitting closer to the edge of the viewport
    than it needs to. We can definitely add some breathing space. In the markup, we
    have a nice utility class that we can use for this purpose (it''s been something
    of a convention that frontend developers have been using for a while now). Add
    this code in the `_768` file of your choosing, above all the previous code we''ve
    written so far:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: This allows us to center these containers within the other elements that we
    want to visually fill the width of the screen, which makes our app have a huge
    visual impact without the content sprawling too much. This sizing and margin is
    dynamic and changes in a fluid manner as the browser gets wider in proportion
    to the content panels below. We could set explicit widths at various visual breakpoints;
    however, we wouldn't be taking advantage of the framework then. I would argue
    that fixed widths are a passing paradigm.
  prefs: []
  type: TYPE_NORMAL
- en: Let me explain what I mean by that. In the earlier days of web design, designers
    made their pages look more like… well, pages. But web design currently has an
    expanded idea that the page should be more flexible. I think this is a good thing,
    don't you? Just as an example, users with large displays don't get a narrow band
    of content in the middle of their page.
  prefs: []
  type: TYPE_NORMAL
- en: 'Along those lines, did you notice another convenience of the way 320 and Up
    is designed? Once we applied the styles for 768, those styles are applied to the
    larger screens too. Neat! Less code means faster and better work, and easier maintenance.
    It also means less CSS for a browser to download. That is the UI trifecta: good
    user experience, good performance, and maintainability.'
  prefs: []
  type: TYPE_NORMAL
- en: Now, another thing you'll notice is that our footer is fine. I must admit that
    I've taken the easy way out with that, but the approach I've used here is still
    useful for content of this type. When there is little content for an area of the
    page, such as a footer, it pays to just tastefully center-align all the content.
    When done properly, it is easy to read and doesn't distract from what is clearly
    the more important content up above on the page. And if the footer has something
    really important, you should consider moving it up into the body of your page!
  prefs: []
  type: TYPE_NORMAL
- en: Next, let's revisit, the Hero area and discuss adding images in there and use
    some simple code to cycle through them.
  prefs: []
  type: TYPE_NORMAL
- en: Slider
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: So, before we get into making a slideshow, it will be useful to see how well
    320 and Up facilitates making images responsive. If you look in the supplied code
    in the `index.html` file, you will see a block of code just below the hero markup
    for slider markup. I have left comments in there to make it easy to find.
  prefs: []
  type: TYPE_NORMAL
- en: 'For now, because I want you to see something already put in place for you in
    your own file, only add the following markup:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: Use this markup in place of the hero markup (either delete the hero stuff or
    comment it out; it's totally up to you).
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, add this small bit of CSS to the `site.css` file you are working in (it
    will be identical in all file types):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: 'Refresh the page and play around with the width of your browser. You should
    see the image change without ever getting cropped. This is an elegant solution
    in that one image will work for all layouts. It is not a solution for all cases
    (and there are a lot of discussions right now about how to make images more responsive
    to screen size). But here is the situation it is good for: I have a small number
    of images that aren''t too large and I don''t need to have them cropped differently
    for different screen sizes. This situation is actually pretty common, so as long
    as you can get your images to be lightweight, it works well.'
  prefs: []
  type: TYPE_NORMAL
- en: Now, let's add a little bit more complexity without recreating the wheel. For
    now, we will just add two more images and I will supply some simple JavaScript
    to cycle through and have the images fade-in.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s change the markup so that we can get ready for more JS and CSS:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: Not a ton of code, but let's walk through this to understand it in depth. We
    need to wrap the images in `<div>` tags now (for other purposes, you could always
    put them in other block elements; however, right now this simple markup is totally
    appropriate for our purpose). These `div` containers allow us to assign classes
    and do block level styling to anything within a slide and not just images. For
    now, we are only placing a single image in these slides, but if we wanted to add
    captions or buttons or something that would become impractical. For the slideshow
    to display flexibly, we just need these wrappers around everything.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, let''s look at some CSS to get this to display properly:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: 'and the compiled CSS:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: This markup allows us to make sure that the first image is the only one visible
    without even running any JavaScript. The `slide` class by default is not visible
    and it only becomes visible when it gets the class `active` added to it. This
    not only works at the code level, but also reads nicely. You read the code and
    it says `class="active slide"` and you have a pretty good idea what that means.
  prefs: []
  type: TYPE_NORMAL
- en: To move on, let's add some JS to see if we can get a simple animation going.
    This will not be a fancy animation. Just to warn you; if you want something with
    cool controls and other bells and whistles, that is beyond the scope of this book.
    If you want a neat responsive slideshow, I recommend either the carousel included
    in Twitter Bootstrap or any other responsive slideshow. This sample code I am
    sharing below will simply cycle through some images.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add this inside your `document ready` function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: This code was adapted from [http://jonraasch.com/blog/a-simple-jquery-slideshow](http://jonraasch.com/blog/a-simple-jquery-slideshow)
    to work with our 320 and Up layout. It will cycle through your images and append
    the active class to each one while removing it from the previous one. Then once
    it gets to the last one, it assigns it to the first one. Again, a very simple
    approach since the focus of this book is 320 and Up. If you want to use a slideshow,
    I suggest not reinventing the wheel since there are a lot of great components
    out there. If you are looking to choose a good component, look for one that is
    either designed to be responsive or at least does not interfere with it.. Another
    criterion for me is that it uses CSS3 animations with JS polyfills. CSS3 animations
    are likely to (though not in all cases) run smoother on mobiles than JS animations.
  prefs: []
  type: TYPE_NORMAL
- en: 'One limitation of the image we have used is that for really large screens,
    the image kind of gets swallowed up in all the negative space on the left and
    right of the slide. If this bothers you and is keeping your site from looking
    as good as you think it should, there are two strategies at your disposal: include
    larger images or put a full-width background in that area. I prefer the latter
    because a proportionally larger image is going to eat up the top of our layout
    and would also mean larger files that could definitely harm performance.'
  prefs: []
  type: TYPE_NORMAL
- en: Remember that the ultimate goal here is to get content to the visitors on our
    site! The latter strategy requires some planning though. Either your images need
    to have some transparency around the edges or the background of all your images
    should match the background you use in your CSS or the slider area. I am going
    to show you a simple example of matching the background.
  prefs: []
  type: TYPE_NORMAL
- en: 'I happen to know that the sample images I created have a vertical gradient
    that goes from `#383234` to `#231F20`. So now all I need to do is make a background
    that matches that. Using the SCSS mixin provided in 320 and Up is ridiculously
    easy. I just add this to my `.slider` styles:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: 'and that is rendered to CSS as:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: The limitation of this approach is that devices that don't support gradients
    will get a solid color. If this is unacceptable to you, then it's time to go back
    to the drawing table and come up with a design that will work in all scenarios!
    In most cases, I have worked with designers who either throw their hands up in
    this situation or find ways to make their design work in all situations. If you
    ask me, it's a moving target and it's best to focus your energies on a design
    that you know will look spot-on to 80 percent of your audience and still decent
    to the remainder of your site's viewers.
  prefs: []
  type: TYPE_NORMAL
- en: Ok! Now you have the fundamentals for a home page that will display optimally
    on virtually any device! This was a lot of work, but now that we have laid the
    ground work, the other pages will go fast.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we created navigation that changes based on screen size so
    that users of small screens can expand or collapse it and users of large screens
    get the entire navigation menu. We even used CSS to create the icon that indicates
    a collapsible menu. We made a responsive hero area with a big call to action,
    leveraging mixins and variables to quickly get our design to come together with
    colors that complement one another. We used the panel `Upstart` to get the triad
    of content panels at the bottom of our page and we used the supplied icons and
    CSS framework to include social media and contact info icons in the footer. And
    best of all, this happened really fast. When you get the hang of it, you can pull
    a page like this together within an hour. Now let's move on to the next chapter!
  prefs: []
  type: TYPE_NORMAL
