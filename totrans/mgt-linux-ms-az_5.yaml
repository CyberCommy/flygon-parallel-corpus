- en: 5\. Operating Linux on Azure
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If you recall the migration roadmap we shared earlier, it was a four-stage process.
    In the last two chapters, we covered the *Assess* and *Migrate* milestones. In
    *Chapter 3*, *Assessment and migration planning*, we discussed the need for proper
    assessment and thorough planning of the migration, as they are an inevitable part
    of the process. We also discussed the tooling used to complete these milestones
    in our migration journey in *Chapter 4*, *Performing migration to Azure*, and
    we migrated two Linux servers from Hyper-V into Azure. The first server was an
    Ubuntu LTS, and the second was a MySQL server, which was converted into an Azure
    Database for MySQL service.
  prefs: []
  type: TYPE_NORMAL
- en: 'One thing to keep in mind is that the journey doesn''t stop there. In this
    chapter, we will focus primarily on the remaining stages: *Optimize* and *Manage
    & Secure*. We need to make sure that workloads are optimized, and that security
    is top-notch. In an on-premises environment, security is typically entirely handled
    by you. However, in the case of the cloud, you are deploying the workloads to
    the cloud provider''s datacenter. Here, security will be a major concern, but
    you need not worry. Azure provides a lot of services that can change the security
    landscape of your cloud deployments.'
  prefs: []
  type: TYPE_NORMAL
- en: The *Optimize* stage mainly focuses on analyzing your costs, improving the infrastructure
    using recommendations, and reinvesting to achieve more. On the other hand, the
    *Manage & Secure* phase talks more about security, data protection, and finally
    monitoring.
  prefs: []
  type: TYPE_NORMAL
- en: 'Some of the key takeaways from this chapter include:'
  prefs: []
  type: TYPE_NORMAL
- en: Optimizing costs on Azure
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Working with Azure Linux agents and extensions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Linux patching on Azure
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Infrastructure monitoring
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let's continue our migration journey by moving on to the next milestone, *Optimize*,
    where we are going to learn about a number of cost optimization techniques in
    Azure.
  prefs: []
  type: TYPE_NORMAL
- en: Optimize
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'At this stage, you may have successfully migrated your services to the Azure
    cloud. As mentioned in the introduction to this chapter, however, the journey
    doesn''t end here. If you remember, during our migration, we had an option to
    choose the size of the virtual machines that need to be created in Azure. For
    demonstration purposes, we let Azure decide the size of the target virtual machines.
    A couple of questions will surface at this point, for example: *Is the sizing
    decision correct? Are the migrated workloads running efficiently?*'
  prefs: []
  type: TYPE_NORMAL
- en: The answer to these questions is delivered in the *Optimize* phase. In this
    phase, we ensure that the migrated workloads are running efficiently from a cost
    standpoint as well as a performance standpoint. Let's go ahead and cover some
    of the tools that are used to optimize the workloads, mainly from a cost perspective.
  prefs: []
  type: TYPE_NORMAL
- en: In the previous chapters, we discussed the relevant tools that are used in the
    respective phases. Likewise, the *Optimize* phase also has a set of tools that
    can be leveraged by customers to optimize workloads. Let's take a look at these
    tools.
  prefs: []
  type: TYPE_NORMAL
- en: Azure Cost Management
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Azure Cost Management** (**ACM**) is an amazing tool that can be used to
    analyze running costs at different management scopes, like billing accounts, management
    groups, subscriptions, resource groups, and even at the resource level. For instance,
    you can choose any subscriptions from the Azure portal, and clicking on the Cost
    analysis blade will give you a complete breakdown of the costs associated with
    all the resources in your subscription. *Figure 5.1* shows how the cost is visualized
    using different graphs in ACM:'
  prefs: []
  type: TYPE_NORMAL
- en: '![A complete breakdown of the cost of all resources in your subscription by
    clicking into the Cost analysis blade](img/B17160_05_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 5.1: ACM view'
  prefs: []
  type: TYPE_NORMAL
- en: 'If you look closely at *Figure 5.1*, right next to ACTUAL COST (USD), you can
    see the forecasted cost under FORECAST: CHART VIEW ON. The forecast is done using
    resources that are currently deployed. Alongside this, ACM provides budgeting
    and alerting features so that you will be notified whenever you cross the threshold
    of your budget. Furthermore, you can integrate budgets with action groups and
    invoke Azure Functions or Azure Logic Apps to automatically shut down workloads
    when you are crossing the threshold.'
  prefs: []
  type: TYPE_NORMAL
- en: 'In addition to the aforementioned features, ACM also offers the following advantages:'
  prefs: []
  type: TYPE_NORMAL
- en: You can monitor your AWS costs from ACM using the AWS connector.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ACM offers richer APIs that can be utilized to build dashboards in your favorite
    visualization tool.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ACM also has a Power BI connector that you can leverage to bring the data from
    Cost Management to Power BI. At the time of writing this book, the Power BI connector
    is only supported for **Enterprise Agreement** (**EA**) and **Microsoft Customer
    Agreement** (**MCA**) customers. **Pay-As-You-Go** (**PAYG**) customers have to
    use the APIs to create dashboards in Power BI.
  prefs: []
  type: TYPE_NORMAL
- en: To conclude, ACM is very powerful in terms of the features it offers and the
    visibility it provides in terms of cloud spending. You can analyze the costs of
    the services or servers that you have migrated and verify whether they are within
    your projected budget. If not, you can think about resizing the server provided
    you are not compromising the performance of the application.
  prefs: []
  type: TYPE_NORMAL
- en: With that, we will move on to the next tool used in the *Optimize* phase—Azure
    Advisor.
  prefs: []
  type: TYPE_NORMAL
- en: Azure Advisor
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Azure Advisor can give you recommendations to review and improve the optimization
    and efficiency of your workloads. Azure Advisor is now integrated into the ACM
    blade to provide recommendations on cost reduction. Recommendations from a cost
    reduction standpoint include suggestions for resizing underutilized Azure virtual
    machines, making use of additional discounts, and converting PAYG virtual machines
    to Azure Reserved Instances to get significant discounts on workloads that run
    24x7.
  prefs: []
  type: TYPE_NORMAL
- en: 'For underutilized resources, Azure Advisor recommends shutting down or resizing
    the instance based on the evaluation. The evaluation metrics can be found here:
    [https://docs.microsoft.com/azure/advisor/advisor-cost-recommendations](https://docs.microsoft.com/azure/advisor/advisor-cost-recommendations).'
  prefs: []
  type: TYPE_NORMAL
- en: 'Recommendations from Advisor do not always involve costs—you will be able to
    see recommendations on Cost, Security, Reliability, Operational excellence, and
    Performance. *Figure 5.2* shows the view from the Advisor blade showing different
    recommendations. In this case, most of the recommendations have been completed,
    except the Reliability recommendations:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The view from the Advisor blade showing different Azure recommendations](img/B17160_05_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 5.2: Azure Advisor recommendations'
  prefs: []
  type: TYPE_NORMAL
- en: These recommendations can be downloaded as CSV or PDF, which you can share with
    other stakeholders who play vital roles in business decision making.
  prefs: []
  type: TYPE_NORMAL
- en: Analyzing costs using ACM and reviewing the recommendations made by Azure Advisor
    will help you optimize your workloads in Azure. Now, let's move on to the next
    phase of our journey, called *Manage & Secure*.
  prefs: []
  type: TYPE_NORMAL
- en: Manage and Secure
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this stage, we will make sure that our migrated resources are secured, and
    that they are managed correctly. This phase is all about security and data protection
    and we are going to look at some of the tools that are used to achieve these.
  prefs: []
  type: TYPE_NORMAL
- en: One of the most important pieces of Linux management in Azure is a small component
    called the **Linux Agent**.
  prefs: []
  type: TYPE_NORMAL
- en: Linux Agent for Azure
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Linux provisioning and interaction between the Azure `waagent` or `WaLinuxAgent`.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following functionality of Linux on Azure deployments are managed by the
    Azure Linux Agent:'
  prefs: []
  type: TYPE_NORMAL
- en: Provisioning images
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Network routing and interface naming
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Kernel configuration
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Diagnostics configuration
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Microsoft **System Center Virtual Machine Manager** (**SCVMM**) deployment
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Virtual machine extensions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The agent talks with Azure Service Fabric via two channels. During virtual machine
    deployment, the agent mounts an **Open Virtualization Format** (**OVF**)-compliant
    configuration file from a virtual DVD image that contains the required provisioning
    details. During runtime, communication takes place via the REST API provided by
    the agent, allowing Azure Fabric to push information and commands to the virtual
    machine.
  prefs: []
  type: TYPE_NORMAL
- en: 'When creating your own Linux images or modifying existing images, it is good
    to remember that the agent is not completely monolithic—it requires the following
    components from the underlying Linux system:'
  prefs: []
  type: TYPE_NORMAL
- en: Python 2.6+
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: OpenSSL 1.0+
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: OpenSSH 5.3+
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Filesystem utilities: `sfdisk`, `fdisk`, `mkfs`, `parted`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Password tools: `chpasswd`, `sudo`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Text processing tools: `sed`, `grep`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Network tools: `ip-route`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Even if it is technically possible to run Linux on Azure without the agent,
    it is highly recommended to always have the agent installed and active in your
    virtual machine. Without the agent, you cannot run any remote commands to the
    virtual machine via Azure Fabric. Additionally, Azure would not get any status
    information about the virtual machine and wouldn't know whether the system was
    healthy.
  prefs: []
  type: TYPE_NORMAL
- en: All endorsed Linux distributions on Azure come with the agent pre-installed.
    For your own images, you may install the agent from DEB and RPM packages, as well
    as using a Python-based installation script.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: You should always use the version of the agent distributed with the virtual
    machine image by your Linux distribution vendor. Only install it manually if there
    is no official package available for your Linux flavor.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here are some useful commands for checking that the Azure Linux Agent is installed
    and updated to the latest version:'
  prefs: []
  type: TYPE_NORMAL
- en: 'To check whether it is installed and to show the current version number on
    Ubuntu:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '![Checking Azure Linux Agent version number on Ubuntu by executing the apt
    list –installed | grep walinuxagent command](img/B17160_05_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 5.3: Checking the Azure Linux Agent version number on Ubuntu'
  prefs: []
  type: TYPE_NORMAL
- en: Alternatively, you can run `waagent --version`, which can be used on any distribution
    without needing to run any package manager-related commands.
  prefs: []
  type: TYPE_NORMAL
- en: 'To update the agent or install it in the event that it is missing, run the
    following command:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '![Updating the Linux agent on Ubuntu by executing the sudo apt-get install
    walinuxagent command](img/B17160_05_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 5.4: Updating the Linux agent on Ubuntu'
  prefs: []
  type: TYPE_NORMAL
- en: In our example, the agent was already installed and on the latest version as
    well.
  prefs: []
  type: TYPE_NORMAL
- en: 'Azure Linux Agent has a built-in mechanism to update itself. It is good to
    ensure that it is enabled by editing its configuration file, `/etc/waagent.conf`:'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'You can learn more about the technical details of the agent from GitHub as
    the agent is released as open source: [https://github.com/Azure/WALinuxAgent](https://github.com/Azure/WALinuxAgent).'
  prefs: []
  type: TYPE_NORMAL
- en: 'Documentation for using the agent can be found here: [https://docs.microsoft.com/azure/virtual-machines/extensions/agent-linux](https://docs.microsoft.com/azure/virtual-machines/extensions/agent-linux).'
  prefs: []
  type: TYPE_NORMAL
- en: 'It is also good to be familiar with `cloud-init`, a very popular tool for customizing
    a Linux virtual machine as it boots for the first time. It can be considered an
    alternative to Azure Linux Agent. You can read more about it here: [https://docs.microsoft.com/azure/virtual-machines/linux/using-cloud-init](https://docs.microsoft.com/azure/virtual-machines/linux/using-cloud-init).
    `cloud-init` works across Linux distributions and does not depend on the package
    manager.'
  prefs: []
  type: TYPE_NORMAL
- en: Extensions
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Azure extensions are tiny helper applications that provide configuration and
    automation functionality for Azure virtual machines. These extensions can be used
    once the virtual machine and operating system have been deployed and started.
    They can also be used during virtual machine deployment using Azure Resource Manager
    templates.
  prefs: []
  type: TYPE_NORMAL
- en: Extensions are part of the Azure Linux Agent functionality set, but each extension
    has its own set of features and use cases.
  prefs: []
  type: TYPE_NORMAL
- en: 'To list all the available extensions for Linux on Azure, you can run the following
    Azure CLI command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '![Listing all available extensions for Linux on Azure](img/B17160_05_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 5.5: Listing all available extensions for Linux on Azure'
  prefs: []
  type: TYPE_NORMAL
- en: The list is quite long and contains extensions from Microsoft and third-party
    publishers. In this example, we have used Southeast Asia as a location. You should
    choose your nearest region unless you are working with a specific remote location.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'You can explore all the options of the extension image module here: [https://docs.microsoft.com/cli/azure/vm/extension/image?view=azure-cli-latest#az-vm-extension-image-list](https://docs.microsoft.com/cli/azure/vm/extension/image?view=azure-cli-latest#az-vm-extension-image-list).'
  prefs: []
  type: TYPE_NORMAL
- en: 'Virtual machine extensions can also be found in the Azure portal (see *Figure
    5.6*). You can choose Extensions under the virtual machine properties and add
    them using the installation wizard:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Extensions settings in the Azure portal](img/B17160_05_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 5.6: Extensions settings in the Azure portal'
  prefs: []
  type: TYPE_NORMAL
- en: Extensions are very useful not only for deploying workloads and their configurations,
    but also during troubleshooting and debugging.
  prefs: []
  type: TYPE_NORMAL
- en: Data protection
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'In Azure, your data can be protected in multiple ways and in multiple layers.
    The encryption models supported by Azure are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Client-side and server-side encryption
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Azure disks and Azure Storage Service Encryption
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Client-side encryption of Azure blobs
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Various encryption methods for databases and database services
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Encryption of data in transit
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Key management with Key Vault
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Depending on your migration workloads and their architecture, you may want to
    utilize one or more of these encryption features in your project.
  prefs: []
  type: TYPE_NORMAL
- en: For example, if your source virtual machine is using encrypted filesystems,
    you could migrate it to Azure as-is. However, for performance reasons, it may
    make sense to turn off the filesystem encryption and to enable encryption on Azure
    Storage or Managed Disk.
  prefs: []
  type: TYPE_NORMAL
- en: If your entire on-premises storage system is encrypted, the most logical choice
    is to encrypt at the Azure Storage level as well.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'You can read more about the various encryption functionalities in the encryption
    overview documentation: [https://docs.microsoft.com/azure/security/fundamentals/encryption-overview](https://docs.microsoft.com/azure/security/fundamentals/encryption-overview).'
  prefs: []
  type: TYPE_NORMAL
- en: Let's take a closer look at the next feature.
  prefs: []
  type: TYPE_NORMAL
- en: Azure Disk Encryption
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Azure Disk Encryption for Linux virtual machines uses *DM-Crypt* to provide
    volume encryption for operating systems and data disks. It is integrated with
    *Azure Key Vault* to manage and control your encryption keys and secrets. There
    is also integration with Azure Security Center, which is able to alert you if
    you have not encrypted virtual machine disks:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Virtual machine recommendation – Azure Security Center](img/B17160_05_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 5.7: Azure Security Center'
  prefs: []
  type: TYPE_NORMAL
- en: 'There are certain recommendations and limitations when it comes to using Azure
    Disk Encryption with Linux virtual machines, and right now there is no direct
    way of removing encryption from the operating system disks on Linux virtual machines,
    making the troubleshooting process in the case of "no boot/no ssh" for ADE operating
    system-encrypted virtual machines quite time-consuming. Currently, the memory
    requirements shown in *Table 5.1* apply:'
  prefs: []
  type: TYPE_NORMAL
- en: '![VMs with memory requirements for smooth encryption](img/Table_5.1.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Table 5.1: Virtual machines with memory requirements'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Once encryption is complete, you may reduce the virtual machine's memory size.
  prefs: []
  type: TYPE_NORMAL
- en: Keep in mind that it is mandatory to have temporary disks enabled in order to
    use Azure Disk Encryption. On a practical level, this makes virtual machine types
    Dv4, Dsv4, Ev4, and Esv4 unable to use disk encryption.
  prefs: []
  type: TYPE_NORMAL
- en: 'Another limitation is that generation 2 virtual machines and Lsv2-series virtual
    machines are not supported currently. You can find all unsupported scenarios documented
    here: [https://docs.microsoft.com/azure/virtual-machines/linux/disk-encryption-linux#unsupported-scenarios](https://docs.microsoft.com/azure/virtual-machines/linux/disk-encryption-linux#unsupported-scenarios).'
  prefs: []
  type: TYPE_NORMAL
- en: 'The list of supported Linux distributions for Azure Disk Encryption is quite
    extensive, but it covers only a subset of all endorsed distributions. As the list
    is updated frequently, we won''t include it here, but you can find the up-to-date
    list in the Azure documentation: [https://docs.microsoft.com/azure/virtual-machines/linux/disk-encryption-overview#supported-operating-systems](https://docs.microsoft.com/azure/virtual-machines/linux/disk-encryption-overview#supported-operating-systems).'
  prefs: []
  type: TYPE_NORMAL
- en: Next, let's take a look at how to keep up with updates and security patches
    for Linux on Azure.
  prefs: []
  type: TYPE_NORMAL
- en: Updating Linux on Azure
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Azure provides mechanisms to update all supported Linux distributions. For some
    distributions, Microsoft has its own update repository mirrored from the official
    upstream repository, while for others, the updates come directly from third-party
    vendors' repositories.
  prefs: []
  type: TYPE_NORMAL
- en: '**Red Hat Enterprise Linux** (**RHEL**) updates are available from Azure directly
    running Red Hat Update Infrastructure. This update repository is available for
    PAYG deployments of RHEL. For virtual machines deployed using the **Bring-Your-Own-Subscription**
    (**BYOS**) method, you need to use Red Hat''s own update servers or your own company''s
    Red Hat Satellite server to download updates.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Read more about RHEL on Azure updates and the Azure RHUI here: [https://docs.microsoft.com/azure/virtual-machines/workloads/redhat/redhat-rhui](https://docs.microsoft.com/azure/virtual-machines/workloads/redhat/redhat-rhui).'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: If you have a Red Hat Satellite server, you can continue to use it with RHEL
    on Azure for virtual machines that have been migrated from on-premises to Azure.
    Satellite can also be used with BYOS installations.
  prefs: []
  type: TYPE_NORMAL
- en: You should not use Satellite with PAYG images as you would be consuming your
    RHEL client certificates as well as consuming your PAYG subscription and practically
    paying twice for the RHEL installation.
  prefs: []
  type: TYPE_NORMAL
- en: '**SUSE Linux Enterprise Server** (**SLES**) has a slightly different architecture
    for the update servers: your SLES virtual machines will get updates directly from
    official SUSE-operated repositories. You can find more details on SLES and Azure
    updates from the SUSE documentation: [https://www.suse.com/c/?s=cloud-regionsrv-client](https://www.suse.com/c/?s=cloud-regionsrv-client).'
  prefs: []
  type: TYPE_NORMAL
- en: 'To update your Linux servers on Azure, you can do it the old-fashioned way
    by logging in to the servers via SSH and invoking `apt-get update` or `yum update`
    depending on your Linux distribution. Ubuntu on Azure can get also updates from
    mirrors hosted on Azure. The repository server alias configured by default on
    Ubuntu images on Azure is `azure.archive.ubuntu.com`. This host name is resolved
    to the actual server in the region of your resource group:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Finding the update server address by executing the host azure.archive.ubuntu.com
    command](img/B17160_05_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 5.8: Finding the update server address'
  prefs: []
  type: TYPE_NORMAL
- en: In this example, you can see that the nearest Ubuntu update server for me was
    located in the Southeast Asia region and that its IP address was `20.195.37.151`.
  prefs: []
  type: TYPE_NORMAL
- en: Microsoft also provides Azure Update Management, which is an add-on mechanism
    assisting you in managing updates to Linux servers.
  prefs: []
  type: TYPE_NORMAL
- en: Azure Update Management
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: To avoid manual repetitive work, you can update one or more servers simultaneously
    using the Azure Update Management service. This service is part of Azure Automation
    and supports both Linux and Windows operating systems.
  prefs: []
  type: TYPE_NORMAL
- en: Azure Update Management is not the only tool in Azure for update management.
    If you are already using Ansible for your update management and automation, Ansible
    Automation is also available on Azure.
  prefs: []
  type: TYPE_NORMAL
- en: 'Currently, only some Linux distributions are supported with Azure Update Management.
    Please refer to the documentation for an up-to-date list: [https://docs.microsoft.com/azure/automation/update-management/overview](https://docs.microsoft.com/azure/automation/update-management/overview).'
  prefs: []
  type: TYPE_NORMAL
- en: You can use the Azure Update Management service to list all available updates
    and manage the process of installing the required updates for servers. This service
    uses the Azure Linux Agent to communicate with virtual machines as described earlier
    in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: '*Figure 5.9* illustrates the architecture of the Azure Update Management service:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Azure Update Management service architecture](img/B17160_05_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 5.9: Azure Update Management architecture'
  prefs: []
  type: TYPE_NORMAL
- en: Azure Update Management does not replace the normal update mechanism or package
    manager of a Linux distribution, but it issues requests to those to execute the
    required maintenance tasks. Practically, this means that, for example, the Ubuntu
    updates are still being installed by the `apt` tool and, for example, in RHEL,
    the updates are being managed by `yum`. The updates are fetched from the repository
    configured in the Linux installation.
  prefs: []
  type: TYPE_NORMAL
- en: On Linux, the available updates are automatically polled once per hour by Azure
    Update Management.
  prefs: []
  type: TYPE_NORMAL
- en: Now, let's take a look at the next hands-on lab for managing Linux on Azure
    to guide you further in your cloud journey.
  prefs: []
  type: TYPE_NORMAL
- en: Hands-on managing Linux on Azure
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Linux logs can be ingested into the Log Analytics workspace. In this hands-on
    exercise, we will see how we can ingest the syslog from our migrated Linux machine
    into the Log Analytics workspace and analyze it using **Kusto Query Language**
    (**KQL**).
  prefs: []
  type: TYPE_NORMAL
- en: Syslog is an event logging protocol that is widely used in Linux. The messages
    sent by the applications may get stored on the local machine or delivered to a
    syslog collector. Using the Linux Log Analytics agent, we will configure the syslog
    daemon to forward these syslog entries to the agent, and the agent will then send
    the messages to the Log Analytics workspace, which is part of Azure Monitor. Here,
    we are using the Log Analytics agent to push the data to the Log Analytics workspace.
  prefs: []
  type: TYPE_NORMAL
- en: '*Figure 5.10* is a graphical representation of how data is sent to Azure Monitor
    from the Linux machine:'
  prefs: []
  type: TYPE_NORMAL
- en: '![A graphical representation of the Linux machine sending Syslog messages to
    Azure Monitor](img/B17160_05_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 5.10: Sending syslog messages to Azure Monitor'
  prefs: []
  type: TYPE_NORMAL
- en: 'The syslog collector supports the following facilities:'
  prefs: []
  type: TYPE_NORMAL
- en: '`kern`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`user`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`mail`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`daemon`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`auth`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`syslog`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`lpr`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`news`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`uucp`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`cron`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`authpriv`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ftp`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`local0-local7`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If you would like to collect any facility outside the list, then you may need
    to configure a custom data source in Azure Monitor. In our hands-on exercise,
    we will onboard the LAMP server, which we migrated in *Chapter 4*, *Performing
    migration to Azure*, to the Log Analytics workspace, and then we will configure
    it to collect the syslog.
  prefs: []
  type: TYPE_NORMAL
- en: The first step will be to onboard the virtual machine to send logs to the Log
    Analytics workspace.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a Log Analytics workspace
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The process is very simple—we need to create a Log Analytics workspace and
    connect our virtual machine to the workspace. You can follow the steps outlined
    here to onboard your virtual machine:'
  prefs: []
  type: TYPE_NORMAL
- en: Navigate to the Azure portal and search for Log Analytics workspaces and click
    on that. Once you are in the Log Analytics workspaces blade, click on the New
    button as shown in *Figure 5.11* to create a workspace:![Adding a new workspace
    by clicking on the +New button at the top right](img/B17160_05_11.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Figure 5.11: Adding a new workspace'
  prefs: []
  type: TYPE_NORMAL
- en: Clicking on New will redirect you to the wizard to create a workspace and the
    Basics tab requires basic information such as Subscription, Resource group, Name,
    and Region. You can complete these details as shown in *Figure 5.12* and proceed
    to Pricing tier:![Creating a Log Analytics workspace by clicking on the Review
    + Create button](img/B17160_05_12.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Figure 5.12: Creating a Log Analytics workspace'
  prefs: []
  type: TYPE_NORMAL
- en: 'For Pricing tier, you can keep the default value: `Pay-as-you-go (Per GB 2018)`.
    You can also reserve the capacity reservation if required; however, for this hands-on
    exercise, it is not required.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Finally, you can click on Review + Create and the workspace will be created.
  prefs: []
  type: TYPE_NORMAL
- en: Onboarding an Azure virtual machine
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Now that you''ve created the workspace to which the logs will get ingested,
    the next stage is the virtual machine onboarding. You need to open the workspace
    we created to onboard the virtual machine. You can search for Log Analytics workspace
    in the top search bar and you will be able to see the name of the workspace. Click
    on it and open the workspace. The onboarding steps are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Navigate to Virtual machines under Workspace Data Sources and you'll be able
    to see the virtual machine that we migrated from on-premises. Log Analytics Connection
    will be shown as Not connected, as seen in *Figure 5.13*:![Adding data sources
    to the workspace by navigating Virtual Machines under Workspace Data Sources](img/B17160_05_13.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Figure 5.13: Adding data sources to the workspace'
  prefs: []
  type: TYPE_NORMAL
- en: Click on the virtual machine name and you will be taken to a new page where
    you will be able to see the Connect option, as shown in *Figure 5.14*. Please
    note that in order for the connect operation to succeed, the virtual machine should
    be in the running state, otherwise it will fail. Also, make sure that `walinuxagent`
    is installed, as already recommended in the *Manage and Secure* section, and that
    the agent is listed as Ready under the Properties blade of the virtual machine.
    Click on Connect, after which the extension will be configured on the virtual
    machine:![Connecting lamp-server to Log Analytics](img/B17160_05_14.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Figure 5.14: Connecting to Log Analytics'
  prefs: []
  type: TYPE_NORMAL
- en: If you navigate back to the previous Virtual machines blade, you will be able
    to see that the status has been changed to Connecting, as is visible in *Figure
    5.15*. This process will take some time and Log Analytics extensions will be configured
    on the selected virtual machine:![Verifying the connection status of lamp-server](img/B17160_05_15.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Figure 5.15: Verifying the connection status'
  prefs: []
  type: TYPE_NORMAL
- en: Once the extensions are installed, the virtual machine is onboarded to the Log
    Analytics workspace. You can confirm this by verifying that the status of the
    connection is Connected.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Onboarding is complete; however, we still haven't configured that Log Analytics
    workspace with instructions about what type of event data should be pulled from
    the virtual machine. In the next section, we will configure data collection.
  prefs: []
  type: TYPE_NORMAL
- en: Data collection
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'We have onboarded our virtual machine, and the Log Analytics extension is ready
    to collect the data and ingest it into the Log Analytics workspace. However, we
    need to set up data collection, that is, we need to specify which datasets we
    need to pull from the virtual machine. We can configure the collection as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Navigate back to the Log Analytics workspace we created and select Agents configuration,
    as shown in *Figure 5.16*:![Navigating to data collection by clicking on Agents
    configuration under the Settings blade](img/B17160_05_16.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Figure 5.16: Navigating to the data collection configuration'
  prefs: []
  type: TYPE_NORMAL
- en: Navigate to Linux performance counters and add the recommended counters. Azure
    will present you with a list of recommended performance counter names, as shown
    in *Figure 5.17*. If you require additional counters, you can click on Add performance
    counter and add it. Once done, click on Apply to save the configuration:![Configuring
    performance counters by navigating to Agents configuration | Linux Performance
    counters](img/B17160_05_17.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Figure 5.17: Configuring performance counters'
  prefs: []
  type: TYPE_NORMAL
- en: After configuring the performance counters, you can click on the Syslog tab.
    Clicking on Add facility will list all the facilities available to you, including
    auth, authpriv, and cron. Also, you can specify the logging level for each facility.
    You can add the following facilities as shown in *Figure 5.18*. Once added, click
    on Apply to save the configuration:![Sylog tab configuring syslog facilities](img/B17160_05_18.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Figure 5.18: Configuring syslog facilities'
  prefs: []
  type: TYPE_NORMAL
- en: With that, we have configured the data collection. Now we need to verify whether
    the data is getting ingested into the Log Analytics workspace, and ingestion will
    take some time after completing the onboarding. In the next section, we will run
    some sample queries and see whether we are getting results.
  prefs: []
  type: TYPE_NORMAL
- en: Querying data
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In the previous section, we configured several performance counters and syslog
    facilities that need to be ingested into our Log Analytics workspace. Now, we
    will query these logs using KQL and verify whether we are getting the data ingested
    from the virtual machine.
  prefs: []
  type: TYPE_NORMAL
- en: 'There will be different tables to store the performance, syslog, and other
    data. You can query the logs of the virtual machine by scoping your queries to
    the specific virtual machine. If you run the query from the workspace level, logs
    from all onboarded virtual machines will be returned. Nevertheless, you can change
    the scope from here, too. In our case, there is only one virtual machine onboarded
    to the workspace, so querying from the Virtual machines blade or the Log Analytics
    blade will be the same. However, let''s query from the Virtual machines blade
    to make sure that we are looking at the right scope:'
  prefs: []
  type: TYPE_NORMAL
- en: Navigate to Virtual machines and open the virtual machine we migrated from on-premises
    in *Chapter 4*, *Performing migration to Azure*. From Monitoring, select Logs,
    as shown in *Figure 5.19*:![Navigating to Logs from the Virtual machine blade](img/B17160_05_19.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Figure 5.19: Navigating to Logs from the Virtual machines blade'
  prefs: []
  type: TYPE_NORMAL
- en: To list all the tables in the workspace, you can run a `search` `* | distinct
    $table`, in the query window and see the results in the Results window. An example
    is shown in *Figure 5.20*:![Listing all tables in the Log Analytics workspace](img/B17160_05_20.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Figure 5.20: Listing all tables in the Log Analytics workspace'
  prefs: []
  type: TYPE_NORMAL
- en: In the results, you can see multiple tables, such as `Syslog`, `VMProcess`,
    `VMBoundPort`, `VMConnection`, and `Perf`. Let's query some tables and check the
    results. All the following scripts need to be run on the query window.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Return all informational logs where the `syslog` message contains `rsyslog`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Render a time chart for the `% Used Memory` performance counter:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Return all external connections made by processes, including the destination
    IP and port number:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: You can run any sort of query using the available dataset. KQL is very powerful,
    and it can perform wonders on your dataset. With this exercise, we have reached
    the end of the hands-on lab. In this lab, we onboarded the on-premises virtual
    machine we migrated in *Chapter 4*, *Performing migration to Azure*, to the Log
    Analytics workspace and ingested the performance and syslog into the workspace.
    Furthermore, we queried the ingested data using KQL to obtain some results and
    time charts.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This chapter has covered various details about how to effectively operate Linux
    on Azure. First, we went through the *Optimize* phase, including the ACM and Azure
    Advisor tools. Then, we proceeded to the *Manage & Secure* phase, where we spent
    some time with the data protection functionality as well as the Azure Linux Agent.
  prefs: []
  type: TYPE_NORMAL
- en: Just before the hands-on lab, you also learned how Azure Update Management works
    in conjunction with various Linux distributions' update mechanisms.
  prefs: []
  type: TYPE_NORMAL
- en: We have now covered all the topics regarding assessing, migrating, and operating
    Linux on Azure. What happens when something doesn't work as you expect? Let's
    find out in the next chapter, where we will guide you through troubleshooting
    Linux on Azure.
  prefs: []
  type: TYPE_NORMAL
