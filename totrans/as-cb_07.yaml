- en: Chapter 7. Content Providers and Observers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In most apps, we need to persist data and often use SQLite for this purpose.
  prefs: []
  type: TYPE_NORMAL
- en: A very common situation is that of the list and detail views. By using content
    providers, we do not just provide a way of communication between apps but also
    save ourselves much work in our own app.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, you will learn about:'
  prefs: []
  type: TYPE_NORMAL
- en: Content providers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Consuming and updating data using a content provider
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Changing projections to display **Key Performance Indicators** (**KPIs**) in
    your app
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Communicating with other apps using content providers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If we want to create a new row or if we want to edit a row in the database,
    the app will show the fragment or activity containing the details, where the user
    can enter or modify some text and other values. Once the record has been inserted
    or updated, the list needs to know about the changes. Telling the list activity
    or fragment about the changes is not hard to do, but there is a more elegant way
    to accomplish this. For this, and for other reasons that we will find out about
    later, we will examine what content providers are about.
  prefs: []
  type: TYPE_NORMAL
- en: The Android content provider framework allows us to create a much better design
    for our app. One of its features is that it allows us to notice when certain data
    has been changed. That could work even across different applications.
  prefs: []
  type: TYPE_NORMAL
- en: Content providers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Building a content provider is a really smart thing to do. The content provider
    API comes with an interesting feature that allows applications to observe changes
    in a data set.
  prefs: []
  type: TYPE_NORMAL
- en: Content providers connect data in one process with code running in another process,
    even between two completely different applications if you want. If you ever wrote
    code to pick an image from the Gallery app, you may have experienced this behavior.
    Some component manipulates the persistent dataset that other components depend
    upon. A content provider can use many different ways to store data, which can
    be stored in a database, in files, or even over a network.
  prefs: []
  type: TYPE_NORMAL
- en: Datasets are identified by unique URIs, so it is possible to ask for notifications
    if a certain URI is changed. Here is where the observer pattern comes in.
  prefs: []
  type: TYPE_NORMAL
- en: The observer pattern is a common software design pattern in which an object
    (the subject) has one or more dependents (the observers, also known as the listeners)
    that will automatically be notified of any state changes.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Design patterns
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: To learn more about this and other **object-oriented** (**OO**) design patterns,
    you can have a look at [http://www.oodesign.com/observer-pattern.html](http://www.oodesign.com/observer-pattern.html).
  prefs: []
  type: TYPE_NORMAL
- en: RxJava
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: RxJava is a very interesting library and is available in an Android flavor as
    well. Reactive programming has principal similarities with the observer pattern.
    The basic building blocks of reactive code are also Observables and Subscribers.
  prefs: []
  type: TYPE_NORMAL
- en: 'To learn more about Rx and RxJava, you can visit these web sites:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://github.com/reactivex/rxandroid](https://github.com/reactivex/rxandroid)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://github.com/ReactiveX/RxJava/wiki/How-To-Use-RxJava](https://github.com/ReactiveX/RxJava/wiki/How-To-Use-RxJava)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[http://blog.danlew.net/2014/09/15/grokking-rxjava-part-1/](http://blog.danlew.net/2014/09/15/grokking-rxjava-part-1/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[Chapter 8](ch08.html "Chapter 8. Improving Quality") , *Improving Quality*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Consuming and updating data using a content provider – daily thoughts
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To demonstrate how to create and use content providers we will create an app
    to store what is on your mind and how happy you are on a daily basis.
  prefs: []
  type: TYPE_NORMAL
- en: Yes, there are apps doing that; however, if you want to create an app to record
    sport notes and scores instead, feel free to modify the code as it involves basically
    the same functionality.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we will store new thoughts and retrieve them using a content
    provider. For the various elements of the app, we will be using fragments because
    they will neatly demonstrate the effect of the observer pattern.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For this recipe, you just need to have Android Studio up and running and a physical
    or virtual Android device.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let''s see how to set up a project using a content provider. We will be using
    the Navigation Drawer template for it:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a new project in Android Studio and name it `DailyThoughts`. Click on
    the **Next** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the **Phone and Tablet** option and click on the **Next** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Choose **Navigation Drawer Activity** and click on the **Next** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Accept all values on the **Customize the Activity** page and click on the **Finish**
    button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Open the `strings.xml` file within the `res/values` folder. Modify the strings
    for the entries that start with `title_section`. Replace them with the menu items
    needed for our app. Also replace the `action_sample` string:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Open the `NavigationDrawerFragment` file, and in the `onCreate` method, modify
    the strings for the adapter accordingly:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: In the same class, within the `onOptionsItemSelected` method, remove the second
    `if` statement that is displaying a toast. We do not need it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Open `main.xml` from the `res/menu` folder. Remove the item for the settings
    and modify the first item so it will use the `action_add` string. Also rename
    it''s ID and add a neat icon for it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'In the `MainActivity` file, in the `onSectionAttached` section, apply the correct
    strings for the different options:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a new package named `db`. Within this package, create a new class, `DatabaseHelper`,
    that extends the `SQLiteOpenHelper` class. It will help us to create a new database
    for our application. It will contain just one table: `thoughts`. Each `Thought
    table` will have an id, a name and a happiness rating:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Create another package and name it `providers`. Within this package, create
    a new class called `ThoughtsProvider`. This will be our content provider for all
    our daily thoughts. Make it a descendant of the `ContentProvider` class.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: From the **Code** menu, choose the **Implement methods** option. In the dialog
    that appears, all available methods are selected. Accept this suggestion and click
    on the **OK** button. Your new class will be extended with these methods.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'On top of the class, we will create some static variables:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Add a private member, `db`, that refers to the `SQLiteDatabase` class, and
    modify the `onCreate` method. We create a new database helper:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Queries
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Next, implement the `query` method. A query returns a cursor object. A cursor
    represents the result of the query and points to one of the query results so the
    results can be buffered efficiently as it does not need to load data into memory:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `setNotificationUri` call registers the instruction to watch a content URI
    for changes.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will implement the other methods using the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Implement the `getType` method. The `dir` directory suggests we want to get
    all thought records. The `item` term indicates that we are looking for a particular
    thought:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Implement the `insert` method. It will create a new record based on the provided
    values, and if this succeeds we will be notified about the change:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'The `delete` and `update` methods are out of scope for this recipe, so we will
    not implement them now. Challenge: Add your own implementation here.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Open the `AndroidManifest.xml` file and add add the `provider` tag within the
    `application` tag:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: For security reasons, you should use `false` as the value for the exported property
    in most cases. The reason why we set the value of this property to `true` here
    is that later we will create another app that will be able to read the content
    from this app.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the permission for other apps to read data. We will use that in the last
    recipe. Add it outside the `application` tag:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Open the `strings.xml` file and add new strings to it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Create two new layout files: `fragment_thoughts.xml` for our list of thoughts
    and `fragment_thoughts_detail` to enter new thoughts.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Define the layout for `fragment_thoughts.xml`. A `ListView` widget is just
    fine to display all thoughts:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'The layout for `fragment_thoughts_detail.xml` will contain the `EditText` and
    `RatingBar` widgets so we can enter what we are thinking and how happy how we
    currently are:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'Also create a layout for the rows in the list of thoughts. Name it `adapter_thought.xml`.
    Add text views to display an ID a title, or name and the rating:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a new package, name it: `fragments`, and add two new classes to it:
    `ThoughtsDetailFragment` and `ThoughtsFragment`, both of which will be descendants
    of the `Fragment` class.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'To the `ThoughtsFragment` class, add the `LoaderCallBack` implementation:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: From the **Code** menu, choose **Implement methods**, accept the suggested methods,
    and click on the **OK** button. It will create the `onCreateLoader`, `onLoadFinished`,
    and `onLoaderReset` implementations.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add two private members that will hold the list view and an adapter:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'Override the `onCreateView` method, where we will inflate the layout and get
    a reference to the list view. From here we also will call the `getData` method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: Loader manager
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The following steps will help us to add a loader manager to our app:'
  prefs: []
  type: TYPE_NORMAL
- en: Implement the `getData` method. We will use the `initLoader` method of `loaderManager`
    for that. The projection defines the fields we want to retrieve, and the target
    is an array of ID's within the `adapter_thought_title` layout, which will save
    us some work using the `SimpleCursorAdapter` class.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'After the `initLoader` call, a new loader needs to be created. For this we
    will have to implement the `onLoadFinished` method. We use the same projection
    as we did for the adapter and we will create a `CursorLoader` class using the
    `uri` content of the `ThoughtsProvider` we have created in the preceding steps.
    We will sort the outcome by ID (descending):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'In `onLoadFinished`, notify the adapter about the loaded data:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: Finally, let's add the implementation for the `onLoaderReset` method. In this
    situation, the data is no longer available so we can delete the reference.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s have a look at the `ThoughtsDetailFragment`method. Override the `onCreateView`
    method, inflate the layout, and add an on-click listener for the save button in
    the layout:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'Add the `addThought` method. We will create new content values based on the
    input via the `EditText` and `RatingBar` field We will use the `insert` method
    of the content resolver based on the provided URI. After inserting the new record,
    we will clear the input:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'Again it is time to glue things together. Open the `MainActivity` class and
    add two private members that will refer to the fragments we have created as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'Add two private members that will initialize them if needed, and return the
    instance:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'Remove the implementation for `onNavigationDrawerItemSelected` and a new one
    to display the list of thoughts. We will implement the KPI option later:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'In the `onOptionsItemSelected` method, test whether the id is `action_add`,
    and if so, display the details fragment. Add the implementation just after the
    line where we get the id:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Instead of `replace`, we use `add` here. We want the details fragment to appear
    on top of the stack.
  prefs: []
  type: TYPE_NORMAL
- en: 'After saving details, the fragment has to be removed again. Open `ThoughtsDetailFragment`
    one more time. To the end of the `addThought` method, add this to do the trick:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'However, it would be better to let the activity handle the displaying of fragments
    since they are intended to be helpers to an activity. Instead, we will create
    a listener for an `onSave` event. On top of the class, add a `DetailFragmentListener`
    interface. Also create a private member and a setter for it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'Add these lines to the end of the `addThought` member to let the listener know
    things have been saved:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'Go back to the `MainActivity` class, and add a listener implementation for
    it. You could use the **Implement methods** option from the **Code** menu for
    it if you want:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'To tell the detail fragment that the main activity is listening, scroll to
    the `getThoughtDetailFragment` class and call the `setListener` method right after
    the creation of a new detail fragment:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'Now run the app, choose **Thoughts list** from the navigation drawer, and click
    on the plus sign to add new thoughts. Following screenshot gives the example of
    adding thought:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Loader manager](img/B04299_07_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: We do not need to tell the fragment that contains the list about the new thought
    we have created in the detail fragment. Using a content provider with an observer,
    the list will be updated automatically.
  prefs: []
  type: TYPE_NORMAL
- en: This way we can accomplish more and achieve less error-prone functionality writing
    less code, which is exactly what we want. It allows us to improve the quality
    of our code.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Refer [Chapter 5](ch05.html "Chapter 5. Size Does Matter"), *Size Does Matter*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Refer [Chapter 8](ch08.html "Chapter 8. Improving Quality"), *Improving Quality*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Change projections to display KPIs in your app
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We can use a different projection and the same observer pattern for displaying
    some KPIs. Actually that is pretty easy, as we will see in this recipe.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For this recipe, you need to have completed the previous one successfully.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We will continue working on the app from the previous recipe and we will add
    a new view to display the KPIs:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the project you have worked on in the previous recipe.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add a new layout, `fragment_thoughts_kpi.xml`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: 'Add a new fragment and name it `ThoughtsKpiFragment`. It descends from the
    `Fragment` class. We will be using the `LoaderManager` here as well so it will
    basically look like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: 'Because we will be using two loaders to display two different KPIs, we are
    going to add two constant values first:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: 'Override the `onCreate` method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: 'Create the `getKpis` method (where we initialize the loader twice for different
    purposes):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: 'Add the implementation for the `onCreateLoader` method. This time the projection
    depends on the id of the loader. The projection is just like you would expect
    it to be if it was plain SQL. We are counting the number of rows and we are calculating
    the average happiness:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: 'Once the data comes in, we arrive at the `onLoadFinished` method and will call
    methods to display the data, if there is any:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: 'Add the `setCountedThoughts` and `setAvgHappiness` methods. If the fragment
    is still attached to the activity, we will update the text view or the rating
    bar:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: 'In the `MainActivity` file, add a private member for the KPI fragment:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a method `getKpiFragment`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: 'Locate the `onNavigationDraweItemSelected` method and add this to the `if`
    statement:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: 'Run your app. Now we have some neat statistics in our thoughts app:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/B04299_07_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: In this and in the previous recipe, we have seen how easy working with data
    becomes once you have grokked the concept of content providers.
  prefs: []
  type: TYPE_NORMAL
- en: So far we did all this within the same app; however, since we are already prepared
    to export the content provider, let us find out how to read our thoughts in a
    different app. Let's do that now.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Refer [Chapter 5](ch05.html "Chapter 5. Size Does Matter"), *Size Does Matter*
  prefs: []
  type: TYPE_NORMAL
- en: Refer [Chapter 8](ch08.html "Chapter 8. Improving Quality"), *Improving Quality*
  prefs: []
  type: TYPE_NORMAL
- en: Communicate with other apps using content providers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If you read Google's documentation about content providers, you will notice
    that a content provider basically is intended to supply data from one application
    to others on request. Such requests are handled by the methods of the `ContentResolver`
    class.
  prefs: []
  type: TYPE_NORMAL
- en: We will create a new app that will read our daily thoughts from the other one.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For this recipe, you need to have completed the previous one successfully. Make
    sure you have added some thoughts to your app as well or there'll be nothing to
    read otherwise, as Captain Obvious could tell us.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: First we will create a new app. It is going to read our thoughts. That's for
    sure!
  prefs: []
  type: TYPE_NORMAL
- en: Create a new project in Android Studio, name it `DailyAnalytics`, and click
    on the **OK** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select **Phone and tablet** and click on the **Next** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Choose **Blank Activity** and click on the **Next** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Accept all values in the **Customize the activity** view and click on the **Finish**
    button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Open the `AndroidManifest.xml` file and add the permission required to communicate
    with the content provider from the `DailyThought` app:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: 'Open the `activity_main.xml` layout and change the `id` of the `TextView` app
    to `main_kpi_count`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: 'In the `MainActivity` class, add the `LoaderCallBack` implementation:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: 'Call `initLoader` at the end of the `onCreate` method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: 'Add an implementation for the `onCreateLoader` method. It works pretty much
    in the same way as for the app the content provider is part of:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: 'In the `onLoadFinished` method, we can display some analytics based on what
    you have entered in the other app:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the app and see all your thoughts appearing here as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/B04299_07_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Scary, isn't it? Using content providers, it is pretty easy to share data between
    different apps. This is how many apps such as contacts or the Gallery work.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We have learned how content providers work, and we had a sneak peak at the observer
    pattern. Using this and other patterns could improve the quality of our app.
  prefs: []
  type: TYPE_NORMAL
- en: Now things will really become serious. Avoid potential errors, reduce the amount
    of code you need to write, and make it work on any Android device! We will find
    out how to do that in the next chapter.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Refer to [Chapter 8](ch08.html "Chapter 8. Improving Quality"), *Improving Quality*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
