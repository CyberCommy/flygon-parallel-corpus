- en: Preface
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Automating tests for user interfaces has always been the holy grail of programming.
    Now, using Zombie.js and Mocha you can quickly create and run your tests, making
    it simple to test even the smallest changes. Increase your confidence in the code
    and minimize the number of times you have to use a real browser while you develop.
  prefs: []
  type: TYPE_NORMAL
- en: '*Using Node.js for UI Testing* is a quick yet thorough guide on how to automatically
    test your web app, keeping it rock-solid and bug-free. You will learn how to simulate
    complex user behavior and verify that your application behaves correctly.'
  prefs: []
  type: TYPE_NORMAL
- en: You will create a web app in Node.js that uses complex user interactions and
    AJAX; by the end of this book you will be able to fully test it from the command
    line. Then you will start creating the user interface tests for this application
    using Mocha as a framework and Zombie.js as a headless browser.
  prefs: []
  type: TYPE_NORMAL
- en: You will also create a complete test suite, module by module, testing simple
    and complex user interactions.
  prefs: []
  type: TYPE_NORMAL
- en: What this book covers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '[Chapter 1](ch01.html "Chapter 1. Getting Started with Zombie.js"), *Getting
    started with Zombie.js*, helps you to understand how Zombie.js works and what
    types of applications can be tested with it.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 2](ch02.html "Chapter 2. Creating a Simple Web App"), *Creating a
    Simple Web App*, explains how to create a simple web app using Node.js, CouchDB,
    and Flatiron.js.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 3](ch03.html "Chapter 3. Installing Zombie.js and Mocha"), *Installing
    Zombie.js and Mocha*, teaches you about creating the base structure of a test
    environment for a web application using Zombie.js and Mocha.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 4](ch04.html "Chapter 4. Understanding Mocha"), *Understanding Mocha*,
    helps you to understand how you can use Mocha to create and run asynchronous tests.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 5](ch05.html "Chapter 5. Manipulating the Zombie Browser"), *Manipulating
    the Zombie Browser*, explains how Zombie.js is used to create a simulated browser
    that can load an HTML document and perform actions on it.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 6](ch06.html "Chapter 6. Testing Interactions"), *Testing Interactions*,
    explains how to trigger events in a document and how to test the results of document
    manipulations.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 7](ch07.html "Chapter 7. Debugging"), *Debugging*, teaches you how
    to inspect the internal state of your application by using the Zombie browser
    object and some other techniques.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 8](ch08.html "Chapter 8. Testing AJAX"), *Testing AJAX*, is not present
    in the book but is available as a free download at the following link:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://www.packtpub.com/sites/default/files/downloads/0526_8_testingajax.pdf](http://www.packtpub.com/sites/default/files/downloads/0526_8_testingajax.pdf)'
  prefs: []
  type: TYPE_NORMAL
- en: What you need for this book
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To use this book you will need a PC running a modern mainstream operating system
    such as Windows, Mac, or Linux.
  prefs: []
  type: TYPE_NORMAL
- en: Who this book is for
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This book is for programmers who use and somewhat understand JavaScript, especially
    having some experience with event-driven programming. For instance, if you have
    used JavaScript in the context of a web page for setting up event callbacks and
    making AJAX calls, you will experience a smoother learning curve. Alternatively,
    some experience in using Node.js will also ease the learning curve, but is not
    an absolute requirement.
  prefs: []
  type: TYPE_NORMAL
- en: Conventions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this book, you will find a number of styles of text that distinguish between
    different kinds of information. Here are some examples of these styles, and an
    explanation of their meaning.
  prefs: []
  type: TYPE_NORMAL
- en: 'Code words in text, database table names, folder names, filenames, file extensions,
    pathnames, dummy URLs, user input, and Twitter handles are shown as follows: "
    To access a CouchDB database from Node you will use a library called `nano`."'
  prefs: []
  type: TYPE_NORMAL
- en: 'A block of code is set as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'When we wish to draw your attention to a particular part of a code block, the
    relevant lines or items are set in bold:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Any command-line input or output is written as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '**New terms** and **important words** are shown in bold. Words that you see
    on the screen, in menus or dialog boxes for example, appear in the text like this:
    "clicking the **Next** button moves you to the next screen".'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Warnings or important notes appear in a box like this.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Tips and tricks appear like this.
  prefs: []
  type: TYPE_NORMAL
