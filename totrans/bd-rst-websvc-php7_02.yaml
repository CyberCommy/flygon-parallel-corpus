- en: PHP7, To Code It Better
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: PHP7 came with many new features and changes. However, none of them were specifically
    for REST or web services. In fact, REST does not have any direct relation with
    language constructs. This is because REST is an architecture, while a language
    is there to provide constructs for implementation. So, does that mean PHP7 has
    some construct or feature which can make this implementation better? Yes and no.
    It depends on what we mean by implementation.
  prefs: []
  type: TYPE_NORMAL
- en: If we mean just getting a request and returning a response then No, there is
    no such specific feature. But, any RESTful Web Service is related to an entity,
    and an entity can have its own logic. So to provide RESTful Web Service for that
    entity, we need to write that logic as well. For this purpose, we will need to
    write more PHP code than just getting a request and returning a response. So to
    keep the code simple and clean, yes, PHP7 offers us many things.
  prefs: []
  type: TYPE_NORMAL
- en: 'I assume that you have the basic knowledge of PHP, as knowing PHP basics is
    a prerequisite of this book. So, we will not be looking at PHP5\. In this chapter,
    we will be looking at many of the PHP7 features and changes, are either very important
    to know or we will be using in our code. We are directly going into these features.
    We are not going in to the details of installing or upgrading to PHP7 because
    there are dozens of tutorials available for that on the internet. Here is a list
    of features and changes we are going to discuss:'
  prefs: []
  type: TYPE_NORMAL
- en: Scalar type declaration
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Return type declaration
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Null coalescing operator
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Spaceship operator
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Group use statement
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Generator-related new features
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Generator return expression
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Generator delegation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Anonymous classes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Closure::call()` function'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Errors and exceptions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: PHP7.1 features
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Nullable types
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Symmetric array destructuring
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Support for keys in `list()`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Multi-catch exception handling
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Scalar type declaration
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In PHP7, we can now declare the type of parameters being passed to a function.
    They could be only user defined classes in previous versions, but now they can
    be scalar types as well. By scalar type, we mean basic primitive types, such as
    `int`, `string`, and `float`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Previously, to validate an argument passed to a function, we needed to use
    some sort of `if-else`. So, we used to do something like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Here we used `if` to make sure that the type of the variables `$num1` and `$num2`
    is `int`, otherwise we are throwing an exception. If you are a PHP developer from
    the earlier days who likes to write as little code as possible, then chances are
    that you were not even checking the type of parameter. However, if you do not
    check the parameter type then this can result in a runtime error. So to avoid
    this, one should check the parameter type and that is what PHP7 has made easier.
  prefs: []
  type: TYPE_NORMAL
- en: 'This is how we validate parameter type now in PHP7:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: As you can see now, we simply type hint as `int` and we do not need to validate
    each parameter separately. If an argument will not be an integer, it should throw
    an exception. However, you can see that it didn't show `TypeError` when `2` was
    passed as a string and instead it did an implicit conversion and assumed it as
    `int 2`. It did so because, by default, the PHP code was running in coercive mode.
    If strict mode is enabled, writing `"2"` instead of 2 will cause `TypeError` instead
    of the implicit conversion. To enable a strict mode, we need to use the `declare`
    function at the start of the PHP code.
  prefs: []
  type: TYPE_NORMAL
- en: 'This is how we can do this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Return type declaration
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Just like parameter type, there is also a return type; it is also optional but
    it is a safe practice to specify the return type.
  prefs: []
  type: TYPE_NORMAL
- en: 'This is how we can declare a return type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'As you can see in the case of `2.5` and `4`, it should be `6.5`, but as we
    have specified `int` as a return type, it is performing implicit type conversion.
    To avoid this and to obtain an error instead of an implicit conversion, we can
    simply enable a strict type, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Null coalescing operator
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `Null` coalescing operator (`??`) is a syntactical sugar, but a very important
    one. Previously in PHP5 when we were having some variable which could be undefined,
    we used the `ternary` operator as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'However, now in PHP7, we can simply write:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Although this is just a syntactical sugar, it can save time and make code cleaner.
  prefs: []
  type: TYPE_NORMAL
- en: Spaceship operator
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The spaceship operator is also a shortcut for comparison and is very useful
    in user defined sorting functions. I am not going into detail about this, as it
    is already explained enough in its documentation: [http://php.net/manual/en/migration70.new-features.php#migration70.new-features.spaceship-op](http://php.net/manual/en/migration70.new-features.php#migration70.new-features.spaceship-op).'
  prefs: []
  type: TYPE_NORMAL
- en: Group use declarations
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Classes, functions, and constants, which are in the same namespace, can be
    now imported in a single `use` statement. Previously, multiple `use` statements
    were required for that. Here is an example to understand it better:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: As you can see from this example, how convenient the group use statement is,
    it is clearly visible. Curly braces with comma separated values are used to group
    values such as `{classA, classB, classC as C}`, resulting in the grouped `use`
    statement, instead of separately using the `use` statement for all these three
    classes, three times.
  prefs: []
  type: TYPE_NORMAL
- en: Generator-related features
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Although generators came in PHP5.5, most PHP developers don't use them and most
    probably do not know about generators. So, let's first discuss generators.
  prefs: []
  type: TYPE_NORMAL
- en: What are generators?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'As stated in the PHP manual:'
  prefs: []
  type: TYPE_NORMAL
- en: Generators provide an easy way to implement simple iterators without the overhead
    or complexity of implementing a class that implements the iterator interface.
  prefs: []
  type: TYPE_NORMAL
- en: 'OK, here is a more detailed and easy-to-understand definition from the same
    source, [php.net](http://php.net):'
  prefs: []
  type: TYPE_NORMAL
- en: A generator allows you to write code that uses foreach to iterate over a set
    of data without needing to build an array in memory, which may cause you to exceed
    a memory limit, or require a considerable amount of processing time to generate.
    Instead, you can write a generator function, which is the same as a normal function,
    except that instead of returning once, a generator can yield as many times as
    it needs to in order to provide the values to be iterated over.
  prefs: []
  type: TYPE_NORMAL
- en: For example, you can simply write a function returning a lot of different numbers
    or values. But, the problem is that if a lot of different values means millions
    of values, then making and returning an array with those values is not efficient,
    because it will consume a lot of memory. So in that case, using `generator` makes
    more sense.
  prefs: []
  type: TYPE_NORMAL
- en: 'To understand, see this example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: As you can see, there is a `yield` statement in code. It is just like the return
    statement but in generator, `yield` does not return all the values at once. It
    only returns a value every time yield executes, and yield is called only when
    the `generator` function is called. Also, every time yield executes, it resumes
    the code execution from where it was stopped the last time.
  prefs: []
  type: TYPE_NORMAL
- en: Now we have an understanding of generators, so let's look into the PHP7 features
    related to generators.
  prefs: []
  type: TYPE_NORMAL
- en: Generator return expression
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'As we have seen earlier, on calling a generator function, it returns a value
    that is being returned by the yield expression. Before PHP7, it didn''t have the
    `return` keyword returning a value. But since PHP7.0, it is possible to use the
    return expression as well. Here, I have used an example from the PHP documentation,
    as it explains it very well:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'It will give the output as:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'So it clearly shows that calling a generator function in `foreach` will not
    return the `return` statement. Instead, it will just return at every yield. To
    get the `return Value`, this syntax: `$gen->getReturn()` can be used.'
  prefs: []
  type: TYPE_NORMAL
- en: Generator delegation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'As functions can call each other, similarly a generator can also delegate to
    another generator. Here is how a generator delegates:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Here, `gen2()` is another generator being called in `gen()`, so a third yield
    in `gen()`, that is `yield from gen2();`, will transfer control to `gen2()`. So
    with that, it will start using yield from `gen2()`.
  prefs: []
  type: TYPE_NORMAL
- en: Note that `yield from` is only usable with arrays, traversable, or generators.
    Using another function (not generator) in `yield from` will result in a fatal
    error.
  prefs: []
  type: TYPE_NORMAL
- en: You can just consider it to be similar to how we can call a function in another
    function.
  prefs: []
  type: TYPE_NORMAL
- en: Anonymous classes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Just like anonymous functions, now there are anonymous classes in PHP. Note
    that if an object is required, then most probably we need some specific type of
    object and not just a random one, for example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Note that a specific type of object was required in the `useApp()` function,
    and this type `App` couldn't be defined if it wasn't a class. So, where and why
    would we use an anonymous class with some specific functionality in it? We may
    need it in case we need to pass a class implementing some specific interface or
    extending some parent class, but only want to have this class used in one place.
    In that case, we can use an anonymous class.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is the same example given in the PHP7 documentation so that it will be
    easy for you to follow up:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: As you can see, although an anonymous class object is passed here in `$app->setLogger()`,
    it could be a named class object as well. So, an anonymous class object can be
    replaced by a named class object. However, it is better to use an anonymous class
    object when we don't want to use the object of the same class again.
  prefs: []
  type: TYPE_NORMAL
- en: Closure::call()
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Binding an object scope with a closure is an efficient way to use a closure
    with different objects. At the same time, it is also a simple way to use different
    closures having different behaviors for an object in different places. This is
    because it binds the object scope with a closure at runtime without inheritance,
    composition, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: 'However, previously we didn''t have the `Closure::call()` method; we had something
    like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'But now with `Closure::call()`, the same code can be written as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Both code snippets perform the same action. However, PHP7+ code is shorthand.
    In case you need to pass some parameter to closure functions, you can pass it
    after objects as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: Errors and exceptions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In PHP7, most errors are now reported as error exceptions. Only a few fatal
    errors halt script execution; otherwise, if you are carrying out error or exception
    handling, it will not halt the script. This is because now the `Errors` class
    implements a `Throwable` interface just like the `Exception` class, which also
    implements `Throwable`. So now, in most cases, fatal errors can be avoided through
    exception handling.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here are some sub-classes of the error class:'
  prefs: []
  type: TYPE_NORMAL
- en: '`TypeError`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ParseError`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ArithmeticError`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`DivisionByZeroError`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`AssertionError`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'This is how you can simply catch an error and handle it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'Here, `$error->getMessage()` is a method that is actually returning this message
    as a string. In our preceding example, the message will be similar to this: `Call
    to undefined function fn()`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'This is not the only method you can use. Here is a list of methods that are
    defined in the `Throwable` interface; you can use them accordingly during error/exception
    handling. After all, the `Exception` and `Error` classes both implement the same
    `Throwable` interface:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: PHP7.1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Till now, the preceding features that we discussed were PHP7.0 related. However,
    the recent version of PHP7 is PHP7.1, so it is worth discussing the important
    features of PHP7.1 as well, at least the features which we will use, or features
    that are worth knowing and using somewhere in our work.
  prefs: []
  type: TYPE_NORMAL
- en: 'In order to run the following code, you need to have PHP7.1 installed so, to
    do this, you can use the following commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: Remember that this is not an official upgrade path. The PPA is well-known, and
    is relatively safe to use.
  prefs: []
  type: TYPE_NORMAL
- en: Nullable types
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If we are type hinting data types of parameters or return types of function,
    then it is important that there should be a way to pass or return the `NULL` data
    type instead of type mentioning as parameter or return type.
  prefs: []
  type: TYPE_NORMAL
- en: There can be different scenarios when we may need this, but always what we need
    to do is place a `?` before the data type. Let's say we want to type hint `string`;
    if we want to make it nullable, that is to allow `NULL` as well, we will just
    type hint it as the `?` string.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: Symmetric array destructuring
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'It is not a big feature, but it is handy shorthand for `list()`. So it can
    be quickly seen in the following example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: Support for keys in list()
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As you can see in the previous example, `list()` works with an array and assigns
    to variables in the same order. However, as per PHP7.1, `list()` now supports
    keys. As `[]` is shorthand for `list()`, `[]` also supports keys.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is an example for the preceding description:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: Here, the ID `$firstId` will have `7` and `$firstName` will have `Haafiz` after
    the preceding code execution, no matter if either `list()` style is used or `[]`
    style is used.
  prefs: []
  type: TYPE_NORMAL
- en: Multi-catch exception handling
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This one is an interesting feature in PHP7.1\. It was previously possible but
    was performed in multiple steps. Now, instead of just catching one exception at
    a time and handling that, there is a multi-catch exception handling facility available.
    The syntax can be seen here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: As you can see here, there is a pipe sign separating these two exceptions. So,
    this pipe sign `|` separates multiple exceptions. Here there are just two exceptions
    in the example, but there can be more than that.
  prefs: []
  type: TYPE_NORMAL
- en: More resources
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We discussed new features of PHP7 and PHP 7.1 (recent version of PHP7) that
    we either found very important to discuss or which we are going to use in the
    rest of the book. However, we didn''t discuss PHP7 features completely. You can
    find the PHP7 features list on [php.net](http://php.net): [http://php.net/manual/en/migration70.new-features.php](http://php.net/manual/en/migration70.new-features.php).'
  prefs: []
  type: TYPE_NORMAL
- en: 'Here, you can find all the new features of PHP 7.1: [http://php.net/manual/en/migration71.new-features.php](http://php.net/manual/en/migration71.new-features.php).'
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we discussed important PHP7 features. Also, we covered new
    PHP7.1 features. This chapter covers the fundamentals which will be used in the
    rest of this book. Note that using PHP7 features is not necessary, but it helps
    us to write simplified code efficiently.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will start creating a RESTful API in PHP as we discussed
    in [Chapter 1](42e167df-3aca-4f21-8d1d-c39d5865ab39.xhtml), *RESTful Web Services,
    Introduction and Motivation*, while utilizing some of the PHP7 features.
  prefs: []
  type: TYPE_NORMAL
