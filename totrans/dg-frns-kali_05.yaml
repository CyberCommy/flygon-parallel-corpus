- en: Evidence Acquisition and Preservation with DC3DD and Guymager
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous chapter, we learned that documentation and proper procedures
    are key in any investigation. These ensure the integrity of the investigation
    by providing proof of data authenticity and preservation of the original evidence
    and documentation, which can be used to achieve the same exact results if usage
    of tools and methods are repeated.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we will demonstrate forensically sound techniques for the acquisition
    of data using Bitstream copies inclusive of creating data hashes.
  prefs: []
  type: TYPE_NORMAL
- en: The first tool we will use for acquisition is called **DC3DD** (**Department
    of Defense Cyber Crime Center**). DC3DD is a patch of the very popular Data Dump
    or DD tool, used for forensic acquisition and hashing.
  prefs: []
  type: TYPE_NORMAL
- en: 'These are the features of **Data Dump** (**DD**):'
  prefs: []
  type: TYPE_NORMAL
- en: Bitstream (raw) disk acquisition and cloning
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Copying disk partitions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Copying folders and files
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Hard disk drive error checking
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Forensic wiping of all data on hard disk drives
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We will then explore another very popular acquisition tool called Guymager,
    which offers many of the same features in a GUI.
  prefs: []
  type: TYPE_NORMAL
- en: Drive and partition recognition in Linux
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Users new to Kali or any Linux variations may find that the drive and partition
    recognition and naming in Kali are different to that of Windows devices.
  prefs: []
  type: TYPE_NORMAL
- en: 'A typical device in Linux can be addressed or recognized as `/dev/sda`, whereas
    drives in Windows are usually recognized as `Disk 0` and `Disk 1`, and so on:'
  prefs: []
  type: TYPE_NORMAL
- en: '`/dev`: Refers to the path of all devices and drives that can be read from
    or written to, recognized by Linux'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`/sda`: Refers to **SCSI** (**Small Computer Systems Interface**), SATA, and
    USB devices'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The **sd** stands for **SCSI Mass-Storage Driver**, with the letter after representing
    the drive number:'
  prefs: []
  type: TYPE_NORMAL
- en: '`sda`: Drive `0` or the first drive recognized'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`sdb`: The second drive'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'While Windows recognizes partitions as primary, logical, and extended, Linux
    partitions are recognized as numbers, after the drive letter:'
  prefs: []
  type: TYPE_NORMAL
- en: '`sda1`: Partition 1 on the first disk (`sda`)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`sda2`: Partition 2 on the first disk'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`sdb1`: Partition 1 on the second disk (`sdb`)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`sdb2`: Partition 2 on the second disk'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Device identification using the fdisk command
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Before we get started using DD, I need to again draw your attention to one of
    the features of DD, being the ability to wipe data, partitions, and drives. Hence,
    you may find that DD is sometimes also fondly referred to as the **Data Destroyer**.
    Be sure to always first identify your devices, partitions, input and output files,
    and parameters when using DD and DC3DD.
  prefs: []
  type: TYPE_NORMAL
- en: For the exercises in this chapter, I'll be using an old 2 GB flash drive for
    the acquisition process using DC3DD. To list your devices and ensure that you
    are aware of them before performing any acquisition operations, the `fdisk -l`
    command should be run before any other. The `sudo fdisk -l` command may have to
    be used if the previous one does not work.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the following screenshot, the `fdisk -l` command has been run before attaching
    the 2 GB flash drive to list the devices already connected. There is one hard
    disk listed as `sda`. The Primary partition is listed as `sda1`, with the `Extended`
    and `Linux swap` partitions listed as `sda2` and `sda5`, respectively:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/387e13fd-446b-405b-909d-17f038efa156.png)'
  prefs: []
  type: TYPE_IMG
- en: 'After attaching the 2 GB flash drive for acquisition, the `fdisk -l` command
    was run yet again and can be seen in the following screenshot with these details:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Disk**: `sdb`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Size**: `1.9 GB`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Sector size**: `512 bytes`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Filesystem**: `FAT32`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/28546d27-fa7c-44a8-a2a4-488e6e700fd5.png)'
  prefs: []
  type: TYPE_IMG
- en: 'As seen in the previous screenshots (and also explained earlier in this chapter),
    Kali Linux recognizes two devices:'
  prefs: []
  type: TYPE_NORMAL
- en: '`sda`: Primary hard disk with three partitions'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`sdb`: Flash drive to be forensically acquired or imaged'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Now that we've distinguished and become certain of which drive is to be imaged
    (`sdb`) we can begin the forensic imaging using DC3DD.
  prefs: []
  type: TYPE_NORMAL
- en: Although I have used an older 2 GB flash drive to demonstrate the usage of DC3DD,
    you can use any drive (portable or otherwise) to practice using the tools in this
    chapter. Be sure to use the `fdisk -l` command to identify your drives and partitions.
  prefs: []
  type: TYPE_NORMAL
- en: Maintaining evidence integrity
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In an effort to provide proof that the evidence was not tampered with, a hash
    of the evidence should be provided before and during, or after, an acquisition.
  prefs: []
  type: TYPE_NORMAL
- en: In Kali Linux, we can use the `md5sum` command followed by the path of the device,
    to create an MD5 hash of the evidence/input file. For example, `md5sum /dev/sdx`.
  prefs: []
  type: TYPE_NORMAL
- en: You may also try the command with superuser privileges by typing `sudo md5sum
    /dev/sdx`.
  prefs: []
  type: TYPE_NORMAL
- en: 'For this example, the 2 GB flash drive that I''ll be using (named `test_usb`)
    is recognized as `sdb`, and so the command I will be using, is shown in the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/73cf392e-6c40-47e5-a8d9-76ce6eca747a.png)'
  prefs: []
  type: TYPE_IMG
- en: In the previous example, the output of the `md5sum` of the 2 GB flash drive
    is displayed as `9f038....1c7d3  /dev/sdb.` When performing the acquisition or
    forensic imaging of the drive using DC3DD, we should also have that exact result
    when hashing the created image file output to ensure that both the original evidence
    and the copy are exactly the same, thereby maintaining the integrity of the evidence.
  prefs: []
  type: TYPE_NORMAL
- en: 'I''ve also created an SHA-1 hash (which will be used for comparative purposes)
    using the following syntax:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/4da886de-7a27-4e2a-9f82-bc438d4d605e.png)'
  prefs: []
  type: TYPE_IMG
- en: Using DC3DD in Kali Linux
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'DC3DD was developed by the Department of Defense Cyber Crime Center and is
    updated whenever DD updates. DC3DD offers the best of DD with more features, including:'
  prefs: []
  type: TYPE_NORMAL
- en: On-the-fly hashing using more algorithm choices (MD5, SHA-1, SHA-256, and SHA-512)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A meter to monitor progress and acquisition time
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Writing of errors to a file
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Splitting of output files
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Verification of files
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Wiping of output files (pattern wiping)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Although we'll only be looking at DD and DC3DD, there is also another tool called
    **DCFLDD**, which can be installed on Linux-based systems. DCFLDD is an enhanced
    version of DD and is maintained and supported by the **Defense Computer Forensics
    Labs** (**DCFL**) with its own release schedule, unlike DC3DD which updates synchronized
    with DD.
  prefs: []
  type: TYPE_NORMAL
- en: 'DC3DD is a CLI and can be easily run in Kali Linux by first opening a Terminal
    and typing `dc3dd`. To start with, I recommend using the `dc3dd --help` command,
    which lists the available parameters used with `dc3dd`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/7b59bca0-78ea-4589-9c48-39e42e399078.png)'
  prefs: []
  type: TYPE_IMG
- en: 'As seen in the previous screenshot using the `dc3dd --help` command, typical
    usage of the DC3DD command looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'In our previous example, I''ve used the following options:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '![](img/f63d213f-1b3a-4cd4-813b-589c9ba0febc.png)'
  prefs: []
  type: TYPE_IMG
- en: '`if`: Specifies the *input file,* which is the device we will be imaging.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`hash`: Specifies the type of hash algorithm we will be using for integrity
    verification. In this case, I have used the older MD5 hash.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`log`: Specifies the name of the log file that logs the details of the device
    and the acquisition, including errors.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`of`: Specifies the output file name of the forensic image created by DC3DD.
    Although a `.dd` image file type was specified in this example, other formats
    are recognized by DC3DD including `.img` as seen in a later example.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The device size (in sector and bytes) should be noted and later compared to
    the *output results for device* field.
  prefs: []
  type: TYPE_NORMAL
- en: 'The last line also displays the progress and status of the acquisition process,
    showing the amount of data copied, elapsed time in seconds, and the speed of the
    imaging process in Mbps:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/454a9fcd-2f8f-4dc5-aa6d-8e5f884b402e.png)'
  prefs: []
  type: TYPE_IMG
- en: The larger the drive or file to be acquired, the lengthier the time taken to
    do so. Might I suggest you get yourself a cup of coffee or refreshing beverage,
    or even have a look at some other wonderful titles available from Packt at [https://www.packtpub.com/](https://www.packtpub.com/).
  prefs: []
  type: TYPE_NORMAL
- en: 'Once the acquisition process has been completed, the input and output results
    are displayed:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/dab092e5-4567-4126-932d-feaf42f05795.png)'
  prefs: []
  type: TYPE_IMG
- en: Analyzing the results, we can see that the same amount of sectors (`3913664`)
    have been imaged, with no bad sectors being replaced by zeros. We can also see
    that the exact MD5 hash was created for the image, assuring us that an exact copy
    was created without modification.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the Terminal, we can also use the `ls` command to list the directory contents
    to ensure the DC3DD output file (`test_usb.dd`) and log (`dc3ddusb`) have been
    created:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/4e3c6ece-807d-4223-bc57-dea440ab8125.png)'
  prefs: []
  type: TYPE_IMG
- en: To access our forensic image and log file, we can go to our `/home` directory
    by clicking on places (top left corner) and then `Home`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Within my `Home` folder, the first file, `2GBdcedd.dd`, is the output image
    created by DC3DD using the `of=test_usb.dd` command. The last file, `dc3ddusb`,
    is the log file, created when we used the `log=dc3ddusb` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/7905e41d-6383-4589-ab2e-dd40864298c7.png)'
  prefs: []
  type: TYPE_IMG
- en: 'It''s important to keep this log file to have a record of the acquisition process
    and its results, which were displayed on screen upon completion:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/8247e903-bdf7-476b-bdc9-85294948934f.png)'
  prefs: []
  type: TYPE_IMG
- en: In future chapters, we will be analyzing acquired forensic images using various
    tools; however, the image can also be copied or directly cloned to another device
    if the investigator so wishes.
  prefs: []
  type: TYPE_NORMAL
- en: 'As an example, we could clone the forensic image acquired previously (`test_usb.dd`)
    onto a new drive recognized as `sdc`. The command used to perform this task would
    be:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: When copying an image to a drive, the destination drive size should be of equal
    size or larger than the image file.
  prefs: []
  type: TYPE_NORMAL
- en: File-splitting using DC3DD
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Depending on the size of the evidence, manageability and portability can become
    an issue. DC3DD has the ability to split forensically acquired images into multiple
    parts.
  prefs: []
  type: TYPE_NORMAL
- en: 'This is accomplished using the `ofsz` and `ofs` options:'
  prefs: []
  type: TYPE_NORMAL
- en: '`ofsz` specifies the size of each output file part'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ofs` specifies the output files with numerical file extensions, typically `.000`,
    `.001`, `.002`, and so on'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Always ensure that you have specified enough zeros for the file extension. Logically,
    `.000` allows for more parts than `.00`.
  prefs: []
  type: TYPE_NORMAL
- en: For this example, I've used the same 2 GB flash drive as before; however, for
    demonstrative purposes, you'll notice two changes.
  prefs: []
  type: TYPE_NORMAL
- en: Instead of using the MD5 hash, I've specified that SHA-1 be used and the output
    file type will be `.img` instead of the previously used `.dd`.
  prefs: []
  type: TYPE_NORMAL
- en: In this instance, the imaged 2 GB flash size will instead be split into multiple
    parts (four in total) of 500 MBs each using `ofsz=500M` with the parts named as
    `2GBdc3dd2.img.ooo`, `2GBdc3dd2.img.oo1`, `2GBdc3dd2.img.oo2`, and `2GBdc3dd2.img.oo3`.
  prefs: []
  type: TYPE_NORMAL
- en: 'The command used to achieve this is:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '![](img/21f47ecb-5d6d-476c-a27e-444d4ccf5c30.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Once completed, the input results for the device shows the SHA-1 hash output
    and also displays the first part of the split image files:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/6e7757a7-e3c6-4d4e-b0ae-a39dfb25e7bf.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Using the `ls` command once more, we can see that the extensions of each of
    the four split output files are all in numerical format from `.000` to `.003`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/1d87b0e7-d4f1-41a1-ac4f-6231bf2abe28.png)'
  prefs: []
  type: TYPE_IMG
- en: 'All split parts of the imaged file can be found in the `Home` folder along
    with the log file:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/c96056e6-a217-4e68-ae22-73e98150c14b.png)'
  prefs: []
  type: TYPE_IMG
- en: Verifying hashes of split image files
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To verify the hash of the split files, the following command can be used:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '![](img/42d8b455-6299-45d6-b661-c979bc8aec9d.png)'
  prefs: []
  type: TYPE_IMG
- en: 'This also matches the `sha1sum` output of the 2 GB flash drive itself, displayed
    by using the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '![](img/38764736-f954-479a-873d-08e7091eb64c.png)'
  prefs: []
  type: TYPE_IMG
- en: Erasing a drive using DC3DD
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We''ve seen the power of DC3DD as a very impressive forensic acquisition tool,
    but I''d also like to go one step further and introduce you to its capabilities
    as a data wiping tool. DC3DD can wipe data and erase drives by overwriting data
    in three ways:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Overwriting and filling the data and drives with zeroes. The command used is `dc3dd
    wipe=/dev/sdb`:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/f2d79d51-2813-4435-8ac1-0025106fe344.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Overwriting and filling the data and drives using a hexadecimal pattern using
    the pat option. The command used is `dc3dd wipe=/dev/sdb pat=000111`:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/aa37b109-a093-4869-ad77-29954572cd77.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Overwriting and filling the data and drives using a text pattern using the
    `tpat` option. The command used is `dc3dd wipe=/dev/sdb tpat=cfsi`:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/780110db-8886-42c8-99a7-353f8a06306f.png)'
  prefs: []
  type: TYPE_IMG
- en: Image acquisition using Guymager
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Guymager is another standalone acquisition tool that can be used for creating
    forensic images and also performing disk cloning. Developed by Guy Voncken, Guymager
    is completely open source, has many of the same features of DC3DD, and is also
    only available for Linux-based hosts. While some investigators may prefer CLI
    tools, Guymager is a GUI tool and it is for beginners, so it may be preferred.
  prefs: []
  type: TYPE_NORMAL
- en: For this acquisition, I'll also use the very same 2 GB flash drive used in the
    DC3DD examples, at the end of which we can compare results. It's also important
    to remember to continue using your write-blocker when acquiring and creating forensic
    images of evidence and drives, in an effort to not write data to the drives or
    modify the original evidence files.
  prefs: []
  type: TYPE_NORMAL
- en: As previously done in the DC3DD acquisition, we should first ensure that we
    are familiar with the devices attached to our machine, using the `fdisk -l` or
    `sudo fdisk -l` command.
  prefs: []
  type: TYPE_NORMAL
- en: Running Guymager
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Guymager can be started by using the menu in Kali and by clicking on Applications
    on the side menu, and then click on Forensics and scroll down to Guymager:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/fdc31990-f1da-4a87-bdc6-30510b1ad210.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Guymager can also be started using the Terminal by typing `guymager`. You may
    also try the `sudo guymager` command. Once started, the default locations of the
    log file and configuration (`cfg`) files, which can be changed if required:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/da73425e-eb75-4f7e-901a-50c2f4804bca.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The Guymager application runs and then displays the existing drives recognized
    in Kali Linux. As seen in the following screenshot, the details of the 2 GB flash
    drive being used are shown, including the following:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Linux device: Recognized as `/dev/sdb`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Model: `USB_Flash_Memory`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'State: Shown as Idle as the image acquisition has not yet begun'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Size: `2.0GB`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/3553f833-8ef3-4d8c-bd96-b0af81ab5a25.png)'
  prefs: []
  type: TYPE_IMG
- en: Should your device not be listed in Guymager or should you need to add an additional
    device, click the Rescan button at the top-left corner of the application.
  prefs: []
  type: TYPE_NORMAL
- en: Acquiring evidence with Guymager
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To begin the acquisition process, right-click on the evidence drive (`/dev/sdb`
    in this example) and select Acquire image. Note that the Clone device option is
    also available should you wish to clone the evidence drive to another. Again,
    as previously mentioned, when cloning a device, the capacity of the destination
    device must be equal to or exceed that of the source (original) evidence drive:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/5eeeeb6b-bbff-4eda-abc1-6905b256aabe.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Before the actual acquisition process starts, the investigator is prompted
    to enter details about themselves and the evidence under the following three sections:'
  prefs: []
  type: TYPE_NORMAL
- en: 'File format:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**File extensions**: `.dd`, `.xxx`, and `.Exx`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Split size**: Allows the investigator to choose the size of multiple image
    parts'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Case management information**: Case number, Evidence number, Examiner name,
    Description, and Notes'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/abd34128-51f6-4a47-b00d-fe51107ff771.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Destination:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Image directory: The location of the created image file and log (info file)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Image filename: The name of the image file'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/9a0951e8-06ef-42c9-bfab-ac8d8c837786.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Hash calculation / verification:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Multiple hashing algorithms can be selected and calculated, allowing the investigator
    to choose from MD5, SHA-1, and SHA256
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Re-read source after acquisition for verification: This verifies the source'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Verify image after acquisition: This verifies the destination'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/05bcd7f1-3cae-4d1d-aa60-f9c3011d52b0.png)'
  prefs: []
  type: TYPE_IMG
- en: Guymager also adds the convenience of having a Duplicate image... button to
    create duplicate copies without having to repeat the the data entry process.
  prefs: []
  type: TYPE_NORMAL
- en: 'For new users, you may want to specify the directory where the image file will
    be saved. In the destination section, click on the Image directory button and
    choose your location. For this acquisition, I''ve chosen the `Desktop` directory
    as the location for both the image and the log/info file:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/4a33fbb4-9ce9-4b11-b4eb-109eb50fa908.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The following screenshot shows the data that I''ve used for the Guymager acquisition,
    having chosen the `Desktop` as the Image directory and MD5 and SHA-1 hashing algorithms:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/fcb48c3f-5c2b-4e82-9ec8-a33ca3917c80.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Once the Start button is clicked, you will notice that the State changes from
    Idle to Running. The Progress field also now displays a progress bar:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/be47b779-16ad-4a33-ad97-f1665597cd19.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Taking a closer look at the details on the lower left corner of the screen,
    we see the size, image, and info file paths, names and extensions, current speed,
    and chosen hash calculations. We also see that Image verification is turned on:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/0980d7e7-319a-4c2a-a35d-c39ca51630be.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Once the acquisition process is completed, the color of the State field button
    changes from blue to green, indicating that the acquisition process is finished,
    and it also displays Finished - Verified & ok, if verification options were selected
    in the Hash verification/calculation area. The progress bar also displays 100%:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/6e3a2ea6-23f1-41d7-8cd4-945b33f3dc45.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Our output file and info file can be found on the `Desktop` as this was specified
    in the Acquire images section earlier. If you have selected a different directory,
    change to the new directory using the `cd` command, in a new Terminal. In the
    following screenshot, I''ve changed to the `Desktop` directory using the `cd Desktop`
    command and then listed the contents using the `ls` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/e1d08dac-5d66-4f12-a973-fa103f6c0a2a.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We can also browse the `Desktop`, or even the `Desktop` folder, to open the
    info file, which presents us with information about the acquisition details:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/17f44955-2318-4855-9566-d3144a76d9b7.png)'
  prefs: []
  type: TYPE_IMG
- en: Hash verification
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Double-clicking on the info file in the Image directory location allows us to
    inspect a variety of details about the acquisition process from start to completion,
    including the hashed outputs.
  prefs: []
  type: TYPE_NORMAL
- en: 'This info file contains much more data than the log file produced by DC3DD,
    including the case management details:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/1a5099cf-664d-4f54-8613-7e3456ce7a83.png)'
  prefs: []
  type: TYPE_IMG
- en: Let's have a closer look at the hash details within the `.info` file.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can see that the MD5 and SHA-1 hashes have been created and verified and,
    as stated in the last line of the following screenshot, `Image verification OK.
    The image contains exactly the data that was written`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/256e105a-e713-4180-ae6e-b4cb75136de1.png)'
  prefs: []
  type: TYPE_IMG
- en: If we compare these hashes with the ones created using DC3DD, we would have
    the exact same MD5 and SHA-1 outputs, proving that these images are exact forensic
    copies of the original evidence.
  prefs: []
  type: TYPE_NORMAL
- en: 'Compare the hashes in the following screenshots, created by DC3DD, with the
    ones in the previous screenshots, created by Guymager:'
  prefs: []
  type: TYPE_NORMAL
- en: '**DC3DD MD5 Hash**:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/82aac743-22f6-4623-888a-954294a53d66.png)'
  prefs: []
  type: TYPE_IMG
- en: '**DC3DD SHA-1 Hash**:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/7d3f25e3-22f4-427b-99e6-27f6cc3e2e79.png)'
  prefs: []
  type: TYPE_IMG
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we've looked at two tools readily available in Kali Linux for
    the acquisition of digital evidence. It's very important to be able to tell your
    devices apart so you can accurately acquire a forensic and exact copy or image
    of the evidence file using the `fdisk -l` command. For forensic analysis, Bitstream
    copies of the evidence are needed as these provide an exact copy of the evidence,
    bit-by-bit, which is why we used DC3DD and Guymager.
  prefs: []
  type: TYPE_NORMAL
- en: Firstly, we used DC3DD, the enhancement of the data dump tool, and through the
    Terminal, performed quite a few tasks including device imaging, hashing, splitting
    of files, and file verification. Although DC3DD is a command-line interface program,
    the options remain the same, making it fairly easy to learn and use.
  prefs: []
  type: TYPE_NORMAL
- en: Our second tool, Guymager, has built-in case-management abilities and also has
    many functional similarities to DC3DD, but it comes as a GUI tool and may be easier
    to use.
  prefs: []
  type: TYPE_NORMAL
- en: Both tools deliver accurate and forensically sound results. For those that may
    not be constantly working with Guymager, DD, and DC3DD, Guymager may be the easier
    tool to use seeing that all acquisition options including cloning are readily
    available through the GUI, along with an easy to read log, which provides case
    management details. For advanced uses such as drive wiping, however, you may wish
    to use DC3DD. In the end, however, the choice remains yours.
  prefs: []
  type: TYPE_NORMAL
- en: Not bad for our first forensics tools in Kali Linux. Next, we'll move on to
    some analysis and file recovery tools using actual forensic images created by
    **NIST** (**National Institute of Standards and Technology**). Exciting stuff!
  prefs: []
  type: TYPE_NORMAL
