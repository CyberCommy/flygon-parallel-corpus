- en: Using Community Hooks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous chapter, we implemented routing using the Navi library. We started
    by implementing pages, then defining routes and static links. Finally, we implemented
    dynamic links and accessed route information using Hooks.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we are going to learn about various Hooks that are provided
    by the React community. These Hooks can be used to simplify input handling, and
    implement React life cycles in order to simplify migration from React class components.
    Furthermore, there are Hooks that implement various behaviors such as timers,
    checking if the client is online, hover and focus events, and data manipulation.
    Finally, we are going to learn about responsive design and implementing undo/redo functionality
    using Hooks.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following topics will be covered in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Simplifying input handling using the Input Hook
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Implementing React life cycles with Hooks
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Learning about various useful Hooks (`usePrevious`, timer, online, focus, hover,
    and data manipulation Hooks)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Implementing responsive design with Hooks
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Implementing undo/redo functionality and debouncing with Hooks
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Learning where to find other Hooks
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A fairly recent version of Node.js should already be installed (v11.12.0 or
    higher). The `npm` package manager for Node.js also needs to be installed.
  prefs: []
  type: TYPE_NORMAL
- en: The code for this chapter can be found on the GitHub repository: [https://github.com/PacktPublishing/Learn-React-Hooks/tree/master/Chapter08](https://github.com/PacktPublishing/Learn-React-Hooks/tree/master/Chapter08)[.](https://github.com/PacktPublishing/Hands-On-Web-Development-with-Hooks/tree/master/Chapter08)
  prefs: []
  type: TYPE_NORMAL
- en: 'Check out the following video to see the code in action:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://bit.ly/2Mm9yoC](http://bit.ly/2Mm9yoC)'
  prefs: []
  type: TYPE_NORMAL
- en: Please note that it is highly recommended that you write the code on your own.
    Do not simply run the code examples that have been provided. It is important that
    you write the code yourself in order to be able to learn and understand properly.
    However, if you run into any issues, you can always refer to the code example.
  prefs: []
  type: TYPE_NORMAL
- en: Now, let's get started with the chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Exploring the input handling Hook
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A very common use case when dealing with Hooks, is to store the current value
    of an `input` field using State and Effect Hooks. We have already done this many
    times throughout this book.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `useInput` Hook greatly simplifies this use case, by providing a single
    Hook that deals with the `value` variable of an `input` field. It works as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: This code will bind an `onChange` handler function and `value` to the `input`
    field. This means that whenever we enter text into the `input` field, the `value`
    will automatically be updated.
  prefs: []
  type: TYPE_NORMAL
- en: 'Additionally, there is a function that will clear the `input` field. This `clear`
    function is also returned from the Hook:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Calling the `clear` function will set the `value` to an empty value, and clear
    all text from the `input` field.
  prefs: []
  type: TYPE_NORMAL
- en: 'Furthermore, the Hook provides two ways to bind an `input` field:'
  prefs: []
  type: TYPE_NORMAL
- en: '`bindToInput`: Binds the `value` and `onChange` props to an `input` field using `e.target.value` as
    the `value` argument for the `onChange` function. This is useful when dealing
    with HTML `input` fields.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`bind`: Binds the `value` and `onChange` props to an `input` field using only `e` as
    the value for the `onChange` function. This is useful for React components that
    directly pass the value to the `onChange` function.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The `bind` and `bindToInput` objects can be used with the spread operator,
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: As we can see, for the `input` field we can use the `{...bindToInput}` props
    to assign the `value` and `onChange` functions. For `ToggleButton`, we need to
    use the `{...bind}` props instead, because we are not dealing with input events
    here, and the value is directly passed to the change handler (not via `e.target.value`).
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have learned about the Input Hook, we can move on to implementing
    it in our blog app.
  prefs: []
  type: TYPE_NORMAL
- en: Implementing Input Hooks in our blog app
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that we have learned about the Input Hook, and how it simplifies dealing
    with the `input` field state, we are going to implement Input Hooks in our blog
    app.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we have to install the `react-hookedup` library in our blog app project:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'We are now going to implement Input Hooks in the following components:'
  prefs: []
  type: TYPE_NORMAL
- en: The `Login` component
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `Register` component
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `CreatePost` component
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let's get started implementing Input Hooks.
  prefs: []
  type: TYPE_NORMAL
- en: The Login component
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We have two `input` fields in the `Login` component: the Username and Password fields.
    We are now going to replace the State Hooks with Input Hooks.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s start implementing Input Hooks in the `Login` component now:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Import the `useInput` Hook at the beginning of the `src/user/Login.js` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, we remove the following `username` State Hook:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'It is replaced with an Input Hook, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Since we are using two Input Hooks, in order to avoid name collisions, we are
    using the rename syntax (`{ from: to }`) in object destructuring to rename the
    `value` key to `username`, and `bindToInput` key to `bindUsername`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'We also remove the following `password` State Hook:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'It is replaced with an Input Hook, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'We can now remove the following handler functions:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, instead of passing the `onChange` handlers manually, we use the bind
    objects from the Input Hooks:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: The login functionality will still work in exactly the same way as before, but
    we are now using the much more concise Input Hook, instead of the generic State
    Hook. We also do not have to define the same kind of handler function for each
    `input` field anymore. As we can see, using community Hooks can greatly simplify
    the implementation of common use-cases, such as input handling. We are now going
    to repeat the same process for the `Register` component.
  prefs: []
  type: TYPE_NORMAL
- en: The Register component
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `Register` component works similarly to the `Login` component. However,
    it has three `input` fields: Username, Password, and Repeat Password.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s implement Input Hooks in the `Register` component now:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Import the `useInput` Hook at the beginning of the `src/user/Register.js` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, we remove the following State Hooks:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'They are replaced with the corresponding Input Hooks:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Again, we can remove all of the handler functions:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, we replace all of the `onChange` handlers with the corresponding bind
    objects:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: The register functionality will also still work in the same way, but now using
    Input Hooks. Next up is the `CreatePost` component, where we are going to implement
    Input Hooks as well.
  prefs: []
  type: TYPE_NORMAL
- en: The CreatePost component
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `CreatePost` component uses two `input` fields: one for the `title`, and
    one for the `content`. We are going to replace both of them with Input Hooks.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s implement Input Hooks in the `CreatePost` component now:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Import the `useInput` Hook at the beginning of the `src/user/CreatePost.js` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, we remove the following State Hooks:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'We replace them with the corresponding Input Hooks:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'Again, we can remove the following input handler functions:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, we replace all of the `onChange` handlers with the corresponding bind
    objects:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: The create post functionality will also work in the same way with Input Hooks.
  prefs: []
  type: TYPE_NORMAL
- en: Example code
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The example code can be found in the `Chapter08/chapter8_1` folder.
  prefs: []
  type: TYPE_NORMAL
- en: Just run `npm install` in order to install all dependencies and `npm start` to
    start the application, and then visit [http://localhost:3000](http://localhost:3000) in
    your browser (if it does not open automatically).
  prefs: []
  type: TYPE_NORMAL
- en: React life cycles with Hooks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As we have learned in the previous chapters, we can use the `useEffect` Hook to
    model most of React's life cycle methods. However, if you prefer dealing with
    React life cycle directly, instead of using Effect Hooks, there is a library called `react-hookedup`,
    which provides various Hooks, including Hooks for the various React life cycles.
    Additionally, the library provides a merging State Hook, which works similarly
    to `this.setState()` in React's class components.
  prefs: []
  type: TYPE_NORMAL
- en: The useOnMount Hook
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `useOnMount` Hook has a similar effect to the `componentDidMount` life
    cycle. It is used as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: The preceding code will output mounted to the console when the component gets
    mounted (when the React component is rendered for the first time). It will not
    be called again when the component re-renders due to, for example, a prop change.
  prefs: []
  type: TYPE_NORMAL
- en: 'Alternatively, we could just use a `useEffect` Hook with an empty array as
    the second argument, which will have the same effect:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: As we can see, using an Effect Hook with an empty array as the second argument
    results in the same behavior as the `useOnMount` Hook or the `componentDidMount`
    life cycle method.
  prefs: []
  type: TYPE_NORMAL
- en: The useOnUnmount Hook
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `useOnUnmount` Hook has a similar effect to the `componentWillUnmount` life
    cycle. It is used as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: The preceding code will output unmounting to the console when the component
    gets unmounted (before the React component is removed from the DOM).
  prefs: []
  type: TYPE_NORMAL
- en: 'If you remember from [Chapter 4](6af201b4-073e-4911-8c3e-4d0256895702.xhtml), *Using
    the Reducer and Effect Hooks*, we can return a cleanup function from the `useEffect` Hook,
    which will be called when the component unmounts. This means that we could alternatively
    implement the `useOnMount` Hook using `useEffect`, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: As we can see, using the cleanup function that is returned from an Effect Hook,
    with an empty array as the second argument, has the same effect as the `useOnUnmount` Hook,
    or the `componentWillUnmount` life cycle method.
  prefs: []
  type: TYPE_NORMAL
- en: The useLifecycleHooks Hook
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `useLifecycleHooks` Hook combines the previous two Hooks into one. We can
    combine the `useOnMount` and `useOnUnmount` Hooks as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'Alternatively, we could use the two Hooks separately:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'However, if you have this kind of pattern, I would recommend simply using the `useEffect` Hook,
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: Using `useEffect`, we can put our whole effect into a single function, and then
    simply return a function for cleanup. This pattern is especially useful when we
    learn about making our own Hooks in the next chapters.
  prefs: []
  type: TYPE_NORMAL
- en: Effects make us think differently about React components. We do not have to
    think about the life cycle of a component at all. Instead, we think about effects,
    dependencies, and the cleanup of effects.
  prefs: []
  type: TYPE_NORMAL
- en: The useMergeState Hook
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `useMergeState` Hook works similarly to the `useState` Hook. However, it
    does not replace the current state, but instead merges the current state with
    the new state, just like `this.setState()` works in React class components.
  prefs: []
  type: TYPE_NORMAL
- en: 'The Merge State Hook returns the following objects:'
  prefs: []
  type: TYPE_NORMAL
- en: '`state`: The current state'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`setState`: A function to merge the current state with the given state object'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'For example, let''s consider the following component:'
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we import the `useState` Hook:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, we define our app component and a State Hook with an object containing
    a `loaded` value and a `counter` value:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, we define a `handleClick` function, where we set the new `state`, increasing
    the current `counter` value by `1`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, we render the current `counter` value and a +1 button in order to
    increase the `counter` value by `1`. The button will be disabled if `state.loaded` is `false` or
    `undefined`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: As we can see, we have a simple counter app, showing the current count and a
    +1 button. The +1 button will only be enabled when the `loaded` value is set to `true`.
  prefs: []
  type: TYPE_NORMAL
- en: If we now click on the +1 button, `counter` will increase from `0` to `1`, but
    the button will get disabled, because we have overwritten the current `state` object
    with a new `state` object.
  prefs: []
  type: TYPE_NORMAL
- en: 'To solve this problem, we would have to adjust the `handleClick` function as
    follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'Alternatively, we could use the `useMergeState` Hook in order to avoid this
    problem altogether, and get the same behavior that we had with `this.setState()` in
    class components:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: As we can see, by using the `useMergeState` Hook, we can reproduce the same
    behavior that we had with `this.setState()` in class components. So, we do not
    need to use spread syntax anymore. However, often, it is better to simply use
    multiple State Hooks or a Reducer Hook instead.
  prefs: []
  type: TYPE_NORMAL
- en: Example code
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The example code can be found in the `Chapter08/chapter8_2` folder.
  prefs: []
  type: TYPE_NORMAL
- en: Just run `npm install` in order to install all dependencies and `npm start` to
    start the application, and then visit `http://localhost:3000` in your browser
    (if it does not open automatically).
  prefs: []
  type: TYPE_NORMAL
- en: Various useful Hooks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In addition to life cycle Hooks, `react-hookedup` also provides Hooks for timers,
    checking the network status, and various other useful Hooks for dealing with,
    for example, arrays and input fields. We are now going to cover the rest of the
    Hooks that `react-hookedup` provides.
  prefs: []
  type: TYPE_NORMAL
- en: 'These Hooks are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: The `usePrevious` Hook, to get the previous value of a Hook or prop
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Timer Hooks, to implement intervals and timeouts
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `useOnline` Hook, to check whether the client has an active internet connection
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Various data manipulation Hooks for dealing with booleans, arrays, and counters
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Hooks to deal with focus and hover events
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The usePrevious Hook
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `usePrevious` Hook is a simple Hook that lets us get the previous value
    of a prop or Hook value. It will always store and return the previous value of
    any given variable, and it works as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we import the `useState` and `usePrevious` Hooks:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, we define our `App` component, and a Hook in which we store the current
    `count` state:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, we define the `usePrevious` Hook, passing the `count` value from the State
    Hook to it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: The `usePrevious` Hook works with any variable, including component props and
    values from other Hooks.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, we define a handler function, which will increase `count` by `1`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, we render the previous value of `count`, the current value of `count`,
    and a button to increase `count`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: 'The previously defined component will first show Count was and is 0 now., because
    the default value for the Previous Hook is `null`. When clicking the button once,
    it will show the following: Count was 0 and is 1 now..'
  prefs: []
  type: TYPE_NORMAL
- en: Timer Hooks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `react-hookedup` library also provides Hooks for dealing with timers. If
    we simply create a timer using `setTimeout` or `setInterval` in our component,
    it will get instantiated again every time the component is re-rendered. This not
    only causes bugs and unpredictability, but can also cause a memory leak if the
    old timers are not freed properly. Using timer Hooks, we can avoid these problems
    completely, and easily use intervals and timeouts.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following timer Hooks are provided by the library:'
  prefs: []
  type: TYPE_NORMAL
- en: The `useInterval` Hook, which is used to define `setInterval` timers (timers
    that trigger multiple times) in React components
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `useTimeout` Hook, which is used to define `setTimeout` timers (timers that
    trigger only once after a certain amount of time)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The useInterval Hook
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `useInterval` Hook can be used just like `setInterval`. We are now going
    to implement a small counter that counts the number of seconds since mounting
    the component:'
  prefs: []
  type: TYPE_NORMAL
- en: 'First, import the `useState` and `useInterval` Hooks:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, we define our component and a State Hook:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, we define the `useInterval` Hook, which is going to increase the `count`
    by `1` every `1000` ms, which is equal to `1` second:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, we display the current `count` value:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: 'Alternatively, we could use an Effect Hook in combination with `setInterval`,
    instead of the `useInterval` Hook, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: As we can see, the `useInterval` Hook makes our code much more concise and easily
    readable.
  prefs: []
  type: TYPE_NORMAL
- en: useTimeout Hook
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `useTimeout` Hook can be used just like `setTimeout`. We are now going
    to implement a component that triggers after `10` seconds have passed:'
  prefs: []
  type: TYPE_NORMAL
- en: 'First, import the `useState` and `useTimeout` Hooks:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, we define our component and a State Hook:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, we define the `useTimeout` Hook, which is going to set `ready` to `true`, after `10000`
    ms (`10` seconds):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, we display whether we are ready or not:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: 'Alternatively, we could use an Effect Hook in combination with `setTimeout`,
    instead of the `useTimeout` Hook, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: As we can see, the `useTimeout` Hook makes our code much more concise and easily
    readable.
  prefs: []
  type: TYPE_NORMAL
- en: The Online Status Hook
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In some web apps, it makes sense to implement an offline mode; for example,
    if we want to be able to edit and save drafts for posts locally, and sync them
    to the server whenever we are online again. To be able to implement this use case,
    we can use the `useOnlineStatus` Hook.
  prefs: []
  type: TYPE_NORMAL
- en: 'The Online Status Hook returns an object with an `online` value, which contains `true`
    if the client is online; otherwise, it contains `false`. It works as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: The previous component will display You are online!, when an internet connection
    is available, or You are offline!, otherwise.
  prefs: []
  type: TYPE_NORMAL
- en: 'We could then use a Previous Hook, in combination with an Effect Hook, in order
    to sync data to the server when we are online again:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: Now, we have an Effect Hook that triggers whenever the value of `online` changes.
    It then checks whether the previous value of `online` was `false`, and the current
    one is `true`. If that is the case, it means we were offline, and are now online
    again, so we need to sync our updated data to the server.
  prefs: []
  type: TYPE_NORMAL
- en: As a result, our app will show an alert displaying syncing data when we go offline
    and then online again.
  prefs: []
  type: TYPE_NORMAL
- en: Data manipulation Hooks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `react-hookedup` library provides various utility Hooks for dealing with
    data. These Hooks simplify dealing with common data structures and provide an
    abstraction over the State Hook.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following data manipulation Hooks are provided:'
  prefs: []
  type: TYPE_NORMAL
- en: 'The `useBoolean` Hook: To deal with toggling boolean values'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The `useArray` Hook: To deal with handling arrays'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The `useCounter` Hook: To deal with counters'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The useBoolean Hook
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `useBoolean` Hook is used to deal with toggling boolean values (`true`/`false`),
    and provides functions to set the value to `true`/`false`, and a `toggle` function
    to toggle the value.
  prefs: []
  type: TYPE_NORMAL
- en: 'The Hook returns an object with the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '`value`: The current value of the boolean'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`toggle`: A function to toggle the current value (sets `true` if currently
    `false`, and `false` if currently `true`)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`setTrue`: Sets the current value to `true`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`setFalse`: Sets the current value to `false`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The Boolean Hook works as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we import the `useBoolean` Hook from `react-hookedup`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, we define our component and the Boolean Hook, which returns an object
    with the `toggle` function and `value`. We pass `false` as the default value:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, we render a button, which can be turned on/off:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: The button will initially be rendered with the text off. When clicking the button,
    it will show the text on. When clicking again, it will be off again.
  prefs: []
  type: TYPE_NORMAL
- en: The useArray Hook
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `useArray` Hook is used to easily deal with arrays, without having to use
    the rest/spread syntax.
  prefs: []
  type: TYPE_NORMAL
- en: 'The Array Hook returns an object with the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '`value`: The current array'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`setValue`: Sets a new array as the value'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`add`: Adds a given element to the array'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`clear`: Removes all elements from the array'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`removeIndex`: Removes an element from the array by its index'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`removeById`: Removes an element from the array by its `id` (assuming that
    the elements in the array are objects with an `id` key)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'It works as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we import the `useArray` Hook from `react-hookedup`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, we define the component and the Array Hook, with the default value of `[''one'',
    ''two'', ''three'']`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, we display the current array as JSON:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, we display a button to `add` an element:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, we display a button to remove the first element by index:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, we add a button to `clear` all elements:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs: []
  type: TYPE_PRE
- en: As we can see, using the `useArray` Hook makes dealing with arrays much simpler.
  prefs: []
  type: TYPE_NORMAL
- en: The useCounter Hook
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `useCounter` Hook can be used to define various kinds of counters. We can
    define a lower/upper limit, specify whether the counter should loop or not, and
    specify the step amount by which we increase/decrease the counter. Furthermore,
    the Counter Hook provides functions in order to increase/decrease the counter.
  prefs: []
  type: TYPE_NORMAL
- en: 'It accepts the following configuration options:'
  prefs: []
  type: TYPE_NORMAL
- en: '`upperLimit`: Defines the upper limit (maximum value) of our counter'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`lowerLimit`: Defines the lower limit (minimum value) of our counter'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`loop`: Specifies whether the counter should loop (for example, when the maximum
    value is reached, we go back to the minimum value)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`step`: Sets the default step amount for the increase and decrease functions'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'It returns the following object:'
  prefs: []
  type: TYPE_NORMAL
- en: '`value`: The current value of our counter.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`setValue`: Sets the current value of our counter.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`increase`: Increases the value by a given step amount. If no amount is specified,
    then the default step amount is used.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`decrease`: Decreases the value by a given step amount. If no amount is specified,
    then the default step amount is used.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The Counter Hook can be used as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we import the `useCounter` Hook from `react-hookedup`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, we define our component and the Hook, specifying `0` as the default value.
    We also specify `upperLimit`, `lowerLimit`, and `loop`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, we render the current value and two buttons to `increase`/`decrease`
    the value:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs: []
  type: TYPE_PRE
- en: As we can see, the Counter Hook makes implementing counters much simpler.
  prefs: []
  type: TYPE_NORMAL
- en: Focus and Hover Hooks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Sometimes, we want to check whether the user has hovered over an element or
    focused on an `input` field. To do so, we can use the Focus and Hover Hooks that
    are provided by the `react-hookedup` library.
  prefs: []
  type: TYPE_NORMAL
- en: 'The library provides two Hooks for these features:'
  prefs: []
  type: TYPE_NORMAL
- en: 'The `useFocus` Hook: To handle focus events (for example, a selected `input`
    field)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The `useHover` Hook: To deal with hover events (for example, when hovering
    the mouse pointer over an area)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The useFocus Hook
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In order to know whether an element is currently focused, we can use the `useFocus` Hook
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we import the `useFocus` Hook:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE63]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, we define our component and the Focus Hook, which returns the `focused`
    value and a `bind` function, to bind the Hook to an element:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE64]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, we render an `input` field, and bind the Focus Hook to it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE65]'
  prefs: []
  type: TYPE_PRE
- en: As we can see, the Focus Hook makes it much easier to handle focus events. There
    is no need to define our own handler functions anymore.
  prefs: []
  type: TYPE_NORMAL
- en: The useHover Hook
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In order to know whether the user is currently hovering over an element, we
    can use the `useHover` Hook, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we import the `useHover` Hook:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE66]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, we define our component and the Hover Hook, which returns the `hovered` value
    and a `bind` function, to bind the Hook to an element:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE67]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, we render an element, and bind the Hover Hook to it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE68]'
  prefs: []
  type: TYPE_PRE
- en: As we can see, the Hover Hook makes it much easier to handle hover events. There
    is no need to define our own handler functions anymore.
  prefs: []
  type: TYPE_NORMAL
- en: Example code
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The example code can be found in the `Chapter08/chapter8_3` folder.
  prefs: []
  type: TYPE_NORMAL
- en: Just run `npm install` in order to install all dependencies and `npm start` to
    start the application, and then visit `http://localhost:3000` in your browser
    (if it does not open automatically).
  prefs: []
  type: TYPE_NORMAL
- en: Responsive design with Hooks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In web apps, it is often important to have a responsive design. Responsive design
    makes your web app render well on various devices and window/screen sizes. Our
    blog app might be viewed on a desktop, a mobile phone, a tablet, or maybe even
    a very large screen, such as a TV.
  prefs: []
  type: TYPE_NORMAL
- en: Often, it makes the most sense to simply use CSS media queries for responsive
    design. However, sometimes that is not possible, for example, when we render elements
    within a canvas or **Web Graphics Library** (**WebGL**). Sometimes, we also want
    to use the window size in order to decide whether to load a component or not,
    instead of simply rendering it and then hiding it via CSS later.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `@rehooks/window-size` library provides the `useWindowSize` Hook, which
    returns the following values:'
  prefs: []
  type: TYPE_NORMAL
- en: '`innerWidth`: Equal to the `window.innerWidth` value'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`innerHeight`: Equal to the `window.innerHeight` value'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`outerWidth`: Equal to the `window.outerWidth` value'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`outerHeight`: Equal to the `window.outerHeight` value'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'To show the difference between `outerWidth`/`outerHeight`, and `innerWidth`/`innerHeight`,
    take a look at the following diagram:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/e6736ca3-dd77-471b-a220-3600c450612d.png)'
  prefs: []
  type: TYPE_IMG
- en: Visualization of the window width/height properties
  prefs: []
  type: TYPE_NORMAL
- en: As we can see, `innerHeight` and `innerWidth` specify the innermost part of
    the browser window, while `outerHeight` and `outerWidth` specify the full dimensions
    of the browser window, including the URL bar, scroll bars, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: We are now going to hide components based on the window size in our blog app.
  prefs: []
  type: TYPE_NORMAL
- en: Responsively hiding components
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In our blog app, we are going to hide the `UserBar` and `ChangeTheme` components
    completely when the screen size is very small so that, when reading a post on
    a mobile phone, we can focus on the content.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s get started implementing the Window Size Hook:'
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we have to install the `@rehooks/window-size` library:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE69]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, we import the `useWindowSize` Hook at the start of the `src/pages/HeaderBar.js`
    file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE70]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, we define the following Window Size Hook after the existing Context Hooks:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE71]'
  prefs: []
  type: TYPE_PRE
- en: 'If the window width is smaller than `640` pixels, we assume that the device
    is a mobile phone:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE72]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, we only show the `ChangeTheme` and `UserBar` components when we are
    not on a mobile phone:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE73]'
  prefs: []
  type: TYPE_PRE
- en: 'If we now resize our browser window to a width smaller than `640` pixels, we
    can see that the `ChangeTheme` and `UserBar` components will not be rendered anymore:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/ee54d2cd-debb-48a1-8f05-15847cf17193.png)'
  prefs: []
  type: TYPE_IMG
- en: Hiding the ChangeTheme and UserBar components on smaller screen sizes
  prefs: []
  type: TYPE_NORMAL
- en: Using the Window Size Hook, we can avoid rendering elements on smaller screen
    sizes.
  prefs: []
  type: TYPE_NORMAL
- en: Example code
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The example code can be found in the `Chapter08/chapter8_4` folder.
  prefs: []
  type: TYPE_NORMAL
- en: Just run `npm install` in order to install all dependencies and `npm start` to
    start the application, and then visit `http://localhost:3000` in your browser
    (if it does not open automatically).
  prefs: []
  type: TYPE_NORMAL
- en: Undo/Redo with Hooks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In some apps, we want to implement undo/redo functionality, which means that
    we can go back and forth in the state of our app. For example, if we have a text
    editor in our blog app, we want to provide a feature to undo/redo changes. If
    you learned about Redux, you might already be familiar with this kind of functionality.
    Since React now provides a Reducer Hook, we can reimplement the same functionality
    using only React. The `use-undo` library provides exactly this functionality.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `useUndo` Hook takes the default `state` object as an argument, and returns
    an array with the following contents: `[ state, functions ]`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The `state` object looks as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`present`: The current state'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`past`: Array of past states (when we undo, we go here)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`future`: Array of future states (after undoing, we can redo to go here)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The `functions` object returns various functions to interact with the Undo
    Hook:'
  prefs: []
  type: TYPE_NORMAL
- en: '`set`: Sets the current state, and assigns a new value to `present`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`reset`: Resets the current state, clears the `past` and `future` arrays (undo/redo
    history), and assigns a new value to `present`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`undo`: Undoes to the previous state (goes through the elements of the `past` array).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`redo`: Redoes to the next state (goes through the elements of the `future` array).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`canUndo`: Equals `true` if it is possible to do an undo action (`past` array
    not empty).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`canRedo`: Equals `true` if it is possible to do a redo action (`future` array
    not empty).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We are now going to implement undo/redo functionality in our post editor.
  prefs: []
  type: TYPE_NORMAL
- en: Implementing Undo/Redo in our post editor
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In the simple post editor of our blog app, we have a `textarea` where we can
    write the contents of a blog post. We are now going to implement the `useUndo` Hook
    there, so that we can undo/redo any changes that we made to the text:'
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we have to install the `use-undo` library via `npm`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE74]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, we import the `useUndo` Hook from the library in `src/post/CreatePost.js`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE75]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, we define the Undo Hook by replacing the current `useInput` Hook. Remove
    the following line of code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE76]'
  prefs: []
  type: TYPE_PRE
- en: 'Replace it with the `useUndo` Hook, as follows. We set the default state to
    `''''`. We also save the state to `undoContent`, and get the `setContent`, `undo`,
    and `redo` functions, as well as the `canUndo` and `canRedo` values:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE77]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, we assign the `undoContent.present` state to the `content` variable:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE78]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, we define a new handler function in order to update the `content` value
    using the `setContent` function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE79]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, we have to replace the `bindContent` object with the `handleContent`
    function, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE80]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, we define buttons to Undo/Redo our changes, after the `textarea` element:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE81]'
  prefs: []
  type: TYPE_PRE
- en: It is important that `<button>` elements in a `<form>` element have a `type`
    attribute defined. If the `type` attribute is not defined, buttons are assumed
    to be `type="submit"`, which means that they will trigger the `onSubmit` handler
    function when clicked.
  prefs: []
  type: TYPE_NORMAL
- en: Now, after entering text we can press Undo to remove one character at a time,
    and Redo to add the characters again. Next, we are going to implement debouncing,
    which means that our changes will only be added to the undo history after a certain
    amount of time, not after every character that we entered.
  prefs: []
  type: TYPE_NORMAL
- en: Debouncing with Hooks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As we have seen in the previous section, when we press Undo, it undoes a single
    character at a time. Sometimes, we do not want to store every change in our undo
    history. To avoid storing every change, we need to implement debouncing, which
    means that the function that stores our `content` to the undo history is only
    called after a certain amount of time.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `use-debounce` library provides the `useDebounce` Hook, which can be used,
    as follows, for simple values:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE82]'
  prefs: []
  type: TYPE_PRE
- en: Now, if we change the text via `setText`, the `text` value will be updated instantly,
    but the `value` variable will only be updated after `1000` ms (`1` second).
  prefs: []
  type: TYPE_NORMAL
- en: 'However, for our use case, this is not enough. We are going to need debounced
    callbacks in order to implement debouncing in combination with `use-undo`. The `use-debounce` library
    also provides the `useDebouncedCallback` Hook, which can be used as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE83]'
  prefs: []
  type: TYPE_PRE
- en: Now, if we call `debouncedSet('text')`, the `text` value will be updated after
    `1000` ms (`1` second). If `debouncedSet` is called multiple times, the timeout
    will get reset every time, so that only after `1000` ms of no further calls to
    the `debouncedSet` function, the `setText` function will be called. Next, we are
    going to move on to implementing debouncing in our post editor.
  prefs: []
  type: TYPE_NORMAL
- en: Debouncing changes in our post editor
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now that we have learned about debouncing, we are going to implement it in
    combination with the Undo Hook in our post editor, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we have to install the `use-debounce` library via `npm`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE84]'
  prefs: []
  type: TYPE_PRE
- en: 'In `src/post/CreatePost.js`, first make sure that you import the `useState` Hook,
    if it is not imported already:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE85]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, import the `useDebouncedCallback` Hook from the `use-debounce` library:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE86]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, before the Undo Hook, define a new State Hook, which we are going to use
    for the non-debounced value, to update the `input` field:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE87]'
  prefs: []
  type: TYPE_PRE
- en: 'After the Undo Hook, we remove the assignment of the `content` value. Remove
    the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE88]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, after the Undo Hook, define the Debounced Callback Hook:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE89]'
  prefs: []
  type: TYPE_PRE
- en: 'Within the Debounced Callback Hook, we define a function in order to set the
    content of the Undo Hook:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE90]'
  prefs: []
  type: TYPE_PRE
- en: 'We trigger the `setContent` function after `200` ms:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE91]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, we have to define an Effect Hook, which will trigger whenever the undo
    state changes. In this Effect Hook, we cancel the current debouncing, and set
    the `content` value to the current `present` value:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE92]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, we adjust the `handleContent` function in order to trigger the `setInput` function,
    as well as the `setDebounce` function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE93]'
  prefs: []
  type: TYPE_PRE
- en: As a result, we instantly set the input `value`, but we do not store anything
    to the undo history yet. After the debouncing callback triggers (after `200` ms),
    we store the current value to the undo history. Whenever the undo state updates,
    for example, when we press the Undo/Redo buttons, we cancel the current debouncing
    to avoid overwriting the value after undoing/redoing. Then, we set the `content`
    value to the new `present` value of the Undo Hook.
  prefs: []
  type: TYPE_NORMAL
- en: 'If we now type some text into our editor, we can see that the Undo button only
    activates after a while. It then looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/79794e07-93c4-47d1-aab5-20011aa75eb8.png)'
  prefs: []
  type: TYPE_IMG
- en: Undo button activated after typing some text
  prefs: []
  type: TYPE_NORMAL
- en: 'If we now press the Undo button, we can see that we will not undo character
    by character, but more text at once. For example, if we press Undo three times,
    we get the following result:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/450730b4-94f3-4ccb-8f5c-ecf6ebdf9bdc.png)'
  prefs: []
  type: TYPE_IMG
- en: Going back in time using the Undo button
  prefs: []
  type: TYPE_NORMAL
- en: As we can see, Undo/Redo and debouncing now work perfectly fine!
  prefs: []
  type: TYPE_NORMAL
- en: Example code
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The example code can be found in the `Chapter08/chapter8_5` folder.
  prefs: []
  type: TYPE_NORMAL
- en: Just run `npm install` in order to install all dependencies and `npm start` to
    start the application, and then visit `http://localhost:3000` in your browser
    (if it does not open automatically).
  prefs: []
  type: TYPE_NORMAL
- en: Finding other Hooks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are many other Hooks that are provided by the community. You can find
    a searchable list of various Hooks on the following page: [https://nikgraf.github.io/react-hooks/.](https://nikgraf.github.io/react-hooks/)
  prefs: []
  type: TYPE_NORMAL
- en: 'To give you an idea of which other Hooks are out there, the following features
    are provided by community Hooks. We now list a couple more interesting Hooks provided
    by the community. Of course, there are many more Hooks to be found:'
  prefs: []
  type: TYPE_NORMAL
- en: '`use-events` ([https://github.com/sandiiarov/use-events](https://github.com/sandiiarov/use-events)):
    Various JavaScript events that have been turned into Hooks, such as mouse position,
    touch events, clicking outside, and so on.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`react-apollo-hooks` ([https://github.com/trojanowski/react-apollo-hooks](https://github.com/trojanowski/react-apollo-hooks)):
    Use Apollo Client (a caching **GraphQL** client) with React Hooks.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`react-use` ([https://github.com/streamich/react-use](https://github.com/streamich/react-use)):
    Various Hooks to deal with sensors (`useBattery`, `useIdle`, `useGeolocation`,
    and so on), UI (`useAudio`, `useCss`, `useFullscreen`, and so on), animations
    (`useSpring`, `useTween`, `useRaf`, and so on), and side effects (`useAsync`,
    `useDebounce`, `useFavicon`, and so on).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`react-use-clipboard` ([https://github.com/danoc/react-use-clipboard](https://github.com/danoc/react-use-clipboard)):
    Clipboard functionality to copy text.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we first learned about the `react-hookedup` library. We used
    this library to simplify input handling with Hooks in our blog app. Then, we had
    a look at implementing various React life cycles with Hooks. Next, we covered
    various useful Hooks, such as the `usePrevious` Hook, Interval/Timeout Hooks,
    the Online Status Hook, data manipulation Hooks, and the Focus and Hover Hooks.
    Afterward, we covered responsive design using Hooks, by not rendering certain
    components on mobile phones. Finally, we learned about implementing undo/redo
    functionality and debouncing using Hooks.
  prefs: []
  type: TYPE_NORMAL
- en: Using community Hooks is a very important skill, as React only provides a handful
    of Hooks out of the box. In real applications, you will probably be using many
    Hooks that are provided by the community, from various libraries and frameworks.
    We also learned about various community Hooks that will make our life so much
    easier when writing React applications.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will gain an in-depth knowledge about the rules of Hooks,
    which are important to know before we can start writing our own Hooks.
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In order to recap what we have learned in this chapter, try answering the following
    questions:'
  prefs: []
  type: TYPE_NORMAL
- en: Which Hook can we use to simplify input field handling?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How are the `componentDidMount` and `componentWillUnmount` life cycles implemented
    using Effect Hooks?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How can we use Hooks to get the behavior of `this.setState()`?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Why should we use timer Hooks instead of calling `setTimeout` and `setInterval`
    directly?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Which Hooks can we use to simplify dealing with common data structures?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When should we use responsive design with Hooks, versus simply using CSS media
    queries?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Which Hook can we use to implement undo/redo functionality?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What is debouncing? Why do we need to do it?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Which Hooks can we use for debouncing?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'If you are interested in more information about the concepts that we have learned
    in this chapter, take a look at the following reading material:'
  prefs: []
  type: TYPE_NORMAL
- en: '`react-hookedup` library documentation: [https://github.com/zakariaharti/react-hookedup](https://github.com/zakariaharti/react-hookedup)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`window-size` library documentation: [https://github.com/rehooks/window-size](https://github.com/rehooks/window-size)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`use-undo` library documentation: [https://github.com/xxhomey19/use-undo](https://github.com/xxhomey19/use-undo)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`use-debounce` library documentation: [https://github.com/xnimorz/use-debounce.](https://github.com/xnimorz/use-debounce)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Collection of React Hooks: [https://nikgraf.github.io/react-hooks/](https://nikgraf.github.io/react-hooks/)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Learning Redux* book published by *Packt* for more in-depth information about
    undo/redo functionality: [https://www.packtpub.com/web-development/learning-redux](https://www.packtpub.com/web-development/learning-redux)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
