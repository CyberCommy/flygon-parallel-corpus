- en: Chapter 7. Qt Tips and Tricks
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In the previous chapters, we''ve discussed what makes Qt Creator a great toolkit
    for your software development: how to edit, compile, and debug applications; how
    to profile their execution and memory performance; how to localize them for different
    regions of the world; and even how to make mobile applications that run on Android
    phones and tablets. In this chapter, we will discuss a collection of tips and
    tricks you should know about when using Qt Creator and Qt that will have you writing
    software like a pro.'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
- en: Writing console applications with Qt Creator
  id: totrans-2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Remember the "Hello World" application in [Chapter 1](ch01.html "Chapter 1. Getting
    Started with Qt Creator"), *Getting Started with Qt Creator*? That was a console
    application, about as simple a one as you can write. Recapping the code, we created
    a new Qt console application, and in `main.cpp` we wrote:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  id: totrans-4
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Any valid C++ is valid in a Qt application, including Standard Template Library
    (STL) code. This is especially handy if you need to write a small tool in C++,
    and haven''t learned a lot about Qt yet: everything you know about C++ (and even
    C, if you prefer) is accessible to you in Qt Creator.'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
- en: 'Although Qt is most widely known as a GUI toolkit, it''s worth mentioning that
    the `QtCore` library, part of every Qt application including Qt console applications,
    includes a bevy of utility and template classes, such as:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
- en: Collection classes, including `QList`, `QVector`, `QStack`, and `QQueue` for
    keeping lists and vectors, and for last-in-first-out and first-in-first-out data
    storage
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Dictionary classes (otherwise known as hash tables), including `QMap` and `QDict`
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Cross-platform file I/O with `QFile` and `QDirectory`
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Unicode string support with `QString`
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Why will you choose Qt''s classes over what straight C++ provides you? There
    are a few reasons:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
- en: '**Memory** **performance**: Unlike STL collections, Qt collections are reference
    based, and use copy-on-write to save memory. Qt collections typically take less
    memory than their STL counterparts.'
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Iteration**: Iterating over Qt collections is safe, with guarded access to
    prevent walking off the end of a collection.'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Readability**: Using Qt code and libraries throughout an application provides
    a uniform look and feel that can make the code easier to maintain.'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Portability**: On some embedded platforms where Qt is available, the STL
    may not be. (This isn''t nearly the problem it was when Qt was first being written,
    however.)'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'It''s worth noting that Qt''s collections are often slightly slower than their
    STL counterparts: when using a Qt class for data, you''re often trading memory
    performance for speed. In practice, however, this is rarely a problem.'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
- en: 'The `QFile` and `QDirectory` classes are worth a special mention, because of
    one thing: **portability**. Even directory separators are handled in a portable
    way; directories are always demarcated by a single `/`, regardless of whether
    you''re running on Mac OS X, Linux, or Windows, making it easy to write your code
    in a platform-agnostic way and ensure that it runs on all platforms. Under the
    hood, Qt translates directory strings to use the platform-specific directory separator
    when accessing files.'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
- en: Integration with version control systems
  id: totrans-18
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Nearly all large projects require some sort of version control to coordinate
    changes made to the same files by different users, and ensure that changes to
    a source base occur harmoniously. Even a single developer can benefit by using
    version control, because version control provides a record of what changed in
    each file the developer has changed, and provides a valuable history of the project
    over time. Qt Creator supports the following version control systems:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
- en: Bazaar (supported in Qt Creator in Version 2.2 and beyond)
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: CVS
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Git
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Mercurial (supported in Qt Creator in Version 2.0 and beyond)
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Perforce (supporting Perforce Server Version 2006.1 and later)
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Subversion
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The first thing you need to do is set up version control software for your project.
    How to do this depends on the version control system you choose (it may be dictated
    by your organization, for example, or you may have a personal preference from
    working on past projects), and how you do this differs from system to system,
    so we won't go into it here. But, you need to have a repository to store the versions
    of your source code, and have the appropriate version control software installed
    on your workstation with the appropriate directories containing the version control
    binaries in your system's `PATH` environment variable, so that Qt Creator can
    find them. It's important that you access the version control commands from your
    system's shell (such as PowerShell or your local terminal prompt), because Qt
    Creator accesses them in the same ways.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
- en: 'Once we''ve done this, we can configure how Qt Creator interacts with version
    control by selecting **Tools** | **Options…** | **Version Control**. There are
    general configuration options, which apply to whatever version control system
    you''re using, and then specific options for each flavor of version control that
    Qt supports. The general options are:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
- en: A script that can be run on any submission message to ensure that your message
    is formatted correctly or contains the right information
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A list of names and aliases for your source code control system
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A list of fields to include in each submission message
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The SSH prompt command used to prompt you for your SSH password when using SSH
    to access your version control system
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Some version control systems, such as Git and Mercurial, support local version
    control repositories. This is handy if you're flying solo on a development project
    and just need a place to back up your changes (of course, remember to back up
    the source code repository directory as well!). If you're using one of these systems,
    you can use Qt to create the local repository directory directly by navigating
    to **Tools** | **Create Repository**, or by navigating to **File** | **New File
    or Project** wizard on its last page.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
- en: 'If you install and configure a version control system, the various commands
    available from that system are added in a submenu to the **Tools** menu of Qt
    Creator. From there, you can:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
- en: View version control command output by navigating to **Window** | **Output Panes**
    | **Version Control**
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: View different output from your version control system, letting you see what's
    changed in a file you are editing from what's in the repository
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: View the change log for a file under version control by choosing **Log** or
    **Filelog**
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Commit a file's changes to the system by choosing **Commit** or **Submit**
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Revert changes to a file by choosing **Revert**
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Update your working directory with the current contents of the version control
    system by choosing **Update**
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Access additional per-version-control commands for supporting branches, stashes,
    and remote repositories that may also be available
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If you're just starting out and need to choose a version control system, perhaps
    the best thing to do is to look at the comparison of various systems on Wikipedia
    at [http://bit.ly/1aVGEUa](http://bit.ly/1aVGEUa) and get familiar with one.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  id: totrans-42
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Personally, I prefer Git for my work, both using local repositories and in-hosted
    repositories such as GitHub. It's free, fast, has good support for branching,
    and is well-supported by Qt Creator.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
- en: Configuring coding style and coding format options
  id: totrans-44
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Readable code is crucial, and Qt Creator''s default coding style is one that
    most people find very readable. However, you may be on a project with different
    coding guidelines, or you may just find you can''t bear a particular facet of
    how the Qt Creator editor deals with code formatting: maybe it''s the positioning
    of the brackets, or how a `switch` statement gets formatted. Fortunately, Qt Creator
    is extremely configurable. By navigating to **Tools** | **Options…** | **C++**,
    you can configure how Qt Creator formats your code, as shown in the following
    screenshot:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
- en: '![Configuring coding style and coding format options](img/2319_07_01.jpg)'
  id: totrans-46
  prefs: []
  type: TYPE_IMG
- en: Adjusting code formatting in Qt Creator
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
- en: 'The basic dialog lets you pick popular formatting styles, such as Qt''s default
    format, or the format used by most GNU code. You can also click on **Edit…**,
    which brings up the **Edit Code Style** window, as shown in the next screenshot:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
- en: '![Configuring coding style and coding format options](img/2319_07_02..jpg)'
  id: totrans-49
  prefs: []
  type: TYPE_IMG
- en: Fine-tuning code formatting in Qt Creator
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
- en: 'You''ll want to begin by copying a built-in style and editing it to suit your
    tastes; from the **Edit Code Style** dialog you can select whether tabs are represented
    as tab characters or spaces or tabs and the number of spaces per tab stop, as
    well as how line continuations are handled. Each pane lets you adjust specific
    aspects of code formatting:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
- en: The **Content** pane lets you adjust how class bodies are formatted, including
    spacing for public, protected, and private declarations
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The **Braces** pane lets you control formatting as it pertains to braces
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The **"switch"** pane lets you control switch and case statement formatting
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The **Alignment** pane lets you control how code is aligned between consecutive
    lines
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The **Pointer and References** pane lets you control spacing around pointer
    declarations
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'It''s easy to go crazy with all these options, but I urge you not to: what
    looks good at first glance is often an unreadable mess when you see it day after
    day. If you''re just getting started with Qt, stick with the default formatting,
    and remember the old adage *To do no harm*. When it comes to editing existing
    code—match the formatting that''s already there.'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
- en: Building from the command line
  id: totrans-58
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Sometimes, you need to build a project from the command line. Maybe you're working
    on Linux, and you're just more comfortable there, or you've got a remote session
    running to your desktop while you're in a meeting. Or maybe, you want to automate
    builds on a build server, and need to know how Qt does its compilation magic for
    your builds.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
- en: 'The trick is `qmake`: Qt''s meta-make system that manages generating Make files
    for the compiler toolchain you already have installed. The `qmake` command takes
    `.pro` files, which you first saw in [Chapter 2](ch02.html "Chapter 2. Building
    Applications with Qt Creator"), *Building Applications with Qt Creator*, and generates
    the Make or Nmake file necessary for your toolchain to build your application.'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
- en: 'First, be sure that you have your compiler and `make` utility in your system
    path: how you do this varies from development environment to development environment.
    Next, be sure that you have commands for Qt''s build system in your path—a default
    if you''ve installed Qt on Linux using the package manager, and easily done by
    editing your path to include the appropriate `bin` directory from the Qt tools
    you installed on Mac OS X or Windows.'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, open up a command window and change to the directory containing your
    project: your `.pro` file should be at the root of that directory. Type `qmake`,
    and then either make (if your build system uses `make`), or `nmake` (if you''re
    using a Microsoft Windows toolchain). That''s all there is to it!'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
- en: Setting Qt Quick window display options
  id: totrans-63
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Qt Quick is great for building applications for nontraditional computing environments,
    such as set-top boxes or automotive computers. Often, when working with Qt Quick
    you'll want an application that doesn't have all the usual windows chrome (such
    as the close box) around the contents of the window in these settings, because
    you're trying to present a unified user interface based on your Qt Quick application,
    rather than the windowing toolkit on the host platform.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
- en: 'You can easily set opacity and windows options (such as whether or not to show
    a close box) by editing the `main.cpp` file in your Qt Quick project. By default,
    it looks like this:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'This code creates a Qt Quick application viewer, sets its main QML file (the
    first one to be loaded) to the indicated file, and then shows it before starting
    the application''s event loop. Fortunately, the `QtQuick2ApplicationViewer` object
    has a `setFlags` method that lets you pass `Qt::Window` flags to the window it
    initializes to display your Qt Quick application. These flags include:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
- en: '`Qt::FramelessWindowHint`: This indicates that the window should be borderless
    (works on Linux systems, but not on Windows)'
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Qt::Popup`: This indicates a pop-up window (you can use this on Windows to
    get a nearly borderless window with a slight drop shadow)'
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Qt::WindowStaysOnTopHint`: This indicates that the window should stay on top
    of all other windows'
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Qt::WindowStaysOnBottomHint`: This indicates that the window should stay below
    all other windows'
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Qt::Desktop`: This indicates that the window should run on the desktop'
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A full list of the flags can be found in the Qt documentation at [http://bit.ly/17NT0sm](http://bit.ly/17NT0sm).
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
- en: You can also adjust a window's opacity, by using the `setOpacity` method of
    `QtQuick2ApplicationViewer`.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
- en: 'Say, for example, we want a blue window with no border but a slight drop shadow
    at 75 percent opacity to hover over all other windows for my Qt Quick application.
    We''d change the QML to read:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Note the `color: blue` declaration for our top-level rectangle. Next, we''d
    modify `main.cpp` to read:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'The key lines here come just before `viewer.setMainQmlFile`: the `setOpacity`
    method sets the main window''s opacity, and the `setFlags` method sets the flags
    for the main window to be a pop up that will be on top of all other windows. By
    running the application, we can see something like the following screenshot:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
- en: '![Setting Qt Quick window display options](img/2319_07_03.jpg)'
  id: totrans-80
  prefs: []
  type: TYPE_IMG
- en: A translucent Qt Quick window atop other windows
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
- en: You can use this trick to come up with a variety of effects for how your Qt
    Quick application is displayed.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
- en: Learning more about Qt
  id: totrans-83
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In the earlier chapters, I pointed you to the **Help** panel of Qt Creator,
    as well as the editor''s facility for autocompletion of class members when editing
    code. The Qt Creator''s **Help** view is really a subview into Qt Assistant, the
    full documentation for all of Qt. Much of this documentation is also on the Web,
    but it''s much faster to access locally. We start Qt Assistant from the Qt SDK
    (either from the command line with `qtassistant` or by finding it in the installed
    list of applications), and we can see something like the following screenshot:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
- en: '![Learning more about Qt](img/2319_07_04.jpg)'
  id: totrans-85
  prefs: []
  type: TYPE_IMG
- en: Qt Assistant
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
- en: Qt Assistant is the definitive place to learn about Qt. In the left column you
    see a table of contents; the best place to start is with Qt Core, and then either
    Qt GUI or Qt Quick depending on whether you want to write GUI or Qt Quick applications.
    The main view on the right is just like a browser window, complete with hyperlinks
    to related sections.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
- en: Also inside Qt Assistant, you can add bookmarks to frequently accessed pages,
    see an index of all terms in the documentation, and quickly search for terms using
    the search tab in the left-hand column. It's an invaluable resource, and as easy
    to use as an e-book.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
- en: Finally, if you prefer the Web for learning about things, don't forget Qt's
    extensive online documentation, available at [http://bit.ly/15F11Ok](http://bit.ly/15F11Ok).
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，如果您喜欢通过网络了解事物，请不要忘记Qt的广泛在线文档，可在[http://bit.ly/15F11Ok](http://bit.ly/15F11Ok)上找到。
- en: Summary
  id: totrans-90
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: Qt and Qt Creator provide a great environment for your application development,
    whether you're writing console, GUI, or Qt Quick applications. You can mix and
    match standard C++ code with Qt, letting you make the most of your existing skills.
    When doing so, you can add in things such as version control and command-line
    builds to your tools, giving you the ability to work in large teams and perform
    unattended builds of large projects using Qt. Qt also has a great documentation
    both bundled with Qt Creator and on the Web. With what you've learned in this
    book and what's available, the sky's the limit for your application development
    goals!
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: Qt和Qt Creator为您的应用程序开发提供了一个很好的环境，无论您是编写控制台、GUI还是Qt Quick应用程序。您可以将标准C++代码与Qt混合使用，从而充分利用您现有的技能。在这样做时，您可以添加诸如版本控制和命令行构建等工具，使您能够在大型团队中工作，并使用Qt执行大型项目的无人值守构建。Qt还有一个很好的文档，既包含在Qt
    Creator中，也可以在网络上找到。通过本书学到的知识和可用的资源，您的应用程序开发目标将不受限制！
