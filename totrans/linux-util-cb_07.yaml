- en: Chapter 7. Disks and Partitioning
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Using `fdisk`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using `mkfs` to format a drive
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using `fsck` to check the filesystem
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Logical Volume Management (LVM)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When installing a machine, you can take the defaults or set up your disk(s)
    practically any way you want. Here is a brief review of partitions and filesystems.
    A typical Linux system usually has at least three separate partitions. They are
    labelled `/`, `/boot`, and `swap`. The `/` (pronounced *root*) is the parent of
    the directory structure. `/boot` is where the system kernel and map files reside.
    The `swap` partition is used when parts of memory need to be moved to the hard
    drive because of over-commitment. This is called being *swapped out* to disk.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following are usually on separate partitions:'
  prefs: []
  type: TYPE_NORMAL
- en: '`/`: It is the parent directory'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`/boot`: The boot and map files are located in here'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`(swap)`: It signifies the swap space'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following are traditionally on a separate partition, but do not have to
    be:'
  prefs: []
  type: TYPE_NORMAL
- en: '`/home`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`/tmp`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`/etc`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`/var`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Here is a partial list of the filesystems and directories and their general
    use, that are normally present on a Linux system. This is taken from Fedora 17
    64-bit:'
  prefs: []
  type: TYPE_NORMAL
- en: '`/`: It is the parent directory.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`/boot`: The boot, map files, and system kernel are present in it.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`(swap)`: It stands for the swap space.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`/root`: It is the home directory for the superuser.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`/home`: The user directories go here (for example, `/home/guest1`, which has
    been used throughout this book).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`/tmp`: It is a directory that has the file deletion bit set. Temporary files
    can be placed here by users and various other programs. A `cron` job run by root
    cleans `/tmp` at periodic intervals (usually once a week).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`/usr`: It consists of the operating system''s (OS)’s parent user directory.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`/usr/bin`: It has the OS’s executable programs.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`/usr/etc`: It contains the OS’s configuration files.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`/usr/games`: It consists of the games provided by the distribution.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`/usr/include`: It includes files for programming languages such as C.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`/usr/lib`: It contains the OS’s library files.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`/usr/lib64`: It consists of the OS’s library files of 64 bit versions.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`/usr/local`: The user programs can be placed here by the system admin for
    their use.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`/usr/sbin`: It has the OS’s executable programs used by the system.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`/usr/share`: It includes the OS’s shared programs and files.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`/usr/src`: The OS’s kernel source, include, and make files are placed here'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`/dev`: It represents the device directory. For example, the `/dev/sda` device
    points to the first SCSI hard drive.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`/lib`: It is a symbolic link to `/usr/lib`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`/lib64`: It is a symbolic link to `/usr/lib64`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`/mnt`: It is used as a mount point.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`/opt`: It represents the optional files.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`/var/logs`: It consists of the OS’s logs.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`/var/spool`: It contains the printer files.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`/var/run`: The OS keeps data on running programs here.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`/run`: It is the symbolic link to `/var/run`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`lost+found`: It is where the OS keeps track of filesystem data.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`/etc`: It is pronounced *etcetera* and stands for *everything else*. Configuration
    files tend to be located here.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The different types of virtual filesystems are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`/proc`: The OS keeps track of processes here. See the previous chapter for
    more information.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`/sys`: The OS keeps track of other processes in this directory.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Some other useful terms have been defined in the following list:'
  prefs: []
  type: TYPE_NORMAL
- en: '**device**: It refers to the entire disk. For example, the first SCSI disk
    is normally named `/dev/sda`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**partition**: It is the device name followed by a number. The first SCSI partition
    would be `/dev/sda1`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**filesystem**: It defines the type of filesystem being used. Some examples
    are `ext2`, `ext3`, `ext4`, `vfat`, and `xfs`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**mount point**: It is the directory that points to the partition. The `/etc/fstab`
    file contains a table showing mount points and the partitions they are associated
    with. This file, which is created by a system installer such an Anaconda, can
    be manually edited by the superuser to add or delete devices and mounts.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The boot partition is where the operating system kernel and other startup files
    are located. Here is a description of the files found in `/boot`:'
  prefs: []
  type: TYPE_NORMAL
- en: '`vmlinuz`: It represents a symbolic link to the kernel. For example, it points
    to `vmlinuz-2.6.35.6-45.fc14.x86_64` on Fedora 14.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`initramfs`: It represents the initial RAM disk. On Fedora 14, it is named
    as `initramfs-2.6.35.6-45.fc14.x86_64.img`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`config`: This file is used to configure the kernel. We will see more on that
    in [Chapter 10](ch10.html "Chapter 10. The Kernel"), *The Kernel*. On Fedora 14,
    it is named as `config-2.6.35.6-45.fc14.x86_64`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`map`: This is the system map file, which contains entry points into the various
    kernel routines. On Fedora 14, it is named as `System.map-2.6.35.6-45.fc14.x86_64`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The initial RAM disk needs a bit more explanation. This file contains all the
    device drivers needed to get the kernel loaded and running. For example, the kernel
    needs to access the hard drive in order to boot up. If it needs a special driver
    for this (that is, if it can’t be accessed by the BIOS alone), it must be located
    in the `initramfs` file or else it will not be able to complete the process. The
    `initramfs` file is created during system install, and can be modified by an experienced
    person. This is normally done when testing and/or using a new hardware. This is
    a compressed `GZIP` file that is uncompressed and placed on a ram(in memory) disk
    during boot up.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is a snapshot of `/boot` and the file command on my Fedora 17
    system:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Introduction](img/3008OS_07_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The `df` program is used to report the filesystem disk space usage statistics.
    The following output is a `df -h` listing from my Fedora 14 system. The `-h` parameter
    puts the output into a more human readable form (useful on large disks):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: The first column shows the partition of the filesystem. The second shows the
    size of the partition. The third is the amount used followed by the amount still
    available. The `Use%` is the percentage used, and the last column is the mount
    point.
  prefs: []
  type: TYPE_NORMAL
- en: This output tells you a lot about how I set up this system. I did not make separate
    partitions for `/home`, `/tmp`, `/etc`, or `/var`. They are all in the same partition
    under `/`. I have the required `/boot` partition which I made larger than the
    default since I frequently build new kernels. There is a separate `/data` and
    `/lewis` partition. All the mentioned partitions are on the `/dev/sda` device.
    So what device and partitions are `/dev/sdf1` and `/dev/sdg1`? The first is an
    Iomega external USB drive and the second is an 8 GB **Universal Serial Bus** (**USB**)
    stick. These are used for backups, just in case the primary drive goes out.
  prefs: []
  type: TYPE_NORMAL
- en: The `fsck` program is used to check and optionally repair damaged filesystems.
    It can check multiple filesystems in parallel to speed up processing. If no parameters
    are given, `fsck` defaults to checking the filesystems in the `/etc/fstab` file.
  prefs: []
  type: TYPE_NORMAL
- en: When using partitions, you must keep in mind where a directory is mounted on.
    For example, suppose the space on `/` is getting tight and so you decide to delete
    some big files that are located in the `/tmp` directory. You need to first make
    sure that `/tmp` is indeed mounted on `/`, and not on its own partition. It is
    easy to make this mistake, so keep it in mind. This is even more of an issue if
    you are the system administrator for a lot of machines that are not all set up
    the same way.
  prefs: []
  type: TYPE_NORMAL
- en: Using fdisk
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `fdisk` program is used to manipulate the disk partition table. You can
    create, modify, and remove partitions with this utility.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You may follow along with these commands as long as you do not use the write
    table to disk action. However, just to be safe you may want to use a USB stick,
    or some other drive or system you don’t care about.
  prefs: []
  type: TYPE_NORMAL
- en: The syntax for the interactive version of `fdisk` is `fdisk <device-name>`.
    I will be using a 4GB USB stick, `/dev/sdb` for this example. Remember that `fdisk`
    works with the entire device, so you do not use a partition number when starting
    the command. We will perform these actions as root.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is a screenshot showing `fdisk` on Fedora 18:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Getting ready](img/3008OS_07_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Carry out the following steps for running `fdisk`:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Start the command by running `fdisk` on the device:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'To display the Help menu: `enter an m`. It brings up the list of actions that
    can be performed on this device.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'To display the partition table: `enter a p`. A list of the partitions on this
    device will be displayed.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the case of my USB stick, there is only one partition. So let’s delete it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Since there was only one partition, it was deleted by default. Now let’s add
    one:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Since this is the first partition, `press a p` for Primary.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now run `enter a 1` and take the default starting sector.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'We now have to enter a size. This can be done by the sector number or size.
    Let’s use size and make it 1 GB:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Run `enter a p` again to see what we have. You should see something like the
    following output:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'This looks good. Now let’s add another one and then take the defaults:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'For size, let’s use 2 GB this time:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'To see what it looks like:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: The table should now show two partitions. At this point, you could continue
    to make more partitions, or save the table. You can always make more partitions
    later if you have the required disk space.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'For this example, we will quit without saving the changes:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: To make sure nothing went wrong, run `fdisk /dev/sdb -l` to get a listing. It
    should show the same as when we started.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: There’s more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You may have noticed some other actions available on the `fdisk` help screen.
    You can change the way the units are displayed, list the known partition types,
    and a few other things. For more information, consult the `fdisk man` page.
  prefs: []
  type: TYPE_NORMAL
- en: Using mkfs to format a drive
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `mkfs` command builds a filesystem on the device (similar to formatting
    a drive). It determines the filesystem type and calls the appropriate `mkfs.<type>`
    program. For example, if you were to run `mkfs -t ext4 /dev/sdb5`, it would actually
    run the `mkfs.ext4` program. The `mkfs` options are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`-t`: It specifies the type of filesystem desired'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-V`: It produces verbose output'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-V`: It displays version information if used as the only parameter'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-h`: It displays a help screen'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note that no other parameters are passed to the filesystem’s specific program.
    Also note that in some cases, a size value needs to be provided.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `mkfs` program will destroy any data currently residing in the partition.
    So, make sure you have taken the desired backups before proceeding with this command.
    Once this action has been taken, it cannot be reversed. If you would like to follow
    these steps, you should first practice on a USB stick or some other device you
    don’t care about.
  prefs: []
  type: TYPE_NORMAL
- en: Be sure to unmount the partition before proceeding.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Carry out the following steps for formatting a partition in Linux:'
  prefs: []
  type: TYPE_NORMAL
- en: 'For this example, I have inserted a USB stick (one I don’t care about). To
    make sure we have the correct device, run `dmesg` and look at the last line:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'On my system, it shows the device is `/dev/sdh1` (substitute your device accordingly).
    It did not mount it, so I am ready to proceed. However, if yours is auto-mounted,
    you should be able to unmount it by running:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Note that the following command will destroy any data on this device. So, be
    sure you have backed up anything that want to keep before proceeding!
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Run the command `mkfs -V -t vfat /dev/sdh1`. The following output is shown
    on my system:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Now mount the device: `mount /dev/sdh1 /usb2` (substitute your device and mount
    point as you feel appropriate).'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Run `ls -la /usb2`. It should look something like the following output:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: That’s pretty much it for `mkfs`. Just be very careful when using this command
    and double check everything first before proceeding.
  prefs: []
  type: TYPE_NORMAL
- en: Using fsck to check the filesystem
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In order to check and repair a Linux filesystem, the `fsck` program is used.
    In reality, `fsck` is just a frontend for the filesystem specific checker (similar
    to `mkfs`).
  prefs: []
  type: TYPE_NORMAL
- en: The `fsck` program can be run on different filesystems in parallel to speed
    up processing. Note that this feature can be disabled on low resource machines.
  prefs: []
  type: TYPE_NORMAL
- en: 'In general, the syntax for `fsck` is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `fsck` program if used incorrectly, can corrupt the data currently residing
    on the partition. So make sure you have taken all the desired backups before proceeding
    with this command. Once this action has been taken, it cannot be reversed. If
    you would like to follow these steps, you may first want to practice on a USB
    stick you don’t care about.
  prefs: []
  type: TYPE_NORMAL
- en: The device must be unmounted before running the command.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Carry out the following steps to check and run a partition:'
  prefs: []
  type: TYPE_NORMAL
- en: 'For this example, I have inserted a USB stick (one I don’t really care about).
    To make sure we have the correct device, run `dmesg` and look at the last line:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: On my system, it shows the device is `/dev/sdh1` (substitute your device accordingly).
    It did not mount it, so I am ready to proceed. However, if yours is auto-mounted,
    you should be able to unmount it by running `umount /dev/sdh1`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'We can now run the `fsck` program. I first want to see what actions it will
    take and so, will use the `-N` option. Run `fsck -N /dev/sdh1`. The following
    output is shown on my system:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'This looks good, so let’s include a progress bar and run it for real: `fsck
    -C /dev/sdh1`. The following result is obtained on my system:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: Since there were no problems on this USB stick, the output is not very exciting.
    I have seen some really bad errors in the past, and if this happens to you, I
    suggest getting the data off the drive as soon as possible, and then either reformatting
    the drive with `mkfs` or getting a new one just to be safe.
  prefs: []
  type: TYPE_NORMAL
- en: There’s more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The following is a brief list of the options for `fdisk` along with their functions:'
  prefs: []
  type: TYPE_NORMAL
- en: '`-l`: It will lock the device before checking and can be used on only one device
    at a time.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-s`: It will serialize the file checking operations. It is useful when checking
    more than one filesystem at a time in the interactive mode.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-A`: It uses the entries in the `/etc/fstab` file to go through and check
    all the filesystems in one run. Typically, the root filesystem is checked first
    and then the others based on the values of the `passno` value. See the `man` page
    of `fstab` for more information on the available options.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-C`: It will display a progress bar.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-M`: It specifies not to check the mounted filesystems.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-N`: It will show what actions would be performed on this device but does
    not actually make them'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-P`: It will check the root filesystem in parallel with the other systems.
    Don’t ever use this option.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-R`: It will skip the root filesystem while checking the others.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-V`: It will enable verbose output and so its usage is recommended.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following is a list of options usually supported by the filesystem specific
    program:'
  prefs: []
  type: TYPE_NORMAL
- en: '`-a`: It will automatically repair the filesystem without any questions. Be
    very careful with this option as I have seen it go horribly wrong on more than
    one occasion.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-n`: This option is supposed to tell the specific checker to not perform any
    repairs. It is unreliable and so not recommended.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-r`: It will repair the filesystem interactively. Do not use this option if
    running `fsck` in parallel.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-y`: It tells some specific checkers to make repairs automatically.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In theory, a journaling filesystem, such as `ext3` or `ext4`, should not need
    a lot of checking or repair. If this is not the case on your system, I would suspect
    the hardware or maybe the hardware CMOS levels. Make sure everything in your system
    is flashed to the proper version.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In order to repair a filesystem, it must not be mounted. Also, checking a mounted
    filesystem may give bogus error messages sometimes.
  prefs: []
  type: TYPE_NORMAL
- en: Logical Volume Management (LVM)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: LVM for Linux allows one to manage disks or arrays of disks as one large pool
    of storage. An LVM consists of one or more physical volumes along with one or
    more logical volumes.
  prefs: []
  type: TYPE_NORMAL
- en: Directories such as `/root` and `/home` for example, are located in a logical
    volume. Several commands exist to manage the LVM. Some operate on physical volumes,
    some operate on logical volumes, and some on both.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following list can be used as a quick reference guide for the LVM commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '`pvcreate`: It initializes a disk or partition'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`pvchange`: It changes the allocation permissions of one or more physical volumes'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`pvck`: It checks the physical volume metadata'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`pvdisplay`: It displays the attributes of a physical volume'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`pvmove`: It moves physical extents'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`pvremove`: It removes a physical volume'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`pvresize`: It resizes a disk or partition'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`pvs`: It reports information about physical volumes'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`pvscan`: It scans all the disks for physical volumes'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`vgcfgbackup`: It backs up the volume group descriptor area'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`vgcfgrestore`: It restores the volume group descriptor area'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`vgchange`: It changes attributes of a volume group'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`vgck`: It checks the volume group metadata'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`vgconvert`: It converts the volume group metadata format'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`vgcreate`: It creates a volume group'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`vgdisplay`: It displays the attributes of volume groups'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`vgexport`: It makes volume groups unknown to the system'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`vgextend`: It adds physical volumes to a volume group'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`vgimport`: It makes exported volume groups known to the system'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`vgimportclone`: It imports and renames a duplicated volume group'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`vgmerge`: It merges two volume groups'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`vgmknodes`: It recreates a volume group directory and logical volume special
    files'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`vgreduce`: It removes the unused physical volumes from a volume group'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`vgremove`: It removes a volume group'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`vgrename`: It renames a volume group'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`vgs`: It reports information about volume groups'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`vgscan`: It scans all the disks for volume groups and rebuilds caches'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`vgsplit`: It splits a volume group into two'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`lvchange`: It changes the attributes of a logical volume'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`lvconvert`: It converts a logical volume from linear to mirror or snapshot'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`lvcreate`: It creates a logical volume in an existing volume group'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`lvdisplay`: It displays the attributes of a logical volume'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`lvextend`: It extends the size of a logical volume'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`lvmdiskscan`: It scans for all the devices visible to lvm2'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`lvmdump`: It creates lvm2 information dumps for diagnostic purposes'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`lvreduce`: It reduces the size of a logical volume'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`lvremove`: It removes a logical volume'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`lvrename`: It renames a logical volume'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`lvresize`: It resizes a logical volume'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`lvs`: It reports information about logical volumes'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`lvscan`: It scans all the disks for logical volumes'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The following commands assume that you are running an LVM-aware system. Note
    that you do not need to actually have your drive in an LVM format in order to
    try the commands.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The following are some non-destructive commands you can try on your system
    (you will need to be in root to run these):'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s see all the physical volumes on the system:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'Now let’s scan the disks:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, display the attributes of the volume groups:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'We report information about volume groups:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'The disks for all the volume groups are then scanned:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'Then the attributes for the logical volume (this one gets used a lot) need
    to be displayed:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'Scan for all the devices visible to LVM:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'Report information about the logical volumes:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'Scan all the disks for logical volumes:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'The following is a screenshot of `pvdisplay` and `vgdisplay` on my Fedora 14
    system:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/3008OS_07_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: There’s more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If you are accustomed to the traditional method of configuring disk drives,
    LVM can take a while to get used to. I have found the man pages to be pretty good
    in this area, and the Internet has some good articles on it as well.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding different filesystems
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'At the time of writing this, there are over 60 different filesystems available
    for Linux. The following is a brief overview of the common ones you may frequently
    encounter:'
  prefs: []
  type: TYPE_NORMAL
- en: '`Btrfs`: B-tree filesystem is a copy-on-write filesystem developed by Oracle
    in 2007\. It is still in the developmental stage and considered experimental.
    The intention of `Btrfs` is to allow the filesystem to scale as drives get larger
    and larger. Because of its benefits, it is being considered as the filesystem
    to replace `ext4`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ext2`: It was introduced in 1993\. This filesystem does not have journaling
    and hence, has fewer writes per cycle, making it a good choice for flash drives.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ext3`: It is very similar to `ext2` with the addition of journaling, which
    improves reliability, especially after an unclean shutdown.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ext4`: Being released in 2008, it is considered the successor of `ext3`. It
    can handle volumes up to 1 exbibyte and files up to 16 tebibytes. This filesystem
    uses extents to replace the traditional block mapping scheme used by earlier versions
    of ext. It has enhancements allowing for faster filesystem checks (`fsck`).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`FAT`: This is the abbreviation of File Allocation Table and the format was
    originally used by DOS, OS/2, and Windows. It is available in the kernel mainly
    to provide support for external devices such as USB flash drives.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ReiserFS` (or `Reiser3`): It is a general purpose filesystem with journaling,
    originally designed and written by Hans Reiser. When it was created, it contained
    many features that were not yet available at the time including journaling, online
    growth, and a scheme to limit internal fragmentation.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Reiser4`: It is the successor of `ReiserFS` (due to the conviction of the
    designer Hans Reiser for murder, future development is uncertain).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
