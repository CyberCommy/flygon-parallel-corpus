- en: Chapter 5. Customizing the Apache Server
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Our Sun and Sand festival site is more or less done! But before we deploy it
    to production, let us make sure we have optimized the configuration of the server
    where the page and the associated files will be served from, so that the end users
    can load the page as quickly as possible, while we check against security vulnerabilities
    that might cause our site to get hacked.
  prefs: []
  type: TYPE_NORMAL
- en: Server-side configurations
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Before we go further, let us briefly look at what a server does. The server
    understands a browser's request for a page of your site and then looks for the
    file the URL requests. The server then sends the file back to the browser with
    additional information called HTTP headers. **Apache** is the most popular server
    software for websites, and HTML5 Boilerplate comes with a configuration file for
    Apache called `.htaccess`.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up the Apache server
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Before we check out the various features of the Apache configuration file provided
    by HTML5 Boilerplate, let us set up a local Apache server, so that we can see
    these features in action.
  prefs: []
  type: TYPE_NORMAL
- en: Installing Apache
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We will look at the installations of Apache on Mac, Windows, and Linux.
  prefs: []
  type: TYPE_NORMAL
- en: Mac
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'You do not have to do anything special; Apache is already installed. But to
    use it for this project, ensure you copy all the files to the website''s folder
    in your home folder (`/~<username>`). Edit the `/etc/apache2/httpd.conf` file
    to change the following highlighted code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'To the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: You will also need to change this entry in `/etc/apache2/<username>.conf` the
    same way.
  prefs: []
  type: TYPE_NORMAL
- en: Windows
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'You need to download and install Apache on Windows; it can be downloaded from
    `httpd.apache.org/docs/2.2/platform/windows.html`. Note that you need to add the
    following code snippet to `conf/httpd.conf`, located within the folder where the
    Apache application is found:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Linux
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'If you are using Ubuntu, there is a friendly documentation available at [https://help.ubuntu.com/8.04/serverguide/C/httpd.html](https://help.ubuntu.com/8.04/serverguide/C/httpd.html).
    To enable `.htaccess` files, used to configure your Apache server, you need to
    edit `/etc/apache2/sites-available/default` from the following code snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'To the following code snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Configuring Apache
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Our folder for HTML5 Boilerplate contains a file called `.htaccess`. As the
    filename starts with a `.`, it is likely that `.htaccess` won''t show up when
    you list your files in Finder/Windows Explorer or other file manager utilities,
    as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Configuring Apache](img/8505_05_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: But if you enable the hidden files to appear on your OS, you will be able to
    see this file.
  prefs: []
  type: TYPE_NORMAL
- en: All that is required now is to move our site files (including the `.htaccess`
    file) to the server we just set up. Apache looks for a `.htaccess` file on all
    folders (unless told not to by a configuration setting) and so having our `.htaccess`
    file in the parent folder of our site is just fine.
  prefs: []
  type: TYPE_NORMAL
- en: Using a `.htaccess` file for testing is not a bad idea in general. However,
    if you want to make your site really zippy, it is best to put the configuration
    directly on the Apache server's main configuration file (`httpd.conf`). Unfortunately,
    not all hosting providers allow this.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you do have access to the Apache server''s main configuration file (`httpd.conf`),
    you should copy the configurations from HTML5 Boilerplate''s `.htaccess` file
    and put them within `httpd.conf` inside a `Directory` tag, as shown in the following
    code snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: You should then remove the `.htaccess` file as the directives are already on
    the server's main configuration file.
  prefs: []
  type: TYPE_NORMAL
- en: Features available out of the box
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Most of the advantages that HTML5 Boilerplate's `.htaccess` file provides are
    not immediately obvious. If your site receives low traffic and does not make too
    many network requests, you may not notice any significant difference using HTML5
    Boilerplate's `.htaccess` file. However, when you do have spikes of high activity
    (not uncommon!) or suddenly have a lot of network requests for images and videos
    that your site requires, HTML5 Boilerplate's `.htaccess` comes to your rescue
    automatically.
  prefs: []
  type: TYPE_NORMAL
- en: All of these features are available to you as soon as you either put a `.htaccess`
    file in the project folder or if you set up Apache's main configuration file as
    indicated earlier.
  prefs: []
  type: TYPE_NORMAL
- en: Removing ETags
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Entity Tags** (**ETags**) validate whether components, that is, images, files,
    and so on, in a browser''s cache match components on the server. Unfortunately,
    ETags do more harm than good. Most servers have ETags available by default, which
    is why HTML5 Boilerplate''s server configuration file prevents a server from serving
    them, as shown in the following code snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Steve Souders writes in depth on why ETags fail to solve the problem they were
    designed for and why you should remove them, at `developer.yahoo.com/blogs/ydn/posts/2007/07/high_performanc_11/`.
  prefs: []
  type: TYPE_NORMAL
- en: Gzip components
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Gzip** is the most popular compression method. By compressing your files
    with Gzip, you can make sure your files get transferred more quickly, even with
    low bandwidth connections. Sometimes the savings are as much as 70 percent of
    file size, making this a great performance configuration default.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let us look at how big our files are without our `.htaccess` Gzip feature in
    place. To do this, we simply comment out that section, as shown in the following
    code snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, let us look at the sizes of files that get delivered to our browser through
    the network tools available in browser developer tools (in this case, Chrome Developer
    Tools):'
  prefs: []
  type: TYPE_NORMAL
- en: '![Gzip components](img/8505_05_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Now, let''s enable Gzip by enabling the appropriate rules in `.htaccess` by
    removing `#` from the beginning of the lines. Notice the difference, as shown
    in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Gzip components](img/8505_05_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: If you would like to learn more about Gzip, [Chapter 4](ch04.html "Chapter 4. Adding
    Interactivity and Completing Your Site"), *Smaller Components, Book of Speed,
    Stoyan Stefanov*, found at [www.bookofspeed.com/chapter4.html](http://www.bookofspeed.com/chapter4.html),
    would be a good place to start from.
  prefs: []
  type: TYPE_NORMAL
- en: Using Expires header for better cache control
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Servers can indicate to browsers how long they can keep files in the cache.
    This is pretty useful for static files that don''t change frequently, and will
    reduce your page-load time. HTML5 Boilerplate''s `.htaccess` file has a set of
    defaults for most static files, as shown in the following code snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'This tells the server to cache requests for files of each type as soon as it
    is accessed freshly for the period specified by the text `"access plus…"`. For
    example, consider the following code snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: This fragment makes the server tell the browser, requesting CSS and JavaScript
    files, to cache each of these files for at least a year since the first time it
    was accessed, unless the user deliberately clears their cache.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Yahoo's best practices for speeding up your site has a detailed explanation
    of what the Expires header does at `developer.yahoo.com/performance/rules.html#expires`.
  prefs: []
  type: TYPE_NORMAL
- en: Custom 404 page
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'HTML5 Boilerplate provides a custom 404 page called `404.html`. But, this will
    never be used, unless the server knows to serve this file every time a resource
    is not found. HTML5 Boilerplate''s `.htaccess` file has a configuration that tells
    the server to use this file as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Make sure to refer to the `404.html` using the full path. For example, on a
    Mac, the full path would be `/~<username>/404.html`, if you are hosting it in
    the website's folder under your `<username>` folder.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following screenshot shows how a browser renders the default HTML5 Boilerplate
    404 page, when HTML5 Boilerplate''s `.htaccess` file is used:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Custom 404 page](img/8505_05_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Forcing the latest IE version
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Internet Explorer utilizes a `meta` tag to decide whether it should render a
    site in compatibility mode or use the latest rendering engine to render it.
  prefs: []
  type: TYPE_NORMAL
- en: Google Chrome has released a plugin named **Chrome Frame** , downloadable from
    [https://developers.google.com/chrome/chrome-frame/](https://developers.google.com/chrome/chrome-frame/)
    that, if installed on a user's computer, will provide the experience of a modern
    browser when the user uses older versions of Internet Explorer. Your site can
    opt-in to using this plugin on a user's computer, when your page is being viewed
    on older versions of Internet Explorer. To opt-in to using this plugin automatically,
    append `", chrome=1"` to the `content` attribute value for the `http-equiv` `meta`
    tag.
  prefs: []
  type: TYPE_NORMAL
- en: 'This tag can be set within the HTML file itself, which is what HTML5 Boilerplate
    does, as shown in the following code snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'However, as HTML5 Boilerplate uses conditional comments around the `html` tag,
    IE will render the HTML in **Compatibility View**, not with Chrome Frame. Hence,
    using the `meta` tag with conditional comments around the `html` tag would not
    work. HTML5 Boilerplate''s .`htaccess` file sets this as an HTTP header instead,
    as shown in the following code snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: This forces IE to respect the HTTP header that is sent, and use the latest rendering
    engine irrespective of what the `meta` tag states. You can also set IE to use
    whatever rendering engine you like. We discuss this feature in depth in [Appendix](apa.html
    "Appendix A. You Are an Expert,Now What?"), *You Are an Expert, Now What?*, under
    the section *What is meta x-ua-compatible?*.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: There is a great level of detailed testing and comments that informed our decision
    to recommend this method for setting IE Compatibility mode, which is available
    from the **Issue Tracker** on Github at [github.com/h5bp/html5-boilerplate/issues/378](http://github.com/h5bp/html5-boilerplate/issues/378).
  prefs: []
  type: TYPE_NORMAL
- en: Using UTF-8 encoding
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Character encoding is a way to represent your text data in byte sequences.
    There have been different standards available for different scripts, for example,
    Greek, Japanese, and so on, but the standards body that creates HTML specifications,
    W3C, strongly endorses the use of **UTF-8** as the de-facto encoding scheme for
    all text served on the Web to ensure all browsers can render your text data correctly.
    The `.htaccess` file sets it in the following manner:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Edward Z. Yang wrote an informative post on why UTF-8 is the best choice for
    character encoding at `htmlpurifier.org/docs/enduser-utf8.html#whyutf8;` it is
    worth reading if you are interested in this topic.
  prefs: []
  type: TYPE_NORMAL
- en: Serving the right MIME types
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A **Multipurpose Internet Mail Extensions** (**MIME**) type sent as a HTTP header
    helps the browser decide how to process the content that is sent. For example,
    a browser needs to know when a file is a stylesheet and when it is a downloadable
    text document. This information is provided by the MIME type HTTP header that
    the server returns when sending that resource. HTML5 Boilerplate's `.htaccess`
    file ensures your server provides the right MIME type when serving content.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, in our Senegal music festival website, we need our Web fonts to
    be understood by the browser to be a font file and not garbled text. In our HTML5
    Boilerplate `.htaccess` file, the following lines make sure the server returns
    the correct MIME type so browsers can do that:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: More information on MIME types can be found on the **Mozilla Developer Network**
    at `developer.mozilla.org/en/Properly_Configuring_Server_MIME_Types#What_are_MIME_types.3F`.
  prefs: []
  type: TYPE_NORMAL
- en: Blocking access to hidden folders
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'If you use a **Version Control System** (**VCS**) to manage your website''s
    code, the hidden folders used to manage versioning (`.git` or `.svn`) are likely
    to exist in your production servers too. You do not want anyone to access these
    files and find any information that could be used to hack your website. HTML5
    Boilerplate prevents the server from providing content requested of these folders
    within the `.htaccess` file, as shown in the following code snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: Blocking access to backup and source files
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'If you have your databases backed up on the server, for example, `database.sql.bak`,
    you do not want anyone to access that either, nor logfiles or any of your source
    files, such as Photoshop files for logos—we know it happens! The following code
    in the `.htaccess` file prevents access to these files:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'This tells the server to look for files that end with any of these extensions:
    `<filename>.bak`, `<filename>.config`, and so on, and if so, deny processing requests
    for such files. It will return a `403 Forbidden` error instead.'
  prefs: []
  type: TYPE_NORMAL
- en: Starting Rewrite engine
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The Apache server requires you to start the rewrite engine before you do any
    URL rewriting. The HTML5 Boilerplate `.htaccess` file enables this as shown in
    the following code snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: If your site is in a subfolder, remove the `#` from the `RewriteBase` line and
    set it to the full path to the subfolder from the root.
  prefs: []
  type: TYPE_NORMAL
- en: Preventing 404 errors for non-existing redirected folders
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In Apache, you need to disable `MultiViews` if you want to redirect URLs requested
    from paths, that do not exist, to another path.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, if you have an incoming request to `http://example.com/beaches/10`
    and you want it to internally redirect to `http://example.com/index.php?q=10`
    and the folder `beaches` does not exist in the root folder of your website, Apache
    would throw an error. The HTML5 Boilerplate''s `.htaccess` file prevents this
    from occurring by using the following code statement:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: Additional customizations
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Many additional customizations are provided but are commented out, as they require
    careful consideration and sometimes may have unwanted repercussions.
  prefs: []
  type: TYPE_NORMAL
- en: Suppressing or forcing the "www." at the beginning of URLs
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Most of us do not realize that `http://example.com` and `http://www.example.com`
    are treated as two separate sites by search engines. You can either force rewriting
    of URLs to www or the non-www ones. I prefer the non-www URL, because it is three
    characters shorter!
  prefs: []
  type: TYPE_NORMAL
- en: 'HTML5 Boilerplate''s `.htaccess` file provides you with choices for doing either
    of them. By default, the configuration forces the server to rewrite requests for
    `http://www.example.com` to `http://example.com`. If you prefer the other way
    around, have the server rewrite requests for `http://example.com` to `http://www.example.com`,
    as described in the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Comment out the default option shown in the following code snippet:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'The commented-out default section should now look like the following code snippet:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: As you might notice, all we did was add a `#` character and a space before each
    of those lines.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, we shall enable the second option by uncommenting it. Change the following
    code snippet by uncommenting it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'The uncommented code section should look like the following code snippet:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: All we did was remove the `#` character and a space in front of the lines starting
    with `<IfModule mod_rewrite.c>` and ending with `</IfModule>`.
  prefs: []
  type: TYPE_NORMAL
- en: Whichever option you want to use, make sure you don't have both these options
    enabled at the same time, as that would prevent Apache from serving your page.
  prefs: []
  type: TYPE_NORMAL
- en: Setting cookies from iFrames
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: IE usually blocks cookies set from within an IFrame. If you require such cookies
    to be set, especially if you have advertisements or social networking plugins,
    you need to send a **Platform for Privacy Preferences Project** (**P3P**) header.
  prefs: []
  type: TYPE_NORMAL
- en: 'Look for the comment in the `.htaccess` file with the same text as the title
    of this section and change the following lines:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'To the following code snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Eric Law wrote about IE's cookie policies in detail, which makes for good reading
    at `blogs.msdn.com/b/ieinternals/archive/2009/08/20/wininet-ie-cookie-internals-faq.aspx`.
  prefs: []
  type: TYPE_NORMAL
- en: PHP security defaults
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If you are serving PHP, there are a lot of configuration options in the HTML5
    Boilerplate's `.htaccess` file that could make your PHP installation more secure.
    If you are using PHP, you can turn them on using the same procedure as the one
    outlined in the section titled *Suppress or force the "www."' at the beginning
    of URLs*.
  prefs: []
  type: TYPE_NORMAL
- en: Given we aren't using PHP in our website, we do not need to turn them on.
  prefs: []
  type: TYPE_NORMAL
- en: Stop advertising Apache version
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'You can prevent Apache from advertising its version to mitigate chances of
    malicious programmers exploiting vulnerabilities in a particular version. Here
    is how the Apache version is advertised:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Stop advertising Apache version](img/8505_05_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: This previous screenshot shows the Apache version number sent as a HTTP header
    to the browser.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You can use the developer tools that come with most browsers to verify HTTP
    headers. In this case, we are using Chrome's Developer Tools **Resources** tab.
    More information on how to use this tool is available on Chrome's help center
    at `developers.google.com/chrome-developer-tools/docs/network`.
  prefs: []
  type: TYPE_NORMAL
- en: 'This needs to be configured from within the server''s main configuration file,
    and we cannot do this from within the `.htaccess` file. So, let''s remove the
    following directive from the HTML5 Boilerplate''s `.htaccess` file and replace
    the one found in `/etc/apache2/httpd.conf` (the path to this file will be different
    if you are using Windows or Linux):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'The following screenshot shows the version-less HTTP header sent by Apache
    after applying the configuration value to the Apache server''s main configuration
    file:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Stop advertising Apache version](img/8505_05_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Allowing concatenation from within specific JS and CSS files
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Sometimes, you may want the server to combine multiple script or stylesheet
    files into one response when a request is made. Note that doing so does not make
    it any faster for your page to load, as the server takes its own time to stitch
    these files together.
  prefs: []
  type: TYPE_NORMAL
- en: This is an option I recommend you consider last, when every other solution has
    failed. Ideally, you should never be doing this.
  prefs: []
  type: TYPE_NORMAL
- en: 'To do this, first uncomment the following lines in the `.htaccess` file from:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'To the following code snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: Then, in the `js` folder, create a file called `script.combined.js`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the `script.combined.js` file in your text editor, and use the following
    syntax with all the files that should be combined and output in the `script.combined.js`
    file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: If you are looking to combine stylesheets on the fly, you can do the same. Create
    a file in the `css` folder called `style.combined.css`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the `style.combined.css` file in your text editor, and use the following
    syntax with all the files that should be combined and output in the `style.combined.css`
    file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: As I mentioned earlier, doing this will make Apache slower to respond to these
    requests. You should be using a build script to concatenate files (we will look
    into the build script in [Chapter 7](ch07.html "Chapter 7. Automate Deployment
    With the Build Script"), *Automate Deployment with the Build Script*). So uncomment
    this setting only if you have no other choice.
  prefs: []
  type: TYPE_NORMAL
- en: Stopping screen flicker in IE on CSS rollovers
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'When you use background images that change on hovering over a link, you will
    see a flicker in IE when this occurs. You can prevent this by changing the following
    lines in the `.htaccess` file from:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'To the following code snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: Preventing SSL certificate warnings
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If you want to serve your site only on a secured connection, you need to obtain
    a **Secure Sockets Layer** (**SSL**) certificate that browsers will use to identify
    your website. If the domain on the certificate does not match the domain on the
    incoming request—, for example, you had a SSL certificate for `https://secure.example.com`,
    and the assets that are being loaded on the page hosted on that domain are served
    from `https://example.com`, but all of the files are hosted on the same Apache
    server; —then browsers will throw warnings and inform the user that the authenticity
    of the Web page is unverifiable.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can make sure the requests to domain, which does not have the SSL certificate,
    is rewritten to the one for which you do have an SSL certificate. If you require
    this, you can uncomment the following snippet from:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'To the following code snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: Note that the `https://example-domain-please-change-me.com` URL needs to point
    to the domain you have an SSL certificate for.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: More details on the SSL and SSL certifications are given in the Linux documentation
    project at `tldp.org/HOWTO/SSL-Certificates-HOWTO/x64.html`.
  prefs: []
  type: TYPE_NORMAL
- en: That covers all the optional features that HTML5 Boilerplate's `.htaccess` file
    provides. Let us take a look at cross-domain policies and how to set them.
  prefs: []
  type: TYPE_NORMAL
- en: Cross-domain policies you should be aware of
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: An HTTP request is called a **cross-domain** request when a page served from
    one domain, for example, `http://example.com`, requires data from another, say
    `http://foo.com`. By default, most browsers do not allow cross-domain requests
    of data–be it data or flash assets– to prevent malicious access.
  prefs: []
  type: TYPE_NORMAL
- en: However, you can set a cross-domain policy file on the server (in the previous
    example, the server where `http://foo.com` is served from), which allows browsers
    to access these resources.
  prefs: []
  type: TYPE_NORMAL
- en: Flash requires this policy file to be specified in a file called `crossdomain.xml`,
    where you can specify which domains can make request of assets from the server.
  prefs: []
  type: TYPE_NORMAL
- en: This file is provided within HTML5 Boilerplate, and by default, the most restrictive
    policy is enabled. If you do want the least restrictive policy, you can uncomment
    that option and comment away the most restrictive one.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Do realize that you need to fully understand the implications of allowing cross-domain
    requests for access to assets before you make it less restrictive.
  prefs: []
  type: TYPE_NORMAL
- en: You can also make cross-domain AJAX requests, or restrict access to images or
    fonts, by setting an HTTP header. This is known as the **Cross Origin Resource
    Sharing** (**CORS**) policy.
  prefs: []
  type: TYPE_NORMAL
- en: Cross-domain AJAX requests
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: AJAX requests can only be made if the requesting page is on the same domain
    as the URL it is requesting data from. CORS is a new HTML5 feature that will allow
    you to make AJAX requests from any domain, provided permission has been given
    to the requesting domain. By setting an HTTP header on the server from which you
    are requesting data using an AJAX request, you can overcome this limitation. Let
    us look at how this can be done.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is an example of a cross-domain request that you could make:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: 'We note that the browser throws an error saying such access is forbidden, as
    shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Cross-domain AJAX requests](img/8505_05_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Now, in our `.htaccess` file hosted on [http://nimbupani.com](http://nimbupani.com),
    we will uncomment the following directive:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: Let us try our code again. Aha! Now it works!
  prefs: []
  type: TYPE_NORMAL
- en: This is the least restrictive setting, which can allow any domain to make an
    AJAX request on your server. It is fairly trivial to make a very high volume of
    requests because of this and also to pretend it's your site and fool the visitors,
    and so on. Use this setting with care.
  prefs: []
  type: TYPE_NORMAL
- en: CORS-enabled images
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Typically, browsers allow all images to be linked from any other domain. This
    is called **hotlinking**. Read more about it at `en.wikipedia.org/wiki/Inline_linking`.
    If a high-traffic website links to assets that are hosted on your server, your
    hosting provider might even fine you for excessive use of bandwidth (or your site
    might go down!). If you want to prevent this, for example, if you do not want
    `http://example.com` to use an `img` element with an `src` attribute pointing
    to an image on your server `http://foo.com/image.jpg`, you can enable a more restrictive
    policy that only allows certain domains to access your image files by changing
    the following line in the `.htaccess` file from:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: 'To the following line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: Where you replace `http://example.com` with the domain name that is only allowed
    access to that image. The server will then prevent any other domain from accessing
    images on your domain.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you want your images to be accessed by multiple domains, you will have to
    write a convoluted regex comparison for the origin, as shown in the following
    code snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: In this case, replace `example-1\.com` with your domain (take care to place
    the forward slash before the `.com`), and likewise for `example-2\.com`.
  prefs: []
  type: TYPE_NORMAL
- en: Webfont access
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Most of the time, you will be hosting fonts on the same domain where you will
    be using them. If you do host fonts in a separate domain, Firefox will not request
    them without the right HTTP header. This directive is already enabled by default
    in `.htaccess` file. In case you want to restrict access, you need to change these
    lines from:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: 'To the following code snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: Replace `http://example.com` with the domain name you would like to specifically
    allow access to the Webfonts.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If you would like to get a good overview of how CORS-enabled image, Webfont,
    and AJAX requests work and differ from `crossdomain.xml`, you should read the
    HTML5security project wiki page at `code.google.com/p/html5security/wiki/CrossOriginRequestSecurity`.
  prefs: []
  type: TYPE_NORMAL
- en: Using other server configuration files
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We have seen how to use the features available in the Apache `.htaccess` file
    that HTML5 Boilerplate comes with. But there is a repository of configuration
    files for other kinds of servers such as Ngnix, Node, Google App Engine, IIS,
    and Lighttpd. The following table contains the configuration filenames and their
    corresponding server software:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Config filename | Server software |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `.htaccess` | Apache Web server at `httpd.apache.org/docs/2.2/howto/htaccess.html`.
    |'
  prefs: []
  type: TYPE_TB
- en: '| `Web.config` | IIS Web server from `learn.iis.net/page.aspx/376/delegating-configuration-to-webconfig-files/`.
    |'
  prefs: []
  type: TYPE_TB
- en: '| `Node.js` | Node Web server from `nodejs.org`. |'
  prefs: []
  type: TYPE_TB
- en: '| `Ngnix.conf` | Ngnix server at `wiki.nginx.org/Configuration`. |'
  prefs: []
  type: TYPE_TB
- en: '| `Lighttpd.conf` | Lighttpd server at `redmine.lighttpd.net/projects/lighttpd/wiki/TutorialConfiguration`.
    |'
  prefs: []
  type: TYPE_TB
- en: '| `App.yaml` and `gae.py` | Google App Engine at `code.google.com/appengine/docs/python/config/appconfig.html`.
    |'
  prefs: []
  type: TYPE_TB
- en: The configuration files for these servers are available at `github.com/h5bp/server-configs`.
  prefs: []
  type: TYPE_NORMAL
- en: web.config
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: HTML5 Boilerplate's `web.config` file is used to configure options for your
    site running on an IIS7 server or higher.
  prefs: []
  type: TYPE_NORMAL
- en: As with the `.htaccess` file, merely having it in the root folder of your website
    allows it to be recognized and used to configure an IIS7 server.
  prefs: []
  type: TYPE_NORMAL
- en: lighttpd.conf
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As with the other configuration files, place it in the root folder for the Lighttpd
    server to configure the server.
  prefs: []
  type: TYPE_NORMAL
- en: nginx.conf
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Nginx is a lightweight server popular with websites using the Ruby on Rails
    framework.
  prefs: []
  type: TYPE_NORMAL
- en: As with the `.htaccess` file, place this file in the root folder of your website.
    In addition, make sure `nginx-mime.types` is also in the root folder. This file
    is required for Ngnix to make sure it sends each file with the right MIME type.
  prefs: []
  type: TYPE_NORMAL
- en: node.js
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'With the `node.js` configuration file, the usage is different. The configuration
    file assumes you are using the Express/Connect framework for managing resource
    requests for your app. In your server-side app code, you can use the following
    to start the server:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: 'This requires you to install the `h5bp` package using **Node Package Manager**
    (**NPM**) and the `express` package using the same. The `h5bp` package has a slew
    of configurations that will be used when the server is started. If you wish to
    use only some specific configurations, you can pass them in as options to the
    server function, as shown in the following code snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: Google App Engine
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Some websites are also served from Google App Engine ([http://code.google.com/appengine/](http://code.google.com/appengine/)),
    which requires your website's backend to be written in Java, Python, or Go.
  prefs: []
  type: TYPE_NORMAL
- en: You need to ensure that the `app.yaml` file is in the root folder of your website.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following table contains the summary of all the features available in HTML5
    Boilerplate server configurations:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Feature name | Apache | Nginx | IIS | Lighttpd | Node.js | Google App Engine
    |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- | --- | --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| ETags | Yes | Yes | Yes | Yes | No | No |'
  prefs: []
  type: TYPE_TB
- en: '| Gzip | Yes | Yes | Yes | Yes | Yes | Yes |'
  prefs: []
  type: TYPE_TB
- en: '| Expires header | Yes | No | No | No | Yes | No |'
  prefs: []
  type: TYPE_TB
- en: '| Custom 404 page | Yes | Yes | Yes | No | No | No |'
  prefs: []
  type: TYPE_TB
- en: '| Forcing the latest IE version | Yes | Yes | Yes | Yes | Yes | Yes |'
  prefs: []
  type: TYPE_TB
- en: '| Using UTF-8 encoding | Yes | Yes | Yes | No | No | No |'
  prefs: []
  type: TYPE_TB
- en: '| Serving the right MIME types | Yes | Yes | Yes | Yes | No | Yes |'
  prefs: []
  type: TYPE_TB
- en: '| Blocking access to hidden folders | Yes | No | No | No | Yes | No |'
  prefs: []
  type: TYPE_TB
- en: '| Blocking access to backup and source files | Yes | No | No | Yes (only `~&.inc`)
    | Yes | No |'
  prefs: []
  type: TYPE_TB
- en: '| Stop advertising server information | No | No | Yes | No | Yes | No |'
  prefs: []
  type: TYPE_TB
- en: '| Starting Rewrite Engine | Yes | No | No | No | No | No |'
  prefs: []
  type: TYPE_TB
- en: '| Preventing 404 errors for non-existing redirected folder | Yes | No | No
    | No | No | No |'
  prefs: []
  type: TYPE_TB
- en: '| Suppressing or forcing the "www." at the beginning of URLs | Yes | No | Yes
    | No | Yes | No |'
  prefs: []
  type: TYPE_TB
- en: '| Setting cookies from iFrames | Yes | No | Yes | No | No | No |'
  prefs: []
  type: TYPE_TB
- en: '| PHP security defaults | Yes | No | Yes | No | No | No |'
  prefs: []
  type: TYPE_TB
- en: '| Stop advertising Apache version | Yes | No | No | No | No | No |'
  prefs: []
  type: TYPE_TB
- en: '| Allowing concatenation from within JS and CSS files | Yes | No | Yes | No
    | No | No |'
  prefs: []
  type: TYPE_TB
- en: '| Stopping screen flicker in IE on CSS rollovers | Yes | No | Yes | No | No
    | No |'
  prefs: []
  type: TYPE_TB
- en: '| Preventing SSL certificate Warnings | Yes | No | Yes | No | No | No |'
  prefs: []
  type: TYPE_TB
- en: '| Cross-domain AJAX requests | Yes | No | Yes | No | Yes | No |'
  prefs: []
  type: TYPE_TB
- en: '| CORS-enabled Images | Yes | No | No | No | No | No |'
  prefs: []
  type: TYPE_TB
- en: '| Webfont Access | Yes | No | No | No | No | No |'
  prefs: []
  type: TYPE_TB
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We dived deep into the internals of serving pages over several servers and configuration
    files for some of the major servers. We looked at some of the good defaults provided
    out of the box and some optional ones that you can enable with careful understanding.
  prefs: []
  type: TYPE_NORMAL
- en: Now that our site is almost ready to get out of the door, we shall look at some
    of the other ways to make it better.
  prefs: []
  type: TYPE_NORMAL
