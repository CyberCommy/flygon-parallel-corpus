- en: Chapter 4. Local Authentication in Linux
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will discuss the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: User authentication and logging
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Limiting the login capabilities of users
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Monitoring user activity using acct
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Login authentication using a USB device and PAM
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Defining user authorization controls
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: User authentication and logging
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: One of the major aspects of user authentication is monitoring the users of the
    system. There are various ways to keep track of all the successful and failed
    login attempts made by a user in Linux.
  prefs: []
  type: TYPE_NORMAL
- en: Getting Started
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The Linux system maintains a log of all login attempts by different accounts
    in the system. These logs are all located at `/var/log/`.
  prefs: []
  type: TYPE_NORMAL
- en: '![Getting Started](img/B04234_04_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Linux has many ways to help an administrator to view the logs, both through
    a graphical and command-line method:'
  prefs: []
  type: TYPE_NORMAL
- en: 'If we want to check the incorrect login attempts for a particular user, such
    as root, we can do so by using this command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '![How to do it...](img/B04234_04_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: To see the log using the terminal, we use the `dmesg` command. This command
    displays the buffer of Linux kernel's message stored in memory, as shown below:![How
    to do it...](img/B04234_04_03.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If we wish to filter the above output to only show the log related to a USB
    device, we can do so by using `grep`:![How to do it...](img/B04234_04_04.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Instead of viewing all the logs, if we only wish to view the 10 most recent
    logs in a particular log file, the command will be as follows:![How to do it...](img/B04234_04_05.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the above command, the `-n` option is used to specify the number of lines
    to be shown.
  prefs: []
  type: TYPE_NORMAL
- en: If we wish to see the most recent login attempts for user accounts, use the
    tool, `last`.![How to do it...](img/B04234_04_06.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The `last` tool displays the `/etc/log/wtmp` file in a formatted way.
  prefs: []
  type: TYPE_NORMAL
- en: If we want to see the last time any user logged in on the system, we can use
    the `lastlog` command:![How to do it...](img/B04234_04_07.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Linux has different files for logging different types of detail. Using the commands
    shown above, we are able to view those logs and see the details as per our requirements.
    Every command gives us different type details.
  prefs: []
  type: TYPE_NORMAL
- en: Limiting the login capabilities of users
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A major role of a system administrator is to configure and manage users and
    groups on a Linux system. It also involves the task of checking the login capabilities
    of all users.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: All the steps given below have been tried on an Ubuntu system; however, you
    can also follow these on any other Linux distribution.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Here we will discuss how the login capabilities of users can be restricted
    on a Linux system:'
  prefs: []
  type: TYPE_NORMAL
- en: 'We can restrict the access of a user account by changing the login shell of
    the account to a special value in the `/etc/passwd` file. Let''s check the details
    of an account, `sslh` as an example, in the `/etc/passwd` file, as shown:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '![How to do it...](img/B04234_04_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'In the preceding details, the final value for the `sslh` account is set to
    `/bin/false`. If we now try to log in to `sslh` user as root, we see that we are
    not able to do so:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: So now, if we change the shell of the user account we wish to restrict, we can
    do so as shown:![How to do it...](img/B04234_04_09.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Another way of restricting access to a user is by the using `/etc/shadow` file.
    If we check the details of this file using the `cat` command, we get the result
    as shown:![How to do it...](img/B04234_04_10.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The output is truncated, as shown here:![How to do it...](img/B04234_04_11.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The details show the hashed password for the `user1` account (the one starting
    with ... `$6$2iumTg65`...). We can also see that instead of the hashed password,
    the system accounts have an asterisk `*`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now, to lock the account `user1,` the command will be as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '![How to do it...](img/B04234_04_12.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Let''s check the details in the `/etc/shadow` file again for the `user1` account.
    We see that the hashed password has been made invalid by preceding it with a `!`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '![How to do it...](img/B04234_04_13.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'To unlock the account again, the command is shown here:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '![How to do it...](img/B04234_04_14.jpg)'
  prefs: []
  type: TYPE_IMG
- en: If we wish to check if the account has already been locked or not, we can do
    so by using the following command:![How to do it...](img/B04234_04_15.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: As we can see in the output above, the `user1` account is locked, which is denoted
    by `L` in the second field. Whereas `user2` is not locked, as it shows `P` in
    the details.
  prefs: []
  type: TYPE_NORMAL
- en: 'The process to lock or unlock an account can also be done using the `usermod`
    command. To lock the account using `usermod`, the command will be as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'And to unlock the account using `usermod`, the command will be as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For every account in Linux, the user account details are stored in the `/etc/passwd`
    and `/etc/shadow` files. These details specify how the user account will act.
    When we are able to change the details of any user account in these files, we
    are able to change the behavior of the user account.
  prefs: []
  type: TYPE_NORMAL
- en: In the above section, we have seen how to modify these files to `lock` or `unlock`
    the user account.
  prefs: []
  type: TYPE_NORMAL
- en: Monitoring user activity using acct
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Acct** is an open source application which helps monitor user activity on
    a Linux system. It runs in the background and tracks all the activities of the
    users and also maintains a track of the resources being used.'
  prefs: []
  type: TYPE_NORMAL
- en: Getting started
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To use the commands of `acct`, we first need to install the package on our
    Linux system by using the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: '![Getting started](img/B04234_04_16.jpg)'
  prefs: []
  type: TYPE_IMG
- en: In case the above method doesn't work properly, we can download the package
    manually by visiting the link [http://packages.ubuntu.com/precise/admin/acct](http://packages.ubuntu.com/precise/admin/acct).
  prefs: []
  type: TYPE_NORMAL
- en: After downloading the package, we need to extract it into a directory somewhere,
    such as on the desktop.![Getting started](img/B04234_04_17.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Then, move it into the directory.![Getting started](img/B04234_04_18.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, run the script to configure the package.![Getting started](img/B04234_04_19.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once it completes, next we run the command `make`:![Getting started](img/B04234_04_20.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Then, the command `make install`:![Getting started](img/B04234_04_21.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once successfully done, it will install the package on your Linux system.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How to do it?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `acct` package has different commands for monitoring process activities:'
  prefs: []
  type: TYPE_NORMAL
- en: Based on a particular user's logins and logouts from a `wtmp` file, if we wish
    to check the total connected time, we can use the command `ac`:![How to do it?](img/B04234_04_22.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If we wish to print the total login time for a day, we will use the option `-d`
    with the `ac` command:![How to do it?](img/B04234_04_23.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: To print the total login time for a user, we use the following command:![How
    to do it?](img/B04234_04_24.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If we wish to check the login time only for a particular user, we use the following
    command:![How to do it?](img/B04234_04_25.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We can also see the previously executed commands for all users or a particular
    user by using the command `lastcomm`.![How to do it?](img/B04234_04_26.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To keep monitoring the system, we first install the `acct` package on the system.
    For a few other Linux distributions, the package to be used would be `psacct`
    if `acct` is not compatible.
  prefs: []
  type: TYPE_NORMAL
- en: Once the tool is installed and running, it starts maintaining a log of activities
    on the system. We can then watch these logs using the commands discussed in the
    above section.
  prefs: []
  type: TYPE_NORMAL
- en: Login authentication using a USB device and PAM
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When a Linux user wants to secure the system, the most common method to do so
    is always by using the login password. However, we know this method is not very
    reliable as there are many methods available to hack the traditional password.
    To increase security, we can use a USB device, as an authentication token, which
    will be used to log in into the system.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To follow the given steps, we need to have a USB storage device and **Pluggable
    Authentication Modules** (**PAM**) downloaded on the Linux system. Most Linux
    systems have it in the form of pre-compiled packages which can be accessed from
    the relevant repository.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: By using any type of USB storage device and PAM, we can create an authentication
    token.
  prefs: []
  type: TYPE_NORMAL
- en: 'To start with, we first need to install the packages required for PAM USB authentication.
    To do so, we run this command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: '![How to do it…](img/B04234_04_27.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Once the packages are installed, we have to configure the USB device to use
    with PAM authentication. To do so, we can either use a command, or else we can
    edit the `/etc/pamusb.conf` file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'For using the command method, first connect the USB device, and after that
    execute the given command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'The output of the command can be seen here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it…](img/B04234_04_28.jpg)'
  prefs: []
  type: TYPE_IMG
- en: In the preceding command, `usb-device` is the name given to the USB device we
    are using. This name can be anything of your choice.
  prefs: []
  type: TYPE_NORMAL
- en: When the `pamusb-conf` command is used, it automatically discovers the USB device,
    which also includes multiple partitions. When the command completes its execution,
    it adds an XML code block into the `/etc/pamusb.conf` file, defining our USB device.
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it…](img/B04234_04_29.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Next, we define our USB device:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'The execution is shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it…](img/B04234_04_30.jpg)'
  prefs: []
  type: TYPE_IMG
- en: If the user already exists, it will be added to the PAM configuration.
  prefs: []
  type: TYPE_NORMAL
- en: The preceding command adds the definition of the `pam_usb` user into the `/etc/pamusb.conf`
    file.
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it…](img/B04234_04_31.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Now, we will configure PAM to add the `pam_usb` module in the system authentication
    process. For this, we will edit the `/etc/pam.d/common-auth` file and add the
    line:![How to do it…](img/B04234_04_32.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: This will make the system-wide PAM library aware of the `pam_usb` module.
  prefs: []
  type: TYPE_NORMAL
- en: The `required` option specifies that the correct password is necessary, while
    the `sufficient` option means that this can also authenticate the user. In the
    above configuration, we have used sufficient for the `usb-device` authentication,
    while using `required` for the default password.
  prefs: []
  type: TYPE_NORMAL
- en: In case the USB device defined for `user1` is not present in the system, the
    user will need to enter a correct password. To force the user to have both authentication
    routines in place before granting them access to the system, change `sufficient`
    to `required`.
  prefs: []
  type: TYPE_NORMAL
- en: Now we will try to switch to `user1`.![How to do it…](img/B04234_04_33.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When asked to, connect the relevant `usb-device`. If the correct USB token device
    is connected, the login will complete as shown; otherwise it will give an error.
  prefs: []
  type: TYPE_NORMAL
- en: If an error appears, as shown below, it could be possible that the path of the
    USB device was not added properly.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: In such a situation, add the USB device's full path into `/etc/pmount.allow`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now run the command to check how the USB device partition has been listed in
    the filesystem:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: '![How to do it…](img/B04234_04_34.jpg)'
  prefs: []
  type: TYPE_IMG
- en: In our case, the partition has been listed as:`/dev/sdb1`
  prefs: []
  type: TYPE_NORMAL
- en: Now add a line into the `/etc/pmount.allow` file to solve the error.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The configuration that we have done in `/etc/pam.d/common-auth` until now means
    that if the USB device is not connected, the user will still be able to log in
    with the correct password. If we wish to force the user to also use the USB device
    for login, then change `sufficient` to `required`, as shown:![How to do it…](img/B04234_04_35.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If the user now tries to log in, they will have to enter the correct password,
    as well as insert the USB device.![How to do it…](img/B04234_04_36.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now remove the USB device and try to log in again with the correct password:![How
    to do it…](img/B04234_04_37.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Once we have installed the required PAM-USB package, we edit the configuration
    file to add the USB device we want to use as an authentication token. After that,
    we add the user account to be used, and then we complete the changes in the `/etc/pam.d/common-auth`
    file to specify how the USB authentication should work, whether it is always required
    or not, when logging in.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Until now, we have seen how to use a USB device to authenticate a user login.
    Apart from this, we can also use the USB device to trigger an event each time
    it is disconnected or connected to the system.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s modify the XML code in `/etc/pamusb.conf` to add an event code for the
    user definition:'
  prefs: []
  type: TYPE_NORMAL
- en: '![There''s more...](img/B04234_04_38.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Due to the above modification, whenever the user disconnects the USB device,
    the screen will be locked. Similarly, when the user connects the USB device again,
    the screen will be unlocked.
  prefs: []
  type: TYPE_NORMAL
- en: Defining user authorization controls
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Defining user authorization on a computer mainly deals with deciding the activities
    that a user may or may not be allowed to do. This could include activities such
    as executing a program or reading a file.
  prefs: []
  type: TYPE_NORMAL
- en: Since the `root` account has all privileges, authorization controls mainly deal
    with allowing or disallowing root access to user accounts.
  prefs: []
  type: TYPE_NORMAL
- en: Getting started...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To see how user authorization works, we need a user account to try the commands
    on. Hence, we create a couple of user accounts, `user1` and `user2`, to try the
    commands.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this section, we will go through various controls which can be applied on
    user accounts.
  prefs: []
  type: TYPE_NORMAL
- en: Suppose we have two user accounts, `user1` and `user2`. We log in from `user2`
    and then try to run a command, `ps`, as `user1`. In a normal scenario, we get
    the result as shown:![How to do it...](img/B04234_04_39.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now edit the file `/etc/sudoers` and add the line as given below:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: After saving the changes in `/etc/sudoers`, again try to run the command `ps`
    from `user2` as `user1`.![How to do it...](img/B04234_04_40.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, if we want to again run the same command from `user2` as `user1`, but without
    being asked for the password, we can do the same by editing the file `/etc/sudoers`,
    as shown:![How to do it...](img/B04234_04_41.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now when we run the `ps` command from `user2` as user1, we see that it does
    not ask for a password any more:![How to do it...](img/B04234_04_42.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now that we have seen how to run a command without being asked for the password,
    the major concern of the system administrator will be that `sudo` should always
    prompt for a password.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'To make `sudo` always prompt for a password for user account `user1` on the
    system, edit the file `/etc/sudoers` and add the following line:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: '![How to do it...](img/B04234_04_43.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Now if `user1` tries to run any command, it will always be prompted for the
    password:![How to do it...](img/B04234_04_44.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, let's suppose we want to give the `user1` account the privilege to change
    the password of `user2` and `user3`. Edit the `/etc/sudoers` file and add the
    line as shown:![How to do it...](img/B04234_04_45.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now log in from `user1` and let's try to change the passwords of the `user2`
    and `user3` accounts:![How to do it...](img/B04234_04_46.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Using the `sudo` command and the `/etc/sudoers` file, we make the necessary
    changes to execute the tasks as required.
  prefs: []
  type: TYPE_NORMAL
- en: We edit the file to allow the permission to execute a program as another user.
    We also add the option `NOPASSWD` to execute the program without being asked for
    password. We then add the required line so that `sudo` always prompts for password.
  prefs: []
  type: TYPE_NORMAL
- en: Next, we see how to authorize a user account to change passwords for other user
    accounts.
  prefs: []
  type: TYPE_NORMAL
