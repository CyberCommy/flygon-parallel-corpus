- en: Handling the Kubernetes Package Manager
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we are going to look into Helm, the Kubernetes package manager.
    Every successful and important platform must have a good packaging system. Helm
    was developed by Deis (acquired by Microsoft in April 2017) and later contributed
    to the Kubernetes project directly. We will start by understanding the motivation
    for Helm, its architecture, and its components. Then, we'll get hands-on experience
    and see how to use Helm and its charts within Kubernetes. This includes finding,
    installing, customizing, deleting, and managing charts. Last but not least, we'll
    cover how to create your own charts and handle versioning, dependencies, and templating.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following topics will be covered:'
  prefs: []
  type: TYPE_NORMAL
- en: Understanding Helm
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using Helm
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating your own charts
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Understanding Helm
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Kubernetes provides many ways to organize and orchestrate your containers at
    runtime, but it lacks a higher-level organization of grouping sets of images together.
    This is where Helm comes in. In this section, we'll go over the motivation for
    Helm, its architecture and components, and discuss what has changed in the transition
    from Helm Classic to Helm.
  prefs: []
  type: TYPE_NORMAL
- en: The motivation for Helm
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Helm provides support for several important use cases:'
  prefs: []
  type: TYPE_NORMAL
- en: Managing complexity
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Easy upgrades
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Simple sharing
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Safe rollbacks
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Charts can describe even the most complex apps, provide repeatable application
    installation, and serve as a single point of authority. In-place upgrades and
    custom hooks allow easy updates. It's simple to share charts that can be versioned
    and hosted on public or private servers. When you need to roll back recent upgrades,
    Helm provides a single command to roll back a cohesive set of changes to your
    infrastructure.
  prefs: []
  type: TYPE_NORMAL
- en: The Helm architecture
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Helm is designed to perform the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Create new charts from scratch
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Package charts into chart archive (`tgz`) files
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Interact with chart repositories where charts are stored
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Install and uninstall charts into an existing Kubernetes cluster
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Manage the release cycle of charts that have been installed with Helm
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Helm uses a client-server architecture to achieve these goals.
  prefs: []
  type: TYPE_NORMAL
- en: Helm components
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Helm has a server component that runs on your Kubernetes cluster and a client
    component that you run on a local machine.
  prefs: []
  type: TYPE_NORMAL
- en: The Tiller server
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The server is responsible for managing releases. It interacts with the Helm
    clients as well as the Kubernetes API server. Its main functions are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Listening for incoming requests from the Helm client
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Combining a chart and configuration to build a release
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installing charts into Kubernetes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Tracking the subsequent release
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Upgrading and uninstalling charts by interacting with Kubernetes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Helm client
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'You install the Helm client on your machine. It is responsible for the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Local chart development
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Managing repositories
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Interacting with the Tiller server
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Sending charts to be installed
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Asking for information about releases
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Requesting upgrades or uninstallation of existing releases
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using Helm
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Helm is a rich package management system that lets you perform all the necessary
    steps to manage the applications installed on your cluster. Let's roll up our
    sleeves and get going.
  prefs: []
  type: TYPE_NORMAL
- en: Installing Helm
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Installing Helm involves installing the client and the server. Helm is implemented
    in Go, and the same binary executable can serve as either client or server.
  prefs: []
  type: TYPE_NORMAL
- en: Installing the Helm client
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You must have Kubectl configured properly to talk to your Kubernetes cluster,
    because the Helm client uses the Kubectl configuration to talk to the Helm server
    (Tiller).
  prefs: []
  type: TYPE_NORMAL
- en: Helm provides binary releases for all platforms, at [https://github.com/kubernetes/helm/releases/latest](https://github.com/kubernetes/helm/releases/latest).
  prefs: []
  type: TYPE_NORMAL
- en: For Windows, you can also use the `chocolatey` package manager, but it may be
    a little behind the official version, `https://chocolatey.org/packages/kubernetes-helm/<version>`.
  prefs: []
  type: TYPE_NORMAL
- en: 'For macOS and Linux, you can install the client from a script:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'On macOS X, you can also use Homebrew:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Installing the Tiller server
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Tiller typically runs inside your cluster. For development, it is sometimes
    easier to run Tiller locally.
  prefs: []
  type: TYPE_NORMAL
- en: Installing Tiller in-cluster
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The easiest way to install Tiller is from a machine where the Helm client is
    installed. Run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'This will initialize both the client and the Tiller server on the remote Kubernetes
    cluster. When the installation is done, you will have a running Tiller pod in
    the `kube-system` namespace of your cluster:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'You can also run `helm version` to check out both the client''s and the server''s
    version:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Installing Tiller locally
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'If you want to run Tiller locally, you need to build it first. This is supported
    on Linux and macOS:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: The bootstrap target will attempt to install dependencies, rebuild the `vendor/`
    tree, and validate configuration.
  prefs: []
  type: TYPE_NORMAL
- en: The build target will compile Helm and place it in `bin/helm`. Tiller is also
    compiled and is placed in `bin/tiller`.
  prefs: []
  type: TYPE_NORMAL
- en: Now you can just run `bin/tiller`. Tiller will connect to the Kubernetes cluster
    via your Kubectl configuration.
  prefs: []
  type: TYPE_NORMAL
- en: 'You need to tell the Helm client to connect to the local Tiller server. You
    can do it by setting an environment variable:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Otherwise, you can pass it as a command-line argument: `--host localhost:44134`.'
  prefs: []
  type: TYPE_NORMAL
- en: Using Alternative Storage Backend
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Helm 2.7.0 added the option to store release information as **secrets**. Earlier
    versions always stored release information in ConfigMaps. The secrets backend
    increases the security of charts. It''s a complement to general Kubernetes encryption
    at rest. To use the Secrets backend, you need to run Helm with the following command
    line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Finding charts
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In order to install useful applications and software with Helm, you need to
    find their charts first. This is where the `helm search` command comes in. Helm,
    by default, searches the official Kubernetes `chart repository`, which is named
    `stable`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'The official repository has a rich library of charts that represent all modern
    open source databases, monitoring systems, Kubernetes-specific helpers, and a
    slew of other offerings, such as a Minecraft server. You can search for specific
    charts, for example, let''s search for charts that contain `kube` in their name
    or description:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s try another search:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'What happened? Why does `mariadb` show up in the results? The reason is that
    `mariadb` (which is a fork of MySQL ) mentions MySQL in its description, even
    though you can''t see it in the truncated output. To get the full description,
    use the `helm inspect` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Installing packages
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'OK. You''ve found the package of your dreams. Now, you probably want to install
    it on your Kubernetes cluster. When you install a package, Helm creates a release
    that you can use to keep track of the installation progress. Let''s install `MariaDB`
    using the `helm install` command. Let''s go over the output in detail. The first
    part of the output lists the name of the release - `cranky-whippet` in this case
    (you can choose your own with the `--name` flag), the namespace, and the deployment
    status:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'The second part of the output lists all the resources created by this chart.
    Note that the resource names are all derived from the release name:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'The last part is notes that provide easy-to-understand instructions on how
    to use `MariaDB` in the context of your Kubernetes cluster:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Checking installation status
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Helm doesn''t wait for the installation to complete because it may take a while.
    The `helm status` command displays the latest information on a release in the
    same format as the output of the initial `helm install` command. In the output
    of the `install` command, you can see that the `PersistentVolumeClaim` had a `PENDING` status.
    Let''s check it out now:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: Hooray! It is bound now, and there is a volume attached with 8 GB capacity.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s try to connect and verify that `mariadb` is indeed accessible. Let''s
    modify the suggested commands a little bit from the notes to connect. Instead
    of running `bash` and then running `mysql`, we can directly run the `mysql` command
    on the container:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: If you don't see a command prompt, try pressing *Enter*.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: Customizing a chart
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Very often, as a user, you want to customize or configure the charts you install.
    Helm fully supports customization through `config` files. To learn about possible
    customizations, you can use the `helm inspect` command again, but this time, focus
    on the values. Here is a partial output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'For example, if you want to set a root password and create a database when
    installing `mariadb`, you can create the following YAML file and save it as `mariadb-config.yaml`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, run `helm` and pass it the `yaml` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'You can also set individual values on the command line with `--set`. If both
    `--f` and `--set` try to set the same values, then `--set` takes precedence. For
    example, in this case, the root password will be `evenbettersecret`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'You can specify multiple values using comma-separated lists: `--set a=1,b=2`.'
  prefs: []
  type: TYPE_NORMAL
- en: Additional installation options
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `helm install` command can install from several sources:'
  prefs: []
  type: TYPE_NORMAL
- en: A `chart repository` (as we've seen)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A local chart archive (`helm install foo-0.1.1.tgz`)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An unpacked `chart` directory (`helm install path/to/foo`)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A full URL (`helm install https://example.com/charts/foo-1.2.3.tgz`)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Upgrading and rolling back a release
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'You may want to upgrade a package you installed to the latest and greatest
    version. Helm provides the `upgrade` command, which operates intelligently and
    only updates things that have changed. For example, let''s check the current values
    of our `mariadb` installation:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, let''s run, upgrade, and change the name of the database:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'Note that we''ve lost our `root` password. All the existing values are replaced
    when you upgrade. OK, let''s roll back. The `helm history` command shows us all
    the available revisions we can roll back to:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s roll back to revision `3`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s verify that our changes were rolled back:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: Deleting a release
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You can, of course, delete a release too using the `helm delete` command.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, let''s examine the list of releases. We have only `cranky-whippet`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, let''s delete it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'So, no more releases:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'However, Helm keeps track of deleted releases too. You can see them using the
    `--all` flag:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'To delete a release completely, add the `--purge` flag:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: Working with repositories
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Helm stores charts in repositories that are simple HTTP servers. Any standard
    HTTP server can host a Helm repository. In the cloud, the Helm team verified that
    AWS S3 and Google Cloud storage can both serve as Helm repositories in web-enabled
    mode. Helm also comes bundled with a local package server for developer testing.
    It runs on the client machine, so it's inappropriate for sharing. In a small team,
    you may run the Helm package server on a shared machine on the local network accessible
    to all team members.
  prefs: []
  type: TYPE_NORMAL
- en: To use the local package server, type `helm serve`. Do it in a separate terminal
    window because it is blocking. Helm will start serving charts from `~/.helm/repository/local`
    by default. You can put your charts there and generate an index file with `helm
    index`.
  prefs: []
  type: TYPE_NORMAL
- en: The generated `index.yaml` file lists all the charts.
  prefs: []
  type: TYPE_NORMAL
- en: Note that Helm doesn't provide tools to upload charts to remote repositories
    because that would require the remote server to understand Helm, to know where
    to put the chart, and how to update the `index.yaml` file.
  prefs: []
  type: TYPE_NORMAL
- en: 'On the client''s side, the `helm repo` command lets you `list`, `add`, `remove`,
    `index`, and `update`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: This command consists of multiple subcommands to interact with `chart` repositories.
  prefs: []
  type: TYPE_NORMAL
- en: 'It can be used to `add`, `remove`, `list`, and `index` chart repositories:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Example usage**:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: '**Usage**:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: '**Available commands**:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: Managing charts with Helm
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Helm provides several commands to manage charts. It can create a new chart
    for you:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: 'Helm will create the following files and directories under `cool-chart`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: 'Once you have edited your chart, you can package it into a tar `gzipped` archive:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: Helm will create an archive named `cool-chart-0.1.0.tgz` and store both in the
    `local` directory and in the `local repository`.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can also use helm to help you find issues with your chart''s formatting
    or information:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: Taking advantage of starter packs
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `helm create` command takes an optional `--starter` flag that lets you specify
    a starter chart.
  prefs: []
  type: TYPE_NORMAL
- en: 'Starters are regular charts located in `$HELM_HOME/starters`. As a chart developer,
    you may author charts that are specifically designed to be used as starters. Such
    charts should be designed with the following considerations in mind:'
  prefs: []
  type: TYPE_NORMAL
- en: The `Chart.yaml` will be overwritten by the generator
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Users will expect to modify such a chart's contents, so documentation should
    indicate how users can do so
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: At the moment, there is no way to install charts to `$HELM_HOME/starters`, the
    user must copy it manually. Make sure to mention that in your chart's documentation
    if you develop starter pack charts.
  prefs: []
  type: TYPE_NORMAL
- en: Creating your own charts
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A chart is a collection of files that describe a related set of Kubernetes resources.
    A single chart might be used to deploy something simple, such as a `memcached`
    pod, or something complex, such as a full web app stack with HTTP servers, databases,
    and caches.
  prefs: []
  type: TYPE_NORMAL
- en: Charts are created as files laid out in a particular directory tree. Then, they
    can be packaged into versioned archives to be deployed. The key file is `Chart.yaml`.
  prefs: []
  type: TYPE_NORMAL
- en: The Chart.yaml file
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `Chart.yaml` file is the main file of a Helm chart. It requires a name
    and version fields:'
  prefs: []
  type: TYPE_NORMAL
- en: '`name`: The name of the chart (same as the directory name)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`version`: A SemVer 2 version'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'It may also contain various optional fields:'
  prefs: []
  type: TYPE_NORMAL
- en: '`kubeVersion`: A SemVer range of compatible Kubernetes versions'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`description`: A single-sentence description of this project'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`keywords`: A list of keywords about this project'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`home`: The URL of this project''s home page'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`sources`: A list of URLs to source code for this project'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`maintainers`:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`name`: The maintainer''s name (required for each maintainer)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`email`: The maintainer''s email (optional)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`url`: A URL for the maintainer (optional)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`engine`: The name of the template engine (defaults to `gotpl`)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`icon`: A URL to an SVG or PNG image to be used as an icon'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`appVersion`: The version of the app that this contains'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`deprecated`: Is this chart deprecated? (Boolean)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`tillerVersion`: The version of Tiller that this chart requires'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Versioning charts
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The version field inside the `Chart.yaml` is used by the CLI and the Tiller
    server. The `helm package` command will use the version that it finds in the `Chart.yaml`
    when constructing the package name. The version number in the chart package name
    must match the version number in the `Chart.yaml`.
  prefs: []
  type: TYPE_NORMAL
- en: The appVersion field
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `appVersion` field is not related to the version field. It is not used by
    Helm and serves as metadata or documentation for users that want to understand
    what they are deploying. Correctness is not enforced by Helm.
  prefs: []
  type: TYPE_NORMAL
- en: Deprecating charts
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'From time to time, you may want to deprecate a chart. You can mark a chart
    as deprecated by setting the deprecated field in `Chart.yaml` to `true`. It''s
    enough to deprecate the latest version of a chart. You can later reuse the chart
    name and publish a newer version that is not deprecated. The workflow used by
    the `kubernetes/charts` project is:'
  prefs: []
  type: TYPE_NORMAL
- en: Update the chart's `Chart.yaml` to mark the chart as deprecated and bump the
    version
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Release a new version of the chart
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Remove the chart from the `source repository`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Chart metadata files
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Charts may contain various metadata files, such as `README.md`, `LICENSE`,
    and `NOTES.txt`, that describe the installation, configuration, usage, and license
    of a chart. The `README.md` file should be formatted as markdown. It should provide
    the following information:'
  prefs: []
  type: TYPE_NORMAL
- en: A description of the application or service the chart provides
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Any prerequisites or requirements to run the chart
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Descriptions of options in `values.yaml` and default values
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Any other information that may be relevant to the installation or configuration
    of the chart
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `templates/NOTES.txt` file will be displayed after installation or when
    viewing the release status. You should keep the `NOTES` concise and point to the
    `README.md` for detailed explanations. It's common to put usage notes and next
    steps such as information about connecting to a database or accessing a web UI.
  prefs: []
  type: TYPE_NORMAL
- en: Managing chart dependencies
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In Helm, a chart may depend on any number of other charts. These dependencies
    are expressed explicitly by listing them in a `requirements.yaml` file or by copying
    the dependency charts into the charts/ sub-directory during installation.
  prefs: []
  type: TYPE_NORMAL
- en: A dependency can be either a chart archive (`foo-1.2.3.tgz`) or an unpacked
    chart directory. However, its name cannot start with `_` or `.`. Such files are
    ignored by the chart loader.
  prefs: []
  type: TYPE_NORMAL
- en: Managing dependencies with requirements.yaml
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Instead of manually placing charts in the `charts/` subdirectory, it is better
    to declare dependencies using a `requirements.yaml` file inside your chart.
  prefs: []
  type: TYPE_NORMAL
- en: 'A `requirements.yaml` file is a simple file for listing the chart dependencies:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: The `name` field is the name of the chart you want.
  prefs: []
  type: TYPE_NORMAL
- en: The `version` field is the version of the chart you want.
  prefs: []
  type: TYPE_NORMAL
- en: The `repository` field is the full URL to the `chart repository`. Note that
    you must also use `helm repo` to add that `repository` locally.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once you have a dependencies file, you can run the `helm dep up` and it will
    use your dependency file to download all of the specified charts into the charts
    subdirectory for you:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: 'Helm stores dependency charts retrieves during helm dependency update as chart
    archives in the `charts/` directory. For the preceding example, these files will
    be present in the `charts` directory:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: Managing charts and their dependencies with `requirements.yaml` is a best practice,
    both for explicitly documenting dependencies, sharing across the team, and support
    automated pipelines.
  prefs: []
  type: TYPE_NORMAL
- en: Using special fields in requirements.yaml
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Each entry in the `requirements.yaml` file may also contain the optional `fields`
    tags and condition.
  prefs: []
  type: TYPE_NORMAL
- en: 'These fields can be used to dynamically control the loading of charts (by default,
    all charts are loaded). When tags or condition are present, Helm will evaluate
    them and determine if the target chart should be loaded:'
  prefs: []
  type: TYPE_NORMAL
- en: '`condition`: The `condition` field holds one or more YAML paths (delimited
    by commas). If this path exists in the top parent''s values and resolves to a
    Boolean value, the chart will be enabled or disabled based on that Boolean value.
    Only the first valid path found in the list is evaluated, and if no paths exist,
    then the condition has no effect.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`tags`: The `tags` field is a YAML list of labels to associate with this chart.
    In the top parent''s values, all charts with tags can be enabled or disabled by
    specifying the tag and a Boolean value.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Here is an example of `requirements.yaml` and `values.yaml` that make good
    use of conditions and tags to enable and disable the installation of dependencies.
    The `requirements.yaml` file defines two conditions for installing its dependencies
    based on the value of the `global enabled` field and the specific `sub-charts
    enabled` field:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: 'The `values.yaml` file assigns values to some of the condition variables. The
    `subchart2` tag doesn''t get a value, so it is considered enabled:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: 'You can set tag and conditions values from the command line too when installing
    a chart, and they''ll take precedence over the `values.yaml` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: 'The resolution of tags and conditions is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Conditions (when set in values) always override tags. The first condition path
    that exists wins, and subsequent ones for that chart are ignored.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If any of the chart's tags are true then enable the chart.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Tags and condition values must be set in the top parent's values.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The tags: key-in values must be a top-level key. Globals and nested tags are
    not supported.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using templates and values
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Any important application will require configuration and adaptation to the specific
    use case. Helm charts are templates that use the Go template language to populate
    placeholders. Helm supports additional functions from the `Sprig` library and
    a few other specialized functions. The template files are stored in the `templates/`
    subdirectory of the chart. Helm will use the template engine to render all files
    in this directory and apply the provided value files.
  prefs: []
  type: TYPE_NORMAL
- en: Writing template files
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Template files are just text files that follow the Go template language rules.
    They can generate Kubernetes configuration files. Here is the service template
    file from the artifactory chart:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: Using pipelines and functions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Helm allows rich and sophisticated syntax in the template files through the
    built-in Go template functions, sprig functions, and pipelines. Here is an example
    template that takes advantage of these capabilities. It uses the repeat, quote,
    and upper functions for the food and drink keys, and it uses pipelines to chain
    multiple functions together:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: 'See if the values file has the following section:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: 'If it does, then the resulting chart would be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: Embedding predefined values
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Helm provides some predefined values which you can use in your templates. In
    the previous artifactory chart template, `Release.Name`, `Release.Service`, `Chart.Name`,
    and `Chart.Version` are examples of Helm predefined values. Other predefined values
    are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`Release.Time`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Release.Namespace`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Release.IsUpgrade`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Release.IsInstall`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Release.Revision`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Chart`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Files`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Capabilities`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The chart is the content of `Chart.yaml`. The files and capabilities predefined
    values are `map-like` objects that allow access through various functions. Note
    that unknown fields in `Chart.yaml` are ignored by the template engine and cannot
    be used to `pass` arbitrary structured data to templates.
  prefs: []
  type: TYPE_NORMAL
- en: Feeding values from a file
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Here is part of the `artifactory` default values file. The values from this
    file are used to populate multiple templates. For example, the `artifactory name`
    and `internalPort` values are used in the preceding service template:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: 'You can provide your own YAML values files to override the defaults during
    the install command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: Scope, dependencies, and values
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Value files can declare values for the top-level chart, as well as for any
    of the charts that are included in that chart''s `charts/` directory. For example,
    the `artifactory-ce values.yaml` file contains some default values for its dependency
    chart `postgresql`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: 'The top-level chart has access to values of its dependent charts, but not vice
    versa. There is also a global value that is accessible to all charts. For example,
    you could add something like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: 'When a global is present, it will be replicated to each dependent chart''s
    values as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we took a look at Helm, the Kubernetes package manager. Helm
    gives Kubernetes the ability to manage complicated software composed of many Kubernetes
    resources with interdependencies. It serves the same purpose as an OS package
    manager. It organizes packages and lets you search charts, install and upgrade
    charts, and share charts with collaborators. You can develop your charts and store
    them in repositories.
  prefs: []
  type: TYPE_NORMAL
- en: At this point, you should understand the important role that Helm serves in
    the Kubernetes ecosystem and community. You should be able to use it productively
    and even develop and share your own charts.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will look ahead to the future of Kubernetes and examine
    its roadmap and a few personal items from my wish list.
  prefs: []
  type: TYPE_NORMAL
