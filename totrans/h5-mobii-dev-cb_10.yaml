- en: Chapter 10. Emerging Mobile Web Features
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover:'
  prefs: []
  type: TYPE_NORMAL
- en: '`window.onerror`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using ECMAScript 5 methods
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: New HTML5 input types
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Inline SVG
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`position:fixed`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`overflow:scroll`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Mobile Safari on iOS 5 has introduced a series of improvements that makes mobile
    Safari one of the most advanced mobile browsers. A lot of cutting edge HTML5 features—ECMAScript
    5 as well as mobile-specific features — were added to allow more functionality
    with mobile and boost the performance:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Web forms** has been introduced to help with a better user interface for
    the Web, making interface prototyping much quicker and easier.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Inline SVG** allows greater scalability on mobile browsers; this could be
    useful for responsive design.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**ES5** allows greater control over the objects created, and large and complex
    features can be built in pure JavaScript.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Mobile-specific properties** such as scrolling CSS were added. On mobile
    Safari, it was once painful to achieve the native scrolling, but now mobile-specific
    properties have been added to make it pain free for web developers to develop
    web apps that have the same performance as native applications.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: window.onerror
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Target browsers: iOS 5'
  prefs: []
  type: TYPE_NORMAL
- en: 'In iOS 5, there is a newly added event handler: `window.onerror`. This event
    handler is for error events sent to the window.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The syntax looks as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Create an HTML document and name it `ch10r01.html`.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Enter the following code and test it in the browser:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: You should see a pop-up alert saying an error has occurred.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The error occurred because we didn't close the bracket in `document.write:`
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'If you close the bracket and try again, the error will disappear:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The default window behavior is to prevent error dialogs from displaying. It
    overwrites the default behavior:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Browser Object Model
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The **Browser Object Model** **(BOM)** is a collection of objects that give
    you access to the browser and the computer screen. These objects are accessible
    through the global objects window and `window.screen`. To find out more about
    BOM, visit:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://javascript.about.com/od/browserobjectmodel/Browser_Object_Model.htm](http://javascript.about.com/od/browserobjectmodel/Browser_Object_Model.htm)'
  prefs: []
  type: TYPE_NORMAL
- en: Using ECMAScript 5 methods
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Target browsers: iOS 5'
  prefs: []
  type: TYPE_NORMAL
- en: '**ECMAScript 5** is replacing ECMAScript 3.1\. ECMAScript 5 provides a great
    enhancement to object interaction. Starting with iOS 4, Safari introduced many
    new ECMAScript 5 features; iOS 5 brought even greater support for ECMAScript 5.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The following are the newly introduced `Object` methods:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Create an HTML document and name it `ch10r02.html`.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Enter the following code and test it in the browser:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Freeze**'
  prefs: []
  type: TYPE_NORMAL
- en: 'As the name says, `freeze` freezes an object. Nothing can be added to or removed
    from `freeze`; you can''t even alter the content. It makes an object immutable
    and returns a frozen object:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: To test if an object is frozen, use `isFrozen:`
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: '**Seal**'
  prefs: []
  type: TYPE_NORMAL
- en: 'If you `seal` an object, the object properties can no longer be added or removed.
    You might ask, what is the difference between `freeze` and `seal?` The difference
    is that for `seal`, you can still change the value of the present properties:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: To test if an object is sealed, use `isSealed:`
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: '**preventExtensions**'
  prefs: []
  type: TYPE_NORMAL
- en: By default, an object is extensible, but with `preventExtensions`, we can prevent
    an object from extending. This means no new properties can be further added to
    the object.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: '**Function.prototype.bind**'
  prefs: []
  type: TYPE_NORMAL
- en: Another extremely useful feature introduced is `bind`. It allows greater control
    of the `this` value. In our example, no matter how the function is called, it
    is called with a particular `this` value.
  prefs: []
  type: TYPE_NORMAL
- en: 'From the example, we can see there is a global variable `x`, and its value
    is modified in the `module` object:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: When extracting the method `getX` from the object, later call that function
    and expect it to use the original object as `this`, but at this time, the object
    is global, and so it returns `9`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: By using `bind,` we create a new function with `this` bound to `module:`
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The default window behavior is to prevent error dialogs from displaying. It
    overwrites the default behavior:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: Documentation on MDN
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '`Object.freeze/Object.isFrozen:`'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://developer.mozilla.org/en/JavaScript/Reference/ Global_Objects/Object/freeze](http://developer.mozilla.org/en/JavaScript/Reference/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://developer.mozilla.org/en/JavaScript/Reference/ Global_Objects/Object/isFrozen](http://developer.mozilla.org/en/JavaScript/Reference/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Object.seal/Object.isSealed:`'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://developer.mozilla.org/en/JavaScript/Reference/ Global_Objects/Object/seal](http://developer.mozilla.org/en/JavaScript/Reference/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://developer.mozilla.org/en/JavaScript/Reference/ Global_Objects/Object/isSealed](http://developer.mozilla.org/en/JavaScript/Reference/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`preventExtensions/isExtensible:`'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://developer.mozilla.org/en/JavaScript/Reference/ Global_Objects/Object/preventExtensions](http://developer.mozilla.org/en/JavaScript/Reference/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://developer.mozilla.org/en/JavaScript/Reference/ Global_Objects/Object/isExtensible](http://developer.mozilla.org/en/JavaScript/Reference/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Function.prototype.bind:`'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://developer.mozilla.org/en/JavaScript/Reference/ Global_Objects/Function/bind](http://developer.mozilla.org/en/JavaScript/Reference/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: New HTML5 input types
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Target browsers: iOS 5'
  prefs: []
  type: TYPE_NORMAL
- en: 'New input types are useful features for web forms. iOS 5 now supports: `date,
    datetime, month, time, range`, and more.'
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Create an HTML document and name it `ch10r03.html`.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Enter the following code and test it in the browser:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'On iOS 5, `date` and `datetime` will be rendered as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works...](img/1963_10_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Once rendered on iOS Safari, the `month` and `time` input type will look like
    the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works...](img/1963_10_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The `slider` input type will look like the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works...](img/1963_10_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'There are many polyfills used to make web forms work cross browser. `html5slider`
    is a JavaScript implementation of HTML5`<input type="range">` for Firefox 4 and
    above. You can learn more about it at:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://github.com/fryn/html5slider](http://github.com/fryn/html5slider)'
  prefs: []
  type: TYPE_NORMAL
- en: Inline SVG in text/HTML
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Target browsers: iOS 5'
  prefs: []
  type: TYPE_NORMAL
- en: '**Scalable Vector Graphics (SVG)** can be used in an HTML document with the
    support of inline SVG.'
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Create an HTML document and name it `ch10r04.html`.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Enter the following code and test it in the browser:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'HTML inline SVG has to be rendered with a MIME type `Content-Type: text/xml`.
    You can create this by ending the document with `.xml` instead of `.html`.'
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: There are several ways to embed SVG in HTML pages:`<object>, <embed>, <iframe>`.
  prefs: []
  type: TYPE_NORMAL
- en: To find out more about SVG support in different browsers, visit (under section
    *Embed SVG code directly into the HTML):*
  prefs: []
  type: TYPE_NORMAL
- en: '[http://www.w3schools.com/svg/svg_inhtml.asp](http://www.w3schools.com/svg/svg_inhtml.asp)'
  prefs: []
  type: TYPE_NORMAL
- en: SVG in HTML
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Mozilla MDN has a lot of useful articles about frontend web and related information:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://developer.mozilla.org/en/SVG_In_HTML_Introduction](http://developer.mozilla.org/en/SVG_In_HTML_Introduction)'
  prefs: []
  type: TYPE_NORMAL
- en: position:fixed
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Target browsers: iOS 5'
  prefs: []
  type: TYPE_NORMAL
- en: '`position:fixed` is now supported in iOS 5\. It''s now much easier to create
    fixed positioned toolbars for web apps.'
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Create an HTML document and name it `ch10r05.html`.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Before iOS 5, `position:fixed` didn''t work in mobile Safari. If we wanted
    to create a toolbar or a fixed positioned header or footer, something like the
    following hack was needed:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'With the release of iOS 5, the hack is no longer needed, we could simply use
    CSS style the way we normally use it for other browsers:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We register the `onscroll` event to the `window` object, when the scrolling
    event happens, the `div` will always be at the bottom of the page.
  prefs: []
  type: TYPE_NORMAL
- en: '[https://developer.mozilla.org/en/SVG_In_HTML_Introduction](http://developer.mozilla.org/en/SVG_In_HTML_Introduction)'
  prefs: []
  type: TYPE_NORMAL
- en: overflow:scroll
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Target browsers: iOS 5'
  prefs: []
  type: TYPE_NORMAL
- en: One big difference between mobile and desktop is the way people interact with
    the browser. If you have a scrolling action on the desktop browser, it can be
    done by a mouse wheel or a scrollbar. On mobile browser, there isn't a scrollbar
    or a mouse wheel, so the entire scroll interaction is done by finger action. For
    a long time, `overflow:scroll` wasn't supported by iOS, but now it's supported
    by iOS 5!
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Create an HTML document and name it `ch10r06.html`.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Now if you want to make an area scrollable, use the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: By defining `overflow` as `scroll` and `-webkit-overflow-scrolling` as `touch`,
    one can scroll content on a mobile Safari page without any additional code.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In the past few years, there have been many hacks used to fake the native scroll
    behavior. The never-released web framework **PastryKit** by Apple inspired many
    frameworks to do this. Some notable ones are:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Sencha touch: [http://www.sencha.com/products/touch/](http://www.sencha.com/products/touch/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`iScroll`: [http://cubiq.org/iscroll](http://cubiq.org/iscroll)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Scrollability: [https://github.com/joehewitt/scrollability/](http://github.com/joehewitt/scrollability/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'jQuery mobile: [http://jquerymobile.com/](http://jquerymobile.com/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There is an old saying *"Fake it till you make it"*. And now Apple has finally
    made it possible to do so natively. And performance-wise, it's pretty solid and
    could perform better than any previous frameworks.
  prefs: []
  type: TYPE_NORMAL
- en: Browser fragmentation
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: For certain businesses, there might be the concern of fragmentation of mobile
    browsers. One approach is to support browsers two versions before the current
    browser version. Also, another approach
  prefs: []
  type: TYPE_NORMAL
