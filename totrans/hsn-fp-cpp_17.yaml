- en: 'Section 4: The Present and Future of Functional Programming in C++'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We have visited a lot of techniques that we can use in functional programming,
    from the basic building blocks, through the way we can design in a function-centric
    style, to how we can take advantage of functional programming for various goals.
    It's time to look at the present and future of functional programming in Standard
    C++ 17 and 20.
  prefs: []
  type: TYPE_NORMAL
- en: We will first play with the amazing ranges library, available as an external
    implementation for C++ 17 and as part of the C++ 20 standard. We will see how
    a simple idea, wrapping existing containers in a lightweight manner, combined
    with a composition operator and with a new take on the higher-order functions
    that we've extensively used, allows us to write code that is simpler, faster,
    and much lighter than the alternatives from Standard C++ 17.
  prefs: []
  type: TYPE_NORMAL
- en: We'll then visit STL support and see what's coming next. Finally, we'll take
    a look at the main building blocks of functional programming and how they are,
    and will be, supported in C++.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following chapters will be covered in this section:'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 14](1edd5963-94e4-48dc-830f-8f201b3a39c7.xhtml), *Lazy Evaluation
    Using the Ranges Library*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Chapter 15](f33810ab-9028-4f3c-b457-0e8039d8f52c.xhtml), *STL Support and
    Proposals*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Chapter 16](f621e2cb-9b72-475b-9694-fc1b308a05ce.xhtml), *Standard Language
    Support and Proposals*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
