- en: Docker Swarm
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will be taking a look at Docker Swarm. With Docker Swarm,
    you can create and manage Docker clusters. Swarm can be used to distribute containers
    across multiple hosts and also has the ability to scale containers. We will cover
    the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Introducing Docker Swarm
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Roles within a Docker Swarm cluster
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating and managing a Swarm
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Docker Swarm services and stacks
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Docker Swarm load balancing and scheduling
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As in previous chapters, we will continue to use our local Docker installations.
    Again, the screenshots in this chapter will be from my preferred operating system,
    macOS.
  prefs: []
  type: TYPE_NORMAL
- en: As before, the Docker commands we will be running will work on all three of
    the operating systems on which we have installed Docker so far. However, some
    of the supporting commands, which will be few and far between, may only apply
    to macOS and Linux-based operating systems.
  prefs: []
  type: TYPE_NORMAL
- en: 'Check out the following video to see the Code in Action:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://bit.ly/2yWA4gl](http://bit.ly/2yWA4gl)'
  prefs: []
  type: TYPE_NORMAL
- en: Introducing Docker Swarm
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Before we go any further, I should mention that there are two very different
    versions of Docker Swarm. There was a standalone version of Docker Swarm; this
    was supported up until Docker 1.12 and is no longer being actively developed;
    however, you may find some old documentation mentions it. Installation of the
    standalone Docker Swarm is not recommended as Docker ended support for version
    1.11.x in the first quarter of 2017.
  prefs: []
  type: TYPE_NORMAL
- en: Docker version 1.12 introduced Docker Swarm mode. This introduced all of the
    functionality that was available in the standalone Docker Swarm into the core
    Docker engine, along with a significant number of additional features. As we are
    covering Docker 18.06 and higher in this book, we will be using Docker Swarm mode,
    which, for the remainder of the chapter, we will refer to as Docker Swarm.
  prefs: []
  type: TYPE_NORMAL
- en: 'As you are already running a version of Docker with in-built support for Docker
    Swarm, there isn''t anything you need to do in order to install Docker Swarm;
    you can verify that Docker Swarm is available on your installation by running
    the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'You should see something that looks like the following Terminal output when
    running the command:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/c12154f3-2fe8-4d38-9ff5-cab971d15d00.png)'
  prefs: []
  type: TYPE_IMG
- en: If you get an error, ensure that you are running Docker 18.06 or higher, the
    installation of which we covered in [Chapter 1](db23d482-1df4-41c2-af33-d38a98fc5a1c.xhtml)*,
    Docker Overview*. Now that we know that our Docker client supports Docker Swarm,
    what do we mean by a Swarm?
  prefs: []
  type: TYPE_NORMAL
- en: A **Swarm** is a collection of hosts, all running Docker, which have been set
    up to interact with each other in a clustered configuration. Once configured you
    will be able to use all of the commands we have been running so far when targeting
    a single host and let Docker Swarm decided the placement of your containers by
    using a deployment strategy to decide the most appropriate host on which to launch
    your container.
  prefs: []
  type: TYPE_NORMAL
- en: Docker Swarms are made up of two types of host. Let's take a look at these now.
  prefs: []
  type: TYPE_NORMAL
- en: Roles within a Docker Swarm cluster
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Which roles are involved with Docker Swarm? Let's take a look at the two roles
    a host can assume when running within a Docker Swarm cluster.
  prefs: []
  type: TYPE_NORMAL
- en: Swarm manager
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The **Swarm manager** is a host that is the central management point for all
    Swarm hosts. Swarm manager is where you issue all your commands to control those
    nodes. You can switch between the nodes, join nodes, remove nodes, and manipulate
    those hosts.
  prefs: []
  type: TYPE_NORMAL
- en: 'Each cluster can run several Swarm managers. For production, it is recommended
    that you run a minimum of five Swarm managers: this would mean that our cluster
    can take a maximum of two Swarm manager node failures before you start to encounter
    any errors. Swarm managers use the Raft Consensus Algorithm (see the Further reading
    section for more details) to maintain a consistent state across all of the manager
    nodes.'
  prefs: []
  type: TYPE_NORMAL
- en: Swarm worker
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The **Swarm workers**, which we have seen referred to earlier as Docker hosts,
    are those that run the Docker containers. Swarm workers are managed from the Swarm
    manager:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/0dc79ce2-c308-4a06-ac4d-70530101cf4a.png)'
  prefs: []
  type: TYPE_IMG
- en: This is an illustration of all the Docker Swarm components. We see that the
    Docker Swarm manager talks to each Swarm host that has the role of Docker Swarm
    workers. The workers do have some level of connectivity, which we will look at
    shortly.
  prefs: []
  type: TYPE_NORMAL
- en: Creating and managing a Swarm
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s now take a look at using Swarm and how we can perform the following
    tasks:'
  prefs: []
  type: TYPE_NORMAL
- en: Creating a cluster
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Joining workers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Listing nodes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Managing a cluster
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a cluster
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s start by creating a cluster, which starts with a Swarm manager. Since
    we are going to be creating a multi-node cluster on our local machine, we should
    use Docker Machine to launch a host by running this command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'An abridged version of the output you get is shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'The Swarm manager node is now up and running using VirtualBox. We can confirm
    this by running the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'You should see something similar to the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/a2046c70-6991-407c-bef0-cc89a9795b3f.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now, let''s point Docker Machine at the new Swarm manager. From the preceding
    output when we created the Swarm manager, we can see it is telling us how to point
    to the node:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'This will show you the commands needed to configure your local Docker client
    to talk to our newly launched Docker host. The following block of code shows the
    configuration returned when I ran the command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Upon running the previous command, we are told to run the following command
    to point to the Swarm manager:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, if we look at which machines are on our host, we can see that we have
    the Swarm master host, as well as it now being set to `ACTIVE`, which means we
    can now run commands on it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'It should show you something like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/9bbe1018-54b2-4139-be47-72fe23d7fe3a.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now that we have the first host up and running, we should add the two worker
    nodes. To do this, simply run the following command to launch two more Docker
    hosts:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Once you have launched the two additional hosts, you can get the list of hosts
    using this command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'It should show you something like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/f3dd5f78-b321-4507-b50c-e58a5cc83402.png)'
  prefs: []
  type: TYPE_IMG
- en: It is worth pointing out that, so far, we have not done anything to create our
    Swarm cluster; we have only launched the hosts it will be running on.
  prefs: []
  type: TYPE_NORMAL
- en: You may have noticed that one of the columns when running the `docker-machine
    ls` command is `SWARM`. This only contains information if you have launched your
    Docker hosts using the standalone Docker Swarm command, which is built into Docker
    Machine.
  prefs: []
  type: TYPE_NORMAL
- en: Adding a Swarm manager to the cluster
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s bootstrap our Swarm manager. To do this, we will pass the results of
    a few Docker Machine commands to our host. The command to run in order to create
    our manager is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'You should receive a message similar to this one:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: As you can see from the output, once your manager is initialized, you are given
    a unique token. In  the preceding example, the full token is `SWMTKN-1-1uulmpx4j4hub2qmd8q2ozxmonzcehxcomt7cw92xarg3yrkx2-dfiqnfisl75bwwh8yk9pv3msh`.
    This token will be needed for the worker nodes to authenticate themselves and
    join our cluster.
  prefs: []
  type: TYPE_NORMAL
- en: Joining Swarm workers to the cluster
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To add our two workers to the cluster, run the following commands. First, let''s
    set an environment variable to hold our token, making sure you replace the token
    with the one you received when initializing your own manager:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Now we can run the following command to add `swarm-worker01` to the cluster:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'For `swarm-worker02`, you need to run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'Both times, you should get confirmation that your node has joined the cluster:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: Listing nodes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'You can check the Swarm by running the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'Check that your local Docker client is still configured to connect to the Swarm
    manager node, and if it isn''t, rerun the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'Now that we are connecting to the Swarm manager node, you can run the following
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'This will connect to the Swarm master and query all of the nodes that form
    our cluster. You should see that all three of our nodes are listed:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/9b53fe45-f48a-4b9b-93e0-674240551e44.png)'
  prefs: []
  type: TYPE_IMG
- en: Managing a cluster
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let's see how we can perform some management of all of these cluster nodes that
    we are creating.
  prefs: []
  type: TYPE_NORMAL
- en: There are only two ways in which you can go about managing these Swarm hosts
    and the containers on each host that you are creating, but first, you need to
    know some information about them.
  prefs: []
  type: TYPE_NORMAL
- en: Finding information on the cluster
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'As we have already seen, we can list the nodes within the cluster using our
    local Docker client, as it is already configured to connect to the Swarm manager
    host. We can simply type this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'This will give us lots of information about the host, as you can see from the
    following output, which I have truncated:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'As you can see, there is information about the cluster in the Swarm section;
    however, we are only able to run the `docker info` command against the host with
    which our client is currently configured to communicate. Luckily, the `docker
    node` command is cluster aware, so we can use that to get information on each
    node within our cluster, such as the following, for example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: Assessing the `--pretty` flag with the `docker node inspect` command will render
    the output in the easy-to-read format you see as follows. If `-- pretty` is left
    out, Docker will return the raw `JSON` object containing the results of the query
    the `inspect` command runs against the cluster.
  prefs: []
  type: TYPE_NORMAL
- en: 'This should provide the following information on our Swarm manager:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the same command, but this time targeting one of the worker nodes:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'This gives us similar information:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: But as you can see, it is missing the information about the state of the manager
    functionality. This is because the worker nodes do not need to know about the
    status of the manager nodes; they just need to know that they are allowed to receive
    instructions from the managers.
  prefs: []
  type: TYPE_NORMAL
- en: In this way, we can see the information about this host, such as the number
    of containers, the numbers of images on the host, and information about the CPU
    and memory, along with other interesting information.
  prefs: []
  type: TYPE_NORMAL
- en: Promoting a worker node
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Say you wanted to perform some maintenance on your single manager node, but
    you wanted to maintain the availability of your cluster. No problem; you can promote
    a worker node to a manager node.
  prefs: []
  type: TYPE_NORMAL
- en: 'While we have our local three-node cluster up and running, let''s promote `swarm-worker01`
    to be a new manager. To do this, run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'You should receive a message confirming that your node has been promoted immediately
    after executing the command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'List the nodes by running this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'This should show you that you now have two nodes that display something in
    the `MANAGER STATUS` column:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/9bf51b6f-2de8-49c7-ad01-563f2199b316.png)'
  prefs: []
  type: TYPE_IMG
- en: Our `swarm-manager` node is still the primary manager node though. Let's look
    at doing something about that.
  prefs: []
  type: TYPE_NORMAL
- en: Demoting a manager node
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'You may have already put two and two together, but to `demote` a manager node
    to a worker, you simply need to run this command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'Again, you will receive immediate feedback stating the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'Now that we have demoted our node, you can check the status of the nodes within
    the cluster by running this command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'As your local Docker client is still pointing toward the newly demoted node,
    you will receive a message stating the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'As we have already learned, it is easy to update our local client configuration
    to communicate with other nodes using Docker Machine. To point your local client
    to the new manager node, run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'Now that out client is talking to a manager node again, rerun this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'It should list the nodes, as expected:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/0bf7fe15-6d01-4c87-ad79-c4b55d039cb5.png)'
  prefs: []
  type: TYPE_IMG
- en: Draining a node
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To temporarily remove a node from our cluster so that we can perform maintenance,
    we need to set the status of the node to Drain. Let''s look at draining our former
    manager node. To do this, we need to run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: This will stop any new tasks, such as new containers launching or being executed
    against the node we are draining. Once new tasks have been blocked, all running
    tasks will be migrated from the node we are draining to nodes with an `ACTIVE`
    status.
  prefs: []
  type: TYPE_NORMAL
- en: 'As you can see from the following Terminal output, listing the nodes now shows
    that `swarm-manager` node is listed as `Drain` in the `AVAILABILITY` column:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/b656b676-0f32-409d-835a-77c2021e4666.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now that our node is no longer accepting new tasks and all running tasks have
    been migrated to our two remaining nodes, we can safely perform our maintenance,
    such as rebooting the host. To reboot Swarm manager, run the following two commands,
    ensuring that you are connected to the Docker host (you should see the `boot2docker`
    banner, like in the screenshot following the commands):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: '![](Images/1cb99ead-ce1e-44aa-aee0-5ccf89af0c0a.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Once the host has been rebooted, run this command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: 'It should show that the node has an `AVAILABILITY` of `Drain`. To add the node
    back into the cluster, simply change the `AVAILABILITY` to active by running this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: 'As you can see from the following Terminal output, our node is now active,
    meaning new tasks can be executed against it:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/b2d8703d-fc56-4745-8cff-087c167cdb54.png)'
  prefs: []
  type: TYPE_IMG
- en: Now that we have looked at how to create and manage a Docker Swarm cluster,
    we should look at how to run a task such as creating and scaling a service.
  prefs: []
  type: TYPE_NORMAL
- en: Docker Swarm services and stacks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'So far, we have looked at the following commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: 'These two commands allow us to bootstrap and manage our Docker Swarm cluster
    from a collection of existing Docker hosts. The next two commands we are going
    to look at are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: The `service` and `stack` commands allow us to execute tasks that, in turn,
    launch, scale, and manage containers within our Swarm cluster.
  prefs: []
  type: TYPE_NORMAL
- en: Services
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `service` command is a way of launching containers that take advantage
    of the Swarm cluster. Let''s look at launching a really basic single-container
    service on our Swarm cluster. To do this, run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: This will create a service called cluster that consists of a single container
    with port `80` mapped from the container to the host machine, and it will only
    be running on nodes that have the role of worker.
  prefs: []
  type: TYPE_NORMAL
- en: 'Before we look at doing more with the service, we can check whether it worked
    on our browser. To do this, we will need the IP address of our two worker nodes.
    First of all, we need to double check which are the worker nodes by running this
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: 'Once we know which node has which role, you can find the IP addresses of your
    nodes by running this command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: 'Look at the following Terminal output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/ec92169f-f6c8-465b-a6fd-ed3c9a670640.png)'
  prefs: []
  type: TYPE_IMG
- en: My worker nodes are `swarm-manager` and `swarm-worker02`, whose IP addresses
    are `192.168.99.100` and `192.168.99.102` respectively.
  prefs: []
  type: TYPE_NORMAL
- en: 'Going to either of the IP addresses of your worker nodes, such as [http://192.168.99.100/](http://192.168.99.100/)
    or [http://192.168.99.102/](http://192.168.99.102/), in a browser will show the
    output of the `russmckendrick/cluster` application, which is the Docker Swarm
    graphic and the hostname of the container the page is being served from:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/5c4522f7-b026-427a-afd9-9d91648800be.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now that we have our service running on our cluster, we can start to find out
    more information about it. First of all, we can list the services again by running
    this command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: 'In our case, this should return the single service we launched, called cluster:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/110247ed-8f1f-42f6-8a30-3f9be2da0c99.png)'
  prefs: []
  type: TYPE_IMG
- en: 'As you can see, it is a `replicated` service and `1/1` containers are active.
    Next, you can drill down to find out more information about the service by running
    the `inspect` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: 'This will return detailed information about the service:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/5289633f-34eb-4900-a7d7-7c6a647e141d.png)'
  prefs: []
  type: TYPE_IMG
- en: You may have noticed that so far, we haven't had to care about which of our
    two worker nodes the service is currently running on. This is quite an important
    feature of Docker Swarm, as it completely removes the need for you to worry about
    the placement of individual containers.
  prefs: []
  type: TYPE_NORMAL
- en: 'Before we look at scaling our service, we can take a quick look at which host
    our single container is running on by running these commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: 'This will list the containers running on each of our hosts. By default, it
    will list the host the command is being targeted against, which in my case is
    `swarm-worker01`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/ce578e7c-7393-4a2b-8e4b-64f5b33aa575.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Let''s look at scaling our service to six instances of our application container.
    Run the following commands to scale and check our service:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: 'We are only checking two of the nodes since we originally told our service
    to launch on worker nodes. As you can see from the following Terminal output,
    we now have three containers running on each of our worker nodes:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/8b4bd90c-fa5c-4073-a197-1b20ec53e0c3.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Before we move on to look at stacks, let''s remove our service. To do this,
    run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: This will remove all of the containers while leaving the downloaded image on
    the hosts.
  prefs: []
  type: TYPE_NORMAL
- en: Stacks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: It is more than possible to create quite complex, highly available multi-container
    applications using Swarm and services. In a non-Swarm cluster, manually launching
    each set of containers for a part of the application can start to become a little
    laborious and also difficult to share. To this end, Docker has created functionality
    that allows you to define your services in Docker Compose files.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following Docker Compose file, which should be named `docker-compose.yml`, will
    create the same service we launched in the previous section:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: As you can see, the stack can be made up of multiple services, each defined
    under the `services` section of the Docker Compose file.
  prefs: []
  type: TYPE_NORMAL
- en: In addition to the normal Docker Compose commands, you can add a `deploy` section;
    this is where you define everything relating to the Swarm element of your stack.
  prefs: []
  type: TYPE_NORMAL
- en: In the previous example, we said we would like six replicas, which should be
    distributed across our two worker nodes. Also, we updated the default restart
    policy, which you saw when we inspected the service from the previous section
    and it showed up as paused, so that, if a container becomes unresponsive, it is
    always restarted.
  prefs: []
  type: TYPE_NORMAL
- en: 'To launch our stack, copy the previous content into a file called `docker-compose.yml`,
    and then run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: Docker will, as when launching containers with Docker Compose, create a new
    network and then launch your services on it.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can check the status of your `stack` by running this command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: 'This will show that a single service has been created. You can get details
    of the service created by the `stack` by running this command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, running the following command will show where the containers within
    the `stack` are running:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: 'Take a look at the Terminal output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/cb8a2a68-8757-47e4-85b2-96e4dc5dc737.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Again, you will be able to access the stack using the IP addresses of your
    nodes, and you will be routed to one of the running containers. To remove a stack,
    simply run this command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: This will remove all services and networks created by the stack when it is launched.
  prefs: []
  type: TYPE_NORMAL
- en: Deleting a Swarm cluster
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Before moving on, as we no longer require it for the next section, you can
    delete your Swarm cluster by running the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: Should you need to relaunch the Swarm cluster for any reason, simply follow
    the instructions from the start of the chapter to recreate a cluster.
  prefs: []
  type: TYPE_NORMAL
- en: Load balancing, overlays, and scheduling
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the last few sections, we looked at launching services and stacks. To access
    the applications we launched, we were able to use any of the host IP addresses
    in our cluster; how was this possible?
  prefs: []
  type: TYPE_NORMAL
- en: Ingress load balancing
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Docker Swarm has an ingress load balancer built in, making it easy to distribute
    traffic to our public facing containers.
  prefs: []
  type: TYPE_NORMAL
- en: 'This means that you can expose applications within your Swarm cluster to services,
    for example, an external load balancer such as Amazon Elastic Load Balancer, knowing
    that your request will be routed to the correct container(s) no matter which host
    happens to be currently hosting it, as demonstrated by the following diagram:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/2fcef96f-1873-487a-9691-81816678fac5.png)'
  prefs: []
  type: TYPE_IMG
- en: This means that our application can be scaled up or down, fail, or be updated,
    all without the need to have the external load balancer reconfigured.
  prefs: []
  type: TYPE_NORMAL
- en: Network overlays
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In our example, we launched a simple service running a single application. Say
    we wanted to add a database layer in our application, which is typically a fixed
    point within the network; how could we do this?
  prefs: []
  type: TYPE_NORMAL
- en: Docker Swarm's network overlay layer extends the network you launch your containers
    in across multiple hosts, meaning that each service or stack can be launched in
    its own isolated network. This means that our database container, running MongoDB,
    will be accessible to all other containers running on the same overlay network
    on port `27017`, no matter which of the hosts the containers are running on.
  prefs: []
  type: TYPE_NORMAL
- en: You may be thinking to yourself *Hang on a minute. Does this mean I have to
    hardcode an IP address into my application's configuration?* Well, that wouldn't
    fit well with the problems Docker Swarm is trying to resolve, so no, you don't.
  prefs: []
  type: TYPE_NORMAL
- en: Each overlay network has its own inbuilt DNS service, which means that every
    container launched within the network is able to resolve the hostname of another
    container within the same network to its currently assigned IP address. This means
    that when we configure our application to connect to our database instance, we
    simply need to tell it to connect to, say, `mongodb:27017`, and it will connect
    to our MongoDB container.
  prefs: []
  type: TYPE_NORMAL
- en: 'This will make our diagram appear as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/1883cbd8-9542-4be9-a1c4-6477bba73ddc.png)'
  prefs: []
  type: TYPE_IMG
- en: There are some other considerations you will need to take into account when
    adopting this pattern, but we will cover those in [Chapter 14](2a59899d-85fa-4a6f-960f-15f77654396d.xhtml)*,
    Docker Workflows*.
  prefs: []
  type: TYPE_NORMAL
- en: Scheduling
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: At the time of writing, there is only a single scheduling strategy available
    within Docker Swarm, called Spread. What this strategy does is to schedule tasks
    to be run against the least loaded node that meets any of the constraints you
    defined when launching the service or stack. For the most part, you should not
    need to add too many constraints to your services.
  prefs: []
  type: TYPE_NORMAL
- en: One feature that is not currently supported by Docker Swarm is affinity and
    anti-affinity rules. While it is easy to get around this using constraints, I
    urge you not to over complicate things, as it is very easy to end up overloading
    hosts or creating single points of failure if you put too many constraints in
    place when defining your services.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we explored Docker Swarm. We took a look at how to install
    Docker Swarm and the Docker Swarm components that make up Docker Swarm. We took
    a look at how to use Docker Swarm: joining, listing, and managing Swarm manager
    and worker nodes. We reviewed the service and stack commands and how to use them
    and spoke about the Swarm inbuilt ingress load balancer, overlay networks, and
    scheduler.'
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we are going to look at an alternative to Docker Swarm
    called Kubernetes. This is also supported by Docker as well as other providers.
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'True or false: You should be running your Docker Swarm using the standalone
    Docker Swarm rather than the in-built Docker Swarm mode?'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What two things do you need after initiating your Docker Swarm manager to add
    your workers to your Docker Swarm cluster?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Which command would you use to find out the status of each of the nodes within
    your Docker Swarm cluster?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Which flag would you add to docker node inspect Swarm manager to make it more
    readable?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How do you promote a node to be a manager?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What command can you use to scale your service?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: For a detailed explanation of the Raft consensus algorithms, I recommend working
    through the excellent presentation entitled *The Secret Lives of Data*, which
    can be found at [http://thesecretlivesofdata.com/raft](http://thesecretlivesofdata.com/raft).
    It explains all the processes taking place in the background on the manager nodes
    via an easy-to-follow animation.
  prefs: []
  type: TYPE_NORMAL
