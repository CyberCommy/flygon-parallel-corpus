- en: Appendix A. Linux Best Practices
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this appendix we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Root user versus normal user
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Running the GUI
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating, verifying, and storing backups
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Permissions and who you are
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Making backups in real time
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Environmental variables and shells
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The best environment
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using and monitoring a UPS
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Being careful when copying files
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Verifying archive files and using checksums
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Firewalls, router settings, and security
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What to do if you find an intrusion
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Spaces in filenames
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using scripts and aliases to save time and effort
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using scp and ssh with automatic authentication
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Saving history and taking screenshots
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Space on drives
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Being open to new ideas
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are many things you can do to get the most out of your Linux system(s).
    Conventional wisdom states that there are many ways to perform a particular task
    on a computer. This is true, however, in reality there is usually only one good
    way to accomplish something. The trick is to be open-minded and see the good when
    it happens.
  prefs: []
  type: TYPE_NORMAL
- en: Root user versus normal user
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Running as the root user versus a normal user mostly depends on the environment
    you are in. If each person has their own workstation and is in charge of how it
    is set up, then running as root might be very natural for you (especially if you
    don't make mistakes). However, if you're working in a bank or other situation
    where a typing error might wipe out a million dollar account, running as root
    is certainly not advisable. In these cases, assuming you have the authority, you
    would switch to root only when necessary and only to perform the needed task.
    Using sudo, if it has been configured correctly, is also an option. See [Chapter
    5](ch05.html "Chapter 5. Permissions, Access, and Security"), *Permissions, Access,
    and Security*, for more information on sudo.
  prefs: []
  type: TYPE_NORMAL
- en: Another thing to keep in mind is how comfortable you are running as root. If
    you are error prone or nervous, and/or have caused serious damage in the past
    running as root, you obviously need to take great care when doing so. On the other
    hand, if you consistently run as root and don't ever make a mistake then that
    is great. It is certainly more efficient.
  prefs: []
  type: TYPE_NORMAL
- en: 'A special note to system administrators: I have seen this on more than one
    occasion and so will mention it here. This applies to both novice and seasoned
    system administrators.It is customary for you (and maybe your manager) to be the
    only ones with root authority on the systems. This sounds like a good idea, right?
    It might avoid having someone make a mistake that could take out an entire project.
    And, it just feels good being the person in charge. People come to you when they
    need something changed and you happily do it. Then they come again, and again,
    and again. At some point you realize you can''t get any of your work done because
    of all the requests, and that they can''t have their work done if you are not
    around. So you try and set up sudo. Now it''s even worse; every time you think
    you have it set up to handle anything, someone may come to you if it fails again.
    So what do you do?'
  prefs: []
  type: TYPE_NORMAL
- en: You may be able to give selected users root access. Use your instincts. For
    example, watch how the individual users type. Are they comfortable when using
    the command line? Do they type with authority, or seem scared of the machine?
    If a particular user consistently uses the GUI to perform tasks that are done
    much more efficiently on the command line, then I would see that as a strong warning
    sign.
  prefs: []
  type: TYPE_NORMAL
- en: In time you will get a feel of who can be trusted with root access and be able
    to grant it to them. If, of course, someone does make a mistake, then it should
    not be the end of the world. They can't really hurt the entire project, because
    you have been creating and verifying daily backups, right? You can restore the
    damage and take root back from them. Note, one mistake is all it takes. I would
    not trust that user with root again.
  prefs: []
  type: TYPE_NORMAL
- en: Running the GUI
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: While I am somewhat quick to trust my users with root access, and use it myself
    most of the time, I absolutely do not recommend running the GUI this way. Some
    distributions won't even allow it. By running the GUI as root, you are in effect
    running a lot of other things as root, such as your browser and mail programs.
    Not a good idea at all.
  prefs: []
  type: TYPE_NORMAL
- en: Here is my preferred environment on a Linux or UNIX system. I use Fedora, but
    these ideas should work on most other distributions. After installing a system,
    one of the first things I do is change it so that the machine comes up in command
    line mode and not in a GUI. This way if a graphics problem has occurred, it is
    much easier to diagnose and correct. I also have a choice in which GUI to bring
    up by running the appropriate `startx` type command. At the command prompt, I
    log in as a normal or guest user. On my Fedora 14 system I then run `startx`,
    which brings up Gnome 2.
  prefs: []
  type: TYPE_NORMAL
- en: After the GUI has come all the way up, I open a terminal session and run `su`
    to root. I check to make sure the machine can ping, and usually do a few more
    sanity checks. If all is well, I then run my `jset` script. It performs some desktop
    customization such as opening terminal windows into their proper directories,
    and reminding me of what command to run (I have written a lot of programs and
    so really need this). It also mounts my USB devices, or warns me if there is a
    problem. I then position the terminal sessions right where I want them to be.
    I am now set to get some work done.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is a script similar to the one that I use to set up my desktop
    after booting up:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Creating, verifying, and storing backups
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: I cannot stress how important it is to create backups of your system(s). At
    a minimum, copy your personal and business data, and configuration files to a
    safe place. Some people backup everything, even the operating system itself. Whatever
    you decide to do, make a plan and stick to it. As mentioned in [Chapter 8](ch08.html
    "Chapter 8. Working with Scripts"), *Working with Scripts*, this is a great time
    to design and use a script. Use `crontab` if desired, to automate the periodic
    taking of backups.
  prefs: []
  type: TYPE_NORMAL
- en: The `tar` command is great for backing up entire directories. Note that it will
    get any hidden files as well. You can exclude specific directories if desired,
    and do quite a few other things with `tar`. The following are the commands similar
    to the ones I use to backup my `/home/guest1` directory.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '`tsback1` is a text file containing the number to start with.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'The following is the start of the script:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Remember to include the directory to be backed up as the last thing on the line.
    This first changes the `/home` directory, because for `tar`, you want to be in
    the parent directory of the sub-directory to be backed up. The next line sets
    the `NUM` variable to the next one to use. The last line creates the `tar` file
    directly onto my USB external drive in the appropriate directory.
  prefs: []
  type: TYPE_NORMAL
- en: I attempt to be very careful while creating backups. The script I actually use
    to back things up does quite a few other things. For example, it checks to make
    sure my USB external drive is really there, and can be written to (it should also
    check if there is enough free space on the drive, that's a TODO of mine). If the
    code determines the drive is not there or some other error occurs, a really loud
    and obnoxious alarm goes off. And, if I have not responded to this alarm in 5
    minutes, an email is sent to my cell phone. How's that for paranoid?
  prefs: []
  type: TYPE_NORMAL
- en: Making backups is great. However, if the backup is unusable, it doesn't do you
    much good. So, it is wise to verify your backups from time to time. How often
    do this is up to you and your comfort level. My script routinely copies the backup
    files to another machine, which then extracts them and runs a few tests. If anything
    doesn't look quite right, another alarm goes off. This is all done automatically
    in scripts.
  prefs: []
  type: TYPE_NORMAL
- en: Okay, we are now making backups and verifying them. What about storing them?
    Suppose you have everything just right, all your files are copied and verified,
    and they are all located in the same place such as your home or office. And now
    something unspeakable occurs, such as a fire or theft. I agree, there is a very
    low chance of this happening, but it still could. I, for one, do not want to try
    and reproduce the million lines of code I have written since 1982 and so have
    backups all over the place, including off-site. In some of the companies I have
    worked at, the files were copied to tape, CDs, and/or hard drives, and stored
    in a walk-in fireproof safe. Pretty good idea.
  prefs: []
  type: TYPE_NORMAL
- en: Permissions and who you are
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This mostly pertains to system administrators. As a system administrator, you
    probably do most of your work as the root user. You set up guest accounts and
    quotas, and maybe even create scripts, and so on. It is sometimes easy to forget
    that your users don't have root authority.
  prefs: []
  type: TYPE_NORMAL
- en: With this in mind, be sure to check out your additions and changes from the
    user's perspective. Become that user with `su` and make sure you can access everything
    normally. This will save you a lot of time, and maybe even embarrassment, if you
    find a problem before your users do.
  prefs: []
  type: TYPE_NORMAL
- en: Making backups in real time
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When editing scripts and other files, it is a good idea to make numbered backups.
    Nothing is more frustrating than having something work, then break after some
    changes, and then not be able to get it working again quickly. With numbered backups
    you can always go back to a previous version that worked, and then use `diff`
    to find the mistake. I sure learned this one the hard way.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is a backup script I wrote for the users of this book (the one
    I normally use is written in C). It is named `mkbak`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: This script comes free of charge, but with some limitations. It will not handle
    filenames with blanks, and only works on files in the current directory. Note
    that you can `cd` to the directory you want first and then run it.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is the script I use to backup the current book file I am working
    on:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: While editing the file (the `FN` variable), I will manually run this from time-to-time,
    usually after a lot of changes, and definitely just before I get up to take a
    break or whatever.
  prefs: []
  type: TYPE_NORMAL
- en: Environment variables and shells
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: One thing that comes up a lot during system administration is the monitoring
    of several machines. It's not uncommon to have 5 or 6 `ssh` sessions open at a
    time, more if you have multiple monitors. It's crucial to know which session is
    running on which machine, as typing the right command on the wrong machine can
    be a disaster. For this reason and others, I recommend using a custom `PS1` variable
    when logging into a remote machine.
  prefs: []
  type: TYPE_NORMAL
- en: 'This was mentioned in [Chapter 1](ch01.html "Chapter 1. Using the Terminal
    / Command Line"), *Using the Terminal / Command Line*, during the discussion of
    environment variables. The following is what my `PS1` variable looks like on my
    machine running Fedora 17:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Simple, and not too cluttered. The following is what `PS1` looks like on my
    other machine when I log into it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: It should be pretty hard to mix those up.
  prefs: []
  type: TYPE_NORMAL
- en: While we are on the subject of environment variables, there is something else
    to keep in mind. When you make a change to your `.bashrc` file and source it,
    the changes are only visible in that session (as well as any newly opened sessions).
    In order to see the change in other existing sessions you must source it in them
    as well. It would be rather cool if there was a way to make the changes visible
    in every session with just one command, however, I do not believe that is possible.
    Of course, one could argue that `shutdown -r` now will do it.
  prefs: []
  type: TYPE_NORMAL
- en: The best environment
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'What works best for one person may not work the best for another. However,
    I know that I am most productive when using a fast desktop system with plenty
    of memory and storage, and two big displays. The following is my typical set up:'
  prefs: []
  type: TYPE_NORMAL
- en: 'On my left-hand side display, I put the scripts, and the following programs
    that I use to monitor the system:'
  prefs: []
  type: TYPE_NORMAL
- en: A disk space monitoring program written in Java and C
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A program that monitors my **Uninterruptible Power Supply** (**UPS**), also
    written in Java and C
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A script that pings the network once a minute and logs any failures
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A program that uses `tail -f /var/log/messages` to monitor kernel messages
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: My backup script that runs every night at 3 a.m.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A "poor man's" intrusion detection script (more on that later)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A script that e-mails the system status to my cell phone twice a day
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: I have the `Computer` and `Guest` folder icons visible and easy to access
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Any `ssh` sessions to remote machines
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: And a few others that are too boring to mention
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: All of these are set to remain visible in all workspaces. Speaking of workspaces,
    I usually have four of them. I always place the same programs and terminal sessions
    in the same workspace, and in about the same place on the screen. This way, I
    can get to where I want to be very quickly. Have you ever been in a situation
    where your team is about to miss an important deadline, and you are being forced
    to watch and wait as someone else wastes a lot of time trying to find or do something
    on their system? You do not ever want to be that person.
  prefs: []
  type: TYPE_NORMAL
- en: 'On the right-hand side display I do most of my actual work. The following is
    how my workspaces tend to be laid out:'
  prefs: []
  type: TYPE_NORMAL
- en: In Workspace 1 are a couple of terminals. Those are there and ready in case
    I need to do something right away
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Workspace 2 is normally used for program development. I do C, Java, and script
    development here
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Workspace 3 is where I am currently typing this book in my custom written text
    editor (which will eventually be imported into `LibreOffice`)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Workspace 4 is where I have my webmail client
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Speaking of browsing, I tend to open those on the left-hand side display, and
    in whatever workspace that goes with what I am currently working on. This is very
    fast and efficient, and is also easier to cut and paste when needed.
  prefs: []
  type: TYPE_NORMAL
- en: Not all of us have the luxury of fast machines or dual monitors, particularly
    at our jobs, where it sometimes seems to be more important to management to save
    money, instead of giving the employees what they need to be productive. All I
    can say to that, is try your best to get what you need to do your job as efficiently
    as possible.
  prefs: []
  type: TYPE_NORMAL
- en: Using and monitoring a UPS
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In my opinion it is imperative that a UPS be used on at least your primary workstation.
    All kinds of bad things can happen to the hardware if the power suddenly goes
    off (or worse, browns out), not to mention what might happen to your data. With
    modern journaling filesystems, I realize data loss is somewhat rare, but why take
    the chance? Also, I really just don't like to reboot. Ever.
  prefs: []
  type: TYPE_NORMAL
- en: Depending on your situation, try to get the best UPS you can afford. You want
    one that will run your system for a long time and also power your display, modem,
    router, and external drives if you have them. This way, if the power goes out
    for just a short time you won't lose anything, and won't have to wait for everything
    to come back up.
  prefs: []
  type: TYPE_NORMAL
- en: There are many different UPS brands available today. I am somewhat partial to
    the **American Power Conversion** (**APC**) devices. I have several of them, and
    they work well with Linux. Be sure to get one with a phone-connector to USB port,
    as the old-style serial port units do not work properly.
  prefs: []
  type: TYPE_NORMAL
- en: The `apcupsd` daemon can be used to monitor the UPS. If your distribution does
    not already have it, the package can be installed.
  prefs: []
  type: TYPE_NORMAL
- en: If using Fedora, run `yum -y install apcupsd` (substitute your package installer
    as appropriate)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Comment out the `WALL` statement in the `/etc/apcupsd/apccontrol` file to keep
    annoying messages from being broadcasted to every terminal
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Run `apcaccess status` to query the UPS
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There's quite a bit more you can do with `apcupsd`, for more information check
    its website at [http://www.apcupsd.com](http://www.apcupsd.com). This also lists
    some UPS units that might not be as compatible with Linux as the ones I have.
  prefs: []
  type: TYPE_NORMAL
- en: One more thing, you will probably want to use the auto-shutdown feature of the
    UPS. It can be set up to automatically shutdown your machine if the power has
    been out for too long. Most units allow you to set the amount of time to stay
    running, before shutting down. Remember that the longer the UPS runs on the batteries,
    the shorter their life span will be.
  prefs: []
  type: TYPE_NORMAL
- en: Being careful when copying files
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When copying files to a directory, make sure it really is a directory. This
    happens enough for me to mention it, and I have to admit I still almost do it
    from time-to-time. It is quite easy to copy a lot of files to what you believe
    is a directory, but isn't. The result is that just the last file that was copied
    will be there, and if you don't still have the source files, they might now be
    lost. Use the `file` command to verify whether the target really is a directory
    before you copy the files.
  prefs: []
  type: TYPE_NORMAL
- en: Verifying archive files and using checksums
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: One thing that comes up a lot is mistakes that go unnoticed in the creation
    of `tar` or `zip` archives that are going to be sent to another person or site.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following are the steps that should be followed:'
  prefs: []
  type: TYPE_NORMAL
- en: Copy the files to an appropriate directory (make sure it really is a directory
    first).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Use `zip` or `tar` to compress and create the archive.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Use the `tell` or `list` option to be sure it looks correct. For TAR it's `tar
    -tvzf filename.gz` and for ZIP it's `unzip -l filename.zip`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Run the `sum` command against your file, and then send the file to where it
    needs to go.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'If using `scp`, use `ssh` to run the `sum` command on the file on the remote
    system like the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: The two `sum` values should match.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If using e-mail, run `sum` on your end, and send the result along with the e-mail.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A piece of advise for developers; suppose you are creating an archive of a programming
    project. To make absolutely sure you have copied every file it needs, create the
    archive and then copy it to another machine. Un-compress and build it as you normally
    would. An error will occur if a needed file is missing.
  prefs: []
  type: TYPE_NORMAL
- en: Firewalls, router settings, and security
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Firewalls were covered in [Chapter 5](ch05.html "Chapter 5. Permissions, Access,
    and Security"), *Permissions, Access, and Security*, and so this will just be
    a brief recap. If you are running a home system and using a good router, the default
    settings for `iptables` is probably all you need. It may require some tweaking,
    for example, to use a scanner, but for the most part you are probably safe from
    hackers. On the other hand, if you are the system administrator for a large company,
    `iptables` is probably not enough. I would investigate using a hardware intrusion
    appliance or some other method, to insure data and system security.
  prefs: []
  type: TYPE_NORMAL
- en: It is highly suggested that a router with a built-in firewall be used at all
    times. By no means would I connect a system directly to the Internet. While a
    typical Linux system may survive this, I have seen Windows boxes get infected
    with a virus in less than 30 minutes.
  prefs: []
  type: TYPE_NORMAL
- en: The default router settings are probably already strong enough to keep out the
    typical hacker. To be sure, and just to get an idea of what is going on inside
    your router, it's a good idea to login and check everything from time-to-time.
    On most routers, pointing your browser to `192.168.1.1` will bring up the login
    screen. In most cases, an ID and password are required.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `who` command can be used in Linux to show the username, tty, date, time
    and IP address of each user on the system, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Firewalls, router settings, and security](img/3008OS_A_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Here is another thing you can do to help prevent an intrusion. It is a good
    idea to deny root access by `ssh`/`scp` because hackers will usually attempt to
    break in as root. This can be accomplished by editing the `/etc/ssh/sshd_config`
    file. Locate the line that says `#PermitRootLogin yes` and change it to `PermitRootLogin
    no`. Don't forget to remove the `#` (pound sign). You will also need to restart
    `sshd`. Now, any attempt to login as root will fail. I have all of my machines
    set up this way as an added precaution.
  prefs: []
  type: TYPE_NORMAL
- en: One last thing, any time someone logs (or attempts to log) into your system,
    a record is made of it. On Fedora this is put into the `/var/log/secure` file.
    You can check this file from time-to-time, or monitor it by using the `tail -f
    /var/log/secure` command.
  prefs: []
  type: TYPE_NORMAL
- en: 'And now for a bonus. The following is a simple script I use to watch for unauthorized
    access to my machine:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Basically what this does is check every 5 seconds to see if the number of users
    have changed. If it has increased, the `jalert5` script is run in the background.
    It plays a really obnoxious WAV file every 5 seconds until I turn it off. This
    will also fire every time you open a new session, so you will probably want to
    run it last after a boot up.
  prefs: []
  type: TYPE_NORMAL
- en: What to do if you find an intrusion
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Suppose you have found that an intrusion has occurred. What should you do?
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: These instructions are for your machine or for one you have total responsibility
    for. If this occurs on a machine where you work, immediately follow whatever procedures
    your company has in place for a security event.
  prefs: []
  type: TYPE_NORMAL
- en: 'Quick action is needed if you suspect a break-in. Run the `who` command or
    `cat /var/log/secure` and check the output. If you see a suspicious IP address,
    take the following actions:'
  prefs: []
  type: TYPE_NORMAL
- en: If this were a very important machine with critical data on it, I would pull
    out the Ethernet wire(s) and shut it down now. I would then boot up from rescue
    media and try to determine if anything bad had occurred. Checking the date and
    time they got in (from the `who` command) could give you an idea of how much damage
    they may have caused.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If this were my home system, I would first pull the Ethernet wire. I would then
    run `ps auxw` to a file to capture what is going on in the system right now. I
    would copy this file to some other machine or device and then shutdown the system.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: By examining the `ps` output and looking at the `tty` value I could probably
    determine what programs they were running, if any. This might point to what they
    were trying to accomplish by getting into the system.
  prefs: []
  type: TYPE_NORMAL
- en: Obviously, if someone does get into your system, they most likely did it by
    guessing or somehow determining a password. I would probably reset all the passwords
    to something much harder to crack, and then inform my users to pick better ones.
    Or probably assign them myself.
  prefs: []
  type: TYPE_NORMAL
- en: Okay, so at least one person reading this is thinking why pull out the Ethernet
    wire? Why not just bring down the interface? Well, because a shrewd attacker is
    going to think of that, and as soon as he has access, he is going to put code
    on the system to automatically bring the interface back up if it goes down. He
    may even put a timer on it, or hide it in some other way.
  prefs: []
  type: TYPE_NORMAL
- en: It is possible that an attacker had time to do all kinds of things. He may have
    even been able to modify the `who`, `ps`, and other commands to make it almost
    impossible to track what he did (or is still doing) from the running system. With
    this in mind, you still need to shutdown asap and then boot up with a rescue disk
    or equivalent. Some of the things to look at are the commands such as `ps` and
    `who`. Run the `file` command, it should show them as being a binary executable
    and not a shell script. If they are shell scripts, you may discover the attacker
    has renamed the executable files with a `.` to hide them, and then wrapped them
    around a script to help cover up his presence. There are many other ways to hide
    as well.
  prefs: []
  type: TYPE_NORMAL
- en: Spaces in filenames
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When generating files for yourself or other people, do not include blanks in
    the filename. This can cause a lot of problems on Linux and UNIX machines. If
    necessary, use capital letters and/or underscores. Do not use parentheses or other
    special characters either. I was really amazed the first time I downloaded a file
    using Firefox, as it inserted parentheses to differentiate it from another file
    of the same name. I appreciate the fact that it didn't just over-write the original
    file, but using parentheses was and is a really bad idea.
  prefs: []
  type: TYPE_NORMAL
- en: Using scripts and aliases to save time and effort
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: One thing I see a lot of in the field is people wasting time and effort typing
    the same things over and over again. Don't do this. Use aliases and scripts. Don't
    think about how much time you might spend writing the script, think about how
    much time you will save by being able to use it all the time. You might also be
    able to incorporate it into another script later on (especially if it was written
    well, to begin with). Also, having these available should help with meeting deadlines.
  prefs: []
  type: TYPE_NORMAL
- en: Using scp and ssh with automatic authentication
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Follow these steps to allow the use of `ssh`/`scp` without having to enter a
    password. You will need to be root.
  prefs: []
  type: TYPE_NORMAL
- en: First, make sure the client has used `ssh` at least once. This will create the
    proper directory that is needed.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: On the master machine run the `ssh-keygen -t rsa` command. This will create
    some necessary files.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If the `/root/.ssh/authorized_keys` file does not already exist on the client,
    you can run `scp /root/.ssh/id_rsa.pub <hostname>:/root/.ssh/authorized_keys`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Otherwise, copy the `id_rsa.pub` file over to the client and then add it to
    the `authorized_keys` file (I usually put it at the bottom).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You should now be able to `scp` and `ssh` to the client without having to enter
    a password. This is really handy, especially in scripts.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You can also add this entry to another user account. For example, I added it
    to my `/home/guest1/.ssh/authorized_keys` file. This way I can copy files as root
    from one machine, and it will still be accepted by the other.
  prefs: []
  type: TYPE_NORMAL
- en: Saving history and taking screenshots
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We all have to learn new things when dealing with computers. Sometimes the steps
    involved are pretty complicated, and I have found that in practically every situation
    whatever document or site I am using to perform the steps, has errors. It's not
    complete, the author skipped an important step, and so on. For these reasons and
    others, after I have (finally) gotten something to work, I run the `history` command
    in that session and output it to a file. I then save this under a suitable name
    so I can find it again later.
  prefs: []
  type: TYPE_NORMAL
- en: Depending on how much effort was required, and if appropriate, I may take screenshots
    of each step as well. This can be valuable later as a reference, and if you ever
    have to help someone else accomplish the same task. Or, if someone talks you into
    writing a book about it someday.
  prefs: []
  type: TYPE_NORMAL
- en: Space on drives
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the old days there was never enough hard drive space. We were always running
    low or out, and trying to find ways to increase our storage. Now, in modern times,
    this might not be as much of an issue. However, it is still a good idea to monitor
    your available space at all times.
  prefs: []
  type: TYPE_NORMAL
- en: There are quite a few ways to do this. On my systems I use a program I wrote
    in C and Java. It's called `Percent Space Used` and just uses `df -h` under the
    covers. You can put `df` in a script, or just check the space manually from time
    to time. Just don't run out! Filling up a partition is a good way to have a disaster
    on your hands, especially if it is a system partition.
  prefs: []
  type: TYPE_NORMAL
- en: Being open to new ideas
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Here is my last bit of advice for people wanting to know Linux better. I consistently
    see people in the field doing their everyday jobs, and doing it the same way.
    Always be on the lookout on how to improve the way you perform your daily tasks.
    If you see a co-worker doing something that seems odd to you, don't just assume
    his way is wrong and yours is right. His process may be a whole lot better than
    yours. Learn from it. On the other hand, he may *not* have a better way, yours
    may be better. At this point, it's up to you to decide whether to attempt to share
    your ideas. I have found most people very resistant to this.
  prefs: []
  type: TYPE_NORMAL
- en: Do not let yourself get caught in the "Your way isn't better than mine, it's
    just different" argument. As I mentioned before, there is usually only one right
    way to perform a task, but most people just don't see this. Try to find it when
    you can, and share your ideas only if the person you are trying to help is receptive.
  prefs: []
  type: TYPE_NORMAL
