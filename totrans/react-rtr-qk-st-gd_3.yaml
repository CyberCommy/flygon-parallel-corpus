- en: Using the Link and NavLink Components to Navigate to a Route
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: React-Router provides the `<Link>` and `<NavLink>` components, which allow you
    to navigate to different routes defined in the application. These navigation components
    can be thought of as being like anchor links on the page that allow you to navigate
    to other pages in the site. In a traditional website, when you navigate through
    the application using anchor links, it results in a page refresh, and all the
    components in the page are re-rendered. Navigation links created with `<Link>`
    and `<NavLink>` do not result in a page refresh, and only those certain sections
    of the page that are defined using the `<Route>` and match the URL path are updated.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
- en: Similar to a `<Route>` component, the navigation components `<Link>` and `<NavLink>`
    are React components that allow you to define navigation links declaratively.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will take a look at the various options available for navigating
    to routes defined in the application. This includes the following:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
- en: The `<Link>` component and its props
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `<NavLink>` component and its props
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Navigating to a nested route using the `match` prop
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Navigating to a route programmatically using `history`
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using a High Order Component `withRouter`
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Preventing route transitions using the `<Prompt>` component
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <Link> component
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'A `<Link>` component is used to navigate to an `<indexentry content=" component:about">`
    existing route that is defined using the `<Route>` component. To navigate to a
    route, specify the pathname used in the route as a value to the `to` prop:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Notice that the `to` prop''s value is the same as the value assigned to the
    `path` prop in `<Route>`. The page now renders two links:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/935a19d9-f2c7-4d1e-af10-4ce9d5dacb91.png)'
  id: totrans-14
  prefs: []
  type: TYPE_IMG
- en: When you click on Home, you will see the text Inside Home route displayed, and,
    when you click on Dashboard, you will be navigated to the route with its `path` prop
    set to `/dashboard`.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
- en: When you navigate to a route using `<Link>`, `history.push()` is called, which
    adds an entry to the history stack. Thus, when you click the browser's back button,
    you will be navigated to the previous route that you were accessing (the Home
    route). As mentioned in the previous chapter, the `history` library is used by
    React-Router to maintain the state of the application as the user traverses through
    various routes during the application journey.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
- en: The `<Link>` component has two other props—`replace` and `innerRef`.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
- en: replace prop
  id: totrans-18
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `replace` prop in `<Link>` calls `history.replace()`, which replaces the
    current entry in the history stack with the new path name mentioned in the `to` prop:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: For example, if you access the page at the path `/home`, accessing the preceding
    link will replace the current entry in the history stack with `/dashboard`, which
    basically replaces the entry `/home` with `/dashboard`.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
- en: innerRef prop
  id: totrans-22
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: React provides `ref` to get a reference to the rendered DOM element. This reference
    (`ref`) can then be used to perform certain operations outside the regular flow,
    such as focusing on the input element, media playback, and so on. `<Link>` is
    a composite component and it renders an anchor element on the DOM.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
- en: 'The `<Link>` component mentioned in the previous code snippet translates to
    anchor elements as follows:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'To get a reference to this rendered anchor element, the prop `innerRef` is
    added to `<Link>`:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'The `innerRef` prop accepts a callback function as its value; here, a function
    `refCallback` is specified as a value to the `innerRef` prop. The `refCallback`
    gets the reference to the inner element of the `<Link>` component:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: The callback function—`refCallback`—is called when the `<Link>` component mounts.
    From the preceding code snippet, we can see that a `mouseover` handler is added
    for both the anchor elements rendered by the two `<Link>` components. When the
    user hovers over the link, the corresponding anchor gets a focus.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
- en: to prop with an object
  id: totrans-31
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `to` prop can be either a string or an object. The object can contain the
    following properties:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
- en: '`pathname`: The path to navigate to'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`search`: The query parameters to the path, represented as a string value'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`hash`: a hash string to add to the URL'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`state`: an object containing state information that the rendered component
    can consume'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Using these parameters, let''s add a `<Link>` component:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '[PRE6]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'The preceding code translates to the following:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'The `state` information is not included in the URL path; however, it''s available
    to the component that gets rendered as a result of a `<Route>` match:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: The `location` object contains all of the previously defined parameters, including
    the `state` object.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
- en: The `state` object can be used to store data as the user navigates through the
    application and provide this data to the component that gets rendered next as
    a result of `<Route>` match.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
- en: <NavLink> component
  id: totrans-46
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `<NavLink>` component is similar to the `<Link>` component, except that
    several props can be specified that help you to conditionally add styling attributes
    to the rendered element. It accepts the same set of props as the `<Link>` component
    (`to`, `replace`, and `innerRef`) for navigating to a route, and it includes props
    to style the selected route.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
- en: Let's take a look at these props that help you style the `<NavLink>` component.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
- en: activeClassName prop
  id: totrans-49
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'By default, the class name `active` is applied to the active `<NavLink>` component.
    For example, when a `<NavLink>` is clicked and the corresponding route is rendered,
    the selected `<NavLink>` has its class name set to `active`. To change this class
    name, specify the `activeClassName` prop on the `<NavLink>` component with its
    value set as the CSS class name that you want to apply:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'The next step is to specify the styles for the CSS class `selectedLink` in
    your application''s CSS file. Note that the first `<NavLink>` does not specify
    the `activeClassName` prop. In this case, when the `<NavLink>` is clicked, the `active` class
    is added:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'However, when the second `<NavLink>` is clicked, the `selectedLink` class is
    applied:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: activeStyle prop
  id: totrans-56
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `activeStyle` prop is also used to style the selected `<NavLink>`. However,
    instead of providing a class to apply when the `<NavLink>` is selected, the CSS
    style properties can be provided inline:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: exact prop
  id: totrans-59
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When you click on the `<NavLink>` with the `to` prop `/dashboard`, the `active`
    class (or inline style specified in `activeStyle` prop) is applied to both the
    `<NavLink>` components in the page. Similar to the `<Route>` component, the `/` in
    `/dashboard` matches the path specified in the `to` prop, and thus the active
    class is applied to both the `<NavLink>` components.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
- en: 'In this case, the `exact` prop can be used to apply the `active` class or `activeStyle`
    only when the path matches the browser''s URL:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: strict prop
  id: totrans-63
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `<NavLink>` component also supports the `strict` prop, which can be used
    to match the trailing slash specified in the `to` prop:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Here, the class `selectedLink` is applied to the `<NavLink>` component only
    when the browser's URL path matches the path `/dashboard/`—for example, when a
    trailing slash is present in the URL.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
- en: isActive prop
  id: totrans-67
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `isActive` prop is used to determine whether the `<NavLink>` component
    should have the `active` class applied (or inline styles specified in `activeStyle`
    prop). The function specified as a value to the `isActive` prop should return
    a Boolean value:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: From the preceding example, the function accepts two parameters—`match` and
    `location`. The styles defined in the `activeStyle` prop are applied only when
    the condition `match.isExact && searchParams.has('id')` evaluates to true, so,
    only when the `match` is `exact` and the URL has a query parameter `id`.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
- en: When the browser's URL is `/user`, the corresponding route defined with `<Route>`
    is displayed. However, the `<NavLink>` component will have the default styling
    and not the styles mentioned in the `activeStyle` prop, since the query parameter
    `id` is missing.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
- en: location prop
  id: totrans-72
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `isActive` function in `<NavLink>` receives the browser''s history `location` and
    determines whether the browser''s `location.pathname` matches the given condition.
    To provide a different location, include the `location` prop:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Notice that the `to` prop doesn't specify the `search` parameter; however, the
    `location` prop includes it, and thus, when the browser's location is `/user`,
    the `isActive` function returns true, since the search parameter includes the
    `id` property.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
- en: Navigating to nested routes
  id: totrans-76
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In the last chapter, we saw how to create nested routes using the `match` prop
    that the rendered component receives. The `match.url` property contains the browser''s
    URL path that matched the `<Route>` component''s path. Similarly, the `<Link>`
    and `<NavLink>` components can be used to create navigation links to access these
    nested routes:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: In the preceding code snippet, the `<Link>` and `<NavLink>` components make
    use of `match.url` to get a reference to the current rendered route and add the
    additional path values required to navigate to the nested route.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
- en: Navigating to a route programmatically using history
  id: totrans-80
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `<Link>` and `<NavLink>` components render anchor links on the page, which
    allow you to navigate from the current route to the new route. However, in many
    cases, the user should be navigated to a new route programmatically when an event
    occurs. For example, the user should be navigated to a new route upon clicking
    the Submit button in the login form. The `history` object available to the rendered
    component can be used in such cases:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Here, the `DashboardComponent` receives `props` as its argument, which contains
    the `history` object. The `onClick` handler calls `props.history.push` with the
    pathname `/user`. This call adds an entry to the history stack, and navigates
    the user to the `<Route>` with the path `/user`. The `history` object can also
    be used to replace the current entry in the history stack by using `history.replace` in
    place of `history.push`.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
- en: Using the withRouter higher–order component
  id: totrans-84
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `history` object is available to the component rendered with a `<Route>`
    match. In the preceding example, the `DashboardComponent` was rendered as a result
    of navigation to the path `/dashboard`. The rendered component received the `props`,
    which contained the `history` object (as well as `match`, `location`, and `staticContext`).
    In a case where, the rendered component on the page is not the outcome of a route
    navigation, the `history` object will not be available to the component.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
- en: 'Consider a `FooterComponent` included in `App.js` :'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'The `FooterComponent` has two buttons that call `history.push` to navigate
    to one of the pages in the application. On clicking the button, the error `TypeError:
    Cannot read property ''push'' of undefined` is thrown. The error is thrown because
    the `history` object is not available in the `props` property, as the component
    is not rendered as a result of navigation. To circumvent this, use the higher-order
    component `withRouter`:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Here, the `withRouter` function defined in the `react-router` package accepts
    a React component as its argument and augments it to provide the necessary objects
    on the `props` property—`history`, `match`, `location`, and `staticContext`.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
- en: 'React documentation on HOC: A higher-order component is a function that takes
    a component and returns a new component**.** Although a component transforms props
    into UI, a higher-order component transforms a component into another component.'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
- en: 'A component wrapped inside a `withRouter` HOC can define routes and navigation
    links using `<Route>`, `<Link>`, and `<NavLink>`:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: In the preceding code snippet, the `withRouter` HOC enables the component to
    get the context of the router, and hence makes components such as `Link`, `NavLink`,
    and `Route` available.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
- en: Preventing transitions with <Prompt>
  id: totrans-95
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When you navigate between the pages in the application, the transition to the
    new route occurs instantly. However, there are scenarios in which you want to
    prevent this transition based on the state of the application. One such common
    example is when a user has entered data into form fields and has spent several
    minutes (or hours) filling up the form data. If the user clicks on a navigation
    link accidentally, all the data entered in the form will be lost. The user should
    be notified of this route navigation, so that the user gets a chance to save the
    data entered into the form.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
- en: 'Traditional websites keep track of the state of the form and display a confirmation
    message when the user tries to navigate away from a page that contains a form
    that has not been submitted to the server. In these scenarios, a confirmation
    dialog box is shown with two options, OK and CANCEL; the former option allows
    the user to transition to the next step and the latter cancels the transition:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/986b5084-e5e1-445d-a608-0279df2edbff.png)'
  id: totrans-98
  prefs: []
  type: TYPE_IMG
- en: 'React-Router provides the `<Prompt>` component, which can be used to display
    a confirmation dialog box to prevent the user from navigating away from the current
    `<Route>` accidentally:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: The `<Prompt>` component here accepts two props—`when` and `message`. From the
    preceding code snippet, it can be seen that a confirmation dialog box with the
    message Are you sure? is shown to the user if the value of the `state` property `isFormSubmitted` is
    `true`, and when the user tries to navigate away from the current route.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
- en: Please note, the `<Prompt>` message is shown only when the user tries to navigate
    away from the current route. No message is shown when the `state` property is
    set to `true`.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
- en: The value assigned to the `when` prop can be any Boolean variable or a Boolean
    value. In React, the component's `state` is used as a View-Model to maintain the
    state of the rendered component. The `state` properties are ideal in cases such
    as these to determine whether the `<Prompt>` should be shown when the user tries
    to navigate away from the current route.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
- en: 'The value of the `message` prop can be a string or a function:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: The function receives the `location` parameter, which includes the location
    information about the route that the user is trying to navigate to.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
- en: Similar to other components in the `'react-router-dom'` package, the `<Prompt>`
    component should be used inside a rendered `<Route>`. When you try to use a `<Prompt>`
    without it having the context of the current route, the message. You should not
    use `<Prompt>` outside a `<Router>` is shown.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
- en: 'It''s also possible to show a message whenever the user tries to navigate away
    from the current route (irrespective of the `state` of the application) by not
    including the `when` prop:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: More often than not, the `when` prop is included in `<Prompt>`, and the value
    assigned to the `when` prop is used to determine whether the confirmation dialog
    box should be shown.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
- en: When you're trying these examples, ensure that you have only one `<Prompt>`
    for the given `<Route>`, else the library will report the warning `A history supports
    only one prompt at a time`.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  id: totrans-112
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we looked at how the `<Link>` and `<NavLink>` navigation components
    can be used to navigate to various routes defined in the application. These components
    render `anchor` links in the page, and, when the user clicks on these links, sections
    of the page are updated as opposed to doing a complete page reload, thus providing
    a lucid user experience. The `<Link>` component accepts the props `to`, `replace`,
    and `innerRef`.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
- en: The `<NavLink>` component is similar to the `<Link>` component, and it accepts
    all the props that the `<Link>` component works with. In addition to adding a
    link to the page, the `<NavLink>` component accepts several props—`activeClassName`,
    `activeStyle`, `exact`, `strict`, and `isActive`.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
- en: To create links to the nested routes, the `<Link>` and `<NavLink>` components
    can use the prefix `match.url` in the `to` prop. Also, you can programmatically
    navigate using `history.push` or `history.replace` in the event–handler function.
    Props—`history`, `match`, `location`, and `staticContext`—can be made available
    to components rendered outside the Route context via the `withRouter` higher order
    component. The `'react-router-dom'` package includes a `<Prompt>` component that
    can be used to display a confirmation dialog box when the user tries to navigate
    to route by accidentally clicking on a navigation link. The `<Prompt>` component
    accepts the `when` and `message` prop, and, based on the Boolean value assigned
    to the `when` prop, the message specified in the `message` prop will be shown
    to the user.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
- en: In [Chapter 4](c1e1a628-b860-4291-bbf6-f8a370050224.xhtml), *Using the Redirect
    and Switch Components*, we will take a look at the `<Redirect>` and `<Switch>` components.
    Also, we will see how these components can be used to protect the routes and display
    a Page Not Found page when none of the routes in the page match the requested
    URL.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第4章](c1e1a628-b860-4291-bbf6-f8a370050224.xhtml)中，*使用重定向和切换组件*，我们将看看`<Redirect>`和`<Switch>`组件。此外，我们将看到这些组件如何用于保护路由，并在页面中没有任何路由匹配请求的URL时显示一个未找到页面。
