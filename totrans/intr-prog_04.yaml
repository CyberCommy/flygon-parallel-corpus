- en: Your Development Environment Setup
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: By now, you probably have a pretty good idea of how to compile and execute a
    Java program on your computer. Now, it is time to learn how to write a program.
    This chapter is the last step before you can do it. Because you need to set up
    your development environment first, this chapter is going to explain what a development
    environment is, and why you need it. Then, it will guide you through configuration
    and tuning, including the setting of a classpath. On the way, an overview of popular
    editors and specific advice on IntelliJ IDEA will be provided.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: What is a development environment?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting the classpath
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: IDEs overview
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to install and configure IntelliJ IDEA
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Exercise – Installing NetBeans
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What is the development environment?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The development environment is a set of tools installed on your computer that
    allows you to write Java programs (applications) and tests for them, to share
    the source code with your colleagues, and to compile the source and run it. We
    will discuss each of the development tools and stages of the development process
    in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Java editor is your main tool
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A Java-supporting editor is the center of a development environment. In principle,
    you can use any text editor to write a program and store it in a `.java` file.
    Unfortunately, a regular text editor does not warn you about Java language syntax
    errors. That is why a specialized editor that supports Java is a better choice
    for writing Java programs.
  prefs: []
  type: TYPE_NORMAL
- en: A modern Java language editor is not just a writing tool. It also has the ability
    to integrate with the JVM installed on the same computer, and use it to compile
    the application, execute it, and much more. That is why it is called not just
    an editor, but an IDE. It can integrate with other development tools, too, so
    you do not need to exit the IDE in order to store the source code on the remote
    server of a source control system, for example.
  prefs: []
  type: TYPE_NORMAL
- en: Another huge advantage of Java IDEs is that they can remind you about language
    possibilities and help you to find a better way to implement the required functionality.
  prefs: []
  type: TYPE_NORMAL
- en: IDE also supports code refactoring. This term means a code change for better
    readability, reusability, or maintainability, without affecting its functionality.
    For example, if there is a block of code used in several methods, one can extract
    it in a separate method and use it everywhere, instead of duplicating code. Another
    example is when the name of a class, method, or variable is changed to a more
    descriptive one. Using a regular editor would require you to find all of the places
    where the old name is used manually. An IDE does it for you.
  prefs: []
  type: TYPE_NORMAL
- en: Another helpful feature of an IDE is the ability to generate the boilerplate
    code of a class, and standard methods, such as a constructor, getters, setters,
    or the `toString()` method. It increases programmer productivity by keeping their
    focus on what is important.
  prefs: []
  type: TYPE_NORMAL
- en: So, make sure that you are comfortable with the IDE of your choice. As a programmer,
    you're going to work with your IDE editor for most of your working hours.
  prefs: []
  type: TYPE_NORMAL
- en: Source code compilation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: An IDE uses the `javac` compiler installed on your computer to find all Java-language
    syntax errors. Caught early, such errors are much easier to correct than if they
    are found after the application is already running in the production environment.
  prefs: []
  type: TYPE_NORMAL
- en: Not all programming languages can be supported this way. It is possible for
    Java, because Java is a strictly-typed language, which means that it needs to
    declare a type for every variable before one can use it. You saw `int` and `String` types
    in the examples in [Chapter 2](4eaa4fe6-9564-40ba-b799-7fdc2abb5039.xhtml), *Java
    Language Basics*. After that, if you try to do something that is not allowed with
    the variable for its declared type, or try to assign another type to it, the IDE
    will warn you, and you can revisit it or insist on the way you have written the
    code (when you know what you are doing).
  prefs: []
  type: TYPE_NORMAL
- en: Despite the similar name, JavaScript, by contrast, is a dynamically-typed language,
    which allows for declaring a variable without defining its type. That's why a
    Java novice can develop a much more complex and fully functional application from
    the very beginning, while a complex JavaScript code remains a challenge, even
    for an experienced programmer, and still does not reach the level of complexity
    that Java code can.
  prefs: []
  type: TYPE_NORMAL
- en: By the way, one of the reasons for Java's popularity, although it was introduced
    later than C++, was—paradoxically—the limitation it imposed on object type manipulation.
    In Java, the risk of making difficult-to-trace runtime errors is much smaller
    than in C++. The runtime errors are those code issues that cannot be found by
    the IDE at compile-time, based on the language syntax only.
  prefs: []
  type: TYPE_NORMAL
- en: Code sharing
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: IDE integrates with code sharing systems, too. Collaboration on the same code
    requires placing the code in a common shared location, called a **source code
    repository** or version control repository, where it can be accessed by all the
    team members. One of the most well-known shared repositories is a web-based version-control
    repository—GitHub ([https://github.com/](https://github.com/)). It is based on
    the Git version-control system ([https://en.wikipedia.org/wiki/Git](https://en.wikipedia.org/wiki/Git)). Other
    popular source control systems include CVS, ClearCase, Subversion, and Mercurial,
    to name a few.
  prefs: []
  type: TYPE_NORMAL
- en: An overview and guidance on such systems are outside of the scope of this book.
    We mention because they are being an important part of the development environment.
  prefs: []
  type: TYPE_NORMAL
- en: Code and test execution
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Using an IDE, you can even execute an application, or its tests. To accomplish
    that, IDE first compiles the code using the `javac` tool, then executes it using
    JVM (the `java` tool).
  prefs: []
  type: TYPE_NORMAL
- en: An IDE also allows us to run an application in a debug mode, when the execution
    can be paused at any statement. It allows the programmer to examine the current
    values of the variables, which is often the most efficient way to find dreaded
    runtime errors. Such errors usually are caused by unexpected intermediate values
    assigned to a variable during execution. The debug mode allows us to walk along
    the offensive execution path slowly, and see the conditions that cause the problem.
  prefs: []
  type: TYPE_NORMAL
- en: One of the most helpful aspects of IDE functionality is its ability to maintain
    the classpath or manage dependencies, which we are going to discuss in the next
    section.
  prefs: []
  type: TYPE_NORMAL
- en: Setting the classpath
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In order for `javac` to compile the code and for `java` to execute it, they
    need to know the location of the files that compose the application. In [Chapter
    2](4eaa4fe6-9564-40ba-b799-7fdc2abb5039.xhtml), *Java Language Basics*, while
    explaining the format of the `javac` and `java` commands, we described how the `-classpath` option
    allows you to list all of the classes and third-party libraries your application
    is using (or, in other words, depends on). Now, we will talk about setting this
    list.
  prefs: []
  type: TYPE_NORMAL
- en: Manual setting
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'There are two ways to set it:'
  prefs: []
  type: TYPE_NORMAL
- en: Via the `-classpath` command-line option
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Via the `CLASSPATH` environment variable
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'We will describe how to use the `-classpath` option first. It has the same
    format in the `javac` and `java` commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '```java'
  prefs: []
  type: TYPE_NORMAL
- en: -classpath dir1;dir2\*;dir3\alibrary.jar  (for Windows)
  prefs: []
  type: TYPE_NORMAL
- en: javac -classpath dir1:dir2/*:dir3/alibrary.jar   (for Lunix)
  prefs: []
  type: TYPE_NORMAL
- en: '```'
  prefs: []
  type: TYPE_NORMAL
- en: In the preceding example, `dir1`, `dir2`, and `dir3` are folders that contain
    the files of the application and the third-party `.jar` files the application
    depends on. Each can include a path to the directory, too. The path can be absolute
    or relative to the current location where you run this command.
  prefs: []
  type: TYPE_NORMAL
- en: If a folder does not contain `.jar` files (it has only `.class` files, for example),
    it is enough to have only the folder name listed. Both tools—`javac` and `java`—will
    look inside the folder when searching for a particular file. A `dir1` folder provides
    such an example.
  prefs: []
  type: TYPE_NORMAL
- en: 'If a folder contains `.jar` files (with `.class` files inside), then you can
    do one of two things:'
  prefs: []
  type: TYPE_NORMAL
- en: Specify a wildcard, `*`, so that all the `.jar` files in that folder will be
    searched for a requested `.class` file (the preceding `dir2` folder is such an
    example)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: List each `.jar` file separately (the `alibrary.jar` file stored in the `dir3` folder
    is such an example)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `CLASSPATH` environment variable serves the same purpose as the `-classpath` command
    option. The format of the list of file locations, specified as a value of the `CLASSPATH`
    variable, is the same as the list set with the `-classpath` option described earlier.  If
    you use `CLASSPATH`, you can run the `javac` and `java` commands without the `-classpath` option. If
    you use both, then the value of `CLASSPATH` is ignored.
  prefs: []
  type: TYPE_NORMAL
- en: To see the current value of the `CLASSPATH` variable, open a Command Prompt
    or Terminal and type `echo %CLASSPATH%` for Windows OS or `echo $CLASSPATH` for
    Linux. Chances are you will get back nothing, which means that the `CLASSPATH` variable
    is not used on your computer. You can assign a value to it using the `set` command.
  prefs: []
  type: TYPE_NORMAL
- en: 'It is possible to include the `CLASSPATH` value with the `-classpath` option:'
  prefs: []
  type: TYPE_NORMAL
- en: '```java'
  prefs: []
  type: TYPE_NORMAL
- en: -classpath %CLASSPATH%;dir1;dir2\*;dir3\alibrary.jar (for Windows)
  prefs: []
  type: TYPE_NORMAL
- en: -classpath $CLASSPATH:dir1:dir2/*:dir3/alibrary.jar (for Lunix)
  prefs: []
  type: TYPE_NORMAL
- en: '```'
  prefs: []
  type: TYPE_NORMAL
- en: Notice that the `javac` and `java` tools are part of JDK, so they know where
    to find the Java standard libraries coming with JDK, and there is no need to specify
    the standard libraries' `.jar` files on the classpath.
  prefs: []
  type: TYPE_NORMAL
- en: An Oracle tutorial for how to set a classpath is provided at  [https://docs.oracle.com/javase/tutorial/essential/environment/paths.html](https://docs.oracle.com/javase/tutorial/essential/environment/paths.html).
  prefs: []
  type: TYPE_NORMAL
- en: Searching on the classpath
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Whether `-classpath` or `CLASSPATH` is used, the classpath value presents the
    list of `.class` and `.jar` files. The `javac` and `java` tools always search
    the list from left to right. If the same `.class` file is listed several times
    (inside several folders or `.jar` files, for example), then only its first copy
    will be found. If several versions of the same library are included in the classpath,
    it may cause a problem. For example, a newer version of a library might never
    be found if it is listed in the classpath after the older version.
  prefs: []
  type: TYPE_NORMAL
- en: Also, the libraries themselves can depend on other `.jar` files and their particular
    versions. Two different libraries may require the same `.jar` file, but of different
    versions.
  prefs: []
  type: TYPE_NORMAL
- en: As you can see, with many files listed on the classpath, their management can
    quickly become a full-time job.  The good news is that you probably don't need
    to worry about it, because IDE will set the classpath for you.
  prefs: []
  type: TYPE_NORMAL
- en: IDE sets the classpath automatically
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As we already mentioned, the `javac` and `java` tools know where to find the
    standard libraries that come with the JDK installation. If your code uses other
    libraries, you need to tell IDE which libraries you need, so IDE can find them
    and set the classpath.
  prefs: []
  type: TYPE_NORMAL
- en: To accomplish that, IDE uses a dependency-managing tool. The most popular dependency-managing
    tools today are Maven and Gradle. Since Maven has been around longer than Gradle,
    all major IDEs have this tool, either built-in or integrated via a plug-in. A
    plug-in is a piece of software that can be added to an application (IDE, in this
    case) to extend its functionality.
  prefs: []
  type: TYPE_NORMAL
- en: Maven has an extensive online repository that stores practically all existing
    libraries and frameworks.  To tell an IDE with a built-in Maven capability which
    third-party libraries your application needs, you have to identify them in the
    file called `pom.xml`. IDE reads what you need from the `pom.xml` file and downloads
    the required libraries from the Maven repository to your computer. Then, IDE can
    list them on the classpath while executing the `javac` or `java` command. We will
    show you how to write `pom.xml` content in [Chapter 4](64574f55-0e95-4eda-9ddb-b05da6c41747.xhtml), *Your
    First Java Project*.
  prefs: []
  type: TYPE_NORMAL
- en: Now is the time to choose your IDE, install it, and configure it. In the next
    section, we will describe the most popular IDEs.
  prefs: []
  type: TYPE_NORMAL
- en: There are many IDEs out there
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are many IDEs available that you can use free of charge: NetBeans, Eclipse,
    IntelliJ IDEA, BlueJ, DrJava, JDeveloper, JCreator, jEdit, JSource, jCRASP, and
    jEdit, to name a few. Each of them has followers who are convinced that their
    choice is the best, so we are not going to argue. It is a matter of preference,
    after all. We will concentrate on the three most popular ones—NetBeans, Eclipse,
    and IntelliJ IDEA. We will use the IntelliJ IDEA free Community Edition for our
    demonstrations.
  prefs: []
  type: TYPE_NORMAL
- en: We recommend reading the documentation about these and other IDEs, and even
    trying them out, before making your final choice. For your initial research, you
    can use the Wikipedia article at [https://en.wikipedia.org/wiki/Comparison_of_integrated_development_environments#Java](https://en.wikipedia.org/wiki/Comparison_of_integrated_development_environments#Java),
    which has a table comparing many modern IDEs.
  prefs: []
  type: TYPE_NORMAL
- en: NetBeans
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: NetBeans was first created in 1996 as a Java IDE student project at Charles
    University in Prague. In 1997, a company was created around the project, and produced
    commercial versions of the NetBeans IDE. In 1999, it was acquired by Sun Microsystems.
    In 2010, after the acquisition of Sun Microsystems by Oracle, NetBeans became
    part of the open source Java products produced by Oracle, with a contribution
    from a large community of developers.
  prefs: []
  type: TYPE_NORMAL
- en: NetBeans IDE became the official IDE for Java 8 and could be downloaded together
    with JDK 8 in the same bundle; see [http://www.oracle.com/technetwork/java/javase/downloads/jdk-netbeans-jsp-142931.html](http://www.oracle.com/technetwork/java/javase/downloads/jdk-netbeans-jsp-142931.html).
  prefs: []
  type: TYPE_NORMAL
- en: In 2016, Oracle decided to donate the NetBeans project to the Apache Software
    Foundation, stating that it was *opening up the NetBeans governance model to give
    NetBeans constituents a greater voice in the project's direction and future success
    through the upcoming release of Java 9 and NetBeans 9 and beyond*.
  prefs: []
  type: TYPE_NORMAL
- en: There are NetBeans IDE versions for Windows, Linux, Mac, and Oracle Solaris.
    It enables coding, compiling, analysis, running, testing, profiling, debugging,
    and deployment of all Java application types – Java SE, JavaFX, Java ME, web,
    EJB, and mobile applications. Besides Java, it supports multiple programming languages
    in particular, C/C++, XML, HTML5, PHP, Groovy, Javadoc, JavaScript, and JSP. Because
    the editor is extensible, it is possible to plug in support for many other languages.
  prefs: []
  type: TYPE_NORMAL
- en: It also includes an Ant-based project system, support for Maven, refactoring,
    version control (supports CVS, Subversion, Git, Mercurial, and ClearCase), and
    can be used for working with cloud applications.
  prefs: []
  type: TYPE_NORMAL
- en: Eclipse
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Eclipse is the most widely used Java IDE. It has an extensive plug-in system
    that grows all the time, so it is not possible to list all its features. Its primary
    use is for developing Java applications, but plugins also allow us to write code
    in Ada, ABAP, C, C++, C#, COBOL, D, Fortran, Haskell, JavaScript, Julia, Lasso,
    Lua, NATURAL, Perl, PHP, Prolog, Python, R, Ruby, Rust, Scala, Clojure, Groovy,
    Scheme, and Erlang. Development environments include the Eclipse **Java development
    tools** (**JDT**) for Java and Scala, Eclipse CDT for C/C++, and Eclipse PDT for
    PHP, among others.
  prefs: []
  type: TYPE_NORMAL
- en: 'The name *Eclipse* was invented in reference to the competition with Microsoft
    Visual Studio, which Eclipse was to eclipse. The subsequent versions were named
    after the moons of Jupiter—Callisto, Europa, and Ganymede. A version named after
    Galileo—the discoverer of those moons—followed. Then, two sun-themed names—Helios
    of Greek mythology, and Indigo, one of the seven colors of the rainbow (which
    is produced by the sun)—were used. The version after that, Juno, has a triple
    meaning: a Roman mythological figure, an asteroid, and a spacecraft to Jupiter.
    Kepler, Luna, and Mars continued the astronomy theme, and then Neon and Oxygen
    came from the names of chemical elements. Photon represents a return to sun-themed
    names.'
  prefs: []
  type: TYPE_NORMAL
- en: Eclipse also enables coding, compiling, analysis, running, testing, profiling,
    debugging, and deployment of all Java application types and all major platforms.
    It also supports Maven, refactoring, major version control systems, and cloud
    applications.
  prefs: []
  type: TYPE_NORMAL
- en: 'The huge variety of available plugins may be a challenge for a novice, and,
    occasionally, even to a more experienced user, for two reasons:'
  prefs: []
  type: TYPE_NORMAL
- en: There is usually more than one way to add the same functionality to the IDE,
    by combining similar plug-ins of different authors
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Some plug-ins are incompatible, which may create a difficult-to-solve problem
    and force us to rebuild the IDE installation again, especially when a new release
    comes out
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: IntelliJ IDEA
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The IntelliJ IDEA paid version is definitely the best Java IDE on the market
    today. But even the free Community Edition has a strong position among the three
    leading IDEs. In the following Wikipedia article, you can see a table that nicely
    summarizes the difference between paid Ultimate and free Community Editions: [https://en.wikipedia.org/wiki/IntelliJ_IDEA](https://en.wikipedia.org/wiki/IntelliJ_IDEA)'
  prefs: []
  type: TYPE_NORMAL
- en: It was developed by the JetBrains (formerly known as IntelliJ) software company,
    which has around 700 employees (as of 2017) in six offices in Prague, Saint Petersburg,
    Moscow, Munich, Boston, and Novosibirsk. The first version, released in January
    2001, was one of the first available Java IDEs with integrated advanced code-navigation
    and code-refactoring capabilities. Since then, this IDE has been known for its
    *Deep insight into your code*, as the authors state when describing the product
    features on their website at [https://www.jetbrains.com/idea/features](https://www.jetbrains.com/idea/features).
  prefs: []
  type: TYPE_NORMAL
- en: Like the other two IDEs described earlier, it enables coding, compiling, analysis,
    running, testing, profiling, debugging, and the deployment of all Java application
    types and all major platforms. Like the two previous IDEs, it also supports Ant,
    Maven, and Gradle, as well as refactoring, major version-control systems, and
    cloud applications.
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, we will walk you through the installation and configuration
    of IntelliJ IDEA Community Edition.
  prefs: []
  type: TYPE_NORMAL
- en: Installing and configuring IntelliJ IDEA
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The following steps and screenshots will demonstrate the IntelliJ IDEA Community
    Edition installation on Windows, though the installation is not much different
    for Linux or macOS.
  prefs: []
  type: TYPE_NORMAL
- en: Downloading and installing
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'You can download the IntelliJ IDEA Community Edition installer from [https://www.jetbrains.com/idea/download](https://www.jetbrains.com/idea/download). After
    the installer has downloaded, launch it by double-clicking on it or right-clicking
    and selecting the Open option from the menu. Then, walk through the following
    screens, accepting all of the default settings by clicking the Next> button, unless
    you need to do something different. Here is the first screen:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/083f337d-e31d-4c5f-8ef3-3b47ed77ae82.png)'
  prefs: []
  type: TYPE_IMG
- en: 'You can use the Browse... button and select any location  for a Destination
    Folder, or just click Next> and accept the default location on the following screen:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/73637610-0090-44dc-b563-5ac944c7bbf5.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Check 64-bit launcher (unless your computer supports 32-bits only) and `.java` on
    the following screen:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/c37f9a10-2e34-462e-9eee-cfb193def702.png)'
  prefs: []
  type: TYPE_IMG
- en: We will assume that you have JDK installed already, so there is no need to check
    Download and install JRE on the previous screenshot. If you have not installed
    JDK yet, you can check Download and install JRE, or install JDK by following the
    steps described in [Chapter 1](40b2d539-5f9c-4923-87ac-803c281a5ba7.xhtml), *Java
    Virtua**l Machine (JVM) on Your Computer*.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following screen allows you to customize the entry in your start menu,
    or you can just accept the default options by clicking on the Install button:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/4e10a0e1-d7b3-4424-ab4a-1292c86330f2.png)'
  prefs: []
  type: TYPE_IMG
- en: 'It will take the installer some time to finish the installation. The progress
    bar on the following screen will give you an idea of how much time is left for
    the process to complete:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/3f37f576-ed3a-4f44-a4ea-b12ff990e562.png)'
  prefs: []
  type: TYPE_IMG
- en: After the installation has complete, and the Next> button becomes clickable,
    use it to get to the next screen.
  prefs: []
  type: TYPE_NORMAL
- en: 'Check the Run IntelliJ IDEA box on the next screen, and click the Finish button:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/6200e762-07d4-4d8e-ba4a-ef78f523136e.png)'
  prefs: []
  type: TYPE_IMG
- en: The installation is completed and we can now start configuring the IDE.
  prefs: []
  type: TYPE_NORMAL
- en: Configuring IntelliJ IDEA
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'When IntelliJ IDEA starts for the very first time, it asks you about the settings
    you might have from the previous IDE version:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/bcb7a32a-81d8-4270-a2df-f313c8a2ca1a.png)'
  prefs: []
  type: TYPE_IMG
- en: Since it is your first IntelliJ IDEA installation, click Do not import settings.
  prefs: []
  type: TYPE_NORMAL
- en: The next screen or two also show only once – at the first launch of the newly
    installed IDE. They will ask whether you accept the JetBrains privacy policy,
    and whether you would like to pay for the license or prefer to continue using
    the free Community Edition or free trial (this depends on the particular download
    you get). Answer the questions whichever way you prefer, and, if you accept the
    privacy policy, the following screen will ask you to chose a theme—white (*IntelliJ*)
    or dark (*Darcula*).
  prefs: []
  type: TYPE_NORMAL
- en: 'We have chosen the dark theme, as you will see on our demo screens. But you
    can select whatever you prefer and then, change it later, if you so desire:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00e514db-230d-43fa-98e8-951346c40cec.png)'
  prefs: []
  type: TYPE_IMG
- en: 'On the above screen, at the bottom, you can see two buttons:  Skip Remaining
    and Set Deafults and Next: Default plugins. If you click Skip Remaining and Set
    Defaults, you will skip the chance to configure some settings now, but you can
    do it later. For this demo, we will click the Next: Default plugins button and
    then show you how to revisit the settings later.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is the screen with the default settings options:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/8505312b-c990-423c-b0f9-1bd306a96acb.png)'
  prefs: []
  type: TYPE_IMG
- en: 'You can click any Customize... link on the preceding screen and see the possible
    options, then return back. We will use only three of them—Build Tools, Version
    Control, and Test Tools. We will start with Build Tools by clicking Customize...:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/eb0e3b40-3b53-45e3-b1ec-0aae96cc54fe.png)'
  prefs: []
  type: TYPE_IMG
- en: We are going to leave the Maven option checked, but the presence of other checks
    does not hurt , and can even help, if you would like to explore the related functionality
    later.
  prefs: []
  type: TYPE_NORMAL
- en: 'Click Save Changes and Go Back, then click the Customize... link under the
    Version Controls symbol:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/10e08611-46bc-44d6-8cb1-a998cc75a008.png)'
  prefs: []
  type: TYPE_IMG
- en: We will talk a bit about source control tools (or version control tool, as they
    are also called) later, but full treatment of this subject is outside the scope
    of this book. On the preceding screen, you can check the box with the version-control
    system you know you are going to use. Otherwise, leave all of the boxes checked,
    so the version-control system will be integrated automatically, as soon as you
    open a code-source tree checked out from one of the listed tools.
  prefs: []
  type: TYPE_NORMAL
- en: 'Click Save Changes and Go Back, then click the Customize... link under the
    Test Tools symbol:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/d7b8cedd-969c-49ca-b0b4-fea988a7f917.png)'
  prefs: []
  type: TYPE_IMG
- en: On the preceding screen, we are going to leave only the JUnit checkbox checked,
    because we would like to have our demo configuration clear of unnecessary distractions.
    But you can leave everything checked. It does not hurt to have other options available.
    Besides, you may decide to use other options in the future.
  prefs: []
  type: TYPE_NORMAL
- en: As you have seen, in principle, we did not need to change any of the default
    settings. We have only done it to show you the available capabilities.
  prefs: []
  type: TYPE_NORMAL
- en: 'Click Save Changes and Go Back, then click the Next: Featured plugins button,
    and then the Start using IntelliJ IDEA button.'
  prefs: []
  type: TYPE_NORMAL
- en: If you have not configured IDE at the installation time or did something different
    and would like to change the configuration, you can do so later.
  prefs: []
  type: TYPE_NORMAL
- en: We will explain how to access the configuration settings in IntelliJ IDEA after
    installation and provide the corresponding screenshots in [Chapter 4](64574f55-0e95-4eda-9ddb-b05da6c41747.xhtml),
    *Your First Java Project*.
  prefs: []
  type: TYPE_NORMAL
- en: Exercise – Installing NetBeans IDE
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Download and install NetBeans IDE.
  prefs: []
  type: TYPE_NORMAL
- en: Answer
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As of the time of writing, the page for downloading the latest version of NetBeans
    is [https://netbeans.org/features/index.html](https://netbeans.org/features/index.html).
  prefs: []
  type: TYPE_NORMAL
- en: After the download is complete, launch the installer. You might get a message
    that advises you to use the `--javahome` option when launching the installer.
    Find the corresponding installation instructions, and do that. The NetBeans version
    expected a certain version of Java, and a mismatch may cause installation or running
    problems.
  prefs: []
  type: TYPE_NORMAL
- en: If the installer launches without warning, you can just follow the wizard until
    the screen states Installation completed successfully and has the Finish button.
    Click the Finish button, then run NetBeans. You are ready to start writing Java
    code using the NetBeans IDE. After reading [Chapter 4](64574f55-0e95-4eda-9ddb-b05da6c41747.xhtml),
    *Your First Java Project*, try to create a similar project in NetBeans, and see
    how you like it compared to IntelliJ IDEA.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now you know what the development environment is and what tools you need on
    your computer to start coding. You have learned how to configure an IDE and what
    it does for you behind the scenes. You now have an idea of what to look for when
    selecting your IDE.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, you will start using it to write and compile code and test
    for it. You will learn what a Java project is, how to create and configure one,
    and how to execute your code and test it without leaving your IDE, which means
    that you will become a Java programmer.
  prefs: []
  type: TYPE_NORMAL
