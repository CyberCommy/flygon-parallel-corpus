- en: Preface
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Kernel device driver development is one of the most important parts of a complex
    operating system, which is what Linux is. Device drivers are very important for
    developers that use a computer as a monitoring or administrative machine in real
    environments such as industry, domestic, or medical applications. In fact, even
    if Linux is now widely supported everywhere, new peripherals are created every
    day, and these devices need drivers to be efficiently used on a GNU/Linux machine.
  prefs: []
  type: TYPE_NORMAL
- en: This book will present the implementation of a complete character driver (usually
    called a *char driver*) by presenting all the necessary techniques to exchange
    data between the kernel and userspace, to implement process synchronization with
    the peripheral's interrupts, to get access to I/O memory mapped to (internal or
    external) devices, and to efficiently manage the time within the kernel.
  prefs: []
  type: TYPE_NORMAL
- en: All code presented in this book is compatible with Linux 4.18+ releases (that
    is, as far as the latest 5.x kernels). The code can be tested on the Marvell ESPRESSObin,
    which has an onboard ARM 64-bit CPU, but any other similar GNU/Linux embedded
    device can be used. In this manner, the readers can verify whether what they have
    read has been correctly understood.
  prefs: []
  type: TYPE_NORMAL
- en: Who this book is for
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If you want to learn about how to implement a complete character driver on a
    Linux machine, or to find out how several kernel mechanisms work (such as workqueues,
    completions, and kernel timers, among others) in order to better understand how
    a generic driver works, then this book is for you.
  prefs: []
  type: TYPE_NORMAL
- en: If you need to know how to write a custom kernel module and how to pass parameters
    to it, or how to read and better manage kernel messages, or even how to add custom
    code to the kernel sources, then this book has been written with you in mind.
  prefs: []
  type: TYPE_NORMAL
- en: If you need to better understand a device tree, how to modify it, or even how
    to write a new device tree in order to meet your requirements and learn how to
    manage your new device driver, then you will also benefit from this book.
  prefs: []
  type: TYPE_NORMAL
- en: What this book covers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '[Chapter 1](2739e129-3c1a-4c98-ba9a-9c17ae4c09db.xhtml), *Installing the Development
    System*, presents how to install a complete development system based on Ubuntu
    18.04.1 LTS, along with a complete testing system based on the Marvell ESPRESSObin
    board. The chapter will also present how to use the serial console and how to
    recompile the kernel from scratch, and will teach you some tricks for performing
    cross-compilations and software emulations.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 2](c044f5b1-bd3a-4ac7-bc14-421acd9448ed.xhtml), *A Peek Inside the
    Kernel*, discusses how to create a custom kernel module, and how to read and manage
    kernel messages. Both of these skills are very useful for helping the developer
    to understand what is happening inside the kernel.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 3](1625d420-d3d6-4655-9f08-050a8bb99c90.xhtml), *Working with Char
    Drivers*, examines how to implement a really simple char driver, and how to exchange
    data between it and the userspace. The chapter ends by proposing some examples
    in order to underline the *Everything is a file* abstraction against a device
    driver.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 4](5f22a69e-e8b7-402e-8e67-72938d00c914.xhtml), *Using the Device
    Tree*, presents the device tree. The reader will learn how to read and understand
    it, how to write a custom device tree and then how to compile it in order to get
    a binary form that can be passed to the kernel. The chapter ends with a section
    about downloading firmware (within a peripheral) and how to configure the CPU''s
    pins by using a Pin MUX tool. Examples are provided using the Armada 3720, i.Mx
    7Dual, and SAMA5D3 CPUs.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 5](cbd6e9f7-f07c-46b8-b751-ece44101ca8b.xhtml), *Managing Interrupts
    and Concurrency*, looks at how to manage interrupts and concurrency within the
    Linux kernel. It shows how to install an interrupt handler, how to defer a job
    to a later time, and how to manage kernel timers. At the end of the chapter, the
    reader will learn how to wait for an event (such as waiting for some data to be
    read) and how to protect their data against race conditions.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 6](ed0f6f71-13aa-413b-ac84-b4e833caa071.xhtml), *Miscellaneous Kernel
    Internals*, discusses how to dynamically allocate memory inside the kernel, and
    how to use several helper functions that are useful for several everyday programming
    actions (such as strings manipulations, lists, and hash tables manipulations).
    The chapter will also introduce how to do I/O memory access, and how to safely
    spend time within the kernel in order to create well-defined busy loop delays.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 7](3a9fe19d-0ba6-4959-bc71-493d9f499cc4.xhtml), *Advanced Char Driver
    Operations*, presents all the advanced operations that are available on character
    drivers: `ioctl()`, `mmap()`, `lseek()`, the `poll()`/`select()` system calls
    implementation, and asynchronous I/O via the `SIGIO` signal.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Appendix A](716e2055-501c-4225-b27b-2e9f0995851a.xhtml), *Additional Information:
    Working with Char Drivers*, This contains additional information on chapter 3.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Appendix B](fdfcddc8-11dc-4e60-8653-a3fd8970d70d.xhtml), *Additional Information:
    Using the Device Tree*, This contains additional information on chapter 4.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Appendix C](146adc5b-0dda-4639-a731-36b5c208f46a.xhtml), *Additional Information:
    Managing Interrupts and Concurrency*, This contains additional information on
    chapter 5.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Appendix D](800dbd55-b60e-4f85-9a04-2405d458264f.xhtml), *Additional Information:
    Miscellaneous Kernel Internals*, This contains additional information on chapter
    6.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Appendix E](6c267b04-3901-46bf-a6f1-dde61cacf452.xhtml), *Additional Information:
    Advanced Char Driver Operations*, This contains additional information on chapter
    7.'
  prefs: []
  type: TYPE_NORMAL
- en: To get the most out of this book
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You should have a little knowledge of a non-graphical text editor such as `vi`
    , `emacs`, or `nano`. You can't connect an LCD display, a keyboard, and a mouse
    directly to the embedded kit to carry out little modifications to text files,
    so you should have a working knowledge of these tools to do such modifications
    remotely.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You should know how to manage an Ubuntu system, or at least a generic GNU/Linux-based
    one. My host PC is running on Ubuntu 18.04.1 LTS, but you can use also a newer
    Ubuntu LTS release, or a Debian-based system with a few modifications. You can
    also use another GNU/Linux distribution, but this will require a little effort
    from you, mainly with regard to the installation of cross-compile tools, libraries
    dependencies, and package management.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Foreign systems, such as Windows, macOS, and others, are not covered by this
    book due the fact that you should not use low-tech systems to develop code for
    a high-tech system!
  prefs: []
  type: TYPE_NORMAL
- en: Working knowledge of the C programming language, how a C compiler works, and
    how to manage a makefile are all mandatory requirements.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Download the example code files
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You can download the example code files for this book from your account at [www.packt.com](http://www.packt.com).
    If you purchased this book elsewhere, you can visit [www.packt.com/support](http://www.packt.com/support)
    and register to have the files emailed directly to you.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can download the code files by following these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Log in or register at [www.packt.com](http://www.packt.com).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the SUPPORT tab.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on Code Downloads & Errata.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter the name of the book in the Search box and follow the onscreen instructions.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Once the file is downloaded, please make sure that you unzip or extract the
    folder using the latest version of:'
  prefs: []
  type: TYPE_NORMAL
- en: WinRAR/7-Zip for Windows
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Zipeg/iZip/UnRarX for Mac
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 7-Zip/PeaZip for Linux
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The code bundle for the book is hosted on GitHub at [https://github.com/giometti/linux_device_driver_development_cookbook](https://github.com/giometti/linux_device_driver_development_cookbook).
    In case there's an update to the code, it will be updated on the existing GitHub
    repository.
  prefs: []
  type: TYPE_NORMAL
- en: The code bundle for the book is also hosted on GitHub at [https://github.com/PacktPublishing/Linux-Device-Driver-Development-Cookbook](https://github.com/PacktPublishing/Linux-Device-Driver-Development-Cookbook). In
    case there's an update to the code, it will be updated on the existing GitHub
    repository.
  prefs: []
  type: TYPE_NORMAL
- en: We also have other code bundles from our rich catalog of books and videos available
    at **[https://github.com/PacktPublishing/](https://github.com/PacktPublishing/)**.
    Check them out!
  prefs: []
  type: TYPE_NORMAL
- en: Download the color images
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We also provide a PDF file that has color images of the screenshots/diagrams
    used in this book. You can download it here: [https://www.packtpub.com/sites/default/files/downloads/9781838558802_ColorImages.pdf](https://www.packtpub.com/sites/default/files/downloads/9781838558802_ColorImages.pdf).'
  prefs: []
  type: TYPE_NORMAL
- en: Conventions used
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are a number of text conventions used throughout this book.
  prefs: []
  type: TYPE_NORMAL
- en: 'Code words in text folder names, filenames, file extensions, pathnames, dummy
    URLs and user input are shown as follows: "To get the preceding kernel messages,
    we can use both the `dmesg` and `tail -f /var/log/kern.log` commands."'
  prefs: []
  type: TYPE_NORMAL
- en: 'A block of code is set as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'You should note that most code in this book has 4-space indentation, while
    the example code you can find in the files provided with this book on the GitHub
    or Packt sites uses 8-space indentation. So, the preceding code will look as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Obviously, they are perfectly equivalent in practice!
  prefs: []
  type: TYPE_NORMAL
- en: 'Any command-line input or output on the embedded kit used in this book is presented
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Commands are in bold, while their output is in normal text. You should also
    notice that the prompt string has been removed due to space constraints; in fact,
    on your Terminal, the complete prompt should look like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Note also that due to space constraints in the book, you may encounter very
    long command lines as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Otherwise, I have had to break the command line. However, in some special cases,
    you can find broken output lines (especially on kernel messages) as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Unluckily, these lines cannot easily be reproduced in a printed book, but you
    should consider them as a single line.
  prefs: []
  type: TYPE_NORMAL
- en: 'Any command-line input or output given on my host computer as a non-privileged
    user is written as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'When I need to give a command as a privileged user (root) on my host computer,
    the command-line input or output is then written as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'You should note that all privileged commands can be executed by a normal user,
    too, by using the `sudo` command in the following format:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'So, the preceding command can be executed by a normal user as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Kernel and logging messages
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'On several GNU/Linux distribution, kernel messages have this usual form:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'This is a quite a long line for this book, so that''s why we drop the characters
    from the start of each line up to the point where the real information begins.
    So, in the preceding example, the lines output will be reported as follow:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: However, as already said, if the line is still too long, it will be broken anyway.
  prefs: []
  type: TYPE_NORMAL
- en: 'Long outputs, or repeated or less important lines in the Terminal, are dropped
    by replacing them with three dots, `...`, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: When the three dots are at the end of a line, it means that the output continues,
    but I decided cut it for space reasons.
  prefs: []
  type: TYPE_NORMAL
- en: File modifications
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When you should modify a text file, I'm going to use the *unified context diff*
    format since this is a very efficient and compact way to represent a text modification.
    This format can be obtained by using the `diff` command with the `-u` option argument,
    or by using the `git diff` command within a `git` repository.
  prefs: []
  type: TYPE_NORMAL
- en: 'As a simple example, let''s consider the following text in `file1.old` :'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Suppose we have to modify the third line, as highlighted in the following snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'You can easily understand that reporting the whole file  each time for a simple
    modification is unnecessary and space-consuming; however, by using the *unified
    context diff* format, the preceding modification can be written as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: Now, the modification is very clear and written in a compact form! It starts
    with a two-line header, where the original file is preceded by `---` and the new
    file is preceded by `+++`. Then, it follows one or more change hunks that contain
    the line differences in the file. The preceding example has just one hunk where
    the unchanged lines are preceded by a space character, while the lines to be added
    are preceded by a `+` character and the lines to be removed are preceded by a
    `-` character.
  prefs: []
  type: TYPE_NORMAL
- en: Nonetheless, for space reasons, most patches reproduced in this book have reduced
    indentation in order to fit the width of printed pages; however, they are still
    perfectly readable. For the full patch, you should refer to the provided files
    on GitHub or the Packt site.
  prefs: []
  type: TYPE_NORMAL
- en: Serial and network connections
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this book, I''m mainly going to use two different kinds of connections to
    interact with the embedded kit: the serial console, and an SSH terminal and Ethernet
    connection.'
  prefs: []
  type: TYPE_NORMAL
- en: The serial console, implemented over a USB connection, is mainly used to manage
    the system from the command line. It's largely used for monitoring the system,
    and especially for taking control of kernel messages.
  prefs: []
  type: TYPE_NORMAL
- en: An SSH terminal is quite similar to the serial console, even if is not exactly
    the same (for example, kernel messages do not automatically appear on a Terminal),
    but it can be used in the same manner as a serial console to give commands and
    edit files from the command line.
  prefs: []
  type: TYPE_NORMAL
- en: In the chapters, I'm going to use a Terminal on the serial console or over an
    SSH connection  to give the most of the commands and configuration settings needed
    to implement all the prototypes explained in this book.
  prefs: []
  type: TYPE_NORMAL
- en: 'To get access to the serial console from your host PC, you can use the `minicon`
    command, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'However, in [Chapter 1](2739e129-3c1a-4c98-ba9a-9c17ae4c09db.xhtml) , *Installing
    the Development System*, these aspects are explained and you should not worry
    about them. Note also that on some systems, you may need root privileges to get
    access to the `/dev/ttyUSB0` device. In this case, you can fix this issue or by
    using the `sudo` command or, better, by properly adding your system''s user to
    the right group by using the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: Then log out and log back in again, and you should be able to access the serial
    devices without any problem.
  prefs: []
  type: TYPE_NORMAL
- en: To get access to the SSH Terminal, you can use Ethernet connection. It is used
    mainly to download files from the host PC or the internet and can be established
    by connecting an Ethernet cable to the embedded kit's Ethernet port, and then
    configuring the port accordingly to the reader's LAN settings (see all the instructions in [Chapter
    1](2739e129-3c1a-4c98-ba9a-9c17ae4c09db.xhtml) , *Installing the Development System*).
  prefs: []
  type: TYPE_NORMAL
- en: Other conventions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Bold**: Indicates a new term, an important word, or words that you see onscreen.
    For example, words in menus or dialog boxes appear in the text like this. Here
    is an example: "Select System info from the Administration panel."'
  prefs: []
  type: TYPE_NORMAL
- en: Warnings or important notes appear like this.
  prefs: []
  type: TYPE_NORMAL
- en: Tips and tricks appear like this.
  prefs: []
  type: TYPE_NORMAL
- en: Sections
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this book, you will find several headings that appear frequently (*Getting
    ready*, *How to do it...*, *How it works...*, *There's more...*, and *See also*).
  prefs: []
  type: TYPE_NORMAL
- en: 'To give clear instructions on how to complete a recipe, use these sections
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This section tells you what to expect in the recipe and describes how to set
    up any software or any preliminary settings required for the recipe.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This section contains the steps required to follow the recipe.
  prefs: []
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This section usually consists of a detailed explanation of what happened in
    the previous section.
  prefs: []
  type: TYPE_NORMAL
- en: There's more…
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This section consists of additional information about the recipe in order to
    make you more knowledgeable about the recipe.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This section provides helpful links to other useful information for the recipe.
  prefs: []
  type: TYPE_NORMAL
- en: Get in touch
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Feedback from our readers is always welcome.
  prefs: []
  type: TYPE_NORMAL
- en: '**General feedback**: If you have questions about any aspect of this book,
    mention the book title in the subject of your message and email us at `customercare@packtpub.com`.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Errata**: Although we have taken every care to ensure the accuracy of our
    content, mistakes do happen. If you have found a mistake in this book, we would
    be grateful if you would report this to us. Please visit [www.packt.com/submit-errata](http://www.packt.com/submit-errata),
    selecting your book, clicking on the Errata Submission Form link, and entering
    the details.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Piracy**: If you come across any illegal copies of our works in any form
    on the Internet, we would be grateful if you would provide us with the location
    address or website name. Please contact us at `copyright@packt.com` with a link
    to the material.'
  prefs: []
  type: TYPE_NORMAL
- en: '**If you are interested in becoming an author**: If there is a topic that you
    have expertise in and you are interested in either writing or contributing to
    a book, please visit [authors.packtpub.com](http://authors.packtpub.com/).'
  prefs: []
  type: TYPE_NORMAL
- en: Reviews
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Please leave a review. Once you have read and used this book, why not leave
    a review on the site that you purchased it from? Potential readers can then see
    and use your unbiased opinion to make purchase decisions, we at Packt can understand
    what you think about our products, and our authors can see your feedback on their
    book. Thank you!
  prefs: []
  type: TYPE_NORMAL
- en: For more information about Packt, please visit [packt.com](http://www.packt.com/).
  prefs: []
  type: TYPE_NORMAL
