- en: Chapter 7. Hosting HTTP Content via Apache
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Apache** is the most common web server used on the Internet. While there
    are other web servers available, such as Microsoft''s **Internet Information Services**
    (**IIS**), Apache rules the kingdom when it comes to serving web content. Available
    in both Linux and UNIX platforms, Apache enables you to host content and share
    it over your local intranet, as well as the Internet. There are many uses for
    an Apache server, including (but certainly not limited to) hosting a blog or company
    website, or setting up an employee portal for your company.'
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, you''ll learn all about installing and configuring Apache.
    We will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Installing Apache
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Configuring Apache
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding modules
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting up virtual hosts
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installing Apache
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As usual, installing Apache on your system is just a matter of installing the
    proper package from your package manager. On a CentOS system, you can obtain Apache
    by installing the `httpd` package, and on Debian systems with the `apache2` package
    (`yum install httpd` or `apt-get install apache2 respectively`, as root). Once
    you install the package, Apache's daemon is now present with a default set of
    configuration files. You will be able to confirm the existence of the daemon on
    your system with `systemctl`, though the name of the daemon is different depending
    on your distribution.
  prefs: []
  type: TYPE_NORMAL
- en: 'Use the following command on Debian:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Use the following command on CentOS:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'By default, Debian starts and enables the daemon for you. As is typical, CentOS
    makes no assumptions and does neither. You can start and enable the daemon easily
    with the `systemctl` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Once you install and enable Apache, you technically already have a working
    web server on your network. It may not be particularly useful (we haven''t configured
    it yet) but at this point it exists, and it is technically working. Both the CentOS
    and Debian builds of Apache look for web content in the same directory, `/var/www/html`.
    There, Debian creates a sample web page in the form of an `index.html` file, which
    you can view via a web browser on another computer (just point it to the IP address
    of your web server). CentOS, on the other hand, does not create a sample HTML
    page for you. This is easy to rectify; all you should have to do is manually create
    the `/var/www/html/index.html` file with some sample code. It doesn''t need to
    be extravagant; we just want to make sure we have something to test with. For
    example, you could just put the following code in that file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: At this point, you should have Apache installed and its service started. You
    should also have an example `/var/www/html/index.html` file present on your system,
    whether you are using Debian's default or you manually created it on a CentOS
    system. Now, you should be able to browse to your web server and view this page
    via a web browser. If you know the IP address of your webserver, just type that
    in to the address bar in your web browser. You should see the sample page immediately.
    If you're using a web browser on your web server, you should be able to browse
    to the localhost (`http://127.0.0.1` or `http://localhost`) and view the same
    page.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'If you chose CentOS for your web server, the default firewall may get in your
    way if you are trying to browse to it from another machine. Depending on your
    configuration, you may need to allow traffic to your web server through the firewall.
    To do this, execute the following commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Be sure to add port 443 as well, if you plan on hosting a secure site. Just
    use the same `firewall-cmd` as before, but replace 80 with 443.
  prefs: []
  type: TYPE_NORMAL
- en: If for some reason you don't see the default page, make sure that Apache is
    running (remember the `systemctl status` commands I mentioned earlier). If the
    daemon isn't running, you'll likely get a **connection refused** error. Also,
    keep in mind that hardware-based firewalls can prevent access as well.
  prefs: []
  type: TYPE_NORMAL
- en: '![Installing Apache](img/B03919_07_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The default web page served from an unconfigured Apache, running on Debian
  prefs: []
  type: TYPE_NORMAL
- en: Another way of testing whether or not your server is serving web pages is via
    `lynx`, a text-based web browser you can use within a shell. This may be preferred
    in some situations, as it doesn't have the overhead of a graphical web browser
    and is very quick to launch. Once you install the lynx package on your machine,
    you can navigate to your web server from the server itself by executing `lynx
    http://localhost`, or `http://<ip address>` if you are coming from a different
    machine.
  prefs: []
  type: TYPE_NORMAL
- en: '![Installing Apache](img/B03919_07_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Using lynx to test web server functionality
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: To quit `lynx`, press *Q* for quit followed by *Y* for yes.
  prefs: []
  type: TYPE_NORMAL
- en: As I mentioned, both Debian and CentOS look in the same directory for files
    to share via Apache. This directory is `/var/www/html`. In order to create a web
    site, you would place your site's files into this directory. The typical process
    of setting up an Apache server is by installing Apache, then testing whether or
    not it can be reached by other computers on the network, and then finally developing
    your site and placing its files into this folder.
  prefs: []
  type: TYPE_NORMAL
- en: Configuring Apache
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Configuring Apache is done by editing its configuration file, which will be
    located in one of two places, depending on your distribution.
  prefs: []
  type: TYPE_NORMAL
- en: 'Use the following command on CentOS:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Use the following command on Debian:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: The default web document directory, `/var/www/html`, can be changed. While `/var/www/html`
    is fairly standard, there's nothing stopping you from changing it should you decide
    to store your web files elsewhere. If you peruse the configuration file in CentOS,
    you'll see this directory called out within a configuration block that begins
    on line 131\. If you take a look at the configuration file in Debian, you won't
    see this called out at all. Instead, you'll see a directory within `/etc/apache2`
    called `sites-available`. Within the directory, there will be two default files,
    `000-default.conf` and `default-ssl.conf`. Both of these files designate `/var/www/html`
    as the default path, but how they differ is that the `000-default.conf` file designates
    configuration for port 80, while `default-ssl.conf` is responsible for the configuration
    on port 443\. As you probably know, port 80 references standard HTTP traffic,
    while port 443 corresponds to secure traffic. So essentially, each type of traffic
    has its own configuration file on Debian systems.
  prefs: []
  type: TYPE_NORMAL
- en: In all those cases, the **document root** is being set to `/var/www/html`. If
    you'd like to change that to a different directory, you would change the code
    to point to the new directory. For example, if you wanted to change the path to
    something like `/srv/html`, there are a few changes you would need to make to
    the file.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, look for the following line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Change it to point to the new directory:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'On my test systems, I found the `DocumentRoot` callout in the following configuration
    file on Debian:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'On CentOS, I found that on line 119 in the default configuration file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'After you change that, we have to set our options for the new directory. On
    Debian, we need to make these changes in the following file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'On CentOS, we need to make these changes in the following file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Open up one of those files, depending on which distribution you''re using.
    The code we need to change looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Change the following accordingly:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: There may be some comments intermixed with the code shown in the previous example,
    but the basic idea is the same. Find the line that starts with `<Directory "/var/www/html">`
    and ensure the uncommented code within that block matches the example. As long
    as you do that, you should be fine.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, it probably goes without saying, but to save you a headache you should
    make sure that you have set the permissions to `/srv/html` such that the directory
    and contents are readable by everyone. Also, ensure you created or copied an example
    HTML file (such as `index.html`) into this directory. Once you restart Apache,
    you should be able to serve web content from this new directory.
  prefs: []
  type: TYPE_NORMAL
- en: 'In addition to setting up the document root, the Apache configuration file
    also allows you to configure a few very important security settings as well. For
    example, access to the entirety of the server''s file system is disabled by default.
    This is a good thing. The following code is an example taken from a CentOS system,
    and it is responsible for preventing filesystem-wide access. The code is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Remotely viewing the `.htaccess` files are also disabled by default with the
    following configuration block:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'Other options, such as the default location of Apache''s log files, can also
    be set. By default, the following default line of configuration directs the log
    files to /`etc/httpd/logs`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: However, this may be misleading, as the `/etc/httpd/logs` directory on CentOS
    systems is actually a symbolic link to `/var/log/httpd`, which is where you would
    actually find the log files should you need to view them. By default, the logging
    is set to `warn`, and this can also be changed within the Apache configuration
    file and set to any one of `debug`, `info`, `notice`, `warn`, `error`, and `crit`.
  prefs: []
  type: TYPE_NORMAL
- en: 'It''s important to note that for any change you make to Apache, you will need
    to reload or restart the daemon. If you restart the daemon, it will shut down
    Apache and start it back up again. Reload simply causes Apache to reread its configuration
    file. In most cases, reload is the better option. By doing this, you can apply
    new configuration without disrupting access to your website. As with most systemd
    units, Apache uses the following commands to manage the running state of the daemon:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Start the Apache daemon with the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'Stop the Apache daemon with the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'Enable the Apache daemon at boot time with the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'Reload the Apache daemon while attempting to maintain its running state:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'Restart the Apache daemon with the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: If you're using CentOS, replace `apache2` with `httpd` in each case. Now that
    you understand how Apache is installed and configured, we can move on to using
    modules.
  prefs: []
  type: TYPE_NORMAL
- en: Adding modules
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As useful as Apache is out of the box, some functionality you'll likely require
    are not built in. Apache uses **modules** to extend its feature set. Examples
    of this may include installing the `php5` module to enable your site to use PHP,
    or perhaps the Python module if you develop in that language. Once a module is
    installed and activated, the features of that module will then become available
    to you.
  prefs: []
  type: TYPE_NORMAL
- en: The implementation of Apache between CentOS and Debian is different, and the
    ways in which modules are added between them is also different. In fact, Debian
    even includes its very own command for enabling and disabling modules, which is
    completely exclusive to Debian systems. These commands are `a2enmod` and `a2dismod`.
  prefs: []
  type: TYPE_NORMAL
- en: To work through the typical process of enabling a module in Debian, we can enable
    the PHP module on our server. I'll also detail this process in CentOS, but as
    I mentioned, this process is completely different between the two.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, locate a package that contains the module you want. If you don''t know
    the exact name of the package to install, you can print a list of available Apache
    modules to your terminal with the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'By default, `aptitude` is not installed on most Debian systems. If the previous
    command results in a `command not found error`, you''ll just need to install the
    `aptitude` package via `apt-get install`. The output may be too long depending
    on the size of your terminal window, so you may want to pipe the output into `less`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'The following screenshot shows the search results of aptitude on a Debian system
    searching for `libapache2-mod`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Adding modules](img/B03919_07_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: There are quite a few modules available for Apache in Debian systems
  prefs: []
  type: TYPE_NORMAL
- en: 'By searching that way, you can press `Enter` or the up and down arrow keys
    to scroll through the output, and then press *Q* when you''re finished. By perusing
    the output, you''ll see that the PHP package is named `libapache2-mod-php5`. So,
    let''s install it with the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'Once the package is installed, check the output. It''s very possible that Debian
    already installed the module for you, the logic being that if you specifically
    ask for a package to be installed, you''ll probably want to have it usable right
    away. If you see output similar to the following, then the PHP module in this
    example is already installed:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'You can verify this by attempting to enable it anyway, by executing `a2enmod
    php5` in the shell. If it''s enabled, you''ll see output similar to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'In essence, the `a2enmod` and `a2dismod` commands work pretty much the same.
    As you can probably gather, one enables modules and the other disables them. In
    order to use an Apache module, it must be enabled. However, if you no longer need
    a module you can disable it (or better yet, remove it). Going over all the modules
    and the features they provide is outside the scope of this book. But in practice,
    you''ll only enable modules that are required by your site, which differs from
    environment to environment. Before we move on to the same procedure when performed
    on CentOS systems, I''ll leave you with this. To see a list of all modules that
    are installed on a Debian system, issue the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, let''s move on to CentOS. Most modules can be listed similar to how we
    did before in the Debian section, by using the package manager to list available
    module packages. In the CentOS, we can do so via the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: Unfortunately, the PHP module isn't listed in this output. This is because we
    enable PHP in CentOS by simply installing the `php` package. This is where things
    start to get confusing; quite a few CentOS Apache module packages have a naming
    convention beginning with `mod_`, but not all of them do. A bit of research is
    sometimes necessary when determining which packages need to be installed to grant
    the system access to a module. If there are any other modules you may need for
    a site you're developing, such as `mod_ldap` for LDAP authentication, feel free
    to install those as well.
  prefs: []
  type: TYPE_NORMAL
- en: 'Unlike Debian, the `yum` package manager should have already enabled the modules
    you installed for you. Now that we''ve installed PHP in our CentOS system, we
    should have PHP available to us once we restart the `httpd` daemon. To verify
    this, we should be able to create an `info.php` file and store it in `/var/www/html/info.php`.
    The contents of the file are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: If you navigate to the URL `http://<your_server_IP>/info.php`, you should see
    a page containing information regarding your server's PHP implementation.
  prefs: []
  type: TYPE_NORMAL
- en: '![Adding modules](img/B03919_07_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Viewing PHP server information on an Apache server
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Although it's perfectly fine to use an `info.php` file in order to test PHP,
    do not leave it on the server—it is a security risk. You don't want to make it
    too easy for attackers to determine specific information regarding what your server
    is running. This procedure is merely to test that PHP is running properly.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we've gone through installing Apache modules, it should be easy for
    you to customize your web server as you need in order to support any websites
    or applications you plan to run.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up virtual hosts
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: It's very common for a single organization to host multiple sites. Each of these
    sites can live on their own server or virtual machine, but that's not very practical.
    Running just one site per server is very expensive and not very efficient. The
    concept of **virtual hosts** is that multiple sites can live on one web server,
    which saves infrastructure. Of course, it's always possible that you may have
    a website that generates so much traffic that sharing it with other high-traffic
    sites may not be a good idea, but when this is not the case, virtual hosts are
    recommended.
  prefs: []
  type: TYPE_NORMAL
- en: 'As mentioned before, `/var/www` is the default location where Apache looks
    for files to serve. If you''re hosting multiple sites on one server, you would
    want to create a separate directory for each of them. For example, if you are
    hosting a website for a company named `tryadtech.com` and another for `linuxpros.com`,
    you could create the following directory structure:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: In this example, I created directories several levels deep, so you can use the
    `-p` flag with `mkdir` in order to create these directories and their parents.
  prefs: []
  type: TYPE_NORMAL
- en: 'This way, each site gets their own directory so you can keep their content
    separate. Everyone will need to read these files, so we''ll need to adjust permissions:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'To create a virtual host, we''ll need to create a configuration file from it.
    On Debian, there is a default configuration you can use as a starting point should
    you choose (I''ll detail the configuration I use in the next section, so using
    this file is not required). If you wish, you can start with the following file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'This file serves as a good reference point for creating configuration for a
    virtual host. If you choose to use it, copy it to the directory you''ve created
    for your virtual host:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: 'On CentOS, the `/etc/apache2/sites-available` directory doesn''t even exist,
    so go ahead and create that. In order to tell Apache to load sites from this directory,
    we''ll need to add the following line to the bottom of the `/etc/httpd/conf/httpd.conf`
    file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, here''s an example virtual host configuration file. I''ve saved it as
    `/etc/apache2/sites-available/tryadtech.com.conf` on my Debian test system, but
    on CentOS just replace `apache2` with `httpd`. I took this example file from the
    `000-default.conf` file I mentioned previously, removing the commented lines for
    the sake of brevity. The first bold line was not originally present, and the second
    was modified:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: As you can see here, we're calling out an `html` directory underneath the `tryadtech.com`
    directory. To develop your site, you would place your site's files into the `html`
    directory, and after restarting Apache, you should be able to access that directory
    from a web browser.
  prefs: []
  type: TYPE_NORMAL
- en: So, how does the Apache server know which directory to send visitors to? Notice
    the `ServerName` line that I added to the configuration file. In this line, I'm
    calling out a specific domain name that the files within this virtual host belong
    to. This requires that you already have DNS set up and pointing to this IP. For
    example, your DNS entry at your domain name registrar would be pointing each of
    these two virtual hosts to the same IP address. When a request comes in via the
    `tryadtech.com` domain, Apache should serve the user files from the `/var/www/tryadtech.com/html`
    directory. If you configure another virtual host and domain name, the same would
    apply to that domain as well.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we set up an Apache server that we can use to share information
    on a local intranet, or even the Internet if our machine is externally routable.
    We walked through installing Apache, customizing it, setting up modules, as well
    as setting up virtual hosts.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we'll tackle advanced networking techniques such as subnetting,
    adding redundancy to DHCP and DNS, and routing. See you there!
  prefs: []
  type: TYPE_NORMAL
