- en: Chapter 2. Starting Your Project
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You would like to get up and running as quickly as possible with your projects,
    and in this chapter we will see some of the quickest ways to do so with HTML5
    Boilerplate.
  prefs: []
  type: TYPE_NORMAL
- en: There are many flavors of HTML5 Boilerplate to choose from, and we will look
    into some of the mechanisms of creating your starting folder and take a look at
    the immediate tasks you can take care of once you get going.
  prefs: []
  type: TYPE_NORMAL
- en: Creating your initial project folder
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'HTML5 Boilerplate is available in three versions from the website, as we saw
    in the previous chapter. Here are two of the quickest ways to get started with
    the latest files:'
  prefs: []
  type: TYPE_NORMAL
- en: Download the latest version of HTML5 Boilerplate for every new project you start
    with
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Maintain a local, up-to-date copy of the HTML5 Boilerplate and use a script
    to copy files into your project
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We will look at both these ways now.
  prefs: []
  type: TYPE_NORMAL
- en: Downloading the latest version of HTML5 Boilerplate
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'This is the easiest way to get started with the latest files on HTML5 Boilerplate.
    If you are conversant with Git, you can download HTML5 Boilerplate as a folder.
    In your command-line interface, navigate to the folder where you store your projects
    typically, and then enter the following command in your command-line interface:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: This will download a folder called `html5-boilerplate` to that folder. You can
    then rename it to your own project and get started with it.
  prefs: []
  type: TYPE_NORMAL
- en: If you are unfamiliar with the command-line interface, you can download the
    latest files as a ZIP file and unzip it into a folder that you can rename to the
    project you want to work with.
  prefs: []
  type: TYPE_NORMAL
- en: If you find these options tedious, I recommend you go with the shell script.
    However, it requires you to have Git set up and be familiar with the command-line
    interface.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If you are on Windows, be sure to download **Cygwin** at `sources.redhat.com/cygwin/cygwin-ug-net/cygwin-ug-net.html`
    and use it for typing all the command lines that I mention.
  prefs: []
  type: TYPE_NORMAL
- en: There is also an illustrated guide to setting up and using Git on Windows at
    `nathanj.github.com/gitguide/tour.html`.
  prefs: []
  type: TYPE_NORMAL
- en: Using the shell script
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Using this script, we will set up a local repository for HTML5 Boilerplate that
    can be kept up-to-date with the changes that are made in the project.
  prefs: []
  type: TYPE_NORMAL
- en: Go to a folder where you want to keep your copy of the latest HTML5 Boilerplate
    files that you would like to use as a reference for all your projects. In my case,
    I would like to keep it in a folder called `source`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Then, use the same command-line script as mentioned in the previous section
    to download the latest copy of the files. The script is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Instead of renaming the folder, we will let this folder be as it is. Next, we
    shall copy the `createproject.sh` shell script to this folder.
  prefs: []
  type: TYPE_NORMAL
- en: 'In your shell, navigate to the `html5 Boilerplate` folder, and download the
    `createproject.sh` file as shown in the following command-line script:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Make sure it is executable by executing the following in the shell:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'The execution of these command-line scripts are shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Using the shell script](img/8505_02_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Then execute the following script from the command line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'This will create a folder titled with the project name in the parent folder
    of the `html5-boilerplate` folder. If you want your project files to be located
    elsewhere, you can also use the absolute path to the project folder, as shown
    in the following script:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Creating our project
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Throughout this book, we will be working on an example project to understand
    how to use HTML5 Boilerplate. All our project source files are available at `nimbu.in/h5bp-book/sun-shine-festival-2012/`.
  prefs: []
  type: TYPE_NORMAL
- en: Let us pretend that we need to create a website for a hypothetical sun and sand
    festival in Ngor and Terou Bi, Dakar, Senegal, November 12, 2012 to November 16,
    2012\. I would like to label this project as `sun-sand-festival-2012`.
  prefs: []
  type: TYPE_NORMAL
- en: I store all my projects in a `projects` folder, and all my frameworks and starter
    kits in a `source` folder.
  prefs: []
  type: TYPE_NORMAL
- en: 'In my source folder, I have the `html5-boilerplate` folder that I initially
    created with the following script:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'I keep it up-to-date regularly by pulling the latest changes in the master
    repository hosted on Github, using the following script:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'I also have the `createproject.sh` shell script in the same folder, which we
    will use to create our new project. In the shell interface, I navigate to the
    `html5-boilerplate` folder and enter the following script:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'This creates the project folder with all the required files to get started.
    The files that are created are shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating our project](img/8505_02_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: House-keeping
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now we have our project ready, let us get started with some basic housekeeping
    that we would need to do with any project. Open the project in any text editor
    you are comfortable using.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: I highly recommend the cross-platform **Sublime Text** text editor, downloadable
    from [www.sublimetext.com](http://www.sublimetext.com), if you are looking for
    a good text editor. The command-line masters might want to try using the **Vim**
    text editor, downloadable from [www.vim.org](http://www.vim.org).
  prefs: []
  type: TYPE_NORMAL
- en: Setting the tags
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Our `index.html` page contains a few tags that we need to fill in:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'For the title tag for our project, let us enter the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'The `meta` tag with a `name` description is useful when the site is listed
    in search engine results. This tag would be used to render the snippet of text
    explaining what this page is about. Let us set this to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Editing favicons
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Adding favicons would be the next trivial thing that most of us forget to do
    when we start a project. This is the next easy goal that you can reach, before
    you need to start thinking about the code you will be creating.
  prefs: []
  type: TYPE_NORMAL
- en: 'Favicons help in uniquely identifying your website. As the following screenshot
    shows, having a favicon makes it easy to tell which tab or bookmark you want to
    visit:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Editing favicons](img/8505_02_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Touch icons are useful when your page gets added to the home screen on iOS
    (as shown in the following screenshot on the right-hand side) and Android devices
    (as shown in the following screenshot on the left-hand side):'
  prefs: []
  type: TYPE_NORMAL
- en: '![Editing favicons](img/8505_02_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: HTML5 Boilerplate comes with a set of icons in the root folder that are of the
    right sizes for all the required icons for both touch screen icons (used by both
    Android and iOS devices) and favicons. You can use them as a guide when you are
    working on your icons.
  prefs: []
  type: TYPE_NORMAL
- en: 'HTML5 Boilerplate comes with the following set of icons:'
  prefs: []
  type: TYPE_NORMAL
- en: '**favicon.ico**: The default icon used by desktop browsers to render the icons
    on tabs or next to the title.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**apple-touch-icon.png**: If nothing else is specified, iOS will use this icon
    to render on the home screen. Unfortunately, this also means iOS will add its
    own effects such as drop-shadow, rounded corners, and reflective shine on top
    of this icon. This is also a good fallback icon format if nothing else is supported,
    for example, iOS 1 and BlackBerry OS 6.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**apple-touch-icon-precomposed.png**: This prevents iOS from applying any kind
    of effects on top of your icon and have it be presented as it is. Providing this
    icon will also ensure that Android 2.1 and above devices will use this as the
    icon when your web page is added to the home screen.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**apple-touch-icon-57x57-precomposed.png**: This will be used by iOS devices
    that do not have Retina display.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**apple-touch-icon-72x72-precomposed.png**: This will be used by iPad, which
    does not have a high-resolution display.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**apple-touch-icons-114x114-precomposed.png**: This will be used by high-resolution
    iPhone Retina displays.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**apple-touch-icons-144x144-precomposed.png**: This will be used by high-resolution
    iPad Retina displays.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The rationale for why we have so many icons has been documented by Mathias Bynens
    at [http://mathiasbynens.be/notes/touch-icons](http://mathiasbynens.be/notes/touch-icons).
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Hans Christian Reinl hosts a `PSD` template of all the icons at `drublic.de/blog/html5-boilerplate-favicons-psd-template/`,
    you can use to get started with creating icons for your project. If you need direction
    on how to create these icons, Jon Hicks writes about how to do so at [www.netmagazine.com/features/create-perfect-favicon](http://www.netmagazine.com/features/create-perfect-favicon).
  prefs: []
  type: TYPE_NORMAL
- en: If you have the graphic elements necessary for creating icons, you can get started
    with adding these icons to the root folder of the project. It is likely that you
    would forget to do it later when deadlines loom.
  prefs: []
  type: TYPE_NORMAL
- en: 'For our sun and sand festival example, we already have critical graphic elements
    assembled, the following screenshot shows the icons generated from the `PSD` template:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Editing favicons](img/8505_02_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Adding third-party libraries
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If you already have a list of libraries that you will be using, you can start
    adding them into the folder.
  prefs: []
  type: TYPE_NORMAL
- en: HTML5 Boilerplate comes with the latest stable version of jQuery, so you already
    have that. If you are inclined to use other libraries such as jQuery UI, you can
    copy them over to the `libs` folder.
  prefs: []
  type: TYPE_NORMAL
- en: Suppose you would like to use jQuery UI for your project, available at [www.jqueryui.com](http://www.jqueryui.com),
    then copy the latest version of jQuery UI to the `libs` folder and then at the
    bottom of the markup in `index.html`, refer to it using the `script` tag.
  prefs: []
  type: TYPE_NORMAL
- en: Using a Content Delivery Network
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: By using a **Content Delivery Network** (**CDN**), we can reduce the number
    of resources to serve on our web servers and by referring to resources that are
    universally hosted by Google or Microsoft, it is more likely that the file will
    be cached, as a lot of other sites the user visits will also be referencing this
    particular resource.
  prefs: []
  type: TYPE_NORMAL
- en: If you paid close attention, you would have noticed that the source for the
    script that links to jQuery is different from our jQuery UI source. This is for
    two reasons, which are explained in the following sections.
  prefs: []
  type: TYPE_NORMAL
- en: Protocol-relative URLs
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Typically most URLs that link to assets on the Web start with `http://`. However,
    there are occasions when the page is hosted on a server that uses encrypted communication.
    So, your page will be served with `https://` instead of the typical `http://`.
    Alas, as your script source is still referenced with the `http://` protocol, IE
    will throw a nasty dialog asking the following question to the visitors on your
    page:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Protocol-relative URLs](img/8505_02_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'You definitely do not want your visitors panicking over this. So, the easiest
    way to prevent this is to remove the protocol (`http:`) part of the URL completely,
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: This way, the browser will use whatever protocol the page has been served with
    for the request. You can learn more about protocol-relative URLs in the [Appendix](apa.html
    "Appendix A. You Are an Expert,Now What?") section.
  prefs: []
  type: TYPE_NORMAL
- en: 'Of course, this means if you are testing locally, and if you view your page
    on the browser, the browser will use a URL that looks like `file://users/divya/projects,`
    and hence the browser will attempt to look for a jQuery file using the following
    URL:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'This request will definitely fail, as there is no resource locally at that
    path. Hence, if you are using protocol-relative URLs, you need to set up a local
    server to test your files. This is easily done on a Mac or Unix-based OS by navigating
    to your project folder in your shell interface and executing the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: This will start a server and your project's `index.html` file will be available
    on `http://localhost:8000`.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If you are on Windows, copy the Mongoose executable (the latest version at the
    time of writing was `mongoose-3.3.exe`) from `code.google.com/p/mongoose/` to
    your project folder and launch it. Your project's `index.html` will then be available
    at `http://localhost:8080`.
  prefs: []
  type: TYPE_NORMAL
- en: Google CDN hosting
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Google hosts a lot of popular JavaScript libraries. A list of all libraries
    hosted on Google's CDN is available at `code.google.com/apis/libraries/devguide.html`.
  prefs: []
  type: TYPE_NORMAL
- en: 'We could take advantage of Google''s CDN for jQuery UI too, as it is hosted
    on it. Let us convert it to use Google''s CDN by changing the source of the script
    file from `js/libs/jqueryui-jquery-ui-1.8.17.min.js` to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'But wait! Let us take a look at how we refer to jQuery CDN in HTML5 Boilerplate.
    This is shown in the following code snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: Do you notice how we also refer to a local copy of the jQuery file? We do this
    just so that in the event Google's CDN fails, we still have our local copy to
    use. Granted this does not happen often, but it is useful to have a fallback when
    or if it does.
  prefs: []
  type: TYPE_NORMAL
- en: 'The statement `window.jQuery || document.write(…)` does two things. These are
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Check if the jQuery object exists: If it does, it means Google''s CDN worked.
    If it exists, do nothing.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'If the `window.jQuery` object does not exist: This means Google''s CDN failed;
    it immediately renders a `script` tag with a reference to the copy of jQuery in
    the project''s `libs` folder. This tells the browser to immediately make a request
    for that resource.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We can do something similar for jQuery UI.
  prefs: []
  type: TYPE_NORMAL
- en: 'All jQuery plugins are objects within the jQuery object. So, we only need to
    verify whether the plugin object exists and if it doesn''t, load the copy of the
    plugin in the `libs` folder, using the following code snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'Hence, our complete script file for referencing jQuery UI would be as shown
    in the following code snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: There are other CDNs that host libraries too. The `cdnjs.com` URL hosts a lot
    of JavaScript libraries. Microsoft also hosts a few libraries on its CDN; the
    list is available at [www.asp.net/ajaxlibrary/cdn.ashx](http://www.asp.net/ajaxlibrary/cdn.ashx).
  prefs: []
  type: TYPE_NORMAL
- en: Adding Google Analytics ID
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This is another of those minor actions that gets forgotten when deadlines come
    calling. HTML5 Boilerplate already provides the ready snippet for you to use.
    All you need to include is the unique identifier for your website.
  prefs: []
  type: TYPE_NORMAL
- en: Note that HTML5 Boilerplate includes the snippet at the footer of the page,
    which means the metrics get sent only after the page is loaded. However, there
    are a few people who believe Analytics should occur even before the page gets
    loaded to measure who leaves the page even before it has completed loading. If
    you would like to do that, you should move the Analytics snippet to just above
    the closing `</head>` tag in the `index.html` page.
  prefs: []
  type: TYPE_NORMAL
- en: Updating humans.txt
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '`humans.txt` makes known the people who have worked on a website. Anyone can
    simply visit `example.com/humanx.txt` to immediately know the names of people
    who have worked on that website. Add your name and those of your team members
    to the `humans.txt` file that comes within HTML5 Boilerplate.'
  prefs: []
  type: TYPE_NORMAL
- en: 'For our sun and sand festival example, the following screenshot shows how our
    `humans.txt` will look:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Updating humans.txt](img/8505_02_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we looked at how to get started on a project with HTML5 Boilerplate
    and the first steps we should take in our new project. On the way, we learned
    about protocol-relative URLs and linking to libraries hosted on CDNs. We updated
    the `humans.txt` file and the icons to be used in our project. All the changes
    that we have made so far to our example project are available at `nimbu.in/h5bp-book/chapter-2/`.
    In the next chapter, we will look at writing some code for our project.
  prefs: []
  type: TYPE_NORMAL
