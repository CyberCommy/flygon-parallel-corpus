- en: Amazing Overlays and Messages
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Amazing Overlays and Messages demonstrate various variants of content displayed
    in modal or non-modal Overlays, such as Dialog, Lightbox, and the Overlay panel.
    The user does not leave the page flow when the content is displayed in the mentioned
    Overlays. An Overlay component overlays other components on the page. PrimeNG
    also offers Notification components to show any kind of messages or advisory information.
    These Message components will be described as well.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Displaying content in the popup mode
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Multipurpose scenarios with OverlayPanel
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Displaying content in Lightbox
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Notifying users with Messages and Growl
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Tooltips for form components
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Displaying content in the popup mode
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The additional information of a website can be represented in a popup format.
    This will improve the user experience with optimal view port. There are two types
    of popup formats that exist: **Dialog** and **ConfirmDialog**.'
  prefs: []
  type: TYPE_NORMAL
- en: Dialog
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Dialog is a container component to display the content in an Overlay window.
    To save the web page's viewport, Dialog is very useful to display additional information
    in a popup format. The visibility of Dialog is controlled through the `visible`
    property.
  prefs: []
  type: TYPE_NORMAL
- en: By default, the Dialog is hidden with `visibility` as `false` and enabling the
    `visible` property displays the Dialog. Due to the two-way binding nature of Dialog,
    the `visible` property turned as `false` automatically after closing the Dialog
    using the close icon. The `closeOnEscape` attribute is used to close the Dialog
    with the *Esc* key.
  prefs: []
  type: TYPE_NORMAL
- en: 'A basic example of Dialog component with source button would be written as
    follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'The `visible` property is enabled on the user action. The following screenshot
    shows a snapshot result of the basic Dialog example:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/ee678b76-d822-4e80-9466-775720dc4553.png)'
  prefs: []
  type: TYPE_IMG
- en: The Dialog component supports two event callbacks named `onShow` and `onHide`,
    which will be invoked when the Dialog is shown or hidden.
  prefs: []
  type: TYPE_NORMAL
- en: Usability features
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The user experience with the Dialog component will be improved with draggable,
    resizable, closable, and responsive features using `draggable`, `resizable`, `closable`,
    and `responsive` properties. Apart from these interactive features, the `modal`
    property prevents user actions on the main page with a transparent background,
    whereas `dismissableMask` hides the Dialog if the user clicks on a transparent
    background.
  prefs: []
  type: TYPE_NORMAL
- en: 'The default values of these properties are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`draggable = true`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`resizable = true`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`closable = true`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`responsive = false`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`modal = false`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`dismissableMask = false`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Customized header and footer
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The header of the Dialog is defined through the `header` property, and it can
    be controlled by the `showHeader` attribute. The header and footer sections of
    the Dialog component can be defined in a more flexible manner using the `p-header`
    and `p-footer` tags. In order to work with them, there is a need to import the
    header and footer components and declare it in the directives section.
  prefs: []
  type: TYPE_NORMAL
- en: 'A customized example of a Dialog component with customized header and footer
    will be written as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'The following screenshot shows a snapshot result of the custom Dialog example:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/310d8d0e-9d09-475f-8687-c4e8aa2d2fdf.png)'
  prefs: []
  type: TYPE_IMG
- en: The preceding snapshot shows how the header, message, and footer icons can be
    customized as per the needs or requirements. By default, the Dialog component
    is center aligned in the viewport, but this can be customized using `positionLeft`
    and `positionTop` properties.
  prefs: []
  type: TYPE_NORMAL
- en: ConfirmDialog
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The ConfirmDialog is a component used to display confirmation windows with multiple
    actions at the same time. In this case, it will be backed by the confirmation
    service utilizing obseravables. The service which uses a confirmed method for
    multiple actions needs to be imported.
  prefs: []
  type: TYPE_NORMAL
- en: 'A basic example of the ConfirmDialog component with a source button (or dialog
    generator button) would be written as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'In the preceding example, the confirm method will confirm an instance for customizing
    the Dialog UI along with accept and reject buttons. For example, the `accept`
    function invokes the confirm method of a confirmation service, which decides what
    action needs to be performed:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'The Dialog appeared with the click of a button component. The following screenshot
    shows a snapshot result of the basic confirmed Dialog example:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/15c967c5-65dd-400a-8862-e12aa1bd8386.png)'
  prefs: []
  type: TYPE_IMG
- en: The footer accept and reject buttons decide whether to subscribe for the Angular
    news feed system.
  prefs: []
  type: TYPE_NORMAL
- en: Customization
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are two ways to provide the header, message, and icons for the confirmed
    Dialog. One is a declarative approach in which all the features are provided through
    attributes (`header`, `message`, and `icon`), whereas the other approach is a
    programmatic approach in which the values can be dynamic through confirmed instance
    properties. Even the footer section buttons can be customized with their own UI
    (`acceptLabel`, `acceptIcon`, `acceptVisibility`, `rejectLabel`, `rejectIcon`,
    and `rejectVisibility`) along with the accept and reject methods of the local
    `ng-template` variable.
  prefs: []
  type: TYPE_NORMAL
- en: 'A customized example of the confirm Dialog component with header and footer
    would be written as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'The following screenshot shows a snapshot result of a custom confirm Dialog
    example:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/83c1baf1-f5e6-4dd1-ad21-e32eae92e14a.png)'
  prefs: []
  type: TYPE_IMG
- en: In the preceding snapshot, all headers, messages, and icons are customized in
    a declarative approach. The confirm Dialog provides default `closable`, `responsive`,
    and `closeOnEscape` properties, which is similar to the Dialog component.
  prefs: []
  type: TYPE_NORMAL
- en: 'The complete demo application with instructions is available on GitHub:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://github.com/ova2/angular-development-with-primeng/tree/master/chapter6/dialog](https://github.com/ova2/angular-development-with-primeng/tree/master/chapter6/dialog)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://github.com/ova2/angular-development-with-primeng/tree/master/chapter6/confirm-dialog.](https://github.com/ova2/angular-development-with-primeng/tree/master/chapter6/confirm-dialog)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Multipurpose scenarios with OverlayPanel
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The OverlayPanel is a container component that displays additional information
    on top of the other components in the page. This element will be displayed using
    the `show` or `toggle` method of a local `ng-template` variable, and it can be
    hidden using the `hide` or `toggle` method. Remember that the `show` method will
    allow a second argument as the target element, where it has to display the Overlay
    (instead source). A basic example of the Overlay component with the source button
    generator will be written as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'In the preceding example, Overlay will appear by the click of the Button component.
    The following screenshot shows a snapshot result of the basic Overlay example:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/95ece15c-06b5-4dc8-8721-99dbffc6c840.png)'
  prefs: []
  type: TYPE_IMG
- en: In the preceding snapshot, the Overlay displays the PrimeNG logo as a image
    on the click of the logo button. By default, OverlayPanel is attached to the body
    of the page, but the target can be changed using the `appendTo` property.
  prefs: []
  type: TYPE_NORMAL
- en: Integration with other components
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The OverlayPanel component can be integrated with other PrimeNG components
    as well. For example, the following snapshot shows how to integrate the Overlay
    component with the DataTable component using `ng-template`. In this case, the
    button needs to be placed inside DataTable `ng-template` and Overlay triggered
    through the `toggle` event:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/032d5765-fa89-40c7-b0b8-676ec555d49c.png)'
  prefs: []
  type: TYPE_IMG
- en: In the preceding snapshot, the Overlay panel is used to display the aggregation
    information such as marks and percentage in the popup format by clicking on the
    result button in each row.
  prefs: []
  type: TYPE_NORMAL
- en: Closable properties
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: By default, the interaction outside the Overlay panel closes the Dialog immediately.
    This behavior can be prevented with the help of the `dismissable` property. At
    the same time, there is an option to display close at the top-right corner using
    the `showCloseIcon` property.
  prefs: []
  type: TYPE_NORMAL
- en: The Dialog component supports four event callbacks named `onBeforeShow`, `onAfterShow`,
    `onBeforeHide`, and `onAfterHide`, which will be invoked when the Dialog is shown
    or hidden.
  prefs: []
  type: TYPE_NORMAL
- en: The complete demo application with instructions is available on GitHub at
  prefs: []
  type: TYPE_NORMAL
- en: '[https://github.com/ova2/angular-development-with-primeng/tree/master/chapter6/overlaypanel.](https://github.com/ova2/angular-development-with-primeng/tree/master/chapter6/overlaypanel)'
  prefs: []
  type: TYPE_NORMAL
- en: Displaying content in Lightbox
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'LightBox component is used to display a collection of images, videos, inline
    HTML content, and also iframes in a modal Overlay mode. There are two types of
    LightBox modes that exist: one is the default `image` type and the other one is
    the `content` type. In the image mode, a collection of images will be displayed
    where each entry represents an image object which represent the source of the
    image, thumbnail, and title. A basic example of a LightBox with a collection (or
    array) of Angular conferences would be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'The component will be rendered as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/3a961c4b-84f5-47ca-a0cb-f59bc6e8f855.png)'
  prefs: []
  type: TYPE_IMG
- en: In the preceding snapshot, all the images are displayed as gallery of images
    and navigated through the next and previous icons.
  prefs: []
  type: TYPE_NORMAL
- en: Custom content mode
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The content mode is enabled by setting the `type` property to `content`, which
    provides an anchor (or link) to open the LightBox and content to display inside
    of it. A customized content example of a LightBox with a collection of Angular
    conferences would be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'The component will be rendered as iframe video inside Overlay panel as shown
    in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/b8764662-39e0-4380-86f4-b2bb6390cd2d.png)'
  prefs: []
  type: TYPE_IMG
- en: As shown the preceding snapshot, the list of videos are displayed and can watch
    videos in a popup mode for better experience.
  prefs: []
  type: TYPE_NORMAL
- en: Transition effects
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The LightBox component is more powerful with the transition effects between
    images. This can be achieved through the `easing` property. Here, the default
    value is `ease-out` (that is, the effects are customized using the `easing` property).
    There are many other effects available, the entire list of CSS3 effects are supported.
    Also, by default, the effect duration is `500ms`. This also can be customized
    through the `effectDuration` property.
  prefs: []
  type: TYPE_NORMAL
- en: 'The transition effect as an example of a LightBox with a collection of Angular
    conferences would be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: The complete demo application with instructions is available on GitHub at
  prefs: []
  type: TYPE_NORMAL
- en: '[https://github.com/ova2/angular-development-with-primeng/tree/master/chapter6/lightbox.](https://github.com/ova2/angular-development-with-primeng/tree/master/chapter6/lightbox)'
  prefs: []
  type: TYPE_NORMAL
- en: Notifying users with Messages and Growl
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Message component is used to display messages in an inline format to notify
    the users. These Messages are notified as the result of a specific action. Each
    Message in PrimeNG API is defined using the `Message` interface, which defines
    `severity`, `summary`, and `detail` properties.
  prefs: []
  type: TYPE_NORMAL
- en: 'A basic example of Messages to notify the user would be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'In the preceding example, Messages are displayed using the `value` property,
    which defines an array of the `Message` interfaces. The component will be rendered
    as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/ddfaf6df-6ad7-4ec0-8479-f502b2fc8ab9.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The severity of Messages are represented with the `class` property. The possible
    values of Messages severity would be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Severity** | **Class name** |'
  prefs: []
  type: TYPE_TB
- en: '| `success` | `.ui-button-success` |'
  prefs: []
  type: TYPE_TB
- en: '| `info` | `.ui-button-info` |'
  prefs: []
  type: TYPE_TB
- en: '| `warn` | `.ui-button-warn` |'
  prefs: []
  type: TYPE_TB
- en: '| `error` | `.ui-button-error` |'
  prefs: []
  type: TYPE_TB
- en: The Messages are closable by default with the help of the cross icon located
    at the top-right corner. This behavior can be altered through the `closable` property,
    that is, `[closable]="false"` disables the closable nature of Messages.
  prefs: []
  type: TYPE_NORMAL
- en: Growl - another way of notifying information
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Similar to Message components, Growl is used to display Messages as a result
    of specific actions, but it displays in the form of the Overlay mode instead of
    the inline mode. Each Message is represented through the `Message` interface with
    `severity`, `summary`, and `details`. A basic example of Growl to notify the user
    would be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'The `value` property defines an array of the `Message` interfaces in the backing
    component model. The component will be rendered as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/713cf270-975f-43af-a988-10a28b617fec.png)'
  prefs: []
  type: TYPE_IMG
- en: Similar to the Messages component, the same severity types can be defined in
    Growl as well. PrimeNG 4.1 release introduced the `onClick` event callback which
    will be invoked when a Message is clicked on.
  prefs: []
  type: TYPE_NORMAL
- en: Sticky behavior
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: By default, the Growl messages are removed after a certain span of time. The
    default lifespan of Growl messages is `3000ms`. This can be customized using the
    `life` property (that is, `life="5000"`). To make the Messages as sticky, irrespective
    of the lifespan mentioned, you should enable the sticky behavior, that is, `sticky="true"`.
  prefs: []
  type: TYPE_NORMAL
- en: PrimeNG Version 4.0.1 supports the two-way binding feature for Growl messages.
    Due to this feature, whenever the message is removed manually from UI, backend
    instance, or message, array will be updated immediately.The complete demo application
    with instructions is available on GitHub at
  prefs: []
  type: TYPE_NORMAL
- en: '[https://github.com/ova2/angular-development-with-primeng/tree/master/chapter6/messages](https://github.com/ova2/angular-development-with-primeng/tree/master/chapter6/messages)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://github.com/ova2/angular-development-with-primeng/tree/master/chapter6/growl.](https://github.com/ova2/angular-development-with-primeng/tree/master/chapter6/growl)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Tooltips for form components
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Tooltip provides an advisory information for a component. This gives a brief
    insight of target component before going to use. The Tooltip is applied through
    the `pTooltip` directive with the value to define text to display. Along with
    that, HTML tags also displayed instead of regular text information with the help
    of the `escape` attribute. A basic example of Tooltip is to provide an advisory
    information for input as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'The Tooltip display on right side of input as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/cc180360-109f-4d65-bf15-7dfd2fe66bd6.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The Tooltip position is displayed on the right side of target component by
    default. This behavior can be changed using the `tooltipPosition` property with
    other values such as `top`, `right`, and `bottom`, for example, `tooltipPosition`
    with the `top` value will result as in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/14ee580a-3a7f-42db-b6b7-4f009b7ea4d0.png)'
  prefs: []
  type: TYPE_IMG
- en: By default, the Tooltip is displayed on hover of a target element (that is,
    the default event to invoke Tooltip information is hover.) This can be customized
    using the `tooltipEvent` property, which provides focus event to display and blur
    event to hide Tooltip. Remember, Tooltips can also be disabled using the `tooltipDisabled`
    property.
  prefs: []
  type: TYPE_NORMAL
- en: 'A Tooltip event example for input would be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: By default, Tooltip is assigned to document body. If the target of a Tooltip
    placed inside scrolling containers (for example, overflown `div` element), append
    Tooltip to the element with the relative position. This can be achieved using
    the `appendTo` property (that is, `appendTo="container"`).
  prefs: []
  type: TYPE_NORMAL
- en: 'PrimeNG Version 4.1 provides the `showDelay` and `hideDelay` properties in
    order to add delay while showing and hiding Tooltips (which accept a number value
    in terms of milliseconds). The delay feature would be applied as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: The complete demo application with instructions is available on GitHub at
  prefs: []
  type: TYPE_NORMAL
- en: '[https://github.com/ova2/angular-development-with-primeng/tree/master/chapter6/tooltips.](https://github.com/ova2/angular-development-with-primeng/tree/master/chapter6/tooltips)'
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: By reaching this section, you will be in a position to understand how to display
    images, videos, iframe, and HTML content in an Overlay window without the leaving
    current page flow. Initially, you will see how to work with Dialog, ConfirmDialog,
    LightBox, and Overlay components. After that, you learned on how to display inline
    messages or messages in an Overlay by Messages and Growl components, respectively.
  prefs: []
  type: TYPE_NORMAL
- en: The last recipe explained about the Tooltip component for displaying advisory
    information. All these components are explained with all possible features in
    a step-by-step approach. In the next chapter, you will see how to use the Menu
    model API, navigation, and menu variations such as menu, mega menu, menu bar,
    slide menu, panel menu, tiered menu, and so on, with various features.
  prefs: []
  type: TYPE_NORMAL
