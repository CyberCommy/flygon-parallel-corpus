- en: Chapter 7. Wireless Client Attacks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'So far, we have covered attacks against WEP and WPA/WPA2 protocols, access
    points, and network infrastructure. In this chapter, we treat attacks targeting
    the clients, whether they are connected or not to a Wi-Fi network. We will cover
    the following topics in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Honeypot access points and Evil Twin attacks
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Man-in-the-middle attacks
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Caffe Latte and Hirte attacks
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Cracking WPA keys without the AP
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Honeypot access points and Evil Twin attacks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the last chapter, we have seen how to set up a rogue access point, which
    is part of the local wired network. An attacker can also set up a fake AP that
    appears to be legitimate to the client but is not connected to the local network.
    This kind of AP is called a **honeypot** AP, because it lures clients to associate
    with it. A honeypot AP that impersonates a genuine one, standing in its proximity,
    can be used to conduct the so-called **Evil Twin** attack. Indeed, the honeypot
    AP spoofs the SSID (and eventually the MAC address) of the real AP, advertising
    it in the beacon frames it sends. The operating system of a wireless client typically
    keeps track of the networks to which the client has already connected in the past.
    The client can be configured to automatically connect to such networks when it
    is in their range and the signal is strong enough. So, if the fake AP is closer
    to the client than the legitimate one, and therefore its signal is stronger, the
    first *wins* on the latter and the client connects to it.
  prefs: []
  type: TYPE_NORMAL
- en: There is no way for the client to authenticate the AP, because 802.11 management
    frames are not cryptographically signed. The usage of WEP or WPA-PSK serves to
    authenticate the client and encrypt the data exchanged after the association takes
    place, but does not authenticate the server to the client.
  prefs: []
  type: TYPE_NORMAL
- en: Even a WPA-Enterprise enabled AP can be susceptible to this attack, because
    clients are often configured to not check the authentication server certificate,
    as we have seen in the last chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Moreover, these certificates are not tightly bound to network SSIDs and an attacker
    can set up its authentication server and present the client a certificate that
    appears legitimate. To do so, the attacker could register a domain name that resembles
    that of the target network and obtain a valid certificate for it from a certification
    authority.
  prefs: []
  type: TYPE_NORMAL
- en: This technique is also used by a variant of the Evil Twin attack targeting WPA-Enterprise
    networks, which is described in the research paper that can be found at [http://seclab.ccs.neu.edu/static/publications/ndss2013wpa.pdf](http://seclab.ccs.neu.edu/static/publications/ndss2013wpa.pdf).
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**The Multipot attack**'
  prefs: []
  type: TYPE_NORMAL
- en: Another interesting variant of the Evil Twin attack is the so-called Multipot
    attack, presented at the Defcon 15 conference in 2007 by K.N. Gopinath, where
    multiple honeypot APs are used in the attack. The relative white-paper and the
    slides of the presentation (along with the audio and video) are available at [https://www.defcon.org/html/links/dc-archives/dc-15-archive.html#Gopinath](https://www.defcon.org/html/links/dc-archives/dc-15-archive.html#Gopinath).
  prefs: []
  type: TYPE_NORMAL
- en: In the next subsection, we will see how to set up a honeypot AP and perform
    an Evil Twin attack with the aircrack-ng suite.
  prefs: []
  type: TYPE_NORMAL
- en: The Evil Twin attack in practice
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Prior to creating a honeypot AP, we assume to have carried out the reconnaissance
    phase and identified the APs and the clients connected, following the methods
    illustrated in [Chapter 3](ch03.html "Chapter 3. WLAN Reconnaissance"), *WLAN
    Reconnaissance*.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once we have selected the target AP that we want to impersonate, we set up
    our honeypot AP with the same SSID, running airbase-ng in a new terminal emulator
    window:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Recall that the `--essid` option defines the SSID of our AP, and the `-c` option
    the channel it uses.
  prefs: []
  type: TYPE_NORMAL
- en: '![The Evil Twin attack in practice](img/B04527_07_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'In the `airodump-ng` output window, we can see both our twin APs, with the
    same SSID:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The Evil Twin attack in practice](img/B04527_07_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: We can distinguish them for the type of encryption used (the fake AP uses Open
    authentication), the channel and for other fields such as the beacons and data
    packets transmitted, and the signal power level (`Pwr`). A lower negative value
    of the `Pwr` field means a higher signal level. The signal level of the honeypot
    AP should be higher than that of the genuine AP, to lure clients to connect to
    it.
  prefs: []
  type: TYPE_NORMAL
- en: If no client is currently connected to the legitimate AP, we need to wait for
    clients to connect to the fake AP, while believing to connect to the real one.
  prefs: []
  type: TYPE_NORMAL
- en: 'If a client is already connected, we can force it to de-authenticate from the
    network with the `aireplay-ng` tool:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'This command can also be used to conduct a DoS attack against the target client:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The Evil Twin attack in practice](img/B04527_07_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'If more clients are connected, we can send broadcast de-authentication packets
    to disconnect all of them from the network:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '![The Evil Twin attack in practice](img/B04527_07_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'In the following screenshot, we can see that the client has reconnected again,
    this time to the honeypot AP, which means that we succeeded in the attack:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The Evil Twin attack in practice](img/B04527_07_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: In the next section, we will see how to perform man-in-the-middle attacks against
    clients connected to a honeypot AP.
  prefs: []
  type: TYPE_NORMAL
- en: Man-in-the-middle attacks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A **man-in-the-middle** (**MITM**) attack is a kind of attack where an attacker
    interposes itself between two communicating parties, typically (but not necessarily)
    a client and a server, and relays the exchanged messages transparently, making
    the parties believe that they are directly talking to each other.
  prefs: []
  type: TYPE_NORMAL
- en: In our case, the MITM attack is a honeypot software AP that lures the clients
    to connect to it, believing it is the legitimate one. In this way, all the network
    traffic sent and received by the client passes through the fake AP and the attacker
    can sniff and manipulate it, retrieving passwords and sensitive information, altering
    data, and hijacking sessions.
  prefs: []
  type: TYPE_NORMAL
- en: For example, the attacker can eavesdrop and sniff the traffic using network
    sniffers such as tcpdump, Wireshark, and **Ettercap**. Ettercap is not only a
    sniffer but also a tool for launching MITM attacks that provides a GUI and supports
    many network protocols. For more information about it, refer to [Appendix](apa.html
    "Appendix A. References"), *References* or to the manual page (`man ettercap`).
  prefs: []
  type: TYPE_NORMAL
- en: Typical MITM attacks are conducted through ARP cache poisoning, DNS spoofing,
    and session hijacking. For example, with DNS spoofing, the attacker can redirect
    a user to a cloned website and deceive him/her to enter their credentials.
  prefs: []
  type: TYPE_NORMAL
- en: Also, TLS encrypted sessions can be attacked, if the attacker exploits a vulnerability
    like the CVE-2014-0224 in OpenSSL ([https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2014-0224](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2014-0224))
    or present the client with a fake certificate that is accepted despite the warnings
    displayed by the client's browser.
  prefs: []
  type: TYPE_NORMAL
- en: To make the honeypot AP act as a router between the wireless clients and the
    wired network and/or the Internet, we must create a bridge interface and enable
    IP forwarding, following the same procedure described in [Chapter 6](ch06.html
    "Chapter 6. Attacking Access Points and the Infrastructure"), *Attacking Access
    Points and the Infrastructure*, to set up a rogue AP.
  prefs: []
  type: TYPE_NORMAL
- en: Kali Linux provides many tools to conduct MITM attacks, such as `arpspoof`,
    `dnsspoof`, `ettercap`, `burp suite`, `urlsnarf`, `driftnet`, and `webmitm`.
  prefs: []
  type: TYPE_NORMAL
- en: There is also an all-in-one graphical program for MITM attacks, which is already
    included in Kali Linux, **Ghost-phisher**.
  prefs: []
  type: TYPE_NORMAL
- en: Ghost phisher
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Ghost phisher is a GUI program, written in Python, that offers various features
    to perform MITM attacks, including the setup of a honeypot AP and fake network
    services (HTTP, DNS, and DHCP), session hijacking, ARP poisoning, and password
    harvesting.
  prefs: []
  type: TYPE_NORMAL
- en: The program is easy and intuitive to use. To start it, we execute the ghost-phisher
    command in a terminal. The program window is divided into different tabs, each
    for a different feature, and each tab includes a configuration section on the
    top and a status section at the bottom.
  prefs: []
  type: TYPE_NORMAL
- en: 'To perform a MITM attack, we can execute the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: The first tab window is relative to the fake AP setup. In the **Wireless Interface**
    section, we can select the interface we want to use and then put it in monitor
    mode by clicking on the **Set Monitor** button below:![Ghost phisher](img/B04527_07_06.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the **Access Point Settings**, we assign the SSID, a valid private IP address
    (for example, 192.168.0.1), the channel and the type of encryption to the honeypot
    AP.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Then we click on the **Start** button and the AP is running, as the **Status**
    pane shows us:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Ghost phisher](img/B04527_07_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: We then start the fake DHCP server with a class C network IP assignment range
    (in our case, 192.168.0.2 to 192.168.0.254), setting the IP of the AP (`192.168.0.1`)
    as the gateway and the fake DNS server. Thus, when a client connects to the AP,
    it is assigned an IP address in this range.![Ghost phisher](img/B04527_07_08.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We set up a fake HTTP server, which we use to host a cloned page of a legitimate
    website on which the client intends to login, for example, to access his/her online
    bank account. In this case, we can specify the web page to display to the client
    when it visits a fictitious site `www.exampleonlinebank.com`:![Ghost phisher](img/B04527_07_09.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Then, it is the time of the fake DNS server that resolves the client's queries
    for this particular domain to the IP address of our AP.![Ghost phisher](img/B04527_07_10.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Clicking on the **Add** button, the IP address of the fake AP (`192.168.0.1`)
    is used to resolve the target domain `www.exampleonlinebank.com`. We could also
    add other target domains to be resolved to this IP address as well as to IP addresses
    of the attacker-controlled hosts.![Ghost phisher](img/B04527_07_11.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When the client connects to the preceding website, it is presented with a fake
    login page, that resembles the one on the legitimate site:![Ghost phisher](img/B04527_07_12.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The credentials entered by the user are grabbed by the fake HTTP server and
    displayed in the **Harvested Credentials** tab window, as we can see in the following
    screenshot:![Ghost phisher](img/B04527_07_13.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The harvested credentials are stored in a SQLite database under `/usr/share/ghost-phisher/Ghost-Phisher-Database`.
  prefs: []
  type: TYPE_NORMAL
- en: Another example for this attack could be to set up a fake authentication page
    for the real AP web administration panel, so that a network administrator that
    connects to the fake AP is redirected to this page and reveals the authentication
    credentials.
  prefs: []
  type: TYPE_NORMAL
- en: It is worth underlining that these attacks, as well as all the attacks described
    in the book, are illegal, if conducted without the written and explicit permission
    by the owner(s) of the network!
  prefs: []
  type: TYPE_NORMAL
- en: The Caffe Latte attack
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In [Chapter 4](ch04.html "Chapter 4. WEP Cracking"), *WEP Cracking*, we covered
    how to crack the WEP keys when the client is connected to the AP, injecting ARP
    request packets and capturing the generated traffic to collect a consistent number
    of IVs and then launching a statistical attack to crack the key.
  prefs: []
  type: TYPE_NORMAL
- en: Two wireless security researchers, Vivek Ramachandran and MD Sohail Ahmad, presented
    a new attack called **Caffe Latte** at the Toorcon 2007 conference that allows
    you to retrieve the WEP key from a client even when it is not connected and it
    is distant from the network.
  prefs: []
  type: TYPE_NORMAL
- en: The attack has been given this name because the authors demonstrated that the
    time required to complete it is (almost) as short as to take a cup of coffee in
    a coffee shop or in a restaurant (two classical locations for this kind of attack)!
  prefs: []
  type: TYPE_NORMAL
- en: To perform the attack, we must induce the isolated client to generate enough
    encrypted WEP data packets. Operating systems such as Windows cache the WEP shared
    keys along with the relative network details in the **Preferred Network List**
    (**PNL**) to automatically connect to such networks.
  prefs: []
  type: TYPE_NORMAL
- en: The client sends probe requests for the networks in its PNL. If we sniff these
    probe requests, we can determine the SSID of the network and set up a fake AP
    with the same SSID, sending back a probe response to the client. The client associates
    with this AP even if the latter does not know the key, as the WEP protocol does
    not expect the AP to authenticate to the client.
  prefs: []
  type: TYPE_NORMAL
- en: Once the client is associated, it is assigned an IP address either statically
    or dynamically with DHCP. If a DHCP server is not present or fails to respond,
    Windows assigns the client an IP address from the 169.254.0.0/16 subnet range.
    The client begins to send some gratuitous ARP packets, which are obviously encrypted
    with the WEP key. To crack the key, we need to force the client to send these
    packets continuously, until we collect the necessary number (about 80,000 for
    the PTW attack). A technique to do so would be to de-authenticate the client repeatedly,
    but it would take quite a long time.
  prefs: []
  type: TYPE_NORMAL
- en: The Caffe Latte attack offers a more efficient solution capturing these gratuitous
    ARP packets and flipping the appropriate bits to modify the sender MAC and IP
    addresses, which are at fixed positions inside the packets.
  prefs: []
  type: TYPE_NORMAL
- en: The gratuitous ARPs are so transformed into ARP requests to be continuously
    sent back to the client. This is possible because the integrity of WEP packets
    is not cryptographically protected and the attacker can modify the payload and
    the CRC accordingly to create a still valid encrypted packet.
  prefs: []
  type: TYPE_NORMAL
- en: In this way, the client will respond to these ARP requests and generate traffic
    quickly, speeding up the key cracking process. For more details on the Caffe Latte
    attack, refer to the links provided in [Appendix](apa.html "Appendix A. References"),
    *References*.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have seen the theory of the attack, we can take a look at how to
    realize it with the aircrack-ng suite, specifically with airbase-ng.
  prefs: []
  type: TYPE_NORMAL
- en: 'We put our interface in monitor mode and run `airodump-ng mon0` to detect probe
    requests for networks that are not in range. We can see these probes in the lower-right
    part of the airodump-ng output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The Caffe Latte attack](img/B04527_07_14.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Once the target network SSID is identified, we set up a fake AP with the same
    SSID using the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Here, the `-L` option is for the Caffe Latte attack, `-W 1` allows us to specify
    the WEP protocol in the beacon frames, and `-F` writes the captured packets to
    the specified file.
  prefs: []
  type: TYPE_NORMAL
- en: When the client connects to the fake AP and begins sending the gratuitous ARPs,
    airbase-ng starts the Caffe Latte attack.
  prefs: []
  type: TYPE_NORMAL
- en: '![The Caffe Latte attack](img/B04527_07_15.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'When we have collected a sufficient number of packets, we can run aircrack-ng
    to crack the WEP key:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: An optimization of the Caffe Latte attack has been developed, the Hirte attack.
  prefs: []
  type: TYPE_NORMAL
- en: The Hirte attack
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Hirte attack extends the Caffe Latte attack in the sense that it also allows
    the use of any IP packets and not only of gratuitous ARP packets received from
    the client.
  prefs: []
  type: TYPE_NORMAL
- en: By bit-flipping these packets, we generate the ARP requests to send back to
    the client and then perform the attack. Another difference with Caffe Latte is
    that Hirte also uses packet fragmentation to send ARP requests to the client.
  prefs: []
  type: TYPE_NORMAL
- en: More technical details about this attack can be found on the Aircrack-ng Wiki
    at [http://www.aircrack-ng.org/doku.php?id=hirte](http://www.aircrack-ng.org/doku.php?id=hirte).
  prefs: []
  type: TYPE_NORMAL
- en: 'In practice, launching the Hirte attack is almost identical to launching the
    Caffe Latte attack; the only difference is the use of the `-N` option, specific
    for this attack, instead of the `-L` option:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '![The Hirte attack](img/B04527_07_16.jpg)'
  prefs: []
  type: TYPE_IMG
- en: For those who prefer using a graphical, automated tool, both the Caffe Latte
    and Hirte attacks can be performed with Fern WiFi Cracker, which we have already
    covered in [Chapter 4](ch04.html "Chapter 4. WEP Cracking"), *WEP Cracking*.
  prefs: []
  type: TYPE_NORMAL
- en: These attacks represent one more reason (if needed) to stop using the WEP protocol
    and adopt WPA2, although the latter may be subject to a similar kind of attack.
  prefs: []
  type: TYPE_NORMAL
- en: Cracking WPA keys without the AP
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Caffe Latte and Hirte attacks allow us to crack the WEP key in the absence
    of the target AP, attacking the disconnected client.
  prefs: []
  type: TYPE_NORMAL
- en: In this section, we will see that it is also possible to crack a WPA key, being
    in this situation.
  prefs: []
  type: TYPE_NORMAL
- en: 'Recall from [Chapter 5](ch05.html "Chapter 5. WPA/WPA2 Cracking"), *WPA/WPA2
    Cracking*, that to crack a WPA key, we must capture a WPA four-way handshake to
    retrieve all the required parameters to run the cracking process: the A-nonce,
    the S-nonce, the client, the AP MAC addresses, and the **MIC** (**Message Integrity
    Check**).'
  prefs: []
  type: TYPE_NORMAL
- en: 'It is worth noting that it is not necessary to complete the four-way handshake,
    as all these parameters are exchanged in the first two packets and the AP does
    not need to know the preshared key, as we can see in the following diagram:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Cracking WPA keys without the AP](img/B04527_07_17.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Therefore, we can set up a honeypot AP with the WPA protocol and the same SSID
    of the target network with the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Here, the `-z` option stands for WPA and the value `2` for TKIP encryption.
  prefs: []
  type: TYPE_NORMAL
- en: 'If we wanted to set up a WPA2-CCMP AP, the command would have been the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: In fact, the `-Z` option means WPA2 and `4` the CCMP encryption.
  prefs: []
  type: TYPE_NORMAL
- en: After having collected the handshake parameters, we follow the same procedure
    described in [Chapter 5](ch05.html "Chapter 5. WPA/WPA2 Cracking"), *WPA/WPA2
    Cracking*, to crack the key with aircrack-ng.
  prefs: []
  type: TYPE_NORMAL
- en: Clearly, this attack offers one more chance to crack a WPA key, since it is
    targeted to isolated clients and does not need to capture a real four-way handshake
    with the AP.
  prefs: []
  type: TYPE_NORMAL
- en: Cracking a WPA key is not usually as easy as cracking a WEP key but could become
    simple if a weak preshared key is used; hence, the necessity to use a strong WPA
    key!
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we have analyzed the most common attacks against wireless clients,
    covered how to set up a honeypot AP that impersonates a legitimate one and induces
    the clients to connect to it (Evil Twin attack). We have also covered the MITM
    attacks against connected clients and the attacks to recover the WPA and WEP keys
    (Caffe Latte and Hirte attacks) when the client is isolated from the network.
  prefs: []
  type: TYPE_NORMAL
- en: The next chapter will cover the reporting phase, which will show how to write
    smart and effective reports of our penetration test.
  prefs: []
  type: TYPE_NORMAL
