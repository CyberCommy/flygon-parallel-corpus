- en: Chapter 6. Running JavaFX Applications on the Raspberry Pi
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Welcome to the **IoT** (**Internet of Things**) world. There is no doubt that
    you hear this term around all the time. IoT has become a hot topic of late, and
    for good reason too. Some estimates put the number of connected small devices
    somewhere around 9 billion currently; it''s projected to jump to 24 billion devices
    by 2020\. While the projections vary, the assessment really doesn''t: in terms
    of sheer numbers, the IoT is going to dwarf any computing models ever seen.'
  prefs: []
  type: TYPE_NORMAL
- en: Very closely related to the IoT world, we have the Raspberry Pi—a credit card-sized
    microcomputer designed by the Raspberry Pi Foundation for experimentation and
    education.
  prefs: []
  type: TYPE_NORMAL
- en: What you should know about the Raspberry Pi is that it is nothing but a small
    computer. Small power requirements, small physical size, small memory, and most
    importantly a low-cost device. Everything about it is small, but it is still just
    a computer and it uses Linux.
  prefs: []
  type: TYPE_NORMAL
- en: 'Java was made for IoT from the first day of its invention. Java was created
    with a clear vision in mind: to control small devices such as television set-top
    boxes. With the explosion of IoT, Java returns to its roots.'
  prefs: []
  type: TYPE_NORMAL
- en: 'You may think that JavaFX, a platform for rich-client development, would miss
    the IoT party—but it is not so! According to the *JavaFX Overview* page on the
    Oracle Technology Network:'
  prefs: []
  type: TYPE_NORMAL
- en: '*"It is designed to provide a lightweight, hardware-accelerated Java UI platform"*'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'This statement holds the key to graphically rich-and-powerful JavaFX: hardware
    acceleration and; luckily, the Raspberry Pi comes with a powerful GPU.'
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will learn about:'
  prefs: []
  type: TYPE_NORMAL
- en: Buying, preparing, and configuring the Raspberry Pi
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Preparing the Raspberry Pi for JavaFX 8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Connecting to the Raspberry Pi remotely
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installing and configuring Java SE 8 on the Raspberry Pi
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Developing and running JavaFX 8 applications on the Raspberry Pi
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using NetBeans with the Raspberry Pi
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Excited? Need to have fun! Right, let's dive straight in and play with our Raspberry
    Pi.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Since the release of JDK 8u33 for ARM version on January 2015, Oracle has removed
    JavaFX Embedded from the ARM distribution. See [http://www.oracle.com/technetwork/java/javase/jdk-8u33-arm-relnotes-2406696.html#CACHGFJC](http://www.oracle.com/technetwork/java/javase/jdk-8u33-arm-relnotes-2406696.html#CACHGFJC)
    and [http://jaxenter.com/jdk-arm-without-javafx-end-javafx-embedded-114212.html](http://jaxenter.com/jdk-arm-without-javafx-end-javafx-embedded-114212.html).
  prefs: []
  type: TYPE_NORMAL
- en: Code for JavaFX Embedded has been given to the open source project OpenJFX ([https://wiki.openjdk.java.net/display/OpenJFX/Main](https://wiki.openjdk.java.net/display/OpenJFX/Main)).
    It is recommended that developers who are looking for alternatives to JavaFX Embedded
    come out and contribute to the project.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we will learn a few ways to overcome this problem.
  prefs: []
  type: TYPE_NORMAL
- en: What is the Raspberry Pi?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As we mentioned previously, the Raspberry Pi is a computer a very small and
    low-cost computer. In fact, it is roughly the size of a credit card. Do not be
    fooled by its size; as we know, good things come in small packages. However, the
    Raspberry Pi does not come in a package at all.
  prefs: []
  type: TYPE_NORMAL
- en: It does not come in a case and its circuit board and chips are fully visible,
    as you can see in the following image. You can plug a Raspberry Pi into a digital
    TV or monitor and use a USB keyboard and mouse with it, making it very easy to
    use. Because of its small size, you can easily transport it anywhere.
  prefs: []
  type: TYPE_NORMAL
- en: The Raspberry Pi is a capable device that allows people of all ages to explore
    computing, and to learn how to program in languages such as Java, JavaFX, Python,
    and Scratch. In addition, it will do everything a desktop computer can do—from
    browsing the Internet and playing high-definition videos or games to working with
    spreadsheets or word processing software.
  prefs: []
  type: TYPE_NORMAL
- en: '![What is the Raspberry Pi?](img/B03998_06_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The new Raspberry Pi 2 model B
  prefs: []
  type: TYPE_NORMAL
- en: What can you do with it?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The Raspberry Pi gives you the opportunity to build and control a device that
    does what you want it to do. For example, you can deploy your very own robot arm,
    controlled by a program that you have written. You can design and create your
    own role-playing game, or produce beautiful computer art or music—all by using
    code.
  prefs: []
  type: TYPE_NORMAL
- en: Moreover, the Raspberry Pi Foundation's main aim is to make it fun for kids
    all over the world to learn to program and understand how computers work.
  prefs: []
  type: TYPE_NORMAL
- en: Why is the Raspberry Pi a perfect fit for JavaFX?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'So what makes the Raspberry Pi such a perfect fit for Java and JavaFX? The
    answer can be found in the following points:'
  prefs: []
  type: TYPE_NORMAL
- en: It is faster than the specifications seem to indicate. As noted, the default
    clock speed for the Pi is 900 MHz. But with its 900 MHz clock speed that can be
    safely overclocked to 1 GHz and its 1 GB RAM, this small computer can run really
    bigger and powerful applications.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Very wisely, the Foundation chose a CPU with floating-point support, often referred
    to as hard float, which offers greater performance than so-called soft float-only
    chips. Operating systems available for the Pi take advantage of that extra power
    and speed.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Finally, the Pi has a fairly beefy Graphics Processing Unit (GPU) with a fast
    3D core that is capable of BluRay quality playback, using H.264 at 40MBits/s ([https://www.raspberrypi.org/help/faqs/#generalSoCUsed](https://www.raspberrypi.org/help/faqs/#generalSoCUsed)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Which module should you buy?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'At the time of writing, there are five models of the Raspberry Pi: A, A+, B,
    B+, and since February 2015 the new model Pi 2 model B. Here is a comparison between
    the versions A+ and 2 B.'
  prefs: []
  type: TYPE_NORMAL
- en: '| Model A+ | Model 2 B |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| Costs ~$25 | Costs ~$35 |'
  prefs: []
  type: TYPE_TB
- en: '| One USB port | Four USB ports |'
  prefs: []
  type: TYPE_TB
- en: '| No Ethernet | Standard Ethernet connection |'
  prefs: []
  type: TYPE_TB
- en: '| 256 MB RAM | 1 GB RAM |'
  prefs: []
  type: TYPE_TB
- en: The model A+ is cheaper, but only has one USB port and no Ethernet connection.
    This may not be a problem. If you connect a powered USB hub to the Model A+ and
    then employ a USB-to-WiFi adapter, you have all the networking capabilities of
    Model B+. One main difference between the two models is the amount of RAM. Model
    A+ has 256 MB of RAM. The model B+ has a 512 MB RAM and 2 B has a 1 GB RAM. This
    is not upgradable on either model.
  prefs: []
  type: TYPE_NORMAL
- en: All Raspberry Pi microcomputers come with a slot for an SD memory card, audio
    out-jack, video ports for RCA and HDMI, and a row of pins for general purpose
    input and output. There are two additional connectors for display and a camera,
    but both require highly specialized hardware. Given a small price difference,
    typically $10 to $25, I recommend getting the model 2 B to start with. If you
    are purchasing more than one for, say, a classroom, the model A+ may be sufficient.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can buy a kit with all you need to start from any online store for no more
    than $100, and it would include:'
  prefs: []
  type: TYPE_NORMAL
- en: The new Raspberry Pi 2 (RPi2) quad-core 900 MHz 1GB RAM and CanaKit WiFi adapter
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Premium-quality 6-foot HDMI cable, GPIO to breadboard interface board, ribbon
    cable, breadboard, jumper wires, GPIO Quick Reference Card, and Resistor Colors
    Quick Reference Card
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 8 GB Samsung MicroSD card (a Raspberry Pi Foundation-recommended MicroSD card
    preloaded with NOOBS), a high-quality Raspberry Pi 2 case, and heat sink
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: RGB LED, 8 LEDs (blue/red/yellow/green), 15 resistors, 2 push button switches,
    and General Guide for Beginners to Electronic Components
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 2.5A USB power supply with 5-foot micro USB cable specially designed for the
    Raspberry Pi 2 (UL listed)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Which module should you buy?](img/B03998_06_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Typical kit components for a Raspberry Pi B Model 2
  prefs: []
  type: TYPE_NORMAL
- en: Buying the Raspberry Pi
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The Raspberry Pi Foundation in the United Kingdom makes the Raspberry Pi. Unfortunately,
    it has a history of being back-ordered. Fortunately, you can buy from several
    vendors and a few of them are listed on the main page of [https://www.raspberrypi.org/](https://www.raspberrypi.org/).
    You can also buy it from [http://www.amazon.com](http://www.amazon.com), although
    you will have to pay a bit more. Prices vary from what you will see here.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, check out [http://www.adafruit.com](http://www.adafruit.com). They
    are reasonably priced and also carry some useful accessories that you will need
    in your future projects. In these stores you can also find starter kits including
    the Raspberry Pi and the necessary components to start.
  prefs: []
  type: TYPE_NORMAL
- en: Related websites and documentation
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The Internet contains a wealth of information about the Raspberry Pi. As you
    work on more advanced topics, you will find it helpful to know where to find answers.
  prefs: []
  type: TYPE_NORMAL
- en: The official website for the Raspberry Pi Foundation is [http://www.rasberrypi.org](http://www.rasberrypi.org).
    It lists sources from which to purchase the Raspberry Pi microcomputer. It has
    a variety of tutorials and helpful forums.
  prefs: []
  type: TYPE_NORMAL
- en: For more information about the version of Linux running on the Raspberry Pi,
    visit [http://elinux.org/index.php?title=RPi_Hub&redirect=no](http://elinux.org/index.php?title=RPi_Hub&redirect=no).
    There is information about the general-purpose and input/output pins; Raspbian
    Wheezy, the version of Linux designed for the Raspberry Pi; and sample projects.
    You will also find information about other embedded systems, such as the **Minnow
    board** and **BeagleBoard**.
  prefs: []
  type: TYPE_NORMAL
- en: Neil Black has created a stellar beginner's guide to the Raspberry Pi and deserves
    a round of applause. Please visit [http://neil-black.co.uk/the-updated-raspberry-pi-beginners-guide](http://neil-black.co.uk/the-updated-raspberry-pi-beginners-guide)
    if you ever find yourself confused during the setup process.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, visit [http://www.adafruit.com](http://www.adafruit.com) to buy the
    Raspberry Pi as well as power supplies, motor control boards, and experimentation
    kits. If you cannot buy parts locally, this group is an excellent place to purchase
    accessories and other components.
  prefs: []
  type: TYPE_NORMAL
- en: Preparing the Raspberry Pi for JavaFX 8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Your Raspberry Pi will do nothing without an operating system, which is loaded
    from the SD Card. We need a way to interact with it by first installing the supported
    operating system, which in our case is Raspbian Wheezy; all official supported
    operating systems for the Pi are listed and can be downloaded from the link [http://www.raspberrypi.org/downloads/](http://www.raspberrypi.org/downloads/).
  prefs: []
  type: TYPE_NORMAL
- en: Then, we will configure the network settings for our Pi to connect it remotely.
    Finally, we will check the Java SE 8 version installed by default and proceed
    to check for updates, if not prepackaged with OS already.
  prefs: []
  type: TYPE_NORMAL
- en: As mentioned before, the last update doesn't include JavaFX so we will find
    a way to add it. Let's start preparing our SD card to install the Raspbian Wheezy
    operating system and have the Raspberry Pi up and running.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a bootable SD card
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Now, we are going to prepare our SD card with the Raspbian Wheezy OS, which
    will allow us to interact with our Raspberry Pi. This is a very important step.
    There are two ways to do this:'
  prefs: []
  type: TYPE_NORMAL
- en: Using NOOBS
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: NOOBS is an easy operating system installer that contains Raspbian. But the
    lite version doesn't bundle a Raspbian. It also provides a selection of alternative
    operating systems, which are then downloaded from the Internet and installed.
  prefs: []
  type: TYPE_NORMAL
- en: Beginners should start with the NOOBS method, but it requires an Internet connection
    with good speed to download the preferred OS.
  prefs: []
  type: TYPE_NORMAL
- en: If you have bought a kit that comes with a preinstalled NOOBS SD card, you can
    skip to the next step. Alternatively, if you need an SD card, you can order one
    from the Swag store at [http://swag.raspberrypi.org/products/noobs-8gb-sd-card](http://swag.raspberrypi.org/products/noobs-8gb-sd-card)
    or even download and set it up to your SD card yourself. All steps are provided
    at the link [http://www.raspberrypi.org/help/noobs-setup/](http://www.raspberrypi.org/help/noobs-setup/).
  prefs: []
  type: TYPE_NORMAL
- en: 'Burning Raspbian Wheezy OS to your SD card:'
  prefs: []
  type: TYPE_NORMAL
- en: 'This is my favorite setup as I have already downloaded the OS and will burn
    it directly to my SD card; here are the steps to do it from Mac OS X (make sure
    you have a valid SD card, with 4/8/16 GB memory and of class 10):'
  prefs: []
  type: TYPE_NORMAL
- en: We need to have our SD card formatted in FAT32\. We will do this easily with
    SD Formatter 4.0 for either Windows or Mac, which is available for download from
    the SD Association's site at [https://www.sdcard.org/downloads/formatter_4/eula_mac/index.html](https://www.sdcard.org/downloads/formatter_4/eula_mac/index.html).
  prefs: []
  type: TYPE_NORMAL
- en: 'Follow the instructions to install the software package:'
  prefs: []
  type: TYPE_NORMAL
- en: Insert your SD card into the computer or laptop's SD card reader and *make a
    note of the drive letter* allocated to it—for example, `/disk2` in my case.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In **SDFormatter**, select the drive letter for your SD card, go to **Format
    Option** and select **Overwrite format**, name it `RaspWheezy` (optional), and
    click on **Format**. It may take a while to format the SD depending on the size
    of the card.![Using NOOBS](img/B03998_06_03.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Formatting SD card with SDFormatter application
  prefs: []
  type: TYPE_NORMAL
- en: 'Once the format is completed, close SDFormatter. If you are on Mac or Linux,
    run the following command line from your terminal to check the disk letter and
    format type:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: In this case, the SD card is `/dev/disk2`, with the `DOS_FAT_32` format type
    and `RASPWHEEZY` as the name. On Windows. Open Windows Explorer and check the
    drive.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Do not get this wrong, or you may destroy all the data on the wrong `disk/card/drive`.
  prefs: []
  type: TYPE_NORMAL
- en: Download Raspbian Wheezy OS from the link [http://downloads.raspberrypi.org/raspbian_latest](http://downloads.raspberrypi.org/raspbian_latest),
    unzip it, and you should have the `2015-02-16-raspbian-wheezy.img` file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'From the command line on Mac or Linux, unmount the disk but don''t eject:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Then write the image to the SD card with the `dd` command line:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Once you have typed your password, the writing process begins and you have to
    wait till you get the prompt again. As this will take a few minutes, on Windows,
    you can use Win32DiskImager (It can be downloaded from [http://www.raspberry-projects.com/pi/pi-operating-systems/win32diskimager](http://www.raspberry-projects.com/pi/pi-operating-systems/win32diskimager)).
  prefs: []
  type: TYPE_NORMAL
- en: 'After the `dd` command finishes, eject the card:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Note that `dd` will not feedback any information until there is an error or
    it is finished; information will be shown and the disk will remount when complete.
    However, if you wish to view the progress, you can use the *Ctrl* + *T* shortcut.
    This generates **SIGINFO**, the status argument of your `tty`, and will display
    information about the process.
  prefs: []
  type: TYPE_NORMAL
- en: Congratulations, now mount your SD card to the Raspberry Pi and connect it to
    a proper monitor to start it up.
  prefs: []
  type: TYPE_NORMAL
- en: Configuring the Raspberry Pi
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Now, we need to set up the Pi for the first booting time and also configure
    a static IP in order to connect to it from our laptop and remotely:'
  prefs: []
  type: TYPE_NORMAL
- en: Mount the SD card we prepared previously.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Plug in your keyboard, mouse, and monitor cables.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Plug your WiFi Adapter into one of the USB ports.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, plug in the power cable to your Pi.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You should see some verbose output on the screen booting up the Raspbian OS.
    Proceed boldly and with no fear.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: On the first boot, the Raspberry Pi configuration screen will show up and will
    gave you a series of options that you can use to configure your Raspberry Pi.
    Basically, you will want to set up your time-zone and own locale configuration.
    Review the settings of memory split between CPU and GPU, or enable SSH. But for
    the most part, you can simply ignore them, move to the last step with the arrow
    keys, and hit Return.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If you selected something you don't like during the configuration process, you
    can restart the configuration by typing from the console `sudo raspi-config`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If the Raspberry Pi was correctly configured, you'll see a series of Linux boot
    messages scroll by followed by a request to log in. The default user log in is
    `pi` and the password is `raspberry`. Now, you'll be presented with a standard
    Linux prop. Congratulations, your Raspberry Pi is up-and-running.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Wheezy comes with a graphical user interface. Simply type `sudo startx` and
    you'll see a colorful user interface complete with games, word processors, and
    web browsers, as shown in the following screenshot:![Configuring the Raspberry
    Pi](img/B03998_06_04.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Raspberry Pi Desktop
  prefs: []
  type: TYPE_NORMAL
- en: The Raspberry Pi Desktop is the **Lightweight X11 Desktop Environment** (**LXDE**).
    Spend some time exploring it. You'll find it very familiar, although a bit slower
    than your high-powered desktop computer.
  prefs: []
  type: TYPE_NORMAL
- en: 'When you''re done with LXDE, simply log out and you''ll be back at the Linux
    prompt. For the sake of the information on your SD card, it''s important to gracefully
    shut down your Raspberry Pi. Before you yank out the power cord, issue a shutdown
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: This will make sure that everything is written to the SD card before all the
    processes are shut down. Now, you can safely pull out the power cord and that's
    the extent of the on/off switch for the Raspberry Pi.
  prefs: []
  type: TYPE_NORMAL
- en: Congratulations, you have finished your first session with your Raspberry Pi.
  prefs: []
  type: TYPE_NORMAL
- en: Connecting to the Raspberry Pi remotely
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Usually, you will connect to your Raspberry Pi using peripherals and monitor,
    but this will not always be the case since you will need to control your Pi from
    your computer, browser, or even mobile at the development stage or when the Pi
    itself is used as a cool server controlling your home appliances.
  prefs: []
  type: TYPE_NORMAL
- en: Giving your Raspberry Pi a fixed network address isn't necessary, but it is
    strongly recommended. Doing so means you always connect to your Pi using the same
    address (or name, if you create an entry in your hosts file), and thus it removes
    one potential variable from your development process.
  prefs: []
  type: TYPE_NORMAL
- en: It's also a good idea to update your network DHCP device/router with the Pi's
    IP address so that it doesn't try to assign it to another device on your network.
    The steps required to do so will vary by switch/router manufacturer.
  prefs: []
  type: TYPE_NORMAL
- en: We will install VNC server on our Raspberry Pi. **Virtual Network Computing**
    (**VNC**) allows you to control one computer from another over a network. It provides
    a graphical user interface, including the mouse and keyboard. In our case, it
    will allow us to see and use the Raspberry Pi GUI without the need for a physical
    keyboard and mouse connected to the Raspberry Pi.
  prefs: []
  type: TYPE_NORMAL
- en: Right now, this is a convenience and if you're happy with your current mouse,
    keyboard, and monitor setup, you can skip this part. When you begin experimenting
    with devices that require one or more USB ports, VNC will become a necessity.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are five steps to set up VNC:'
  prefs: []
  type: TYPE_NORMAL
- en: Connect to a home WiFi Internet connection.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Install VNC on the Raspberry Pi.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set up to start at boot.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set up a static IP address.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Connect to VNC with a client.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Connecting to WiFi Internet connection, Raspbian Wheezy includes a WiFi configuration
    utility. Also, all Raspbians released after October 28, 2012 are prebundled with
    this utility.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Setting up WiFi requires that your router is broadcasting the SSID. Make sure
    you have *Broadcast SSID* set up on your router! This will not work with private
    SSID setups.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, Let''s connect to the Raspberry Pi remotely:'
  prefs: []
  type: TYPE_NORMAL
- en: From the Raspbian desktop, go to **Menu** | **Preferences** | **WiFi Configuration**,
    as shown in the following screenshot:![Connecting to the Raspberry Pi remotely](img/B03998_06_05.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Choosing the WiFi Configuration utility
  prefs: []
  type: TYPE_NORMAL
- en: Double-click on the icon and you will see the following window:![Connecting
    to the Raspberry Pi remotely](img/B03998_06_06.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: WiFi Configuration utility GUI
  prefs: []
  type: TYPE_NORMAL
- en: Click on the **Scan** button and a second window will open. Find your wireless
    access point in the list and double-click on it. This will open another window:![Connecting
    to the Raspberry Pi remotely](img/B03998_06_07.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: List of access points
  prefs: []
  type: TYPE_NORMAL
- en: Enter your password in the `PSK` field and then click on **Add**. When you look
    at the first window, you should see that the connection is all set up for use.![Connecting
    to the Raspberry Pi remotely](img/B03998_06_08.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Final status in adding an access point
  prefs: []
  type: TYPE_NORMAL
- en: You can connect or disconnect using the buttons. You can see in the preceding
    screenshot that the IP address of the Pi is shown at the bottom of the window.
  prefs: []
  type: TYPE_NORMAL
- en: Note that there's a manual procedure to set up the WiFi connection on a terminal.
    This requires editing the `config` files and manually adding the SSID and password
    of the network. For more information, go to [https://www.raspberrypi.org/documentation/configuration/wireless/wireless-cli.md](https://www.raspberrypi.org/documentation/configuration/wireless/wireless-cli.md).
  prefs: []
  type: TYPE_NORMAL
- en: Congratulations, your Pi is connected to Internet. Now let's install a VNC server.
  prefs: []
  type: TYPE_NORMAL
- en: Installing VNC on the Raspberry Pi
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Now that you have an Internet connection, you can install a VNC server on your
    Raspberry Pi. If you''re using Raspbian Wheezy, this is simple. At a command prompt,
    enter the following line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'You''ll get the message: **Do you want to continue? Yes or No?**'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s answer with a capital *Y* and take a break. When the installation is
    complete, enter the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'You''ll be asked to create a password, I use *raspberry*. It notes that the
    password is longer than eight characters; go ahead and retype `raspberry`. Next,
    you''ll be asked: **Would you like to enter a view only password?** Enter *N*
    for no.'
  prefs: []
  type: TYPE_NORMAL
- en: Congratulations, you're running VNC on your Raspberry Pi.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up VNC to start at boot
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'As you become more advanced, you may not always need VNC but let''s assume
    you want VNC to run every time you start your Raspberry Pi:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Edit the `rc.local` file using the following command from the Pi **LX Terminal**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Scroll to the bottom and add the following line above `exit 0`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Save the file and restart your Raspberry Pi using the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Now, every time you start your Raspberry Pi, VNC will be available.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Setting up a static IP address
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Connecting with the Raspberry Pi over VNC requires a static IP address, one
    that doesn''t change. I''ll show you how to get that for wired and wireless networking
    in the next few steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'If you are on a home network, you''ll need to discover a usable IP address.
    To do this, turn to your Raspberry Pi, open Pi LX Terminal, and type:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, type the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Gather the following information: *current IP* (if you want to keep it), *netmask*,
    *gateway*, *destination*, and *broadcast*. Write these down, you''ll need them
    soon!'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'On the Pi, make a backup of `/etc/network/interfaces` by running the following
    command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Modify the `interfaces` file with the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Change the `interfaces` file from:![Setting up a static IP address](img/B03998_06_09.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Interfaces file before editing
  prefs: []
  type: TYPE_NORMAL
- en: Select the IP numbers that suit your network; also change `wpa-ssid` to your
    wireless network name and `wpa-psk` to wireless password:![Setting up a static
    IP address](img/B03998_06_10.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Interfaces file after editing
  prefs: []
  type: TYPE_NORMAL
- en: Save the file and restart your Raspberry Pi. These settings work for both wired
    and wireless connections. Congratulations, you can now connect to your Pi with
    the VNC client.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Auto login in the Raspberry Pi
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Like most people, you might have bought the Raspberry Pi to build your own appliance
    for home or office. The next thing you should do is set up the Raspberry Pi, connect
    your peripherals, and install or develop the necessary software.
  prefs: []
  type: TYPE_NORMAL
- en: What you want at the end of your project is to power on the appliance and have
    it should show you all the magic you were expecting.
  prefs: []
  type: TYPE_NORMAL
- en: 'The spoiler comes when the Pi boots to the login prompt and waits for you to
    enter the username and password. So, let''s automate the Raspberry Pi login:'
  prefs: []
  type: TYPE_NORMAL
- en: 'From your Pi, open a terminal and edit the `inittab` file with the following
    command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'Disable the `getty` program by navigating to the following line in `inittab`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Add a `#` at the beginning of the line to comment it out, as shown in the following
    line:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'Add a login program to `inittab` just below the commented line:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: This will run the login program with `pi` user and without any authentication.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Save and exit by pressing *Ctrl* + *X*, followed by *Y* to save the file, and
    then press *Enter* to confirm the filename.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Reboot the Pi and it will boot straight to the shell prompt `pi@raspberrypi`
    without prompting you to enter your username or password.
  prefs: []
  type: TYPE_NORMAL
- en: Connecting to VNC with a client
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Before going any further, let's make sure everything is working correctly. To
    do this, you'll need a VNC client. If you're using a Macintosh with a recent version
    of Mac OS X, this is simple.
  prefs: []
  type: TYPE_NORMAL
- en: Go to **Finder** | **Go** | **Connect to Server**. Enter `vnc://` and the IP
    address you have given to your Raspberry Pi. In my case, it was 192.168.2.150
    followed by a colon and the number 5901, as shown in the following screenshot.
    The full URL should be **vnc://192.168.2.150:5901**.
  prefs: []
  type: TYPE_NORMAL
- en: '![Connecting to VNC with a client](img/B03998_06_11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Connect to the Pi VNC server.
  prefs: []
  type: TYPE_NORMAL
- en: As shown in the image `5901` is the number of the port the Raspberry Pi VNC
    server is listening to. Hit **Connect**. Don't worry about the screen sharing
    encryption, hit **Connect** again. Now type in the password you created earlier
    (`raspberry`). If everything is working correctly, you'll see a large raspberry.
    Congratulations!
  prefs: []
  type: TYPE_NORMAL
- en: If you're not on a Macintosh computer, you'll need to download a VNC client.
    You can obtain free viewers from [http://realvnc.com/](http://realvnc.com/). There
    are clients for Windows, iOS, Android, and the Chrome browser. Yes, you can control
    your Raspberry Pi from your cell phone.
  prefs: []
  type: TYPE_NORMAL
- en: JavaFX 8 development prerequisites
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now as we have set up and configured our Raspberry Pi for development, we need
    to install the same correct matching JDK 8 build version on both our development
    machine and the Pi. This is very important to avoid library/versioning issues
    when running our JavaFX 8 application, and this is what we are going to do next.
  prefs: []
  type: TYPE_NORMAL
- en: Installing Java SE 8 on the Raspberry Pi
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'At the time of writing, Raspbian Wheezy is shipped with JDK 8 preinstalled.
    To check, simply type the following at your Pi command prompt:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'You will see something like this, depending upon the version that is currently
    installed and accessible:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Installing Java SE 8 on the Raspberry Pi](img/B03998_06_12.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Raspbian Wheezy Java version on Raspberry Pi
  prefs: []
  type: TYPE_NORMAL
- en: 'The important bit is the second line: if it doesn''t say 1.8.n, you''ll need
    to install JDK8.'
  prefs: []
  type: TYPE_NORMAL
- en: Installing Java SE 8
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We have already installed our JDK 8 before and all necessary steps are described
    in the *Installing Java SE 8 JDK* section in [Chapter 1](ch01.html "Chapter 1. Getting
    Started with JavaFX 8"), *Getting Started with JavaFX 8*.
  prefs: []
  type: TYPE_NORMAL
- en: Adding JavaFX
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As mentioned previously, Oracle has withdrawn its support for JavaFX Embedded.
    If you have installed JDK 8u45 or the prebundled version installed on Raspbian
    Wheezy, there is no `jfxrt.jar` bundled, so we need to provide it in order to
    run JavaFX applications on our Pi.
  prefs: []
  type: TYPE_NORMAL
- en: One-way to do this is to follow the tutorial at [https://wiki.openjdk.java.net/display/OpenJFX/Cross+Building+for+ARM+Hard+Float](https://wiki.openjdk.java.net/display/OpenJFX/Cross+Building+for+ARM+Hard+Float)),
    cross-building OpenJFX for ARM. This is for really advanced developers.
  prefs: []
  type: TYPE_NORMAL
- en: An easier way is to download a prebuilt distribution such as `armv6hf-sdk.zip`
    hosted on the JavaFXPorts project ([https://bitbucket.org/javafxports/arm/downloads](https://bitbucket.org/javafxports/arm/downloads)).
  prefs: []
  type: TYPE_NORMAL
- en: 'Once you have downloaded `armv6hf-sdk.zip`, unzip it and add this command-line
    option to attach the external source to the `classpath` with the extension mechanism:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: Alternatively, you can copy the contents of `rt/lib/ext` and `rt/lib/arm` from
    this zip into your JVM folders, avoiding the use of the extension mechanism.
  prefs: []
  type: TYPE_NORMAL
- en: Configuring NetBeans for the Raspberry Pi
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'NetBeans 8 adds the capability to point to a remote JDK and use it to debug
    and execute programs remotely that you write locally on your development machine.
    It even deploys your applications automatically and seamlessly. As documented
    by José Pereda in his article at [http://netbeans.dzone.com/articles/nb-8-raspberry-pi-end2end](http://netbeans.dzone.com/articles/nb-8-raspberry-pi-end2end),
    you can enable this capability with the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Start NetBeans on your machine.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Choose **Tools** from the menu bar and then select **Java Platforms**. Click
    on the **Add Platform** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the **Remote Java Standard Edition** radio button and click on **Next**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Provide the following entries (shown in the following screenshot as an example):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Platform Name**: `JavaFX on Raspberry Pi JDK 8`'
  prefs: []
  type: TYPE_NORMAL
- en: '**Host**: Enter the static IP address or hostname of your Raspberry Pi you
    already assigned before'
  prefs: []
  type: TYPE_NORMAL
- en: '**Username**: `pi`'
  prefs: []
  type: TYPE_NORMAL
- en: '**Password**: `raspberry`'
  prefs: []
  type: TYPE_NORMAL
- en: '**Remote JRE Path**: `/usr/lib/jvm/jdk-8-oracle-arm-vfp-hflt/jre`'
  prefs: []
  type: TYPE_NORMAL
- en: '![Configuring NetBeans for the Raspberry Pi](img/B03998_06_13.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Setting up a remote platform for Pi
  prefs: []
  type: TYPE_NORMAL
- en: Click on the **Finish** button and wait for NetBeans to establish and configure
    the remote JDK connection.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Close** button once the remote JDK is in place.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now that we've completed the setup, you should have a development environment
    that is among the best available to develop JavaFX 8 applications for the Raspberry
    Pi. So let's get started!
  prefs: []
  type: TYPE_NORMAL
- en: The switch application
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The switch application is very simple in its nature, but the idea is mainly
    divided into two main points: how to run JavaFX 8 applications on Raspberry Pi
    and how to control the outside world from the Raspberry Pi **General-purpose input/output**
    (**GPIO**). We will use a project called **Pi4j** for such purpose.'
  prefs: []
  type: TYPE_NORMAL
- en: The idea is simple; we are going to create a JavaFX application that will act
    as a switch controller to control a LED associated to an electrical circuit connected
    to your Raspberry Pi.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following screenshots show the application in the ON and OFF states:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The switch application](img/B03998_06_14.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Switch Application ON state
  prefs: []
  type: TYPE_NORMAL
- en: .
  prefs: []
  type: TYPE_NORMAL
- en: '![The switch application](img/B03998_06_15.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Switch Application OFF state
  prefs: []
  type: TYPE_NORMAL
- en: What is the Pi4J library?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The Pi4j library ([http://pi4j.com](http://pi4j.com)) is a project intended
    to provide a bridge between the native libraries and Java for full access to the
    Raspberry Pi features and controls, so you can easily access the GPIO pins for
    your Java project.
  prefs: []
  type: TYPE_NORMAL
- en: Visit [http://pi4j.com/pins/model-2b-rev1.html](http://pi4j.com/pins/model-2b-rev1.html)
    for Raspberry Pi 2 model B (J8 header) for GPIO pin numbering. Also, your kit's
    GPIO adapter may come with a GPIO header quick reference.
  prefs: []
  type: TYPE_NORMAL
- en: For this example, you will need some basic electronic components such as a LED,
    a resistor, and a breadboard. If those are not included in your kit, you can acquire
    them from online stores.
  prefs: []
  type: TYPE_NORMAL
- en: Circuit setup
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Now we need to set up our circuit by adding a LED with a 220 Ohms pull-up resistor
    in a breadboard, and connect the anode to GPIO pin #1 and cathode to the GPIO
    GND pin, as shown in the following figure (CanaKit comes with a general assembly
    guide for the most commonly used electronic parts):'
  prefs: []
  type: TYPE_NORMAL
- en: '![Circuit setup](img/B03998_06_16.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Switcher application circuit setup
  prefs: []
  type: TYPE_NORMAL
- en: The application
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'As previously mentioned, the application UI contains two buttons. **Exit Me!**
    is responsible for shutting down the GPIO controller and closing the application.
    The second button is a toggle button (**ON**/**OFF**) that works as a switch.
    It has two states: when selected, its state is true and it becomes false when
    not selected. Additionally, we change its label programmatically to indicate the
    state of the current controlled LED.'
  prefs: []
  type: TYPE_NORMAL
- en: In addition, there is one circle shape that mimics the physical LED state. So,
    when the toggle button is ON, then the circle will be filled with red. OFF turns
    it to black, which is the default state.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, at the bottom of the application scene, we add a `TitledPane` labeled
    Pi Information displaying some Raspberry Pi information.
  prefs: []
  type: TYPE_NORMAL
- en: 'By looking at the `SwitchUIController.java` class, you will find that we have
    very important fields to declare before interacting with the `Pi4J` library:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'The first line is responsible for creating a new GPIO controller instance,
    which is done in the `initialize()` method via `GpioFactory` as it includes a
    `createInstance` method to create the GPIO controller:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Your project should only instantiate a single GPIO controller instance and that
    instance should be shared across your project.
  prefs: []
  type: TYPE_NORMAL
- en: 'To access a GPIO pin, you must first provision the pin. Provisioning configures
    the pin based on how you intend to use it. Provisioning can automatically export
    the pin, set its direction, and set up any edge detection for interrupt-based
    events:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'This is how to provision an output pin #1\. Your program will be able to control
    the state only of those pins that are provisioned as output pins. Output pins
    are used for controlling relays, LEDs, and transistors.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Now all we want to do is to control the LED from our application using the
    toggle button. This is done via the `doOnOff()` event function that is registered
    to toggle the button, as shown in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: The `P14J` library provides a number of convenience methods for controlling
    or writing a state to a GPIO pin. In our application, we use `pin.high()` to turn
    the LED on and `pin.low()` to turn the LED off.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, when the application exits, we have to shut down the GPIO controller.
    The Pi4J project provides an implementation to automatically set GPIO pin states
    as inactive when the application is terminated.
  prefs: []
  type: TYPE_NORMAL
- en: 'This is useful to ensure that the GPIO pins states are not active or leaving
    some activity engaged if the program is shutdown. We can simply do this with the
    following line of code from the GPIO instance we have created previously:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: When you press the toggle button to turn ON the LED, you will see your green
    LED glows. When it is OFF, you will see that the LED is faded.
  prefs: []
  type: TYPE_NORMAL
- en: '![The application](img/B03998_06_17.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Application circuit—LED OFF
  prefs: []
  type: TYPE_NORMAL
- en: '![The application](img/B03998_06_18.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Application circuit—LED ON
  prefs: []
  type: TYPE_NORMAL
- en: Next, let's configure our project to run our JavaFX switch application directly
    on the Raspberry Pi from NetBeans.
  prefs: []
  type: TYPE_NORMAL
- en: Using NetBeans with the Pi
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'After discussing our application logic and seeing how it works, it''s time
    for the best part: building your application and running it on the Raspberry Pi
    using NetBeans. The steps are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Right-click on the `Chapter6` project in NetBeans **Projects** tab and select
    **Properties**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: From the **Project Properties** box, select **Run** from the **Categories**
    menu to the left. You will see a dialog similar to the following screenshot:![Using
    NetBeans with the Pi](img/B03998_06_19.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Project Properties dialog and the Run incarnation
  prefs: []
  type: TYPE_NORMAL
- en: Click on the **New** button to the right of the selected **Configuration**.
    Set a name for the **New Configuration** (`Pi Remote Config`) and click on the
    **OK** button, as shown in the following screenshot:![Using NetBeans with the
    Pi](img/B03998_06_20.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: New Configuration
  prefs: []
  type: TYPE_NORMAL
- en: Now you have to associate a remote JDK with your remote configuration. To do
    so, click on the combo box labeled **Runtime Platform** and select `JavaFX on
    Raspberry Pi JDK 8` that you configured earlier. Don't forget to add the path
    for `jfxrt.jar` in **VM Options**:![Using NetBeans with the Pi](img/B03998_06_21.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Remote Pi JDK association
  prefs: []
  type: TYPE_NORMAL
- en: 'The final step is to build and deploy the application to the Raspberry Pi.
    To do so, go to the **Run** menu, select **Run Project,** and watch the NetBeans
    Output window/tab. If you keep an eye on the Pi''s screen when running the application,
    you will see the following output messages:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we took a credit card-sized microcomputer no larger than a
    deck of playing cards and transformed it into a JavaFX Switch controller machine.
    Along the way, you learned about the Raspberry Pi, how to create a bootable SD
    card, how to install an operating system to it, how to configure it for best performance
    and remote connectivity, how to give it a fixed network (IP) address, and how
    to connect to the Pi from your development machine.
  prefs: []
  type: TYPE_NORMAL
- en: We also revisited how to install JDK 8/ JavaFX 8 to both the Raspberry Pi and
    your development machine, and you learned how to install and configure NetBeans
    on your development machine so that it can use the JDK on the Pi as a remote platform
    for debugging and execution.
  prefs: []
  type: TYPE_NORMAL
- en: With both your development machine and the Raspberry Pi ready for action, we
    discussed the principles needed to develop a simple but great application to control
    the outside world from the Raspberry Pi using JavaFX and a few select tools/APIs,
    including Pi4j, to control GPIO.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, you saw how to remotely deploy your application from NetBeans to your
    Raspberry Pi, all with just a few clicks.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we are going to monitor a temperature sensor, measuring
    how hot your blood is from an Arduino board.
  prefs: []
  type: TYPE_NORMAL
