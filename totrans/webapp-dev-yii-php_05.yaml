- en: Chapter 5. Managing Issues
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous chapter, we delivered the basic functionality around the project
    entity. The project is at the foundation of the TrackStar application. However,
    projects by themselves are not terribly useful. Projects are the basic containers
    of the issues we want this application to manage. Since managing project issues
    is the main purpose of this application, we want to start adding in some basic
    issue-management functionality.
  prefs: []
  type: TYPE_NORMAL
- en: Feature planning
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We already have the ability to create and list projects, but there is no way
    to manage the issues related to the projects. At the end of this chapter, we want
    the application to expose all CRUD operations on the project issues or tasks.
    (We tend to use the terms *issue* and *task* interchangeably, but in our data
    model, a task will actually be just one type of issue.) We also want to restrict
    all the CRUD operations on the issues to be within the context of a specific project.
    That is, *issues* belong to *projects*. The user must have selected an existing
    project to work within, prior to being able to perform any CRUD operations on
    the project's issues.
  prefs: []
  type: TYPE_NORMAL
- en: 'In order to achieve the previously mentioned outlined goals, we need to:'
  prefs: []
  type: TYPE_NORMAL
- en: Design the database schema and build the objects to support project issues
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Create the Yii model classes that will allow the application to easily interact
    with the database table(s) we created
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Create the controller class that will house the functionality to allow us to:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Create new issues
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Retrieve a list of existing issues within a project from the database
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Update/edit existing issues
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Delete existing issues
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Create views to render user interfaces for these (above) actions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This list is plenty to get us going. Let's get started by making the necessary
    database changes.
  prefs: []
  type: TYPE_NORMAL
- en: Designing the schema
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Back in [Chapter 3](ch03.html "Chapter 3. The TrackStar Application"), *The
    TrackStar Application*, we proposed some initial ideas about the *issue* entity.
    We proposed that it have a *name*, a *type*, an *owner*, a *requestor*, a *status*,
    and a *description*. We also mentioned when we created the `tbl_project` table
    that we would be adding basic audit history information to each table we create,
    to track the dates, times, and users who update the tables. However, types, owners,
    requestors, and statuses are themselves their own entities. To keep our model
    flexible and extensible, we'll model some of these separately. *Owners* and *requestors*
    are both users of the system and as such will be housed in a separate table called
    `tbl_user`. We have already introduced the idea of a *user* in the `tbl_project`
    table, as we added the columns `create_user_id` and `update_user_id` to track
    the identifier of the user who initially created the project, as well as the user
    who was responsible for last updating the project details. Even though we have
    not formally introduced that table yet, these fields are intended to be foreign
    keys to a `user` table. The `owner_id` and `requestor_id` column in the `tbl_issue`
    table will also be foreign keys that relate back to this `tbl_user` table.
  prefs: []
  type: TYPE_NORMAL
- en: We could model the type and status attributes in the same manner. However, until
    our requirements demand this extra complexity in the model, we can keep things
    simple. The `type` and `status` columns on the `tbl_issue` table will remain integer
    values that can be mapped to named types and statuses. However, rather than complicating
    our model by using separate tables, we will model these as basic class constant
    (`const`) values within the AR model class we create for the issue entity. Don't
    worry if all of this is a little fuzzy; it will make more sense in the coming
    sections.
  prefs: []
  type: TYPE_NORMAL
- en: Defining some relationships
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Since we are introducing the `tbl_user` table, we need to go back and define
    the relationship between the users and projects. Back in [Chapter 3](ch03.html
    "Chapter 3. The TrackStar Application"), *The TrackStar Application*, we specified
    that users (we called them project members) would be associated with zero or more
    projects. We also mentioned that projects can also have many (one or more) users.
    Since projects can have many users and these users can be associated with many
    projects, we call this a **many-to-many** relationship between projects and users.
    The easiest way to model a many-to-many relationship in a relational database
    is to use an association table (also called an assignment table). So we need to
    add this table to our model as well.
  prefs: []
  type: TYPE_NORMAL
- en: The following figure outlines a basic entity-relationship between the users,
    projects, and issues. Projects can have zero to many users. A user needs to be
    associated with at least one project but can be associated with many. Issues belong
    to one and only one project, while projects can have from zero to many issues.
    Finally an issue is assigned to (or requested by) one single user.
  prefs: []
  type: TYPE_NORMAL
- en: '![Defining some relationships](graphics/8727_05_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Building objects and their relationships
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We have to create three new tables, namely `tbl_issue`, `tbl_user`, and our
    association table `tbl_project_user_assignment` . You may recall that we introduced
    Yii database migrations in [Chapter 4](ch04.html "Chapter 4. Project CRUD"), *Project
    CRUD*. As we are now ready to make a change to our database structure, we'll use
    Yii migrations for this as to better manage the application of these changes.
  prefs: []
  type: TYPE_NORMAL
- en: 'Since we are adding these to our database all at the same time, we''ll do this
    in one migration. From the command line, change to the `protected/` directory
    and issue the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: This will result in a new migration file being added to the `protected/migrations/`
    directory.
  prefs: []
  type: TYPE_NORMAL
- en: 'Open up this newly created file and implement the safeUp() and safeDown() method
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Here we have implemented the `safeUp()` and `safeDown()` methods rather than
    the standard `up()` and `down()` methods. Doing this runs these statements in
    a database transaction with the intent that they are committed or rolled back
    as a single unit.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In fact, since we are using MySQL, these `create table` and `drop table` statements
    will not be run in a single transaction. Certain MySQL statements cause implicit
    commits and as such using the `safeUp()` and `safeDown()` methods in this case
    is not of much use. We will leave this in to help the user understand why Yii
    migrations offer the `safeUp()` and `safeDown()` methods. See [http://dev.mysql.com/doc/refman/5.5/en/implicit-commit.html](http://dev.mysql.com/doc/refman/5.5/en/implicit-commit.html)
    for more details about this.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now we can run the migration from the command line:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Building objects and their relationships](graphics/8727_05_17.jpg)'
  prefs: []
  type: TYPE_IMG
- en: This migration has created our necessary database objects. Now we can turn our
    focus to creating our active record model classes.
  prefs: []
  type: TYPE_NORMAL
- en: Creating active record model classes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that we have these tables created, we need to create the Yii model AR classes
    to allow us to easily interact with these tables within the application. We did
    this when creating the `Project` model class in the previous chapter, by using
    the Gii code generation tool. We'll remind you of the steps here, but spare you
    of all the screenshots. Please refer to [Chapter 4](ch04.html "Chapter 4. Project
    CRUD"), *Project CRUD* for the more detailed walkthrough of using the Gii tool
    to create an active record class.
  prefs: []
  type: TYPE_NORMAL
- en: Creating the Issue model class
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Navigate to the Gii tool via `http://localhost/trackstar/index.php?r=gii` and
    select the **Model Generator** link. Leave the table prefix as **tbl_**. Fill
    in the **Table Name** field as `tbl_issue`, which will autopopulate the **Model
    Class** field as **Issue**. Also ensure that the **Build Relations** checkbox
    is checked. This will ensure that our relationships are automatically created
    for us in our new model class.
  prefs: []
  type: TYPE_NORMAL
- en: Once the form is filled out, click on the **Preview** button to get a link to
    a pop up that will show you all of the code that is about to be generated. Then
    click on the **Generate** button to actually create the new `Issue.php` model
    class file in the `/protected/models/` directory.
  prefs: []
  type: TYPE_NORMAL
- en: Creating the User model class
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This is probably becoming old-hat for you at this point, so we are going to
    leave the creation of the `User` AR class as an exercise for you. This particular
    class becomes much more important in the next chapter, when we dive into user
    authentication and authorization.
  prefs: []
  type: TYPE_NORMAL
- en: You may be asking, "What about the AR class for the `tbl_project_user_assignment`
    table?". Although one could create an AR class for this table, it is not necessary.
    The AR model provides an **Object Relational Mapping** (**ORM**) layer to our
    application to help us work much more easily with our domain objects. However,
    *ProjectUserAssignment* is not a domain object of our application. It is simply
    a construct in a relational database to help us model and manage the many-to-many
    relationship between the projects and users. Maintaining a separate AR class to
    handle the management of this table is extra complexity that we can avoid for
    the time being. We can manage the inserts, updates, and deletes on this table
    using Yii's DAO directly.
  prefs: []
  type: TYPE_NORMAL
- en: Creating the issue CRUD operations
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now that we have our issue AR class in place, we can turn to building the necessary
    functionality to manage our project issues. We''ll again lean on the Gii code
    generation tool to help us create the basics of this functionality. We did this
    in detail for the projects in the previous chapter. I''ll remind of you of the
    basic steps for Issues here, once again:'
  prefs: []
  type: TYPE_NORMAL
- en: Navigate to the Gii generator menu at `http://localhost/trackstar/index.php?r=gii`,
    and select the **Crud Generator** link.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Fill out the form using **Issue** as the value for the **Model Class** field.
    This will autopopulate the **Controller ID** to also be **Issue**. The **Base
    Controller Class** and **Code Template** fields can remain their predefined default
    values.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Preview** button to get a list of all the files that the Gii
    tool is proposing to create. The following screenshot shows this list of files:![Creating
    the issue CRUD operations](graphics/8727_05_02.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You can click on each individual link to preview the code to be generated. Once
    satisfied, click on the **Generate** button to have all of these files created.
    You should receive the following message of success:![Creating the issue CRUD
    operations](graphics/8727_05_03.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Using the issue CRUD operations
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s try this out. Either click on the **try it now** link shown in the previous
    screenshot or simply navigate to `http://localhost/trackstar/index.php?r=issue`.
    You should be presented with something similar to what is shown in the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Using the issue CRUD operations](graphics/8727_05_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Creating a new issue
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Since we have not yet added any new issues, there are none to list. Let''s
    change that and create a new one. Click on the **Create Issue** link. (If this
    takes you to the login page, then log in using either `demo/demo` or `admin/admin`.
    You''ll properly be redirected after a successful login.) You should now see a
    new Issue-Input form similar to what is shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating a new issue](graphics/8727_05_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: When looking at this input form, we can see that it has an input field for every
    column in the database table, just as it is defined in the database table. However,
    as we know from when we designed our schema and built our tables, some of these
    fields are not direct input fields but rather represent relationships to other
    entities. For example, rather than having a **Type** freeform text-input field
    on this form, we should use a drop-down input form field that is populated with
    choices of the issue types that are allowed. A similar argument could be made
    for the **Status** field. The **Owner** and **Requester** fields should also be
    drop-downs, exposing choices of the names of the users who have been assigned
    to work on the project under which the issue resides. Also, since all issue management
    should be taking place within the context of a specific project, the **Project**
    field should not even be a part of this form at all. Lastly, the **Create Time**,
    **Create User**, **Update Time**, and **Update User** fields are all values that
    should be calculated and determined once the form is submitted, and should not
    be available for the user to directly manipulate.
  prefs: []
  type: TYPE_NORMAL
- en: It seems we have identified a number of corrections we would like to make on
    this initial input form. As we mentioned in the previous chapter, the autocreated,
    CRUD "scaffolding" code that is generated by the Gii tool is just a starting point.
    Rarely is it enough on its own to meet all the specific functionality needs of
    an application.
  prefs: []
  type: TYPE_NORMAL
- en: Adding drop-down fields
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: We'll start with adding a drop-down for the issue types. Issues have just three
    types, namely *Bugs*, *Features*, and *Tasks*. What we would like to see when
    creating a new issue is a drop-down, input-type form field with these three choices.
    We will achieve this by having the `Issue` model class itself provide a list of
    its available types. Since we did not create a separate database table to hold
    our issue types, we'll add these as class constants directly to our `Issue` active
    record model class.
  prefs: []
  type: TYPE_NORMAL
- en: 'At the top of the `Issue` model class, add the following three constant definitions:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Now add a new method to this class, `Issue::getTypeOptions()`, which will return
    an array based on these defined constants:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: We now have a way to retrieve the available list of issue types, but we still
    don't have a drop-down field in the input form that displays these values that
    we can choose from. Let's add that now.
  prefs: []
  type: TYPE_NORMAL
- en: Adding the issue type drop-down
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Open up the file containing the new issue creation form `protected/views/issue/_form.php`
    and find the lines that correspond to the **Type** field on the form:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'These lines need a little clarification. In order to understand this, we need
    to refer to some code towards the top of the `_form.php` file, which is given
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: This is defining the `$form` variable using the `CActiveForm` widget in Yii.
    **Widgets** are going to be covered in much more detail later. For now, we can
    understand this code by understanding `CActiveForm` better. `CActiveForm` can
    be thought of as a helper class that provides a set of methods to help us with
    creating forms that are associated with a data model class. In this case, it is
    being used to create an input form based on our `Issue` model class.
  prefs: []
  type: TYPE_NORMAL
- en: 'To fully understand the variables in our view file, let''s also review our
    controller code that is rendering the view file(s). As has been previously discussed,
    one way to pass data from the controller to the view is by explicitly declaring
    an array, the keys of which will be the names of the available variables in the
    view files. Since this is the create action for a new issue, the controller method
    rendering the form is `IssueController::actionCreate()`. This method is listed
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Here we see that when the view is being rendered, it is being passed an instance
    of the `Issue` model class, which will be available in the view as a variable
    called `$model`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now let''s go back to the code that is responsible for rendering the **Type**
    field on the form. The first line is:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'This line is using the `CActiveForm::labelEx()` method to render an HTML label
    for the issue model attribute `type_id`. It takes in an instance of the model
    class and the corresponding model attribute for which we want a label generated.
    The model class `Issue:: attributeLabels()` method will be used to determine the
    label. If we take a peek at that method listed below, we see that the attribute
    `type_id` is mapped to a label of `''Type''`, which is exactly what we see rendered
    as the label to this form field:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Using the `labelEx()` method is also what is responsible for our little red
    asterisks next to our required fields. The `labelEx()` method will add an additional
    `CSS` class name (`CHtml::requiredCss`, which defaults to '`required`') and asterisk
    (using `CHtml::afterRequiredLabel`, which defaults to `' <span class="required">*</span>'`)
    when the attribute is required.
  prefs: []
  type: TYPE_NORMAL
- en: The next line, `<?php echo $form->textField($model,'type_id'); ?>`, uses the
    `CActiveForm::textField()` method to render a text-input field for our `Issue`
    model attribute `type_id`. Any of the validation rules defined for `type_id` in
    the model class `Issue::rules()` method will be applied as form validation rules
    to this input form.
  prefs: []
  type: TYPE_NORMAL
- en: Finally the line `<?php echo $form->error($model,'type_id'); ?>` uses the `CActiveForm::error()`
    method to render any validation errors associated with the `type_id` attribute
    upon submission.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can try out this validation with the type field. The `type_id` column is
    defined as an integer type in our MySQL schema definition, and because of this,
    Gii generated a validation rule in the `Issue::rules()` method to enforce this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'So if we attempt to submit a string value in our **Type** form field, we will
    receive an inline error right under the field, as depicted in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Adding the issue type drop-down](graphics/8727_05_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Now that we understand better exactly what we have, we are in a better position
    to change it. What we need to do is change this field from a free form, text-input
    field, to a drop-down entry type. It probably comes as little surprise that the
    `CActiveForm` class has a `dropDownList()` method that will generate a drop-down
    list for a model attribute. Let''s replace the line that calls `$form->textField`
    (in the file `/protected/views/issue/_form.php`) with the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: This still takes the earlier model as the first argument and the model attribute
    as the second one. The third argument specifies the list of drop-down choices.
    This should be an array of `value=>display` pairs. We already created our `getTypeOptions()`
    method in the `Issue.php` model class to return an array of this format, so we
    can use it directly.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: It should be noted that Yii framework base classes make use of the PHP `_get`
    "magic" function. This allows us, in our child classes, to write methods such
    as `getTypeOptions()` and reference those methods as class properties, using the
    syntax `->typeOptions`. So we could have also used the equivalent syntax when
    requesting our issue type options array `$model->typeOptions`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Save your work and look again at our issue input form. You should see a nice
    drop-down menu of Issue-type choices in place of the freeform text field, as displayed
    in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Adding the issue type drop-down](graphics/8727_05_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Adding the status dropdown: do it yourself'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'We are going to take the same approach for the issue status. As mentioned back
    in [Chapter 3](ch03.html "Chapter 3. The TrackStar Application"), *The TrackStar
    application*, when we introduced the application, issues can be in one of the
    following three statuses:'
  prefs: []
  type: TYPE_NORMAL
- en: Not yet started
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Started
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Finished
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We'll create three class constants in our `Issue` model class for the status
    values. Then we'll create a new method, `Issue::getStatusOptions()`, to return
    an array of our available issue statuses. And finally, we'll alter the `_form.php`
    file to render a drop-down of status options rather than a freeform text-input
    field for the status.
  prefs: []
  type: TYPE_NORMAL
- en: 'We are going to leave the implementation of the status drop-down to you. You
    can follow the same approach that we took for the types. After you make this change,
    the form should look similar to what is shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Adding the status dropdown: do it yourself](graphics/8727_05_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'We should also note that as we change these from freeform text-entry fields
    to drop-down fields, it is good practice to also add a range validation to our
    `rules()` method to ensure that the submitted value falls within the range of
    the values allowed by the drop-down. In the previous chapter, we saw a list of
    all the validators that the Yii framework provides. The `CRangeValidator` attribute,
    which uses an alias of *in*, is a good choice to use for defining this validation
    rule. So we could define such a rule as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'And then we add a method to return an array of our allowed numerical type values:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Similarly do this for our `status_id`. We'll also leave this as an exercise
    for you to implement.
  prefs: []
  type: TYPE_NORMAL
- en: Fixing the owner and requester fields
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Another problem we notice with the issue creation form is that the owner and
    requester fields are also freeform text-input fields. However, we know that these
    are integer values in the issue table that hold foreign key identifiers to the
    `id` column of the `tbl_user` table. So we also need to add drop-down fields for
    these fields. We won't take the exact same approach we did for the type and status
    attributes, as the issue owners and requesters need to be taken from the `tbl_user`
    table. Also, since not every user in the system will be associated with the project
    under which the issue resides, these issues cannot be used as drop-downs populated
    with the data taken from the entire `tbl_user` table. We need to restrict the
    list to just those users that are associated with this project.
  prefs: []
  type: TYPE_NORMAL
- en: This brings up another thing we need to address. As mentioned in the *Feature
    planning* section at the beginning of this chapter, we need to manage our issues
    within the context of a specific project. That is, a specific project should be
    chosen before you are able to create a new issue. Currently, our application does
    not enforce this workflow.
  prefs: []
  type: TYPE_NORMAL
- en: Let's address these changes one by one. First, we will alter the application
    to enforce a valid project to be identified prior to using any functionality to
    manage the issues associated with that project. Once a project is chosen, we'll
    make sure that both our owner and requester drop-down choices are restricted to
    only the users that are associated with that project.
  prefs: []
  type: TYPE_NORMAL
- en: Enforcing a project context
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We want to ensure that a valid project context is present before we allow access
    to managing the issues. To do this, we are going to implement what is called a
    filter. A **filter** in Yii is a bit of code that is configured to be executed
    either before or after a controller action is executed. One common example is
    if we want to ensure that a user is logged in prior to executing a controller
    action method. We could write a simple access filter that would check this requirement
    before the action is executed. Another example is if we want to perform some extra
    logging or other auditing logic after an action has been executed. We could write
    a simple audit filter to provide this post-action processing.
  prefs: []
  type: TYPE_NORMAL
- en: In this case, we want to ensure that a valid project has been chosen prior to
    creating a new issue. So we'll add a project filter to our `IssueController` class
    to accomplish this.
  prefs: []
  type: TYPE_NORMAL
- en: Defining filters
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'A filter can be defined either as a controller class method or it can be a
    separate class. When using the simple-method approach, the method name must begin
    with the word *filter* and have a specific signature. For example, if we were
    going to create a filter method called *someMethodName*, our full filter method
    would look like:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: The other approach is to write a separate class to perform the filter logic.
    When using the separate-class approach, the class must extend `CFilter` and then
    override at least one of the `preFilter()` or `postFilter()` methods depending
    on whether the logic should be executed before the action is invoked, or after.
  prefs: []
  type: TYPE_NORMAL
- en: Adding a filter
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: So, let's add a filter to our `IssueController` class to handle the checking
    for a valid project. We'll take the class-method approach.
  prefs: []
  type: TYPE_NORMAL
- en: 'Open up `protected/controllers/IssueController.php` and add the following method
    at the bottom of the class:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Okay, we now have a filter defined. However it does not do much yet. It simply
    executes `$filterChain->run()`, which continues the filtering process and allows
    the execution of the action methods that are being filtered by this method. This
    brings up another point. How do we define which action methods should use this
    filter?
  prefs: []
  type: TYPE_NORMAL
- en: Specifying the filtered actions
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The Yii framework base class for our controller classes is `CController`. It
    has a `filters()` method that needs to be overridden in order to specify the actions
    on which the filters need to be applied. In fact, this method has already been
    overridden in our `IssueController.php` class. This was done for us when we used
    the Gii tool to autogenerate this class. It already added a simple *accessControl*
    filter, which is defined in the `CController` base class, to handle some basic
    authorization to ensure that the user has sufficient permission to perform certain
    actions. If you are not already logged in and click on the **Create Issue** link,
    you will be directed to the login page for authentication before being allowed
    to create a new issue. The access control filter is responsible for this. We'll
    be covering it in more detail when we focus on user authentication and authorization
    in the next chapter.
  prefs: []
  type: TYPE_NORMAL
- en: 'For now, we just need to add our new filter to this configuration array. To
    specify that our new filter should be applied to the create action, alter the
    `IssueController::filters()` method by adding the highlighted code, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'The `filters()` method should return an array of filter configurations. The
    previous code returns a configuration that specifies that the `projectContext`
    filter, which is defined as a method within the class, should be applied to the
    `actionCreate()` method. The configuration syntax allows for the "+" and "-" symbols
    to be used to specify whether a filter should or should not be applied. For example,
    if we decided that we wanted this filter to be applied to all the actions except
    the `actionUpdate()` and `actionView()` action methods, we could specify:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: You should not specify both the plus and the minus operators at the same time.
    Only one should be needed for any given filter configuration. The plus operator
    says "Only apply the filter to the following actions". The minus operator says
    "Apply the filter to ALL actions *except* the following". If neither the "+" nor
    the "-" is in the configuration, the filter will be applied to all the actions.
  prefs: []
  type: TYPE_NORMAL
- en: At the moment, we'll keep this restricted to just the create action. So as defined
    previously with the `+ create` configuration, our filter method will be called
    when any user attempts to create a new issue.
  prefs: []
  type: TYPE_NORMAL
- en: Adding filter logic
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Okay, so now we have a filter defined and we have configured it to be called
    upon every attempted `actionCreate()` method call within the issue controller
    class. However, it still does not perform the necessary logic. Since we want to
    ensure the project context before the action is attempted, we need to put the
    logic in the filter method before the call to `$filterChain->run()`.
  prefs: []
  type: TYPE_NORMAL
- en: 'We''ll add a project property to the controller class itself. We''ll then use
    a querystring parameter in our URLs to indicate the project identifier. Our preaction
    filter will check to see if the existing project attribute is null; if so, it
    will use the querystring parameter to attempt to select the project based on the
    primary key identifier. If successful, the action will execute; if it fails, an
    exception will be thrown. Here is the relevant code needed to perform all of this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: With this in place, if you now attempt to create a new issue by clicking on
    the **Create Issue** link from the issue listing page at this URL `http://localhost/trackstar/index.php?r=issue`,
    you should see an "Error 403" error message, also displaying the error text we
    specified previously.
  prefs: []
  type: TYPE_NORMAL
- en: This is good. It shows that we have properly implemented the code to prevent
    a new issue from being created when no project has been identified. The quickest
    way to get past this error is to simply add a `pid` querystring parameter to the
    URL used for creating new issues. Let's do that so we can supply the filter with
    a valid project identifier and proceed to the form to create a new issue.
  prefs: []
  type: TYPE_NORMAL
- en: Adding the project ID
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Back in [Chapter 4](ch04.html "Chapter 4. Project CRUD"), *Project CRUD*, we
    added several new projects to the application as we were testing and implementing
    the CRUD operations on projects. So it is likely that you still have a valid project
    in your development database. If not, simply use the application to create a new
    project again. Once complete, take note of the *project ID* created, as we need
    to add this ID to the new issue URL.
  prefs: []
  type: TYPE_NORMAL
- en: 'The link we need to alter is in the view file for the issue listing page `/protected/views/issue/index.php`.
    Towards the top of that file, you will see where the link is defined for creating
    a new issue in our menu items. This is specified in the following highlighted
    code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'To add a querystring parameter to this link, we simply append a *name=>value*
    pair in the defined array for the `url` parameter. The code we added for the filter
    is expecting the querystring parameter to be `pid` (for project id). Also, since
    we are using the first (project id = 1) project for this example, we will alter
    the **Create Issue** link as such:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'Now when you view the issue listing page, you will see that the **Create Issue**
    hyperlink opens a URL with a querystring parameter appended at the end:'
  prefs: []
  type: TYPE_NORMAL
- en: '`http://localhost/trackstar/index.php?r=issue/create&pid=1`'
  prefs: []
  type: TYPE_NORMAL
- en: This querystring parameter allows the filter to properly set the project context.
    So this time when you click on the link, rather than getting the 403 error page,
    the form to create a new issue will be displayed.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: For more details on using filters in Yii, see [http://www.yiiframework.com/doc/guide/1.1/en/basics.controller#filter](http://www.yiiframework.com/doc/guide/1.1/en/basics.controller#filter).
  prefs: []
  type: TYPE_NORMAL
- en: Altering the project details page
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Adding the *project id* to the URL for the **Create New Issue** link was a good
    first step to ensure that our filter was working as expected. However, we have
    now hardcoded the link to always associate a new issue with the project ID = 1\.
    This of course is not what we want. What we want to do is have the menu option
    for creating a new issue be a part of the project details page. In this way, once
    you have chosen a project from the project listing page, the specific project
    context will be known, and we can dynamically append that project ID to the create
    new issue link. Let's make that change.
  prefs: []
  type: TYPE_NORMAL
- en: 'Open up the project details view file `/protected/views/project/view.php`.
    At the top of this file, you will notice the menu items contained within the `$this->menu`
    array. We need to add another link to create a new issue to the end of this list
    of defined menu links:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: What we have done is moved the menu option to create a new issue for the page
    that lists the details for a specific project. We used a link similar to the one
    before, but this time we had to specify the full *controllerID/actionID* pair
    (`issue/create`). Also, rather than hardcoding the project ID to be 1, we have
    used the `$model` variable within the view file, which is the AR class for the
    specific project. In this way, regardless of the project we choose, this variable
    will always reflect the correct project `id` attribute for that project.
  prefs: []
  type: TYPE_NORMAL
- en: With this in place, we can also remove the other link where we hardcoded the
    project ID to be `1` in the `protected/views/issue/index.php` view file.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now that we have the project context properly set when creating a new issue,
    we can remove the project field as a user input form field. Open up the view file
    for the new issue form `/protected/views/issue/_form.php`. Remove the following
    lines that are associated with the project input field:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'However, as the `project_id` attribute will not be submitted with the form,
    we will need to set the `project_id` parameter based on the one set from the filter
    we just implemented. Since we know the associated project ID already, let''s explicitly
    set the `Issue::project_id` to the value of the `id` property of the project instance
    created by our previously implemented filter. So alter the `IssueController::actionCreate()`
    method as the following highlighted code suggests:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: Now when we submit the form back, the `project_id` attribute for the issue active
    record instance will be correctly set. Even though we don't have our owner and
    requestor dropdowns set yet, we can submit the form and a new issue will be created
    with the proper project ID set.
  prefs: []
  type: TYPE_NORMAL
- en: Returning back to the owner and requester dropdowns
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Finally, we can turn back to what we were setting out to do, which is to change
    the owner and requester fields to be the drop-down choices of the valid members
    of that project. In order to properly do this, we need to associate some users
    with a project. Since user management is the focus of the upcoming chapters, we
    will do this manually by adding the association directly to the database via direct
    SQL. Let''s add two test users using the following SQL:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'We are using the one-way `MD5` hashing algorithm here because of its ease of
    use and because it is widely available with the 5.x versions of MySQL and PHP.
    However, it is now known that `MD5` is "broken" as a one-way hashing algorithm
    with regard to security, and it is not suggested that you use this hashing algorithm
    in a production environment. Please consider using *Bcrypt* for your real production
    applications. Here are some URLs providing more information on *Bcrypt*:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://en.wikipedia.org/wiki/Bcrypt](http://en.wikipedia.org/wiki/Bcrypt)'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://php.net/manual/en/function.crypt.php](http://php.net/manual/en/function.crypt.php)'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://www.openwall.com/phpass/](http://www.openwall.com/phpass/)'
  prefs: []
  type: TYPE_NORMAL
- en: 'When you run this on the `trackstar` database, it will create two new users
    in our system with the IDs 1 and 2\. Let''s also manually assign these two users
    to project #1 with the following SQL:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'After running the previous SQL statements, we have two valid members assigned
    to project #1.'
  prefs: []
  type: TYPE_NORMAL
- en: 'One of the wonderful features of relational Active Record within Yii is the
    ability to access the valid members of a project that an issue belongs to, directly
    from the issue `$model` instance itself. When we used the Gii tool to initially
    create our issue model class, we ensured that the **Build Relations** checkbox
    was ticked. This instructed Gii to look at the underlying database and define
    the relevant relationships. This can be seen in the `relations()` method within
    `/protected/models/Issue.php`. Since we created this class after adding the appropriate
    relationships to the database, the method should look something like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'The `//NOTE` comment from the previous code snippet suggests that you may have
    slightly different, or want slightly different, class attribute names and encourages
    you to adjust them as needed. This array configuration defines properties on the
    model instance that are themselves other AR instances. With these relations in
    place, we can access the related AR instances incredibly easily. For example,
    say we want to access the project to which an issue is associated. We can do so
    using the following syntax:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'Since we created our `Project` model class prior to having other tables and
    relationships defined in our database, there are no relations defined yet. However
    now that we have some relationships defined, we need to add these to the `Project::relations()`
    method. Open up the project AR class `/protected/models/Project.php` and replace
    the entire `relations()` method with the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'With these in place, we can easily access all of the issues and/or users associated
    with a project with incredibly easy syntax. For example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: Normally we would have to write complicated SQL join statements to access such
    related data. Using relational AR in Yii saves us from this complexity and tedium.
    We can now access these relationships in a very elegant and concise, object-oriented
    manner that is very easy to read and understand.
  prefs: []
  type: TYPE_NORMAL
- en: Generating the data to populate the dropdowns
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: We'll follow a similar approach as we did for the status and type drop-down
    data in order to implement a valid user dropdown. We'll add a `getUserOptions()`
    method to our `Project` model class.
  prefs: []
  type: TYPE_NORMAL
- en: 'Open up the file `/protected/models/Project.php` and add the following method
    to the bottom of the class:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: Here we are using Yii's `CHtml` helper class to help us create an array of `id=>username`
    pairs from each user associated with the project. Remember that the `users` property
    (defined in the `relations()` method) in the project class mapped to an array
    of user AR instances. The `CHtml::listData()` method can take in this list and
    produce a valid array in a suitable format for `CActiveForm::dropDownList()`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now that we have our `getUserOptions()` method returning the data we need,
    we should implement the dropdown to display that returned data. We have already
    used a filter to set the associated project ID from the `$_GET` request, and we
    used this value to set the `project_id` attribute on the new issue instance at
    the beginning of the `IssueController::actionCreate()` method. So now, through
    the lovely power of Yii''s relational AR features, we can easily populate our
    dropdown of users using the associated `Project` model. Here are the changes we
    need to make in the issue form:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open up the view file containing the input form elements `/protected/views/issue/_form.php`,
    and find the two text-input field form element definitions for `owner_id` and
    `requester_id` and replace it with the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'Now if we view our issue creation form again, we see two nicely populated drop-down
    fields for the **Owner** and **Requester**:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Generating the data to populate the dropdowns](graphics/8727_05_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Making one last change
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Since we already have the create issue form view file open, let's quickly make
    one last change. The creation time and user as well as the last updated time and
    user fields that we have on every table for basic history and auditing purposes
    should not be exposed to the user. Later we will alter the application logic to
    automatically populate these fields upon inserts and updates. For now, let's just
    remove them as inputs on the form.
  prefs: []
  type: TYPE_NORMAL
- en: 'Just completely remove the following lines from `/protected/views/issue/_form.php`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'The following screenshot shows what our new issue creation form now looks like
    with all of these changes:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Making one last change](graphics/8727_05_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The rest of the CRUD
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The goal of this chapter is to implement all the CRUD operations for Issues.
    We have finalized the creation functionality, but we still need to complete the
    read, update, and delete of issues. Luckily, most of the foundation has already
    been laid by using the Gii CRUD generation functionality. However, since we want
    to manage all the issues within the context of a project, we need to make some
    adjustments to how we access this functionality.
  prefs: []
  type: TYPE_NORMAL
- en: Listing the issues
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Even though there is the `actionIndex()` method in the `IssueController` class
    that displays a list of all the issues in the database, we don't have a need for
    this functionality as it is currently coded. Rather than a separate, standalone
    page that lists all the issues in the database, we want to only list the issues
    that are associated with a specific project. So we'll alter the application to
    display the listing of the issues as part of the project details page. Since we
    are taking advantage of the relational AR model in Yii, it will be a snap to make
    this change.
  prefs: []
  type: TYPE_NORMAL
- en: Altering the project controller
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: First let's alter the `actionView()` method in the `ProjectController` class.
    Since we want to display a list of the issues associated with a specific project,
    we can do this on the same page as the project details page. The method `actionView()`
    is the method that displays the project details.
  prefs: []
  type: TYPE_NORMAL
- en: 'Alter that method to be:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: Here we are using the `CActiveDataProvider` framework class to provide data
    using `CActiveRecord` objects. It will use the associated AR model class to retrieve
    data from the database in a manner that can be used very easily with a great,
    built-in, framework-listing component called `CListView`. We'll use this component
    to display a list of our issues in the view file. We have used the criteria property
    to specify the condition that it should only retrieve the issues associated with
    the project being displayed. We also used the pagination property to limit the
    issue list to just one issue per page. We set this very low so we can quickly
    demonstrate the paging features by just adding another issue. We'll demonstrate
    this soon.
  prefs: []
  type: TYPE_NORMAL
- en: The last thing we did was add this data provider to the array defined in the
    call to `render()`, to make it available to the view file in a `$issueDataProvider`
    variable.
  prefs: []
  type: TYPE_NORMAL
- en: Altering the project view file
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'As we just mentioned, we''ll use a framework component called `CListView` to
    display our list of issues on the project details page. Open up `/protected/views/project/view.php`
    and add this to the bottom of that file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: Here we are setting the `dataProvider` property of `CListView` to be our issue
    data provider that we created above. And then we are configuring it to use the
    `protected/views/issue/_view.php` file as a template for rendering each item in
    the data provider. This file was already created for us by the Gii tool when we
    generated our CRUD for the issues. We are making use of it here to display the
    issues on the project details page.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'You may recall from way back in [Chapter 1](ch01.html "Chapter 1. Meet Yii"),
    *Meet Yii*, that **Zii** is the official extension library that is packaged with
    the Yii framework. These extensions are developed and maintained by the core Yii
    framework team. You can read more about Zii here: [http://www.yiiframework.com/doc/guide/1.1/en/extension.use#zii-extensions](http://www.yiiframework.com/doc/guide/1.1/en/extension.use#zii-extensions)'
  prefs: []
  type: TYPE_NORMAL
- en: 'We need to also make a couple of changes to the `/protected/views/issue/_view.php`
    file that we specified as a layout template for each issue. Alter the entire contents
    of that file to be the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: 'Now if we save and view our results by looking at the project details page
    for project number 1 (`http://localhost/trackstar/index.php?r=project/view&id=1`),
    and assuming you have created at least one example issue under that project (if
    not, just use the **Create Issue** link from this page to create one), we should
    see what is displayed in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Altering the project view file](graphics/8727_05_11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Since we set the pagination property of our data provider very low (remember
    we set it to just 1), we can add one more issue to demonstrate the built-in paging
    functionality. Adding one more issue changes the display of the issues to have
    links that allow us to go from page to page within our project issues'' listing,
    as depicted in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Altering the project view file](graphics/8727_05_12.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Final tweaks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We now have a list of our issues associated with a project and are displaying
    them on the project details page. We also have the ability to view the details
    of an issue (that is Read them) as well as links to Update and Delete issues.
    So our basic CRUD operations are in place.
  prefs: []
  type: TYPE_NORMAL
- en: However, there are still a few items that need to be addressed before we can
    complete this section of our application. One thing we will notice is that the
    issues display list is showing numeric ID numbers for the **Type**, **Status**,
    **Owner**, and **Requester** fields. We should change this so that the text values
    for those are displayed instead. Also, since the issues are under a specific project
    already, it is a bit redundant to have the project ID displayed as part of the
    issue list data. So we can remove that. Finally, we need to address some of the
    navigational links that are displayed on the various other issue-related forms
    to ensure that we are always returning to this project details page as the starting
    place for all of our issue management.
  prefs: []
  type: TYPE_NORMAL
- en: We'll tackle these one at a time.
  prefs: []
  type: TYPE_NORMAL
- en: Getting the status and type text to display
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Previously we added public methods to the `Issue` AR class, to retrieve the
    status and type options to populate the dropdowns on the issue creation form.
    We need to add similar methods on this AR class to return the text for a specific
    status or type ID.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following two, new public methods to the `Issue` model class (`/protected/models/Issue.php`)
    to retrieve the status and type text for the current issue:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: These return the status text value ("Not Yet Started", "Started", or "Finished")
    and type text value ("Bug", "Feature", or "Task") for the `Issue` instance.
  prefs: []
  type: TYPE_NORMAL
- en: Adding the text display to the form
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Now that we have our two new public methods that will return the valid status
    and type text for our listing to display, we need to make use of them. Alter the
    following lines of code in `/protected/views/issue/_view.php`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Change this `<?php echo CHtml::encode($data->type_id); ?>` to this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: 'And this `<?php echo CHtml::encode($data->status_id); ?>` to this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: 'After these changes, our issues listing page for **Project #1**, `http://localhost/trackstar/index.php?r=issue&pid=1`,
    no longer displays integer values for our issue type and status fields. It now
    looks like what is displayed in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Adding the text display to the form](graphics/8727_05_13.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Since we are using the same view file to display our issues listing on our project
    details page, these changes are reflected there as well.
  prefs: []
  type: TYPE_NORMAL
- en: Changing the issue detail view
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We also need to make a few other changes to the details view of the issue.
    Currently if we view the issue details, it is displayed as in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Changing the issue detail view](graphics/8727_05_14.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'This is using a view file we have not yet altered. It is still displaying the
    project ID, which we don''t need to display, as well as the **Type** and **Status**
    as integer values rather than their associated text values. Opening up the view
    file used to render this display, `/protected/views/issue/view.php`, we notice
    that it is using the Zii extension widget `CDetailView`, which we have not seen
    before. This is similar to the `CListView` widget used to display the listing,
    but is used to display the details of a single data model instance rather than
    for displaying a list view of many. The following is the relevant code from this
    file showing the use of this widget:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: Here we are setting the data model of the `CDetailView` widget to be the `Issue`
    model class instance (that is the specific instance we want to display the details
    of), and then setting a list of attributes of the model instance to be displayed
    in the rendered detail view. An attribute can be specified as a string in the
    format of `Name:Type:Label`, of which both `Type` and `Label` are optional, or
    as an array itself. In this case just the name of the attributes are specified.
  prefs: []
  type: TYPE_NORMAL
- en: If we specify an attribute as an array, we can customize the display further
    by declaring a value element. We will take this approach in order to specify the
    model class methods `Issue::getTypeText()` and `Issue::getStatusText()` to be
    used to get the text values for the **Type** and **Status** fields respectively.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s change this use of `CDetailView` to use the following configuration:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: Here we have removed a few attributes from being displayed at all, namely the
    `project_id`, `create_time`, `update_time`, `create_user_id`, and `update_user_id`
    attributes. We will handle the population and display of some of these later,
    but for now we can just remove them from the detail display.
  prefs: []
  type: TYPE_NORMAL
- en: 'We also changed the declaration of the `type_id` and `status_id` attributes
    to use an array specification so that we could use the value element. We have
    specified that the corresponding `Issue::getTypeText()` and `Issue::getStatusText()`
    methods be used for getting the values of these attributes. With these changes
    in place, viewing the issue details page shows the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Changing the issue detail view](graphics/8727_05_15.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Okay, we are getting much closer to what we want, but there are still a couple
    of changes we need to make.
  prefs: []
  type: TYPE_NORMAL
- en: Displaying owner and requester names
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Things are looking better, but we still see integer identifiers being displayed
    for the **Owner** and **Requester** rather than the actual usernames. We'll take
    a similar approach to what we did for the type and status text displays. We'll
    add two new public methods on the `Issue` model class to return the names of these
    two properties.
  prefs: []
  type: TYPE_NORMAL
- en: Using relational AR
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Since our issues and users are represented as separate database tables and related
    through a foreign key relationship, we can access the `owner` and `requester`
    username directly from `$model` in the view file. Utilizing the power of Yii's
    relational AR model features, displaying the username attribute of the related
    `User` model class instance is a snap.
  prefs: []
  type: TYPE_NORMAL
- en: 'As we have mentioned, the model class `Issue::relations()` method is where
    the relationships are defined. If we take a peek at this method, we see the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: The highlighted code is what is most relevant for our needs. There are both
    `owner` and `requester` attributes defined as relations to the `User` model class.
    These definitions specify that the values of these attributes are `User` model
    class instances. The `owner_id` and `requester_id` parameters specify the unique
    primary key of their respective `User` class instances. So we can access these
    just as we do our other attributes of the `Issue` model class.
  prefs: []
  type: TYPE_NORMAL
- en: 'To display the username of the owner and requester `User` class instances,
    we once again change our `CDetailView` configuration to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: 'After making these changes, our issues detail listing is starting to look pretty
    good. The following screenshot shows the progress we made so far:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Using relational AR](graphics/8727_05_16.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Making some final navigation tweaks
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We are very close to completing the functionality that we set out to implement
    within this chapter. The only thing left to do is to clean up our navigation just
    a little. You may have noticed that there are still some options available that
    allow the user to navigate to an entire listing of issues, or to create a new
    issue, outside of a project context. For the purposes of our TrackStar application,
    everything we do with issues should be within the context of a specific project.
    Earlier we enforced this project context for creating a new issue, which is a
    good start, but we still need to make a few changes.
  prefs: []
  type: TYPE_NORMAL
- en: One thing that we will notice is that the application still allows the user
    to navigate to a listing of all issues, across all projects. For example, on an
    issue detail page, such as `http://localhost/trackstar/index.php?r=issue/view&id=1`,
    we see that in the right-hand column menu navigation there are the links **List
    Issue** and **Manage Issue**, corresponding to `http://localhost/trackstar/index.php?r=issue/index`
    and `http://localhost/trackstar/index.php?r=issue/admin` respectively (remember
    that to access the admin page, you have to be logged in as `admin/admin`). These
    still display all the issues across all the projects. So we need to limit this
    list to a specific project.
  prefs: []
  type: TYPE_NORMAL
- en: Since these links originate from the issue details page and that specific issue
    has an associated project, we can first alter the links to be passed in a specific
    project ID, and then use that project ID as the criteria to limit our issue's
    query in both the `IssueController::actionIndex()` and `IssueController::actionAdmin()`
    methods.
  prefs: []
  type: TYPE_NORMAL
- en: 'First let''s alter the links. Open up the `/protected/views/issue/view.php`
    file and locate the array of menu items towards the top of the file. Change the
    menu configuration to be:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: The changes made are highlighted. We have added a new querystring parameter
    to the **Create Issue** link, as well as to the issue listing page and the issue
    admin listing page. We already knew that we had to make this change for the create
    link, since we have previously implemented a filter to enforce that a valid project
    context be made available prior to creating a new issue. We won't have to make
    any further changes relative to this link. But for the index and admin links,
    we will need to alter their corresponding action methods to make use of this new
    querystring variable.
  prefs: []
  type: TYPE_NORMAL
- en: 'Since we have already configured a filter to load the associated project using
    the querysting variable, let''s take advantage of this. We''ll add to the filter
    configuration so that our filter method is called prior to both the `IssueController::actionIndex()`
    and `IssueController::actionAdmin()` methods being executed. Change the `IssueController::filters()`
    method as such:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: 'With this in place, the associated project will be loaded and available for
    use. Let''s use it in our `IssueController::actionIndex()` method. Alter that
    method to be:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: Here, as we have done before, we are simply adding a condition to the creation
    of the model data provider to only retrieve the issues associated with the project.
    This will limit the list of issues to just the ones under the project.
  prefs: []
  type: TYPE_NORMAL
- en: We need to make the same change to the admin listing page. However, this view
    file `/protected/views/issue/admin.php` is using the results of the model class
    `Issue::search()` method to provide the listing of the issues. So we actually
    need to make two changes to enforce the project context with this listing.
  prefs: []
  type: TYPE_NORMAL
- en: 'First we need to alter the `IssueController::actionAdmin()` method to set the
    correct `project_id` attribute on the model instance it is sending to the view.
    The following highlighted code shows this necessary change:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: 'Then we need to add to our criteria in the `Issue::search()` model class method.
    The following highlighted code identifies the change that we need to make to this
    method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: Here, we have removed the `$criteria->compare()` call using `project_id` with
    the direct `$criteria->condition()` that the `project_id` value be exactly equal
    to our project context. With these changes in place, the issues listed on the
    admin page are now restricted to be only those that are associated with the specific
    project.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: There are several places throughout the view files under `/protected/views/issues/`
    that contain links that require a `pid` querystring to be added in order to work
    properly. We leave it as an exercise to the reader to make the appropriate changes
    following the same approach as provided in these examples. As we proceed with
    our application development, we'll assume that all the links to create a new issue
    or to display a list of issues are properly formatted to contain the appropriate
    `pid` querystring parameter.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We were able to cover a lot of different topics in this chapter. Based on the
    relationship between *issues*, *projects*, and *users* within our application,
    the implementation of our issue-management functionality was significantly more
    complicated than our project entity management that we worked on in the previous
    chapter. Fortunately, Yii was able to come to our rescue many times to help alleviate
    the pain of having to write all of the code needed to address this complexity.
  prefs: []
  type: TYPE_NORMAL
- en: We leaned on our good friend Gii for Active Record model creation as well as
    for the initial implementation of all basic CRUD operations against the issue
    entity. We again used Yii migrations to help facilitate our needed database schema
    changes to support our issue functionality. We got to use relational Active Record
    in Yii, and saw how easy it is to retrieve related database information using
    this feature. We introduced controller filters as a means to tap into the request
    life cycle and implement business logic before and/or after controller action
    methods. And we demonstrated how to use dropdowns in our Yii forms.
  prefs: []
  type: TYPE_NORMAL
- en: We have made a lot of progress on our basic application thus far, and have done
    so without having to write a lot of code. The Yii framework itself has done most
    of the heavy lifting. We now have a working application that allows us to manage
    projects and also manage the issues within those projects. This is the heart of
    what our application is trying to achieve. We should feel proud of the accomplishments
    thus far.
  prefs: []
  type: TYPE_NORMAL
- en: However, we still have a long way to go before this application is truly ready
    for production use. A major missing piece is all of the needed functionality around
    user management. In the next two chapters, we will be diving into user authentication
    and authorization. We'll start by showing how Yii user authentication works, and
    start authenticating our users against the usernames and passwords stored in the
    database.
  prefs: []
  type: TYPE_NORMAL
