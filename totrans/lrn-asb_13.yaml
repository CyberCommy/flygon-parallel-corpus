- en: Hardening Your Servers Using Ansible and OpenSCAP
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: One of the advantages of using an orchestration and configuration tool like
    Ansible is that it can be used to generate and deploy a complex set of configurations
    in a repeatable task across many hosts. In this chapter, we are going to a look
    at a tool that actually generates the configuration for you to then apply.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we will learn how to harden a Red Hat-based CentOS 7.5.1804
    host using Ansible and OpenSCAP.
  prefs: []
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We are going to be targeting a Vagrant box running CentOS Linux release 7.5.1804;
    we are using this box because it comes with the latest version of OpenSCAP. A
    copy of the final playbooks can be found in the repository that accompanies this
    book; the repository can be found at [https://github.com/PacktPublishing/Learn-Ansible/tree/master/Chapter13/scap](https://github.com/PacktPublishing/Learn-Ansible/tree/master/Chapter13/scap).
  prefs: []
  type: TYPE_NORMAL
- en: OpenSCAP
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We are going to be looking at one of a set of tools maintained by Red Hat called
    OpenSCAP. Before we continue, I feel I should warn you that the next section is
    going to contain a lot of abbreviations, starting with SCAP.
  prefs: []
  type: TYPE_NORMAL
- en: So, what is SCAP? The **Security Content Automation Protocol** (**SCAP**) is
    an open standard that encompasses several components, all of which are open standards
    themselves, to build a framework that allows you to automatically assess and remediate
    your hosts against the **National Institute of Standards and Technology** (**NIST**)
    Special Publication 800-53.
  prefs: []
  type: TYPE_NORMAL
- en: This publication is a catalog of controls that is applied to all U.S. federal
    IT systems, apart from those maintained by the **National Security Agency** (**NSA**).
    These controls have been put in place to help implement the **Federal Information
    Security Management Act of 2002** (**FISMA**) across U.S federal departments.
  prefs: []
  type: TYPE_NORMAL
- en: 'SCAP is made up of the following components:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Asset Identification** (**AID**) is a data model used for asset identification.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Asset Reporting Format** (**ARF**) is a vendor-neutral and technology agnostic
    data model for transporting information on assets between different reporting
    applications and services.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Common Configuration Enumeration** (**CCE**) is a standard database of recommended
    configuration for common software. Each recommendation has a unique identifier.
    At the time of writing, the database has not been updated since 2013.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Common Configuration Scoring System** (**CCSS**) is the continuation of CCE.
    It is used for generating a score for various software and hardware configurations
    across all types of deployments.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Common Platform Enumeration** (**CPE**) is a method of identifying hardware
    assets, operating systems, and software present in an organization''s infrastructure.
    Once identified, this data can then be used to search other databases to threat
    assess the asset.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Common Weakness Enumeration** (**CWE**) is a common language for dealing
    with and discussing the causes of weaknesses in system architecture, design, and
    code that may lead to vulnerabilities.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Common Vulnerabilities and Exposures** (**CVE**) is a database of publicly
    acknowledged vulnerabilities. Most system administrators and IT professionals
    will have come across the CVE database at some point. Each vulnerability receives
    a unique ID; for example, most people will know CVE-2014-0160, which is also known
    as **Heartbleed**.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Common Vulnerability Scoring System** (**CVSS**) is a method that helps capture
    the characteristics of a vulnerability to produce a normalized numerical score,
    which can then be used to describe the impact of a vulnerability, for example,
    low, medium, high, and critical.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Extensible Configuration Checklist Description Format** (**XCCDF**) is an
    XML format for describing security checklists. It can also be used for configuration
    and benchmarks and provides a common language for all the parts of SCAP.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Open Checklist Interactive Language** (**OCIL**) is a framework for expressing
    questions to an end user and also the procedures to process the responses in a
    standardized way.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Open Vulnerability and Assessment Language** (**OVAL**) is defined in XML
    and aims to standardize the transfer of security content across all of the tools
    and services offered by NIST, the MITRE Corporation, the **United States Computer
    Emergency Readiness Team** (**US-CERT**), and the United States **Department of
    Homeland Security** (**DHS**).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Trust Model for Security Automation Data** (**TMSAD**) is an XML document
    that aims to define a common trust model which can be applied to the data being
    exchanged by all of the components that make up SCAP.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: As you can imagine, there have been thousands of man-years that have gone into
    producing SCAP and the components that go to make its foundation. Some of the
    projects have been around in one form or another since the mid 90s, so they are
    well-established and considered the de facto standard when it comes to security
    best practices; however, I am sure you are thinking that it all sounds very complicatedâ€”after
    all, these are standards that have been defined and are being maintained by scholars,
    security professionals, and government departments.
  prefs: []
  type: TYPE_NORMAL
- en: This is where OpenSCAP comes in. The OpenSCAP project, maintained by Red Hat
    and also certificated by NIST for its support of the SCAP 1.2 standard, allows
    you to apply all of the best practices we have discussed using a command-line
    client.
  prefs: []
  type: TYPE_NORMAL
- en: OpenSCAP, like a lot of Red Hat projects, is gaining support for Ansible and
    the current release introduces support for automatically generating Ansible playbooks
    to remediate non-conformance discovered during an OpenSCAP scan.
  prefs: []
  type: TYPE_NORMAL
- en: The automatic remediation scripts in the current version of OpenSCAP are a work
    in progress and there are known issues, which we will address toward the end of
    the chapter. Because of this, your output may differ from that covered in this
    chapter.
  prefs: []
  type: TYPE_NORMAL
- en: In the sections that follow, we will launch a CentOS 7.5.1804 Vagrant box, scan
    it, and generate the remediation playbook. As playbook support has only just been
    introduced, there is not yet 100% coverage of the fixes, so we will then scan
    the host a second time and then, using Ansible, generate a remediation bash script,
    and execute it on our host, before executing another scan, so we can compare the
    results of all three scans.
  prefs: []
  type: TYPE_NORMAL
- en: Preparing the host
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Before we start scanning, we need a host to target, so let''s quickly create
    the folder structure and `Vagrantfile`. To create the structure, run the following
    commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'The `scap/Vagrantfile` we created should contain the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'This means that the host inventory file, `scap/production`, should contain
    the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'We can launch the Vagrant box with one of the following commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Now that we have our target host ready, we can perform our initial scan.
  prefs: []
  type: TYPE_NORMAL
- en: The playbook
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We are going to split the playbook into a few different roles. Unlike previous
    chapters, we are going to make a few of the roles reusable and pass parameters
    to them as they are executed. Our first role is a simple one, which installs the
    packages we need to run our OpenSCAP scan.
  prefs: []
  type: TYPE_NORMAL
- en: Install role
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'As mentioned previously, this first role is a simple one that installs the
    packages we need to run a scan:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'There are a few defaults we need to set in `roles/install/defaults/main.yml`;
    these are:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'There is a task in `roles/install/tasks/main.yml` that installs the packages
    and also performs a `yum` update:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: That is it for this role; we will be calling it each time we run a scan to ensure
    that we have the correct packages installed to be running the scan itself.
  prefs: []
  type: TYPE_NORMAL
- en: Scan role
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now that we have the OpenSCAP packages installed, we can create a role that
    performs the scan:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'As already mentioned, we will be reusing this role throughout the playbook,
    which presents us with an easily resolved problem. By default, even if you define
    the role several times, Ansible will only execute a role once during a playbook
    run. To allow the role to execute more than once, we need to add the following
    line to the top of the `roles/scan/meta/main.yml` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'This instructs Ansible to execute this one role multiple times during the playbook
    run. Next up, we need to add some variables to the `group_vars/common.yml` file.
    These key values will be shared across all of the roles we will be using in our
    playbook. The first set of nested variables looks like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'These define which profile we want to use and also which policy we want to
    apply. By default, OpenSCAP doesn''t ship with any policies; these were installed
    with the `scap-security-guide` package. This package provides several policies,
    which can all be found in `/usr/share/xml/scap/ssg/content/`; the following terminal
    screenshot shows a directory listing of that folder:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/7d4643a7-32c1-4165-a75a-7a56b5158c46.png)'
  prefs: []
  type: TYPE_IMG
- en: For our playbook, we are going to be using the `ssg-centos7-ds.xml` policy,
    or to give it its proper title, `PCI-DSS v3 Control Baseline for CentOS Linux
    7`.
  prefs: []
  type: TYPE_NORMAL
- en: The **Payment Card Industry Data Security Standard** (**PCI-DSS**) is a standard
    that's been agreed upon by all of the major credit card operators that anyone
    handling cardholder data must adhere to. The standard is a set of security controls
    that are audited either by an external auditor or via a self-assessment questionnaire,
    depending on the number of transactions you handle.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following set of nested variables define whereabouts we will be storing
    the various files that are generated by the scans:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: As you can see, we have remote and local paths for the HTML reports. This is
    because we will be copying the reports to our Ansible controller as part of the
    playbook run.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now that we have the shared variables, we need to add a single default variable
    to the `roles/scan/defaults/main.yml` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: This is the command we will be running to initiate the scan. At the time of
    writing, there are not any OpenSCAP modules, so we will need to execute the `oscap`
    commands using the `command` module. The interesting thing to note is that I have
    split the command over multiple lines in the variable so that it is easy to read.
  prefs: []
  type: TYPE_NORMAL
- en: Because I used `>`, Ansible will actually render the command on a single line
    when it comes to applying the variable to the task, which means that we do not
    have to add `\` at the end of each line like we would need to if we were to run
    the multiline command on the command line.
  prefs: []
  type: TYPE_NORMAL
- en: 'The final part of the role is the tasks themselves. We will be putting all
    of the tasks in the `roles/scan/tasks/main.yml` file, starting with the task that
    executes the command we defined:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'The `ignore_errors` is extremely important here. As far as Ansible is concerned,
    this task will always run unless we get a 100% clean bill of health from the scan.
    The next task copies the HTML report generated by the scan from our target host
    to our Ansible controller:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Now that we have two roles in place, we can look at running our first scan.
  prefs: []
  type: TYPE_NORMAL
- en: Running the initial scan
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now that we have both the install and scan roles completed, we can run our
    first scan. The only file we have not covered yet is the `site.yml` one; this
    one looks like slightly different to the ones we have been using in other chapters:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'As you can see, we are tagging the roles as well as passing a parameter when
    running the scan. For now, we are just going to run playbook without using any
    tags. To run the playbook, issue the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'This will give us the following results:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: I have truncated the scan results in this output, but when you run it, you will
    see a large section of failed output colored red. As already mentioned, this is
    to be expected and is nothing to worry about.
  prefs: []
  type: TYPE_NORMAL
- en: 'A copy of the HTML report for our initial scan should be on your Ansible controller
    now; you can open it in your browser with the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'Or, open the `generated` folder and double-click on `box1_report_01-initial-scan.html`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/e5ebc9c4-a064-48d6-b4f0-767d9402f75b.png)'
  prefs: []
  type: TYPE_IMG
- en: As you can see from the example, our host failed 51 of the 94 checks OpenSCAP
    ran. Let's look at doing something about getting that number of failed checks
    down.
  prefs: []
  type: TYPE_NORMAL
- en: Generating the remediation Ansible playbook
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Before we continue, I must first draw your attention to the fact the report
    gives the following warning:'
  prefs: []
  type: TYPE_NORMAL
- en: Do not attempt to implement any of the settings in this guide without first
    testing them in a non-operational environment. The creators of this guidance assume
    no responsibility whatsoever for its use by other parties and makes no guarantees,
    expressed or implied, about its quality, reliability, or any other characteristic.
  prefs: []
  type: TYPE_NORMAL
- en: While we are only targeting a test host here, if you like what you see and decide
    to look at implementing OpenSCAP against other workloads, please ensure that you
    take it slowly and test thoroughly before running against anything that is in
    use, even if it is just by developersâ€”the changes made during the remediation
    we are about to carry out could have serious consequences on the running of your
    target host.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now that we have that warning out of the way, we can continue to look at securing
    our host using an automatically generated Ansible playbook:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: With this role, we need a few defaults that define whereabouts our generated
    playbook will be sorted, and again we need to define the command that needs to
    run. These values can be found in `roles/fix-ansible/defaults/main.yml`.
  prefs: []
  type: TYPE_NORMAL
- en: 'The first block deals with where the files we are going to be generating are
    stored on both the target host and locally:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'Next up, we have the command that needs to be executed to generate the playbook
    file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, we have the locations of some folders and files that need to be in place
    before the playbook runs; otherwise, it will result in an error and a fail:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'Now that we have the default variables in place, we can start adding tasks
    to `roles/fix-ansible/tasks/main.yml`, starting with one that uses the `file`
    module to put the missing folders and files in place:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, we are going to add a check to see whether the playbook file already
    exists on the target machine:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'We are doing this so that we have a way of skipping running the playbook that
    has been generated. Next up, we run the command to generate the playbook:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'As you can see, we are passing arguments that tell Ansible the command that
    creates the playbook file; if the file is there, then the command will not execute
    again. Now that we have the playbook on the machine, we need to copy it to our
    Ansible controller. Here, we are using the `fetch` module again:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'As you can see, we are using `when` so that the task only runs if the playbook
    file did not exist at the start of the role being run. Now that we have a copy
    of the playbook locally, we can run it. To do that, we are going be using the
    `local_action` module in combination with the `command` module to run Ansible
    within Ansible:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'There are a few different things happening here, so let''s break it down a
    little more, starting with the command we are running, which translates to:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: As you can see, we are having to pass the instructions for using `become` with
    the method of `sudo` as part of the command. This is because the Ansible playbook
    that is being generated does not account for you connecting externally using a
    user other than root.
  prefs: []
  type: TYPE_NORMAL
- en: 'The final task in this role writes the results of the previous task to a file
    on our Ansible controller:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'That completes the role. We can run the playbook again to apply the fixes and
    remediation, then run another scan so that we can update the `site.yml` file so
    it reads:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'As you can see, we have removed the tags for the `fix-ansible` role and we
    have also  updated the report name for the second `scan`. We can start the playbook
    by running this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'This gives us the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s take a look at the report and see what difference running the Ansible
    playbook has made:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'The output can be seen as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/c5936eb5-8d14-42be-afa3-3a92e03deeef.png)'
  prefs: []
  type: TYPE_IMG
- en: That's a little better than before; however, we are still failing 25 rulesâ€”why
    is that? Well, as already mentioned, work is still ongoing with porting all of
    the remediation rules over to Ansible; for example, if you open up the original
    scan results and scroll to the bottom, you should see that the Set SSH Idle Timeout
    Interval check failed.
  prefs: []
  type: TYPE_NORMAL
- en: 'Clicking on it will show you information on what OpenSCAP is checking, why
    they are checking it, and also why it should be fixed. And finally, at the bottom,
    you will notice that there are options to show both the shell and Ansible remediation
    solutions:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/30f04aed-e541-4b71-8a17-5e0c2a58075a.png)'
  prefs: []
  type: TYPE_IMG
- en: Now, click on one of the remaining failures from the second report. You should
    notice that there is only an option for remediation using a shell script. We will
    be generating this in the next role, but before we move on, let's quickly look
    at the playbook that was generated.
  prefs: []
  type: TYPE_NORMAL
- en: 'The playbook I generated at the time of writing contained over 3,200 lines
    of code, so I am not going to cover them all here, but as we have already mentioned
    the Set SSH Idle Timeout Interval check, let''s take a look at the task in the
    playbook that applies the fix:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: 'As you can see, it uses the lineinfile module to apply a variable that is defined
    at the very top of the playbook. Also, each of the tasks is tagged with quite
    a lot of information about which areas of the standard the fix comes under, and
    also the severity. This means we can get quite granular on which parts of the
    playbook run; for example, you could only run the low disruption changes by using
    the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, at the bottom of the `box1_ansible.log` file, we can see that the
    playbook run made the following changes:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: Generating the remediation bash script
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To remediate the remaining issues, we should generate and execute the bash
    script:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: 'As this is a nice-to-have, I am not going to go into any detail about the ins
    and outs of what we are adding here. The contents of `roles/fix-bash/defaults/main.yml`
    are similar to those in the `fix-ansible` role:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: 'The tasks in `roles/fix-bash/tasks/main.yml` are also similar and shouldn''t
    need any explanation:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: 'Update the `site.yml` file so it reads:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: 'This means we can take the results of the scan that ran after the Ansible fix
    to generate the bash script that contains the remaining fixes; we are then doing
    one final scan. To apply the final batch of fixes, run the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: 'This gives the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: 'Check the final report by running:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: 'This should show that the overall number of failed checks has reduced to just
    five:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/f65a56a1-ee6e-4d15-aeda-298f3ce3782f.png)'
  prefs: []
  type: TYPE_IMG
- en: Running a standalone scan
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'When we created the scan role, it was mentioned that the role should be reusable.
    We also added tags to the role when we defined it in the `site.yml` file. Let''s
    take a quick look at how we can run just a scan outside of a full playbook run.
    To kick off the scan, run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: 'This will run only the parts of the playbook that are tagged `scan`, and we
    are also overriding the `report_name` variable that we are setting as part of
    calling the role in the `site.yml` file to call our `report box1_report_scan-only.html`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/d25ced72-4024-45a0-9642-f66b12df3583.png)'
  prefs: []
  type: TYPE_IMG
- en: Fixing the remaining failed checks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: So far, we haven't had to put any hardcoded fixes in place to resolve any of
    the problems found in the scans. We have had to create a few files and folders
    to allow the fixes to be applied, but that was more to let the automated remediation
    work, rather than a fix.
  prefs: []
  type: TYPE_NORMAL
- en: 'At the time of writing, there are known issues with two of the five problems
    that are currently showing on my scans; these are:'
  prefs: []
  type: TYPE_NORMAL
- en: '`xccdf_org.ssgproject.content_rule_audit_rules_privileged_commands`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`xccdf_org.ssgproject.content_rule_audit_rules_login_events`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'There are fixes being worked on. You can find them on Red Hat''s Bugzilla at:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://bugzilla.redhat.com/show_bug.cgi?id=1570802](https://bugzilla.redhat.com/show_bug.cgi?id=1570802)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://bugzilla.redhat.com/show_bug.cgi?id=1574586](https://bugzilla.redhat.com/show_bug.cgi?id=1574586)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'So, leaving these two to one side, there are three I can fix now. To do this,
    I am going to create a separate role and playbook, as by the time you read this,
    the following fixes may not be needed:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: 'Jumping straight into `roles/final-fixes/tasks/main.yml`, our first fix is
    to rotate the logs daily rather than weekly, which is the default. To do this,
    we will use the `lineinfile` module to replace `weekly` with `daily`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: 'The next task adds a fix that should make its way through to the `scap-security-guide`
    package at some point:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: As you can see, here, we are using the `lineinfile` module again. This time,
    we are adding a line to `/etc/audit/rules.d/modules.rules` if it is not already
    present. This adds a rule that takes into account 32-bit kernels, as well as the
    64-bit ones, which the remediation scripts already configured.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, we are adding a fix for a script that should have been executed during
    the bash script execution. First of all, we need to create a file using the `file`
    module:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: 'We then need to copy and then execute the portion of the bash script that failed
    when we first ran it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: 'The bash script itself can be found at `roles/final-fixes/files/content_rule_file_permissions_var_log_audit.sh`,
    and it looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, we need to create a playbook file called `final-fixes.yml`. This should
    run the role we have just created and then run a final scan:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: 'To run the playbook, use the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: 'This will give the following results:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: 'Open the report that was generated using the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: 'This shows us that there are just the two medium checks with known issues that
    are still failing:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/c78e226b-f378-44e9-a908-fdb0584971e6.png)'
  prefs: []
  type: TYPE_IMG
- en: Hopefully, by the time you are reading this, your hosts will be getting a clean
    bill of health and this last section won't be needed, which is why I split it
    off from the main `site.yml` playbook.
  prefs: []
  type: TYPE_NORMAL
- en: Destroying the Vagrant box
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Don''t forget to destroy the Vagrant box once you have finished; you don''t
    want an idle virtual machine running on your host. To do this, run:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: Once the box has gone, I would recommend running through the scan and remediation
    a few times on a clean installation to get an idea of how this can be implemented
    on new hosts.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we created a playbook that generated a playbook to remediate
    any PCI-DSS non-compliance errors found during a scan. As well as being really
    cool, it is also really practical if you imagine you are running a few dozen servers
    that all need to be compliant, and also that they all need a full audit history.
  prefs: []
  type: TYPE_NORMAL
- en: You now have the foundations of a playbook that you can use to target those
    hosts daily, to both audit them and store the results away from the host itself,
    but also depending on your configuration, you have a way of automatically resolving
    any non-conformance found during the scan.
  prefs: []
  type: TYPE_NORMAL
- en: The scans we have been doing in this chapter have all been host-based; in the
    next chapter, we are going to look at how we can scan hosts remotely.
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: What effect does adding `>` to a multiline variable have?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'True or false: OpenSCAP is certified by NIST.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Why are we telling Ansible to continue if the `scan` command is marked as failed?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Explain why we are using tags for certain roles.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'True or false: We are using the `copy` command to copy the HTML reports from
    the remote host to the Ansible controller.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'You can find out more information on the technologies and organizations we
    have covered in this chapter at the following links:'
  prefs: []
  type: TYPE_NORMAL
- en: '**OpenSCAP**: [https://www.open-scap.org/](https://www.open-scap.org/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Security Content Automation Protocol** (**SCAP**): [https://scap.nist.gov/](https://scap.nist.gov/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**NIST**: [https://www.nist.gov/](https://www.nist.gov/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**MITRE Corporation**: [https://www.mitre.org/](https://www.mitre.org/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Asset Identification (AID)**: [https://csrc.nist.gov/Projects/Security-Content-Automation-Protocol/Specifications/aid](https://csrc.nist.gov/Projects/Security-Content-Automation-Protocol/Specifications/aid)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Asset Reporting Format (ARF)**: [https://csrc.nist.gov/Projects/Security-Content-Automation-Protocol/Specifications/arf](https://csrc.nist.gov/Projects/Security-Content-Automation-Protocol/Specifications/arf)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Common Configuration Enumeration (CCE)**: [https://cce.mitre.org](https://cce.mitre.org)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Common Configuration Scoring System** **(CCSS)**: [https://www.nist.gov/publications/common-configuration-scoring-system-ccss-metrics-software-security-configuration](https://www.nist.gov/publications/common-configuration-scoring-system-ccss-metrics-software-security-configuration)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Common Platform Enumeration (CPE)**: [https://nvd.nist.gov/products/cpe](https://nvd.nist.gov/products/cpe)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Common Weakness Enumeration (CWE)**: [https://cwe.mitre.org/](https://cwe.mitre.org/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Common Vulnerabilities and Exposures (CVE)**: [https://cve.mitre.org](https://cve.mitre.org)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Common Vulnerability Scoring System (CVSS)**: [https://www.first.org/cvss/](https://www.first.org/cvss/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Extensible Configuration Checklist Description Format (XCCDF)**: [https://csrc.nist.gov/Projects/Security-Content-Automation-Protocol/Specifications/xccdf](https://csrc.nist.gov/Projects/Security-Content-Automation-Protocol/Specifications/xccdf)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Open Checklist Interactive Language (OCIL)**: [https://csrc.nist.gov/Projects/Security-Content-Automation-Protocol/Specifications/ocil](https://csrc.nist.gov/Projects/Security-Content-Automation-Protocol/Specifications/ocil)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Open Vulnerability and Assessment Language (OVAL)**: [https://oval.mitre.org](https://oval.mitre.org)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Trust Model for Security Automation Data (TMSAD)**: [https://www.nist.gov/publications/trust-model-security-automation-data-10-tmsad](https://www.nist.gov/publications/trust-model-security-automation-data-10-tmsad)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
