- en: Centralized Configuration
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 中央配置
- en: In this chapter, we will learn how to use the Spring Cloud Configuration server
    to centralize managing the configuration of our microservices. As already described
    in [Chapter 1](282e7b49-42b8-4649-af81-b4b6830d391d.xhtml), *Introduction to Microservices*,
    in the *Central configuration* section, an increasing number of microservices
    typically come with an increasing number of configuration files that need to be
    managed and updated.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将学习如何使用Spring Cloud配置服务器来集中管理微服务的配置。如[第1章](282e7b49-42b8-4649-af81-b4b6830d391d.xhtml)中已经描述的那样，*微服务简介*，在*中央配置*部分，随着微服务数量的增加，需要管理和更新的配置文件数量也在增加。
- en: With the Spring Cloud Configuration server, we can place the configuration files
    for all our microservices in a central configuration repository that will make
    it much easier to handle them. Our microservices will be updated to retrieve their
    configuration from the configuration server at startup.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Spring Cloud配置服务器，我们可以将所有微服务的配置文件放在一个中央配置存储库中，这将使处理它们变得更加容易。我们的微服务将被更新以在启动时从配置服务器检索其配置。
- en: 'The following topics will be covered in this chapter:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下主题：
- en: Introduction to the Spring Cloud Configuration server
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Spring Cloud配置服务器简介
- en: Setting up a config server
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置配置服务器
- en: Configuring clients of a config server
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 配置配置服务器的客户端
- en: Structuring the configuration repository
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 配置存储库的结构
- en: Trying out the Spring Cloud Configuration server
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 尝试Spring Cloud配置服务器
- en: Technical requirements
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: All the commands described in this book are run on a MacBook Pro using macOS
    Mojave but should be straightforward enough to modify in order to be able to run
    on another platform such as Linux or Windows.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 本书中描述的所有命令都在使用macOS Mojave的MacBook Pro上运行，但应该很容易修改以在其他平台（如Linux或Windows）上运行。
- en: No new tools need to be installed in this chapter.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 本章无需安装新工具。
- en: The source code for this chapter can be found on GitHub at [https://github.com/PacktPublishing/Hands-On-Microservices-with-Spring-Boot-and-Spring-Cloud/tree/master/Chapter12](https://github.com/PacktPublishing/Hands-On-Microservices-with-Spring-Boot-and-Spring-Cloud/tree/master/Chapter12).
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的源代码可以在GitHub上找到，网址为[https://github.com/PacktPublishing/Hands-On-Microservices-with-Spring-Boot-and-Spring-Cloud/tree/master/Chapter12](https://github.com/PacktPublishing/Hands-On-Microservices-with-Spring-Boot-and-Spring-Cloud/tree/master/Chapter12)。
- en: 'To be able to run the commands as described in the book, download the source
    code to a folder and set up an environment variable, `$BOOK_HOME`, that points
    to that folder. Sample commands include the following:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 为了能够按照书中描述的方式运行命令，将源代码下载到一个文件夹，并设置一个环境变量`$BOOK_HOME`，指向该文件夹。示例命令包括以下内容：
- en: '[PRE0]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The Java source code is written for Java 8 and tested on Java 12\. This chapter
    uses Spring Cloud 2.1.0, SR1 (also known as the **Greenwich** release), Spring
    Boot 2.1.4, and Spring 5.1.6, that is, the latest available versions of the Spring
    components at the time of writing this chapter.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: Java源代码是针对Java 8编写的，并在Java 12上进行了测试。本章使用的是Spring Cloud 2.1.0，SR1（也称为**Greenwich**发布版），Spring
    Boot 2.1.4和Spring 5.1.6，即编写本章时可用的Spring组件的最新版本。
- en: The base Docker image, `openjdk:12.0.2`, is used in all Dockerfiles.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 所有Dockerfile中都使用基本的Docker镜像`openjdk:12.0.2`。
- en: 'The source code contains the following Gradle projects:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 源代码包含以下Gradle项目：
- en: '`api`'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`api`'
- en: '`util`'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`util`'
- en: '`microservices/product-service`'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 微服务/产品服务
- en: '`microservices/review-service`'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`microservices/review-service`'
- en: '`microservices/recommendation-service`'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 微服务/推荐服务
- en: '`microservices/product-composite-service`'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 微服务/产品组合服务
- en: '`spring-cloud/eureka-server`'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`spring-cloud/eureka-server`'
- en: '`spring-cloud/gateway`'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`spring-cloud/gateway`'
- en: '`spring-cloud/authorization-server`'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`spring-cloud/authorization-server`'
- en: '`spring-cloud/config-server`'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`spring-cloud/config-server`'
- en: All source code examples in this chapter come from the source code in `$BOOK_HOME/Chapter12`,
    but are, in several cases, edited to remove non-relevant parts of the source code,
    such as comments, import statements, and log statements.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 本章中的所有源代码示例都来自`$BOOK_HOME/Chapter12`中的源代码，但在多种情况下进行了编辑，以删除源代码的非相关部分，如注释、导入语句和日志语句。
- en: If you want to see the changes applied to the source code in [Chapter 12](a250774a-03a1-41b1-b935-cbeb9624b6e3.xhtml),
    *Centralized Configuration*, that is, see what it took to add a configuration
    server, you can compare that with the source code for [Chapter 11](bcb9bba0-d2fe-4ee8-954b-07a7e38e1115.xhtml),
    *Securing Access to APIs*. You can use your favorite `diff` tool and compare the
    two folders, `$BOOK_HOME/Chapter11` and `$BOOK_HOME/Chapter12`.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想查看源代码在[第12章](a250774a-03a1-41b1-b935-cbeb9624b6e3.xhtml)中的更改，即查看添加配置服务器所需的步骤，您可以使用您喜欢的`diff`工具，比较两个文件夹`$BOOK_HOME/Chapter11`和`$BOOK_HOME/Chapter12`。
- en: Introduction to the Spring Cloud Configuration server
  id: totrans-30
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Spring Cloud配置服务器简介
- en: 'The Spring Cloud Configuration server (shortened to *config server*) will be
    added to the existing microservice landscape behind the edge server in [Chapter
    10](a3383211-405d-4319-b142-ddb8cf3674fd.xhtml), *Using Spring Cloud Gateway to
    Hide Microservices Behind an Edge Server*, in the same way as for the other microservices:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: Spring Cloud配置服务器（简称*配置服务器*）将被添加到现有的微服务景观中，在[第10章](a3383211-405d-4319-b142-ddb8cf3674fd.xhtml)的边缘服务器后面，以与其他微服务相同的方式进行操作：
- en: '![](img/f1a6d8fa-dd07-47dd-9f4d-3861729c6a70.png)'
  id: totrans-32
  prefs: []
  type: TYPE_IMG
  zh: '![](img/f1a6d8fa-dd07-47dd-9f4d-3861729c6a70.png)'
- en: 'When it comes to setting up a config server, there are a number of options
    to consider:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 在设置配置服务器时，有许多选项需要考虑：
- en: Selecting a storage type for the configuration repository
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 选择配置存储库的存储类型
- en: Deciding on the initial client connection, either to the config server or to
    the discovery server
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 决定初始客户端连接，无论是连接到配置服务器还是发现服务器
- en: Securing the configuration, both against unauthorized access to the API and
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 保护配置，防止未经授权访问API和
- en: avoiding storing sensitive information in plain text in the configuration repository
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
- en: Let's go through each option one by one and also introduce the API exposed by
    the config server.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
- en: Selecting the storage type of the configuration repository
  id: totrans-39
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'As already described in [Chapter 8](9878a36a-5760-41a4-a132-1a2387b61037.xhtml),
    *Introduction to Spring Cloud*, in the *Spring Cloud Config for centralized configuration*
    section, the config server supports storing configuration files in a number of
    different backends, for example:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
- en: Git repository
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Local filesystem
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: HashiCorp Vault
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A JDBC database
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In this chapter, we will use a local filesystem. To use the local filesystem,
    the config server needs to be launched with the Spring profile, `native`, enabled.
    The location of the configuration repository is specified using the property,
    `spring.cloud.config.server.native.searchLocations`.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
- en: Deciding on the initial client connection
  id: totrans-46
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: By default, a client connects first to the config server to retrieve its configuration.
    Based on the configuration, it connects to the discovery server, that is, Netflix
    Eureka in our case, to register itself. It is also possible to do this the other
    way around, that is, the client first connects to the discovery server to find
    a config server instance and then connects to the config server to get its configuration.
    There are pros and cons to both approaches.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, the clients will first connect to the config server. With this
    approach, it will be possible to store the configuration of the discovery server,
    that is, Netflix Eureka, in the config server.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
- en: To learn more about the other alternative, see [https://cloud.spring.io/spring-cloud-static/spring-cloud-config/2.1.0.RELEASE/single/spring-cloud-config.html#discovery-first-bootstrap](https://cloud.spring.io/spring-cloud-static/spring-cloud-config/2.1.0.RELEASE/single/spring-cloud-config.html#_environment_repository).
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
- en: One concern with connecting to the config server first is that the config server can
    become a single point of failure. If the clients connect first to a discovery
    service, such as Netflix Eureka, there can be multiple config server instances
    registered, so that a single point of failure can be avoided. When, later on in
    this book, we learn about the *service* concept in Kubernetes, we will see how
    we can avoid a single point of failure by running multiple containers, for example,
    config servers, behind each Kubernetes service.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
- en: Securing the configuration
  id: totrans-51
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Configuration information will, in general, be handled as sensitive information.
    This means that we need to secure the configuration information both in transit
    and at rest. From a runtime perspective, the config server does not need to be
    exposed to the outside through the edge server. During development, it is, however,
    useful to be able to access the API of the config server to check the configuration.
    In production environments, it is recommended to lock down external access to
    the config server.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
- en: Securing the configuration in transit
  id: totrans-53
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When the configuration information is asked for by a microservice, or anyone
    using the API of the config server, it will be protected against eavesdropping
    by the edge server since it already uses HTTPS.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
- en: To ensure that the API user is a known client, we will use HTTP basic authentication.
    We can set up HTTP basic authentication by using Spring Security in the config
    server and specifying the environment variables, `SPRING_SECURITY_USER_NAME` and
    `SPRING_SECURITY_USER_PASSWORD`, with the permitted credentials.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
- en: Securing the configuration at rest
  id: totrans-56
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To avoid a situation whereby anyone with access to the configuration repository
    can steal sensitive information, such as passwords, the config server supports
    encryption of configuration information when stored on disk. The config server
    supports using both symmetric and asymmetric keys. Asymmetric keys are more secure
    but harder to manage.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we will use a symmetric key. The symmetric key is given to
    the config server at startup by specifying an environment variable, `ENCRYPT_KEY`.
    The encrypted key is just a plain text string that needs to be protected in the
    same way as any sensitive information.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
- en: To learn more about the use of asymmetric keys, see [https://cloud.spring.io/spring-cloud-static/spring-cloud-config/2.1.0.RELEASE/single/spring-cloud-config.html#_key_management](https://cloud.spring.io/spring-cloud-static/spring-cloud-config/2.1.0.RELEASE/single/spring-cloud-config.html#_key_management).
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
- en: Introducing the config server API
  id: totrans-60
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The config server exposes a REST API that can be used by its clients to retrieve
    their configuration. In this chapter, we will use the following endpoints in the
    API:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
- en: '`/actuator`: The standard actuator endpoints exposed by all microservices.'
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: As always, these should be used with care. They are very useful during development
    but must be locked down before being used in production.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
- en: '`/encrypt` and `/decrypt`: Endpoints for encrypting and decrypting sensitive
    information. These must also be locked down before being used in production.'
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`/{microservice}/{profile}`: Returns the configuration for the specified microservice
    and the specified Spring profile.'
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We will see some sample uses for the APIs when we try out the config server.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
- en: Setting up a config server
  id: totrans-67
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Setting up a config server on the basis of the decisions discussed is straightforward:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
- en: Create a Spring Boot project using Spring Initializr as described in [Chapter
    3](d26f4e61-20bf-4f55-b96d-060c7dd6f20c.xhtml), *Creating a Set of Cooperating
    Microservices*. Refer to the *Using Spring Initializr to generate skeleton* *code*
    section.
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add the dependencies, `spring-cloud-config-server` and `spring-boot-starter-security`,
    to the Gradle build file, `build.gradle`.
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the annotation, `@EnableConfigServer`, to the application class, `ConfigServerApplication`:'
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Add the configuration for the config server to the default property file, `application.yml`:'
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The most important configuration is to specify where to find the configuration
    repository, specified by the `spring.cloud.config.server.native.searchLocations` property.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
- en: Add a routing rule to the edge server to make the API of the config server accessible
    from outside the microservice landscape.
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add a Dockerfile and a definition of the config server to the three Docker Compose
    files.
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Externalize sensitive configuration parameters to the standard Docker Compose
    environment file, `.env`
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the config server to the common build file, `settings.gradle`:'
  id: totrans-79
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The source code for the Spring Cloud Configuration server can be found in `$BOOK_HOME/Chapter12/spring-cloud/config-server`.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
- en: Now, let's look a bit more into how to set up the routing rule and how to configure
    the config server for use in Docker.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
- en: Setting up a routing rule in the edge server
  id: totrans-83
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To be able to access the API of the config server from outside the microservice
    landscape, we add a routing rule to the edge server. All requests to the edge
    server that begin with `/config` will be routed to the config server with the
    following routing rule:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: The `RewritePath` filter in the preceding routing rule will remove the leading
    part, `/config`, from the incoming URL before it sends it to the config server.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
- en: 'With this routing rule in place, we can use the API of the config server; for
    example, run the following command to ask for the configuration of the product
    service when it uses the Docker Spring profile:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: We will run the preceding command when we try out the config server.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
- en: Configuring the config server for use with Docker
  id: totrans-90
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Dockerfile of the config server looks the same as for the other microservices,
    except for the fact that it exposes port `8888` instead of port `8080`.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
- en: 'When it comes to adding the config server to the Docker Compose files, it looks
    a bit different from what we have seen for the other microservices:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Here are the explanations for the preceding source code:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
- en: The Spring profile, `native`, is added to signal to the config server that the
    config repository is based on plain files; in other words, it is not a Git repository.
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The environment variable `ENCRYPT_KEY` is used to specify the symmetric encryption
    key that shall be used by the config server to encrypt and decrypt sensitive configuration
    information.
  id: totrans-96
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The environment variables, `SPRING_SECURITY_USER_NAME` and `SPRING_SECURITY_USER_PASSWORD`,
    are used to specify the credentials to be used for protecting the APIs using basic
    HTTP authentication.
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The volume declaration will make the `config-repo` folder accessible in the
    Docker container at `/config-repo`.
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The values of the three preceding environment variables defined are fetched
    by Docker Compose from the `.env` file:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: The information stored in the `.env` file, that is, the username, password,
    and encryption key, is sensitive information and must be protected if used for
    something other than development and testing. Also, note that losing the encryption
    key will lead to a situation whereby the encrypted information in the config repository
    cannot be decrypted!
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
- en: Configuring clients of a config server
  id: totrans-102
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To be able to get their configurations from the config server, our microservices
    need to be updated. This can be done through the following steps:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
- en: Add the `spring-cloud-starter-config`, and `spring-retry` dependencies to the
    Gradle build file, `build.gradle`.
  id: totrans-104
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Move the configuration file, `application.yml`, to the config repository and
    rename it to the name of the client as specified by the property, `spring.application.name`.
  id: totrans-105
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add a file named `bootstrap.yml` to the `src/main/resources` folder. This file
    holds the configuration required to connect to the config server. Refer to the
    following for an explanation of its content.
  id: totrans-106
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add credentials for accessing the config server to the Docker Compose files,
    for example, the `product` service:'
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Disable the use of the config server when running Spring Boot-based automated
    tests. This is done by adding `spring.cloud.config.enabled=false` to the `@DataMongoTest`, `@DataJpaTest`,
    and `@SpringBootTest` annotations.  For example, execute the following command:'
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Configuring connection information
  id: totrans-111
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'As mentioned previously, the `src/main/resources/bootstrap.yml` file holds
    the client configuration that is required in order to be able to connect to the
    config server. This file has the same content for all clients of the config server,
    except for the application name as specified by the property called, `spring.application.name` (in
    the following example, set to `product`):'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'This configuration will make the client do the following:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
- en: Connect to the config server using the `http://localhost:8888` URL when it runs
    outside Docker, and using the `http://config-server:8888` URL when running in
    a Docker container.
  id: totrans-115
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Use HTTP basic authentication using the value of the `CONFIG_SERVER_USR` and
    `CONFIG_SERVER_PWD` properties, as its username and password.
  id: totrans-116
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Try to reconnect to the config server during startup up to 20 times, if required.
  id: totrans-117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If the connection attempt fails, the client will initially wait for 3 seconds
    before trying to reconnect.
  id: totrans-118
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The wait time for subsequent retries will increase by a factor of 1.3.
  id: totrans-119
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The maximum wait time between connection attempts will be 10 seconds.
  id: totrans-120
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If the client can't connect to the config server after 20 attempts, its startup
    will fail.
  id: totrans-121
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: This configuration is generally good for resilience against temporary connectivity
    problems with the config server. It is especially useful when the whole landscape
    of microservices and its config server are started up at once, for example, when
    using the `docker-compose up` command. In this scenario, many of the clients will
    be trying to connect to the config server before it is ready, and the retry logic
    will make the clients connect to the config server successfully once it is up
    and running.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
- en: Moving the partitioning configuration from Docker Compose files to the configuration
    repository
  id: totrans-123
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Docker Compose files, `docker-compose-partitions.yml`, and `docker-compose-kafka.yml`,
    contain some extra configuration for handling partitions in the message brokers,
    RabbitMQ and Kafka. For details, refer to the *Guaranteed order and partitions* section
    in [Chapter 7](436fb8c1-0c4d-410c-a3ec-da251aba4ca1.xhtml), *Developing Reactive
    Microservices*. This configuration has also been moved to the centralized configuration
    repository.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, in `docker-compose-kafka.yml`, the configuration for the product
    consumer that reads messages from the first partition in the product topic in
    Kafka appears as follows:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'This configuration has been structured into a number of Spring profiles for
    increased reusability and moved to the corresponding configuration files in the
    configuration repository. The Spring profiles added are as follows:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
- en: '`streaming_partitioned` contains properties for enabling the use of partitions
    in a message broker.'
  id: totrans-128
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`streaming_instance_0` contains properties required for consuming messages
    from the first partition.'
  id: totrans-129
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`streaming_instance_1` contains properties required for consuming messages
    from the second partition.'
  id: totrans-130
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`kafka` contains properties that are specific for the use of Kafka as the messaging
    broker.'
  id: totrans-131
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following configuration has been added to the configuration files of the
    message consumers, that is, the product, review, and recommendation services:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'The following configuration has been added to the configuration file of the
    message producer, that is, the product-composite service:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'The Docker Compose files are now cleaner and only contain the configuration
    of credentials for accessing the configurations server and a list of Spring profiles
    to activate. For example, the configuration for the product consumer that read
    messages from the first partition in the product topic in Kafka is now reduced
    to the following:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'For the full source code, refer to the following:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
- en: '`docker-compose-partitions.yml`'
  id: totrans-139
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`docker-compose-kafka.yml`'
  id: totrans-140
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`config-repo/product-composite.yml`'
  id: totrans-141
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`config-repo/product.yml`'
  id: totrans-142
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`config-repo/recommendation.yml`'
  id: totrans-143
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`config-repo/review.yml`'
  id: totrans-144
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Structuring the configuration repository
  id: totrans-145
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'After moving the configuration files from each client to the configuration
    repository, we will have some level of consistent configuration in many of the
    configuration files, for example, for the configuration of actuator endpoints
    and how to connect to Eureka, RabbitMQ, and Kafka. The common parts have been
    placed in a configuration file named `application.yml` that is shared by all clients.
    The configuration repository contains the following files:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
- en: '`application.yml`'
  id: totrans-147
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`eureka-server.yml`'
  id: totrans-148
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`product-composite.yml`'
  id: totrans-149
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`recommendation.yml`'
  id: totrans-150
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`auth-server.yml`'
  id: totrans-151
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`gateway.yml`'
  id: totrans-152
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`product.yml`'
  id: totrans-153
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`review.yml`'
  id: totrans-154
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The configuration repository can be found in `$BOOK_HOME/Chapter12/config-repo`.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
- en: Trying out the Spring Cloud Configuration server
  id: totrans-156
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now it is time to try out the config server:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
- en: First, we build from source and run the test script to ensure that everything
    fits together.
  id: totrans-158
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, we will try out the config server API to retrieve the configuration for
    our microservices.
  id: totrans-159
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Finally, we will see how we can encrypt and decrypt sensitive information, for
    example, passwords.
  id: totrans-160
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Building and running automated tests
  id: totrans-161
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'So now we build and run, as follows:'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
- en: 'First, build the Docker images with the following commands:'
  id: totrans-163
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  id: totrans-164
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Next, start the system landscape in Docker and run the usual tests with the
    following command:'
  id: totrans-165
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  id: totrans-166
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Getting the configuration using the config server API
  id: totrans-167
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'As already described previously, we can reach the API of the config server
    through the edge server by using the URL prefix, `/config`. We also have to supply
    credentials as specified in the `.env` file for HTTP basic authentication. For
    example, to retrieve the configuration used for the product service when it runs
    as a Docker container, that is, having activated the Spring profile `docker`,
    run the following command:'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  id: totrans-169
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Expect a response with the following structure (many of the properties in the
    response are replaced by `...` to increase readability):'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  id: totrans-171
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'The explanations for the preceding response are as follows:'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
- en: 'The response contains properties from a number of *property sources*, one per
    the Spring profile and property file that matched the API request. The property
    sources are returned in priority order; that is, if a property is specified in
    multiple property sources, the first property in the response takes precedence.
    The preceding sample response contains the following property sources:'
  id: totrans-173
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`/config-repo/product.yml`, for the `docker` Spring profile'
  id: totrans-174
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`/config-repo/application.yml`, for the `docker` Spring profile'
  id: totrans-175
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`/config-repo/product.yml`, for the `default` Spring profile'
  id: totrans-176
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`/config-repo/application.yml`, for the `default` Spring profile docker'
  id: totrans-177
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'For example, the port used will be `8080` and not `7001`, since `"server.port":
    8080` is specified before `"server.port": 7001` in the preceding response.'
  id: totrans-178
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Sensitive information, such as the passwords to Eureka and RabbitMQ, are returned
    in plain text, for example, `"p"` and `"guest"`, but they are encrypted on disk.
    In the configuration file, `application.yml`, they are specified as follows:'
  id: totrans-179
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE19]'
  id: totrans-180
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Encrypting and decrypting sensitive information
  id: totrans-181
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Information can be encrypted and decrypted using the `/encrypt`, and `/decrypt`
    endpoints exposed by the config server. The `/encrpyt` endpoint can be used to
    create encrypted values to be placed in the property file in the config repository.
    Refer to the preceding example where the passwords to Eureka and RabbitMQ are
    stored encrypted on disk. The `/decrypt` endpoint can be used to verify encrypted
    information that is stored on disk in the config repository.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
- en: 'To encrypt the `hello world` string, run the following command:'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  id: totrans-184
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: It is important to use the `--data-urlencode` flag when using `curl` to call
    the `/encrypt` endpoint, so as to ensure the correct handling of special characters
    such as `'+'`.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
- en: 'Expect a response along the lines of the following:'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/733638b7-6ddf-4111-b1b8-9ea27d16f42e.png)'
  id: totrans-187
  prefs: []
  type: TYPE_IMG
- en: 'To decrypt the encrypted value, run the following command:'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  id: totrans-189
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Expect the `hello world` string as the response:'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/db7066ec-de99-4008-91ad-a347b02ff206.png)'
  id: totrans-191
  prefs: []
  type: TYPE_IMG
- en: 'If you want to use an encrypted value in a configuration file, you need to
    prefix it with `{cipher}` and wrap it in `''''`. For example, to store the encrypted
    version of `hello world`, execute the following command:'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  id: totrans-193
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'These tests conclude the chapter on centralized configuration. Wrap it up by
    shutting down the system landscape:'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  id: totrans-195
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: Summary
  id: totrans-196
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we have seen how we can use the Spring Cloud Configuration
    server to centralize managing the configuration of our microservices. We can place
    the configuration files in a common configuration repository and share common
    configurations in a single configuration file while keeping microservice-specific
    configuration in microservice specific configuration files. The microservices
    have been updated to retrieve their configuration from the config server at startup
    and are configured to handle temporary outages while retrieving their configuration
    from the config server.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
- en: The config server can protect configuration information by requiring authenticated
    usage of its API with basic HTTP authentication, and can prevent eavesdropping
    by exposing its API externally through the edge server that uses HTTPS. To prevent
    intruders who obtained access to the configuration files on disk from gaining
    access to sensitive information such as passwords, we can use the config server
    `/encrypt` endpoint to encrypt the information and store it encrypted on disk.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
- en: While exposing the APIs from the config server externally is useful during development,
    they should be locked down before use in production.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will learn how we can use *Resilience4j* to mitigate
    the potential drawbacks of overusing synchronous communication between microservices.
    If we, for example, establish chains of microservices that call each other synchronously
    using REST APIs, and the last microservice stops responding, bad things can happen
    that affect many of the microservices involved. Resilience4j comes with an implementation
    of the circuit breaker pattern, which can be used to handle these types of problem.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将学习如何使用*Resilience4j*来减轻微服务之间过度使用同步通信的潜在缺点。例如，如果我们建立一系列通过REST API同步调用彼此的微服务，并且最后一个微服务停止响应，可能会发生影响许多涉及的微服务的不良情况。Resilience4j带有断路器模式的实现，可以用来处理这些类型的问题。
- en: Questions
  id: totrans-201
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: 'What API call can we expect from a review service to the config server during
    startup to retrieve its configuration? The review service was started up using
    the following command: `docker compose up -d`.'
  id: totrans-202
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在启动期间，我们可以期望从审查服务到配置服务器的哪个API调用来检索其配置？审查服务是使用以下命令启动的：`docker compose up -d`。
- en: 'What configuration information should we expect back from an API call to the
    config server using this command:'
  id: totrans-203
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 调用配置服务器的API命令后，我们应该期望从中获得什么配置信息？
- en: '[PRE24]'
  id: totrans-204
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: What types of repository backend does Spring Cloud Config support?
  id: totrans-205
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Spring Cloud Config支持哪些类型的存储库后端？
- en: How can we encrypt sensitive information on disk using Spring Cloud Config?
  id: totrans-206
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们如何使用Spring Cloud Config在磁盘上加密敏感信息？
- en: How can we protect the config server API from misuse?
  id: totrans-207
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们如何保护配置服务器API免受滥用？
- en: Mention some pros and cons for clients that first connect to the config server
    as opposed to those that first connect to the discovery server.
  id: totrans-208
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 提到一些首先连接到配置服务器的客户端与首先连接到发现服务器的客户端的优缺点。
