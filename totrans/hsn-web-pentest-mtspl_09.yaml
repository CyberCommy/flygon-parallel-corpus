- en: Vulnerability Assessment Using Metasploit (Nessus)
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we will look at some of the ways in which we can perform vulnerability
    assessments using the Nessus bridge for the Metasploit framework. Nessus is a
    vulnerability scanner built by Tenable, Inc. It is widely used to perform network
    security assessments. A Nessus bridge allows Metasploit to parse and import the
    scan results of Nessus into its own database for further analysis and exploitation.
    We can even initiate Nessus scans from within Metasploit using the bridge.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will be covering the following topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
- en: Introduction to Nessus
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using Nessus with Metasploit
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Basic commands
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Patching the Metasploit library
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Performing a Nessus scan via Metasploit
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using Metasploit DB for Nessus scans
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Importing Nessus scan in Metasploit DB
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The following are the prerequisites for this chapter:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
- en: Metasploit Framework
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*nix-based systems/Microsoft Windows systems for the host machine'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Nessus Home Edition or Professional Edition
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction to Nessus
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Nessus is one of the most common and easy-to-use vulnerability scanners developed
    by Tenable. This vulnerability scanner is generally used to perform vulnerability
    assessment on the network, and Tenable Research has published 138,005 plugins,
    covering 53,957 CVE IDs and 30,392 Bugtraq IDs. A vast collection of Nessus scripts
    (NASL) helps the tester to broaden their reach to find vulnerabilities. Some of
    the features of Nessus are as follows:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
- en: Vulnerability scanning (network, web, cloud, and so on)
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Asset discovery
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Configuration auditing (MDM, network, and so on)
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Target profiling
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Malware detection
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Sensitive data discovery
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Patch auditing and management
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Policy compliance auditing
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Nessus can be downloaded from [https://www.tenable.com/downloads/nessus](https://www.tenable.com/downloads/nessus).
    Once the installation is complete, we have to activate the tool. The activation
    can be completed with a code from [https://www.tenable.com/products/nessus/activation-code](https://www.tenable.com/products/nessus/activation-code).
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
- en: Using Nessus with Metasploit
  id: totrans-26
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Nessus is used by many pentesters because it can be used with Metasploit. We
    can integrate Nessus with Metasploit to perform its scans through Metasploit itself.
    In this section, we will integrate Nessus with the infamous Metasploit by following
    these steps:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
- en: 'Before moving forward, make sure that you have installed Nessus successfully
    and that the Nessus web interface is accessible from the browser:'
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/b533025a-f883-481b-82c4-7eada2d01b4c.png)'
  id: totrans-29
  prefs: []
  type: TYPE_IMG
- en: 'In Metasploit, we first have to load the Nessus plugin using the `load nessus` command
    in msfconsole. This will load the Nessus bridge for Metasploit as follows:'
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/806d0da9-4606-4566-bebf-b8ff7aa0a828.png)'
  id: totrans-31
  prefs: []
  type: TYPE_IMG
- en: 'To see what commands the plugin is offering, execute the `nessus_help` command
    in msfconsole as follows:'
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/a784d701-d6b8-4e69-8124-4b3eeae27467.png)'
  id: totrans-33
  prefs: []
  type: TYPE_IMG
- en: Before we can perform a vulnerability scan on Nessus, we need to authenticate
    it first, which will be done in the next subsection.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
- en: Nessus authentication via Metasploit
  id: totrans-35
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Metasploit uses the Nessus RESTful API to interact with the Nessus Core Engine,
    which can only be done following successful authentication. This can be done as
    follows:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
- en: 'We can authenticate with Nessus using the following command syntax:'
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The following screenshot shows the output of the preceding command:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/7baf7045-fc1b-45ee-9526-a2443628007f.png)'
  id: totrans-40
  prefs: []
  type: TYPE_IMG
- en: '`username` and `password` are the ones we use to log in to the Nessus web frontend.
    `hostname` can be the IP address or DNS name of the Nessus server, and `port`
    is the RPC port that the Nessus web frontend runs on. By default, it is TCP port
    `8834`.'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
- en: '`ssl_verify` verifies the SSL certificate used by the Nessus frontend. By default,
    the server uses a self-signed certificate, and therefore, users should use `ssl_ignore`.
    If we don''t want to use the same command again and again, we can save the credentials
    in a configuration file that Metasploit can use for authenticating with Nessus.'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: '`ssl_verify`用于验证Nessus前端使用的SSL证书。默认情况下，服务器使用自签名证书，因此用户应该使用`ssl_ignore`。如果我们不想一遍又一遍地使用相同的命令，我们可以将凭据保存在Metasploit可以用于与Nessus进行身份验证的配置文件中。'
- en: 'To save the credentials, we can execute the `nessus_save` command. This will
    save the credentials in a YAML file format, as follows:'
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要保存凭据，我们可以执行`nessus_save`命令。这将以YAML文件格式保存凭据，如下所示：
- en: '![](img/05ae4a10-2efd-484c-83ab-0c5396eff77c.png)'
  id: totrans-44
  prefs: []
  type: TYPE_IMG
  zh: '![](img/05ae4a10-2efd-484c-83ab-0c5396eff77c.png)'
- en: 'The content of this YAML configuration file is as follows:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 此YAML配置文件的内容如下：
- en: '![](img/9e1f9f47-54f2-4516-b360-e9648f4a5902.png)'
  id: totrans-46
  prefs: []
  type: TYPE_IMG
  zh: '![](img/9e1f9f47-54f2-4516-b360-e9648f4a5902.png)'
- en: 'In case we want to log out, we can execute the `nessus_logout` command in msfconsole,
    as follows:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们想要注销，我们可以在msfconsole中执行`nessus_logout`命令，如下所示：
- en: '![](img/792ac3d5-6492-476b-8130-381ac7d3bbee.png)'
  id: totrans-48
  prefs: []
  type: TYPE_IMG
  zh: '![](img/792ac3d5-6492-476b-8130-381ac7d3bbee.png)'
- en: Now that we have successfully authenticated with the Nessus RESTful API, we
    can execute some basic commands for getting started.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经成功通过Nessus RESTful API进行了身份验证，我们可以执行一些基本命令来开始。
- en: Basic commands
  id: totrans-50
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 基本命令
- en: 'Let''s say we''re working in an organization and we are provided with the credentials
    to access Nessus via the Metasploit terminal **ONLY**. In situations like these,
    it''s always better to run some basic commands to understand what we can and cannot
    do. Let''s have a look at these commands over the course of the following steps:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们在一个组织中工作，并且只能通过Metasploit终端提供的凭据来访问Nessus。在这种情况下，最好运行一些基本命令，以了解我们可以做什么和不能做什么。让我们在接下来的步骤中看看这些命令：
- en: 'The first command we can execute is `nessus_server_properties` in msfconsole.
    This command will give us the details regarding the scanner (Type, Version, UUID,
    and so on). Based on the type of scanner, we can set our scanning preferences,
    as shown here:'
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们可以在msfconsole中执行的第一个命令是`nessus_server_properties`。此命令将为我们提供有关扫描仪（类型、版本、UUID等）的详细信息。根据扫描仪的类型，我们可以设置我们的扫描首选项，如下所示：
- en: '![](img/a4cfe25a-287b-4fbf-a9be-437521e7f606.png)'
  id: totrans-53
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a4cfe25a-287b-4fbf-a9be-437521e7f606.png)'
- en: 'The `nessus_server_status` command is used to confirm the status of the scanner
    so that we can determine whether it is ready. This is helpful in situations where
    the organization is using a cloud-based Nessus with distributed scanner agents.
    The output of the command is shown in the following screenshot:'
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`nessus_server_status`命令用于确认扫描仪的状态，以便我们可以确定它是否已准备就绪。这在组织使用具有分布式扫描仪代理的基于云的Nessus时非常有帮助。该命令的输出如下截图所示：'
- en: '![](img/faa12f16-6646-4c7b-86fa-292f9421971a.png)'
  id: totrans-55
  prefs: []
  type: TYPE_IMG
  zh: '![](img/faa12f16-6646-4c7b-86fa-292f9421971a.png)'
- en: 'The `nessus_admin` command is used to check whether the authenticated user
    is an administrator, as shown here:'
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`nessus_admin`命令用于检查经过身份验证的用户是否是管理员，如下所示：'
- en: '![](img/29b246f1-0669-4f5e-b8c9-d95e88c76880.png)'
  id: totrans-57
  prefs: []
  type: TYPE_IMG
  zh: '![](img/29b246f1-0669-4f5e-b8c9-d95e88c76880.png)'
- en: 'The `nessus_folder_list` command is used to see the directories in Nessus that
    are available for us to use. Running the command will give us the output shown
    here:'
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`nessus_folder_list`命令用于查看Nessus中可供我们使用的目录。运行该命令将给出以下输出：'
- en: '![](img/12bc1b14-a19e-47d6-96cb-cfbc7fe0a5f1.png)'
  id: totrans-59
  prefs: []
  type: TYPE_IMG
  zh: '![](img/12bc1b14-a19e-47d6-96cb-cfbc7fe0a5f1.png)'
- en: 'The `nessus_template_list` command is used to list all of the templates available
    in Nessus. (**Note**: We can use the `-h` flag to see the help section for this
    command). The accessible templates have Subscription Only set to `TRUE`. To use
    all of the templates, we have to look for the subscription online. The output
    of the preceding command is shown in the following screenshot:'
  id: totrans-60
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`nessus_template_list`命令用于列出Nessus中所有可用的模板。（**注意**：我们可以使用`-h`标志来查看此命令的帮助部分）。可访问的模板将“Subscription
    Only”设置为`TRUE`。要使用所有模板，我们必须在线查找订阅。上述命令的输出如下截图所示：'
- en: '![](img/aa697452-e348-4f96-a401-dd7c73df44ac.png)'
  id: totrans-61
  prefs: []
  type: TYPE_IMG
  zh: '![](img/aa697452-e348-4f96-a401-dd7c73df44ac.png)'
- en: The `-h` flag in the preceding screenshot is used to see the help section of
    the command.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的截图中，`-h`标志用于查看命令的帮助部分。
- en: 'To see a list of categories that are configured in Nessus, we execute the `nessus_family_list` command.
    Upon executing this command, we will see all of the available categories (Family
    Names) with their respective Family ID and number of plugins, as shown here:'
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要查看在Nessus中配置的类别列表，我们执行`nessus_family_list`命令。执行此命令后，我们将看到所有可用类别（Family Names）及其相应的Family
    ID和插件数量，如下所示：
- en: '![](img/1f78a5a8-5858-43dd-a4b2-9e952e039606.png)'
  id: totrans-64
  prefs: []
  type: TYPE_IMG
  zh: '![](img/1f78a5a8-5858-43dd-a4b2-9e952e039606.png)'
- en: 'To list all of the plugins in a family, we can execute the `nessus_plugin_list
    <family ID>` command. This will show us all of the plugins that are available
    to use in Nessus, as shown in the following screenshot:'
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要列出某个类别中的所有插件，我们可以执行`nessus_plugin_list <family ID>`命令。这将显示我们在Nessus中可以使用的所有插件，如下截图所示：
- en: '![](img/5df58389-a68d-415c-8a58-acbf98847830.png)'
  id: totrans-66
  prefs: []
  type: TYPE_IMG
  zh: '![](img/5df58389-a68d-415c-8a58-acbf98847830.png)'
- en: 'To learn more about the plugin in detail, we can execute the `nessus_plugin_details
    <plugin ID>` command in msfconsole, as shown here:'
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要详细了解插件，我们可以在msfconsole中执行`nessus_plugin_details <plugin ID>`命令，如下所示：
- en: '![](img/45106ddc-01a7-4e64-ad27-0b3f739b93b2.png)'
  id: totrans-68
  prefs: []
  type: TYPE_IMG
  zh: '![](img/45106ddc-01a7-4e64-ad27-0b3f739b93b2.png)'
- en: 'To list all of the available custom policies, we can execute the `nessus_policy_list` command.
    This will give us the policy UUID, which we''ll be using to perform vulnerability
    scanning. These policies are used to perform custom scans. Policy UUIDs can be
    used to differentiate between the different scans performed using multiple policies,
    as shown here:'
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要列出所有可用的自定义策略，我们可以执行`nessus_policy_list`命令。这将给我们提供策略UUID，我们将使用它来执行漏洞扫描。这些策略用于执行自定义扫描。策略UUID可用于区分使用多个策略执行的不同扫描，如下所示：
- en: '![](img/dab12abf-4214-4360-a790-ed57b3287ee7.png)'
  id: totrans-70
  prefs: []
  type: TYPE_IMG
  zh: '![](img/dab12abf-4214-4360-a790-ed57b3287ee7.png)'
- en: 'To begin scanning, we first need to patch the Metasploit Gem, which is responsible
    for communicating with the Nessus RESTful API (as the official patch is not yet
    released) for the errors we may face while running the scan. This is a workaround
    developed by `@kost` ([https://github.com/kost](https://github.com/kost)). If
    not patched, Metasploit will throw an error, as shown in the following screenshot:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/56f16c03-eab5-4f53-9075-425ba3779b3e.png)'
  id: totrans-72
  prefs: []
  type: TYPE_IMG
- en: In the next section, we will look at patching the Metasploit library.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
- en: Patching the Metasploit library
  id: totrans-74
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Since Nessus version 7.0, the state altering requests (for example, the create/launch/pause/stop/delete
    scans) are protected by a new authentication mechanism. For Metasploit to follow
    the newly updated mechanism for user authentication, we need to patch the `nessus_rest` RubyGem.
    To do this, just search for the `nessus_rest.rb` file in the `RubyGems` directory.
    The code that doesn''t interact with the new authentication mechanism of Nessus
    can be found at **line 152**:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/736150c9-b043-4bfc-93f1-3de027cf4841.png)'
  id: totrans-76
  prefs: []
  type: TYPE_IMG
- en: 'We need to replace the code on **line 152** with the one given here:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/0071c2f0-8e20-4b9c-893a-6d9092f8e223.png)'
  id: totrans-78
  prefs: []
  type: TYPE_IMG
- en: 'The code can be found here: [https://github.com/kost/nessus_rest-ruby/pull/7/files](https://github.com/kost/nessus_rest-ruby/pull/7/files).'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
- en: Next, we will be performing a Nessus scan.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
- en: Performing a Nessus scan via Metasploit
  id: totrans-81
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now that we have patched the Metasploit library, let''s perform a Nessus scan
    using Metasploit:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
- en: 'After patching the gem, we can now create a vulnerability scanning task using
    the `nessus_scan_new <UUID of Policy> <Scan name> <Description> <Targets>` command,
    as shown here:'
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/97bdcdbd-be5e-445c-9940-af9e77c55c23.png)'
  id: totrans-84
  prefs: []
  type: TYPE_IMG
- en: 'Once the task is created, we can confirm it by executing the `nessus_scan_list` command. `Scan
    ID` will be used to launch the task, so let''s make a note of it, as shown here:'
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/6bd1ef53-48fd-467a-848c-c4f240d6c57f.png)'
  id: totrans-86
  prefs: []
  type: TYPE_IMG
- en: 'Let''s confirm the same by accessing the Nessus web interface:'
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/594d7e0a-1ed7-4daf-8745-96d0ef4f7029.png)'
  id: totrans-88
  prefs: []
  type: TYPE_IMG
- en: As we can see in the preceding screenshot, the scanning task is created but
    it has not yet launched.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
- en: 'To launch the scanning task, we need to execute the `nessus_scan_launch <scan
    ID>` command:'
  id: totrans-90
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/8f794d63-38e1-41a8-b51b-d8e9dead0134.png)'
  id: totrans-91
  prefs: []
  type: TYPE_IMG
- en: We have successfully launched the scanning task.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s confirm it on the Nessus web interface:'
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/71927e81-7c25-465b-83ae-b13fc120bed4.png)'
  id: totrans-94
  prefs: []
  type: TYPE_IMG
- en: 'We can see the same details from the preceding screenshot in msfconsole by
    executing the `nessus_scan_details <scan ID> <category>` command:'
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/2f367d5e-fbc5-4d6d-b8e8-a4c73898c017.png)'
  id: totrans-96
  prefs: []
  type: TYPE_IMG
- en: 'The available categories that can be used to view the scanning details are
    the following:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
- en: '**Info**: General scanning information, which includes scan status, the policy
    used for the scan, the scan name, the scan targets, and the scan start and end
    times'
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Vulnerabilities**: A list of vulnerabilities found by Nessus on the given
    targets, which include the plugin name used for scanning the target with its plugin
    ID, the plugin family (category), and the total number of instances found on the
    target'
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following screenshot shows the output of the vulnerabilities command:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/1ceddb0e-6408-4179-ae60-298e19ab0433.png)'
  id: totrans-101
  prefs: []
  type: TYPE_IMG
- en: '**History**: This is the last time the same scanning task was launched. This
    includes the **History ID**, the **Status** of the scan, the **Creation Date**, and
    the **Last Modification Date**.'
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following screenshot shows the output of the history command:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/1c121956-c0b3-420a-af2d-abec8b45a95a.png)'
  id: totrans-104
  prefs: []
  type: TYPE_IMG
- en: 'Let''s confirm the scanning details from the Nessus web interface:'
  id: totrans-105
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/07936ea5-dfe1-4e8c-b025-4c4b3586b0f3.png)'
  id: totrans-106
  prefs: []
  type: TYPE_IMG
- en: 'Let''s now execute the `nessus_report_hosts <scan ID>` command to see an overall
    summary of the scan, as shown here:'
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/b2abc66d-6678-489c-b477-c6909e353624.png)'
  id: totrans-108
  prefs: []
  type: TYPE_IMG
- en: 'To get a list of the vulnerabilities identified, we can execute the `nessus_report_vulns
    <scan ID>` command, as shown here:'
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/2a2c4965-d5f9-4f84-bfda-3b0a755a6cd3.png)'
  id: totrans-110
  prefs: []
  type: TYPE_IMG
- en: 'Using Nessus from Metasploit comes with a perk: being able to use the Metasploit
    DB for the scan. This can be very useful in cases where we have a list of targets
    stored in the Metasploit DB and we want to perform a vulnerability scan on those
    targets.'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
- en: Using the Metasploit DB for Nessus scan
  id: totrans-112
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'All of the targets that are stored in the Metasploit DB can be passed on to
    Nessus using the `nessus_db_scan <policy ID> <scan name> <scan description>` command.
    In our case, we have the target `192.168.2.1` IP stored in our Metasploit DB;
    upon executing this command, Nessus will start the scan (NOT only creating the
    task, but launching it as well) on the target IP, which is stored in the Metasploit
    DB:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/fc616bc7-03e5-4007-97f8-ef2ab16bf3c1.png)'
  id: totrans-114
  prefs: []
  type: TYPE_IMG
- en: 'Follow these steps:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s confirm the preceding execution from the Nessus web interface:'
  id: totrans-116
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/dde21120-d705-479b-9b54-a45d5bfafd2d.png)'
  id: totrans-117
  prefs: []
  type: TYPE_IMG
- en: 'As we can see in the preceding screenshot, the scan is up and running. In cases
    where we are managing a Metasploit workspace, we can use the `nessus_db_scan_workspace` command.
    In the following screenshot, we have a target IP stored in the `NESSUS-WEB` workspace:'
  id: totrans-118
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/a8de8828-a0a6-46c0-94fb-2a3cd001da59.png)'
  id: totrans-119
  prefs: []
  type: TYPE_IMG
- en: 'Let''s execute the `nessus_db_scan_workspace <policy ID> <scan name> <scan
    description> <workspace>` command to run the scan on `192.168.2.1` , which is
    stored in the `NESSUS-WEB` workspace:'
  id: totrans-120
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/c485dc8e-4dc7-4955-abd7-19be1825f05c.png)'
  id: totrans-121
  prefs: []
  type: TYPE_IMG
- en: As we can see in the preceding screenshot, we have successfully created a scanning
    task that will scan all the hosts stored in the `NESSUS-WEB` workspace.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
- en: We have to launch the scanning task manually if we are executing the `nessus_db_scan_workspace`
    command.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s launch the scan using the `nessus_scan_launch <scan ID>` command. Upon
    successful launch of the scanning task, we''ll use the `nessus_scan_details` command
    again to get the scanning status:'
  id: totrans-124
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/3478944c-f855-4383-9f16-80523def20f7.png)'
  id: totrans-125
  prefs: []
  type: TYPE_IMG
- en: As we can see from the preceding screenshot, the scan is complete.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
- en: The scanning result is not saved in the workspace; rather, we can either import
    the result manually or by using the `nessus_db_import` command. Keep in mind that
    some of the features are only accessible if we're using Nessus Manager.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have mentioned how to use the Metasploit DB for performing a Nessus
    scan, let's move on to the next section and cover how to import the Nessus scan
    results into the Metasploit DB.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
- en: Importing Nessus scan in the Metasploit DB
  id: totrans-129
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This method is used when we don''t have access to REST APIs, which are responsible
    for importing the result directly into the DB. The simple workaround is as follows:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
- en: First, export the Nessus result in a file, download the file, and then import
    the same file using the `db_import` command.
  id: totrans-131
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: To export the result, use the `nessus_scan_export <scan ID> <export format>` command.
    (The available export formats are Nessus, HTML, PDF, CSV, or DB). A file ID will
    be allotted during the process.
  id: totrans-132
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Once the export is ready, execute the `nessus_scan_report_download <scan ID>
    <file ID>` command:'
  id: totrans-133
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/dc195a73-c979-431d-a94f-4e13f721f335.png)'
  id: totrans-134
  prefs: []
  type: TYPE_IMG
- en: As we can see in the preceding screenshot, we have exported the results into
    Nessus format and downloaded the file.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
- en: Now, import the same file using the `db_import` command.
  id: totrans-136
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Next, let''s execute the `vulns` command to confirm whether the Nessus results
    have been successfully imported into the DB:'
  id: totrans-137
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/b7c13ac1-a15c-4c16-8904-3576687ef4cc.png)'
  id: totrans-138
  prefs: []
  type: TYPE_IMG
- en: 'We can also confirm whether the preceding method has worked by executing the
    `hosts `and `services` commands, as shown here:'
  id: totrans-139
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/49f77ce9-ff96-4809-9d3b-2c979476a66b.png)'
  id: totrans-140
  prefs: []
  type: TYPE_IMG
- en: If used properly, we can manage VA projects quite efficiently with the click
    of a button (of course, by also including the custom Metasploit scripts for managing
    projects and automation).
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  id: totrans-142
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we started by introducing the Nessus bridge. We then learned
    about configuring the bridge. Next, we saw how to initiate Nessus scans from the
    Metasploit console, and finally, we learned how to import scan results into the
    Metasploit database for further use.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们首先介绍了Nessus桥。然后我们学习了如何配置桥接。接下来，我们看到了如何从Metasploit控制台启动Nessus扫描，最后，我们学习了如何将扫描结果导入Metasploit数据库以供进一步使用。
- en: In the next chapter, we'll be learning how to perform a penetration test on
    a **Content Management Systems** (**CMS**), starting with the popular system,
    WordPress.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将学习如何对**内容管理系统**（**CMS**）进行渗透测试，首先从流行的系统WordPress开始。
- en: Questions
  id: totrans-145
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: Do I need Nessus installed on my system to run it with Metasploit?
  id: totrans-146
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我需要在系统上安装Nessus才能与Metasploit一起运行吗？
- en: Can I use other vulnerability scanners instead of Nessus in Metasploit?
  id: totrans-147
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我可以在Metasploit中使用其他漏洞扫描器代替Nessus吗？
- en: Can Nessus Professional be used with Metasploit?
  id: totrans-148
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Nessus专业版可以与Metasploit一起使用吗？
- en: How many systems can I scan through Nessus via Metasploit?
  id: totrans-149
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我可以通过Metasploit扫描多少个系统？
- en: Further reading
  id: totrans-150
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: 'The following link is an official blog post about Nessus, explaining why and
    how Nessus can be used with Metasploit:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 以下链接是关于Nessus的官方博客文章，解释了为什么以及如何将Nessus与Metasploit一起使用：
- en: '[https://www.tenable.com/blog/using-nessus-and-metasploit-together](https://www.tenable.com/blog/using-nessus-and-metasploit-together)'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://www.tenable.com/blog/using-nessus-and-metasploit-together](https://www.tenable.com/blog/using-nessus-and-metasploit-together)'
