- en: Vulnerability Assessment Using Metasploit (Nessus)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we will look at some of the ways in which we can perform vulnerability
    assessments using the Nessus bridge for the Metasploit framework. Nessus is a
    vulnerability scanner built by Tenable, Inc. It is widely used to perform network
    security assessments. A Nessus bridge allows Metasploit to parse and import the
    scan results of Nessus into its own database for further analysis and exploitation.
    We can even initiate Nessus scans from within Metasploit using the bridge.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will be covering the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Introduction to Nessus
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using Nessus with Metasploit
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Basic commands
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Patching the Metasploit library
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Performing a Nessus scan via Metasploit
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using Metasploit DB for Nessus scans
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Importing Nessus scan in Metasploit DB
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The following are the prerequisites for this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Metasploit Framework
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*nix-based systems/Microsoft Windows systems for the host machine'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Nessus Home Edition or Professional Edition
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction to Nessus
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Nessus is one of the most common and easy-to-use vulnerability scanners developed
    by Tenable. This vulnerability scanner is generally used to perform vulnerability
    assessment on the network, and Tenable Research has published 138,005 plugins,
    covering 53,957 CVE IDs and 30,392 Bugtraq IDs. A vast collection of Nessus scripts
    (NASL) helps the tester to broaden their reach to find vulnerabilities. Some of
    the features of Nessus are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Vulnerability scanning (network, web, cloud, and so on)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Asset discovery
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Configuration auditing (MDM, network, and so on)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Target profiling
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Malware detection
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Sensitive data discovery
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Patch auditing and management
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Policy compliance auditing
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Nessus can be downloaded from [https://www.tenable.com/downloads/nessus](https://www.tenable.com/downloads/nessus).
    Once the installation is complete, we have to activate the tool. The activation
    can be completed with a code from [https://www.tenable.com/products/nessus/activation-code](https://www.tenable.com/products/nessus/activation-code).
  prefs: []
  type: TYPE_NORMAL
- en: Using Nessus with Metasploit
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Nessus is used by many pentesters because it can be used with Metasploit. We
    can integrate Nessus with Metasploit to perform its scans through Metasploit itself.
    In this section, we will integrate Nessus with the infamous Metasploit by following
    these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Before moving forward, make sure that you have installed Nessus successfully
    and that the Nessus web interface is accessible from the browser:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/b533025a-f883-481b-82c4-7eada2d01b4c.png)'
  prefs: []
  type: TYPE_IMG
- en: 'In Metasploit, we first have to load the Nessus plugin using the `load nessus` command
    in msfconsole. This will load the Nessus bridge for Metasploit as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/806d0da9-4606-4566-bebf-b8ff7aa0a828.png)'
  prefs: []
  type: TYPE_IMG
- en: 'To see what commands the plugin is offering, execute the `nessus_help` command
    in msfconsole as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/a784d701-d6b8-4e69-8124-4b3eeae27467.png)'
  prefs: []
  type: TYPE_IMG
- en: Before we can perform a vulnerability scan on Nessus, we need to authenticate
    it first, which will be done in the next subsection.
  prefs: []
  type: TYPE_NORMAL
- en: Nessus authentication via Metasploit
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Metasploit uses the Nessus RESTful API to interact with the Nessus Core Engine,
    which can only be done following successful authentication. This can be done as
    follows:'
  prefs: []
  type: TYPE_NORMAL
- en: 'We can authenticate with Nessus using the following command syntax:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'The following screenshot shows the output of the preceding command:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/7baf7045-fc1b-45ee-9526-a2443628007f.png)'
  prefs: []
  type: TYPE_IMG
- en: '`username` and `password` are the ones we use to log in to the Nessus web frontend.
    `hostname` can be the IP address or DNS name of the Nessus server, and `port`
    is the RPC port that the Nessus web frontend runs on. By default, it is TCP port
    `8834`.'
  prefs: []
  type: TYPE_NORMAL
- en: '`ssl_verify` verifies the SSL certificate used by the Nessus frontend. By default,
    the server uses a self-signed certificate, and therefore, users should use `ssl_ignore`.
    If we don''t want to use the same command again and again, we can save the credentials
    in a configuration file that Metasploit can use for authenticating with Nessus.'
  prefs: []
  type: TYPE_NORMAL
- en: 'To save the credentials, we can execute the `nessus_save` command. This will
    save the credentials in a YAML file format, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/05ae4a10-2efd-484c-83ab-0c5396eff77c.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The content of this YAML configuration file is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/9e1f9f47-54f2-4516-b360-e9648f4a5902.png)'
  prefs: []
  type: TYPE_IMG
- en: 'In case we want to log out, we can execute the `nessus_logout` command in msfconsole,
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/792ac3d5-6492-476b-8130-381ac7d3bbee.png)'
  prefs: []
  type: TYPE_IMG
- en: Now that we have successfully authenticated with the Nessus RESTful API, we
    can execute some basic commands for getting started.
  prefs: []
  type: TYPE_NORMAL
- en: Basic commands
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s say we''re working in an organization and we are provided with the credentials
    to access Nessus via the Metasploit terminal **ONLY**. In situations like these,
    it''s always better to run some basic commands to understand what we can and cannot
    do. Let''s have a look at these commands over the course of the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'The first command we can execute is `nessus_server_properties` in msfconsole.
    This command will give us the details regarding the scanner (Type, Version, UUID,
    and so on). Based on the type of scanner, we can set our scanning preferences,
    as shown here:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/a4cfe25a-287b-4fbf-a9be-437521e7f606.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The `nessus_server_status` command is used to confirm the status of the scanner
    so that we can determine whether it is ready. This is helpful in situations where
    the organization is using a cloud-based Nessus with distributed scanner agents.
    The output of the command is shown in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/faa12f16-6646-4c7b-86fa-292f9421971a.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The `nessus_admin` command is used to check whether the authenticated user
    is an administrator, as shown here:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/29b246f1-0669-4f5e-b8c9-d95e88c76880.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The `nessus_folder_list` command is used to see the directories in Nessus that
    are available for us to use. Running the command will give us the output shown
    here:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/12bc1b14-a19e-47d6-96cb-cfbc7fe0a5f1.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The `nessus_template_list` command is used to list all of the templates available
    in Nessus. (**Note**: We can use the `-h` flag to see the help section for this
    command). The accessible templates have Subscription Only set to `TRUE`. To use
    all of the templates, we have to look for the subscription online. The output
    of the preceding command is shown in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/aa697452-e348-4f96-a401-dd7c73df44ac.png)'
  prefs: []
  type: TYPE_IMG
- en: The `-h` flag in the preceding screenshot is used to see the help section of
    the command.
  prefs: []
  type: TYPE_NORMAL
- en: 'To see a list of categories that are configured in Nessus, we execute the `nessus_family_list` command.
    Upon executing this command, we will see all of the available categories (Family
    Names) with their respective Family ID and number of plugins, as shown here:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/1f78a5a8-5858-43dd-a4b2-9e952e039606.png)'
  prefs: []
  type: TYPE_IMG
- en: 'To list all of the plugins in a family, we can execute the `nessus_plugin_list
    <family ID>` command. This will show us all of the plugins that are available
    to use in Nessus, as shown in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/5df58389-a68d-415c-8a58-acbf98847830.png)'
  prefs: []
  type: TYPE_IMG
- en: 'To learn more about the plugin in detail, we can execute the `nessus_plugin_details
    <plugin ID>` command in msfconsole, as shown here:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/45106ddc-01a7-4e64-ad27-0b3f739b93b2.png)'
  prefs: []
  type: TYPE_IMG
- en: 'To list all of the available custom policies, we can execute the `nessus_policy_list` command.
    This will give us the policy UUID, which we''ll be using to perform vulnerability
    scanning. These policies are used to perform custom scans. Policy UUIDs can be
    used to differentiate between the different scans performed using multiple policies,
    as shown here:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/dab12abf-4214-4360-a790-ed57b3287ee7.png)'
  prefs: []
  type: TYPE_IMG
- en: 'To begin scanning, we first need to patch the Metasploit Gem, which is responsible
    for communicating with the Nessus RESTful API (as the official patch is not yet
    released) for the errors we may face while running the scan. This is a workaround
    developed by `@kost` ([https://github.com/kost](https://github.com/kost)). If
    not patched, Metasploit will throw an error, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/56f16c03-eab5-4f53-9075-425ba3779b3e.png)'
  prefs: []
  type: TYPE_IMG
- en: In the next section, we will look at patching the Metasploit library.
  prefs: []
  type: TYPE_NORMAL
- en: Patching the Metasploit library
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Since Nessus version 7.0, the state altering requests (for example, the create/launch/pause/stop/delete
    scans) are protected by a new authentication mechanism. For Metasploit to follow
    the newly updated mechanism for user authentication, we need to patch the `nessus_rest` RubyGem.
    To do this, just search for the `nessus_rest.rb` file in the `RubyGems` directory.
    The code that doesn''t interact with the new authentication mechanism of Nessus
    can be found at **line 152**:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/736150c9-b043-4bfc-93f1-3de027cf4841.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We need to replace the code on **line 152** with the one given here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/0071c2f0-8e20-4b9c-893a-6d9092f8e223.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The code can be found here: [https://github.com/kost/nessus_rest-ruby/pull/7/files](https://github.com/kost/nessus_rest-ruby/pull/7/files).'
  prefs: []
  type: TYPE_NORMAL
- en: Next, we will be performing a Nessus scan.
  prefs: []
  type: TYPE_NORMAL
- en: Performing a Nessus scan via Metasploit
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now that we have patched the Metasploit library, let''s perform a Nessus scan
    using Metasploit:'
  prefs: []
  type: TYPE_NORMAL
- en: 'After patching the gem, we can now create a vulnerability scanning task using
    the `nessus_scan_new <UUID of Policy> <Scan name> <Description> <Targets>` command,
    as shown here:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/97bdcdbd-be5e-445c-9940-af9e77c55c23.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Once the task is created, we can confirm it by executing the `nessus_scan_list` command. `Scan
    ID` will be used to launch the task, so let''s make a note of it, as shown here:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/6bd1ef53-48fd-467a-848c-c4f240d6c57f.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Let''s confirm the same by accessing the Nessus web interface:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/594d7e0a-1ed7-4daf-8745-96d0ef4f7029.png)'
  prefs: []
  type: TYPE_IMG
- en: As we can see in the preceding screenshot, the scanning task is created but
    it has not yet launched.
  prefs: []
  type: TYPE_NORMAL
- en: 'To launch the scanning task, we need to execute the `nessus_scan_launch <scan
    ID>` command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/8f794d63-38e1-41a8-b51b-d8e9dead0134.png)'
  prefs: []
  type: TYPE_IMG
- en: We have successfully launched the scanning task.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s confirm it on the Nessus web interface:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/71927e81-7c25-465b-83ae-b13fc120bed4.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We can see the same details from the preceding screenshot in msfconsole by
    executing the `nessus_scan_details <scan ID> <category>` command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/2f367d5e-fbc5-4d6d-b8e8-a4c73898c017.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The available categories that can be used to view the scanning details are
    the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Info**: General scanning information, which includes scan status, the policy
    used for the scan, the scan name, the scan targets, and the scan start and end
    times'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Vulnerabilities**: A list of vulnerabilities found by Nessus on the given
    targets, which include the plugin name used for scanning the target with its plugin
    ID, the plugin family (category), and the total number of instances found on the
    target'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following screenshot shows the output of the vulnerabilities command:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/1ceddb0e-6408-4179-ae60-298e19ab0433.png)'
  prefs: []
  type: TYPE_IMG
- en: '**History**: This is the last time the same scanning task was launched. This
    includes the **History ID**, the **Status** of the scan, the **Creation Date**, and
    the **Last Modification Date**.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following screenshot shows the output of the history command:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/1c121956-c0b3-420a-af2d-abec8b45a95a.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Let''s confirm the scanning details from the Nessus web interface:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/07936ea5-dfe1-4e8c-b025-4c4b3586b0f3.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Let''s now execute the `nessus_report_hosts <scan ID>` command to see an overall
    summary of the scan, as shown here:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/b2abc66d-6678-489c-b477-c6909e353624.png)'
  prefs: []
  type: TYPE_IMG
- en: 'To get a list of the vulnerabilities identified, we can execute the `nessus_report_vulns
    <scan ID>` command, as shown here:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/2a2c4965-d5f9-4f84-bfda-3b0a755a6cd3.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Using Nessus from Metasploit comes with a perk: being able to use the Metasploit
    DB for the scan. This can be very useful in cases where we have a list of targets
    stored in the Metasploit DB and we want to perform a vulnerability scan on those
    targets.'
  prefs: []
  type: TYPE_NORMAL
- en: Using the Metasploit DB for Nessus scan
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'All of the targets that are stored in the Metasploit DB can be passed on to
    Nessus using the `nessus_db_scan <policy ID> <scan name> <scan description>` command.
    In our case, we have the target `192.168.2.1` IP stored in our Metasploit DB;
    upon executing this command, Nessus will start the scan (NOT only creating the
    task, but launching it as well) on the target IP, which is stored in the Metasploit
    DB:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/fc616bc7-03e5-4007-97f8-ef2ab16bf3c1.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s confirm the preceding execution from the Nessus web interface:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/dde21120-d705-479b-9b54-a45d5bfafd2d.png)'
  prefs: []
  type: TYPE_IMG
- en: 'As we can see in the preceding screenshot, the scan is up and running. In cases
    where we are managing a Metasploit workspace, we can use the `nessus_db_scan_workspace` command.
    In the following screenshot, we have a target IP stored in the `NESSUS-WEB` workspace:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/a8de8828-a0a6-46c0-94fb-2a3cd001da59.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Let''s execute the `nessus_db_scan_workspace <policy ID> <scan name> <scan
    description> <workspace>` command to run the scan on `192.168.2.1` , which is
    stored in the `NESSUS-WEB` workspace:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/c485dc8e-4dc7-4955-abd7-19be1825f05c.png)'
  prefs: []
  type: TYPE_IMG
- en: As we can see in the preceding screenshot, we have successfully created a scanning
    task that will scan all the hosts stored in the `NESSUS-WEB` workspace.
  prefs: []
  type: TYPE_NORMAL
- en: We have to launch the scanning task manually if we are executing the `nessus_db_scan_workspace`
    command.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s launch the scan using the `nessus_scan_launch <scan ID>` command. Upon
    successful launch of the scanning task, we''ll use the `nessus_scan_details` command
    again to get the scanning status:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/3478944c-f855-4383-9f16-80523def20f7.png)'
  prefs: []
  type: TYPE_IMG
- en: As we can see from the preceding screenshot, the scan is complete.
  prefs: []
  type: TYPE_NORMAL
- en: The scanning result is not saved in the workspace; rather, we can either import
    the result manually or by using the `nessus_db_import` command. Keep in mind that
    some of the features are only accessible if we're using Nessus Manager.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have mentioned how to use the Metasploit DB for performing a Nessus
    scan, let's move on to the next section and cover how to import the Nessus scan
    results into the Metasploit DB.
  prefs: []
  type: TYPE_NORMAL
- en: Importing Nessus scan in the Metasploit DB
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This method is used when we don''t have access to REST APIs, which are responsible
    for importing the result directly into the DB. The simple workaround is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: First, export the Nessus result in a file, download the file, and then import
    the same file using the `db_import` command.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: To export the result, use the `nessus_scan_export <scan ID> <export format>` command.
    (The available export formats are Nessus, HTML, PDF, CSV, or DB). A file ID will
    be allotted during the process.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Once the export is ready, execute the `nessus_scan_report_download <scan ID>
    <file ID>` command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/dc195a73-c979-431d-a94f-4e13f721f335.png)'
  prefs: []
  type: TYPE_IMG
- en: As we can see in the preceding screenshot, we have exported the results into
    Nessus format and downloaded the file.
  prefs: []
  type: TYPE_NORMAL
- en: Now, import the same file using the `db_import` command.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Next, let''s execute the `vulns` command to confirm whether the Nessus results
    have been successfully imported into the DB:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/b7c13ac1-a15c-4c16-8904-3576687ef4cc.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We can also confirm whether the preceding method has worked by executing the
    `hosts `and `services` commands, as shown here:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/49f77ce9-ff96-4809-9d3b-2c979476a66b.png)'
  prefs: []
  type: TYPE_IMG
- en: If used properly, we can manage VA projects quite efficiently with the click
    of a button (of course, by also including the custom Metasploit scripts for managing
    projects and automation).
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we started by introducing the Nessus bridge. We then learned
    about configuring the bridge. Next, we saw how to initiate Nessus scans from the
    Metasploit console, and finally, we learned how to import scan results into the
    Metasploit database for further use.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we'll be learning how to perform a penetration test on
    a **Content Management Systems** (**CMS**), starting with the popular system,
    WordPress.
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Do I need Nessus installed on my system to run it with Metasploit?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Can I use other vulnerability scanners instead of Nessus in Metasploit?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Can Nessus Professional be used with Metasploit?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How many systems can I scan through Nessus via Metasploit?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The following link is an official blog post about Nessus, explaining why and
    how Nessus can be used with Metasploit:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://www.tenable.com/blog/using-nessus-and-metasploit-together](https://www.tenable.com/blog/using-nessus-and-metasploit-together)'
  prefs: []
  type: TYPE_NORMAL
