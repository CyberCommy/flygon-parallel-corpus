- en: Using Vue Dev Tools and Testing Your SPA
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Over the last 11 chapters, we've been developing several **Single-Page Applications**
    (**SPAs**) using `Vue.js`. Although development is a big chunk of creating an
    SPA, testing also forms a significant part of creating any JavaScript web app.
  prefs: []
  type: TYPE_NORMAL
- en: The Vue developer tools, available in Chrome and Firefox, provide great insights
    into the components being used within a certain view or the current state of the
    Vuex store – along with any events being emitted from the JavaScript. These tools
    allow you to check and validate the data within your app while developing to ensure
    everything is as it should be.
  prefs: []
  type: TYPE_NORMAL
- en: The other side of SPA testing is with automated tests. Conditions, rules, and
    routes you write to automate tasks within your app, allow you to then specify
    what the output should be and the test runs the conditions to verify whether the
    results match.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will:'
  prefs: []
  type: TYPE_NORMAL
- en: Cover the usage of the Vue developer tools with the applications we've developed
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Have an overview of testing tools and applications
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using the Vue.js developer tools
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Vue developer tools are available for Chrome and Firefox and can be downloaded
    from GitHub ([https://github.com/vuejs/vue-devtools](https://github.com/vuejs/vue-devtools)).
    Once installed, they become an extension of the browser developer tools. For example,
    in Chrome, they appear after the Audits tab.
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/e359dd13-20e7-4814-83e5-39484009bdff.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The Vue developer tools will only work when you are using Vue in development
    mode. By default, the unminified version of Vue has the development mode enabled.
    However, if you are using the production version of the code, the development
    tools can be enabled by setting the `devtools` variable to `true` in your code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Throughout the book, we've been using the development version of Vue, so the
    dev tools should work with all three of the SPAs we have developed. Open the Dropbox
    example and open the Vue developer tools.
  prefs: []
  type: TYPE_NORMAL
- en: Inspecting Vue components data and computed values
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Vue developer tools give a great overview of the components in use on the
    page. You can also drill down into the components and preview the data in use
    on that particular instance. This is perfect for inspecting the properties of
    each component on the page at any given time.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, if we inspect the Dropbox app and navigate to the Components tab,
    we can see the <Root> Vue instance and we can see the <DropboxViewer> component.
    Clicking this will reveal all of the data properties of the component – along
    with any computed properties. This lets us validate whether the structure is constructed
    correctly, along with the computed path property:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/fd41fc73-2502-42c2-b4ec-218588b0bd34.png)'
  prefs: []
  type: TYPE_IMG
- en: Drilling down into each component, we can access individual data objects and
    computed properties.
  prefs: []
  type: TYPE_NORMAL
- en: Using the Vue developer tools for inspecting your application is a much more
    efficient way of validating data while creating your app, as it saves having to
    place several `console.log()` statements.
  prefs: []
  type: TYPE_NORMAL
- en: Viewing Vuex mutations and time-travel
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Navigating to the next tab, Vuex, allows us to watch store mutations taking
    place in real time. Every time a mutation is fired, a new line is created in the
    left-hand panel. This element allows us to view what data is being sent, and what
    the Vuex store looked like before and after the data had been committed.
  prefs: []
  type: TYPE_NORMAL
- en: 'It also gives you several options to revert, commit, and time-travel to any
    point. Loading the Dropbox app, several structure mutations immediately populate
    within the left-hand panel, listing the mutation name and the time they occurred.
    This is the code pre-caching the folders in action. Clicking on each one will
    reveal the Vuex store state – along with a mutation containing the payload sent.
    The state display is *after* the payload has been sent and the mutation committed.
    To preview what the state looked like *before* that mutation, select the preceding
    option:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/ea5f9e57-a1da-4dbb-bb62-aa744d97cc83.png)'
  prefs: []
  type: TYPE_IMG
- en: 'On each entry, next to the mutation name, you will notice three symbols that
    allow you to carry out several actions and directly mutate the store in your browser:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Commit this mutation**: This allows you to commit all the data up to that
    point. This will *remove* all of the mutations from the dev tools and update the
    Base State to this point. This is handy if there are several mutations occurring
    that you wish to keep track of.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Revert this mutation**: This will undo the mutation and all mutations after
    this point. This allows you to carry out the same actions again and again without
    pressing refresh or losing your current place. For example, when adding a product
    to the basket in our shop app, a mutation occurs. Using this would allow you to
    remove the product from the basket and undo any following mutations without navigating
    away from the product page.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Time-travel to this state**: This allows you to preview the app and state
    at that particular mutation, without reverting any mutations that occur after
    the selected point.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The mutations tab also allows you to commit or revert all mutations at the top
    of the left-hand panel. Within the right-hand panel, you can also import and export
    a JSON encoded version of the store's state. This is particularly handy when you
    want to re-test several circumstances and instances without having to reproduce
    several steps.
  prefs: []
  type: TYPE_NORMAL
- en: Previewing event data
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Events tab of the Vue developer tools works in a similar way to the Vuex
    tab, allowing you to inspect any events emitted throughout your app. Our Dropbox
    app doesn't use events, so open up the people-filtering app we created in Chapter
    2, *Displaying, Looping, Searching, and Filtering Data*, and [Chapter 3](f611e841-86d6-4741-a792-d10f9c289358.xhtml), *Optimizing
    our App and Using Components to Display Data*, of this book.
  prefs: []
  type: TYPE_NORMAL
- en: 'Changing the filters in this app emits an event each time the filter type is
    updated, along with the filter query:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/f7219298-cb16-4f17-9c40-750c9b9eeb1b.png)'
  prefs: []
  type: TYPE_IMG
- en: The left-hand panel again lists the name of the event and the time it occurred.
    The right panel contains information about the event, including its component
    origin and payload. This data allows you to ensure the event data is as you expected
    it to be and, if not, helps you locate where the event is being triggered.
  prefs: []
  type: TYPE_NORMAL
- en: The Vue dev tools are invaluable, especially as your JavaScript application
    gets bigger and more complex. Open the shop SPA we developed and inspect the various
    components and Vuex data to get an idea of how this tool can help you create applications
    that only commit mutations they need to and emit the events they have to.
  prefs: []
  type: TYPE_NORMAL
- en: Testing your SPA
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The majority of Vue testing suites revolve around having command-line knowledge
    and creating a Vue application using the **CLI** (**command-line interface**).
    Along with creating applications in frontend-compatible JavaScript, Vue also has
    a CLI that allows you to create applications using component-based files. These
    are files with a `.vue` extension and contain the template HTML along with the
    JavaScript required for the component. They also allow you to create scoped CSS
    – styles that only apply to that component. If you chose to create your app using
    the CLI, all of the theory and a lot of the practical knowledge you have learned
    in this book can easily be ported across.
  prefs: []
  type: TYPE_NORMAL
- en: Command-line unit testing
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Along with component files, the Vue CLI allows you to integrate with command-line
    unit tests easier, such as Jest, Mocha, Chai, and TestCafe ([https://testcafe.devexpress.com/](https://testcafe.devexpress.com/)).
    For example, TestCafe allows you to specify several different tests, including
    checking whether content exists, to clicking buttons to test functionality. An
    example of a TestCafe test checking to see if our filtering component in our first
    app contains the work *Field* would be:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: This test would then equate to `true` or `false`. Unit tests are generally written
    in conjunction with components themselves, allowing components to be reused and
    tested in isolation. This allows you to check that external factors have no bearing
    on the output of your tests.
  prefs: []
  type: TYPE_NORMAL
- en: Most command-line JavaScript testing libraries will integrate with Vue.js; there
    is a great list available in the awesome Vue GitHub repository ([https://github.com/vuejs/awesome-vue#test](https://github.com/vuejs/awesome-vue#test)).
  prefs: []
  type: TYPE_NORMAL
- en: Browser automation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The alternative to using command-line unit testing is to automate your browser
    with a testing suite. This kind of testing is still triggered via the command
    line, but rather than integrating directly with your Vue application, it opens
    the page in the browser and interacts with it like a user would. A popular tool
    for doing this is `Nightwatch.js` ([http://nightwatchjs.org/](http://nightwatchjs.org/)).
  prefs: []
  type: TYPE_NORMAL
- en: You may use this suite for opening your shop and interacting with the filtering
    component or product list ordering and comparing the result. The tests are written
    in very colloquial English and are not restricted to being on the same domain
    name or file network as the site to be tested. The library is also language agnostic
    – working for any website regardless of what it is built with.
  prefs: []
  type: TYPE_NORMAL
- en: 'The example `Nightwatch.js` gives on their website is for opening Google and
    ensuring the first result of a Google search for `rembrandt van rijn`is the Wikipedia
    entry:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: An alternative to Nightwatch is Selenium ([http://www.seleniumhq.org/](http://www.seleniumhq.org/)).
    Selenium has the advantage of having a Firefox extension that allows you to visually
    create tests and commands.
  prefs: []
  type: TYPE_NORMAL
- en: Testing, especially for big applications, is paramount – especially when deploying
    your application to a development environment. Whether you choose unit testing
    or browser automation, there is a host of articles and books available on the
    subject.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Till now, we created a mock shop. Using real data from Shopify CSV files, we
    created an application that allowed products to be viewed individually. We also
    created a category listing page that could be filtered and ordered, allowing the
    user to find specifically the products they wanted. To complete the experience,
    we built an editable Basket, Checkout, and Order Confirmation screen. In this
    chapter, we covered the use of the Vue dev tools, followed by how to build tests.
  prefs: []
  type: TYPE_NORMAL
