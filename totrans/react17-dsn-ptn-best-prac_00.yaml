- en: Preface
  prefs: []
  type: TYPE_NORMAL
- en: '**React** is an open source, adaptable JavaScript library for building complex
    user interfaces from small, detached bits called **components**. This book will
    help you to use React effectively to make your applications more flexible, easier
    to maintain, and improve their performance while giving your workflow a huge boost
    by improving speed without affecting quality.'
  prefs: []
  type: TYPE_NORMAL
- en: You'll start by understanding the internals of React, before gradually moving
    on to writing maintainable and clean code. The chapters that follow will show
    you how to build components that are reusable across the application, how to structure
    applications, and how to create forms that actually work. Later, you will build
    on your knowledge by exploring how to style React components and optimize them
    to make applications faster and more responsive. Finally, you'll learn how to
    write tests effectively and learn how to contribute to React and its ecosystem.
  prefs: []
  type: TYPE_NORMAL
- en: By the end of this book, you'll be able to avoid the process of trial and error
    and developmental headaches, and instead have the skills you need to efficiently
    build and deploy real-world React web applications.
  prefs: []
  type: TYPE_NORMAL
- en: Who this book is for
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This book is for web developers who want to increase their understanding of
    React and apply it to real-life app development. Intermediate-level experience
    with React and JavaScript is assumed.
  prefs: []
  type: TYPE_NORMAL
- en: What this book covers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '*Chapter 1*, *Taking Your First Steps with React*, covers some basic concepts
    that are important for following the rest of the book, and that are crucial to
    working with React daily. We will learn how to write declarative code and will
    gain a clear understanding of the difference between the components we create
    and the elements React uses to display instances on the screen. We''ll then learn
    the reasons behind the choice of co-locating logic and templates together, and
    why that unpopular decision has been a big win for React. We will go through the
    reasons why it is common to feel fatigued in the JavaScript ecosystem, but we''ll
    also see how to avoid those problems by following an iterative approach. Finally,
    we will see what the new `create-react-app` CLI is, and with that, we''ll be ready
    to start writing some real code.'
  prefs: []
  type: TYPE_NORMAL
- en: '*Chapter 2*, *Cleaning Up Your Code*, teaches you a great deal about how JSX
    works and how to use it in the right way in our components. We start from the
    basics of the syntax to create a solid knowledge base that will enable us to master
    JSX and its features. We will look at how ESLint and its plugins can help us find
    problems faster and enforce a consistent style guide across our code base. Finally,
    we will go through the basics of functional programming to understand the important
    concepts to use when writing a React application. Now that our code is clean,
    we are ready to start digging deeper into React and learn how to write truly reusable
    components.'
  prefs: []
  type: TYPE_NORMAL
- en: '*Chapter 3*, *React Hooks*, teaches you how to use the new React Hooks and
    how to build your own Hooks.'
  prefs: []
  type: TYPE_NORMAL
- en: '*Chapter 4*, *Exploring Popular Composition Patterns*, explains how to compose
    our reusable components and make them communicate effectively. Then, we will go
    through some of the most interesting composition patterns in React. We will also
    see how React tried to solve the problem of sharing functionalities between components
    with mixins. We''ll then learn how to deal with context without needing to couple
    our components to it, thanks to HOCs. Finally, we''ll see how we can compose components
    dynamically by following the *FunctionAsChild* pattern.'
  prefs: []
  type: TYPE_NORMAL
- en: '*Chapter 5*, *Understanding GraphQL with a Real Project,* explains how to use
    GraphQL queries and mutations with a real project, where you will learn how to
    build an authentication system with GraphQL, JWT tokens, and Node.js.'
  prefs: []
  type: TYPE_NORMAL
- en: '*Chapter 6*, *Managing Data*, goes through some of the most common patterns
    to make a child and parent communicate using callbacks. We''ll then learn how
    we can use a common parent to share data across components that are not directly
    connected. We will start with a simple component, which will be able to load data
    from GitHub, and we''ll make it reusable with HOCs, and then go on to learn how
    we can use `react-refetch` to apply data fetching patterns to our components and
    avoid reinventing the wheel. Finally, we''ll learn how to use the new Context
    API.'
  prefs: []
  type: TYPE_NORMAL
- en: '*Chapter 7*, *Writing Code for the Browser*, looks at different things we can
    do when we target the browser with React, from form creation to events; from animations
    to SVGs. React gives us a declarative way to manage all the aspects we need to
    deal with when we create a web application. React gives us access to the actual
    DOM nodes in a way that we can perform imperative operations with them, which
    is useful if we need to integrate React with an existing imperative library.'
  prefs: []
  type: TYPE_NORMAL
- en: '*Chapter 8*, *Making Your Components Look Beautiful*, studies the reasons why
    regular CSS may not be the best approach for styling components, along with the
    various alternative solutions. Moving through the chapter, we''ll learn to use
    inline styles in React, along with the downsides of this, which can be fixed by
    using the Radium library. At the end, a new library, `styled-components`, will
    be introduced, along with an outline of the modern approach that it offers.'
  prefs: []
  type: TYPE_NORMAL
- en: '*Chapter 9*, *Server-Side Rendering for Fun and Profit*, invites you to follow
    certain steps to set up a server-side rendered application. By the end of this
    chapter, we will be able to build a universal application and be aware of its
    pros and cons.'
  prefs: []
  type: TYPE_NORMAL
- en: '*Chapter 10*, *Improving the Performance of Your Applications*, takes a quick
    look at the basic components of the performance of React, and how we can use some
    APIs to help the library find the optimal path to update the DOM without degrading
    the user experience. We will also learn how to monitor performance and find bottlenecks
    using some tools that we can import into our code base. At the end, we''ll see
    how immutability and *PureComponent* are the perfect tools to build fast React
    applications.'
  prefs: []
  type: TYPE_NORMAL
- en: '*Chapter 11*, *Testing and Debugging*, explains why it is important to test
    our applications, along with an outline of the most popular tools that we could
    use to create tests with React. We will also learn to set up a Jest environment
    to test components using Enzyme, along with a discussion of what Enzyme is and
    why it is a must for testing React applications. By covering all these topics,
    at the end of the chapter, we will be able to create a test environment from scratch
    and write tests for our application''s components.'
  prefs: []
  type: TYPE_NORMAL
- en: '*Chapter 12*, *React Router*, looks at certain steps that will help us to implement
    React Router in our application. Moving ahead, as we complete each section, we
    will add dynamic routes and understand how exactly React Router works. We will
    learn how to install and configure React Router, along with adding a component,
    exact prop, and parameters to routes.'
  prefs: []
  type: TYPE_NORMAL
- en: '*Chapter 13*, *Anti-Patterns to be Avoided*, is all about the common anti-patterns
    we should avoid when using React. We will study why mutating the state is harmful
    to performance. Choosing the right keys and helping the reconciler will also be
    covered in this chapter, along with the reason why spreading props on DOM elements
    is bad and how we can avoid doing that.'
  prefs: []
  type: TYPE_NORMAL
- en: '*Chapter 14*, *Deploying to Production*, covers how to deploy our React application
    using Node.js and nginx on an Ubuntu server from Google Cloud, along with configuring
    nginx, PM2, and a domain. Implementing CircleCI for continuous integration will
    also be covered.'
  prefs: []
  type: TYPE_NORMAL
- en: '*Chapter 15*, *Next Steps*, demonstrates how we can contribute to the React
    library by opening issues and pull requests, and explains why it is important
    to give back to the community and share our code. At the end, we will cover the
    most important aspects to keep in mind when pushing open source code, along with
    how we can publish an `npm` package and how to use semantic versioning.'
  prefs: []
  type: TYPE_NORMAL
- en: To get the most out of this book
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To master React, you need to have a fundamental knowledge of JavaScript and
    Node.js. This book is mostly targeted at web developers, and, at the time of writing,
    the following assumptions were made of the reader:'
  prefs: []
  type: TYPE_NORMAL
- en: The reader knows how to install the latest version of Node.js.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The reader is an intermediate developer who can understand JavaScript ES6 syntax.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The reader has some experience of CLI tools and Node.js syntax.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Download the example code files
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You can download the example code files for this book from GitHub at [https://github.com/PacktPublishing/React-17-Design-Patterns-and-Best-Practices-Third-Edition](https://github.com/PacktPublishing/React-17-Design-Patterns-and-Best-Practices-Third-Edition).
    In case there's an update to the code, it will be updated on the existing GitHub
    repository.
  prefs: []
  type: TYPE_NORMAL
- en: We also have other code bundles from our rich catalog of books and videos available
    at  **[https://github.com/PacktPublishing/](https://github.com/PacktPublishing/)**.
    Check them out!
  prefs: []
  type: TYPE_NORMAL
- en: Download the color images
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We also provide a PDF file that has color images of the screenshots/diagrams
    used in this book. You can download it here: [https://static.packt-cdn.com/downloads/9781800560444_ColorImages.pdf](https://static.packt-cdn.com/downloads/9781800560444_ColorImages.pdf).'
  prefs: []
  type: TYPE_NORMAL
- en: Conventions used
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: There are a number of text conventions used throughout this book.
  prefs: []
  type: TYPE_NORMAL
- en: '`CodeInText`: Indicates code words in text, database table names, folder names,
    filenames, file extensions, pathnames, dummy URLs, user input, and Twitter handles.
    Here is an example: "Mount the downloaded `WebStorm-10*.dmg` disk image file as
    another disk in your system."'
  prefs: []
  type: TYPE_NORMAL
- en: 'A block of code is set as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'When we wish to draw your attention to a particular part of a code block, the
    relevant lines or items are set in bold:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Any command-line input or output is written as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '**Bold**: Indicates a new term, an important word, or words that you see onscreen.
    For example, words in menus or dialog boxes appear in the text like this. Here
    is an example: "Select System info from the Administration panel."'
  prefs: []
  type: TYPE_NORMAL
- en: Warnings or important notes appear like this.Tips and tricks appear like this.
  prefs: []
  type: TYPE_NORMAL
