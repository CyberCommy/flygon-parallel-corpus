- en: Preface
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: React is a JavaScript library for building efficient and extensible web applications.
    React is developed by Facebook and is used in many large-scale web applications,
    such as Facebook, Instagram, Netflix, and WhatsApp Web.
  prefs: []
  type: TYPE_NORMAL
- en: React Hooks were introduced in the React 16.8 release and solve many common
    problems with React projects. Hooks make components less complex, more concise,
    and easier to read and refactor. Furthermore, they make many React features much
    easier to use and understand, and we avoid having to use wrapper components.
  prefs: []
  type: TYPE_NORMAL
- en: This book is the definitive guide to learning React Hooks. You are going to
    learn all the facets of React Hooks for managing state and effects in React components,
    as well as using other React features, such as context, via Hooks. With practical
    examples, you are going to learn how to develop large-scale and efficient applications
    with code that is extensible and easy to understand.
  prefs: []
  type: TYPE_NORMAL
- en: The book also delves into advanced concepts, such as using Hooks in combination
    with libraries like Redux and MobX. Furthermore, you are going to learn when and
    how existing projects can be efficiently migrated to React Hooks.
  prefs: []
  type: TYPE_NORMAL
- en: Who this book is for
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The book is intended for web developers at any level of expertise with JavaScript
    and the React framework. The book will also cater to developers who have been
    migrating to React for its advanced feature set and capabilities.
  prefs: []
  type: TYPE_NORMAL
- en: What this book covers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '[Chapter 1](790efd20-81e1-40fb-a96c-3f314f5c77e1.xhtml), *Introducing React
    and React Hooks*, covers the fundamental principles of React and React Hooks,
    what they are and why to use them. We then learn about the functionality of Hooks
    by introducing the State Hook as an alternative to React state in class components.
    Finally, we introduce the kinds of Hooks React provides and introduce a couple
    of Hooks that we are going to learn about throughout the book.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 2](15999013-914d-41bf-b0ad-c96fc1811c90.xhtml), *Using the State Hook*,
    explains how Hooks work in depth by reimplementing the `useState` Hook. By doing
    so, we find out that there are certain limitations of Hooks. We are then going
    to compare our reimplementation of a Hook with real Hooks. Furthermore, we introduce
    alternative Hook APIs and discuss the problems they have. Finally, we learn how
    to solve common problems with Hooks, such as conditional Hooks and Hooks in loops.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 3](0f4d5426-08c1-4a6c-b664-545e4477b6bb.xhtml), *Writing Your First
    Application with React Hooks*, takes what we learned from the first two chapters
    and puts it into practice by developing a blog application using React Hooks,
    specifically the State Hook. In this chapter, we also learn how to structure React
    projects in a way that scales well.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 4](6af201b4-073e-4911-8c3e-4d0256895702.xhtml), *Using the Reducer
    and Effect Hooks*, moves on from learning about the simple State Hook and using
    it in practice. We are going to learn about the other two main Hooks predefined
    by the React library: the Reducer and Effect Hooks. We first learn when we should
    use a Reducer Hook instead of a State Hook. Then we learn how to turn our existing
    State Hook into a Reducer Hook to get an idea of the concept. Finally, we learn
    how to use Effect Hooks for more advanced functionality.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 5](950ea03a-2866-4ae1-9528-b6df04f1df73.xhtml), *Implementing React
    Context*, explains React context and how it can be used in our application. Then
    we implement React context in our blog application to provide theming functionality
    and global state using Context Hooks.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 6](2fdc0e5f-46b4-4683-9988-ad65dc8b0ddd.xhtml), *Implementing Requests
    and React Suspense*, covers requesting resources from a server with Hooks using
    an Effect Hook and a State or Reducer Hook. Then we learn how to use `React.memo`
    to prevent unnecessary component re-renders. Finally, we learn about React Suspense,
    which can be used to defer rendering until a condition is met, also called lazy
    loading.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 7](58893f87-e60a-475e-bc73-2f9e6b336ec6.xhtml), *Using Hooks for Routing*, explains
    how to use Hooks to implement routing in our blog application. We learn about
    Navi, a routing library for React that makes use of Hooks and Suspense. We start
    by implementing pages in our application, then define routes, and finally move
    on to implementing routing Hooks.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 8](67dd0114-4264-4be6-989a-0b1e1f78dcb7.xhtml), *Using Community Hooks*,
    explains that the React community has already developed various libraries that
    make use of Hooks. In this chapter, we learn about implementing various Hooks
    from the community, as well as where to find more of them. We first learn about
    the input handling Hook. Next, we learn how to replace React life cycle methods
    with Hooks. Then, we learn about various useful Hooks and responsive design with
    Hooks. Furthermore, we learn how to implement undo/redo functionality using Hooks.
    Finally, we learn where to find other Hooks provided by the community.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 9](93617d50-05f7-4c32-85b1-9c68f9b2b00d.xhtml), *Rules of Hooks*,
    covers the rules of Hooks. Having a grasp on the rules of Hooks is very important
    for building our own Hooks, which we are going to do in the next chapter. We also
    learn about the limitations of Hooks in depth and discover what we need to watch
    out for. Finally, we learn how to enforce the rules of Hooks using a linter.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 10](cf4ffc77-645a-454f-aeed-2cc8dcd451ee.xhtml), *Building Your Own
    Hooks*, moves on from the basic concepts of Hooks. We are now going to build our
    own Hooks. We start by extracting a custom Hook from an existing function of our
    blog application, and then we learn how to use our custom Hook. Next, we learn
    about passing information between Hooks. Finally, we learn about the React Hooks
    API and additional Hooks we can use to build our own Hooks. At the end of this
    chapter, our application will be fully powered by Hooks!'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 11](cf5ec080-00ae-46a8-afa0-46f5c7b3b259.xhtml), *Migrating from React
    Class Components*, covers state handling with React class components. We start
    by implementing a simple ToDo application with class components. Then, we learn
    how to migrate an existing project using class components to a Hook-based implementation.
    Finally, we learn about the trade-offs of using class components versus Hooks
    and a strategy to efficiently migrate existing projects.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 12](5a168a52-e90e-465f-9455-4157fb91d821.xhtml), *Redux and Hooks, *explains
    state handling with Redux. We start by migrating our existing ToDo application
    to Redux, and then we learn how to use Redux with Hooks. Furthermore, we learn
    how to migrate an existing Redux application to Hooks. Finally, we learn about
    the trade-offs of using Redux.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 13](cd851a2b-e4b7-4978-91f7-e8f0077162b9.xhtml), *MobX and Hooks*,
    coversstate handling with MobX. We start by migrating our existing ToDo application
    to MobX. Then we learn how to use MobX with Hooks. Furthermore, we learn how to
    migrate an existing MobX application to Hooks. Finally, we learn about the trade-offs
    of using MobX.'
  prefs: []
  type: TYPE_NORMAL
- en: To get the most out of this book
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We assume that you have already worked with React in some way, although this
    book should be understandable for complete beginners of React as well.
  prefs: []
  type: TYPE_NORMAL
- en: Please note that it is highly recommended that you write the code on your own.
    Do not simply run the code examples that are provided. It is important to write
    the code yourself in order to learn and understand it properly. However, if you
    run into any issues, you can always refer to the code example.
  prefs: []
  type: TYPE_NORMAL
- en: Download the example code files
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You can download the example code files for this book from your account at [www.packt.com](http://www.packt.com).
    If you purchased this book elsewhere, you can visit [www.packtpub.com/support](https://www.packtpub.com/support)
    and register to have the files emailed directly to you.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can download the code files by following these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Log in or register at [www.packt.com](http://www.packt.com).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the Support tab.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on Code Downloads.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter the name of the book in the Search box and follow the onscreen instructions.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Once the file is downloaded, please make sure that you unzip or extract the
    folder using the latest version of:'
  prefs: []
  type: TYPE_NORMAL
- en: WinRAR/7-Zip for Windows
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Zipeg/iZip/UnRarX for Mac
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 7-Zip/PeaZip for Linux
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The code bundle for the book is also hosted on GitHub at [https://github.com/PacktPublishing/Learn-React-Hooks](https://github.com/PacktPublishing/Learn-React-Hooks). In
    case there's an update to the code, it will be updated on the existing GitHub
    repository.
  prefs: []
  type: TYPE_NORMAL
- en: We also have other code bundles from our rich catalog of books and videos available
    at **[https://github.com/PacktPublishing/](https://github.com/PacktPublishing/)**.
    Check them out!
  prefs: []
  type: TYPE_NORMAL
- en: Download the color images
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We also provide a PDF file that has color images of the screenshots/diagrams
    used in this book. You can download it here: [https://static.packt-cdn.com/downloads/9781838641443_ColorImages.pdf](https://static.packt-cdn.com/downloads/9781838641443_ColorImages.pdf).
  prefs: []
  type: TYPE_NORMAL
- en: Code in Action
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Visit the following link to check out videos of the code being run:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://bit.ly/2Mm9yoC](http://bit.ly/2Mm9yoC)'
  prefs: []
  type: TYPE_NORMAL
- en: Conventions used
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are a number of text conventions used throughout this book.
  prefs: []
  type: TYPE_NORMAL
- en: '`CodeInText`: Indicates code words in text, folder names, filenames, file extensions,
    pathnames, dummy URLs, and user input. Here is an example: "JavaScript classes provide
    a `render` method, which returns the user interface (usually via JSX)."'
  prefs: []
  type: TYPE_NORMAL
- en: 'A block of code is set as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'When we wish to draw your attention to a particular part of a code block, the
    relevant lines or items are set in bold:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Any command-line input or output is written as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '**Bold**: Indicates a new term, an important word, or words that you see onscreen.
    Here is an example: " Throughout this chapter, we are also going to learn about
    **JSX**, and new JavaScript features that have been introduced in **ES6**, up
    to **ES2018**."'
  prefs: []
  type: TYPE_NORMAL
- en: In blocks of code, we use bold formatting to highlight changes in the code.
    Usually, we highlight new code using bold. If specified, we might also indicate
    which parts of code should be deleted by using bold formatting.
  prefs: []
  type: TYPE_NORMAL
- en: Warnings or important notes appear like this.Tips and tricks appear like this.
  prefs: []
  type: TYPE_NORMAL
