- en: Chapter 3. Creating Your Site
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that we have done all the basic housekeeping with respect to our project,
    let us look at the actual task of building this site. We will first start with
    the markup, jump into the stylesheets, and finally add interactivity with scripts.
  prefs: []
  type: TYPE_NORMAL
- en: Working on the markup
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We have a simple design in mind for our Sun and Sand festival project. The
    design is shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Working on the markup](img/8505_03_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Looking at how it is organized, the broad structure of the page is explained
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Header**: A banner logo with a set of navigation links'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Main content**: The meat of the page with sections that the navigation links
    will link to'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Left column**: This contains the main content'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Right column**: This contains the secondary information that would be interesting
    to the viewers, but not essential'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Footer**: Sponsor logos and an audio player with music of artists, who will
    be participating in the festival'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating the markup
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The **HTML5 Doctor** has a list of all elements that you can use in a web page
    at `html5doctor.com/element-index/`. Comparing this to the list we made earlier,
    it looks like the `header` tag would be good to park our logo and navigation links
    in, while the sponsor logos and audio player can go inside the `footer` tag. That
    leaves us with the main content; it seems like the `div` tag with the role of
    main would be the best fit for it!
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is the markup we end up with. The `index.html` page in [Chapter 2](ch02.html
    "Chapter 2. Starting Your Project"), *Starting Your Project*, contains the following
    code as well:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You can download the example code files for all Packt books you have purchased
    from your account at [http://www.PacktPub.com](http://www.PacktPu). If you purchased
    this book elsewhere, you can visit [http://www.PacktPub.com/support](http://www.PacktPub.com/su)
    and register to have the files e-mailed directly to you.
  prefs: []
  type: TYPE_NORMAL
- en: Deciding which element to use
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: With HTML5, we have a glut of elements to choose from, causing choice paralysis
    for some of us. If there is anything in the structure of your document that seems
    to very obviously fit any of the new elements, go ahead and mark them so. If they
    don't, continue using `div` or any other element that seems to obviously fit.
  prefs: []
  type: TYPE_NORMAL
- en: In our code, we use the `section` element when we have primary content that
    is structurally different and the `article` element for which we have similar,
    but repeating sections of content. Your views on these choices may well be different;
    in which case, I recommend you choose what you are comfortable with.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you wish to know more about the new HTML5 elements, I recommend you check
    out the chapter on semantics in *HTML5: Up & Running, Mark Pilgrim, O''Reilly*,
    under the Google Press imprint, at `diveintohtml5.info/semantics.html`.'
  prefs: []
  type: TYPE_NORMAL
- en: Writing valid markup
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Writing valid markup ensures your page behaves consistently across all browsers
    that render it. Valid markup refers to markup that adheres to the Web standards
    that browsers comply with. This way, you will prevent any unpredictable behavior.
  prefs: []
  type: TYPE_NORMAL
- en: The easiest way to write valid markup is to use tools that validate it instantly
    as and when you save your file.
  prefs: []
  type: TYPE_NORMAL
- en: In [Chapter 2](ch02.html "Chapter 2. Starting Your Project"), *Starting Your
    Project*, I recommended using Sublime Text and Vim for Web development. Both of
    these tools have inline validation that you can use to write valid markup. Moreover,
    these tools also provide autocompletion of tags and elements that make writing
    valid markup trivial.
  prefs: []
  type: TYPE_NORMAL
- en: In the event of you not having access to these tools, I recommend using `validator.w3.org/`
    to validate your markup.
  prefs: []
  type: TYPE_NORMAL
- en: It is essential to have these tools automated for you to make sure you reduce
    any issues with your site to the absolute minimum.
  prefs: []
  type: TYPE_NORMAL
- en: Creating the styles
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now that we have the markup ready, let us look at how we should be styling
    it. HTML5 Boilerplate comes with a stylesheet that has the best default styles.
    If you open `main.css`, you will find the following section in between the `Chrome
    Frame prompt` style rules and the `Helper classes` section:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating the styles](img/8505_03_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: This is where we will compose our style rules. Later on, we will look at how
    you can use some of the style frameworks to make writing this easier with **Sass**
    ([http://sass-lang.com](http://sass-lang.com)) or **Less** ([http://lesscss.org/](http://lesscss.org/)).
  prefs: []
  type: TYPE_NORMAL
- en: 'Without even writing a line of CSS, you will note that our page looks like
    the website displayed in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating the styles](img/8505_03_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: This default style is thanks to the normalize style rules that are available
    in HTML5 Boilerplate.
  prefs: []
  type: TYPE_NORMAL
- en: Why not reset.css?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For a very long time, the recommendation was to use `reset.css` , which is available
    at `html5doctor.com/html-5-reset-stylesheet/` and resets the margin and padding
    of every available element to `0`, in addition to making the font size of all
    headings the same as the body text and without a higher font weight.
  prefs: []
  type: TYPE_NORMAL
- en: HTML5 Boilerplate recommends against this policy. Browsers provide useful browser
    defaults, which would make your stylesheets smaller as you don't have to redeclare
    those styles again.
  prefs: []
  type: TYPE_NORMAL
- en: 'With `normalize.css` , you wouldn''t be seeing the following kind of clutter
    in your debugging tools:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Why not reset.css?](img/8505_03_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Nicolas Gallagher, one of the co-creators of `normalize.css`, has written in
    great detail about why it is better than `reset.css` at `nicolasgallagher.com/about-normalize-css/`,
    which is a good read for those still unconvinced about the merits of normalizing
    CSS.
  prefs: []
  type: TYPE_NORMAL
- en: Helpful style classes we can use
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In [Chapter 1](ch01.html "Chapter 1. Before We Begin"), *Before We Begin*, we
    briefly saw that HTML5 Boilerplate comes with a bunch of default classes that
    are useful to work with. You would have noticed that we are using some of these
    classes in our style rules.
  prefs: []
  type: TYPE_NORMAL
- en: All our helper classes are defined last, so they can override all your other
    styles when used. Make sure the properties they override are not over-specified
    elsewhere; you can read more about specificity at [www.w3.org/community/webed/wiki/Inheritance_and_cascade#Specificity](http://www.w3.org/community/webed/wiki/Inheritance_and_cascade#Specificity).
  prefs: []
  type: TYPE_NORMAL
- en: Image replacement
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'In our project, we want to have a spiffy logo for the `Sun & Sand Festival
    2012` heading. HTML5 Boilerplate has a handy image replacement class that can
    be used for this. In the markup, we will simply add a class called `ir` to the
    `h1` tag, as shown in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'What this does is apply the styles specified in HTML5 Boilerplate''s image
    replacement class (`ir`) to hide the text. All you need to do then is add a background
    image to the `h1` element along with its width and height, so it displays as per
    your specification as shown in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'This will result in the heading looking similar to the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Image replacement](img/8505_03_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Hiding elements
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Our markup has content, which we want to show only when a user clicks. In our
    website, we want a Google Map to show, when the user clicks on the **Getting Here**
    link. It is very simple to do so by using an `iframe`, as shown in the following
    code snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'But this means, as soon as your page loads in a browser, the browser will attempt
    to show the map immediately and fetch assets from Google Maps. But we only want
    this map to show when the user clicks on the **Getting Here** link. HTML5 Boilerplate
    provides a class name that you can use for such purposes. We will apply a class
    called `hidden` to make sure these elements do not render until they are explicitly
    made to display. The `hidden` class is used in the following code snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Do note that this makes the content disappear from screen readers and the browser
    displays.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Screen readers are devices used to aid in reading a web page for those who are
    unable to view text on the screen. Victor Tsaran has a great introduction to screen
    readers in a video available at [www.yuiblog.com/blog/2007/05/14/video-intro-to-screenreaders/](http://www.yuiblog.com/blog/2007/05/14/video-intro-to-screenreaders/).
  prefs: []
  type: TYPE_NORMAL
- en: 'The rule that makes this happen is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: This ensures all screen readers (**JAWS** and **Windows-Eyes** being the most
    popular ones) would hide all elements that have this class name applied to them.
  prefs: []
  type: TYPE_NORMAL
- en: If you want the content to be available to those who use screen readers, you
    should use the next class that we will be learning about the `visuallyhidden`
    class.
  prefs: []
  type: TYPE_NORMAL
- en: Hiding elements visually
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Sometimes, you don''t want to render something to the screen, but have it available
    for screen readers using a **Skip Navigation** link. This would ensure that those
    who use screen readers can skip to the meat of the content immediately rather
    than listen to a list of navigation links. So, let''s add this class to our **Skip
    Navigation** link that we have in the header, as shown in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'This makes the link disappear from our screen, but is it available to screen
    readers. The web page displayed in the following screenshot does not show the
    **Skip Navigation** link:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Hiding elements visually](img/8505_03_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The CSS rule that makes this happen is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: A typical solution used to involve having them positioned absolutely with a
    `height` of `0px`, but this would prevent Apple's VoiceOver screen reader from
    reading the content.
  prefs: []
  type: TYPE_NORMAL
- en: Another solution involves using the `text-indent` property to position the text
    off-screen, but then care needs to be taken when content is written in Right-To-Left
    language, where this solution would fail.
  prefs: []
  type: TYPE_NORMAL
- en: Using the `clip` property would avoid all of these problems, while having the
    content readable across all screen readers.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Jonathan Snook writes about why the `clip` property is the best way to hide
    content visually, but still have it available for screen readers, at `snook.ca/archives/html_and_css/hiding-content-for-accessibility`.
  prefs: []
  type: TYPE_NORMAL
- en: Those who extensively use keyboard navigation would also want to skip navigation.
    But, because it is visually hidden, they would not know that this option exists.
    For this case, you want this to be available when this element is in focus. Let
    us add an additional class called `focusable` to make this available for our **Skip
    Navigation** link that would make this option visible when they make this link
    active via keyboard navigation.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'The following screenshot shows how the **Skip Navigation** link is instantly
    visible when the user switches keyboard focus to it:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Hiding elements visually](img/8505_03_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Hiding elements without impacting layout
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'In our website, we want a tabbed display of line up over several days, as shown
    in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Hiding elements without impacting layout](img/8505_03_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The following is a simplified view of the markup:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'The simplest way to do this would be to show only **Day 1** and use the `hidden`
    class to hide the rest of the days, as shown in the following code snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: By hiding the elements, we make the dimensions that they occupy vanish to 0\.
    This means the area previously occupied by that content collapses.
  prefs: []
  type: TYPE_NORMAL
- en: 'As the user clicks on one or the other navigation links for each day''s line
    up, the content for each day will frequently be hidden and shown, which will look
    jarring, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Hiding elements without impacting layout](img/8505_03_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'In such a case, we can use the helper class `invisible` to make the element
    not render, but maintain its dimensions; it will not be visible on the screen
    or be available to screen readers. As you can see in the following screenshot,
    the **TICKETS** section does not change its position depending on which tab is
    active:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Hiding elements without impacting layout](img/8505_03_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Clearing floats
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'We are positioning the image elements on the left-hand side of the artists''
    names. We do this by floating the images to the left. Luckily for us, we do not
    have any content that follows the container with floated elements. If we did,
    then that content would be overlaid on top of the floated element. You can prevent
    this from occurring by setting a class called `clearfix` on the parent container
    of the floated elements. In our case, to ensure our floated elements never trigger
    this behavior, we shall add the `clearfix` class to the parent element of the
    artist image element:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: To learn more about how the `clearfix` class works, read about it in [Appendix](apa.html
    "Appendix A. You Are an Expert,Now What?"), *You Are an Expert, Now What?*
  prefs: []
  type: TYPE_NORMAL
- en: 'Now that we have taken care of the basic essentials, let us apply styles to
    spruce up the page itself to look more like the design we had in mind. The following
    code snippet shows how to add styles to our page:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Writing valid stylesheets
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When we went through that, you might have noticed that the styles have no typos
    whatsoever. The kind copy editors have no doubt done a wonderful job, but I realize
    you have no such assistants when you write your stylesheets! An errant typo could
    cause us untold trauma as we hunt why a particular style does not get applied.
    This is why it is important to also automate validation of your styles and use
    autocompletion to automate as much of your style declarations as possible.
  prefs: []
  type: TYPE_NORMAL
- en: Sublime Text and Vim both have autocompletion of CSS properties available, and
    you can automate the insertion of the semicolon at the end too! If you have no
    access to these tools, you can use the online CSS validator at `jigsaw.w3.org/css-validator/`
    to test your CSS.
  prefs: []
  type: TYPE_NORMAL
- en: There is another way to automate writing valid and productive style rules—by
    using an alternative style language that compiles into CSS. We shall be looking
    into some of these languages next.
  prefs: []
  type: TYPE_NORMAL
- en: Style languages to write productive stylesheets
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For a very long time, the only way to write stylesheets was to use the syntax
    that W3C provided for within the specifications that it produced. However, there
    are a lot of productivity benefits to be gained by using some programming logic
    to write stylesheets. But browsers could only understand syntaxes that are mandated
    by the W3C specifications. This means, any style language that uses additional
    programmable features should be converted to a browser-understandable typical
    stylesheet (this is called compilation).
  prefs: []
  type: TYPE_NORMAL
- en: One of the earliest style languages designed for this is called Sass. Now, we
    have a few more, the most popular ones being Sass, Less, and Stylus. In both Sass
    and Less, valid CSS is automatically valid Sass and Less code. This makes it trivial
    to port it from CSS to these languages.
  prefs: []
  type: TYPE_NORMAL
- en: Typically, you would be writing your style rules in files named as `main.scss`
    (if you are using Sass), `main.less` (if you are using Less), or `main.styl` (if
    you are using Stylus). Using the compilers that come with each of these languages,
    these files will respectively be compiled to `styles.css`.
  prefs: []
  type: TYPE_NORMAL
- en: Advantages
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Using style languages has many merits, such as the following:'
  prefs: []
  type: TYPE_NORMAL
- en: These languages enable you to always write syntactically valid stylesheets as
    they all throw an error if you use any invalid syntax.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: All of these languages provide some of the sought-after features in CSS, such
    as variables, ability to re-use style rules in other classes without repeating
    yourself several times, arithmetic calculations, color functions, and more.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You can choose to output expanded readable styles when developing, and then
    output a compact performance-optimized, whitespace-stripped stylesheet when you
    are using it in production.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Disadvantages
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'However, using style languages also has some disadvantages, as explained in
    the following points:'
  prefs: []
  type: TYPE_NORMAL
- en: While it is easy to convert to Sass or Less, it is not possible to make modifications
    in the resulting stylesheet and have those changes be ported over to their original
    Sass/Less/Style files. So, you need to be careful to make sure nobody edits the
    resulting CSS files.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Working in a team requires the whole team to co-opt to use one of these languages.
    Without that, it is impossible to maintain two forks of the stylesheets and keep
    them in sync.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: When debugging, if you are inspecting an element, most debuggers only reveal
    the line numbers in a stylesheet and not in the original language files. This
    might make it difficult to find out where in your original files the particular
    rule would be found.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Where to learn?
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If you are interested in learning more about these languages, read on for some
    good places to get started.
  prefs: []
  type: TYPE_NORMAL
- en: Sass
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The official website is `sass-lang.com`. Chris Coyier has a good introduction
    video on Sass at `css-tricks.com/video-screencasts/88-intro-to-compass-sass/`.
  prefs: []
  type: TYPE_NORMAL
- en: Less
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The official website is `lesscss.org`. A video overview of Less is available
    at `net.tutsplus.com/tutorials/html-css-techniques/quick-tip-you-need-to-check-out-less-js/`.
  prefs: []
  type: TYPE_NORMAL
- en: Stylus
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The official official website is at `learnboost.github.com/stylus`. A video
    overview of Stylus is available at `thechangelog.com/post/3036532096/stylus-expressive-robust-feature-rich-css-language`.
  prefs: []
  type: TYPE_NORMAL
- en: Using HTML5 Boilerplate with style languages
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'If you are fairly confident in navigating your way with any of these languages,
    then you could use any of the available ports that we will look at next, to start
    your projects:'
  prefs: []
  type: TYPE_NORMAL
- en: Sass
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: There is a fairly up-to-date port of HTML5 Boilerplate to Sass requiring **Compass**
    , which is a framework on top of Sass at `github.com/sporkd/compass-html5-boilerplate`.
  prefs: []
  type: TYPE_NORMAL
- en: Less
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: A less frequently updated port of HTML5 Boilerplate to Less exists at `github.com/m6tt/less-boilerplate`.
  prefs: []
  type: TYPE_NORMAL
- en: Stylus
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: There is no fully functional port of HTML5 Boilerplate available for Stylus,
    although using the command-line to convert it to stylus seems to be the easiest
    way. More information about using this method can be found at `learnboost.github.com/stylus/docs/executable.html`.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Woah! That was an intense coding session. In this chapter, we almost created
    a whole site based on HTML5 Boilerplate. We looked at how to write markup, styles,
    and scripts. In addition, we explored some tools to make writing valid markup
    and styles easier.
  prefs: []
  type: TYPE_NORMAL
- en: All the changes that we have made so far to our example project are available
    at `nimbu.in/h5bp-book/chapter-3/`.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will look at adding some interactivity to this pretty
    static page with jQuery and make it easier to navigate around the site.
  prefs: []
  type: TYPE_NORMAL
