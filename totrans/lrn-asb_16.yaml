- en: Ansible Galaxy
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We have been using the `ansible-galaxy` command throughout the previous chapters.
    In this chapter, we are going to look at more of the features provided by the
    command. Ansible Galaxy is an online repository of community contributed roles;
    we will discover some of the best roles available, how to use them, and how to
    create your own role and have it hosted on Ansible Galaxy.
  prefs: []
  type: TYPE_NORMAL
- en: 'By the end of the chapter, we will have worked through the following:'
  prefs: []
  type: TYPE_NORMAL
- en: An introduction to Ansible Galaxy
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to use roles from Ansible Galaxy in your own playbooks
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to write and submit your own roles to Ansible Galaxy
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Again, we will be using a local Vagrant box for this chapter; the playbooks
    used can be found in the accompanying repository at [https://github.com/PacktPublishing/Learn-Ansible/tree/master/Chapter16](https://github.com/PacktPublishing/Learn-Ansible/tree/master/Chapter16).
    You will also need access to a GitHub account—a free account will do—and you can
    sign up for one at [http://github.com/](http://github.com/).
  prefs: []
  type: TYPE_NORMAL
- en: Introduction to Ansible Galaxy
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Ansible Galaxy is a number of things: first and foremost, it is a website that
    can be found at [https://galaxy.ansible.com/](https://galaxy.ansible.com/). The
    website is home to community contributed roles and modules:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/58107dd3-0605-47d0-a3d8-c62f67ec530c.png)'
  prefs: []
  type: TYPE_IMG
- en: So far, we have been writing our own roles that interact with the Ansible Core
    modules for use in our playbook. Rather than writing our own roles. we could be
    using one of the more than 15,000 roles published on Ansible Galaxy—these roles
    cover a multitude of tasks and support pretty much of all of the operating systems
    supported by Ansible.
  prefs: []
  type: TYPE_NORMAL
- en: The `ansible-galaxy` command is a way of interacting with the Ansible Galaxy
    website from the comfort of your own command line, as well as being able to bootstrap
    roles. Just as we have been using it in previous chapters, we can also use it
    to download, search and publish our own roles on Ansible Galaxy.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, Red Hat has open sourced the code for Ansible Galaxy, meaning that
    you can also run your own version of the site should you need to distribute your
    own roles behind a firewall.
  prefs: []
  type: TYPE_NORMAL
- en: Jenkins playbook
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let's dive straight in and create a playbook that installs Jenkins using just
    roles downloaded from Ansible Galaxy.
  prefs: []
  type: TYPE_NORMAL
- en: Jenkins, formerly the Hudson project, is an open source continuous integration
    and continuous delivery server written in Java. It is expandable using plugins
    and has grown much bigger than its original purpose of compiling Java applications.
  prefs: []
  type: TYPE_NORMAL
- en: 'To start, we are going to need a few files; let''s get these created now by
    running the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: As you can see, we are not creating a `roles` or `group_vars` folder as we have
    been doing in previous chapters. Instead, we are creating a `requirements.yml`
    file. This will contain a list of the roles we would like to download from Ansible
    Galaxy.
  prefs: []
  type: TYPE_NORMAL
- en: 'In our case, we are going to be using the following two roles:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Java**: [https://galaxy.ansible.com/geerlingguy/java/](https://galaxy.ansible.com/geerlingguy/java/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Jenkins**: [https://galaxy.ansible.com/geerlingguy/jenkins/](https://galaxy.ansible.com/geerlingguy/jenkins/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The first of the roles, `geerlingguy.java`, manages the installation of Java
    on our host and then the second, `geerlingguy.jenkins`, manages the installation
    and configuration of Jenkins itself. To install the roles, we need to add the
    following lines to our `requirements.yml` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Once added, we can download the roles by running the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'You should see something like the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/51f97450-f925-4434-ba8b-96e37d916be1.png)'
  prefs: []
  type: TYPE_IMG
- en: As you can see from the Terminal output, the two roles have been downloaded
    from the `roles` folder of GitHub project and placed in the `~/.ansible/roles/`
    folder.
  prefs: []
  type: TYPE_NORMAL
- en: Using `~` in a path on macOS and Linux is shorthand for current users' home
    directory.
  prefs: []
  type: TYPE_NORMAL
- en: You can ignore the warning; it is just letting us know that the `geerlingguy.jenkins`
    role wanted to install an older version of the `geerlingguy.java` role. In our
    case, this is not going to cause any problems.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now that we have our two roles downloaded, we can write the `site.yml` file
    for us to launch Jenkins. This should look like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Notice that we are just providing the names of the roles. Ansible, by default,
    will search for roles in the `~/.ansible/roles/` folder if they are not found
    in a `roles` folder local to your playbook.
  prefs: []
  type: TYPE_NORMAL
- en: 'We are also passing four variables:'
  prefs: []
  type: TYPE_NORMAL
- en: '`java_packages`: This is the name of the `geerlingguy.java`role we want the
    role to install; as Jenkins requires Java 8, and we are running a CentOS 7 host,
    the package name is `java-1.8.0-openjdk`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The remaining three variables affect what the `geerlingguy.jenkins` role configures:'
  prefs: []
  type: TYPE_NORMAL
- en: '`jenkins_hostname`: This is the URL we want to access Jenkins on; as in previous
    chapters, we are using the `nip.io` service to provide a resolvable hostname for
    our Vagrant box'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`jenkins_admin_username`: This is the admin username we want to configure for
    accessing Jenkins'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`jenkins_admin_password`: This is the password for the user'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Next up, we have the `production` host''s inventory file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, the content of the `Vagrantfile` is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Now that we have all of the files we need in place and populated with the right
    code, we can launch our Jenkins server. First, we need to create the Vagrant box:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Once the Vagrant box is up and running, we can run the playbook using the following
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'It will take a few minutes to install and configure both Java and Jenkins;
    you can see the output of the playbook run here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Once the playbook has completed, you should be able to access your newly installed
    Jenkins at `http://10.20.30.60.nip.io:8080/` and use the admin username and password
    we defined in the `site.yml` file to log in:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/f20b6569-1aa7-4202-97b8-ff01b27ccaa3.png)'
  prefs: []
  type: TYPE_IMG
- en: As you can see, using a predefined community role to deploy our Jenkins installation
    was a lot more straightforward than writing our own role. In a few minutes, we
    were able to write a playbook and deploy the application with no more than a basic
    understanding of how to install the application. In fact, a quick skim through
    the readme file on Ansible Galaxy for the two roles was all that was required.
  prefs: []
  type: TYPE_NORMAL
- en: Publishing a role
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now we know how easy it is to download a role, let's look at how we can contribute
    back to the community by creating a role. In the last few chapters, we have been
    using Ansible to install Docker. So let's use that as our base and extend the
    role to support Ubuntu and have it install the Docker CE Edge release rather than
    the stable one.
  prefs: []
  type: TYPE_NORMAL
- en: Creating the docker role
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To start off with, we need the basic files; to get these, run the following
    command where you normally store your code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: This will give us the directory and file structure we need for our new role;
    we can now make a start on creating the role.
  prefs: []
  type: TYPE_NORMAL
- en: Variables
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We are going to start with the files in the `vars` folder; we are going to
    be keeping the `vars/main.yml` file blank and adding two new files starting with
    `vars/RedHat.yml`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'The next file to add is `vars/Debian.yml`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: These two files contain all of the information we will need to install Docker
    CE.
  prefs: []
  type: TYPE_NORMAL
- en: Tasks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'As we are targeting two different operating systems, our `tasks/main.yml` file
    needs to look as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'As you can see, this is the same as when we installed our LEMP Stack on the
    two operating systems in [Chapter 6](8a622761-b253-45a2-8ab6-ff0f3a55aa34.xhtml),
    *Targeting Multiple Distributions*. The `tasks/install-redhat.yml` file looks
    pretty much like the tasks we have used to install Docker in the previous chapters:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: The only difference is that we are enabling the Docker CE Edge repository when
    installing the packages, and also we are not running a `yum update` when installing
    Docker. We are not doing this as it is not our role's decision to update a server
    when someone else is running the role; our role should only install Docker.
  prefs: []
  type: TYPE_NORMAL
- en: 'The final task file is `tasks/install-ubuntu.yml`. This, as you will have already
    guessed, contains the tasks to install Docker on Ubuntu hosts:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: That concludes all of the tasks and variables that we need in order to install
    Docker on the two different operating systems. In previous chapters, that would
    have been enough for us to add the role to our playbook and run the tasks. However,
    as we are going to be publishing this role on Ansible Galaxy, we need to add some
    more information about the role.
  prefs: []
  type: TYPE_NORMAL
- en: Metadata
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'As you may have seen while browsing Ansible Galaxy, each of the roles uploaded
    has information on who wrote it, when it is for, a license, which version of Ansible
    is supported, and so on. This information is all taken from the `meta/main.yml`
    file. The one we published looks like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'As you can see, we are providing information in a YAML file that Ansible Galaxy
    will read when we publish the role. Most of the information in the file is self-explanatory,
    so I will not go into too much detail here:'
  prefs: []
  type: TYPE_NORMAL
- en: '`author`: This is your name or chosen moniker.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`description`: Add a description of your role; this will appear in searches
    on the command line and in the web interface, so keep it short and do not add
    any markup.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`license`: The license you are releasing your role under; the default is BSD.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`min_ansible_version`: The version of Ansible your role will work with. Remember,
    if you are using new functionality, then you must use the version that the functionality
    was released in. Saying you work with Ansible 1.9 but are using modules from Ansible
    2.4 will only frustrate users.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`platforms`: This list of supported operating systems and releases is used
    when displaying information about the role, and it will play a part in a user
    choosing to use your role. Make sure this is accurate as, again, we do not want
    to frustrate users.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`galaxy_tags`: These tags are used by Ansible Galaxy to help identify what
    your role does.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'There is one final part of the role to look at before we publish it: the `README.md`
    file.'
  prefs: []
  type: TYPE_NORMAL
- en: README
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The final part of the role we need to complete is the `README.md` file; this
    contains the information that is displayed on the Ansible Galaxy website. When
    we initiated our role using `ansible-galaxy`, it created a `README.md` file with
    a basic structure. The one for our role looks like the following file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: '- hosts: docker'
  prefs: []
  type: TYPE_NORMAL
- en: 'gather_facts: true'
  prefs: []
  type: TYPE_NORMAL
- en: 'become: yes'
  prefs: []
  type: TYPE_NORMAL
- en: 'become_method: sudo'
  prefs: []
  type: TYPE_NORMAL
- en: 'roles:'
  prefs: []
  type: TYPE_NORMAL
- en: '- russmckendrick.docker'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: Now that we have all of the files we need in place, we can look at committing
    our role to GitHub and, from there, publish it on Ansible Galaxy.
  prefs: []
  type: TYPE_NORMAL
- en: Committing the code and publishing
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that we have our completed role, we need to push it to a public GitHub repository.
    There are a few reasons why it needs to be published to a public repository, the
    most important of which is that any potential user will need to download your
    role. Also, Ansible Galaxy links to the repository, allowing users to review your
    role before they choose to execute it as part of their playbooks.
  prefs: []
  type: TYPE_NORMAL
- en: 'On all GitHub pages, when you are logged in, there is a + icon in the top right;
    clicking this will bring up a menu that contains options for creating a new repository
    and importing one, as well as gists and organizations. Select New repository from
    the menu and you will be presented with a screen that looks as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/e7543009-d77e-4ab8-89ec-6a58557ba66e.png)'
  prefs: []
  type: TYPE_IMG
- en: Name the repository and enter a description; it is important that you name your
    repository `ansible-role-your-role-name`. The name of the role in Ansible Galaxy
    will depend on the name you give after `ansible-role`, so, in the previous example,
    our role will be called `your-role-name` and, for the role we are going to be
    publishing, it will be called `docker`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now that we have our repository, we need to add the files for our role. Go
    back to the folder that contains your role on the command line and then run the
    following commands to initialize the Git repository locally. Push it to GitHub,
    making sure that you replace the repository URL with that of your own repository:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'You should now have your files uploaded, and your repository should look not
    too dissimilar to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/9a583521-a34f-4bb7-9be2-38bb873506f7.png)If you have any problems
    pushing your code, I would recommend reading through the excellent documentation
    provided by GitHub on setting up Git ([https://help.github.com/articles/set-up-git/](https://help.github.com/articles/set-up-git/))
    and pushing your first files ([https://help.github.com/articles/create-a-repo/](https://help.github.com/articles/create-a-repo/)).'
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have our files uploaded and available, we can sign in to Ansible
    Galaxy using our GitHub credentials and then import our role. Head to the Ansible
    Galaxy home page at [https://galaxy.ansible.com/](https://galaxy.ansible.com/)
    and then click on the Sign in with GitHub link; this will take you to GitHub and
    ask you to confirm that you are OK with giving Ansible Galaxy permission to access
    information on your account. Proceed as prompted and you will be returned to Ansible
    Galaxy.
  prefs: []
  type: TYPE_NORMAL
- en: 'Clicking on the My Content link in the top menu will take you to a page where
    you can import content from GitHub; if you do not see your repository listed,
    click on the refresh icon next to the search box:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/36d875f0-9990-44aa-8ba7-e9993171bbcb.png)'
  prefs: []
  type: TYPE_IMG
- en: 'When you see your repository listed, click on the on/off switch next to the
    role and that should do it. Your role is now imported. Clicking your username
    in the top menu will bring up a drop-down list; from this list, select My Imports.
    This will give you the logs of your import:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/0e9472b9-2161-4bbc-928e-73a79ee09378.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now your role has been published; you can view your role by clicking on the
    link at the top, where it says `russmckendrick/ansible-role-docker`. This will
    take you to the Ansible Galaxy page for your newly added role, for example, [https://galaxy.ansible.com/russmckendrick/docker/](https://galaxy.ansible.com/russmckendrick/docker/):'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/08f01e98-0a81-4f21-833f-b8599f59c62a.png)'
  prefs: []
  type: TYPE_IMG
- en: As you can see, all of the metadata we added is present in the listing along
    with links to view the README file, which was imported from GitHub, and also links
    to GitHub itself.
  prefs: []
  type: TYPE_NORMAL
- en: Testing the role
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now that we have our role, we can test it. To do this, we will need a playbook,
    inventory, and a requirements file, as well as a CentOS and Ubuntu server. Run
    the following commands to create the files you need:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'The inventory file, production, should look as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'Our `requirements.yml` file contains just our Docker role:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'Our playbook, the `site.yml` file, should just call our role:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, the `Vagrantfile` should read:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'Now that we have all of the files in place, we can download our role by running:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'As you can see from the following output, this will download our role to the
    `~/.ansible/roles/` folder:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/65c29af9-204a-4bfc-b20e-c8a92b8f7d91.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Next, launch the two Vagrant boxes by running either one of the following commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'Once the boxes are up and running, we can run the playbook with:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'As you can see from the following output, everything went as planned and the
    role installed Docker on both boxes:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/305ac1e3-d03f-4664-acc2-ce6c24e555c5.png)'
  prefs: []
  type: TYPE_IMG
- en: Ansible Galaxy commands
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Before we finish this chapter, let's take a quick look at some of the other
    functionalities of the `ansible-galaxy` command, starting with logging in.
  prefs: []
  type: TYPE_NORMAL
- en: Logging in
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'It is possible to log in to Ansible Galaxy from the command line; you can do
    this by using the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'This will ask for your GitHub username and password; if you have two-factor
    authentication enabled on your GitHub account, which you really should do, then
    this method will not work. Instead, you will need to provide a personal access
    token. You can generate a personal access token at the following URL: [https://github.com/settings/tokens/](https://github.com/settings/tokens/).
    Once you have a token, you can use the following command, replacing the token
    with your own:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'The following screenshot shows the output for the preceding command:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/ae72ea57-dac3-4195-8d0b-5318b1781e5d.png)Personal access tokens
    will give anyone who has one full access to your GitHub account; please store
    them securely and, if possible, rotate them regularly.'
  prefs: []
  type: TYPE_NORMAL
- en: Importing
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Once logged in, if you make a change to your role and want to import those
    changes into Ansible Galaxy, you can run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'The following screenshot shows the output for the preceding command:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/d246faed-3afd-4c10-b531-ccca5be6406e.png)'
  prefs: []
  type: TYPE_IMG
- en: The two bits of information we are passing to the command are the GitHub username,
    `russmckendrick` in my case, and the name of repository we want to import—so for
    the Docker one we published in the last section, I am using `ansible-role-docker`.
  prefs: []
  type: TYPE_NORMAL
- en: Searching
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'You can use the `ansible-galaxy` command to search for roles. For example,
    running the following currently returns 725 roles:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'If you want to search for a role by an author, you can use the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'As you can see from the output in the screenshot, this returns just the role
    we have published:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/3fbaf17e-5659-4337-8f48-94da578320a3.png)'
  prefs: []
  type: TYPE_IMG
- en: This is useful as you do not have to start switching between your terminal and
    browser.
  prefs: []
  type: TYPE_NORMAL
- en: Info
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The final command we are going to look at is the `info` one; this command will
    print out information on any role you provide to it. For example, running the
    following will give you lots of information on the role we published:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'The following screenshot shows the output for the preceding command:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/575b2ae1-697c-4e59-8983-7e811819d80a.png)'
  prefs: []
  type: TYPE_IMG
- en: As you can see, all of the information you can get on the website is also available
    on the command line, meaning you can have a choice when it comes to how you interact
    with Ansible Galaxy.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we have taken an in-depth look at Ansible Galaxy, both the
    website and command-line tool. I am sure that you will agree that Ansible Galaxy
    offers valuable community services in that it allows Ansible users to share roles
    for common tasks as well as a way for users to make contributions to the Ansible
    community by publishing their own roles.
  prefs: []
  type: TYPE_NORMAL
- en: However, just be careful. Remember to check through the code and also read through
    bug trackers before using roles from Ansible Galaxy in production environments;
    after all, a lot of these roles need to have escalated privileges in order to
    be able to successfully execute their tasks.
  prefs: []
  type: TYPE_NORMAL
- en: In the next and final chapter, we are going to be looking at some of the ways
    Ansible can be integrated into your day-to-day workflows.
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There is just one task for this chapter. Take one of the other roles we have
    created previously, adapt it for use on more than one operating system, and publish
    it on Ansible Galaxy.
  prefs: []
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Both of the roles we used at the start of the chapter were published by Jeff
    Geerling; you can find out more about Jeff and his projects at [https://www.jeffgeerling.com/](https://www.jeffgeerling.com/).
  prefs: []
  type: TYPE_NORMAL
