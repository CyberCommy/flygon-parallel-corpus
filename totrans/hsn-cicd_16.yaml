- en: Assessments
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Chapter 1: CI/CD with Automated Testing'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A manual process is any process that is repetitive and capable of being automated.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Automation is a process where you enable an action to be done automatically
    via a script or some kind of action.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: It is important to open communication between departments in order to find manual
    processes.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Continuous Integration / Continuous Delivery
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Automation scripts are useful because they help automate manual tasks.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A company intranet can help empower other departments share information and
    link disconnected information.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Other departments should share data because it helps bridge information across
    departments and increases the chances of using data in interesting ways.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Chapter 2: Basics of Continuous Integration'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A Software Build can consist of just compiling software components. A build
    can consist of compiling and running automated tests, but in general the more
    processes you add to the build the slower the feedback loop becomes on a build.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A staged build is a build that is broken down into a smaller build. For example
    in the first build you can do your compilation step and run all the unit tests.
    A secondary build can be used to run longer running tests such as end to end tests.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Make is a widely used scripting tool that can be used for many different types
    of programming languages. Maven is a scripting tool used by the Java community.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: It is better to follow a naming convention because it helps organize a code
    base better and helps developers quickly understand what is going on a source
    file. Following a particular folder structure can help you quickly setup a new
    project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: CI has many things of value but in particular a CI system helps decouple environment
    configuration and setup into an isolated environment where developers can run
    all the tests in a codebase and do important tasks such as reporting and call
    other 3rd party services in an automated fashion.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Chapter 3: Basics of Continuous Delivery'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: What we mean by delivering software is that the actual software product has
    been delivered to the intended user and not just that the software product has
    been approved by the QA department. In other words the intended users are actually
    using the software.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Deploying software manually is an antipattern as well as manual software configuration.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Some benefits of automation when delivering software is team empowerment ( teams
    feel empowered to make decisions ), error reduction as you eliminate errors that
    creep up due to manual processes as well as stress reduction.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Configuration Management is the process by which all software artifacts that
    are pertinent to each given project as well as any relationships among the software
    artifacts are retrieved, stored, identified and modified.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Writing descriptive and meaningful commit messages helps developers quickly
    track the issue that is worked on and helps developers understand the work that
    you actually did.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A deployment pipeline can thought of as the process for getting software that
    is written by developers into the hands of your users.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The deployment should be done the same in each environment so that you get reliably
    know that it is being tested the same in each environment and avoid possible configuration
    mismatches.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Chapter 4: The Business Value of CI/CD'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: It is difficult for developers to work on a new feature without having all the
    requirements up front. It can be a great hindrance for a developers ability to
    finish assigned work without all the necessary requirements.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Pain driven development is about improving processes that are causing you pain.
    The main point being that the pain that you feel will help point you into areas
    of improvement.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Developers will eventually ignore messages if they are bombarded with too many
    alerts. It is best if the alerts are meaningful and not just noise.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: By rotating team members into different teams you help shape their perspective
    and give a broader understanding of development practices and increase their product
    knowledge.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: It is beneficial because not all development practices are valuable, it could
    be that a development practice is being done because something better has not
    been thought of, sometimes asking why something is done will help bring changes
    necessary for an organization.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Metrics and reporting are a great way to convince your stakeholders on the value
    of CI/CD. Remember that a picture is worth a thousand words sometimes.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Leadership may not understand what automation means and understand the impact
    that automation can have on an organization. You may need to educate them by doing
    a lunch and learn or make a company presentation.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Chapter 5: Installation and Basics of Jenkins'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Chocolatey
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Java
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`curl -X POST -u <user>:<password> http://<jenkins.server>/restart`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`sudo ufw allow 8080`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Homebrew
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the Jenkins Dashboard, click Manage Jenkins and then click Manage Plugins
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the Jenkins Dashboard, click Manage Jenkins and then click Configure System,
    then you need to scroll down into the global properties and the necessary environment
    variables.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Chapter 6: Writing Freestyle Scripts'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The question mark symbol is handy when you need to know the details about a
    build configuration option.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: It is a Crontab syntax that you can use for polling your version control system.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Yes, you can use more than one language, for instance you may have a go script
    and a Node.js script that you need to run in your environment.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: It is a Unix environment that you are operating in and a lot of Unix commands
    are available for use like `sed` and `awk`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A global property will be available throughout all the build jobs you add while
    a project level environment variable will only be available in the specific project
    you add them in. This is enabled by the EnvInject Plugin.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: It is useful to see the command executed and/or the output of the command so
    that you can more easily debug issues that occur with each command that is run
    in the CI environment.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The post build action is useful for things like reporting and gathering metrics
    but also for any additional action that you deem important outside of the main
    build script actions.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Chapter 7: Developing Plugins'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We used the Maven Build tool.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We used the Chocolatey Package Manager in Windows.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We used the Homebrew Package Manager in macOS.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The `settings.xml` file for the Maven Build Tool.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You can go to the url {{domain}}/pluginManager/advanced to manage plugins.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The command `mvn install` is used to both build and install Jenkins Plugins.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Maven creates a file called `pluginname.hpi` where plugin name can be any name
    you gave for the actual plugin.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Chapter 8: Building Pipelines with Jenkins'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Yes you can, it is actually one of the suggested plugins that you can installÂ 
    when you use the Docker Install of Jenkins.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: By using the Pipeline Editor you can get helpful debugging and visualize stages
    in a pipeline.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The Blue Ocean View is still under active development so any type of Administrative
    task needs to be done in the classic view.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Yes if you click on a node of the pipeline and then click the popdown you will
    get a detailed view of that particular build stage.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: No not yet.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The stages keyword contains a sequence of one or more stage directives, the
    stages section is where the bulk of the "work" described by a Pipeline will be
    located.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Yes it does need to be wrapped.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Chapter 9: Installation and Basics of Travis CI'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Jenkins allows for full customization because it must be installed and setup
    by a Jenkins Administrator while Travis CI is much easier to setup because it
    uses an in application YML script and is only used in the GitHub, which is a web-based
    hosting service for version control that uses Git.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: No.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You need to go to your profile in Travis and then click the sync button and
    then toggle your newly synced repository on.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Scalars are ordinary values meaning they can be numbers, strings, booleans.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Lists in YAML are just collections of elements.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Anchors serve as a way to reuse items in YML files.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Yes, you add a secondary programming language in the **before_install** block.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You enable docker by adding docker in the services block in the YML script.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Chapter 10: Travis CI CLI Commands and Automation'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Travis CLIÂ User Documentation ([https://github.com/travis-ci/travis.rb#windows](https://github.com/travis-ci/travis.rb#windows))Â recommends
    that you use theÂ RubyInstaller ([https://rubyinstaller.org/](https://rubyinstaller.org/))Â to
    install the latest version Ruby on the Windows OS.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You should use the `travis version` command.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'You use the `travis help` command. For example to print out information about
    the token command you run the following command: `travis help token`.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You will need to run the `travis login` command and then enter your GitHub username
    and password.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'You will need to pass the following HTTP Header: `Travis-API-Version: 3`.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The `travis report` command prints out system configuration information.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The `travis lint` command will check the syntax and validity of your Travis
    yml script.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The `travis init` command helps you setup Travis in your project, and for example
    to setup go in your project run the following command: `travis init go`.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Chapter 11: Travis CI UI Logging and Debugging'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Yes whenever you merge a pull request in GitHub, Travis CI will automatically
    kick off another build.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: No it doesn't, but you will see labels for the before_install and install lifecycle
    events as well as some other lifecycle events.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You will need to use Docker to pull down an image and you can find the full
    list of Docker images here ([https://docs.travis-ci.com/user/common-build-problems/#Troubleshooting-Locally-in-a-Docker-Image](https://docs.travis-ci.com/user/common-build-problems/#Troubleshooting-Locally-in-a-Docker-Image)).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Yes, but you will need to emailÂ `support@travis-ci.com` and then request whatever
    specific repositories you want to have debug mode enabled for. Additionally you
    will need to make a call to Travis API with the corresponding job id to trigger
    a build in debug mode.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'You will need to make an API call to the Travis API by doing a GET request
    to the /builds endpoint. Here is a sample request using the curl REST client:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '`travis_run_before_install` is the convenienceÂ bash function that you would
    use.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'You would use the travis setup SERVICE cli command, and here is an example
    command to setup Heroku in Travis CI: `travis setup heroku`.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Chapter 12: Installation and Basics of CircleCI'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Jenkins allows for full customization because it must be installed and setup
    by a Jenkins Administrator while Circle CI is much easier to setup but doesn't
    allow for the customization that you can get with Jenkins. With that being said
    all you have to do is declare an environment that you want to work with which
    is Linux by default and declare the build language that you are going to use in
    the yml script such as Java.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Yes, Circle CI works with both Bitbucket and GitHub.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You simply have to click the Add Projects button in the Circle CI Application
    and then click the Setup Project button for the repository that you want to setup.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You click on the JOBS link in the left navigation pane and then click on the
    repository that you are working with and then look at the most recent job that
    completed.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We used the [https://maven.apache.org/](https://maven.apache.org/)Â M[aven build
    tool.](https://maven.apache.org/)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: No, you should be using version 2 of the Circle CI Syntax because version 1
    is deprecated.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'You put the build language as a key in the ^(image) field that inside of the
    `docker` field. Here is a snippet of what it looks like:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Chapter 13: Circle CI CLI Commands and Automation'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You need to have Docker installed in order to use the Circle CI CLI.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We got the nightly build from GitHub Releases ([https://github.com/CircleCI-Public/circleci-cli/releases](https://github.com/CircleCI-Public/circleci-cli/releases)).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: There are currently 6 command in the CLI but more commands may be added in the
    future.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The `help` command is useful because it explains how to use each command what
    the command does.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The workflows field is how you can run parallel jobs in Circle CI.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We used the command `circleci config validate`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The API Endpoint isÂ `https://circleci.com/api/v1.1/`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Chapter 14: Circle CI UI Logging and Debugging'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The API Endpoint was `POSTÂ https://circleci.com/api/v1.1/project/:vcs-type/:username/:project/follow?circle-token=:token`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Yes the cat utility can be used to create new files you can do the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'You would use the vertical Pipe operator (|) to create a multi-line command
    like this for example:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Yes if you run the `set -x` option in a script and are setting secrets they
    may leak into standard output soÂ instead store secrets or keys in project or context
    settings in the CircleCI app.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The CLI command to validate your config yml script is `circleci config validate`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Yes they can if you go the project settings and look at Environment Variables
    and use the Import Variables button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We used the save_cache and restore_cache declarations.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Chapter 15: Best Practices'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: It is important because the first stage in a CI/CD pipeline is meant to run
    fast.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The commit stage in a CI/CD pipeline is typically the first stage in a pipeline
    where you build your artifacts and run your unit tests.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A load test.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Vault
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You should be careful because you could accidentally expose a password.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Collaboration among developers and operations.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: goreleaser ([https://goreleaser.com/](https://goreleaser.com/))
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
