- en: Appendix A. Self-test Questions and Answers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Here, we have included some questions you could ask yourself to see whether
    you have understood each chapter. Don't worry! The answers are also included.
  prefs: []
  type: TYPE_NORMAL
- en: Chapter 2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Q1) What should you do if all this talk of life cycles, classes, and methods
    is a bit confusing?
  prefs: []
  type: TYPE_NORMAL
- en: A) Don't worry about them. Understanding comes a bit at a time, and if they
    are not entirely clear at this stage, it will not hold you back from thoroughly
    learning Java, and all will become clearer as we progress.
  prefs: []
  type: TYPE_NORMAL
- en: Q2) What exactly is a Java class?
  prefs: []
  type: TYPE_NORMAL
- en: A) Classes are a fundamental building block of Java programs. They are like
    containers for our Java code, and we can even use other people's classes to simplify
    the programs we write, even without seeing or understanding the code contained
    within those classes.
  prefs: []
  type: TYPE_NORMAL
- en: Q3) What is the difference between a method and a class?
  prefs: []
  type: TYPE_NORMAL
- en: A) Methods are contained within classes and represent the specific functionality
    of the class, like another container within a container. As an example from a
    game, we might have a `Tank` class with `shoot`, `drive`, and `selfDestruct` methods.
    We can use a class and its methods by making our own class, as we will in [Chapter
    6](ch06.xhtml "Chapter 6. OOP – Using Other People's Hard Work"), *OOP – Using
    Other People's Hard Work*, or by using the `@import` statement as we did earlier
    in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Q4) Take a look at the Android developer site and its more technical explanation
    of the lifecycle phases, at [http://developer.android.com/reference/android/app/Activity.html](http://developer.android.com/reference/android/app/Activity.html).
    Can you see the phase and its related method that we haven't discussed? When would
    it be triggered in an app? What is the precise pathway an activity takes from
    creation to destruction?
  prefs: []
  type: TYPE_NORMAL
- en: A) It's the restarting phase. Its corresponding method is `onRestart`. It is
    triggered when an app has been stopped and then restarted. We won't need the `onRestart`
    method in this book, but this exercise hopefully helped clarify the concept of
    life cycles. The precise pathway will vary; we just need to handle the phases
    that are relevant to our game. So far, we have just tinkered with `onCreate`.
  prefs: []
  type: TYPE_NORMAL
- en: Chapter 3
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Q1) What does this code do?
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: A) Nothing, because it is commented out with //.
  prefs: []
  type: TYPE_NORMAL
- en: Q2) Which of these lines causes an error?
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: A) The fourth line, `a = a + b`, has no semicolon, so it will cause an error.
    The last line, `c = c + a;`, will also cause an error because you cannot assign
    a string to an `int` value.
  prefs: []
  type: TYPE_NORMAL
- en: Q3) We talked a lot about operators and how different operators can be used
    together to build complicated expressions. Expressions, at a glance, can sometimes
    make code look complicated. However, when looked at closely, they are not as tough
    as they seem. Usually, it is just a case of splitting the expressions into smaller
    pieces to work out what is going on. Here is an expression that is more convoluted
    than anything else you will ever meet in this book. As a challenge, can you work
    out what `x` will be?
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: A) You can run the `SelfTestC3Q3` project in the `Chapter3` folder of the code
    bundle to check out the answer in the console, but `isTrueOrFalse` evaluates to
    true; here's why.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, let''s break down the nasty line into manageable sections defined by
    the brackets:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Previously, we were asking the question, "is `x` less than or equal to `y` or
    is `x` exactly equal to `10`?". Clearly, `x` is not equal to or less than `y`
    but `x` is exactly equal to `10`, so our use of the logical OR operator, `||`,
    in the middle causes the entire part of the expression to evaluate to `true`.
  prefs: []
  type: TYPE_NORMAL
- en: '&&'
  prefs: []
  type: TYPE_NORMAL
- en: 'Both sides of an `&&` operator must evaluate to `true` for the overall expression
    to be true. So let''s look at the other side:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Well, `isTrueOrFalse` is a Boolean. It can only be true or false so this part
    of the expression must be true because we are essentially asking, "is `isTrueOrFalse`
    false or is `isTrueOrFalse` true?". It must be one or the other. So, regardless
    of how we initialized `isTrueOrFalse`, the last part of the expression will be
    true.
  prefs: []
  type: TYPE_NORMAL
- en: So the overall expression evaluates to `true`, and `true` is assigned to `isTrueOrFalse`.
  prefs: []
  type: TYPE_NORMAL
- en: Chapter 4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Q1) What is wrong with this method?
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: A) It returns a value but has a `void` return type.
  prefs: []
  type: TYPE_NORMAL
- en: Q2) What will `x` be equal to at the end of this code snippet?
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: A) Okay, this was a slightly tricky question. Regardless of the value of `x`,
    the `do` block always executes at least once. Then `x` is set to `11`, and after
    that, it is incremented to `12`. So when the `while` expression is evaluated,
    it is true and the `do` block executes again. Once more, `x` is set to `11` and
    then incremented to `12`. The program is stuck in a never-ending (infinite) loop.
    This code is most likely a bug.
  prefs: []
  type: TYPE_NORMAL
- en: Chapter 5
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Q1) Suppose we wanted to have a quiz where the question could be about naming
    the president, the capital city, and so on. How would we do this with multidimensional
    arrays?
  prefs: []
  type: TYPE_NORMAL
- en: 'A) We would just make the inner array hold three strings, perhaps like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Q2) In our persistence example, we saved a continually updating string to a
    file so that it persisted after the app had been shut down and restarted. This
    is like asking the user to click on a **Save** button. Summoning all your knowledge
    of [Chapter 2](ch02.xhtml "Chapter 2. Getting Started with Android"), *Getting
    Started with Android*, can you think of a way to save the string without saving
    it by the button click but just when the user quits the app?
  prefs: []
  type: TYPE_NORMAL
- en: 'A) Override the `onPause` life cycle method and put the code to save the string
    in there, like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Q3) Other than increasing the difficulty level, how could we make the memory
    game harder?
  prefs: []
  type: TYPE_NORMAL
- en: 'A) We could simply alter the pause in our thread execution to mention a lower
    number, giving the player less thinking time, like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Q4) Using the plain Android UI with the dull grey buttons isn't very exciting.
    Take a look at the UI elements in the visual designer. Can you work out how to
    use an image for our button background?
  prefs: []
  type: TYPE_NORMAL
- en: A) Simply add some `.png` graphics to the `drawable-mdpi` folder and then find
    the background property in the **Properties** window while your button is selected.
    Click to edit the property in the usual way and choose the graphic you added to
    the `drawable-mdpi` folder.
  prefs: []
  type: TYPE_NORMAL
- en: Chapter 6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Q1) What is encapsulation?
  prefs: []
  type: TYPE_NORMAL
- en: A) Encapsulation is the way we pack our variables, code, and methods in a manner
    that exposes just the parts and functionality we want to the parts of our app
    (or any app that uses our classes) that we want.
  prefs: []
  type: TYPE_NORMAL
- en: Q2) I don't get all this, and actually, I have more questions now than I had
    at the start of the chapter. What should I do?
  prefs: []
  type: TYPE_NORMAL
- en: A) You know enough about OOP to make significant progress with games and any
    other type of Java programming. If you are desperate to know more OOP right now,
    there are plenty of highly rated books that discuss nothing but OOP. However,
    practice and familiarity with the syntax will go a long way to achieving the same
    thing and will probably be more fun. The deciding factor in whether you rush off
    and learn the intricate details of OOP now will really depend on your personal
    goals and what you want to do with your programming skills in the future. Read
    the last few pages of [Chapter 9](ch09.xhtml "Chapter 9. Making Your Game the
    Next Big Thing"), *Making Your Game the Next Big Thing*, for more discussion.
  prefs: []
  type: TYPE_NORMAL
- en: Chapter 7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Q1) The speed of the ball is calculated in pixels. Different devices have different
    numbers of pixels. Can you explain how to make the ball speed approximately the
    same on different screen resolutions?
  prefs: []
  type: TYPE_NORMAL
- en: 'A) A simple way to accommodate different screen resolutions would be to devise
    a system that that takes into account the number of pixels the screen has. We
    have already done this for the racket and ball sizes. We could declare a member
    variable like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'We could then initialize these variables in `onCreate` after we have obtained
    the screen dimensions:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Then we can move our ball a bit, like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Chapter 8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Q1) What about a visual improvement for our game screen, perhaps a nice, light
    green grassy background instead of just black?
  prefs: []
  type: TYPE_NORMAL
- en: 'A) You can use most graphics programs such as Gimp or Photoshop to get the
    RGB value of a nice, light green grassy color. Alternatively, you can use an online
    color picker such as [http://www.colorpicker.com/](http://www.colorpicker.com/).
    Then look at this line in our `drawGame` method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Change it to the following line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Q2) How about adding some nice flowers to the background?
  prefs: []
  type: TYPE_NORMAL
- en: A) Here is the way to do this. Create a flower bitmap (or use mine), load it,
    and scale it in the usual way, in the `configureDisplay` method. Decide how many
    flowers to draw. Choose and store locations on the board in the `SnakeView` constructor
    (or write and call a special method, perhaps `plantFlowers`).
  prefs: []
  type: TYPE_NORMAL
- en: Draw them before the snake and the apple in the `drawGame` method. This will
    ensure that they can never hide an apple or a part of the snake. You can see my
    specific implementation in the methods mentioned and a copy of the flower bitmap
    in the `EnhancedSnakeGame` project in the `Chapter8` folder.
  prefs: []
  type: TYPE_NORMAL
- en: Q3) If you're feeling brave, make the flowers sway. Think of sprite sheets.
    The theory is exactly the same as that of the animated snake head. We just need
    a few lines of code to control the frame rate separately from the game frame rate.
  prefs: []
  type: TYPE_NORMAL
- en: A) Take a look at the new code in the `controlFPS` method. We simply set up
    a new counter for flower animations to switch flower frames once every six game
    frames. You can also copy the sprite sheet from the `EnhancedSnakeGame` project
    in the `Chapter8` folder.
  prefs: []
  type: TYPE_NORMAL
- en: Q4) We could set up another counter and use our snake head animation, but it
    wouldn't be that useful because the subtle tongue movements would be barely visible
    due to the smaller size. Nevertheless, we could quite easily swish the tail segment.
  prefs: []
  type: TYPE_NORMAL
- en: A) There is a two-frame tail bitmap in the `EnhancedSnakeGame` project in the
    `Chapter8` folder. As this is also two frames, we could use the same frame timer
    as that used for the flower. Take a look at the implementation in the `EnhancedSnakeGame`
    project in the `Chapter8` folder. The only required changes are in `configureDisplay`
    and `drawGame`.
  prefs: []
  type: TYPE_NORMAL
- en: Q5) Here is a slightly trickier enhancement. You can't help notice that when
    the snake sprites are headed in three out of the four possible directions, they
    don't look right. Can you fix this?
  prefs: []
  type: TYPE_NORMAL
- en: A) We need to rotate them depending upon the way they are heading. Android has
    a `Matrix` class, which allows us to easily rotate Bitmaps, and the `Bitmap` class
    has an overloaded version of the `createBitmap` method that takes a `Matrix` object
    as an argument.
  prefs: []
  type: TYPE_NORMAL
- en: 'So we can create a matrix for each angle we need to handle, like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Then we can rotate a bitmap using the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'Another problem is that as the snake twists and turns, how do we keep track
    of the individual orientation of each segment? We already have a direction finding
    scheme: 0 is up, 1 is right, and so on. So we can just create another array for
    the orientation of each segment that corresponds to a body segment in the `snakeX`
    and `snakeY` arrays. Then all we need to do is to ensure that the head has the
    correct direction, and update from the back on each frame just as we do for the
    snake''s coordinates. You can see this implemented in the `EnhancedSnakeGame`
    project in the `Chapter8` folder.'
  prefs: []
  type: TYPE_NORMAL
- en: The finished project with a few more enhancements is in the `EnhancedSnakeGame`
    project in the `Chapter8` folder. This is the version we will be using as a starting
    point in the next and final chapter. You can also download the game from Google
    Play at [https://play.google.com/store/apps/details?id=com.packtpub.enhancedsnakegame.enhancedsnakegame](https://play.google.com/store/apps/details?id=com.packtpub.enhancedsnakegame.enhancedsnakegame).
  prefs: []
  type: TYPE_NORMAL
- en: '![Chapter 8](img/8859OS_Appendix_01.jpg)![Chapter 8](img/8859OS_Appendix_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Chapter 9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Q1) Try to implement the local high scores on the device.
  prefs: []
  type: TYPE_NORMAL
- en: A) You already know how to do this. Just go back to [Chapter 5](ch05.xhtml "Chapter 5. Gaming
    and Java Essentials"), *Gaming and Java Essentials* in case you are unsure. The
    implementation is in the code for this chapter's project as well.
  prefs: []
  type: TYPE_NORMAL
- en: Q2) How many eminent computer scientists have made cameo appearances in the
    code throughout this book?
  prefs: []
  type: TYPE_NORMAL
- en: A) 9
  prefs: []
  type: TYPE_NORMAL
- en: Ada Lovelace
  prefs: []
  type: TYPE_NORMAL
- en: Charles Babbage
  prefs: []
  type: TYPE_NORMAL
- en: Alan Turing
  prefs: []
  type: TYPE_NORMAL
- en: Vinton Cerf
  prefs: []
  type: TYPE_NORMAL
- en: Jeff Minter
  prefs: []
  type: TYPE_NORMAL
- en: Corrine Yu
  prefs: []
  type: TYPE_NORMAL
- en: André LaMothe
  prefs: []
  type: TYPE_NORMAL
- en: Gabe Newell
  prefs: []
  type: TYPE_NORMAL
- en: Sid Meier
  prefs: []
  type: TYPE_NORMAL
- en: Why not search on the Web for some of these names? There are some interesting
    stories about each of them.
  prefs: []
  type: TYPE_NORMAL
