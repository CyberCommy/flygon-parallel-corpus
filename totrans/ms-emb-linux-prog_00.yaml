- en: Preface
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: An embedded system is a device with a computer inside that doesn't look like
    a computer. Washing machines, televisions, printers, cars, aircraft, and robots
    are all controlled by a computer of some sort, and in some cases, more than one.
    As these devices become more complex, and as our expectations of the things that
    we can do with them expand, the need for a powerful operating system to control
    them grows. Increasingly, Linux is the operating system of choice.
  prefs: []
  type: TYPE_NORMAL
- en: The power of Linux stems from its open source model, which encourages sharing
    of code. This means that software engineers from many backgrounds, and often employed
    by competing companies, can cooperate to create an operating system kernel that
    is up-to-date and tracks the development of the hardware. From this one code base,
    there is support from the largest super computers down to a wristwatch. Linux
    is only one component of the operating system. Many other components are needed
    to create a working system, from basic tools, such as a command shell, to graphical
    user interfaces, with web content and communicating with cloud services. The Linux
    kernel together with an extensive range of other open source components allow
    you to build a system that can function in a wide range of roles.
  prefs: []
  type: TYPE_NORMAL
- en: However, flexibility is a double-edged sword. While it gives a system designer
    a wide choice of solutions to a particular problem, it also presents the problem
    of knowing which are the best choices. The propose of this book is to describe
    in detail how to construct an embedded Linux system using free, open source projects
    to produce a robust, reliable, and efficient system. It is based on the experience
    of the author as a consultant and trainer over a period of many years, using examples
    to illustrate best practices.
  prefs: []
  type: TYPE_NORMAL
- en: What this book covers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '*Mastering Embedded Linux Programming* is organized along the lines of the
    life cycle of a typical embedded Linux project. The first six chapters tell you
    what you need to know about how to set up the project and how a Linux system is
    put together, culminating in selecting an appropriate Linux build system. Next,
    comes the stage where certain key decisions must be made about the system architecture
    and design choices, including flash memory, device drivers, and the `init` system.
    Following this is the phase of writing applications to make use of the embedded
    platform you have built, and for which there are two chapters on processes, threads,
    and memory management. Finally, we come to the stage of debugging and optimizing
    the platform, which is discussed in chapters 12 and 13\. The last chapter describes
    how to configure Linux for real-time applications.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 1](ch01.html "Chapter 1. Starting Out"), *Starting Out*, sets the
    scene by describing the choices available to the system designer at the start
    of a project.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 2](ch02.html "Chapter 2. Learning About Toolchains"), *Learning About
    Toolchains*, describes the components of a toolchain with an emphasis on cross-compiling.
    It describes where to get a toolchain and provides details on how to build one
    from the source code.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 3](ch03.html "Chapter 3. All About Bootloaders"), *All About Bootloaders*,
    explains the role of the bootloader to initialize the hardware of the device and
    uses U-Boot and Bareboot as examples. It also describes the device tree, which
    is a means of encoding the hardware configuration, used in many embedded systems.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 4](ch04.html "Chapter 4. Porting and Configuring the Kernel"), *Porting
    and Configuring the Kernel*, provides information on how to select a Linux kernel
    for an embedded system and configure it for the hardware within the device. It
    also covers how to port Linux to the new hardware.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 5](ch05.html "Chapter 5. Building a Root Filesystem"), *Building a
    Root Filesystem*, introduces the ideas behind the user space part of an embedded
    Linux implementation by means of a step-by-step guide on how to configure a root
    filesystem.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 6](ch06.html "Chapter 6. Selecting a Build System"), *Selecting a
    Build System*, covers two embedded Linux build systems, which automate the steps
    described in the previous four chapters and conclude the first section of the
    book.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 7](ch07.html "Chapter 7. Creating a Storage Strategy"), *Creating
    a Storage Strategy*, discusses the challenges created by managing flash memory,
    including raw flash chips and embedded MMC or eMMC packages. It describes the
    filesystems that are applicable to each type of technology. It also covers techniques
    on how to update the device firmware in the field.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 8](ch08.html "Chapter 8. Introducing Device Drivers"), *Introducing
    Device Drivers*, describes how kernel device drivers interact with the hardware
    with worked examples of a simple driver. It also describes the various ways of
    calling device drivers from the user space.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 9](ch09.html "Chapter 9. Starting up - the init Program"), *Starting
    up - the init Program*, shows how the first user space program, `init`, which
    starts the rest of the system. It describes the three versions of the `init` program,
    each suitable for a different group of embedded systems, with increasing complexity
    from BusyBox `init` to systemd.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 10](ch10.html "Chapter 10. Learning About Processes and Threads"),
    *Learning About Processes and Threads*, describes embedded systems from the point
    of view of the application programmer. This chapter looks at processes and threads,
    inter-process communication, and scheduling policies.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 11](ch11.html "Chapter 11. Managing Memory"), *Managing Memory*, introduces
    the ideas behind virtual memory and how the address space is divided into memory
    mappings. It also covers how to detect memory that is being used and memory leaks.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 12](ch12.html "Chapter 12. Debugging with GDB"), *Debugging with GDB*,
    shows you how to use the GNU debugger, GDB, to interactively debug both the user
    space and kernel code. It also describes the kernel debugger, `kdb`.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 13](ch13.html "Chapter 13. Profiling and Tracing"), *Profiling and
    Tracing*, covers the techniques available to measure the system performance, starting
    from whole system profiles and then zeroing in on particular areas where bottlenecks
    are causing poor performance. It also describes Valgrind as a tool to check the
    correctness of an application''s use of thread synchronization and memory allocation.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 14](ch14.html "Chapter 14. Real-time Programming"), *Real-time Programming*,
    provides a detailed guide to real-time programming on Linux, including the configuration
    of the kernel and the real-time kernel patch, and also provides a description
    of tools to measure real-time latencies. It also covers information on how to
    reduce the number of page faults by locking the memory.'
  prefs: []
  type: TYPE_NORMAL
- en: What you need for this book
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The software used in this book is entirely open source. The versions used are,
    in most cases, the latest stable versions available at the time of writing. While
    I have tried to describe the main features in a manner that are not specific to
    a particular version, it is inevitable that the examples of commands contain some
    details that will not work with the later versions. I hope that the descriptions
    that accompany them are sufficiently informative so that you can apply the same
    principles to the later versions of the package.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are two systems involved in creating an embedded system: the host system
    that is used to cross-compile the software and the target system on which it runs.
    For the host system, I have used Ubuntu 14.04, but most Linux distributions will
    work with little modification. In the same way, I had to choose a target system
    to represent an embedded system. I chose two: the BeagelBone Black and the QEMU
    CPU emulator, emulating an ARM target. The latter target means that you can try
    out the examples without having to invest in the hardware for an actual target
    device. At the same time, it should be possible to apply the examples to a wide
    range of targets with adaptations for specifics, such as device names and memory
    layout.'
  prefs: []
  type: TYPE_NORMAL
- en: The versions of the main packages for the target are U-Boot 2015.07, Linux 4.1,
    Yocto Project 1.8 "Fido", and Buildroot 2015.08.
  prefs: []
  type: TYPE_NORMAL
- en: Who this book is for
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This book is ideal for Linux developers and system programmers who are already
    familiar with embedded systems and who want to know how to create best-in-class
    devices. A basic understanding of C programming and experience with systems programming
    is needed.
  prefs: []
  type: TYPE_NORMAL
- en: Conventions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this book, you will find a number of text styles that distinguish between
    different kinds of information. Here are some examples of these styles and an
    explanation of their meaning.
  prefs: []
  type: TYPE_NORMAL
- en: 'Code words in text, database table names, folder names, filenames, file extensions,
    pathnames, dummy URLs, user input, and Twitter handles are shown as follows: "We
    could use the stream I/O functions `fopen(3)`, `fread(3)`, and `fclose(3)`."'
  prefs: []
  type: TYPE_NORMAL
- en: 'A block of code is set as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'When we wish to draw your attention to a particular part of a code block, the
    relevant lines or items are set in bold:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Any command-line input or output is written as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '**New terms** and **important words** are shown in bold. Words that you see
    on the screen, for example, in menus or dialog boxes, appear in the text like
    this: "The second line prints the message **Please press Enter to activate this
    console** on the console."'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Warnings or important notes appear in a box like this.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Tips and tricks appear like this.
  prefs: []
  type: TYPE_NORMAL
- en: Reader feedback
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Feedback from our readers is always welcome. Let us know what you think about
    this book—what you liked or disliked. Reader feedback is important for us as it
    helps us develop titles that you will really get the most out of.
  prefs: []
  type: TYPE_NORMAL
- en: To send us general feedback, simply e-mail `<[feedback@packtpub.com](mailto:feedback@packtpub.com)>`,
    and mention the book's title in the subject of your message.
  prefs: []
  type: TYPE_NORMAL
- en: If there is a topic that you have expertise in and you are interested in either
    writing or contributing to a book, see our author guide at [www.packtpub.com/authors](http://www.packtpub.com/authors).
  prefs: []
  type: TYPE_NORMAL
- en: Customer support
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that you are the proud owner of a Packt book, we have a number of things
    to help you to get the most from your purchase.
  prefs: []
  type: TYPE_NORMAL
- en: Downloading the example code
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You can download the example code files from your account at [http://www.packtpub.com](http://www.packtpub.com)
    for all the Packt Publishing books you have purchased. If you purchased this book
    elsewhere, you can visit [http://www.packtpub.com/support](http://www.packtpub.com/support)
    and register to have the files e-mailed directly to you.
  prefs: []
  type: TYPE_NORMAL
- en: Errata
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Although we have taken every care to ensure the accuracy of our content, mistakes
    do happen. If you find a mistake in one of our books—maybe a mistake in the text
    or the code—we would be grateful if you could report this to us. By doing so,
    you can save other readers from frustration and help us improve subsequent versions
    of this book. If you find any errata, please report them by visiting [http://www.packtpub.com/submit-errata](http://www.packtpub.com/submit-errata),
    selecting your book, clicking on the **Errata Submission Form** link, and entering
    the details of your errata. Once your errata are verified, your submission will
    be accepted and the errata will be uploaded to our website or added to any list
    of existing errata under the Errata section of that title.
  prefs: []
  type: TYPE_NORMAL
- en: To view the previously submitted errata, go to [https://www.packtpub.com/books/content/support](https://www.packtpub.com/books/content/support)
    and enter the name of the book in the search field. The required information will
    appear under the **Errata** section.
  prefs: []
  type: TYPE_NORMAL
- en: Piracy
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Piracy of copyrighted material on the Internet is an ongoing problem across
    all media. At Packt, we take the protection of our copyright and licenses very
    seriously. If you come across any illegal copies of our works in any form on the
    Internet, please provide us with the location address or website name immediately
    so that we can pursue a remedy.
  prefs: []
  type: TYPE_NORMAL
- en: Please contact us at `<[copyright@packtpub.com](mailto:copyright@packtpub.com)>`
    with a link to the suspected pirated material.
  prefs: []
  type: TYPE_NORMAL
- en: We appreciate your help in protecting our authors and our ability to bring you
    valuable content.
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If you have a problem with any aspect of this book, you can contact us at `<[questions@packtpub.com](mailto:questions@packtpub.com)>`,
    and we will do our best to address the problem.
  prefs: []
  type: TYPE_NORMAL
