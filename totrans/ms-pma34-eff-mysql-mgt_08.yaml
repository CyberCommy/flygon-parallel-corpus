- en: Chapter 8. Searching Data
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we present mechanisms that can be used to find the data we
    are looking for, instead of just browsing tables page-by-page and sorting them.
    In **Search** mode, application developers can look for data in ways not expected
    by the interface they are building—adjusting and sometimes repairing data. This
    chapter covers single-table searches and entire database searches. [Chapter 12](ch12.html
    "Chapter 12. Generating Multi-table Queries") is a complement to this chapter
    and presents examples of searches involving multiple tables at once.
  prefs: []
  type: TYPE_NORMAL
- en: Single-table searches
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This section describes the **Search** page where a single-table search is available.
    Searching in just one table is effective only in the situation where a single
    table regroups all the data on which we want to search. If the data is scattered
    in many tables, a database search should be launched instead, and this is covered
    later in the chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Entering the search page
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The **Search** page can be accessed by clicking on the **Search** link in the
    `Table` view. This has been done here for the `book` table:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Entering the search page](img/7782_08_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The most commonly used section of the **Search** interface **(query by example)**
    is the one immediately displayed, whereas other dialogs are hidden in a slider
    that can be activated by the **Options** link (more on these dialogs later in
    this chapter).
  prefs: []
  type: TYPE_NORMAL
- en: Searching criteria by column—query by example
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The main use of the **Search** panel is to enter criteria for some columns so
    as to retrieve only the data we are interested in. This is called **query by example**
    because we give an example of what we are looking for. Our first retrieval will
    concern finding the book with ISBN **1-234567-89-0**. We simply enter this value
    in the **isbn** box and set the **Operator** field to **=**.
  prefs: []
  type: TYPE_NORMAL
- en: '![Searching criteria by column—query by example](img/7782_08_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Clicking on **Go** gives these results (shown partially in the following screenshot):'
  prefs: []
  type: TYPE_NORMAL
- en: '![Searching criteria by column—query by example](img/7782_08_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: This is a standard results page. If the results ran in pages, we could navigate
    through them, and edit and delete data for the subset we have chosen during the
    process. Another feature of phpMyAdmin is that the columns used as the criteria
    are highlighted by changing the border color of the columns to better reflect
    their importance on the results page.
  prefs: []
  type: TYPE_NORMAL
- en: It isn't necessary to specify that the **isbn** column be displayed even though
    this is the column in which we search. We could have selected only the **title**
    column for display (refer to the *Selecting the columns to be displayed* section)
    and chosen the **isbn** column as a criterion.
  prefs: []
  type: TYPE_NORMAL
- en: Searching for empty / non-empty values
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Two handy operators are present in the operator's list when the column has a
    character type such as `CHAR, VARCHAR`, or `TEXT:`
  prefs: []
  type: TYPE_NORMAL
- en: '`= ''''`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`!= ''''`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Those are the ones to use when you want to search for an empty `(= '')` or not
    empty `(!= '')` value in some column. Normally, typing nothing in a column's **Value**
    field means that this column does not participate in the search process. However,
    with one of these operators, this column is included in the generated search query.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Please do not confuse this method with searching for a `NULL` value, which is
    quite different. Indeed, a `NULL` value (refer to [http://en.wikipedia.org/wiki/Null_(SQL)](http://en.wikipedia.org/wiki/Null_(SQL))
    for a more complete explanation) is a special value that conveys that some information
    is missing in this column.
  prefs: []
  type: TYPE_NORMAL
- en: Producing reports with Print view
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We see the **Print view** and **Print view (with full texts)** links on the
    results page. These links produce a more formal report of the results (without
    the navigation interface) directly to the printer. In our case, using **Print
    view** would produce the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Producing reports with Print view](img/7782_08_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: This report contains information about the server, database, time of generation,
    version of phpMyAdmin, version of MySQL, and generated SQL query. The other link,
    **Print view (with full texts)**, would print the contents of the `TEXT` columns
    in their entirety.
  prefs: []
  type: TYPE_NORMAL
- en: Searching with wildcard characters
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Let us assume we are looking for something less precise—all books with "cinema"
    in their title. First, we go back to the search page. For this type of search,
    we will use SQL's **LIKE** operator. This operator accepts wildcard characters—the
    `%` character (which matches any number of characters) and the underscore (_)
    character (which matches a single character). Thus we can use **%cinema%** to
    let phpMyAdmin find any substring that matches the word "cinema". If we left out
    both wildcard characters, we would get exact matches with only that single word.
  prefs: []
  type: TYPE_NORMAL
- en: This substring matching is easier to access, being part of the **Operator**
    drop-down list. We only have to enter the word **cinema** and use the operator
    **LIKE %...%** to perform that match. We should avoid using this form of the **LIKE**
    operator on big tables (comprising of thousands of rows), as MySQL does not use
    an index for data retrieval in this case, leading to wait times that depend on
    the server hardware and its current load. This is why this operator is not the
    default one in the drop-down list, even though this method of search is commonly
    used on smaller tables.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following screenshot shows how we ask for a search on **cinema** with the
    **LIKE %...%** operator:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Searching with wildcard characters](img/7782_08_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `LIKE` operator can be used for other types of wildcard searches, for example
    `History%`, which would search for this word at the beginning of a title. As the
    expression does not start with a wildcard character, MySQL will try to use an
    index if it finds one that speeds up data retrieval. For more details about MySQL's
    use of indexes, please refer to [http://dev.mysql.com/doc/refman/5.1/en/mysql-indexes.html](http://dev.mysql.com/doc/refman/5.1/en/mysql-indexes.html).
  prefs: []
  type: TYPE_NORMAL
- en: 'Using either of these methods of performing the query produces the following
    results:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Searching with wildcard characters](img/7782_08_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The `%` and `_` wildcard characters may be repeated in a search expression;
    for example, `histo__` (two underscores) would match `history` whereas `histo%`
    would match `history` and `historian`. The MySQL manual gives more examples at
    [http://dev.mysql.com/doc/refman/5.1/en/string-comparison-functions.html](http://dev.mysql.com/doc/refman/5.1/en/string-comparison-functions.html).
  prefs: []
  type: TYPE_NORMAL
- en: Case sensitivity and search
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In the previous example, we could have replaced "cinema" with "CINEMA" and achieved
    similar results. The reason is that the collation of the **title** column is **latin1_swedish_ci**.
    This collation comes from the collation set, by default, at database creation
    unless the server's default collation has been changed (refer to [http://dev.mysql.com/doc/refman/5.1/en/charset-mysql.html)](http://dev.mysql.com/doc/refman/5.1/en/charset-mysql.html)).
    Here, **ci** means that comparisons are done in a case-insensitive way. Please
    refer to [http://dev.mysql.com/doc/refman/5.1/en/case-sensitivity.html](http://dev.mysql.com/doc/refman/5.1/en/case-sensitivity.html)
    for more details.
  prefs: []
  type: TYPE_NORMAL
- en: Combining criteria
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We can use multiple criteria for the same query (for example, to find all the
    English books of more than 300 pages). There are more comparative choices in **Operator**
    because the **page_count** column is numeric, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Combining criteria](img/7782_08_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Search options
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The **Options** slider reveals additional panels to further refine the search
    process.
  prefs: []
  type: TYPE_NORMAL
- en: Selecting the columns to be displayed
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In the **Options** slider, a **Select columns** panel facilitates selection
    of the columns to be displayed in the results. All columns are selected by default,
    but we can *Ctrl* + Click on other columns to make the necessary selections. Mac
    users would use *Command* + Click to select/unselect the columns.
  prefs: []
  type: TYPE_NORMAL
- en: 'Following are the columns of interest in this example:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Selecting the columns to be displayed](img/7782_08_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: We can also specify the number of rows per page in the textbox next to the column
    selection. The **Add search conditions** box will be explained in the *Applying
    a WHERE clause* section, which will follow shortly.
  prefs: []
  type: TYPE_NORMAL
- en: Ordering the results
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The **Display order** dialog permits the specification of an initial sorting
    order for the results to come. In this dialog, a drop-down menu contains all the
    table's columns; it's up to us to select the one on which we want to sort. By
    default, the sorting will be in **Ascending** order, but a choice of **Descending**
    order is also available.
  prefs: []
  type: TYPE_NORMAL
- en: It should be noted that on the results page, we can change the sort order using
    the techniques explained in [Chapter 4](ch04.html "Chapter 4. Creating and Browsing
    Tables").
  prefs: []
  type: TYPE_NORMAL
- en: Applying a WHERE clause
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Sometimes, we may want to enter a search condition that is not offered in the
    **Function** list of the **query by example** section. The list cannot contain
    every possible variation in the language. Let us say we want to find all the English
    or French books using the `IN` clause. To do this, we can use the **Add search
    conditions** section.
  prefs: []
  type: TYPE_NORMAL
- en: '![Applying a WHERE clause](img/7782_08_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The complete search expression is generated by combining the search conditions
    and other criteria (entered in the **query by example** lines) with a logical
    `AND` operator.
  prefs: []
  type: TYPE_NORMAL
- en: We could have a more complex list of search conditions that would be entered
    in the same textbox, possibly with brackets and operators such as `AND` or `OR`.
  prefs: []
  type: TYPE_NORMAL
- en: A **Documentation** link points to the MySQL manual where we can see a huge
    choice of available functions. (Each function is applicable to a specific column
    type.)
  prefs: []
  type: TYPE_NORMAL
- en: Avoiding repeated results
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The normal behavior of the `SELECT` statement is to fetch all entries corresponding
    to the criteria, even if some entries are repeated. Sometimes, we may want to
    avoid getting the same results more than once. For example, if we want to know
    in which cities we have clients, displaying each city name once would be enough.
    Here, we want to know in which languages our books are written. In the **Select
    columns** dialog, we choose just the **language** column, and we check **DISTINCT**,
    as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Avoiding repeated results](img/7782_08_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Clicking on **Go** produces a results page where we see **en** just once; without
    the **DISTINCT** option, the row containing **en** would have appeared three times.
  prefs: []
  type: TYPE_NORMAL
- en: If we select more than one column (for example `author_id` and `language)` and
    mark the `DISTINCT` option, we will now see two lines in the results as there
    are two books in English (but from different authors). Results are still not repeated.
  prefs: []
  type: TYPE_NORMAL
- en: Performing a complete database search
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous examples, searching was limited to one table. This assumes knowledge
    of the exact table (and columns) where the necessary information might be stored.
  prefs: []
  type: TYPE_NORMAL
- en: When the data is hidden somewhere in the database, or when the same data can
    be presented in various columns (for example, a **title** column or a **description**
    column), it is easier to use the database search method.
  prefs: []
  type: TYPE_NORMAL
- en: 'We enter the **Search** page in the `Database` view for the `marc_book` database:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Performing a complete database search](img/7782_08_11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: In the **Word(s) or value(s)** section, we enter what we want to find. The **%**
    wildcard character can prove useful here—but remember the performance advice about
    wildcard characters given earlier in this chapter. We enter **souvenirs**.
  prefs: []
  type: TYPE_NORMAL
- en: In the **Find** section, we specify how to treat the values entered. We might
    need to find **at least one of the words** entered, **all words** (in no particular
    order), or **the exact phrase** (words in the same order, somewhere in a column).
    Another choice is to use **as regular expression**, which is a more complex way
    of doing pattern matching. More details are available at [http://dev.mysql.com/doc/refman/5.1/en/regexp.html](http://dev.mysql.com/doc/refman/5.1/en/regexp.html)
    and [http://www.regular-expressions.info/](http://www.regular-expressions.info/).
    We will keep the default value—**at least one of the words**.
  prefs: []
  type: TYPE_NORMAL
- en: We can choose the tables to restrict the search or select all the tables. As
    we only have two (small) tables, we select both.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: As the search will be done on each row of every table selected, we might hit
    some time limits if the number of rows or tables is too big. Thus, this feature
    can be deactivated by setting `$cfg['UseDbSearch']` to `FALSE`. (It is set to
    `TRUE` by default).
  prefs: []
  type: TYPE_NORMAL
- en: 'Clicking on **Go** finds the following result for us:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Performing a complete database search](img/7782_08_12.jpg)'
  prefs: []
  type: TYPE_IMG
- en: This is an overview of the number of matches and the relevant tables. We might
    get some matches in the tables in which we may not be interested. However, for
    the matches that look promising, we can click on **browse** to browse the results
    page, or we can choose **delete** to delete the unwanted rows. The **show search
    criteria** link would bring back our criteria panel.
  prefs: []
  type: TYPE_NORMAL
- en: Restricting search to a column
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Sometimes, a particular column name is part of one (or many) tables, and we
    want to search only inside this column. For example, suppose that we are looking
    for "marc"; but this name could be also part of a book's title. So, we want to
    restrict the search to only the "name" column in all the chosen tables. This can
    be achieved by entering "name" in the **inside column** choice.
  prefs: []
  type: TYPE_NORMAL
- en: Stopping an errant query
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Suppose we launch a complex search and notice that the browser is waiting for
    the results. This might happen with a database search but also with a single-table
    search. We can instruct the browser to stop but this will only tell the web server
    to cease handling our request. However, at this point the MySQL server process
    is busy, possibly doing a complex join or a full table scan. Here is a method
    to stop this errant query:'
  prefs: []
  type: TYPE_NORMAL
- en: We open a different browser (for example, the errant query was launched via
    Firefox and we open Internet Explorer).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We log in via phpMyAdmin to MySQL with the same account.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: On the home page, we click on **Processes**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: At this point, we should see a process identified by **Query** under the **Command**
    column and containing the errant query (other than `SHOW PROCESSLIST` which is
    not the one to kill).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We click on **Kill** for this process.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: To verify, we can immediately click again on **Processes** and the chosen process
    should now be identified as **Killed** instead of **Query**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we took an overview of single table searches with "query by
    example" criteria and additional criteria specification—selecting displayed values
    and ordering results. We also looked at wildcard searches and full database search.
  prefs: []
  type: TYPE_NORMAL
- en: The next chapter will explain how to perform the operations on tables, for example,
    changing a table's attributes, such as its storage engine. The subjects of repairing
    and optimizing tables are covered in this chapter as well.
  prefs: []
  type: TYPE_NORMAL
