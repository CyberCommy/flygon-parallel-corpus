- en: The Importance of the final Keyword, Packages, and Modifiers
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This is the final chapter in our book. Here, we will be dealing with some more
    important concepts that will help us write and execute better code.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will look at the following concepts:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
- en: The final keyword
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Packages
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Modifiers in Java
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The final keyword
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'First, we will create a new class. If we declare any variable as `final`, that
    means the value cannot be changed again. Let''s consider the following code:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  id: totrans-8
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: As you can see, we have declared the integer value as `4`. This means we cannot
    change this value to another number. If we try to do that, it throws an error
    saying `Remove 'final' modifier of 'i'`. This keyword is useful if we want a value
    to be constant.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
- en: If we mark a class as `final`, it will throw an error because when we change
    the access mode to `final`, we are not able to use that as a parent class. In
    other words, we will not be able to inherit our properties from it. If we want
    to inherit our properties, we need to change it back to `public`. The key logic
    for the final keyword is that, once written, we cannot override `final` methods.
    So these are unique and cannot be used again with the same name.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
- en: The `final` keyword can be used at the method level to make sure that the method
    is not overridden. It is used at the variable level to make sure we're not changing
    it, and it can also be used at the class level to ensure that we are not inheriting
    that parent class.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
- en: But remember not to confuse `final` and `finally`. `finally` is something that
    is related to `try...catch` exceptions. Once you execute the `try` or `catch`
    block, and preface any error, the controller will still come to this log and execute
    the code, no matter whether the script is pass or fail. `finally` is all about
    restricting access, such as we cannot use that, inherit that, or even change the
    values. We have explored packages, and how to import packages into other classes.
    We have explored the inheritance of interfaces, runtime polymorphism, strings,
    and many more. This is all about keywords.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, we will learn about packages.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
- en: Packages
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When scripts are written for each Java class, there is a pre-populated line
    that is present automatically. It is `package coreJava`. Since we have created
    a package in Java and placed all the Java classes into that `coreJava` package,
    we see it as `package coreJava`.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
- en: Packages are nothing but a set of classes and interfaces. For example, Java
    comes with a few built-in packages, such as `java.length`; if we import this package,
    only then can we access a basic fundamental method, such as `public static void
    main`, integer, or array. All these classes come from this `java.lang` package.
    It is important to define the package name, because without it, we cannot access
    the classes present inside the package. This is because `java.lang` is a default
    package and it comes within the Java compiler itself.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
- en: We have another package as well, `java.util`. We used this package when we worked
    on collections; we imported a `java.util` package. In order to work on `ArrayList`,
    this class is present in the `java.util` package. Therefore, if we remove `import
    java.util.ArrayList`, it throws an error because it does not belong to `java.lang`.
    All collection interfaces come from the `util` package.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
- en: 'But how do we know what keyword to use? The following screenshot displays what
    Eclipse will display if we hover the mouse:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/e544ea6b-85b3-4d6d-9a42-d78acde26018.png)'
  id: totrans-19
  prefs: []
  type: TYPE_IMG
- en: Quick fixes drop down with suggestions to correct the code error
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
- en: 'We are importing the `java.util` package. And from that package, we are importing
    the `ArrayList` class. The syntax for it will be:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Here, the reason why we are using `ArrayList` in this Java class is because
    we know that `ArrayList` is in the `java.util` package. But we need not remember
    it when we are working with Eclipse. When you just hover the mouse, it suggests we
    import the package and we can just click on it. It will automatically import that
    particular test.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
- en: '`HashSet` imports the `HashSet` class from the same `util` package. If we go
    to `HashMap`, it brings `HashMap`. Thus, whenever we want to work on some tests,
    we need to import that package or class. `System.out.println()` also comes from
    one package only, but they come from `java.lang`, which is a built-in compiler.
    These are inbuilt inside the Java packages.'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
- en: At the same time, we can also define a user-defined Java package. In this case,
    all our test cases are in a different package called `coreJava`. If someone wants
    to use our classes, all they need to do is run `import coreJava.classname`.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, we will look at the public modifier.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
- en: Modifiers in Java
  id: totrans-27
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'There are four types of access modifiers:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
- en: '`public`'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`private`'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`protected`'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`default`'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We will not discuss the theory here as you can find it on Google. We need a
    practical approach as to where exactly these access modifiers are used, or where
    exactly the packages are imported. Whenever we've created a method throughout
    this book, every time we just used `public` and wrote the method. The three other
    access modifiers work similarly.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
- en: Now let's try to understand how each of these access modifiers can help us.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
- en: default
  id: totrans-35
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If we do not mention any access modifier, our Java class automatically thinks
    it has a `default` access modifier. If it is `default`, that means you can access
    this method anywhere in your package. But if you go out of this package, then
    you cannot access this method. Even if we import the `package.classname` into
    our new package, we will not be able to access this method if we have not specified
    it as `public`. If you don't specify it, then by default it thinks it's a `default`
    access modifier. The `default` access modifier can be accessed anywhere in the
    package, but not outside it.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
- en: 'In the *Packages* section, we imported this package and we tried to use it.
    As you can see in the following screenshot, there is an error showing up in line
    15:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/d9dfca50-0720-409c-bd0f-5457b9af0d7a.png)'
  id: totrans-38
  prefs: []
  type: TYPE_IMG
- en: Quick fixes drop down with suggestions to correct the code error for default
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
- en: 'If we don''t specify anything, we cannot access it, therefore it is the same
    as that of the default feature. This applies to variables as well:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: As we can see, in the preceding code we have declared an integer. However, it
    will not be `public`; it is `default`. Thus, we cannot access the variable outside
    the package. If we import it, we will have access to the class but not the methods.
    If we want access, we have to write it as a `public`. So what does a `public`
    access modifier do?
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
- en: public
  id: totrans-43
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: On making the method or variable `public`, we will have access to it across
    all the packages. That means basically everywhere. There is no restriction for
    this package of this class. The error observed in the preceding screenshot is
    also goes once we make the method/variable `public`.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
- en: 'The following screenshot displays the `int` value after we made it `public`:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/cd7b7481-22ae-445e-bfb6-22257a6f5ef9.png)'
  id: totrans-46
  prefs: []
  type: TYPE_IMG
- en: Quick fixes drop down with suggestions to correct the code error for public
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
- en: In the next class, we'll look at what `private` and `protected` access modifiers
    are. There are two more access modifiers after this one, let's see what they do.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
- en: private
  id: totrans-49
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'If we mark our method or variable as `private`, then we cannot access either
    of them outside the class. They cannot be accessed outside the package, or outside
    the same class. If we want to access this in our `ArraysDemo` example, we cannot
    do that. Even if we try to, it throws an error, as shown in the following screenshot:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/50710110-dc12-4e9a-8739-6c1ace39fac8.png)'
  id: totrans-51
  prefs: []
  type: TYPE_IMG
- en: Quick fixes drop down with a suggestion to correct the code error for private
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 快速修复下拉菜单显示了一个建议，可以纠正私有代码错误
- en: This is so because, if we mark any method or variable as `private`, we cannot
    access it outside that particular class. Until and unless we change it to something
    else, it throws an error. This applies to the variable as well.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 这是因为，如果我们将任何方法或变量标记为`private`，我们就无法在那个特定的类之外访问它。除非我们将它改为其他东西，否则会抛出错误。这也适用于变量。
- en: If you want a real-time scenario, let's say you are making a payment and buying
    a product; all the credit card details will go as `private` because they will
    not be accessed outside of that buy class. If they can be accessed, that's a security
    breach, right? So to make credit card details restricted to that particular class,
    the developers give the `private` variable to all the card details so other classes
    cannot use it. Even if they have used inheritance or are importing a package,
    they will not have access to those sensitive details. There are a lot of real-time
    scenarios; if you are working on test frameworks, there might be some variables
    which you should not change, and always keep it private.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想要一个实时场景，比如你正在进行支付和购买产品；所有的信用卡细节都会被标记为`private`，因为它们不会在购买类之外被访问。如果它们可以被访问，那就是一个安全漏洞，对吧？所以为了让信用卡细节受限于那个特定的类，开发人员给所有的卡细节都加上了`private`变量，这样其他类就不能使用它。即使它们使用了继承或者导入了一个包，它们也无法访问这些敏感细节。有很多实时场景；如果你正在测试框架上工作，可能会有一些变量你不应该改变，并且总是保持它私有。
- en: protected
  id: totrans-55
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: protected
- en: 'If we define a variable or method as `private`, we can access them in subclasses
    only. This means if we define it as `protected`; then, whichever class is inheriting
    the parent class, only those subclasses can have access to the method, and no
    other classes. This can be understood with the following code snippet:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们将一个变量或方法定义为`private`，我们只能在子类中访问它们。这意味着如果我们将它定义为`protected`；那么，无论哪个类继承了父类，只有这些子类才能访问该方法，其他类都不能。这可以通过以下代码片段来理解：
- en: '[PRE3]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The difference between `default` and `protected` is that in `default` we can
    access a class only within the same package of classes. Even `protected` can access
    all classes in the same package, except it has an additional feature. This additional
    feature says that, if we want to access it in other packages, only subclasses
    that inherit the properties of the parent class can access it.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: '`default`和`protected`之间的区别在于，在`default`中我们只能在同一个类包内访问一个类。即使`protected`可以访问同一个包内的所有类，除了它还有一个额外的特性。这个额外的特性是，如果我们想在其他包中访问它，只有继承父类属性的子类才能访问它。'
- en: The same concept is applied to variables.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 相同的概念也适用于变量。
- en: Summary
  id: totrans-60
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we learned concepts that help us understand the importance
    of packages, modifiers, and the `final` keyword in Java.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们学习了帮助我们理解Java中包、修饰符和`final`关键字的重要性的概念。
- en: I hope you have a better understanding of these concepts now that you've read
    all the chapters.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 希望你现在已经阅读了所有章节，对这些概念有了更好的理解。
