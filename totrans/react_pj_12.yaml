- en: Creating a Virtual Reality Application with React 360
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You're almost there—only one more chapter to go and then you can call yourself
    a React expert that has experienced React on every platform. Throughout this book,
    you've built 11 applications with React and React Native, and for the grande dessert, you
    get to use React 360\. The final part of the *learn once, write everywhere* strategy
    of React and React Native will be best demonstrated in this chapter. With React
    360, you can create dynamic 3D and **Virtual Reality** (**VR**) experiences using
    principles from React and, more specifically, React Native-like life cycles and
    UI components. Although VR is still an emerging technology, the best use cases
    for VR are, for example, retail stores that want their customers to experience
    their stores or games online.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, you'll explore the very basics of what's possible with React
    360 and how it relates to React and React Native. The application you will build
    will be able to render 360 degree panorama images and use state management to
    render between screens. Animated 3D objects will also be displayed inside the
    scenes you build with React 360.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following topics will be covered in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Getting started with React 360
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a panorama viewer with React 360
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Building clickable elements
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Project overview
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you will build a VR application with React 360 that uses principles
    from both React and React Native. Both 2D panorama images and 3D objects will
    be added to this application and the project can be run in the browser using the **Metro
    bundler**.
  prefs: []
  type: TYPE_NORMAL
- en: The build time is 1.5 hours.
  prefs: []
  type: TYPE_NORMAL
- en: Getting started
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The application for this chapter will be built from scratch and uses assets
    that can be found on GitHub at [https://github.com/PacktPublishing/React-Projects/tree/ch12-assets](https://github.com/PacktPublishing/React-Projects/tree/ch12-assets)[.](https://github.com/PacktPublishing/React-Projects/tree/ch1-assets) These
    assets should be downloaded to your computer so that you can use them later on
    in this chapter. The complete code for this chapter can be found on GitHub at [https://github.com/PacktPublishing/React-Projects/tree/ch12](https://github.com/PacktPublishing/React-Projects/tree/ch12).
  prefs: []
  type: TYPE_NORMAL
- en: React 360 requires the same versions of Node.js and `npm` as the React and React
    Native projects. If you haven't installed Node.js on your machine, please go to `https://nodejs.org/en/download/`,
    where you can find the download instructions for macOS, Windows, and Linux.
  prefs: []
  type: TYPE_NORMAL
- en: 'After installing Node.js, you can run the following commands in your command
    line to check the installed versions:'
  prefs: []
  type: TYPE_NORMAL
- en: 'For Node.js (should be v10.16.3 or higher), use the following command:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'For `npm` (should be v6.9.0 or higher), use the following command:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Creating a VR application with React 360
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: React 360 uses principles from React and is heavily based on React Native. React
    360 allows you to create applications using UI components without having to deal
    with complex setups for mobile or VR devices, which is similar to how React Native
    works.
  prefs: []
  type: TYPE_NORMAL
- en: Getting started with React 360
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: It doesn't matter whether you're creating a project with React, React Native,
    or React 360—there are tools to easily get you started with any of these technologies. You've
    used Create React App as the starting point for the React web applications in
    this book and the Expo CLI for the React Native projects. This React 360 project
    will be started using the React 360 CLI, which will help you create and manage
    your React 360 application.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up React 360
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The React 360 CLI can be installed from `npm` by running the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'This will globally install the React 360 CLI from the `npm` package registry.
    After the installation process has completed, you can use it to create your first
    React 360 project by executing the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: By executing this command, a new React 360 project will be created called `virtual-reality`.
    All the packages that are required to run a React 360 application will be installed,
    such as `react`, `react-native`, `react-360`, `react-360-web`, and `three`. The
    `three` package installs `three.js`, a lightweight and easy to use JavaScript
    3D library that comes with a default WebGL renderer. This renderer is used by
    React 360 to render 3D graphics, which it does by adding a layer that allows you
    to create declarative UI components.
  prefs: []
  type: TYPE_NORMAL
- en: 'Also, all the files that you will need to build the project are created in
    a directory with the same name. This directory has the following structure, where
    the following files are of importance:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: The `__tests__` directory is where you can create test files using the `react-test-renderer` package.
    The `node_modules` directory is where your packages are installed, while the `static_assets` directory
    holds the files that are used statically in development mode that may be transferred
    to a CND later on. To use React 360 in the browser (or mobile devices), you need
    to use Babel, which transpiles your code. The configuration for this can be found
    in the `.babelrc` file. The most important files that were created by `react-360-cli`
    are `client.js`, `index.html`, and `index.js` since these files are where you
    develop and serve your application. The `client.js` file contains the code that
    you use to execute the application, while `index.js` holds the actual code that
    is rendered by the application that is mounted to the DOM in `index.html`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Instead of webpack, another JavaScript bundler is used for React 360 called
    **Metro**. This was created by Facebook, just like React was. Metro is a bundler
    for React Native projects and since React 360 takes a lot of principles from React
    Native to run on VR devices as well, Metro is the preferred bundler for React
    360 applications. Just like webpack, all your source code is bundled into one
    big file in a readable format for web browsers. When you''re developing your application,
    the Metro bundler will run a local development server that allows you to view
    the application in the browser. Files are compiled or processed at request time
    and when your application is complete, it can be used to create a production-ready
    build. You can start the bundler to initiate the development server with the following
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: This starts the Metro bundler and compiles your source code, which will be mounted
    to the DOM in the `index.html` file and makes it available at `http://localhost:8081/index.html`.
  prefs: []
  type: TYPE_NORMAL
- en: 'When you first visit the project in your browser, the bundler may take a longer
    time to load as it will need to read your filesystem to get more information on
    how to render. If you make changes to the source code of the project, these changes
    will become visible faster to increase your development speed. The initial application
    that was created by the React 360 CLI is now visible at `http://localhost:8081/index.html`,
    which shows a 360 degree viewer that explores the dark landscape that can be found
    in the `static_assets/360_world.jpg` file. It looks as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/1185828d-8a05-4195-bdee-76cfa687a545.png)'
  prefs: []
  type: TYPE_IMG
- en: 'React 360 applications can display a 360 degree (or 3D) image or video as a
    background and render both 2D and 3D UI components on top of this background.
    In the `client.js` file, the image from the `static_assets` directory is used
    as a 360 degree 2D background image with the following line of code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: The `getAssetUrl` function points to the `static_assets` directory and can later
    be used to point to a CDN or other URL where your background image is hosted when
    your application is in production.
  prefs: []
  type: TYPE_NORMAL
- en: In case you have 3D glasses in your possession, you can replace the initial
    360 degree 2D image with a 3D 360 image to create a 3D effect. NASA's website
    is a good source for finding 360 degree 3D images from any of the Mars missions,
    for example. Images from this mission can be found at `https://mars.nasa.gov/3d/images`
    and the downloaded files can be placed in `static_assets`. This should be used
    in the `client.js` file instead of the `360_world.jpg` file.
  prefs: []
  type: TYPE_NORMAL
- en: Your application that was created by `react-360 init` also displays some UI
    components;  in the next section we'll explore how to use UI components in React
    360 in more detail.
  prefs: []
  type: TYPE_NORMAL
- en: React 360 UI components
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Previously, we mentioned that React 360 uses a lot of concepts from React Native.
    One of them is the use of UI components that can be rendered. Out of the box,
    four UI components are offered by React 360, that is, `View`, `Text`, `Entity`,
    and `VrButton`. First, the `View` and `Text` components are 2D and used in the
    `index.js` file to create the panel and greeting message that you can see in the
    application. The other two components are more complex and can be used to render
    3D objects in the case of the `Entity` component, or respond to user actions such
    as pressing `a` key down, in the case of the `VrButton` component.
  prefs: []
  type: TYPE_NORMAL
- en: 'From the `client.js` file, these components can be placed on cylinder surfaces
    from the `index.js` file since these are rendered by the `renderToSurface` from
    `client.js`. Here, the default surface that is declared refers to a 2D cylinder
    surface showing the UI components from `index.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: In the `index.js` file, we have the `View` and `Text` components, which are
    used to render the default surface with the welcome message you see when you start
    the application. The default export from `index.js` is called `virtual_reality`,
    which refers to the project name and is the same name that's used by the `createRoot`
    function in `client.js`.
  prefs: []
  type: TYPE_NORMAL
- en: 'The initial structure and naming of the application may get a bit confusing
    as the application grows. To combat this, you can split the components and make
    a distinction between the entry point of the application in `index.js` and the
    actual UI components. The following changes need to made for this:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Move the `index.js` file to a new directory called `Components` and call this
    file `Panel.js`. Here, you need to change the name of this class component from
    `virtual_reality` to `Panel`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Unfortunately, the current version of React 360 doesn't work well with React
    16.8+, so you need to use a class component to use life cycles.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'This newly created `Panel` component can be imported into the `index.js` file,
    where you need to delete all the code that''s already in there and replace it
    with the following code block:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'To see the changes you''ve made, you need to refresh the browser at `http://localhost:8081/index.html`,
    after which the Metro bundler will compile the code again. Since you made no visible
    changes, you''ll need to look at the output in the Terminal to see if it was successful.
    To see these changes directly in the browser, you can make some changes to the
    text displayed in the `Panel` component by changing the value within the `Text`
    component:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: When you refresh the browser after this change, the text *"Welcome to this world!"*
    will be displayed instead of the initial message.
  prefs: []
  type: TYPE_NORMAL
- en: 'These `View` and `Text` components are simple 2D elements that can be styled
    using `StyleSheet`, which you''ve also used in React Native. By using this method
    to style your React 360 components, the learning curve for React 360 becomes less
    steep and the *learn once, write anywhere* principle is applied. The styles for
    the `View` and `Text` components are placed at the bottom of the `scr/Panel.js`
    file. The styling rules that can be used for the `View` and `Text` components
    are limited since not every style rule applies to each of these components. You
    can make some small changes to this styling, such as the ones we''ve made in the
    following code block:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'The following screenshot shows what your application will look like after these
    changes, where the box inside the panel that''s showing the welcome message has
    changed a little:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/2c7d5c9e-0f21-4ddd-99a3-411e30a59e6c.png)'
  prefs: []
  type: TYPE_IMG
- en: Also, the first view that's using the `panel` styling is created in `client.js`
    and is the default surface with a cylinder shape and a default width of `1000px`
    and a height of `600px`. It's also possible to change the shape and size of this
    surface, which we'll do in the upcoming sections.
  prefs: []
  type: TYPE_NORMAL
- en: In this section, you learned about the basics of how to get started with React
    360\. Now, we will learn how to interact with React 360.
  prefs: []
  type: TYPE_NORMAL
- en: Interactions in React 360
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous section, you set up the basics of React 360 and made some changes
    to the initial surface that was displaying the welcome message. With React 360,
    it's possible to create other surfaces that even have some interaction with the
    user. These surfaces can have different shapes and sizes, such as a flat or a
    circular shape, which makes it possible to add actionable buttons on these surfaces.
  prefs: []
  type: TYPE_NORMAL
- en: Using local state and VrButton
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this section, you''ll add some buttons to the surface so that your users
    can close the welcome message or switch the background image scenery. First, let''s
    start by creating a button that lets us close the welcome message surface:'
  prefs: []
  type: TYPE_NORMAL
- en: 'The `Panel` component is a class component that gives you access to life cycles
    and local state management. Since you want to be able to close the welcome message,
    a local state can be used. At the top of the declaration of the `Panel` component,
    you must add a `constructor` that will have the initial state:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: If you're not very familiar with using class components for life cycles, you
    can look back at the few first chapters of this book. In these chapters, class
    components are used for life cycles instead of Hooks, which you've primarily used
    in the last few chapters.
  prefs: []
  type: TYPE_NORMAL
- en: 'The initial state has now been set, and you can use it to modify the styles
    of the panel by using an array of `styles` instead of just a single object. Apart
    from passing a `style` object in this array, you can also directly insert a styling
    rule by using a conditional spread. If the open state isn''t true, a `display:
    ''none''` styling rule will be added to the styling for the panel. Otherwise,
    an empty array will be spread into the `style` array:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'After adding this `state` variable to the style prop of the panel, you can
    create the button that will change the value of the open state. You may recall
    that React 360 has four default UI components and that one of them is called `VrButton`.
    This component is similar to `TouchableOpacity` in React Native and has no styling
    whatsoever by default. `VrButton` can be imported from `react-360` and can be
    placed inside a `Text` (or `View`) component. Clicking on this `VrButton` will
    change the open state since it uses the `setState` method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'We can also add some styling to `VrButton` and `Text`. The styling for these
    components can be placed in the same `StyleSheet` that the styling for the other
    components in this file were placed:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: Now, when you refresh the application in your browser, the panel will have a
    button that says `Close X` at the top right. When you click this button, the panel
    will close and you can freely explore the entire background surface. Besides closing
    the panel, you can also change the scenery of the entire application, which will
    be added in the final part of this section.
  prefs: []
  type: TYPE_NORMAL
- en: Dynamically changing scenes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The application is using a default background that is displayed for the surface,
    but it's also possible to dynamically change this background image. The initial
    application comes with a default 360 degree background image. To change this,
    you'd need to either make your own 360 degree panorama images or download some
    from the internet. Creating your own 360 degree images is possible with special
    cameras or by downloading an application on your mobile device. Online images
    can be found on numerous stock photo websites. In this book's GitHub repository,
    in the `ch12-assets` branch, you can find a selection of 360 degree panorama images.
  prefs: []
  type: TYPE_NORMAL
- en: 'At the moment, your application only has the one default surface, which is
    a circular one that is displaying the welcome panel from the `Panel` component.
    It''s also possible to add flat components so that the user can change the scenery
    using buttons. This requires you to make the following changes:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a component that's displaying the specified buttons
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Import and register the component from `index.js`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Set the new surface in `client.js`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Before making these changes, you must download the images from the GitHub repository
    and place them in the `static_assets` directory so that they can be used from
    within your application. Now, make the following changes to change the scenery:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a new component called `Navigation` in the `Components` directory and
    place the following code block inside it. This will return a component with basic
    styling for the surface, which is where the buttons will be placed later on:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'In the `index.js` file, you must import the `Navigation` component and register
    it with the `AppRegistry` method. This will ensure that the component can be rendered
    to a surface:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'In the `client.js` file, this `Navigation` component must be added to a surface;
    in this case, this is a flat surface. A new surface can be created using the `Surface`
    method from `react-360` and you must specify the shape and the size of the component.
    You can also set an angle to position the component:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'By refreshing the project in your browser, you will see a blue block being
    rendered at the bottom of the screen. To add buttons to this block, you can use
    the `VrButton` component and place the currently selected background in the local
    state. Let''s do this now:'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the `Components/Navigation.js` file, you can add the necessary buttons to
    the `Navigation` component. To do this, you need to import the `VrButton` and
    `Text` components from `react-360` and place them in the `View` component that''s
    being rendered. They''ll get styling props since you want the buttons to have
    a margin on either the left- or right-hand side:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'These styling objects can be added to the `StyleSheet` method at the bottom
    of this file, right below the styling for `navigation`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'The different 360 degree panorama background images that you''ve downloaded
    from the GitHub repository and placed in `static_assets` can be imported into
    this file later on using the `assets` method from `react-360`. To do this, you
    need to create a constant that''s an array of all the filenames of these images,
    including the initial image that was added by `react-360-cli`. Also, the `assets`
    and `Environment` methods must be imported here as you''ll need these to change
    the background image:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'Just like we did for the `Panel` component, we need to create an initial state
    that defines which background is being displayed. This will be the first background
    of the backgrounds array, meaning `0`. Also, a function must be created that can
    change `currentBackground` using the `setState` method. When the state for `currentBackground`
    has been changed, the background image will be updated using the `Environment`
    method, which selects one of the backgrounds from the `static_assets` directory
    using the `assets` method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'The newly created `changeBackground` function can be called when the `Navigation`
    component mounts and uses the first background image, but when the user clicks
    the button, the `changeBackground` function must be called as well. This can be
    done by adding a `componentDidMount` life cycle and calling the function with
    the `onClick` event on the buttons:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'When you refresh the project in your browser, you may notice that you get an
    error when you press the left button once or the right button multiple times.
    To prevent this error from happening, you need to scope the maximum and minimum
    values of the `currentBackground` state. The value can''t go below zero or above
    the length of the `backgrounds` array. You can do this by making the following
    change to the `changeBackground` function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'The value of the `currentBackground` state will always be a value that can
    be found within the length of the `backgrounds` array, which makes it possible
    for you to navigate back and forth between the different background images. After
    clicking on the Prev or Next button a couple of times, your application will look
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/f541f271-ea7c-4c62-a814-113eee0f2dc1.png)'
  prefs: []
  type: TYPE_IMG
- en: Another thing you can do with React 360 is add animated components, just like
    we did when we looked at React Native. You will learn how to add these animations
    in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Animations and 3D
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: So far, all the components you've added in this chapter were 2D and didn't have
    animations; however, you can also animate components with React 360 and even add
    3D objects. These 3D objects must be pre-built in special 3D modeling software
    or downloaded from the internet and can be added to a surface in your application.
    For animations, the Animated API must be imported, which is similar to the Animated
    API we used for React Native.
  prefs: []
  type: TYPE_NORMAL
- en: Animations
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Before getting into using 3D objects in React 360, let's learn how to use the
    Animated API from React 360 to create animations. The Animated API uses the Animated
    API from React Native and can be used to create both simple and advanced animations
    for UI components. With the Animated API, you can easily create animations that
    fade in and out or rotate, just by using values that are affected by the local
    state.
  prefs: []
  type: TYPE_NORMAL
- en: 'One of the components that can be animated is the `Panel` component, which
    displays a welcome message, since this component has an element that the user
    can click on to close the surface. When the user clicks the Close X button, the
    display styling rule of the component will be set to `none`, making the component
    disappear suddenly. Instead of this, you can change this into a smooth animation
    by doing the following:'
  prefs: []
  type: TYPE_NORMAL
- en: 'The `panel` component is created in the `Components/Panel.js` file and is where
    the `Animated` API must be imported, which you can do from `react-360`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'In `constructor()`, an initial value for the `Animated` value should be set.
    Call it `opacity` in this case since you want the `opacity` of the `Panel` component
    to change to zero to make it disappear. Initially, the `opacity` should be 1 since
    the welcome message must be displayed when the user opens the application:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'When the user clicks `VrButton` in the `Panel` component, the state for `open`
    will be changed, after which the animation should start. Therefore, a `componentDidUpdate()`
    life cycle method must be created, where you can check for changes in the `state`
    for `open` and start the animation afterward. When the value for `open` changes
    from `true` to `false`, the animation should start to change the value for `opacity`
    from `1` to `0`, which makes it disappear:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, this value should be passed to the `style` prop of an `Animated` component,
    meaning you need to change the `View` component into an `Animated.View` component
    that can handle the animation. The `display` styling rule can be deleted from
    the `style` props and replaced with `opacity` since this controls whether the
    component is visible to the user or not:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, when you click on the `VrButton` that closes the `Panel` component with
    the welcome message, the component will slowly dissolve into the background and
    disappear. The same sort of animation can be added to the `Navigation` component
    since you want to ensure that our users know that they can navigate through the
    different backgrounds. You can highlight the option to click on, for example,
    the Next button by having it repeatedly fade in and out. A lot of the logic for
    this is the same as it is for the `Panel` component:'
  prefs: []
  type: TYPE_NORMAL
- en: 'The Animated API should be imported at the top of the `Components/Navigation.js` file
    and an initial value for the `opacity` state must be created:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'The animation should start as soon as the component mounts, so the `Animated.timing`
    method, which is used to change the value of `opacity`, must be placed in a `componentDidMount()`
    life cycle method. This will start the animation of `opacity` from `0` to `1`,
    making the text inside the button blink:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'The `Text` component inside `VrButton` for the button so that the user can
    navigate to the next background image can now be changed into an `Animated.Text`
    component and the `opacity` styling rule must be added to the `style` prop. This
    will add the animation to this component, making the text blink once when the
    application is mounted:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'You don''t want the button text to blink just once. To make it blink repeatedly,
    you can use the `loop` and `sequence` methods from `Animated` to get multiple
    iterations of this animation. To make it smoother, we can add a small delay to
    the animation. This will iterate 10 times, after which the button will stop blinking:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: Now, the Next button will blink 10 times when the application mounts, thereby
    emphasizing to the user that it's possible to navigate between background scenes.
    However, these animations aren't the only animated features you can add. In the
    next section, you'll learn how to add animated 3D objects.
  prefs: []
  type: TYPE_NORMAL
- en: Rendering 3D objects
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To use 3D objects in React 360, you need you to have prebuilt 3D objects, which
    you can create with special 3D modeling software or download from the internet.
    In this section, we'll use a 3D object from the GitHub repository for this chapter,
    where you can find a `.obj` file that's supported by React 360\. Apart from OBJ,
    GLTF models are also supported as 3D objects by React 360.
  prefs: []
  type: TYPE_NORMAL
- en: OBJ files is a standard format for 3D model files that can be exported and imported
    by numerous 3D tools. Please keep in mind that React 360 doesn't support lighting
    and that you will need to include more advanced packages to render complex textures
    in a 3D model. Due to this, the 3D model that will be used in this example is
    just in one color, which is white.
  prefs: []
  type: TYPE_NORMAL
- en: Adding 3D objects to React 360 can be easily done with the `Entity` object while
    using a 3D model that is stored in the `static_assets` directory. By using `Entity`,
    the 3D model can be transformed into a component that you need to register in
    `index.js`, so that it can be used in `client.js` and added to the application.
  prefs: []
  type: TYPE_NORMAL
- en: 'To add 3D objects, make the following changes:'
  prefs: []
  type: TYPE_NORMAL
- en: 'First, make sure you''ve copied the `helicopter.obj` file from this chapter''s
    GitHub repository into the `static_assets` directory and create a new file called
    `Helicoper.js` in the `Components` directory. In this file, the 3D model can be
    imported using the `asset` method and added as the source for an `Entity` object.
    To do this, use the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: The scaling for the `Entity` object in the `style` prop will decrease the size
    of the 3D model; otherwise, it would be way too big to display properly. Also,
    the value for `rotateY` will rotate the helicopter 90 degrees on the *y* axis.
  prefs: []
  type: TYPE_NORMAL
- en: 'This `Helicopter` component should be displayed in your application, but this
    can only be done if you register it to `AppRegistry` in the `index.js` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: 'This component can be mounted to the application in the `client.js` file using
    the `renderToLocation` method. Previously, you used the `renderToSurface` method
    to mount the `Panel` and `Navigation` components, but, for 3D objects, this won''t
    work. Apart to the component itself, the `renderToLocation` method also takes
    the location of where the object will be placed:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, when you open the application, a white helicopter will be visible when
    you turn 90 degrees to the left. In the preceding code, `Location` is used to
    create a location in the application where the 3D model is mounted. This is done
    with `new Location([-100, 10, -2])`. This will place the object 100 meters to
    the left, 10 meters up, and 2 meters in front of the initial location of the user
    when the application is started. This can be seen in the following screenshot,
    which was taken in one of the different scenes for this application:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/7d6f812d-5c1b-4102-a789-4448ea7f24c2.png)'
  prefs: []
  type: TYPE_IMG
- en: 'However, React 360 doesn''t stop at importing and rendering 3D objects: you
    can also animate them, just like any other component. For this, the Animated API
    can be used again. You can use this with the local state to add any animation
    to the 3D helicopter. The `style` prop for `Entity` already has some styling that
    determines the scale, which is something you can make dynamically by using an
    `Animated` value. By decreasing the scale of the helicopter a bit more, it will
    look as if it''s flying and will disappear into the distance. More effects can
    be added by changing the `rotateY` value to make it look like the helicopter is
    turning.'
  prefs: []
  type: TYPE_NORMAL
- en: 'To create an animated 3D object, make the following changes to `Components/Helicopter.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Import `Animated` from `react-360` and create an `Animated` version of `Entity`.
    Since this isn''t a predefined `Animated` component, we can''t do this by typing
    `Animated.Entity`. Instead, we need to create a customer `Animated` component
    using the `createAnimatedComponent` method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: 'A `constructor` must be added to the `Helicopter` component, where the initial
    `Animated` values for both the `scale` and `rotateY` are set as local state values.
    The initial value for `scale` is `0.02`, which is the same as the current scale
    of the helicopter, while `rotateY` will get the same value that it currently has:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: 'We can create the animation in the `componentDidMount()` life cycle method
    as a sequence since we want the helicopter to turn and fly away. The first part
    of the animation is a small delay, so the animation won''t start as soon as the
    application mounts. After 1 second (1,000 ms), the helicopter will start turning
    for about 8 seconds and fly away after another small delay:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: 'The `Entity` component must be replaced with the `AnimatedEntity` component,
    which handles values from the `Animated` API. These values can be taken from the
    local state so that they can be added to the `style` prop of the `AnimatedEntity`
    component:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: Now, the helicopter will start turning from `90` to `0` degrees and, over a
    period of time, it will fly away into the distance and disappear.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this final chapter, you've combined all of the knowledge you have gathered
    from this book to get started with React 360\. Although React 360 uses practices
    from both React and React Native, it serves a different and more niche use case
    than the other React technologies. At the time of writing, well-known principles
    such as lifecycle methods for the local state and the Animated API have been used
    to create a VR application that allows users to explore 2D panorama images. It
    has basic animations, as well as a 3D helicopter object that flies away into the
    distance.
  prefs: []
  type: TYPE_NORMAL
- en: With this final chapter, you've completed all 12 chapters of this book and have
    created 12 projects with React, React Native, and React 360\. Now, you have a
    solid understanding of everything that you can do with React and how to use it
    across different platforms. While React and React Native are already mature libraries,
    new features are added continuously. Even as you finish reading this book, there
    will probably be new features you can check out, starting with **Concurrent Mode**.
    My only advice would be to never stop learning and keep a close view on the documentation
    whenever a new feature is announced.
  prefs: []
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: React 360 Native Modules examples:[ https://facebook.github.io/react-360/docs/example-native-modules.html](https://facebook.github.io/react-360/docs/example-native-modules.html)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: NASA 3D images:[ https://mars.nasa.gov/3d/images](https://mars.nasa.gov/3d/images)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
