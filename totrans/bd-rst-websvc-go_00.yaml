- en: Preface
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Initially, SOAP-based web services became more popular with XML. Then, since
    2012,  REST picked up the pace and gulped SOAP in whole. The rise of a new generation
    of web languages, such as Python, JavaScript (Node.js), and Go, showed a different
    approach to web development compared to the traditional ones, such as ASP.NET
    and Spring. Since this decade, Go has become more and more popular due to its
    speed and intuitiveness. Less verbose code, strict type checking, and support
    for concurrency make Go a better choice for writing any web backend. Some of the
    best tools, such as Docker and Kubernetes, are written in Go. Google uses Go a
    lot in its daily activities. You can see a list of Go-using companies at [https://github.com/golang/go/wiki/GoUsers](https://github.com/golang/go/wiki/GoUsers).
  prefs: []
  type: TYPE_NORMAL
- en: For any internet company, the web development department is crucial. Data that
    the company accumulates needs to be served to the clients in form of an API or
    web service. Various clients (browser, mobile application, and server) consume
    API every day. REST is an architectural pattern that defines resource consumption
    in the form of methods.
  prefs: []
  type: TYPE_NORMAL
- en: Go is a better language to write web servers. It is the responsibility of an
    intermediate Go developer to know how to create RESTful services using the constructs
    available in the language. Once the basics are understood, the developer should
    learn other things, such as testing, optimizing, and deploying services. This
    book is an attempt to make the reader comfortable with developing web services.
  prefs: []
  type: TYPE_NORMAL
- en: Experts think that in the near future, as Python is moving into the Data Science
    space and competing with R, Go can emerge as the single go-to language in the
    web development space by competing with NodeJS. This book is not a cookbook. However,
    it offers many tips and tricks throughout your journey. By the end of the book,
    the reader will be comfortable with REST API development through a multitude of
    examples. They will also come to know about the latest practices, such as protocol
    buffers/gRPC/API Gateway, which will move their knowledge to the next level.
  prefs: []
  type: TYPE_NORMAL
- en: What this book covers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Chapter 1, *Getting Started with REST API Development*, discusses the fundamentals
    of REST architecture and verbs.
  prefs: []
  type: TYPE_NORMAL
- en: Chapter 2, *Handling Routing for Our REST Services*, describes how to add routing
    to our API.
  prefs: []
  type: TYPE_NORMAL
- en: Chapter 3, *Working with Middleware and RPC*, is about working with middleware
    handlers and basic RPC.
  prefs: []
  type: TYPE_NORMAL
- en: Chapter 4, *Simplifying RESTful Services with Popular Go Frameworks*, presents
    quick prototyping API with frameworks.
  prefs: []
  type: TYPE_NORMAL
- en: Chapter 5, *Working with MongoDB and Go to Create REST API*, explains how to
    use MongoDB as the database for our API.
  prefs: []
  type: TYPE_NORMAL
- en: Chapter 6, *Working with Protocol Buffers and gRPC*, shows how to use Protocol
    buffers and gRPC to obtain performance boost over HTTP/JSON.
  prefs: []
  type: TYPE_NORMAL
- en: Chapter 7, *Working with PostgreSQL, JSON, and Go*, explains the benefits of
    PostgreSQL and a JSON store for creating APIs.
  prefs: []
  type: TYPE_NORMAL
- en: Chapter 8, *Building a REST API Client in Go and Unit Testing*, presents techniques
    for building client software and API testing with unit tests in Go.
  prefs: []
  type: TYPE_NORMAL
- en: Chapter 9, *Scaling Our REST API Using Microservices*, is about breaking our
    API service into microservices using Go Kit.
  prefs: []
  type: TYPE_NORMAL
- en: Chapter 10, *Deploying Our REST Services*, shows how we can deploy services
    built on Nginx and monitor them using supervisord.
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 11](68de1e8f-8be3-4e7b-91ab-81ca7f4868ed.xhtml), *Using an API Gateway
    to Monitor and Metricize REST API*, explains how to make our services production
    grade by adding multiple APIs behind API Gateway.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 12](13f9aa66-f528-41d7-84ee-4a97de3df040.xhtml), *Handling Authentication
    for Our REST Services,* discusses securing our API with basic authentication and
    JSON Web Tokens (JWT).'
  prefs: []
  type: TYPE_NORMAL
- en: What you need for this book
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: For this book, you need a laptop/PC with Linux (Ubuntu 16.04), macOS X, or Windows
    installed. We will use Go 1.8+ as the version of our compiler and install many
    third-party packages, so a working internet connection is required.
  prefs: []
  type: TYPE_NORMAL
- en: We will also use Docker in the final chapters to explain concepts of API Gateway.
    Docker V17.0+ is recommended. If Windows users have problems with the native Go
    installation for any examples, use Docker for Windows and run Ubuntu container,
    which gives more flexibility; refer to [https://www.docker.com/docker-windows](https://www.docker.com/docker-windows) for
    more details.
  prefs: []
  type: TYPE_NORMAL
- en: Before diving into the book, refresh your language basics at [https://tour.golang.org/welcome/1](https://tour.golang.org/welcome/1).
  prefs: []
  type: TYPE_NORMAL
- en: Even though these are the basic requirements, we will guide you through the
    installations wherever required.
  prefs: []
  type: TYPE_NORMAL
- en: Who this book is for
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This book is for all the Go developers who are comfortable with the language
    and seeking to learn REST API development. Even senior engineers can enjoy this
    book, as it has many cutting-edge concepts, such as microservices, protocol buffers,
    and gRPC.
  prefs: []
  type: TYPE_NORMAL
- en: Developers who are already familiar with REST concepts and stepping into the
    Go world from other platforms, such as Python and Ruby, can also benefit a lot.
  prefs: []
  type: TYPE_NORMAL
- en: Conventions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this book, you will find a number of text styles that distinguish between
    different kinds of information. Here are some examples of these styles and an
    explanation of their meaning.
  prefs: []
  type: TYPE_NORMAL
- en: 'Code words in text, database table names, folder names, filenames, file extensions,
    pathnames, dummy URLs, user input, and Twitter handles are shown as follows: "Name
    the preceding program as `basicHandler.go`."'
  prefs: []
  type: TYPE_NORMAL
- en: 'A block of code is set as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Any command-line input or output is written as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '**New terms** and **important words** are shown in bold. Words that you see
    on the screen, for example, in menus or dialog boxes, appear in the text like
    this: "It returns message saying Logged In successfully."'
  prefs: []
  type: TYPE_NORMAL
- en: Warnings or important notes appear in a box like this.
  prefs: []
  type: TYPE_NORMAL
- en: Tips and tricks appear like this.
  prefs: []
  type: TYPE_NORMAL
