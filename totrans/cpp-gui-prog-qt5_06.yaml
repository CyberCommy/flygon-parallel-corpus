- en: Integrating Web Content
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous chapter, we learned how to use item views and dialogs in Qt.
    In this chapter, we will learn how to integrate web content into our Qt application.
  prefs: []
  type: TYPE_NORMAL
- en: Starting from the dotcom era in the late 90s and early 2000s, our world has
    become more and more connected by the internet. Naturally, the applications running
    on our computers are also evolving in that direction. Nowadays, most—if not all—of
    our software is in some way connected to the internet, usually to retrieve useful
    information and display it to their users. The easiest way to do this is to embed
    a web browser display (also known as a web view) into the application's user interface.
    That way, the users can not only view the information, but do so in an aesthetic
    way.
  prefs: []
  type: TYPE_NORMAL
- en: By using the web view, developers can take advantage of its rendering capability
    and decorate their contents using the powerful combination of **HTML** (**Hypertext
    Markup Language**) and **CSS** (**Cascading Style Sheets**). In this chapter,
    we will explore Qt's web engine module and create our very own web browser.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Creating your own web browser
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Sessions, cookies, and cache
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Integrating JavaScript and C++
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Without further ado, let's check out how to create our own web browser in Qt!
  prefs: []
  type: TYPE_NORMAL
- en: Creating your own web browser
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Once upon a time, Qt used a different module called **WebKit** to render web
    contents on its user interface. However, the WebKit module has been completely
    deprecated since version 5.5 and replaced by a new module called **WebEngine**.
  prefs: []
  type: TYPE_NORMAL
- en: 'The new WebEngine module is based on the **Chromium** framework built by Google,
    and it will only work on the **Visual C++** compiler on the Windows platform.
    Therefore, if you''re running Windows, please make sure that you have installed
    **Microsoft Visual Studio** on your computer as well as all the **MSVC** components
    for Qt that match the version of Visual Studio installed on your computer. Other
    than that, the Qt WebEngine component is also required for this particular chapter.
    If you have skipped the components during Qt''s installation, all you need to
    do is to run the same installer again and install it there:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/02f1ed42-5efc-43a4-b0d7-40c1610c382e.png)'
  prefs: []
  type: TYPE_IMG
- en: Adding the web view widget
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Once you are ready, let''s get started! First, open up Qt Creator and create
    a new Qt Widgets Application project. After that, open up the project (`.pro`)
    file and add in the following text to enable the modules:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: If you didn't install the MSVC component (on Windows) or the Qt WebEngine component,
    error messages will appear at this point if you are trying to build the project.
    Please run the Qt installer again if that's the case.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, open up `mainwindow.h` and add the following header files:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'After that, open up `mainwindow.h` and add the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, add the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Build and run the program now and you should see the following result:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/d9118fa0-3227-49b7-a2bb-714e581d8784.png)'
  prefs: []
  type: TYPE_IMG
- en: It's actually that simple. You have now successfully placed a web view on your
    application!
  prefs: []
  type: TYPE_NORMAL
- en: 'The reason why we''re writing C++ code to create the web view is that the default
    Qt Designer used by the Qt Creator doesn''t have web view in the widget box. The
    preceding code simply creates the `QWebEngineView` object, sets its parent object
    (in this case, the central widget), and sets the URL of the web page before showing
    the web view widget. If you want to use Qt Designer to place a web engine view
    on your UI, you must run the standalone Qt Designer located in your Qt installation
    directory. For example, if you''re running Windows, it''s located in `C:QtQt5.10.25.10.2msvc2017_64bin`.
    Please note that it''s located in the directory with the compiler name that supports
    the web engine:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/0ff18712-2f53-4ce9-a66c-939f467147e6.png)'
  prefs: []
  type: TYPE_IMG
- en: Creating a UI for a web browser
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Next, we are going to turn this into a proper web browser. First, we need to
    add a few layout widgets so that we can put other widgets in place afterwards.
    Drag a Vertical Layout (1) onto the centralWidget and select the centralWidget
    from the object list. Then, click the Lay Out Vertically button (2) located at
    the top:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/bf92deaf-aeb4-44b2-9ae7-84a690721694.png)'
  prefs: []
  type: TYPE_IMG
- en: 'After that, select the newly added vertical layout, right-click and select
    Morph into | QFrame. The reason why we''re doing this is that we want to place
    the web view widget under this QFrame object instead of the central widget. We
    must convert the layout widget to a QFrame (or any QWidget-inherited) object so
    that it can *adopt* the web view as its child. Finally, rename the QFrame object
    to `webviewFrame`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/4c9ede35-a9f9-4f09-9158-12a6773bb646.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Once you''re done with that, let''s drag and drop a Horizontal Layout widget
    above the QFrame object. Now we can see that the size of both the Horizontal Layout
    widget and the QFrame object are the same, and we don''t want that. Next, select
    the QFrame object and set its Vertical Policy to Expanding:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/41a44341-e29f-4869-be90-c8c26479e052.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Then, you will see the top layout widget is now very thin. Let''s temporarily
    set its height to `20`, like so:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/804fd92d-c9dd-4e0c-8085-4f938384d1a4.png)'
  prefs: []
  type: TYPE_IMG
- en: 'After that, drag and drop three push buttons to the horizontal layout and we
    can now set its top margin back to `0`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/073c8c36-2d6a-4ab1-9c34-a62fdefd8695.png)'
  prefs: []
  type: TYPE_IMG
- en: Set the buttons' labels to `Back`, `Forward`, and `Refresh` respectively. You
    may also use icons instead of text to display on these buttons. If you wish to
    do that, simply set the text property to empty and select an icon from the icon
    property. For the sake of simplicity, we'll just display texts on the buttons
    for this tutorial.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, place a line edit widget on the right-hand side of the three buttons,
    followed by adding another push button with a `Go`label:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/7c621b7f-d77a-4bab-8c9f-a4f45f2ca11c.png)'
  prefs: []
  type: TYPE_IMG
- en: After that, right-click on each of the buttons and select Go to slot. A window
    will pop up, select clicked() and press OK.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/ba8acc39-41ae-4c97-9b68-464ec3008baa.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The signal functions for these buttons will look something like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Basically, the `QWebEngineView`class already provided us with functions such
    as `back()`, `forward()` and `reload()`, so we just have to call these functions
    when the respective button is pressed. The `loadPage()` function, however, is
    a custom function that we will write:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Remember to add the declaration for `loadPage()` in `mainwindow.h` as well.
  prefs: []
  type: TYPE_NORMAL
- en: 'Instead of just calling the `load()` function, I think we should do something
    more. Normally, users will not include the `http://` (or `https://)` scheme when
    typing the URL of the web page, but it is required when we are passing the URL
    to the web view. To solve this problem, we automatically check for the existence
    of the scheme. If none has been found, we will manually add the `http://` scheme
    to the URL. Also, don''t forget to call it at the beginning to replace the `load()`
    function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, right-click on the text input and select Go to slot. Then, select returnPressed()
    and click the OK button:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/a722c4f2-e653-4d97-bb37-5547c61835d4.png)'
  prefs: []
  type: TYPE_IMG
- en: 'This slot function will be called when the user presses the *Return* key on
    the keyboard once they have finished typing the web page URL. Logically, the user
    would expect the page to start loading not have to press the Go button every time
    they are done typing the URL. The code is really simple, we''ll just call the
    `loadPage()` function we just created in the previous step:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Now that we have done a significant amount of code, let''s build and run our
    project and see how it turns out:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/e0729566-832f-4121-9b6c-d68ddf187c50.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The result shown doesn''t really look that great. For some reason, the new
    web view doesn''t seem to scale properly even on an expanding size policy, at
    least on Qt version 5.10, which is being used when writing this book. It might
    be fixed in the future version, but let''s find a way to solve this issue. What
    I did was to override an inherited function in the main window called `paintEvent()`.
    In `mainwindow.h`, simply add the function declaration, like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, write its definition in `mainwindow.cpp` like so:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: This `paintEvent()` function will be automatically called by Qt whenever the
    main window needs to re-render its widgets (such as when the window is being resized).
    Since this function will be called when the application is being initialized and
    also when the window is being resized, we will use this function to manually resize
    the web view to fit with its parent widget.
  prefs: []
  type: TYPE_NORMAL
- en: 'Build and run the program again and you should be able to get the web view
    to fit nicely, regardless of how you resize the main window. Additionally, I also
    removed the menu bar, toolbar, and status bar to make the whole interface look
    more tidy, since we''re not using any of those in this application:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/244f4c48-0ee6-4dab-9873-101bfac0d247.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Next, we need a progress bar to show users the current progression of the page
    load. To do that, first we need to place a progress bar widget below the web view:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/d092b79b-87d6-4b15-b1a9-f91c1cfb5e94.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Then, add these two slot functions to `mainwindow.h`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Their function definition in `mainwindow.cpp` looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: The first function, `webviewLoading()` simply takes the progression level (in
    the form of a percentage value) from the web view and directly supplies it to
    the progress bar widget.
  prefs: []
  type: TYPE_NORMAL
- en: 'The second function `webviewLoaded()` will replace the URL text on the address
    input with the actual URL of the web page loaded by the web view. Without this
    function, the address input will not display the correct URL after you''ve pressed
    the back button or the forward button. Once you''re done, let''s compile and run
    the project again. The result looks amazing:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/39428977-f800-4408-bbd9-451b45561382.png)'
  prefs: []
  type: TYPE_IMG
- en: You will ask me, what's the actual use of this if I'm not making a web browser
    using Qt? There are many other uses for embedding a web view into your application,
    for instance, showing the latest news and updates of your product to the users
    through a nicely decorated HTML page, which is a common method used by most of
    the online games in the gaming market. The stream client, for example, also uses
    a web view to display the latest games and discounts to their players.
  prefs: []
  type: TYPE_NORMAL
- en: These are often called hybrid applications, which combine web content with native
    x, so you can leverage both dynamic contents from the web as well as code running
    natively that has the benefits of high performance and a consistent look and feel.
  prefs: []
  type: TYPE_NORMAL
- en: Other than that, you can also use it to display the printable report in HTML
    format. You can easily send the report to the printer, or save it as a PDF file
    by calling `webview->page()->print()` or `webview->page()->printToPdf()`.
  prefs: []
  type: TYPE_NORMAL
- en: 'To learn more about printing from the web view, check out the following link:
    [http://doc.Qt.io/Qt-5/qwebenginepage.html#print.](http://doc.Qt.io/Qt-5/qwebenginepage.html#print)'
  prefs: []
  type: TYPE_NORMAL
- en: You might also want to create the entire user interface of your program using
    HTML and embed all the HTML, CSS and image files into Qt's resource package and
    run it locally from the web view. The possibilities are endless, the only limit
    is your imagination!
  prefs: []
  type: TYPE_NORMAL
- en: 'To learn more about Qt WebEngine, check out the documentation here: [https://doc.Qt.io/Qt-5/qtwebengine-overview.html.](https://doc.Qt.io/Qt-5/qtwebengine-overview.html)'
  prefs: []
  type: TYPE_NORMAL
- en: Managing browser history
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Qt's web engine stores all the links which the user has visited into an array
    structure for later use. The web view widget uses this to move back and forth
    between history by calling `back()` and `forward()`.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you need to manually access this browsing history, add the following header
    to `mainwindow.h`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'After that, use the following code to obtain the browsing history in the form
    of a `QWebEngineHistory` object:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'You can get the entire list of visited links from `history->items()` or navigate
    between history using functions such as `back()` or `forward()`. To clear the
    browsing history, call `history->clear()`. Alternatively, you can also do this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'To learn more about the `QWebEngineHistory` class, visit the following link:
    [http://doc.Qt.io/Qt-5/qwebenginehistory.html.](http://doc.Qt.io/Qt-5/qwebenginehistory.html)'
  prefs: []
  type: TYPE_NORMAL
- en: Sessions, cookies, and cache
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Just like any other web browser, the `WebEngine` module also supports mechanisms
    used to store temporary data and persistent data for session and cache. Sessions
    and cache are very important as they allow websites to remember your last visit
    and associate you with data, such as a shopping cart. The definitions of a session,
    a cookie, and a cache are shown as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Session**: Normally, sessions are server-side files that contain user information
    with a unique identifier, which gets sent from the client side to map them to
    a specific user. In Qt, however, a session simply means a cookie that doesn''t
    have any expiration date, and hence it will be gone when the program is closed.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Cookie**: Cookies are client-side files that contain user information or
    any other information that you want to save. Unlike sessions, cookies have an
    expiration date which means they will remain valid and can be retrieved before
    reaching the expiration date, even if the program has been closed and re-opened
    again.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Cache**: Caching is a method used to speed up page loading by saving the
    page and its resources to a local disk during its first load. If the user loads
    the same page again on the next visit, the web browser will reuse the cached resources
    instead of waiting for the download to complete, which can significantly speed
    up the page loading time.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Managing sessions and cookies
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: By default, `WebEngine` doesn't save any cookie and treats all user information
    as temporary sessions, which means when you close the program, your login session
    on the web page will automatically become invalid.
  prefs: []
  type: TYPE_NORMAL
- en: 'To enable cookies on Qt''s `WebEngine `module, first add the following header
    to `mainwindow.h`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, simply call the following function to force persistent cookies:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'After calling the preceding function, your login session will continue to exist
    after closing the program. To revert it to non-persistent cookies, we simply call:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'Other than that, you can also change the directory in which your Qt program
    stores the cookies. To do that, add the following code to your source file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'If, for some reason, you want to manually delete all the cookies, use the following
    code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: Managing cache
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Next, let's talk about a cache. There are two types of cache which you can use
    in the web engine module, namely, Memory Cache and Disk Cache. Memory Cache uses
    the computer's memory to store the cache, which will be gone once you've closed
    the program. On the other hand, Disk Cache saves all the files in the hard disk,
    and hence they will still remain, even after you've turned off your computer.
  prefs: []
  type: TYPE_NORMAL
- en: 'By default, the web engine module saves all the cache to the disk, if you need
    to change them to Memory Cache, call the following function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'Alternatively, you can also disable caching completely by calling:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'As for changing the folder to which your program saves the cache files, call
    the `setCachePath()` function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'Lastly, to delete all the cache files, call `clearHttpCache()`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: There are many other functions that you can use to change the settings related
    to cookies and cache.
  prefs: []
  type: TYPE_NORMAL
- en: You can read more about it at the following link: [https://doc.Qt.io/Qt-5/qwebengineprofile.html](https://doc.Qt.io/Qt-5/qwebengineprofile.html)
  prefs: []
  type: TYPE_NORMAL
- en: Integrating JavaScript and C++
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: One powerful feature of using Qt's web engine module is that it can call JavaScript
    functions from C++, as well as calling C++ functions from JavaScript. This makes
    it more than just a web browser. You can use this to access features that are
    not supported by the web browser standard, such as file management and hardware
    integration. Things like that are not possible with W3C standards; hence, it is
    not possible to do it in native JavaScript. However, you can implement these features
    using C++ and Qt, then simply call the C++ functions from your JavaScript. Let's
    take a look at how we can achieve this with Qt.
  prefs: []
  type: TYPE_NORMAL
- en: Calling JavaScript functions from C++
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'After that, add in the following code to the HTML file we just created:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'These are the basic HTML tags which show you nothing other than a line of words
    that says `Hello World!`. You can try and load it using your web browser:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/84001c1c-aabc-4ff1-80bf-b05771ab51cf.png)'
  prefs: []
  type: TYPE_IMG
- en: 'After that, let''s go back to our Qt project and go to File | New File or Project
    and create a Qt Resource File:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/1d9d3c88-e775-4c5e-bd46-ab54e7a7ab81.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Then, open up the Qt resource file we just created and add in an `/html` prefix
    followed by adding the HTML file to the resource file, like so:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/8c17bb18-d44b-4989-a04d-0e8b7ea3b91e.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Right-click on text.html while the resource file is still opened, then select
    Copy Resource Path to Clipboard. Right after that, change the URL of your web
    view to:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'You can use the link you just copied from the resource file, but make sure
    you add the URL scheme `qrc://` at the front of the link. Build and run your project
    now and you should be able to see the result instantly:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/3908ba70-8603-4631-bfef-3994e2929583.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Next, we need to set up a function in JavaScript that will be called by C++
    in just a moment. We''ll just create a simple function that pops up a simple message
    box and changes the `Hello World!` text to something else when called:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: Note that I have added an ID to the `Hello World!` text so that we are able
    to find it and change its text. Once you're done, let's go to our Qt project again.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s proceed to add a push button to our program UI, and when the button
    is pressed, we want our Qt program to call the `hello()` function we just created
    in JavaScript. It''s actually very easy to do that in Qt; you simply call the
    `runJavaScript()` function from the `QWebEnginePage` class, like so:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'The result is pretty astounding, as you can see from the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/e860b594-575b-49c9-81dc-922f1dbb9067.png)'
  prefs: []
  type: TYPE_IMG
- en: You can do a lot more than just change the text or call a message box. For example,
    you can start or stop an animation in an HTML canvas, show or hide an HTML element,
    trigger an Ajax event to retrieve information from a PHP script, and so on and
    so forth... endless possibilities!
  prefs: []
  type: TYPE_NORMAL
- en: Calling C++ functions from JavaScript
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Next, let''s take a look at how we can call C++ functions from JavaScript instead.
    For the sake of demonstration, I''ll put a text label above the web view and we
    will change its text using a JavaScript function:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/a962a250-b7c4-4945-93ad-ddc7ae12a78b.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Normally, JavaScript can only work within the HTML environment and hence, is
    only able to alter HTML elements and not something outside the web view. However,
    Qt allows us to do just that by using the web channel module. So let''s open up
    our project (`.pro`) file and add the web channel module to the project:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'After that, open up `mainwindow.h` and add in the `QWebChannel` header:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'At the same time, we also declare a function called `doSomething()`, with a
    `Q_INVOKABLE` macro in front of it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: The `Q_INVOKABLE` macro tells Qt to expose the function to the JavaScript engine,
    and thus the function can then be called from JavaScript (and QML, since QML is
    also based on JavaScript).
  prefs: []
  type: TYPE_NORMAL
- en: Then in `mainwindow.cpp`, we'll have to first create a `QWebChannel` object
    and register our main window as a JavaScript object. You can register any Qt object
    as a JavaScript object as long as it is derived from the `QObject` class.
  prefs: []
  type: TYPE_NORMAL
- en: 'Since we''re going to call the `doSomething()` function from JavaScript, we
    must register the main window to the JavaScript engine. After that, we also need
    to set the `QWebChannel` object we just created as the web channel of our web
    view. The code looks like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'Once you''re done with that, let''s define the `doSomething()` function. We''re
    just going to do something simple—change the text label on our Qt GUI, and that''s
    all:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'We''re done with the C++ code, let''s open up our HTML file. There are couple
    of things we need to do to make this work. First, we need to include the `qwebchannel.js`
    script that is embedded in your Qt program by default, so you don''t have to search
    for that file in your Qt directory. Add the following code in between the `head`
    tags:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, we create a `QWebChannel` object in JavaScript when the document is successfully
    being loaded by web view and link the `mainwindow` variable to the actual main
    window object from Qt (which we registered earlier in C++). This step must only
    be done after the web page has been loaded (through `window.onload` callback);
    otherwise, there might be problems creating the web channel:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: 'After that, we create a JavaScript function that calls the `doSomething()`
    function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, add a button to the HTML body and make sure `myFunction()` is called
    when the button is pressed:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: 'Build and run the program now and you should be able to get the following result:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/eebf2409-5486-476d-b772-06ec44cbed98.png)'
  prefs: []
  type: TYPE_IMG
- en: 'You can do a lot of useful things using this method other than altering the
    properties of a Qt widget. For example, saving a file to the local hard disk,
    getting scanned data from a barcode scanner, and so on. There is no longer any
    barrier between native and web technology. However, do be extra aware of any possible
    security implications of this technique. As the old saying goes:'
  prefs: []
  type: TYPE_NORMAL
- en: '"With great power comes great responsibility."'
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we have learned how to create our own web browser and make
    it interact with the native code. Qt provides us with the web channel technology
    that makes Qt a very powerful platform for software development.
  prefs: []
  type: TYPE_NORMAL
- en: It takes advantage of both the power of Qt and the beauty of web technology,
    which means you can have a lot more options when it comes to development and not
    just be limited to Qt's methods. I'm really excited and can't wait to see what
    you can achieve with this!
  prefs: []
  type: TYPE_NORMAL
- en: Join us in the next chapter to learn how to create a map viewer similar to Google
    Maps, using Qt!
  prefs: []
  type: TYPE_NORMAL
