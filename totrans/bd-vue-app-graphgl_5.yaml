- en: Creating the User Vuex Module, Pages, and Routes
  prefs: 
  - PREF_H1
  type: TYPE_NORMAL
- en: Now, it's time to start giving the application a recognizable face. In this
    chapter, we will start developing the interaction between the user and the application.
  prefs: []
  type: TYPE_NORMAL
- en: We will use the knowledge we've gathered from the preceding chapters to bring
    this application to life by using custom business rules, Vuex data stores, special
    application layouts, and pages that your user will be able to interact with.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we will learn how to create the User Vuex module so that we
    can store and manage everything related to the user and the user registration,
    login, validation, and edit pages.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we''ll cover the following recipes:'
  prefs: []
  type: TYPE_NORMAL
- en: Creating the User Vuex module in your application
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating User pages and routes for your application
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let's get started!
  prefs: []
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we will be using **Node.js**, **AWS Amplify**,and **Quasar
    Framework**.
  prefs: []
  type: TYPE_NORMAL
- en: '**Attention, Windows users!** You need to install an `npm` package called `windows-build-tools`
    to be able to install the required packages. To do this, open PowerShell as administrator
    and execute the `> npm install -g windows-build-tools` command.'
  prefs: []
  type: TYPE_NORMAL
- en: 'To install **Quasar Framework****,** you need to open a Terminal (macOS or
    Linux) or Command Prompt/PowerShell (Windows) and execute the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'To install **AWS Amplify****,** you need to open a Terminal (macOS or Linux)
    or Command Prompt/PowerShell (Windows) and execute the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Creating the User Vuex module in your application
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now, it's time to start storing data in our application state manager or Vuex.
    In the application context, all the data that is stored is saved within namespaces.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we will learn how to create the user Vuex module. Using our
    knowledge from the previous chapter, we will then create actions to create a new
    user, update their data, validate the user, sign in the user on Amplify, and list
    all the users on the application.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The prerequisite for this recipe is Node.js 12+.
  prefs: []
  type: TYPE_NORMAL
- en: 'The Node.js global objects that are required for this recipe are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`@aws-amplify/cli`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`@quasar/cli`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: To start our User Vuex store module, we will continue with the project that
    we created in [Chapter 4](ee24c1a0-5838-4f12-8056-a86f07c8af40.xhtml), *Creating
    Custom Application Components and Layouts*.
  prefs: []
  type: TYPE_NORMAL
- en: This recipe will be completed using GraphQL queries and mutations, as well as
    their drivers, which were written in the *Creating your first GraphQL API* and *Creating
    the AWS Amplify driver for your application* recipes of [Chapter 3](6748f2ed-6fa0-4925-8a71-199269fae4ae.xhtml),
    *Setting Up Our Chat App - AWS Amplify Environment and GraphQL*.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We will split the creation of the User Vuex module into five parts: creating
    the **state**, **mutations**, **getters**, and **actions**, and then adding the
    module to Vuex.'
  prefs: []
  type: TYPE_NORMAL
- en: Creating the User Vuex state
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'To store data on a Vuex module, we need a state that will store it for us.
    Follow these steps to create the User state:'
  prefs: []
  type: TYPE_NORMAL
- en: In the `store` folder, create a new folder called `user`. Inside, create a new
    file called `state.js` and open it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a new function called `createState`, which returns a JavaScript object
    that provides the `id`, `username`, `email`, `name`, `avatar`, `password`, `loading`, `validated`,
    and `error` properties. The `id`, `username`, `email`, `name`, and `password` properties
    will be defined as an empty `string`, while the `loading` and `validated` properties
    will be defined as `false`. `error` will be defined as `undefined` and `avatar` is
    a JavaScript object with three properties – `key`, `bucket`, and `region`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, in order to export the state as a singleton and make it available
    as a JavaScript object, we need to `export default` the execution of the `createState` function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Creating the User Vuex mutations
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'To save any data on a state, Vuex needs a mutation. Follow these steps to create
    the User mutation that will manage the mutations for this module:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a new file called `types.js` inside the `store/user` folder and open
    it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the file, export a default JavaScript object that provides the `CREATE_USER`, `SET_USER_DATA`, `CLEAR_USER`, `USER_VALIDATED`, `LOADING`,
    and `ERROR` properties. The values are the same as the properties, but they are
    formatted as strings:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Create a new file called `mutations.js` inside the `store/user` folder and open
    it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Import the newly created `types.js` file and the `createState` JavaScript object from `state.js`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a new function called `setLoading`, with the state as the first argument.
    Inside, we will set `state.loading` to `true`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a new function called `setError`, with `state` as the first argument
    and `error` as the second with a default value of `new Error()`. Inside, we will
    set `state.error` to `error` and `state.loading` to `false`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a new function called `createUser`, with `state` as the first argument
    and a JavaScript object as the second. This JavaScript object will provide the `id`, `email`, `password`, `name`,
    and `username` properties. All of the properties will be empty strings. Inside the
    function, we will define the `state` properties as the ones we received in the
    argument of the function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a new function called `validateUser` with `state` as the first argument.
    Inside it, we will set the `state.validated` property to `true`, delete the `state.password` property,
    and set the `state.loading` property to `false`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a new function called `setUserData`, with `state` as the first argument
    and a JavaScript object as the second arguments. This object will provide the `id`, `email`, `password`, `name`,
    and `username` properties. All of them will be empty strings. `avatar` is a JavaScript
    object with three properties: `key`, `bucket`, and `region`. Inside the function,
    we will define the `state` properties as the ones we received in the argument
    of the function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a new function called `clearUser` with `state` as the first argument.
    Then, in the function of it, we will get a new clean `state` from the `createState` function
    and iterate over the current `state`, defining the values of the `state` properties
    back to the default values:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, export a default JavaScript object, with the keys as the imported
    mutation types and the value as the functions that correspond to each type:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set `MT.LOADING` to `setLoading`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Set `MT.ERROR` to `setError`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Set `MT.CREATE_USER` to `createUser`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Set `MT.USER_VALIDATED` to `validateUser`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Set `MT.SET_USER_DATA` to `setUserData`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Set `MT.CLEAR_USER` to `clearUser`:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Creating the User Vuex getters
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'To access the data stored on the state, we need to create some `getters`. Follow
    these steps to create `getters` for the user module:'
  prefs: []
  type: TYPE_NORMAL
- en: In a `getter` function, the first argument that that function will receive will
    always be the current `state` of the Vuex `store`.
  prefs: []
  type: TYPE_NORMAL
- en: Create a new file called `getters.js` inside the `store/user` folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a new function called `getUserId` that returns `state.id`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a new function called `getUserEmail` that returns `state.email`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a new function called `getUserUsername` that returns `state.username`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a new function called `getUserAvatar` that returns `state.avatar`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a new function called `getUser` that returns a JavaScript object that
    provides the `id`, `name`, `username`, `avatar`, and `email` properties. The values
    of these properties will correspond to `state`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a new function called `isLoading` that returns `state.loading`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a new function called `hasError` that returns `state.error`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, export a `default` JavaScript object with the created functions (`getUserId`, `getUserEmail`, `getUserUsername`, `getUserAvatar`, `getUser`, `isLoading`, and `hasError`)
    as properties:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: Creating the User Vuex actions
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Follow these steps to create the User Vuex actions:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a file called `actions.js` inside the `store/user` folder and open it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'First, we need to import the functions, enums, and classes that we will be
    using here:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Import `graphqlOperation` from the `aws-amplify` npm package.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Import `getUser` and `listUsers` from the GraphQL queries.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Import `createUser` and `updateUser` from the GraphQL mutations.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Import the `signUp`, `validateUser`, `signIn`, `getCurrentAuthUser`, and `changePassword`
    functions from `driver/auth.js`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Import `AuthAPI` from `driver/appsync`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Import the Vuex mutation types from `./types.js`:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a new asynchronous function called `initialLogin`. This function will
    receive a JavaScript object as the first argument. This will provide a `commit` property.
    In this function, we will get the currently authenticated user, get their data
    from the GraphQL API, and commit the user data to the Vuex store:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a new asynchronous function called `signUpNewUser`. This function will
    receive a JavaScript object with a `commit` property as the first argument. The
    second argument is also a JavaScript object but has the `email`, `name`, and `password` properties.
    In this function, we will execute the `signUp` function from the `auth.js` driver
    to sign up and create the user in the AWS Cognito user pool, and then commit the
    user data to the Vuex store:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a new asynchronous function called `createNewUser`. This function will
    receive a JavaScript object with the `commit` and `state` properties as the first
    argument. For the second argument, the function will receive a `code` string.
    In this function, we will fetch the user data from `state` and execute the `validateUser` function
    from the `auth.js` driver to check if the user is a valid user in the AWS Cognito user
    pool. Then we will execute the `signIn` function from `auth.js`, passing `email` and `password` as
    parameters `password` needs to be converted into an encrypted base64 string before
    we send it to the function. After that, we will fetch the authenticated user data
    and send it to the GraphQL API to create a new user:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a new asynchronous function called `signInUser`. This function will
    receive a JavaScript object with the `commit` and `dispatch` properties as the
    first argument. The second argument, which is also a JavaScript object, will have
    the `email` and `password` properties. Inside this function, we will execute the `signIn` function
    from the `auth.js` driver, pass `email` and `password` as parameters, and then
    dispatch the `initialLogin` Vuex action:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a new asynchronous function called `editUser`. This function will receive
    a JavaScript object with the `commit` and `state` properties as the first argument.
    The second argument, which is also a JavaScript object, will have the `username`, `name`, `avatar`, `password`,
    and `newPassword` properties. Inside this function, we will merge the `state` values
    with the new ones that we received as arguments. We will then send them to the
    GraphQL API to update the user information. Then, we will check if we have both
    the `password` and `newPasssword` properties filled in. If so, we will execute
    the `changePassword` function from the `auth.js` driver to change the user''s
    password in the AWS Cognito user pool:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a new asynchronous function called `listAllUsers`. This function will
    fetch all the users on the database and return a list:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, we will export all the default created functions:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: Adding the User module to Vuex
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Follow these steps to import the created User module into the Vuex state:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a new file called `index.js` inside the `store/user` folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Import the `state.js`, `actions.js`, `mutation.js`, and `getters.js` files
    that we just created:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'Create an `export default` with a JavaScript object that provides the `state`, `actions`, `mutations`, `getters`,
    and `namespaced` (set to `true`) properties:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: Open the `index.js` file inside the `store `folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Import the newly created `index.js` inside the `store/user` folder:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'In the new Vuex class instantiation, we need to add a new property called `modules` and
    define it as a JavaScript object. Then, we need to add a new `user` property – this
    will be automatically used as the value because it has the same name as the imported
    User module from the previous step:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When you declare your Vuex store, you need to create three main properties: `state`,
    `mutations`, and `actions`. These properties act as a single structure, bound
    to the Vue application through the injected `$store` prototype or the exported
    `store` variable.
  prefs: []
  type: TYPE_NORMAL
- en: A `state` is a centralized object that holds your information and makes it available
    to be used by `mutations`, `actions`, or `components`. Changing `state` always
    requires that a synchronous function is executed through a `mutation`.
  prefs: []
  type: TYPE_NORMAL
- en: A `mutation` is a synchronous function that can change `state` and be traced.
    This means that when you're developing, you can time travel through all the executed
    `mutations` in the Vuex store.
  prefs: []
  type: TYPE_NORMAL
- en: An `action` is an asynchronous function that can be used to hold business logic,
    API calls, dispatch other `actions`, and execute `mutations`. These functions
    are the common entry points when you need to make changes to a Vuex store.
  prefs: []
  type: TYPE_NORMAL
- en: 'A simple representation of a Vuex store can be seen in the following diagram:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/f7d5f47b-8fd3-4f9e-99e2-1d7df4243318.png)'
  prefs: []
  type: TYPE_IMG
- en: In this recipe, we created the User Vuex module. This module includes all the
    business logic that will help us manage the user in our application, from creating
    a new user to updating it.
  prefs: []
  type: TYPE_NORMAL
- en: When we looked at the Vuex actions, we used the AppSync API client to fetch
    the data and send it to our GraphQL API. We did this using the queries and mutations
    that were created by the Amplify CLI. To be able to communicate with the GraphQL
    API so that we could update the user, we fetched the data we used in the Auth
    Driver from the *Creating the AWS Amplify driver for your application* recipein [Chapter
    3](6748f2ed-6fa0-4925-8a71-199269fae4ae.xhtml), *Setting Up Our Chat App - AWS
    Amplify Environment and GraphQL*.
  prefs: []
  type: TYPE_NORMAL
- en: Those API requests are manipulated by the Vuex mutations and stored in the Vuex
    state, which we can access through the Vuex getter.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You can find out more information about Amplify's AppSync GraphQL client at [https://aws-amplify.github.io/docs/js/api#amplify-graphql-client](https://aws-amplify.github.io/docs/js/api#amplify-graphql-client).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You can find out more information about Vuex at [https:/​/​vuex.​vuejs.​org/​](https://vuex.vuejs.org/).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You can find out more information about Vuex modules at [https://vuex.vuejs.org/guide/modules.html](https://vuex.vuejs.org/guide/modules.html)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating User pages and routes for your application
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When working with a Vue application, you will need a way to manage the location
    of your users. You can handle this using a dynamic component, but the best way
    to do this is through route management.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we will learn how to create our application pages with the business
    rules required for each route. We will then use route management to handle everything.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The prerequisites for this recipe are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: The project we created in the previous recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Node.js 12+
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The Node.js global objects that are required for this recipe are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`@aws-amplify/cli`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`@quasar/cli`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: To start our User page and routes, we will continue with the project that we
    created in the *Creating the User Vuex module on your application *recipe.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this recipe, we will create all the pages that we will need for our user
    in our application: the login page, the signup page, and the user edit page.'
  prefs: []
  type: TYPE_NORMAL
- en: Adding the Dialog plugin to Quasar
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: To use the Quasar Dialog plugin, we need to add it to the configuration file.
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the `quasar.conf.js` file inside the project root folder and find the `framework` property.
    Then, in the `plugins` property, add the `''Dialog''` string to the array so that
    Quasar loads the `Dialog` plugin when it boots the application:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: Creating the User login page
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: For the User login page, we will use two of the components that we created previously: `PasswordInput` and `EmailInput`.
  prefs: []
  type: TYPE_NORMAL
- en: Single-file component <script> section
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'It''s time to create the `<script>` section of the User login page:'
  prefs: []
  type: TYPE_NORMAL
- en: In the `src/pages` folder, open the `Index.vue` file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Import the `mapActions` and `mapGetters` functions from the `vuex` package:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: 'Create an `export default` JavaScript object with five properties; that is, `name` (defined
    as `''Index''`), `components`, `data`, `computed`, and `methods`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: 'In the `components` property, add two new properties called `PasswordInput` and `EmailInput`.
    Define `PasswordInput` as an anonymous function with a return value of `import(''components/PasswordInput'')` and `EmailInput` as
    an anonymous function with a return value of `import(''components/EmailInput'')`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: 'In the `data` property, we will return a JavaScript object that provides two
    properties, `email` and `password`, both of which will be empty strings:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: 'In the `computed` property, we will destruct the `mapGetters` function, passing
    the namespace of what module we want as the first parameter (in this case, `''user''`).
    We will pass an array of `getters` we want to import (in this case, `isLoading`)
    as the second parameter:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: On the `beforeMount` lifecycle hook, we will add an `if` statement, checking
    if the `getUserId` is truthy, and then redirect the user to the `Contacts` route.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, for the `methods` property, we will destruct the `mapActions` function,
    passing the namespace of the module we want – in this case, `''user''` – as the
    first parameter. For the second parameter, we will use an array of `actions` we
    want to import – in this scenario, this is `signInUser`. Next, we need to add
    the asynchronous `onSubmit` method, which will dispatch `signInUser` and send
    the user to the `Contacts` route, and the `createAccount` method, which will send
    the user to the `SignUp` route:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: Single-file component <template> section
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Now, we need to add the `<template>` section to finish our page:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a component called `QPage` with the `class` attribute defined as `"bg-grey-1
    flex flex-center"`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: 'Inside the `QPage` component, create a `QCard` component with the `style` attribute
    defined as `"width: 350px"`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: 'Inside the `QCard` component, create a `QCardSection` with an `h6` child component that
    has the `class` attribute defined as `no-margin`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, create a `QCardSection` with a `QForm` child component that has the class
    attribute defined as `q-gutter-md`. Inside the `QForm` component, create an `EmailInput` component,
    with the `v-model` directive bound to the `data.email`, and a `PasswordInput` component,
    with the `v-model` directive bound to the `data.password` property:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, create a `QCardActions` component with an `align` attribute defined as `right`.
    Inside, add a `QBtn` with the `label` attribute set to `"Create new Account"`, `color` set
    to `primary`, `class` set to `q-ml-sm`, `flat` set to `true`, and the `@click` event
    listener bound to the `createAccount` method. Next, create another `QBtn` component
    with the `label` attribute set to `"Login"`, `type` set to `"submit"`, `color` set
    to `primary`, and the `@click` event listener bound to the `onSubmit` method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, create a `QInnerLoading` component with the `:showing` attribute bound
    to `computed.isLoading`. This will need to have a `QSpinner` child component that
    provides the `size` attribute. Set this to `50px` and `color` to `primary`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: 'To run the server and see your progress, you need to open a Terminal (macOS
    or Linux) or Command Prompt/PowerShell (Windows) and execute the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: Remember to always execute the command `npm run lint --fix`, to automatically
    fix any code lint error.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is a preview of what the page will look like:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/24406191-9d75-4c7f-80f1-f28a74bb3517.png)'
  prefs: []
  type: TYPE_IMG
- en: Creating the User signup page
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: For the User signup page, we will use four components that we've already created: `NameInput`, `UsernameInput`, `PasswordInput`,
    and `EmailInput`.
  prefs: []
  type: TYPE_NORMAL
- en: Single-file component <script> section
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Here, we will create the `<script>` section of the User signup page:'
  prefs: []
  type: TYPE_NORMAL
- en: Inside the **`src/pages` **folder, create a new file called `SignUp.vue` and
    open it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Import the `mapActions` and `mapGetters` functions from the `vuex` package:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: 'Create an `export default` JavaScript object that provides five properties: `name` (defined
    as `''SignUp''`), `components`, `data`, `computed`, and `methods`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: 'In the `components` property, add four new properties: `NameInput`, `UsernameInput`, `PasswordInput`,
    and `EmailInput`. Define them like so:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`NameInput` as an anonymous function with a return value of `import(''components/NameInput'')`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`UsernameInput` as an anonymous function with a return value of `import(''components/UsernameInput'')`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`PasswordInput` as an anonymous function with a return value of `import(''components/PasswordInput'') `'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`EmailInput` as an anonymous function with a return value of `import(''components/EmailInput'')`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'This can be seen in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: 'In the `data` property, we will return a JavaScript object that provides four
    properties – `name`, `username`,  `email`, and `password` – all of which will
    be empty strings:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: 'In the `computed` property, we will destruct the `mapGetters` function, passing
    the namespace of what module we want – in this case, `''user''` – as the first
    parameter. For the second parameter, we will use an array of `getters` we want
    to import – in this scenario, this is `isLoading`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, for the `methods` property, first, we will destruct the `mapActions` function,
    passing the namespace of what module we want – in this case, `''user''` – as the
    first parameter. For the second parameter, we will pass an array of `actions` we
    want to import – in this scenario, this is `signUpNewUser`. Next, we need to add
    the asynchronous `onSubmit` method, which will dispatch `signUpNewUser` and then
    send the user to the `Validate` route, and the `onReset` method, which will clear
    the data:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: Single-file component <template> section
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'To finish the page, we need to add the `<template>` section:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a `QPage` component with the `class` attribute defined as `"bg-grey-1
    flex flex-center"`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: 'Inside the `QPage` component, create a `QCard` component with the `style` attribute
    defined as `"width: 350px"`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: 'Inside the `QCard` component, create a `QCardSection` with a `h6` child component
    where the `class` attribute is defined as `no-margin`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: 'After that, create a `QCardSection` with a `QForm` child component where the
    `class` attribute is defined as `q-gutter-md`. Inside the `QForm` component, create
    a `NameInput` component with the `v-model` directive bound to `data.name`, a `UsernameInput` component
    with the `v-model` directive bound to `data.username`, an `EmailInput` component
    with the `v-model` directive bound to `data.email`, and a `PasswordInput` component
    with the `v-model` directive bound to the `data.password` property:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, create a `QCardActions` component with the `align` attribute set to `right`.
    Inside, add a `QBtn` with the `label` attribute set to `"Reset"`, `color` set
    to `primary`, `class` set to `q-ml-sm`, `flat` set to `true`, and the `@click` event
    listener bound to the `onReset` method. Then, create another `QBtn` component
    with the `label` attribute set to `"Create"`, `type` set to `"submit"`, `color` set
    to `primary`, and the `@click` event listener bound to the `onSubmit` method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, create a `QInnerLoading` component with the `:showing` attribute bound
    to `computed.isLoading`. This will need to have a `QSpinner` child component.
    The `size` attribute needs to be set to `50px` and `color` needs to be set to `primary`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs: []
  type: TYPE_PRE
- en: 'To run the server and see your progress, you need to open a Terminal (macOS
    or Linux) or Command Prompt/PowerShell (Windows) and execute the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs: []
  type: TYPE_PRE
- en: Remember to always execute the command `npm run lint --fix`, to automatically
    fix any code lint error.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is a preview of what the page will look like:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/11952d7a-f53c-4afb-b56b-fd669409c0e8.png)'
  prefs: []
  type: TYPE_IMG
- en: Creating the User validation page
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Once the user has created an account, AWS Amplify will send an email with a
    validation pin-code that we will need to be sent back for validation purposes.
    This page will be the validation page.
  prefs: []
  type: TYPE_NORMAL
- en: Single-file component <script> section
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Follow these steps to create the `<script>` section for the User validation
    page:'
  prefs: []
  type: TYPE_NORMAL
- en: Inside the `src/pages` folder, create a new file called `Validate.vue` and open
    it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Import the `mapActions` and `mapGetters` functions from the `vuex` package,
    and `resendValidationCode` from `src/driver/auth`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs: []
  type: TYPE_PRE
- en: 'Create an `export default` JavaScript object that provides four properties: `name` (defined
    as `''Validate''`), `data`, `computed`, and `methods`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs: []
  type: TYPE_PRE
- en: 'Inside the `data` property, we will return a JavaScript object with a `code` property
    as an empty string:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE63]'
  prefs: []
  type: TYPE_PRE
- en: 'Inside the `computed` property, we will destruct the `mapGetters` function,
    passing the namespace of what module we want – in this case, `''user''` – as the
    first parameter. For the second parameter, we will pass an array of `getters` we
    want to import – in this scenario, `isLoading` and `getUserEmail`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE64]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, for the `methods` property we will destruct the `mapActions` function,
    passing the namespace of what module we want – in this case, `''user''` – as the
    first parameter. For the second parameter, we will pass an array of `actions` we
    want to import – in this scenario, `createNewUser`. Next, we need to add the asynchronous `onSubmit` method,
    which will dispatch `createNewUser` and send the user to the `Index` route; the `resendCode` method,
    which will resend the user another validation code; and the `onReset` method,
    which will reset the data:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE65]'
  prefs: []
  type: TYPE_PRE
- en: Single-file component <template> section
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Follow these steps to create the `<template>` section of the User validation
    page:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a `QPage` component with the `class` attribute defined as `"bg-grey-1
    flex flex-center"`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE66]'
  prefs: []
  type: TYPE_PRE
- en: 'Inside the `QPage` component, create a `QCard` component with the `style` attribute
    defined as `"width: 350px"`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE67]'
  prefs: []
  type: TYPE_PRE
- en: 'Inside the `QCard` component, create a `QCardSection` with an `h6` child component and
    the `class` attribute defined as `no-margin`. Then, create a sibling element with
    the `class` attribute defined as `text-subtitle2`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE68]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a `QCardSection` with two children components. These will be HTML elements, `P`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE69]'
  prefs: []
  type: TYPE_PRE
- en: 'After that, create a `QCardSection` with a `QForm` child component and the
    `class` attribute defined as `q-gutter-md`. Inside the `QForm` component, add
    the `QInput` component as a child element. Then, inside the `QInput` component,
    bind the `v-model` directive to `data.code`. Inside the `QInput` `rules` attribute,
    define the `rules` value as an array of validation that will check if any code
    has been typed in. Enable `lazy-rules` so that it will only validate after a while:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE70]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, create a `QCardActions` component with the `align` attribute set to `right`.
    Inside, add a `QBtn` with the `label` attribute set to `"Reset"`, `color` set
    to `primary`, `class` set to `q-ml-sm`, `flat` set to `true`, and the `@click` event
    listener bound to the `onReset` method. Create another `QBtn` with the `label` attribute
    set to `"Re-send code"`, `color` set to `secondary`, `class` set to `q-ml-sm`, `flat` set
    to `true`, and the `@click` event listener bound to the `resendCode` method. Finally,
    create a `QBtn` component with the `label` attribute set to `"Validate"`, `type` set
    to `"submit"`, `color` set to `primary`, and the `@click` event listener bound to
    the `onSubmit` method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE71]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, create a `QInnerLoading` component with the `:showing` attribute bound to `computed.isLoading`.
    It should have `QSpinner` child component with `size` set to `50px` and `color` set
    to `primary`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE72]'
  prefs: []
  type: TYPE_PRE
- en: 'To run the server and see your progress, you need to open a Terminal (macOS
    or Linux) or Command Prompt/PowerShell (Windows) and execute the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE73]'
  prefs: []
  type: TYPE_PRE
- en: Remember to always execute the command `npm run lint --fix`, to automatically
    fix any code lint error.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is a preview of what the page will look like:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/b8f80c2c-f928-4240-9622-205a135d67b7.png)'
  prefs: []
  type: TYPE_IMG
- en: Creating the User edit page
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: For the User edit page, we will use four components that we've already created: `NameInput`, `UsernameInput`, `AvatarInput`,
    and `PasswordInput`.
  prefs: []
  type: TYPE_NORMAL
- en: Single-file component <script> section
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Follow these steps to start developing the `<script>` section of the User edit
    page:'
  prefs: []
  type: TYPE_NORMAL
- en: Inside the `src/pages` folder, create a new file called `Edit.vue` and open
    it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Import the `mapActions` and `mapGetters` functions from the `vuex` package:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE74]'
  prefs: []
  type: TYPE_PRE
- en: 'Create an `export default` JavaScript object that provides four properties: `name` (defined
    as `''SignUp''`), `data`, `computed`, and `methods`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE75]'
  prefs: []
  type: TYPE_PRE
- en: 'Inside the `components` property, add four new properties called `NameInput`, `UsernameInput`, `PasswordInput`,
    `AvatarInput`. Set them like so:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`NameInput` as an anonymous function with a return value of `import(''components/NameInput'')`'
  prefs: []
  type: TYPE_NORMAL
- en: '`UsernameInput` as an anonymous function with a return value of `import(''components/UsernameInput'')`'
  prefs: []
  type: TYPE_NORMAL
- en: '`PasswordInput` as an anonymous function with a return value of `import(''components/PasswordInput'') `'
  prefs: []
  type: TYPE_NORMAL
- en: '`AvatarInput` as an anonymous function with a return value of `import(''components/AvatarInput'')`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE76]'
  prefs: []
  type: TYPE_PRE
- en: 'Inside the `data` property, we will return a JavaScript object that provides
    five properties: `name`, `username`, `avatar`,  `email`, and `password`. All of
    these will be empty strings:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE77]'
  prefs: []
  type: TYPE_PRE
- en: 'Inside the `created` life cycle hook, define `data.name` as `getUser.name`, `data.username` as `getUser.username`, and `data.avatar` as `getUser.avatar`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE78]'
  prefs: []
  type: TYPE_PRE
- en: 'Inside the `computed` property, we will destruct the `mapGetters` function,
    passing the namespace of what module we want – in this case, `''user''` – as the
    first parameter. For the second parameter, we will pass an array of `getters` we
    want to import – in this scenario, `isLoading`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE79]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, for the `methods` property, we will destruct the `mapActions` function,
    passing the namespace of what module we want – in this case, `''user''` – as the
    first parameter. For the second parameter, we will pass an array of `actions` we
    want to import – in this scenario, `editUser`. Next, we need to add the asynchronous `onSubmit` method,
    which will dispatch `$refs.avatar.uploadFile()` and then dispatch `editUser` to
    send the user to the `Chat` route, and the `onReset` method, which will clear
    the data:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE80]'
  prefs: []
  type: TYPE_PRE
- en: Single-file component <template> section
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Follow these steps to create the `<template>` section of the User edit page:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a `QPage` component with the `class` attribute defined as `"bg-grey-1
    flex flex-center"`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE81]'
  prefs: []
  type: TYPE_PRE
- en: 'Inside the `QPage` component, create a `QCard` component with the `style` attribute
    defined as `"width: 350px"`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE82]'
  prefs: []
  type: TYPE_PRE
- en: 'Inside the `QCard` component, create a `QCardSection` with an `h6` child component and with
    the `class` attribute defined as `no-margin`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE83]'
  prefs: []
  type: TYPE_PRE
- en: 'After that, create a `QCardSection` with a `QForm` child component with the
    class attribute defined as `q-gutter-md`. Inside the `QForm` component, create
    an `AvatarInput` component with a `reference` directive defined as `avatar` and
    the `v-model` directive bound to `data.avatar`, a `NameInput` component with the `v-model` directive
    bound to `data.name`, a `UsernameInput` component with the `v-model` directive
    bound to `data.username`, an `EmailInput` component with the `v-model` directive
    bound to `data.email`, and a `PasswordInput` component with the `v-model` directive
    bound to the `data.password` property:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE84]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, create a `QCardActions` component with the `align` attribute set to `right`.
    Inside, add a `QBtn` with the `label` attribute set to `"Reset"`, `color` set
    to `primary`, `class` set to `q-ml-sm`, `flat` set to `true`, and the `@click` event
    listener bound to the `onReset` method. Then, create another `QBtn` component
    with the `label` attribute set to `"Create"`, `type` set to `"submit"`, `color` set
    to `primary`, and the `@click` event listener bound to the `onSubmit` method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE85]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, create a `QInnerLoading` component with the `:showing` attribute bound to `computed.isLoading`.
    It should have a `QSpinner` child component with `size` set to `50px` and `color` set
    to `primary`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE86]'
  prefs: []
  type: TYPE_PRE
- en: 'To run the server and see your progress, you need to open a Terminal (macOS
    or Linux) or Command Prompt/PowerShell (Windows) and execute the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE87]'
  prefs: []
  type: TYPE_PRE
- en: Remember to always execute the command `npm run lint --fix`, to automatically
    fix any code lint error.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is a preview of what the page will look like:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/2ede7f2f-961d-49d4-89d9-be1b0d4cc045.png)'
  prefs: []
  type: TYPE_IMG
- en: Creating application routes
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Now that we''ve created the user pages, components, and layout, we need to
    bind everything together so that it can be accessed by the user. To do this, we
    need to create the routes and make them available so that the user can navigate
    between the pages. Follow these steps to do this:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the `routes.js` file inside the `router` folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Make the `routes` constant an empty array:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE88]'
  prefs: []
  type: TYPE_PRE
- en: 'Add a JavaScript object with three properties, `path`, `component`, and `children`,
    to this array. The `path` property is a string and will be a static URL, the `component` property
    is an anonymous function that will return a WebPack `import` function with the
    component that will be rendered, and the `children` property is an array of components
    that will be rendered inside `path`. Each of the children components is a JavaScript
    object with the same properties, plus a new one called `name`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE89]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, for the `/chat` URL, we need to create two new placeholder pages inside
    the `pages` folder: `Contacts.vue` and `Messages.vue`. Inside these files, create
    an empty component with the following template:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE90]'
  prefs: []
  type: TYPE_PRE
- en: 'Inside the `message` route, we need to add two special parameters: `:id` and `path`.
    These parameters will be used to fetch a specific message between users:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE91]'
  prefs: []
  type: TYPE_PRE
- en: 'For the `/user` URL, we will create just one child route, the `edit` route.
    Inside this route, we are using the `alias` property since `vue-router` needs
    to have a child with `path` empty for the first child rendering. We will have
    also have a `/user/edit` route available inside our application:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE92]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, for creating new users, we need to add the `/register` URL with two
    children: `SignUp `and `Validate`. The `SignUp` route will be the main route on
    the registered URL and will be called directly when the user enters this URL.
    The `Validate` route will only be called when the user is redirected to the `/register/validate` URL:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE93]'
  prefs: []
  type: TYPE_PRE
- en: Adding the authentication guard
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'To validate the user authentication token every time the user enters your application,
    if the token is valid, or if the user is trying to access a route without access,
    we need to create an authentication guard for our application:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a new file called `routeGuard.js` inside the `src/boot` folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a `default` export asynchronous function. Inside this parameter, add
    a JavaScript object with a property named `app`. Inside the function, create a
    constant with an object restructuring of `app` that gets the `store` property.
    Then, create a `try/catch` block. In the `try` part, check if the `''user/getUserId''` gather
    isn''t present and dispatch `''user/initialLogin''`. Finally, inside the `catch`
    block, redirect the user to the `Index` route:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE94]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, open the `quasar.conf.js` file inside the root folder of your project
    and find the `boot` property. Add the `''routerGuard''` item to the array:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE95]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this chapter, we developed micro components such as `NameInput`, `EmailInput`, and
    so on to simplify the process of developing macro components or containers, such
    as pages.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we used the components we developed in the previous recipe to
    create a complete page, such as the User login, User edit, and User registration
    pages.
  prefs: []
  type: TYPE_NORMAL
- en: Using `vue-router` to manage the parent-child process of wrapping a page with
    a custom layout, we used the layouts we created in the previous recipes of this
    book to create the routes for our application. We made them available so that
    we can access the application as a normal web application, with custom URLs and
    routes.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, we added some authentication middleware to our main initialization
    Vue file so that we could redirect an already authenticated user. This means that
    they don't need to authenticate again when they enter the application for a second
    time.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Now, your application is ready for user registration and login. It's possible
    to navigate through the user registration pages and receive an email from Amazon
    with a verification code so that you can verify the user on the server.
  prefs: []
  type: TYPE_NORMAL
- en: 'To check your process and see it running on your local environment, open a Terminal (macOS
    or Linux) or Command Prompt/PowerShell (Windows) and execute the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE96]'
  prefs: []
  type: TYPE_PRE
- en: Remember to always execute the command `npm run lint --fix`, to automatically
    fix any code lint error.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You can find out more information about `vue-router` nested routes at [https://router.vuejs.org/guide/essentials/nested-routes.html](https://router.vuejs.org/guide/essentials/nested-routes.html).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You can find out more information about `vue-router` lazy loading at [https://router.vuejs.org/guide/advanced/lazy-loading.html](https://router.vuejs.org/guide/advanced/lazy-loading.html).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You can find out more information about the Quasar framework's `QInnerLoading`
    component at [https://quasar.dev/vue-components/inner-loading](https://quasar.dev/vue-components/inner-loading).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
