- en: Implementing on the Azure Platform
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous chapter, we saw one of the cloud computing platforms for hosting
    our application--AWS--which contains all the features to make an application with
    high availability, and with no downtime. In this chapter, we will have a discussion
    about another cloud platform called **Microsoft Azure**.
  prefs: []
  type: TYPE_NORMAL
- en: 'This chapter includes the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Introducing Microsoft Azure
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Building application infrastructure Azure services
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: CI/CD using Jenkins with Azure
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Getting started with Microsoft Azure
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As the name suggests, Microsoft Azure is a public cloud platform owned by Microsoft,
    which provides different PaaS and IaaS services for their customers. Some of the
    popular services are virtual machine, app service, SQL database, Resource Manager,
    and so on.
  prefs: []
  type: TYPE_NORMAL
- en: 'The Azure services fall mainly into these two categories:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Platform services**: These are the services where customers are provided
    with an environment to build, manage, and execute their applications while taking
    care of the infrastructure themselves. The following are some of the Azure services
    by its various categories:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Management services**: These provide a management portal and marketplace
    services, which provide galleries and tools for automation in Azure.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Compute**: These are services such as fabric, functions, and so on, which
    help the developer to develop and deploy highly scalable applications.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**CDN and media**: These provides secure and reliable content delivery around
    the globe and  real-time streaming respectively.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Web + Mobile**: These are services related to apps such as web apps and API
    apps, mostly for web and mobile applications.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Analytics**: These are big-data-related services, which can help a machine
    learning developer to perform real-time data processing, and give you insights
    into data such as HDInsight, Machine learning, Stream Analytics, Bot service,
    and so on.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Development tools**: These services are used for version control, collaboration,
    and others. It includes SDKs as well.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**AI and Cognitive Service**: These are artificial-intelligence-based services,
    such as for speech, vision, and so on. A few of the services which do so are Text
    Analytics API, Cognitive, and others.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Infrastructure Services**: These are services where the service provider
    is responsible for the hardware failures. Customization of the servers is the
    customer''s responsibility. Also, the customer manages its specifications as well:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Server compute and containers**: These are services such as virtual machine
    and containers, which provide computing power to the customer application with
    variants.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Storage**: These are of two types--BLOB and file storage. It has varying
    storage capabilities available based on latency and speed.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Networking**: These provide a couple of network-related services such as
    load balancer and virtual network, which help you to secure your network, and
    make it efficient for customer response.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following diagram will give more understanding about the Azure platform:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00187.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'You can review all the Microsoft Azure product offerings in detail at the following
    link:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://azure.microsoft.com/en-in/services/](https://azure.microsoft.com/en-in/services/)'
  prefs: []
  type: TYPE_NORMAL
- en: 'To get started with Microsoft Azure, you are required to have an account. Since
    this chapter is concerned with implementing our application on Azure, we won''t
    get into how to create an account. If you do need help, you could read the article
    given at the following link, which will definitely help you out:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://medium.com/appliedcode/setup-microsoft-azure-account-cbd635ebf14b](https://medium.com/appliedcode/setup-microsoft-azure-account-cbd635ebf14b)'
  prefs: []
  type: TYPE_NORMAL
- en: Azure provides some SaaS-based services, which you can review at [https://azuremarketplace.microsoft.com/en-us](https://azuremarketplace.microsoft.com/en-us).
  prefs: []
  type: TYPE_NORMAL
- en: A few points on Microsoft Azure basics
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Once you are ready and logged into your Azure account, you will be redirected
    to the Azure portal ([https://portal.azure.com](https://portal.azure.com)), which
    will showcase the Azure service. Initially, Azure provides a free account, and
    gives you a credit value of $200 for your usage for 30 days. Microsoft Azure also
    believes in the pay-as-you-go model, and when you have finished all your free
    credit, you can switch to a paid account.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following are some of the basic concepts of Azure that you should know
    before moving forward:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Azure Resource Manager**: Initially, Azure was based on a deployment model
    called **ASM** (**Azure Service Manager**). In the latest version of Azure, **ARM**
    (**Azure Resource Manager**) is adopted, which provides high availability and
    more flexibility.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Azure Regions**: There are around 34 regions distributed around the globe.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The list of Azure regions is available at [https://azure.microsoft.com/en-us/regions/](https://azure.microsoft.com/en-us/regions/).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A list of all the services in specific regions is available at [https://azure.microsoft.com/en-us/regions/services/](https://azure.microsoft.com/en-us/regions/services/).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Azure automation**: Azure provides a number of templates in the different
    Windows-based tools, such as Azure-PowerShell, Azure-CLI, and so on. You can find
    these templates at [https://github.com/Azure](https://github.com/Azure).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Since Azure is owned by Microsoft, we will mostly work on the Azure console
    (UI), and create resources through it. The Azure environment is very friendly
    for the developers or DevOps professionals who love to deploy their applications
    on the Windows system, and their applications are written in .NET or VB. It also
    supports the latest programming languages such as Python, ROR, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: Microsoft Azure is the ideal choice for people who love to work on Microsoft-based
    products such as Visual Studio.
  prefs: []
  type: TYPE_NORMAL
- en: Architecturing our application infrastructure using Azure
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Once you are on the Azure portal, you should see the following default dashboard
    on your screen:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00188.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'It''s time to architect our application infrastructure on MS Azure. We will
    follow the architecture diagram given next to create our production environment
    on Azure:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00189.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'In this architecture, we will use a couple of Azure services, which are as
    follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Virtual Machine**: This is similar to our EC2 machine in AWS. We will deploy
    our application and the MongoDB server in a Virtual Machine.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Virtual Network**: Virtual Network is synonymous with the VPC in AWS, and
    needs to be created in order to keep our communication network secure.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Storage**: Each VM is backed by a storage account that we don''t create explicitly,
    as it is created along with the VM to store your data.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Load Balancer**: This Load Balancer has the same usage as the Load Balancer
    in AWS, but they have a slight variation in the algorithm, as Azure mainly follows
    either hash-based balancing or source IP algorithm, whereas, AWS follows the Round-Robin
    Algorithm or the sticky session algorithm.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**DNS**: DNS is useful when we have a domain register, and we need to manage
    our DNS from Azure. In the cloud platform, we call it the **Zone**.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Subnet**: We will create a Subnet inside the Virtual Network to distinguish
    our resources, which need to be internet facing or not.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Auto scaling**: We haven''t mentioned this in the diagram, as it depends
    on your application need and customer response.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: So, let's begin by creating our app server (that is, the virtual machine) where
    our application resides.
  prefs: []
  type: TYPE_NORMAL
- en: As I mentioned earlier, Azure has a very user friendly UI, which creates a programmatic
    code in the background as per your defined resources, and gives it to you using
    the Resource Manager, which makes the DevOps guy's job easier.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a virtual machine in Azure
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Follow the steps listed next to create a VM in Microsoft Azure:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Go to the Azure dashboard, and select New in the left panel to launch the VM
    Wizard, as shown in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00190.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Now we need to select the OS that needs to be launched. We will select the **Ubuntu
    Server 16.04 LTS** server option (we select this option, since our application
    is developed on the Ubuntu OS) in the list.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the following screen, we need to select the deployment model. There are
    two deployment models available. They are classic (it is a standard VM) and Resource
    Manager (high availability VM). Select Resource manager model, as shown in the
    next screenshot, and click on the Create button to proceed further:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00191.jpeg)![](img/00192.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'On the next screen, we need to provide the User name and method of authentication
    for the VM, as shown in the following screenshot; click on OK to proceed further:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00193.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Next, we need to select the VM size based on our requirement. We will go with
    the DS1_V2 Standard type. Select it, and click on the Select button at the bottom
    of the page as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00194.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'In the next screen, we will define a couple of the optional details such as
    Network, Subnet, Public IP address, security group, Monitoring, and others:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00195.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Instead of creating a virtual network everytime, it's recommended to create
    a virtual network, and choose it by clicking on virtual network. When it comes
    to managed and unmanaged disks, I prefer the managed ones. This is because in
    unmanaged disks, we choose to create a storage account, and since we are creating
    it for a multiple app server, each app server will have its separate storage account.
    It is highly possible that all the storage accounts may fall into a single storage
    unit, which could cause a single point of failure. On the other hand, in the case
    of a managed disk, Azure manages our disk by every storage account in a separate
    storage unit, which makes it highly available.
  prefs: []
  type: TYPE_NORMAL
- en: If you don't provide these details, it will be set automatically.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the next screen, we need to review all the details that we have defined
    in the wizard, as seen in this screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00196.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'At the bottom of the page, you will find a link that will give you the facility
    to download the complete configuration in the form of a template, or in the form
    of code in different languages. See the following screenshot that shows the code
    that got generated as part of the configuration we provided:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00197.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Click on Ok to begin with the deployment of your virtual machine.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now our dashboard should have one VM running after some time, as shown in this
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00198.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Now that you have access to the VM, you need to download your application and
    deploy it as you were doing in your local machine.
  prefs: []
  type: TYPE_NORMAL
- en: Similarly, we can create multiple VM instances for your application that act
    as app servers.
  prefs: []
  type: TYPE_NORMAL
- en: Also, we can create a VM with the MongoDB server installation on top of it.
    The installation steps you need to follow will be similar to the ones we defined
    in [Chapter 4](part0089.html#2KS220-4022ecb0f8ea4b719ffb742bf2a6a072), *Interacting
    Data Service*.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can see the performance of the VM by clicking on the VM (that is, appprod)
    icon on the dashboard, which should be as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00199.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Next, we need to add the app servers created earlier to the load balancer.
    So, we need to create a load balancer using the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Go to [https://portal.azure.com/?whr=live.com#blade/HubsExtension/Resources/resourceType/Microsoft.Network%2FLoadBalancers](https://portal.azure.com/?whr=live.com#blade/HubsExtension/Resources/resourceType/Microsoft.Network%2FLoadBalancers),
    and click on the button Create Load balancers in the middle of the screen, as
    shown in the following screenshot:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'In the next screen, we need to specify the LB Name, and provide the type of
    LB purpose. We can launch the ELB in the same group as your app server, as seen
    here:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/00200.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Click on the Create button to initiate LB creation.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once the load balancer is ready for our usage, we should be able to see the
    following screen, which shows its details:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00201.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Next, we need to add a backend pool, which is our app server, as shown in this
    screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00202.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Now we need to add health probe, which is the health status of your application,
    as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00203.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Next we add the frontend pools for our application as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00204.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Now we are all set with the load balancer for our application.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can read more about load balancers in the Azure docs at this link: [https://docs.microsoft.com/en-us/azure/load-balancer/load-balancer-overview](https://docs.microsoft.com/en-us/azure/load-balancer/load-balancer-overview)'
  prefs: []
  type: TYPE_NORMAL
- en: We have now created the infrastructure as per our architecture diagram. It's
    time to configure Jenkins for our application deployment on our infrastructure
    in Azure.
  prefs: []
  type: TYPE_NORMAL
- en: CI/CD pipeline using Jenkins with Azure
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Firstly, we need to navigate to the active directory service, which you can
    see in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00205.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Now we need to register our application, so, select the App registrations link
    in the left pane. You will see a screen similar to the next one, where you need
    to provide your application details:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00206.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: After this, you will be able to generate the key which will be needed to access
    your Jenkins job.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'You will see the following screen, which has the secret key''s details, and
    you will also find other details such as the Object ID and Application ID on the
    same page:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00207.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Now we have the required information to configure the job in Jenkins. So, navigate
    to the Jenkins console, go to manage plugins in the Manage Jenkins section, and
    install the plugin, Azure VM agents.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once the plugin is installed, go to Manage Jenkins, and click on Configure
    System, as shown in the next screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00208.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: In the next screen, scroll to the bottom section called Cloud, click on the
    button Add cloud, and choose the new Microsoft Azure VM Agents option. This will
    generate a section on the same page.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00209.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: You can read more about the MS Azure VM Agents plugin in its documentation ([https://wiki.jenkins.io/display/JENKINS/Azure+VM+Agents+plugin](https://wiki.jenkins.io/display/JENKINS/Azure+VM+Agents+plugin)).
  prefs: []
  type: TYPE_NORMAL
- en: 'In the last screen, you need to add your Azure credentials that we had generated
    previously. If you click on the Add button, which you can see in the following
    screen, you can add values such as Subscription ID, and so on:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00210.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'In the next part of the same section, you need to provide the configuration
    of the VM''s details such as the template, VM type, and others:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00211.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: In the preceding screenshot, Labels is the most important attribute, which we
    will be using in Jenkins jobs to identify the group.
  prefs: []
  type: TYPE_NORMAL
- en: Now you need to provide the operation you want to perform, that is, if you want
    to deploy your application, you can provide the command to download the code and
    run the application.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00212.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Click on Save to apply the settings.
  prefs: []
  type: TYPE_NORMAL
- en: Now, create a new job in Jenkins. Also, in the GitBucket section, where you
    generally provide the repository details, you will find a new checkbox saying
    Restrict where this project can be run and asking you to provide the Label Expression
    name. In our case, it is `msubuntu`. That's it!
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00213.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Now we are all set to run our Jenkins job to deploy our application on the VM
    (that is, the app server).
  prefs: []
  type: TYPE_NORMAL
- en: Finally, we are able to deploy our application on the Azure platform.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you were introduced to the Azure platform, which is provided
    by Microsoft, and you deployed your cloud native application on it. We took a
    look at a different approach to build the same infrastructure on the Azure platform.
    You also saw the integration of Jenkins with the Azure platform for CI/CD. In
    the next and final chapter, we will take a look at the different tools that are
    very helpful to manage and troubleshoot your application-related issues, and address
    them in a much quicker way so that our application can maintain zero downtime.
    Stay tuned for the next chapter on Monitoring!
  prefs: []
  type: TYPE_NORMAL
