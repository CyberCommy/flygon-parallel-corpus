- en: Metasploit for Secret Agents
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This chapter brings in a variety of techniques that will mostly be used by
    law enforcement agencies. The methods discussed in this chapter will extend the
    usage of Metasploit to surveillance and offensive cyber operations. Throughout
    this chapter, we will look at:'
  prefs: []
  type: TYPE_NORMAL
- en: Procedures for maintaining anonymity
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using obfuscation in payloads
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Achieving persistence with APT techniques
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Harvesting files from the target
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The power of Python in Metasploit
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Maintaining anonymity in Meterpreter sessions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As a law enforcement agent, it is advisable that you maintain anonymity throughout
    your command and control sessions. However, most law enforcement agencies use
    VPS servers for their command and control software, which is good since they introduce
    proxy tunnels within their endpoints. It is also another reason that law enforcement
    agents may not use Metasploit since it is trivial to add proxies between you and
    your targets.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s see how we can circumvent such situations and make Metasploit not only
    usable but a favorable choice for law enforcement. Consider the following scenario:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/c5d1199f-831a-465b-9bbb-ce30f5b33bb5.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We can see that we have three public IPs in the plot. Our target is on `106.215.26.19,`
    and our Metasploit instance is running on `185.91.2xx.xxx` on port `8443`. We
    can leverage the power of Metasploit here by generating a reverse HTTPS payload
    which offers built-in proxy services. Let''s create a simple proxy payload, as
    shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/5db36886-7391-46db-a4c9-3f316d63555b.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We can see that we have set `HTTPProxyHost` and `HTTPProxyPort` to our proxy
    server, which is a Windows-based operating system running CCProxy software, as
    shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/d9ac17d0-8916-4d15-b4a8-4df8e668c6c5.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The CCProxy software is proxy server software for Windows. We can easily configure
    ports and even authentication. It''s generally good practice to implement authentication
    so that no one can use your proxy without the use of proper credentials. You can
    define the credentials while generating payloads using the `HttpProxyPass` and
    `HttpProxyUser` options. Next, we need to start the handler at the `185.92.2xx.xxx`
    server, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/a734dc6b-eb41-4c2b-9db1-a602762ce398.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Bingo! We can see that we quickly got access to our proxy server . This means
    that we no longer have to move our Metasploit setup from one server to another;
    we can have an intermediate proxy server that can be changed on the fly. Let''s
    inspect the traffic at our handler server and check if we are getting any direct
    hits from the target:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/192e645c-5d6d-4cf2-bcf6-ecaeb2b29a86.png)'
  prefs: []
  type: TYPE_IMG
- en: Nope. We got all the hits from the proxy server. We just saw how we could anonymize
    our Metasploit endpoint using an intermediate proxy server.
  prefs: []
  type: TYPE_NORMAL
- en: Maintaining access using vulnerabilities in common software
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The DLL search order hijacking/DLL planting technique is one of my favorite
    persistence-gaining methods in achieving long-time access while evading the eyes
    of the administrators. Let's talk about this technique in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: DLL search order hijacking
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As the name suggests, the DLL search order hijacking vulnerability allows an
    attacker to hijack the search order of DLLs loaded by a program and will enable
    them to insert a malicious DLL instead of a legit one.
  prefs: []
  type: TYPE_NORMAL
- en: 'Mostly, software, once executed, will look for DLL files in its current folder
    and `System32` folder. However, sometimes the DLLs, which are not found in its
    current directory, are then searched in the `System32` folder instead of directly
    loading them from `System32` first-hand. This situation can be exploited by an
    attacker where they can put a malicious DLL file in the current folder and hijack
    the flow which would have otherwise loaded the DLL from the `System32` folder.
    Let''s understand this with the help of the following diagram:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/7593a117-ce5f-44e7-90a0-64f43f2fbcc6.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We can see from the preceding diagram that an application, once executed, loads
    three DLL files which are xx1, xx2, and xx3\. However, it also searches for a
    `yy1.dll` file which is not present in the directory. Failure to find `yy1.dll`
    in the current folder means the program will jump to `yy1.dll` from the `System32`
    folder. Now, consider that an attacker has placed a malicious DLL file named `yy1.dll`
    into the application''s current folder. The execution will never jump to the `System32`
    folder and will load the maliciously planted DLL file thinking that it''s the
    legit one. These situations will eventually present the attacker with a beautiful-looking
    Meterpreter shell. So, let''s try this on a standard application such as a VLC
    player, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/d90aa0ec-6293-4906-aace-250f6da334c9.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Let''s create a DLL file called `CRYPTBASE.dll`. The CryptBase file is a universal
    file shipped with most applications. However, the VLC player should have referred
    this directly from System32 instead of its current directory. To hijack the application''s
    flow, we need to place this file in the VLC player''s program files directory.
    Therefore, the check will not fail, and it will never go to System32\. This means
    that this malicious DLL will execute instead of the original one. Consider we
    have a Meterpreter at the target, and that we can see that the VLC player is already
    installed:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/4c850531-abc5-42b8-a5d9-8d08e740d3d7.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Let''s browse to the VLC directory and upload this malicious DLL into it:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/086a4bf2-dd80-4c22-a6dd-9cbfa4cca67c.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We can see that we used `cd` on the directory and uploaded the malicious DLL
    file. Let''s quickly spawn a handler for our DLL as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/e6a8324a-9f2d-4003-824d-c884bef7b513.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We have everything set. As soon as someone opens the VLC player, we will get
    a shell. Let''s try executing the VLC player on the user''s behalf as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/a96056b0-f2ec-411c-bdbc-5c5f33e712d1.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We can see that our DLL was successfullyÂ placed in the folder. Let''s run VLC
    through Meterpreter as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/df28cbb5-8b59-4c1f-9a98-695227a9a1d3.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Woo! We can see that as soon as we executed `vlc.exe`, we got another shell.
    Therefore, we now have control over the system so that as soon as someone executes
    VLC, we will get a shell back for sure. But hang on! Let''s look at the target''s
    side to see if everything went smoothly:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/3e6c9daa-7c87-41c3-b712-15b7f7c11b59.png)'
  prefs: []
  type: TYPE_IMG
- en: The target's end looks fine, but there is no VLC player. We will need to spawn
    the VLC player somehow because a broken installation may get replaced/reinstalled
    soon enough. The VLC player crashed because it failed to load the proper functions
    from the `CRYPTBASE.DLL` file as we used our malicious DLL instead of the original
    DLL file. To overcome this problem, we will use the backdoor factory tool to backdoor
    an original DLL file and use it instead of a plain Meterpreter DLL. This means
    that our backdoor file will restore proper functioning of the VLC player along
    with providing us with access to the system.
  prefs: []
  type: TYPE_NORMAL
- en: Using code caves for hiding backdoors
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The code caving technique is generally used when backdoors are kept hidden
    inside free space within the program executables and library files. The method
    masks the backdoor that is typically inside an empty memory region and then patches
    the binary to make a start from the backdoor itself. Let''s patch the CryptBase
    DLL file as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/36697485-50c9-4878-ac6f-074df9a61df7.png)'
  prefs: []
  type: TYPE_IMG
- en: The backdoor factory is shipped along with Kali Linux. We have used the `-f`
    switch to define the DLL file to be backdoored and the `-S` switch to specify
    the payload. The `-H` and `-P` denote the host and port, respectively, while the
    `-o` switch specifies the output file.
  prefs: []
  type: TYPE_NORMAL
- en: The `-Z` switch denotes skipping the signing process for the executable.
  prefs: []
  type: TYPE_NORMAL
- en: 'As soon as the backdooring process starts, we will be presented with the following
    screen:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/337532ab-03da-4f65-b725-8f1d376274b4.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We can see that the backdoor factory tool is trying to find a code cave in
    the DLL which has a length of `343` or more. Let''s see what we get:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/4453c970-0340-4f13-894a-7533bb238a22.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Bingo! We got three different code caves to place our shellcode in. Let''s
    choose any random one, say, number three:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/dc4558bf-9fa4-4ec0-8b1f-786b0839b95f.png)'
  prefs: []
  type: TYPE_IMG
- en: We can see that the DLL is now backdoored and patched, which means that the
    entry point of the DLL will now point to our shellcode in the `.reloc` section.
    We can place this file in the `Program Files` directory of the vulnerable software,
    which is VLC in our case, and it will start executing instead of crashing like
    the one we saw in the previous section that provided us with access to the machine.
  prefs: []
  type: TYPE_NORMAL
- en: Harvesting files from target systems
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Using file sweeping capabilities in Metasploit is effortless. The `enum_files`
    post exploitation module helps to automate file collection services. Let''s see
    how we can use it:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/07d774f6-a28b-472a-b333-e25b963bfe11.png)'
  prefs: []
  type: TYPE_IMG
- en: We can see that we used the `enum_files` post-exploitation module. We used `FILE_GLOBS`
    as `*.docx OR *.pdf OR *.xlsx`, which means that the search will occur on these
    three types of file formats. Next, we just set the session ID to `5`, which is
    nothing but our session identifier. We can see that as soon as we ran the module,
    it collected all the files found during the search and downloaded them automatically.
  prefs: []
  type: TYPE_NORMAL
- en: Using venom for obfuscation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In the previous chapter, we saw how we could defeat AVs with custom encoders.
    Let''s go one step ahead and talk about encryption and obfuscation in the Metasploit
    payloads; we can use a great tool called **venom** for this. Let''s create some
    encrypted Meterpreter shellcode, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/91066b52-9866-428a-90ff-6a856f18f156.png)'
  prefs: []
  type: TYPE_IMG
- en: 'As soon as you start venom in Kali Linux, you will be presented with the screen
    shown in the preceding screenshot. The venom framework is a creative work from
    Pedro Nobrega and Chaitanya Haritash (**Suspicious-Shell-Activity**), who worked
    extensively to simplify shellcode and backdoor generation for various operating
    systems. Let''s hit *Enter* to continue:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/dd0e21e5-1e9d-471e-869e-ccb982f36c43.png)'
  prefs: []
  type: TYPE_IMG
- en: 'As we can see, we have options to create payloads for a variety of operating
    systems, and we even have options to create multi-OS payloads. Let''s choose `2`
    to select `Windows-OS payloads`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/fbf36017-9e5e-4bf9-a046-87df0a73c49c.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We will see multiple agents supported on Windows-based operating systems. Let''s
    choose agent number `16`, which is a combination of C and Python with UUID obfuscation.
    Next, we will be presented with the option to enter the localhost, as shown in
    the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/ee093683-4780-4122-969a-12bd29abf0c5.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Once added, we will get a similar option to add LPORT, the payload, and the
    name of the output file. We will choose `443` as LPORT, the payload as `reverse_winhttps`,
    and any suitable name as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/9b9c1db1-9e56-45c5-aa80-c8cc30c27017.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Next, we will see that the generation process gets started and we will be presented
    with an option to select an icon for our executable as well:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/a9c2e20a-5fc8-4c0e-aacf-d74723501512.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The venom framework will start a matching handler for the generated executable
    as well, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/bf150214-64cf-4001-84e0-39d36814b758.png)'
  prefs: []
  type: TYPE_IMG
- en: 'As soon as the file is executed on the target, we will get the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/eb732d36-722d-4c13-b576-34afd8f80890.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We got access with ease. But we can see that the venom tool has implemented
    best practices such as the usage of an SSL certificate from Gmail, staging, and
    theÂ `shikata_ga_nai` encoder forÂ communication. Let''s scan the binary on [http://virscan.org/](http://virscan.org/)
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/d1e4214b-cba4-4af6-9778-c425206e5de5.png)'
  prefs: []
  type: TYPE_IMG
- en: We can see that the detection is almost negligible, with only one antivirus
    scanner detecting it as a backdoor.
  prefs: []
  type: TYPE_NORMAL
- en: Covering tracks with anti-forensics modules
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Metasploit does provide a good number of features to cover tracks. However,
    from a forensics standpoint, they still might lack some core areas which may reveal
    activities and useful information about the attack. There are many modules on
    the internet that tend to provide custom functionalities. Some of them do make
    it to the core Metasploit repos while some go unnoticed. The module we are about
    to discuss is an anti-forensics module offering a ton of features such as clearing
    event logs, clearing log files, and manipulating registries, .lnk files, .tmp,
    .log, browser history, **Prefetch Files** (**.pf**), RecentDocs, ShellBags, Temp/Recent
    folders, and also restore points. Pedro Nobrega, the author of this module, has
    worked extensively on identifying the forensic artifacts and created this module,
    keeping forensic analysis in mind. We can get this module from [https://github.com/r00t-3xp10it/msf-auxiliarys/blob/master/windows/auxiliarys/CleanTracks.rb](https://github.com/r00t-3xp10it/msf-auxiliarys/blob/master/windows/auxiliarys/CleanTracks.rb)
    and load this module in Metasploit using the `loadpath` command, as we did in
    the first few chapters, or by placing the file in the `post/windows/manage` directory.
    Let''s see what features we need to enable when we want to run this module:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/aebd50a3-36bb-4365-aad6-ae9b101f60e8.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We can see that we enabled `CLEANER`, `DEL_LOGS`, and `GET_SYS` on the module.
    Let''s see what happens when we execute this module:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/eac5f7f4-96a5-46e6-93ce-4385f2f8d15f.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We can see that our module is running fine. Let''s see what actions it''s performing
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/3dbefbc9-2025-43b8-ae9f-00aec11ec5ca.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We can see that the log files, temp files, and shellbags are being cleared
    from the target system. To ensure that the module has workedÂ adequately, we can
    see the followingÂ screenshot , which denotes a good number of logs before the
    module''s execution:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/2ee9201c-684c-4d49-9a87-45658b2d0afd.png)'
  prefs: []
  type: TYPE_IMG
- en: 'As soon as the module was executed, the state of the logs in the system changed,
    as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/9108095a-e613-4056-a18f-76cd046c038d.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The beautiful part of the module except those we saw in the preceding screenshot
    is its advanced options:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/0b4ee2ad-536f-4e6a-8292-8bdaf6246012.png)'
  prefs: []
  type: TYPE_IMG
- en: The `DIR_MACE` option takes any directory as input and modifies the modified,
    accessed, and created timestamps of the content that is present inside it. The
    `PANIC` option will format the NTFS system drive, and hence this can be dangerous.
    The `REVERT` option will set default values for most of the policies while the
    `PREVENT` option will try avoiding logs by setting such values in the system,
    which will prevent log creation and the generation of data on the target. This
    is one of the most desired functionalities, especially when it comes to law enforcement.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Throughout this chapter, we looked at specialized tools and techniques that
    can aid law enforcement agencies. However, all these techniques must be carefully
    practiced as specific laws may restrict you while performing these exercises.
    Nevertheless, throughout this chapter, we covered how we could proxy Meterpreter
    sessions. We looked at APT techniques for gaining persistence, harvesting files
    from the target systems, using venom to obfuscate payloads, and how to cover tracks
    using anti-forensic third-party modules in Metasploit.
  prefs: []
  type: TYPE_NORMAL
- en: 'Try the following exercises:'
  prefs: []
  type: TYPE_NORMAL
- en: Try using Metasploit aggregator once its fixed officially
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Complete the code cave exercise and try binding legit DLLs to the payloads without
    crash the original application
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Build your own post-exploitation module for DLL planting method
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In the upcoming chapter, we will switch to the infamous Armitage tool and will
    try setting up the red teaming environment while making the most of Armitage with
    custom scripts.
  prefs: []
  type: TYPE_NORMAL
