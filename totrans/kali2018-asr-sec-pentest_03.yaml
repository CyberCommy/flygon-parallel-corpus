- en: Penetration Testing Methodology
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: One of the most vital factors in conducting a successful pen test is the fundamental
    methodology. A lack of a formal methodology means no uniformity, and I am sure
    you don't want to be the one funding a pen test and watching the testers poking
    around cluelessly.
  prefs: []
  type: TYPE_NORMAL
- en: A methodology defines a set of rules, practices, and procedures that are pursued
    and implemented during the course of any information-security audit program. A
    penetration testing methodology defines a roadmap with practical ideas and proven
    practices that can be followed to assess the true security posture of a network,
    application, system, or any combination thereof.
  prefs: []
  type: TYPE_NORMAL
- en: While a penetration tester's skills need to be specific for the job, the manner
    in which it is conducted shouldn't be. That being said, a proper methodology should
    provide a meticulous framework for conducting a complete and truthful penetration
    test, but need not be obstructive—it should allow the tester to fully explore
    their hunches.
  prefs: []
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You must have Kali Linux and Nmap installed in your system as we will use them
    in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Penetration testing methodology
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'During scoping the type of test, it is important to know the different type
    of tests and what they consist of; this can be broken down into three groups:'
  prefs: []
  type: TYPE_NORMAL
- en: '**White-box penetration testing**: Here, the tester has complete access and
    in-depth knowledge of the system being tested. The testers work with the client
    and have access to insider information, servers, software running, network diagrams,
    and sometimes even credentials. This test type is normally used to test new applications
    before they are put into production and are routinely conducted as part of the
    **Systems Development Life Cycle** (**SDLC**); this helps to identify vulnerabilities
    and remedy them before rolling out to production.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Black-box penetration testing**: In the black-box penetration testing approach,
    only high-level information is made available to the tester. The tester is totally
    unaware of the system/network, making this testing type as close to the real world
    as possible. The tester had to acquire all of their information using creative
    methods within the agreement of the client. While this approach mimics the real
    world, sometimes it might miss some areas while testing. If not scoped properly,
    it can be very costly to the client as well as time-consuming. The tester would
    explore all attack vectors and report their findings. The tester must be careful
    because things can break during this type of test.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Gray-box penetration testing**: In the middle of the two extremes lies the
    gray-box penetration testing; only limited information is available to the tester
    to attack the system externally. These tests are usually run within a limited
    scope and with the tester having some information about the system.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Regardless of which kind of test is chosen, it is important to also follow
    a standard or guidelines to ensure best practices. We will discuss some of the
    most popular standards in more detail:'
  prefs: []
  type: TYPE_NORMAL
- en: OWASP testing guide
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: PCI penetration testing guide
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Penetration Testing Execution Standard
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: NIST 800-115
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Open Source Security Testing Methodology Manual** (**OSSTMM**)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: OWASP testing guide
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The **Open Web Application Security Project** (**OWASP**) is an open source
    community project that develops software tools and knowledge-based documentation
    that helps people secure web applications and web services. OWASP is an open source
    reference point for system architects, developers, vendors, consumers, and security
    professionals involved in designing, developing, deploying, and testing the security
    of web applications and web Services. In short, the OWASP aims to help everyone
    and anyone to build more secure web applications and web services. One of the
    best aspects of the OWASP testing guide is its comprehensive description of determining
    the business risk presented by findings. The OWASP testing guide rates risk based
    on the impact it could have to the business, and the chance it will occur. By
    those aspects described in the OWASP testing guide, the overall risk rating of
    a given finding can be found out, which gives the organization appropriate guidance
    based on the result of their findings.
  prefs: []
  type: TYPE_NORMAL
- en: 'The OWASP testing guide primarily focuses on the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Techniques and tools in web-application testing
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Information-gathering
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Authentication testing
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Business logic testing
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Data-validation testing
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Denial-of-service attack testing
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Session-management testing
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Web services testing
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: AJAX testing
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Risk severity
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Likely hood of risk
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: PCI penetration testing guide
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Things just got real for companies that need to comply with PCI requirements.
    Not only is PCI v3.2 mandated, the PCI Standards Security Council has issued guidance
    on using penetration testing as part of vulnerability-management programs.
  prefs: []
  type: TYPE_NORMAL
- en: In April 2016, the **Payment Card Industry Security Standards Council** (**PCI
    SSC**) released **PCI Data Security Standard** (**PCI DSS**) version 3.2\. With
    the updates came clarification to requirements, additional guidance, and seven additional new
    requirements.
  prefs: []
  type: TYPE_NORMAL
- en: To address issues related to cardholder data breaches and protect against existing
    exploits, PCI DSS v.3.2 includes various changes, most of which are specific to
    service providers. This includes new penetration testing requirements that now
    require segmentation testing for Service Providers to now be performed at least
    every six months or after any significant changes to segmentation controls/methods.
    In addition, there are several requirements to ensure that service providers are
    continuously monitoring and maintaining critical security controls throughout
    the year.
  prefs: []
  type: TYPE_NORMAL
- en: Penetration Testing Execution Standard
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Penetration Testing Execution Standard consists of seven main sections.
    They cover everything concerning a penetration test – from the preliminary communication
    and effort behind a pen test; through the information-gathering and threat-modeling
    phases where testers are working behind the scenes to get a better understanding
    of the tested corporation; through vulnerability research, exploitation, and post-exploitation,
    where the practical security knowledge of the testers come to play and combine
    with the business intelligence; and finally to reporting, which outlines the entire
    procedure in a format that the customer can understand.
  prefs: []
  type: TYPE_NORMAL
- en: This version can be considered v1.0 as the core elements of the standard are
    solidified, and have been field-tested for over a year through the industry. v2.0
    is in the making, and will provide more granular work in terms of levels – as
    in the intensity levels at which each of the elements of a penetration test can
    be performed. As no pen test is like another, and testing will range from web
    application or network tests to a full-on red-team black-box engagement, said
    levels will enable an organization to outline how much complexity they expect
    their testers to unveil, and enable the tester to step up the intensity in the
    areas that the organization deems necessary. Some of the initial work on levels
    can be seen in the intelligence—gathering section.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following are the main sections defined by the standard as the basis for
    executing penetration tests:'
  prefs: []
  type: TYPE_NORMAL
- en: Pre-engagement interactions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Intelligence-gathering
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Threat-modeling
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Vulnerability analysis
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Exploitation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Post-exploitation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Reporting
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: NIST 800-115
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The **National Institute of Standards and Technology Special Publication** (**NIST-SP-800-115**)
    is the technical guide to information-security testing and assessment. The publication
    is produced by **Information Technology Laboratory** (**ITL**) at NIST.
  prefs: []
  type: TYPE_NORMAL
- en: The guide defines a security assessment as the process of determining how effectively
    an entity being assessed meets specific security requirements. As you review the
    guide, you will see it contains a great amount of information for testing. While
    the document does not get updated as often as we would like, it is a viable resource
    for us as a reference when building our methodology for testing.
  prefs: []
  type: TYPE_NORMAL
- en: They offer practical guidelines for designing, implementing, and maintaining
    technical information, security tests, and examination processes and procedures,
    by covering the key element or technical security-testing and examination.
  prefs: []
  type: TYPE_NORMAL
- en: These can be used for several reasons, such as finding vulnerabilities in a
    system or network and verifying compliance with a policy or other requirements.
    The guide is not intended to present an all-inclusive information-security testing
    and examination program but rather an outline of key elements of technical security
    testing and examination, with a weight on specific technical techniques, the benefits
    and limitations of each, and recommendations for their use.
  prefs: []
  type: TYPE_NORMAL
- en: The NIST 800-115 standard provides a great map for pen testers that is an accepted
    industry standard. This model is a great way to ensure that your penetration testing
    program complies with best practices.
  prefs: []
  type: TYPE_NORMAL
- en: Open Source Security Testing Methodology Manual
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The OSSTMM isn''t the easiest or most fun document to read but it''s full of
    advanced security information that''s practical and relevant. It''s also the best-known
    operational security manual on the planet with about half a million downloads
    each month for one particular reason: those who figure it out have a distinct
    security advantage, as its instructions are about a decade ahead of the current
    buzz in the security industry.'
  prefs: []
  type: TYPE_NORMAL
- en: The goal of the OSSTMM is to put forth a standard for internet security testing.
    It is intended to form a complete baseline for testing that, when followed, ensures
    a thorough and comprehensive penetration test has been undertaken. This should
    enable a client to be convinced of the level of technical assessment independent
    of other organization concerns, such as the corporate profile of the penetration
    testing provider.
  prefs: []
  type: TYPE_NORMAL
- en: General penetration testing framework
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'While some of these standards vary in their number of requirements, they can
    be loosely be broken down into the following phases:'
  prefs: []
  type: TYPE_NORMAL
- en: Reconnaissance
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Scanning and enumeration
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Gaining access
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Escalation of privileges
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Maintaining access
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Covering your tracks
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Reporting
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let's look at each phase in more detail.
  prefs: []
  type: TYPE_NORMAL
- en: Reconnaissance
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A huge portion of your penetration testing time will be spent in this first
    critical part of the test. While some break down this phase into active and passive,
    I prefer to clump them together as the data acquired would speak for itself.
  prefs: []
  type: TYPE_NORMAL
- en: Reconnaissance is the systematic approach where you attempt to locate and gather
    as much information on your target, this is otherwise known as foot-printing.
  prefs: []
  type: TYPE_NORMAL
- en: 'The techniques involved in foot-printing include but are not limited to the
    following:'
  prefs: []
  type: TYPE_NORMAL
- en: Social engineering (this is great fun)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Internet research (Google, Bing, LinkedIn, and so on)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Dumpster-diving (getting your hands dirty)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Cold-calling
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It's basically any way you can acquire any information on your target, so be
    creative. So, what are we looking for?
  prefs: []
  type: TYPE_NORMAL
- en: 'Well, every bit of info is useful, but it needs to be prioritized and keep
    in mind that something that you may not find useful at first just might come in
    handy somewhere else. But for starters the important things would be the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Contact names within the organization
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Other locations of the organization (if any)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Email addresses (which we could later used for phishing, whaling, or spear-phishing)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Phone numbers of important figures within the company (these can be used for
    phishing)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Systems used within the company such as Windows or Linux
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Job postings
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Employee CVs (past/present)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: While all of this might be self-explanatory, job postings seems a bit strange;
    however, let's say you come across one for a system admin, and based on the requirements
    that they are asking for the position it would provide, you with a lot of information
    about their internal systems. This can then be used to come up with attack vectors
    or to find exploits.
  prefs: []
  type: TYPE_NORMAL
- en: Employee CVs work in a similar manner; by knowing what their employees' skill
    sets are, you can determine what kind of systems they may or may not be running.
  prefs: []
  type: TYPE_NORMAL
- en: While this might seem tedious, keep in mind that the more information you have,
    the more capable you would be when making decisions later. I personally find myself
    coming back to this phase throughout the engagement.
  prefs: []
  type: TYPE_NORMAL
- en: Scanning and enumeration
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Without a doubt, almost every security professional wants to jump straight into
    exploiting boxes, but without understanding the basics, the exploits, and most
    importantly, the environment they are in. This can lead to mistakes or worse,
    such as breaking things in a live environment.
  prefs: []
  type: TYPE_NORMAL
- en: Scanning and enumeration allows a pen tester to understand their environment.
    The result one gets from these scans gives the red team a starting point to leverage
    vulnerabilities in different systems. Scanning is finding all available network
    services (TCP and UDP) running on the targeted hosts. This can help a red teamer
    discover whether SSH/Telnet is open to try a brute-force login and discover file
    shares to download data from, websites that may have vulnerabilities, or printers
    that may hold usernames and passwords. Enumeration is the discovery of services
    on the network to have a greater sense of information provided by the network
    services.
  prefs: []
  type: TYPE_NORMAL
- en: Scanning
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When there is a doubt that mitigating controls, such as firewalls, intrusion-detection
    systems, and file-integrity monitoring, a full penetration test is ideal. Scanning
    will locate individual vulnerabilities; however, penetration testing will attempt
    to verify that these vulnerabilities are exploitable within the target environment.
    Let's have a look into each of the types.
  prefs: []
  type: TYPE_NORMAL
- en: ARP scanning
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: By using ARP broadcast, we can take advantage of getting IP information. Each
    ARP broadcast frame requests who has which IP address—the IP address is increased
    by one each time. Once a host has that IP address, it will respond to the request
    with the requested IP address and its MAC address.
  prefs: []
  type: TYPE_NORMAL
- en: ARP scanning is an effectively fast method, and typically won't set off any
    alarms; the issue with this is that ARP is a layer 2 protocol so it can't go over
    network boundaries. Meaning if the red team is on network `192.100.0.0/24` and
    your target(s) is on network `10.16.X.0/24`, you can't send ARP requests to `10.16.X.0/24`.
  prefs: []
  type: TYPE_NORMAL
- en: The network mapper (Nmap)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Nmap is the top dog in port scanning and enumeration. Covering all options
    and modules of Nmap in this guide is outside the scope of this book; instead,
    we will cover the scans that I mostly use when testing. But first, here''s some
    info on port states:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Open**: An application on the target machine is listening for connections/packets
    on that port'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Closed**: Ports have no application listening on them, though they could
    open up at any time'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Filtered**: A firewall, filter, or other network obstacle is blocking the
    port so that Nmap cannot tell whether it is open or closed'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following are the Nmap options available:'
  prefs: []
  type: TYPE_NORMAL
- en: '`O`: OS detection'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`p`: Port scan'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`p-`: Scan all ports (`1-65535`)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`p 80,443`: Scan port `80` and ``443``'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`p 22-1024`: Scan ports `22` through `1024`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`top-ports X`: `X` is a number and it will scan `X` number of the top popular
    ports; I usually use 100 for a quick scan'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`sV`: Service-detection'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Tx`: Set scan speed'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`T1`: Really slow port scan'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`T5`: Really fast port scan (really noisy)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`sS`: Stealth scan'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`sU`: UDP scan'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`A`: OS-detection, version-detection, script-scanning, and traceroute'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Nmap port scanner/TCP scan
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This service will start by initiating (`SYN`) connection on each port on a
    target host. If the port is open, the host will respond with (`SYN`, `ACK`). The
    connection is closed with a reset (`RST`) sent by the initiator:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/e7b85063-c1d9-4dd4-b6c6-cd7bf039fe9b.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Nmap half-open/stealth scan
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This option will start by sending (`SYN`) a connection on each port on a target
    host. If the port is open, the host will reply to the request with (`SYN`, `ACK`).
  prefs: []
  type: TYPE_NORMAL
- en: If the port is not open (that is, closed), the host will answer with a connection
    reset (`RST`).
  prefs: []
  type: TYPE_NORMAL
- en: If no response is received, it is assumed that the port is filtered. The difference
    between a TCP scan and a stealth scan is that the connection initiator will not
    respond with an acknowledgement (`ACK`) packet. What makes this an effective scan
    is that since a full connection wasn't established it won't be logged.
  prefs: []
  type: TYPE_NORMAL
- en: Nmap OS-detection
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This option will use various techniques to try to identify the operating system
    type and version. This is very useful for vulnerability-detection. Doing a quick
    search on the OS version will show known vulnerabilities and exploits for the
    operating system to give you a better lay of the land with the help of the following
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Nmap service-detection
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Similar to OS-detection, this options tries to determine the service and version
    as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '![](img/8793c2c4-5088-43c1-ae9e-c59c7214c887.png)'
  prefs: []
  type: TYPE_IMG
- en: Nmap ping sweeps
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This option will send an ICMP request to every IP address in a given range.
    If the host is up and it is configured to respond to ping requests, it will reply
    with an ICMP reply, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '![](img/8a7a6fc0-b8f7-4ced-97eb-0c6fa195f82d.png)'
  prefs: []
  type: TYPE_IMG
- en: Enumeration
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Enumeration serves as a base for all of the attacks and weaknesses found in
    the web applications. The development view merges these attacks and weaknesses
    into vulnerabilities and categorizes them according to their occurrence in the
    relative development phase. This could be a design, implementation, or deployment
    phase. There are several enumeration techniques; we will have a look at a few.
  prefs: []
  type: TYPE_NORMAL
- en: SMB shares
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**SMB** stands for **Server Message Block**. It''s a file-sharing protocol
    that was invented by IBM and has been around since the mid-1980s. The SMB protocol
    was designed to allow computers to read and write files to a remote host over
    a **Local Area Network** (**LAN**). The directories on the remote hosts made available
    via SMB are called shares.'
  prefs: []
  type: TYPE_NORMAL
- en: This technique has several benefits, which we will discuss.
  prefs: []
  type: TYPE_NORMAL
- en: DNS zone transfer
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: DNS is my favorite protocol because it's a treasure trove of information. If
    you can request a zone transfer, the tester can get all the DNS records for a
    particular zone. This will identify the hostname-to-IP-address relationship of
    all hosts in the network. If the attacker has any knowledge of the network scheme,
    this can be the fastest method to discover all hosts on a network. DNS can also
    give rise to services that are running on the network, such as mail servers.
  prefs: []
  type: TYPE_NORMAL
- en: DNSRecon
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'DNSRecon is my go-to tool for DNS recon and enumeration. In this example, we
    will request a zone transfer from `domain.foo`. The DNS server running at `domain.foo`
    will return all of the records that it is aware of for `domain.foo` and any subdomains
    associated with it. This gives us the name of servers with their respective hostnames
    and IP addresses for the domain. It returned all DNS records, which were `TXT
    records (4)`, `PTR records (1)`, `MX records for mail servers (10)`, `IPv6 A records
    (2)`, and `IPv4 A records (12)`. The records provide some really juicy information
    about the network. One record shows the IP address of their DC office, another
    shows the IP address of their firewall appliance, another shows that they have
    a VPN and its IP address, and another record shows the IP address of the mail
    server login portal, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '![](img/ccd1dbba-cc78-45ea-8235-53a5ac4a116b.png)'
  prefs: []
  type: TYPE_IMG
- en: SNMP devices
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Simple Network Management Protocol**, known as **SNMP** for short, is used
    to log and manage network devices and applications. SNMP can be used to configure
    devices and applications remotely, but if left unsecured, it can also be used
    to pull down information about said application and devices. This information
    can be used to get a better understanding of the network:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '`-c`: This is a community string to authenticate to a device.'
  prefs: []
  type: TYPE_NORMAL
- en: Packet captures
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Capturing packets between two hosts can be very helpful when diagnosing networking
    issues, credential-sniffing, or for fun if you like looking at traffic.
  prefs: []
  type: TYPE_NORMAL
- en: tcpdump
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This is a command-line utility used to sniff particular types of traffic and
    data off the wire:'
  prefs: []
  type: TYPE_NORMAL
- en: '`-i eth0`: Select an interface to listen on'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`port 80`: Select a port to listen on'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`host 172.16.1.1`: Only collect traffic going to/from host'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`src`: Data coming from'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`dst`: Data going to'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-w output.pcap`: Capture traffic to file on disk'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Wireshark
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This is a GUI utility used to sniff traffic off the wire, as depicted in the
    following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '`ip.addr/ip.dst/ip.src == 172.16.1.1`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`tcp.port/tcp.dstport/tcp.srcport == 80`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`udp.port/udp.dstport/udp.srcport == 53`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/04021e39-e0bc-475e-ab75-f0b2fdfad2ec.png)'
  prefs: []
  type: TYPE_IMG
- en: Gaining access
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: It is in this phase that pen testers try to get a foothold into the company's
    internal network. Nowadays, spear-phishing seems to a very common and effective
    way of accomplishing this. A well-crafted spear-phishing campaign can be launched
    against the company and create a convincing scenario based on the information
    gathered during the reconnaissance phase.
  prefs: []
  type: TYPE_NORMAL
- en: Gaining access can also include using exploits/credentials on a remote service
    to log into a system and then execute a payload.
  prefs: []
  type: TYPE_NORMAL
- en: Metasploit and PowerShell Empire can aid in this as they both create payloads,
    also known as stagers. Once the stager is executed on the target, it runs in memory.
    This style leaves very little forensic evidence behind. The other case is pushing
    a binary to the remote system and executing the binary via the command line, which
    can be equally effective. This approach is faster and doesn't rely on an internet
    download to be successful.
  prefs: []
  type: TYPE_NORMAL
- en: Exploits
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Sometimes the tester may come across services that can be exploited. An exploit
    may be the means of initial access; just be sure that the exploit is 100% reliable.
    Also, running an exploit multiple times may crash the system. This option for
    initial access is typically used with extreme care, unless you have tested it
    and know what you are doing.
  prefs: []
  type: TYPE_NORMAL
- en: It's always SSH! Maybe it's not always, but I have never seen/can remember another
    service being used, outside of telnet, which should not be used anyways. SSH goes
    with Linux like peanut butter goes with jelly.
  prefs: []
  type: TYPE_NORMAL
- en: Exploits for Linux
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Linux exploits are not typically targeted toward the operating system itself,
    but rather the services that are running. Here you will find a list of common
    exploits to run against Linux boxes. Keep in mind that exploits will vary across
    distros and service versions:'
  prefs: []
  type: TYPE_NORMAL
- en: CVE-2018-1111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Red Hat Linux DHCP Client Found Vulnerable to Command Injection Attacks
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: CVE-2017-7494
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Exploits for Windows
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Windows exploits are typically targeted toward listening services of the operating
    system. Here is a list that targets the SMB service that runs on port `445` of
    Windows:'
  prefs: []
  type: TYPE_NORMAL
- en: Eternalblue – MS17-010
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: MS08-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: MS03-026
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following are some tools often used by pen testers:'
  prefs: []
  type: TYPE_NORMAL
- en: 'PsExec:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'PsExec is a tool included in the Sysinternals toolkit; it is used for remote
    management and is a popular tool among pen testers, system admins, and hackers.
    The PsExec binary is usually copied to the `$admin` share on the machine, then
    it uses remote management to create a service on the remote machine. Keep in mind
    that PsExec requires admin privileges on the remote machine:'
  prefs: []
  type: TYPE_NORMAL
- en: Download Sysinternals
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open the PowerShell prompt
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Type `cd <Sysinternals directory>`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Type `.\PSexec \\<IP addr of remote machine> -u <user> -p <password> <cmd>`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The following screenshot depicts the output obtained:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/dae8e366-79c3-4495-b2e7-d7480040a970.png)'
  prefs: []
  type: TYPE_IMG
- en: '**Impacket**: A collection of Python classes for working with network protocols.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The initial setup can be done as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the Terminal
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Type `cd /tmp`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Type `git clone https://github.com/CoreSecurity/impacket.git`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Type ``pip install ``
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Use the following commands to enable PSexec, WMI, and SMBexec on Impacket:'
  prefs: []
  type: TYPE_NORMAL
- en: '**PSexec**:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'The output of the preceding command is shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/c003864d-8685-4e44-958b-99db69f08480.png)'
  prefs: []
  type: TYPE_IMG
- en: '**WMI**:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'The output of the preceding command is shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/f2e5b4ed-0d69-47a3-a4b4-89a06785013c.png)'
  prefs: []
  type: TYPE_IMG
- en: '**SMBexec**:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'The output of the preceding command is shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/c8fb7f96-8772-48ee-8415-ee87b72b1662.png)'
  prefs: []
  type: TYPE_IMG
- en: '**PS-Remoting**:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'To enable PS-Remoting on a target machine, perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Open PowerShell as administrator on the target machine
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Type the following: ``powershell -NoProfile -ExecutionPolicy Bypass -Command
    "iex ((new-object net.webclient).DownloadString('https://raw.githubusercontent.com/ansible/ansible/devel/examples/scripts/ConfigureRemotingForAnsible.ps1'))"``
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enable PS-Remoting
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Type `winrm set winrm/config/client/auth '@{Basic="true"}'`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Type `winrm set winrm/config/service/auth '@{Basic="true"}'`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Type `winrm set winrm/config/service '@{AllowUnencrypted="true"}'`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'To enable PS-Remoting into a target machine, perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Open PowerShell.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Type `$options=New-PSSessionOption -SkipCACheck -SkipCNCheck`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Type `$cred = Get-Credential`. This will prompt you for credentials.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Type `Enter-PSSession -ComputerName <hostname> -UseSSL -SessionOption $options
    -Credential $cred`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'You will get to see the configuration details, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/75e0a572-9ac1-45f7-bfd7-b6f83bfc2ee6.png)'
  prefs: []
  type: TYPE_IMG
- en: In a similar manner, we will also see how to enable WMI on remote target and
    use WMI to access a remote target
  prefs: []
  type: TYPE_NORMAL
- en: '**WMI**: Enabling WMI on a remote target can be done by open PowerShell as
    Administrator and run the following command:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'To use WMI to access a remote target can be done by open PowerShell, type the
    following command and observe the output as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '`wmic /node:<target IP addr> /user:<username> process call create "cmd.exe
    /c <command>"`'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/d06895ad-278a-4745-96eb-05fe23feaaa5.png)'
  prefs: []
  type: TYPE_IMG
- en: Escalating privileges
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Once a machine is compromised, any access obtained is usually with low privileges.
    As the idea of any pen test is to simulate a real-world attack, this includes
    looking for sensitive information, which is normally kept on restricted servers;
    the tester would need to find ways to escalate their privileges. In a Windows
    **Active Directory** (**AD**) environment, this would mean getting access to a
    Domain Admin account.
  prefs: []
  type: TYPE_NORMAL
- en: Maintaining access
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Once a foothold is established (that is, remote access), it can be removed very
    quickly, as systems can be rebooted and users can log out. This is where persistent
    access comes in; it can be achieved in a number of ways. The best strategy for
    the maintenance of persistent access is to use multiple techniques simultaneously.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, one can plant a physical back door (Dropbox) into the network
    that can later be accessed within their wireless range. A more creative way is
    to set up a scheduled task on the compromised machine to run at boot and to execute
    periodically, for example once a day:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/0ae73856-6260-4e95-8b96-aea0dfb0caf3.png)'
  prefs: []
  type: TYPE_IMG
- en: Covering your tracks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: All engagements should be authorized by the client, no matter what. This is
    not to say that after all of the scanning and exploiting is over one packs up
    and goes home; someone still has to present the findings to the client in a manner
    they can understand. But before this can happen, we must clean up the exploits
    or tools we left in the environment. Sometime this may or may not mean removing
    binaries or editing logs, I say editing because any sysadmin who sees no logs
    should get concerned very fast. As both Windows and Linux have their respective
    log mechanisms and they are very well-documented, there is no need to cover them
    here. I suggest you keep track of what you have changed on the system and be creative
    when you need to hide something; use system services names or usernames that would
    fit in to the accounts, for example, don't name the account `EliteHAK3R`.
  prefs: []
  type: TYPE_NORMAL
- en: Reporting
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This brings us to the final, and some would say most boring, part of the test;
    however, if you followed the previous phases, reporting shouldn't be tedious or
    difficult. I try to make notes as I go along, either on paper or using Dradis,
    a built-in Kali tool, which can be summoned with `service dradis start`. Keep
    in mind that it is a web service, so anyone on the LAN would be able to access
    it using the `https://IP of kali machine:3004` URL – at first run, it will prompt
    you to set a password.
  prefs: []
  type: TYPE_NORMAL
- en: Dradis allows you to import files from Nmap, NESSUS, NEXPOSE, and a few others,
    this makes taking notes when working with teammates hassle-free; you can easily
    share info and keep updated with the most recent results from scans.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter introduced you to  the various methodologies in penetration testing
    for the purpose of planning and scoping the penetration test. The next chapter
    will take you through discovering and gathering information and data about targets
    and environments using both passive and active techniques.
  prefs: []
  type: TYPE_NORMAL
