- en: Chapter 5. Learning to Love Forms
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
- en: Displaying placeholder text
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding autofocus to form fields
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Styling forms using HTML5 and CSS3
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using the email input type
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding a URL using the URL input type
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using the number tag
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using the range tag
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a search field
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a picker to display date and time
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '"We have met the enemy and he is us." - Pogo'
  id: totrans-12
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Boring. Tedious. Mindless. Why do web users' eyes glaze over and minds go numb
    when presented with an interactive form online? This author believes at least
    part of the problem lies with the information architect who arranged the form
    fields and — to a lesser degree — with the front-end developer who coded it.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
- en: Admittedly, forms aren't sexy. But if you're a web developer (and chances are,
    if you're reading this, you are) then odds are at some point in your career you
    were asked to mark up and style some sort of form. If you dreaded coding that
    form, imagine the amount of dread you aided in creating in your user. That ends
    now.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
- en: You're mature and seeking new challenges worthy of that maturity. And if we
    can stop worrying and learn to love the form, the odds are better that our audiences
    will actually enjoy them too.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter we'll look at real-life examples of how HTML5 is used for interactive
    forms, including displaying placeholder text, adding autofocus to form fields,
    styling forms using HTML5 and CSS3, using the e-mail input type, adding a URL
    using the URL input type, using the number tag, using the range tag, creating
    a search field, and creating a picker to display date and time.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
- en: Now let's get cooking!
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
- en: Displaying placeholder text
  id: totrans-18
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The first new HTML5 form ability we want to check out is the native ability
    to display placeholder text.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  id: totrans-20
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We have all used — and even created — form placeholder text before. But now
    with HTML5 we're going to do it a bit differently and more efficiently. The Packt
    Publishing website features the ability to search the entire site or search only
    book/eBooks.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/1048_05_01.jpg)'
  id: totrans-22
  prefs: []
  type: TYPE_IMG
- en: Once the user clicks on one of those two form fields, the placeholder text disappears.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/1048_05_02.jpg)'
  id: totrans-24
  prefs: []
  type: TYPE_IMG
- en: 'This is accomplished via a traditional method of using the value attribute
    to display the placeholder text:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Using the `placeholder` attribute instead of `value` results in:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: How it works...
  id: totrans-29
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `placeholder` attribute can take the place of the `value` attribute to display
    placeholder text in a form. In this case, developers added an `onclick` event
    handler to accommodate older browsers. This is another case of superior semantics
    adding additional meaning to a tag.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  id: totrans-31
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Remember — and plan for — the fact that the placeholder text itself will disappear
    when the user clicks into each form field. If the user clicks away without filling
    out the form field, the `placeholder` will reappear.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
- en: Text only
  id: totrans-33
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `placeholder` attribute can contain only text. We cannot include additional
    markup, images, or any other element there.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
- en: Embrace italics
  id: totrans-35
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: By default, the placeholder text will appear in italics. There's no good way
    to change this, unfortunately. Rather than beat your head against the wall, know
    this up front and convince your designer that text *should* be italics and have
    that person concentrate and focus on things that really matter.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
- en: Browser support
  id: totrans-37
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Web browsers that support the new `placeholder` attribute.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
- en: '![Browser support](img/1048_05_03.jpg)'
  id: totrans-39
  prefs: []
  type: TYPE_IMG
- en: See also
  id: totrans-40
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Build Guild is monthly gathering of web people around the nation. Built with
    HTML5 (and using the placeholder attribute!) at [http://buildguild.org](http://buildguild.org),
    developers can get together and chat over drinks every few weeks. There are already
    local chapters in cities such as: Abilene, TX; Albany, NY; Billings, MT; Grand
    Rapids, MI; Hartford, CT; Louisville, KY; Milwaukee, WI; New York City, NY; Philadelphia,
    PA; Pittsburgh, PA; Saint Louis, MO; Salem, MA.'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
- en: If there isn't a Build Guild in your area yet, create one! Contact the site
    owners at [http://buildguild.org](http://buildguild.org) about getting started!
    Mustaches optional.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
- en: Adding autofocus to form fields
  id: totrans-43
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the past, we have had to rely on JavaScript to add input focus to specific
    form fields, but not anymore! Now we have the ability to do it natively in HTML5!
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  id: totrans-45
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Ally Creative at [http://allycreative.net/contact](http://allycreative.net/contact)
    effectively uses the `autofocus` ability in their contact form.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/1048_05_04.jpg)'
  id: totrans-47
  prefs: []
  type: TYPE_IMG
- en: How it works...
  id: totrans-48
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Here''s how they did it:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Simply by applying the `autofocus` attribute to the form field for the contact
    name and adding an appropriate style to change the background color, developers
    at Ally Creative created a slick, interactive form that's easy for users to complete.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  id: totrans-52
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The new HTML5 `autofocus` attribute is intended to work on all form controls.
    So no matter whether you are collecting a user's name, address, phone number,
    or some other bit of data, use the ability to `autofocus` smartly!
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
- en: One per page
  id: totrans-54
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Remember that you can only set one form field per page to `autofocus`.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
- en: Older browsers
  id: totrans-56
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In a moment, you'll see only two modern browsers currently support `autofocus`.
    Luckily, older browsers simply ignore the attribute. Consider tools like `autofocus`
    as enriching the user experience for those who can see it without harming or degrading
    the user experience for those using lesser browsers. No harm, no foul.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
- en: Browser support
  id: totrans-58
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Web browsers that support the new `autofocus` attribute:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
- en: '![Browser support](img/1048_05_05.jpg)'
  id: totrans-60
  prefs: []
  type: TYPE_IMG
- en: See also
  id: totrans-61
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Mozilla''s "People of HTML5" video series featured many of the leading voices
    of the HTML5 movement. Remy Sharpe, author of the "HTML5 *Shim"* we''ve examined
    and used elsewhere, is a JavaScript craftsman. It should come as no surprise when
    he described his favorite aspects of the new HTML5 specification:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
- en: '"For me, the most exciting aspects of HTML5 is the depth of the JavaScript
    APIs. It''s pretty tricky to explain to Joe Bloggs that actually this newly specced
    version of HTML isn''t mostly HTML; it''s mostly JavaScript."'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
- en: 'Read and watch the full interview at: [http://hacks.mozilla.org/2011/01/people-of-html5-remy-sharp](http://hacks.mozilla.org/2011/01/people-of-html5-remy-sharp).'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
- en: Styling forms using HTML5 and CSS3
  id: totrans-65
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'One of the most simple but beautiful examples of using HTML5 and CSS3 for a
    form the author has seen is by Canada-based FoundationSix at: [http://foundationsix.com/contact](http://foundationsix.com/contact).
    Here''s how they did it.'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
- en: '![Styling forms using HTML5 and CSS3](img/1048_05_06.jpg)'
  id: totrans-67
  prefs: []
  type: TYPE_IMG
- en: How to do it...
  id: totrans-68
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The team at FoundationSix starts with a fairly straightforward contact form
    markup. Note the lengthy country drop-down list was omitted from this example
    for the sake of space.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  id: totrans-70
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[PRE3]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The team provides a special stylesheet just for this contact page. Notice how
    clean it is, defining only the necessary values while omitting any cruft.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: There's more...
  id: totrans-74
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For the most part, adding Cascading Style Sheets to HTML5 is just like adding
    CSS to XHTML or previous versions of HTML. It's just that now we have additional
    tags of which to keep track.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  id: totrans-76
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Remember that HTML5 and CSS3 are two different things. People often lump them
    together — just like they did with the term "Web 2.0" until that term finally
    lost all its meaning (if indeed it ever had any). Will we abuse the term "HTML5"
    so badly that it eventually loses all meaning? Or has it already happened? Only
    you can prevent forest fires.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
- en: Older browsers
  id: totrans-78
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'We do need to be mindful of two things when styling HTML5:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
- en: How to style new elements when they are not supported by all browsers yet.
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What the fallback looks like when a new HTML5 element is not supported in any
    given browser.
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Test, test, test
  id: totrans-82
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: When styling HTML5, the key is to test, test, test in browsers. For the good
    of our clients and the good of web development as a whole, we are compelled to
    understand what happens in browsers and adjust based on what we experience.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
- en: About pseudo classes
  id: totrans-84
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'CSS3 offers a few new pseudo classes used to differentiate required form fields
    from ones that aren''t. We''ll tie these in with built-in HTML5 form validation:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
- en: '`:required` - lets us style fields based on what''s required or not'
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`:optional` - lets us style fields based on what''s required or not'
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`:valid` - will work with form validation'
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`:invalid` - will work with form validation'
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`:in-range` - works with minimum and maximum characters like a phone number'
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`:out-of-range` - works with minimum and maximum characters like a phone number'
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: See also
  id: totrans-92
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If you'd like to play with the ability to use CSS3 to style HTML5, the folks
    at Blue Griffon created [http://bluegriffon.org](http://bluegriffon.org), a new
    What-You-See-Is-What-You-Get content editor for the web. Available in multiple
    languages, the tool allows users to work with web standards without having to
    think about code too much.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
- en: Using the e-mail input type
  id: totrans-94
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: One of the many new input types that HTML5 supports is `email`. How many times
    have you built a form using `<input type="text" />` intending to collect an e-mail
    address? Now we can use something much more semantically correct! Later, we'll
    see how this supports form validation as well.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  id: totrans-96
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The previous FoundationSix example could be easily converted to this new input
    type. Instead of:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'We could simply change the input type and end up with:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Visually, the `<input type="email" />` tag looks identical to `<input type="text"
    />`. The difference is what the browser does with the information.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  id: totrans-102
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Changing the type from `"text"` to `"email"` allows newer browsers to validate
    whether what the user has input is actually a valid e-mail address. Note that
    the server can't determine whether the email account is active, only if the address
    itself is well formed.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  id: totrans-104
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: So what happens if the e-mail address submitted isn't valid? The truth is the
    jury is still out. The Opera browser has an experimental error message, and Firefox
    has its own experimental add-on. Unfortunately this is a gray area with which
    we're going to have to be patient until browsers handle it in a consistent manner.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
- en: Browser support
  id: totrans-106
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: But here's the cool thing about `<input type="email" />:` Browsers support it!
    Well, sort of. Even browsers that don't understand `<input type="email" />` will
    default back to `<input type="text" />`, so it still works. Brilliant!
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
- en: No JavaScript
  id: totrans-108
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: As we'll see in other instances, `<input type="email" />` in HTML5 allows us
    to stop using JavaScript hacks to achieve a similar result. We're all done using
    the behavior layer to make up for deficiencies in the markup or presentation layers.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
- en: Validation evolution
  id: totrans-110
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Form validation has evolved from the beginnings of the Internet. In the earliest
    days, developers were forced to use technology like CGI scripts to submit forms
    and completely redraw the results page. It was only then, after the page had been
    submitted to the server, that the user had any idea of their information was accepted.
    If it wasn't, they had to start over again.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
- en: After time, developers learned to use AJAX to perform client-side validation
    for forms. This worked but the heavy lifting fell to JavaScript. This presented
    challenges when JavaScript was turned off or accessibility was a requirement.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
- en: Now with HTML5, some validation can occur in the browser without sending information
    to the server or relying on JavaScript. Though not as robust as an AJAX solution,
    this type of validation traps many of the most common types of errors before they
    occur.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
- en: Adding a URL using the URL input type
  id: totrans-114
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Another of the many new input types that HTML5 supports is `URL`. How many times
    have you built a form using `<input type="text" />` intending to collect a website
    address? Now we can use something much more semantically correct! Later we'll
    see how this supports form validation as well.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  id: totrans-116
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The previous FoundationSix example could be easily converted to this new input
    type as well. Instead of:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'We could simply change the input type and end up with:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Like `<input type="email" />` visually, the `<input type="URL" />` tag looks
    identical to `<input type="text" />`. Again, the difference is what the browser
    does with the information entered.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  id: totrans-122
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Changing the type from `"text"` to `"URL"` allows newer browser to validate
    whether what the user has input is actually a valid website address. Note that
    the server can't determine whether the website is active, only if the address
    itself is well formed.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  id: totrans-124
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: So what happens if the website address submitted isn't valid? The truth is the
    jury is still out here too. Unfortunately this is a gray area with which we're
    going to have to be patient until browsers handle it in a consistent manner.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
- en: Browser support
  id: totrans-126
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: But here's the cool thing about `<input type="URL" />:` Browsers support it!
    Well, sort of. Even browsers that don't understand `<input type="URL" />` will
    default back to `<input type="text" />`, so it still works. Brilliant!
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
- en: No JavaScript
  id: totrans-128
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: As we'll see in other instances, `<input type="URL" />` in HTML5 allows us to
    stop using JavaScript hacks to achieve a similar result. We're all done using
    the behavior layer to make up for deficiencies in the markup or presentation layers.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
- en: What's next?
  id: totrans-130
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: As browsers evolve, in the future we may see implementations that allow browsers
    to do something even smarter with `<input type="URL" />`, like pre-fetching a
    favicon for display in a comment field. Time will tell.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
- en: See also
  id: totrans-132
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The band Arcade Fire teamed with film maker Chris Milk to create "The Wilderness
    Downtown" at [http://thewildernessdowntown.com](http://thewildernessdowntown.com),
    an interactive online movie based on the band's song "We *Used To Wait"* entirely
    in HTML5 and CSS3 for the Chrome browser. The site instantly became one of the
    most talked-about HTML5 experiences ever created due to its use of canvas, HTML5
    video, Google Maps, and so much more.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
- en: Using the number tag
  id: totrans-134
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: HTML5 now allows users to select among a range of numbers. If, for instance,
    you want your viewers to make a purchase, you'll probably want them to use whole
    numbers. After all, who orders 2 ½ shoes?
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  id: totrans-136
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'If we continue the shoe-buying example, we could develop a form like this:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Notice that in the `input`, we have optionally specified a minimum number that
    can be ordered (2) and a maximum that can be ordered (6). `Step` allows us in
    this case to make sure users can only order shoes in pairs while `value` sets
    the initial number of items displayed. `Size` then controls how wide the `input`
    box will be.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  id: totrans-140
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Specifying `<input type="number">` will display the new form control with up
    and down arrows, allowing the user to increase and decrease the value in the field.
    These are often called "spinners" or "spin boxes." You can also set the increments
    of this field:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works...](img/1048_05_07.jpg)'
  id: totrans-142
  prefs: []
  type: TYPE_IMG
- en: There's more...
  id: totrans-143
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The new `<input type="number" />` tag has uses beyond online e-commerce. For
    instance, we could imagine a non-profit organization using it to set up a form
    allowing users to donate fixed amounts of money. Since organizations sometimes
    offer premiums for different donation amounts, the form could be created to allow
    input only at that those minimum increments.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
- en: Browser support
  id: totrans-145
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Currently `<input type="number" />` is only supported by Opera as well as Webkit-based
    browsers like Chrome and Safari. But here's the cool thing about `<input type="number"
    />:` Like `<input type="email" />` and `<input type="URL" />` other browsers support
    it! Well, sort of. Like those tags, even browsers that don't understand `<input
    type="number" />` will default back to `<input type="text" />`, so it still works.
    Brilliant!
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
- en: No JavaScript
  id: totrans-147
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: As we'll see in other instances, `<input type="number" />` in HTML5 allows us
    to stop using JavaScript hacks to achieve a similar result. We're all done using
    the behavior layer to make up for deficiencies in the markup or presentation layers.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
- en: Using the range tag
  id: totrans-149
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: HTML5 now allows us to create a whole new kind of input. The range tag creates
    a slider control, allowing the user to choose among a range of values. This used
    to be difficult, but not anymore! Check it out!
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  id: totrans-151
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Interestingly, we can use virtually the same code as we did in the number example,
    but change the input type to `"range"`. Here''s how to do it:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  id: totrans-153
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Notice we can use the same optional `min, max, step, value`, and `size` attributes.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  id: totrans-155
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Specifying `<input type="range">` will display the new form control with a
    slider, allowing the user to increase and decrease the value in the field:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works...](img/1048_05_08.jpg)'
  id: totrans-157
  prefs: []
  type: TYPE_IMG
- en: There's more...
  id: totrans-158
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: There are certainly plenty of other uses for the `<input type="range">` tag
    well beyond e-commerce. In fact, since we can't see the currently selected value,
    shopping probably isn't the best use of this new tag. The author could imagine
    using `<input type="range">` for a web-based music listening application where
    the user could visually increase or decrease the volume without having to see
    the specific volume number.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
- en: Use caution
  id: totrans-160
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Unfortunately, there's no non-JavaScript way to show the currently selected
    value for the range input tag. Here's hoping that as HTML5 gets further defined
    and more browsers support its native controls, we'll be able to better control
    that. Until then, use with caution.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
- en: No JavaScript
  id: totrans-162
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: As we'll see in other instances, `<input type="range" />` in HTML5 allows us
    to stop using JavaScript hacks to achieve a similar result. We're all done using
    the behavior layer to make up for deficiencies in the markup or presentation layers.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
- en: Browser support
  id: totrans-164
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Like `<input type="number" />`, currently `<input type="range" />` is only supported
    by Opera as well as Webkit-based browsers like Chrome and Safari. But here's the
    cool thing about `<input type="range" />:` Like `<input type="email" />` and `<input
    type="URL" />` and `<input type="number" />`, other browsers support it! Well,
    sort of. Like those tags, even browsers that don't understand `<input type="range"
    />` (Firefox, I'm lookin' at you!) will default back to `<input type="text" />`,
    so it still works. Brilliant!
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
- en: See also
  id: totrans-166
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Mozilla''s "People of HTML5" video series featured many of the leading voices
    of the HTML5 movement. Author Bruce Lawson is entertainingly authoritative, especially
    when he skewers the use of HTML5 as a blanket term referring to related but different
    technologies:'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
- en: '"Clients and journalists will use ''HTML5'' to mean CSS 3/video-that-runs-on-iThings/Geo-enabled
    applications. It''s the new ''Web 2.0''. But we practitioners need to get our
    nomenclature straight. There are no HTML5 image transitions, just as there are
    no CSS semantics — and to say there are shows that you didn''t get the 2001 memo
    about separating style and content."'
  id: totrans-168
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Read and watch the full interview at: [http://hacks.mozilla.org/2011/01/people-of-html5-bruce-lawson](http://hacks.mozilla.org/2011/01/people-of-html5-bruce-lawson).'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
- en: Creating a search field
  id: totrans-170
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Another of the many new input types that HTML5 supports is `search`. How many
    times have you built a form using `<input type="text" />` intending to allow the
    user to search the site? Now we can use something much more semantic.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  id: totrans-172
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let''s build a quick search field using the placeholder attribute too. By now
    you''re familiar with this outdated approach:'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  id: totrans-174
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'We''ve all done that a million times, right? Well, let''s try this on for size
    instead:'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  id: totrans-176
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Spot the differences? Our type has changed from `text` to `search` and the placeholder
    text no longer uses the value tag. Makes more sense for us developers as well
    as search engines and assistive technologies.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  id: totrans-178
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Specifying `<input type="search">` will display the new form field with rounded
    corners in Opera as well as Webkit-based browsers like Chrome and Safari:'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works...](img/1048_05_09.jpg)'
  id: totrans-180
  prefs: []
  type: TYPE_IMG
- en: There's more...
  id: totrans-181
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The rounded corner search box is a design approach made popular by Apple in
    OSX, as well as on the iPad and iPhone. Apple is slowly but surely emerging as
    the thought leader when it comes to the mobile experience, as well as one of the
    most vocal proponents of HTML5.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
- en: Why fix perfection?
  id: totrans-183
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Sure, it's possible to override the default rounded corner styling of the new
    HTML5 search field, but why? It looks so cool already!
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
- en: Browser support
  id: totrans-185
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This has become a familiar refrain, but like `<input type="email" />` and `<input
    type="URL" />` and `<input type="number" />` and `<input type="range" />` you
    can rest assured that if a browsers doesn't natively understand `<input type="search"
    />` it will proceed as if `<input type="text" />` was there instead.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
- en: Search results
  id: totrans-187
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The new `search` specification also supports the new `results` attribute to
    display already searched terms in a drop-down list.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
- en: See also
  id: totrans-189
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Never Mind The Bullets at [http://nevermindthebullets.com](http://nevermindthebullets.com)
    is an interactive online game built specifically to demonstrate the HTML5 and
    CSS3 features that Microsoft Internet Explorer 9 is capable of handling, including:
    @font-face; `<canvas>` animation; `<header>` and `<section>` layout; JavaScript
    acceleration; CSS3 2D transform; CSS3 multi-background; Editable content; `<audio>`
    soundtrack player; `<video>` player.'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
- en: Creating a picker to display date and time
  id: totrans-191
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Every plane, train, and automobile rental website is going to have some sort
    of time/date picker. It's great to finally have a semantic method to approach
    this so let's look at how to create these `input` types using HTML5.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  id: totrans-193
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: As of this writing, only the Opera browser offers full support for each of these
    new `input` tags.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  id: totrans-195
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'HTML5 actually has six different new `inputs` that can control date and time.
    Briefly, they are:'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
- en: '`<input type="date" />`'
  id: totrans-197
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`<input type="datetime" />`'
  id: totrans-198
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`<input type="datetime-local" />`'
  id: totrans-199
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`<input type="month" />`'
  id: totrans-200
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`<input type="time" />`'
  id: totrans-201
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`<input type="week" />`'
  id: totrans-202
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Each of these `input` types can be thought of as variations of one another.
    It's our job as developers to choose to the one that best fits the data you're
    collecting.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  id: totrans-204
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'For a date picker:'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  id: totrans-206
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'For a date/time picker:'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  id: totrans-208
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'For a local date/time picker:'
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  id: totrans-210
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'For a month/year picker:'
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  id: totrans-212
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'For a time picker:'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  id: totrans-214
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'For a week picker:'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  id: totrans-216
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: There's more...
  id: totrans-217
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You're encouraged to try each of the new calendar-based `input` tags to determine
    which works best for your particular website or application.
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
- en: Browser support
  id: totrans-219
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: As of this writing, only Opera offers full support for each of these new `input`
    tags. As time goes on, other browsers are expected to catch up. Once we have fully
    stylable date/time-based `input` methods, it'll be a truly happy day.
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
- en: Meanwhile, those other browsers will default to displaying these `input` types
    as plain-text boxes. They'll still work, but they won't be as pretty as we'd like.
    Patience, grasshopper. Remember that we're dealing with the latest technologies
    — not fully baked, tried and true, approved methods.
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
- en: If all else fails
  id: totrans-222
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'User Agent Man created a great article about what to do when you need a fallback
    plan when these various new HTML5 `input` tags don''t function the way you want
    or expect them to. Check out the full article at: [http://useragentman.com/blog/2010/07/27/cross-browser-html5-forms-using-modernizr-webforms2-and-html5widgets](http://useragentman.com/blog/2010/07/27/cross-browser-html5-forms-using-modernizr-webforms2-and-html5widgets).'
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: User Agent Man撰写了一篇关于当这些各种新的HTML5 `input`标签不按照您的期望或预期的方式工作时，您应该怎么做的好文章。请查看完整文章：[http://useragentman.com/blog/2010/07/27/cross-browser-html5-forms-using-modernizr-webforms2-and-html5widgets](http://useragentman.com/blog/2010/07/27/cross-browser-html5-forms-using-modernizr-webforms2-and-html5widgets)。
- en: See also
  id: totrans-224
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Forrst.com](http://Forrst.com) is a terrific online resource created by Kyle
    Bragger using HTML5\. Forrst is a vibrant community of web developers and designers
    who believe they all increase their knowledge, skill and passion for the craft
    of website creation by sharing and constructively critiquing each other''s work.
    We like the cut of their jib.'
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: '[Forrst.com](http://Forrst.com)是由Kyle Bragger使用HTML5创建的一个很棒的在线资源。Forrst是一个充满活力的网络开发者和设计师社区，他们相信通过分享和建设性地批评彼此的工作，可以增加他们对网站创建工艺的知识、技能和热情。我们很欣赏他们的工作态度。'
