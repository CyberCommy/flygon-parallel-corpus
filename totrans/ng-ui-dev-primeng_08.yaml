- en: Creating Charts and Maps
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we will cover the ways to create visual charts with PrimeNG's
    extensive charting features and maps based on Google Maps. PrimeNG offers basic
    and advanced charting with its easy-to-use and user-friendly charting infrastructure.
    Besides standard charts, there is a special kind of chart for visualizing the
    hierarchical organization data. Throughout the chapter, mapping abilities such
    as drawing polylines, polygons, handling markers, and events will be explained
    as well.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Working with the chart model
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Data representation with line and bar charts
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Data representation with pie and doughnut charts
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Data representation with radar and polar area charts
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Drawing an organization chart for relationship hierarchy
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Basic integration with the Google Map API
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Various use cases with the GMap component
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Working with the chart model
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The chart component provides a visual representation of data using charts on
    a web page. PrimeNG chart components are based on the **Charts.js 2.x** library
    (as a dependency), which is a HTML5 open source library. The chart model is based
    on the `UIChart` class name, and it can be represented with the element name as
    `p-chart`.
  prefs: []
  type: TYPE_NORMAL
- en: 'The chart components will work efficiently by attaching a chart model file
    (`chart.js`) to your project. It can be configured as either a CDN resource, local
    resource, or CLI configuration:'
  prefs: []
  type: TYPE_NORMAL
- en: '**CDN resource configuration**:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '**Angular CLI configuration**:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: More about chart configuration and options is available in the official documentation
    of the Chart.js library ([http://www.chartjs.org/](http://www.chartjs.org/)).
  prefs: []
  type: TYPE_NORMAL
- en: Chart types
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The chart type is defined through the `type` property. It supports seven different
    types of charts with an option for customizations:'
  prefs: []
  type: TYPE_NORMAL
- en: '`pie`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`bar`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`line`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`doughnut`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`polarArea`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`radar`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`horizontalBar`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Each type has it''s own format of data, and it can be supplied through the
    `data` property. For example, in the doughnut chart, the type should refer to
    `doughnut` and the `data` property should bind to the data options, as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'The component class has to define data with the options `labels` and `datasets`,
    as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Along with the labels and data options, other properties related to skinning
    can be applied too.
  prefs: []
  type: TYPE_NORMAL
- en: The legends are closable by default (that is, if you want to visualize only
    a particular data variant, then it is possible by collapsing legends which are
    not required). The collapsed legend is represented with a strike line. The respective
    data component will disappear after the click operation on the legend.
  prefs: []
  type: TYPE_NORMAL
- en: Customization
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Each series is customized on a dataset basis, but you can customize the general
    or common options via the `options` attribute. For example, the line chart which
    customizes the default options would be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'The component needs to define the chart options with customized `title` and
    `legend` properties, as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: As per the preceding example, the `title` option is customized with a dynamic
    title, font size, and conditional display of the title, whereas the `legend` attribute
    is used to place the legend in `top`, `left`, `bottom`, and `right` positions.
    The default legend position is `top`. In this example, the legend position is
    `bottom`.
  prefs: []
  type: TYPE_NORMAL
- en: 'The line chart with the preceding customized options would result as the following
    snapshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/7bb09002-bafe-4a47-a1d8-438f8cf27443.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The `Chart` API also supports the utility methods shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Method** | **Description** |'
  prefs: []
  type: TYPE_TB
- en: '| `refresh` | Redraws the graph with new data |'
  prefs: []
  type: TYPE_TB
- en: '| `reinit` | Destroys the existing graph and then creates it again |'
  prefs: []
  type: TYPE_TB
- en: '| `generateLegend` | Returns an HTML string of a legend for that chart |'
  prefs: []
  type: TYPE_TB
- en: Events
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The chart component provides a click event on datasets to process the selected
    data using the `onDataSelect` event callback.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s take a line chart example with the `onDataSelect` event callback by
    passing an `event` object as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'In the component class, an event callback is used to display selected data
    information in the following message format:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'In the preceding event callback (`onDataSelect`), we used an index of the dataset
    to display information. There are also many other options from an `event` object:'
  prefs: []
  type: TYPE_NORMAL
- en: '`event.element`: Selected element'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`event.dataset`: Selected dataset'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`event.element._datasetIndex`: Index of the chart data series'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`event.element._index`: Index of the data element inside chart series'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Data representation with line and bar charts
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A line chart or line graph is a type of chart which displays the information
    as a series of data points called *markers* connected by straight line segments.
    A line chart is often used to visualize the real-time data in regular time intervals
    or time series.
  prefs: []
  type: TYPE_NORMAL
- en: 'A basic example of line chart usage regarding the Prime libraries downloads
    would be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'The component class should define a line chart data, in which one refers to
    the PrimeNG series and the other one refers to the PrimeUI series over the past
    year, as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'As per the preceding code snippets, along with the data and labels, we can
    also define background and border colors to make the line chart as fancy and customizable
    as we like. The following screenshot shows a snapshot result of the line chart
    as an example:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/ffdb9569-4a3d-45d9-ad44-6eceac177cd8.png)'
  prefs: []
  type: TYPE_IMG
- en: A bar chart or bar graph is a chart or graph that presents grouped data with
    rectangular bars, which are proportional to the values that they represent. PrimeNG
    also supports horizontal representation of bars in the graph.
  prefs: []
  type: TYPE_NORMAL
- en: 'A basic example of bar chart usage regarding the Prime libraries downloads
    would be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'The component class should define the bar chart data, in which one bar refers
    to PrimeNG data and the other bar refers to the PrimeUI series over the past year,
    as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'The following screenshot shows a snapshot result of the bar chart with PrimeNG
    and PrimeUI downloads over the time period of a year as an example:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/3522fac5-2b59-46bc-a5e7-91630bbce406.png)'
  prefs: []
  type: TYPE_IMG
- en: In the preceding chart, only two datasets are compared over a regular period
    of time. This can be applied for multi-datasets as well.
  prefs: []
  type: TYPE_NORMAL
- en: Data representation with pie and doughnut charts
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'A pie chart (or a circle chart) is a circular statical graphic, which is divided
    into slices to illustrate the numerical proportion of composite data. The arch
    length of each slice is equal to the quantity of data entity. A basic example
    of the pie chart usage regarding the Prime libraries downloads would be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'The component class should define the pie chart data with three slices for
    three prime libraries over the period of time, as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'The following screenshot shows a snapshot result of the pie chart with PrimeNG,
    PrimeUI, and PrimeReact downloads over the time period of a year as an example:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/d5913a24-d645-4136-89e5-42fbea2d8685.png)'
  prefs: []
  type: TYPE_IMG
- en: By hovering over each pie chart slice, you can observe the respective data label
    and it's value.
  prefs: []
  type: TYPE_NORMAL
- en: A doughnut chart is a variant of the pie chart, with a blank hollow center allowing
    for the additional information about the complete data (that is, each slice represents
    specific unique data and the general additional information applies to all slices
    represented by the center circle).
  prefs: []
  type: TYPE_NORMAL
- en: 'A basic example of doughnut chart usage for Prime libraries downloads would
    be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'The component class should define the pie chart data with three slices for
    three Prime libraries over the period of time, as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'The following screenshot shows a snapshot result of the doughnut chart with
    PrimeNG, PrimeUI, and PrimeReact downloads over the time period of a year as an
    example:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/ecb71e44-f16b-42c7-9953-3ad839d3e516.png)'
  prefs: []
  type: TYPE_IMG
- en: By default, the cutout percentage of the doughnut chart is `50` (where as for
    pie chart it is `0`). This can be customized through the `cutoutPercentage` chart
    option.
  prefs: []
  type: TYPE_NORMAL
- en: Data representation with radar and polar area charts
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A radar chart is a graphical representation of displaying the multivariant data
    in the form of a two-dimensional chart. It has at least three or more quantitative
    variables represented on axes starting from the same point. This chart is also
    called the **spider chart** or **star chart**. It is useful in measuring performance
    metrics of any ongoing program to control the quality of improvement.
  prefs: []
  type: TYPE_NORMAL
- en: 'A basic example of radar chart usage for a PrimeNG and a PrimeReact project''s
    progress would be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'The component class should define the radar chart data with two datasets (PrimeNG
    and PrimeReact) for six phases of an SDLC process as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'In the preceding example, the datasets are not only referred to the data components
    but also provide skinning to the chart using background, border color, and so
    on. The following screenshot shows a snapshot result of the radar chart with a
    PrimeNG and a PrimeReact project''s progress over six phases of the SDLC life
    cycle process as an example:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/3637f524-12da-4e0e-b04b-f19c9af43c66.png)'
  prefs: []
  type: TYPE_IMG
- en: Polar area charts are similar to pie charts, but each segment has the same angle
    (that is, the radius of the segment differs depending on the value). This type
    of chart is often useful when we want to show a comparison data just similar to
    a pie chart. But, you can also show a scale of values for the given context.
  prefs: []
  type: TYPE_NORMAL
- en: 'A basic example of a polar chart usage for Prime product libraries downloads
    would be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'The component class should define polar chart downloads data for various Prime
    libraries as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'The component class creates the data options along with skinning properties.
    The following screenshot shows a snapshot result of the polar chart with PrimeFaces,
    PrimeNG, PrimeUI, PrimeReact, and PrimeMobile downloads for the time period of
    a year as an example:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/d9b74d4b-f070-43ea-b525-d5e887e2ebb5.png)'
  prefs: []
  type: TYPE_IMG
- en: Based on the datasets, `min` and `max` values are provided, and polar chart
    data segment values will be adjusted (1, 2, 3, 4, 50).
  prefs: []
  type: TYPE_NORMAL
- en: The complete demo application with instructions is available on GitHub at
  prefs: []
  type: TYPE_NORMAL
- en: '[https://github.com/ova2/angular-development-with-primeng/tree/master/chapter8/charts](https://github.com/ova2/angular-development-with-primeng/tree/master/chapter8/charts).'
  prefs: []
  type: TYPE_NORMAL
- en: Drawing an organization chart for the relationship hierarchy
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The organization chart is a diagram that visualizes hierarchically organized
    data. PrimeNG provides a component called `OrganizationChart` to display such
    top-down relationship hierarchies. The component requires a model of the `TreeNode`
    instances as its value. The `TreeNode` API was explained in [Chapter 5](e0418439-433b-431d-bb3d-5e84f1e91554.xhtml),
    *Data Iteration Components* in the *Visualizing data with Tree* section. In this
    section, we will introduce details on the `OrganizationChart` component and develop
    a chart which illustrates a project in an organization.
  prefs: []
  type: TYPE_NORMAL
- en: Hierarchical data with zero configuration
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Drawing a simple chart is easily done--only the `value` attribute is required:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'In the component class, we need to create an array of nested `TreeNode` instances.
    In the simple use case, providing labels is enough:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'By default, tree nodes having children nodes (leafs) are not expanded. To display
    a tree node as expanded, we can set in the model `expanded: true`. Users can expand
    and collapse nodes per click on the small arrow icon at the node connection point.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The simple use case is illustrated in the following diagram:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/db6471f0-e4cf-43dd-9168-3ea64b5d7fe4.png)'
  prefs: []
  type: TYPE_IMG
- en: Advanced customization
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Customization is enabled by templating with the `ng-template` tag. `TreeNode`
    has the `type` property, which is used to match the value of the `pTemplate` attribute.
    This matching allows you to customize the UI for every single node. Nodes without
    the `type` property match `pTemplate="default"`.
  prefs: []
  type: TYPE_NORMAL
- en: 'The next code snippet has two `ng-template` tags. The first one matches the
    nodes with the `type` property `department`. The second one matches the nodes
    without types. The current node object is exposed via the microsyntax `let-node`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: We will only show an excerpt of the `data` array to convey the idea.
  prefs: []
  type: TYPE_NORMAL
- en: The complete demo application with instructions is available on GitHub at
  prefs: []
  type: TYPE_NORMAL
- en: '[https://github.com/ova2/angular-development-with-primeng/tree/master/chapter8/orgchart](https://github.com/ova2/angular-development-with-primeng/tree/master/chapter8/orgchart).'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'The customized organization chart looks like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/824a5462-8344-4089-96d6-692ea7c83fd0.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We specified custom style classes to set colors for nodes and togglers. For
    example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: The complete styling settings are available on GitHub.
  prefs: []
  type: TYPE_NORMAL
- en: Selection and events
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Selection is enabled by setting `selectionMode` to one of possible values:
    `single` or `multiple`. In the `single` mode, a single `TreeNode` is expected
    as the value of the `selection` property. In the `multiple` mode, an array is
    expected. For example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'The organization chart supports two events:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Name** | **Parameters** | **Description** |'
  prefs: []
  type: TYPE_TB
- en: '| `onNodeSelect` |'
  prefs: []
  type: TYPE_TB
- en: '`event.originalEvent`: Browser event'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`event.node`: Selected node instance'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '| Callback invoked when a node is selected by a click. |'
  prefs: []
  type: TYPE_TB
- en: '| `onNodeUnselect` |'
  prefs: []
  type: TYPE_TB
- en: '`event.originalEvent`: Browser event'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`event.node`: Unselected node instance'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '| Callback invoked when a node is unselected by a click. |'
  prefs: []
  type: TYPE_TB
- en: 'Let''s extend the previous developed organization chart as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'In the demo application on GitHub, we defined a `VCard` interface representing
    a person''s VCard:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'All VCard instances are lazily fetched in the `onNodeSelect` callback. After
    that, a VCard to the clicked person (node) is shown in the PrimeNG dialog:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'The dialog itself looks like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'The result is truly amazing:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/deea3d60-994e-4401-8a05-f6896dd74ec1.png)'
  prefs: []
  type: TYPE_IMG
- en: Basic integration with the Google Maps API
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The GMap component provides an integration with the Google Maps API in order
    to use it efficiently with less configuration. It covers major features such as
    binding options, various overlays, events, and so on. This component requires
    the Google Maps API, hence it needs to be referred in the `script` section.
  prefs: []
  type: TYPE_NORMAL
- en: 'The JS resource file needs to be added in a script section, which has to be
    utilized by the GMap component, as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'A basic example of GMap usage with map options would be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'The option has to be defined with coordinates/positional dimensions (*latitude*
    and *longitude*), zoom options, and so on during the page load as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'The following screenshot shows a snapshot result of the GMap example:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/a77f55ff-2206-468a-a0d0-3cee377db71f.png)Snapshot result of the
    GMap example'
  prefs: []
  type: TYPE_NORMAL
- en: As per the preceding snapshot, the exact area location is displayed based on
    the co-ordinates provided and the mode of visibility through zoom settings.
  prefs: []
  type: TYPE_NORMAL
- en: Various use cases with the GMap component
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: GMap can be used for various use cases apart from the basic usage of Google
    Maps. Maps will be more interactive using different kinds of overlays, events
    on maps, overlays, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: Overlays
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Overlays are objects on the map that are bound to latitude/longitude coordinates
    or dimensions. The array of overlay instances are binding through the `overlays`
    property. Due to the nature of one-way binding, when there are changes from an
    array then the map will update automatically.
  prefs: []
  type: TYPE_NORMAL
- en: 'GMap supports various types of overlays, as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Marker**: Single locations on a map. Markers can also display custom icon
    images.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Polyline**: Series of straight lines on a map.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Polygon**: Series of straight lines on a map but the shape is "closed."'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Circle and rectangle**: Represents a specific region as a circle/rectangle.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Info windows**: Displays content within a pop-up balloon on top of a map.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The GMap example usage with overlay options would be written as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s define an array of overlay instances such as markers, polyline, polygon,
    circle, and so on, as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: 'The following screenshot shows a snapshot result of the GMap with various overlays
    as an example:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/596d843f-6c1c-4c73-8828-1cb40d7fc438.png)'
  prefs: []
  type: TYPE_IMG
- en: In the preceding map, you can observe that markers, a polygon, and a circle
    are displayed based on the co-ordinates provided and also based on other overlay-specific
    configurations.
  prefs: []
  type: TYPE_NORMAL
- en: Events
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: GMap is more powerful with interactive events on the map. There are many callbacks
    available to hook into events while clicking on the map, overlay clicking, and
    dragging the overlay.
  prefs: []
  type: TYPE_NORMAL
- en: 'The map component example with various types of overlay events along with event
    callbacks would be written as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: 'Either existing events can be updated by clicking the overlays or new events
    can be created by clicking the map using the dialog component as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: 'The component class has to define various overlay types on the initial page
    load, as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: 'The following snapshot shows how the overlay events can be created or updated:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/45f32ea0-14f6-40f3-a612-71d5008bd82a.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The map component supports the following listed event callbacks:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Name** | **Parameter** | **Description** |'
  prefs: []
  type: TYPE_TB
- en: '| `onMapClick` | `event`: Google Maps MouseEvent | When map is clicked except
    markers. |'
  prefs: []
  type: TYPE_TB
- en: '| `onOverlayClick` | `originalEvent`: Google Maps MouseEvent `overlay`: Clicked
    overlay'
  prefs: []
  type: TYPE_NORMAL
- en: '`map`: Map instance | When an overlay is clicked. |'
  prefs: []
  type: TYPE_NORMAL
- en: '| `onOverlayDragStart` | `originalEvent`: Google Maps MouseEvent `overlay`:
    Clicked overlay'
  prefs: []
  type: TYPE_NORMAL
- en: '`map`: Map instance | When an overlay drag starts. |'
  prefs: []
  type: TYPE_NORMAL
- en: '| `onOverlayDrag` | `originalEvent`: Google Maps MouseEvent `overlay`: Clicked
    overlay'
  prefs: []
  type: TYPE_NORMAL
- en: '`map`: Map instance | When an overlay is being dragged. |'
  prefs: []
  type: TYPE_NORMAL
- en: '| `onOverlayDragEnd` | `originalEvent`: Google Maps MouseEvent `overlay`: Clicked
    overlay'
  prefs: []
  type: TYPE_NORMAL
- en: '`map`: Map instance | When an overlay drag ends. |'
  prefs: []
  type: TYPE_NORMAL
- en: '| `onMapReady` | `event.map`: Google Maps instance | When a map is ready after
    loading. |'
  prefs: []
  type: TYPE_TB
- en: '| `onMapDragEnd` | `originalEvent`: Google Maps `dragend` | Callback to invoke
    when a map drag (that is, pan) has ended. |'
  prefs: []
  type: TYPE_TB
- en: '| `onZoomChanged` | `originalEvent`: Google Maps `zoom_changed` | Callback
    to invoke when a zoom level has changed. |'
  prefs: []
  type: TYPE_TB
- en: There are two ways of accessing the map API. One of them is the `getMap()` function
    of the GMap component (`gmap.getMap()`) and the other one is accessed through
    an event object (`event.map`). Once the map is ready then all map functions can
    be used based on our requirement. For example, the `getZoom()` method can be used
    to increase or decrease from the current state.
  prefs: []
  type: TYPE_NORMAL
- en: The complete demo application with instructions is available on GitHub at
  prefs: []
  type: TYPE_NORMAL
- en: '[https://github.com/ova2/angular-development-with-primeng/tree/master/chapter8/gmap](https://github.com/ova2/angular-development-with-primeng/tree/master/chapter8/gmap).'
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: By reaching the end of this chapter, you will be able to visualize the data
    representations with PrimeNG charts and GMap components. Initially, we started
    with chart components. At first, we started with the chart model API and then
    learned how to create charts programmatically using various chart types such as
    pie, bar, line, doughnut, polar, and radar charts. We have seen that an organization
    chart fits perfectly the visualization of the relationship hierarchy.
  prefs: []
  type: TYPE_NORMAL
- en: Next, we moved to the Google Maps-based GMap component. The GMap component provides
    a convenient API for interactions with the Google Maps API, including drawing
    markers, polygons, circles, register events, and so on. In the next chapter, we
    will look at miscellaneous use cases and the best practices needed to be followed.
  prefs: []
  type: TYPE_NORMAL
