- en: '*Chapter 11*: What We Will Learn – Online Forum Application'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: No matter how many books we study, we as developers cannot truly learn how to
    program with a certain technology stack without building a realistic application
    that uses it. In this chapter, we'll learn about the application that we intend
    to build. We'll see how we will apply some of the topics we've covered. We'll
    see what features our application will have and some of the rationale for including
    those features. This author also has a fair amount of experience of building forum-style
    applications, such as my latest app, DzHaven. So, you can rest assured that what
    you'll learn is production-grade code that's actually being used in real-world
    applications.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we''re going to cover the following main topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Analyzing what we will build – The forum application
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Analyzing forum authentication
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Analyzing thread management
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Analyzing the thread points system
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Analyzing what we will build – The forum application
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As noted, we are building a forum application. It will be somewhat similar in
    style to other forum applications, such as StackOverflow and Bitcointalk.org.
    A user will be able to post a topic or ask a question and receive responses from
    other users in the application's community.
  prefs: []
  type: TYPE_NORMAL
- en: '**Why build a single forum application?**'
  prefs: []
  type: TYPE_NORMAL
- en: We could have demonstrated JavaScript development by building several smaller
    simpler applications. The problem with demonstrating full-stack programming with
    simple apps is that they do not show all the capabilities of a modern JavaScript
    application. In other words, it could leave holes in your knowledge of how to
    implement certain features, such as authentication or database access.
  prefs: []
  type: TYPE_NORMAL
- en: We could, of course, build a graphically intense photo or video application,
    but the issue with these apps is the enormous focus needed on graphical design
    and aesthetics. Also, working on editing photos or video is nice, but those skills
    don't translate well to general full-stack programming. There's nothing wrong
    with apps like these, but in a book such as this, the main goal is obviously to
    learn how to code a full-stack app, and not necessarily become a graphics specialist.
  prefs: []
  type: TYPE_NORMAL
- en: 'So, a forum application will give us a good depth of understanding of the myriad
    frameworks necessary in a large full-stack application. It will also show the
    kind of features we need to implement in an app that will serve many users in
    a publicly accessible website. At a high level, we will be implementing the following
    technology features:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Security**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Broadly speaking, web security entails two main parts. Authentication is the
    server's ability to verify that a user is who they say they are, and authorization
    is the ability to control user access to features of the application.
  prefs: []
  type: TYPE_NORMAL
- en: '**Sessions and cookies**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Server-side sessions allow a server to maintain data about a user's current
    activity on the site. We will use sessions and cookies to identify users and provide
    an easier experience while they are using the site.
  prefs: []
  type: TYPE_NORMAL
- en: '**Object Relational Mapper**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An **Object Relational Mapper** (**ORM**) is technology that allows code, in
    our case TypeScript, to be used to interact with a database instead of SQL.
  prefs: []
  type: TYPE_NORMAL
- en: '**Database access and repository layer**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Database access is complex, so we will use a design pattern called Repository
    to separate our database access code from the rest of our application code.
  prefs: []
  type: TYPE_NORMAL
- en: These days, an application needs to be mobile-enabled by default. We need to
    make sure users on mobile phones are able to access and engage with our application
    community. Therefore, we'll build our application using responsive methods so
    that our app will work on both desktops and mobile devices. Responsive web design
    simply means that our application's screen will change to best fit the device
    screen size and dimensions. We will use modern CSS and JavaScript techniques to
    do this.
  prefs: []
  type: TYPE_NORMAL
- en: In this section, we reviewed what type of application we will be building and
    the reasons for our selection. In the next section, we'll look at forum authentication
    and some of its features.
  prefs: []
  type: TYPE_NORMAL
- en: Analyzing forum authentication
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In any large multi-user application, we need to use a system to recognize and
    authorize users. Our forum application is no different.
  prefs: []
  type: TYPE_NORMAL
- en: 'Users will be able to post forum topics and answer forum questions. They therefore
    need to be able to distinguish their own activity from that of other users. So,
    we will build a login system to allow users to authenticate and perform activities
    on the site with their own unique account. We will therefore build the following
    features:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Login and logout**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This feature will include not only the **GraphQL** resolvers to allow logging
    in and logging out, but also the screens to allow the user to enter their ID and
    password. We will also be using several technologies to provide a unique session
    state for the user's activities at any given time.
  prefs: []
  type: TYPE_NORMAL
- en: '**Registration system**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A registration system will include both screens and resolvers that allow a user
    to create a unique account in order to distinguish their activities on the site.
  prefs: []
  type: TYPE_NORMAL
- en: '**Password reset**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The ability for users to change their password when required, but in a secure
    way.
  prefs: []
  type: TYPE_NORMAL
- en: '**Profile screen**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A screen and features that show a user's account information. This information
    will include their email and user ID. In addition to that, it provides the ability
    for the user to view all of their prior posts, including both topic posts and
    responses.
  prefs: []
  type: TYPE_NORMAL
- en: '**Categories**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Groupings based on categories should be created to allow users to view only
    the posts in categories that they are interested in and reduce noise.
  prefs: []
  type: TYPE_NORMAL
- en: '**Notification emails**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A system for contacting users via email and notifying them of additional requirements
    or news about the site. For example, this could include a verification email that
    checks that the email they registered with is valid and accessible by the same
    user.
  prefs: []
  type: TYPE_NORMAL
- en: In this section, we went over the list of features we will be building to allow
    users to authenticate and uniquely identify themselves and their activities on
    the site. In the next section, we'll review how we will implement **threads**,
    the main means of communication within our application.
  prefs: []
  type: TYPE_NORMAL
- en: Analyzing thread management
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Every post on the site can be considered the beginning of a thread; that is
    to say, the initial thread posting kicks off a discussion on a topic and creates
    a chain of responses. So, our application needs to be able to allow a user to
    start the discussion by adding the initial thread post. This post would then be
    viewable to all users and they can respond to it. Each thread item, including
    the initial post, will be uniquely identified to the user that made the post.
    So, in order to create this functionality, we will need the following features:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Topic thread posting and editing**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This feature will, of course, include the ability to be viewed by anyone, as
    well as adding and editing topic posts by an author. Users will also be able to
    see all their posts from their **UserProfile** screen.
  prefs: []
  type: TYPE_NORMAL
- en: '**Responding to a thread topic**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This feature will include the ability for the topic-starting user and other
    users to respond to a topic post with their own comments. It has the ability to
    view a topic post and all responses related to that topic on one screen.
  prefs: []
  type: TYPE_NORMAL
- en: In order to keep the application's complexity down to a minimum, users will
    not be allowed to respond to specific responses, but only respond to the main
    topic. They will, however, be able to quote other posts in their response.
  prefs: []
  type: TYPE_NORMAL
- en: In this section, we reviewed the features for the main capabilities of the application.
    Creating and responding to new threads will be the core feature of the application,
    although we will add other related features in order to enhance its capabilities.
    In the next section, we will review what we will build for the thread points system.
  prefs: []
  type: TYPE_NORMAL
- en: Analyzing the thread points system
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Users should be able to tag comments that they like and upvote them. Showing
    which postings are popular also helps users be more engaged in the communication.
    In this section, we'll review how we'll enable users to indicate their approval
    of posts.
  prefs: []
  type: TYPE_NORMAL
- en: 'To enable this capability, we will include the following features in our app:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Points system**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A points system will be created to allow users to upvote or downvote thread
    postings and responses.
  prefs: []
  type: TYPE_NORMAL
- en: '**Display view count**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Show the number of times a thread post was viewed by users.
  prefs: []
  type: TYPE_NORMAL
- en: '**Display response count**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Show the number of responses a post has to let users know what topics are popular
    or trending.
  prefs: []
  type: TYPE_NORMAL
- en: In this section, we reviewed how the system is important to enable users to
    indicate how they feel about certain posts and view the popularity of topics.
    The points system will enhance user engagement and activity.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we looked at the application we will be building, the list
    of features it will have, and some of the reasons for going with this type of
    application. Since we are building a full-stack application, the code we are about
    to build will be quite complex and challenging. You may even be surprised by the
    ultimate size and scope of this app. However, once we are done, we will have built
    a modern, sophisticated, and complete end-to-end application.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will start coding the React client-side portion of our
    application. We won't be able to entirely finish it since we've not started our
    backend. However, we will build a very large portion of it, and you will be able
    to see many of the screens.
  prefs: []
  type: TYPE_NORMAL
