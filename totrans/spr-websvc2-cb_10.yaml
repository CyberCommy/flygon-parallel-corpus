- en: Chapter 10. Spring Remoting
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover:'
  prefs: []
  type: TYPE_NORMAL
- en: Setting up Web-Services using RMI
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting up servlet-based Web-Services using Hessian/Burlap, exposing business
    beans
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting up Web-Services using JAX-WS
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Exposing servlet-based Web-Services using Apache CXF
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Exposing Web-Services using JMS as the underlying communication protocol
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Spring-WS project is a contract-first approach to build a Web-Service. This
    approach is already detailed in the first eight chapters. However, sometimes the
    requirement is to expose the existing business Spring beans as a Web-Service,
    which is called **contract-last** approach, to set up a Web-Service.
  prefs: []
  type: TYPE_NORMAL
- en: 'Spring''s remoting supports communication with several remoting technologies.
    Spring remoting allows you to expose existing Spring beans on server side as a
    Web-Service. On the client side, Spring remoting allows the client application
    to call a remote Spring bean (which is exposed as a Web-Service) through a local
    interface. In this chapter, Spring''s features for the following remoting technologies
    are detailed:'
  prefs: []
  type: TYPE_NORMAL
- en: '**RMI:** Spring''s `RmiServiceExporter` allows you to expose local business
    services on **Remote Method Invocation (RMI)** on the server side, and Spring''s
    `RmiProxyFactoryBean` is the client-side proxy bean to call the Web-Service.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Hessian:** Spring''s `HessianServiceExporter` allows you to expose local
    business services on lightweight HTTP-based protocol, introduced by Caucho technology
    ( [http://hessian.caucho.com](http://hessian.caucho.com)) on the server side,
    and `HessianProxyFactoryBean` is the client-side proxy bean to call the Web-Service.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Burlap:** This is an XML alternative of Hessian by Caucho Technology. Spring
    provides support classes using two of Spring''s beans, namely, `BurlapProxyFactoryBean`
    and `BurlapServiceExporter`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**JAX-RPC:** Spring''s support to set up Web-Services is based on a Remote
    Procedure Call that uses J2EE 1.4''s JAX-RPC Web-Service API'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**JAX-WS:** Spring''s support to set up Web-Services using Java EE 5+ JAX-WS
    API that allows message-oriented as well as Remote Procedure Call Web-Service
    development.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**JMS:** Spring exposes/consumes Web-Services using JMS as the underlying communication
    protocol using `JmsInvokerServiceExporter` and `JmsInvokerProxyFactoryBean` classes.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Since JAX-WS is the successor of JAX-RPC, JAX-RPC is not included in this chapter.
    Instead, Apache CXF will be detailed in this chapter, as it can use JAX-WS to
    set up Web-Services, even though it is not part of Spring's remoting.
  prefs: []
  type: TYPE_NORMAL
- en: For simplification, in this chapter, the following local business service is
    to be exposed as a Web-Service (the domain model is the one described in the *Introduction*
    section of [Chapter 1](ch01.html "Chapter 1. Building SOAP Web-Services"),*Building
    SOAP Web-Services).*
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'And this is the interface implementation:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Setting up Web-Services using RMI
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**RMI**, a part of J2SE, allows calling a method on different **Java Virtual
    Machines (JVMs).** RMI''s goal is to expose objects in separate JVM''s, as if
    they are like local objects. The client that calls the remote object through RMI
    doesn''t know whether an object is remote or local, and calling methods on the
    remote object has the same syntax as a method invocation on a local object.'
  prefs: []
  type: TYPE_NORMAL
- en: Spring's remoting provides features to expose/access Web-Services, based on
    RMI technology. On the server side, Spring's `RmiServiceExporter` bean exposes
    server-side Spring business bean as a Web-Service. On the client-side, Spring's
    `RmiProxyFactoryBean` presents the Web-Service's methods as a local interface.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we will learn to set up a Web-Service using RMI, and learn how
    the call to Web-Service through RMI is presented.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this recipe, we have the following two projects:'
  prefs: []
  type: TYPE_NORMAL
- en: '`LiveRestaurant_R-10.1` (for a server-side Web-Service), with the following
    Maven dependencies:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`spring-context-3.0.5.RELEASE.jar`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`log4j-1.2.9.jar`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`LiveRestaurant_R-10.1-Client` (for the client-side), with the following Maven
    dependencies:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`spring-context-3.0.5.RELEASE.jar`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`spring-ws-test-2.0.0.RELEASE.jar`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`log4j-1.2.9.jar`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`junit-4.7.jar`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`xmlunit-1.1.jar`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Register the server-side service implementation within Spring's `RmiServiceExporter`
    in the server-side application context (`applicationContext.xml`) and set the
    port and service name.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Register the local interface (same as server-side) within Spring's `RmiProxyFactoryBean`
    in the client-side application context (`applicationContext.xml`) and set the
    service's URL.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add a Java class to load the server-side application context-file (in the class's
    `main` method) to set up the server.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add a JUnit test case class on the client side that calls a Web-Service using
    the local interface.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Run the following command on `Liverestaurant_R-10.1:`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Run the following command on `Liverestaurant_R-10.1-Client:`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Here is the client-side output:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '`OrderServiceSetUp` is the class that loads the server-side application context
    and sets up the server to expose the server-side business service as a Web-Service.
    `OrderServiceClientTest` is the client-side test class that loads the client-side
    application context and calls the Web-Service methods through a client-side local
    interface that represents a remote business service.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The `OrderServiceImpl` is the service to be exposed through a Web-Service.
    In the server-side''s application context, within `org.springframework.remoting.rmi.RmiServiceExporter
    Bean, OrderService` is the name of the service that will be registered with the
    RMI registry. The service property is for passing the `RmiServiceExporter` and
    the bean instance. `serviceInterface` is the interface that represents the local
    business service remotely. Only those methods that are defined in this interface
    can be called remotely:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'On the client side''s configuration file, `serviceUrl` is the URL address of
    the Web-Service and `serviceInterface` in the local interface that enables client
    calls to the server-side methods remotely:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '`OrderServiceClientTest` is the JUnit test case class that loads the application
    context and calls remote methods through the local interface:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Setting up a servlet-based Web-Service using Hessian/Burlap, exposing business
    beans
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Hessian and Burlap**, developed by Caucho ([http://hessian.caucho.com](http://hessian.caucho.com)),
    are lightweight HTTP-based remoting technologies. Even though both of them use
    the HTTP protocol to communicate, Hessian communicates using binary messages,
    while Burlap communicates using XML messages.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Spring''s remoting provides features to expose/access Web-Services based on
    these technologies. On the server side, Spring''s `ServiceExporter` bean exposes
    the server-side Spring business bean ( `OrderServiceImpl`) as a Web-Service:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'On the client-side, Spring''s `ProxyFactory` bean exposes remote interface
    through local client-side interface ( `OrderService`):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this recipe, we have the following two projects:'
  prefs: []
  type: TYPE_NORMAL
- en: '`LiveRestaurant_R-10.2` (for the server-side Web-Service), with the following
    Maven dependencies:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`spring-webmvc-3.0.5.RELEASE.jar`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`log4j-1.2.9.jar`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`hessian-3.1.5.jar`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`LiveRestaurant_R-10.2-Client` (for the client-side), with the following Maven
    dependencies:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`spring-web-3.0.5.RELEASE.jar`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`spring-test-3.0.5.RELEASE.jar`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`log4j-1.2.9.jar`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`junit-4.7.jar`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`hessian-3.1.5.jar`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Follow these steps to set up a servlet-based Web-Service using the Hessian
    service:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Configure `DispatcherServlet` inside the `web.xml` file (URL: `http://<host>:<port>/<appcontext>/services`
    to be forwarded to this servlet).'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Register the server-side service interface within Spring's `HessianServiceExporter`
    in the server-side application context ( `applicationContext.xml`), and set service
    name and service interface.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Register the local interface (same as the server side) within Spring's `HessianProxyFactoryBean`
    in the client-side application context ( `applicationContext.xml`), and set service's
    URL.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add a JUnit test case class in the client side that calls a Web-Service using
    the local interface
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Run the following command on `Liverestaurant_R-10.2:`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Run the following command on `Liverestaurant_R-10.2-Client:`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'In the client-side output, you will be able to see the success message of running
    the test case, as follows:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Follow these steps to set up a servlet-based Web-Service using the Burlap service:'
  prefs: []
  type: TYPE_NORMAL
- en: Modify the server-side service interface to Spring's `BurlapServiceExporter`
    in the server-side application context ( `applicationContext.xml`).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Modify the client-side application context ( `applicationContext.xml`) to Spring's
    `BurlapProxyFactoryBean`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Run the following command on `Liverestaurant_R-10.2:`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Run the following command on `Liverestaurant_R-10.2-Client:`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'In the client-side output, you will be able to see the success message of a
    running test case, as follows:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `Liverestaurant_R-10.2` project is a server-side Web-Service that sets up
    a servlet-based Web-Service, using the burlap/hessian exporter from Spring's remoting.
  prefs: []
  type: TYPE_NORMAL
- en: The `Liverestaurant_R-10.2-Client` project is a client-side test project that
    calls the burlap/hessian Web-Service, using the burlap/hessian client proxy from
    Spring's remoting.
  prefs: []
  type: TYPE_NORMAL
- en: 'On the server side, `DiapatcherServlet` will forward all the requests using
    the URL pattern to `BurlapServiceExporter/ HessianServiceExporter` `(http://<hostaddress>/<context>/<services>)`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'These exporters expose the internal local service implementation (`OrderServiceImpl`)
    as a Web-Service:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'On the client-side, `BurlapProxyFactoryBean/HessianProxyFactoryBean` is responsible
    for exposing remote methods to the client, using a local client-side service interface
    ( `OrderService`):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: The `OrderServiceClientTest` implementation is the same as described in the
    recipe *Setting up Web-Services using RMI*.
  prefs: []
  type: TYPE_NORMAL
- en: See also...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: '*Setting up a Web-Services using RMI*'
  prefs: []
  type: TYPE_NORMAL
- en: Setting up Web-Services using JAX-WS
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**JAX-RPC** was a standard that came with Java EE 1.4 to develop Web-Services,
    and has become less and less popular in recent years. JAX-WS 2.0 was introduced
    with Java EE 5 and is more flexible and annotation-based than JAX-RPC in biding
    concept. Here are some of the advantages of JAX-WS over JAX-RPC:'
  prefs: []
  type: TYPE_NORMAL
- en: JAX-WS supports both message-oriented as well as **Remote Procedure Call (RPC)**
    Web-Services, while JAX-RPC supports only RPC
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: JAX-WS supports SOAP 1.2 and SOAP 1.1, but JAX-RPC supports SOAP 1.1
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: JAX-WS relies on the rich features of Java 5.0, while JAX-RPC works with Java
    1.4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: JAX-WS uses the very powerful XML for Object mapping framework (uses JAXB) while
    JAX-RPC uses its own framework that appeared weak on complex data models
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Spring remoting provides feature to set up a JAX-WS Web-Service using java
    1.5+ features. For example here, the annotation `@WebService` causes Spring to
    detect and expose this service as a Web-Service, and `@WebMethod` causes the following
    method: `public OrderResponse placeOrder(..)`, to be called as a Web-Service method
    (placeOrder):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: In this recipe, JDK's built-in HTTP server is used to set up the Web-Service
    (since Sun's `JDK 1.6.0_04`, JAX-WS can be integrated with the JDK's built-in
    HTTP server).
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Install Java and Maven (SE runtime environment (build `jdk1.6.0_29))`.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this recipe, we have the following two projects:'
  prefs: []
  type: TYPE_NORMAL
- en: '`LiveRestaurant_R-10.3` (for the server-side Web-Service), with the following
    Maven dependencies:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`spring-web-3.0.5.RELEASE.jar`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`log4j-1.2.9.jar`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`LiveRestaurant_R-10.3-Client` (for the client-side), with the following Maven
    dependencies:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`spring-web-3.0.5.RELEASE.jar`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`log4j-1.2.9.jar`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`junit-4.7.jar`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Annotate the business service class and its methods.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Register the service in the application context file ( `applicationContext.xml`),
    then configure the `SimpleJaxWsServiceExporter` bean, and create a class to load
    the server-side application context (this sets up the server).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Register the local interface (in the same way as you did for the server-side
    interface) within Spring's `.JaxWsPortProxyFactoryBean` in the client-side application
    context (`applicationContext.xml`), and set the service's URL.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add a JUnit test case class in the client-side that calls the Web-Service using
    the local interface.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Run the following command on `Liverestaurant_R-10.3` and browse to see the WSDL
    file located at `http://localhost:9999/OrderService?wsdl:`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: Run the following command on `Liverestaurant_R-10.3-Client:`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'In the client-side output, you will be able to see the success message of a
    running test case, as follows:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `Liverestaurant_R-10.3` project is a server-side Web-Service (by Spring
    remoting's exporter bean) that sets up a JAX-WS using DK's built-in HTTP server.
  prefs: []
  type: TYPE_NORMAL
- en: The `Liverestaurant_R-10.3-Client` project is a client-side test project that
    calls JAX-WS Web-Service using the client proxy from Spring remoting.
  prefs: []
  type: TYPE_NORMAL
- en: 'On the server-side, `applicationContext.xml` scans and detects annotating tags
    in `OrderServiceImpl`. Then `SimpleJaxWsServiceExporter` exposes this business
    service as a Web-Service:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'In the service class, the annotations `@WebService` and `@WebMethod` cause
    Spring detects(by scanning), and expose(by `SimpleJaxWsServiceExporter)` this
    service class as a Web-Service and its method ( `placeOrder`) as a Web-Service
    method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'On the client side, `JaxWsPortProxyFactoryBean` is responsible for exposing
    remote methods to the client, using a local client-side interface. `WsdlDocumentUrl`
    is the Web-Service WSDL address, `portName` is the `portName` value in WSDL, `namespaceUri`
    is the `targetNameSpace` in WSDL, and `serviceInterface` is the local client-side
    service interface:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: The `OrderServiceClientTest` implementation is the same as described in the
    recipe named *Setting up a Web-Services using RMI*.
  prefs: []
  type: TYPE_NORMAL
- en: See also...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: '*Setting up a Web-Services using RMI*'
  prefs: []
  type: TYPE_NORMAL
- en: 'In this book:'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 2](ch02.html "Chapter 2. Building Clients for SOAP Web-Services"),*Building
    Clients for SOAP Web Services*'
  prefs: []
  type: TYPE_NORMAL
- en: '*Creating a Web-Service client on HTTP transport*'
  prefs: []
  type: TYPE_NORMAL
- en: Exposing servlet-based Web-Services using Apache CXF
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Apache CXF** originated from a combination of the projects, namely: **Celtix**
    **(IONA Technologies)** and **XFire** (Codehaus), which are integrated into the
    **Apache software foundation**. CXF, by name, implies that it originates from
    the **Celtix** and **XFire** project names.'
  prefs: []
  type: TYPE_NORMAL
- en: Apache CXF provides features to build and deploy Web-Services. The Apache CXF's
    recommended Web-Service configuration method (frontend or API) is JAX-WS 2.x.
    Apache CXF, which is not part of Spring's remoting, however, since it can use
    JAX-WS as its frontend, will be explained in this recipe.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Install Java and Maven (SE Runtime Environment (build `jdk1.6.0_29))`.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this recipe, we have the following two projects:'
  prefs: []
  type: TYPE_NORMAL
- en: '`LiveRestaurant_R-10.4` (for the server-side Web-Service), with the following
    Maven dependencies:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`cxf-rt-frontend-jaxws-2.2.6.jar`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`cxf-rt-transports-http-2.2.6.jar`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`spring-web-3.0.5.RELEASE.jar`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`commons-logging-1.1.1.jar`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`LiveRestaurant_R-10.4-Client` (for the client side), with the following Maven
    dependencies:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`cxf-rt-frontend-jaxws-2.2.6.jar`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`cxf-rt-transports-http-2.2.6.jar`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`spring-web-3.0.5.RELEASE.jar`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`log4j-1.2.9.jar`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`junit-4.7.jar`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Annotate the business service class and methods (in the same way as you did
    for JAX-WS).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Register the service in the application context file ( `applicationContext.xml`)
    and configure `CXFServlet` inside the `web.xml` file (URL: `http://<host>:<port>/`
    is to be forwarded to this servlet).'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Register the local interface (in the same way as you did for the server side)
    within Spring's `.JaxWsPortProxyFactoryBean`, in the client-side application context
    ( `applicationContext.xml`), and set the service's URL.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add a JUnit test case class in the client side, which calls the Web-Service
    using the local interface.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `Liverestaurant_R-10.4` project is a server-side Web-Service that set up
    a CXF, using the JAX-WS API.
  prefs: []
  type: TYPE_NORMAL
- en: The `Liverestaurant_R-10.4-Client` project is a client-side test project that
    calls JAX-WS Web-Service, using the client proxy from Spring's remoting.
  prefs: []
  type: TYPE_NORMAL
- en: 'On the server side, the configuration in `applicationContext.xml` detects annotating
    tags in `OrderServiceImpl`. Then `jaxws:endpoint` exposes this business service
    as a Web-Service:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: The `OrderServiceImpl` explanation is the same as described in the recipe *Setting
    up Web-Services using JAX-WS*.
  prefs: []
  type: TYPE_NORMAL
- en: 'On the client side, `JaxWsProxyFactoryBean` is responsible for exposing remote
    methods to the client using a local client-side interface. `address` is the Web-Service
    service address and `serviceInterface` is the local client-side service interface:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: The `OrderServiceClientTest` implementation is the same as described in the
    recipe *Setting up Web-Services using RMI*.
  prefs: []
  type: TYPE_NORMAL
- en: See also...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '*In this chapter:*'
  prefs: []
  type: TYPE_NORMAL
- en: '*Setting up Web-Services using RMI*'
  prefs: []
  type: TYPE_NORMAL
- en: Exposing Web-Services using JMS as the underlying communication protocol
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Java Message Service (JMS)** introduced by Java 2 and J2EE was founded by
    Sun Microsystems in 1999\. Systems using JMS are able to communicate in a synchronous
    or asynchronous mode, and are based on the point-to-point and publish-subscribe
    models.'
  prefs: []
  type: TYPE_NORMAL
- en: Spring remoting provides the facility to expose Web-Services using JMS as the
    underlying communication protocol. Spring's JMS remoting sends and receives messages
    on the same thread in the single-threaded and non-transactional session.
  prefs: []
  type: TYPE_NORMAL
- en: However, for multi-threaded and transactional support for Web-Service on JMS,
    you can use Spring-WS on JMS protocol, which is based on Spring's JMS-based messaging.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, `apache-activemq-5.4.2` is used to set up a JMS server, and
    default objects, created by this JMS server (`queue`, broker), are used by the
    projects.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Install Java and Maven (SE Runtime Environment (build `jdk1.6.0_29))`.
  prefs: []
  type: TYPE_NORMAL
- en: Install `apache-activemq-5.4.2`.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this recipe, we have the following two projects:'
  prefs: []
  type: TYPE_NORMAL
- en: '`LiveRestaurant_R-10.5` (for the server-side Web-Service), with the following
    Maven dependencies:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`activemq-all-5.2.0.jar`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`spring-jms-3.0.5.RELEASE.jar`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`LiveRestaurant_R-10.5-Client` (for the client side), with the following Maven
    dependencies:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`activemq-all-5.2.0.jar`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`spring-jms-3.0.5.RELEASE.jar`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`junit-4.7.jar`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`spring-test-3.0.5.RELEASE.jar`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`xmlunit-1.1.jar`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Register the business service within the `JmsInvokerServiceExporter` bean and
    register `SimpleMessageListenerContainer` using the `activemq` default objects
    (broker, `destination)` in the server-side application context file.
  prefs: []
  type: TYPE_NORMAL
- en: Create a Java class to load the application context and set up the server.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Register `JmsInvokerProxyFactoryBean` in the client-side application context
    file using the `activemq` default objects `(broker, destination)`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add a JUnit test case class in the client side that calls the Web-Service using
    the local interface.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Run `apache-activemq-5.4.2` (to set up the JMS server).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Run the following command on `Liverestaurant_R-10.5` and browse to see the WSDL
    file located at `http://localhost:9999/OrderService?wsdl:`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: Run the following command on `Liverestaurant_R-10.5-Client:`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: In the client-side output, you will be able to see a success message of a running
    test case.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `Liverestaurant_R-10.5` project is a server-side Web-Service that sets up
    a Web-Service by listening on a JMS queue.
  prefs: []
  type: TYPE_NORMAL
- en: The `Liverestaurant_R-10.5-Client` project is a client-side test project that
    sends JMS messages to a JMS queue.
  prefs: []
  type: TYPE_NORMAL
- en: 'On the server side, the class `OrderServiceSetUp` loads `applicationContext.xml`
    and creates a `messageListener` in a container (using `SimpleMessageListenerContainer)`
    that waits to listen for a message at a specific destination ( `requestQueue`).
    As soon as a message arrives, it calls the method on the business class ( `OrderServiceImpl`)
    through Spring''s remoting class (`JmsInvokerServiceExporter`):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'On the client side, `JmsInvokerProxyFactory` is responsible for exposing remote
    methods to the client, using a local client-side interface (OrderService). When
    the client calls the method `OrderService, JmsInvokerProxyFactory` send a JMS
    message to the queue (requestQueue), which is the queue the server is listening
    to:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
