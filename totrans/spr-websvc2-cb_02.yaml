- en: Chapter 2. Building Clients for SOAP Web-Services
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover:'
  prefs: []
  type: TYPE_NORMAL
- en: Setting up a Web-Service client development environment within Eclipse
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting up a Web-Service client development environment using Maven
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a Web-Service client on HTTP transport
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a Web-Service client on JMS transport
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a Web-Service client on E-mail transport
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a Web-Service client on XMPP transport
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a Web-Service client using XPath expression
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a Web-Service client for WS-Addressing endpoint
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Transforming a Web-Service message using XSLT
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Using Java API, such as `SAAJ`, client-side SOAP messages can be generated and
    transmitted to/from a Web-Service. However, it requires an extra amount of coding
    and knowledge about SOAP messages.
  prefs: []
  type: TYPE_NORMAL
- en: The package `org.springframework.ws.client.core` contains the core functionality
    of the client-side API, which facilitates calling the server-side Web-Service.
  prefs: []
  type: TYPE_NORMAL
- en: APIs in this package provide template classes like `WebServiceTemplate` that
    simplifies the use of Web-Services. Using these templates, you will be able to
    create a Web-Service client over various transport protocols (HTTP, JMS, e-mail,
    XMPP, and so on) and send/receive XML messages as well as marshal objects to XML
    before sending them. Spring also provides classes, such as `StringSource` and
    `Result`, which simplify passing and retrieving XML messages while using `WebServiceTemplate`.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, the first two recipes explain how to set up the environment
    for calling a Web-Service client using Eclipse and Maven.
  prefs: []
  type: TYPE_NORMAL
- en: Then we will discuss the usage of `WebServiceTemplate` to create a Web-Service
    client over various transport protocols (HTTP, JMS, e-mail, XMPP, and so on).
    In addition to this, the recipe *Setting up a Web-Service client using an XPath
    expression* explains how to retrieve data from an XML message. Finally, in the
    last recipe, *Transforming a Web-Service message using XSLT*, how to convert the
    XML messages into different formats between the client and server is presented.
    To set up a Web-Service server, some recipes from [Chapter 1](ch01.html "Chapter 1. Building
    SOAP Web-Services"), *Building SOAP Web-Services*, are used and a separate client
    project is created that calls the server-side Web-Service.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up a Web-Service client development environment within Eclipse
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A Web-Service client in the simplest form is a Java class that calls a server-side
    Web-Service. In this recipe, setting up the environment to call a server-side
    Web-Service is presented. Here, a client-side Java class calls a Web-Service on
    the server in two forms. The first one is a Java class that calls a Web-Service
    in the main method of the class. The second one uses the JUnit test class to call
    the server-side Web-Service.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This recipe is similar to the recipe *Using Maven for building and running a
    Spring-WS*, discussed in [Chapter 1](ch01.html "Chapter 1. Building SOAP Web-Services"),*Building
    SOAP Web-Services.*
  prefs: []
  type: TYPE_NORMAL
- en: Download and install the Eclipse IDE for Java EE developers Helios.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In this recipe, the project''s name is `LiveRestaurant_R-2.1` (for server-side
    Web-Service), with the following Maven dependencies:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`spring-ws-core-2.0.1.RELEASE.jar`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`jdom-1.0.jar`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`log4j-1.2.9.jar`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`jaxen-1.1.jarb`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`xalan-2.7.0.jar`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The `LiveRestaurant_R-2.1-Client` (for the client side) has the following Maven
    dependencies:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`spring-ws-core-2.0.1.RELEASE.jar`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`jdom-1.0.jar`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`log4j-1.2.9.jar`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`jaxen-1.1.jar`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`xalan-2.7.0.jar`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`junit-4.7.jar`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Run the following Maven command to be able to import the client projects into
    Eclipse (for the client side):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This recipe uses the recipe *Handling the incoming XML messages using JDOM*,
    discussed in [Chapter 1](ch01.html "Chapter 1. Building SOAP Web-Services"), *Building
    SOAP Web-Services*, as the server-side project.
  prefs: []
  type: TYPE_NORMAL
- en: Run a Java class that calls a Web-Service in the main method.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Import `LiveRestaurant_R-2.1-Client` into the Eclipse workspace by going to
    **File** | **Import** | **General** | **Existing projects into workspace** | **LiveRestaurant_R-2..1-Client**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Go to the folder `LiveRestaurant_R-2.1` in the command prompt and run the server
    using the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Select the class `OrderServiceClient` in the folder `src/main/java` from the
    package `com.packtpub.liverestaurant.client` and select **Run As** | **Java Application**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The following is the console output on running the Java class on the client
    side:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Run a JUnit test case using Eclipse.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the class `OrderServiceClientTest` in the folder `src/test/java` from
    the package `com.packtpub.liverestaurant.client` and select **Run As** | **Junit
    Test**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The following is the console output on running the JUnit test case (you can
    click on the **JUnit** tab, adjacent to the **Console** tab, to see whether the
    test case has succeeded or not):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: To pass parameters or customize the settings for a test, select the test unit
    class, **Run As** | **Run Configuration** |, and double-click on **JUnit** on
    the left pane.
  prefs: []
  type: TYPE_NORMAL
- en: Then you will be able to customize the passed parameters or the settings and
    run the client.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'When a Java class that calls a Web-Service in the main method is run, Eclipse
    runs the following command internally using the following Java class path:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'When a JUnit test case is run, Eclipse runs a test case using the JUnit framework
    by internally calling the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The recipes *Using Maven for building and running a Spring-WS project* and *Handling
    the incoming XML messages using JDOM*, discussed in [Chapter 1](ch01.html "Chapter 1. Building
    SOAP Web-Services"),
  prefs: []
  type: TYPE_NORMAL
- en: The recipe *Creating a Web-Service client on HTTP transport*, discussed in this
    chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up a Web-Service client development environment using Maven
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Maven supports running the main method of a class using command prompt as well
    as a JUnit test case.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, setting up a Maven environment to call a client-side Web-Service
    is explained. Here, a client-side Java code calls a Web-Service on the server
    in two forms. The first one is a Java class that calls a Web-Service in the main
    method of the class. The second one uses JUnit to call a server-side Web-Service.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this recipe, the project''s name is `LiveRestaurant_R-2.2` (for a server-side
    Web-Service) with the following Maven dependencies:'
  prefs: []
  type: TYPE_NORMAL
- en: '`spring-ws-core-2.0.1.RELEASE.jar`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`log4j-1.2.9.jar`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following are the Maven dependencies for `LiveRestaurant_R-2.2-Client`
    (for the client-side Web-Service):'
  prefs: []
  type: TYPE_NORMAL
- en: '`spring-ws-core-2.0.1.RELEASE.jar`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`junit-4.7.jar`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This recipe uses the recipe *Handling the incoming XML messages using DOM*,
    discussed in [Chapter 1](ch01.html "Chapter 1. Building SOAP Web-Services"), *Building
    SOAP Web-Services*, as the server-side project.
  prefs: []
  type: TYPE_NORMAL
- en: Run a Java class that calls a Web-Service in the main method.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Go to the folder `LiveRestaurant_R-2.2` in the command prompt and run the server
    using the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Go to the folder `LiveRestaurant_R-2.2-Client` and run the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'The following is the output when the Maven command is run on the client side:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Run a JUnit test case using Maven.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Go to the folder `LiveRestaurant_R-2.2` from the command prompt and run the
    server using the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Go to the folder `LiveRestaurant_R-2.2-Client` and run the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Here is the output after running the JUnit test case using Maven on the client
    side:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Run a Java class that calls a Web-Service in the main method, `exec-maven-plugin`,
    set in the `pom.xml` file. The Java class tells Maven to run `mainClass` of `OrderServiceClient:`
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Maven runs the following command internally using the project class path:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'To set up and run a JUnit test case in Maven, the test class `OrderServiceClientTest`
    should be included in the folder `src/test/java` and the test class name should
    end with `Test` `(OrderServiceClientTest)`. The command `mvn clean package` runs
    all the test cases in the `src/test/java` folder (internal Maven calls):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The recipes *Using Maven for building and running a Spring-WS project* and *Handling
    the incoming XML messages using JDOM*, discussed in [Chapter 1](ch01.html "Chapter 1. Building
    SOAP Web-Services"),*Building SOAP Web-Services.*
  prefs: []
  type: TYPE_NORMAL
- en: The recipe *Creating a Web-Service client on HTTP transport*, discussed in this
    chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a Web-Service client on HTTP transport
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, `WebServiceTemplate` is used to send/receive simple XML messages
    from the client side over the HTTP transport.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this recipe, the project''s name is `LiveRestaurant_R-2.3` (for server-side
    Web-Service) with the following Maven dependencies:'
  prefs: []
  type: TYPE_NORMAL
- en: '`spring-ws-core-2.0.1.RELEASE.jar`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`log4j-1.2.9.jar`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following are the Maven dependencies for `LiveRestaurant_R-2.3-Client`
    (for the client-side Web-Service):'
  prefs: []
  type: TYPE_NORMAL
- en: '`spring-ws-core-2.0.1.RELEASE.jar`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`junit-4.7.jar`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'This recipe uses the recipe *Setting up an endpoint by annotating the payload-root*,
    discussed in [Chapter 1](ch01.html "Chapter 1. Building SOAP Web-Services"), *Building
    SOAP Web-Services*, as the server-side project. Here is how you set up the client
    side:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a class that calls the Web-Service server using `WebServiceTemplate`
    in `src/test`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Configure `WebServiceTemplate` in the `applicationContext.xml` file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'From the folder `Liverestaurant_R-2.3`, run the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Open a new command window to `Liverestaurant_R-2.3-Client` and run the following
    command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'The following is the client-side output:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '`Liverestaurant_R-2.3` is a server-side project that reuses the recipe *Setting
    up an endpoint by annotating the payload-root*, discussed in [Chapter 1](ch01.html
    "Chapter 1. Building SOAP Web-Services"),*Building SOAP Web-Services.*'
  prefs: []
  type: TYPE_NORMAL
- en: The `applicationContext.xml` file of the configured client `WebServiceTemplate`
    `(id="webServiceTemplate")` is used for sending and receiving XML messages. The
    instance of this bean can be fetched from the client-side program to send and
    receive XML messages.
  prefs: []
  type: TYPE_NORMAL
- en: '`messageFactory` is an instance of `SaajSoapMessageFactory`, which is referenced
    inside `WebServiceTemplate. messageFactory` is used to create a SOAP packet from
    the XML messages. The default service URI is the URI that `WebServiceTemplate`
    uses by default to send/receive all requests/responses:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: '`OrderServiceClientTest.java` is a simple JUnit test case that is used to fetch
    and initialize `WebServiceTemplate` from `applicationContext.xml` in the method
    `setUpBeforeClass()` (marked by `@BeforeClass)`. In the methods `testCancelOrderRequest`
    and `testPlaceOrderRequest` (marked by `@Test), WebServiceTemplate` sends a simple
    XML message (created by a `StringSource` object from an existing input XML file)
    and receives a response from the server wrapped inside the `Result` object:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The recipe *Setting up an endpoint by annotating the payload-root*, discussed
    in [Chapter 1](ch01.html "Chapter 1. Building SOAP Web-Services"), *Building SOAP
    Web-Services* and the recipe *Setting up a Web-Service client development environment
    using Maven*, discussed in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a Web-Service client on JMS transport
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'JMS (Java message Service) was introduced in 1999 by Sun Microsystems as part
    of Java 2, J2EE. The systems that use JMS can communicate synchronously or asynchronously
    and are based on point-to-point and publish-subscribe models. Spring Web-Services
    provide features to set up a Web-Service over the JMS protocol that is built upon
    the JMS functionality in the Spring framework. Spring Web-Service over JMS protocol
    provides the following communication features:'
  prefs: []
  type: TYPE_NORMAL
- en: The client and server could be disconnected and can be connected only when sending/receiving
    messages
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The client doesn't need to wait until the server replies (in case the server
    needs a lot of time to process, for example, while doing complex mathematical
    calculations)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: JMS provides features that guarantee the delivery of messages between the client
    and server
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In this recipe, `WebServiceTemplate` is used to send/receive simple XML messages
    on the client side over JMS transport. A JUnit test case class is used to set
    up as on server side and send and receive messages using `WebServiceTemplate`.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this recipe, the project''s name is `LiveRestaurant_R-2.4`, with the following
    Maven dependencies:'
  prefs: []
  type: TYPE_NORMAL
- en: '`spring-ws-core-2.0.1.RELEASE.jar`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`spring-ws-support-2.0.1.RELEASE.jar`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`spring-test-3.0.5.RELEASE.jar`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`spring-jms-3.0.5.RELEASE.jar`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`junit-4.7.jar`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`xmlunit-1.1.jar`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`log4j-1.2.9.jar`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`jms-1.1.jar`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`activemq-core-4.1.1.jar`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This recipe uses the recipe *Setting up a Web-Service on JMS transport*, discussed
    in [Chapter 1](ch01.html "Chapter 1. Building SOAP Web-Services"), *Building SOAP
    Web-Services*, as a server-side project.
  prefs: []
  type: TYPE_NORMAL
- en: Create a JUnit test class that calls the Web-Service server using `WebServiceTemplate`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Configure `WebServiceTemplate` in `applicationContext` to send messages over
    the JMS protocol.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Run the command `mvn clean package`. You will see the following as output:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this project, we set up a Web-Service server, over JMS transport, using a
    JUnit class. The server uses `PayloadEndpoint` to receive the XML request message
    and returns a simple XML message as the response (the server is already described
    in the recipe *Setting up a Web-Service on JMS transport*, discussed in [Chapter
    1](ch01.html "Chapter 1. Building SOAP Web-Services"),*Building SOAP Web-Services).*
  prefs: []
  type: TYPE_NORMAL
- en: The `applicationContext.xml` file of the configured client `WebServiceTemplate`
    `(id="webServiceTemplate")` is used for sending and receiving XML messages. The
    instance of this bean can be fetched from the client-side program to send and
    receive XML messages. `messageFactory` is an instance of `SaajSoapMessageFactory`,
    referenced inside `WebServiceTemplate. messageFactory` is used to create a SOAP
    packet from the XML messages. The default service URI is the JMS URI that `WebServiceTemplate`
    uses by default to send/receive all requests/responses. `JmsMessageSender`, configured
    inside `WebServiceTemplate`, is used to send JMS messages. To use the `JmsMessageSender`,
    the `defaultUri` or `JMS URI` should contain the `jms:` prefix and a destination
    name. Some examples of `JMS URI` are `jms:SomeQueue, jms:SomeTopic?priority=3&deliveryMode=NON_PERSISTENT,
    jms:RequestQueue?replyToName=ResponseName`, and so on. By default, the `JmsMessageSender`
    sends JMS `BytesMessage`, but this can be overridden to use `TextMessages` by
    using the `messageType` parameter on the JMS URI. For example, `jms:Queue?messageType=TEXT_MESSAGE`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: '`JmsTransportWebServiceIntegrationTest.java` is a JUnit test case that fetches
    and injects `WebServiceTemplate` from the `applicationContext.xml` file (marked
    by `@ContextConfiguration("applicationContext.xml"))`. In the method `testSendReceive()`
    (marked by `@Test), WebServiceTemplate` sends a simple XML message (created by
    a `StringSource` object from a simple input string) and receives a response from
    the server wrapped inside the `Result` object. In the method `testSendReceive()`
    (marked by `@Test)`, sending and receiving of messages is similar to the HTTP
    client and uses `WebServiceTemplate.sendSourceAndReceiveToResult` to send/receive
    messages:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The recipe *Setting up a Web-Service on JMS transport*, discussed in [Chapter
    1](ch01.html "Chapter 1. Building SOAP Web-Services"),*Building SOAPWeb-Services.*
  prefs: []
  type: TYPE_NORMAL
- en: '*Unit testing a Web-Service using Spring Junit*'
  prefs: []
  type: TYPE_NORMAL
- en: Creating a Web-Service client on E-mail transport
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, `WebServiceTemplate` is used to send/receive simple XML messages
    on the client side, over E-mail transport. The *Setting up a Web-Service on E-mail
    transport* recipe from [Chapter 1](ch01.html "Chapter 1. Building SOAP Web-Services"),
    *Building SOAP Web-Services*, is used to set up a Web-Service. A JUnit test case
    class is used to set up a Web-Service on the server side and messages are sent/received
    using `WebServiceTemplate`.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this recipe, the project''s name is `LiveRestaurant_R-2.5`, with the following
    Maven dependencies:'
  prefs: []
  type: TYPE_NORMAL
- en: '`spring-ws-core-2.0.1.RELEASE.jar`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`spring-ws-support-2.0.1.RELEASE.jar`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`spring-test-3.0.5.RELEASE.jar`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`mail-1.4.1.jar`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`mock-javamail-1.6.jar`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`junit-4.7.jar`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`xmlunit-1.1.jar`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This recipe uses the recipe *Setting up a Web-Service on E-mail transport*,
    discussed in [Chapter 1](ch01.html "Chapter 1. Building SOAP Web-Services"), *Building
    SOAP Web-Services*, as the server-side project.
  prefs: []
  type: TYPE_NORMAL
- en: Create a test class that calls the Web-Service server using `WebServiceTemplate`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Configure `WebServiceTemplate` in `applicationContext` to send messages over
    the e-mail protocol.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Run the command `mvn clean package`. The following is the output of this command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This project sets up a Web-Service server over the E-mail transport, using a
    JUnit class. This class uses Spring JUnit that loads the application context,
    sets up the server first, and then runs the client unit test to verify that it
    functions as expected. The server is already explained in the recipe *Setting
    up a Web-Service on E-mail transport*, discussed in [Chapter 1](ch01.html "Chapter 1. Building
    SOAP Web-Services"),*Building SOAP Web-Services.*
  prefs: []
  type: TYPE_NORMAL
- en: 'The `applicationContext.xml` file of the configured client `WebServiceTemplate
    (id="webServiceTemplate")` is used for sending and receiving XML messages. The
    instance of this bean can be fetched from the client-side program to send and
    receive XML messages. `messageFactory` is an instance of `SaajSoapMessageFactory`,
    referenced inside `WebServiceTemplate. messageFactory` is used to create a SOAP
    packet from XML messages. `transportURI` is a URI used by `WebServiceTemplate`
    and indicates the server to use for sending requests. `storeURI` is a URI, configured
    inside `WebServiceTemplate`, and indicates the server to poll for responses (typically,
    a POP3 or IMAP server). The default URI is the e-mail address URI that `WebServiceTemplate`
    uses by default to send/receive all requests/responses:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: '`MailTransportWebServiceIntegrationTest.java` is a JUnit test case that fetches
    and injects `WebServiceTemplate` from `applicationContext.xml` (marked by `@ContextConfiguration("applicationContext.xml"))`.
    In the method `testWebServiceOnMailTransport()(marked` by `@Test), WebServiceTemplate`
    sends a simple XML message (created by a `StringSource` object from an input XML
    file) and receives a response from the server wrapped inside the `Result` object.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: See also..
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The recipe *Setting up a Web-Service on E-mail transport*, discussed in [Chapter
    1](ch01.html "Chapter 1. Building SOAP Web-Services"),*Building SOAP Web-Services.*
  prefs: []
  type: TYPE_NORMAL
- en: Unit testing a Web-Service using Spring Junit
  prefs: []
  type: TYPE_NORMAL
- en: Setting up a Web-Service on XMPP transport
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**XMPP** (The Extensible Messaging and Presence Protocol) is an open and decentralized
    XML routing technology on which systems can send XMPP messages to each other.
    The XMPP network consists of XMPP servers, clients, and services. Each system
    using XMPP is recognized by a unique ID known as the **Jabber ID (JID)** . XMPP
    servers publish XMPP services to offer connected to a client remote service.'
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, `WebServiceTemplate` is used to send/receive simple XML messages
    on the client side over XMPP transport. The recipe *Setting up a Web-Service on
    XMPP transport* from [Chapter 1](ch01.html "Chapter 1. Building SOAP Web-Services"),
    *Building SOAP Web-Services*, is used to set up a Web-Service. A JUnit test case
    class is used to set up a Web-Service on the server side and send and receive
    messages using `WebServiceTemplate`.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this recipe, the project''s name is `LiveRestaurant_R-2.6`, with the following
    Maven dependencies:'
  prefs: []
  type: TYPE_NORMAL
- en: '`spring-ws-core-2.0.1.RELEASE.jar`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`spring-ws-support-2.0.1.RELEASE.jar`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`spring-test-3.0.5.RELEASE.jar`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`junit-4.7.jar`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`xmlunit-1.1.jar`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`smack-3.1.0.jar`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This recipe uses the recipe *Setting up a Web-Service on XMPP transport*, discussed
    in [Chapter 1](ch01.html "Chapter 1. Building SOAP Web-Services"), *Building SOAP
    Web-Services*, as the server-side project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a test class that calls the Web-Service server using `WebServiceTemplate`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Configure `WebServiceTemplate` in `applicationContext` to send messages over
    the XMPP protocol.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Run the command `mvn clean package`. You will see the following output:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This project sets up a Web-Service server over the XMPP transport using a JUnit
    class. The server is already explained in the recipe *Setting up a Web-Service
    on e-mail transport*, discussed in [Chapter 1](ch01.html "Chapter 1. Building
    SOAP Web-Services"),*Building SOAP Web-Services.*
  prefs: []
  type: TYPE_NORMAL
- en: 'The `applicationContext.xml` file of the configured client `WebServiceTemplate`
    `(id="webServiceTemplate")` is used for sending and receiving XML messages. The
    instance of this bean can be fetched from the client-side program to send and
    receive XML messages. `messageFactory` is an instance of `SaajSoapMessageFactory`,
    referenced inside `WebServiceTemplate. messageFactory` is used to create a SOAP
    packet from XML messages. `WebServiceTemplate` uses `XmppMessageSender` to send
    messages to the server. The default URI is a XMPP address URI that `WebServiceTemplate`
    uses by default to send/receive all requests/responses:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: '`XMPPTransportWebServiceIntegrationTest.java` is a JUnit test case that fetches
    and injects `WebServiceTemplate` from `applicationContext.xml` (marked by `@ContextConfiguration("applicationContext.xml"))`.
    In the method `testWebServiceOnXMPPTransport()(marked` by `@Test), WebServiceTemplate`
    sends an XML message (created by a `StringSource` object from a simple input XML
    file ) and receives a response from the server wrapped inside the `Result` object.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The recipe *Setting up a Web-Service on XMPP transport*, discussed in [Chapter
    1](ch01.html "Chapter 1. Building SOAP Web-Services"),*Building SOAP Web-Services.*
  prefs: []
  type: TYPE_NORMAL
- en: Unit testing a Web-Service using Spring JUnit
  prefs: []
  type: TYPE_NORMAL
- en: Creating a Web-Service client using XPath expressions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Using XPath in Java programming is one of the standard ways of extracting data
    from XML messages. However, it mixes the XPath address of XML nodes/attributes
    (that might eventually turn out to be very long) with Java code.
  prefs: []
  type: TYPE_NORMAL
- en: Spring provides a feature to extract these addresses from Java and shift them
    into the Spring configuration file. In this recipe, the *Setting up an endpoint
    by annotating the payload-root* recipe from [Chapter 1](ch01.html "Chapter 1. Building
    SOAP Web-Services"), *Building SOAP Web-Services*, is used to set up a Web-Service
    server.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this recipe, the project''s name is `LiveRestaurant_R-2.7` (for the server-side
    Web-Service), with the following Maven dependencies:'
  prefs: []
  type: TYPE_NORMAL
- en: '`spring-ws-core-2.0.1.RELEASE.jar`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`log4j-1.2.9.jar`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following are the Maven dependencies for `LiveRestaurant_R-2.7-Client`
    (for the client-side Web-Service):'
  prefs: []
  type: TYPE_NORMAL
- en: '`spring-ws-core-2.0.1.RELEASE.jar`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`junit-4.7.jar`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`log4j-1.2.9.jar`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This recipe uses the *Setting up an endpoint by annotating the payload-root*
    recipe discussed in [Chapter 1](ch01.html "Chapter 1. Building SOAP Web-Services"),
    *Building SOAP Web-Services*, as the server-side project.
  prefs: []
  type: TYPE_NORMAL
- en: Configure the XPath expression inside `applicationContext.xml`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Configure `WebServiceTemplate` in `applicationContext` to send messages over
    the HTTP protocol, as described in the recipe *Creating a Web-Service client on
    HTTP transport*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a test class that calls the Web-Service server using `WebServiceTemplate`
    and uses the XPath expression in Java code to extract the desired values.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: From the folder `Liverestaurant_R-2.7`, run the command `mvn clean package tomcat:run`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Open a new command window to `Liverestaurant_R-2.7-Client` and run the following
    command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'The following is the output of the client-side code:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Setting up the client and server and using `WebserviceTemplate` are done in
    the same way as we did in the recipe *Creating a Web-Service client on HTTP transport*.
    `xpathExpPlace` and `xpathExpCancel` are configured in the client `applicationContext.xml`
    and it creates an instance of `XPathExpressionFactoryBean` that gets a property
    of `expression` as the XPath of the required data and `namespaces` of the XML
    messages:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'In the class `OrderServiceClientTest`, an instance of `XPathExpressionFactoryBean`
    can be extracted from `applicationContext. String message = xpathExp.evaluateAsString(result.getNode())`
    returns the required data using an XPath expression:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The recipe *Setting up an endpoint using an XPath expression*, discussed in
    [Chapter 1](ch01.html "Chapter 1. Building SOAP Web-Services"),*Building SOAP
    Web-Services.*
  prefs: []
  type: TYPE_NORMAL
- en: The recipe *Creating a Web-Service client on HTTP transport*, discussed in this
    chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Unit testing a Web-Service using Spring JUnit.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a Web-Service client for a WS-Addressing endpoint
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'As described in the recipe *Setting up a transport-neutral WS-Addressing endpoint*,
    discussed in [Chapter 1](ch01.html "Chapter 1. Building SOAP Web-Services"), *Building
    SOAP Web-Services*, WS-Addressing is an alternative way for routing. Instead of
    including the routing data within the body of the SOAP messages, WS-Addressing
    separates the routing data from the messages and includes it with the SOAP headers.
    Here is a sample of the WS-Addressing style of a SOAP message, sent from the client
    side:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: While using WS-Addressing, the client or server can access more features when
    compared to the other methods (including routing data within a message). For example,
    here the client side can set `ReplyTo` to its own and `FaultTo` to the admin endpoint
    address. Then the server sends successful messages to the client and fault messages
    to the admin address.
  prefs: []
  type: TYPE_NORMAL
- en: Spring-WS supports client-side WS-Addressing as well as on the server side.
    To create WS-Addressing headers for the client side, `org.springframework.ws.soap.addressing.client.ActionCallback`
    can be used. This callback keeps the `Action` header as a parameter. It also uses
    the WS-Addressing version and a `To` header.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, the *Setting up a transport-neutral WS-Addressing endpoint*
    recipe, discussed in [Chapter 1](ch01.html "Chapter 1. Building SOAP Web-Services"),
    *Building SOAP Web-Services*, is used to set up a WS-Addressing Web-Service. A
    client application is used here to call the server and return the response object.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this recipe, the project''s name is `LiveRestaurant_R-2.8` (for server-side
    Web-Service), with the following Maven dependencies:'
  prefs: []
  type: TYPE_NORMAL
- en: '`spring-ws-core-2.0.1.RELEASE.jar`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`log4j-1.2.9.jar`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following are the Maven dependencies for `LiveRestaurant_R-2.8-Client`
    (for the client-side Web-Service):'
  prefs: []
  type: TYPE_NORMAL
- en: '`spring-ws-core-2.0.1.RELEASE.jar`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`junit-4.7.jar`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`log4j-1.2.9.jar`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This recipe uses the recipe *Setting up a transport-neutral WS-Addressing endpoint*,
    discussed in [Chapter 1](ch01.html "Chapter 1. Building SOAP Web-Services"), *Building
    SOAP Web-Services*, as the server-side project. Creating a client for WS-Addressing
    is done in the same way as described in the recipe *Creating a Web-Service client
    on HTTP transport*, without using WebServiceTemplate. To add a WS-Addressing header
    on the client side, the method `sendSourceAndReceiveToResult` of `WebServiceTemplate`
    gets an `ActionCallBack` instance.
  prefs: []
  type: TYPE_NORMAL
- en: 'From the folder `LiveRestaurant_R-2.8`, run the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: 'Open a new command window to `LiveRestaurant_R-2.8-Client` and run the following
    command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: 'The following is the client-side output:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `Liverestaurant_R-2.8` project is a server-side Web-Service that supports
    the WS-Addressing endpoint.
  prefs: []
  type: TYPE_NORMAL
- en: The `applicationContext.xml` file of the configured client `WebServiceTemplate`
    `(id="webServiceTemplate")` is used for sending and receiving XML messages, as
    described in the recipe *Creating a Web-Service client on HTTP transport*, except
    for the implementation of the Java class that used `WebServiceTemplate`.
  prefs: []
  type: TYPE_NORMAL
- en: WS-Addressing client passes an instance of `ActionCallBack` to the method `sendSourceAndReceiveToResult`
    of `WebServiceTemplate`. Using `ActionCallBack`, the client adds a custom header
    that contains the `Action` URI, for example, [http://www.packtpub.com/OrderService/OrdReq](http://www.packtpub.com/OrderService/OrdReq)
    and the `To` URI, for example, [http://www.packtpub.com/liverestaurant/OrderService/schema](http://www.packtpub.com/liverestaurant/OrderService/schema).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: Using this header, the server side will be able to find the method in the endpoint
    (using the `@Action` annotation).
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The recipe *Setting up a transport-neutral WS-Addressing endpoint*, discussed
    in [Chapter 1](ch01.html "Chapter 1. Building SOAP Web-Services"),*Building SOAP
    Web-Services.*
  prefs: []
  type: TYPE_NORMAL
- en: The recipe *Creating a Web-Service client on HTTP transport*, discussed in this
    chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Unit testing a Web-Service using Spring JUnit
  prefs: []
  type: TYPE_NORMAL
- en: Transforming a Web-Service message using XSLT
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Eventually, clients of a Web-Service may use different versions of XML messages
    and the requirement is to use the same Web-Service on the server side.
  prefs: []
  type: TYPE_NORMAL
- en: Spring Web-Services provide `PayloadTransformingInterceptor`. This endpoint
    interceptor uses XSLT stylesheets and is useful when you need multiple versions
    of a Web-Service. Using this interceptor, you can transform the old format of
    the message to a newer one.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, the *Setting up a simple endpoint mapping for the Web-Service*
    recipe from [Chapter 1](ch01.html "Chapter 1. Building SOAP Web-Services"), *Building
    SOAP Web-Services*, is used to set up a Web-Service and the client application
    here calls the server and returns the response message.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this recipe, the project''s name is `LiveRestaurant_R-2.9` (for a server-side
    web service), with the following Maven dependencies:'
  prefs: []
  type: TYPE_NORMAL
- en: '`spring-ws-core-2.0.1.RELEASE.jar`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`log4j-1.2.9.jar`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following are the Maven dependencies for `LiveRestaurant_R-2.9-Client`
    (for the client-side Web-Service):'
  prefs: []
  type: TYPE_NORMAL
- en: '`spring-ws-core-2.0.1.RELEASE.jar`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`junit-4.7.jar`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`log4j-1.2.9.jar`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'This recipe uses the *Setting up a simple endpoint mapping for the Web-Service*
    recipe, discussed in [Chapter 1](ch01.html "Chapter 1. Building SOAP Web-Services"),
    *Building SOAP Web-Services*, as a server-side project. The client side is the
    same as discussed in the recipe *Creating a Web-Service client on HTTP transport*,
    except for the XSLT files and their configuration in the server-side application
    context file:'
  prefs: []
  type: TYPE_NORMAL
- en: Create the XSLT files`(oldResponse.xslt, oldRequest.xslt)`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Modify the file `spring-ws-servlet.xml` in `LiveRestaurant_R-2.9` to include
    the XSLT files
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'From the folder `Liverestaurant_R-2.9`, run the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: 'Open a new command window to `Liverestaurant_R-2.9-Client` and run the following
    command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: 'The following is the client-side output:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: 'The following is the server-side output:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The server side is the same as that described in the recipe *Setting up a simple
    endpoint mapping for the Web-Service* from [Chapter 1](ch01.html "Chapter 1. Building
    SOAP Web-Services"), *Building SOAP Web-Services*. On the client side, `WebServiceTemplate`
    and `OrderServiceClientTest.java` are the same as those described in the recipe
    *Creating a Web-Service client on HTTP transport*.
  prefs: []
  type: TYPE_NORMAL
- en: 'The only difference is the server application context file. The `transformingInterceptor`
    bean in `spring-servlet.xml` uses `oldRequests.xslt` and `oldResponse.xslt` to
    convert the old request XML message to the server''s newer version and vice versa,
    respectively:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The recipe *Setting up a simple endpoint mapping for the Web-Service*, discussed
    in [Chapter 1](ch01.html "Chapter 1. Building SOAP Web-Services"),*Building SOAP
    Web-Services.*
  prefs: []
  type: TYPE_NORMAL
- en: Unit testing a Web-Service using Spring JUnit.
  prefs: []
  type: TYPE_NORMAL
