- en: Chapter 5. Basic IPCop Usage
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that we have covered the installation of the IPCop firewall and several
    situations in which we would want to deploy it, we can discuss how to administer
    and operate an IPCop firewall. Assuming that the installation has been successful,
    a default IPCop installation presents us with a web interface. The web interface
    allows us to configure the firewall via any web browser, and is (by default) enabled
    only for clients on the Green, internal interface.
  prefs: []
  type: TYPE_NORMAL
- en: The web server runs on port 445 (for **HTTPS** traffic) by default, although
    these ports can be altered; the port is different from the commonly used/allocated
    port (443). It should be noted that accessing the web interface using this port
    will yield a certificate popup—this results from the use of a self-signed **SSL**
    certificate, and can safely be ignored.
  prefs: []
  type: TYPE_NORMAL
- en: The port assignment for HTTPS administration can be changed to any port above
    445 using the `setreservedports` command from the IPCop console or an **SSH**
    session, and this may be a consideration for anyone who wishes to access their
    IPCop host remotely, as some Internet Service Providers will firewall traffic
    to port 445 in order to prevent worms such as Sasser, which exploit vulnerabilities
    in Windows over port 445 (**SMB** over **TCP**). Alteration of this port to below
    445 must be done manually, although it should not be undertaken lightly, and will
    require the editing of the same files as `setreservedports` ([http://www.ipcop.org/modules.php?op=modload&name=phpWiki&file=index&pagename=IPCop140HttpsPortHowto](http://www.ipcop.org/modules.php?op=modload&name=phpWiki&file=index&pagename=IPCop140HttpsPortHowto)).
  prefs: []
  type: TYPE_NORMAL
- en: Unencrypted traffic to port 81, supported in versions pre-1.4, is deprecated,
    and existed initially only to support browsers without support for HTTPS/ssl.
    Since version 1.4 of the IPCop firewall, this has been altered in order to allow
    only HTTPS administration (although port 81 can be reconfigured).
  prefs: []
  type: TYPE_NORMAL
- en: Accessing our IPCop firewall via [https://ipcopfirewall:445/](https://ipcopfirewall:445/)
    (where ipcopfirewall is the name or IP address of the host), then, gives us the
    default configuration screen with an overview of the status of the IPCop firewall,
    the update status, system load, and menus for all of the appropriate configuration
    options. Any messages about certificates at this point can be safely ignored,
    and stem from the fact that your IPCop host generates its own SSL certificate,
    rather than using one issued by a **Certificate Authority** (**CA**) your browser
    may know about, such as VeriSign or CAcert.
  prefs: []
  type: TYPE_NORMAL
- en: The System Menu
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The items in the **System** menu are fairly critical to the system's functionality.
  prefs: []
  type: TYPE_NORMAL
- en: '![The System Menu](img/1361_05_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Software Updates
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The first thing we should do, post-installation, is to ensure that our IPCop
    firewall has the appropriate updates applied. Although many software updates provide
    updates and bug fixes for new features and existing software packages, some address
    new security issues, and in order to maintain the integrity of the firewall; it
    is important to apply these as frequently as possible.
  prefs: []
  type: TYPE_NORMAL
- en: The Software Updates functionality is provided under the **System | Updates**
    menu.
  prefs: []
  type: TYPE_NORMAL
- en: '![Software Updates](img/1361_05_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The **Refresh update list** button connects to the IPCop servers and retrieves
    a list of released updates—the **Available updates** portion of the page will
    indicate when there are updates that need to be supplied, and provide a download
    link. The updates must be manually downloaded as-is (not unpacked or extracted)
    from the Internet and then uploaded (via the **Browse** button) to the firewall.
  prefs: []
  type: TYPE_NORMAL
- en: As the name of the update files (`*.tgz.gpg`) indicates, the updates are signed
    with, the **GNU Privacy Guard** (**GPG**), which prevents unauthorized (or compromised)
    updates from being issued by anyone without first compromising the IPCop key used
    to sign the updates. The GPG signature prevents unpacking and reassembly or modification
    of the updates, causing IPCop to refuse to use an update file that has either
    been tampered with by an intruder or unpacked instead of being simply downloaded
    and uploaded.
  prefs: []
  type: TYPE_NORMAL
- en: The update will indicate whether a restart of the IPCop firewall is required,
    but in many instances, it is not, and it is typically kernel updates that require
    this.
  prefs: []
  type: TYPE_NORMAL
- en: Some releases of the IPCop firewall (generally major version increments, such
    as 1.3-1.4) require that the firewall be completely reinstalled, as the upgrade
    procedure is too complex to be carried out via an update as with a minor version
    increment. In this case, the firewall configuration can be backed up, so the firewall
    is not being entirely rebuilt from scratch.
  prefs: []
  type: TYPE_NORMAL
- en: Passwords
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The next **System** menu allows us to alter passwords—this screen is relatively
    self-explanatory, giving us the option to reset the **admin** password (which
    gives complete control over the web interface) and the **dial** password. The
    **dial** user allows a user access only to connect or disconnect a connection,
    which must be manually dialed, such as an analog modem.
  prefs: []
  type: TYPE_NORMAL
- en: The third account on the system, the root account (whose password you set during
    the installation), has the power to reset both the **admin** and **dial** user
    account passwords, but this facility must be used either on the console of the
    IPCop firewall or via SSH, which must be manually enabled.
  prefs: []
  type: TYPE_NORMAL
- en: SSH Access
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: SSH access allows us to securely establish a console session using an account
    with the appropriate privileges (such as the root account) remotely. SSH is a
    very useful tool, and a thorough coverage of it is beyond the scope of this chapter
    or even this book. At its most basic, SSH may be used to run commands and administer
    the system in a manner (i.e. textually, at the command line) similar to that done
    on the console of the machine itself.
  prefs: []
  type: TYPE_NORMAL
- en: Within the context of IPCop this is extremely useful because we can run the
    setup program, which we ran during the installation procedure (allowing us to
    reset or alter parameters such as the network configuration and card allocation,
    or reset passwords). If you altered the topology of your network or added/replaced
    network cards in your IPCop firewall, you might want to reconfigure it via SSH.
  prefs: []
  type: TYPE_NORMAL
- en: '![SSH Access](img/1361_05_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**SSH Keys**'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://hacks.oreilly.com/pub/h/66](http://hacks.oreilly.com/pub/h/66) is a
    good brief overview of the use of SSH keys, along with a few pointers to other
    resources (and a wide collection of user comments on the topic).'
  prefs: []
  type: TYPE_NORMAL
- en: Key authentication allows the use of keys stored on client computers (in a similar
    manner to SSL) to authenticate clients, rather than passwords that are transmitted
    (over an encrypted tunnel) over the Internet each time they are used during the
    SSH authentication phase (SSH-USERAUTH). This authentication method, assuming
    that the key is not stolen or compromised, is significantly more secure than the
    use of passwords, but more complex to understand and configure, and a little less
    flexible (a key file is required on any system you want to use to log in to your
    SSH server, whereas a password only needs to be remembered).
  prefs: []
  type: TYPE_NORMAL
- en: SSH is also more useful generally as a diagnostic tool—there are many tools
    included with IPCop that can only be accessed via the command line, such as `vim`
    (a powerful text editor), network utilities such as `ping` and `traceroute`, and
    `tcpdump`, which is extremely useful for debugging networking issues by dumping
    network traffic or just viewing the headers on the console. We can also use many
    of the standard Unix utilities such as `touch` and `grep`. Many of these (in fact
    all the commands mentioned in this paragraph apart from `vim` and `tcpdump`) are
    provided by `busybox`, the program that runs to provide the shell used when you
    log in at the console or via ssh.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**The Busybox Shell**'
  prefs: []
  type: TYPE_NORMAL
- en: 'Learn more about the `busybox` shell and the options it provides at: [http://www.busybox.net/downloads/BusyBox.html](http://www.busybox.net/downloads/BusyBox.html).'
  prefs: []
  type: TYPE_NORMAL
- en: Connecting to SSH
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Accessing SSH on a Linux or Unix system is fairly easy—once we have enabled
    SSH, it runs on the (non-default) port 222, so a command similar to the following
    will get you into your IPCop host (assuming a hostname of "IPCop"):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: At this point, you can work as if you were logged into the machine. On the Windows
    platform, an excellent free SSH client exists called **PuTTY**, whilst Linux and
    recent Unix platforms such as OS X almost universally have a command-line SSH
    client installed. In OS X this is accessible via `Terminal.app`, while konsole,
    gnome-terminal, rxvt, or any other Linux terminal emulator may be used in any
    recent Linux desktop to use SSH.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Download PuTTY**'
  prefs: []
  type: TYPE_NORMAL
- en: Download PuTTY from [http://www.chiark.greenend.org.uk/~sgtatham/putty/download.html](http://www.chiark.greenend.org.uk/~sgtatham/putty/download.html)
  prefs: []
  type: TYPE_NORMAL
- en: 'To use PuTTY, launch the `putty.exe` file downloaded from the above URL. This
    should pop up a box similar to the one shown in the following figure:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Connecting to SSH](img/1361_05_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: To connect to an IPCop host, enter the hostname or IP address of the host into
    the **Host Name** box, and the port number **222** into the **Port** box. You
    can save these settings by entering a profile name into the **Saved Sessions**
    textbox and clicking **Save**; the next time you open PuTTY, there will be an
    entry listed in the multi-list box, which presently only says **Default Settings**,
    with the name you entered into the **Saved Sessions** box. You can simply double-click
    this entry to connect. Use the username **root** and the password you set during
    the installation to connect, and you should have a prompt very similar to the
    one listed previously on a Linux system.
  prefs: []
  type: TYPE_NORMAL
- en: A Little More about SSH
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: SSH itself is a mature protocol in very wide deployment, and as such poses a
    minimal (and well understood) security risk. It is designed and maintained by
    the OpenSSH team, well known for OpenBSD, which has a reputation as one of the
    most secure operating systems in the world. As such, if you do not have a requirement
    for the form of richer VPN connectivity that the VPN functionality in IPCop can
    provide, SSH offers a lower profile alternative (and peace of mind).
  prefs: []
  type: TYPE_NORMAL
- en: SSH also provides us with several other powerful tools—the SSH protocol includes
    functionality that allows network connections to be tunneled over SSH (**TCP forwarding**).
    By enabling this option on our IPCop firewall and exposing SSH to the outside
    world, we have a very lightweight, platform-independent way to access internal
    network resources, and/or the IPCop configuration page without the overhead or
    complexity of a VPN.
  prefs: []
  type: TYPE_NORMAL
- en: This might, for instance, be a great way to access a customer's machine internally
    while it sits behind an IPCop firewall, or to simply access the IPCop web interface
    without exposing the web server to the Internet.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Using SSH to Tunnel Network Traffic**'
  prefs: []
  type: TYPE_NORMAL
- en: 'Briefly, there are several ways to use SSH via our IPCop firewall in order
    to tunnel network traffic. With TCP forwarding enabled, we can use Dynamic port
    forwarding to send connections through the SSH session via a proxy server. Using
    the command-line version of SSH, we do this using a command similar to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: As long as we leave this `SSH` connection open (and we can use it as an ordinary
    SSH connection), our local machine (i.e. the system we initiated the connection
    on) will have a proxy server running on the loopback interface (i.e. listening
    only on the address 127.0.0.1) and on port 1234\. We can then use any proxy-aware
    application to connect to any host that the IPCop host can connect to. This can
    be a poor man's VPN, used to access websites privately on a public internet connection,
    or as mentioned above, we can use it to access the web interface on the IPCop
    host or internal network resources.
  prefs: []
  type: TYPE_NORMAL
- en: The SSH man page is extremely comprehensive—`man ssh` on any Linux/Unix system
    (apart from IPCop) or a Google search for "man ssh" will provide a comprehensive
    listing of the other options available with the `ssh` command. PuTTY also supports
    similar options (including dynamic port forwarding in the same manner) via the
    GUI.
  prefs: []
  type: TYPE_NORMAL
- en: '![A Little More about SSH](img/1361_05_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Enter the port you wish to use on the client for proxying connections into the
    **Source port** box, pick **Dynamic**, hit **Add**, and then connect as normal.
    Once this has been configured for a specific connection, this setting will be
    saved along with the hostname and port number if you choose to save your profile
    in PuTTY.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**SSH and TCP Forwarding**'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://www.securityfocus.com/infocus/1816](http://www.securityfocus.com/infocus/1816)
    is an excellent security focus article written by Brian Hatch in 2005 about SSH''s
    capabilities in this area. It is complex, but well worth reading if you are even
    remotely interested in this topic.'
  prefs: []
  type: TYPE_NORMAL
- en: The **SSH Access** page also lets us view the SSH keys. Use of these is strongly
    encouraged—but beyond the scope of this book. Again, the SSH documentation (and
    the SSH man pages) is strongly encouraged as a good source of information on this.
  prefs: []
  type: TYPE_NORMAL
- en: GUI Settings
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The **GUI Settings** menu is shown in the following image:'
  prefs: []
  type: TYPE_NORMAL
- en: '![GUI Settings](img/1361_05_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The only option that we might want to seriously look at (and which isn't immediately
    obvious) is the **Enable Javascript** option, which we might want to disable if
    we are connecting to IPCop with older (or text-mode) clients.
  prefs: []
  type: TYPE_NORMAL
- en: Backup
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We can use the **Backup menu** in IPCop to back up our settings to a floppy
    disk or to a file accessible via the network. Apart from being useful for disaster
    recovery purposes, this also forms an important part of the upgrade procedure
    between major version increments where an in-place upgrade is not always possible
    (and the firewall must be reinstalled and the configuration restored).
  prefs: []
  type: TYPE_NORMAL
- en: '![Backup](img/1361_05_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The **Backup Configuration:** option at the top allows us to create backups
    on the IPCop host itself—hitting the **Create** button allows us to create a backup
    that is listed under **Backup Sets**.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Backup Encryption**'
  prefs: []
  type: TYPE_NORMAL
- en: As of version IPCop 1.4.0, backup functionality with encryption written by Tim
    Butterfield is included in IPCop. When IPCop makes encrypted backups, it does
    so using a random key stored on the machine itself, required to restore the backup.
    If your backups are encrypted, you will require a copy of the key to restore the
    backup.
  prefs: []
  type: TYPE_NORMAL
- en: 'For more information on how this works, see the author''s original page on
    the backup add-on prior to integration into the main body of IPCop code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://www.timbutterfield.com/computer/ipcop/backup.php](http://www.timbutterfield.com/computer/ipcop/backup.php)'
  prefs: []
  type: TYPE_NORMAL
- en: '![Backup](img/1361_05_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: By picking the backup in question and clicking on **Select**, we can download
    the appropriate backups and save them for archiving on another machine, or to
    a CD, tape, etc. As there is limited space on many IPCop firewalls, this allows
    the maintenance of a comprehensive backup set in a manner that does not compromise
    operational efficiency (and in a manner which is more disaster-tolerant than simply
    storing the backups on the same host). As firewall configuration tends to remain
    relatively static, a backup regimen for an IPCop host may not need to be frequent,
    but for obvious reasons, a regular backup schedule (or a procedure for backing
    up after each significant change) is strongly recommended.
  prefs: []
  type: TYPE_NORMAL
- en: Shutdown
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The **Shutdown:** menu is relatively straightforward, allowing a manual restart
    or shutdown of the IPCop host, and also allowing us to schedule a periodic restart
    of the host.
  prefs: []
  type: TYPE_NORMAL
- en: '![Shutdown](img/1361_05_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Checking the Status of Our IPCop Firewall
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Part of our management procedures should include monitoring of the IPCop firewall
    in order to ensure that CPU load, memory usage, network throughput, etc., maintain
    healthy levels. It is an extremely important role of the system administrator
    to establish a **baseline** for his or her systems in order to be able to identify
    abnormalities—many intrusions and hardware failures are first noticed by a drop
    (or rise) in network activity or CPU load.
  prefs: []
  type: TYPE_NORMAL
- en: '![Checking the Status of Our IPCop Firewall](img/1361_05_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The basic status screen allows us to view a number of basic system statistics
    before we inspect more detailed graphs of the statistics for the lifetime of the
    firewall. Services running on the IPCop box obviously have a serious impact on
    the ability of the box to do its job, and as a quick indicator the **Services:**
    display is useful in the event that the firewall ceases to function properly in
    order to ensure that the firewall thinks that the right services are running.
  prefs: []
  type: TYPE_NORMAL
- en: Many of the services, such as **Secure shell server** and the **Web proxy**,
    are not running by default—the previous image illustrates the default settings
    with the addition of the SSH server (which we enabled earlier in the chapter).
  prefs: []
  type: TYPE_NORMAL
- en: '![Checking the Status of Our IPCop Firewall](img/1361_05_11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '**Memory:** is fairly self-evident. Performance issues, particularly in a host
    that is a web proxy for larger networks—may be caused by inadequate memory. Although
    not always an indicator of memory issues, particularly if a host is under heavy
    load and in use by some of the more intensive functionality IPCop provides (such
    as the proxy server), the **Swap** indicator is worth understanding. **Swapping**
    is the process by which memory allocated to processes is moved to the hard drive,
    rather than being stored in the system''s **Random Access Memory**. This effectively
    allows the system to operate with more physical memory than the host has, at the
    cost of speed when the swapping operation is performed; accessing data on the
    hard disk for a program whose memory has been *swapped out* is significantly slower
    than accessing it from *real* memory.'
  prefs: []
  type: TYPE_NORMAL
- en: It is important to note that due to the way in which Linux allocates and manages
    memory, the percentage of used memory (on the top line) does *not* represent the
    amount of memory that is immutably in use—the Linux kernel caches frequently accessed
    files in a **disk cache** in memory to improve performance, which accounts for
    some of the memory usage. It is often more sane to view the memory without **buffers/cache**
    (the second indicator) for a better indication of how much memory is actually
    *available*. This is a prettier, graphed version of the output from the `free`
    command.
  prefs: []
  type: TYPE_NORMAL
- en: '![Checking the Status of Our IPCop Firewall](img/1361_05_12.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '**Disk usage:** for your IPCop system should also be relatively self-evident.
    The **/boot** partition is used to store the Operating System kernel and configuration
    information (since this is managed as part of the software update process, the
    usage isn''t critical even at high levels). The largest partition, used for the
    only thing that really grows, is mounted to **/var/log**, and as the name indicates,
    is used for storing log files.'
  prefs: []
  type: TYPE_NORMAL
- en: '![Checking the Status of Our IPCop Firewall](img/1361_05_13.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '**Uptime and users:** Uptime is self-evident. Users might not be; since this
    is (literally) the output from the `w` command, **users** refers to users logged
    into the Linux host itself, via an interactive session on the console or SSH.
    This should not be taken to mean that no one is *using* IPCop as a firewall, proxy
    server, or logged in via the web interface.'
  prefs: []
  type: TYPE_NORMAL
- en: Load in this context is, in accordance with the `w` command, *Unix* load. The
    three numbers that are listed represent load for the last 1, 5, and 15 minutes
    respectively. The number represents the number of processes using or waiting for
    CPU time, or in an uninterruptible sleep. Each such process adds 1 to the load
    number, and the number you see is an average of this for the period in question.
  prefs: []
  type: TYPE_NORMAL
- en: Load is not always a good measure of the load of the box, and network throughput,
    specific CPU statistics, and a more fine-grained output detailing process-specific
    information is often far more useful as a diagnostic tool (rather than a rough
    indicator).
  prefs: []
  type: TYPE_NORMAL
- en: '![Checking the Status of Our IPCop Firewall](img/1361_05_14.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '**Loaded modules:** is another piece of operating system - specific information.
    The Linux kernel bundles pieces of functionality as loadable *modules*, which
    may be removed or just not loaded if they aren''t necessary. Each piece of functionality
    that is modular and in use will show up here; the majority of these will be loaded
    at startup time, and represent everything from device drivers for network cards
    to the modules required by iptables to perform different firewalling functions
    (some of which are displayed in the previous figure).'
  prefs: []
  type: TYPE_NORMAL
- en: Unless you have a specific need to understand or view which modules are in use
    (or are just curious), this is not terribly useful information. The previous figure
    is essentially the output of the `lsmod` command.
  prefs: []
  type: TYPE_NORMAL
- en: '![Checking the Status of Our IPCop Firewall](img/1361_05_15.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'This is the output of the command `uname -a`, which displays, from left to
    right: Kernel name, Network node hostname, Kernel release, Kernel version, Machine
    hardware name, and Operating System.'
  prefs: []
  type: TYPE_NORMAL
- en: Network Status
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The information contained on the **Network Status** screen is frequently very
    useful in troubleshooting networking issues.
  prefs: []
  type: TYPE_NORMAL
- en: The first tool we are given is a colorized version of the output from the `ifconfig`
    command, with the network interfaces on the system being given the colors that
    IPCop uses to refer to them. Quite often when the IPCop host is attached to a
    network such as a Cable or ADSL connection that allocates configuration information
    via DHCP, this can be useful for verifying whether a loss of connectivity is related
    to the IPCop host or if there is a network outage with the service provider. Since
    we can see the number of errors and dropped packets, this can frequently be useful
    in troubleshooting other networking issues too.
  prefs: []
  type: TYPE_NORMAL
- en: '![Network Status](img/1361_05_16.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The **lo** interface represents the **Local Loopback** adapter, with the address
    of **127.0.0.1**, and should always be present. On this system, the Red interface
    is inactive, but on a fully populated IPCop system, we could see up to five interfaces
    here (Red, Green, Orange, Blue, and loopback).
  prefs: []
  type: TYPE_NORMAL
- en: '![Network Status](img/1361_05_17.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The **Current dynamic leases** table is actually showing us the *DHCP* leases
    handed out to clients on the internal network segments. In this case we have two
    clients, one of them has not provided a hostname with the DHCP request, and the
    other (**Knoppix**) has. IPCop registers hostnames with DNS, so the host **Knoppix**
    should be addressable as **Knoppix** via IPCop's DNS server.
  prefs: []
  type: TYPE_NORMAL
- en: Expired leases are scored through (struck out). The output displayed here essentially
    consists of the contents of `/var/state/dhcp/dhcpd.leases`.
  prefs: []
  type: TYPE_NORMAL
- en: Apart from letting us debug DHCP, this is also a quick and useful way to get
    hold of the MAC address for specific systems, either for setting up static reservations
    or for any other purpose.
  prefs: []
  type: TYPE_NORMAL
- en: '![Network Status](img/1361_05_18.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The routing table is used by the firewall to determine where to forward (or
    send) IP datagrams being handled by the system. A full discussion of routing is
    beyond the scope of this book, but the host routing table is an excellent first
    port of call for many networking issues, and a thorough understanding of routing
    is vital for the efficient administration of a firewall, network, or even a set
    of workstations.
  prefs: []
  type: TYPE_NORMAL
- en: '![Network Status](img/1361_05_19.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The ARP table consists of the current mappings between IP addresses and hardware
    (MAC) addresses on the local network segment(s). There are generally entries for
    each client on the network as well as one for the upstream router (either a Cable/ADSL
    router, or more usually the ISP's upstream router). As with many other items,
    this is extremely useful for some aspects of network troubleshooting, but beyond
    the scope of this book.
  prefs: []
  type: TYPE_NORMAL
- en: System Graphs
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: IPCop uses a package called **rrdtool** ([http://oss.oetiker.ch/rrdtool/](http://oss.oetiker.ch/rrdtool/))
    to maintain a set of graphs of a number of statistics pertaining to the system
    and network activity. These are automatically set up when the system is installed,
    and statistics we have access to under the **System Graphs** menu are **CPU Usage,
    Memory Usage, Swap Usage**, and **Disk Access**.
  prefs: []
  type: TYPE_NORMAL
- en: '![System Graphs](img/1361_05_20.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The previous figure is an example of such a graph (for CPU usage). Clicking
    on a specific graph drills down on that particular statistic, giving you graphs
    detailing that metric for the last day, week, month, and year.
  prefs: []
  type: TYPE_NORMAL
- en: You should note that due to **UTF** issues with rrdtool (which prevents the
    use of special characters), IPCop is currently constrained to generating these
    graphs in English only.
  prefs: []
  type: TYPE_NORMAL
- en: Network Graphs
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: IPCop also maintains graphs of network traffic across the interfaces in the
    system. These work in an identical manner to **System Graphs**.
  prefs: []
  type: TYPE_NORMAL
- en: '![Network Graphs](img/1361_05_21.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Connections
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The **Connections** feature displays a colorized output detailing all of the
    connections presently made through the IPCop firewall. Clicking on an IP Address
    in this screen performs a **reverse DNS lookup** on the address, giving you the
    hostname associated with the address if reverse DNS is configured (i.e. if the
    address has a **PTR** record).
  prefs: []
  type: TYPE_NORMAL
- en: Services
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Although IPCop is a firewall package, it contains many pieces of functionality
    that are outside the scope of a plain firewall. DNS and DHCP functionality, for
    instance, are normally served by separate hosts. IPCop, designed for smaller deployments
    in which half a dozen different servers (router, firewall, DHCP server, DNS server,
    Proxy server, IDS, etc.) are simply not feasible, bundles all of this functionality
    together.
  prefs: []
  type: TYPE_NORMAL
- en: The **Services** tab is where we can configure many of the features in IPCop
    that are separate elements, and require more complex setup. Some of these are
    covered in their own chapter; others, which are almost always deployed with IPCop
    (such as DNS and DHCP), will be covered here.
  prefs: []
  type: TYPE_NORMAL
- en: DHCP Server
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The top of the **DHCP Server** page allows us to reconfigure some of the options
    we set up when we installed IPCop (such as the start and end address and lease
    time). Others, such as options for **WINS** servers and the option for **Additional
    DHCP Options**, can now be added to our configuration.
  prefs: []
  type: TYPE_NORMAL
- en: '![DHCP Server](img/1361_05_22.jpg)'
  prefs: []
  type: TYPE_IMG
- en: If you do not understand DHCP, you probably have no need to reconfigure this
    (if your IPCop box is functioning as expected). You would, however, be well advised
    to understand DHCP (and the various flaws that it has).
  prefs: []
  type: TYPE_NORMAL
- en: Further down the page, we can configure **fixed leases**. Fixed leases (sometimes
    referred to as reservations) allow you to configure the DHCP server to respond
    with a specific IP address (rather than a random address from the pool) for a
    host matching a certain MAC address. The benefit of this is that you can have
    the power that centrally managing your IP configuration gives you while having
    the ability to reliably make connections to hosts by IP address rather than relying
    on DNS.
  prefs: []
  type: TYPE_NORMAL
- en: '![DHCP Server](img/1361_05_23.jpg)'
  prefs: []
  type: TYPE_IMG
- en: For some devices, such as network printers or IP cameras, that frequently do
    not handle dynamic DNS (or use an unfriendly and often unchangeable hostname),
    this is godsend if you don't want to manually set IP addresses statically on every
    networked device on your network.
  prefs: []
  type: TYPE_NORMAL
- en: Below this, we can (again) see the **Current dynamic leases**. This is a useful
    inclusion, if we have just attached a DHCP-capable device to our network but want
    to allocate it a specific address; we can copy the MAC address, create a fixed
    lease for it, and restart the device—at which point it should reacquire the correct
    (static) address.
  prefs: []
  type: TYPE_NORMAL
- en: The **Root Path** and **Filename** options, which may be unfamiliar to many
    network administrators or IT Professionals, are used for configuring systems booting
    from the network and reading files via **NFS**. In the vast majority of deployments
    (as the page indicates), it is safe to ignore them
  prefs: []
  type: TYPE_NORMAL
- en: Dynamic DNS
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Many internet connections in smaller businesses or at home use dynamically assigned
    IP addresses, via protocols such as PPP or DHCP, from a pool owned by the ISP.
    This enables the ISP to minimize the number of IP addresses it requires (as theoretically,
    it only needs as many IP addresses as the maximum number of clients online at
    any given time) and makes centralized configuration easier.
  prefs: []
  type: TYPE_NORMAL
- en: As a client's IP address will typically change session-for-session, as is the
    case with dial-up, or at indeterminate intervals, as is the case with ADSL or
    Cable clients, incoming connections are a problem. There is no way to get a client
    to VPN into the IPCop server, or deliver mail to the site the IPCop host exists
    on, if the IP address is constantly changing.
  prefs: []
  type: TYPE_NORMAL
- en: Dynamic DNS Providers solve this problem. By using an agent on the client machine
    that constantly updates a server on the Internet, the Dynamic DNS Provider can
    update a DNS name (such as youripcopserver.afraid.org) with the current IP address,
    so that as long as the IPCop host remains online, clients can always connect to
    it via the same DNS name.
  prefs: []
  type: TYPE_NORMAL
- en: IPCop has support for an extensive list of Dynamic DNS Providers, most of which
    are free. Afraid.org ([http://freedns.afraid.org/](http://freedns.afraid.org/))
    is an excellent choice, and has a reliable and well-setup service. All of the
    dynamic DNS providers work in fundamentally the same way—you register an account
    via the provider's website, and then provide IPCop with the details such that
    it can register itself. At this point (and given a minute or two for everything
    to start working) the hostname you registered for should resolve to your IPCop's
    Red IP address. Generally speaking, this is very simple and straightforward.
  prefs: []
  type: TYPE_NORMAL
- en: If you want to test this externally but do not have an external host to do it
    from, there are several online DNS testing services such as [www.dnsstuff.com](http://www.dnsstuff.com)
    that you can use in order to look up the **A** record for your domain in order
    to see if it resolves to the right IP address.
  prefs: []
  type: TYPE_NORMAL
- en: '![Dynamic DNS](img/1361_05_24.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Generally speaking, the **The classical RED IP used by IPCop during connection**
    option, which is checked by default will be the most appropriate option for you.
    If your IPCop router is behind another router, you will experience problems in
    actually connecting to the IPCop box via the Internet, and even more problems
    in connecting to internal services, as your traffic will effectively be undergoing
    Network Address Translation twice. The recommended solution if (as the page suggests)
    you are behind another NAT router is to remove that other NAT router and plug
    the IPCop Red interface directly into your internet connection if you're able
    to do so.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Configuring Port Forwarding**'
  prefs: []
  type: TYPE_NORMAL
- en: Note that in order to be able to connect to your IPCop host (or any resources
    behind it) you will have to configure port forwards to internal services in addition
    to being able to resolve the IP address of your IPCop host from the Internet.
  prefs: []
  type: TYPE_NORMAL
- en: Some routers for which this is not possible (such as Ethernet ADSL modems) will
    allow you to enable a bridged mode instead of performing NAT themselves. ADSL
    Routers using Conexant chipsets (among others) have a half-bridge feature that
    passes along the IP address received from the ADSL provider to the first computer
    plugged into the router's Ethernet port(s) via DHCP. This is a hack, but a useful
    one, as it allows one host to be directly connected to the Internet without the
    need for complex setups.
  prefs: []
  type: TYPE_NORMAL
- en: You should consult your manufacturer's documentation or support service for
    information on setting this up, as this is a fairly complex topic that varies
    greatly from router to router.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Dynamic DNS**'
  prefs: []
  type: TYPE_NORMAL
- en: Note that the phrase **Dynamic DNS** refers to two things within the context
    of this book. One, mentioned here, refers to the IP address of the IPCop host
    being registered with a provider on the Internet in order that the clients on
    the Internet can find the IPCop host via a predictable hostname (such as *youripcopbox.afraid.org)*
    even when the IP address changes.
  prefs: []
  type: TYPE_NORMAL
- en: The second, mentioned elsewhere, refers to the process by which clients in the
    IPCop Green network register *their* hostnames with the IPCop DNS Service in order
    that other machines on the IPCop internal segments can resolve their IP addresses
    from their hostnames. This second service is strictly internal and has no direct
    bearing on the outside world.
  prefs: []
  type: TYPE_NORMAL
- en: Edit Hosts
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The hosts file, present in Linux/Unix as `/etc/hosts` and in Windows as `%SystemRoot%\System32\Drivers\Hosts`,
    provides a means to manually set hostname-IP address relationships without the
    need for DNS. This can be useful for testing purposes, as a backup to DNS, or
    in environments with no DNS. In the event that you needed to force IPCop to resolve
    a particular hostname to a specific IP address, you could do so here without the
    need for a complex DNS configuration. This is something that you should not play
    with unless you have a good understanding of what it does.
  prefs: []
  type: TYPE_NORMAL
- en: Time Server
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**NTP** is a protocol designed to synchronize time from the Internet. Very
    simply, your IPCop host connects to a Stratum 2 NTP server and ascertains the
    time; this Stratum 2 NTP server itself connects to a Stratum 1 server (or more
    than one) in order to maintain its time source to an acceptable level of accuracy.'
  prefs: []
  type: TYPE_NORMAL
- en: The Stratum 1 server(s) maintain their time against an external time source
    such as a GPS clock, or radio receiver. This divide is maintained in order to
    reduce the load on the Stratum 1 servers, which would otherwise be unable to cope
    with the number of clients. It is considered as a bad practice to synchronize
    your server to a Stratum 1 NTP source unless you have a large (numbered in the
    thousands) network. You should also try to pick a Stratum 2 server (or pool) that
    is as close to you as possible, because the closer the server is, the more accurately
    your system will be able to set its clock.
  prefs: []
  type: TYPE_NORMAL
- en: Accurate time is extremely important for networked devices and in particular
    for firewalls, as being able to accurately discern the order in which logged events
    (such as intrusions) occurred is often crucial for maintaining a functional infrastructure
    and investigating (and prosecuting) intruders.
  prefs: []
  type: TYPE_NORMAL
- en: NTP generally maintains an accuracy level of between 5-15 milliseconds over
    the Internet. A detailed explanation of where NTP originated, why it is important,
    along with a list of available NTP servers, is available online at [http://ntp.isc.org/bin/view/Main/WebHome](http://ntp.isc.org/bin/view/Main/WebHome).
  prefs: []
  type: TYPE_NORMAL
- en: IPCop has the ability to synchronize to an external NTP source and also provide
    an NTP service for the clients on the local network.
  prefs: []
  type: TYPE_NORMAL
- en: '![Time Server](img/1361_05_25.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The default settings, if you check the **Obtain time from a Network Time Server**
    setting, should work—but you are recommended to pick a **Primary NTP Server**
    (or pool) that is closer to you. As the configuration page indicates, IPCop can
    also automatically synchronize the time.
  prefs: []
  type: TYPE_NORMAL
- en: IPCop will also let you set the time via the web interface. This is useful for
    an initial installation if the system clock is particularly out of sync, as an
    NTP update may not occur straightaway if you synchronize manually. If you do not
    wish to use NTP for whatever reason, you can keep your time updated in this way—or
    just use it to test NTP by setting the time incorrectly and then verifying whether
    NTP does indeed work.
  prefs: []
  type: TYPE_NORMAL
- en: Firewall Functionality
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The **Firewall** drop-down menu in IPCop contains functionality to configure
    functions of the firewall itself. Since IPCop's design philosophy is to treat
    the Green zone as implicitly trusted and downgrade trust from there onwards, there
    is no egress filtering natively built into IPCop. Instead, your two main choices
    for configuration here are **External Access**, which lets you control which ports
    IPCop will allow in the inbound direction, and **Port Forwarding**. See[Chapter
    9](ch09.html "Chapter 9. Customizing IPCop") for more information on setting up
    a more granular firewall policy, particularly for egress traffic (i.e. traffic
    traversing from Green to Red).
  prefs: []
  type: TYPE_NORMAL
- en: External Access
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: All traffic initiated in the Red zone is dropped by the IPCop firewall's rules
    by default. Almost all traffic coming in through the firewall in response to a
    request made by a client inside the network (such as a website being served in
    response to a client sending a *get* request for the website) is allowed, but
    in order to allow external hosts to connect to the IPCop firewall itself—to access
    a service such as the web interface or SSH—we need to add an external access rule.
  prefs: []
  type: TYPE_NORMAL
- en: '![External Access](img/1361_05_26.jpg)'
  prefs: []
  type: TYPE_IMG
- en: As we can see, IPCop by default has only one external access rule, for port
    113 (ident). Although there is no service running on this port by default on the
    IPCop Host, this rule exists in order to allow services that make connections
    to ident (such as IRC or Internet Relay Chat) to connect without waiting for the
    connection to timeout. By opening this port via external access, any connection
    to ident on the IPCop firewall will meet with a closed port, speeding up the connection
    compared to a filtered port.
  prefs: []
  type: TYPE_NORMAL
- en: By default, then, if we add an allow rule, traffic destined for the allowed
    port will hit that port on IPCop's external interface. The **External Access**
    screen lets us allow traffic in through IPCop's outermost defenses—actually port
    forwarding (or allowing the traffic to hit a specific internal machine) is done
    in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Port Forwarding
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Since we only have one external (Red) IP address and multiple internal clients,
    in order to allow a connection to a specific port on a specific internal machine
    from the Internet, we have to assign a port on the Red interface to correspond
    with the service on the internal machine, and *forward* this traffic to the client
    internally.
  prefs: []
  type: TYPE_NORMAL
- en: Under certain circumstances, such as if we were publishing an internal SSH (22)
    server to the web, we might choose to use a different external port to the port
    listening on the internal host. We might, for instance, port forward port 4022
    on the firewall to port 22 on the internal host. The benefits of this approach
    are that we can accommodate many instances of the same service (using ports 4023,
    4024, etc.) and that there is a slight security benefit in hiding the port our
    SSH service is running on.
  prefs: []
  type: TYPE_NORMAL
- en: One major disadvantage of this approach is that in some circumstances, the port
    is critical for the application running on it. HTTP traffic, for instance, defaults
    to port 80—the browser requires an extra parameter (usually denoted by a colon
    followed by the port number at the end of the IP address or hostname) to access
    HTTP traffic on an alternative port, as is the case with IPCop's own relocated
    HTTP/HTTPS interfaces on port 81 and 445.
  prefs: []
  type: TYPE_NORMAL
- en: If we relocate HTTP traffic to port 81 (or another port), clients behind a firewall
    allowing connections only to port 80 may also be inadvertently prevented from
    accessing our web server.
  prefs: []
  type: TYPE_NORMAL
- en: Some services require a specific port number. If we have an internal mail server
    to which we forward port 25 (SMTP) from our IPCop firewall, we must use port 25
    externally or mail servers relaying mail to us will not be able to connect to
    the mail server—SMTP servers use port 25, and no means exist for using an alternative
    port on the Web.
  prefs: []
  type: TYPE_NORMAL
- en: '![Port Forwarding](img/1361_05_27.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Our **Source port**, then, refers to the port that we open on the external interface.
    The **Destination port** refers to the port on the target host. If we wanted to
    forward port 4022 externally to port 22 on the internal host 10.1.1.123, for instance,
    we would enter **4022** into the **Source port** box, **22** into the **Destination
    port** box, and **10.1.1.123** into the **Destination IP** box.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Forwarding Multiple Ports**'
  prefs: []
  type: TYPE_NORMAL
- en: You can forward multiple consecutive ports by specifying a port range. This
    is accomplished through use of colons to delineate between the lowest and highest
    port in the range. If, for instance, we wanted to port forward ports 10 to 30
    on the external interface to ports 10 to 30 on a server within the network, we
    would put **10:30** in **Source port** and **10:30** in **Destination port**.
  prefs: []
  type: TYPE_NORMAL
- en: The **Source IP, or network (blank for "ALL")** box allows us to accept connections
    only from specific hosts. We might want to do this if we were opening up a protocol
    such as **RDP** (**3389**) to the Web, which we were not entirely happy with the
    security of. Alternatively, we may choose to actively allow connections only from
    trusted IP blocks as a matter of course, and pursue this approach for all of our
    port forwarding rules (apart from SMTP , which requires that connections be made
    to it by so many different hosts that setting up IP-based filtering in this manner
    is virtually impossible).
  prefs: []
  type: TYPE_NORMAL
- en: We might want to choose a different *protocol* if we were port forwarding a
    protocol such as DNS, which uses both UDP and TCP.
  prefs: []
  type: TYPE_NORMAL
- en: Firewall Options
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The **Firewall options** page allows us to enable and disable responses to **ICMP**
    (**Internet Control Message Protocol) echo** (ping) requests to various interfaces
    on the IPCop box. Generally it is considered to be a good practice to disable
    any unnecessary traffic, although ping can be particularly useful when testing,
    and it is a quite common omission among firewall rules to allow this traffic.
  prefs: []
  type: TYPE_NORMAL
- en: Although not a major issue pertaining to this option, since it only allows ICMP
    responses to be sent from the IPCop host, there are major reasons to disallow
    ICMP traffic in environments strict about outgoing traffic. It is possible to
    tunnel IP traffic (i.e. all connections made via TCP, UDP, and ICMP, including
    web access, DNS, port scans, and any other type of TCP/IP network activity) over
    ICMP.
  prefs: []
  type: TYPE_NORMAL
- en: This can lead to a situation in which, using an airport or coffee shop network,
    a rogue user can access the Internet without paying (since such pre-authentication
    or payment systems often allow DNS and ICMP traffic to traverse the firewall they
    have in place), or in a business, an employee can circumvent the firewall policy
    to gain access to unauthorized resources and sites.
  prefs: []
  type: TYPE_NORMAL
- en: See [http://thomer.com/icmptx/](http://thomer.com/icmptx/) for more details
    on tunneling IP over ICMP.
  prefs: []
  type: TYPE_NORMAL
- en: '![Firewall Options](img/1361_05_28.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Network Troubleshooting with Ping
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Of the three protocols running on top of IP, which constitute the **TCP/IP stack**
    in common usage on the Internet (TCP, UDP, and ICMP) ICMP is often the most overlooked.
    ICMP can be viewed as a sort of management channel—ICMP is primarily used for
    sending error messages and other pieces of information that are used to diagnose
    problems and handle data.
  prefs: []
  type: TYPE_NORMAL
- en: Ping actually uses the ICMP `echo request` and `echo reply` messages, and the
    first utility called ping was written in 1983\. The way this works is sometimes
    equated to **SONAR**—an initiating host sends an *echo request* message, usually
    to a specific host by IP address. The receiving host then replies with an *echo
    reply* message, and the initiating computer calculates the round trip time, which
    it displays in milliseconds (ms).
  prefs: []
  type: TYPE_NORMAL
- en: 'This provides a good, quick test of:'
  prefs: []
  type: TYPE_NORMAL
- en: Connectivity (whether the other host replies)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Network latency (the length of time taken)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Network reliability (leaving the `ping` command running, with the `-t` flag
    in Windows or by default with many other implementations of ping, is often a good
    way to detect sudden spikes in network usage or latency, or losses of connectivity).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: More recently, many hosts on the Internet have started firewalling ICMP traffic
    of this sort, not responding to `echo request` packets. In some instances, this
    may be to reduce bandwidth usage, while in others administrators may have blocked
    it for security reasons. Microsoft ([www.microsoft.com](http://www.microsoft.com))
    is one example of a high profile site that drops ping requests—Google ([www.google.com](http://www.google.com))
    is an example of one that doesn't.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**More about Ping**'
  prefs: []
  type: TYPE_NORMAL
- en: See [http://ftp.arl.mil/~mike/ping.html](http://ftp.arl.mil/~mike/ping.html)
    for more about ping from the original author of ping, Mike Muuss, as well as a
    link to (and picture of) the story of ping the duck, a worthy addition to any
    IT library or bookshelf!
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We have been through the mainstay of IPCop configuration in the web interface,
    and should by this point have a solid understanding of how we can employ the various
    options IPCop makes available to us to administer, troubleshoot, and monitor our
    IPCop firewall in a variety of different scenarios.
  prefs: []
  type: TYPE_NORMAL
