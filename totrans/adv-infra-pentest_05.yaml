- en: Docker Exploitation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: After learning how to exploit and defend Active Directory, let's continue our
    journey. This chapter will walk you through the different aspects of Docker containers.
    In this chapter, we will cover the basics from installing and configuring Docker
    to exploiting it. You will also get a glimpse of the power of Docker containers
    by learning how to build a complete penetration testing laboratory.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following topics will be covered in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Docker threats
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Docker breakout
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Build a Docker penetration testing lab
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Docker fundamentals
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Docker has spread like wildfire across modern organizations, thanks to its
    capabilities and promising services. It is an open source project with an Apache
    2.0 license that allows developers to package up their applications, without caring
    about dependencies issues, that has made a huge impact in modern application development.
    Since its development in March 2013, it has allowed developers to focus on their
    products instead of wasting time on fixing library problems. Thus, the three main
    principles of Docker are: develop, ship, and run. These three terms explain the
    main concept of Docker. Developers just need to develop their applications, and
    Docker will take care of the rest, in other words. It allows them to ship the
    applications and deploy them in any system. For more information about container
    management services, have a look at the project official website, [www.docker.com](http://www.docker.com), [as
    shown here:](http://www.docker.com)'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00136.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Virtualization
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Before diving into Docker''s magic powers, let''s go back into the past and
    discover how and why all this happened. Necessity is the mother of invention,
    as they say, and many years ago technicians were facing a huge problem called
    **the iceberg problem**; they were noticing that organizations were using only
    30% of their total technical resources. So, the need for a new way of optimizing
    resources was raised. That is when the term virtualization appeared. Virtualization
    is based on breaking up large-scale resources into small resources. It is not
    only a great way to manage resources but the isolation approach added a protection
    layer, in addition to many other advantages such as:'
  prefs: []
  type: TYPE_NORMAL
- en: Minimizing costs (many hosts on one hardware)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Easy management
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Separating resources into logical, separate virtual machines
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'To make all this happen, software named hypervisor is needed. It is a piece
    of software that manages all the virtualization aspects. It resides between the
    hardware and software. The basic role of a hypervisor is to manage the resources
    by assigning the required amount for operating the systems. The are two main types
    of hypervisors:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Type 1**: This type of hypervisor runs directly on the bare metal of the
    hardware, such as VMware ESXi and Xen'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Type 2**: This type of hypervisor runs on an operating system such as VMware
    Workstation and Sun VirtualBox'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following diagram illustrates the difference between the two types of hypervisors:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00137.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Cloud computing
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Cloud computing has seen a phenomenal growth in recent years. This computing
    paradigm is based on resource pools that provide customers with scalability and
    a long list of services. It reduces costs while clients are paying only for what
    they use, provides electric bills or other services. In other words, you pay as
    you go. This managed compute infrastructure provides a different on-premises environment
    and services such as storage, networks, applications, servers, and other many
    needed services in every modern organization. We can divide cloud computing models
    into the following three models:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Software as a Service** (**SaaS**):The client is given access to end-user
    applications hosted in the cloud'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Platform as a Service** (**PaaS**): The client is given access to a runtime
    environment and processing platforms'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Infrastructure as a Service** (**IaaS**): The client is given access to a
    virtualized infrastructure, including servers, storage, and networks'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following diagram gives a simple description of the different models:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00138.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'When we talk about cloud computing, organizations can benefit from three types
    of cloud computing:'
  prefs: []
  type: TYPE_NORMAL
- en: Public cloud
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Private cloud
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Hybrid cloud
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Cloud computing security challenges
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The information hosted in the cloud is an attractive target for malicious attackers.
    That is why it is essential to understand cloud security issues and know how to
    address them. According to the 2017 Cloud Security Report, more than 350,000 information
    security professionals think that data protection is the number one concern in
    front of adopting cloud computing. Stealing sensitive information is really a
    serious concern when it comes to cloud computing. With the EU **General Data Protection
    Regulation** (**GDPR**), starting from 2018, European companies will face  restrictions
    on internal data flows and could be fined millions of dollars if they don't respect
    the new regulations. Encryption is always a great solution to protecting sensitive
    cloud data. Weak authentication and the lack of a good identity management is
    one of the biggest cloud threats. Two-factor authentication mechanisms should
    be in place to make hacking attempts harder.
  prefs: []
  type: TYPE_NORMAL
- en: Docker containers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Docker containers are a form of virtualization but instead of creating an entire
    virtual machine, developers need to create containers. In other words, Docker
    containers are small virtual machines without the headache of creating virtual
    machines. The following diagram shows the difference between a virtual machine
    and a Docker container:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00139.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Deploying Docker containers will give developers the ability to reduce costs
    in addition to providing a lightweight and scalable environment.
  prefs: []
  type: TYPE_NORMAL
- en: Now, let's return to the present. To install Docker, we are going to use an
    Ubuntu 16.04 (Kali Linux can also be used) machine as a demonstration.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, add the GPG key for the official Docker repository:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '![](img/00140.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Add the Docker repository to APT sources:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '![](img/00141.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Finally, install Docker:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '![](img/00142.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'To check the Docker daemon, you can use the `systemct1` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '![](img/00143.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'For further information about Docker, just type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '![](img/00144.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'To get the Docker version, hit the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '![](img/00145.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'The typical Docker command format is:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Docker containers are based on images that are sets of parameters and filesystems.
    To check all the images in a Docker container, type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'To run an image, use the command `run`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'There are many other amazing capabilities in Docker. You can check them using
    Docker commands. These are some Docker commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '`create`: To create a  new container'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`cp`:  To copy files'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`exec`: To execute a command in a container'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`kill`:  To kill a running container'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`network`: To check docker networks'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ps`: To list containers'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`build`: To build a container based on a Dockerfile'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'You can check all the available commands by typing `sudo docker`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00146.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'A Dockerfile is a text file that contains information about the environment,
    files, and commands of a required image. You can edit it using any normal text
    editor. The following represents an elasticsearch (elasticsearch is a distributed
    RESTful search and analytics engine). A Dockerfile sample appears as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00147.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'To build an image from a Dockerfile, type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'For the demonstration, I am using the Microsoft Azure Cloud platform. You can
    visit the Azure official website from here [www.azure.com](https://azure.microsoft.com/en-us/?v=18.01).
    So, to build an image, I created an Azure container registry and logged in:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00148.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Click on New and create a new Azure Container Registry:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00149.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'To login, I used the `login` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00150.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'To check if we deployed the environment successfully, I used the `pull` command
    which pulls an image or a repository from a registry, which is a default Microsoft
    Azure image:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: '![](img/00151.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: To run a container that is an instance of a Docker image, we need to use the
    `run` command.
  prefs: []
  type: TYPE_NORMAL
- en: 'To list all the available containers, use the `ps` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: '![](img/00152.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'There are many other useful commands for containers as:'
  prefs: []
  type: TYPE_NORMAL
- en: '`top`: Processes within a container'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`stop`: Stops a container'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`rm`: Deletes a container'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`stats`:  Statistics about a container'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`pause`: Pause a container'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'A Docker container is based on a life cycle that is illustrated by the following
    workflow:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00153.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Docker exploitation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'You learned how to install and configure Docker containers. As a penetration
    tester, you need to be aware of the potential security issues and the potential
    threats against Docker systems. According to ClusterHQ in 2015, more than 60%
    of enterprises are concerned about containers'' security more than any other issue
    in the Docker production environment. There are many security concerns that face
    Docker containers. In order to do that, penetration testers should consider the
    following common container security challenges and vectors:'
  prefs: []
  type: TYPE_NORMAL
- en: Kernel exploits
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Denial-of-service** (**DoS**)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Container breakout
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Poisoned images
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Data theft
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Kernel exploits
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Docker containers are running on servers, but remember that there is a kernel**. **In
    fact, all the processes share the same kernel**. **Docker comes with many capabilities
    such as:'
  prefs: []
  type: TYPE_NORMAL
- en: '`chown`: To change the ownership of any file'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`fowner`: To bypass permission checks on operations that require the UID of
    a process and the UID of a file to be the same'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`kill`: To send kill signals to non-root processes'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`setgid`: To manipulate process GIDs and  GID list'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`setuid`: To manipulate process UIDs'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`net_raw`: To allow the use of raw and packet sockets'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'To check the available capabilities, you can use the `pscap` command. Before
    that, you need to make sure that you have installed the `libcap-ng-utils` dependency:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: '![](img/00154.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: '**Set user ID** (**SUID**) upon execution and **Set group ID** (**SGID**) upon
    execution are discussed previously in the [Chapter 2](part0108.html#36VSO0-ccc418ef6725406983cf4586f3600cdf),
    *Advanced Linux Exploitation*. They are two terms that represent access rights.
    They allow users to execute the binaries with the same permissions as its owner.
    These two executions could be exploited by attackers. That is why you need to
    configure Dockerfiles to disable `setuid` rights.'
  prefs: []
  type: TYPE_NORMAL
- en: To drop a capability, use the option: `--cap-drop =`.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, if you want to drop the `setgid` capability, you can run the following
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: '![](img/00155.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'If you want to drop all the capabilities and you want only to run `setfcap`, use
    the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'As a security measure, you need to disable the `setuid` rights  by modifying
    the Dockerfile:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: DoS and resource abuse
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'DoS is a serious threat for Docker platforms. Docker faces many DoS threats,
    such as:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Pending signals**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Posix message queues**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Maximum user processes**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Maximum files**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'To defend against these attacks, we need to:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Assign memory limits using the `-m`  option:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'Limit the CPU share (1,024 by default) using the `-c` option:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: Another feature in the Linux kernel that you can use to limit the access processes
    is `cgroups` (control groups) using the `--cpu-set-cpus` flag. You can have a
    clearer understanding by checking the following illustration.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00156.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Docker breakout
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Docker breakout is the operation of bypassing the isolation layer of Docker
    containers, pivoting to the host and getting access to information in an authorized
    way and the process of trying to gain more privilege (privilege escalation). Docker
    breakout could be done, thanks to some different attack vectors. The first vector
    is the threats discussed before: kernel vulnerabilities. Abusing privilege is
    another Docker breakout technique. Attackers can use **inter-container communication**
    (**icc**) which allows containers to communicate with each other. To secure Docker,
    you need to set the `-icc` flag to `false`, in addition to configuring `iptables`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'Docker plays a middleware role between kernel and container. As a security
    measure, it blacklisted kernel calls, but in 2015, an exploit was presented that
    exploited a non-blocked kernel call named `CAP_DAC_READ_SEARCH` which allowed
    attackers to break out of the Docker isolation and sneak to the container. The
    code is named *the shocker*, and it was presented as a breakout demonstration. You
    can clone the proof of concept of it from this [https://github.com/gabrtv/shocker](https://github.com/gabrtv/shocker) repository:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'To test the exploit, you only need to use the `docker run` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'Docker is relying on a daemon named Docker daemon. It requires root privileges.
    Non-trusted users present a serious threat. To gain root access, an attacker could
    use the Docker daemon privilege escalation Metasploit module:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: Poisoned images
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: On Docker Hub, there are more than 100,000 prebuild containers and images. Images
    are a vital component for Docker containers. In fact, containers are built, based
    on images. That is why you need to assert the authenticity of Docker images. Images
    are spread everywhere in the internet, so checking Docker images is a must because
    you don't want to run any arbitrary programs on your infrastructure. To verify
    a Docker image, use the `pull` command to verify if the image is signed. In other
    words, if the pull succeeded, the image is verified. In addition, ensure that
    your settings matches `DOCKER_CONTENT_TRUST=1.`
  prefs: []
  type: TYPE_NORMAL
- en: Database passwords and data theft
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'When using Docker, you will deal with passwords and credentials on a daily
    basis. Sensitive information and passwords are very highly attractive for attackers,
    as usual. Also, setting the filesystem to read only is a wise decision, by adding
    the `--read-only option`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: Docker bench security
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Docker delivers an important script named *Docker bench security*. It is really
    useful to collect and reporting information, warnings, and pass messages using
    a simple output. You can clone the bench from its official GitHub repository [https://github.com/docker/docker-bench-security:](https://github.com/docker/docker-bench-security)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the script, and it will check Docker, thanks to predefined best practices.
    Basically, it is based on the CIS Docker Community Edition Benchmark v1.1.0:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: '![](img/00157.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Docker vulnerability static analysis with Clair
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Clair is an open source project for the static analysis of vulnerabilities in
    Docker containers. It allows penetration testers to identify vulnerabilities in
    containers. You can find its official repository at **[https://github.com/coreos/clair](https://github.com/coreos/clair)**[.](https://github.com/coreos/clair)
  prefs: []
  type: TYPE_NORMAL
- en: 'The Clair project is composed of the following seven components, illustrated
    in the diagram:'
  prefs: []
  type: TYPE_NORMAL
- en: Content detectors
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Datastore
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Vulnerability updaters
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: RESTful API
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Notifiers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Clients
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Vulnerabilities databases
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/00158.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'To build a Dockernized environment, visit the official QUAY website [https://quay.io/](https://quay.io/):'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00159.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Complete your profile with the required information:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00160.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Create a new repository and choose its visibility:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00161.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Select a link to your repository, for example, I used a Dockerfile:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00162.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Wait until the building operation is finished:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00163.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'If you click on the build, you will see the content of the Dockerfile:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00164.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Wait for couple of minutes to finish the operation:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00165.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'To use the security scanner, you need an Enterprise account:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00166.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'After completing your profile, you will be able to test the Quay Security Scanner
    to check whether there are some common Docker vulnerabilities:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00167.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Building a penetration testing laboratory
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous sections, we discovered the power of Docker containers and learned
    how to defend against Docker exploitation techniques. Let's move on to another
    aspect of Docker containers. In this section, you will learn how to build a penetration
    testing laboratory based on a Dockernized environment.
  prefs: []
  type: TYPE_NORMAL
- en: We started our learning process using Kali Linux distribution, so we will use
    the same distribution as a demonstration.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, let''s clone a Kali Linux container file from GitHub, using the `git
    clone command`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: '![](img/00168.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Open the Dockerfile and add any additional configuration:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00169.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'For example, I added `metasploit-framework`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00170.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Now, let''s build the image using the `build` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: '![](img/00171.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'After completing the `pull` operation, the files will be extracted:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00172.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'To keep data and make it persistent, make sure that you create an attached
    volume to Kali Linux to keep your files, even after rebooting the system:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: '![](img/00173.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: '![](img/00174.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Now as you can see, you are in the instance:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00175.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Voila! Your lab now is ready. For example, if you want to run Metasploit, just
    type  `msfconsole`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00176.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: You can also run any other Kali Linux tool in a Dockerized environment. By doing
    that, you are combining the flexibility of Docker with the power of Kali Linux
    distribution.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter was a hands-on experience of learning how to install and configure
    Docker. You learned the capabilities of the Docker environment and how to secure
    it. You also discovered the power of Docker by building a penetration testing
    laboratory. In the next chapter, we will have a clear understanding of how to
    secure **continuous integration** (**CI**) servers.
  prefs: []
  type: TYPE_NORMAL
