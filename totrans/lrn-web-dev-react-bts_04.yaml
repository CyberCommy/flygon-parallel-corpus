- en: Chapter 4. DOM Interaction with ReactJS
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous chapter, we learned what JSX is and how we can create a component
    in JSX. As with many other frameworks, React also has other prototypes to help
    us build our web app. Every framework has different ways to interact with DOM
    elements. React uses a fast, internal synthetic DOM to perform diffs and compute
    the most efficient DOM mutation for you where your component actually lives.
  prefs: []
  type: TYPE_NORMAL
- en: React components are similar to functions that take props and state (this will
    be explained in a later section). React components only render the single root
    node. If we want to render multiple nodes, then they must be wrapped into the
    single root node.
  prefs: []
  type: TYPE_NORMAL
- en: Before we start working with form components, we should first take a look at
    props and state.
  prefs: []
  type: TYPE_NORMAL
- en: Props and state
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: React components translate your raw data into Rich HTML, the props and state
    together build with that raw data to keep your UI consistent.
  prefs: []
  type: TYPE_NORMAL
- en: 'OK, let''s identify what exactly it is:'
  prefs: []
  type: TYPE_NORMAL
- en: Props and state are both plain JS objects.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: They are triggered with a `render` update.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: React manages the component state by calling `setState(data,callback)`. This
    method will merge data into this state, and re-renders the component to keep our
    UI up to date. For example, the state of the drop-down menu (visible or hidden).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: React component props (properties) that don't change over time. For example,
    drop-down menu items. Sometimes components only take some data with this `props`
    method and render it, which makes your component stateless.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using `props` and `state` together helps you make an interactive app.![Props
    and state](graphics/image_04_001.jpg)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Refer to this live example from [Chapter 3](ch03.html "Chapter 3. ReactJS-JSX"),
    *ReactJS-JSX*. You will have a better working understanding of state and properties.
  prefs: []
  type: TYPE_NORMAL
- en: In this example, we are managing the state of toggle (show or hide) and the
    text of toggle buttons as properties.
  prefs: []
  type: TYPE_NORMAL
- en: Form components
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In React, form components differ from other native components because they can
    be modified via user interaction such as `<input>`, `<textarea>`, and `<option>`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is the list of supported events:'
  prefs: []
  type: TYPE_NORMAL
- en: '`onChange`, `onInput`, and `onSubmit`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`onClick`, `onContextMenu`,  `onDoubleClick`, `onDrag`, `onDragEnd`, `onDragEnter`,
    and `onDragExit`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`onDragLeave`, `onDragOver`, `onDragStart`, `onDrop`, `onMouseDown`, `onMouseEnter`,
    and `onMouseLeave`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`onMouseMove`, `onMouseOut`, `onMouseOver`, and `onMouseUp`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A full list of supported events can be found in the official documentation at
    [https://facebook.github.io/react/docs/events.html#supported-events](https://facebook.github.io/react/docs/events.html#supported-events).
  prefs: []
  type: TYPE_NORMAL
- en: Props in form components
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'As we know, ReactJS components have their own props and state-like forms that
    support a few props that are affected via user interaction:'
  prefs: []
  type: TYPE_NORMAL
- en: '`<input>` and `<textarea>`'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Components** | **Supported Props** |'
  prefs: []
  type: TYPE_TB
- en: '| `<input>` and `<textarea>` | Value, defaultValue |'
  prefs: []
  type: TYPE_TB
- en: '| `<input>` type of checkbox or radio | Checked, defaultChecked |'
  prefs: []
  type: TYPE_TB
- en: '| `<select>` | Selected, defaultValue |'
  prefs: []
  type: TYPE_TB
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In an HTML `<textarea>` component, the value is set via children, but in React
    it can be set by `value`. The `onChange` prop is supported by all native components
    such as other DOM events, and can listen to all bubble change events.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `onChange` prop works across the browser when the user interacts and changes:'
  prefs: []
  type: TYPE_NORMAL
- en: The `value` of `<input>` and `<textarea>`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `checked` state of the `<input>` type of `radio` and `checkbox`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `selected` state of the `<option>` component
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Throughout the chapter, we'll demonstrate how we can control a component with
    the properties (prop) and state we've just looked at. We'll then take a look at
    how we can apply them from the component to control the behavior.
  prefs: []
  type: TYPE_NORMAL
- en: Controlled component
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The first component we''re going to look at is the one that controls the user
    input into `textarea`, which prevents user input when the characters have reached
    the max length; it will also update the remaining characters when the user inputs:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'In the preceding code, we have declared the value of `textarea`, so when the
    user inputs, it will have no effect on changing the value of `textarea`. To control
    this, we need to use the `onChange` event:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Observe the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Controlled component](graphics/image_04_002.jpg)'
  prefs: []
  type: TYPE_IMG
- en: In the preceding screenshot, we are accepting and controlling the value provided
    by the user and updating the `prop` value of the `<textarea>` component.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `this.state()` should only contain the minimal amount of data needed to
    represent your UI's state.
  prefs: []
  type: TYPE_NORMAL
- en: 'But now we also want to update the remaining characters of `textarea` in `<span>`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding code, `this` would control the remaining value of `textarea`
    and update the remaining characters when the user inputs.
  prefs: []
  type: TYPE_NORMAL
- en: Uncontrolled component
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'As we''ve seen in ReactJS, when using the `value` property we can control the
    user input, so `<textarea>` without the `value` property is an uncontrolled component:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'This will render the `textarea` with an empty value and the user is allowed
    to input the value that would be reflected immediately by the rendered element
    because the uncontrolled component has its own internal state. If you want to
    initialize the default value, we need to use the `defaultValue` prop:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: It look's like the controlled component, which we have seen before.
  prefs: []
  type: TYPE_NORMAL
- en: Getting the form values on submit
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As we've seen, the `state` and `prop` will give you the control to alter the
    value of the component and handle the state for that component.
  prefs: []
  type: TYPE_NORMAL
- en: OK, now let's add some advanced features in our Add Ticket form, which can validate
    the user input and display the tickets on the UI.
  prefs: []
  type: TYPE_NORMAL
- en: Ref attribute
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: React provides `ref` non-DOM attributes to access the component. The `ref` attribute
    can be a callback function and it will execute immediately after the component
    is mounted.
  prefs: []
  type: TYPE_NORMAL
- en: 'So we will attach the `ref` attribute in our form element to fetch the values:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, we''ll add the JSX of form elements inside the `return` method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding code, I have added the `ref` attribute on our form elements
    and `onSubmit`, calling the function name, `handleSubmitEvent`. Inside this function,
    we are fetching the values with `this.refs`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, open your browser and let''s see the output of our code:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Ref attribute](graphics/image_04_003.jpg)'
  prefs: []
  type: TYPE_IMG
- en: We are successfully getting the values for our component. It's very clear how
    data is flowing in our component. In the console we can see the values of the
    form when the user clicks the **Submit** button.
  prefs: []
  type: TYPE_NORMAL
- en: Now, let display this ticket info in our UI.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we need to get the value of the form and manage the state of the form:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Now we will create the AddTicketsForm component, which will be responsible
    for managing and holding the state of addTicketList(values):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s take a look at the preceding code:'
  prefs: []
  type: TYPE_NORMAL
- en: '`getInitialState`: This initializes the default state for the `<List />` component'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`addTicketList`: This holds the value and passes into the `updateList` with
    the state'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`updateList`: This is for updating the list of the tickets to make our UI in
    sync'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Now we need to create the `<List items={items} />` component, which iterates
    the list when we submit the form:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s get an understanding of the preceding code:'
  prefs: []
  type: TYPE_NORMAL
- en: '`getListOfIds`: This will iterate through all the keys in the item, and it
    will return the list that we have mapped with the `<ListPanel item={item}/>` component'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`.bind(this)`: The `this` keyword will be passed as a second argument, which
    gives the appropriate value when the function is called'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'In the `render` method, we are just rendering the list of elements. In addition,
    we can also add a condition based on the length inside the `render` method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: It will validate the length, and based on the return value TRUE or FALSE, it
    will display the message or apply the Bootstrap class, `.bg-info`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now we need to create a `<ListPanel />` component that displays the list of
    tickets in the UI:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, let''s combine our code and see the result in the browser:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'In the preceding code, we are iterating the items and passing as a props in
    <Listpanel/> component:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Here is the markup of our HTML page:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'Open your browser and let''s see the output of our form before submitting:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Ref attribute](graphics/image_04_004.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The following screenshot shows how it looks after submitting the form:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Ref attribute](graphics/image_04_005.jpg)'
  prefs: []
  type: TYPE_IMG
- en: This looks good. Our first fully functional React component is ready.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Never access `refs` inside any component, and never attach them to a stateless
    function.
  prefs: []
  type: TYPE_NORMAL
- en: 'Observe the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Ref attribute](graphics/image_04_006.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'We are getting this warning message because of the `key` (an optional) attribute
    of React, which accepts a unique ID. Every time when we submit the form, it will
    iterate the `List` component to update the UI. For example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'React provides the add-ons module to solve this type of warning and generate
    the unique ID, but it is only available in npm. In further chapters, we will show
    how we can work with React npm modules. Here is a list of some popular add-ons:'
  prefs: []
  type: TYPE_NORMAL
- en: '`TransitionGroup` and `CSSTransitionGroup`: For dealing with animations and
    transitions'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`LinkedStateMixin`: To make easy interaction with the user''s form input data
    and the component''s state'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`cloneWithProps`: Changes the props of the component and makes shallow copies'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`createFragment`: Used to create a set of externally keyed children'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Update`: A helper function that makes it easy to deal with data in JavaScript'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`PureRenderMixin:` A performance booster'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`shallowCompare:` A helper function to do shallow comparison for props and
    state'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bootstrap helper classes
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Bootstrap provides some helper classes to give you a better user experience.
    In the `AddTicketsForm` form component, we have used the Bootstrap helper classes
    `*-info` , which helps you to convey the meaning of your message with color for
    screen readers. Some of these are `*-muted`, `*-primary`, `*-success`, `*-info`,
    `*-warning`, and `*-danger`.
  prefs: []
  type: TYPE_NORMAL
- en: 'To change the color of the text we can use `.text*`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'To change the background color we can use `.bg*`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: Caret
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'To display the caret that will indicate the direction of the dropdown, we can
    use:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: Clearfix
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'By using `clearfix` on the parent element, we can clear the float of child
    elements:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we have seen how props and state play an important role in
    making components interactive, as well as in DOM interaction. Refs is a great
    way to interact with your DOM elements. This would be inconvenient to do via streaming
    reactive props and state. With the help of refs we can call any public method
    and send a message to our particular child instance.
  prefs: []
  type: TYPE_NORMAL
- en: The key examples shown in this chapter will help you understand and clear your
    concepts about props, state, and DOM interaction.
  prefs: []
  type: TYPE_NORMAL
- en: The last example covers the advanced Add Ticket form with multiple JSX components
    along with Bootstrap, which will give you more ideas about creating React components
    and how we can interact with them using refs. You can use it and instrument it
    as easy as you play with HTML.
  prefs: []
  type: TYPE_NORMAL
- en: If you are still not sure how state and props work and how React interacts with
    DOM, I recommend that you go through this chapter again, which will also help
    you when looking at future chapters.
  prefs: []
  type: TYPE_NORMAL
- en: If you are done, then let's move on to [Chapter 5](ch05.html "Chapter 5. jQuery
    Bootstrap Component with React"), *jQuery Bootstrap Component with React,* which
    is all about Redux architecture in React.
  prefs: []
  type: TYPE_NORMAL
