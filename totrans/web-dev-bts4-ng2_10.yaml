- en: Chapter 10. Advanced Angular Techniques
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter is about advanced Angular techniques. We will learn about how to
    create client-side authentication, and how to test it on Firebase. We will introduce
    Webpack to manage modules and their dependencies and transform static assets to
    build bundles. We will learn how to install `ng2-bootstrap` and how it will enable
    readers to create an application in an easier way. Finally, we will finish building
    the project we started to develop in previous chapters.
  prefs: []
  type: TYPE_NORMAL
- en: 'At the end of the chapter, you will have a solid understanding of:'
  prefs: []
  type: TYPE_NORMAL
- en: Webpack
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Firebase authentication
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `ng2-bootstrap` components
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Angular CLI
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: JIT versus AOT compilation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Let''s begin:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the Terminal, create the folder `ecommerce` , and move in to it
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Copy the contents of the project from the `chapter_10/1.ecommerce-seed` folder
    into the new project
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Run the following script to install `npm` modules:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Start the TypeScript watcher and lite server with the next command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: This script opens the web browser and navigates to the welcome page of the project.
  prefs: []
  type: TYPE_NORMAL
- en: Webpack
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Until now, we''ve used SystemJS to dynamically load the modules in our application.
    Now we will start using Webpack''s approach to compare it with SystemJS. Our code
    is growing dramatically along with the chapters of this book, and we must decide
    what strategy we will use to load the modules shaping our web application. Webpack
    comes with core functionality and supports many bundle strategies out of the box
    or with extensions using specific loaders and plugins. It traverses through the
    required statements of the project to generate the bundles we have defined. We
    can use plugins for specific tasks such as minification, localization, and so
    on. Here is a small list of supported features:'
  prefs: []
  type: TYPE_NORMAL
- en: The **hot module reloading** instantly updates Angular 2 components without
    refresh
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Load bundles as you need them via the **lazy loading** mechanism
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Separate application code on bundles
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use **hashing** to cache bundles of your web application efficiently in the
    browser
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Generate **source maps** for bundles to easily debug minified versions of bundles,
    and so on
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Webpack migration
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Of course, using Webpack require a little commitment of time, but we get all
    of the benefits of managing separate dependencies and performance improvements.
    I've prepared a detailed migration plan to move from SystemJS to Webpack painlessly.
  prefs: []
  type: TYPE_NORMAL
- en: Installing Webpack CLI
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Before using it, we must install Webpack globally. Run the following command
    in the Terminal to make the command available:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Updating packages
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We''ve used the `lite-server` to serve our application until now. Webpack has
    its own `webpack-dev-server` , a little Node.js Express server to serve bundles
    via Webpack middleware. The `webpack-dev-server` is a separate npm package, so
    we need to update `devDependencies` in the `package.json` accordingly:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'The `webpack-dev-server` will serve the files in the current directory, unless
    we configure it. Change the `scripts` section in the `package.json` as defined
    in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Updating TypeScript configuration
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'From one side, Webpack is a module bundler, and it uses CommonJS or AMD formats
    to resolve dependencies between modules. From the other side, the Typescript compiler
    supports several module code generations. We need to choose one module format
    compatible for both, so I''ve decided to use the CommonJS as it''s much more convenient.
    Please open the `tsconfig.json` file and update it with the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, it''s time to install all necessary `npm` modules and `typings` . Open
    the Terminal and run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Creating Webpack configuration file
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'There are two ways to configure Webpack:'
  prefs: []
  type: TYPE_NORMAL
- en: Via CLI when Webpack reads a file `webpack.config.js` or we specify it as a
    `--config` option
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Via Node.js API where we pass the configuration object as a parameter
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The first approach is more convenient for us, so let''s create the `webpack.config.js`
    file. A configuration file in Webpack is a CommonJS module. We put all of our
    configuration, loaders, and other specific information relating to the build,
    into this file. There are two main properties each configuration file must have:'
  prefs: []
  type: TYPE_NORMAL
- en: The entry point for one or many bundles.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The output affecting the results of the compilation which tells Webpack how
    to write compiled files to disk. There is only one output property, even if we
    have multiple entry points.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Let''s add the following content into the `webpack.config.js` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: We will use the `main.js` file in the app folder as an entry point. We are planning
    to save the results of the compilation into the `bundle.js` file under the `dist`
    directory. The `__dirname` is the name of the directory that the currently executing
    script resides in. I added the array of `extensions` that Webpack will use to
    `resolve` the modules.
  prefs: []
  type: TYPE_NORMAL
- en: 'Webpack can only handle JavaScript natively, so we need to add the `ts-loader`
    into the `loaders` to process TypeScript files. **Loaders** allow us to preprocess
    files as we request them. Loaders can be chained together and they are always
    applied right to left. We can specify loaders in the module `request` but if we
    want to avoid repetitiveness, there is a better method. Just add them into the
    Webpack configuration file and specify how to apply them to the different file
    types. Webpack uses the `test` property of the loader to find the specific files
    and transform their content respectively. We can add extra conditions to find
    the files via `include` and `exclude` conditional properties. The condition is
    always tested against an absolute path and can be one of the following:'
  prefs: []
  type: TYPE_NORMAL
- en: A regular expression
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A string with a path
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A function getting the path as a parameter and returning a Boolean result
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An array of one of the above combined with `and`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'And last but not least is the development server configuration. We can configure
    the `webpack-dev-server` via CLI, but a more elegant way is to add the `devServer`
    section into the `webpack.config.js` file where we can put all the properties
    the server needs:'
  prefs: []
  type: TYPE_NORMAL
- en: The `historyApiFallback` helps in using the HTML5 history API
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `open` flag just opens the backend server URL in the web browser
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `watch` flag tells runtime to watch the source files and recompile bundles
    whenever they are changed
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `inline` flag embeds the `webpack-dev-server` runtime into the bundle
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `colors` option adds some colors to the output
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `port` contains the backend server URL port number
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `host` keeps the server URL host
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Let''s test how Webpack builds the project with the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Webpack should create the `bundle.js` file inside the `dist` folder.
  prefs: []
  type: TYPE_NORMAL
- en: Updating the markup
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The next thing to do is to update the `index.html` file. We need to delete
    all code belonging to SystemJS and insert the new code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Now we are ready to start the `webpack-dev-server` server. Open the Terminal
    and run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Webpack opens the web browser and navigates to the following web address: `http://localhost:9000`
    .'
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You can find the source code for this at `chapter_10/2.ecommerce-webpack` .
  prefs: []
  type: TYPE_NORMAL
- en: Preparing our project for production
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We can use the project as it is but it's better to make some changes to improve
    the build pipeline so we can produce it ready to deploy the project structure.
    Let's create a source folder and move our source code, styles, and template files
    inside. I would like to include all my resources into the bundles and show you
    the full potential usage of Webpack via plugins.
  prefs: []
  type: TYPE_NORMAL
- en: The three main entries
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The code of our project is still far from production status. We''ve left references
    on our JavaScript resources inside the `index.html` file, plus we need to consider
    how to load style files, Angular 2, and other third-party modules. The plan is
    quite simple: we need to split all dependencies into their own bundles:'
  prefs: []
  type: TYPE_NORMAL
- en: The `main` file will keep references on our application
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `polyfill` file contains references on all necessary polyfills
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `vendor` file contains all the vendors we use
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: One of the benefits of this approach is that we can add and remove polyfills
    and vendors independently of our code, so we don't need to recompile it.
  prefs: []
  type: TYPE_NORMAL
- en: Webpack plugins
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Webpack has a set of built-in plugins. We need to add them into the `plugins`
    property in the Webpack configuration file. Webpack splits plugins by groups such
    as configuration, output, optimize, dependency injection, localization, debugging,
    and others. You can find the list of built-in Webpack plugins here: [https://webpack.github.io/docs/list-of-plugins.html](https://webpack.github.io/docs/list-of-plugins.html)
    .'
  prefs: []
  type: TYPE_NORMAL
- en: The DefinePlugin
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'It''s obvious that we need to separate development and production configurations
    because they have different global constants and behaviors. This plugin allows
    us to create global constants configurable at compile time and available across
    all other plugins:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Now the `process.env.NODE_ENV` is available in the global scope and the following
    code in `main.ts` file will work:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: The ProvidePlugin
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The Bootstrap module requires several third-party libraries, such as *jQuery*
    and *Tether* , to be included in our application. We will use the `ProvidePlugin`
    to automatically load those modules and make them available in Bootstrap:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: The ProgressPlugin
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: We use this plugin to show the progress of compilation in the Terminal.
  prefs: []
  type: TYPE_NORMAL
- en: The LoaderOptionsPlugin
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'This plugin allows us to add options to some specific loaders:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: If you develop your own loader, you can activate the `debug` mode for it to
    set it to equals `true` . In our case, we use the `ENV_PRODUCTION` global constant
    to activate loaders into minimize mode only for production.
  prefs: []
  type: TYPE_NORMAL
- en: The CommonsChunkPlugin
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Webpack has an opt-in feature helping to split the code into chunks and load
    them on demand. Furthermore, we need to define split points and Webpack will take
    care of everything, such as dependencies, output, and runtime stuff:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: In our project, I've explicitly isolated the vendor and polyfills files in their
    bundles. The `minChunks` option is the minimum number of chunks which need to
    contain a module before it can move to common chunks. It can contain a number,
    callback function, or the `Infinity` keyword. Passing the `Infinity` creates a
    common chunk without moving the modules into it.
  prefs: []
  type: TYPE_NORMAL
- en: The UglifyJsPlugin
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'This plugin minimizes all the JavaScript output of chunks:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: We use it only for production, where it deletes the comments, and compresses
    and mangles variables names in JavaScript files.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following are several third-party plugins I''ve used in our project. All
    of them must be installed as separate npm modules:'
  prefs: []
  type: TYPE_NORMAL
- en: The extract-text-webpack-plugin
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'I imported the style file of our project in the `main.ts` file as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'Webpack will include the code for the `ecommerce.scss` file in the `bundle.js`
    file. That solution worked perfectly for development, but I would like to keep
    the styles as a separate file in production for the following reasons:'
  prefs: []
  type: TYPE_NORMAL
- en: The CSS is not a part of JavaScript bundle
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The CSS bundle requests in parallel to the JavaScript bundle
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The CSS is cached separately
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Runtime is faster because of less code and DOM operations
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The `ExtractTextPlugin` must be added into two places:'
  prefs: []
  type: TYPE_NORMAL
- en: In the loader to extract the CSS file
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'In the plugin to specify the resulting filename and the necessary behavior
    of the compiler:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: After compilation we will have style and source map files ready for production.
  prefs: []
  type: TYPE_NORMAL
- en: The webpack-md5-hash plugin
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Whenever Webpack compiles resources into bundles, it calculates the `hash`
    sum of each bundle and uses this number as a `chunkhash` string in the names of
    files:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: I prefer to use the Md5 based hash generator plugin to replace a standard Webpack
    `chunkhash` with Md5 for our project.
  prefs: []
  type: TYPE_NORMAL
- en: The html-webpack-plugin
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'As we''ve said, Webpack calculates and generates the hash for filenames of
    bundles every time, so we must somehow update that information in our `index.html`
    file. The `html-webpack-plugin` helps make this process painless and adds all
    HTML generated bundles to an application quickly:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: I used the `index.html` from the source file as a `template` that the plugin
    will use to generate the final HTML file inside the `dist` folder. We can `inject`
    generated JavaScript bundles into the `head` , but usually, we add them to the
    bottom of the page, just before closing the `body` tag. This plugin will add the
    chunks bundles by order of dependencies. The format of the template is based on
    the **Embedded JavaScript** ( **EJS** ) templating system, so we can pass values
    into the plugin, and it will retrieve them directly into the HTML.
  prefs: []
  type: TYPE_NORMAL
- en: Loaders
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The newest version of the project uses a wider number of loaders. Loaders,
    like modules, can be installed via npm. We use loaders to teach Webpack new functionality.
    You can find the list of Webpack loaders here: [https://webpack.github.io/docs/list-of-loaders.html](https://webpack.github.io/docs/list-of-loaders.html)
    .'
  prefs: []
  type: TYPE_NORMAL
- en: Loader naming conventions and search order
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Usually, loaders are named as `<context-name>-loader` for easily referencing
    them in configuration by their full or short name. You can change the loaders''
    naming convention and precedence search order via the `moduleTemplates` property
    of `resolveLoader` in the Webpack configuration:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: The bootstrap-loader
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `bootstrap-loader` loads the Bootstrap styles and scripts in the Webpack
    bundle. By default, it''s preconfigured to load Bootstrap 3\. We can use a special
    configuration file, `.bootstraprc` , to tweak many details of the loading process.
    The `bootstrapVersion` option tells the loader which major version of Bootstrap
    to load. Authors of the plugin recommend using the default configuration as a
    starting point to prevent unwanted upgrades or mistakes. You can write it in YAML
    or JSON formats. You can find the full documentation on the official website:
    [https://github.com/shakacode/bootstrap-loader](https://github.com/shakacode/bootstrap-loader)
    .'
  prefs: []
  type: TYPE_NORMAL
- en: The css-loader
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `css-loader` can download CSS files as a part of bundle. It resolves and
    interprets the `imports` and `url` statements as a `require` :'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: By default, the `css-loader` minimizes the CSS files if specified to do so by
    the module system. The web address of the project on GitHub is [https://github.com/webpack/css-loader](https://github.com/webpack/css-loader)
    .
  prefs: []
  type: TYPE_NORMAL
- en: The file-loader
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `file-loader` copies the file in the output folder and returns the public
    URL:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'It processes the content of the file to sum the MD5 hash and uses it as a filename
    of the resulting file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'You can configure a custom filename template via query parameters such as `name`
    , `ext` , `path` , `hash` :'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'You can find documentation on the official website: [https://github.com/webpack/file-loader](https://github.com/webpack/file-loader)
    .'
  prefs: []
  type: TYPE_NORMAL
- en: The postcss-loader
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Over 200 PostCSS plugins exist to solve global CSS problems, to use future
    CSS today, or to improve the readability of CSS files. The official list of plugins
    to discover can be found at: [http://postcss.parts/](http://postcss.parts/) .'
  prefs: []
  type: TYPE_NORMAL
- en: 'The `postcss-loader` uses PostCSS JS plugins to transform styles:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'You can find full documentation about how to use it here: [https://github.com/postcss/postcss-loader](https://github.com/postcss/postcss-loader)
    .'
  prefs: []
  type: TYPE_NORMAL
- en: The raw-loader
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'This loader just reads the file content and returns it as a string:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'Check the official website here: [https://github.com/webpack/raw-loader](https://github.com/webpack/raw-loader)
    .'
  prefs: []
  type: TYPE_NORMAL
- en: The resolve-url-loader
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Usually, we use this file in conjunction with other loaders. It resolves relative
    paths in the `url` statement based on the original source file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'Follow the link on the official website: [https://github.com/bholloway/resolve-url-loader](https://github.com/bholloway/resolve-url-loader)
    .'
  prefs: []
  type: TYPE_NORMAL
- en: The sass-loader
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'It loads the SASS file for processing:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'Find full documentation here: [https://github.com/jtangelder/sass-loader](https://github.com/jtangelder/sass-loader)
    .'
  prefs: []
  type: TYPE_NORMAL
- en: The style-loader
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'You can forget about adding CSS files into HTML files manually with the help
    of the style-loader. It adds CSS to the DOM by injecting the style tag. It can
    be very useful for development, but I recommend you extract the contents of CSS
    into a separate file or bundle if you build for production. The web address for
    full information is: [https://github.com/webpack/style-loader](https://github.com/webpack/style-loader)
    .'
  prefs: []
  type: TYPE_NORMAL
- en: The ts-loader
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'You must install TypeScript before using this loader. It loads the TypeScript
    files and runs the compile:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'Visit the official website for more information: [https://github.com/TypeStrong/ts-loader](https://github.com/TypeStrong/ts-loader)
    .'
  prefs: []
  type: TYPE_NORMAL
- en: The url-loader
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'This loader is similar to file loader, but it just returns a data URL, if the
    file size is smaller than the limit:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'Find more information here: [https://github.com/webpack/url-loader](https://github.com/webpack/url-loader)
    .'
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You can find the source code at `chapter_10/3.ecommerce-webpack-advanced` .
  prefs: []
  type: TYPE_NORMAL
- en: User authentication
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Authentication** is a process of providing identity to the user. Without
    that, we can''t provide the user specific services to grant permission to the
    user''s data. It''s a high risk to security sensitive information such as credit
    card details, so we need to save the user data securely.'
  prefs: []
  type: TYPE_NORMAL
- en: Adding authentication in the application
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Firebase brings easy authentication, so we can integrate it with any existing
    login server or clear cloud-based solutions. It supports third-party authentication
    from GitHub, Google, Twitter, and Facebook as well as built-in authentication
    via e-mail. Each provider has their own steps to set it up. I will use the **password
    authentication provider** , but you can add others at any time. Please find the
    official documentation from the following web page: [https://firebase.google.com/docs/auth](https://firebase.google.com/docs/auth)
    .'
  prefs: []
  type: TYPE_NORMAL
- en: Enabling authentication provider
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'When we created the instance of our web application, Firebase disabled all
    providers, so we need to enable one before use. Open the web browser, navigate
    to the Firebase console, and go into our application. Click on the **Auth** menu
    item on the left sidebar:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Enabling authentication provider](Image00146.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Click on **SET UP SIGN-IN METHOD** to enter. Click on **Email/Password** and
    activate the provider in the popup dialog:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Enabling authentication provider](Image00147.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The following  **OAuth redirect domains** section keeps only those domains
    that we whitelisted to initiate authentication for our application:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Enabling authentication provider](Image00148.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'When we registered our application, Firebase added the following origins:'
  prefs: []
  type: TYPE_NORMAL
- en: The `localhost` so that we can develop and test locally
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `https://<your-project-id>.firebaseapp.com` so that we can use Firebase
    hosting
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If you plan to host your application in other authorized origins, you need to
    add all of them to enable authentication from their domains here.
  prefs: []
  type: TYPE_NORMAL
- en: AngularFirebase2 authentication
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The **AngularFire2 authentication** works without configuration, but it''s
    good practice to configure it before use. The best place to do that is the `app.module.ts`
    file file where we defined the `AppModule` :'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: In the `firebaseAuthConfig` , we indicated that we use password authentication
    and Firebase will redirect to the login page for sign-in. Create the `auth` folder
    and `auth.service.ts` file inside it.
  prefs: []
  type: TYPE_NORMAL
- en: Authentication service
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `AuthService` is an adapter class that hides implementation details of
    how Firebase authenticates the user. It uses the `FirebaseAuth` class to do all
    the work for us:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'Some components of our application need to know the authentication status of
    the user in real time, so I subscribed to listening to the `FirebaseAuthState`
    events from the `FirebaseAuth` service. Our class consists of two main methods
    to manage authentication of the user:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: The `signIn` method expects user credentials, such as an e-mail and password,
    to log in and returns the `FirebaseAuthState` in a Firebase promise. The `signOut`
    helps us to log out from the application
  prefs: []
  type: TYPE_NORMAL
- en: The SignInComponent
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Create the `sign-in.component.ts` file to keep the code of  **SignInComponent**
    . It is a form where the user inputs his or her credentials and clicks on **Sign
    In** to pass the e-mail and password into the authentication service. It listens
    to the response that Firebase returns to redirect the user to the welcome page:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: The code shows an error message if the e-mail and password combination is incorrect.
    To protect the routes of the application from unauthorized users, we will use
    the Angular 2 feature called Guards.
  prefs: []
  type: TYPE_NORMAL
- en: Angular Guards
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The Angular 2 router provides a feature called **Guard** that returns either
    `Observable<boolean>` , `Promise<boolean>` , or `boolean` to allow it to activate,
    deactivate, or load a component. It can be registered in dependency injection
    as a function or class. The class registration has benefits if we need dependency
    injection capabilities. To register the Guard as a class, we need to implement
    one of the interfaces provided by Angular.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are four Angular Guards interfaces:'
  prefs: []
  type: TYPE_NORMAL
- en: The `CanActivate` Guard checks if a route can be activated
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `CanActivateChild` Guard checks if the children routes of a particular route
    can be activated
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `CanDeactivate` Guard checks if a route can be deactivated
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `CanLoad` Guard checks if a module can be loaded
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Because our Guard code will use the authentication service, I created the `auth.guard.ts`
    file and the `AuthGuard` as a class that implements the `CanActivate` interface:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: The Angular router will call the `canActivate` method of the interface to decide
    if a route can be activated by listening to the `FirebaseAuthState` event. If
    a user is successfully authenticated the method returns `true` , then the component
    registered in the route will be activated. If not, it returns `false` and redirects
    the user to the login page.
  prefs: []
  type: TYPE_NORMAL
- en: Logout in Navbar
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'I think it''s a good idea if our users have the option to sign-out from a web
    application. We should inject the authentication service into the `Navbar` component
    and create the logout method to call it to sign-out the user:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: 'As you''ll remember, we have an `authenticated` property in `AuthService` which
    changes the state when the user signs in or out of the application. We will use
    it to manage the appearance of the **Sign Out** and **Cart** components in the
    markup:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: When the user is signed-in to the application, those two components becomes
    visible.
  prefs: []
  type: TYPE_NORMAL
- en: Updating the Firebase database rules
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Now, when we secure our application on the client side, we must change the
    Firebase database rules so that only authenticated users have access to the data:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: Time to play
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Open the Terminal and run the following command to make a production build:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: 'After successfully doing this, we can deploy our application onto Firebase
    hosting:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: 'Open a web browser and navigate to the web application: `https://<your-project-id>.firebaseapp.com`
    .'
  prefs: []
  type: TYPE_NORMAL
- en: 'Any combination of e-mail and password brings the exception authorization message
    on the screen:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Time to play](Image00149.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Our application doesn''t have a registration form so that we can add the *test
    user* directly into the Firebase via console. Open the Firebase console and navigate
    to our application. Click on the **Auth** link on left sidebar to open the **Authentication**
    page:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Time to play](Image00150.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Click on **Add User** to open the popup dialog:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Time to play](Image00151.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Fill in the blank fields and click **Add User** . Now that we have the registered
    test user we can go back to our application and use the e-mail and password to
    successfully sign-in.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You can find the source code for this at `chapter_10/ 4.ecommerce-firebase-auth`
    .
  prefs: []
  type: TYPE_NORMAL
- en: The ng2-bootstrap
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'There is the `ng2-bootstrap` library which has no dependencies on jQuery and
    Bootstrap JavaScript files. It has a set of native Angular 2 directives for Bootstrap
    versions 3 and 4, so it costs nothing to try it out. For more information about
    how to use different components please go to the official website: [https://valor-software.com/ng2-bootstrap/index-bs4.html](https://valor-software.com/ng2-bootstrap/index-bs4.html)
    .'
  prefs: []
  type: TYPE_NORMAL
- en: 'Firstly, we will clean the project out of the bootstrap-centric modules:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, remove Bootstrap 4 modules from the `vendors.js` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, we are ready to install, so open the Terminal and install `ng2-bootstrap`
    :'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: 'The `ng2-bootstrap` module must be imported into `AppModule` . After installation,
    `ng2-bootstrap` supports Bootstrap version 3, so it''s necessary to set the theme
    to Bootstrap 4 before use:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, we will add the link on Bootstrap 4 CSS referencing on CDN inside
    the `index.html` :'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: 'The migration plan is clear enough: find all the places where we can use `ng2-bootstrap`
    and change the Bootstrap 4 based code to the appropriate components.'
  prefs: []
  type: TYPE_NORMAL
- en: Updating the slideshow on the welcome page
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'On the welcome page, we use the slideshow component for cycling through images
    as a carousel. `ng2-bootstrap` has a native component carousel doing the same
    thing. The main benefit of using the new component is writing less markup code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: 'The carousel has the following properties we can use to manage the slideshow:'
  prefs: []
  type: TYPE_NORMAL
- en: The `interval` property is an amount of time in milliseconds to delay between
    automatically cycling an item. By default, this amount equals 5,000\. If you change
    it to `false` , the carousel will not automatically cycle.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `noTransition` property will disable transition between slides. It is `false`
    by default.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `noPause` property will disable pausing on the carousel mouse hover. It's
    `false` by default.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `noWrap` property will prevent continuous cycling. By default, it's set
    to `false` .
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Update the drop-down cart in Navbar
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We use the drop-down component in Navbar to display the user's cart information.
    Let's update this component on analog from `ng2-bootstrap` .
  prefs: []
  type: TYPE_NORMAL
- en: 'First of all, we need import the `DropdownModule` into the `CartModule` :'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: 'After that, open the `cart-menu.component.html` and update the markup code
    wrapping the cart''s content:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: 'Any `ng2-bootstrap` drop-down based solution should include the following component:'
  prefs: []
  type: TYPE_NORMAL
- en: A drop-down root element marked with a `dropdown` directive
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An optional toggle element marked as `dropdownToggle`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A drop-down menu holding the content marked with `dropdownMenu`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We can use the `isOpen` property to manage the opened state of a dropdown.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You can find the source code for this at `chapter_10/5.ecommerce-ng2-bootstrap`
    .
  prefs: []
  type: TYPE_NORMAL
- en: Angular CLI
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now you have some knowledge about how to create a web application with SystemJS
    or Webpack and you understand that this is not a trivial process. Remember that
    all of the configurations belonging to different module loaders is too complicated
    and sometimes you will spend too much time on routine tasks. We've managed everything
    by ourselves until now, but it would be worth adding the Angular CLI to the scaffold
    to handle tedious tasks and build Angular applications.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following command will install the Angular CLI:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the following command to get the use commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: 'We will create the new Angular project with the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: 'After several minutes you will be ready to start the Angular 2 project with
    the installed NPM modules. Move into the project folder and start the development
    server:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: Now open `localhost:4200` in the web browser. The Angular CLI follows the recommended
    application structure and style guide when generating the source code and folders.
    We followed the same principles when we developed our project so that we can smoothly
    move the code from the previous project into the new one.
  prefs: []
  type: TYPE_NORMAL
- en: 'Stop the server and install the following modules:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: 'Find the `angular-cli.json` file in the root of the project and make the following
    changes in `styles` and `scripts` to add references on our `ecommerce.scss` style
    and `ng2-bootstrap` bundle:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: Copy the `database.rules.json` , `firebase.json` , and `firebase.import.json`
    files from the previous project, so we can use Firebase CLI to deploy our project
    to the host.
  prefs: []
  type: TYPE_NORMAL
- en: Delete all files from the `src/app` folder except for the `index.ts` file. Copy
    all the files from the `src/app` folder of the previous project into the new one.
  prefs: []
  type: TYPE_NORMAL
- en: Now run the development server, and open or refresh the `localhost:4200` in
    the web browser to see how our project is back online.
  prefs: []
  type: TYPE_NORMAL
- en: 'From now, you can generate new components, routes, services, and pipes with
    a simple command as well as run tests and builds. Please check the official website
    of Angular CLI to get more information: [https://cli.angular.io](https://cli.angular.io)
    .'
  prefs: []
  type: TYPE_NORMAL
- en: Just-in-time compilation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'My big concern is the size of our application. Look at the stats Webpack usually
    prints at the time of building the chunk files:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Just-in-time compilation](Image00152.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The bundle files are more than 4 Mbytes. Why is the application so huge?
  prefs: []
  type: TYPE_NORMAL
- en: 'When the application loads in the browser, Angular compiles it at runtime using
    the **Just-In-Time** ( **JIT** ) compiler. That compiler is the part of the code
    we load whenever we bootstrap the application. Note, we used this approach for
    building our project based on SystemJS or Webpack module loaders. That solution
    has the following drawbacks:'
  prefs: []
  type: TYPE_NORMAL
- en: Performance penalty, because code always compiles before use
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Rendering penalty, because each view is compiling before display
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Size penalty, because the code includes JIT compile
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Code quality penalty, because JIT compilation discovers errors at runtime
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We can solve many of those issues if we start using the **Ahead-Of-Time** (
    **AOT** ) compilation.
  prefs: []
  type: TYPE_NORMAL
- en: AOT compilation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In an AOT approach, we compile all resources upfront, so we don''t need to
    download the compiler into a web browser. This has the following benefits:'
  prefs: []
  type: TYPE_NORMAL
- en: Smaller application size, because the code doesn't include the compiler
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Blazing rendering, because the browser code and templates are precompiled
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fewer resource requests, because the styles and templates are compiled into
    the code
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Better template bindings error detection at the moment of compilation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fever possibilities for injection attack, because the web browser doesn't need
    to evaluate precompiled templates and components
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'So, how can we use this fantastic approach? The answer is very simple: use
    Angular CLI. It supports AOT out of the box, so we need only add the following
    commands into the scripts of `package.json` :'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: 'Save the changes, open the Terminal and run AOT build:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: 'The size of the bundle files after `gzip` compression are less than 400 Kbytes:'
  prefs: []
  type: TYPE_NORMAL
- en: '![AOT compilation](Image00153.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'You may start the development server with AOT and check the resulting size
    of the application your web browser:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You can find the source code at `chapter_10/6.ecommerce-aot-compilation` .
  prefs: []
  type: TYPE_NORMAL
- en: 读累了记得休息一会哦~
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**公众号：古德猫宁李**'
  prefs: []
  type: TYPE_NORMAL
- en: 电子书搜索下载
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 书单分享
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 书友学习交流
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**网站：**[沉金书屋 https://www.chenjin5.com](https://www.chenjin5.com)'
  prefs: []
  type: TYPE_NORMAL
- en: 电子书搜索下载
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 电子书打包资源分享
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 学习资源分享
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we learned how to create a client-side solution for account
    management and authentication, and how to test it on Firebase. We introduced Webpack
    and migrated our application from SystemJS. We know that it traverses through
    the required statements of the project to generate the bundles we have defined.
    Later we rediscovered our project and made more changes to use Webpack plugins.
    We now know that Webpack has a set of built-in plugins we can split by groups,
    such as configuration, output, optimize, dependency injection, localization, debugging,
    and others.
  prefs: []
  type: TYPE_NORMAL
- en: We learned that authentication is a process of providing identity to the user,
    and without that, we can't provide user specific services to grant permission
    to the user's data. We learned that Firebase brings easy authentication with any
    existing login server or uses a clear cloud-based solution. It supports third-party
    authentication from GitHub, Google, Twitter, and Facebook as well as built-in
    authentication via e-mail. Now we know that the AngularFire2 authentication works
    without configuration.
  prefs: []
  type: TYPE_NORMAL
- en: The `ng2-bootstrap` library has a set of native Angular 2 directives for Bootstrap
    versions 3 and 4 and it has no dependencies on jQuery and Bootstrap JavaScript
    files. We quickly integrated it into our project.
  prefs: []
  type: TYPE_NORMAL
- en: The Angular CLI helps to easy create an application, generate components, routes,
    services, and pipes out of the box. It supports the Ahead-Of-Time compilation
    to dramatically decrease the size of the application and improve the performance
    and security.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, we ended by building the project we started to develop in previous
    chapters.
  prefs: []
  type: TYPE_NORMAL
