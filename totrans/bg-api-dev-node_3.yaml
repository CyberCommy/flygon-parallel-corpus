- en: Building the API - Part 2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter is intended to revisit the previous implementation, this time saving
    our data in a persistent storage (database). It will also cover authentication,
    and unit testing and hosting as additional good-to-know concepts (but not essential).
    It is therefore prudent to put more emphasis on working with the DB using knex.js
    and authenticating your API with JWT.
  prefs: []
  type: TYPE_NORMAL
- en: 'By the end of this chapter, you will be able to:'
  prefs: []
  type: TYPE_NORMAL
- en: Implement database connection with Knex.js
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Describe commonly used Knex.js methods
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Rewrite our previous implementation of the todo routes with Knex.js
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Implement API authentication with JWT
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Describe the importance of having unit tests for your API
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Implement basic testing of the API with Lab
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Working with the DB Using Knex.js
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we're going to go through the fundamental concepts of working
    with the database. We will continue with the step-by-step build-up from our previous
    todo project. You will have noticed that our last project, we were storing our
    information in computer memory, and that it disappears immediately once our server
    returns. In real-life, you will want to store this data persistently for later
    access.
  prefs: []
  type: TYPE_NORMAL
- en: So, what is Knex.js? It is a SQL query-builder for relational databases like
    PostgreSQL, Microsoft SQL Server, MySQL, MariaDB, SQLite3, and Oracle. Basically,
    with something like Knex, you can write one code that will easily work with any
    of the mentioned databases, with no extra effort, just switching the configurations.
  prefs: []
  type: TYPE_NORMAL
- en: Let's walk through the exercise as we explain the concepts.
  prefs: []
  type: TYPE_NORMAL
- en: 'Exercise 12: Setting up the Database'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s go back to where we left off in the *Exercise 11: Validating a Request* of [Chapter
    2](part0038.html#147LC0-12af9adc04d045258c0a537819d419dc), *Building the API –
    Part 1*. In this example, we will be using MySQL as our database of choice. Make
    sure your machine is set up with MySQL and MySQL Workbench:'
  prefs: []
  type: TYPE_NORMAL
- en: Use the `Code/Lesson-3/exercise-a` folder for your reference.
  prefs: []
  type: TYPE_NORMAL
- en: 'Open MySQL Workbench. Click on the + button to create a connection:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00023.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Add the connection name as `packt`, username as `root`, and the password (if
    any). Click on Test Connection to see if the connection is correct, then click
    on OK:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00024.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Click on OK to create the connection.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now, click on the connection, packt:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00025.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Create the todo database by running the following query, and click on the Execute
    icon:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '![](img/00026.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'The chapter files come with a basic SQL schema for our todo example project,
    almost similar to what we were using with the basic JavaScript array in the previous
    exercises:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the `Code/Lesson-3` folder, there is a file called `raw-sql.sql`. Open the
    file with your code editor and copy the contents of the file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Then, go back to the MySQL Workbench.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Paste what you copied from the file in the textbox and click on the Execute
    icon:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00027.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'You should see the list of the created tables (`todo`, `todo_item`, `user`)
    as below, when you click on the Refresh icon to the right of the SCHEMAS label,
    and click on Tables:'
  prefs:
  - PREF_OL
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00028.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Exercise 13: Connecting to the Database'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now that we have created out database, in this exercise we are going to connect
    our application to our database using the necessary npm packages, that is, `knex`
    and `mysql`:'
  prefs: []
  type: TYPE_NORMAL
- en: 'On the Terminal, change directory to the root of our project, and run the following
    command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s create a file `db.js` and add the following code to it, replacing the
    user and password appropriately if need be:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: You can find the complete code from the `db.js` file at `Code/Lesson-3/exercise-a`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s test that we have our configurations right. We will create a `test-db.js`
    file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, let''s go to the Terminal and run the test file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'You should get the following printed:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Exercise 14: Creating a Record'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this exercise, we''re going to write code for saving a todo and its *items*.
    To start off, let''s create a dummy user since we will hardcode the user ID for
    our code. Later, in *Exercise 19: Securing All the Routes*, we will have the ID
    picked from the authentication details:'
  prefs: []
  type: TYPE_NORMAL
- en: Go back to MySQL Workbench.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Clear the previous query and paste the following query, and click on the Execute
    icon:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'When you click on the user table, you should see the following; our newly created
    user has an ID of `1`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00029.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Now, let''s go to our routes file, `/routes/todo.js` and modify the code, for
    the `POST: /todo` route; change the code to be as follows (it''s only the `handler`
    that is changing, notice the change to `async` function):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Let''s start by requiring our Knex instance that is in `./db.js`. Just after
    the line requiring Joi, add this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Notice the two dots, `../db.js`, since `db.js` is found in the parent folder.
    Recall our topic on requiring local modules in [Chapter 1](part0019.html#I3QM0-12af9adc04d045258c0a537819d419dc),
    *Introduction to Node.js*.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, let''s modify our handler for the `POST: /todo` route. Here, were are
    using the `Knex.insert` method, and adding an optional `.returning` method so
    that we get back the ID of `todo` we have added:'
  prefs:
  - PREF_OL
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: You can find the complete code from the `todo.js file` at `Code/Lesson-3/exercise-a/routes`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Unlike our previous exercises in [Chapter 2](part0038.html#147LC0-12af9adc04d045258c0a537819d419dc),
    *Building the API – Part 1*, we will split our `POST: /todo` route into two, `POST:
    /todo`, for adding a todo list, and `POST: /todo/<id>/item` for adding items to
    the list.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, let''s test our newly created endpoint. If you had stopped your server,
    go back to the Terminal and start it again, with `nodemon`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Go to Insomnia and make the post request; you should get something like this
    (notice the `todo_id` returned, since we will use it in our next example):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00030.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Now, let''s add a route for adding todo items, `POST: /todo/<id>/item`; therefore,
    next to the previous `route` object, add this `route` object:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: You can find the complete code from the `todo.js` file at `Code/Lesson-3/exercise-a/routes`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, let''s test the route, `/todo/1/item`, `1` being the ID of `todo` we created
    in step 6:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00031.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Exercise 15: Reading from the Database'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this exercise, we''re going to write the routes for:'
  prefs: []
  type: TYPE_NORMAL
- en: Listing all `todo` for a particular user
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Getting details for a single todo item
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Listing items for a particular todo
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'We will use a number `Knex` methods:'
  prefs: []
  type: TYPE_NORMAL
- en: '`Knex(''<table_name>'')`, this is equivalent to ''`SELECT * FROM <table_name>`'''
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`.where()`, used for adding the where clause to the query'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'To get a list of all todo, we will modify our previous `GET: /todo` route.
    Here, you only want to list todo items for a particular authenticated user. For
    now, we will be using our hardcoded test user:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s modify the route for getting a single `todo` item, `GET: /todo/<id>`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: You can find the complete code from the `todo.js` file at `Code/Lesson-3/exercise-a/routes`.
  prefs: []
  type: TYPE_NORMAL
- en: 'We are using array destructuring here too, since the result, if any, will be
    an array of length 1, so we''re getting the first and only element from the array
    with: `const [ todo ] = ...`'
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, let''s add the route object for getting a list of items for a particular
    `todo`, preferably just after the route for adding a `todo` item that we did in
    *Exercise 14: Creating a Record*:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, let''s test the route:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00032.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Exercise 16: Updating a Record'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this exercise, we''re going to write routes for updating a todo title or
    a todo item, and here we will introduce a new Knex method, `.update()`:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s start by modifying our previous `PATCH: /todo/<id>` route. We have also
    added an extra validation to make sure that `title` is supplied as `payload`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s test the route:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00033.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Now, let''s add another `PATCH` route for `/todo/<id>/item`, this will help
    in editing a `todo` item''s text and also marking a `todo` item as done or not
    done:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: You can find the complete code from the `todo.js` file at `Code/Lesson-3/exercise-a/routes`.
  prefs: []
  type: TYPE_NORMAL
- en: 'This route can take each of the payload items one at a time (which will be
    the most practical case, when using, for example, a web or mobile UI), or all
    at once:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'For instance, changing the item from `Nairobi` to `Nigeria`, or:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00034.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Marking the item as `done`:'
  prefs:
  - PREF_OL
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00035.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'When we list the items again through the `GET: /todo/<id>/item` route, you
    will see the updated item:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00036.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Exercise 17: Deleting a Record'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this exercise, we will be introducing the last vital Knex method to complete
    our **Create**, **Read**, **Update**, **Delete** (**CRUD**) journey, `.delete()`:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s add a route for deleting a `todo` item:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, let''s add one more item on our previous `todo` (of ID `1`), then delete
    it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add item:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00037.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Now that we have its ID (`2`, in this case), delete it:'
  prefs:
  - PREF_OL
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00038.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Exercise 18: Cleaning up the Code
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now that we have almost updated all our routes that we had from [Chapter 2](part0038.html#147LC0-12af9adc04d045258c0a537819d419dc)*,*
    *Building the API – Part 1*, let''s now remove all the code that is no longer
    needed:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Remove the previously hardcoded list of todos:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'Remove the `PUT: /todo/<id>` route object:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'Reimplement the `DELETE: /todo/<id>` route object, very similar to *Exercise
    17: Deleting a Record*; the difference is just the route:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'Since our SQL query had this line that adds a constraint which is possible
    when a `todo` is deleted, all the items for that `todo` are also deleted:'
  prefs: []
  type: TYPE_NORMAL
- en: '`CREATE TABLE todo_item(`'
  prefs: []
  type: TYPE_NORMAL
- en: '`  ''id'' INT PRIMARY KEY AUTO_INCREMENT,`'
  prefs: []
  type: TYPE_NORMAL
- en: '`  ''text'' VARCHAR(50),`'
  prefs: []
  type: TYPE_NORMAL
- en: '`  ''done'' BOOLEAN,`'
  prefs: []
  type: TYPE_NORMAL
- en: '`  ''date_created'' TIMESTAMP DEFAULT CURRENT_TIMESTAMP,`'
  prefs: []
  type: TYPE_NORMAL
- en: '`  ''todo_id'' INT,`'
  prefs: []
  type: TYPE_NORMAL
- en: '`  FOREIGN KEY (`todo_id`) REFERENCES `todo` (`id`) ON DELETE CASCADE`'
  prefs: []
  type: TYPE_NORMAL
- en: '`);`'
  prefs: []
  type: TYPE_NORMAL
- en: Authenticating Your API with JWT
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: So far, we have been using our API without any authentication. This means that
    if this API is hosted at a public place, anyone can access any of the routes,
    including deleting all our records! Any proper API needs authentication (and authorization).
    Basically, we need to know who is doing what, and if they are authorized (allowed)
    to do that.
  prefs: []
  type: TYPE_NORMAL
- en: '**JSON Web Tokens** (**JWT**) is an open, industry standard method for representing
    claims securely between two parties. Claims are any bits of data that you want
    someone else to be able to read and/or verify but not alter.'
  prefs: []
  type: TYPE_NORMAL
- en: To identify/authenticate users for our API, the user puts a standard-based token
    in the header (with the Authorization key) of the request (prefixing it with the
    word *Bearer*). We will see this practically in a short while.
  prefs: []
  type: TYPE_NORMAL
- en: 'Exercise 19: Securing All the Routes'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this exercise, we''re going to secure all the `/todo/*` routes that we created
    so that no unauthenticated user can access them. In the *Exercise 21: Implementing
    Authorization*, we will differentiate between an *unauthenticated* and an *unauthorized*
    user:'
  prefs: []
  type: TYPE_NORMAL
- en: 'We will first start by installing a Hapi.js plugin for JWT, `hapi-auth-jwt`.
    Go to the Terminal and run:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: Use the `Code/Lesson-3/exercise-b` for your reference.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will modify the routes array that we get from `./routes/todo.js` in the
    `server.js` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'First, begin by requiring the installed `hapi-auth-jwt` at the top of the file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, replace the old line, `server.route`(`routes.todo`), with this:'
  prefs:
  - PREF_OL
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: You can find the complete code from the `server.js` file at `Code/Lesson-3/exercise-b`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, try accessing any of the routes, for example, `GET: /todo`; you should
    get this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00039.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Exercise 20: Adding User Authentication
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now that we have secured all our todo routes, we need a way to issue tokens
    to valid users to access the API. We will have the users send their email and
    password to a route (`/auth`), and our API will issue back an authentication token
    which will be used for each request:'
  prefs: []
  type: TYPE_NORMAL
- en: In the `/routes` folder, create a file `auth.js`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'We will now need two more packages for this, `jsonwebtoken` for signing the
    authentication token, and `md5` for comparing the password since if you recall,
    we were using MySQL''s `md5` function to store the user''s password:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'In the `auth.js` file, have the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: You can find the complete code from the `auth.js` file at `Code/Lesson-3/exercise-b/routes`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, let''s register our `auth.js` route with the server. In `server.js`, after
    `routes.todo = ...`, add the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'After the line initializing the server, we can add the `route` registration:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, let''s try out our route, `POST: /auth`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'First, with the incorrect email/password combination:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00040.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Then, with the correct password, remember *Exercise 14: Creating a Record*,
    *step 2* where we created the test user with the password:'
  prefs:
  - PREF_OL
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00041.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Now, we can copy the generated token and use it for our subsequent requests,
    for example, `GET: /todo`, by adding an Authorization header. Thus remember, we
    start with the word `Bearer`, then space, then paste the token; that''s the JWT
    convention:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00042.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'And we can now access the route without getting the unauthorized responses,
    like in *step 6* of 20th exercise:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00043.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Now, let''s go back to the places in our `./routes/todo.js` file where we were
    hardcoding the users, and now get them from the authentication object, that is:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'Recall in the preceding *step 3*, when we were signing our token, we provided
    the user details, that is, `name`, `email`, and `id`. This is where we get the
    `.id` in `request.auth.credentials.id`:'
  prefs: []
  type: TYPE_NORMAL
- en: '`jwt.sign(`'
  prefs: []
  type: TYPE_NORMAL
- en: '`{`'
  prefs: []
  type: TYPE_NORMAL
- en: '`  name: user.name,`'
  prefs: []
  type: TYPE_NORMAL
- en: '`  email: user.email,`'
  prefs: []
  type: TYPE_NORMAL
- en: '`  id: user.id,`'
  prefs: []
  type: TYPE_NORMAL
- en: '`},`'
  prefs: []
  type: TYPE_NORMAL
- en: '`...`'
  prefs: []
  type: TYPE_NORMAL
- en: '`);`'
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, let''s go back to our phpMyAdmin web interface and create another user,
    just like we did in *Exercise 14: Creating a Record*, *step 2*, and paste the
    following SQL in the SQL text area:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, let''s go and do another `POST: /auth` request with the new user and obtain
    the token:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00044.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Let''s use this new token to create another todo list by doing a `POST: /todo`
    request:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'On Insomnia, go to the Header section, delete the previous Authorization header
    and replace it with the new one:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00045.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Now, let''s make our request:'
  prefs:
  - PREF_OL
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00046.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Let''s see the new list of todos, by doing `GET: /todo`:'
  prefs:
  - PREF_OL
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00047.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'As you can see, the newly created user can only see what they have created.
    We have done a good job so far, as far as authorization is concerned. However,
    let''s try and check the items for todo ID `1`, which belonged to the first user:'
  prefs:
  - PREF_OL
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00048.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Oops! We can see someone else's todo list items; this is a security flaw. This
    leads us to the final part of this topic, **authorization**.
  prefs: []
  type: TYPE_NORMAL
- en: Authentication versus Authorization
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Through authentication, we get to know who is accessing our API; through authorization,
    we get to tell who can access what, within our API.
  prefs: []
  type: TYPE_NORMAL
- en: 'Exercise 21: Implementing Authorization'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this exercise, we are going to refine our API to make sure that users are
    only authorized to access their todos and todo items:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s first fix the flaw that we came across in *Exercise 20: Adding User
    Authentication*, *step 12*. So, we will modify the `GET: /todo/<id>` item route
    object in `/routes/todo.js`, by first checking if the todo belongs to the user
    before they can access its items:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: You can find the complete code from the `todo.js` file at `Code/Lesson-3/exercise-b/routes`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, when we go back to access `GET: /todo/1/item`, we get the right error
    message:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00049.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'You can add extra authorization logic for the following routes:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`POST`: `/todo/<id>/item`, to make sure that a user cannot add items to a todo
    that does not belong to them.'
  prefs:
  - PREF_UL
  - PREF_UL
  type: TYPE_NORMAL
- en: '`PATCH`: `/todo/<id>`, that a user cannot patch a todo that does not belong
    to them.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`PATCH`: `/todo/<todoId>/item/<id>`, that a user cannot patch a todo item that
    does not belong to them.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`DELETE`: `/todo/<id>`, that a user cannot delete a todo that does not belong
    to them.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`DELETE`: `/todo/<todoId>/item/<id>`, that a user cannot patch a todo item
    that does not belong to them.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Cross-Origin Resource Sharing** (**CORS**) is a mechanism that uses additional
    HTTP headers to let a user agent (browser) gain permission to access selected
    resources from a server on a different origin (domain) than the site currently
    in use. For instance, when you are hosting a web application frontend on another
    domain, because of browser restriction, you will not be able to access the API.'
  prefs: []
  type: TYPE_NORMAL
- en: 'We therefore need to explicitly state that our API will allow cross-origin
    requests. We will modify the `server.js` file, at the place we were initializing
    the server connection, to enable CORS:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: Testing Your API with Lab
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we will have a brief look at writing unit tests for Hapi.js
    APIs. Testing is a huge topic that perhaps requires a whole course on its own,
    but in this section, we will be introducing the essential parts to get you up
    and running.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s first underscore the importance of writing unit tests for your API:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Maintainability**: This is what I consider as the most important value of
    adding tests to your software. When you have tests, you can be confident to come
    back months later and, modify your code without worrying whether you broke anything
    by your update.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Requirement specifications: Tests make sure that your code meets the requirements.
    For our example, we started off by implementing the requirements since we wanted
    to pass across some basic concepts. But in practice, it is way better to start
    off with the tests before implementing your routes.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Automated testing**: You realized that in our previous examples, we kept
    checking our API client (Insomnia) to see if our API was working correctly; this
    can be a little cumbersome. With tests, you don''t have to worry about this once
    you have written correct tests.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Hapi.js conventionally uses **Lab** ([https://github.com/hapijs/lab](https://github.com/hapijs/lab))
    as its testing framework. We're going to write a few tests for our API in the
    next exercise.
  prefs: []
  type: TYPE_NORMAL
- en: 'Exercise 22: Writing Basic Tests with Lab'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this exercise, we will introduce the concept of writing unit tests for the
    Hapi.js web API, mainly using the third-party `lab` module and the built-in `assert`
    module. Ideally, we should have a separate database for our tests, but for the
    sake of simplicity here, we will share our development database for tests too:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s first start by installing the necessary packages. Notice that we are
    using `--save-dev` since tests are not needed for production, therefore, they
    are *development dependencies*:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: Use the `Code/Lesson-3/exercise-c` for your reference.
  prefs: []
  type: TYPE_NORMAL
- en: Create a `test` folder at the root of the project—that is where we will have
    our tests. Since our API is a simple one, we will only have one file with all
    our tests.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In `test`, create a file `test-todo.js`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'As a set up, `test/test-todo.js` requires the necessary modules that we need
    for our test:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: In the first line, we are requiring assert, which is an inbuilt module if you
    recall from [Chapter 1](part0019.html#I3QM0-12af9adc04d045258c0a537819d419dc),
    *Introduction to Node.js*. Alternatively, you can use any other assertion libraries
    such as `chai` ([https://github.com/chaijs/chai](https://github.com/chaijs/chai)),
    `should.js` ([https://github.com/tj/should.js](https://github.com/tj/should.js)),
    and others.
  prefs: []
  type: TYPE_NORMAL
- en: Lab test files must require the `lab` module and export a test script, as seen
    on line 4 prior. We will be getting the rest of the items from lab in the following
    line; we're going to see them in action shortly.
  prefs: []
  type: TYPE_NORMAL
- en: 'Since we are requiring the server in line 6 of our `test-todo.js` file, we
    need to go back to our `server.js` file and export the `server` object, on the
    last line:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'For the DB configuration, let''s modify our `db.js` file to include configurations
    for the test environment, pointing to the development configurations. Add this
    line right after the `configs` definition:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s modify the server connection setup code so that the port for our testing
    server is set from the environment variables when running the tests. This allows
    us to have the test server run on a different port, while our development server
    is running:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: 'There are a number of methods that we will use from the `lab` module; we will
    need to use object destructuring to get them. Add the following line in our `test-todo.js`
    file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s start by writing a simple test that makes sure that the `GET: / request`
    goes through, and returns `{ message: ''hello, world'' }` as defined:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: You can find the complete code from the `test-todo.js` file at `Code/Lesson-3/exercise-c/test`.
  prefs: []
  type: TYPE_NORMAL
- en: We now see `experiment`, `test`, and `assert.equal` methods in action. `experiment`
    is basically a way of grouping together the tests, and the actual tests are written
    within the `test` method's callback function (known as *test cases)*. `assert.equal`
    here is just comparing the two values to make sure they are equal, and if not,
    an *assertion error* will be thrown.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, let''s run our tests:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'On the Terminal (open a new Terminal if you''re running the API on one of them),
    navigate to the root of our project and run the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: We're adding an optional `--leaks` option to turn off memory leak detection
    since we don't need it now.
  prefs: []
  type: TYPE_NORMAL
- en: At the beginning of the command, we're adding `PORT=8001`; this is a way of
    passing an environment variable to our script, which is why we changed our code
    at step 7 previously. We're now running our test server on port `8001` while our
    development server is still running on port `8000`.
  prefs: []
  type: TYPE_NORMAL
- en: 'When you run the command, you should see something close to this:'
  prefs:
  - PREF_OL
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00050.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'We can make our test command shorter by adding it as a script on our `package.json`
    file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Replace the following line of code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: 'With the following line:'
  prefs:
  - PREF_OL
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, go back to the Terminal and just run:'
  prefs:
  - PREF_OL
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: Now, let's test that our authentication is working correctly. Add the following
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'segment after the previous one:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, go back and run `npm test`. Both tests should be passing:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00051.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'You realize that we''re having to go back to the Terminal every other time
    to run the tests. This is just as cumbersome as testing on the API client (Insomnia);
    we need some automation:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'We will need gulp.js for this, and two other Gulp plugins. Let''s install them:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, let''s write a simple `gulpfile.js` at the root of our project to automate
    our testing task:'
  prefs:
  - PREF_OL
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: You can find the complete code from the `gulpfile.js` file at `Code/Lesson-3/exercise-c`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, let''s go to `package.json` and add another script option for our `gulp`
    task, next to the previous `test`:'
  prefs:
  - PREF_OL
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, go to the Terminal and instead of `npm test`, run the following:'
  prefs:
  - PREF_OL
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: 'The watch task will be fired up, and therefore, any changes made in any of
    the files within the `src` array in the preceding point, the test will automatically
    run. This mean you can go on with your development work and periodically check
    that the tests are all good:'
  prefs:
  - PREF_OL
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00052.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Let''s now write a sample test for `GET: /todo` route. Remember that for all
    the authenticated routes, we need the token first, for us to make a successful
    request. We will therefore need a script to get us the token before any tests
    begin. This is where the `before` function that we got in step 8 kicks in. In
    our `test-todo.js` file, add the following segment:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: You can find the complete code from the `test-todo.js` file at `Code/Lesson-3/exercise-c/test`.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we have explored quite a lot. We started off with introducing
    Knex.js and how we can use it to connect and use the database. We went through
    the essential CRUD database methods. We then covered how we can authenticate our
    API and prevent it from unauthorized access, using the JWT mechanism. We also
    mentioned something important about CORS, how the browsers handle this and how
    we can enable this on our API. We finally finished off with covering concepts
    about testing our API, using the Lab library. We also covered, in passing, the
    concept of test automation using gulp.js.
  prefs: []
  type: TYPE_NORMAL
- en: In this book, we started off with learning how to implement the necessary modules
    to get simple applications up and running. We then moved on to implementing the
    async and await functions to handle asynchronous code efficiently. After a primer
    on Node.js (the application building aspect), we graduated to building an API
    using Node.js. To do this, we initially used the built-in module and then utilized
    the rich Hapi.js framework. We also understood the advantages of the Hapi.js framework.
    Later on, we learned how to handle requests from API clients and finally, we completed
    the book by covering interactions with databases.
  prefs: []
  type: TYPE_NORMAL
- en: This is a practical quick-start guide. To further your knowledge, you should
    consider building real-time applications with Node.js. We have recommended a few
    books in the next section, but ensure you check our website to find other books
    that may interest you!
  prefs: []
  type: TYPE_NORMAL
