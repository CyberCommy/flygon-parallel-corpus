- en: Building the API - Part 2
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter is intended to revisit the previous implementation, this time saving
    our data in a persistent storage (database). It will also cover authentication,
    and unit testing and hosting as additional good-to-know concepts (but not essential).
    It is therefore prudent to put more emphasis on working with the DB using knex.js
    and authenticating your API with JWT.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
- en: 'By the end of this chapter, you will be able to:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
- en: Implement database connection with Knex.js
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Describe commonly used Knex.js methods
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Rewrite our previous implementation of the todo routes with Knex.js
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Implement API authentication with JWT
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Describe the importance of having unit tests for your API
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Implement basic testing of the API with Lab
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Working with the DB Using Knex.js
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we're going to go through the fundamental concepts of working
    with the database. We will continue with the step-by-step build-up from our previous
    todo project. You will have noticed that our last project, we were storing our
    information in computer memory, and that it disappears immediately once our server
    returns. In real-life, you will want to store this data persistently for later
    access.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
- en: So, what is Knex.js? It is a SQL query-builder for relational databases like
    PostgreSQL, Microsoft SQL Server, MySQL, MariaDB, SQLite3, and Oracle. Basically,
    with something like Knex, you can write one code that will easily work with any
    of the mentioned databases, with no extra effort, just switching the configurations.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
- en: Let's walk through the exercise as we explain the concepts.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
- en: 'Exercise 12: Setting up the Database'
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s go back to where we left off in the *Exercise 11: Validating a Request* of [Chapter
    2](part0038.html#147LC0-12af9adc04d045258c0a537819d419dc), *Building the API –
    Part 1*. In this example, we will be using MySQL as our database of choice. Make
    sure your machine is set up with MySQL and MySQL Workbench:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
- en: Use the `Code/Lesson-3/exercise-a` folder for your reference.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
- en: 'Open MySQL Workbench. Click on the + button to create a connection:'
  id: totrans-16
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00023.jpeg)'
  id: totrans-17
  prefs: []
  type: TYPE_IMG
- en: 'Add the connection name as `packt`, username as `root`, and the password (if
    any). Click on Test Connection to see if the connection is correct, then click
    on OK:'
  id: totrans-18
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00024.jpeg)'
  id: totrans-19
  prefs: []
  type: TYPE_IMG
- en: Click on OK to create the connection.
  id: totrans-20
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now, click on the connection, packt:'
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00025.jpeg)'
  id: totrans-22
  prefs: []
  type: TYPE_IMG
- en: 'Create the todo database by running the following query, and click on the Execute
    icon:'
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '![](img/00026.jpeg)'
  id: totrans-25
  prefs: []
  type: TYPE_IMG
- en: 'The chapter files come with a basic SQL schema for our todo example project,
    almost similar to what we were using with the basic JavaScript array in the previous
    exercises:'
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the `Code/Lesson-3` folder, there is a file called `raw-sql.sql`. Open the
    file with your code editor and copy the contents of the file.
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Then, go back to the MySQL Workbench.
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Paste what you copied from the file in the textbox and click on the Execute
    icon:'
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00027.jpeg)'
  id: totrans-30
  prefs: []
  type: TYPE_IMG
- en: 'You should see the list of the created tables (`todo`, `todo_item`, `user`)
    as below, when you click on the Refresh icon to the right of the SCHEMAS label,
    and click on Tables:'
  id: totrans-31
  prefs:
  - PREF_OL
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00028.jpeg)'
  id: totrans-32
  prefs: []
  type: TYPE_IMG
- en: 'Exercise 13: Connecting to the Database'
  id: totrans-33
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now that we have created out database, in this exercise we are going to connect
    our application to our database using the necessary npm packages, that is, `knex`
    and `mysql`:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
- en: 'On the Terminal, change directory to the root of our project, and run the following
    command:'
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Let''s create a file `db.js` and add the following code to it, replacing the
    user and password appropriately if need be:'
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: You can find the complete code from the `db.js` file at `Code/Lesson-3/exercise-a`.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s test that we have our configurations right. We will create a `test-db.js`
    file:'
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Now, let''s go to the Terminal and run the test file:'
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'You should get the following printed:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Exercise 14: Creating a Record'
  id: totrans-46
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this exercise, we''re going to write code for saving a todo and its *items*.
    To start off, let''s create a dummy user since we will hardcode the user ID for
    our code. Later, in *Exercise 19: Securing All the Routes*, we will have the ID
    picked from the authentication details:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
- en: Go back to MySQL Workbench.
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Clear the previous query and paste the following query, and click on the Execute
    icon:'
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'When you click on the user table, you should see the following; our newly created
    user has an ID of `1`:'
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00029.jpeg)'
  id: totrans-52
  prefs: []
  type: TYPE_IMG
- en: 'Now, let''s go to our routes file, `/routes/todo.js` and modify the code, for
    the `POST: /todo` route; change the code to be as follows (it''s only the `handler`
    that is changing, notice the change to `async` function):'
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Let''s start by requiring our Knex instance that is in `./db.js`. Just after
    the line requiring Joi, add this:'
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Notice the two dots, `../db.js`, since `db.js` is found in the parent folder.
    Recall our topic on requiring local modules in [Chapter 1](part0019.html#I3QM0-12af9adc04d045258c0a537819d419dc),
    *Introduction to Node.js*.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, let''s modify our handler for the `POST: /todo` route. Here, were are
    using the `Knex.insert` method, and adding an optional `.returning` method so
    that we get back the ID of `todo` we have added:'
  id: totrans-57
  prefs:
  - PREF_OL
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: You can find the complete code from the `todo.js file` at `Code/Lesson-3/exercise-a/routes`.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
- en: 'Unlike our previous exercises in [Chapter 2](part0038.html#147LC0-12af9adc04d045258c0a537819d419dc),
    *Building the API – Part 1*, we will split our `POST: /todo` route into two, `POST:
    /todo`, for adding a todo list, and `POST: /todo/<id>/item` for adding items to
    the list.'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, let''s test our newly created endpoint. If you had stopped your server,
    go back to the Terminal and start it again, with `nodemon`:'
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Go to Insomnia and make the post request; you should get something like this
    (notice the `todo_id` returned, since we will use it in our next example):'
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00030.jpeg)'
  id: totrans-64
  prefs: []
  type: TYPE_IMG
- en: 'Now, let''s add a route for adding todo items, `POST: /todo/<id>/item`; therefore,
    next to the previous `route` object, add this `route` object:'
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: You can find the complete code from the `todo.js` file at `Code/Lesson-3/exercise-a/routes`.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, let''s test the route, `/todo/1/item`, `1` being the ID of `todo` we created
    in step 6:'
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00031.jpeg)'
  id: totrans-69
  prefs: []
  type: TYPE_IMG
- en: 'Exercise 15: Reading from the Database'
  id: totrans-70
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this exercise, we''re going to write the routes for:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
- en: Listing all `todo` for a particular user
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Getting details for a single todo item
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Listing items for a particular todo
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'We will use a number `Knex` methods:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
- en: '`Knex(''<table_name>'')`, this is equivalent to ''`SELECT * FROM <table_name>`'''
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`.where()`, used for adding the where clause to the query'
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'To get a list of all todo, we will modify our previous `GET: /todo` route.
    Here, you only want to list todo items for a particular authenticated user. For
    now, we will be using our hardcoded test user:'
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Let''s modify the route for getting a single `todo` item, `GET: /todo/<id>`:'
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: You can find the complete code from the `todo.js` file at `Code/Lesson-3/exercise-a/routes`.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
- en: 'We are using array destructuring here too, since the result, if any, will be
    an array of length 1, so we''re getting the first and only element from the array
    with: `const [ todo ] = ...`'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, let''s add the route object for getting a list of items for a particular
    `todo`, preferably just after the route for adding a `todo` item that we did in
    *Exercise 14: Creating a Record*:'
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Now, let''s test the route:'
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00032.jpeg)'
  id: totrans-87
  prefs: []
  type: TYPE_IMG
- en: 'Exercise 16: Updating a Record'
  id: totrans-88
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this exercise, we''re going to write routes for updating a todo title or
    a todo item, and here we will introduce a new Knex method, `.update()`:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s start by modifying our previous `PATCH: /todo/<id>` route. We have also
    added an extra validation to make sure that `title` is supplied as `payload`:'
  id: totrans-90
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Let''s test the route:'
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00033.jpeg)'
  id: totrans-93
  prefs: []
  type: TYPE_IMG
- en: 'Now, let''s add another `PATCH` route for `/todo/<id>/item`, this will help
    in editing a `todo` item''s text and also marking a `todo` item as done or not
    done:'
  id: totrans-94
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: You can find the complete code from the `todo.js` file at `Code/Lesson-3/exercise-a/routes`.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
- en: 'This route can take each of the payload items one at a time (which will be
    the most practical case, when using, for example, a web or mobile UI), or all
    at once:'
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'For instance, changing the item from `Nairobi` to `Nigeria`, or:'
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00034.jpeg)'
  id: totrans-99
  prefs: []
  type: TYPE_IMG
- en: 'Marking the item as `done`:'
  id: totrans-100
  prefs:
  - PREF_OL
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00035.jpeg)'
  id: totrans-101
  prefs: []
  type: TYPE_IMG
- en: 'When we list the items again through the `GET: /todo/<id>/item` route, you
    will see the updated item:'
  id: totrans-102
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00036.jpeg)'
  id: totrans-103
  prefs: []
  type: TYPE_IMG
- en: 'Exercise 17: Deleting a Record'
  id: totrans-104
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this exercise, we will be introducing the last vital Knex method to complete
    our **Create**, **Read**, **Update**, **Delete** (**CRUD**) journey, `.delete()`:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s add a route for deleting a `todo` item:'
  id: totrans-106
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Now, let''s add one more item on our previous `todo` (of ID `1`), then delete
    it:'
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add item:'
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00037.jpeg)'
  id: totrans-110
  prefs: []
  type: TYPE_IMG
- en: 'Now that we have its ID (`2`, in this case), delete it:'
  id: totrans-111
  prefs:
  - PREF_OL
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00038.jpeg)'
  id: totrans-112
  prefs: []
  type: TYPE_IMG
- en: Exercise 18: Cleaning up the Code
  id: totrans-113
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now that we have almost updated all our routes that we had from [Chapter 2](part0038.html#147LC0-12af9adc04d045258c0a537819d419dc)*,*
    *Building the API – Part 1*, let''s now remove all the code that is no longer
    needed:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
- en: 'Remove the previously hardcoded list of todos:'
  id: totrans-115
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Remove the `PUT: /todo/<id>` route object:'
  id: totrans-117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Reimplement the `DELETE: /todo/<id>` route object, very similar to *Exercise
    17: Deleting a Record*; the difference is just the route:'
  id: totrans-119
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Since our SQL query had this line that adds a constraint which is possible
    when a `todo` is deleted, all the items for that `todo` are also deleted:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
- en: '`CREATE TABLE todo_item(`'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
- en: '`  ''id'' INT PRIMARY KEY AUTO_INCREMENT,`'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
- en: '`  ''text'' VARCHAR(50),`'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
- en: '`  ''done'' BOOLEAN,`'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
- en: '`  ''date_created'' TIMESTAMP DEFAULT CURRENT_TIMESTAMP,`'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
- en: '`  ''todo_id'' INT,`'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
- en: '`  FOREIGN KEY (`todo_id`) REFERENCES `todo` (`id`) ON DELETE CASCADE`'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
- en: '`);`'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
- en: Authenticating Your API with JWT
  id: totrans-130
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: So far, we have been using our API without any authentication. This means that
    if this API is hosted at a public place, anyone can access any of the routes,
    including deleting all our records! Any proper API needs authentication (and authorization).
    Basically, we need to know who is doing what, and if they are authorized (allowed)
    to do that.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
- en: '**JSON Web Tokens** (**JWT**) is an open, industry standard method for representing
    claims securely between two parties. Claims are any bits of data that you want
    someone else to be able to read and/or verify but not alter.'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
- en: To identify/authenticate users for our API, the user puts a standard-based token
    in the header (with the Authorization key) of the request (prefixing it with the
    word *Bearer*). We will see this practically in a short while.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
- en: 'Exercise 19: Securing All the Routes'
  id: totrans-134
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this exercise, we''re going to secure all the `/todo/*` routes that we created
    so that no unauthenticated user can access them. In the *Exercise 21: Implementing
    Authorization*, we will differentiate between an *unauthenticated* and an *unauthorized*
    user:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
- en: 'We will first start by installing a Hapi.js plugin for JWT, `hapi-auth-jwt`.
    Go to the Terminal and run:'
  id: totrans-136
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Use the `Code/Lesson-3/exercise-b` for your reference.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
- en: 'We will modify the routes array that we get from `./routes/todo.js` in the
    `server.js` file:'
  id: totrans-139
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'First, begin by requiring the installed `hapi-auth-jwt` at the top of the file:'
  id: totrans-140
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Then, replace the old line, `server.route`(`routes.todo`), with this:'
  id: totrans-142
  prefs:
  - PREF_OL
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  id: totrans-143
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: You can find the complete code from the `server.js` file at `Code/Lesson-3/exercise-b`.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, try accessing any of the routes, for example, `GET: /todo`; you should
    get this:'
  id: totrans-145
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00039.jpeg)'
  id: totrans-146
  prefs: []
  type: TYPE_IMG
- en: Exercise 20: Adding User Authentication
  id: totrans-147
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now that we have secured all our todo routes, we need a way to issue tokens
    to valid users to access the API. We will have the users send their email and
    password to a route (`/auth`), and our API will issue back an authentication token
    which will be used for each request:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
- en: In the `/routes` folder, create a file `auth.js`.
  id: totrans-149
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'We will now need two more packages for this, `jsonwebtoken` for signing the
    authentication token, and `md5` for comparing the password since if you recall,
    we were using MySQL''s `md5` function to store the user''s password:'
  id: totrans-150
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  id: totrans-151
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'In the `auth.js` file, have the following code:'
  id: totrans-152
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  id: totrans-153
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: You can find the complete code from the `auth.js` file at `Code/Lesson-3/exercise-b/routes`.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, let''s register our `auth.js` route with the server. In `server.js`, after
    `routes.todo = ...`, add the following code:'
  id: totrans-155
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  id: totrans-156
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'After the line initializing the server, we can add the `route` registration:'
  id: totrans-157
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  id: totrans-158
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Now, let''s try out our route, `POST: /auth`:'
  id: totrans-159
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'First, with the incorrect email/password combination:'
  id: totrans-160
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00040.jpeg)'
  id: totrans-161
  prefs: []
  type: TYPE_IMG
- en: 'Then, with the correct password, remember *Exercise 14: Creating a Record*,
    *step 2* where we created the test user with the password:'
  id: totrans-162
  prefs:
  - PREF_OL
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00041.jpeg)'
  id: totrans-163
  prefs: []
  type: TYPE_IMG
- en: 'Now, we can copy the generated token and use it for our subsequent requests,
    for example, `GET: /todo`, by adding an Authorization header. Thus remember, we
    start with the word `Bearer`, then space, then paste the token; that''s the JWT
    convention:'
  id: totrans-164
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00042.jpeg)'
  id: totrans-165
  prefs: []
  type: TYPE_IMG
- en: 'And we can now access the route without getting the unauthorized responses,
    like in *step 6* of 20th exercise:'
  id: totrans-166
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00043.jpeg)'
  id: totrans-167
  prefs: []
  type: TYPE_IMG
- en: 'Now, let''s go back to the places in our `./routes/todo.js` file where we were
    hardcoding the users, and now get them from the authentication object, that is:'
  id: totrans-168
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  id: totrans-169
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Recall in the preceding *step 3*, when we were signing our token, we provided
    the user details, that is, `name`, `email`, and `id`. This is where we get the
    `.id` in `request.auth.credentials.id`:'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
- en: '`jwt.sign(`'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
- en: '`{`'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
- en: '`  name: user.name,`'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
- en: '`  email: user.email,`'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
- en: '`  id: user.id,`'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
- en: '`},`'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
- en: '`...`'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
- en: '`);`'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, let''s go back to our phpMyAdmin web interface and create another user,
    just like we did in *Exercise 14: Creating a Record*, *step 2*, and paste the
    following SQL in the SQL text area:'
  id: totrans-179
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  id: totrans-180
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Now, let''s go and do another `POST: /auth` request with the new user and obtain
    the token:'
  id: totrans-181
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00044.jpeg)'
  id: totrans-182
  prefs: []
  type: TYPE_IMG
- en: 'Let''s use this new token to create another todo list by doing a `POST: /todo`
    request:'
  id: totrans-183
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'On Insomnia, go to the Header section, delete the previous Authorization header
    and replace it with the new one:'
  id: totrans-184
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00045.jpeg)'
  id: totrans-185
  prefs: []
  type: TYPE_IMG
- en: 'Now, let''s make our request:'
  id: totrans-186
  prefs:
  - PREF_OL
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00046.jpeg)'
  id: totrans-187
  prefs: []
  type: TYPE_IMG
- en: 'Let''s see the new list of todos, by doing `GET: /todo`:'
  id: totrans-188
  prefs:
  - PREF_OL
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00047.jpeg)'
  id: totrans-189
  prefs: []
  type: TYPE_IMG
- en: 'As you can see, the newly created user can only see what they have created.
    We have done a good job so far, as far as authorization is concerned. However,
    let''s try and check the items for todo ID `1`, which belonged to the first user:'
  id: totrans-190
  prefs:
  - PREF_OL
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00048.jpeg)'
  id: totrans-191
  prefs: []
  type: TYPE_IMG
- en: Oops! We can see someone else's todo list items; this is a security flaw. This
    leads us to the final part of this topic, **authorization**.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
- en: Authentication versus Authorization
  id: totrans-193
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Through authentication, we get to know who is accessing our API; through authorization,
    we get to tell who can access what, within our API.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
- en: 'Exercise 21: Implementing Authorization'
  id: totrans-195
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this exercise, we are going to refine our API to make sure that users are
    only authorized to access their todos and todo items:'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s first fix the flaw that we came across in *Exercise 20: Adding User
    Authentication*, *step 12*. So, we will modify the `GET: /todo/<id>` item route
    object in `/routes/todo.js`, by first checking if the todo belongs to the user
    before they can access its items:'
  id: totrans-197
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  id: totrans-198
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: You can find the complete code from the `todo.js` file at `Code/Lesson-3/exercise-b/routes`.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, when we go back to access `GET: /todo/1/item`, we get the right error
    message:'
  id: totrans-200
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00049.jpeg)'
  id: totrans-201
  prefs: []
  type: TYPE_IMG
- en: 'You can add extra authorization logic for the following routes:'
  id: totrans-202
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`POST`: `/todo/<id>/item`, to make sure that a user cannot add items to a todo
    that does not belong to them.'
  id: totrans-203
  prefs:
  - PREF_UL
  - PREF_UL
  type: TYPE_NORMAL
- en: '`PATCH`: `/todo/<id>`, that a user cannot patch a todo that does not belong
    to them.'
  id: totrans-204
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`PATCH`: `/todo/<todoId>/item/<id>`, that a user cannot patch a todo item that
    does not belong to them.'
  id: totrans-205
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`DELETE`: `/todo/<id>`, that a user cannot delete a todo that does not belong
    to them.'
  id: totrans-206
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`DELETE`: `/todo/<todoId>/item/<id>`, that a user cannot patch a todo item
    that does not belong to them.'
  id: totrans-207
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Cross-Origin Resource Sharing** (**CORS**) is a mechanism that uses additional
    HTTP headers to let a user agent (browser) gain permission to access selected
    resources from a server on a different origin (domain) than the site currently
    in use. For instance, when you are hosting a web application frontend on another
    domain, because of browser restriction, you will not be able to access the API.'
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
- en: 'We therefore need to explicitly state that our API will allow cross-origin
    requests. We will modify the `server.js` file, at the place we were initializing
    the server connection, to enable CORS:'
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  id: totrans-210
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: Testing Your API with Lab
  id: totrans-211
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we will have a brief look at writing unit tests for Hapi.js
    APIs. Testing is a huge topic that perhaps requires a whole course on its own,
    but in this section, we will be introducing the essential parts to get you up
    and running.
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s first underscore the importance of writing unit tests for your API:'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
- en: '**Maintainability**: This is what I consider as the most important value of
    adding tests to your software. When you have tests, you can be confident to come
    back months later and, modify your code without worrying whether you broke anything
    by your update.'
  id: totrans-214
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Requirement specifications: Tests make sure that your code meets the requirements.
    For our example, we started off by implementing the requirements since we wanted
    to pass across some basic concepts. But in practice, it is way better to start
    off with the tests before implementing your routes.'
  id: totrans-215
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Automated testing**: You realized that in our previous examples, we kept
    checking our API client (Insomnia) to see if our API was working correctly; this
    can be a little cumbersome. With tests, you don''t have to worry about this once
    you have written correct tests.'
  id: totrans-216
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Hapi.js conventionally uses **Lab** ([https://github.com/hapijs/lab](https://github.com/hapijs/lab))
    as its testing framework. We're going to write a few tests for our API in the
    next exercise.
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
- en: 'Exercise 22: Writing Basic Tests with Lab'
  id: totrans-218
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this exercise, we will introduce the concept of writing unit tests for the
    Hapi.js web API, mainly using the third-party `lab` module and the built-in `assert`
    module. Ideally, we should have a separate database for our tests, but for the
    sake of simplicity here, we will share our development database for tests too:'
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s first start by installing the necessary packages. Notice that we are
    using `--save-dev` since tests are not needed for production, therefore, they
    are *development dependencies*:'
  id: totrans-220
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  id: totrans-221
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: Use the `Code/Lesson-3/exercise-c` for your reference.
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
- en: Create a `test` folder at the root of the project—that is where we will have
    our tests. Since our API is a simple one, we will only have one file with all
    our tests.
  id: totrans-223
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In `test`, create a file `test-todo.js`.
  id: totrans-224
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'As a set up, `test/test-todo.js` requires the necessary modules that we need
    for our test:'
  id: totrans-225
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  id: totrans-226
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: In the first line, we are requiring assert, which is an inbuilt module if you
    recall from [Chapter 1](part0019.html#I3QM0-12af9adc04d045258c0a537819d419dc),
    *Introduction to Node.js*. Alternatively, you can use any other assertion libraries
    such as `chai` ([https://github.com/chaijs/chai](https://github.com/chaijs/chai)),
    `should.js` ([https://github.com/tj/should.js](https://github.com/tj/should.js)),
    and others.
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
- en: Lab test files must require the `lab` module and export a test script, as seen
    on line 4 prior. We will be getting the rest of the items from lab in the following
    line; we're going to see them in action shortly.
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
- en: 'Since we are requiring the server in line 6 of our `test-todo.js` file, we
    need to go back to our `server.js` file and export the `server` object, on the
    last line:'
  id: totrans-229
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  id: totrans-230
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'For the DB configuration, let''s modify our `db.js` file to include configurations
    for the test environment, pointing to the development configurations. Add this
    line right after the `configs` definition:'
  id: totrans-231
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE34]'
  id: totrans-232
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'Let''s modify the server connection setup code so that the port for our testing
    server is set from the environment variables when running the tests. This allows
    us to have the test server run on a different port, while our development server
    is running:'
  id: totrans-233
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE35]'
  id: totrans-234
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'There are a number of methods that we will use from the `lab` module; we will
    need to use object destructuring to get them. Add the following line in our `test-todo.js`
    file:'
  id: totrans-235
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE36]'
  id: totrans-236
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'Let''s start by writing a simple test that makes sure that the `GET: / request`
    goes through, and returns `{ message: ''hello, world'' }` as defined:'
  id: totrans-237
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE37]'
  id: totrans-238
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: You can find the complete code from the `test-todo.js` file at `Code/Lesson-3/exercise-c/test`.
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
- en: We now see `experiment`, `test`, and `assert.equal` methods in action. `experiment`
    is basically a way of grouping together the tests, and the actual tests are written
    within the `test` method's callback function (known as *test cases)*. `assert.equal`
    here is just comparing the two values to make sure they are equal, and if not,
    an *assertion error* will be thrown.
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, let''s run our tests:'
  id: totrans-241
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'On the Terminal (open a new Terminal if you''re running the API on one of them),
    navigate to the root of our project and run the following command:'
  id: totrans-242
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE38]'
  id: totrans-243
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: We're adding an optional `--leaks` option to turn off memory leak detection
    since we don't need it now.
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
- en: At the beginning of the command, we're adding `PORT=8001`; this is a way of
    passing an environment variable to our script, which is why we changed our code
    at step 7 previously. We're now running our test server on port `8001` while our
    development server is still running on port `8000`.
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
- en: 'When you run the command, you should see something close to this:'
  id: totrans-246
  prefs:
  - PREF_OL
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00050.jpeg)'
  id: totrans-247
  prefs: []
  type: TYPE_IMG
- en: 'We can make our test command shorter by adding it as a script on our `package.json`
    file:'
  id: totrans-248
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Replace the following line of code:'
  id: totrans-249
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE39]'
  id: totrans-250
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'With the following line:'
  id: totrans-251
  prefs:
  - PREF_OL
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE40]'
  id: totrans-252
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'Now, go back to the Terminal and just run:'
  id: totrans-253
  prefs:
  - PREF_OL
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE41]'
  id: totrans-254
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: Now, let's test that our authentication is working correctly. Add the following
  id: totrans-255
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'segment after the previous one:'
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  id: totrans-257
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'Now, go back and run `npm test`. Both tests should be passing:'
  id: totrans-258
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00051.jpeg)'
  id: totrans-259
  prefs: []
  type: TYPE_IMG
- en: 'You realize that we''re having to go back to the Terminal every other time
    to run the tests. This is just as cumbersome as testing on the API client (Insomnia);
    we need some automation:'
  id: totrans-260
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'We will need gulp.js for this, and two other Gulp plugins. Let''s install them:'
  id: totrans-261
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE43]'
  id: totrans-262
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'Now, let''s write a simple `gulpfile.js` at the root of our project to automate
    our testing task:'
  id: totrans-263
  prefs:
  - PREF_OL
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE44]'
  id: totrans-264
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: You can find the complete code from the `gulpfile.js` file at `Code/Lesson-3/exercise-c`.
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, let''s go to `package.json` and add another script option for our `gulp`
    task, next to the previous `test`:'
  id: totrans-266
  prefs:
  - PREF_OL
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE45]'
  id: totrans-267
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'Now, go to the Terminal and instead of `npm test`, run the following:'
  id: totrans-268
  prefs:
  - PREF_OL
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE46]'
  id: totrans-269
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: 'The watch task will be fired up, and therefore, any changes made in any of
    the files within the `src` array in the preceding point, the test will automatically
    run. This mean you can go on with your development work and periodically check
    that the tests are all good:'
  id: totrans-270
  prefs:
  - PREF_OL
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00052.jpeg)'
  id: totrans-271
  prefs: []
  type: TYPE_IMG
- en: 'Let''s now write a sample test for `GET: /todo` route. Remember that for all
    the authenticated routes, we need the token first, for us to make a successful
    request. We will therefore need a script to get us the token before any tests
    begin. This is where the `before` function that we got in step 8 kicks in. In
    our `test-todo.js` file, add the following segment:'
  id: totrans-272
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE47]'
  id: totrans-273
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: You can find the complete code from the `test-todo.js` file at `Code/Lesson-3/exercise-c/test`.
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  id: totrans-275
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we have explored quite a lot. We started off with introducing
    Knex.js and how we can use it to connect and use the database. We went through
    the essential CRUD database methods. We then covered how we can authenticate our
    API and prevent it from unauthorized access, using the JWT mechanism. We also
    mentioned something important about CORS, how the browsers handle this and how
    we can enable this on our API. We finally finished off with covering concepts
    about testing our API, using the Lab library. We also covered, in passing, the
    concept of test automation using gulp.js.
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们探讨了很多内容。我们首先介绍了Knex.js以及如何使用它来连接和使用数据库。我们了解了基本的CRUD数据库方法。然后，我们介绍了如何对我们的API进行身份验证，并防止未经授权的访问，使用JWT机制。我们还提到了关于CORS的一些重要内容，浏览器如何处理它，以及我们如何在我们的API上启用它。最后，我们涉及了关于使用Lab库测试我们的API的概念。我们还简要介绍了使用gulp.js进行测试自动化的概念。
- en: In this book, we started off with learning how to implement the necessary modules
    to get simple applications up and running. We then moved on to implementing the
    async and await functions to handle asynchronous code efficiently. After a primer
    on Node.js (the application building aspect), we graduated to building an API
    using Node.js. To do this, we initially used the built-in module and then utilized
    the rich Hapi.js framework. We also understood the advantages of the Hapi.js framework.
    Later on, we learned how to handle requests from API clients and finally, we completed
    the book by covering interactions with databases.
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: 在这本书中，我们首先学习了如何实现必要的模块，使简单的应用程序能够运行起来。然后，我们开始实现异步和等待函数，以高效处理异步代码。在介绍了Node.js（应用程序构建方面）之后，我们开始构建一个使用Node.js的API。为了做到这一点，我们最初使用了内置模块，然后利用了丰富的Hapi.js框架。我们也了解了Hapi.js框架的优势。之后，我们学会了如何处理来自API客户端的请求，最后，我们通过涉及与数据库的交互来完成了这本书。
- en: This is a practical quick-start guide. To further your knowledge, you should
    consider building real-time applications with Node.js. We have recommended a few
    books in the next section, but ensure you check our website to find other books
    that may interest you!
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个实用的快速入门指南。为了进一步提高您的知识，您应该考虑使用Node.js构建实时应用程序。我们在下一节推荐了一些书籍，但请确保您查看我们的网站，以找到其他可能对您感兴趣的书籍！
