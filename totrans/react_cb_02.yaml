- en: Conquering Components and JSX
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, the following recipes will be covered:'
  prefs: []
  type: TYPE_NORMAL
- en: Creating our first React component
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Organizing our React application
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Styling a component with CSS classes and inline styles
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Passing props to a component and validating them with PropTypes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using local state in a component
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Making a functional or stateless component
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Understanding React lifecycle methods
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Understanding React Pure Components
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Preventing XSS vulnerabilities in React
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter contains recipes related to how to create components in React.
    We are going to learn how to create React components (class components, pure components,
    and functional components) and organize our project structure. We'll also learn
    how to use React local state, implement all the React lifecycle methods, and finally,
    we'll see how to prevent XSS vulnerabilities.
  prefs: []
  type: TYPE_NORMAL
- en: Creating our first React component
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The component is the essential part of React. With React you can build interactive
    and reusable components. In this recipe, you will create your first React component.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: First, we need to create our React application using `create-react-app`. Once
    that is done, you can proceed to create your first React component.
  prefs: []
  type: TYPE_NORMAL
- en: Before you install `create-react-app`, remember that you need to download and
    install Node from [www.nodejs.org](http://www.nodejs.org). You can install it
    for Mac, Linux, and Windows.
  prefs: []
  type: TYPE_NORMAL
- en: 'Install `create-react-app` globally by typing this command in your Terminal:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Or you can use a shortcut:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s build our first React application by following these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create our React application with the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Go to the new application with `cd my-first-react-app` and start it with `npm
    start`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The application should now be running at `http://localhost:3000`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a new file called `Home.js` inside your `src` folder:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'File: src/Home.js'
  prefs: []
  type: TYPE_NORMAL
- en: 'You may have noticed that we are exporting our class component at the end of
    the file, but it''s fine to export it directly on the class declaration, like
    this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'File: src/Home.js'
  prefs: []
  type: TYPE_NORMAL
- en: I prefer to export it at the end of the file, but some people like to do it
    in this way, so it depends on your preferences.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now that we have created the first component, we need to render it. So we need
    to open the `App.js` file, import the `Home` component, and then add it to the
    render method of the `App` component. If we are opening this file for the first
    time, we will probably see a code like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'File: src/App.js'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s change this code a little bit. As I said before, we need to import our
    `Home` component and then add it to the JSX. We also need to replace the `<p>`
    element with our component, like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'File: src/App.js'
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As you can see, we imported `React` and `Component` from the React library.
    You probably noticed that we are not using the `React` object directly. To write
    code in JSX, you need to import `React`. JSX is similar to HTML, but with a few
    differences. In the following recipes, you will learn more about JSX.
  prefs: []
  type: TYPE_NORMAL
- en: 'This component is called a `class` component (`React.Component`), and there
    are different types: pure components (`React.PureComponent`) and functional components,
    also known as stateless components, which we will cover in the following recipes.'
  prefs: []
  type: TYPE_NORMAL
- en: 'If you run the application, you should see something like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/37d1b4cf-d6b1-4f07-abbf-904a802e686a.png)'
  prefs: []
  type: TYPE_IMG
- en: There's more...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In our example, we created the `Home.js` file, and our component's name is `Home`.
  prefs: []
  type: TYPE_NORMAL
- en: All React component names should start with the first letter capitalized in
    both the file and the class name. To begin with, it might feel uncomfortable for
    you to see this, but this is the best practice in React.
  prefs: []
  type: TYPE_NORMAL
- en: Some of the main differences between JSX and HTML are the attributes names.
    You may have noticed that we are using `className` instead of `class`. This is
    the only special attribute name. Others that are two words separated by a dash
    need to be converted to camelCase, for example, `onClick`, **`srcSet`**, and `tabIndex`.
    The `aria-*` and `data-*` attributes still uses the same nomenclature (`data-something` and `aria-label`).
  prefs: []
  type: TYPE_NORMAL
- en: Organizing our React application
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will learn how to structure our project in a better way.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We can create React components with the default structure that `create-react-app`
    provides, but in this recipe, I'll show you a better way to organize the project
    so that we are ready when for when the application grows.
  prefs: []
  type: TYPE_NORMAL
- en: We need to create a new React app (check the last recipe if you haven't created
    a React app yet)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Currently, our React application directory tree looks like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/92e8684d-42cf-416f-a60a-5afcff61c84b.png)'
  prefs: []
  type: TYPE_IMG
- en: We need to create `src/components` and `src/shared` directories
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: After this, we need to create the `src/components/Home` directory for our component and
    move **`Home.js`** into this folder
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The `App.js` file stays at the `src/components` level
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Also, `App.css` and `App.test.js` will stay at `src/components` level
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Move the `logo.svg` file to `src/shared/images`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Our `index.js` will stay at the `src/` level
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now your directory tree should look like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/3ba9e4f5-31dd-4ec2-b313-a65fc5056d59.png)I highly recommend that
    you create another directory for shared components, `src/shared/components.`I''ll
    explain more about this in the next recipes.'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the `App.js` file, change the `logo` and `Home` imports:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'File: src/components/App.js'
  prefs: []
  type: TYPE_NORMAL
- en: 'After you changed that, we need to open the `index.js` and fix the import path
    for the `App` component:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'File: src/index.js'
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This new structure will give us more flexibility to group our React components
    smartly. With this new structure, we are going to be able to create sub-components,
    if we need them, and that is very important when developing complex applications
    with React.
  prefs: []
  type: TYPE_NORMAL
- en: In the next recipes, we will see how to share components in our application.
  prefs: []
  type: TYPE_NORMAL
- en: Styling a component with CSS classes and inline styles
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the last recipe, we learned how to create a class component. Now let's add
    some CSS to our `Home` component.
  prefs: []
  type: TYPE_NORMAL
- en: 'In React, one of the best practices is to have the style file in the same directory
    as the component. If you have worked with PHP, Node, or any other server language,
    you probably write your styles in a `style.css` file, and you include it using
    a `link` tag in your template. React uses Webpack, which is the most popular module
    bundler at the moment. With Webpack, we can configure the way that we want to
    handle our styles (using CSS directly or by using a CSS preprocessor such as Sass,
    Stylus, or Less CSS), and with Webpack we can implement CSS modules. This is a
    powerful way to avoid the three main issues of CSS:'
  prefs: []
  type: TYPE_NORMAL
- en: No more conflicts (unintentional CSS overwrites)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Explicit dependencies (styles per component)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: No global scope
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In [Chapter 10](e95b58ed-e32c-4488-ab8e-b332e235bda8.xhtml)*, Mastering Webpack
    4.x*, we will cover Webpack, and we'll be able to implement CSS modules using Sass or Stylus in
    our project.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We will now go about adding CSS to our `Home` component:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a new application, or use the previous one (`my-first-react-app`).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Then create a new CSS file for our `Home` component. Let''s reuse the `Home`
    component we created in the last recipe. Now you need to create a `Home.css` file
    at the same level as your `Home.js` file (inside the `components` folder). Before
    you create this file, let''s modify our `Home` component a little bit:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'File: src/components/Home/Home.js'
  prefs: []
  type: TYPE_NORMAL
- en: 'We''ll now add styles to our `Home.css`**.** Basically, we wrapped our component
    into a `div` with a `className` of Home, and inside we have an `<h1>` tag with
    the text `Welcome to Codejobs`, and then a `<p>` tag with a message. We need to
    import our `Home.css` file directly, and then our CSS file will look like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'File: src/components/Home/Home.css'
  prefs: []
  type: TYPE_NORMAL
- en: 'Now let''s suppose you need to add an inline style. We do this with the style
    property, and the CSS properties need to be written in camelCase and between `{{
    }}`, like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'File: src/components/Home/Home.js'
  prefs: []
  type: TYPE_NORMAL
- en: 'You also can pass an object to the `style` property like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'File: src/components/Home/Home.js'
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'As you can see, it is straightforward to connect a CSS file to our component,
    and if you followed all the steps correctly, your site should look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/a94c164c-7ab3-4d97-a5f2-7a46f396c26f.png)'
  prefs: []
  type: TYPE_IMG
- en: There's more...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'You''re probably curious about how the CSS code is added to the browser since
    we haven''t imported a CSS file to our project directly (by using a `<link>` tag,
    for example). Well, you will be surprised to see that the CSS code is being injected
    into our `<head>` tag using the `<style>` tag for each imported stylesheet. If
    you inspect your project with Chrome DevTools you will see something like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/737dff60-3cf8-44ac-8d83-b3734177d630.png)'
  prefs: []
  type: TYPE_IMG
- en: 'This behavior is because the `style-loader` is a Webpack loader that is being
    used by default in our application when we create it with `create-react-app`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/26c0d48b-1281-498b-a93c-ef8424d21f29.png)'
  prefs: []
  type: TYPE_IMG
- en: There is no way to modify the Webpack configuration directly when we use `create-react-app`
    because it is using a package called `react-scripts`, but in [Chapter 10](e95b58ed-e32c-4488-ab8e-b332e235bda8.xhtml)*,
    Mastering Webpack*, we will see how to configure our Webpack without using a starting
    kit such as `create-react-app`.
  prefs: []
  type: TYPE_NORMAL
- en: There are more Webpack loaders that do different things, such as `css-loader` for
    CSS modules, `sass-loader` to implement Sass, `stylus-loader` to implement Stylus,
    and `extract-text-plugin` to move the CSS code to a `.css` file instead of injecting
    it to the DOM (usually, this is only used in production).
  prefs: []
  type: TYPE_NORMAL
- en: Passing props to a component and validating them with PropTypes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: So far, you are getting familiar with React components, but there is more to
    it than rendering static HTML. Like any application, we need to be able to send
    information (via props) to different elements. In this recipe, we are going to
    create new components: `Header`, `Content`, and `Footer` (we will group these
    components into a folder called `layout`), and we will send some props (as attributes
    and as children) and validate them with `PropTypes`.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Taking the same of the React application we created before, let's create first
    our `Header` component.
  prefs: []
  type: TYPE_NORMAL
- en: 'At this point, our current header is placed on `App.js`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'File: src/components/App.js'
  prefs: []
  type: TYPE_NORMAL
- en: Let's move that header to our new `Header` component and then import it into
    the `App` component. Because the layout components are global or shared, we need
    to create a layout directory in our shared components directory (`src/shared/components/layout`).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Before you continue, you must install a package called `prop-types` to use
    the `PropTypes` validation:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: '`PropTypes` was initially released as part of the React core module and is
    commonly used with React components. `PropTypes` is used to document the intended
    types of properties passed to components. React will check the props passed to
    your components against those definitions, and it will send a warning in development
    if they don''t match:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'File: src/shared/components/layout/Header.js'
  prefs: []
  type: TYPE_NORMAL
- en: The `static` PropTypes property is basically an object where you need to define
    the types of prop you will pass. `array`, `bool`, `func`, `number`, `object`,
    `string`, and `symbol` are primitive types, but there are also particular types,
    such as `node`, `element`, `instanceOf`, `oneOf`, `oneOfType`, `arrayOf`, `objectOf`,
    `shape and any`. There is an optional property called `isRequired` that can be
    added to any type if the prop must be required and will produce a React warning
    if is not defined.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Import and render our `Header` component:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'File: src/components/App.jsDon''t get confused with the `<Header/>` component, it
    is not the same as the `<header>` tag from HTML5, that''s why in React is recommended
    to use capital letters in the class names.'
  prefs: []
  type: TYPE_NORMAL
- en: 'All the properties passed to our components are contained in this props. You
    may have noticed that we are only sending the `title` prop because it is the only
    one that is required. The `url` prop is optional and also has a default value
    in the destructuring (`http://localhost:3000`). If we don''t pass the title prop,
    even if we have a default value Welcome to React in the destructuring we are going
    to get a warning like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/8eca84f1-f852-4e7e-8dc5-e9714dbcb28d.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Create our `Footer` component:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'File: src/shared/components/layout/Footer.js'
  prefs: []
  type: TYPE_NORMAL
- en: 'So far, we only have passed props as attributes (with self-closed components
    `<Component />`), but there is another way to pass props as children (`<Component>Children
    Content</Component>`). Let''s create a `Content` component and send our `Home`
    component as a child of content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'File: src/shared/components/layout/Content.js'
  prefs: []
  type: TYPE_NORMAL
- en: 'With those changes, our `App.js` file should now look like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'File: src/components/App.js'
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: PropTypes validations are very important for developers because they force us
    to define which type of prop we are going to receive in our components and validate
    whether some of them are required or not.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you followed all the steps correctly, you should see something like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/bce4d668-5bad-4606-ab16-94f1e06ea367.png)'
  prefs: []
  type: TYPE_IMG
- en: There's more...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As you can see, there are many ways to send props to components. There are more
    ways to receive props, such as using Redux (through a container) or React Router,
    but those are topics that we are going to cover in the next chapters.
  prefs: []
  type: TYPE_NORMAL
- en: Using local state in a component
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The local state is a fundamental feature of React for creating dynamic components. Local
    state is only available on class components, and each component manages its state.
    You can define the initial value of the state on the component's constructor,
    and when you update the value of the state, the component will be re-render itself.
  prefs: []
  type: TYPE_NORMAL
- en: Local state is helpful with toggles, for handling forms, and is used to manage
    information within the same component. It is not recommended to use local state
    if we need to share data between different components. In that scenario, we need
    to implement Redux state, which we will cover in [Ch](dafa4ab9-3353-4faf-8af0-f3739c6d5e78.xhtml)[apter](dafa4ab9-3353-4faf-8af0-f3739c6d5e78.xhtml)
    [5](dafa4ab9-3353-4faf-8af0-f3739c6d5e78.xhtml), *Mastering Redux*.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s define our initial state.Let''s see how it works the component''s `render` method when
    the local state is updated:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Using our `Home` component, we are going to add a constructor and define our initial
    state:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'File: src/components/Home/Home.js'
  prefs: []
  type: TYPE_NORMAL
- en: 'In this example, we are defining our local state in the constructor as an object,
    and in the render, we are printing the value directly. We are using `super()` at
    the beginning of the constructor. This is used to call the parent constructor, `(React.Component)`. If
    we don''t include it, we will get an error like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/e13d8fc3-393a-4ead-89d0-a24cf1c86db7.png)'
  prefs: []
  type: TYPE_IMG
- en: 'After we added `super()`, we need to define our initial state as a regular
    object:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: '**Updating our local state with** `this.setState()`:Right now, this is just
    a state that is not being updated. That means that the component will never re-render
    again. To update the state, we need to use the `this.setState()` method and pass
    the new value of the state. We can add a `setTimeout` to update the name state
    after 1 second (1,000 milliseconds), so we need to modify our `render` method
    like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'If you run this in your browser, you will see the first value of the state
    is Carlos, and 1 second after this it will change to Cristina. I have added a `console.log` to
    log the value of the state name. If you open your browser console, you will see
    this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/c13cfaec-5e84-41ba-833c-6489ab557835.png)'
  prefs: []
  type: TYPE_IMG
- en: '**Updating our local state in the** `componentDidMount` **lifecycle method**:
    You''re probably wondering why is repeated so many times. It is simple; this is
    the way React works. Every time we update a state the method render is fired,
    and in this code, we added a `setTimeout` which updates the state after a second.
    That means that the `render` method is being called every second, causing an infinitive
    loop. This will affect the performance of our application, and that''s why you
    need to be careful when you update a state. As you can see updating it in the
    render method is not a good idea. So, where should I update the state? Well, it
    depends on your application, but for now, I''ll show you a method that is part
    of the React lifecycle called `componentDidMount()`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'File: src/components/Home/Home.js'
  prefs: []
  type: TYPE_NORMAL
- en: 'If you run this code and you see the console, now you will see this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/f08c1634-0c26-487d-808e-aebd5beba711.png)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: With `componentDidMount`, we avoided the infinite loop. The reason why this
    is a better approach is that `componentDidMount` is being executed just once when
    the component is already mounted, and in that method, we are executing our `setTimeout` and
    updating the name state only once. In the following recipes, we are going to learn
    more about React lifecycle methods.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Local state is also used to handle forms, but we will cover forms in [Chapter
    6](69fdac67-4387-49ad-89bb-b3407133caaf.xhtml)*, Creating Forms with Redux Form.*
  prefs: []
  type: TYPE_NORMAL
- en: Making a functional or stateless component
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: So far, we have only learned how to create *class components* in React. These
    components are useful when you need to handle local state, but in some cases,
    we will need to render static markup. For static components, we need to use functional
    components*,* also known as stateless components*.* This will improve the performance
    of our application.
  prefs: []
  type: TYPE_NORMAL
- en: In the *Passing props to a component and validating them with PropTypes *recipe, we
    created some layout components (`Header`, `Content`, and `Footer`). These components,
    as you may imagine, are frequently not dynamic (unless you want to have a toggle
    menu or some user information in the header), so in this case, we can convert
    them into functional components.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'It''s now time to convert our `Header` component to a functional component:'
  prefs: []
  type: TYPE_NORMAL
- en: 'First, let''s see what the current `Header` component looks like:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'File: src/shared/components/layout/Header.js'
  prefs: []
  type: TYPE_NORMAL
- en: 'The first thing to do is to convert our class component into an arrow function,
    and with this change, we don''t need to import  `React.Component` anymore. The
    second part of the migration is to pass the props as parameter in the function
    instead of getting them from `this.props`, and the last step is to move our static `propTypes` as
    a node of the function. After those changes, our code should look like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'File: src/shared/components/layout/Header.jsA functional component is an equivalent
    to just having the render method. That''s why we only need to return the JSX directly.'
  prefs: []
  type: TYPE_NORMAL
- en: 'After we migrated our `Header` component, we will migrate the `Footer` component;
    this is easier because it does not have props. First, let''s see what our `Footer` component
    looks like:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'File: src/shared/components/layout/Footer.js'
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, as a functional component, it should look like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'File: src/shared/components/layout/Footer.jsIn this case, as you can see, we
    need to create an arrow function without parameters (because we don''t have any
    props) and directly return the JSX we need to render.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Converting the `Content` component to a functional component:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'File: src/shared/components/layout/Content.js'
  prefs: []
  type: TYPE_NORMAL
- en: 'This component is similar to our `Header` component. We need to pass the props
    as parameters and keep our `propTypes`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: File***:*** src/shared/components/layout/Content.js
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Even with functional components, we can validate our `PropTypes`. Remember,
    if you don't need any dynamic data or local state then you should consider using
    a stateless component. This will improve the performance of your application.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A functional component not only does not have a state but also does not have the
    React lifecycle methods either.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding React lifecycle methods
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: React provides methods to handle the data during the lifecycle of a component.
    This is very useful when we need to update our application at particular times.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we are going to explain each example independently.
  prefs: []
  type: TYPE_NORMAL
- en: Todo list – implementing ComponentWillMount
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this recipe, you will learn about the lifecycle methods in React. We will
    see how the information flows through the methods since the component is pre-mounted,
    mounted, and unmounted. The Todo list that we will develop in this recipe will
    look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/7b3d85d6-75af-4b01-bfb2-b80d34257fa2.png)'
  prefs: []
  type: TYPE_IMG
- en: 'For this Todo list, we need to create a new folder called `Todo` into our `components`
    directory, and you also need to create files called `Todo.js `and `Todo.css`.
    This is the skeleton of the `Todo` component:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'File: src/components/Todo/Todo.js'
  prefs: []
  type: TYPE_NORMAL
- en: '**Constructo****r: **A constructor is a unique method that is executed before
    the object is initialized. A constructor can use the `super` keyword to call the
    constructor of the super class (parent class). This method is used to initialize
    our local state or to bind our methods. For the Todo list, we need to initialize
    the local state in the constructor with some values in the task and `items` array:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'The `componentWillMount` method is executed once before the component is mounted.
    In this case, before our component is mounted we need to update our `items` state
    with the default tasks:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'We are using `uuidv4` to generate random IDs. To install this package, you
    need to run the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'And then you need to import it like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: 'After we defined our default tasks, let''s see how we need to render the Todo list:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: Our JSX is divided into two parts. The first one is a form with an input that
    is connected to our local state (`this.state.task`), and we will save the task when
    the user submits the form (`onSubmit`). The second part is the component list where
    we are going to display our Todo list (or tasks list), passing the items array
    and the `markAsCompleted` (to mark a task as a completed) and `removeTask` (to
    remove the task from the list) functions.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The `handleOnChange` method is for connecting our input value with our state
    task:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: 'The `handleOnSubmit` method is for updating the `items` state and pushing the
    new task to the array:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: 'The `markAsCompleted` function is going to be called from our `List` component
    and needs to receive the `id` of the task we want to mark as completed. With this,
    we can find the specific task in our items array, modify the node as completed,
    and then update the local state:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: 'The `removeTask` function is also being called from the `List` component, and
    like `markAsCompleted`, we need to receive the `id` to remove the specific task:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s put all the pieces together. Our `Todo` component should look like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: 'File: src/components/Todo/Todo.js'
  prefs: []
  type: TYPE_NORMAL
- en: 'Now that we have completed our `Todo` component, let''s see what our `List` component
    looks like:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: 'File: src/components/Todo/List.js'
  prefs: []
  type: TYPE_NORMAL
- en: 'Every time we use a `.map` function to render multiple React elements from
    an array, we must add the key prop to each item we created. Otherwise, we will
    get a React warning like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/31fa593a-8e11-43ac-901e-f9038e1be126.png)'
  prefs: []
  type: TYPE_IMG
- en: 'You have probably noticed that we also included some Font Awesome icons, and
    to make it work we need to add the Font Awesome CDN into the main `index.html`
    file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: 'File: public/index.html'
  prefs: []
  type: TYPE_NORMAL
- en: 'The last part is the CSS for the Todo list (you''re free to change the styles
    if you prefer):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: 'File: src/components/Todo/Todo.css'
  prefs: []
  type: TYPE_NORMAL
- en: 'Don''t forget to import the `Todo` component into your `App` component. Otherwise,
    the component won''t render:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: 'File: src/components/App.js'
  prefs: []
  type: TYPE_NORMAL
- en: 'If you followed all the instructions correctly you should see the Todo List like
    this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The initial state with default tasks:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](assets/b11119df-92bf-45bf-b33d-534c8d80c369.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Adding a new task:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](assets/c219e590-ec67-4d43-803a-9edab71965e3.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Write the task title and then press *Enter*:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](assets/a1c1f936-b61e-4798-8d92-16a1a794248c.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Mark a task as complete:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](assets/f0129857-e44e-42ec-b668-eeb1d7d14a59.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Removing a task:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](assets/ccb14d7c-04a6-4f45-8cf2-1b18023052bf.png)'
  prefs: []
  type: TYPE_IMG
- en: I challenge you to save the tasks using `localStorage` instead of defining the
    default tasks with `componentWillMount`.
  prefs: []
  type: TYPE_NORMAL
- en: Pomodoro timer – implementing the constructor and componentDidMount
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To understand `componentDidMount`, we are going to create a Pomodoro Timer (if
    you don't know what it is you can read this: [https://en.wikipedia.org/wiki/Pomodoro_Technique](https://en.wikipedia.org/wiki/Pomodoro_Technique))[.](https://en.wikipedia.org/wiki/Pomodoro_Technique)
  prefs: []
  type: TYPE_NORMAL
- en: 'Our Pomodoro timerwill look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/b3474db4-b21d-4fb6-81ea-7f2d9b3c16ec.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Creating our Pomodoro Timer:'
  prefs: []
  type: TYPE_NORMAL
- en: 'The first thing we need to do is to create a new folder called `Pomodoro` in
    our `components` directory, as well as a file called `Timer.js` and the CSS file, `Timer.css`. This
    is the skeleton of the class component we will use for this component:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: 'File: src/components/Pomodoro/Timer.js'
  prefs: []
  type: TYPE_NORMAL
- en: 'For our Pomodoro timer, we need to initialize our local state in the constructor with
    some values for the time and for the alert (when the time is over):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: 'The `componentDidMount` method is called once the component is mounted and
    is executed just once. In this case, once our component is mounted we need to
    update our time state with the default time (25 min), and to do this, we need
    to create a new method called `setDefaultTime` and then execute it in our `componentDidMount` method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: 'After we defined our default time to our time state, let''s see how we need
    to render the Pomodoro Timer. Our `render` method should look like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: In this case, our JSX is very simple. We are getting the values from the local
    state (`message`, `type`, and `time`) and displaying a div to show our alert when
    the user receives an alert message. We have another div to show our timer, and
    here we are passing our current time (expressed in seconds) to the `displayTimer` method,
    which will convert those seconds into `mm:ss`format. The last piece of the layout
    are the buttons to select the type of timer (start working for 25 min, short break
    for 5 min, or long break for 15 min), and you may have noticed that we are executing
    different methods on the `onClick` event for each type of timer.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`setTimeForWork`, `setTimeForShortBreak`, and `setTimeForLongBreak`:The purpose
    of these three functions is to update the alert message depending on the type
    of the timer and then call a common function called `setTime`, passing as a parameter
    the specific time for each option. Let''s first see what these three functions
    should look like:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: 'As we learned in the previous recipes when we specify our methods with arrow
    functions in our class they are automatically bound (they have access to the "`this`" object).
    That means we don''t need to bind them on the constructor.Now let''s create our `setTime` method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: 'As you can see, we executed a new method called `restartInterval()`, and we
    updated our local state with the `newTime` variable, which we passed as a parameter
    (it can be 1,500 seconds = 25 min, 300 seconds = 5 min or 900 seconds = 15 min).
    You probably noticed, from the name of the function, that we are going to use
    a `setInterval` function, which is used to call a function every X milliseconds.
    Our `restartInterval` function should be like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: 'In this case, we first cleared our interval with `clearInterval(this.interval)`.
    This is because the user can switch between the different types of the timer,
    so we need to clear the interval each time we set a new timer*. *After we cleared
    the interval, then we call the `countDown` function every second using `setInterval`.
    The `countDown` function is as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: 'The last piece of this puzzle is the `displayTimer` function, which will convert
    the time into an `mm:ss`format and display it in our component:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s put it all together:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: 'File: src/components/Pomodoro/Timer.js'
  prefs: []
  type: TYPE_NORMAL
- en: 'After we have completed our component, the last step is to add our styles.
    This is the CSS used for the Pomodoro timer. Of course, you can change it if you
    prefer:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: 'File: src/components/Pomodoro/Timer.css'
  prefs: []
  type: TYPE_NORMAL
- en: 'Don''t forget to import the `<Timer />` component into `App.js`. If you follow
    everything correctly, you should see the Pomodoro timerworking like this:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Working:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](assets/81c80738-f47f-401e-bc31-4b466d615a82.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Taking a short break:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](assets/c83b17af-37eb-471d-b357-ec59075cf219.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Taking a long break:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](assets/1199ed97-04e1-4fa4-bb9f-35d879943f67.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Buzzzz - time over!:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](assets/065a22f1-9ada-4ee5-92ae-55e7af538040.png)I challenge you to add
    a Play, Pause, and Reset buttons to control the timer.'
  prefs: []
  type: TYPE_NORMAL
- en: Crypto coins exchanger – implementing shouldComponentUpdate
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Today, everyone is talking about Bitcoin, Ethereum, Ripple, and other cryptocurrencies.
    Let's create our own Crypto Coins Exchanger to learn how `shouldComponentUpdate` works.
  prefs: []
  type: TYPE_NORMAL
- en: 'Our exchanger will look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/ea808246-e7f9-4527-8ae4-85f573f40fe3.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We''ll sell entire coins. That means we won''t trade with decimals; everything
    should be an integer, and each currency costs $10 dollars**. **Our code is simple,
    so let''s take a look:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: 'File: src/components/Coins/Coins.js'
  prefs: []
  type: TYPE_NORMAL
- en: We are updating our dollars state every time the user writes something in the
    input and converting the value to a number, but if you run this code, you will
    probably notice that when you put in a number under 10, the message **You can
    buy 0 coins** doesn't change until you write 10, 20, 30, 40, and so on.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`shouldComponentUpdate`:This method is one of the most important methods that
    improve the performance of our application. It receives two parameters (props,
    state) every time we update a local state, and when a prop is updated this method
    is executed. The returned value must be boolean, which means that if you intentionally
    write the following, your component will never update because this method will
    block it from updating:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: But, on the other hand, if you return true or even if you don't define this
    method at all, the default behavior of React is always to update the component, which
    in some cases can cause a performance issue when we are rendering vast views and
    handling a lot of data that changes regularly.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In our example, we are returning true only when the number of dollars that
    the user enters is a multiple of 10\. That''s why you only see the component updating
    in this case:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/8c2d7386-d2d6-4ec5-be6b-e781097a21b6.png)'
  prefs: []
  type: TYPE_IMG
- en: 'But it is not going to work for numbers that are not multiples of 10:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/49507625-ed20-4e88-95cd-0d662fd310f5.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now, if we remove the `shouldComponentUpdate` method from our component or
    we directly return a `true` value, the component will update every time we write
    a number, and this will be the result:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/75f61086-21c6-4837-bd44-6c5a57ff487b.png)'
  prefs: []
  type: TYPE_IMG
- en: 'As you can see, with `shouldComponentUpdate`, we can control the updates of
    our component, and this improves the performance of the application significantly.The
    last piece of our example is the CSS:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs: []
  type: TYPE_PRE
- en: 'File: src/components/Coins/Coins.css'
  prefs: []
  type: TYPE_NORMAL
- en: Notes – implementing componentWillReceiveProps and componentWillUnmount
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this example, we are going to create a simple list of notes where, every
    10 seconds, we will simulate that we receive an update from the service with new
    data, and with `componentWillReceiveProps`, we will register the last time we
    got an update from the server:'
  prefs: []
  type: TYPE_NORMAL
- en: 'The `componentWillReceiveProps` method is called right before rendering. Like `shouldComponentUpdate`, it is
    called whenever new props are passed to the component, or the state has changed.
    In this example, we need to create fake data, but data normally needs to come
    from an actual service:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs: []
  type: TYPE_PRE
- en: 'File: src/components/Notes/data.js'
  prefs: []
  type: TYPE_NORMAL
- en: 'After we''ve created our fake data, let''s create our component:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs: []
  type: TYPE_PRE
- en: 'File: src/components/Notes/Notes.js'
  prefs: []
  type: TYPE_NORMAL
- en: 'In this example, we are using the `moment.js`library. To install it, you need
    to run the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, in our `App.js` file, we are going to simulate that after 10 seconds of
    the first render, we will receive a new update from the service and render the
    new notes:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs: []
  type: TYPE_PRE
- en: 'File: src/components/App.js'
  prefs: []
  type: TYPE_NORMAL
- en: 'The last part is the CSS file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE63]'
  prefs: []
  type: TYPE_PRE
- en: 'File: src/components/Notes/Notes.css'
  prefs: []
  type: TYPE_NORMAL
- en: 'If you run the application, you will see something like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/d7508b74-c308-4345-aee1-68778a10ed3f.png)'
  prefs: []
  type: TYPE_IMG
- en: 'After 10 seconds you will see this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/be3a42cb-a6ae-4dee-9e16-8dd99516de82.png)'
  prefs: []
  type: TYPE_IMG
- en: As you can see, the Last Update date has changed from 2018-02-20 00:07:28 to
    2018-02-20 00:07:**38** (10 seconds later).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`componentWillUnmount`:This is the last method to be called immediately before
    the component is removed from the DOM. Generally, is used to perform a clean-up for
    any DOM elements or timers created by the `componentWillMount` method. Let''s
    modify our code a little bit to be able to call this method. In our `Notes` component,
    you can add this code after the `render` method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE64]'
  prefs: []
  type: TYPE_PRE
- en: 'We need to modify our `index.html` file to manually include a button that won''t
    be part of React:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE65]'
  prefs: []
  type: TYPE_PRE
- en: 'File: public/index.html'
  prefs: []
  type: TYPE_NORMAL
- en: 'And then, in our `index.js` file, where we are rendering our `<App />` component,
    let''s add some extra code (we need actually to remove the element from the DOM):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE66]'
  prefs: []
  type: TYPE_PRE
- en: 'File: src/index.js'
  prefs: []
  type: TYPE_NORMAL
- en: 'With this, we will have a hideous red button at the bottom of our page, and
    when we click it, we are going to unmount our component. The background will go
    black, and we will display the text "There is no mounted component!", and the
    console will display Hasta la vista baby!:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/ae76a546-97bb-4c7f-9e59-11b66531863a.png)'
  prefs: []
  type: TYPE_IMG
- en: 'After you click the button, you will see this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/e1a1ace9-acbc-49ed-a93c-bcc20d31817f.png)'
  prefs: []
  type: TYPE_IMG
- en: C3.js chart – implementing componentDidUpdate
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'C3.js is a third-party library that makes it easy to generate D3-based charts
    by wrapping the code required to construct the entire chart. That means you don''t
    need to write any D3 code anymore:'
  prefs: []
  type: TYPE_NORMAL
- en: '`componentDidUpdate`:This React method is normally used to manage third-party
    UI elements and interact with the native UI. When we use a third-party library
    such as C3.js, we need to update the UI library with the new data. Install C3.js
    with npm:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE67]'
  prefs: []
  type: TYPE_PRE
- en: 'After we install C3.js, we need to add the C3 CSS file to our `index.html`.
    For now, we can use the CDN they provide:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE68]'
  prefs: []
  type: TYPE_PRE
- en: 'File: public/index.html'
  prefs: []
  type: TYPE_NORMAL
- en: 'Now we can create our `Chart` component:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE69]'
  prefs: []
  type: TYPE_PRE
- en: 'File: src/components/Chart/Chart.js'
  prefs: []
  type: TYPE_NORMAL
- en: 'As you can see, we are executing the `updateChart` method on `componentDidUpdate`,
    which is executed every time the user receives a new prop from `App.js`.Let''s
    add some logic that we need in our `App.js` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE70]'
  prefs: []
  type: TYPE_PRE
- en: 'File: src/components/App.js'
  prefs: []
  type: TYPE_NORMAL
- en: 'Now let''s add some basic styles to our `Chart` component:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE71]'
  prefs: []
  type: TYPE_PRE
- en: 'File: src/components/Chart.css'
  prefs: []
  type: TYPE_NORMAL
- en: 'In this case, we are creating some charts to display information about the
    most important cryptocurrencies today (BTC - Bitcoin, ETH - Ethereum and XRP -
    Ripple). This is how it should look:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/1174221c-8d3f-44bf-92b7-6b22e5155778.png)This image gives you an
    idea of how the line charts look like'
  prefs: []
  type: TYPE_NORMAL
- en: 'We have two buttons to switch between chart types (bar or line). If we click
    on BAR, we should see this chart:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/881f0098-b76d-4104-a56a-90d2e4f69b10.png)This image gives you an
    idea of how the bar charts look like.'
  prefs: []
  type: TYPE_NORMAL
- en: If you remove the `componentDidUpdate` method from the `Chart` component, then
    when you press the buttons the chart is not going to update. This is because every
    time we need to refresh the data, we need to call the `c3.generate` method, and
    in this case, React's `componentDidUpdate` method is very useful.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Basic animation – implementing componentWillUpdate
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this example, we are going to learn how to use `componentWillUpdate`:'
  prefs: []
  type: TYPE_NORMAL
- en: '`componentWillUpdate` allows you to manipulate a component just before it receives
    new props or a new state. It is typically used for animations. Let''s create a
    basic animation (fade in/fade out) to see how to use it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE72]'
  prefs: []
  type: TYPE_PRE
- en: 'File: src/components/Animation/Animation.js'
  prefs: []
  type: TYPE_NORMAL
- en: 'As you can see, we are validating the show state with `newState` and observe
    that it is true. Then we add `opacity 0`, and if it is false, we add `opacity
    1`. An important thing I want to mention about `componentWillUpdate` is that you
    can''t update the state (which means you are not able to use `this.setState`)
    in this method because it will cause another call to the same method, creating
    an infinite loop. Let''s add some styles:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE73]'
  prefs: []
  type: TYPE_PRE
- en: 'File: src/components/Animation/Animation.css'
  prefs: []
  type: TYPE_NORMAL
- en: 'If you run the application, you will see this view:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/167ba80f-84d3-4d4e-b5ec-62a8a1fca076.png)'
  prefs: []
  type: TYPE_IMG
- en: 'After you click on the button, you will see an animation with the text fading
    out, and the red div will be expanded, giving you this result:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/c1e8a457-1fe6-4bb7-92d1-7bfd9669db4e.png)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As you can see with all those examples, React lifecycle methods are used to
    handle different scenarios in our application. In *[Chapter 5](dafa4ab9-3353-4faf-8af0-f3739c6d5e78.xhtml),
    Mastering Redux*, we are going to see how to implement Redux and how the lifecycle
    methods can work with Redux states.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding React Pure Components
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Many people get confused by the difference between a Functional Component and
    a Pure Component. Most of them think they are the same, but this is not true.
    When we use a Pure Component, we need to import `PureComponent` from React:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE74]'
  prefs: []
  type: TYPE_PRE
- en: If your React component's render method is "pure" (that means it renders the
    same result, given the same props and state), you can use this function to improve
    the performance of your application. A Pure Component performs a shallow comparison
    for the props and nextProps objects as well as the state and nextState objects.
    Pure components do not include the `shouldComponentUpdate(nextProps, nextState)`
    method, and if we try to add it, we will get a warning from React.
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/ac0abe9f-9602-4501-85c5-cabaff680fa4.png)'
  prefs: []
  type: TYPE_IMG
- en: In this recipe, we will create a basic example to understand how Pure Components
    works.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: For this recipe, we need to install the Chrome extension React Developer Tools
    to do a simple debug in our application. In [Chapter 12](1daa68c4-442d-479f-b1b6-3efa80592901.xhtml),
    Testing and Debugging, we will delve into this topic.
  prefs: []
  type: TYPE_NORMAL
- en: You can download React Developer Tools from [https://chrome.google.com/webstore/detail/react-developer-tools/fmkadmapgofadopljbjfkapdkoienihi](https://chrome.google.com/webstore/detail/react-developer-tools/fmkadmapgofadopljbjfkapdkoienihi).
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We will create a component where we will sum all the numbers entered in an
    input. We can take some of the last recipes to start from there:'
  prefs: []
  type: TYPE_NORMAL
- en: 'The first thing we will do is to modify our `App.js` and include the Numbers
    component:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE75]'
  prefs: []
  type: TYPE_PRE
- en: 'File: src/components/App.js'
  prefs: []
  type: TYPE_NORMAL
- en: 'Now we will create the Numbers component:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE76]'
  prefs: []
  type: TYPE_PRE
- en: 'File: src/components/Numbers/Numbers.js'
  prefs: []
  type: TYPE_NORMAL
- en: 'Then, let''s create the Result component (as a Class Component):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE77]'
  prefs: []
  type: TYPE_PRE
- en: 'File: src/components/Numbers/Result.js'
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, the styles:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE78]'
  prefs: []
  type: TYPE_PRE
- en: 'File: src/components/Numbers/Numbers.css'
  prefs: []
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'If you run the application, you will see this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/da16b38c-61c7-4f56-bb6e-6e4e5b79dbc4.png)'
  prefs: []
  type: TYPE_IMG
- en: As you can see, we are using an input with type number, which means we will
    only accept numbers if you start writing numbers (1, then 2, then 3, and such),
    you will see the results of the sum on each row (0 + 1 = **1**, 1 + 2 = **3**,
    3 + 3 = **6**).
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/97ddc724-b477-4d01-a79e-52f3782eff44.png)'
  prefs: []
  type: TYPE_IMG
- en: Probably this looks very simple to you, but if let's inspect the application
    using React Developer Tools, we need to enable the Highlight Updates option.
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/49a2ab49-32a0-40ba-9de3-bb72d58e19ee.png)'
  prefs: []
  type: TYPE_IMG
- en: After this, start writing multiple numbers in the input (quickly), and you will
    see all the renders that React is performing.
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/de4fb8e3-93b4-409a-98cd-31234874ff9c.png)'
  prefs: []
  type: TYPE_IMG
- en: 'As you can see, React is doing a lot of renderings. When the highlights are
    red, it means the performance of that component is not good. Here''s when Pure
    Components will help us; let''s migrate our Result component to be a Pure Component:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE79]'
  prefs: []
  type: TYPE_PRE
- en: 'File: src/components/Numbers/Result.js'
  prefs: []
  type: TYPE_NORMAL
- en: Now if we try to do the same with the numbers, let's see the difference.
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/79143d3f-f02c-4263-849d-5c76f3f97b30.png)'
  prefs: []
  type: TYPE_IMG
- en: 'As you can see, with the Pure Component React, do less renders in comparison
    to a Class Component. Probably now you think that if we use a Stateless component
    instead of a Pure Component, the result will be the same. Unfortunately, this
    won''t happen; if you want to verify this, let''s change the Result component
    again and convert it into a Functional Component.:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE80]'
  prefs: []
  type: TYPE_PRE
- en: 'File: src/components/Numbers/Result.js'
  prefs: []
  type: TYPE_NORMAL
- en: Even the code is less, but let's see what happen with the renders.
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/087b2535-7c5f-4639-8494-e7c20374a4b7.png)'
  prefs: []
  type: TYPE_IMG
- en: As you can see, the result is the same as the Class Component, which means not
    all the time using a Stateless component necessary will help us improve the performance
    of our application. If you have components that you consider are pure, consider
    converting them into Pure components.
  prefs: []
  type: TYPE_NORMAL
- en: Preventing XSS vulnerabilities in React
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we are going to learn about cross-site scripting (XSS) vulnerabilities
    in React. XSS attacks are widespread in web applications, and some developers
    are still not aware of this. XSS attacks are malicious scripts that are injected
    into the DOM of unprotected web applications. The risks can vary with each application.
    It could just be an innocent alert script injection or, worse, someone can get
    access to your cookies and steal your private credentials (passwords), for example.
  prefs: []
  type: TYPE_NORMAL
- en: Let's create an XSS component to start playing around a little bit with some
    XSS attacks. We are going to have a response variable that is simulating a response
    from a real server, and we will simulate that we are using Redux's initial state (we
    are going to see Redux in *[Chapter 5](dafa4ab9-3353-4faf-8af0-f3739c6d5e78.xhtml),
    Mastering Redux*).
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We will now see how to create our XSS component:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create an XSS component:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE81]'
  prefs: []
  type: TYPE_PRE
- en: 'File: src/components/Xss/Xss.js'
  prefs: []
  type: TYPE_NORMAL
- en: 'If you render this component, you will see something like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/5237a4d6-1d66-4b9e-bcf8-005a133c9ada.png)'
  prefs: []
  type: TYPE_IMG
- en: As you can see, by default, React prevents us from injecting HTML code directly
    into our components. It is rendering the HTML as a string. This is good, but sometimes
    we need to insert HTML code in our components.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Implementing `dangerouslySetInnerHTML`*:*This prop probably scares you a little
    bit (maybe because it explicitly says the word danger!). I''m going to show you
    that this prop is not too bad if we know how to use it securely.Let''s modify
    our previous code, and we are going to add this prop to see how the HTML is rendering
    it now:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE82]'
  prefs: []
  type: TYPE_PRE
- en: 'File: src/components/Xss/Xss.js'
  prefs: []
  type: TYPE_NORMAL
- en: 'Our site should now look like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/8b877eca-d229-4b4e-801b-5a191683871b.png)'
  prefs: []
  type: TYPE_IMG
- en: It is interesting, probably you thought that the content of "My blog post 2"
    will fire an alert in the browser but does not. If we inspect the code the alert
    script is there.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/2a74381f-e333-4620-913b-70446e824d4e.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Even if we use `dangerouslySetInnerHTML`,React protects us from malicious scripts
    injections, but it is not secure enough for us to relax on the security aspect
    of our site. Now let''s see the issue with My blog post 3 content. The code **`<img onmouseover="alert(''This
    site is not secure'');" src="attack.jpg" />`** is not directly using a `<script>`
    tag to inject a malicious code, but is using an `img` tag with an event (`onmouseover`).
    So, if you were happy about React''s protection, we can see that this XSS attack
    will be executed if we move the mouse over the image:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/ff3f07da-b726-4e70-be35-06d32a7a9192.png)'
  prefs: []
  type: TYPE_IMG
- en: '**Removing XSS attacks**:This is kind of scary, right? But as I said at the
    beginning of this recipe, there is a secure way to use dangerouslySetInnerHTMLand,
    yes, as you may be thinking right now, we need to clean our code of malicious
    scripts before we render it with dangerouslySetInnerHTML. The next script will
    take care of removing `<script>` tags and events from tags, but of course, you
    can modify this depending on the security level you want to have:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE83]'
  prefs: []
  type: TYPE_PRE
- en: 'File: src/components/Xss/Xss.js'
  prefs: []
  type: TYPE_NORMAL
- en: 'If we look at the code now, we will see that now our render is more secure:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/4cf149d2-6a90-40ea-9cc1-0a1364ae1612.png)'
  prefs: []
  type: TYPE_IMG
- en: '**The problem with JSON.stringify**:So far, we have learned how to inject HTML
    code into a React component with `dangerouslySetInnerHTML`, but there is another
    potential security issue using JSON.stringify. If we have an XSS attack (`<script>`
    tag inside the content) in our response and then we use JSON.stringify to convert
    the object to a string, the HTML tags are not encoded. That means that if we inject
    the string into our HTML (like Redux does with the initial state), we will have
    a potential security issue*.*The output of `JSON.stringify(response)` is this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE84]'
  prefs: []
  type: TYPE_PRE
- en: 'As you can see, all the HTML is exposed without any encoding characters, and
    that is a problem. But how we can fix this? We need to install a package called `serialize-javascript`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE85]'
  prefs: []
  type: TYPE_PRE
- en: 'Instead of using `JSON.stringify`, we need to serialize the code like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE86]'
  prefs: []
  type: TYPE_PRE
- en: 'The output of the console is as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE87]'
  prefs: []
  type: TYPE_PRE
- en: 'Now that we have our code with HTML entities (encoded) instead of directly
    having HTML tags, and the good news is that we can use `JSON.parse` to convert
    this string again into our original object. Our component should look like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE88]'
  prefs: []
  type: TYPE_PRE
- en: 'File: src/components/Xss/Xss.js'
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As you can see, XSS attacks are widespread, and many websites suffer from this
    problem without knowing it. There are other injections attacks, such as SQL injections,
    that could happen in an API if we don't take minimal security precautions.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Here are some security recommendations:'
  prefs: []
  type: TYPE_NORMAL
- en: Always sanitize users' content that comes from forms.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Always use `serialize` instead of `JSON.stringify`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use `dangerouslySetInnerHTML` only when absolutely necessary.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Do unit tests for your components, and try to cover all the possible XSS attacks
    (we are going to see unit tests in [Chapter 12](1daa68c4-442d-479f-b1b6-3efa80592901.xhtml)*,
    Testing and Debugging*).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Always encrypt passwords with `sha1` and `md5`, and do not forget to add a salt
    value (for example, if the password is `abc123`, then your salt can be encrypted
    like this: `sha1(md5('$4ltT3xt_abc123'))`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If you use cookies to store sensitive information (personal information and
    passwords mainly), you can save the cookie with Base64 to obfuscate the data.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Add some protection to your API (security tokens) unless you need to be public.
    There is a recipe about security tokens in [Chapter 8](41637135-a49d-409a-bbbe-2928609e749b.xhtml)*,
    Creating an API with Node.js Using MongoDB and MySQL*.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
