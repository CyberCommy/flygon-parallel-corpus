- en: Building and Running
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: At this point, you have successfully created an Android project containing one
    screen. In the previous chapter, you also learned how to set up your working environment.
    We showed you how simple it is to use Android tools. You also defined some flavors
    and build types. Let's take control over it! It's time to do your first build
    and run it on a device or an emulator. You will try it with all build types and
    flavor combinations.
  prefs: []
  type: TYPE_NORMAL
- en: 'This chapter will cover the following points:'
  prefs: []
  type: TYPE_NORMAL
- en: Running your application on emulator and/or real hardware device
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction to Logcat
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Gradle tool
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Running your first Android application
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We made our first screen and defined some specifics for the application itself.
    To be sure that what we did so far is ok, we do the build and run our application.
    We will run the completeDebug build variant. If you forgot how to switch to this
    build variant, we will remind you. Open Android Studio and the `Journaler` project.
    Open the Build Variants pane by clicking on the Build Variants pane on the left
    side of the Android Studio window or by choosing View |Tool Windows | Build Variants.
    The Build Variants pane will appear. Choose completeDebug from the drop-down list,
    as shown in the screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/11d63f63-a319-436b-b3c9-582e52699a2e.png)'
  prefs: []
  type: TYPE_IMG
- en: We will use this Build Variant as our main build variant for the try out execution,
    and for production build, we will use the completeDebug build variant. After we
    choose Build Variant from the drop-down list, it takes some time for Gradle to
    build the chosen variant.
  prefs: []
  type: TYPE_NORMAL
- en: We will run our application now. We will do it on an emulator first and then
    on a real live device. Start your emulator instance by opening the AVD Manager.
    We will open it by clicking on the AVD Manager icon. It is the fastest way to
    open it. Double-click on the AVD instance. It will take some time until your emulator
    is ready. Emulator performs Android system boot and then it loads a default application
    launcher.
  prefs: []
  type: TYPE_NORMAL
- en: Your emulator is booted and ready to run the application. In order to run the
    application, click on the Run icon or navigate to Run | Run 'app'.
  prefs: []
  type: TYPE_NORMAL
- en: There is a keyboard shortcut for this; on macOS, it is *Ctrl* + *R*.
  prefs: []
  type: TYPE_NORMAL
- en: 'When an application runs, a dialog box for Select Deployment Target appears.
    In case you have multiple instances on which an application can run, you can choose
    one of them as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/7c3c0c18-8682-4c61-a468-9b3a11ef7a21.png)'
  prefs: []
  type: TYPE_IMG
- en: Pick your deployment target and click on OK. In case you want to remember your
    selection, check the Use same selection for future launches selection. It takes
    some time for the application to run, but after a few seconds, your application
    appears!
  prefs: []
  type: TYPE_NORMAL
- en: Meet the Logcat
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Logcat is an important part of everyday development. Its purpose is to display
    all logs coming from your device. It displays logs from an emulator or a live
    device connected. Android has several levels of log messages:'
  prefs: []
  type: TYPE_NORMAL
- en: Assert
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Verbose
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Debug
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Information
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Warning
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Error
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You can filter log messages by these log levels (for example, when you need
    to see only errors--application crash stacktrace) or log tag (we will explain
    this later); or by keyword, regex, or the application package. Before we apply
    any filter, we will configure Android Studio so the log messages are colored differently.
  prefs: []
  type: TYPE_NORMAL
- en: 'Choose Android Studio | Preferences. In the search field, enter `Logcat`. Logcat
    coloring preferences appears, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/57490132-7256-442c-9d06-32aa4651e288.png)'
  prefs: []
  type: TYPE_IMG
- en: 'To edit coloring, you must save a copy of the current coloring theme. Choose
    your theme from the drop-down list and choose Save As. Choose some proper name
    and confirm:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/2b8bb47d-87a0-4041-96b7-72166b35e787.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Choose Assert from the list and uncheck Use inherited attributes to override
    the color. Make sure that the Foreground option is checked and click on Color
    located to the right of checkbox to choose a new color for the log text. We will
    pick some tone of pink, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/bfbdcad0-4196-47da-acf6-1bff905e7c06.png)'
  prefs: []
  type: TYPE_IMG
- en: 'For the Assert level, you can enter the hex code manually: `FF6B68`. For maximal
    readability, we recommend the following colors:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Assert: `#FF6B68`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Verbose: `#BBBBBB`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Debug: `#F4F4F4`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Information: `#6D82E3`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Warning: `#E57E15`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Error: `#FF1A11`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: To apply changes, click on Apply and then OK.
  prefs: []
  type: TYPE_NORMAL
- en: 'Open Android Monitor (View | Tool Windows | Android Monitor) and take a look
    at the messages printed in the Logcat pane. They are colored with different tones
    for each log level, as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/438b8ce2-45ce-4232-9177-5c5222e5f4cf.png)'
  prefs: []
  type: TYPE_IMG
- en: Now we will define our own log messages, which is also a good opportunity to
    work with the Android lifecycle. We will put proper log messages for each lifecycle
    event for the `Application` class and the screen (activity) we created.
  prefs: []
  type: TYPE_NORMAL
- en: 'Open your main `Application` class, `Journaler.kt`. Extend the code like the
    following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Here, we introduced some important changes. We overrode the main lifecycle
    event for the `onCreate()`application. We also overrode two additional methods:
    `onLowMemory()`, triggered in critical memory situations (actively running processes
    should trim their memory usage), and `onTrimMemory()`, when the memory is trimmed.'
  prefs: []
  type: TYPE_NORMAL
- en: 'To log events in our application, we use `Log` class with static methods, each
    exposed for a proper log level. Based on this, we have the following methods exposed:'
  prefs: []
  type: TYPE_NORMAL
- en: 'For Verbose level:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'For Debug level:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'For Information level:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'For Warning level:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'For Error level:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Methods accept the following parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`Tag`: This is used to identify the origin of a log message'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`message`: This is the message we want to log'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`throwable`: This represents an exception to log'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Beside these log methods, there are some additional methods that you can use:'
  prefs: []
  type: TYPE_NORMAL
- en: '`wtf(String tag, String msg)`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`wtf(String tag, Throwable tr)`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`wtf(String tag, String msg, Throwable tr)`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Wtf** stands for **What a Terrible Failure**! `Wtf` is used to report an
    exception that should never happen!'
  prefs: []
  type: TYPE_NORMAL
- en: 'We will play some more with the `Log` class. Open the only screen you have
    created so far and update the `MainActivity` class with the following changes:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: We overrode all important lifecycle methods by the order they execute during
    the activity's lifecycle. For each event, we print the proper log message. Let's
    explain the purpose of the lifecycle and each important event.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here, you can see the official diagram from the Android developers'' website,
    explaining the activity lifecycle:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/41a10a88-8f9d-4fcb-b24a-28f5f348faf0.png)'
  prefs: []
  type: TYPE_IMG
- en: 'You can find the image at [https://developer.android.com/images/activity_lifecycle.png](https://developer.android.com/images/activity_lifecycle.png):'
  prefs: []
  type: TYPE_NORMAL
- en: '`onCreate()`: This is executed when the activity is first created. This is
    a place where we usually do main UI elements initialization.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`onRestart()`: This is executed if your activity was stopped at some moment
    and then resumed. For example, you turn off your phone screen (lock it) and then
    unlock it again.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`onStart()`: This is executed when the screen becomes visible to the application
    user.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`onResume()`: This is executed when the user starts interaction with the activity.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`onPause()`: Before we resume our previous activity, this method is executed
    on the current one. This is a good place to save all the information you will
    need when you resume again. If there are any unsaved changes, you should save
    them here.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`onStop()`: This is executed when an activity is no longer visible to the application
    user.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`onDestroy()`: This is executed before an activity is destroyed by Android.
    This can happen, for example, if somebody executed the `finish()` method of the
    `Activity` class. To know if the activity is finishing at a particular moment,
    Android provides a method for that check: `isFinishing()`. If an activity is finishing,
    the method will return Boolean `true`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Now, when we wrote some code using the Android lifecycle and put proper log
    messages, we will execute two use cases and look at the logs printed out by Logcat.
  prefs: []
  type: TYPE_NORMAL
- en: First case
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Run your application. Then just go back and leave it. Kill the app. Open Android
    Monitor, and from the device drop-down list, choose your device instance (emulator
    or real device). From the next drop-down list, choose the Journaler application
    package. Observe the following Logcat output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/cecbe102-def8-4013-9a3c-c1e5b8c06d2e.png)'
  prefs: []
  type: TYPE_IMG
- en: You will notice the log messages we put in our source code.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s check how many times during our interaction with the application we
    entered the `onCreate()` and `onDestroy()` methods. Position your cursor on the
    search field and type `on create`. Observe the change in content--there is only
    one entry when we expected two: one for the main `Application` class and one for
    the main activity. Why did this happen? We will find out later:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/e799dc39-8f47-4598-a9a0-d873f3736f18.png)'
  prefs: []
  type: TYPE_IMG
- en: 'What does our output contain? It contains the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '`06-27`: This is the date the event occurred.'
  prefs: []
  type: TYPE_NORMAL
- en: '`11:37:59.914`: This is the time the event occurred.'
  prefs: []
  type: TYPE_NORMAL
- en: '`6713-6713/?`: This is the process and thread identifier with the package.
    Process and thread identifiers are the same if the application has only one thread.'
  prefs: []
  type: TYPE_NORMAL
- en: '`V/Journaler`: This is the log level and tag.'
  prefs: []
  type: TYPE_NORMAL
- en: '`[ ON CREATE ]`: This is the log message.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Change the filter to `on destroy`. The content changes to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '`**06-27 11:38:07.317 6713-6713/com.journaler.complete.dev V/Journaler: [ ON
    DESTROY ]**`'
  prefs: []
  type: TYPE_NORMAL
- en: In your case, you will have different date, time, and pid/tid values.
  prefs: []
  type: TYPE_NORMAL
- en: From the drop-down list, change your filtering from Verbose to Warn. Keep the
    value for the filter! You will notice that your Logcat is now empty. It's empty
    because there is no warning messages with the message text containing `on destroy`.
    Remove the filter text and return to Verbose level.
  prefs: []
  type: TYPE_NORMAL
- en: 'Run your application. Lock your screen and unlock it a few times in a row.
    Then, close and kill the Journaler application. Observe the following Logcat output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/eac186f5-fbbf-4970-ac93-48a010ae8480.png)'
  prefs: []
  type: TYPE_IMG
- en: As you can see, it's noticeably entering lifecycle states for pausing and resuming.
    Finally, we kill our app and an `onDestroy()` event is triggered. You can see
    it in Logcat.
  prefs: []
  type: TYPE_NORMAL
- en: 'If it''s easier for you, you can use Logcat from a terminal. Open the terminal
    and execute the following command line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Using the Gradle build tool
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: During our development, we will need to build different build variants or run
    tests. Those tests can be executed for only certain build variants, if needed,
    or for all of them.
  prefs: []
  type: TYPE_NORMAL
- en: In the following examples, we will cover some of the most common Gradle use
    cases. We will start with cleaning and building.
  prefs: []
  type: TYPE_NORMAL
- en: 'As you remember, the Journaler application has the following build types defined:'
  prefs: []
  type: TYPE_NORMAL
- en: debug
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: release
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: staging
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: preproduction
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following build flavors are also defined in the Journaler application:'
  prefs: []
  type: TYPE_NORMAL
- en: demo
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: complete
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: special
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Open terminal. To remove everything we built so far, and all temporally build
    derivates, execute the following command line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'It takes some time to do the cleaning. Then execute the following command line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'This assembles everything--all the build variants that we have in our application.
    Imagine the time impact it can have if we are dealing with a really big project.
    Therefore, we will `isolate` the build command. To build only the debug build
    type, execute the following command line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'It will be executed much faster than the previous example! This builds all
    flavors for the debug build type. In order to be more effective, we will instruct
    Gradle that we are interested only in a complete build flavor for the debug build
    type. Execute this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'This executes much faster. Here, we will mention several more important Gradle
    commands that are useful:'
  prefs: []
  type: TYPE_NORMAL
- en: 'To run all unit tests execute:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'In case you want to run unit tests for a specific build variant, execute this
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'In Android, we can run tests on a real device instance or an emulator. Usually,
    those tests have access to some of Android''s components. To execute those (instrumentation)
    tests, you can use the command shown in the following example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: You will find more about tests and testing Android applications in the final
    chapters of this book.
  prefs: []
  type: TYPE_NORMAL
- en: Debug your application
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now, we know how to log important application messages. During development,
    we will face situations when only logging messages is not enough when analyzing
    application behavior or investigating bugs.
  prefs: []
  type: TYPE_NORMAL
- en: For us, it's important to have the ability to debug an application code during
    its execution on real Android devices or on emulators. So, let's debug something!
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the main `Application` class and put the break point on line where we
    log the `onCreate()` method, as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/c08f7d7a-eabc-4c78-9442-00549f6bce2b.png)'
  prefs: []
  type: TYPE_IMG
- en: As you can see, we set the break point at line **18**. We will add more break
    points. Let's add it in our main (and only) activity. Put a break point in each
    lifecycle event at lines where we perform logging.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/d5bd3bbf-b390-4c1c-a975-0cb06dfcfc66.png)'
  prefs: []
  type: TYPE_IMG
- en: We set breakpoints at lines 18, 23, 28, 33, 38, and so on. Run the application
    in debug mode by clicking on the debug icon or by choosing Run | Debug app. The
    application is started in debug mode. Wait a little bit and a debugger will soon
    enter the first break point we set.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following screenshot illustrates this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/f8821a88-c161-468e-83e5-b756a456f73d.png)'
  prefs: []
  type: TYPE_IMG
- en: 'As you can see, the `onCreate()` method of the `Application` class is the first
    method we enter. Let''s check if our applications enter lifecycle methods as expected.
    Click on the Resume Program icon from the Debugger pane. You may notice that we
    did not enter the `onCreate()` method for our main activity! We entered `onStart()`
    after the main `Application` class `onCreate()` method. Congratulations! You just
    discovered your first Android bug! Why did this happen? We used the wrong `onCreate()`
    method version instead of using the following line of code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'We accidentally overrode this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'Thanks to debugging, we discovered this! Stop the debugger by clicking on the
    Stop icon from the Debugger pane and fix the code. Change the code lines to this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: We updated our log messages so we can track entering both the `onCreate()` method
    versions. Save your changes and start the application again in debug mode. Don't
    forget to set the break point to both `onCreate()` method overrides! Go through
    the break points one by one. Now we entered all break points in an expected order.
  prefs: []
  type: TYPE_NORMAL
- en: 'To see all break points, click on the View Breakpoints icon. The Breakpoints
    window appears, as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/02511c6a-2efb-4eb7-9be8-626cf161c46a.png)'
  prefs: []
  type: TYPE_IMG
- en: By double clicking on Breakpoint, you will be positioned at the line where it
    is set. Stop the debugger.
  prefs: []
  type: TYPE_NORMAL
- en: 'Imagine you can continue to develop your application for the next two years.
    Your application becomes really big, and it also executes some expensive operations.
    Running it directly in Debug mode can be very difficult and time consuming. We
    will lose a significant amount of time until it enters the break point we are
    interested in. What can we do about it? Applications running in debug mode are
    slower, and we have a slow and big application. How to skip the part where we
    are losing our precious time? We will demonstrate. Run your application by clicking
    on the Run icon or by choosing Run | Run ''app''. The application is executed
    and started on our deployment target (real device or emulator). Attach the debugger
    to your application by clicking on Attach debugger to the Android Process icon
    or by choosing Run | Attach debugger to Android. Choose the Process window that
    appears:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/fe6a2ead-2e17-4ef6-be40-deb9a66ad8ad.png)'
  prefs: []
  type: TYPE_IMG
- en: Pick our application process by double clicking on its package name. The Debugger
    pane appears. From your application, try to go back. **Debugger** enters the `onPause()`
    method of your main activity. Stop Debugger.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you learned how to build and run your application from Android
    Studio IDE or directly from the terminal. We also analyzed some logs that we got
    from the emulator and real devices. And, in the end, we did some debugging.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will get familiar with some components of UI--screens,
    to be more precise. We will show you how to create new screens and how to add
    some stylish details to them. We will also discuss complex layouts of buttons
    and images.
  prefs: []
  type: TYPE_NORMAL
