- en: Chapter 9. Visualization with Time Aware Layers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We have dealt with reading and displaying time-based data in our earlier chapters,
    as well as non-spatial charting methodologies using innovative libraries such
    as D3 and Cedar. This chapter deals with visualizing space-time data using spatial
    visualization, as well as other non-spatial visualization aids such as Time Slider
    and Time Graph. The following topics are discussed in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Time aware layers and the need for them
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Building a drought app using Time Slider
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Querying based on time data using D3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Advanced spatio-temporal visualization using Cedar charts
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Time aware layers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: ArcGIS 10 and above includes support for time aware layers. Time aware layers
    are DynamicMapService or feature layers that have a `TimeInfo` property. The following
    screenshot shows the Service Catalog of a Time aware feature layer.
  prefs: []
  type: TYPE_NORMAL
- en: 'Check out the `TimeInfo` property in the image:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Time aware layers](graphics/B04959_09_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Snapshot of TimeInfo information in the Service Catalog
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s discuss the components of the `TimeInfo` object, which is something
    similar to the one we saw in the previous image. The `TimeInfo` property provides
    us with the following information:'
  prefs: []
  type: TYPE_NORMAL
- en: Which field in the layer stores the time information (State Time Field, End
    Time Field).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The minimum-most and maximum-most time for which data is available (Time Extent).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Time Reference property refers to the time zone in which the date time values
    are stored (if null, UTC time is followed; this shall be discussed in detail).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Time Interval units is the time interval at which data is available for
    each feature.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Has Live Data* property refers to a Boolean value, which indicates whether
    data is continuously updated.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Export Options provides a list of properties such as Use Time, Time Data Cumulative,
    and Time Offset. The Time Data Cumulative is a Boolean value referring to whether
    features retrieved are accumulated with time.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Need for time aware layers
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Time aware layers let us understand data in a spatio-temporal context; this
    means we can see how spatial information changes over a time period. This kind
    of data has various real-world applications such as:'
  prefs: []
  type: TYPE_NORMAL
- en: Understanding where the crime hotspots are in a city over time
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Tracking a hurricane and displaying its current position
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The spread of flood events in an area over a short span of time
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Displaying the proliferation of oil wells in a state
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How the drought conditions have affected a place over time
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Understanding time aware layers
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'A certain basic understanding of the concept of time in ArcGIS will help us
    work with time aware layers better. The following points are worth noting:'
  prefs: []
  type: TYPE_NORMAL
- en: Time should always be referred into the **Coordinated Universal Time** (**UTC**),
    which is functionally equivalent to **Greenwich** **Mean Time** (**GMT**).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Just like the spatial extent of the map, we can define the time extent of the
    map, which has time aware layers. This will only affect map layers that have the
    `timeInfo` property. Time extent is provided by the `esri/TimeExtent` module.
    We can define a `TimeExtent` object with either of the following properties:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`startTime`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`endTime`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`startTime` and `endTime`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: The **Time Data Cumulative** property of the Export Options object under the
    Time Info object determines whether data can be cumulated or not.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: When the data in the time aware layer cannot be cumulated in the map display,
    we should be using just one thumb in the time slider. We will discuss the time
    slider shortly.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Building the Drought app
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let's build an app displaying the drought conditions of the US to understand
    the features supporting time aware layers in ArcGIS.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following URL provides weekly updated values for drought intensity across
    the United States from 2000 to the present: [http://earthobs1.arcgis.com/arcgis/rest/services/US_Drought/MapServer](http://earthobs1.arcgis.com/arcgis/rest/services/US_Drought/MapServer)'
  prefs: []
  type: TYPE_NORMAL
- en: You may need an ArcGIS Developer's account to access this data.
  prefs: []
  type: TYPE_NORMAL
- en: Drought in a region is defined as the imbalance between water supply and water
    demand over an extended period of time. Since droughts can have direct and indirect
    environmental, economic, and social consequences, monitoring drought is instrumental
    in planning, preparedness, and mitigation efforts at all levels of government.
  prefs: []
  type: TYPE_NORMAL
- en: Our application tries to display the current and historical drought values for
    the entire US. These data have been produced weekly since January 4, 2000 by the
    US Drought Monitor and the full time series is archived here. A new map is released
    every Thursday to reflect the conditions of the previous week.
  prefs: []
  type: TYPE_NORMAL
- en: Using the Time Slider
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `TimeSlider` module provided by the API is capable of interacting with the
    time aware layers. `TimeSlider` is a widget provided by the API, which we can
    use in our code and query the time aware layers dynamically. It also provides
    support for animation so that we can see how the spatial features change over
    time or how the features accumulate between a time interval.
  prefs: []
  type: TYPE_NORMAL
- en: 'To use `TimeSlider`, we need to load the Esri `dijit` named `esri/dijit/TimeSlider`.
    Apart from the `TimeSlider dijit`, we may also need to load the module named `esri/TimeExtent`.
    The time extent is useful in defining the stops. The following image tries to
    show the components of a `TimeSlider dijit` and the physical representation of
    the programming terminology with respect to the `TimeSlider dijit`, such as `stops`,
    `timeInterval`, `thumb`, and so on:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Using the Time Slider](graphics/B04959_09_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Steps to create a TimeSlider
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Following are the steps to create a Time Slider:'
  prefs: []
  type: TYPE_NORMAL
- en: On the load event of the DynamicMapService or the feature layer, get the time
    extent of the layer.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Initialize the `TimeSlider dijit` and assign it to a container element such
    as `div` or content panel. Assign the timeslide to the map too.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set the other properties of the timeslider, such as thumb count, creating time
    stops given the layer's time extent and time units.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set the moving rate for the thumb.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create the labels for the time slider.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Start the time slider animation.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The time extent for the time slider can be obtained from the layer''s `timeInfo`
    property itself:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'The following code snippet explains how to set the time slider to the map and
    start the animation:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Using the previous chunk of code, we were able to develop a simple app with
    the `timeSlider` widget; a snapshot of the app during initial time stop can be
    seen here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Steps to create a TimeSlider](graphics/B04959_09_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Once the play button is clicked, the thumb starts moving. At each stop, the
    thumb may pause beyond the stipulated time gap in the play animation. This pause
    is the time the map service takes to fetch the dynamic map service at the particular
    time stop. In the following image, the time slider animation stopped for a few
    seconds more, giving us an opportunity to capture the instance of the map in the
    year 2004:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Steps to create a TimeSlider](graphics/B04959_09_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'If you were observing the networks tab of your browser, you would have noticed
    an HTTP `GET` request call being made every time the thumb moves to a stop along
    the Time Slider. At every stop, a new dynamic map image is being fetched, which
    corresponds to a map instance at a time. Let''s consider this image that shows
    a snapshot at a time instance, which is the year 2010:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Steps to create a TimeSlider](graphics/B04959_09_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The HTTP `GET` request issued to generate the dynamic image you''ve seen previously
    is this URL with each of its query parameters separated by a new line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: The URL gives a lot of information about the kind of image being generated.
    It should be noted that the request goes through the proxy page. The time parameter
    represents the year 2010 in ticks.
  prefs: []
  type: TYPE_NORMAL
- en: Querying based on time using D3
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The previous example was based on querying time aware layers using the in-built
    `TimeSlider dijit` provided by the API. We can further the capability of the Time
    Slider using the rich support for time-based data provided by the D3 library.
  prefs: []
  type: TYPE_NORMAL
- en: Our objective in this section would be to create a D3 Time Slider that can interact
    with our time aware layer.
  prefs: []
  type: TYPE_NORMAL
- en: The following code is inspired from the code listing given at the [http://bl.ocks.org/zanarmstrong/ddff7cd0b1220bc68a58](http://bl.ocks.org/zanarmstrong/ddff7cd0b1220bc68a58).
  prefs: []
  type: TYPE_NORMAL
- en: The webpage explains how to effectively use the D3 object to read and display
    time data in a time slider.
  prefs: []
  type: TYPE_NORMAL
- en: '![Querying based on time using D3](graphics/B04959_09_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Here are some of the important concepts we have to understand before implementing
    the code.
  prefs: []
  type: TYPE_NORMAL
- en: Scaling and formatting time
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In our earlier chapter, we dealt with how D3 functions can be used to scale
    numerical values as well as ordinal values. When we are dealing with time, we
    need to deal with scaling as applied to time. The following snippet explains how
    time extents can be scaled to the width of the container:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'In the previous snippet, we assume that we are able to provide the start and
    end data values to the D3 time-scaling function from the layer''s `timeInfo` property.
    We also need a proper date format to render the date values we have. The following
    line of code provides us with the date in the date-month-day format:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: D3 brush
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'A D3 brush is equivalent to a thumb in a Time Slider `dijit`. Brush is a D3
    SVG element object that accepts a time extent. In the following snippet, we have
    a brush element that accepts a timescale factor on the x axis:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Another important aspect we need to understand about the brush is about events
    such as `mousedown`. When the brush is moved by the user (on `mousemove` following
    a `mousedown`), the extent will be recomputed by calling `timescale.invert`. This
    will let us set the new extent for the brush. The following code explains this
    aspect:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Apart from the code listing provided in the web page, we need an additional
    piece of code to fire the query to retrieve the time aware data only when the
    `mousedown` event on the brush is persistent for at least 500 milliseconds. Else
    the event will be fired numerous times as we move the brush along the timescale.
    The following function, which is fired when the brush is moved, will publish a
    topic titled `application/d3slider/timeChanged`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'The code subscribing to the topic will set the map to the time extent that
    is pointed by the brush:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Find the full code listing to construct the D3 slider:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'When we incorporated the previous piece of code in our application, we got
    this nice D3 Time Slider as seen in the following image, which lets us query through
    a continuous time spectrum, instead of yearly stops:'
  prefs: []
  type: TYPE_NORMAL
- en: '![D3 brush](graphics/B04959_09_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The query to fetch the dynamic map image is not fired as we move or even temporarily
    halt the D3 brush (thumb) to different positions along the time slider. It is
    only fired when we let the thumb stay at a location for more than 0.5 seconds.
    This is a safe trade-off between performance and responsiveness. The following
    screenshot shows the dynamic map image at an instance of time (24^(th) August
    2002):'
  prefs: []
  type: TYPE_NORMAL
- en: '![D3 brush](graphics/B04959_09_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Advanced spatio-temporal visualization with Cedar
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A time aware layer provides valuable information about the data—the entire set
    of values for the features at each time stop for each feature. Until now, we have
    been visualizing the entire spatial dataset at different time zones using a Time
    Slider or a similar approach in D3\. We have never been able to visualize the
    values for a particular feature across the entire time extent, or at least across
    multiple time extents. Our objective in this section would be just that—to visualize
    the values of a selected feature across the entire time extent.
  prefs: []
  type: TYPE_NORMAL
- en: We will be using the following layer for our visualization purposes, available
    at [http://earthobs1.arcgis.com/arcgis/rest/services/US_Drought_by_County/FeatureServer/0](http://earthobs1.arcgis.com/arcgis/rest/services/US_Drought_by_County/FeatureServer/0).
  prefs: []
  type: TYPE_NORMAL
- en: This layer shows the USA Drought intensity from 2000 to the present by county.
    The temporal range of data is 01/04/2000 to the present and is updated every Thursday
    to reflect the conditions occurring the previous week.
  prefs: []
  type: TYPE_NORMAL
- en: 'Our objective is to pull all the data for a selected feature. The following
    steps can be followed to arrive at our objective:'
  prefs: []
  type: TYPE_NORMAL
- en: Select a feature and perform an identify task on it to get the feature ID.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Use the feature ID to query the previous feature layer.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Pass the data to Cedar charts of the type `time`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The following piece of code explains how identify parameters are formed. The
    identify task is performed at each map click:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'The map click event calls the following function named `doIdentify()`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: The topic that sends the query data shall be subscribed by the function that
    will construct the Cedar chart. The Cedar chart type required is `time`.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `time` type Cedar chart expects the following types of fields in the field
    mapping:'
  prefs: []
  type: TYPE_NORMAL
- en: Esri date time field
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Any numerical value
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'In our case, we will map the fields, namely `countycategories_date` (date time
    field) and `countycategories_d0` (numeric field):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Incorporating the previous code into the application, we were able to see the
    time-based graph of the drought values over a period for a selected county. In
    the following image, the graph represents the timeline of drought values for the
    selected feature:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Advanced spatio-temporal visualization with Cedar](graphics/B04959_09_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: This representation gives a multidimensional perspective in more than one way.
    One is that we are still seeing the spatial distribution of drought for the entire
    country at a particular instance of time. At the same time, we are able to use
    a non-spatial visualization aid, such as a time-graph, to visualize the entire
    set of drought values throughout a time period for a particular feature at county
    level.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We have covered how data can be visualized in a spatio-temporal fashion using
    three methods, namely Time Slider, D3, and Cedar. While Time Slider is an in-built
    API provided `dijit`, the D3 solution is much more extensive and flexible. Charting
    space-time data using the Cedar `time` type chart offers a different perspective
    of space-time data. We started with the foundations of the API and progressed
    steadily into the nuances of building a fully-fledged dojo web app with widgets.
    We dealt with versatile query capabilities provided by the API and have used it
    throughout the chapters in different forms. Displaying the query results was our
    later focus. The query results can be displayed as a spatial graphic as well as
    in tabular form. We later delved into more intuitive ways of rendering our spatial
    data displayed on the map using rendering techniques.
  prefs: []
  type: TYPE_NORMAL
- en: We then realized that a bit of statistical knowledge would not only help us
    understand the data better, but also visualize it better so that the user can
    derive new insights into the data. The last three chapters have been about adding
    multiple dimensions with the aid of of non-spatial components, such as charting
    techniques and time dimension, to our maps. This chapter culminates at perceiving
    our maps in all the discussed dimensions, but certainly this is not the limit.
    Rather, this is the starting point for an enterprising map data scientist like
    you!
  prefs: []
  type: TYPE_NORMAL
