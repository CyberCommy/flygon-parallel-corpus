- en: '*Chapter 2*: Getting Information about a Cluster'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When you are managing a Kubernetes cluster, it is necessary to know what Kubernetes
    version it is running on, the details about the master (also called the control
    plane), any addons installed on the cluster, and the available APIs and resources.
    As different Kubernetes versions support different API versions for resources,
    not setting the right/unsupported API version for your, for example, Ingress,
    will cause the deployment to fail.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we''re going to cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Cluster information
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Cluster API versions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Cluster API resources
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Cluster information
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'It is always good to know which version of the Kubernetes server (API) is installed
    for a Kubernetes cluster as you might want to use particular features available
    in that version. To check the server version, run the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: The server version is `v1.17.5` and the `kubectl` version is `v1.18.1`. Note
    that the `-gke.9` bit of the server version is the internal GKE revision; as we
    mentioned earlier, for the book's purposes, a GKE cluster is used.
  prefs: []
  type: TYPE_NORMAL
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: The `kubectl` version can be a more recent one; it does not really have to match
    the server version, as the latest version is usually backward compatible. However,
    it is not recommended to use an older `kubectl` version with a more recent server
    version.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, let''s check the cluster server information by running the following
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'In the preceding output log, we see the following:'
  prefs: []
  type: TYPE_NORMAL
- en: The master endpoint IP (`35.223.200.75`), where your `kubectl` connects to the
    Kubernetes API.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'A list of installed addons, which in this setup are more GKE cluster-specific:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: a. `GLBDefaultBackend`
  prefs: []
  type: TYPE_NORMAL
- en: b. `KubeDNS`
  prefs: []
  type: TYPE_NORMAL
- en: c. `Metrics-server`
  prefs: []
  type: TYPE_NORMAL
- en: The addons list will vary between cloud-based and on-premises installations.
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, let''s check cluster node information using the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'The output of the preceding command is as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.1 – Output showing node information'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/B16411_02_001.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 2.1 – Output showing node information
  prefs: []
  type: TYPE_NORMAL
- en: The preceding command shows a list of the nodes available in the cluster with
    their status and Kubernetes version.
  prefs: []
  type: TYPE_NORMAL
- en: Cluster API versions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: It is good practice to check the available cluster API versions because each
    new Kubernetes version usually brings with it new API versions and deprecates/removes
    some old ones.
  prefs: []
  type: TYPE_NORMAL
- en: 'To get an API list, run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'The output for the preceding command gives us a list of APIs, as shown in the
    following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.2 – API list'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/B16411_02_002.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 2.2 – API list
  prefs: []
  type: TYPE_NORMAL
- en: You need to know which APIs can be used in your application, as otherwise, the
    deployment could fail if the API version you use is not supported anymore.
  prefs: []
  type: TYPE_NORMAL
- en: Cluster resources list
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Another handy list is the resources list, which shows the available resources,
    their short names (to use with `kubectl`), the API group a resource belongs to,
    whether a resource is namespaced or not, and the `KIND` type.
  prefs: []
  type: TYPE_NORMAL
- en: 'To get the resources list, run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding command gives us the following list of resources:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.3 – List of resources'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/B16411_02_003.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 2.3 – List of resources
  prefs: []
  type: TYPE_NORMAL
- en: As the list is quite long, we are only showing part of it in the preceding screenshot.
  prefs: []
  type: TYPE_NORMAL
- en: Getting a list of resources will help you to run `kubectl` commands using short
    resource names and to know which API group a resource belongs to.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we have learned how to use `kubectl` to get information about
    a Kubernetes cluster, the available APIs, and the API resources in a cluster.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we are going to look at how to get information about the
    nodes present in a Kubernetes cluster.
  prefs: []
  type: TYPE_NORMAL
