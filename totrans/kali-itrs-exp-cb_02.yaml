- en: Chapter 2. Network Information Gathering
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following recipes:'
  prefs: []
  type: TYPE_NORMAL
- en: Discovering live servers over the network
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bypassing IDS/IPS/firewall
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Discovering ports over the network
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using unicornscan for faster port scanning
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Service fingerprinting
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Determining the OS using nmap and xprobe2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Service enumeration
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Open-source information gathering
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we will look at how to detect live servers and network devices
    over the network, and perform service fingerprinting and enumeration for information
    gathering. Gathering information is of the utmost importance for a successful
    vulnerability assessment and penetration test. Moving forward, we will run scanners
    to find vulnerabilities in the detected services. Along with that, we will write
    bash scripts so that we can speed up the process of discovery-enumerate-scan.
  prefs: []
  type: TYPE_NORMAL
- en: Discovering live servers over the network
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this recipe, we will learn how to perform the discovery of live network
    devices/machines over the network, using two methods: **Passive information gathering**
    and **active information gathering**.'
  prefs: []
  type: TYPE_NORMAL
- en: We will examine the network traffic of our environment as a part of our passive
    information gathering, followed by active information gathering, in which we will
    send packets over the network to detect active machines and services running on
    them.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In order to begin with this recipe, we will be using a simple ARP sniffing/scanning
    tool called **netdiscover**. It is a net-discovery tool which can be used for
    active/passive ARP reconnaissance.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let''s start with passive reconnaissance:'
  prefs: []
  type: TYPE_NORMAL
- en: 'To start netdiscover, ensure that you are connected via Wi-Fi with a valid
    IP address. Open the terminal and enter the following command for passive reconnaissance:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'The output will be as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/image_02_001.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'To perform an active scan over the network to discover live IPs, type the following
    command in the terminal:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'The output will be as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/image_02_002.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'If you would like to save the output of netdiscover, you can use the following
    command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: After a few seconds (for example, 10 seconds), terminate the program with *Ctrl*
    + *C*, and the output of the file will look something like the following:![How
    to do it...](img/image_02_003.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Another way to perform a quick and effective scan is by using the `nmap` command.
    To detect the live systems over the network range via a simple ping scan, use
    the following command in the terminal:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'The output will be as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/image_02_004.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'You can also save the outputs of the nmap tool into a file. All we have to
    do is add a bit of bash scripting and type the following command in terminal:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Let us understand the command: the output of the first `nmap` command is fed
    as the input to the second command that comes after the pipe sign. In the second
    command the grep command searches for the lines that contain "report for" since
    this will be the statement that specifies the IP is responding. The output of
    those lines where "report for " is found is forwarded to the third command which
    is after the pipe sign. In the third command, we perform a cut operation where
    we say that the comparison delimiter is a "space" in the line and fetch the 5th
    field that is the fifth word when separation is on the basis of a "space".'
  prefs: []
  type: TYPE_NORMAL
- en: 'The output of the file will only contain the IP address we can continue to
    use for our further assessment:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/image_02_005.jpg)'
  prefs: []
  type: TYPE_IMG
- en: This file will be used in further references to automate a chain of scanning
    requests since all the IPs have been extracted into one file.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'So, the few tools we have used work as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`netdiscover`: The following switches are used with this command:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-p`: This switch is used for running in passive mode; it makes sure not to
    send any packets on its own and just acts as a listener on our network interface
    card'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-i`: This switch is used for specifying which interface to use for detection
    of live IPs'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We also saw how the output can be stored in a file for later reference.
  prefs: []
  type: TYPE_NORMAL
- en: '`nmap`: The following switches are used with this command:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-sP`: This switch is also regarded as the `-sn` switch that is used for the
    purpose of a ping scan'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We also saved the output of the ping scan in the file using the bash script
    invoking the use of basic logics.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we have learned how to detect all the IPs in networks which
    are live, and scoped them under for open-port analysis in the next recipe.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'There are more features made available in the netdiscover tool that will help
    to speed up the process. They are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`-h`: This feature loads the help content for using netdiscover'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-r`: This feature allows you to perform a range scan rather than an auto scan'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-s`: This feature provides you with an option to sleep in between each request'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-l`: This feature allows you to provide a file with a list of IP ranges to
    be scanned'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-f`: This feature enables a fast-mode scan; it saves a lot of time when compared
    to normal detection techniques'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The nmap tool also supports many options for live IP detection:'
  prefs: []
  type: TYPE_NORMAL
- en: '`-sL`: This is a simple list scan to specify a file with IP addresses to be
    checked'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-sn`: This is a simple ping scanner to determine live IP.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-PS`/`PA`/`PU`/`PY TCP SYN`/`ACK`: This is used for UDP- or SCTP-based port
    detection'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`--traceroute`: This option allows a trace hop path to each host'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'For more information on active and passive scanning and more tools for the
    same, refer to the following links:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://tools.kali.org/tools-listing](http://tools.kali.org/tools-listing)
    for toolset'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://nmap.org/docs.html](https://nmap.org/docs.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bypassing IDS/IPS/firewall
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will look at a few of the switches supported by nmap that
    can be used to bypass IDS/IPS/firewalls. Many a time, when we are performing a
    scan, we come across a firewall. In case the firewall is not configured correctly,
    we will be able to execute the following firewall-evasion commands of nmap.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We will use nmap for this activity. Let's begin with the machine we have detected
    to run a few evasion switches.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'For this recipe, we will perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'We will use the fragment packet switch to perform the discovery:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Fragment packet switch splits up the TCP header over several packets to make
    it harder for packet filters, intrusion detection systems, and other annoyances
    to detect an ongoing active scan. There could be occurrences where this could
    fail as some programs might not be able to handle tiny packets. For a more detailed
    understanding visit [https://nmap.org/book/man-bypass-firewalls-ids.html](https://nmap.org/book/man-bypass-firewalls-ids.html).
  prefs: []
  type: TYPE_NORMAL
- en: 'We will enter the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'The output will be as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/image_02_006.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Another switch is the `mtu` switch available in nmap, when we perform a fragment
    scan nmap divides the packet in 8 bytes or less, so to understand a 30 byte packet
    would be divided in 4 packets on respecifying `-f` the packet would be divided
    in 16 bytes thus reducing the fragments, mtu allows us to specify our own offset
    size that we want to use for the purpose of scan.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'To perform evasion by MTU here, enter the following command in Terminal:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: For more information on the MTU switch, refer to [https://nmap.org/book/man-bypass-firewalls-ids.html](https://nmap.org/book/man-bypass-firewalls-ids.html).
  prefs: []
  type: TYPE_NORMAL
- en: 'The output will be as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/image_02_007.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Here we will use a decoy attack. Enter the following command in terminal:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'The output will be as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/image_02_008.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Here we will do a custom port attack. Enter the following command in terminal:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'The output will be as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/image_02_009.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Following is an example to help you better understand the scenario:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/image_02_010.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Notice how the ports respond to a normal scan as compared to a fragmented scan.
    This complies that we were able to bypass the firewall and detect open ports.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let us understand how these switches worked:'
  prefs: []
  type: TYPE_NORMAL
- en: '`-f`: This technique has been used for quite a long time over misconfigured
    firewalls. What it does is send the packets in smaller sizes, in order to evade
    the firewall.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-mtu <8,16,24,32>`: **MTU** stands for **maximum transmission unit**. Here
    we can manually specify the size of the packets; once we specify the size, nmap
    will send packets of the entered size to perform the scan activity.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-D`: This is used to spoof packets mentioning the source IP of our choice so
    that garbage entries are created in the logs and it becomes difficult to locate
    from which system the scan was initiated.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`--source-port`: Most of the time, firewalls set an allow-incoming rule for
    certain ports in the network for various devices. This can be exploited by using
    a custom source port that might have an inbound access allowed over the system
    to perform the scanning activity.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: There are a few more techniques available in the evasion criteria; for example,
    appending random data, MAC spoofing, and bad checksum scanning. This can be taken
    up as self-study.
  prefs: []
  type: TYPE_NORMAL
- en: Discovering ports over the network
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will use the list of active IPs we scanned and saved in the
    file to perform information gathering, the purpose will be to scan them for open
    ports on those IPs. We will be using nmap and its features to discover open ports.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We will use the nmap tool to detect open ports on the IP. Let's start with the
    process of detecting the open ports over a specific IP.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'For this recipe, you will need to perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'We will run nmap by typing the following command in terminal:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'The output will be as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/image_02_011.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'We can even check what the tool is doing by using the verbose switch, by entering
    the following command in Terminal:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'The output will be as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/image_02_012.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'By default, it scans only 1,000 well-known sets of ports. If we are interested
    in setting the scan preference to the top 100 ports, we can run the following
    command in terminal:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'The output will be as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/image_02_013.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'We can even limit our port scanning to specific ports or a range of ports for
    any given IP(s) or IP range(s). We can run the following command to see the same:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'The output will be as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/image_02_014.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'There could be scenarios when we would like to know which IP(s) have a specific
    service running in the entire network range. We run the following command in Terminal:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'The output is shown as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/image_02_015.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Let''s say we would like to check what UDP ports are open on a particular system.
    We can check this by typing the following command in Terminal:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'The output will be as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/image_02_016.jpg)'
  prefs: []
  type: TYPE_IMG
- en: In the previous recipe, we saw that we had saved the output of live IPs in one
    file; let us now look at how to import IPs from a file and perform a simple TCP
    scan.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Open terminal and type the following command, making sure you enter the path
    to the IP file correctly:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'The output will be as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/B01606_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The live IP scan result can be saved in a file using the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: Nmap also has a graphical version of itself; it's named zenmap, and it looks
    as follows:![How to do it...](img/image_02_018.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let us understand how these switches work:'
  prefs: []
  type: TYPE_NORMAL
- en: '`Nmap < IP address>`: Only performs a SYN scan on the famous ports and derives
    the basic set of information'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-v`: Toggles on the verbose mode, thus providing more information about the
    type of scan'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`--top-ports <number>`: This switch tells nmap to scan for the given number
    of ports from the famous port repository'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-p`: This switch tells nmap that it should only scan for the port numbers
    mentioned after the switch'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-sU`: This is a UDP switch in nmap, telling it to scan for open ports by sending
    UDP packets and detecting corresponding responses'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-sT`: This is a TCP switch, telling nmap to establish the connection with
    the target network to make sure that the ports are definitely open'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-iL`: This switch tells nmap that the input can be taken from the file mentioned
    following the `-iL` switch'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In this recipe, we have seen how we can detect open ports; this will help us
    proceed with upcoming recipes.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'There are many other options available in nmap which can be used to scan for
    protocol-based open ports, and also other techniques for effective scanning to
    try and keep a low-level detection of a scanner being run in the network. Useful
    commands in the tool are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`-sS`: This command performs a SYN can (fastest and most accurate scan- recommended)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-sX`: This command performs an Xmas scan'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-sF`: This command performs a FIN scan'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-sN`: This command performs a Null scan'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-sU`: This command performs a UDP scan. However, it isn''t very accurate,
    since UDP is stateless'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For Zenmap (GUI version of nmap), we recommend you visit [http://nmap.org/book/man-port-scanning-techniques.html](http://nmap.org/book/man-port-scanning-techniques.html)
    , as a reference. It can be found under **Kali Linux** | **Information Gathering**
    | **Network Scanners** | **Zenmap**
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using unicornscan for faster port scanning
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Unicornscan is another scanner that works very fast, the core reason being the
    methodology the tool implements. It works with the technique of asynchronous stateless
    TCP scanning, wherein it makes all possible variations with the TCP flags and
    the UDP as well. In this recipe, we are going to look at how to make use of unicornscan
    and its advanced capabilities.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In order to get started with unicornscan, we will take an IP from our range
    of IPs and dig deeper into the tool's capabilities.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let''s work through the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open terminal and type the following command for a simple unicornscan:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'The output will be as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/image_02_019.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'If you would like to see the details of what it is doing while we execute the
    command, we can make use of the verbose script by using the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'The output will be as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/image_02_020.jpg)'
  prefs: []
  type: TYPE_IMG
- en: We can see that it shows the ports it takes into consideration while it performs
    the scan.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s say we want to do the same with UDP as well. Enter the following command
    in terminal:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'The output will be as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/image_02_021.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'There are more options available. To check them, type the following command
    in terminal:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'The output will be as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/image_02_022.jpg)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The commands mentioned in the recipe work as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`Unicornscan <IP address>`: In this scenario, unicornscan runs the default
    `TCP SYN` scan (the params in unicornscan would be `-mTS` over the IP) and scans
    for the quick ports under the `unicornscan.conf` file located at `/etc/Unicornscan/unicornscan.conf`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-v`: The switch tells the scanner to enter verbose mode and provide more information
    as to what it is doing when it performs a scan.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-m U`: The `-m` switch stands for the mode of scanning to be used. In this
    scenario, we used `U`, which means that the scan type is supposed to be UDP.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In this recipe, we have seen how unicornscan can be effectively used to get
    information about the open ports at lightning speed, and how we can toggle between
    different switches.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'There are many more switches available in unicornscan that can be used to improvise
    the scanning preference. It is recommended to try them out and get acquainted
    with them:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: Service fingerprinting
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will look at how to analyze the open port to determine what
    kind of service(s) are running on the open port(s). This will help us understand
    if the target IP is running any vulnerable software. That is why service fingerprinting
    is a necessary and a very important step.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We will use nmap to fingerprint the services of the target IP. Nmap is a multi-functional
    tool that performs jobs ranging from host discovery to vulnerability assessment;
    service fingerprinting is also a part of it.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The steps are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Using nmap, run the following command in terminal to achieve the service enumeration
    result:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'The output will be as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/image_02_023.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'We can even enumerate the UDP services running on the target IP, by using the
    UDP scan switch along with the service-detection switch:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'The output will be as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/image_02_024.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'We can speed up the scan using the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: Details of the switches used are provided in the *How it works* section. For
    addition details, visit [https://nmap.org/book/man-port-specification.html](https://nmap.org/book/man-port-specification.html)
    and [https://nmap.org/book/man-version-detection.html](https://nmap.org/book/man-version-detection.html)
    .
  prefs: []
  type: TYPE_NORMAL
- en: 'The output will be as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/image_02_025.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Here we can see that the difference between the normal scan and the timed scan
    is almost 60+ seconds.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The following are a list of switches that will we have used with their explanation
    for better understanding:'
  prefs: []
  type: TYPE_NORMAL
- en: '`-sV`: This stands for version detection; it probes all the open ports and
    tries to parse the banner-grabbed information to determine the service version
    running.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-T4`: The `T` stands for fine-grained timing controls, and the `4` stands
    for the level of speed in which to perform a scan. The timing ranges from 0-5:
    (0)paranoid, (1)sneaky, (2)polite, (3)normal, (4)aggressive, (5)insane. (0) and
    (1) usually help in IDS evasion, while (4) tells nmap to assume that we are on
    a fast and reliable network, thus speeding up the scans.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-F`: This is a fast mode; it scans fewer ports than the default scan.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In this recipe, we have learned how nmap fingerprints open ports to detect the
    running services and their corresponding versions over them. This will be used
    later to help us detect the operating system.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We can even check out other tools, provided in the Kali distribution, which
    deal with service enumeration. A few of the tools we can check are listed under
    **Kali Linux** | **Information Gathering** | **<services>**.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are also detailed switches available in the nmap `-sV` detection:'
  prefs: []
  type: TYPE_NORMAL
- en: '`--all-ports`: This tells nmap to make sure it fingerprints versions of services
    running on all open ports.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`--version-intensity`: This tells nmap to scan with an intensity value ranging
    from 0 to 9, 9 being the most effective fingerprinting.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: After the ports are enumerated, an attacker can find out if the version of software
    running on the ports is vulnerable to any attack vectors by way of a little Google
    search or scouring over websites such as [exploit-db.com](http://exploit-db.com)
    , [securityfocus.com](http://securityfocus.com) and so on.
  prefs: []
  type: TYPE_NORMAL
- en: Determining the OS using nmap and xprobe2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will be using tools to determine what kind of operating system
    the target IP is running on. Mapping a target IP with a corresponding operating
    system is necessary to help shortlist and verify vulnerabilities.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this recipe, we will use the nmap tool to determine the operating system.
    All we require is an IP address against which we will run the OS enumeration scan.
    Others tools that can be used are hping and xprobe2.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let us begin by determining the operating system:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open terminal and type the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'The output will be as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/image_02_026.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'We can use advanced operators to help us find out the operating system in a
    more aggressive manner. Type the following command in terminal:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'The output will be as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/image_02_027.jpg)'
  prefs: []
  type: TYPE_IMG
- en: This shows that using additional parameters of the operating system detection
    in nmap, we can get a probable idea of the best fit.
  prefs: []
  type: TYPE_NORMAL
- en: 'Xprobe2 uses a different approach to nmap. It uses fuzzy signature matching
    to provide the probable operating system. Open terminal and type the following
    command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'The output will be as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/image_02_028.jpg)'
  prefs: []
  type: TYPE_IMG
- en: We cannot determine which is the best scanner, since every scanner has its own
    method of implementation. To prove what we are talking about, let's have a look
    at the following scenario. We set a common target for enumerating the operating
    system. The target is [www.google.com](http://www.google.com) .
  prefs: []
  type: TYPE_NORMAL
- en: 'The following screenshot shows the nmap result :'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/image_02_029.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The following screenshot shows the Xprobe result:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/image_02_030.jpg)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Nmap performs the activity of determining the operating system based on TCP/IP
    stack fingerprinting. It sends a series of packets, consisting of the TCP and
    UDP packets, and analyzes all of the responses. It then compares them with the
    signatures that are available with the nmap engine to put in the best-fit operating
    system, and tells us what the target machine's operating system could be. In the
    preceding scenario, there was one target IP that did not give any operating system
    details; this is because the nmap tool was not able to match any responses with
    the signatures available in the tool.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s look at some details of the switches used above:'
  prefs: []
  type: TYPE_NORMAL
- en: The `-O` argument enables the nmap engine to start determining the possible
    OS based on the information retrieved from the banner. It mentions that it is
    far more effective if it finds one open and one closed TCP port on the target
    IP.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `--osscan-guess` argument enables the nmap engine to show the best probable
    matches for the detected signatures, in case it was not able to find a perfect
    match.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Xprobe2 has around 14 modules that can be used to scan for the detection of
    the type of OS running over the remote target.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we learned how to effectively determine the operating system
    using different scanners. We will now be using this information to proceed to
    the next recipe.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'There are additional options in the nmap operating system discovery module,
    which are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`--osscan-limit`: This argument will limit detection only to the promising
    targets; it will skip the target if it does not find any port open. This saves
    a lot of time when scanning multiple targets.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`--max-os-tries`: This is used to set the number of times nmap is supposed
    to try detection if it fails. By default, it tries five times; this can be set
    to a lower value to avoid time consumption.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Service enumeration
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Once the services have been fingerprinted, we can perform enumeration. There
    can be many different sources used to achieve the goal of this recipe. In this
    recipe, we will look at how to perform service-discovery scans using various tools,
    for the following:'
  prefs: []
  type: TYPE_NORMAL
- en: SMB scan
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: SNMP scan
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using the **NSE** (**nmap scripting engine**) engine
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Nbtscan** is a script in Kali that enumerates for the NetBIOS name of the
    target IP. It can be used as the early part of SMB enumeration. It basically requests
    a status query of the NetBIOS name in a human-readable format.'
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this recipe, we will be using tools to enumerate all the services mentioned
    above.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'For this recipe, the steps are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: 'To enumerate the NetBIOS name, we will run the following command in terminal:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'The output will be as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/image_02_031.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'You can run the NetBIOS enumeration over a class range as well, using the following
    command in terminal:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'The output will be as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/image_02_032.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'To perform an SMB scan, we can use commands such as `enum4linux`. Enter the
    following command in terminal to start an SMB scan:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'The output will be as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/image_02_033.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Additionally, it even provides share-enumeration information to check the available
    shares on the system:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/image_02_034.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'It even shows us the password policy (if any applied) on the target:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/image_02_035.jpg)'
  prefs: []
  type: TYPE_IMG
- en: As you can see, enum4 Linux is a powerful tool, especially in the scenario where
    null sessions are enabled.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'A reference from Wikipedia to understand null sessions: A null session is an
    anonymous connection to an inter-process communication network service on Windows-based
    computers. The service is designed to allow named pipe connections. However, it
    can be exploited to retrieve information. For a basic understanding of null sessions,
    visit [http://www.softheap.com/security/session-access.html](http://www.softheap.com/security/session-access.html)
    . A thoroughly detailed pentest scenario can be understood at [https://pen-testing.sans.org/blog/2013/07/24/plundering-windows-account-info-via-authenticated-smb-sessions](https://pen-testing.sans.org/blog/2013/07/24/plundering-windows-account-info-via-authenticated-smb-sessions)
    .'
  prefs: []
  type: TYPE_NORMAL
- en: Let's move on to SNMP scanning. For this purpose, we will use a scanning tool
    called SnmpWalk and start browsing through the **MIB** (**management information
    base**) tree.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Start by typing the following command in terminal:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'The output will be as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/image_02_036.jpg)'
  prefs: []
  type: TYPE_IMG
- en: We can see that a lot of information is fetched when we try to access the SNMP
    service, with the default string public if not changed. In order to make sure
    we do not get so much information, and to request information in an orderly manner,
    we can make use of the MIB tree.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'For example , if we wish to extract only system users then we can use this
    value `1.3.6.1.4.1.77.1.2.25`, enter the following command in terminal:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'The output will be as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/image_02_037.jpg)'
  prefs: []
  type: TYPE_IMG
- en: We will be using nmap to find vulnerabilities in the open ports. Nmap has a
    huge list of scripts used for assessment purposes, which can be found at `/usr/share/nmap/scripts/`.
    The output will be as shown in the following screenshot:![How to do it...](img/image_02_038.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: These scripts need to be updated from time to time.
  prefs: []
  type: TYPE_NORMAL
- en: Once we select a target, we will run nmap scripts over it.
  prefs: []
  type: TYPE_NORMAL
- en: 'Open terminal and type the following command to perform a script scan:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This will run all the possible scripts that match the open ports.
  prefs: []
  type: TYPE_NORMAL
- en: 'The output will be as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/image_02_039.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'We can even downsize the scope of scanning to specific services only. Type
    the following command in terminal to run all enumeration scripts related to SMB
    services only:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: 'The output will be as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/image_02_040.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'However, we should be aware that there are certain scripts that can stall or
    crash the service while trying to analyze if a target is vulnerable. These can
    be invoked by using the unsafe args, for example, on typing the following command
    in terminal:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: 'The output will be as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/image_02_041.jpg)'
  prefs: []
  type: TYPE_IMG
- en: This tells us if the port is vulnerable to any attack.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let us understand a few of the switches used in this recipe:'
  prefs: []
  type: TYPE_NORMAL
- en: In Nbtscan, we used the `-r` switch, which tells nbtscan to scan for a given
    whole class network/subnet; it queries all the systems on UDP port `137`. This
    port has a service referenced to "Network Neighborhood" also known as netbios.
    When this port receives a query, it responds with all the running services on
    that system.
  prefs: []
  type: TYPE_NORMAL
- en: The `enum4linux` is a script that enumerates pretty much all the possible information
    that includes RID cycling, user listing, enumeration of shares, identifying the
    type of remote OS, what the running services are, password policy, and so on,
    if the target IP is susceptible to null-session authentication.
  prefs: []
  type: TYPE_NORMAL
- en: 'Following are the switches used in SnmpWalk:'
  prefs: []
  type: TYPE_NORMAL
- en: '`-c`: This switch tells SnmpWalk what type of community string it is. By default,
    the SNMP community string is public.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-v1`: This switch specifies that the SNMP version is 1\. We can even use 2c
    or 3 depending on the type of SNMP service version it is running on.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`dnsenum`: This is a DNS enumeration tool. It basically enumerates all the
    DNS-related information from a DNS server, and even checks if it is possible for
    a zone transfer.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-sC`: This switch enables nmap to run default NSE scripts for all the open
    ports detected on the target IP, from the repository.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`--script`: This switch enables us to specify which script we want to execute.
    We can use regex, as shown in the preceding example.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`--script-args=unsafe=1`: This switch enables nmap to run dangerous scripts
    to assess if a port is vulnerable to a type of attack. The reason it is not a
    part of default script analysis is because, at times, these can cause the remote
    service to crash and be rendered unavailable, leading to a DOS situation.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In this recipe, we learned how to run different scripts on the services detected
    by nmap, and how to run dangerous enumeration scripts.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: It is suggested that, for better operability of running scripts, we should use
    Zenmap. We can create a profile and select whichever script we want to execute.
  prefs: []
  type: TYPE_NORMAL
- en: In Zenmap, go to **Profile** | **New Profile** or **Command** | **Scripting**,
    and select whichever scripts you want to test.
  prefs: []
  type: TYPE_NORMAL
- en: Open-source information gathering
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will look at how to make use of tools meant for online information
    gathering. We will cover tools that serve the purpose of gathering information
    with respect to Whois, domain tools, and MX mail servers. Shodan is a powerful
    search engine that locates drives for us over the Internet. With the help of various
    filters, we can find information about our targets. Among hackers, it is also
    called the world's most dangerous search engine.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We will make use of tools such as DNsenum for the purpose of Whois enumeration,
    find out all the IP addresses involved in a domain, and also how Shodan provides
    us with open-port information of the target searched.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The steps are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: 'For DNS scan, we will use a tool called DNsenum. Let us start by typing the
    following command in terminal:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: 'The output will be as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/image_02_042.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'We can also use the function available to search for more subdomains via google
    scraping. Enter the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: 'The output will be as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/image_02_043-2.jpg)'
  prefs: []
  type: TYPE_IMG
- en: As we can see the `p` and the `s` switches tell dnsenum to search across 4 pages
    of google and the maximum number of scrape entries to be pulled from google.
  prefs: []
  type: TYPE_NORMAL
- en: 'Another feature of dnsenum is to provide it a list of subdomain dictionary
    file to find out valid subdomains and their address. The same can be done by issuing
    the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: 'Here subdomains is a custom list of possible subdomains, we get the output
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/image_02_044.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Coming back to the simplisting dns enumeration, we performed and for the ones
    above, it is observed that the output contains a lot of information, so it is
    always better to save the output in a file. One option is to use the push the
    output to the file using the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: 'The output will be as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/image_02_045.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'How ever if we need to use the output enum for another tool we must use the
    switch provided in dnsenum to take the output in the XML format as majority of
    tools support XML import functions. Use the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: 'The output will be as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/image_02_046.jpg)'
  prefs: []
  type: TYPE_IMG
- en: When we use the head command to the output file, we get the following:![How
    to do it...](img/image_02_047.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The `dnsenum` command gives you a lot of information about your target:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Name server: Nameserver is a server that handles queries regarding the location
    of a domain name''s various services'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'MX record: This specifies the IP that corresponds to the mail server of the
    given host.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Host address: This specifies the IP address where the server is hosted'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Sub domains: A subset of the main site; for example, [mail.google.com](http://mail.google.com)
    and [drive.google.com](http://drive.google.com) are sub domains of [google.com](http://google.com).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Reverse lookups: A way to query the DNS server with an IP address to find the
    domain name'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Register yourself for Shodan at [http://www.shodan.io](http://www.shodan.io),
    and click on explore to browse through the available list of features that you
    can see.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now go to the Webcam section, and you will see a list of all the IPs with a
    webcam server running on their system.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Let's say you manage to get the target IP or web URL; you can retrieve a lot
    of information just by entering the IP in the search filter, as shown in the following
    screenshot:![How to do it...](img/image_02_048.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Let's say you want to check for all the servers belonging to a country; in the
    search filter, enter `Country:IN`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'You can see how it fetches a humungous output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/image_02_049.jpg)'
  prefs: []
  type: TYPE_IMG
- en: This is how the output of a specific IP address would look:![How to do it...](img/image_02_050.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the top left-hand corner, when you click on the **View All...** tab, you
    will get a list of all the available features of Shodan:![How to do it...](img/image_02_051.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: As we can see, the amount of functionality provided is vast. We should take
    the time to explore all the options one after another.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `dnsenum <domain name>` syntax queries the DNS server of the mentioned domain
    name, followed by the name server and mail server. It also performs a check on
    whether zone transfer can take place.
  prefs: []
  type: TYPE_NORMAL
- en: 'The commands used work as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`-o`: When specified with a file name, this provides an XML-based output of
    the DNS enumeration done'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-p = pages <value>`: The number of google search pages to process when scraping
    names; the default is 20 pages; the `-s` switch must be specified'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-s = scrap <value>`: The maximum number of subdomains that will be scraped
    from google'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-f, = file <file>`: Read subdomains from this file to perform brute force'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Shodan has a huge list of filters; the filter used above is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Country**: This specifies the country in which to search for the given target;
    it is generally identified by the country code'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: More information gathering can be done by using the Shodan search engine.
  prefs: []
  type: TYPE_NORMAL
- en: The Shodan search engine lets a user find specific types of computers or devices
    over the Internet with the help of different filter combinations. This can be
    a great resource for gathering information about a target. We can learn more about
    the Shodan filters by visiting [http://www.shodanhq.com/help/filters](http://www.shodanhq.com/help/filters)
    .
  prefs: []
  type: TYPE_NORMAL
