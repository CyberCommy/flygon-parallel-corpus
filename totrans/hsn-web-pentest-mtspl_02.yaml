- en: Introduction to Web Application Penetration Testing
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In today's world, there are automated tools and SaaS solutions that can test
    the security of a system or application. Automation often fails at a logical level
    when an application needs to be tested for business-logic flaws. It is important
    to learn how the penetration tester can help organizations stay a step ahead of
    cyber attacks and why the organization needs to follow a strict patch-management
    cycle to secure their assets.
  prefs: []
  type: TYPE_NORMAL
- en: In this book, you will learn how to perform a penetration test on web applications
    that are built on different platforms using the famous Metasploit framework. As
    most of us have heard about this tool and its importance in regular penetration
    tests, this book will be focused on how we can perform penetration testing on
    a variety of web applications, such as **content management systems** (**CMSes**)
    and **content delivery** and **content integration** systems (**CD/CI**), using
    the Metasploit framework. To learn more about the tools and techniques, we first
    need to understand the basics of penetration testing.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: What is penetration testing?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Types of penetration testing
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Stages of penetration testing
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Important terminologies
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Penetration testing methodologies
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Common weakness enumeration** (**CWE**)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What is a penetration test?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Penetration testing, also known as pen testing, is an authorized attack on a
    computer system that is done to evaluate the security of the system/network. The
    test is performed to identify vulnerabilities and the risks they pose. A typical
    penetration test is a five-stage process that identifies the target systems, their
    vulnerabilities, and the exploitability of each vulnerability. The goal is to
    find as many vulnerabilities as possible and report back in a universally acceptable
    format for the client to understand. Let's look at the different types of penetration
    testing in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Types of penetration test
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Depending upon the client''s requirement, penetration tests can be categorized
    into three types:'
  prefs: []
  type: TYPE_NORMAL
- en: White box
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Black box
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Gray box
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We will discuss each of these in the following sections.
  prefs: []
  type: TYPE_NORMAL
- en: White box penetration test
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A **white box penetration test**, or a glass box or clear box penetration test,
    is a type of test in which the information and details regarding the target system,
    network, or application are fully shared by the client, such as the login credentials
    of the systems, the SSH/Telnet login for the network devices, and the application
    source code that needs to be tested. Since the information retrieved from the
    client regarding their system, network, or application is highly sensitive, it
    is recommended that you have all the information in an encrypted format.
  prefs: []
  type: TYPE_NORMAL
- en: Black box penetration test
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A **black box penetration test** is an attacker-simulated test in which the
    penetration tester will act as a threat actor with no internal information regarding
    the targeted systems, networks, or applications. This type of testing really focuses
    on the first phase of penetration testing—reconnaissance. The more a pen tester
    can gain information about a target organization, the better the results will
    be. In this type of test, the pen tester is not provided with any architectural
    diagrams, layouts of the network, or any source code files.
  prefs: []
  type: TYPE_NORMAL
- en: Gray box penetration test
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A **gray box penetration test** is the halfway point between the white box and
    black box test. In a typical gray box test, the pen tester is provided with some knowledge
    of the applications, systems, or networks. Because of its nature, this type of
    test is quite efficient and more focused on an organization that has a deadline
    in place. Using the information provided by the client, the pen tester can focus
    on the systems with greater risks and save a lot of time performing their own
    recon.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have a clear understanding of the types of pen tests that can be
    done, let's look at the stages of a penetration test.
  prefs: []
  type: TYPE_NORMAL
- en: Stages of penetration testing
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To have a better understanding of penetration testing, let''s go through the
    stages of the process:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Stage 1: Reconnaissance **'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Stage 2: Enumeration**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Stage 3: Vulnerability assessment and analysis**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Stage 4: Exploitation (includes the post-exploitation period)**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Stage 5: Reporting**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'This can be seen in the following diagram:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/34f2350e-4092-4606-83d9-57a2bb08e433.png)'
  prefs: []
  type: TYPE_IMG
- en: Each and every stage has its own set of tools and techniques that can be used
    to perform the testing efficiently.
  prefs: []
  type: TYPE_NORMAL
- en: Reconnaissance and information gathering
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Reconnaissance is the very first stage of performing a penetration test. In
    this stage, a pen tester will try to identify the system or application in question
    and find as much information as they can about it. This is the most crucial stage
    of testing as this step defines the attack surface. In white box testing, the
    recon may not be important because all the information regarding the in-scope
    target is already provided by the client.
  prefs: []
  type: TYPE_NORMAL
- en: The black box test heavily relies on this stage as no information is given to
    the tester. In the context of a web application penetration test, we will be focusing
    on identifying the technology used by the web application, the domain/subdomain
    information, the HTTP protocol recon and enumeration, and any other details that
    could help us increase our efficiency. The scope for the target and the goal are
    generally defined at this stage.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is the list of tools that can be used to perform recon on a web
    application:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Identifying applications running on a ****nonstandard port (user-defined
    custom ports)**: Amap, Nmap, and so on'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Identifying the DNS and subdomains**: dnsenum, dnsmap, dnswalk, dnsrecon,
    dnstracer, Fierce, dnscan, Sublist3r, and so on'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Identifying technological platforms**: BlindElephant, Wappalyzer, WhatWeb,
    and so on'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Identifying content management systems**: WPScan, Joomscan, CMScan, Drupscan,
    and so on'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Now, let's look at enumeration.
  prefs: []
  type: TYPE_NORMAL
- en: Enumeration
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the enumeration stage, each and every application, system, or network identified
    in the previous stage (recon) will be scanned for different attack surfaces—for
    example, files and directory enumeration in the case of a web application, and
    ports and services in the case of a network device. This stage will help the tester
    to identify the attack vectors. An attack vector is a path or method for the attacker
    to gain access or penetrate the target system; in this case, the pen tester. The
    most common attack vectors used are phishing emails, malware, and unpatched vulnerabilities.
  prefs: []
  type: TYPE_NORMAL
- en: A pen tester can perform file and directory enumeration, HTTP method enumerations,
    host enumeration, and a few other enumeration methods to find an insertion point
    where vulnerabilities might exist. In a white box test, this stage doesn't really
    play an important role as all the information and details are already given to
    the tester, but it doesn't mean that you should not go through with this stage.
    It's always a good practice to perform enumeration and scanning, even when all
    the details are provided. This will help the tester to find obsolete attack paths
    that are not supported by the application but may help the tester to penetrate
    the network.
  prefs: []
  type: TYPE_NORMAL
- en: This stage is very crucial for the black box and gray box test as all the information
    that was retrieved by performing reconnaissance on the target system or application
    is identified by the pen tester. Enumeration could become a tedious process if
    done manually, so there are publicly available tools and some Metasploit modules
    that can be used to enumerate applications quickly.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is a list of tools that can be used to perform enumeration on
    a web application:'
  prefs: []
  type: TYPE_NORMAL
- en: '**F****iles and directory enumeration**: Dirsearch, dirb, dirbuster, Metasploit
    Framework, BurpSuite, gobuster, and so on'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**HTTP protocol supported methods enumeration**: Nmap, BurpSuite, Metasploit
    Framework, wfuzz, and so on'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Testing for r****ate limiting**: BurpSuite, ffuf, wfuzz, and so on'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let's now look at vulnerability assessment.
  prefs: []
  type: TYPE_NORMAL
- en: Vulnerability assessment and analysis
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Once we have identified an attack vector, we need to perform vulnerability scanning,
    which occurs in this stage of penetration testing. A vulnerability assessment
    is done on the web application to identify vulnerabilities on a web page, directory,
    HTTP protocol method, HTTP headers, and so on. The Scanning can be done using
    publicly available tools or paid-for licensed tools. All types of testing—white
    box, black box, and gray box— rely heavily on this stage.
  prefs: []
  type: TYPE_NORMAL
- en: Once a vulnerability scan has been done, we need to assess and analyze each
    vulnerability that is found and then filter out the false positives. Filtering
    out the false positives helps the pen tester to work on the vulnerabilities that
    actually exist and not the ones that were found because of time delay or the scanner's
    error. All the vulnerability filtration happens at this stage.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is the list of tools that can be used to perform vulnerability
    assessment and scanning on a web application:'
  prefs: []
  type: TYPE_NORMAL
- en: '**System and network vulnerability assessment**: Nessus, OpenVAS, and so on'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Web application vulnerability assessment**: Nikto, Acunetix, BurpSuite, Nessus,
    and so on'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Exploitation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The exploitation stage is the second most crucial stage after the reconnaissance
    stage. This stage proves whether a certain vulnerability found in the previous
    stage is exploitable. A pen tester can always identify the success of penetration
    testing projects if they can exploit the vulnerabilities that are found. Exploitation
    can be done automatically using certain tools, such as Metasploit Framework and
    Canvas. This is because we don't know how a certain web application or system
    will behave when we use our payloads.
  prefs: []
  type: TYPE_NORMAL
- en: Generally, in all types of tests, we need to confirm from the client whether
    we are authorized to perform memory-based exploitation, such as exploiting buffer/heap
    overflows and running memory corruption exploits. The advantage of doing this
    is that we can have access to the target system by running a specific exploit
    (this only works if the target system is vulnerable to this specific exploit).
    The issue with using such exploits is that the system/server/web application may
    crash, which could cause a business continuity issue.
  prefs: []
  type: TYPE_NORMAL
- en: Once we have exploited a system or web application, we can either stop at that
    or we can perform post-exploitation work (if authorized by the client) to move
    inside the network (pivoting) and locate business-critical servers.
  prefs: []
  type: TYPE_NORMAL
- en: Please make sure that all the payloads, web shells, files, and scripts are uploaded
    to the target system for exploitation so that they can be cleaned up after taking
    proper **proof-of-concept** (**PoC**) screenshots. This should be done at all
    times; otherwise, a genuine attacker can find the web shells and easily use them
    to attack the organization.
  prefs: []
  type: TYPE_NORMAL
- en: Reporting
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The reporting stage is the final stage of the penetration testing process and
    involves reporting each and every vulnerability found on the target (in-scope).
    The reported vulnerabilities will be listed according to the severity level defined
    by the **Common Vulnerability Scoring System** (**CVSS**), which is a free and
    open standard that is used to assess the vulnerabilities.
  prefs: []
  type: TYPE_NORMAL
- en: As pen testers, we need to understand how important this stage really is for
    the client. All the work that has been done by the testers on the client system
    should be reported in a structured format. The report should include a short introduction
    to the test, the scope of work, the rules of engagement, a short and crisp summary,
    the vulnerabilities found, and the proof of concept for each vulnerability, with
    some recommendations and patching techniques from the reference links.
  prefs: []
  type: TYPE_NORMAL
- en: There are some publicly available tools, such as Serpico, Magic Tree, BurpSuite,
    and Acunetix that can be used to ease the process of reporting. As this is an
    important stage of pen testing, all the details that were found during the test
    should be included in the report.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can provide two different kinds of report: an **executive report** for management
    and a **technical report** for the technical team in place. This could help both
    the management and the technical team of an organization to understand and fix
    the vulnerabilities found by the penetration testers.'
  prefs: []
  type: TYPE_NORMAL
- en: Important terminologies
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now that we are familiar with the standards, let''s now cover the important
    terminology that we will be using a lot in the upcoming chapters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Vulnerability**: A weakness in a system that may allow an attacker to gain
    unauthorized access to it.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Spoofing**: A situation where an individual or program successfully masks
    data as something else in order to obtain an unlawful advantage.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Exploit**: A piece of code, a program, a method, or a sequence of commands
    that takes advantage of a vulnerability to gain unauthorized access to a system/application.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Payload**: The actual code that is executed on the system after/during exploitation
    to perform the desired task.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Risk**: Anything that can affect the confidentiality, integrity, and availability
    of data. Unpatched software, misconfigured servers, unsafe internet surfing habits,
    and so on all contribute to risk.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Threat**: Anything that may have the potential to cause serious harm to a
    computer system, network, or application.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Black box**: A method of testing during which the tester has no information
    about the internal structure or functioning of a system.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**White box**: A method of testing during which the tester has complete knowledge
    of the internal structure and functioning of a system.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Bug bounty**: A bug bounty program is a deal that is offered by many websites
    and developers that allows individuals to be honored and rewarded for reporting
    bugs, particularly those linked to exploits and vulnerabilities.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**SAST**: **Static application security testing** (**SAST**) is a form of security
    testing that relies on the inspection of an application''s source code.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**DAST**: **Dynamic application security testing** (**DAST**) is a technique
    that is used to detect security vulnerabilities in an application in its running
    state.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Fuzzing**: An automated testing technique in which invalid, unexpected, or
    random data is provided as input to an application.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Now that we are aware of this important terminology, let's go ahead and learn
    about testing methodologies.
  prefs: []
  type: TYPE_NORMAL
- en: Penetration testing methodologies
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As we all know, there are no official penetration testing standards defined;
    however, our security community has introduced a few standards for all security
    personnel to follow. Some of the commonly known standards are the **Open Source
    Security Testing Methodology Manual** (**OSSTMM**), the **Penetration Testing
    Execution Standard** (**PTES**), and the **Information Systems Security Assessment
    Framework** (**ISSAF**). Most of them follow the same methodology, but their phases
    have been named differently. We will take a look at each of them in the following
    sections and cover PTES in detail.
  prefs: []
  type: TYPE_NORMAL
- en: Open Source Security Testing Methodology Manual (OSSTMM)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The definition of the OSSTMM is mentioned on their official website, at [https://www.isecom.org/OSSTMM.3.pdf](https://www.isecom.org/OSSTMM.3.pdf):'
  prefs: []
  type: TYPE_NORMAL
- en: It is a peer-reviewed manual of security testing and analysis that results in
    verified facts. These facts provide actionable information that can measurably
    improve your operational security.
  prefs: []
  type: TYPE_NORMAL
- en: Using the OSSTMM, an audit will provide a precise estimation of security at
    an operational level that clears out assumptions and unreliable evidence. It is
    used for thorough security testing and is designed to be consistent and repeatable.
    As an open source project, it is open to contributions from all security testers,
    encouraging increasingly accurate, actionable, and productive security tests.
  prefs: []
  type: TYPE_NORMAL
- en: 'OSSTMM includes the following key sections:'
  prefs: []
  type: TYPE_NORMAL
- en: Operational security metrics
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Trust analysis
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Human security testing
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Physical security testing
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Wireless security testing
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Telecommunications security testing
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Data network security testing
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Compliance regulations
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Reporting with the **Security Test Audit Report** (**STAR**)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Operational security metrics
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This part of the OSSTMM section deals with what needs to be protected and how
    much the attack surface is exposed. This can be measured by creating an RAV (an
    unbiased factual description of the attack surface).
  prefs: []
  type: TYPE_NORMAL
- en: Trust analysis
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In operational security, trust is measured as the interactions between targets
    within the scope that can be exploited by any person with malicious intent. To
    quantify trust, we need to understand and perform analysis to make more rational
    and logical decisions.
  prefs: []
  type: TYPE_NORMAL
- en: Human security testing
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Human Security** (**HUMSEC**) is a subsection of **Physical Security** (**PHYSSEC**)
    and incorporates **Psychological Operations** (**PSYOPS**). Testing this aspect
    of security requires communication with individuals who have physical access to
    the protected assets—for example, a gatekeeper.'
  prefs: []
  type: TYPE_NORMAL
- en: Physical security testing
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Physical Security** (**PHYSSEC**) refers to material security inside the
    physical domain. Testing this channel requires noncommunicative interaction with
    barriers and humans (gatekeepers) placed within the assets.'
  prefs: []
  type: TYPE_NORMAL
- en: Wireless security testing
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Spectrum Security** (**SPECSEC**) is the security classification that includes
    **Electronics Security** (**ELSEC**), **Signals Security** (**SIGSEC**), and **Emanations
    Security** (**EMSEC**). Testing this channel requires the analyst to be within
    the vicinity of the target.'
  prefs: []
  type: TYPE_NORMAL
- en: Telecommunications security testing
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Telecommunications Security** is a subset of ELSEC, which describes the organization''s
    telecommunication over wires. Testing this channel covers the interaction between
    the analyst and the targets.'
  prefs: []
  type: TYPE_NORMAL
- en: Data network security testing
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Tests regarding the **Data Network Security** (Communications Security [**COMSEC**])
    aspect of security requires interaction with the individuals who have access to
    the operational data that is used to control access to the property.
  prefs: []
  type: TYPE_NORMAL
- en: Compliance regulations
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The kind of compliance required depends on the locale and currently ruling government,
    industry and business types, and supporting legislation. In a nutshell, compliance
    is a set of general policies that are defined by the legislation or the industry,
    and these policies are compulsory.
  prefs: []
  type: TYPE_NORMAL
- en: Reporting with the STAR
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The purpose of a **Security Test Audit Report** (**STAR**) is to serve as an
    executive summary, stating the attack surface of the targets tested within a particular
    scope.
  prefs: []
  type: TYPE_NORMAL
- en: OSSTMM test types
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'OSSTMM divides the testing types into six broad categories based on the amount
    of information known to the tester:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Blind**:In this test, the analyst has no knowledge of the target, but the
    target knows about the audit and has all the details of the analyst. This can
    be considered a test of the analyst''s knowledge.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Double-Blind**:In this test, the analyst has no knowledge of the target,
    its defenses, assets, and so on. The target is also not notified of the audit.
    This test is used to check the knowledge and skills of the analyst as well as
    the preparedness of the target against unknown threats. This is also known as
    a black box test.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Gray Box**:In this test, the analyst has limited knowledge of the defenses
    of the target, but has complete knowledge of the assets and workings of the target.
    The target, in this case, is fully prepared for the audit and knows its full details.
    This test is also referred to as a **Vulnerability Test**.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Double Gray Box**:This is also known as the white box test. The target has
    advance knowledge of the scope and timeframe but has no knowledge of the payloads
    and test vectors.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Tandem**:This is also referred to as an in-house audit or crystal ball test.
    In this test, both the target and the analyst know the full details of the audit,
    but this test does not check the preparedness of the target against unknown variables
    or vectors.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Reversal**:In this test, an attacker engages with full knowledge of its target''s
    processes and operational security, but the target doesn''t know anything about
    when or how the audit will happen. This is also referred to as a red team exercise.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Here are these types represented in a graph:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/7cbe0d07-7c6c-4846-a8b5-9ddda23c776e.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Source: https://www.isecom.org/OSSTMM.3.pdf'
  prefs: []
  type: TYPE_NORMAL
- en: License: https://creativecommons.org/licenses/by/3.0/
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have read through the different OSSTMM test types, let's look at
    ISSAF.
  prefs: []
  type: TYPE_NORMAL
- en: Information Systems Security Assessment Framework (ISSAF)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The ISSAF is not very active, but the guide they have provided is quite comprehensive.
    It aims to evaluate information security policy and an organization's compliance
    with IT industry standards, laws, and regulatory requirements. The current version
    of ISSAF is 0.2.
  prefs: []
  type: TYPE_NORMAL
- en: 'It covers the following stages:'
  prefs: []
  type: TYPE_NORMAL
- en: Project management
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Guidelines and best practices—pre-assessment, assessment, and post-assessment
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Assessment methodology
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Review of information security policy and security organization
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Evaluation of risk assessment methodology
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical control assessment
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical control assessment—methodology
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Password security
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Password cracking strategies
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Unix /Linux system security assessment
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Windows system security assessment
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Novell netware security assessment
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Database security assessment
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Wireless security assessment
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Switch security assessment
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Router security assessment
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Firewall security assessment
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Intrusion detection system security assessment
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: VPN security assessment
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Anti-virus system security assessment and management strategy
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Web application security assessment
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Storage area network** (**SAN**) security'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Internet user security
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: As 400 security
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Source code auditing
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Binary auditing
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Social engineering
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Physical security assessment
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Incident analysis
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Review of logging/monitoring and auditing processes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Business continuity planning and disaster recovery
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Security awareness and training
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Outsourcing security concerns
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Knowledge base
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Legal aspects of security assessment projects
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Non-disclosure agreement** (**NDA**)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Security assessment contract
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Request for Proposal Template
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Desktop security checklist—windows
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Linux security checklist
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Solaris operating system security checklist
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Default ports—firewall
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Default ports—IDS/IPS
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Penetration Testing Execution Standard (PTES)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This standard is the most widely used standard and covers almost everything
    related to the pen test.
  prefs: []
  type: TYPE_NORMAL
- en: 'PTES is divided into seven phases:'
  prefs: []
  type: TYPE_NORMAL
- en: Pre-engagement interactions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Intelligence gathering
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Threat modeling
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Vulnerability analysis
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Exploitation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Post exploitation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Reporting
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let’s take a brief look at what each of these phases involves.
  prefs: []
  type: TYPE_NORMAL
- en: Pre-engagement interactions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Pre-engagement interactions are carried out before an activity kicks off, such
    as defining the scope of the activity, which usually involves mapping the network
    IPs, web applications, wireless networks, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: Once the scoping is done, lines of communication are established across both
    the vendors and the incident reporting process is finalized. These interactions
    also include status updates, calls, legal processes, and the start and end date
    of the project.
  prefs: []
  type: TYPE_NORMAL
- en: Intelligence gathering
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Intelligence gathering is a process that is used to gather as much information
    as possible on the target. This is the most critical part of pen testing as the
    more information we have, the more attack vectors we can use to perform the activity.
    In case of a white box activity, all this information is already provided to the
    testing team.
  prefs: []
  type: TYPE_NORMAL
- en: Threat modeling
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Threat modeling is a process by which potential threats can be identified and
    enumerated and mitigations can be prioritized. Threat modeling depends on the
    amount and quality of information gathered; with this information, the activity
    can be broken down into stages and then performed using automated tools and logical
    attacks.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is a mind map of a threat model:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/084e86a5-1f4f-40c5-a679-437d01a0d654.png)'
  prefs: []
  type: TYPE_IMG
- en: '(credits: [http://www.pentest-standard.org/index.php/Threat_Modelling ](http://www.pentest-standard.org/index.php/Threat_Modelling)'
  prefs: []
  type: TYPE_NORMAL
- en: 'License: [GNU Free Documentation License 1.2](http://www.gnu.org/licenses/old-licenses/fdl-1.2.txt) )'
  prefs: []
  type: TYPE_NORMAL
- en: Let's now have a look at vulnerability analysis.
  prefs: []
  type: TYPE_NORMAL
- en: Vulnerability analysis
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Vulnerability analysis is a process of discovering flaws that can be used by
    an attacker. These flaws can be anything ranging from open ports and service misconfigurations
    to an SQL injection. There are lots of tools available that can help in performing
    a vulnerability analysis—for example, Nmap, Acunetix, and Burp Suite. New tools
    are currently being released every few weeks.
  prefs: []
  type: TYPE_NORMAL
- en: Exploitation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Exploitation is the process of gaining access to the system by evading the protection
    mechanism based on the vulnerability assessment. Exploits can be public or zero-day.
  prefs: []
  type: TYPE_NORMAL
- en: Post-exploitation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Post-exploitation is the stage where the goal is to determine the criticality
    of the compromise and then maintain access for future use. This phase must always
    follow the rules of engagement that protect the client and protect ourselves (covering
    the tracks as per the requirements of the activity).
  prefs: []
  type: TYPE_NORMAL
- en: Reporting
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Reporting is one of the most important phases, as patching all the issues wholly
    depends on the details presented in your report. The report must contain three
    key elements:'
  prefs: []
  type: TYPE_NORMAL
- en: The criticality of the bug
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The steps needed to reproduce the bug
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Patch suggestions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'In summary, the pen test life cycle phases can be presented in the following
    way:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/40854475-a7b7-4ff9-b7a1-7559f670ffab.png)'
  prefs: []
  type: TYPE_IMG
- en: In the next section, we will talk about the Common Weakness Enumeration (CWE)
    and the two top CWEs.
  prefs: []
  type: TYPE_NORMAL
- en: Common Weakness Enumeration (CWE)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we will talk about the **Common Weakness Enumeration **(**CWE**).
    The CWE is a universal online dictionary of weaknesses that have been found in
    computer software. In this section, we will cover two well-known CWEs—the OWASP
    Top 10 and the SANS Top 25.
  prefs: []
  type: TYPE_NORMAL
- en: OWASP Top 10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Open Web Application Security Project** (**OWASP**) is an organization that
    provides computer and internet applications with impartial, realistic, and cost-effective
    information.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The current list for 2020 contains the following bugs:'
  prefs: []
  type: TYPE_NORMAL
- en: Injection
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Broken authentication
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Sensitive data exposure
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**XML external entities** (**XXE**)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Broken access control
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Security misconfigurations
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Cross-site scripting** (**XSS**)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Insecure deserialization
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using components with known vulnerabilities
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Insufficient logging and monitoring
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: SANS TOP 25
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The SANS Top 25 list is a collaboration between the SANS Institute, MITRE,
    and many top software security experts in the US and Europe. It consists of the
    following vulnerabilities:'
  prefs: []
  type: TYPE_NORMAL
- en: Improper neutralization of special elements used in a SQL command ('SQL injection')
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Improper neutralization of special elements used in an OS command ('OS command
    injection')
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Buffer copy without checking the size of the input ('classic buffer overflow')
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Improper neutralization of the input during web page generation ('cross-site
    scripting')
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Missing authentication for a critical function
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Missing authorization
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use of hardcoded credentials
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Missing encryption of sensitive data
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Unrestricted upload of a file of a dangerous type
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Reliance on untrusted inputs in a security decision
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Execution with unnecessary privileges
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Cross-site request forgery** (**CSRF**)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Improper limitation of a pathname to a restricted directory ('path traversal')
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The downloading of code without an integrity check
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Incorrect authorization
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Inclusion of a functionality from an untrusted control sphere
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Incorrect permission assignment for a critical resource
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use of a potentially dangerous function
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use of a broken or risky cryptographic algorithm
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Incorrect calculation of buffer size
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Improper restriction of excessive authentication attempts
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: URL redirection to an untrusted site ('open redirect')
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Uncontrolled format string
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Integer overflow or wraparound
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use of a one-way hash without a salt
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We will cover some of these vulnerabilities in detail in later chapters of this
    book.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we started with the introduction to penetration testing and
    its types and stages. We covered the pen testing methodologies and life cycle
    and we looked at some important terminology. Then, we looked at the OWASP Top
    10 and SANS Top 25.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will learn about the essentials of Metasploit including
    the Metasploit framework, installation, and setup.
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Is there a database that maintains the **Common Weakness Enumeration** (**CWE**)
    list?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Where can I find the OWASP Top 10 and SANS Top 25 lists?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Are the tools required to perform a penetration test free?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How do the OSSTMM- and PTES-based penetration tests differ?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**The Institute for Security and Open Methodologies** (**ISECOM**): [http://www.isecom.org/](http://www.isecom.org/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The pen test standard website: [http://www.pentest-standard.org/index.php/Main_Page](http://www.pentest-standard.org/index.php/Main_Page)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
