- en: Java Standard and External Libraries
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Even the first program we wrote in this book used a library included in the
    JDK, called a standard library. It is not possible to write a non-trivial program
    without using the standard libraries. That is why a solid familiarity with such
    libraries is as vital for successful programming as the knowledge of the language
    itself.
  prefs: []
  type: TYPE_NORMAL
- en: There are also non-standard libraries, which are called external libraries or
    third-party libraries because they are not included in JDK distribution, but they
    are used almost as often. They have long become permanent members of any programmer's
    toolkit. Meanwhile, keeping track of all the functionality available in these
    libraries is not as easy as staying abreast with Java itself. That is because
    IDE gives you a hint about the language possibilities, but it cannot advise about
    the functionality of a package that's not been imported yet. The only package
    that is imported automatically and does not require importing is `java.lang`,
    and that will be the first we are going to overview in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: 'The topics discussed in this chapter are:'
  prefs: []
  type: TYPE_NORMAL
- en: What are standard and external libraries?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Java standard libraries overview
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Package `java.lang`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Package `java.util`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Packages `java.io` and `java.nio`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Packages `java.sql` and `javax.sql`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Package `java.net`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Package ``java.math``
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Packages `java.awt`, `javax.swing`, and `javafx`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Java external libraries overview
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Library `org.junit`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Library `org.mockito`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Libraries `org.log4j` and `org.slf4j`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Libraries `org.apache.commons`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Exercise – Using `java.time.LocalDateTime`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What are standard and external libraries?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A standard library (also called a class standard library) is a collection of
    classes and interfaces available for all implementations of the language. In simpler
    terms, this means that, it is a collection of `.class` files included in the JDK
    and ready to be used. Once you have installed Java, you get them as part of the
    installation and can start building your application code up using the classes
    of the standard library as building blocks that take care of a lot of low-level
    plumbing. The standard library's richness and ease of usage substantially contributed
    to Java's popularity.
  prefs: []
  type: TYPE_NORMAL
- en: These collections are organized by packages. That's why instead of saying Java
    standard library, which would be the correct way to refer to all these collections
    together, programmers call them Java standard libraries – because, in order to
    use them, you have to import the library packages as needed, so they are perceived
    as many libraries.
  prefs: []
  type: TYPE_NORMAL
- en: They are also standard because Maven adds them to the classpath automatically,
    so we do not need to list them in the `pom.xml` file as dependencies. And that
    is what separates standard libraries and external libraries; if you need to add
    a library (typically, a `.jar` file) as a dependency in the Maven configuration
    file `pom.xml`, this library is an external one, also called a third-party library.
    Otherwise, it is a standard library.
  prefs: []
  type: TYPE_NORMAL
- en: In the following sections, we will provide an overview for each category and
    look closer at a few of the most popular standard and external libraries.
  prefs: []
  type: TYPE_NORMAL
- en: Java standard libraries
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If you search "Java API" on the internet, you will find an online description
    of all the packages included in JDK. Some package names start with `java`. They
    are traditionally called core Java packages, while those that start with `javax`
    used to be called extensions. This was done so probably because the extensions
    were thought to be optional and maybe even released independently of JDK. There
    was also an attempt to promote former extension libraries to become a core package,
    but that would require the package's name to change from Java to Javax, which
    would have broken the already existing applications. So, the idea was abandoned,
    the extensions became as standard part of JDK as the core, and the distinction
    between core and extensions gradually disappeared.
  prefs: []
  type: TYPE_NORMAL
- en: That is why if you look at the official Java API on the Oracle website you will
    see listed as standard not only `java` and `javax` packages, but also `jdk`, `com.sun`,
    `org.xml`, and some other packages, too. These extra packages are primarily used
    by the tools or other specialized applications. In our book, we will concentrate
    mostly on the mainstream Java programming and talk only about `java` and `javax` packages.
  prefs: []
  type: TYPE_NORMAL
- en: java.lang
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This package is so fundamental for all the Java class libraries that it is
    not only not required to be listed in the Maven configuration `pom.xml` file as
    a dependency (all other packages of the Java standard library are not required
    to be listed as a dependency too), but its members are even not required to be
    imported in order to use them. Any member of any package, whether standard are
    not, has to be imported or used with its fully qualified name, except classes
    and interfaces of the `java.lang` package. The reason for that is that it contains
    the two most important and the most used classes of Java:'
  prefs: []
  type: TYPE_NORMAL
- en: '`Object`: The base class of any other Java class (see [Chapter 2](4eaa4fe6-9564-40ba-b799-7fdc2abb5039.xhtml), *Java
    Language Basics*)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Class`: Its instances carry metadata of every loaded class at runtime (see [Chapter
    11](e8c37d86-291d-4500-84ea-719683172477.xhtml), *JVM Processes and Garbage Collection*)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'In addition, the `java.lang` package includes:'
  prefs: []
  type: TYPE_NORMAL
- en: The classes `String`, `StringBuffer`, and `StringBuilders`, which support operations
    with type `String` (see [Chapter 15](42b614c0-4302-4b71-8a1d-fa74d2943a2a.xhtml),
    *Manage Objects, Strings, Time, and Random Numbers* for more details and examples
    of usage)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The wrapper classes of all primitive types: `Byte`, `Boolean`, `Short`, `Character`,
    `Integer`, `Long`, `Float`, and `Double` (see [Chapter 9](33ed1fb4-36e0-499b-8156-4d5e88a2c404.xhtml),
    *Operators, Expressions, and Statements* for more details about wrapper classes
    and their usage)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `Number` class, the base class for the numeral wrapper classes listed previously
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `System` class, which provides access to important system operations and
    the standard input and output (we have used the `System.out` object in every code
    example in this book)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `Runtime` class, which provides access to the execution environment
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `Thread` class and the `Runnable` interface, fundamental for creating Java
    threads
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `Iterable` interface used by the iteration statements (see [Chapter 9](33ed1fb4-36e0-499b-8156-4d5e88a2c404.xhtml),
    *Operators, Expressions, and Statements**)*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `Math` class, which provides methods for basic numeric operations
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `Throwable` class – the base class for all exceptions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The exception class `Error` and all its children, used to communicate system
    errors that should not be caught by an application
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `Exception` class and its many children, which represent checked exceptions (see [Chapter
    10](9b40994b-a83d-4b78-b7c2-695c2afcfaa9.xhtml), *Control Flow Statements*)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `RuntimeException` class and its many children, which represent unchecked
    exceptions, also called runtime exceptions (see [Chapter 10](9b40994b-a83d-4b78-b7c2-695c2afcfaa9.xhtml), *Control
    Flow Statements*)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `ClassLoader` class, which allows loading classes and can be used to build
    customized classloaders
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `Process` and `ProcessBuilder` classes, which allow creating external processes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Many other useful classes and interfaces
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: java.util
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This is another very commonly used package. Most of its content is dedicated
    to support collections:'
  prefs: []
  type: TYPE_NORMAL
- en: 'The `Collection` interface – the base interface of many collection interfaces.
    It contains all the basic methods necessary to manage collection elements: `size()`,
    `add()`, `remove()`, `contains()`, `iterator()`, `stream()`, and others. Notice
    that the `Collection` interface extends the `Iterable` interface and inherits
    the `iterator()` method from it. This means that any implementation of the `Collection`
    interface can be used in iteration statements.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Interfaces that extend the `Collection` interface: `List`, `Set`, `Queue`,
    `Deque`, and many others.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Many classes that implement the forementioned interfaces: `ArrayList`, `LinkedList`,
    `HashSet`, `AbstractQueue`, `ArrayDeque`, and others.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The `Map` interface and the classes that implement it: `HashMap`, `TreeMap`, and
    others.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `Collections` class, which provides many static methods for manipulating
    and converting collections.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Many other collection interfaces, classes, and the related utilities.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We will talk more about collections and see examples of their usage in [Chapter
    13](3d6ae5fa-f48e-44e2-ae03-62dae2f78401.xhtml), *Java Collections*.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `java.util` package also includes several other useful classes:'
  prefs: []
  type: TYPE_NORMAL
- en: The `Objects` class provides various objects-related utility methods, including
    null-safe `equals()` of two objects
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `Arrays` class contains more than 200 static methods to manipulate arrays
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `Formatter` class allows formatting of any primitive type, such as `String`,
    `Date`, and other types
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The classes `Optional`, `OptionalInt`, `OptionalLong`, and `OptionalDouble` ,
    which help avoid `NullPointerException` by wrapping the actual value, nullable
    or not
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `Properties` class helps to read and create key-value pairs used for configuration
    and similar purposes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `Random` class complements the `Math.random()` method by generating streams
    of pseudorandom numbers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `Stack` class allows creating a **last-in-first-out** (**LIFO**) stack of
    objects
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `StringTokeneizer` class breaks `String` objects into the tokens separated
    by the specified delimiter
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `StringJoiner` class constructs a sequence of characters separated by the
    specified delimiter and optionally surrounded by the specified prefix and suffix
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Many other useful utility classes, including internationalization support classes
    and base64 encoding and decoding
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: java.time
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'That is the main Java API for managing dates, times, instants, and durations.
    The package includes:'
  prefs: []
  type: TYPE_NORMAL
- en: enum `Month`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: enum `DayOfWeek`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `Clock` class, which instantly returns the current date and time using a
    time zone
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `Duration` and `Period` classes represent and compare amounts of time in
    different time units
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `LocalDate`, `LocalTime`, `LocalDateTime` classes represent dates and times
    without time zones
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `ZonedDateTime` class represents date-time with a time zone
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `ZoneId` class identifies a time zone such as America/Chicago
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Some other classes that support date and time manipulation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `java.time.format.DateTimeFormatter` class allows you to present date and
    time in accordance with **International Standards Organization** (**ISO**) formats
    and is based on patterns such as YYYY-MM-DD and others.
  prefs: []
  type: TYPE_NORMAL
- en: We will talk more about date and time processing and see code examples in [Chapter
    15](42b614c0-4302-4b71-8a1d-fa74d2943a2a.xhtml), *Manage Objects, Strings, Time,
    and Random Numbers*.
  prefs: []
  type: TYPE_NORMAL
- en: java.io and java.nio
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `java.io` and `java.nio` packages contain classes that support reading
    and writing data using streams, serialization, and the file system. The differences
    between these two packages are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`java.io` allows us to read/write data as they go without caching'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`java.nio` creates a buffer and allows the program to move back and forth in
    the buffer'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The class methods of `java.io` block the stream until all the data is read or
    written
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`java.nio` stands for a non-blocking style of the data reading and writing'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: java.sql and javax.sql
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'These two packages compose the **Java Database Connectivity** (**JDBC**) API,
    which allows accessing and processing data stored in a data source, typically
    a relational database. The package `javax.sql` complements the `java.sql` package
    by providing support for:'
  prefs: []
  type: TYPE_NORMAL
- en: '`DataSource` interface as an alternative to the `DriverManager`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Connection pooling and statement pooling
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Distributed transactions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Rowsets
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We will talk more about using these packages and see code examples in [Chapter
    16](d77f1f16-0aa6-4d13-b9a8-f2b6e195f0f1.xhtml), *Database Programming*.
  prefs: []
  type: TYPE_NORMAL
- en: java.net
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `java.net` package contains classes that support applications networking
    on two levels:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Low-level networking, based on:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: IP addresses
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Sockets, which are basic bidirectional data communication mechanisms
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Various network interfaces
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'High-level networking, based on:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Universal Resource Identifier** (**URI**)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Universal Resource Locator** (**URL**)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Connections to the resource pointed to by URLs
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: java.math
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This package complements Java primitive types and the wrapper classes of the `java.lang`
    package by allowing working with much bigger numbers using the classes `BigDecimal`
    and `BigInteger`.
  prefs: []
  type: TYPE_NORMAL
- en: java.awt,  javax.swing, and  javafx
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The first Java library that supported building a **Graphical User Interface**
    (**GUI**) for desktop applications was **Abstract Window Toolkit** (**AWT**) in
    the `java.awt` package. It provided an interface to the native system of the executing
    platform that allowed the creation and management of windows, layouts, and events.
    It also had the basic GUI widgets (like text fields, buttons, and menus), provided
    an access to the system tray, and allowed users to launch a web browser and email
    client from the Java code. Its heavy dependence on the native code made AWT-based
    GUI look different on different platforms.
  prefs: []
  type: TYPE_NORMAL
- en: In 1997, Sun Microsystems and Netscape Communication Corporation introduced
    Java Foundation Classes, later called Swing and were put in the package `javax.swing`.
    The GUI components built with Swing could emulate the look and feel of some native
    platforms but also allowed users to plug in a look and feel that did not depend
    on the platform it was running on. It expanded the list of widgets the GUI could
    have by adding tabbed panels, scroll panes, tables, and lists. Swing components
    are called lightweight because they do not depend on the native code and are fully
    implemented in Java.
  prefs: []
  type: TYPE_NORMAL
- en: In 2007, Sun Microsystems announced JavaFX, which has eventually become a software
    platform for creating and delivering desktop applications across many different
    devices that is intended to replace Swing as the standard GUI library for Java
    SE. It is located in the packages that start with `javafx` and supports all major
    desktop OS and multiple mobile OS systems, including Symbian OS, Windows Mobile,
    and some proprietary real-time OS.
  prefs: []
  type: TYPE_NORMAL
- en: JavaFX adds to the arsenal of a GUI developer the support of smooth animation,
    web views, audio and video playback, and styles based on **Cascading Style Sheets**
    (**CSS**). However, Swing has more components and third-party libraries, so using
    JavaFX may require creating custom components and plumbing that was implemented
    in Swing long time ago already. That's why, although JavaFX is recommended as
    the first choice for desktop GUI implementation, Swing will remain part of Java
    for the foreseeable future, according to the official response on the Oracle website
    ([http://www.oracle.com/technetwork/java/javafx/overview/faq-1446554.html#6](http://www.oracle.com/technetwork/java/javafx/overview/faq-1446554.html#6)).
    So, it is possible to continue using Swing, but, if possible, it's better to switch
    to JavaFX.
  prefs: []
  type: TYPE_NORMAL
- en: Java external libraries
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Various statistics include different names in the list of the 20 or 100 most
    used third-party libraries. In this section, we are going to discuss those of
    them that are included in most of these lists. All of them are open source projects.
  prefs: []
  type: TYPE_NORMAL
- en: org.junit
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'JUnit is an open source testing framework that has the root package name `org.junit`.
    It was used throughout this book in several of our code examples. As you could
    see, it is very easy to set up and use (we have described the steps in [Chapter
    4](64574f55-0e95-4eda-9ddb-b05da6c41747.xhtml), *Your First Java Project*):'
  prefs: []
  type: TYPE_NORMAL
- en: Add a dependency to the Maven configuration file `pom.xml`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Create a test manually or right-click on the class name you would like to test,
    select Go To, then Test, then Create New Test, and then check the methods of the
    class you would like to test
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Write code for the generated test methods with the annotation `@Test`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Add methods with the annotations `@Before` and `@After` if necessary
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A "unit" is a minimal piece of code that can be tested, thus the name. The best
    testing practices consider a method as a minimal testable unit. That's why the
    unit tests are usually test methods.
  prefs: []
  type: TYPE_NORMAL
- en: org.mockito
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: One of the problems a unit test often faces is the need to test a method that
    uses a third-party library, a data source, or a method of another class. While
    testing, you want to control all the inputs so that you can predict the expected
    results of the tested code exactly.  That is where the technique of simulating
    or mocking the behavior of the objects the tested code interacts with comes in
    handy.
  prefs: []
  type: TYPE_NORMAL
- en: 'The open source framework Mockito (root package name `org.mockito`) allows
    you to accomplish exactly that – the creation of mock objects. It is quite easy
    and straightforward to use. Here is one simple case:'
  prefs: []
  type: TYPE_NORMAL
- en: Add a dependency to the Maven configuration file `pom.xml`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Call the `mock()` method for the class you need to simulate: `SomelClass mo
    = Mockito.mock(SomeClass.class)`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Set the value you need to be returned from a method: `Mockito.when(mo.doSomething(10)).thenReturn(20)`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Now, pass the mocked object as a parameter into the method you are testing that
    calls the mocked method
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The mocked method returns the result you have predefined
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Mockito has certain limitations. For example, you cannot mock static methods
    and private methods. Otherwise, it is a great way to isolate the code you are
    testing by reliably predicting the results of the used methods. The framework's
    name and logo are based on the word *mojitos* – a type of drink.
  prefs: []
  type: TYPE_NORMAL
- en: org.apache.log4j and org.slf4j
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Throughout this book, we have used the `System.out` object to display an output
    of the intermediate and final results. In the real-life application, one can do
    it too and redirect the output to a file, for example, for later analysis. After
    doing it for some time, you will notice that you need more details about each
    output – the date and time of each statement, or the class name where this statement
    was generated, for example. As the code base grows, you will find that it would
    be nice to send output from different subsystems or packages to different files,
    or turn off some messages when everything works as expected and turn them back
    on when an issue has been detected and more detailed information about code behavior
    is needed.
  prefs: []
  type: TYPE_NORMAL
- en: It is possible to write your own program that accomplishes all that, but there
    are several frameworks that do it based on the settings in a configuration file,
    which you can change every time you need to change the messages behavior. Such
    messages are called application logging messages, or application log, or log messages,
    and the two most popular frameworks used for that are called `log4j` (pronounced
    as *LOG-FOUR-JAY*) and `slf4j` (pronounced as *S-L-F-FOUR-JAY*).
  prefs: []
  type: TYPE_NORMAL
- en: In fact, these two frameworks are not rivals. The `slf4j` is a facade that provides
    a unified access to an underlying actually logging framework – one of them can
    be `log4j` too. Such a facade is especially helpful during a library development
    when programmers do not know in advance what kind of logging framework will be
    used by the application that uses the library. By writing code using `slf4j`,
    programmers allow users to later configure it to use any logging system.
  prefs: []
  type: TYPE_NORMAL
- en: So, if your code is going to be used only by the application that your team
    develops and is going to support in production, using just `log4j` is quite enough.
    Otherwise, consider using `slf4j`.
  prefs: []
  type: TYPE_NORMAL
- en: And, as in the case of any third-party library, before you can use any of the
    logging frameworks, you have to add a corresponding dependency to the Maven configuration
    file `pom.xml`.
  prefs: []
  type: TYPE_NORMAL
- en: org.apache.commons
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous section, we talked about one package with the `org.apache` root
    name - the package `org.apache.log4j`.
  prefs: []
  type: TYPE_NORMAL
- en: 'The package `org.apache.commons` is another popular library, representing a
    project called Apache Commons that is maintained by open source community of programmers
    called Apache Software Foundation. This organization was formed from the Apache
    Group in 1999\. The Apache Group has grown around the development of Apache HTTP
    Server since 1993.  The Apache HTTP Server is an open source cross-platform web
    server that has remained the most popular since April 1996\. From a Wikipedia
    article:'
  prefs: []
  type: TYPE_NORMAL
- en: '"As of July 2016, it was estimated to serve 46% of all active websites and
    43% of the top million websites. The name "Apache" was chosen from respect for
    the Native American Apache Nation, well known for their superior skills in warfare
    strategy and their inexhaustible endurance. It also makes a pun on "a patchy web
    server"—a server made from a series of patches—but this was not its origin"'
  prefs: []
  type: TYPE_NORMAL
- en: 'The Apache Commons project has three parts:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Commons Sandbox**: A workspace for Java component development; you can contribute
    to the open source working there'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Commons Dormant**: A repository of components that are currently inactive; you
    can use the code there, but have to build the components yourselves since these
    components probably will not be released in the near future'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Commons Proper**: The reusable Java components, which compose the actual
    library `org.apache.commons`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'In the following subsections, we will discuss only four of Commons Proper''s
    most popular packages:'
  prefs: []
  type: TYPE_NORMAL
- en: '`org.apache.commons.io`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`org.apache.commons.lang`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`org.apache.commons.lang3`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`org.apache.commons.codec.binary`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There are, however, many more packages under `org.apache.commons` that contain
    thousands of useful classes that can easily be used and can help make your code
    elegant and efficient.
  prefs: []
  type: TYPE_NORMAL
- en: org.apache.commons.io
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'All classes of the `org.apache.commons.io` package are contained in the root
    package and five subpackages:'
  prefs: []
  type: TYPE_NORMAL
- en: 'The root package, `org.apache.commons.io`, contains utility classes with static
    methods to perform common tasks, like a popular `FileUtils` class, for example,
    that allows doing all possible operations with files one can ever need:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Writing to a file
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Reading from a file
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Make a directory, including parent directories
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Copying files and directories
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Deleting files and directories
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Converting to and from a URL
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Listing files and directories by filter and extension
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Comparing file content
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: File last changed date
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Calculating a checksum
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `org.apache.commons.io.input` package contains classes that support data input
    based on `InputStream` and `Reader` implementations, such as `XmlStreamReader`
    or `ReversedLinesFileReader`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `org.apache.commons.io.output` package contains classes that support data output
    based on `OutputStream` and `Writer` implementations, such as `XmlStreamWriter`
    or `StringBuilderWriter`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `org.apache.commons.io.filefilter` package contains classes that serve as file
    filters, such as `DirectoryFileFilter` or `RegexFileFilter`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `org.apache.commons.io.comparato` package contains various implementations
    of `java.util.Comparator` for files, such as `NameFileComparator`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `org.apache.commons.io.monitor` package provides a component for monitoring
    file system events (directory and file create, update, and delete events), such
    as `FileAlterationMonitor`, which implements `Runnable` and spawns a monitoring
    thread triggering any registered `FileAlterationObserver` at a specified interval
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: org.apache.commons.lang and lang3
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The package `org.apache.commons.lang3` is actually version 3 of the package
    `org.apache.commons.lang`. The decision to create a new package was forced by
    the fact that changes introduced in version 3 were backwardly incompatible. This
    means that existing applications that used the previous version of the `org.apache.commons.lang` package
    may stop working after the upgrade to version 3\. But, in the majority of mainstream
    programming, adding 3 to an import statement (as the way to migrate to the new
    version) will probably not break anything.
  prefs: []
  type: TYPE_NORMAL
- en: 'According to the documentation <q>"the package org.apache.commons.lang3 provides
    highly reusable static utility methods, chiefly concerned with adding value to
    the java.lang classes</q>.<q>"</q> Here are a few notable examples:'
  prefs: []
  type: TYPE_NORMAL
- en: The `ArrayUtils` class allows searching and manipulating arrays.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `ClassUtils` class provides some metadata about a class.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `ObjectUtils` class checks for `null` in an array of objects, compares objects,
    and calculates median and min/max of an array of objects in a null-safe manner.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `SystemUtils` class provides information about the execution environment.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `ThreadUtils` class finds information about currently running threads.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The `Validate` class validates individual values and collections: compares
    them, checks for `null`, matches, and performs many other validations.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `RandomStringUtils` class generates `String` objects from the characters
    of various character sets.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The `StringUtils` class is the favorite of many programmers. Here is the list
    of null-safe operations it provides:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`isEmpty`/`isBlank`: This checks if a `String` value contains text'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`trim`/`strip`: This removes leading and trailing whitespace'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`equals`/`compare`: This compares two strings null-safe'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`startsWith`: This checks if a `String` value starts with a certain prefix
    null-safe'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`endsWith`: This checks if a `String` value ends with a certain suffix null-safe'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`indexOf`/`lastIndexOf`/`contains`: This provides null-safe index-of checks'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`indexOfAny`/`lastIndexOfAny`/`indexOfAnyBut`/`lastIndexOfAnyBut`: This provides
    index-of any of a set of `String` values'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`containsOnly`/`containsNone`/`containsAny`: This checks if a `String` value
    contains only/none/any of certain characters'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`substring`/`left`/`right`/`mid`: This supports null-safe substring extractions'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`substringBefore`/`substringAfter`/`substringBetween`: This performs substring
    extraction relative to other strings'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`split`/`join`: This splits a `String` value into an array of substrings by
    certain delimiter and vice versa'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`remove`/`delete`: This removes part of a `String` value'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`replace`/`overlay`: This searches a `String` value and replaces one `String`
    value with another'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`chomp`/`chop`: This removes the last part of a `String` value'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`appendIfMissing`: This appends a suffix to the end of the `String` value if
    not present'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`prependIfMissing`: This prepends a prefix to the start of the `String` value
    if not present'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`leftPad`/`rightPad`/`center`/`repeat`: This pads a `String` value'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`upperCase`/`lowerCase`/`swapCase`/`capitalize`/`uncapitalize`: This changes
    the case of a `String` value'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`countMatches`: This counts the number of occurrences of one `String` value
    in another'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`isAlpha`/`isNumeric`/`isWhitespace`/`isAsciiPrintable`: This checks the characters
    in a `String` value'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`defaultString`: This protects against a `null` input of `String` value'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`rotate`: This rotates (circular shift) characters in a `String` value'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`reverse`/`reverseDelimited`: This reverses characters or delimited groups
    of characters in a `String` value'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`abbreviate`: This abbreviates a `String` value using an ellipsis or another
    given `String` value'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`difference`: This compares `String` values and reports their differences'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`levenshteinDistance`: The number of changes needed to change one `String`
    value to another'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: org.apache.commons.codec.binary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The content of this library is outside the scope of this introductory course.
    So, we will just mention that this library provides support for Base64, Base32,
    Binary, and Hexadecimal String encoding and decoding.
  prefs: []
  type: TYPE_NORMAL
- en: The encoding is necessary to make sure that the data you sent across different
    systems will not be changed on the way, due to the restrictions on the range of
    characters in different protocols. Besides, some systems interpret the sent data
    as control characters (a modem, for example).
  prefs: []
  type: TYPE_NORMAL
- en: Exercise – Comparing String.indexOf() and StringUtils.indexOf()
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: What is the difference between the `indexOf()` method of the `String` class
    and the `indexOf()` method of the `StringUtils` class?
  prefs: []
  type: TYPE_NORMAL
- en: Answer
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `indexOf()` method of the `String` class does not handle `null`. Here is
    some demo code:'
  prefs: []
  type: TYPE_NORMAL
- en: '```java'
  prefs: []
  type: TYPE_NORMAL
- en: String s = null;
  prefs: []
  type: TYPE_NORMAL
- en: int i = StringUtils.indexOf(s, "abc");     //return -1
  prefs: []
  type: TYPE_NORMAL
- en: s.indexOf("abc");                          //throws NullPointerException
  prefs: []
  type: TYPE_NORMAL
- en: '```'
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, the reader has learned about the content of Java standard libraries included
    in the JDK and some of the most popular external libraries or third-party libraries.
    In particular, we have looked closely into the standard packages `java.lang` and
    `java.util`; compared the packages `java.io` and `java.nio`, `java.sql` and `javax.sql`,
    `java.awt`, `javax.swing` and `javafx`; and reviewed the packages `java.net` and
    `java.math`.
  prefs: []
  type: TYPE_NORMAL
- en: 'We have also made an overview of such popular external libraries as `org.junit`, `org.mockito`, `org.apache.log4j`,
    `org.slf4j`, and several packages of the Apache Commons project: `org.apache.commons.io`, `org.apache.commons.lang`
    and `org.apache.commons.lang3`, and `org.apache.commons.codec.binary`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The next chapter will help the reader to become familiar with the most widely
    used Java classes in more detail. The code examples will illustrate the discussion
    of the functionality of the classes called collections: `List` and `ArrayList`, `Set`
    and `HashSet`, and `Map` and `HashMap`. We will also discuss the classes `Arrays`
    and `ArrayUtils`, `Objects` and `ObjectUtils`, `StringBuilder` and `StringBuffer`, `LocalDate`,
    `LocalTime`, and `LocalDateTime`.'
  prefs: []
  type: TYPE_NORMAL
