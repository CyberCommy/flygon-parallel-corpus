- en: Introduction to Node.js
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter is designed to cover a few fundamental concepts in Node.js, as
    we lay a foundation for our subsequent chapters on API development.
  prefs: []
  type: TYPE_NORMAL
- en: Let's start this first chapter with a quick dive into how Node.js works and
    where it's being used lately. We will then have a look at its module system and
    its asynchronous programming model. Let's get started.
  prefs: []
  type: TYPE_NORMAL
- en: 'By the end of this chapter, you will be able to:'
  prefs: []
  type: TYPE_NORMAL
- en: Describe the basics of how Node.js works
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: List the applications of Node.js in modern software development
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Describe the module system used by Node.js
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Implement basic modules for an application
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Explain the asynchronous programming basics in Node.js
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Implement a basic application using `async`/`await`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Basics of Node.js
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Node.js is an event-driven, server-side JavaScript environment. Node.js runs
    JS using the V8 engine developed by Google for use in their Chrome web browser.
    Leveraging V8 allows Node.js to provide a server-side runtime environment that
    compiles and executes JS at lightning speeds.
  prefs: []
  type: TYPE_NORMAL
- en: Node.js runs as a single-threaded process that acts upon *callbacks* and never
    blocks on the main thread, making it high-performing for web applications. A callback
    is basically a function that is passed to another function so that it can be called
    once that function is done. We will look into this in a later topic. This is known
    as the **single-threaded event loop model**. Other web technologies mainly follow
    the **multithreaded request-response** architecture.
  prefs: []
  type: TYPE_NORMAL
- en: The following diagram depicts the architecture of Node.js. As you can see, it's
    mostly C++ wrapped by a JavaScript layer. We will not go over the details of each
    component, since that is out of the scope of this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00005.gif)'
  prefs: []
  type: TYPE_IMG
- en: Node's goal is to offer an easy and safe way to build high-performance and scalable
    network applications in JavaScript.
  prefs: []
  type: TYPE_NORMAL
- en: Applications of Node.js
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Node.js has the following four major applications:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Creating REST APIs**: We are going to look into this more in subsequent chapters'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Creating real-time services**: Because of Node''s asynchronous event-driven
    programming, it is well-suited to *reactive* real-time services'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Building microservices**: Since Node.js has a very lean core, it is best
    suited to building microservices, since you will only add dependencies that you
    actually need for the microservices, as opposed to the glut that comes with other
    frameworks'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Tooling**: For example, DevOps automations, and so on'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Activity: Running Basic Node.js Code'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Before You Begin**'
  prefs: []
  type: TYPE_NORMAL
- en: Open the IDE and the Terminal to implement this solution.
  prefs: []
  type: TYPE_NORMAL
- en: '**Aim**'
  prefs: []
  type: TYPE_NORMAL
- en: Learn how to write a basic Node.js file and run it.
  prefs: []
  type: TYPE_NORMAL
- en: '**Scenario**'
  prefs: []
  type: TYPE_NORMAL
- en: You are writing a very basic mathematical library with handy mathematical functions.
  prefs: []
  type: TYPE_NORMAL
- en: '**Steps for Completion**'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create your project directory (folder), where all the code for this and other
    chapters will be kept. You can call it `beginning-nodejs` for brevity. Inside
    this directory, create another directory named `lesson-1`, and inside that, create
    another directory called `activity-a`. All this can be done using the following
    command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Inside `activity-a`, create a file using `touch maths.js` command.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Inside this file, create the following functions:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`add`: This takes any two numbers and returns the sum of both, for example, `add(2,
    5)` returns `7`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`sum`: Unlike `add`, takes any number of numbers and returns their sum, for
    example, `sum(10, 5, 6)` returns `21`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'After these functions, write the following code to act as tests for your code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Now, on the Terminal, change directory to `lesson-1`. That's where we will be
    running most of our code from for the whole chapter.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'To run the code, run the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: The `16` and `21` values should be printed out on the Terminal.
  prefs: []
  type: TYPE_NORMAL
- en: Even though you can configure the IDE so that Node.js code be run at the click
    of a button, it's strongly recommend that you run the code from the Terminal to
    appreciate how Node.js actually works.
  prefs: []
  type: TYPE_NORMAL
- en: For uniformity, if you are using a Windows machine, then run your commands from
    the Git Bash Terminal.
  prefs: []
  type: TYPE_NORMAL
- en: For the reference solution, use the `math.js` file at `Code/Lesson-1/activity-solutions/activity-a`.
  prefs: []
  type: TYPE_NORMAL
- en: The Module System
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let's have a look at Node's module system and the different categories of the
    Node.js modules.
  prefs: []
  type: TYPE_NORMAL
- en: Application Modularization
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Like most programming languages, Node.js uses modules as a way of organizing
    code. The module system allows you to organize your code, hide information, and
    only expose the public interface of a component using `module.exports`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Node.js uses the CommonJS specification for its module system:'
  prefs: []
  type: TYPE_NORMAL
- en: Each file is its own module, for instance, in the following example, `index.js`
    and `math.js` are both modules
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Each file has access to the current module definition using the `module` variable
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The export of the current module is determined by the `module.exports` variable
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: To import a module, use the globally available `require` function
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Let''s look at a simple example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: To call other functions such as `mul` and `div`, we'll use object destructuring
    as an alternative when requiring the module, for example, `const { add } = require('./math');`.
  prefs: []
  type: TYPE_NORMAL
- en: The code files for the section *The Module System* are placed at `Code/Lesson-1/b-module-system`.
  prefs: []
  type: TYPE_NORMAL
- en: Module Categories
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We can place Node.js modules into three categories:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Built-in (native) modules**: These are modules that come with Node.js itself;
    you don''t have to install them separately.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Third-party modules**: These are modules that are often installed from a
    package repository. npm is a commonly used package repository, but you can still
    host packages on GitHub, your own private server, and so on.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Local modules**: These are modules that you have created within your application,
    like the example given previously.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Built-In Modules
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'As mentioned earlier, these are modules that can be used straight-away without
    any further installation. All you need to do is to require them. There are quite
    a lot of them, but we will highlight a few that you are likely to come across
    when building web applications:'
  prefs: []
  type: TYPE_NORMAL
- en: '`assert`: Provides a set of assertion tests to be used during unit testing'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`buffer`: To handle binary data'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`child_process`: To run a child process'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`crypto`: To handle OpenSSL cryptographic functions'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`dns`: To do DNS lookups and name resolution functions'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`events`: To handle events'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`fs`: To handle the filesystem'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`http` or `https`: For creating HTTP(s) servers'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`stream`: To handle streaming data'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`util`: To access utility functions like deprecate (for marking functions as
    deprecated), format (for string formatting), inspect (for object debugging), and
    so on'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'For example, the following code reads the content of the `lesson-1/temp/sample.txt`
    file using the in-built `fs` module:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: The details of this code will be explained when we look at asynchronous programming
    later in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: npm – Third-Party Module Registry
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Node Package Manager** (**npm**) is the package manager for JavaScript and
    the world''s largest software registry, enabling developers to discover packages
    of reusable code.'
  prefs: []
  type: TYPE_NORMAL
- en: To install an npm package, you only need to run the command `npm install <package-name>`
    within your project directory. We are going to use this a lot in the next two
    chapters.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s look at a simple example. If we wanted to use a package (library) like
    `request` in our project, we could run the following command on our Terminal,
    within our project directory:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'To use it in our code, we require it, like any other module:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'More details about npm can be found here: [https://docs.npmjs.com/](https://docs.npmjs.com/).
    Recently, a new package manager was released called YARN ([https://docs.npmjs.com/](https://docs.npmjs.com/)),
    which is becoming increasingly popular.'
  prefs: []
  type: TYPE_NORMAL
- en: When you run the `npm install <module-name>` command on your project for the
    first time, the `node_modules` folder gets created at the root of your project.
  prefs: []
  type: TYPE_NORMAL
- en: Scanning for node_modules
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'It''s worth noting how Node.js goes about resolving a particular `required`
    module. For example, if a file `/home/tony/projects/foo.js` has a require call
    `require(''bar'')`, Node.js scans the filesystem for `node_modules` in the following
    order. The first `bar.js` that is found is returned:'
  prefs: []
  type: TYPE_NORMAL
- en: '`/home/tony/projects/node_modules/bar.js`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`/home/tony/node_modules/bar.js`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`/home/node_module/bar.js`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`/node_modules/bar.js`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Node.js looks for `node_moduels/bar` in the current folder followed by every
    parent folder until it reaches the root of the filesystem tree for the current
    file.
  prefs: []
  type: TYPE_NORMAL
- en: The module `foo/index.js` can be required as `foo`, without specifying `index`,
    and will be picked by default.
  prefs: []
  type: TYPE_NORMAL
- en: Handy npm Commands
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s dive a little deeper into npm, by looking at some of the handy npm commands
    that you will often use:'
  prefs: []
  type: TYPE_NORMAL
- en: '`npm init`: Initializes a Node.js project. This should be run at the root of
    your project and will create a respective `package.json` file. This file usually
    has the following parts (keys):'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`name`: Name of the project.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`version`: Version of the project.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`description`: Project description.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`main`: The entry-point to your project, the main file.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`scripts`: This will be a list of other keys whose values will be the scripts
    to be run, for example, `test`, `dev-server`. Therefore, to run this script, you
    will only need to type commands such as `npm run dev-server`, `npm run test`,
    and so on.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`dependencies`: List of third-party packages and their versions used by the
    project. Whenever you do `npm install <package-name> --save`, this list is automatically
    updated.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`devDependencies`: List of third-party packages that are not required for production,
    but only during development. This will usually include packages that help to automate
    your development workflow, for example, task runners like gulp.js. This list is
    automatically updated whenever you do `npm install <package-name> --save-dev`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`npm install`: This will install all the packages, as specified in the `package.json`
    file.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`npm install <package-name> <options>`:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: With the `--save` option, installs the package and saves the details in the
    `package.json file`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: With the `--save-dev` option, installs the package and saves the details in
    the `package.json`, under `devDependencies`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: With the `--global` option, installs the package globally in the whole system,
    not only in the current system. Due to permissions, this might require running
    the command with administrator rights, for example, `sudo npm install <package-name>
    --global`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`npm install <package-name>@<version>`, installs a specific version of a package.
    Usually, if a version is not specified, the latest version will be installed.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`npm list`: Lists the packages that have been installed for the project, reading
    from what is installed in `node_modules`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`npm uninstall <package-name>`: Removes an installed package.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`npm outdated`: Lists installed packages that are outdated, that is, newer
    versions have been released.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Local Modules
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We have already looked at how local modules are loaded from the previous example
    that had `math.js` and `index.js`.
  prefs: []
  type: TYPE_NORMAL
- en: Since **JavaScript Object Notation** (**JSON**) is such an important part of
    the web, Node.js has fully embraced it as a data format, even locally. You can
    load a JSON object from the local filesystem the same way you load a JavaScript
    module. During the module loading sequence, whenever a `file.js` is not found,
    Node.js looks for a `file.json`.
  prefs: []
  type: TYPE_NORMAL
- en: 'See the example files in `lesson-1/b-module-system/1-basics/load-json.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Here, you will notice that once *required*, the JSON file is transformed into
    a JavaScript object implicitly. Other languages will have you read the file and
    perhaps use a different mechanism to convert the content into a data structure
    such as a map, a dictionary, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: 'For local files, the extension is optional, but should there be a conflict,
    it might be necessary to specify the extension. For example, if we have both a
    `sample.js` and a `sample.json` file in the same folder, the `.js` file will be
    picked by default; it would be prudent to specify the extension, for example:
    `const config = require(''./config/sample.json'');`'
  prefs: []
  type: TYPE_NORMAL
- en: When you run `npm install`, without specifying the module to install, npm will
    install the list of packages specified (under `dependencies` and `devDependencies`
    in the `package.json` file in your project). If `package.json` does not exist,
    it will give an error indicating that no such file has been found.
  prefs: []
  type: TYPE_NORMAL
- en: 'Activity: Using a Third-Party Package for the Previous math.js Code'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Before You Begin**'
  prefs: []
  type: TYPE_NORMAL
- en: This activity will build upon the, *Running Basic Node.js* activity of this
    chapter.
  prefs: []
  type: TYPE_NORMAL
- en: '**Aim**'
  prefs: []
  type: TYPE_NORMAL
- en: If the argument is a single array, sum up the numbers, and if it's more than
    one array, first combine the arrays into one before summing up. We will use the
    `concat()` function from `lodash`, which is a third-party package that we will
    install.
  prefs: []
  type: TYPE_NORMAL
- en: '**Scenario**'
  prefs: []
  type: TYPE_NORMAL
- en: We want to create a new function, `sumArray`, which can sum up numbers from
    one or more arrays.
  prefs: []
  type: TYPE_NORMAL
- en: '**Steps for Completion**'
  prefs: []
  type: TYPE_NORMAL
- en: Inside `Lesson-1`, create another folder called `activity-b`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'On the Terminal, change directory to `activity-b` and run the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: This will take you to an interactive prompt; just press *Enter* all the way,
    leaving the answers as suggested defaults. The aim here is for us to get a `package.json`
    file, which will help us organize our installed packages.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Since we will be using `lodash`, let''s install it. Run the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Notice that we are adding the `--save` option on our command so that the package
    installed can be tracked in `package.json`. When you open the `package.json` file
    created in step 3, you will see an added dependencies key with the details.
  prefs: []
  type: TYPE_NORMAL
- en: Create a `math.js` file in the `activity-b` directory and copy the `math.js`
    code from *Activity*, *Running Basic Node.js* into this file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, add the `sumArray` function right after the `sum` function.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Start with requiring `lodash`, which we installed in step 4, since we are going
    to use it in the `sumArray` function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'The `sumArray` function should call the `sum` function to reuse our code. Hint:
    use the spread operator on the array. See the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: At the end of the file, export the three functions, `add`, `sum`, and `sumArray`
    with `module.exports`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the same `activity-b` folder, create a file, `index.js`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In `index.js` file, *require* `./math.js` and go ahead to use `sumArray`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the following code on the Terminal:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: You should see `21` and `30` printed out.
  prefs: []
  type: TYPE_NORMAL
- en: The solution files are placed at `Code/Lesson-1/activitysolutions/activity-b`.
  prefs: []
  type: TYPE_NORMAL
- en: Asynchronous Programming with Node.js
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let's have a look at asynchronous programming model that is at the heart of
    how Node.js works.
  prefs: []
  type: TYPE_NORMAL
- en: Callbacks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Callbacks are functions that are executed asynchronously, or at a later time.
    Instead of the code reading top to bottom procedurally, asynchronous programs
    may execute different functions at different times based on the order and speed
    of earlier functions.
  prefs: []
  type: TYPE_NORMAL
- en: Since JavaScript treats functions like any other object, we can pass a function
    as an argument in another function and alter execute that passed-in function or
    even return it to be executed later.
  prefs: []
  type: TYPE_NORMAL
- en: 'We saw such a function previously when we were looking at the `fs` module in
    *The Module System* section. Let''s revisit it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: The code files for *Asynchronous Programming with Node.js* are placed at `Code/Lesson-1/c-async-programming`.
  prefs: []
  type: TYPE_NORMAL
- en: On line 3, we use a variable part of the `globals`, `_ _dirname`, which basically
    gives us the absolute path of the directory (folder) in which our current file
    (`read-file.js`) is, from which we can access the `temp/sample.txt` file.
  prefs: []
  type: TYPE_NORMAL
- en: Our main point of discussion is the chunk of code between lines 5 and 8\. Just
    like most of the methods you will come across in Node.js, they mostly take in
    a callback function as the last argument.
  prefs: []
  type: TYPE_NORMAL
- en: Most callback functions will take in two parameters, the first being the error
    object and the second, the results. For the preceding case, if file reading is
    successful, the error object, `err`, will be null and the contents of the file
    will be returned in the data object.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s break down this code for it to make more sense:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, let''s look at the asynchronous part. Let''s add an extra line to the
    preceding code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'See what we get as a print out:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: How come `Print out last!` comes first? This is the whole essence of asynchronous
    programming. Node.js still runs on a single thread, line 10 executes in a non-blocking
    manner and moves on to the next line, which is `console.log('Print out last!')`.
    Since the previous line takes a long time, the next one will print first. Once
    the `readFile` process is done, it then prints out the content of file through
    the callback.
  prefs: []
  type: TYPE_NORMAL
- en: Promises
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Promises are an alternative to callbacks for delivering the results of an asynchronous
    computation. First, let's look at the basic structure of promises, before we briefly
    look at the advantages of using promises over normal callbacks.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s rewrite the code above with promises:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'This code can further be simplified by using the `util.promisify` function,
    which takes a function following the common Node.js callback style, that is, taking
    an `(err, value) => …` callback as the last argument and returning a version that
    returns promises:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: From what we have seen so far, promises provide a standard way of handling asynchronous
    code, making it a little more readable.
  prefs: []
  type: TYPE_NORMAL
- en: 'What if you had 10 files, and you wanted to read all of them? `Promise.all`
    comes to the rescue. `Promise.all` is a handy function that enables you to run
    asynchronous functions in parallel. Its input is an array of promises; its output
    is a single promise that is fulfilled with an array of the results:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: Async/Await
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This is one of the latest additions to Node.js, having been added early in 2017
    with version 7.6, providing an even better way of writing asynchronous code, making
    it look and behave a little more like synchronous code.
  prefs: []
  type: TYPE_NORMAL
- en: 'Going back to our file *reading* example, say you wanted to get the contents
    of two files and concatenate them in order. This is how you can achieve that with
    `async`/`await`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: In summary, any asynchronous function that returns a promise can be *awaited*.
  prefs: []
  type: TYPE_NORMAL
- en: 'Activity: Transforming a Text File Using an Async Function'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Before You Begin**'
  prefs: []
  type: TYPE_NORMAL
- en: You should have already gone through the previous activities.
  prefs: []
  type: TYPE_NORMAL
- en: '**Aim**'
  prefs: []
  type: TYPE_NORMAL
- en: Read the file (using `fs.readFile`), `in-file.txt`, properly case format the
    names (using the `lodash` function, `startCase`), then sort the names in alphabetical
    order and write them out to a separate file `out-file.txt` (using `fs.writeFile`).
  prefs: []
  type: TYPE_NORMAL
- en: '**Scenario**'
  prefs: []
  type: TYPE_NORMAL
- en: We have a file, `in-file.txt`, containing a list of peoples' names. Some of
    the names have not been properly case formatted, for example, `john doe` should
    be changed to `John Doe`.
  prefs: []
  type: TYPE_NORMAL
- en: '**Steps for Completion**'
  prefs: []
  type: TYPE_NORMAL
- en: In `Lesson-1`, create another folder called `activity-c`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'On the Terminal, change directory to `activity-c` and run the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: Just like in the previous activity, this will take you to an interactive prompt;
    just press *Enter* all the way, leaving the answers as suggested defaults. The
    aim here is for us to get a `package.json` file, which will help us organize our
    installed packages.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Since we will be using `lodash` here too, let's install it. Run, `npm install
    lodash --save`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Copy the `in-file.txt` file provided in the `student-files` directory into your
    `activity-c` directory.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In your `activity-c` directory, create a file called `index.js`, where you will
    write your code.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, go ahead and implement an `async` function `transformFile`, which will
    take the path to a file as an argument, transform it as described previously (under
    *Aim*), and write the output to an output file provided as a second parameter.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'On the Terminal, you should indicate when you are reading, writing, and done,
    for example:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`reading file: in-file.txt`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`writing file: out-file.txt`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`done`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You should read the quick reference documentation on `fs.writeFile` since we
    haven't used it yet. However, you should be able to see its similarity with `fs.readFile`,
    and convert it into a promise function, as we did previously.
  prefs: []
  type: TYPE_NORMAL
- en: The solution files are placed at `Code/Lesson-1/activitysolutions/activity-c`.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we went through a quick overview of Node.js, seeing how it
    looks under the hood.
  prefs: []
  type: TYPE_NORMAL
- en: We wrote basic Node.js code and ran it from the Terminal using the Node.js command.
  prefs: []
  type: TYPE_NORMAL
- en: We also looked at module system of Node.js, where we learnt about the three
    categories of Node.js modules, that is, in-built, third-party (installed from
    the npm registry), and local modules, and their examples. We also looked at how
    Node.js resolves a module name whenever you *require* it, by searching in the
    various directories.
  prefs: []
  type: TYPE_NORMAL
- en: 'We then finished off by looking at the asynchronous programming model that
    is at the heart of how Node.js works, and what actually makes Node.js tick. We
    looked at the three main ways you can write asynchronous code: using *callbacks*,
    *Promises*, and the'
  prefs: []
  type: TYPE_NORMAL
- en: new *async/await* paradigm.
  prefs: []
  type: TYPE_NORMAL
- en: The foundation is now laid for us to go ahead and implement our API using Node.js.
    Most of these concepts will crop up again as we build our API.
  prefs: []
  type: TYPE_NORMAL
