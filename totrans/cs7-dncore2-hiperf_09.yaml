- en: Monitoring Application Performance Using Tools
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Monitoring application performance is a general process in big organizations
    to continuously monitor and improve the application experience for their customers.
    This is an important factor that revolves around different tools and techniques
    to measure the application performance and make decisions quickly.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we will learn some key indicators that are recommended to monitor
    the .NET Core application as well as explore App Metrics to get the real-time
    analytics and telemetry information about the key indicators.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will look at the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Key metrics to monitor application performance
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Tools and techniques to measure application performance, which includes:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Exploring App Metrics
  prefs:
  - PREF_UL
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting up App Metrics used with ASP.NET Core applications
  prefs:
  - PREF_UL
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting up Grafana and using the App Metrics dashboard
  prefs:
  - PREF_UL
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting up the InfluxDB database and integrating it with the ASP.NET Core application
  prefs:
  - PREF_UL
  - PREF_UL
  type: TYPE_NORMAL
- en: Monitoring performance through the Grafana website
  prefs:
  - PREF_UL
  - PREF_UL
  type: TYPE_NORMAL
- en: To learn more about App Metrics or to contribute to the open source project,
    you can access the GitHub repository from the following link and see the complete
    documentation with some examples: [https://github.com/AppMetrics/AppMetrics](https://github.com/AppMetrics/AppMetrics).
  prefs: []
  type: TYPE_NORMAL
- en: Application performance key metrics
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The following are some key metrics to be considered for web-based applications.
  prefs: []
  type: TYPE_NORMAL
- en: Average response time
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In every web application, response time is the key metric to be considered when
    monitoring application performance. Response time is the total time taken by the
    server to process the request. It is a time which is calculated when the request
    is received by the server which the time server then takes to process it and return
    a response. It can be affected by network latency, active users, the number of
    active requests, and CPU and memory usage on the server. The average response
    time is the total average time of all the requests being processed by the server
    at a particular time.
  prefs: []
  type: TYPE_NORMAL
- en: Apdex scores
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Apdex is a user satisfaction score that can be categorized based on the performance
    of the application. The Apdex score can be categorized as satisfactory, tolerating,
    or frustrating.
  prefs: []
  type: TYPE_NORMAL
- en: Percentage of errors
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This is the total percentage of the errors being reported in a particular amount
    of time. The user gets an overview of the total percentage of errors the user
    came across and can rectify them immediately.
  prefs: []
  type: TYPE_NORMAL
- en: Request rate
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The request rate is a valuable metric used for scaling applications. If the
    request rate is high and the application's performance is not good, the application
    can be scaled out to support that number of requests. On the other hand, if the
    request rate is very low, that means there is an issue or that the number of active
    users are depleting and they are not using the application. In both cases, the
    decision can be taken abruptly to provide a consistent user experience.
  prefs: []
  type: TYPE_NORMAL
- en: Throughput/endpoints
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Throughput is the number of requests the application can handle for a given
    amount of time. Usually, in commercial applications, the number of requests are
    pretty high and throughput allows you to benchmark the number of responses the
    application can handle without affecting the performance.
  prefs: []
  type: TYPE_NORMAL
- en: CPU and memory usage
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: CPU and memory usage is another important metric, which is used to analyse the
    peak hours where CPU or memory usage was high so that you can investigate the
    root cause.
  prefs: []
  type: TYPE_NORMAL
- en: Tools and techniques to measure performance
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are various tools available on the market that can be used to measure
    and monitor application performance. In this section, we will focus on App Metrics
    and analyse HTTP traffic, errors, and network performance.
  prefs: []
  type: TYPE_NORMAL
- en: Introducing App Metrics
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: App Metrics is an open source tool that can be plug in with the ASP.NET Core
    applications. It provides real-time insights about how the application is performing
    and provides a complete overview of the application's health status. It provides
    metrics in a JSON format and integrates with the Grafana dashboards for visual
    reporting. App Metrics is based on .NET Standard and runs cross-platform. It provides
    various extensions and reporting dashboards that can run on Windows and Linux
    operating system as well.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up App Metrics with ASP.NET Core
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We can set up App Metrics in the ASP.NET Core application in three easy steps,
    which are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Install App Metrics.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'App Metrics can be installed as NuGet packages. Here are the two packages that
    can be added through NuGet in your .NET Core project:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Add App Metrics in `Program.cs`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add `UseMetrics` to `Program.cs` in the `BuildWebHost` method, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Add App Metrics in `Startup.cs`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Finally, we can add a metrics resource filter in the `ConfigureServices` method
    of the `Startup` class as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Run your application.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Build and run the application. We can test whether App Metrics is running well
    by using URLs, as shown in the following table. Just append the URL to the application''s
    root URL:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **URL** | **Description** |'
  prefs: []
  type: TYPE_TB
- en: '| `/metrics` | Shows metrics using the configured metrics formatter |'
  prefs: []
  type: TYPE_TB
- en: '| `/metrics-text` | Shows metrics using the configured text formatter |'
  prefs: []
  type: TYPE_TB
- en: '| `/env` | Shows environment information, which includes the operating system,
    machine name, assembly name, and version |'
  prefs: []
  type: TYPE_TB
- en: Appending `/metrics` or `/metrics-text` to the application's root URL gives
    complete information about application metrics. `/metrics` returns the JSON response
    that can be parsed and represented in a view with some custom parsing.
  prefs: []
  type: TYPE_NORMAL
- en: Tracking middleware
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: With App Metrics, we can manually define the typical web metrics which are essential
    to record telemetry information. However, for ASP.NET Core, there is a tracking
    middleware that can be used and configured in the project, which contains some
    built-in key metrics which are specific to the web application.
  prefs: []
  type: TYPE_NORMAL
- en: 'Metrics that are recorded by the Tracking middleware are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Apdex**: This is used to monitor the user''s satisfaction based on the overall
    performance of the application. Apdex is an open industry standard that measures
    the user''s satisfaction based on the application''s response time.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'We can configure the threshold of time, *T,* for each request cycle, and the
    metrics are calculated based on following conditions:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **User Satisfaction** | **Description** |'
  prefs: []
  type: TYPE_TB
- en: '| Satisfactory | If the response time is less than or equal to the threshold
    time (*T*) |'
  prefs: []
  type: TYPE_TB
- en: '| Tolerating | If the response time is between the threshold time (*T*) and
    *4* times that of the threshold time (*T*) in seconds |'
  prefs: []
  type: TYPE_TB
- en: '| Frustrating | If the response time is greater than *4* times that of the
    threshold time (*T*) |'
  prefs: []
  type: TYPE_TB
- en: '**Response times:** This provides the overall throughput of the request being
    processed by the application and the duration it takes per route within the application.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Active requests:** This provides the list of active requests which have been
    received on the server in a particular amount of time.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Errors:** This provides the aggregated results of errors in a percentage
    that includes the overall error request rate, the overall count of each uncaught
    exception type, the total number of error requests per HTTP status code, and so
    on.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**POST and PUT sizes:** This provides the request sizes for HTTP POST and PUT
    requests.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding tracking middleware
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We can add tracking middleware as a NuGet package as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Tracking middleware provides a set of middleware that is added to record telemetry
    for the specific metric. We can add the following middleware in the `Configure`
    method to measure performance metrics:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Alternatively, we can also use meta-pack middleware, which adds all the available
    tracking middleware so that we have information about all the different metrics
    which are in the preceding code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, we will add tracking middleware in our `ConfigureServices` method as
    follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'In the main `Program.cs` class, we will modify the `BuildWebHost` method and
    add the `UseMetricsWebTracking` method as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Setting up configuration
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Once the middleware is added, we need to set up the default threshold and other
    configuration values so that reporting can be generated accordingly. The web tracking
    properties can be configured in the `appsettings.json` file. Here is the content
    of the `appsettings.json` file that contains the `MetricWebTrackingOptions` JSON
    key:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: '`ApdexTrackingEnabled` is set to true so that the customer satisfaction report
    will be generated, and `ApdexTSeconds` is the threshold that decides whether the
    request response time was satisfactory, tolerating, or frustrating. `IgnoredHttpStatusCodes`
    contains the list of status codes that will be ignored if the response returns
    a `404` status. `IgnoredRoutesRegexPatterns` are used to ignore specific URIs
    that match the regular expression, and `OAuth2TrackingEnabled` can be set to monitor
    and record the metrics for each client and provide information specific to the
    request rate, error rate, and POST and PUT sizes for each client.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Run the application and do some navigation. Appending `/metrics-text` in your
    application URL will display the complete report in textual format. Here is the
    sample snapshot of what textual metrics looks like:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00112.gif)'
  prefs: []
  type: TYPE_IMG
- en: Adding visual reports
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are various extensions and reporting plugins available that provide a
    visual reporting dashboard. Some of them are *GrafanaCloud Hosted Metrics*, *InfluxDB*,
    *Prometheus*, *ElasticSearch*, *Graphite*, *HTTP*, *Console*, and *Text File*.
    In this chapter, we will configure the *InfluxDB* extension and see how visual
    reporting can be achieved.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up InfluxDB
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: InfluxDB is the open source time series database developed by Influx Data. It
    is written in the *Go* language and is widely used to store time series data for
    real-time analytics. Grafana is the server that provides reporting dashboards
    that can be viewed through a browser. InfluxDB can easily be imported as an extension
    in Grafana to display visual reporting from the InfluxDB database.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up the Windows subsystem for Linux
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we will set up InfluxDB on the Windows subsystem for the Linux
    operating system.
  prefs: []
  type: TYPE_NORMAL
- en: 'First of all, we need to enable the Windows subsystem for Linux by executing
    the following command from the PowerShell as an Administrator:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: After running the preceding command, restart your computer.
  prefs: []
  type: TYPE_NORMAL
- en: Next, we will install Linux distro from the Microsoft store. In our case, we
    will install Ubuntu from the Microsoft Store. Go to the Microsoft Store, search
    for Ubuntu, and install it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Once the installation is done, click on Launch:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00113.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: This will open up the console window, which will ask you to create a user account
    for Linux OS (Operating System).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Specify the username and password that will be used.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Run the following command to update Ubuntu to the latest stable version from
    the bash shell. To run bash, open the command prompt, write `bash`, and hit *Enter*:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00114.gif)'
  prefs: []
  type: TYPE_IMG
- en: Finally, it will ask you to create an Ubuntu username and password. Specify
    the username and password and hit enter.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Installing InfluxDB
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Here, we will go through some steps to install the InfluxDB database in Ubuntu:'
  prefs: []
  type: TYPE_NORMAL
- en: To set up InfluxDB, open a command prompt in Administrator mode and run the
    bash shell.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Execute the following commands to the InfluxDB data store on your local PC:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Install InfluxDB by executing the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Execute the following command to run InfluxDB:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Start the InfluxDB shell by running the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: It will open up the shell where database-specific commands can be executed.
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a database by executing the following command. Specify a meaningful
    name for the database. In our case, it is `appmetricsdb`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Installing Grafana
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Grafana is an open source tool used to display dashboards in a web interface.
    There are various dashboards available that can be imported from the Grafana website
    to display real-time analytics. Grafana can simply be downloaded as a zip file
    from [http://docs.grafana.org/installation/windows/](http://docs.grafana.org/installation/windows/).
    Once it is downloaded, we can start the Grafana server by clicking on the `grafana-server.exe` executable
    from the `bin` directory.
  prefs: []
  type: TYPE_NORMAL
- en: Grafana provides a website that listens on port *3000*. If the Grafana server
    is running, we can access the site by navigating to `http://localhost:3000`.
  prefs: []
  type: TYPE_NORMAL
- en: Adding the InfluxDB dashboard
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There is an out-of-the-box InfluxDB dashboard available in Grafana which can
    be imported from the following link: [https://grafana.com/dashboards/2125](https://grafana.com/dashboards/2125).
  prefs: []
  type: TYPE_NORMAL
- en: Copy the dashboard ID and use this to import it into the Grafana website.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can import the InfluxDB dashboard by going to the Manage option on the Grafana
    website, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00115.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'From the Manage option, click on the *+ Dashboard* button and hit the *New
    Dashboard* option. Clicking on Import Dashboard will lead to Grafana asking you
    for the dashboard ID:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00116.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Paste the dashboard ID (for example, `2125`) copied earlier into the box and
    hit *Tab*. The system will show the dashboard''s details, and clicking on the
    Import button will import it into the system:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00117.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Configuring InfluxDB
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We will now configure the InfluxDB dashboard and add a data source that connects
    to the database that we just created.
  prefs: []
  type: TYPE_NORMAL
- en: 'To proceed, we will go to the Data Sources section on the Grafana website and
    click on the *Add New Datasource* option. Here is the configuration that adds
    the data source for the InfluxDB database:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00118.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Modifying the Configure and ConfigureServices methods in Startup
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Up to now, we have set up Ubuntu and the InfluxDB database on our machine. We
    also set up the InfluxDB data source and added a dashboard through the Grafana
    website. Next, we will configure our ASP.NET Core web application to push real-time
    information to the InfluxDB database.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is the modified `ConfigureServices` method that initializes the `MetricsBuilder`
    to define the attribute related to the application name, environment, and connection
    details:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding code, we have set the application name `app` as the assembly
    name, and the environment `env` as the `stage`. `http://127.0.0.1:8086` is the
    URL of the InfluxDB server that listens for the telemetry being pushed by the
    application. `appmetricsdb` is the database that we created in the preceding section.
    Then, we added the `AddMetrics` middleware and specified the metrics containing
    the configuration. `AddMetricsTrackingMiddleware` is used to track the web telemetry
    information which is displayed on the dashboard, and `AddMetricsReportScheduled`
    is used to push the telemetry information to the database.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is the `Configure` method that contains `UseMetricsAllMiddleware` to use
    App Metrics. `UseMetricsAllMiddleware` adds all the middleware available in App
    Metrics:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'Rather than calling `UseAllMetricsMiddleware`, we can also add individual middleware
    explicitly based on the requirements. Here is the list of middleware that can
    be added:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: Testing the ASP.NET Core App and reporting on the Grafana dashboard
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To test the ASP.NET Core application and to see visual reporting on the Grafana
    dashboard, we will go through following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Start the Grafana server by going to `{installation_directory}\bin\grafana-server.exe`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Start bash from the command prompt and run the `sudo influx` command.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Start another bash from the command prompt and run the `sudo influx` command.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Run the ASP.NET Core application.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Access `http://localhost:3000` and click on the App Metrics dashboard.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'This will start gathering telemetry information and will display the performance
    metrics, as shown in the following screenshots:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The following graph shows the total throughput in **Request Per Minute** (**RPM**),
    error percentage, and active requests:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00119.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Here is the Apdex score colorizing the user satisfaction into three different
    colors, where red is frustrating, orange is tolerating, and green is satisfactory.
    The following graph shows the blue line being drawn on the green bar, which means
    that the application performance is satisfactory:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00120.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'The following snapshot shows the throughput graph for all the requests being
    made, and each request has been colorized with the different colors: red, orange,
    and green. In this case, there are two HTTP GET requests for the about and contact
    us pages:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00121.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Here is the response time graph showing the response time of both requests:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00122.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we have learned some key metrics which are essential for monitoring
    application performance. We explored and set up App Metrics, which is a free tool
    that runs cross-platform and provides a lot of extensions that can be added to
    achieve more reporting. We went through the step-by-step guide on how to configure
    and set up App Metrics and related components like InfluxDb and Grafana to store
    and view telemetry in the Grafana web-based tool and integrate it with ASP.NET
    Core application.
  prefs: []
  type: TYPE_NORMAL
