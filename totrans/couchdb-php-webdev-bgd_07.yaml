- en: Chapter 7. User Profiles and Modeling Posts
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: With the base of our application created, we have allowed users to sign up and
    log in to our application. This is a huge part of any application, but we are
    still missing the creation of content that we can connect to the user accounts.
    We'll go through all of it in this chapter!
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'In this chapter we will:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a user profile to publicly display a user's information
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Clean up the profile using Bootstrap
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Handle all kinds of exceptions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Discuss modeling of posts and relationships in CouchDB
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Create a form to create posts from the logged-in user's profile
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: With our road mapped out for us, let's move on to talk about the user profile!
  prefs: []
  type: TYPE_NORMAL
- en: User profile
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The main attraction of any social network is a user's profile; the user profile
    usually displays the basic information of a user and shows any content that they
    have created.
  prefs: []
  type: TYPE_NORMAL
- en: 'By the end of this section, our user profiles will work as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: If a visitor goes to `http://localhost/verge/user/johndoe`, our routing system
    will match it with the route `/user/:username`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `index.php` file will take `johndoe` as the value for `username`, and pass
    it to the `User` class in an attempt to find the user document with a matching
    ID
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If `johndoe` is found, `index.php` will display a profile with the information
    for `johndoe`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If `johndoe` is not found, the visitor will see a `404` error, meaning that
    the user with that username does not exist
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Finding a user with routes
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In order to find users, we'll first need to create a function that will take
    the username as a parameter and return a user object if it is a valid one.
  prefs: []
  type: TYPE_NORMAL
- en: Time for action — getting single user documents
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As you might remember, in [Chapter 3](ch03.html "Chapter 3. Getting Started
    with CouchDB and Futon"), *Getting Started with CouchDB and Futon*, we were able
    to retrieve a document from CouchDB just by passing the ID of the document we
    wanted. We are going to do the same thing this time to find a user's information
    using Sag. One important thing to note is that we'll have to make sure that when
    we look for users using their ID, we need to prepend it with the `org.couchdb.user:`
    namespace.
  prefs: []
  type: TYPE_NORMAL
- en: Let's start by opening `classes/user.php` and scrolling to the bottom.
  prefs: []
  type: TYPE_NORMAL
- en: Add a `public static` function called `get_by_username()`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: In order to find a user by ID, we need to allow our function to accept the parameter
    `$username`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Now, let's set the database to instantiate Bones and a proxy Sag. Remember,
    we're dealing with the `_users` database, so we'll need to log in with the `admin`
    privileges.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Now that we can connect to the `_users` database, let's issue a `get` call through
    Sag that will return a user by adding `org.couchdb.user:` to the passed username.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: What just happened?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We created a `public static` function called `get_by_username` that allows us
    to pass in `$username`. To actually get the document, we need to use our `ADMIN_USER`
    and `ADMIN_PASSWORD` constants to access the `_users` database. In order for us
    to return a user object, we needed to create a new user object called `$user`.
    We then used Sag's `get` call to identify the document by ID and return it as
    a `stdClass` object called `$document`. We then grabbed the values from the `document`
    variable and passed them into the corresponding values on the `$user` object.
    Finally, we returned the user document to wherever the function was called from.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have a function to handle the finding of a user by the username,
    let's create a route in `index.php` that will pass a username to this function.
  prefs: []
  type: TYPE_NORMAL
- en: Time for action — creating a route for user profiles
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We are going to create a route so that people can see a profile by going to
    a unique URL. This will be the first time that we'll really utilize our routing
    system's ability to handle route variables.
  prefs: []
  type: TYPE_NORMAL
- en: 'Open `index.php`, and create a `get` route for a user profile by entering the
    following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s use the route variable `:username` to tell us the username that we want
    to find; we''ll pass this to the `get_by_username` function we created in the
    `User` class. Finally, we''ll pass the returned `user` object to the view in the
    `user` variable:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Lastly, we'll render the `user/profile.php` view, which we will create shortly.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: What just happened?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We did a lot in just four lines of code! First, we defined the user profile
    route by using `route /user/:username`. Next, we created a piece of code that
    passes `:username` from the `route` variable to the `get_by_username` function
    in our `user` class. The `get_by_username` function will return an object containing
    the information of a user, and we sent that to our view using `$app->set('user')`.
    Finally, we rendered the user profile.
  prefs: []
  type: TYPE_NORMAL
- en: Let's go on to create the user profile so that we can see our hard work in action!
  prefs: []
  type: TYPE_NORMAL
- en: Time for action — creating the user profile
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We're going to clean up the `user` view a few times in this chapter. But, let's
    start by just dumping out all of the user document content into our view.
  prefs: []
  type: TYPE_NORMAL
- en: Create a view called `user/profile.php` inside the `views` directory in our
    `working` folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Make a simple header for the profile with the following HTML:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Since we don''t have much of a design yet, let''s just use `var_dump` to show
    all of the contents of the `User` document:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: What just happened?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We just created a very basic user profile with a header to tell us that this
    page is the user profile. Then, we used `var_dump` to display all of the contents
    of the `user` object. `var_dump` is a general PHP function that outputs structured
    information about a variable or object and is very useful when you just want to
    make sure that things are working properly.
  prefs: []
  type: TYPE_NORMAL
- en: Testing it out
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Now that we have a simple user profile setup, let's see how it turned out.
  prefs: []
  type: TYPE_NORMAL
- en: Open your browser, and go to `http://localhost/verge/user/johndoe`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Your browser will show you the following:![Testing it out](graphics/3586_07_005.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Not too shabby, but of course we'll need to clean up the format of this data
    shortly. But, for now, let's make sure to commit our changes to Git.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding your changes to Git
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In this section, we started to create a user profile and output a user's information
    directly from CouchDB. Let's add all of our changes to Git, so that we can track
    our progress.
  prefs: []
  type: TYPE_NORMAL
- en: Open Terminal.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Type the following command to change directories to our working directory.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: We only added one file, `views/user/profile.php`, so let's tell Git to add this
    file to source control.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Give `Git` a description of what we've done since our last commit.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Fixing some problems
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You may have already noticed that we ignored a potential issue with our user
    profiles, we aren't gracefully handling what happens when a user profile isn't
    found.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example:'
  prefs: []
  type: TYPE_NORMAL
- en: 'If you were to go to `http://localhost/verge/user/someone`, your browser would
    display this very unfriendly error message:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Fixing some problems](graphics/3586_07_010.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Finding errors
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In [Chapter 6](ch06.html "Chapter 6. Modeling Users"), we used the `tail` command
    through Terminal to look at Apache's error logs. We're going to do the same thing
    again. Let's take a look at the log from Apache and see if we can figure out what
    went wrong.
  prefs: []
  type: TYPE_NORMAL
- en: Time for action — examining Apache's log
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In [Chapter 6](ch06.html "Chapter 6. Modeling Users"), we tried to locate our
    Apache log first. By default, it is saved at `/private/var/log/apache2/error_log`.
    If in the previous chapter you found it was located somewhere else, you can find
    its location again by typing `grep ErrorLog /etc/apache2/httpd.conf`.
  prefs: []
  type: TYPE_NORMAL
- en: Let's find out what the problem was.
  prefs: []
  type: TYPE_NORMAL
- en: Open Terminal.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Retrieve the last few lines of the log by running the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: The log will show you a bunch of things, but the most important message is this
    one, that says `PHP Fatal error`. Yours might be slightly different, but the overall
    message is the same.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: What just happened?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We used a `tail` command to return the last few lines of the Apache log. If
    you look closely at the log, you''ll see the `CouchDB error`. To be more specific,
    the error is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: This message means that CouchDB isn't happy with what we are doing, and Sag
    is throwing an error in the form of a `SagCouchException`. In order for us to
    appropriately handle `SagCouchException`, we need to add some code to our call
    to Sag.
  prefs: []
  type: TYPE_NORMAL
- en: In the previous chapter, we fixed an error by checking for the status code and
    matching it with a resolution. We can keep doing this, but eventually errors are
    going to occur that we're not aware of. From here on out, when an unhandled exception
    occurs, we want to display a friendly error message so that we can debug it.
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, we will use Bones to help us show an exception page.
  prefs: []
  type: TYPE_NORMAL
- en: Handling 500 errors
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: What we're really looking to solve here is how we want to handle 500 errors
    in our application. **500 errors** refer to the HTTP status code `500`, which
    is an*"Internal* Server Error". Generally, this means that something happened,
    and we didn't handle it properly.
  prefs: []
  type: TYPE_NORMAL
- en: Time for action — handling 500 errors with Bones
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let's start by creating a simple view that will display errors to us.
  prefs: []
  type: TYPE_NORMAL
- en: Let's start by creating a new folder called `error` inside our `views` directory.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a new view called `500.php`, and place it into the `errors` folder (views/error/500.php).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following code to the `500.php` output information on the exception:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: Add a function called `error500` in `lib/bones.php` that will allow us to display
    500 errors easily around our application.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: What just happened?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We created a new folder in our `views` directory called `error`, which will
    house all of the error views that we'll use in our application. We then created
    a new view called `500.php` to display our exceptions in a nice and friendly way.
    Exceptions are a built-in class that Sag extends upon, using the `SagCouchException`
    class. With this, it's easy for us to talk directly to this exception class in
    our view. This `Exception` class has a lot of properties. But, in this application,
    we are just going to display the code, message, and the exception, represented
    in a string format. Lastly, we created a function in Bones to allow us to pass
    the exception in, so that we can display it in the view. In this function, we
    passed the exception to the `error/500` view, and then used `exit`, which tells
    PHP to stop doing anything else in our application. This stops our application
    from doing anything else because a problem occurred.
  prefs: []
  type: TYPE_NORMAL
- en: Time for action — handling exceptions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that we can handle exceptions, let's add some code to the `get_by_username`
    function, so that we can take a deeper look at our problem.
  prefs: []
  type: TYPE_NORMAL
- en: Let's open `classes/user.php`, and add a `try...catch` statement around our
    Sag call to make sure that we can handle any errors that occur.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: Now that we are catching errors, let's add in our `error500` function.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: While we are in `classes/user.php`, let's catch a few more possible exceptions.
    Let's start with the `public` function signup.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: Next, let's add to the `catch` statement in our public function login.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: What just happened?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Now that we can gracefully handle exceptions, we went through our `User` class
    and added the ability to throw a `500` error when something unexpected occurred.
    On calls where we are already expecting certain problems, we can use an `if...else`
    statement to trigger a `500` error if something unexpected happens.
  prefs: []
  type: TYPE_NORMAL
- en: Testing our exception handler
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Let's try again to see if we can get to the bottom of the exception.
  prefs: []
  type: TYPE_NORMAL
- en: Go to `http://localhost/verge/user/someone`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You will now see a much friendlier error page, which tells us the code, message,
    and the full error that you would see in the error logs.![Testing our exception
    handler](graphics/3586_07_015.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: It is much easier for us to figure out what's going on from this. While we are
    in the process of debugging our application, this page will be of great use to
    us to track down what errors are occurring.
  prefs: []
  type: TYPE_NORMAL
- en: By looking at this piece of code, we can tell that CouchDB is throwing us a
    `404` error. We might expect that this error would occur because we're looking
    for a user document that doesn't exist. Let's dig further into what a `404` error
    is and how we can handle it.
  prefs: []
  type: TYPE_NORMAL
- en: Showing 404 errors
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A `404` error refers to the HTTP status code `404`, meaning "Not Found". A `404`
    error usually occurs when you try to access something that doesn't exist, such
    as going to an incorrect URL. In our case, we are receiving a `404` error because
    we are trying to find a CouchDB document that doesn't exist.
  prefs: []
  type: TYPE_NORMAL
- en: 404 if user isn't found
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '`404` errors are a special kind of errors that we''ll see in different places
    around our application. Let''s create another error page that we can use whenever
    `404` errors occur.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Time for action : handling 404 errors with Bones'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let's create a view for `404` errors that we can use around our application.
  prefs: []
  type: TYPE_NORMAL
- en: Start by creating a new view in our `views/error/` directory called `404.php`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Let's add some very basic code to `404.php` that will inform the visitor that
    our application couldn't find the requested page.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: In order for us to render this view, let's add another function called `error404`
    into our `lib/bones.php` file. This function will nicely display `404` errors
    for us.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: What just happened?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We created a simple view, called `404.php`, that we can show any time a `404`
    error occurs in our application. We then created a simple function called `error404`
    in `lib/bones.php` that renders `error/404.php` and terminates the current script
    so no further actions occur.
  prefs: []
  type: TYPE_NORMAL
- en: Showing 404 errors for unknown users
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Now that we have our `404` error handler, let's display it when the `404` error
    occurs in the `get_by_username` function inside of `classes/user.php`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Open `classes/user.php`, and alter the `get_by_username` function to match
    the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: Hooking up 404 all around the site
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The interesting thing about `404` errors is that they can happen any time a
    visitor passes a route that Bones doesn't understand. So, let's add code right
    into Bones that will handle this for us.
  prefs: []
  type: TYPE_NORMAL
- en: Time for action — handling 404 errors with Bones
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let's add some simple code around `lib/bones.php` and `index.php` that will
    allow us to handle `404` errors.
  prefs: []
  type: TYPE_NORMAL
- en: Open `lib/bones.php`, and a create a function inside the `Bones` class called
    `resolve` that we can call at the end of our routes and determine if a route was
    ever found.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: Go to the top of `lib/bones.php`, and create a function called `resolve` outside
    the `Bones` class (such as `get, post, put`, or `delete)` that we can call outside
    anywhere.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: All that's left for us to do is add a line of code at the very bottom of `index.php`
    that can be called if no routes are found. As you add more routes, make sure that
    `resolve()` is always at the end of the file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: What just happened?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We created a function called `resolve` that is executed at the bottom of our
    `index.php` file after all of our routes. This function serves as a*"clean* up"
    function that will be executed if no routes match up. If no routes match, resolve
    will display a `404` error to the visitor and terminate the current script.
  prefs: []
  type: TYPE_NORMAL
- en: Testing it out
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Now that we're gracefully handling `404` errors, let's test it out and see what
    happens.
  prefs: []
  type: TYPE_NORMAL
- en: Open your browser, and go to `http://localhost/verge/user/anybody`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Your browser will show you the following:![Testing it out](graphics/3586_07_017.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Great! Our `User` class is forwarding us a `404` error because of the code we
    added in the `get_by_username` function.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Next, let's check that our `index.php` will forward us a `404` error if it can't
    find the requested route.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open your browser to `http://localhost/verge/somecrazyurl`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Your browser will display the following:![Testing it out](graphics/3586_07_018.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Perfect! Our `404` error handler is working exactly like we need it to. If we
    ever need to use it again, all we need to do is call `error404` in our `Bones`
    class, and we're all set!
  prefs: []
  type: TYPE_NORMAL
- en: Giving users a link to their profile
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In most social networks, once you are logged in, you are shown a link to see
    the currently logged in users' profiles. Let's open `view/layout.php` and add
    a `My Profile` link to our navigation.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: Creating a better profile with Bootstrap
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: It's starting to bug me that our profile isn't all that nicely put together,
    and we're going to need to add to this more later in the chapter. Let's prepare
    our user profile so that we can nicely show a user's information and posts.
  prefs: []
  type: TYPE_NORMAL
- en: Time for action — checking whether a user is currently logged in
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We'll need to be able to figure out if the profile a user is looking at is their
    own. So, let's add a variable to our view that tells us if that is the case.
  prefs: []
  type: TYPE_NORMAL
- en: Open `index.php`, and add a variable called `is_current_user` that will determine
    if the profile that you are viewing is equal to the currently logged-in user.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: Let's change the code in the header of `views/user/profile.php` so that we can
    output the user's full name as well as `This is you!`, if it's the current user's
    profile.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: What just happened?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We used a shorthand operation called `ternary`. A `ternary` operation is short
    hand for an `if-else` statement. In this case, we are saying that if the username
    passed from the route is equal to that of the currently logged-in user, then return
    `true`, otherwise return `false`. Then, we go into our profile and display `This
    is you!` if the `is_current_user` variable is set to `true`.
  prefs: []
  type: TYPE_NORMAL
- en: Cleaning up the profile's design
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Again, Bootstrap will come to the rescue by allowing us to clean up our profile
    with limited code.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s start by splitting our row `div` into two columns with the following
    code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: Let's output the user's information into the left column by adding more list
    items into the unordered list.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: Let's check out our new profile
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: With that, our new and improved profile has come to life! Let's check it out.
  prefs: []
  type: TYPE_NORMAL
- en: Open your browser to the URL of the `johndoe` user by going to `http://localhost/verge/user/johndoe`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Your browser will show you a nicely remodeled user profile.![Let's check out
    our new profile](graphics/3586_07_019.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, let's check to make sure our `$is_current_user` variable is working correctly
    too. To do that, log in with `johndoe` as the username, and go to `http://localhost/verge/user/johndoe`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Your browser will show you the user profile, along with a nice message telling
    you that this is your profile.![Let's check out our new profile](graphics/3586_07_020.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Awesome! Our profile is really starting to come together. This is a big landmark
    in our application. So, let's make sure we commit our changes to Git.
  prefs: []
  type: TYPE_NORMAL
- en: Adding your changes to Git
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: In this section, we added support to cleanly handle exceptions and also spruced
    up the user profile. Let's add all of our changes to Git so that we can track
    our progress.
  prefs: []
  type: TYPE_NORMAL
- en: Open Terminal.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Type the following command to change directories to our `working` directory:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: We added a few files in this section. So, let's add them all into source control.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: Give Git a description of what we've done since our last commit.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: Posts
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We have a placeholder for posts on our profile. But, let's get into filling
    it in with some real content. We are going to do this by allowing users to post
    small pieces of content and by having them tied to the user account.
  prefs: []
  type: TYPE_NORMAL
- en: Modeling Posts
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Let's talk through what needs to happen in order for us to save posts to CouchDB
    and relate them to a user. Before we get into how to do this with CouchDB, let's
    try to bring it into perspective by looking at how we would do it with MySQL.
  prefs: []
  type: TYPE_NORMAL
- en: How to model posts in MySQL
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'If we were modeling this relationship for MySQL (or another RDBMS), it might
    look similar to the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to model posts in MySQL](graphics/3586_07_023.jpg)'
  prefs: []
  type: TYPE_IMG
- en: In a nutshell, this diagram shows a `posts` table that has a foreign key `user_id`
    that references the `id` of the users table. This one-to-many relationship is
    a common occurrence in most applications and, in this case, means that one user
    can have many posts.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we've looked at a familiar diagram, let's look at the same relationship
    as it pertains to CouchDB.
  prefs: []
  type: TYPE_NORMAL
- en: How to model posts in CouchDB
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Surprisingly enough, CouchDB handles relationships in a very similar fashion.
    You might be thinking to yourself, Wait a minute, I thought you said it wasn't
    a relational database. Keep in mind that no matter what database you are using,
    chances are there will be commonalities with how they handle relationships. Let's
    look at how CouchDB would illustrate the same data and model.
  prefs: []
  type: TYPE_NORMAL
- en: '![How to model posts in CouchDB](graphics/3586_07_025.jpg)'
  prefs: []
  type: TYPE_IMG
- en: This is pretty similar, right? The biggest difference, as always, is that in
    the relational database, the data is stored in set rows and columns, while in
    CouchDB, they are stored in self-contained documents with a schema-less set of
    keys and values. Regardless of which way you look at the data, the relationship
    remains the same, that is, a post is connected to a user by way of a reference
    to that user's ID.
  prefs: []
  type: TYPE_NORMAL
- en: Just to make sure we're on the same page, let's walk through each of the fields
    in the `post` documents and make sure we understand what they are.
  prefs: []
  type: TYPE_NORMAL
- en: '`_id` is the unique identifier of the document.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`_rev` is the revision identifier of the document. We touched on revisions
    in Chapter 3, if you''d like to revisit this concept.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`type` tells us what kind of document we are looking at. In this case, every
    `post` document will be equal to `post`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`date_created` is the timestamp of when the document was created.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`content` contains any text that we want to have inside our posts.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`user` contains the username of the user that created the post and refers back
    to the `_users` document. Interestingly enough, we do not need to put `org.couchdb.user`
    in this field, because CouchDB is actually going to look at the username.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Now that we''ve defined the values that we need to save to CouchDB, we are
    ready to model it in a new class: `Post`.'
  prefs: []
  type: TYPE_NORMAL
- en: Have a go hero — setting up the Post class
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Creating the `Post` class will be very similar to our `User` class. If you feel
    confident enough, try creating the basic class by yourself.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here''s what you need to do:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a new class called `post.php` that extends the `Base` class.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create variables for each of the required fields defined earlier.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add a `construct` function to define the type of the document.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When you are done, continue reading on the next page, and make sure your work
    matches up with mine.
  prefs: []
  type: TYPE_NORMAL
- en: Let's check to see how everything turned out.
  prefs: []
  type: TYPE_NORMAL
- en: 'You should have created a new file called `post.php` and placed it in the `classes`
    directory in our `working` folder. The contents of `post.php` should look similar
    to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: That's all we need to handle post documents in PHP. Now that we have the class
    built, let's move on to creating posts.
  prefs: []
  type: TYPE_NORMAL
- en: Creating posts
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Creating posts is going to be a piece of cake for us now. All we need to do
    is add a few lines of code, and it'll be sitting in the database.
  prefs: []
  type: TYPE_NORMAL
- en: Time for action — making a function to handle Post creation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let's create a public function called `create` that will handle the creation
    of posts for our application.
  prefs: []
  type: TYPE_NORMAL
- en: Open `classes/post.php`, and scroll to the bottom. Here, we'll create a new
    public function called `create`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: Let's start by getting a new instance of Bones, and then setting the variables
    of the current `post` object.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: Finally, let's put the document to CouchDB, using Sag.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: Let's wrap the call to CouchDB with a `try...catch` statement, and inside of
    the `catch` statement, let's bounce it to a `500` error as we've done before.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: What just happened?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We just made a function called `create` that enables us to create a new `Post`
    document. We started by instantiating an object of Bones, so that we can use Sag.
    Next, we used Sag to grab a `UUID` for us to use as the ID of our `post`. Then,
    we used `date('r')` to output the date into a `RFC 2822` format (which is what
    CouchDB and JavaScript like) and saved it to the post's `date_created` variable.
    Then, we set the user of the post to the current user's username.
  prefs: []
  type: TYPE_NORMAL
- en: With all of the fields set, we used Sag's `put` command to save the post document
    to CouchDB. Finally, to make sure we didn't run into any errors, we wrapped the
    `put` command in a `try...catch` statement. In the `catch` segment, we passed
    the user on to Bones' `error500` function if something went wrong. That's it!
    We can now create posts in our application. All we have left is to make a form
    in our user profile.
  prefs: []
  type: TYPE_NORMAL
- en: Time for action — making a form to enable Post creation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let's code the form for post creation right into our user's profile page. This
    form will only show up if the logged-in user is looking at their own profile.
  prefs: []
  type: TYPE_NORMAL
- en: Open `user/profile.php`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Let's first check to see if the profile the user is looking at is their own.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: Next, let's add a form that will allow the currently logged-in user to make
    posts.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: What just happened?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We used the `$is_current_user` variable to determine if the user viewing the
    profile is equal to the currently logged-in user. Next, we created a form that
    posts to the `post` route (which we'll create next). In the form, we've put a
    `textarea` with `id` of `content` and a `submit` button to actually post the form.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have everything all ready to go, let's finish off the `post` creation
    by creating a route called `post` in our `index.php` file to handle the `post`
    route.
  prefs: []
  type: TYPE_NORMAL
- en: Time for action — creating a route and handling the creation of the Post
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In order to actually create a post, we'll need to create a route and handle
    the form input.
  prefs: []
  type: TYPE_NORMAL
- en: Open `index.php`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a basic `post` route, and call it `post`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: Inside our `post` route, let's accept the value of the passed value `content`
    and use the `create` function on our `Post` class to actually create the post.
    Once the post is created, we'll redirect the user back to their profile.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: We've done quite a bit to make sure that the user is authenticated when creating
    a post, but let's triple check that the user is authenticated here. If it turns
    out that they aren't authenticated, our application will forward them to the user
    login page with an error message.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: What just happened?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this section, we made a `post` route for the route `post` (sorry, that's
    a confusing sentence to decipher). Inside the `post` route, we instantiated a
    `Post` object, and set it's instance's variable `content` equal to the content
    `textarea` from the posted form. Next, we created the `post` by calling the public
    `create` function. After the post was saved, we redirected the user back to his/her
    own profile. Lastly, we added functionality around the whole `route` that checked
    to make sure the user was logged in. If they aren't, we'll bounce them to the
    login page and ask them to log in to perform this action.
  prefs: []
  type: TYPE_NORMAL
- en: Test it out
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Now that we've programmed everything we need to create a post, let's go through
    it step by step to test it.
  prefs: []
  type: TYPE_NORMAL
- en: Start by logging in as `johndoe` and going to his profile by opening your browser
    to `http://localhost/verge/user/johndoe`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Your browser will show you a user profile just as we've seen before, but this
    time you'll see the `post` form.![Test it out](graphics/3586_07_027.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Type some content into the text area. I typed `I don't like peanut butter`,
    but you can make it say whatever you want.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When you are done, click on the **Submit** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You've been forwarded back to the user profile of `johndoe`, but you can't see
    any posts yet. So, let's log into Futon to make sure the post was created.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Go to the `verge` database in Futon by going to `http://localhost:5984/_utils/database.html?verge`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Sweet! There's a document here; let's open it up and look at the contents.![Test
    it out](graphics/3586_07_030.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: This worked out perfectly! When a user is logged in, they can create a post
    by going to their profile and submitting the **Create a new post** form.
  prefs: []
  type: TYPE_NORMAL
- en: Adding your changes to Git
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this section, we added a function to create posts based upon our `Post` model.
    We then added a form to the user profile so that users can actually create posts.
    Let's add all of our changes to Git so that we can track our progress.
  prefs: []
  type: TYPE_NORMAL
- en: Open Terminal.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Type the following command to change directories to our `working` directory:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: 'We added the `classes/post.php` file, so let''s add that file into source control:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: 'Give `Git` a description of what we''ve done since our last commit:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: I know I said that I wouldn't remind you again, but I'm only human. Let's push
    these changes up to GitHub.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: Wrapping up
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Believe it or not, this is all the code we're going to write in this chapter.
    Put away your protest signs that say, "We haven't even queried the users' posts
    yet!" The reason we are stopping here is that CouchDB has a really interesting
    way of listing and handling documents. In order to get into that discussion, we'll
    need to define how to use **Design Documents** for views and validation. Luckily,
    that's exactly what we'll cover in the next chapter!
  prefs: []
  type: TYPE_NORMAL
- en: In the meantime, let's quickly recap what we accomplished in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we covered the creation of a user profile to display a user's
    information, how to handle exceptions gracefully and display to users the `500`
    and `404` error pages, how to model Posts in CouchDB, and finally, the creation
    of a form to create posts for the logged-in user.
  prefs: []
  type: TYPE_NORMAL
- en: As I said, in the next chapter, we're going to touch on some pretty cool concepts
    that CouchDB brings to the table. It's probably the most complicated chapter in
    this book, but it'll be a lot of fun.
  prefs: []
  type: TYPE_NORMAL
