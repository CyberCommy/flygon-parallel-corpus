- en: You Need a Cron Job
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, you will learn how to automate boring tasks in Linux by using
    cron jobs, which is one of the most useful and powerful utilities in Linux. Thanks
    to cron jobs, Linux system administrators can rest on the weekend and enjoy their
    vacation with their beloved ones. Cron jobs allow you to schedule tasks to run
    at a specific time. With cron jobs, you can schedule to run backups, monitor system
    resources, and much more.
  prefs: []
  type: TYPE_NORMAL
- en: Our first cron job
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The following diagram shows you the typical format for a cron job:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/368be940-510d-44f8-93c7-aa92c3ba3270.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 1: A cron job format'
  prefs: []
  type: TYPE_NORMAL
- en: 'Cron jobs are user-specific, and so each user has their own list of cron jobs.
    For example, the user `elliot` can run the command `crontab -l` to display his
    their of cron jobs:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Currently, the user `elliot` doesn't have any cron jobs.
  prefs: []
  type: TYPE_NORMAL
- en: Let's go ahead and create Elliot's first cron job. We will create a cron job
    that will run every minute, and it will simply append the line "A minute has passed."
    to the file `/home/elliot/minutes.txt`.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can run the command `crontab -e` to edit or create cron jobs:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Now add the following line and then save and exit:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'After you exit, you will see the message: "crontab: installing new crontab":'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, the user `elliot` can list their cron jobs to verify that the new
    cron job is scheduled:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, wait for a few minutes and then check the contents of the file `/home/el-
    liot/minutes.txt`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: I waited five minutes, and then I viewed the file to see that the line "A minute
    has passed." was added five times to the file `minutes.txt`, so I know the cron
    job is working fine.
  prefs: []
  type: TYPE_NORMAL
- en: Run every five minutes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let's create another cron job that will run every five minutes. For example,
    you may want to create a cron job that checks the load average on your system
    every five minutes.
  prefs: []
  type: TYPE_NORMAL
- en: 'Run the command `crontab -e` to add a new cron job:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Now add the following line and then save and exit:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, let''s view the list of installed cron jobs to verify that the new
    cron job is scheduled:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Now we can see there are two cron jobs installed for the user `elliot`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Hang around for five or ten minutes and then check the contents of the file
    `/home/elliot/load.txt`. If you don''t have a stopwatch, run the command `sleep
    300` and wait until it finishes:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'I made myself some green tea, and then came back after ten minutes and viewed
    the file `/home/elliot/load.txt`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: The cron job ran twice in those ten minutes as expected; I recommend you check
    the file `/home/elliot/load.txt` again in twenty-four hours, and you will see
    a pretty lovely report for your system load average throughout the day.
  prefs: []
  type: TYPE_NORMAL
- en: More cron examples
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'You can also schedule your cron job to run at multiple time intervals. For
    example, the following cron job will run every hour on Sunday at the minutes `5`,Â `20`,
    and `40`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'You can also specify a time range. For example, a cron job that will run at
    `6:30` PM on `weekdays` (Monday -> Friday) will have the following format:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Notice that `0` is Sunday, `1` is Monday, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: 'To see more cron examples, you can check the fifth section of the `crontab`
    man page:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Automating system patching
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As a Linux system administrator, you get to patch (update) systems quite often.
    And sometimes, it may drive you insane as production servers are scheduled to
    update at unpleasant times, like midnight on the weekends, `04:00` AM, `02:00`
    AM, etc. It would be nice to automate such a hectic task and get more sleep, right?
  prefs: []
  type: TYPE_NORMAL
- en: Let's switch to the `root` user and then create a bash script named `auto_patch.sh`
  prefs: []
  type: TYPE_NORMAL
- en: 'in `/root`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Notice that the script `auto_patch.sh` is tiny; only three lines. We have used
    the
  prefs: []
  type: TYPE_NORMAL
- en: '`-y` option with the `apt-get` commands, which automatically answers `Yes`
    to all prompts during the system update; this is important because you will not
    be sitting in front of the computer while the script is running!'
  prefs: []
  type: TYPE_NORMAL
- en: 'Now make the script executable:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, you need to schedule a cron job to run the `auto_patch.sh` script.
    Let''s assume the system is scheduled to update on Saturday at 01:00 AM. In this
    case, you can create the following cron job:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: Keep in mind that `auto_patch.sh` will never be deployed on any real server.
    I was only opening your mind to the concept of automation. You need to edit `auto_patch.sh`
    to check for command exit codes as it's naive to expect that everything will go
    smoothly without any errors. A good system administrator always creates robust
    scripts that handle all kinds of expected errors.
  prefs: []
  type: TYPE_NORMAL
- en: Running a job once
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You have to remove the `auto_patch.sh` cron job sometime after it runs, or else
    it will keep updating the system every week! For this, there exists another utility
    called `at` for that sole purpose; that is, to schedule to run a job just once.
  prefs: []
  type: TYPE_NORMAL
- en: 'We first need to install the `at` package:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'Now you can schedule to run the `auto_patch.sh` script this coming Saturday
    at `01:00` AM with the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: Remember, `at` jobs only run once, so after Saturday, the `auto_patch.sh` script
    will not run again.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can learn more about `at` by reading its man page:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: Knowledge check
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'For the following exercises, open up your terminal and try to solve the following
    tasks:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a cron job for the root user that will run every 10 minutes. The cron
    job will simply append the line "10 minutes have passed!" to the file `/root/minutes.txt`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a cron job for the root user that will run every Christmas (`25th of
    December at 1 AM`). The cron job will simply append the line "Merry Christmas!"
    to the file `/root/holidays.txt`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
