- en: Configuring Your Environment for Kotlin
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we will go through the process of preparing Android Studio
    and configuring the project we created in the previous chapter for Kotlin development.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the process, we will learn how to:'
  prefs: []
  type: TYPE_NORMAL
- en: Download and install the Kotlin plugin in Android Studio
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Configure Kotlin in an Android project
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Reference Java code in a Kotlin class, and vice versa
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Convert a Java class to a Kotlin class
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installing the Kotlin plugin
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To use Kotlin in your project, you have to first install the Kotlin plugin
    in Android Studio:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Select Android Studio | Preferences and select Plugins on the Preferences window:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/6eeca930-ba23-4cba-9262-9e4593ecaf45.png)'
  prefs: []
  type: TYPE_IMG
- en: 'On the Plugins window, click the Install JetBrains plugin... button at the
    bottom of the screen:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/fbe19542-89f2-4282-a428-71b6b3ba60ac.png)'
  prefs: []
  type: TYPE_IMG
- en: 'On the Browse Jetbrains Plugins screen, search for `Kotlin` and select Kotlin
    from the list of options. Then, click the **Install** button:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/fcff73cc-716a-4821-acc3-22f88a3cfe8d.png)'
  prefs: []
  type: TYPE_IMG
- en: When the download and installation is complete, click on the Restart Android
    Studio button to restart the IDE.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The latest version of Android Studio, and the one above version 3.0, offer full
    support for Kotlin out of the box. In the versions below 3.0, Kotlin support can
    be enabled by installing the plugin, as shown previously.
  prefs: []
  type: TYPE_NORMAL
- en: Making our project Kotlin-ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To be able to start adding Kotlin code to our project, we first have to configure
    our project to support Kotlin.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, select Tools | Kotlin | Configure Kotlin in Project:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/7b44bfcd-6216-469f-b715-425541d334a2.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Next, select the Android with Gradle option in the Choose Configurator popup:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/84bd81bf-8e66-44a3-8405-37b1770dff0f.png)'
  prefs: []
  type: TYPE_IMG
- en: 'On the Configure Kotlin with Android with Gradle popup, select the version
    of Kotlin to use, and click OK:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/e4f8234b-101b-466a-b2c2-6964455982c4.png)'
  prefs: []
  type: TYPE_IMG
- en: It is advisable to leave the version that is selected by default, since this
    is usually the latest version.
  prefs: []
  type: TYPE_NORMAL
- en: 'This will cause a number of changes in the `build.gradle` files in your project:'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the project''s `build.gradle(Project:TicTacToe)` file, the following changes
    are applied:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The version of the Kotlin plugin in use in the project is declared
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Kotlin Gradle plugin is declared as part of the project's classpath dependencies:![](img/74bb5c89-3e61-479d-bba4-f95c7d7eafa5.png)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'And, in the app module''s `build.gradle(Module:app)` file, the following changes
    are applied:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `kotlin-android` plugin is applied to the module
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Kotlin `Standard` library is declared as a `compile` time dependency for
    the app module:![](img/43fba6df-86e6-4d68-bc59-435746142b29.png)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Click on Sync Now to build the project
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Starting from Android Studio 3.0, Android Studio comes with built-in Kotlin
    support. As such, you won't have to install the Kotlin plugin to be able to use
    it.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have Kotlin completely configured, let's take it for a spin.
  prefs: []
  type: TYPE_NORMAL
- en: Kotlin alongside Java?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: One of the amazing things about Kotlin is its ability to reside and work with
    Java in the same project.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s try creating a Kotlin class. The Android Studio Kotlin plugin makes
    this as easy as creating a Java class. Select **File** | **New** | **Kotlin File/Class**:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/cb81df55-069c-4ff5-bbd4-86c507398631.png)'
  prefs: []
  type: TYPE_IMG
- en: 'On the **New Kotlin File/Class** popup, enter the name of your class, select `Class` from
    the **Kind** dropdown, and click OK:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/0587550e-c61c-42d0-a07a-a892ade2b6ef.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The new class looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: The default visibility modifier in Kotlin is public, so there's no need to specify
    the public modifier like you would in a Java class.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s add the following method to our new Kotlin class:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: The previous method takes an Android view (`android.view.View`) as a parameter
    and passes it along with a message to the Snackbar `make()` method to display
    the message.
  prefs: []
  type: TYPE_NORMAL
- en: 'This ability of Kotlin to make use of Java code is called **interoperability.**
    This feature also works the other way round, allowing Kotlin code to be called
    from a Java class. Let''s try that:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open `MainActivity.java`. In the `onCreate()` method, replace the following
    line of code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'With the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: The preceding line of code creates an instance of the `HelloKotlin` class, and
    calls its `displayMessage()` method.
  prefs: []
  type: TYPE_NORMAL
- en: 'Build and run your app:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/267e173e-9907-49f9-b95b-556a5f8d1910.png)'
  prefs: []
  type: TYPE_IMG
- en: Yes, it's that easy.
  prefs: []
  type: TYPE_NORMAL
- en: Kotlin to Java?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: So far, we've gone through the process of creating a Kotlin class and accessing
    its method in our `MainActivity.java` class. Our project currently consists of
    a Java class and a Kotlin class, but we want our entire project to be in Kotlin.
    So, what do we do? Do we have to rewrite the `MainActivity.java` class in Kotlin?
    No. One of the functionalities the Kotlin plugin adds to Android Studio is the
    ability to convert code from Java to Kotlin.
  prefs: []
  type: TYPE_NORMAL
- en: 'To do this, open the `MainActivity.java` class and go to Code | Convert Java
    File to Kotlin File:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/6c02e694-1bd4-424b-9880-e4dea0958994.png)'
  prefs: []
  type: TYPE_IMG
- en: 'You will be prompted with a warning message about the accuracy of the conversion.
    For now, we don''t need to worry about that. Just click OK to continue:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/892ad161-1aad-4260-84fd-a0261b1784f4.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Your`MainActivity.java`class should now look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: You will also notice that the extension of the file has also changed to `.kt`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once again, build and run your app:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/673bf8ad-1f55-43ea-bcd7-846405f8d22d.png)'
  prefs: []
  type: TYPE_IMG
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we learned to configure Android Studio and an Android project
    for Kotlin development. We also learned to create and call a Kotlin class from
    Java. We also learned to use the Kotlin plugin to convert a Java source file to
    Kotlin. These functionalities are particularly helpful if you have legacy code
    written in Java and you want to gradually switch to Kotlin.
  prefs: []
  type: TYPE_NORMAL
- en: In using the `Convert Java to Kotlin` functionality, keep in mind that in some
    cases, you'll have to perform some corrections in the resulting Kotlin file.
  prefs: []
  type: TYPE_NORMAL
- en: In the next few chapters, we will add more functionality to our project (which,
    as you may have guessed, is a simple **TicTacToe** game). In the process, we will
    delve more deeply into the basics of Kotlin as a language. We will cover topics
    such as data types, classes, functions, coroutines and Null safety.
  prefs: []
  type: TYPE_NORMAL
