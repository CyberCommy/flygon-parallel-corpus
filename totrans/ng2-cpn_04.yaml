- en: Chapter 4. Building a Basic Component
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: At its core, an Angular 2 component is a class that is responsible for exposing
    data to the view and implementing user interaction logic. An Angular 2 component
    can be compared to the controller, scope, and view of Angular 1.
  prefs: []
  type: TYPE_NORMAL
- en: How does Angular 2 know how to treat our class as a component? We need to attach
    metadata to the class to tell Angular how to treat it.
  prefs: []
  type: TYPE_NORMAL
- en: The term metadata describes the additional information that we add to our code.
    This information is used by Angular 2 at runtime.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: The anatomy of an Angular 2 component
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The component selector
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Component template
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Component style
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: View encapsulation (the shadow DOM)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Data binding
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Anatomy of an Angular 2 component
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In [Chapter 2](part0020.xhtml#aid-J2B81 "Chapter 2. Setting Up an Angular 2
    Development Environment with angular-cli"), *Setting Up an Angular 2 Development
    Environment with angular-cli*, setting the development environment, we generated
    an Angular 2 project from scratch using the `angular-cli` tool and served it to
    the browser. If you haven't done so, refer to [Chapter 2](part0020.xhtml#aid-J2B81
    "Chapter 2. Setting Up an Angular 2 Development Environment with angular-cli"),
    *Setting Up an Angular 2 Development Environment with angular-cli*, and follow
    the steps.
  prefs: []
  type: TYPE_NORMAL
- en: 'After you are done, it''s time to open the project in our favorite IDE (also
    described in [Chapter 2](part0020.xhtml#aid-J2B81 "Chapter 2. Setting Up an Angular
    2 Development Environment with angular-cli"), *Setting Up an Angular 2 Development
    Environment with angular-cli*), to inspect the code. It should be similar to the
    following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Building a Basic Component](../Images/image00096.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'When we generate our project using `angular-cli`, a component with our application
    name (that we supplied to the `ng new` command) is created for us. We can find
    it under the `src/app` directory as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Building a Basic Component](../Images/image00097.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Locate the file named `app.component.ts` and open it in the editing view (the
    editing view can be differ from one IDE to another).
  prefs: []
  type: TYPE_NORMAL
- en: Let's explore the component code line by line, here is the code of `app.component.ts`
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: In the first line, we are importing the `Component` decorator from the Angular
    core module
  prefs: []
  type: TYPE_NORMAL
- en: Then, we declare the `Component` decorator by assigning the `@` symbol following
    the name of the decorator. Because the decorator is just a function (refer to
    [Chapter 3](part0025.xhtml#aid-NQU21 "Chapter 3. The TypeScript Primer"), *The
    TypeScript Primer* for an explanation), we need to invoke it just like any other
    function using parenthesis.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `Component` decorator accepts an object as a parameter, which defines the
    component metadata. We will explore it in a second.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Right after the decorator, we declare the component class, which should hold
    our component logic and currently declares the string named `title`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The class needs to be exported so it can be used in other places in the code
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'As we can see, Angular 2 components must be built from two distinct parts:
    a simple class and a decorator.'
  prefs: []
  type: TYPE_NORMAL
- en: Before we dive into this code, let's open the browser and explore the elements
    that have been rendered to the browser.
  prefs: []
  type: TYPE_NORMAL
- en: 'To do so, point your browser to `http://localhost:4200/` (I''m using Google
    Chrome), right-click on the title and choose **Inspect** from the pop-up menu:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Building a Basic Component](../Images/image00098.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'This will open up the Chrome DevTool where we will explore the DOM:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Building a Basic Component](../Images/image00099.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: The `selector` that we defined in our metadata becomes an element with the same
    name, and the `title` that we defined on the component class is rendered as an
    `<h1>` tag inside it.
  prefs: []
  type: TYPE_NORMAL
- en: How has the `<app-root>` found its way to the DOM? Where does that `<h1>` tag
    come from?
  prefs: []
  type: TYPE_NORMAL
- en: Bootstrapping the application
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Before dealing with how the link is made between components and the DOM, let's
    introduce the concept of module and how it's used to bootstrap the application.
  prefs: []
  type: TYPE_NORMAL
- en: 'Under the `src` directory in the project root, locate and open the `main.ts`
    file:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Bootstrapping the application](../Images/image00100.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'This file is the starting point of our Angular application. It is responsible
    for instantiating the main module of the application and the root component in
    it. To do so, we import a `platformBrowserDynamic` method from the `platform-browser-dynamic`
    module, which is a part of Angular. This method returns an object to bootstrap
    the application. The `bootstrapModule` method of this object is responsible for
    kicking off Angular by rendering the root component of the component tree. It
    requires the main module to be passed as an argument, so we import our module
    class `AppModule` and pass it to `bootstrap`:'
  prefs: []
  type: TYPE_NORMAL
- en: 'The following code is from the `main.ts` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: The rest of the code doesn't have any effect on bootstrapping Angular with a
    root module. The `enableProdMode` method is a method from Angular core that runs
    the application in production mode. The environment is just a constant that holds
    a Boolean that indicates if we are running in the production environment.
  prefs: []
  type: TYPE_NORMAL
- en: Modules are a convenient way to gather a set of components, directives, services
    and pipes into a single entity that can into other modules. Each Angular application
    contains a single root module, in our case, `AppModule`. It contains the root
    component of the application.
  prefs: []
  type: TYPE_NORMAL
- en: A module is simply a class decorated with `@NgModule` that accepts an object
    as a parameter, which defines the module metadata.
  prefs: []
  type: TYPE_NORMAL
- en: Note that we use the dynamic bootstrapping approach leveraging the Just-in-Time
    compiler. This compiles components on the fly, in memory, and in the browser.
    Another alternative, called **Ahead of Time** (**AoT**), is possible in Angular
    2 to precompile the application. In this case, there is no need to ship the Angular
    compiler to the browser and the performance boost can be significant.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this case, after having precompiled the application, you need to use the
    `platformBrowserDynamic` method from the `platform-browser-dynamic` module for
    the `main`.`ts` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: The component selector
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As we have seen in the first example of this chapter, the **selector** that
    we defined in the component decorator becomes an element that renders to the DOM.
    Before we explore our selector options, let's understand how Angular renders this
    component.
  prefs: []
  type: TYPE_NORMAL
- en: As we discussed in [Chapter 1](part0014.xhtml#aid-DB7S1 "Chapter 1. Angular
    2 Component Architecture"), *Angular 2 Component Architecture*, an Angular 2 application
    can be described as a tree of components. Like any other tree structure, there
    is only one root node. Currently in our project we got only one component, which
    is used as the tree node.
  prefs: []
  type: TYPE_NORMAL
- en: 'With this information, let''s see how Angular instantiates our root component
    and renders it:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Under the `src/app` directory in the project root, locate and open the `app.module.ts`
    file. This file contains the definition of the root module of the application:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: The `app.module.ts` is responsible for instantiating the component class. When
    this happens, Angular searches for the selector that we defined in the component
    decorator in the `index.html` file. The only component that we need to place inside
    our `index.html` is our root component defined in the `bootstrap` attribute of
    the root module in the `app.module.ts`.
  prefs: []
  type: TYPE_NORMAL
- en: Note that this component needs to be specified in the `declarations` attribute
    listing all usable components for the module.
  prefs: []
  type: TYPE_NORMAL
- en: 'Open `index.html` which is located next to `main.ts` and inspect the code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: The first thing we see is that we used our selector as element in our `html`
    file. This is the default behavior of Angular.
  prefs: []
  type: TYPE_NORMAL
- en: The other code that you find in `index.html` is related to the build system
    that `angular-cli` uses, which is out of the scope of this book.
  prefs: []
  type: TYPE_NORMAL
- en: All you need to know is that when this HTML is loaded into the server, all the
    required dependencies are loaded for Angular and you need to run the code in `main.ts`
    to kickstart the framework.
  prefs: []
  type: TYPE_NORMAL
- en: Selector options
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'When we build components, we are creating new html elements. That''s the reason
    that, by default, our selector name is used as an element in the HTML. But we
    have other options as well for building components. Let''s explore them:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Select by CSS class name:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Use in markup:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Select by attribute name:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Use in markup:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Select by attribute name and value:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Use in markup:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Select only if the element does not match the selector:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Use in markup:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Select if one of the selectors matches:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Use in markup:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Most of the time, leaving the default—which is the component selector—is exactly
    what we want when building common components. In the later chapters, we will see
    other usages as well.
  prefs: []
  type: TYPE_NORMAL
- en: For now, we will leave the selector as default.
  prefs: []
  type: TYPE_NORMAL
- en: The component template
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The template is the heart of the component in Angular 2\. Without a template
    there is nothing to render to the DOM. There are two ways to attach a template
    to the component:'
  prefs: []
  type: TYPE_NORMAL
- en: Providing a URL to an external `html` file
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Define the template inline
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The `app-root` that is created by the `angular-cli` includes an external template.
    It is defined with the `templateUrl` property:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'We can find the template next to `app.component.ts` as an HTML file with the
    same name `app.component.html`. Let''s open it to inspect the code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: Now we know where the `<h1>` came from. As you can guess, the double curly braces
    render the title from the component class.
  prefs: []
  type: TYPE_NORMAL
- en: If we want to declare our templates inline, we should use the template property
    instead. Luckily, in ES6, we are introduce with a way to create multiline strings
    easily. This feature is called **template strings** and it's declared with the
    back tick ([PRE17]
  prefs: []
  type: TYPE_NORMAL
- en: '[app.component.ts]'
  prefs: []
  type: TYPE_NORMAL
- en: '@Component({'
  prefs: []
  type: TYPE_NORMAL
- en: 'selector: ''app-root'','
  prefs: []
  type: TYPE_NORMAL
- en: 'template: `'
  prefs: []
  type: TYPE_NORMAL
- en: <h1>
  prefs: []
  type: TYPE_NORMAL
- en: '{{title}}'
  prefs: []
  type: TYPE_NORMAL
- en: </h1>
  prefs: []
  type: TYPE_NORMAL
- en: '`'
  prefs: []
  type: TYPE_NORMAL
- en: '})'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: '[app.component.ts]'
  prefs: []
  type: TYPE_NORMAL
- en: '@Component({'
  prefs: []
  type: TYPE_NORMAL
- en: 'selector: ''app-root'','
  prefs: []
  type: TYPE_NORMAL
- en: 'template: `'
  prefs: []
  type: TYPE_NORMAL
- en: <h1>
  prefs: []
  type: TYPE_NORMAL
- en: '{{title}}'
  prefs: []
  type: TYPE_NORMAL
- en: </h1>
  prefs: []
  type: TYPE_NORMAL
- en: '`,'
  prefs: []
  type: TYPE_NORMAL
- en: 'styleUrls: [''./app.component.css'']'
  prefs: []
  type: TYPE_NORMAL
- en: '})'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: '[app.component.ts]'
  prefs: []
  type: TYPE_NORMAL
- en: '@Component({'
  prefs: []
  type: TYPE_NORMAL
- en: 'selector: ''app-root'','
  prefs: []
  type: TYPE_NORMAL
- en: 'template: `'
  prefs: []
  type: TYPE_NORMAL
- en: <h1>
  prefs: []
  type: TYPE_NORMAL
- en: '{{title}}'
  prefs: []
  type: TYPE_NORMAL
- en: </h1>
  prefs: []
  type: TYPE_NORMAL
- en: '`,'
  prefs: []
  type: TYPE_NORMAL
- en: 'styles: [`'
  prefs: []
  type: TYPE_NORMAL
- en: 'h1 { color: darkblue }'
  prefs: []
  type: TYPE_NORMAL
- en: '`]'
  prefs: []
  type: TYPE_NORMAL
- en: '})'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: <!doctype html>
  prefs: []
  type: TYPE_NORMAL
- en: <html lang="en">
  prefs: []
  type: TYPE_NORMAL
- en: <head>
  prefs: []
  type: TYPE_NORMAL
- en: <meta charset="UTF-8">
  prefs: []
  type: TYPE_NORMAL
- en: <title>Document</title>
  prefs: []
  type: TYPE_NORMAL
- en: </head>
  prefs: []
  type: TYPE_NORMAL
- en: <body>
  prefs: []
  type: TYPE_NORMAL
- en: <select>
  prefs: []
  type: TYPE_NORMAL
- en: <option>ONE</option>
  prefs: []
  type: TYPE_NORMAL
- en: <option>TWO</option>
  prefs: []
  type: TYPE_NORMAL
- en: <option>THREE</option>
  prefs: []
  type: TYPE_NORMAL
- en: </select>
  prefs: []
  type: TYPE_NORMAL
- en: </body>
  prefs: []
  type: TYPE_NORMAL
- en: </html>
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: '[app.component.ts]'
  prefs: []
  type: TYPE_NORMAL
- en: '@Component({'
  prefs: []
  type: TYPE_NORMAL
- en: 'selector: ''app-root'','
  prefs: []
  type: TYPE_NORMAL
- en: 'encapsulation: ViewEncapsulation.None,'
  prefs: []
  type: TYPE_NORMAL
- en: 'template: `'
  prefs: []
  type: TYPE_NORMAL
- en: <h1>
  prefs: []
  type: TYPE_NORMAL
- en: '{{title}}'
  prefs: []
  type: TYPE_NORMAL
- en: </h1>
  prefs: []
  type: TYPE_NORMAL
- en: '`,'
  prefs: []
  type: TYPE_NORMAL
- en: 'styles: [`'
  prefs: []
  type: TYPE_NORMAL
- en: 'h1 { color: darkblue }'
  prefs: []
  type: TYPE_NORMAL
- en: '`]'
  prefs: []
  type: TYPE_NORMAL
- en: '})'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: '[app.component.ts]'
  prefs: []
  type: TYPE_NORMAL
- en: import { Component, ViewEncapsulation } from '@angular/core';
  prefs: []
  type: TYPE_NORMAL
- en: '@Component({'
  prefs: []
  type: TYPE_NORMAL
- en: 'selector: ''app-root'','
  prefs: []
  type: TYPE_NORMAL
- en: 'encapsulation: ViewEncapsulation.None,'
  prefs: []
  type: TYPE_NORMAL
- en: 'template: `'
  prefs: []
  type: TYPE_NORMAL
- en: <h1>
  prefs: []
  type: TYPE_NORMAL
- en: '{{title}}'
  prefs: []
  type: TYPE_NORMAL
- en: </h1>
  prefs: []
  type: TYPE_NORMAL
- en: '`,'
  prefs: []
  type: TYPE_NORMAL
- en: 'styles: [`'
  prefs: []
  type: TYPE_NORMAL
- en: 'h1 { color: darkblue }'
  prefs: []
  type: TYPE_NORMAL
- en: '`]'
  prefs: []
  type: TYPE_NORMAL
- en: '})'
  prefs: []
  type: TYPE_NORMAL
- en: export class AppComponent {
  prefs: []
  type: TYPE_NORMAL
- en: title = 'app works!';
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '```'
  prefs: []
  type: TYPE_NORMAL
- en: It's not hard to spot the double curly braces in the template. This is a part
    of Angular's template syntax, which is responsible for one way binding of data
    from the component class. In this case, we are binding the title property (which
    is a string) to be rendered between the `<h1>` tag.
  prefs: []
  type: TYPE_NORMAL
- en: Later in this book, we will explore some more binding options.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In Angular 2, a component is a class with a decorator that adds important metadata
    to it. The component decorator defines how we can use it, and what it can do.
    The selector and the template are the minimum required fields when calling the
    decorator (Angular will throw an error if one of them is missing).
  prefs: []
  type: TYPE_NORMAL
- en: If we defined the view encapsulation as native, Angular will create a shadow
    DOM for our component, which protects the embedded styles from being affected
    by external CSS on the page.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will continue to develop our component and make it dynamic.
  prefs: []
  type: TYPE_NORMAL
