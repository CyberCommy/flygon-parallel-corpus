- en: Node Fundamentals â€“ Part 1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you'll learn a ton about building Node applications, and you'll
    actually build your first Node application. This is where all the really fun stuff
    is going to start.
  prefs: []
  type: TYPE_NORMAL
- en: We'll kick things off by learning about all of the modules that come built in
    to Node. These are objects and functions that let you do stuff with JavaScript
    you've never been able to do before. We'll learn how to do things, such as reading
    and writing from the filesystem, which we'll use in the Node's application to
    persist our data.
  prefs: []
  type: TYPE_NORMAL
- en: We'll also be looking at third-party npm modules; this is a big part of the
    reason that Node became so popular. The npm modules give you a great collection
    of third-party libraries you can use, and they also have really common problems.
    So you don't have to rewrite that boilerplate code over and over again. We'll
    be using a third-party module in this chapter to help with fetching input from
    the user.
  prefs: []
  type: TYPE_NORMAL
- en: 'The chapter will specifically cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Module basics
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Require own files
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Third-party modules
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Global modules
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Getting input
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Module basics
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, you will finally learn some Node.js code, and we'll kick things
    off by talking about modules inside Node. Modules are units of functionality,
    so imagine I create a few functions that do something similar, such as a few functions
    that help with math problems, for example, add, subtract, and divide. I could
    bundle those up as a module, call it Andrew-math, and other people could take
    advantage of it.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, we''ll not be looking at how to make our own module; in fact, we will
    be looking at how we can use modules, and that will be done using a function in
    Node, called `require()`. The `require()` function will let us do three things:'
  prefs: []
  type: TYPE_NORMAL
- en: First, it'll let us load in modules that come bundled with Node.js. These include
    the HTTP module, which lets us make a web server, and the `fs` module, which lets
    us access the filesystem for our machine.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We will also be using `require()` in later sections to load in third-party libraries,
    such as Express and Sequelize, which will let us write less code.
  prefs: []
  type: TYPE_NORMAL
- en: We'll be able to use prewritten libraries to handle complex problems, and all
    we need to do is implement `require()` by calling a few methods.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We will use `require()` to require our very own files. It will let us break
    up our application into multiple, smaller files, which is essential for building
    real-world apps.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If you have all of your code in one file, it will be really hard to test, maintain,
    and update. Now, `require()` isn't that bad. In this section, we'll explore the
    first use case for `require()`.
  prefs: []
  type: TYPE_NORMAL
- en: Using case for require()
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We'll take a look at two built-in modules; we'll figure out how to require them
    and how to use them, and then we'll move on to starting the process of building
    that Node application.
  prefs: []
  type: TYPE_NORMAL
- en: Initialization of an application
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The first step we''ll take inside of the Terminal is that we''ll make a directory
    to store all of these files. We''ll navigate from our home directory to the desktop
    using the `cd Desktop` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Then, we'll make a folder to store all of the lesson files for this project.
  prefs: []
  type: TYPE_NORMAL
- en: Now, these lesson files will be available in the resources section for every
    section, so if you get stuck or your code just isn't working for some reason,
    you can download the lesson files, compare your files, and figure out where things
    went wrong.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, we''ll make that folder using the `mkdir` command, which is the short
    form for **make directory**. Let''s call the folder `notes-node`, as shown in
    the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'We''ll make a note app in Node so that `notes-node` seems appropriate. Then
    we''ll `cd` into `notes-node`, and we can get started playing around with some
    of the built-in modules:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: These modules are built in, so there's no need to install anything in Terminal.
    We can simply require them right inside of our Node files.
  prefs: []
  type: TYPE_NORMAL
- en: 'The next step in the process is to open up that directory inside the Atom text
    editor. So open up the directory we just created on the Desktop, and you will
    find it there, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/0c1f5e61-9318-4a46-8fb2-994408a8d2d1.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now, we will need to make a file, and we''ll put that file in the root of the
    project:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/9ef115c8-64d7-428a-b25d-28f3441d2057.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We''ll call this file `app.js`, and this is where our application will start:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/9fdc5112-279d-4049-8f40-c7a820d516d2.png)'
  prefs: []
  type: TYPE_IMG
- en: We will be writing other files that get used throughout the app, but this is
    the only file we'll ever be running from Terminal. This is the initialization
    file for our application.
  prefs: []
  type: TYPE_NORMAL
- en: The built-in module to use require()
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now, to kick things off, the first thing I will do is to use `console.log`
    to print `Starting app`, as shown in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: The only reason we'll do this is to keep track of how our files are executing,
    and we'll do this only for the first project. Down the line, once you're comfortable
    with how files get loaded and how they run, we'll be able to remove these `console.log`
    statements, as they won't be necessary.
  prefs: []
  type: TYPE_NORMAL
- en: After we call the `console.log` starting app, we'll load in a built-in module
    using `require()`.
  prefs: []
  type: TYPE_NORMAL
- en: We can get a complete list of all of the built-in modules in the Node.js API
    docs.
  prefs: []
  type: TYPE_NORMAL
- en: To view Node.js API docs, go to [nodejs.org/api](http://nodejs.org/api). When
    you go to this URL, you'll be greeted with a long list of built-in modules. Using
    the **File System** module we'll create a new file and the **OS** module. The
    OS module will let us fetch things such as the username for the currently logged-in
    user.
  prefs: []
  type: TYPE_NORMAL
- en: Creating and appending files in the File System module
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To kick things off though, we will start with the File System module. We''ll
    go through the process of creating a file and appending to it:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/5b1f68c0-b22d-4a77-b215-07276083f00c.png)'
  prefs: []
  type: TYPE_IMG
- en: When you view a docs page for a built-in module, whether it's File System or
    a different module, you'll see a long list of all the different functions and
    properties that you have available to you. The one we'll use in this section is
    `fs.appendFile`.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you click on it, it will take you to the specific documentation, and this
    is where we can figure out how to use `appendFile`, as shown in the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/83a4ce04-2434-462b-a603-e6a46de862b6.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now, `appendFile` is pretty simple. We''ll pass to it two string arguments
    (shown in the preceding screenshot):'
  prefs: []
  type: TYPE_NORMAL
- en: One will be the file name
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The other will be the data we want to append to the file
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This is all we need to provide in order to call `fs.appendFile`. Before we can
    call `fs.appendFile`, we need to require it. The whole point of requiring is to
    let us load in other modules. In this case, we'll load in the `fs` module from
    `app.js`.
  prefs: []
  type: TYPE_NORMAL
- en: Let's create a variable that will be a constant, using `const`.
  prefs: []
  type: TYPE_NORMAL
- en: Since we'll not be manipulating the code the module sends back, there's no need
    to use the `var` keyword; we will use the `const` keyword.
  prefs: []
  type: TYPE_NORMAL
- en: 'Then we''ll give it a name, `fs` and set it equal to `require()`, as shown
    in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Here, `require()` is a function that's available to you inside any of your Node.js
    files. You don't have to do anything special to call it, you simply call it as
    shown in the preceding code. Inside the argument list, we'll just pass one string.
  prefs: []
  type: TYPE_NORMAL
- en: Now, every time you call `require()`, whether you're loading a built-in module,
    a third-party module, or your own file, you just pass in one string.
  prefs: []
  type: TYPE_NORMAL
- en: 'In our case, we''ll pass in the module name, which is `fs` and toss in a semicolon
    at the end, as shown in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: This will tell Node that you want to fetch all of the contents of the `fs` module
    and store them in the `fs` variable. At this point, we have access to all of the
    functions available on the `fs` module, which we explored over in the docs, including
    `fs.appendFile`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Back in Atom, we can call the `appendFile` by calling `fs.appendFile`, passing
    in the two arguments that we''ll use; the first one will be the filename, so we
    add `greetings.txt`, and the second one will be the text you want to append to
    the file. In our case, we''ll append `Hello world!`, as shown in the following
    code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Let's save the file, as shown in the preceding command, and run it from Terminal
    to see what happens.
  prefs: []
  type: TYPE_NORMAL
- en: '**Warning when running the program on Node v7** If you''re running Node v7
    or greater, you''ll get a little warning when you run the program inside Terminal.
    Now, on v7, it''ll still work, it''s just a warning, but you can get rid of it
    using the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding code, we have the original line that we have inside our program.
  prefs: []
  type: TYPE_NORMAL
- en: In `Option one` here is to add a callback as the third argument to the append
    file. This callback will get executed when either an error occurs or the file
    successfully gets written too. Inside option one, we have an `if` statement; if
    there is an error, we simply print a message to the screen, `Unable to write to
    file`.
  prefs: []
  type: TYPE_NORMAL
- en: Now, our second option in the preceding code, `Option two`, is to call `appendFileSync`,
    which is a synchronous method (we'll talk more about that later); this function
    does not take the third argument. You can type it as shown in the preceding code
    and you won't get the warning.
  prefs: []
  type: TYPE_NORMAL
- en: So, pick one of these two options if you see the warning; both will work much
    the same.
  prefs: []
  type: TYPE_NORMAL
- en: If you are on v6, you can stick with the the original line, shown at the top
    of the preceding code, although you might as well use one of the two options below
    that line to make your code a little more future proof.
  prefs: []
  type: TYPE_NORMAL
- en: Fear not, we'll be talking about asynchronous and synchronous functions, as
    well as callback functions, extensively throughout the book. What I'm giving you
    here in the code is just a template, something you can write in your file to get
    that error removed. In a few chapters, you will understand exactly what these
    two methods are and how they work.
  prefs: []
  type: TYPE_NORMAL
- en: 'If we do the appending over in Terminal, `node app.js`, we''ll see something
    pretty cool:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/2ec51c4b-ece3-4ce3-bb59-73b569219a36.png)'
  prefs: []
  type: TYPE_IMG
- en: 'As shown in the preceding code, we get our one `console.log` statement, `Starting
    app.`. So we know the app started correctly. Also, if we head over into Atom,
    we''ll actually see that there''s a brand new `greetings.txt` file, as shown in
    the following code. This is the text file that was created by `fs.appendFile`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Here, `fs.appendFile` tries to append `greetings.txt` to a file; if the file
    doesn''t exist, it simply creates it:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/91fe0afc-82be-45e7-8cf1-71ab8ac7e2c8.png)'
  prefs: []
  type: TYPE_IMG
- en: You can see that we have our message, `Hello world!` in the `greetings.txt`
    file, printing to the screen. In just a few minutes, we were able to load in a
    built-in Node module and call a function that lets us create a brand new file.
  prefs: []
  type: TYPE_NORMAL
- en: 'If we call it again by rerunning the command using the up arrow key and the
    e*nter* key, and we head back into the contents of `greetings.txt`, you can see
    this time around that we have `Hello world!` twice, as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/e87eb337-f0a8-4c89-b798-9b58b7a5739d.png)'
  prefs: []
  type: TYPE_IMG
- en: It appended `Hello world!` one time for each time we ran the program. We have
    an application that creates a brand new file on our filesystem, and if the file
    already exists, it simply adds to it.
  prefs: []
  type: TYPE_NORMAL
- en: The OS module in require()
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Once we have created and appended the `greetings.txt` file, we'll customize
    this `greeting.txt` file. To do this, we'll explore one more built-in module.
    We'll be using more than just `appendFile` in the future. We'll be exploring other
    methods. For this section, the real goal is to understand `require()`. The `require()`
    function lets us load in the module's functionality so that we can call it.
  prefs: []
  type: TYPE_NORMAL
- en: 'The second module that we''ll be using is OS, and we can view it in the documentation.
    In the OS module, we''ll use the method defined at the very bottom, os.userInfo([options]):'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/4701cb5a-ce45-40d1-8cbe-10c9dcdff9b4.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The os.userInfo([options]) method gets called and returns various information
    about the currently logged-in user, such as the username, and this is what we''ll
    pull off:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/dfff1585-133a-45cb-b109-74c1c8c9b000.png)'
  prefs: []
  type: TYPE_IMG
- en: Using the username that comes from the OS, we can customize the `greeting.txt`
    file so that instead of `Hello world!` it can say `Hello Gary!`.
  prefs: []
  type: TYPE_NORMAL
- en: 'To get started, we have to require OS. This means that we''ll go back inside
    Atom. Now, just below where I created my `fs` constant, I''ll create a new constant
    called `os`, setting it equal to `require()`; this gets called as a function and
    passes one argument, the module name, `os`, as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: From here, we can start calling methods available on the OS module, such as
    os.userInfo([optional]).
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s make a new variable called `user` to store the result. The variable
    user will get set equal to `os.userInfo`, and we can call `userInfo` without any
    arguments:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, before we do anything with the `fs.appendFile` line, I''ll comment it
    out and print the contents of the user variable using `console.log`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'This will let us explore exactly what we get back. Over in Terminal, we can
    rerun our program using the up arrow key and e*nter* key, and right here in the
    following code, you see that we have an object with a few properties:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/e8e6025d-09b3-4c9e-9e0d-5d65e2a43a74.png)'
  prefs: []
  type: TYPE_IMG
- en: We have `uid`, `gid`, `username`, `homedir`, and `shell`. Depending on your
    OS, you'll not have all of these, but you should always have the `username` property.
    This is the one we care about.
  prefs: []
  type: TYPE_NORMAL
- en: 'This means that back inside Atom, we can use `user.username` inside of `appendFile`.
    I''ll remove the `console.log` statement and uncomment our call to `fs.appendFile`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Now, where we have `world` in the `fs.appendFile`, we'll swap it with `user.username`.
    There are two ways we can do this.
  prefs: []
  type: TYPE_NORMAL
- en: Concatenating user.username
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The first way is to remove `world!` and concatenate `user.username`. Then we
    can concatenate another string using the `+` (plus) operator, as shown in the
    following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Now if we run this, everything is going to work as expected. Over in Terminal,
    we can rerun our app. It prints `Starting app`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/eeb699b5-0250-46f4-b4f4-45f16076b0c1.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Over in the `greetings.txt` file, you should see something like `Hello Gary!`
    printing to the screen, as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/48ca995f-4076-461a-8e60-c817922f81d8.png)'
  prefs: []
  type: TYPE_IMG
- en: Using the `fs` module and the `os` module, we were able to grab the user's username,
    create a new file, and store it.
  prefs: []
  type: TYPE_NORMAL
- en: Using template strings
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The second way to swap `world` with `user.username` in the `fs.appendFile` is,
    using an ES6 feature known as template strings. Template strings start and end
    with the [PRE14]
  prefs: []
  type: TYPE_NORMAL
- en: console.log('Starting app.');
  prefs: []
  type: TYPE_NORMAL
- en: const fs = require('fs');
  prefs: []
  type: TYPE_NORMAL
- en: const os = require('os');
  prefs: []
  type: TYPE_NORMAL
- en: var user = os.userInfo();
  prefs: []
  type: TYPE_NORMAL
- en: fs.appendFile('greetings.txt', `Hello !`);
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: console.log('Starting app.');
  prefs: []
  type: TYPE_NORMAL
- en: const fs = require('fs');
  prefs: []
  type: TYPE_NORMAL
- en: const os = require('os');
  prefs: []
  type: TYPE_NORMAL
- en: var user = os.userInfo();
  prefs: []
  type: TYPE_NORMAL
- en: fs.appendFile('greetings.txt', `Hello ${user.username}!`);
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: console.log('Starting notes.js');
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: console.log('Starting app.js');
  prefs: []
  type: TYPE_NORMAL
- en: const fs = require('fs');
  prefs: []
  type: TYPE_NORMAL
- en: const os = require('os');
  prefs: []
  type: TYPE_NORMAL
- en: const notes = require('');
  prefs: []
  type: TYPE_NORMAL
- en: var user = os.userInfo();
  prefs: []
  type: TYPE_NORMAL
- en: fs.appendFile('greetings.txt', `Hello ${user.username}!`);
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: console.log('Starting app.js');
  prefs: []
  type: TYPE_NORMAL
- en: const fs = require('fs');
  prefs: []
  type: TYPE_NORMAL
- en: const os = require('os');
  prefs: []
  type: TYPE_NORMAL
- en: const notes = require('./notes.js');
  prefs: []
  type: TYPE_NORMAL
- en: var user = os.userInfo();
  prefs: []
  type: TYPE_NORMAL
- en: fs.appendFile('greetings.txt', `Hello ${user.username}!`);
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: console.log('Starting app.js');
  prefs: []
  type: TYPE_NORMAL
- en: const fs = require('fs');
  prefs: []
  type: TYPE_NORMAL
- en: const os = require('os');
  prefs: []
  type: TYPE_NORMAL
- en: // const notes = require('./notes.js');
  prefs: []
  type: TYPE_NORMAL
- en: var user = os.userInfo();
  prefs: []
  type: TYPE_NORMAL
- en: fs.appendFile('greetings.txt', `Hello ${user.username}!`);
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: console.log('Starting notes.js');
  prefs: []
  type: TYPE_NORMAL
- en: console.log(module);
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: console.log('Starting notes.js');
  prefs: []
  type: TYPE_NORMAL
- en: module.exports.age = 25;
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: console.log('Starting app.js');
  prefs: []
  type: TYPE_NORMAL
- en: const fs = require('fs');
  prefs: []
  type: TYPE_NORMAL
- en: const os = require('os');
  prefs: []
  type: TYPE_NORMAL
- en: const notes = require('./notes.js');
  prefs: []
  type: TYPE_NORMAL
- en: var user = os.userInfo();
  prefs: []
  type: TYPE_NORMAL
- en: fs.appendFile('greetings.txt', `Hello ${user.username}! You are ${notes.age}.`);
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: console.log('Starting notes.js');
  prefs: []
  type: TYPE_NORMAL
- en: module.exports.addNote = function () {
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: console.log('Starting notes.js');
  prefs: []
  type: TYPE_NORMAL
- en: module.exports.addNote = () => {
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: console.log('Starting notes.js');
  prefs: []
  type: TYPE_NORMAL
- en: module.exports.addNote = () => {
  prefs: []
  type: TYPE_NORMAL
- en: console.log('addNote');
  prefs: []
  type: TYPE_NORMAL
- en: return 'New note';
  prefs: []
  type: TYPE_NORMAL
- en: '};'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: console.log('Starting app.js');
  prefs: []
  type: TYPE_NORMAL
- en: const fs = require('fs');
  prefs: []
  type: TYPE_NORMAL
- en: const os = require('os');
  prefs: []
  type: TYPE_NORMAL
- en: const notes = require('./notes.js');
  prefs: []
  type: TYPE_NORMAL
- en: // var user = os.userInfo();
  prefs: []
  type: TYPE_NORMAL
- en: //
  prefs: []
  type: TYPE_NORMAL
- en: // fs.appendFile('greetings.txt', `Hello ${user.username}! You are ${notes.age}.`);
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: console.log('Starting app.js');
  prefs: []
  type: TYPE_NORMAL
- en: const fs = require('fs');
  prefs: []
  type: TYPE_NORMAL
- en: const os = require('os');
  prefs: []
  type: TYPE_NORMAL
- en: const notes = require('./notes.js');
  prefs: []
  type: TYPE_NORMAL
- en: var res = notes.addNote();
  prefs: []
  type: TYPE_NORMAL
- en: // var user = os.userInfo();
  prefs: []
  type: TYPE_NORMAL
- en: //
  prefs: []
  type: TYPE_NORMAL
- en: // fs.appendFile('greetings.txt', `Hello ${user.username}! You are ${notes.age}.`);
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: console.log('Starting app.js');
  prefs: []
  type: TYPE_NORMAL
- en: const fs = require('fs');
  prefs: []
  type: TYPE_NORMAL
- en: const os = require('os');
  prefs: []
  type: TYPE_NORMAL
- en: const notes = require('./notes.js');
  prefs: []
  type: TYPE_NORMAL
- en: var res = notes.addNote();
  prefs: []
  type: TYPE_NORMAL
- en: console.log(res);
  prefs: []
  type: TYPE_NORMAL
- en: // var user = os.userInfo();
  prefs: []
  type: TYPE_NORMAL
- en: //
  prefs: []
  type: TYPE_NORMAL
- en: // fs.appendFile('greetings.txt', `Hello ${user.username}! You are ${notes.age}.`);
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: console.log('Starting notes.js');
  prefs: []
  type: TYPE_NORMAL
- en: module.exports.addNote = () => {
  prefs: []
  type: TYPE_NORMAL
- en: console.log('addNote');
  prefs: []
  type: TYPE_NORMAL
- en: return 'New note';
  prefs: []
  type: TYPE_NORMAL
- en: '};'
  prefs: []
  type: TYPE_NORMAL
- en: module.exports.add =
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: console.log('Starting notes.js');
  prefs: []
  type: TYPE_NORMAL
- en: module.exports.addNote = () => {
  prefs: []
  type: TYPE_NORMAL
- en: console.log('addNote');
  prefs: []
  type: TYPE_NORMAL
- en: return 'New note';
  prefs: []
  type: TYPE_NORMAL
- en: '};'
  prefs: []
  type: TYPE_NORMAL
- en: module.exports.add = (a, b) => {
  prefs: []
  type: TYPE_NORMAL
- en: '};'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: console.log('Starting notes.js');
  prefs: []
  type: TYPE_NORMAL
- en: module.exports.addNote = () => {
  prefs: []
  type: TYPE_NORMAL
- en: console.log('addNote');
  prefs: []
  type: TYPE_NORMAL
- en: return 'New note';
  prefs: []
  type: TYPE_NORMAL
- en: '};'
  prefs: []
  type: TYPE_NORMAL
- en: module.exports.add = (a, b) => {
  prefs: []
  type: TYPE_NORMAL
- en: return a + b;
  prefs: []
  type: TYPE_NORMAL
- en: '};'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: console.log('Starting app.js');
  prefs: []
  type: TYPE_NORMAL
- en: const fs = require('fs');
  prefs: []
  type: TYPE_NORMAL
- en: const os = require('os');
  prefs: []
  type: TYPE_NORMAL
- en: const notes = require('./notes.js');
  prefs: []
  type: TYPE_NORMAL
- en: console.log('Result:', notes.add(9, -2));
  prefs: []
  type: TYPE_NORMAL
- en: // var user = os.userInfo();
  prefs: []
  type: TYPE_NORMAL
- en: //
  prefs: []
  type: TYPE_NORMAL
- en: // fs.appendFile('greetings.txt', `Hello ${user.username}! You are ${notes.age}.`);
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: '{'
  prefs: []
  type: TYPE_NORMAL
- en: '"name": "notes-node",'
  prefs: []
  type: TYPE_NORMAL
- en: '"version": "1.0.0",'
  prefs: []
  type: TYPE_NORMAL
- en: '"description": "",'
  prefs: []
  type: TYPE_NORMAL
- en: '"main": "app.js",'
  prefs: []
  type: TYPE_NORMAL
- en: '"scripts": {'
  prefs: []
  type: TYPE_NORMAL
- en: '"test": "echo \"Error: no test specified\" && exit 1"'
  prefs: []
  type: TYPE_NORMAL
- en: '},'
  prefs: []
  type: TYPE_NORMAL
- en: '"author": "",'
  prefs: []
  type: TYPE_NORMAL
- en: '"license": "ISC"'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: npm install loadsh --save
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: '{'
  prefs: []
  type: TYPE_NORMAL
- en: '"name": "notes-node",'
  prefs: []
  type: TYPE_NORMAL
- en: '"version": "1.0.0",'
  prefs: []
  type: TYPE_NORMAL
- en: '"description": "",'
  prefs: []
  type: TYPE_NORMAL
- en: '"main": "app.js",'
  prefs: []
  type: TYPE_NORMAL
- en: '"scripts": {'
  prefs: []
  type: TYPE_NORMAL
- en: '"test": "echo \"Error: no test specified\" && exit 1"'
  prefs: []
  type: TYPE_NORMAL
- en: '},'
  prefs: []
  type: TYPE_NORMAL
- en: '"author": "",'
  prefs: []
  type: TYPE_NORMAL
- en: '"license": "ISC",'
  prefs: []
  type: TYPE_NORMAL
- en: '"dependencies": {'
  prefs: []
  type: TYPE_NORMAL
- en: '"lodash": "^4.17.4"'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: console.log('Starting app.js');
  prefs: []
  type: TYPE_NORMAL
- en: const fs = require('fs');
  prefs: []
  type: TYPE_NORMAL
- en: const os = require('os');
  prefs: []
  type: TYPE_NORMAL
- en: const _ = require('lodash');
  prefs: []
  type: TYPE_NORMAL
- en: const notes = require('./notes.js');
  prefs: []
  type: TYPE_NORMAL
- en: console.log('Result:', notes.add(9, -2));
  prefs: []
  type: TYPE_NORMAL
- en: // var user = os.userInfo();
  prefs: []
  type: TYPE_NORMAL
- en: //
  prefs: []
  type: TYPE_NORMAL
- en: // fs.appendFile('greetings.txt', `Hello ${user.username}! You are ${notes.age}.`);
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: console.log('Starting app.js');
  prefs: []
  type: TYPE_NORMAL
- en: const fs = require('fs');
  prefs: []
  type: TYPE_NORMAL
- en: const os = require('os');
  prefs: []
  type: TYPE_NORMAL
- en: const _ = require('lodash');
  prefs: []
  type: TYPE_NORMAL
- en: const notes = require('./notes.js');
  prefs: []
  type: TYPE_NORMAL
- en: console.log('Result:', notes.add(9, -2));
  prefs: []
  type: TYPE_NORMAL
- en: // var user = os.userInfo();
  prefs: []
  type: TYPE_NORMAL
- en: //
  prefs: []
  type: TYPE_NORMAL
- en: // fs.appendFile('greetings.txt', `Hello ${user.username}! You are ${notes.age}.`);
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: console.log('Starting app.js');
  prefs: []
  type: TYPE_NORMAL
- en: const fs = require('fs');
  prefs: []
  type: TYPE_NORMAL
- en: const os = require('os');
  prefs: []
  type: TYPE_NORMAL
- en: const _ = require('lodash');
  prefs: []
  type: TYPE_NORMAL
- en: const notes = require('./notes.js');
  prefs: []
  type: TYPE_NORMAL
- en: console.log(_.isString(true));
  prefs: []
  type: TYPE_NORMAL
- en: console.log(_.isString('Gary'));
  prefs: []
  type: TYPE_NORMAL
- en: // console.log('Result:', notes.add(9, -2));
  prefs: []
  type: TYPE_NORMAL
- en: // var user = os.userInfo();
  prefs: []
  type: TYPE_NORMAL
- en: //
  prefs: []
  type: TYPE_NORMAL
- en: // fs.appendFile('greetings.txt', `Hello ${user.username}! You are ${notes.age}.`);
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: console.log('Starting app.js');
  prefs: []
  type: TYPE_NORMAL
- en: const fs = require('fs');
  prefs: []
  type: TYPE_NORMAL
- en: const os = require('os');
  prefs: []
  type: TYPE_NORMAL
- en: const _ = require('lodash');
  prefs: []
  type: TYPE_NORMAL
- en: const notes = require('./notes.js');
  prefs: []
  type: TYPE_NORMAL
- en: // console.log(_.isString(true));
  prefs: []
  type: TYPE_NORMAL
- en: // console.log(_.isString('Gary'));
  prefs: []
  type: TYPE_NORMAL
- en: var filteredArray = _.uniq(['Gary', 1, 'Gary', 1, 2, 3, 4]);
  prefs: []
  type: TYPE_NORMAL
- en: console.log();
  prefs: []
  type: TYPE_NORMAL
- en: // console.log('Result:', notes.add(9, -2));
  prefs: []
  type: TYPE_NORMAL
- en: // var user = os.userInfo();
  prefs: []
  type: TYPE_NORMAL
- en: //
  prefs: []
  type: TYPE_NORMAL
- en: // fs.appendFile('greetings.txt', `Hello ${user.username}! You are ${notes.age}.`);
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: console.log('Starting app.js');
  prefs: []
  type: TYPE_NORMAL
- en: const fs = require('fs');
  prefs: []
  type: TYPE_NORMAL
- en: const os = require('os');
  prefs: []
  type: TYPE_NORMAL
- en: const _ = require('lodash');
  prefs: []
  type: TYPE_NORMAL
- en: const notes = require('./notes.js');
  prefs: []
  type: TYPE_NORMAL
- en: // console.log(_.isString(true));
  prefs: []
  type: TYPE_NORMAL
- en: // console.log(_.isString('Gary'));
  prefs: []
  type: TYPE_NORMAL
- en: var filteredArray = _.uniq(['Gary', 1, 'Gary', 1, 2, 3, 4]);
  prefs: []
  type: TYPE_NORMAL
- en: console.log(filteredArray);
  prefs: []
  type: TYPE_NORMAL
- en: // console.log('Result:', notes.add(9, -2));
  prefs: []
  type: TYPE_NORMAL
- en: // var user = os.userInfo();
  prefs: []
  type: TYPE_NORMAL
- en: //
  prefs: []
  type: TYPE_NORMAL
- en: // fs.appendFile('greetings.txt', `Hello ${user.username}! You are ${notes.age}.`);
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: '{'
  prefs: []
  type: TYPE_NORMAL
- en: '"name": "notes-node",'
  prefs: []
  type: TYPE_NORMAL
- en: '"version": "1.0.0",'
  prefs: []
  type: TYPE_NORMAL
- en: '"description": "",'
  prefs: []
  type: TYPE_NORMAL
- en: '"main": "app.js",'
  prefs: []
  type: TYPE_NORMAL
- en: '"scripts": {'
  prefs: []
  type: TYPE_NORMAL
- en: '"test": "echo \"Error: no test specified\" && exit 1"'
  prefs: []
  type: TYPE_NORMAL
- en: '},'
  prefs: []
  type: TYPE_NORMAL
- en: '"author": "",'
  prefs: []
  type: TYPE_NORMAL
- en: '"license": "ISC",'
  prefs: []
  type: TYPE_NORMAL
- en: '"dependencies": {'
  prefs: []
  type: TYPE_NORMAL
- en: '"lodash": "^4.17.4"'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: '{'
  prefs: []
  type: TYPE_NORMAL
- en: '"name": "notes-node",'
  prefs: []
  type: TYPE_NORMAL
- en: '"version": "1.0.0",'
  prefs: []
  type: TYPE_NORMAL
- en: '"description": "",'
  prefs: []
  type: TYPE_NORMAL
- en: '"main": "app.js",'
  prefs: []
  type: TYPE_NORMAL
- en: '"scripts": {'
  prefs: []
  type: TYPE_NORMAL
- en: '"test": "echo \"Error: no test specified\" && exit 1"'
  prefs: []
  type: TYPE_NORMAL
- en: '},'
  prefs: []
  type: TYPE_NORMAL
- en: '"author": "",'
  prefs: []
  type: TYPE_NORMAL
- en: '"license": "ISC",'
  prefs: []
  type: TYPE_NORMAL
- en: '"dependencies": {'
  prefs: []
  type: TYPE_NORMAL
- en: '"lodash": "^4.17.4"'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: npm install nodemon -g
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: console.log('Starting app.js');
  prefs: []
  type: TYPE_NORMAL
- en: const fs = require('fs');
  prefs: []
  type: TYPE_NORMAL
- en: const os = require('os');
  prefs: []
  type: TYPE_NORMAL
- en: const _ = require('lodash');
  prefs: []
  type: TYPE_NORMAL
- en: const notes = require('./notes.js');
  prefs: []
  type: TYPE_NORMAL
- en: // console.log(_.isString(true));
  prefs: []
  type: TYPE_NORMAL
- en: // console.log(_.isString('Gary'));
  prefs: []
  type: TYPE_NORMAL
- en: var filteredArray = _.uniq(['Mike']);
  prefs: []
  type: TYPE_NORMAL
- en: console.log(filteredArray);
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: console.log('Starting app.js');
  prefs: []
  type: TYPE_NORMAL
- en: const fs = require('fs');
  prefs: []
  type: TYPE_NORMAL
- en: const _ = require('lodash');
  prefs: []
  type: TYPE_NORMAL
- en: const notes = require('./notes.js');
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: console.log('Starting notes.js');
  prefs: []
  type: TYPE_NORMAL
- en: module.exports.addNote = () => {
  prefs: []
  type: TYPE_NORMAL
- en: console.log('addNote');
  prefs: []
  type: TYPE_NORMAL
- en: return 'New note';
  prefs: []
  type: TYPE_NORMAL
- en: '};'
  prefs: []
  type: TYPE_NORMAL
- en: module.exports.add = (a, b) => {
  prefs: []
  type: TYPE_NORMAL
- en: return a + b;
  prefs: []
  type: TYPE_NORMAL
- en: '};'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: node app.js add
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: node app.js remove
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: node app.js list
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: console.log('Starting app.js');
  prefs: []
  type: TYPE_NORMAL
- en: const fs = require('fs');
  prefs: []
  type: TYPE_NORMAL
- en: const _ = require('lodash');
  prefs: []
  type: TYPE_NORMAL
- en: const notes = require('./notes.js');
  prefs: []
  type: TYPE_NORMAL
- en: console.log(process.argv);
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: var command = process.argv[2];
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: 'console.log(''Command: '' , command);'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: console.log('Starting app.js');
  prefs: []
  type: TYPE_NORMAL
- en: const fs = require('fs');
  prefs: []
  type: TYPE_NORMAL
- en: const _ = require('lodash');
  prefs: []
  type: TYPE_NORMAL
- en: const notes = require('./notes.js');
  prefs: []
  type: TYPE_NORMAL
- en: var command = process.argv[2];
  prefs: []
  type: TYPE_NORMAL
- en: 'console.log(''Command: '', command);'
  prefs: []
  type: TYPE_NORMAL
- en: if (command === 'add')
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: console.log('Starting app.js');
  prefs: []
  type: TYPE_NORMAL
- en: const fs = require('fs');
  prefs: []
  type: TYPE_NORMAL
- en: const _ = require('lodash');
  prefs: []
  type: TYPE_NORMAL
- en: const notes = require('./notes.js');
  prefs: []
  type: TYPE_NORMAL
- en: var command = process.argv[2];
  prefs: []
  type: TYPE_NORMAL
- en: 'console.log(''Command: '', command);'
  prefs: []
  type: TYPE_NORMAL
- en: if (command === 'add') {
  prefs: []
  type: TYPE_NORMAL
- en: console.log('Adding new note');
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: console.log('Starting app.js');
  prefs: []
  type: TYPE_NORMAL
- en: const fs = require('fs');
  prefs: []
  type: TYPE_NORMAL
- en: const _ = require('lodash');
  prefs: []
  type: TYPE_NORMAL
- en: const notes = require('./notes.js');
  prefs: []
  type: TYPE_NORMAL
- en: var command = process.argv[2];
  prefs: []
  type: TYPE_NORMAL
- en: 'console.log(''Command: '', command);'
  prefs: []
  type: TYPE_NORMAL
- en: if (command === 'add') {
  prefs: []
  type: TYPE_NORMAL
- en: console.log('Adding new note');
  prefs: []
  type: TYPE_NORMAL
- en: '} else if (command === ''list'')'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: console.log('Starting app.js');
  prefs: []
  type: TYPE_NORMAL
- en: const fs = require('fs');
  prefs: []
  type: TYPE_NORMAL
- en: const _ = require('lodash');
  prefs: []
  type: TYPE_NORMAL
- en: const notes = require('./notes.js');
  prefs: []
  type: TYPE_NORMAL
- en: var command = process.argv[2];
  prefs: []
  type: TYPE_NORMAL
- en: 'console.log(''Command: '', command);'
  prefs: []
  type: TYPE_NORMAL
- en: if (command === 'add') {
  prefs: []
  type: TYPE_NORMAL
- en: console.log('Adding new note');
  prefs: []
  type: TYPE_NORMAL
- en: '} else if (command === ''list'') {'
  prefs: []
  type: TYPE_NORMAL
- en: console.log('Listing all notes');
  prefs: []
  type: TYPE_NORMAL
- en: '} else {'
  prefs: []
  type: TYPE_NORMAL
- en: console.log('Command not recognized');
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: if (command === 'add') {
  prefs: []
  type: TYPE_NORMAL
- en: console.log('Adding new note');
  prefs: []
  type: TYPE_NORMAL
- en: '} else if (command === ''list'') {'
  prefs: []
  type: TYPE_NORMAL
- en: console.log('Listing all notes');
  prefs: []
  type: TYPE_NORMAL
- en: '} else {'
  prefs: []
  type: TYPE_NORMAL
- en: console.log('Command not recognized');
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs: []
  type: TYPE_PRE
- en: console.log('Starting app.js');
  prefs: []
  type: TYPE_NORMAL
- en: const fs = require('fs');
  prefs: []
  type: TYPE_NORMAL
- en: const _ = require('lodash');
  prefs: []
  type: TYPE_NORMAL
- en: const notes = require('./notes.js');
  prefs: []
  type: TYPE_NORMAL
- en: var command = process.argv[2];
  prefs: []
  type: TYPE_NORMAL
- en: 'console.log(''Command: '', command);'
  prefs: []
  type: TYPE_NORMAL
- en: if (command === 'add') {
  prefs: []
  type: TYPE_NORMAL
- en: console.log('Adding new note');
  prefs: []
  type: TYPE_NORMAL
- en: '} else if (command === ''list'') {'
  prefs: []
  type: TYPE_NORMAL
- en: console.log('Listing all notes');
  prefs: []
  type: TYPE_NORMAL
- en: '} else if () {'
  prefs: []
  type: TYPE_NORMAL
- en: '} else {'
  prefs: []
  type: TYPE_NORMAL
- en: console.log('Command not recognized');
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs: []
  type: TYPE_PRE
- en: console.log('Starting app.js');
  prefs: []
  type: TYPE_NORMAL
- en: const fs = require('fs');
  prefs: []
  type: TYPE_NORMAL
- en: const _ = require('lodash');
  prefs: []
  type: TYPE_NORMAL
- en: const notes = require('./notes.js');
  prefs: []
  type: TYPE_NORMAL
- en: var command = process.argv[2];
  prefs: []
  type: TYPE_NORMAL
- en: 'console.log(''Command: '', command);'
  prefs: []
  type: TYPE_NORMAL
- en: if (command === 'add') {
  prefs: []
  type: TYPE_NORMAL
- en: console.log('Adding new note');
  prefs: []
  type: TYPE_NORMAL
- en: '} else if (command === ''list'') {'
  prefs: []
  type: TYPE_NORMAL
- en: console.log('Listing all notes');
  prefs: []
  type: TYPE_NORMAL
- en: '} else if (command === ''read'') {'
  prefs: []
  type: TYPE_NORMAL
- en: '} else {'
  prefs: []
  type: TYPE_NORMAL
- en: console.log('Command not recognized');
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs: []
  type: TYPE_PRE
- en: console.log('Starting app.js');
  prefs: []
  type: TYPE_NORMAL
- en: const fs = require('fs');
  prefs: []
  type: TYPE_NORMAL
- en: const _ = require('lodash');
  prefs: []
  type: TYPE_NORMAL
- en: const notes = require('./notes.js');
  prefs: []
  type: TYPE_NORMAL
- en: var command = process.argv[2];
  prefs: []
  type: TYPE_NORMAL
- en: 'console.log(''Command: '', command);'
  prefs: []
  type: TYPE_NORMAL
- en: if (command === 'add') {
  prefs: []
  type: TYPE_NORMAL
- en: console.log('Adding new note');
  prefs: []
  type: TYPE_NORMAL
- en: '} else if (command === ''list'') {'
  prefs: []
  type: TYPE_NORMAL
- en: console.log('Listing all notes');
  prefs: []
  type: TYPE_NORMAL
- en: '} else if (command === ''read'') {'
  prefs: []
  type: TYPE_NORMAL
- en: console.log('Reading note');
  prefs: []
  type: TYPE_NORMAL
- en: '} else {'
  prefs: []
  type: TYPE_NORMAL
- en: console.log('Command not recognized');
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs: []
  type: TYPE_PRE
- en: if (command === 'add') {
  prefs: []
  type: TYPE_NORMAL
- en: console.log('Adding new note');
  prefs: []
  type: TYPE_NORMAL
- en: '} else if (command === ''list'') {'
  prefs: []
  type: TYPE_NORMAL
- en: console.log('Listing all notes');
  prefs: []
  type: TYPE_NORMAL
- en: '} else if (command === ''read'') {'
  prefs: []
  type: TYPE_NORMAL
- en: console.log('Reading note');
  prefs: []
  type: TYPE_NORMAL
- en: '} else {'
  prefs: []
  type: TYPE_NORMAL
- en: console.log('Command not recognized');
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs: []
  type: TYPE_PRE
- en: console.log('Starting app.js');
  prefs: []
  type: TYPE_NORMAL
- en: const fs = require('fs');
  prefs: []
  type: TYPE_NORMAL
- en: const _ = require('lodash');
  prefs: []
  type: TYPE_NORMAL
- en: const notes = require('./notes.js');
  prefs: []
  type: TYPE_NORMAL
- en: var command = process.argv[2];
  prefs: []
  type: TYPE_NORMAL
- en: 'console.log(''Command: '', command);'
  prefs: []
  type: TYPE_NORMAL
- en: if (command === 'add') {
  prefs: []
  type: TYPE_NORMAL
- en: console.log('Adding new note');
  prefs: []
  type: TYPE_NORMAL
- en: '} else if (command === ''list'') {'
  prefs: []
  type: TYPE_NORMAL
- en: console.log('Listing all notes');
  prefs: []
  type: TYPE_NORMAL
- en: '} else if (command === ''read'') {'
  prefs: []
  type: TYPE_NORMAL
- en: console.log('Reading note');
  prefs: []
  type: TYPE_NORMAL
- en: '} else if (command == ''remove'') {'
  prefs: []
  type: TYPE_NORMAL
- en: console.log('Removing note');
  prefs: []
  type: TYPE_NORMAL
- en: '} else {'
  prefs: []
  type: TYPE_NORMAL
- en: console.log('Command not recognized');
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE63]'
  prefs: []
  type: TYPE_PRE
- en: console.log(process.argv);
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE64]'
  prefs: []
  type: TYPE_PRE
- en: node app.js remove --title
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE65]'
  prefs: []
  type: TYPE_PRE
- en: node app.js remove --title=secrets
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE66]'
  prefs: []
  type: TYPE_PRE
- en: node app.js remove --title="secrets 2"
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE67]'
  prefs: []
  type: TYPE_PRE
- en: node app.js remove --title="secrets 2"
  prefs: []
  type: TYPE_NORMAL
- en: '```'
  prefs: []
  type: TYPE_NORMAL
- en: 'When I run the command, you can see in the following code output that we have
    our two arguments:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/1cb82daa-4c24-4774-873c-9a3f6872e51d.png)'
  prefs: []
  type: TYPE_IMG
- en: These are the arguments that we don't need, then we have our `remove` command,
    which is the third one, and we now have a new fourth string, the title that is
    equal to `secrets 2`. And our argument was successfully passed into the application.
    The problem is that it's not very easy to use. In the fourth string, we have to
    parse out the key, which is `title`, and the value, which is `secrets 2`.
  prefs: []
  type: TYPE_NORMAL
- en: When we used the command, which was the third argument in the previous section,
    it was a lot easier to use inside our app. We simply pulled it out of the arguments
    array and we referenced it by using the command variable and checking whether
    it equaled `add`, `list`, `read`, or `remove`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Things get a lot more complex as we use different styles for passing in the
    arguments. If we rerun the last command with a space instead of an `=` (equals)
    sign, as shown in the following code, which is perfectly valid, our arguments
    array now looks completely different:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/d2a28fa2-df33-4c71-a401-b391ddc66626.png)'
  prefs: []
  type: TYPE_IMG
- en: In the preceding code output, you can see that we have the title as the fourth
    item, and we have the value, which is `secrets 2`, as the fifth, which means we
    have to add other conditions for parsing. And this turns into a pain really quickly,
    which is why we will not do it.
  prefs: []
  type: TYPE_NORMAL
- en: We'll use a third-party module called yargs in the next chapter to make parsing
    the command-line arguments effortless. Instead of having strings, as shown in
    this one or the one we discussed earlier, we'll get an object where the title
    property equals the `secrets 2` string. That will make it super easy to implement
    the rest of the notes application.
  prefs: []
  type: TYPE_NORMAL
- en: Now, parsing certain types of command-line arguments, such as key value pairs,
    becomes a lot more complex, which is why, in the next chapter, we'll be using
    yargs to do just that.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we learned how to use require to load in modules that come
    with Node.js. We created our files for our notes application and required them
    inside `app.js`. We explored how to use built-in modules and we explored how to
    use modules we defined. We found out how to require other files that we created,
    and how to export things such as properties and functions from those files.
  prefs: []
  type: TYPE_NORMAL
- en: We explored npm a little bit, how we can use `npm init` to generate a `package.json`
    file, and how we can install and use third-party modules. Next, we explored the
    `nodemon` module, using it to automatically restart our app as we make changes
    to a file. Last, we learned how to get input from the user, which is needed to
    create the notes application. We learned that we can use command-line arguments
    to pass data into our app.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we'll explore some more interesting Node fundamental concepts,
    including yargs, JSON, and Refactor.
  prefs: []
  type: TYPE_NORMAL
