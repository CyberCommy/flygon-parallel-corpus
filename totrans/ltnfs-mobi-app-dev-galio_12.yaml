- en: '*Chapter 12*: Where To Go from Here?'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Over the last 11 chapters, we have been learning a lot about React Native and
    how to build cross-platform mobile applications with it. We also saw how much
    time we can save with libraries such as Galio, which can quickly help us build
    cool-looking apps with just the default components.
  prefs: []
  type: TYPE_NORMAL
- en: In our React Native journey, we tackled many different situations where we learned
    about the user interface, user experience, Expo, and a lot more. I hope you've
    enjoyed everything we've learned and that you're excited to learn about the many
    ways you can continue learning about and studying React Native.
  prefs: []
  type: TYPE_NORMAL
- en: This chapter is going to focus on how we can start accumulating more knowledge.
    We'll discuss how we should attack any new challenges we might face in the future
    whenever we want to learn something new or just use small libraries for our app
    development.
  prefs: []
  type: TYPE_NORMAL
- en: We'll also discuss Galio's community and what you can do to join and help develop
    Galio. We'll also learn about the importance of open source for the programmer
    community and how it can help you with your career.
  prefs: []
  type: TYPE_NORMAL
- en: I'll also leave you with some tips and tricks you should use whenever life isn't
    easy while developing your cross-platform mobile applications. I hope you will
    revisit this section often to gain some inspiration and motivation for your work.
  prefs: []
  type: TYPE_NORMAL
- en: Last but not least, we'll discuss the importance of books and reading. More
    specifically, we'll discuss why it is so important for us to try and learn as
    many things as possible from a multitude of sources.
  prefs: []
  type: TYPE_NORMAL
- en: I hope you enjoy this chapter and that it gives you the morale boost you need
    to continue learning and having fun with React Native.
  prefs: []
  type: TYPE_NORMAL
- en: 'This chapter will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Always read the documentation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Galio's community
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Tips and tricks
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Always read the documentation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Every time you start a new project or tackle a new programming challenge, it
    is important to make sure you're prepared before actually diving in and starting
    to code. This planning and preparation can come in many forms, but one of the
    most important things you can do is read the documentation of the technologies
    you're working with.
  prefs: []
  type: TYPE_NORMAL
- en: Now, the thing with reading the documentation is learning how to comprehend
    it. In time, with experience, you'll understand what makes great documentation
    and what exactly you wish to gain from it.
  prefs: []
  type: TYPE_NORMAL
- en: Reading technical documentation might not always be easy, especially for a beginner
    programmer. Some terms that are used in one language might be different compared
    to another language. Documentation also contains a lot of jargon terms that you
    might not feel comfortable with at the beginning of your journey.
  prefs: []
  type: TYPE_NORMAL
- en: 'Fear not! I''ve built a list of tips for reading and solving the challenges
    you''ll face in the future:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Chill out!**: Reading the documentation takes time; it''s just like reading
    any book. Don''t hurry straight to the middle of the book to read about all the
    fighting scenes; sometimes, it''s better to read the introduction so that you
    can familiarize yourself with every character''s ability. So, get ready for a
    cool little ride and enjoy every part of it. If you ever get tired, just take
    a break, look out the window, and come back later with a clearer head.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Read multiple sources, like a real journalist**: There will be times when
    the documentation you''re reading might be a bit too advanced for you or simply
    incomplete. Sometimes, you might even encounter some passages you can''t understand.
    Therefore, you''ll need to learn how to move even further than the official documentation.
    Read more articles about that subject from different sources. This will help you
    refresh yourself on the concepts you''re learning about by seeing different perspectives
    and examples.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Review terms**: You''ll always see some new term you''ve never heard of before.
    You should make a list of all the terms you don''t understand and take some time
    to review them. This will help you in the long run, especially while you''re trying
    to learn about more libraries.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Version check**: There are always multiple versions of the library you''re
    trying to study, so make sure you''re reading the correct documentation!'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The reason why you should always go to the technical documentation instead of
    video tutorials first is because, usually, the latter has a very superficial level
    of explaining concepts. Of course, there are great video tutorials out there,
    but it's always better to learn straight from the source and, as I mentioned previously,
    then check out other sources.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are sometimes two parts of any documentation you can find online: *Getting
    Started* or *Guides* and *Docs* or *Documentation*. The first one will always
    have something like a small, simple example of how to use the package or library.
    The purpose of this part is for you to understand as much as possible about the
    context of the package. The *Documentation* part is more like a phone book. It
    is straightforward and you can always find specific information about a specific
    thing, which means that this part is not a guide on how to make sure you''re installing
    or using it correctly – it is more a dictionary filled with definitions for every
    keyword you''d need.'
  prefs: []
  type: TYPE_NORMAL
- en: Now that we've talked about reading the documentation, we should discuss reading
    books. A book can be kind of like the *Getting started* part of a big documentation
    project but with more examples and practical challenges.
  prefs: []
  type: TYPE_NORMAL
- en: Books are really helpful
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Books have the purpose of guiding you through your journey of learning a specific
    skill, or stories of different superheroes fighting bad hackers for a better world.
    But we all know we're talking about technical books here, so let's ignore the
    superheroes for a second.
  prefs: []
  type: TYPE_NORMAL
- en: By reading a book, you're not replacing the documentation as the information
    might be outdated sometimes or too opinionated. However, as I've already mentioned,
    this doesn't mean that a book wouldn't be helpful to you.
  prefs: []
  type: TYPE_NORMAL
- en: It's important to read as many books or articles as possible, especially on
    the subject you're the most interested in. Getting as many opinions and workflows
    as possible will make you a better programmer.
  prefs: []
  type: TYPE_NORMAL
- en: Why do I say a better programmer? I believe that the most important aspect of
    a programmer's life is the level of experience they've garnered by researching,
    practicing, and experimenting with different technologies or libraries.
  prefs: []
  type: TYPE_NORMAL
- en: Books can help you get there. There are a lot of famous programmers with strong
    opinions regarding the way you should write code or even think about it. They've
    all put their knowledge into books and because of that, we should make sure to
    use their knowledge to our advantage.
  prefs: []
  type: TYPE_NORMAL
- en: This is exactly how progress is made in any scientific domain. By absorbing
    what others have thought and building upon it, you'll have the chance to create
    something new.
  prefs: []
  type: TYPE_NORMAL
- en: This is why books are really helpful for us programmers – they are snapshots
    of knowledge. We use them to stay in touch with technologies and ways of thinking.
  prefs: []
  type: TYPE_NORMAL
- en: But that doesn't mean that we can gain all the knowledge necessary for our progress
    just by reading books. They are more like extra guidance. The important thing
    is to try and gain information from as many sources as possible, and books are
    one of those sources that could inspire you more than other sources besides the
    original documentation.
  prefs: []
  type: TYPE_NORMAL
- en: Galio's community
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If you've ever felt like there's no place for you… well, you should try Galio's
    Discord. It'll help you with whatever specific questions you might have.
  prefs: []
  type: TYPE_NORMAL
- en: We're not here to discuss just Discord – we're here to discuss how Galio's community
    might help you learn the basics of helping out with open source projects and how
    this whole experience of helping Galio out can be beneficial to you belonging
    to a community.
  prefs: []
  type: TYPE_NORMAL
- en: There are multiple ways of getting involved with Galio. In this section, we'll
    discuss all the ways you can learn about Galio, engage with the community, and
    also study the way it works. Let's start by talking about Galio's website.
  prefs: []
  type: TYPE_NORMAL
- en: Galio's website
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We've started with Galio's website because this is usually the first or second
    thing people find whenever they're looking for Galio. You can find their website
    by navigating to [https://galio.io/](https://galio.io/).
  prefs: []
  type: TYPE_NORMAL
- en: 'First of all, the website looks pretty cool:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 12.1 – Galio''s website'
  prefs: []
  type: TYPE_NORMAL
- en: '](Images/Figure_12.1_B17074.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 12.1 – Galio's website
  prefs: []
  type: TYPE_NORMAL
- en: As you can see, Galio's color palette is present on the website as well. This
    is where everything starts and where there are links to everything regarding Galio.
    This is where people first begin understanding how Galio works and why it has
    been created.
  prefs: []
  type: TYPE_NORMAL
- en: In the navbar, you can find different links to help you with your journey. The
    second one is for **Starter Kit**. This will take you straight to a GitHub repository
    where you can try out a project full of different screens built with Galio. This
    will help inspire you regarding what Galio can do to help you with your project.
    There are lots of example screens you can learn from or even use in your projects
    as everything is open source and free to use, reuse, and modify as you please.
  prefs: []
  type: TYPE_NORMAL
- en: 'The third link, **Component**, takes you straight to the documentation, something
    that we''ll tackle later in this chapter. Then comes the fourth and fifth links:
    **Examples** and **Premium Themes**. The first one has the purpose of showcasing
    what others have built with Galio''s library; it reaches out to the community
    and helps them by showcasing their work. The second one is there to help other
    developers buy themes built with Galio to maximize their workflow and boost their
    productivity. This is for the developers that have already worked with Galio and
    want to build something really quick and of premium quality.'
  prefs: []
  type: TYPE_NORMAL
- en: You should visit the website and take a look around to see what else you can
    learn and discover about Galio. Now, let's move on to Galio's documentation.
  prefs: []
  type: TYPE_NORMAL
- en: Galio's documentation
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'This is where everybody comes to study and learn about how to use Galio, as
    well as understand every little aspect of Galio. Even though Galio has a guide,
    this documentation is more like straight technical documentation:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 12.2 – Galio''s documentation website'
  prefs: []
  type: TYPE_NORMAL
- en: '](Images/Figure_12.2B17074.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 12.2 – Galio's documentation website
  prefs: []
  type: TYPE_NORMAL
- en: When you head to [https://galio.io/docs/](https://galio.io/docs/), you'll notice
    a big landing page containing some information about Galio. You'll have to scroll
    down to see the navbar and start embracing Galio's documentation.
  prefs: []
  type: TYPE_NORMAL
- en: You should pay attention to the navbar as this is where you can find all of
    Galio's components, as well as lots of information about each one.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s check out the documentation for the `<Block />` component:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 12.3 – Block component overview'
  prefs: []
  type: TYPE_NORMAL
- en: '](Images/Figure_12.3_B17074_new.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 12.3 – Block component overview
  prefs: []
  type: TYPE_NORMAL
- en: As you can see, every component has a description for you to understand more
    about it. Then, you have an example of how to use it and import it into your project.
    There's also a table full of props that you can use with the component that you're
    interested in.
  prefs: []
  type: TYPE_NORMAL
- en: Here, you can information about those props. There's also a description telling
    you what type of styles it applies or what it does.
  prefs: []
  type: TYPE_NORMAL
- en: You can find a lot of information about Galio's component by diving straight
    into the code in Galio's GitHub repository.
  prefs: []
  type: TYPE_NORMAL
- en: Galio's repository
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'You can find Galio''s GitHub repository at [https://github.com/galio-org/galio](https://github.com/galio-org/galio).
    You can find lots of things here. Here, the most powerful thing you can do is
    check out Galio''s sources code:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 12.4 – Galio''s GitHub repository'
  prefs: []
  type: TYPE_NORMAL
- en: '](Images/Figure_12.4_B17074.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 12.4 – Galio's GitHub repository
  prefs: []
  type: TYPE_NORMAL
- en: By doing that, you'll learn how Galio has been created and also debug your code
    in case something is not working the way you were expecting. This is the perfect
    place to take inspiration for a UI library or open source project.
  prefs: []
  type: TYPE_NORMAL
- en: There is also a **Wiki** tab. This is where you can find a lot of extra find
    information about Galio. By extra information, I mean stuff such as the status
    of the development, how to use it, and also a guide on how to contribute to this
    open source project.
  prefs: []
  type: TYPE_NORMAL
- en: There are lots of ways to contribute to Galio and I support you discovering
    your own path to helping out with the library.
  prefs: []
  type: TYPE_NORMAL
- en: The community is what truly supports Galio. Without the community, we wouldn't
    be able to progress as much as we have, and we're always there to embrace you
    if you need help.
  prefs: []
  type: TYPE_NORMAL
- en: This is what it means to be part of a community. It means to help and be helped.
    It means to believe in a project so much that you're willing to support it as
    much as possible. And if you do feel like Galio deserves your support, jump on
    board our ship and let's work together!
  prefs: []
  type: TYPE_NORMAL
- en: Galio's Discord
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A good place to start interacting with people, besides the **Issues** tab when
    asking for help or solving bugs, is Discord. You can find the Discord link on
    our website.
  prefs: []
  type: TYPE_NORMAL
- en: On Discord, everybody is sharing funny pictures or asking questions regarding
    how to use Galio. It's like having a small online family, always helping you out
    with your Galio issues.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we've been through all of this, let's look at some tips and tricks
    for your React Native projects.
  prefs: []
  type: TYPE_NORMAL
- en: Tips and tricks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: React Native is great, but all great things have some minor flaws. Because you'll
    never know what type of error you might encounter, I've decided to create a list
    of the most common errors and fixes. Let's begin!
  prefs: []
  type: TYPE_NORMAL
- en: Import error
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'This error usually comes up whenever you''ve mixed default and named imports.
    Let''s check out the error message:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: As we can see, this error has been caused by a component being imported into
    the main `App.js` file. Unfortunately, the error message does not tell you which
    component or line is breaking the app. To make sure this won't happen again, you'll
    have to double-check your exported/imported components to ensure there are no
    mistakes. Now, let's see how this could have happened.
  prefs: []
  type: TYPE_NORMAL
- en: We know that there are default and named imports, but let's discuss the differences
    between them.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s assume you have the following export:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, this is a named `export`. Because it''s a named `export`, you''d have
    to import it, like so:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, let''s see how a default export works:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Being a default export, you''re allowed to import it without the curly braces.
    Another cool thing is that the name doesn''t matter anymore:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: These two imports work the same, even though we have named them differently.
    This is pretty cool, right? The more you know, the more prepared you are.
  prefs: []
  type: TYPE_NORMAL
- en: React Native version mismatch
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'So, let''s get straight into it and check out the error message:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: This shows up whenever you're trying to build the app. This is because the bundler
    you're using when you're using the `expo start` command inside your terminal is
    using a different JavaScript version of `react-native`. You may encounter this
    after you've upgraded your React Native or Expo SDK version, or even when you're
    trying to connect to the wrong local development server.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s fix this. Begin by closing the Expo server. After that, you should try
    two different things: the first is to remove the `sdkVersion` file from your `app.json`
    file. The second is to make sure that the file matches the value of the `expo`
    dependency in your `package.json` file.'
  prefs: []
  type: TYPE_NORMAL
- en: By having a managed workflow project, you can make sure your `react-native`
    version is correct by running the `expo upgrade` command. If you have a bare workflow
    project, make sure you've upgraded everything correctly.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once you''ve done everything, you should clear your caches by running the following
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Now, we shouldn't see the error again – that's great!
  prefs: []
  type: TYPE_NORMAL
- en: Unable to resolve
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The error message for this is going to be something like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: This error is usually generated by using symbols such as `^` or `~` in your
    `package.json` file.
  prefs: []
  type: TYPE_NORMAL
- en: To solve this, remove those symbols and delete your `node_modules` folder. Upon
    reinstalling all the packages, everything should work fine.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we got ready for our lives as React Native developers. We discussed
    a lot of things that should help you in your journey. I also strongly believe
    I've been able to help you out by inspiring you to pursue knowledge as much as
    possible.
  prefs: []
  type: TYPE_NORMAL
- en: First, we discussed how helpful the documentation is. We also learned how to
    gather information from as many resources as possible. Books are a really important
    part of our education, so make sure to at least try reading some more books on
    React Native.
  prefs: []
  type: TYPE_NORMAL
- en: Then, we discussed Galio and how we can get in touch with the community. We
    saw how many resources we have at our disposal, free to use and also of great
    quality. This will be helpful when we meet again (at least I hope so) on Galio's
    Discord or repository.
  prefs: []
  type: TYPE_NORMAL
- en: After this, we tackled some common React Native issues and learned how to fix
    them. I hope you found this helpful and that you'll come back to these later so
    that you can fix errors quicker than performing a Google search.
  prefs: []
  type: TYPE_NORMAL
- en: At this point, you're ready to start developing projects. You're finally ready
    to come up with an idea and work toward making it a great success. I hope this
    book has helped you and that you've learned as much as possible. I also hope that
    you're a lot more hopeful and hyped for the future. Stay safe and healthy!
  prefs: []
  type: TYPE_NORMAL
