- en: '*Chapter 1*: Introducing New PHP 8 OOP Features'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, you are introduced to new **PHP: Hypertext Preprocessor 8**
    (**PHP 8**) features specific to **Object-Oriented Programming** (**OOP**). The
    chapter features a set of classes that can be used to generate CAPTCHA images
    (**CAPTCHA** is an acronym for **Completely Automated Public Turing test to tell
    Computers and Humans Apart**), clearly illustrating new PHP 8 features and concepts.
    This chapter is critical in helping you quickly incorporate new PHP 8 features
    into your own practice. In doing so, your code will run faster and more efficiently,
    with fewer bugs.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The following topics are covered in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Using constructor property promotion
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Working with attributes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Incorporating match expressions into your program code
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Understanding named arguments
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Exploring new data types
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Improving code using typed properties
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To examine and run the code examples provided in this chapter, the minimum
    recommended hardware is listed here:'
  prefs: []
  type: TYPE_NORMAL
- en: x86_64-based desktop PC or laptop
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 1 gigabyte (**GB**) free disk space
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 4 GB of **random-access memory** (**RAM**)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 500 **kilobits per second** (**Kbps**) or faster internet connection
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'In addition, you will need to install the following software:'
  prefs: []
  type: TYPE_NORMAL
- en: Docker
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Docker Compose
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'This book uses a pre-built Docker image that contains all the needed software
    to create and run the PHP 8 code examples covered in this book. You do not need
    to install PHP, Apache, or MySQL on your computer: just use Docker and the provided
    image.'
  prefs: []
  type: TYPE_NORMAL
- en: 'To set up a test environment to run the code examples, proceed as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Install Docker.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'If you are running Windows, start here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://docs.docker.com/docker-for-windows/install/](https://docs.docker.com/docker-for-windows/install/
    )'
  prefs: []
  type: TYPE_NORMAL
- en: 'If you are on a Mac, start here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://docs.docker.com/docker-for-mac/install/](https://docs.docker.com/docker-for-mac/install/
    )'
  prefs: []
  type: TYPE_NORMAL
- en: 'If you are on Linux, have a look here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://docs.docker.com/engine/install/](https://docs.docker.com/engine/install/
    )'
  prefs: []
  type: TYPE_NORMAL
- en: 'Install Docker Compose. For all operating systems, start here:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[https://docs.docker.com/compose/install/](https://docs.docker.com/compose/install/
    )'
  prefs: []
  type: TYPE_NORMAL
- en: Install the source code associated with this book onto your local computer.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'If you have installed Git, use the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Otherwise, you can simply download the source code from this **Uniform Resource
    Locator** (**URL**): [https://github.com/PacktPublishing/PHP-8-Programming-Tips-Tricks-and-Best-Practices/archive/main.zip](https://github.com/PacktPublishing/PHP-8-Programming-Tips-Tricks-and-Best-Practices/archive/main.zip).
    You can then unzip into a folder you create, which we refer to as `/repo` in this
    book.'
  prefs: []
  type: TYPE_NORMAL
- en: You can now start the Docker daemon running. For Windows or Mac, all you need
    to do is to activate the Docker Desktop app.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'If you are running Ubuntu or Debian Linux, issue this command:'
  prefs: []
  type: TYPE_NORMAL
- en: '`sudo service docker start`'
  prefs: []
  type: TYPE_NORMAL
- en: 'For Red Hat, Fedora, or CentOS, use this command:'
  prefs: []
  type: TYPE_NORMAL
- en: '`sudo systemctl start docker`'
  prefs: []
  type: TYPE_NORMAL
- en: Build a Docker container associated with this book and bring it online. To do
    so, proceed as follows.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: From your local computer, open Command Prompt (terminal window). Change the
    directory to `/repo`. For the first time only, issue the `docker-compose build`
    command to *build* the environment. Note that you might need `root` (administrator)
    privileges to run Docker commands. If this is the case, either run as administrator
    (for Windows) or preface the command with `sudo`. Depending on your connection
    speed, the initial build might take quite a bit of time to complete!
  prefs: []
  type: TYPE_NORMAL
- en: To bring the container up, proceed as follows
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'From your local computer, open Command Prompt (terminal window). Change the
    directory to `/repo`. Bring the Docker container online in background mode by
    running the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Note that you actually don't need to build the container separately. If the
    container is not built when you issue the `docker-compose up` command, it will
    be built automatically. On the other hand, it might be convenient to build the
    container separately, in which case `docker build` will suffice.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here''s a useful command to ensure all containers are running:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: To access the running Docker container web server, proceed as follows.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Open the browser on your local computer. Enter this URL to access PHP 8 code:'
  prefs: []
  type: TYPE_NORMAL
- en: '`http://localhost:8888`'
  prefs: []
  type: TYPE_NORMAL
- en: 'Enter this URL to access PHP 7 code:'
  prefs: []
  type: TYPE_NORMAL
- en: '`http://localhost:7777`'
  prefs: []
  type: TYPE_NORMAL
- en: To open a command shell into the running Docker container, proceed as follows.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'From your local computer, open Command Prompt (terminal window). Issue this
    command to access the PHP 8 container:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Issue this command to access the PHP 7 container:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'When you are finished working with the container, to take it offline open Command
    Prompt (terminal window) from your local computer and issue this command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'The source code for this chapter is located here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://github.com/PacktPublishing/PHP-8-Programming-Tips-Tricks-and-Best-Practices](https://github.com/PacktPublishing/PHP-8-Programming-Tips-Tricks-and-Best-Practices
    )'
  prefs: []
  type: TYPE_NORMAL
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: If your host computer uses **Advanced RISC Machines** (**ARM**) architecture
    (for example, Raspberry Pi), you will need to use a modified Dockerfile.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs: []
  type: TYPE_NORMAL
- en: 'It would be an excellent idea to get a quick overview of Docker technology
    and terms by reviewing this article: [https://docs.docker.com/get-started/.](https://docs.docker.com/get-started/
    )'
  prefs: []
  type: TYPE_NORMAL
- en: We can now begin our discussion by having a look at constructor property promotion.
  prefs: []
  type: TYPE_NORMAL
- en: Using constructor property promotion
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Aside from the **Just-In-Time** (**JIT**) compiler, one of the greatest new
    features introduced in PHP 8 is **constructor property promotion**. This new feature
    combines property declarations and argument lists in the `__construct()` method
    signature, as well as assigning defaults. In this section, you will learn how
    to substantially reduce the amount of coding required in property declarations
    as well as in the `__construct()` method signature and body.
  prefs: []
  type: TYPE_NORMAL
- en: Property promotion syntax
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The syntax needed to invoke constructor property promotion is identical to
    that used in PHP 7 and earlier, with the following differences:'
  prefs: []
  type: TYPE_NORMAL
- en: You need to define a **visibility level**
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You do not have to explicitly declare the properties in advance
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You do not need to make assignments in the body of the `__construct()` method
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Here is a bare-bones example of code that uses constructor property promotion:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'When the preceding code block is executed, this is the output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: This shows that an instance of `Test` type has been created using default values.
    Now, let's have a look at how this feature might save a substantial amount of
    coding.
  prefs: []
  type: TYPE_NORMAL
- en: Using property promotion for code reduction
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In a conventional OOP PHP class, the following three things need to be done:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Declare the properties, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Identify the properties and their data type in the `__construct()` method signature,
    as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'In the body of the `__construct()` method, assign values to properties, like
    this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: As the number of constructor arguments increases, the amount of work you need
    to do also increases significantly. When constructor property promotion is applied,
    the amount of code required to do the same as previously shown is reduced to one-third
    of the original.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s now have a look at the same block of code as shown previously, but rewritten
    using this powerful new PHP 8 feature:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Amazingly, what took 24 lines of code in PHP 7 and earlier can be collapsed
    into eight lines of code using this new PHP 8 feature!
  prefs: []
  type: TYPE_NORMAL
- en: You are completely free to include other code in the constructor. In many cases,
    however, constructor property promotion takes care of everything normally done
    in the `__construct()` method, which means you can literally leave it empty (`{
    }`).
  prefs: []
  type: TYPE_NORMAL
- en: Now, in the next section, you learn about a new feature called attributes.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs: []
  type: TYPE_NORMAL
- en: 'Have a look at the full SingleChar class for PHP 7 here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://github.com/PacktPublishing/PHP-8-Programming-Tips-Tricks-and-Best-Practices/tree/main/src/Php7/Image](https://github.com/PacktPublishing/PHP-8-Programming-Tips-Tricks-and-Best-Practices/tree/main/src/Php7/Image
    )'
  prefs: []
  type: TYPE_NORMAL
- en: 'Also, the equivalent PHP 8 class is found here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://github.com/PacktPublishing/PHP-8-Programming-Tips-Tricks-and-Best-Practices/tree/main/src/Php8/Image](https://github.com/PacktPublishing/PHP-8-Programming-Tips-Tricks-and-Best-Practices/tree/main/src/Php8/Image
    )'
  prefs: []
  type: TYPE_NORMAL
- en: 'For more information on this new feature, have a look at the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://wiki.php.net/rfc/constructor_promotion](https://wiki.php.net/rfc/constructor_promotion
    )'
  prefs: []
  type: TYPE_NORMAL
- en: Working with attributes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Another significant addition to PHP 8 is the addition of a brand-new class and
    language construct known as **attributes**. Simply put, attributes are replacements
    for traditional PHP comment blocks that follow a prescribed syntax. When the PHP
    code is compiled, these attributes are converted internally into `Attribute` class
    instances.
  prefs: []
  type: TYPE_NORMAL
- en: This new feature is not going to have an immediate impact on your code today.
    It will start to become more and more influential, however, as the various PHP
    open source vendors start to incorporate attributes into their code.
  prefs: []
  type: TYPE_NORMAL
- en: The `Attribute` class addresses a potentially significant performance issue
    we discuss in this section, pertaining to an abuse of the traditional PHP comment
    block to provide meta-instructions. Before we dive into that issue and how `Attribute`
    class instances address the problem, we first must review PHP comments.
  prefs: []
  type: TYPE_NORMAL
- en: Overview of PHP comments
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The need for this form of language construct arose with the increasing use
    (and abuse!) of the plain workhorse PHP comment. As you are aware, comments come
    in many forms, including all of the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: The last item, the famous PHP `DocBlock`, is now so widely used it's become
    a de facto standard. The use of DocBlocks is not a bad thing. On the contrary—it's
    often the *only* *way* a developer is able to communicate information about properties,
    classes, and methods. The problem only arises in how it is treated by the PHP
    interpretation process.
  prefs: []
  type: TYPE_NORMAL
- en: PHP DocBlock considerations
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The original intent of the **PHP DocBlock** has been stretched by a number of
    extremely important PHP open-source projects. One striking example is the Doctrine
    **Object-Relational Mapper** (**ORM**) project. Although not mandatory, many developers
    choose to define ORM properties using **annotations** nested inside PHP DocBlocks.
  prefs: []
  type: TYPE_NORMAL
- en: 'Have a look at this partial code example, which defines a class interacting
    with a database table called `events`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: If you were to use this class as part of a Doctrine ORM implementation, Doctrine
    would open the file and parse the DocBlocks, searching for `@ORM` annotations.
    Despite some concerns over the time and resources needed to parse DocBlocks, this
    is an extremely convenient way to define the relationship between object properties
    and database table columns, and is popular with developers who use Doctrine.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs: []
  type: TYPE_NORMAL
- en: Doctrine offers a number of alternatives to this form of ORM, including **Extensible
    Markup Language** (**XML**) and native PHP arrays. For more information, see [https://www.doctrine-project.org/projects/doctrine-orm/en/latest/reference/annotations-reference.html#annotations-reference](https://www.doctrine-project.org/projects/doctrine-orm/en/latest/reference/annotations-reference.html#annotations-reference).
  prefs: []
  type: TYPE_NORMAL
- en: Hidden dangers associated with the misuse of DocBlocks
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: There is yet another danger associated with this abuse of the original purpose
    of a DocBlock. In the `php.ini` file, there is a setting named `opcache.save_comments`.
    If disabled, this would cause the OpCode cache engine (**OPcache**) to *ignore*
    all comments, including DocBlocks. If this setting is in effect, a Doctrine-based
    application using `@ORM` annotations in DocBlocks would malfunction.
  prefs: []
  type: TYPE_NORMAL
- en: Another problem has to do with how comments are parsed—or, more to the point,
    how comments are *not* parsed. In order to use the contents of a comment, the
    PHP application needs to open the file and parse it line by line. This is an expensive
    process in terms of time and resource utilization.
  prefs: []
  type: TYPE_NORMAL
- en: The Attribute class
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In order to address hidden dangers, in PHP 8 a new `Attribute` class is provided.
    Instead of using DocBlocks with annotations, developers can define the equivalent
    in the form of attributes. An advantage of using attributes rather than DocBlocks
    is that they are a *formal part of the language* and are thus tokenized and compiled
    along with the rest of your code.
  prefs: []
  type: TYPE_NORMAL
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, and also in the PHP documentation, reference to *attributes*
    refers to instances of the `Attribute` class.
  prefs: []
  type: TYPE_NORMAL
- en: Actual performance metrics are not yet available that compare the loading of
    PHP code containing DocBlocks with the loading of code that contains attributes.
  prefs: []
  type: TYPE_NORMAL
- en: Although the benefits of this approach are not yet seen, as the various open
    source project vendors start to incorporate attributes into their offerings you
    will start to see an improvement in speed and performance.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is the `Attribute` class definition:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: As you can see from the class definition, the main contribution from this class,
    used internally by PHP 8, is a set of class constants. The constants represent
    bit flags that can be combined using bitwise operators.
  prefs: []
  type: TYPE_NORMAL
- en: Attribute syntax
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Attributes are enclosed using a special syntax borrowed from the **Rust** programming
    language. What goes inside the square brackets is pretty much left to the developer.
    An example can be seen in the following snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Returning to our example of the `SingleChar` class, here''s how it might appear
    using traditional DocBlocks:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, have a look at the same thing using attributes:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: As you can see, in addition to providing a more robust compilation and avoiding
    the hidden dangers mentioned, it's also more efficient in terms of space usage.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs: []
  type: TYPE_NORMAL
- en: 'What goes inside the square brackets does have some restrictions; for example,
    although `#[returns("int")]` is allowed, this is not: `#[return("int")`. The reason
    for this is because `return` is a keyword.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Another example has to do with **union types** (explained in the *Exploring
    new data types* section). You can use `#[param("int|array test")]` in an attribute,
    but this is not allowed: `#[int|array("test")]`. Another peculiarity is that class-level
    attributes must be placed *immediately before* the `class` keyword and after any
    `use` statements.'
  prefs: []
  type: TYPE_NORMAL
- en: Viewing attributes using Reflection
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If you need to get attribute information from a PHP 8 class, the `Reflection`
    extension has been updated to include attribute support. A new `getAttributes()`
    method that returns an array of `ReflectionAttribute` instances has been added.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the following block of code, all the attributes from the `Php8\Image\SingleChar::colorAlloc()`
    method are revealed:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'Here is the output from the code shown in the preceding snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding output shows that attributes can be detected using the `Reflection`
    extension classes. Finally, the actual method is shown in this code example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: Now that you have an idea of how attributes can be used, let's continue our
    coverage of new features by discussing `match` expressions, followed by named
    arguments.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs: []
  type: TYPE_NORMAL
- en: 'For more information on this new feature, have a look at the following web
    page:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://wiki.php.net/rfc/attributes_v2](https://wiki.php.net/rfc/attributes_v2
    )'
  prefs: []
  type: TYPE_NORMAL
- en: 'Also, see this update:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://wiki.php.net/rfc/shorter_attribute_syntax_change](https://wiki.php.net/rfc/shorter_attribute_syntax_change
    )'
  prefs: []
  type: TYPE_NORMAL
- en: 'Information on PHP DocBlocks can be found here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://phpdoc.org/](https://phpdoc.org/ )'
  prefs: []
  type: TYPE_NORMAL
- en: 'For more information about Doctrine ORM, have a look here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://www.doctrine-project.org/projects/orm.html](https://www.doctrine-project.org/projects/orm.html
    )'
  prefs: []
  type: TYPE_NORMAL
- en: 'Documentation on `php.ini` file settings can be found here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://www.php.net/manual/en/ini.list.php](https://www.php.net/manual/en/ini.list.php
    )'
  prefs: []
  type: TYPE_NORMAL
- en: 'Read about PHP Reflection here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://www.php.net/manual/en/language.attributes.reflection.php](https://www.php.net/manual/en/language.attributes.reflection.php
    )'
  prefs: []
  type: TYPE_NORMAL
- en: 'Information about the Rust programming language can be found in this book:
    [https://www.packtpub.com/product/mastering-rust-second-edition/9781789346572](https://www.packtpub.com/product/mastering-rust-second-edition/9781789346572)'
  prefs: []
  type: TYPE_NORMAL
- en: Incorporating match expressions into your program code
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Among the many incredibly useful features introduced in PHP 8, **match expressions**
    definitely stand out. `Match` expressions are a more accurate shorthand syntax
    that can potentially replace the tired old `switch` statement that came directly
    from the C language. In this section, you will learn how to produce cleaner and
    more accurate program code by replacing `switch` statements with `match` expressions.
  prefs: []
  type: TYPE_NORMAL
- en: Match expression general syntax
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '`Match` expression syntax is much like that of an array, where the key is the
    item to match and the value is an expression. Here is the general syntax for `match`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'The expression must be a valid PHP expression. Examples of expressions could
    include any of the following:'
  prefs: []
  type: TYPE_NORMAL
- en: A specific value (for example, `"some text"`)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An operation (for example, `$a + $b`)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An anonymous function or class
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The only limitation is that the expression has to be defined in a single line
    of code. Major differences between `match` and `switch` are summarized here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Table 1.1 – Differences between match and switch'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/Table_1.1_B16992.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Table 1.1 – Differences between match and switch
  prefs: []
  type: TYPE_NORMAL
- en: Other than the differences noted, `match` and `switch` both allow case aggregation,
    as well as providing support for a *default* case.
  prefs: []
  type: TYPE_NORMAL
- en: switch and match examples
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Here is a simple example that renders a currency symbol using `switch`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'When this code is executed, you see the currency symbols for each of the **International
    Organization for Standardization** (**ISO**) currency codes in the `$test` array.
    The same result as that shown in the preceding code snippet can be obtained in
    PHP 8, using the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'Both examples produce an identical output, as illustrated here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: As mentioned previously, both code examples produce a list of currency symbols
    for the list of ISO currency codes stored in the `$test` array.
  prefs: []
  type: TYPE_NORMAL
- en: Complex match example
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Returning to our CAPTCHA project, assume that we wish to introduce distortion
    to make the CAPTCHA characters more difficult to read. To accomplish this goal,
    we introduce a number of **strategy** classes, each producing a different distortion,
    as summarized in this table:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Table 1.2 – CAPTCHA distortion strategy classes'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/Table_1.2_B16992.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Table 1.2 – CAPTCHA distortion strategy classes
  prefs: []
  type: TYPE_NORMAL
- en: 'After randomizing the list of strategies to be employed, we use a `match` expression
    to execute the results, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: 'First we define an **autoloader**, import the classes to be used, and list
    potential strategies to employ, as illustrated in the following code snippet:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, we generate the CAPTCHA phrase, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'We then loop through each character in the CAPTCHA phrase and create a `SingleChar`
    instance. The initial call to `writeFill()` creates the white background canvas.
    We also need to call `shuffle()` to randomize the list of distortion strategies.
    The process is illustrated in the following code snippet:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'We then loop through the strategies and layer distortions upon the original
    image. This is where the `match` expression comes into play. Notice that one strategy
    needs additional lines of code. Because `match` can only support a single expression,
    we simply wrap the multiple lines of code into an **anonymous function**, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'All that remains to be done is to overlay the image with the actual CAPTCHA
    phrase by calling `writeText()` with no arguments. After that, we save the distorted
    image as a **Portable Network Graphics** (**PNG**) file for display, as illustrated
    in the following code snippet:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'Here is the result, running the preceding example from a browser that points
    to the Docker container associated with this book:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.1 – Distorted CAPTCHA using match expression'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/Figure_1.1_B16992.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 1.1 – Distorted CAPTCHA using match expression
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, we''ll have a look at another really great feature: named arguments.'
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs: []
  type: TYPE_NORMAL
- en: 'You can see the original proposal for `match` expressions here: [https://wiki.php.net/rfc/match_expression_v2](https://wiki.php.net/rfc/match_expression_v2
    )'
  prefs: []
  type: TYPE_NORMAL
- en: Understanding named arguments
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Named arguments** represent a way to avoid confusion when calling functions
    or methods with a large number of arguments. This not only helps avoid problems
    with arguments being supplied in an incorrect order, but also helps you to skip
    arguments with defaults. In this section, you will learn how to apply named arguments
    to improve the accuracy of your code, reduce confusion during future maintenance
    cycles, and make your method and function calls more concise. We start by examining
    the generic syntax required to use named arguments.'
  prefs: []
  type: TYPE_NORMAL
- en: Named argument generic syntax
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In order to use named arguments, you need to know the names of the variables
    used in the function or method signature. You then specify that name, without
    the dollar sign, followed by a colon and the value to be supplied, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`$result = function_name( arg1 : <VALUE>, arg2 : <value>);`'
  prefs: []
  type: TYPE_NORMAL
- en: When the `function_name()` function is invoked, the values are passed to the
    arguments corresponding to `arg1`, `arg2`, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: Calling core functions using named arguments
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'One of the most common reasons to use named arguments is when you call a core
    PHP function that has a large number of parameters. As an example, here''s the
    function signature for `setcookie()`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s say that all you really wanted to set were the `name`, `value`, and
    `httponly` arguments. Before PHP 8, you would have had to look up the default
    values and supply them, in order, until you got to the one you wished to override.
    In the following case, we wish to set `httponly` to `TRUE`:'
  prefs: []
  type: TYPE_NORMAL
- en: '`setcookie(''test'',1,0,0,'''','''',FALSE,TRUE);`'
  prefs: []
  type: TYPE_NORMAL
- en: 'Using named arguments, the equivalent in PHP 8 would be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`setcookie(''test'',1,httponly: TRUE);`'
  prefs: []
  type: TYPE_NORMAL
- en: Note that we do not need to name the first two parameters as they are supplied
    in order.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs: []
  type: TYPE_NORMAL
- en: In PHP extensions, named arguments do not always match the names of variables
    you see in the PHP documentation for function or method signatures. As an example,
    the function `imagettftext()` shows a variable `$font_filename` in its function
    signature. If you scroll down a bit further, however, you'll see in the *Parameters*
    section, that the named parameter is `fontfile`.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you encounter a fatal Error: `Unknown named parameter $NAMED_PARAM`. Always
    use the name as listed in the *Parameters* section of the documentation rather
    than the name of the variable in the function or method signature.'
  prefs: []
  type: TYPE_NORMAL
- en: Order independence and documentation
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Another use for named arguments is to provide **order independence**. In addition,
    for certain core PHP functions, the sheer number of parameters presents a documentation
    nightmare.
  prefs: []
  type: TYPE_NORMAL
- en: 'As an example, have a look here at the function signature for `imagefttext()`
    (note that this function is central to the chapter project of producing a secure
    CAPTCHA image):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: As you can imagine, trying to remember the names and order of these parameters
    when reviewing your work 6 months later might be problematic.
  prefs: []
  type: TYPE_NORMAL
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: In PHP 8, the image creation functions (for example, `imagecreate()`) now return
    a `GdImage` object instance instead of a resource. All image functions in the
    GD extension have been rewritten to accommodate this change. There's no need to
    rewrite your code!
  prefs: []
  type: TYPE_NORMAL
- en: 'Accordingly, using named arguments, the following function call would be acceptable
    in PHP 8:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: The code example just shown writes out a string of distorted characters as a
    set of PNG image files. Each character is rotated 10 degrees clockwise with respect
    to its neighboring images. Note how named arguments are applied to make arguments
    to the `imagettftext()` function easier to understand.
  prefs: []
  type: TYPE_NORMAL
- en: Named arguments can also be applied to functions and methods of your own creation.
    In the next section, we cover new data types.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs: []
  type: TYPE_NORMAL
- en: 'A detailed analysis of named arguments can be found here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://wiki.php.net/rfc/named_params](https://wiki.php.net/rfc/named_params
    )'
  prefs: []
  type: TYPE_NORMAL
- en: Exploring new data types
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: One thing any entry-level PHP developer learns is which **data types** PHP has
    available and how to use them. The basic data types include `int` (integer), `float`,
    `bool` (Boolean), and `string`. Complex data types include `array` and `object`.
    In addition, there are other data types such as `NULL` and `resource`. In this
    section, we discuss a few new data types introduced in PHP 8, including union
    types and mixed types.
  prefs: []
  type: TYPE_NORMAL
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: It's extremely important not to confuse a **data type** with a **data format**.
    This section describes data types. A data format, on the other hand, would be
    a way of *representing* data used as part of a transmission or for storage. Examples
    of a data format would include XML, **JavaScript Object Notation** (**JSON**),
    and **YAML Ain't Markup Language** (**YAML**).
  prefs: []
  type: TYPE_NORMAL
- en: Union types
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Unlike other data types such as `int` or `string`, it's important to note that
    there is no data type explicitly called *union*. Rather, when you see a reference
    to **union types**, what is meant is that PHP 8 introduces a new syntax that allows
    you to specify a union of types, instead of just one. Let's now have a look at
    the generic syntax for union types.
  prefs: []
  type: TYPE_NORMAL
- en: Union type syntax
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The generic syntax for union types is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`function ( type|type|type $var) {}`'
  prefs: []
  type: TYPE_NORMAL
- en: 'In place of `type`, you would supply any of the existing data types (for example,
    `float` or `string`). There are a few restrictions, however, which for the most
    part make complete sense. This table summarizes the more important restrictions:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Table 1.3 – Disallowed union types'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/Table_1.3_B16992.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Table 1.3 – Disallowed union types
  prefs: []
  type: TYPE_NORMAL
- en: As you can see from this list of exceptions, defining a union type is primarily
    a matter of common sense.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs: []
  type: TYPE_NORMAL
- en: '**Best practice**: When using union types, **type coercion** (the process whereby
    PHP converts a data type internally to satisfy the requirements of the function)
    can be an issue if strict type checking is not enforced. Accordingly, it''s a
    best practice to add the following at the top of any file where union types are
    used: `declare(strict_types=1);`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'For more information, see the documentation reference here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://www.php.net/manual/en/language.types.declarations.php#language.types.declarations.strict](https://www.php.net/manual/en/language.types.declarations.php#language.types.declarations.strict
    )'
  prefs: []
  type: TYPE_NORMAL
- en: Union type example
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: For a simple illustration, let's return to the `SingleChar` class used as an
    example in this chapter. One of the methods is `colorAlloc()`. This method allocates
    a color from an image, leveraging the `imagecolorallocate()` function. It accepts
    as arguments integer values that represent red, green, and blue.
  prefs: []
  type: TYPE_NORMAL
- en: For the sake of argument, let's say that the first argument could actually be
    an array representing three values—one each for red, green, and blue. In this
    case, the argument type for the first value cannot be `int` otherwise, if an array
    were provided, an error would be thrown if strict type checking were to be turned
    on.
  prefs: []
  type: TYPE_NORMAL
- en: 'In earlier versions of PHP, the only solution would be to remove any type check
    from the first argument and to indicate that multiple types are accepted in the
    associated DocBlock. Here''s how the method might appear in PHP 7:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'The only indication of the data type for the first parameter, `$r`, is the
    `@param array|int $r` DocBlock annotation and the fact that there is no data type
    hint associated with that argument. In PHP 8, taking advantage of union types,
    notice the difference here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding example, in addition to the presence of `attribute` that indicates
    the first argument can accept either an `array` or an `int` type, in the method
    signature itself, the `int|array` union type makes this choice clear.
  prefs: []
  type: TYPE_NORMAL
- en: mixed type
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '`mixed` is another new type introduced in PHP 8\. Unlike a union type, `mixed`
    is an actual data type that represents the ultimate union of types. It''s used
    to indicate that any and all data types are accepted. In a certain sense, PHP
    already has this facility: simply omit the data type altogether, and it''s an
    implied `mixed` type!'
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs: []
  type: TYPE_NORMAL
- en: You will see references to a `mixed` type in the PHP documentation. PHP 8 formalizes
    this representation by making it an actual data type.
  prefs: []
  type: TYPE_NORMAL
- en: Why use a mixed type?
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Hold for a second—you might be thinking at this point: why bother using a `mixed`
    type at all? To put your mind at ease, this is an excellent question, and there
    is no compelling reason to use this type.'
  prefs: []
  type: TYPE_NORMAL
- en: However, by using `mixed` in a function or method signature, you clearly *signal
    your intention* for the use of this parameter. If you were to simply leave the
    data type blank, other developers later using or reviewing your code might think
    that you forgot to add the type. At the very least, they will be uncertain of
    the nature of the untyped argument.
  prefs: []
  type: TYPE_NORMAL
- en: The effect of a mixed type on inheritance
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'As a `mixed` type represents the ultimate example of **widening**, it can be
    used to *widen* the data type definition when one class extends from another.
    Here is an example using a `mixed` type, illustrating this principle:'
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we define the parent class with the more restrictive data type of `object`,
    as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, we define a `Low` class that extends `High`, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: Note in the `Low` class that the data type for the `logVar()`method has been
    *widened* into `mixed`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, we create an instance of `Low` and execute it with test data. As you
    can see from the results shown in the following code snippet, everything works
    fine:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: 'Here is the output from the preceding example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: The preceding code block logs a variety of different data types and then displays
    the contents of the log file. In the process, this shows us there are no inheritance
    issues in PHP 8 when a child class overrides a parent class method and substitutes
    a data type of `mixed` in place of a more restrictive data type, such as `object`.
  prefs: []
  type: TYPE_NORMAL
- en: Next, we have a look at using typed properties.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs: []
  type: TYPE_NORMAL
- en: '**Best practice**: Assign specific data types to all arguments when defining
    functions or methods. If a few different data types are acceptable, define a union
    type. Otherwise, if none of this applies, fall back to a `mixed` type.'
  prefs: []
  type: TYPE_NORMAL
- en: 'For information on union types, see this documentation page:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://wiki.php.net/rfc/union_types_v2](https://wiki.php.net/rfc/union_types_v2
    )'
  prefs: []
  type: TYPE_NORMAL
- en: 'For more information on a `mixed` type, have a look here: [https://wiki.php.net/rfc/mixed_type_v2.](https://wiki.php.net/rfc/mixed_type_v2
    )'
  prefs: []
  type: TYPE_NORMAL
- en: Improving code using typed properties
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the first section of this chapter, *Using constructor property promotion*,
    we discussed how data types can be used to control the type of data supplied as
    arguments to functions or class methods. What this approach fails to do, however,
    is guarantee that the data type never changes. In this section, you will learn
    how assigning a data type at the property level provides stricter control over
    the use of variables in PHP 8.
  prefs: []
  type: TYPE_NORMAL
- en: What are typed properties?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'This extremely important feature was introduced in PHP 7.4 and continues in
    PHP 8\. Simply put, a **typed property** is a class property with a data type
    preassigned. Here is a simple example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: 'In this example, if we attempt to assign a value representing a data type other
    than `int` to `$test->id`, a `Fatal error` is thrown. Here is the output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: As you can see from the preceding output, a `Fatal error` is thrown when the
    wrong data type is assigned to a typed property.
  prefs: []
  type: TYPE_NORMAL
- en: 'You have already been exposed to one form of property typing: **constructor
    property promotion**. All properties defined using constructor property promotion
    are automatically property typed!'
  prefs: []
  type: TYPE_NORMAL
- en: Why is property typing important?
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Typed properties is part of a general trend in PHP first seen in PHP 7\. The
    trend is toward making language refinements that restrict and tighten the use
    of your code. This leads to better code, which means fewer bugs.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following example illustrates the danger of relying solely upon property-type
    hinting to control the data type of properties:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: 'In the preceding example, notice in the `__construct()` method that the `$token`
    property is accidentally converted to a string. Here is the output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: 'Any subsequent code expecting `$token` to be an integer might either fail or
    produce unexpected results. Now, have a look at the same thing in PHP 8 using
    typed properties:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: 'Property typing prevents any change to the preassigned data type from occurring,
    as you can see from the output shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: As you can see from the preceding output, a `Fatal error` is thrown when the
    wrong data type is assigned to a typed property. This example demonstrates that
    not only does assigning a data type to a property prevent misuse when making direct
    assignments, but it also prevents misuse of the property inside class methods
    as well!
  prefs: []
  type: TYPE_NORMAL
- en: Property typing can lead to a reduction in code
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Another beneficial side effect of introducing property typing to your code is
    a potential reduction in the amount of code needed. As an example, consider the
    current practice of marking properties with a visibility of `private` or `protected`,
    and then creating a series of `get` and `set` methods to control access (also
    called *getters* and *setters*).
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is how that might appear:'
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we define a `Test` class with protected properties, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, we define a series of `get` and `set` methods to control access to the
    protected properties, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: 'We then use the `set` methods to assign values, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, we display the results in a table, using the `get` methods to retrieve
    property values, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: 'Here is how that might appear:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Table 1.4 – Output using Get methods'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/Figure_1.2_B16992.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Table 1.4 – Output using Get methods
  prefs: []
  type: TYPE_NORMAL
- en: The main purpose achieved by marking properties as `protected` (or `private`)
    and by defining *getters* and *setters* is to control access. Often, this translates
    into a desire to prevent the property data type from changing. If this is the
    case, the entire infrastructure can be replaced by assigning property types.
  prefs: []
  type: TYPE_NORMAL
- en: 'Simply changing the visibility to `public` alleviates the need for `get` and
    `set` methods; however, it does not prevent the property data from being changed!
    Using PHP 8 property types achieves both goals: it eliminates the need for `get`
    and `set` methods and also prevents the data type from being accidentally changed.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Notice here how much less code is needed to achieve the same results in PHP
    8 using property typing:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: The preceding code example shown produces exactly the same output as the previous
    example and also achieves even better control over property data types. Using
    typed properties, in this example, we achieved a *50% reduction* in the amount
    of code needed to produce the same result!
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs: []
  type: TYPE_NORMAL
- en: '**Best practice**: Use typed properties whenever possible, except in situations
    where you explicitly want to allow the data type to change.'
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, you learned how to write better code using the new PHP 8 data
    types: mixed and union types. You also learned about how using named arguments
    can not only improve the readability of your code but can also help prevent accidental
    misuse of class methods and PHP functions, as well as providing a great way to
    skip over default arguments.'
  prefs: []
  type: TYPE_NORMAL
- en: This chapter also taught you how the new `Attribute` class can be used as an
    eventual replacement for PHP DocBlocks, serving to improve the overall performance
    of your code while providing a solid means of documenting classes, methods, and
    functions.
  prefs: []
  type: TYPE_NORMAL
- en: In addition, we looked at how PHP 8 can greatly reduce the amount of code needed
    by earlier PHP versions by taking advantage of constructor argument promotion
    and typed properties.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, you will learn about new PHP 8 features at the functional
    and procedural level.
  prefs: []
  type: TYPE_NORMAL
