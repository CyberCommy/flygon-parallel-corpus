- en: 'Section 4: Design Patterns and Idioms in C++'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The goal of this section is to expand your C++ repertoire, beyond OOP and other
    necessary skills, to include knowledge of core design patterns. Design patterns
    provide well-proven techniques and strategies to solve recurring types of OO problems.
    This section introduces common design patterns and demonstrates in depth how to
    apply these patterns by building on previous examples within the book in creative
    ways. Each chapter contains detailed code examples to exemplify each pattern.
  prefs: []
  type: TYPE_NORMAL
- en: The initial chapter in this section introduces the idea of design patterns and
    discusses advantages of utilizing such patterns within coding solutions. The initial
    chapter also introduces the Observer pattern and provides an in-depth program
    to appreciate the various components of this pattern.
  prefs: []
  type: TYPE_NORMAL
- en: The next chapter explains the Factory Method pattern, and likewise provides
    detailed programs showing how to implement the Factory Method pattern with and
    without an Object Factory. This chapter additionally compares an Object Factory
    to an Abstract Factory.
  prefs: []
  type: TYPE_NORMAL
- en: The following chapter introduces the Adapter pattern and provides implementation
    strategies and program examples using inheritance versus association to implement
    the Adapter class. Additionally, an adapter as a simple wrapper class is illustrated.
  prefs: []
  type: TYPE_NORMAL
- en: The Singleton pattern is examined in the following chapter. Following a simple
    example, a paired-class implementation is demonstrated with a detailed example.
    Registries to accommodate Singletons are also introduced.
  prefs: []
  type: TYPE_NORMAL
- en: The final chapter in this section and book introduces the pImpl pattern to reduce
    compile time dependencies within your code. A basic implementation is provided
    and then expanded upon using unique pointers. Performance issues are additionally
    explored relating to this pattern.
  prefs: []
  type: TYPE_NORMAL
- en: 'This section includes the following chapters:'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 16*](B15702_16_Final_NM_ePub.xhtml#_idTextAnchor622)*, Using the
    Observer Pattern*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[*Chapter 17*](B15702_17_Final_NM_ePub.xhtml#_idTextAnchor649)*, Applying the
    Factory Pattern*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[*Chapter 18*](B15702_18_Final_NM_ePub.xhtml#_idTextAnchor682)*, Applying the
    Adapter Pattern*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[*Chapter 19*](B15702_19_Final_NM_ePub.xhtml#_idTextAnchor718)*, Using the
    Singleton Pattern*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[*Chapter 20*](B15702_20_Final_NM_ePub.xhtml#_idTextAnchor756)*, Removing Implementation
    Details Using the pImpl Pattern*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
