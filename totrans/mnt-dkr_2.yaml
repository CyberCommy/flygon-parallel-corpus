- en: Chapter 2. Using the Built-in Tools
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In the later chapters of this book, we will explore the monitoring parts of
    the large eco-system that has started to flourish around Docker over the last
    24 months. However, before we press ahead with that, we should take a look at
    what is possible with a vanilla installation of Docker. In this chapter, we will
    cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Using the tools built into Docker to get real-time metrics on container performance
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using standard operating system commands to get metrics on what Docker is doing
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Generating a test load so you can view the metrics changing
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Docker stats
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Since version 1.5, there has been a basic statistic command built into Docker:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: This command will stream details of the resource utilization of your containers
    in real time. The best way to find out about the command is to see it in action.
  prefs: []
  type: TYPE_NORMAL
- en: Running Docker stats
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let''s launch a container using the vagrant environment, which we covered in
    the last chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Now that you are connected to the vagrant server, launch the container using
    the Docker compose file in `/monitoring_docker/Chapter01/01-basic/`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: You have now pulled down and launched a container in the background. The container
    is called `01basic_web_1` and it runs NGINX and PHP serving a single PHP information
    page ([http://php.net/manual/en/function.phpinfo.php](http://php.net/manual/en/function.phpinfo.php)).
  prefs: []
  type: TYPE_NORMAL
- en: 'To check whether everything has been launched as expected, run `docker-compose
    ps`. You should see your single container with `State` of `Up`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, you should be able to see the page containing the output of the PHP
    information at `http://192.168.33.10/` (this IP address is hardcoded into the
    vagrant configuration), if you put it in your local browser:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Running Docker stats](../images/00010.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Now, you have a container up and running; let''s look at some of the basic
    stats. We know from the output of `docker-compose` that our container is called
    `01basic_web_1`, so enter the following command to start streaming statistics
    in your terminal:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'It will take a second to initiate; after this is done, you should see your
    container listed along with the statistics for the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '`CPU %`: This shows you how much of the available CPU resource the container
    is currently using.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`MEM USEAGE/LIMIT`: This tells you how much RAM the container is utilizing;
    it also displays how much allowance the container has. If you haven''t explicitly
    set a limit, it will show the total amount of RAM on the host machine.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`MEM %`: This shows you what percentage of the RAM allowance the container
    is using.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`NET I/O`: This gives a running total of how much bandwidth has been transferred
    in and out of the container.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If you go back to your browser window and start to refresh `http://192.168.33.10/`,
    you will see that the values in each of the columns start to change. To stop streaming
    the statistics, press *Ctrl* + *c*.
  prefs: []
  type: TYPE_NORMAL
- en: Rather than keeping on hitting refresh over and over again, let's generate a
    lot of traffic to `01basic_web_1`, which should put the container under a heavy
    load.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here, we will launch a container that will send 10,000 requests to `01basic_web_1`
    using ApacheBench ([https://httpd.apache.org/docs/2.2/programs/ab.html](https://httpd.apache.org/docs/2.2/programs/ab.html)).
    Although it will take a minute or two to execute, we should run `docker stats`
    as soon as possible:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'After the ApacheBench image has been downloaded and the container that will
    be called `01basic_load` starts, you should see the statistics for both `01basic_web_1`
    and `01basic_load` begin to stream in your terminal:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: After a while, you will notice that most of the statistics for `01basic_load`
    will drop off to zero; this means that the test has completed and that the container
    running the test has exited. The `docker stats` command can only stream statistics
    for the running containers; ones that have exited are no longer running and, therefore,
    do not produce output when running `docker stats`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Exit from `docker stats` using *Ctrl* + *c*; to see the results of the ApacheBench
    command, you can type `docker logs 01basic_load`; you should see something like
    the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Running Docker stats](../images/00011.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: You shouldn't worry if you see any failures like in the preceding output. This
    exercise was purely to demonstrate how to view the statistics of the running containers
    and not to tune a web server to handle the amount of traffic we sent to it using
    ApacheBench.
  prefs: []
  type: TYPE_NORMAL
- en: 'To remove the containers that we launched, run the following commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: To check whether everything has been removed successfully, run `docker ps -a`
    and you should not be able to see any running or exited containers that have `01basic_`
    in their names.
  prefs: []
  type: TYPE_NORMAL
- en: What just happened?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: While running the ApacheBench test, you may have noticed that the CPU utilization
    on the container running NGINX and PHP was high; in the example in the previous
    section, it was using 139.62 percent of the available CPU resource.
  prefs: []
  type: TYPE_NORMAL
- en: As we did not attach any resource limits to the containers we launched, it was
    easy for our test to use all of the available resources on the host **Virtual
    Machine** (**VM**). If this VM was being used by several users, all running their
    own containers, they may have started to notice that their applications had started
    to slow down or, even worse, the applications had started showing errors.
  prefs: []
  type: TYPE_NORMAL
- en: If you ever find yourself in this situation, you can use `docker stats` to help
    track down the culprit.
  prefs: []
  type: TYPE_NORMAL
- en: 'Running `docker stats $(docker ps -q)` will stream the statistics for all the
    currently running containers:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'As you may have noticed, this displays the container ID rather than the name;
    this information should, however, be enough to spot the resource hog so that you
    can quickly stop it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Once stopped, you can then get the name of the rogue container by running the
    following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Alternatively, for more detailed information, you can run `docker inspect 56b459ae9092`,
    which will give you all the information you need on the container.
  prefs: []
  type: TYPE_NORMAL
- en: What about processes?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: One of the great things about Docker is that it isn't really virtualization;
    as mentioned in the previous chapter, it is a great way of isolating processes
    rather than running an entire operating system.
  prefs: []
  type: TYPE_NORMAL
- en: 'This can get confusing when running tools such as `top` or `ps`. To get an
    idea just how confusing this can get, lets launch several containers using `docker-compose`
    and see for ourselves:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Now, we have five web servers that have all been launched from the same image
    using the same configuration. One of the first things I do when logging into a
    server to troubleshoot a problem is run `ps -aux`; this will show all the running
    processes. As you can see, when running the command, there are a lot processes
    listed.
  prefs: []
  type: TYPE_NORMAL
- en: 'Even just trying to look at the processes for NGINX is confusing, as there
    is nothing to differentiate the processes from one container to another, as shown
    in the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![What about processes?](../images/00012.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: So, how can you know which container owns which processes?
  prefs: []
  type: TYPE_NORMAL
- en: Docker top
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'This command lists all the processes that are running within a container; think
    of it as a way of filtering the output of the `ps aux` command we ran on the host
    machine:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Docker top](../images/00013.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'As `docker top` is an implementation of the standard `ps` command, any flags
    you would normally pass to `ps` should work as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Docker exec
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Another way to view what is going on within a container is to enter it. To
    enable you to do this, Docker introduced the `docker exec` command. This allows
    you to spawn an additional process within an already running container and then
    attach to the process; so, if we wanted to look at what is currently running on
    `02multiple_web_3`, we should use the following command spawn a bash shell within
    an already running container:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Once you have an active shell on the container, you will notice that your prompt
    has changed to the container's ID. Your session is now isolated to the container's
    environment, meaning that you will only be able to interact with the processes
    belonging to the container you entered.
  prefs: []
  type: TYPE_NORMAL
- en: 'From here, you can run the `ps aux` or `top` command as you would do on the
    host machine, and only see the processes associated with the container you are
    interested in:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Docker exec](../images/00014.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: To leave the container, type in `exit`, you should see your prompt change back
    in your host machine.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, you can stop and remove the containers by running `docker-compose stop`
    and `docker-compose kill`.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we saw how we can get real-time statistics on our running containers
    and how we can use commands that are familiar to us, to get information on the
    processes that are launched as part of each container.
  prefs: []
  type: TYPE_NORMAL
- en: On the face of it, `docker stats` seems like a really basic piece of functionality
    that isn't really anything more than a tool to help you identify which container
    is using all the resources while a problem is occurring. However, the Docker command
    is actually pulling the information from a quite powerful API.
  prefs: []
  type: TYPE_NORMAL
- en: This API forms the basis for a lot of the monitoring tools we will be looking
    at in the next few chapters.
  prefs: []
  type: TYPE_NORMAL
