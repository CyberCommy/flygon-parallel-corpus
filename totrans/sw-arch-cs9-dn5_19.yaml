- en: '19'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Using Tools to Write Better Code
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As we saw in *Chapter 17*, *Best Practices in Coding C# 9*, coding can be considered
    an art, but writing understandable code is surely more like philosophy. In that
    chapter, we discussed practices that you, as a software architect, need to observe
    for your developers. In this chapter, we will describe the techniques and tools
    for code analysis, so that you have well-written code for your projects.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following topics will be covered in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Identifying well-written code
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Understanding the tools that can be used in the process to make things easier
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Applying extension tools to analyze code
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Checking the final code after analysis
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use case—Implementing code inspection before publishing the application
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: By the end of the chapter, you will be able to define which tools you are going
    to incorporate into your software development life cycle in order to facilitate
    code analysis.
  prefs: []
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter requires the Visual Studio 2019 free Community Edition or better.
    You will find the sample code for this chapter at [https://github.com/PacktPublishing/Software-Architecture-with-C-9-and-.NET-5/tree/master/ch19](https://github.com/PacktPublishing/Software-Architecture-with-C-9-and-.NET-5/tree/master/ch19).
  prefs: []
  type: TYPE_NORMAL
- en: Identifying well-written code
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: It is not easy to define whether code is well-written. The best practices described
    in *Chapter 17*, *Best Practices in Coding C# 9*, can certainly guide you as a
    software architect to define a standard for your team. But even with a standard,
    mistakes will happen, and you will probably find them only after the code is in
    production. The decision to refactor code in production just because it does not
    follow all the standards you define is not an easy one to take, especially if
    the code in question is working properly. Some people conclude that well-written
    code is simply code that works well in production. However, this can surely cause
    damage to the software's life since developers can be inspired by that non-standard
    code.
  prefs: []
  type: TYPE_NORMAL
- en: For this reason, you – as a software architect – need to find ways to enforce
    adherence to the coding standard you've defined. Luckily, nowadays, we have many
    options for tools that can help us with this task. They are regarded as the automation
    of static code analysis. This technique is seen as a great opportunity to improve
    the software developed and to help developers.
  prefs: []
  type: TYPE_NORMAL
- en: The reason your developers will evolve with code analysis is that you start
    to disseminate knowledge between them during code inspections. The tools that
    we have now have the same purpose. Better than that, with Roslyn, they do this
    task while you are writing the code. Roslyn is the compiler platform for .NET,
    and it enables you to develop some tools for analyzing code. These analyzers can
    check style, quality, design, and other issues.
  prefs: []
  type: TYPE_NORMAL
- en: 'For instance, look at the following code. It does not make any sense, but you
    can still see that there are some mistakes:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: The idea of this code is to show you the power of some tools to improve the
    code you are delivering. Let us study each of them in the next section, including
    how to set them up.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding and applying tools that can evaluate C# code
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The evolution of code analysis in Visual Studio is continuous. This means that
    Visual Studio 2019 certainly has more tools for this purpose than Visual Studio
    2017, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: 'One of the issues that you (as a software architect) need to deal with is the
    *coding style of the team*. This certainly results in a better understanding of
    the code. For instance, if you go to **Visual Studio Menu**, **Tools->Options**,
    and then, in the left-hand menu, you go to **Text Editor -> C#**, you will find
    ways to set up how to deal with different code style patterns, and a bad coding
    style is even indicated as an error in the **Code Style** option, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B16756_19_01.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 19.1: Code Style options'
  prefs: []
  type: TYPE_NORMAL
- en: The preceding screenshot suggests that **Avoid unused parameters** was considered
    an error.
  prefs: []
  type: TYPE_NORMAL
- en: 'After this change, the result of the compilation of the same code presented
    at the beginning of the chapter is different, as you can see in the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B16756_19_02.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 19.2: Code Style result'
  prefs: []
  type: TYPE_NORMAL
- en: You can export your coding style configuration and attach it to your project
    so that it will follow the rules you have defined.
  prefs: []
  type: TYPE_NORMAL
- en: 'Another good tool that Visual Studio 2019 provides is **Analyze and Code Cleanup**.
    With this tool, you can set up some code standards that can clean up your code.
    For instance, in the following screenshot, it was set to remove unnecessary code:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B16756_19_03.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 19.3: Configure Code Cleanup'
  prefs: []
  type: TYPE_NORMAL
- en: 'The way you run code cleanup is by selecting it with the help of a right-click
    in the **Solution Explorer** area, over the project where you want to run it.
    After that, this process will run in all the code files you have:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B16756_19_04.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 19.4: Run Code Cleanup'
  prefs: []
  type: TYPE_NORMAL
- en: 'After solving the errors indicated by the Code Style and Code Cleanup tools,
    the sample code we are working on has some minimal simplifications, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: It is worth mentioning that the preceding code has many improvements that still
    need to be addressed. Visual Studio enables you to add additional tools for the
    IDE by installing extensions to it. These tools can help you to improve your code
    quality, since some of them were built to perform code analysis. This section
    will list some free options so that you can decide the one that best fits your
    needs. There are certainly other options and even paid ones. The idea here is
    not to indicate a specific tool but to give you an idea of their abilities.
  prefs: []
  type: TYPE_NORMAL
- en: 'To install these extensions, you will need to find the **Extensions** menu
    in Visual Studio 2019\. Here is a screenshot of the **Manage Extensions** option:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B16756_19_05.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 19.5: Extensions in Visual Studio 2019'
  prefs: []
  type: TYPE_NORMAL
- en: There are many other cool extensions that can improve the productivity and quality
    of your code and solution. Do a search for them in this manager.
  prefs: []
  type: TYPE_NORMAL
- en: After you have selected the extension that will be installed, you will need
    to restart Visual Studio. Most of them are easy to identify after installation
    since they modify the behavior of the IDE. Among them, Microsoft Code Analysis
    2019 and SonarLint for Visual Studio 2019 can be considered good ones, and they
    will be discussed in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Applying extension tools to analyze code
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Although the sample code delivered after the Code Style and Code Cleanup tools
    is better than the code we presented at the beginning of the chapter, it is clearly
    far removed from the best practices discussed in *Chapter 17*, *Best Practices
    in Coding C# 9*. In the next sections, you will be able to check the behavior
    of two extensions that can help you evolve this code: Microsoft Code Analysis
    2019, and SonarLint for Visual Studio 2019.'
  prefs: []
  type: TYPE_NORMAL
- en: Using Microsoft Code Analysis 2019
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This extension is provided by Microsoft DevLabs and is an upgrade to the FxCop
    rules that we used to automate in the past. It can also be added to a project
    as a NuGet package, so it can become a part of the application CI build. Basically,
    it has more than 100 rules for detecting problems in the code as you type it.
  prefs: []
  type: TYPE_NORMAL
- en: 'For instance, just by enabling the extension and rebuilding the small sample
    we are using in this chapter, Code Analysis found a new issue to solve, as you
    can see in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B16756_19_06.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 19.6: Code Analysis usage'
  prefs: []
  type: TYPE_NORMAL
- en: It is worth mentioning that we discussed the usage of empty `try-catch` statements
    as an anti-pattern in *Chapter 17*, *Best Practices in Coding C# 9*. So, it would
    be good for the health of the code if this kind of problem could be exposed in
    this way.
  prefs: []
  type: TYPE_NORMAL
- en: Applying SonarLint for Visual Studio 2019
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'SonarLint is an open source initiative from the Sonar Source community to detect
    bugs and quality issues while you code. There is support for C#, VB.NET, C, C++,
    and JavaScript. The great thing about this extension is that it comes with explanations
    for resolving detected issues, and that is why we say developers learn how to
    code well while using these tools. Check out the following screenshot with the
    analysis undertaken in the sample code:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B16756_19_07.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 19.7: SonarLint usage'
  prefs: []
  type: TYPE_NORMAL
- en: We can verify that this extension is able to point out mistakes and, as promised,
    there is an explanation for each warning. This is useful not only for detecting
    problems, but also for training developers in good coding practices.
  prefs: []
  type: TYPE_NORMAL
- en: Checking the final code after analysis
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Following the analysis of the two extensions, we have finally solved all the
    issues presented. We can check the final code, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: As you can see, the preceding code is not only easier to understand, but it
    is safer and is able to consider different paths of programming since the default
    for `switch-case` was programmed. This pattern was discussed in *Chapter 17*,
    *Best Practices in Coding C# 9*, too, which concludes that best practices can
    be easily followed by using one (or all) of the extensions mentioned in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Use case – Evaluating C# code before publishing an application
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In *Chapter 3*, *Documenting Requirements with Azure DevOps*, we created the
    WWTravelClub repository in the platform. As we saw there, Azure DevOps enables
    continuous integration, and this can be useful. In this section, we will discuss
    more reasons as to why the DevOps concept and the Azure DevOps platform are so
    useful.
  prefs: []
  type: TYPE_NORMAL
- en: For now, the only thing we would like to introduce is the possibility of analyzing
    code after it is committed by the developers, but has not yet been published.
    Nowadays, in a SaaS world for application life cycle tools, this is only possible
    thanks to some of the SaaS code analysis platforms that we have. This use case
    will use Sonar Cloud.
  prefs: []
  type: TYPE_NORMAL
- en: 'Sonar Cloud is free for open source code and can analyze code stored in GitHub,
    Bitbucket, and Azure DevOps. The user needs a registration for these platforms.
    As soon as you log in, assuming your code is stored in Azure DevOps, you can follow
    the steps described in the following article to create the connection between
    your Azure DevOps and Sonar Cloud: [https://sonarcloud.io/documentation/analysis/scan/sonarscanner-for-azure-devops/](https://sonarcloud.io/documentation/analysis/scan/sonarscanner-for-azure-devops/).'
  prefs: []
  type: TYPE_NORMAL
- en: 'After setting up the connection between your project in Azure DevOps and Sonar
    Cloud, you will have a build pipeline like the one that follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B16756_19_08.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 19.8: Sonar Cloud configuration in the Azure build pipeline'
  prefs: []
  type: TYPE_NORMAL
- en: 'It is worth mentioning that C# projects do not have a GUID number, and this
    is required by Sonar Cloud. You can easily generate one using this link ([https://www.guidgenerator.com/](https://www.guidgenerator.com/)),
    and it will need to be placed as in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B16756_19_09.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 19.9: SonarQube project GUID'
  prefs: []
  type: TYPE_NORMAL
- en: 'As soon as you finish the build, the result of the code analysis will be presented
    in Sonar Cloud, as can be seen in the following screenshot. If you want to navigate
    down to this project, you can visit [https://sonarcloud.io/dashboard?id=WWTravelClubNet50](https://sonarcloud.io/dashboard?id=WWTravelClubNet50):'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B16756_19_10.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 19.10: Sonar Cloud results'
  prefs: []
  type: TYPE_NORMAL
- en: Also, by this time, the code analyzed is not yet in the release, so this can
    be really useful for getting the next step of quality before releasing your system.
    You can use this approach as a reference for automating code analysis during committal.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter presented tools that can be used to apply the best practices of
    coding described in *Chapter 17*, *Best Practices in Coding C# 9*. We looked at
    the Roslyn compiler, which enables code analysis at the same time the developer
    is coding, and we looked at a use case, evaluating C# code prior to publishing
    an application, which implements code analysis during the Azure DevOps building
    process using Sonar Cloud.
  prefs: []
  type: TYPE_NORMAL
- en: As soon as you apply everything you have learned in this chapter to your projects,
    the code analysis will give you the opportunity to improve the quality of the
    code you are delivering to your customer. This is a very important part of your
    role as a software architect.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, you will be deploying your application with Azure DevOps.
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: How can software be described as well-written code?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What is Roslyn?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What is code analysis?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What is the importance of code analysis?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How does Roslyn help in code analysis?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What are Visual Studio extensions?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What are the extension tools presented for code analysis?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'These are some websites where you will find more information on the topics
    covered in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://marketplace.visualstudio.com/items?itemName=VisualStudioPlatformTeam.MicrosoftCodeAnalysis2019](https://marketplace.visualstudio.com/items?itemName=VisualStudioPlatformTeam.MicrosoftCodeAnalysis20)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://marketplace.visualstudio.com/items?itemName=SonarSource.SonarLintforVisualStudio2019](https://marketplace.visualstudio.com/items?itemName=SonarSource.SonarLintforVisualStudio2019)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://github.com/dotnet/roslyn-analyzers](https://github.com/dotnet/roslyn-analyzers)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://docs.microsoft.com/en-us/visualstudio/ide/code-styles-and-code-cleanup](https://docs.microsoft.com/en-us/visualstudio/ide/code-styles-and-code-cleanup)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://sonarcloud.io/documentation/analysis/scan/sonarscanner-for-azure-devops/](https://sonarcloud.io/documentation/analysis/scan/sonarscanner-for-azure-devops/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://www.guidgenerator.com/](https://www.guidgenerator.com/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
