- en: 6\. Labels and Annotations
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Overview
  prefs: []
  type: TYPE_NORMAL
- en: Metadata is extremely useful for any organization and has its use in managing
    potentially thousands of resources in a cluster. This chapter teaches you how
    to add metadata to your pods or any other Kubernetes objects. You will be introduced
    to the concept of labels and annotations. We will also explain their use cases
    so that you can decide whether to use labels or annotations for a particular use
    case. You'll utilize labels to organize your objects by using label selectors
    to select or filter organized sets of objects. You'll also use annotations to
    add unstructured metadata information to objects.
  prefs: []
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous chapter, we created various kinds of pods and managed their
    life cycles. Once we start working with different pods, ideally, we would want
    to organize, group, and filter them based on certain properties. To do that, we
    need to add some information to our pods so that we can later use that information
    to organize them. We have already seen the use of the `name` and `namespace` fields
    as metadata for the pods. In addition to those fields, we can also add key-value
    pairs to the pods in order to add extra information as labels and annotations.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we will assign metadata to these pods in order to identify
    the pods through queries based on some metadata and then add additional unstructured
    metadata. We will cover labels and annotations in detail and examine the differences
    between them. We will use both labels and annotations and see when to use one
    or the other.
  prefs: []
  type: TYPE_NORMAL
- en: Labels
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Labels are the metadata that contain identifiable information pertaining to
    the Kubernetes objects. These are basically key-value pairs that can be attached
    to objects such as pods. Each key must be unique for an object. Labels contain
    information that is meaningful to users. Labels can be attached to pods at the
    time of creation and can also be added or modified during their runtime too. Here
    is an example of how labels in a YAML file would appear:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Constraints for Labels
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As noted earlier, labels are key-value pairs. There are certain rules that label
    keys and values should follow. These constraints exist because this way, the queries
    using labels can be evaluated faster by using optimized data structures and algorithms
    internally. Kubernetes internally maintains the mappings of labels to corresponding
    objects using optimized data structures to make these queries faster.
  prefs: []
  type: TYPE_NORMAL
- en: Label Keys
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Here''s an example of what a label key looks like:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'As we can see, the label key consists of two parts: the label prefix and the
    label name. Let''s take a closer look at these two parts:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Label prefix**: The label prefix is optional and must be a DNS subdomain.
    It cannot be longer than 253 characters and cannot contain spaces. The label prefix
    is always followed by a forward slash (`/`). If no prefix is used, the label key
    is assumed to be private to the user. Some of the prefixes, such as `kubernetes.io/`
    and `k8s.io/`, are reserved for use solely by the Kubernetes core systems.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In our example, `label_prefix.com/` is the prefix for that label key.
  prefs: []
  type: TYPE_NORMAL
- en: '**Label name**: The label name is required and can be up to 63 characters long.
    The label name can only start and end with alphanumeric characters (a – z, A –
    Z, 0 – 9); however, it can contain dashes (`-`), underscores (`_`), dots (`.`),
    and alphanumeric characters in between. A label name cannot have spaces or line
    breaks.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In the example of `label_prefix.com/worker-node-1`, the name for the label key
    is `worker-node-1`.
  prefs: []
  type: TYPE_NORMAL
- en: Label Values
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Label values can be up to 63 characters long. Similar to label names, label
    values should also start and end with alphanumeric characters. However, they can
    contain dashes (`-`), underscores (`_`), dots (`.`), and alphanumeric characters
    in between. A label value cannot have spaces or line breaks.
  prefs: []
  type: TYPE_NORMAL
- en: Why Do We Need Labels?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Labels are generally used for organizing a subset of objects. These objects
    can then be filtered on the basis of these labels. With labels, you can also run
    your specific pods on selected nodes. Both of these scenarios are explained in
    detail in the following section.
  prefs: []
  type: TYPE_NORMAL
- en: Organizing Pods by Organization/Team/Project
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'One of the use cases for labels could be using labels based on teams or organizations
    in your company. Let''s say that your organization has several teams working on
    different projects. You can enable different teams to list only their pods and
    even those specific to certain projects. Expanding on this, if you are an infrastructure
    service provider, you can use an organization label to apply changes only to the
    pods associated with a particular client organization. For such use cases, you
    can use label keys such as `team`, `org`, and `project`. The following is an example
    `labels` section for such a use case:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Running Selective Pods on Specific Nodes
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Another useful scenario can be when you want your pod to be assigned to a certain
    node with specific hardware or other properties. This can be achieved by adding
    labels to the nodes that have special hardware or other properties. We can use
    `nodeSelector` to assign the pod to any node that has a particular label. Consider
    the following example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: The preceding pod template can be used to make sure the pod will be assigned
    to a node that is in the `east-us` region and has `ssd` storage. This check is
    based on the labels added to the nodes. So, we need to ensure that the appropriate
    `region` and `disktype` labels are assigned to all nodes where applicable.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: Please note that the exact node labels to be used in the `nodeSelector` section
    will be provided by the cloud infrastructure provider and that the label keys
    and values may change. The values used in this example are just to demonstrate
    the use case.
  prefs: []
  type: TYPE_NORMAL
- en: In the upcoming exercises, we will show you how you can create pods with labels,
    add labels to a running pod, and modify and/or delete existing labels for a running
    pod.
  prefs: []
  type: TYPE_NORMAL
- en: 'Exercise 6.01: Creating a Pod with Labels'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this exercise, we aim to create a pod with some labels. In order to complete
    this exercise successfully, perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a file called `pod-with-labels.yaml` with the following content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: As can be seen in the preceding snippet, we have added the `app` and `foo` labels
    and assigned them the values of `nginx` and `bar`, respectively. Now, we need
    to create a pod with these labels and verify whether the labels have actually
    been included in the pod, which will be the focus of the next few steps.
  prefs: []
  type: TYPE_NORMAL
- en: 'Run the following command in the Terminal to create the pod with the preceding
    configuration:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'You should see the following response:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Verify that the pod was created by using the `kubectl get` command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'The following output indicates that the pod has been created:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Verify that the `labels` metadata was actually added to the pod using the `kubectl
    describe` command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'This should lead to the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.1: Describing pod-with-labels'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/B14870_06_01.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 6.1: Describing pod-with-labels'
  prefs: []
  type: TYPE_NORMAL
- en: The output shows various details relating to the pod (as we have seen in the
    previous chapter as well). In this case, we will focus on the highlighted section
    of the output, which shows that the desired labels, `app=nginx`, and `foo=bar`,
    were actually added to the pod. Note that, in this exercise, we added labels while
    creating the pod. However, how can you add labels to a pod when a pod is already
    running? The next exercise will answer this question.
  prefs: []
  type: TYPE_NORMAL
- en: 'Exercise 6.02: Adding Labels to a Running Pod'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this exercise, we aim to create a pod without labels and then add labels
    once the pod is running. In order to complete this exercise successfully, perform
    the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a file called `pod-without-initial-labels.yaml` with the following content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Note that we have not yet added any labels to our pod.
  prefs: []
  type: TYPE_NORMAL
- en: 'Run the following command in the Terminal to create the pod with the configuration
    mentioned in the previous step:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'You should see the following response:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Verify that the pod was created by using the `kubectl get` command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'The following output indicates that the pod has been created:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.2: Checking the status of pod-without-initial-labels'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/B14870_06_02.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 6.2: Checking the status of pod-without-initial-labels'
  prefs: []
  type: TYPE_NORMAL
- en: 'Check if the `labels` metadata was actually added to the pod using the `kubectl
    describe` command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'You should see the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.3: Describing pod-without-initial-labels'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/B14870_06_03.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 6.3: Describing pod-without-initial-labels'
  prefs: []
  type: TYPE_NORMAL
- en: In the highlighted section of the output, we can note that the `Labels` field
    is empty. Hence, we can verify that, by default, no label was added to the pod.
    In the next few steps, we will add a label and then run the pod again to verify
    whether the label was actually included in the pod.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add a label using the `kubectl label` command as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'You should see the following response:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: The output shows that the `pod-without-initial-labels` pod was labeled.
  prefs: []
  type: TYPE_NORMAL
- en: 'Verify that the label was actually added in the last step by using the `kubectl
    describe` command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'You should see the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.4: Verifying that the app=nginx label was added'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/B14870_06_04.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 6.4: Verifying that the app=nginx label was added'
  prefs: []
  type: TYPE_NORMAL
- en: We can observe in the highlighted section of the output that the `app=nginx`
    label was actually added to the pod. In the preceding case, we only added a single
    label. However, you can add multiple labels to a pod, as will be done in the next
    steps.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, let''s add multiple labels in the same command. We can do this by passing
    multiple labels in the `key=value` format, separated by spaces:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'You should see the following response:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'Verify that the two labels were added to the pod using the `kubectl describe`
    command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'You should see the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.5: Verifying that the new two labels were also added'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/B14870_06_05.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 6.5: Verifying that the new two labels were also added'
  prefs: []
  type: TYPE_NORMAL
- en: In the highlighted section of the output, we can see that the two new labels,
    `foo=bar,` and `foo2=baz`, were also added to the pod.
  prefs: []
  type: TYPE_NORMAL
- en: In the next exercise, we will see how we can delete and modify the existing
    labels for a pod that is already running.
  prefs: []
  type: TYPE_NORMAL
- en: 'Exercise 6.03: Modifying And/Or Deleting Existing Labels for a Running Pod'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this exercise, we aim to create a pod with some labels and modify and delete
    the labels while the pod is running. In order to complete this exercise successfully,
    perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a file called `pod-with-some-labels.yaml` with the following content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: As you can see in the pod definition, we have added just one label, `app`, with
    the value of `nginx`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Run the following command in the Terminal to create the pod with the preceding
    configuration:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'You should see the following response:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'Verify that the pod was created by using the `kubectl get` command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'The following output indicates that the pod has been created:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.6: Checking the status of the pod-with-some-labels pod'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/B14870_06_06.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 6.6: Checking the status of the pod-with-some-labels pod'
  prefs: []
  type: TYPE_NORMAL
- en: 'Verify that the labels were added as specified in the pod configuration using
    the `kubectl describe` command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'You should see the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.7: Verifying that the labels were added to pod-with-some-labels'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/B14870_06_07.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 6.7: Verifying that the labels were added to pod-with-some-labels'
  prefs: []
  type: TYPE_NORMAL
- en: Once we are sure that the `app=nginx` label is present, we will modify this
    label in the next step.
  prefs: []
  type: TYPE_NORMAL
- en: 'Modify the `app=nginx` label to `app=nginx-application` using the `kubectl
    label` command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'You should see the following response:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'Verify that the value of label was modified from `nginx` to `nginx-application`
    using the `kubectl describe` command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'The following screenshot shows the output of this command:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.8: Verifying that the label value has been modified'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/B14870_06_08.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 6.8: Verifying that the label value has been modified'
  prefs: []
  type: TYPE_NORMAL
- en: As highlighted in the output, we can see that the label with the `app` key has
    a new value, `nginx-application`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Delete the label with the `app` key using the `kubectl label` command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'Note the hyphen at the end of the preceding command. You should see the following
    response:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'Verify that the label with the `app` key was actually deleted using the `kubectl
    describe` command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'You should see the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.9: Verifying that the desired label was actually deleted from the
    pod'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/B14870_06_09.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 6.9: Verifying that the desired label was actually deleted from the
    pod'
  prefs: []
  type: TYPE_NORMAL
- en: As highlighted in the preceding output, we can again note that the label with
    the `app` key was deleted and, hence, the pod now has no label. Thus, we have
    learned how to modify and delete an existing label for a running pod.
  prefs: []
  type: TYPE_NORMAL
- en: Selecting Kubernetes Objects Using Label Selectors
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In order to group various objects based on their labels, we use a label selector.
    It allows users to identify a set of objects matching certain criteria.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can use the following syntax for the `kubectl get` command and pass the
    label selector using the `-l` or `--label` argument:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: In the following exercises, we will see how to use this command in an actual
    scenario. Before that, let's understand what kinds of `{label_selector}` arguments
    we can use in these commands.
  prefs: []
  type: TYPE_NORMAL
- en: 'Currently, there are two types of label selectors: equality-based and set-based.'
  prefs: []
  type: TYPE_NORMAL
- en: Equality-Based Selectors
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Equality-based selectors allow Kubernetes objects to be selected according to
    label keys and values. These kinds of selectors allow us to match all objects
    that have specific label values for given label keys. In fact, we have inequality-based
    selectors as well.
  prefs: []
  type: TYPE_NORMAL
- en: 'Overall, there are three kinds of operators: `=`, `==`, and `!=`.'
  prefs: []
  type: TYPE_NORMAL
- en: The first two are actually identical in operation, and denote equality-based
    operations, while the third one denotes inequality-based operations. While using
    these kinds of selectors, we can specify more than one condition using any of
    the preceding operators.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, if we are using label keys such as `environment` and `team`, we
    may want to use the following selectors:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding selector matches all the objects that have a label key environment
    and the corresponding `production` value:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: The preceding selector matches all the objects that either doesn't have a `team`
    label key or those for which a `team` label key exists, and the corresponding
    value is **not** equal to `devops-infra`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Similarly, we can also use both the selectors together, separated by commas
    (`,`):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding example, the selector will match all the objects that match
    both the criteria specified by the two selectors. The comma acts as a logical
    AND (`&&`) operator between the two selectors specified. Let's now try our hands
    at the implementation of these selectors in the following exercises.
  prefs: []
  type: TYPE_NORMAL
- en: 'Exercise 6.04: Selecting Pods Using Equality-Based Label Selectors'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this exercise, we aim to create some pods with different labels and then
    select them using equality-based selectors. In order to complete this exercise
    successfully, perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a file called `pod-frontend-production.yaml` with the following content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: 'As we can see, this is the template for the pod with the following two labels:
    `environment=production` and `role=frontend`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create another file called `pod-backend-production.yaml` with the following
    content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: 'This is the template for the pod with the following two labels: `environment=production`
    and `role=backend`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create another file called `pod-frontend-staging.yaml` with the following content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: 'This is the template for the pod with the following two labels: `environment=staging`
    and `role=frontend`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create all three pods using the following three commands:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: 'You should see the following response:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: 'The following response indicates that the pod has been created:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: 'This should give the following response:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: 'Verify that all three pods are created with correct labels using the `--show-labels`
    argument to the `kubectl get` command. First, let''s check the `frontend-production`
    pod:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: 'The following response indicates that the `frontend-production` pod has been
    created:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.10: Verifying labels for the frontend-production pod'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/B14870_06_10.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 6.10: Verifying labels for the frontend-production pod'
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, check the `backend-production` pod:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: 'The following response indicates that the `backend-production` pod has been
    created:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.11: Verifying labels for the backend-production pod'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/B14870_06_11.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 6.11: Verifying labels for the backend-production pod'
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, check the `frontend-staging` pod:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: 'The following response indicates that the `frontend-staging` pod has been created:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.12: Verifying labels for the frontend-staging pod'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/B14870_06_12.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 6.12: Verifying labels for the frontend-staging pod'
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, we will use label selectors to see all the pods that are assigned to the
    production environment. We can do this by using `environment=production` as the
    label selector with the `kubectl get` command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: 'In the following output, we can see that it only shows those pods that have
    a label with the `environment` key and the `production` value:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: You can confirm from *Figure 6.10* and *Figure 6.11* that these are the pods
    with the `environment=production` label.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, we will use label selectors to see all the pods that have the `frontend`
    role and the `staging` environment. We can do this by using the label selector
    with the `kubectl get` command, as shown here:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: 'In the following output, we can see that it only shows those pods that have
    `staging` as the environment and `frontend` as the role:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: In this exercise, we have used label selectors to select particular pods. Such
    label selectors for the `get` command provide a convenient way to choose the required
    set of pods based on the labels. This also represents a common scenario, where
    you would want to apply some changes only to the pods involved in the production
    or staging environment, or the frontend or backend infrastructure.
  prefs: []
  type: TYPE_NORMAL
- en: Set-Based Selectors
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Set-based selectors allow Kubernetes objects to be selected on the basis of
    a set of values for given keys. These kinds of selectors allow us to match all
    objects that have a given label key with a value in a given set of values.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are three kinds of operators: `in`, `notin`, and `exists`. Let''s see
    what these operators mean with the help of some examples:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: 'In the preceding example, the selector matches all the objects that have an
    `environment` label key and the value is either `production` or `staging`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: 'The selector in the preceding example matches all the objects that have a `team`
    label key and the value is anything other than `devops-infra`. It also matches
    those objects that don''t have the `team` label key:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding example, the selector is equivalent to the `exists` operation.
    It matches all the objects that don't have the `critical` label key. It doesn't
    check for a value at all.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: The two types of selectors can also be used together, as we will observe in
    *Exercises 6.06*, *Selecting Pods Using a Mix of Label Selectors*.
  prefs: []
  type: TYPE_NORMAL
- en: Let's implement the set-based selectors in the following exercise.
  prefs: []
  type: TYPE_NORMAL
- en: 'Exercise 6.05: Selecting Pods Using Set-Based Label Selectors'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this exercise, we aim to create some pods with different labels and then
    select them using set-based selectors.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: In this exercise, we assume that you have successfully completed *Exercise 6.04*,
    *Selecting Pods Using Equality-Based Label Selectors*. We will be reusing the
    pods created in that exercise.
  prefs: []
  type: TYPE_NORMAL
- en: 'In order to complete this exercise successfully, perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the terminal and verify that the `frontend-production` pod we created
    in *Exercise 6.04*, *Selecting Pods Using Equality-Based Label Selectors*, is
    still running and has the required labels. We will be using the `--show-labels`
    argument with the `kubectl get` command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: 'The following response indicates that the `frontend-production` pod exists:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.13: Verifying labels for the frontend-production pod'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/B14870_06_13.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 6.13: Verifying labels for the frontend-production pod'
  prefs: []
  type: TYPE_NORMAL
- en: 'Verify that the `backend-production` pod we created in *Exercise 6.04*, *Selecting
    Pods Using Equality-Based Label Selectors* is still running and has the required
    labels using the `kubectl get` command with the `--show-labels` argument:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: 'The following response indicates that the `backend-production` pod exists:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.14: Verifying labels for the backend-production pod'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/B14870_06_14.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 6.14: Verifying labels for the backend-production pod'
  prefs: []
  type: TYPE_NORMAL
- en: 'Verify that the `frontend-staging` pod we created in *Exercise 6.04*, *Selecting
    Pods Using Equality-Based Label Selectors* is still running and has the required
    labels using the `kubectl get` command with the `--show-labels` argument:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: 'The following response indicates that the `frontend-staging` pod exists:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.15: Verifying labels for the frontend-staging pod'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/B14870_06_15.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 6.15: Verifying labels for the frontend-staging pod'
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, we will use the label selectors to match all the pods for which the environment
    is `production`, and the role is either `frontend` or `backend`. We can do this
    by using the label selector with the `kubectl get` command as shown here:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs: []
  type: TYPE_PRE
- en: 'You should see the following response:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, we will use the label selectors to match all those pods that have the
    `environment` label and whose role is anything other than `backend`. We also want
    to exclude those pods that don''t have the `role` label set:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs: []
  type: TYPE_PRE
- en: 'This should produce the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs: []
  type: TYPE_PRE
- en: In this example, we have the set-based selectors that can be used to get the
    desired pods. We can also combine these with selector-based pods, as we shall
    see in the following exercise.
  prefs: []
  type: TYPE_NORMAL
- en: 'Exercise 6.06: Selecting Pods Using a Mix of Label Selectors'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this exercise, we aim to create some pods with different labels and then
    select them using a combination of equality-based and set-based selectors.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: In this exercise, we assume that you have successfully completed *Exercise 6.04*,
    *Selecting Pods Using Equality-Based Label Selectors*. We will be reusing the
    pods created in that exercise.
  prefs: []
  type: TYPE_NORMAL
- en: 'In order to complete this exercise successfully, perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the terminal and verify that the `frontend-production` pod we created
    in *Exercise 6.04*, *Selecting Pods Using Equality-Based Label Selectors*, is
    still running and has the required labels. We will be using the `--show-labels`
    argument with the `kubectl get` command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs: []
  type: TYPE_PRE
- en: 'The following response indicates that the `frontend-production` pod exists:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.16: Verifying labels for the frontend-production pod'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/B14870_06_16.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 6.16: Verifying labels for the frontend-production pod'
  prefs: []
  type: TYPE_NORMAL
- en: 'Verify that the `backend-production` pod we created in *Exercise 6.04*, *Selecting
    Pods Using Equality-Based Label Selectors* is still running and has the required
    labels using the `kubectl get` command with the `--show-labels` argument:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE63]'
  prefs: []
  type: TYPE_PRE
- en: 'The following response indicates that the `backend-production` pod exists:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.17: Verifying labels for the backend-production pod'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/B14870_06_17.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 6.17: Verifying labels for the backend-production pod'
  prefs: []
  type: TYPE_NORMAL
- en: 'Verify that the `frontend-staging` pod we created in *Exercise 6.04*, *Selecting
    Pods Using Equality-Based Label Selectors* is still running and has the required
    labels using the `kubectl get` command with the `--show-labels` argument:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE64]'
  prefs: []
  type: TYPE_PRE
- en: 'The following response indicates that the `frontend-staging` pod exists:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.18: Verifying labels for the frontend-staging pod'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/B14870_06_18.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 6.18: Verifying labels for the frontend-staging pod'
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, we will use the label selectors to match all the pods that have a `frontend`
    role and whose environment is one of `production`, `staging`, or `dev`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE65]'
  prefs: []
  type: TYPE_PRE
- en: 'This command should give the following list of pods:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE66]'
  prefs: []
  type: TYPE_PRE
- en: In the output, we can only see those pods that have a `frontend` role, whereas
    the `environment` can be any one of the given values. Thus, we have seen that
    a mix of different types of selectors can be used as required.
  prefs: []
  type: TYPE_NORMAL
- en: Annotations
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As we have seen previously, labels are used to add the identifying metadata
    that we can later use to filter or select objects by. However, labels have certain
    constraints in terms of what we can store in the values, such as the limitation
    of 63 characters and alphanumeric characters at the beginning and end. Annotations,
    on the other hand, have fewer constraints in terms of what kind of data can be
    stored in them. However, we cannot filter or select objects by using annotations.
  prefs: []
  type: TYPE_NORMAL
- en: 'Annotations are also key-value pairs that can be used to store the unstructured
    information pertaining to the Kubernetes objects. Here is an example of how annotations
    in a YAML file would appear:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE67]'
  prefs: []
  type: TYPE_PRE
- en: Constraints for Annotations
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As noted in the previous section, annotations are key-value pairs, just like
    labels. However, the rules for annotations are more relaxed than the rules for
    label keys and values. The reason for more relaxed constraints is the lack of
    support for filtering or selecting objects using annotations. This is because
    the key-value pairs of annotations are not stored in a lookup-efficient data structure.
    Hence, there are fewer restrictions here.
  prefs: []
  type: TYPE_NORMAL
- en: Annotation Keys
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Similar to label keys, annotation keys also have two parts: a prefix and a
    name. The constraints for both annotation prefixes and names are the same as those
    for the label prefixes and names, respectively.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Here''s an example of how an annotation key may appear:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE68]'
  prefs: []
  type: TYPE_PRE
- en: Annotation Values
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: There are no restrictions in terms of what kinds of data annotation values may
    contain.
  prefs: []
  type: TYPE_NORMAL
- en: Use Case for Annotations
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Annotations are generally used to add metadata that won''t be used to filter
    or select objects. It''s used to add metadata that will be used by users or tools
    to get more subjective information regarding the Kubernetes objects. Let''s look
    at some of the scenarios where using annotations can be useful:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Annotations can be used to add timestamps, commit SHA, issue tracker links,
    or names/information about users who are responsible for specific objects in an
    organization. In this case, we can use the following type of metadata, depending
    on our use case:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE69]'
  prefs: []
  type: TYPE_PRE
- en: 'Annotations can also be used to add information about client libraries or tools.
    We can add information such as the name of the library, the version used, and
    public documentation links. This information can later be used for debugging issues
    in our application:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE70]'
  prefs: []
  type: TYPE_PRE
- en: 'We can also use annotations to store the previous pod configuration deployed.
    This can be really helpful in figuring out what configuration was deployed before
    the current revision and what has changed:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE71]'
  prefs: []
  type: TYPE_PRE
- en: Annotations can also be used to store the configuration or checkpoints that
    can be helpful in the deployment process for our applications.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We will learn how to add annotations to a pod in the following exercise.
  prefs: []
  type: TYPE_NORMAL
- en: 'Exercise 6.07: Adding Annotations to Help with Application Debugging'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this exercise, we will add some arbitrary metadata to our pod. In order
    to complete this exercise successfully, perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a file called `pod-with-annotations.yaml` with the following content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE72]'
  prefs: []
  type: TYPE_PRE
- en: The highlighted part in the pod definition shows the annotations that we have
    added.
  prefs: []
  type: TYPE_NORMAL
- en: 'Run the following command in the Terminal to create the pod using the `kubectl
    create` command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE73]'
  prefs: []
  type: TYPE_PRE
- en: 'You should get the following response:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE74]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the following command in the Terminal to verify that the pod was created
    as desired:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE75]'
  prefs: []
  type: TYPE_PRE
- en: 'You should see the following list of pods:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE76]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the following command in the Terminal to verify that the created pod has
    the desired annotations:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE77]'
  prefs: []
  type: TYPE_PRE
- en: 'You should see the following output of this command:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.19: Verifying annotations for the pod-with-annotations pod'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/B14870_06_19.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 6.19: Verifying annotations for the pod-with-annotations pod'
  prefs: []
  type: TYPE_NORMAL
- en: As we can see in the highlighted section of the preceding output, the desired
    metadata has been added as annotations to the pod. Now, this data can be used
    by any deployment tools or clients who may know about the key names used.
  prefs: []
  type: TYPE_NORMAL
- en: Working with Annotations
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In the previous exercise, we created a pod with annotations. Similar to labels,
    we can add annotations to a running pod and modify/delete the annotations of a
    running pod. This can be achieved by running similar commands as those for labels.
    The following list presents you with the various operations that can be performed
    on annotations along with the relevant commands:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Thus, we can add annotations to a running pod by using the following command:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE78]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding command, we can add multiple annotations similar to multiple
    labels, as in *step 7* of *Exercise 6.02*, *Adding Labels to a Running Pod*.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can also modify (overwrite) an annotation as follows:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE79]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, we can delete an annotation using the following command:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE80]'
  prefs: []
  type: TYPE_PRE
- en: Note the hyphen at the end of the preceding command. Now that we have learned
    about labels and annotations as well as the various ways in which we can use them,
    let's bring all of this together in the following activity.
  prefs: []
  type: TYPE_NORMAL
- en: 'Activity 6.01: Creating Pods with Labels/Annotations and Grouping Them as per
    Given Criteria'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Consider that you're working on supporting two teams called `product-development`
    and `infra-libraries`. Both teams have some application pods for different environments
    (production or staging). The teams also want to mark their pods as critical if
    that is indeed the case.
  prefs: []
  type: TYPE_NORMAL
- en: 'In short, you need to create three pods as per the following metadata requirements:'
  prefs: []
  type: TYPE_NORMAL
- en: An `arbitrary-product-application` pod that runs in a production environment
    and is owned by the `product-development` team. This needs to be marked as a non-critical
    pod.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An `infra-libraries-application` pod that runs in a production environment and
    is owned by the `infra-libraries` team. This needs to be marked as a critical
    pod.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An `infra-libraries-application-staging` pod that runs in a staging environment
    and is owned by the `infra-libraries` team. Since it runs in staging, the criticality
    of the pod does not need to be indicated.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In addition to this, both teams also want to add another piece of metadata –
    "team-link" in which they want to store the internal link of the team's contact
    information.
  prefs: []
  type: TYPE_NORMAL
- en: 'You should be able to perform the following tasks once all three pods have
    been created:'
  prefs: []
  type: TYPE_NORMAL
- en: Group all the pods that run in the production environment and are critical.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Group all the pods that are not critical among all environments.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: Ideally, you would want to create this pod to be in a different namespace so
    as to keep it separate from the rest of the stuff that you created during the
    exercises. Therefore, feel free to create a namespace and create the pod in that
    namespace.
  prefs: []
  type: TYPE_NORMAL
- en: 'The high-level steps to perform this activity are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a namespace for this activity.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Write the pod configurations for all three pods. Ensure that all the metadata
    requested is added correctly among the labels and annotations.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create all three pods using the configurations written in the previous step.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Make sure that all three pods are running and have all the requested metadata.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Group all the pods that run in the production environment and are critical.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Group all the pods that are not critical among all environments.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'For the first task, your goal should get the `infra-libraries-application`
    pod once you complete the activity, as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE81]'
  prefs: []
  type: TYPE_PRE
- en: 'For the second task, your goal is to obtain `arbitrary-product-application`
    and `infra-libraries-application-staging` once you complete the activity, as shown
    here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE82]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: 'The solution to this activity can be found at the following address: [https://packt.live/304PEoD](https://packt.live/304PEoD).'
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we have described labels and annotations and used them to add
    metadata information, which can either be identifiable information that can be
    used to filter or select objects, or non-identifiable information that can be
    used by users or tools to get more context regarding the state of the application.
    More specifically, we have also organized objects such as pods using labels and
    annotations. These are important skills that will help you manage your Kubernetes
    objects more efficiently.
  prefs: []
  type: TYPE_NORMAL
- en: In the following chapters, as we become familiar with more Kubernetes objects
    such as Deployments and Services, we will see the further application of labels
    and label selectors while organizing pods for deployment or discovery.
  prefs: []
  type: TYPE_NORMAL
