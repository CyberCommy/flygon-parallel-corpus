- en: Inserting Records into Tables Using Stored Procedures
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you will learn how to insert records directly into a table
    using a *Stored procedure* that is stored in the `Programmability` folder in SQL
    Server. We'll do it through textboxes in the HTML page.
  prefs: []
  type: TYPE_NORMAL
- en: Adding text boxes and a button to the HTML
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Crank up a project. First, let''s put a couple of boxes in the <html> page.
    For this, enter the following under the line that begins with `<form id= ....`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: For the `Name` field, it is just a text box. So, for text, in other words, we'll
    use a string. Go to Toolbox, grab a `TextBox` control, and drag it in there. For
    the date, we will try to parse to a date time from the box.
  prefs: []
  type: TYPE_NORMAL
- en: 'Your `Default.aspx` screen should now look like the one shown in *Figure 18.3.1*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/55a9de57-b40b-475f-9e05-57d11e34f264.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 18.3.1: The Default.aspx screen for this chapter'
  prefs: []
  type: TYPE_NORMAL
- en: Remember, we have two boxes, we input values, and save them into the table.
    That's the objective here.
  prefs: []
  type: TYPE_NORMAL
- en: Next, let's also put a button in there. So again, go to Toolbox, grab a button,
    and drag and drop it just below these lines. Change the text on the button so
    that it's more helpful, for example, to say `Insert And Show`.
  prefs: []
  type: TYPE_NORMAL
- en: So, when you click on the button, you will insert the new records and you will
    also show the records to confirm that it's saved together with the existing ones.
  prefs: []
  type: TYPE_NORMAL
- en: Reviewing what you created already in SQL Server
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Next, open the SQL Server Object Explorer screen. Now, remember that you made
    a database called `People` and then within it you have a table also called `People`.
    Further, within that you have a column called `Id`. This is the primary key. Remember,
    that it's auto-incremented so that you don't have to specify the ID. That is,
    it's done for you automatically.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, there are two fields: one is `NAME`, and the other one is `DATEADDED`;
    `NAME` is `varchar(100)` and `DATEADDED` is of type `date`. Both values have to
    be supplied, and that''s why it says `not null`. The SQL Server Object Explorer
    screen up to this point is shown in *Figure 18.3.2*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/4ee0c020-7681-4189-a9ac-1ae180f4278a.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 18.3.2: The SQL Server Object Explorer screen for the database People'
  prefs: []
  type: TYPE_NORMAL
- en: Creating a new stored procedure
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now, expand the Programmability folder. There''s a folder called *Stored Procedures*.
    Right-click on that, and select Add New Stored Procedure... . This is the basic
    stored procedure code:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/ff5e3c24-dae2-4eab-9d32-9646e5dcf9f9.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 18.3.3: The default Stored Procedure screen'
  prefs: []
  type: TYPE_NORMAL
- en: 'To make use of the Stored Procedure, you need to rename it first. For this,
    change `[Procedure]` in the top line to say `[AddName]`, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: As you can see, it's just some code that resides in SQL Server. Then you can,
    for example, execute that code to perform some action in the database table.
  prefs: []
  type: TYPE_NORMAL
- en: 'In our case, we will use this procedure to insert records into the table. We
    need parameters because we will enter two values. So, edit the next two lines
    of the Stored Procedure, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: First, change `param1` to `Name`, and change the default value of `int = 0`
    and assign the datatype as `varchar(100)`.
  prefs: []
  type: TYPE_NORMAL
- en: 'For the next line, change `param2` to `DateAdded` and it''s of the `date` type.
    So, these are the two parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, because you will not select records, rather, you will *insert* records,
    so, we''ll enter an `insert` statement and then type the following in place of
    the `SELECT` line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Here, you `insert into` the `People` database and then you make the list of
    the fields that should receive the new information, that is `NAME` and `DATEADDED`.
    Then, you enter `values` and then the list of parameters—`@Name` and `@DateAdded`.
  prefs: []
  type: TYPE_NORMAL
- en: Remember, the parameters in this line function similarly to the functions that
    you've created before. Through them, values are passed into functions when you
    write them in C#. The same principle applies here. Through the parameters, values
    are passed into the body of the stored procedure, which in this particular case,
    inserts to the fields, the field values directly into the table. Here, the `@Name`
    and `@DateAdded` values are passed into `NAME` and `DATEADDED`. That's the objective
    here.
  prefs: []
  type: TYPE_NORMAL
- en: 'The complete stored procedure is shown in *Figure 18.3.4*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/eb0e9a1d-ec7b-448c-bee4-2668ffb19b5e.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 18.3.4: The stored procedure, dbo.AddName'
  prefs: []
  type: TYPE_NORMAL
- en: Updating the database structure
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now, let's update the structure of things; so, click on the Update button and
    on Update Database in the dialog box that appears as shown in the *Figure 18.3.5*.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/8d2530af-54b3-4c51-963d-c21f03a2e735.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 18.3.5: Preview database update dialog box'
  prefs: []
  type: TYPE_NORMAL
- en: Once it's updated, expand the Programmability folder and then the Stored Procedures
    folder. There, you see `dbo.AddName`. Now, if you expand `dbo.AddName`, there's
    a list of parameters:`@Name` and `@DateAdded`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, let''s make use of what we''ve made so far. Click on the `Default.aspx`
    tab, and then go into the Design view, and double-click on the Insert And Show
    button. This takes us into `Default.aspx.cs`. Delete the `Page_Load` stub. We''ll
    start with the code shown in *Figure 18.3.6* for this project:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/5e409707-812a-48de-bac2-3d2d21c8713c.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 18.3.6: The starting code for this project'
  prefs: []
  type: TYPE_NORMAL
- en: Adding a namespace
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Again, to make this work with SQL Server, you have to add a namespace. So,
    go to the top of the file, and under `using System`, enter the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'This, of course will be used for things, such as commands and connections,
    which you fill in as a comment. We''ll do one more of these right under this line,
    so enter the following next:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: This line will also serve our purpose. There will be quite a lot of code, but
    it's highly sequential—it goes pretty naturally from top to bottom, and it will
    do the job for you.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, every time you click on the button, you want to clear the label so that
    the output doesn''t continue to accumulate; so, between a set of curly braces
    under the line that begins with `protected void Button1_Click...`, enter the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Building the connection string
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In the next stage, you want to get the connection string; so, on the following
    line you start by entering `string connString =`, followed by the `@` symbol to
    make it a verbatim string, and then you put in the `""` symbols. Now, to get the
    connection string, do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Click on View in the menu bar, and select SQL Server Object Explorer.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Right-click on the `People` database, and select Properties.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the Properties pane, double-click on Connection string to select it with
    its long description.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Then, right-click on the long description and copy it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Paste the description between the set of `""` symbols.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The connection string line should then look like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: You can now close the SQL Server Object Explorer and Properties panes.
  prefs: []
  type: TYPE_NORMAL
- en: Initializing the connection
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In the next stage, because we are accessing the hard drive to read and save
    records, enter the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: This is how you initialize a connection. If you right-click on `SqlConnection`
    and select Go to Definition, it says that it's of the `DbConnection` type and
    it inherits from `SqlConnection`. Now, if you right-click on `DbConnection` and
    select Go To Definition, it says that it implements `IDisposable`. Then, if you
    right-click on `IDisposable` and select Go To Definition, it says, Performs application-defined
    tasks associated with freeing, releasing, or resetting unmanaged resources. So,
    for example, for low-level channels that are opened to get information from the
    hard drive, you've got to make sure that they are properly cleaned up. You can
    now close this window.
  prefs: []
  type: TYPE_NORMAL
- en: Catching exceptions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Next, because all kinds of issues can arise when you work with databases, you
    need to `try` it and then `catch` any exception. For this, below the open curly
    brace under the preceding line, enter the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Here, I''m really putting in `catch (Exception ex)` more for the sake of being
    able to display some diagnostic information. Next, between a set of curly braces
    below this, enter the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: We use this line just to display the diagnostic information.
  prefs: []
  type: TYPE_NORMAL
- en: Trying out commands
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now, let''s go into the `try` part. This is where everything can happen. First,
    let''s make a command. Enter the following between the set of curly braces under
    `try`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, you''ll set the type of commands, so enter the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: This line speaks for itself.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, to actually get the text to choose the specific stored procedure to be
    called, you need to enter the following next:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Remember, `AddName` is what we called the procedure in the SQL Server.
  prefs: []
  type: TYPE_NORMAL
- en: Adding the parameters
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now, for the next stage, we will add what are known as *parameters*. In other
    words, you have to make sure that the values are actually passed into the stored
    procedure so that you can save them inside the table. So, enter the following
    next:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'Here, we start with the name of the parameter: `@Name`, and then the value
    of it will come from the first box: `TextBox1.Text`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, you will repeat this logic, so enter the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Here, `@DateAdded` is the name of the parameter, and this next stage comes
    from the second box: `TextBox2.Text`. This line will convert the value in the
    box, assuming that it is convertible to a `DateTime` object so that it matches
    the `@DateAdded` type inside the database. That is why we are taking this step.'
  prefs: []
  type: TYPE_NORMAL
- en: Of course, in a more realistic situation, you might want to try `DateTime.TryParse`.
    To avoid excessive complexity, however, we'll just go with `DateTime.Parse`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Enter the following next:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: You have to set the `conn` property. We created this near the top of the file
    in the line that begins with `using(SqlConnection conn...`.
  prefs: []
  type: TYPE_NORMAL
- en: 'For the next line, enter the following to open the connection:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: Saving the information for later retrieval
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In the next stage, we will execute `NonQuery`. For this, enter the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'This line will save the information. Now, from there forward, when you want
    to retrieve the information, make sure that it''s working as expected. We''ll
    just switch the type of command to `CommandType` of the `Text` type, so enter
    the following next:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, we will specify the text, so enter the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: Here, `select *` means select everything from the `People` database.
  prefs: []
  type: TYPE_NORMAL
- en: 'After that, enter the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: Recognizing the role of indexers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now, I'll show you something that I didn't show you previously. Hover your mouse
    over `ExecuteReader`. This returns a `SqlDataReader` class. Now, right-click on
    `SqlDataReader` in the preceding line and select Go To Definition. Do you remember
    when we learned about indexers earlier? Look at where it says public override
    object this[string name]. If you expand that, it says that it Gets the value of
    the specified column and its native format given the column name. If you go back,
    the next definition reads public override object this[int i]. If you expand this
    one, it says, Gets the value of the specified column in its native format given
    the column ordinal, here, the number of the column. So, the `public override object...`
    line refers to the current `SqlDataReader` object. This is basically an indexer
    here. Now you can see that indexers really do play a role. You can close this
    now.
  prefs: []
  type: TYPE_NORMAL
- en: 'To make use of this information, enter the following next between a set of
    curly braces under the previous `using` line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, between a set of curly braces below this line, enter the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: Here, after `sampLabel.Text...`, you specify `reader[0]`, `{reader[1]}`, and
    `{reader[2]`, which are the three columns, accessed by the index.
  prefs: []
  type: TYPE_NORMAL
- en: You've now input the heart of the program.
  prefs: []
  type: TYPE_NORMAL
- en: Running the program
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now, let''s take a look at the results. Crank this up in your browser. First,
    enter some values: `Berry Gibbs` for `Name`, a date, and then, click on the Insert
    And Show button. The results are shown in *Figure 18.3.7*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/0eff2168-9368-460c-84b7-e40cb1fad685.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 18.3.7: The initial results of running our program'
  prefs: []
  type: TYPE_NORMAL
- en: 'So, there it is—it''s working as expected. Now, let''s try another one. Enter
    `Mark Owens` for `Name`, add a date, and then, click on the Insert And Show button
    again. As you can see in *Figure 18.3.8*, it has been added automatically. This
    confirms that it has been saved to the table, and then further, we can retrieve
    it:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/6d2a3648-ea0e-46fa-baca-722a9855cb9a.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 18.3.8: The modified results of running the program'
  prefs: []
  type: TYPE_NORMAL
- en: So, these are the fundamentals of getting a connection.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now consider this. Imagine, in the preceding line, I put `cmd.CommandText =
    "AddNames"` instead of `AddName`. In other words, I misspelled the name of the
    stored procedure. If I then crank this up in my browser, as seen in *Figure 18.3.9*,
    it says, String was not recognized as a valid DateTime. That''s useful, right?
    I didn''t fill `Name` or `Date`. So, it can''t be converted to a `DateTime`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/95d4a8f4-92d7-40c6-9a79-51d2cf3c5133.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 18.3.9: The results of running the program with no values entered'
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, even if I do enter values for `Name` and `Date`, it says, Could not find
    stored procedure ''AddNames'', as shown in *Figure 18.3.10*, because I misspelled
    the name of the stored procedure:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/b8bd52fc-68df-44ae-bbd6-b45269a57f62.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 18.3.10: The results of running the program with the misspelled the
    name of the stored procedure'
  prefs: []
  type: TYPE_NORMAL
- en: So, with the `try` line, because all of the commands after that could generate
    some kind of error, at least you can catch it and display the error message and
    you will be able to know what's going on. So, it's very useful.
  prefs: []
  type: TYPE_NORMAL
- en: Chapter review
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'For review, the complete version of the `Default.aspx.cs` file for this chapter,
    including comments, is shown in the following code block:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you learned how to insert records directly into a table using
    Stored procedures, and stored in the Programmability folder in the SQL Server.
    You created a new stored procedure, updated the database structure, built the
    connection string, initialized the connection, tried out commands and caught exceptions,
    added parameters, saved the information for later retrieval, and recognized the
    role of indexers.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, you will learn how to use the `nullable` keyword to ensure
    that records that have missing values can still be brought, for example, into
    an application.
  prefs: []
  type: TYPE_NORMAL
