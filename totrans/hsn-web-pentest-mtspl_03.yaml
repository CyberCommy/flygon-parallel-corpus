- en: Metasploit Essentials
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Metasploit project is a tool that is used for penetration testing, as well
    as IDS signature capturing. Under this project comes the Metasploit Framework
    subproject, which is open source and free to use. It has the ability to develop
    and execute exploit codes against a target. Metasploit was originally created
    by H.D Moore in 2003 and was acquired by Rapid7 in 2009. Metasploit Framework
    is one of the most widely used tools of the decade. Whether you're performing
    proper reconnaissance to post-exploitation in the network, almost all penetration
    tests use Metasploit.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we will start with an introduction to Metasploit Framework
    and look at its terminology. Then, we will install and set up Metasploit on different
    platforms so that we can learn how to interact with Metasploit Framework using
    some basic commands.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will cover the following topics in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Introduction to Metasploit Framework
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Metasploit Framework terminology
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Metasploit installation and setup
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Getting started with Metasploit Framework
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The following are the technical requirements you''ll need for this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Metasploit Framework v5.0.74 ([https://github.com/rapid7/metasploit-framework](https://github.com/rapid7/metasploit-framework))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A *nix-based system or a Microsoft Windows-based system
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Nmap
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction to Metasploit Framework
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Metasploit is the first tool that comes to mind whenever we think about penetration
    testing or exploitation. Metasploit Framework is a subproject of the Metasploit
    project. The Metasploit project helps us by providing information about vulnerabilities,
    as well as helping us with penetration testing.
  prefs: []
  type: TYPE_NORMAL
- en: Metasploit first appeared in 2003\. It was developed by H.D Moore using Perl,
    but was later ported to Ruby in 2007\. By October 2009, Rapid7 had acquired the
    Metasploit project. Rapid 7 then added commercial versions of Metasploit Express
    and Metasploit Pro. This is when the evolution of Metasploit Framework began.
  prefs: []
  type: TYPE_NORMAL
- en: Metasploit Framework is an open source framework that allows us to write, test,
    and execute exploit code. It can also be considered a collection of tools for
    penetration testing and exploitation.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we will cover the basics of installing and using Metasploit
    Framework.
  prefs: []
  type: TYPE_NORMAL
- en: Metasploit Framework terminology
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now, let''s go through the basic terminology of Metasploit Framework. We will
    be using these terms often in this book, so it''s best to understand them thoroughly
    before we deep dive into **Metasploit Framework **(**MSF**) and its usage:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Exploits**: When Metasploit starts up, it shows the count of publicly available
    exploits that are already available in the framework. An exploit is a piece of
    code that takes advantage of a vulnerability and gives us the desired output.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Payload**: This is a piece of code that is delivered to the target system
    or an application via an exploit to perform an act of our choice. Payloads can
    actually be divided into three main types: singles, stagers, and stages:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Singles**: These payloads are standalone and are usually used to perform
    simple tasks, such as opening `notepad.exe `files and adding users.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Stagers**: This sets up a connection between the two systems. Then, stages
    are downloaded by them to the victim''s machine.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Stages**: These can be considered the components of a payload. They provide
    different features, such as access to the command shell, the ability to run executables,
    and upload and download files and don''t need to have a size limit. One example
    of such a feature is a Meterpreter.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The other types of payloads are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Inline (non-staged)**: Exploit code containing full shellcode to perform
    a specific task.'
  prefs:
  - PREF_UL
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Staged**: This works along with stage payloads to perform a specific task.
    The stager establishes a communication channel between the attacker and the victim
    and sends a staged payload that will be executed on the remote host.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Meterpreter**: This is short for *Meta Interpreter* and operates through
    DLL injection. It is loaded in-memory and leaves no trace on disk.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**PassiveX**: This uses ActiveX control to create a hidden instance of Internet
    Explorer. It communicates with the attacker via HTTP requests and responses.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**NoNX**: This is used to bypass DEP protection.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Ord**: These are extremely small-sized payloads that work on all versions
    of Windows. However, they are unstable and rely on `ws2_32.dll` to be loaded in
    the exploitation process.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**IPv6**: This is built to work on IPv6 hosts.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Reflective DLL** **Injection**: Created by Stephen Fewer, this is a technique
    where a staged payload is injected into a compromised host process running in
    memory, while never touching the host hard drive.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Auxiliary:** Metasploit Framework is equipped with hundreds of auxiliary
    modules that can be used to perform different tasks. These modules can be considered
    small tools that do not exploit anything. Instead, they aid us in the exploitation
    process.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Encoders:** An encoder converts information (in this case, assembly instructions)
    into another form that, upon being executed, will give us the same result. Encoders
    are used to avoid the detection of a payload when it is delivered to the target
    system/application. Since most IDSes/IPSes that are configured in the organization''s
    network are signature-based, when encoding the payload, it will change the whole
    signature and bypass the security mechanism with ease. The most well-known encoder
    is `x86/shikata_ga_nai`. This is a polymorphic XOR additive feedback encoder,
    which means it generates a different output every time it''s used. It was the
    hardest to detect when it first came out. It is still pretty handy when used with
    multiple iterations. However, iterations must be used carefully and always tested
    first; they may not work as expected, and with every iteration, the size of the
    payload increases.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**NOP generators:** An NOP generator is used to generate a series of random
    bytes, which are equivalent to the traditional NOP sleds, except they don''t have
    any predictable patterns. The NOP sled can also be used to bypass standard IDS
    and IPS NOP sled signatures (`NOP Sled - \x90\x90\x90`).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Project:** This is a container that''s used to store data and credentials
    during a penetration testing activity. It is more commonly used in the Metasploit
    Pro version.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Workspace:** A workspace is the same as a project, but it''s only used in
    Metasploit Framework.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Task:** This is any action we perform in Metasploit.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Listener**: A listener waits for an incoming connection from the exploited
    target and manages the connected target shell.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Shell**: A shell is a console, such as an interface, that gives us access
    to the remote target.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Meterpreter**: On the official website, Meterpreter is defined as follows:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '"An advanced, dynamically extensible payload that uses in-memory DLL injection
    stagers and is extended over the network at runtime. It communicates over the
    stager socket and provides a comprehensive client-side Ruby API."'
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have gone through the basic terminology, let's look at how to install
    Metasploit and set it up.
  prefs: []
  type: TYPE_NORMAL
- en: Installing and setting up Metasploit
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Installing Metasploit is very easy, and its setup process is supported by different
    operating systems. Metasploit can be installed on the following systems:'
  prefs: []
  type: TYPE_NORMAL
- en: '*nix-based systems (Ubuntu, macOS, and so on)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Windows-based systems
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The steps for installing Metasploit are almost identical for all the supported
    OSes. The only difference is when you need to perform a command-line installation
    of it.
  prefs: []
  type: TYPE_NORMAL
- en: Installing Metasploit Framework on *nix
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Before we can start using Metasploit, we need to install it. Follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Installing Metasploit on *nix can be done by downloading and executing the
    Metasploit Nightly Installer for Linux and macOS systems or by using the following
    commands (CLI):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'The following screenshot shows the output of the preceding command:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/de2445fd-1ed5-435b-bee7-ee1eb8ab1846.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The preceding command will download a shell script that will import the Rapid7
    signing key (PGP) and install the packages that are required for all supporting
    Linux and macOS systems:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/aada9215-8ca3-447a-845b-78ffc7c2af5c.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Once the installation process is complete, running Metasploit is pretty simple.
    In the Terminal, just type the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'The following screenshot shows the output of the preceding command:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/9469fb1a-0cfb-4458-b8e8-9297071fba55.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Note: Metasploit Framework v5.0.0 was released with lots of new features. You
    can take a look at these features and more at [https://blog.rapid7.com/2019/01/10/metasploit-framework-5-0-released/](https://blog.rapid7.com/2019/01/10/metasploit-framework-5-0-released/).'
  prefs: []
  type: TYPE_NORMAL
- en: We should now see Metasploit Framework up and running. When the MSF console
    is loaded for the first time, it automatically creates a database using PostgreSQL.
    This database is used to store any data that's collected if we perform scans,
    exploits, and more.
  prefs: []
  type: TYPE_NORMAL
- en: 'Every week, new exploits and other modules are added to Metasploit, so it''s
    always a good idea to update Metasploit every 2 weeks. This can be done by using
    the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'The following screenshot shows the output of the preceding command:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/8335fcb7-8b65-478e-b960-c33077b71274.png)'
  prefs: []
  type: TYPE_IMG
- en: At the time of writing this book, Metasploit Framework provides 1,991 exploit
    modules, 1,089 auxiliary modules, 340 post modules, 560 payload modules, 45 encoder
    modules, 10 nops, and 7 evasion modules.
  prefs: []
  type: TYPE_NORMAL
- en: Installing Metasploit Framework on Windows
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now that we have learned how to install Metasploit Framework on *nix-based
    systems, let''s take a quick look at how to install Metasploit Framework on a
    Windows environment:'
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we need to download the Nightly installer for Windows from the following
    URL:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Upon entering this URL, you should see the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/48aa3b71-1c3c-4dd3-89f8-c2dc7fbdedbf.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Once the download is complete, we can install it by double-clicking the MSI
    file. A new window will open, as shown in the following screenshot.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'We need to follow the standard installation steps (Next, Next, I Agree, and
    then Install) to install Metasploit on Windows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/b8b65933-889d-4d84-986f-21ed7ce6b261.png)'
  prefs: []
  type: TYPE_IMG
- en: It is recommended that you go through the Terms and Conditions of the tool.
  prefs: []
  type: TYPE_NORMAL
- en: 'After the installation is complete, we still won''t be able to run Metasploit
    from the command prompt, as shown in the following screenshot. This is because
    the path variable hasn''t been set, so the system doesn''t know where to look
    for the `msfconsole` binary when the command is executed:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/7f2f1c26-bbab-438b-aa92-316b4848e704.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Let''s locate the `msfconsole` binary. In our case, it can be found here:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'The output of the preceding command can be seen in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/5a46c212-d447-4e42-9ca8-edc5cae6f507.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now, we need to add this directory to our path by typing the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'This can be seen in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/0d57c333-3cf9-4003-a2f3-129f8c2871c4.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now that the path variable has been set, we will be able to launch Metasploit
    from Command Prompt:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/88b362fa-f3a7-493a-82aa-0b166584a2b8.png)'
  prefs: []
  type: TYPE_IMG
- en: Running the aforementioned command will start up Metasploit and its console.
    Now that we have gained access to the MSF console, let's start looking at the
    basics of Metasploit Framework.
  prefs: []
  type: TYPE_NORMAL
- en: Getting started with Metasploit Framework
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: With the installation complete, we can move on and look at Metasploit Framework's
    usage. The most common way of interacting with Metasploit Framework is through
    `msfconsole`. The console provides all the functionalities and options that are
    available in a very simplistic command line for efficient testing and exploitation
    (infiltration).
  prefs: []
  type: TYPE_NORMAL
- en: Interacting with Metasploit Framework using msfconsole
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'You can interact with MSF console either in **normal mode**, using the `msfconsole`
    command, or you can run the MSF console command in **Quiet mode**. The only difference
    between these modes is the absence of errors, warnings, and banners in the console.
    Running in **normal mode** will make a cool MSF banner appear. In **Quiet mode**,
    you can interact with the MSF console, which can be done by executing the `msfconsole
    -q` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/ac349d1c-129e-4b9a-af85-30c9617b9d10.png)'
  prefs: []
  type: TYPE_IMG
- en: There are other MSF console options available that can be used, according to
    your situation and needs. For example, if you want to run an MSF console without
    any database support, you can always execute the `**msfconsole -qn**` command.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can''t execute any commands or load any plugins with the `db_` prefix in
    them if the database hasn''t been initialized:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/eced6d9e-ee49-4221-a912-5b4c802f2ba8.png)'
  prefs: []
  type: TYPE_IMG
- en: 'When you try to load a plugin from the console, you''ll get the following uninitialized
    error:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/5c27413c-019e-4692-964e-83799e621be9.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Here, we used the `-x` option in `msfconsole`. As you may have guessed, this
    switch is used to execute MSF-supported commands inside the console. We can also
    execute shell commands in the console since Metasploit passes these commands to
    our default shell to use as arguments:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/bb4c5bfd-a538-4265-a2ee-0b38401ab879.png)'
  prefs: []
  type: TYPE_IMG
- en: In the preceding command, we echoed the `WELCOME TO METASPLOIT FRAMEWORK` string
    from the MSF console and exited. To check all the options that are available,
    you can execute the `msfconsole -h` command. Let's now go through the most basic
    and most common commands that are used in the MSF console.
  prefs: []
  type: TYPE_NORMAL
- en: MSF console commands
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The MSF console commands can be categorized as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Core MSF console commands:** These commands are the most common and general-purpose
    commands that are used in the MSF console.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Module management commands:** MSF modules are managed using these commands.
    You can edit, load, search, and use Metasploit modules with the help of these
    commands.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**MSF job management commands:** Using these commands, you can handle Metasploit
    module job operations such as creating a job using a handler, listing the jobs
    running in the background, and killing and renaming jobs.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Resource script management commands:** When using resource scripts, you can
    use these commands to perform script execution in the console. You can either
    give a stored script file for execution or store the commands that are used at
    the start of the MSF console to a file.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Backend database commands:** These commands are used to manage the database;
    that is, to check for a DB connection, set up the connection and disconnect it,
    restore/import the DB in MSF, back up/export DBs out of MSF, and list the saved
    information related to the target.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Credentials management commands:** You can view and manage the saved credentials
    using the `creds` command.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Plugin commands:** The plugins in the MSF console can be managed using plugin
    commands. These commands are available for all the plugins that are loaded.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'To learn how to use the `msfconsole` command, please refer to the following
    URL: [https://www.offensive-security.com/metasploit-unleashed/msfconsole-commands/](https://www.offensive-security.com/metasploit-unleashed/msfconsole-commands/).'
  prefs: []
  type: TYPE_NORMAL
- en: The MSF console not only allows us to utilize the vast number of modules in
    it, but it also gives us the option to customize the console itself, according
    to the user. Let's check out how we can customize the console.
  prefs: []
  type: TYPE_NORMAL
- en: Customizing global settings
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Before customizing the console, we need to know the current (default) global
    settings that are being applied to the console:'
  prefs: []
  type: TYPE_NORMAL
- en: 'This can be done using the `show options` command when Metasploit Framework
    starts:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/1018936a-b8bf-4851-a831-126db557ae97.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We can change the prompt (the `msf` text) from these settings. To change the
    prompt and prompt character, we can execute the `set Prompt` and `set PromptChar`
    commands:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/4ebb5ead-06ad-41e9-a619-239e4266ed20.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We can even use some extended formats to configure more advanced prompts, as
    follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/b6f05a77-d1c3-4798-acf1-1c1a580b9475.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The following are the extended formats that can be used:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Literal** | **Description** |'
  prefs: []
  type: TYPE_TB
- en: '| `%D` | Current directory |'
  prefs: []
  type: TYPE_TB
- en: '| `%U` | Current user |'
  prefs: []
  type: TYPE_TB
- en: '| `%W` | Current workspace |'
  prefs: []
  type: TYPE_TB
- en: '| `%T` | Current timestamp |'
  prefs: []
  type: TYPE_TB
- en: '| `%J` | Current number of jobs running |'
  prefs: []
  type: TYPE_TB
- en: '| `%S` | Current number of opened sessions |'
  prefs: []
  type: TYPE_TB
- en: '| `%L` | Local IP |'
  prefs: []
  type: TYPE_TB
- en: '| `%H` | Hostname |'
  prefs: []
  type: TYPE_TB
- en: '| `%red` | Set the color to RED |'
  prefs: []
  type: TYPE_TB
- en: '| `%grn` | Set the color to GREEN |'
  prefs: []
  type: TYPE_TB
- en: '| `%yel` | Set the color to YELLOW |'
  prefs: []
  type: TYPE_TB
- en: '| `%blu` | Set the color to BLUE |'
  prefs: []
  type: TYPE_TB
- en: '| `%mag` | Set the color to MAGENTA |'
  prefs: []
  type: TYPE_TB
- en: '| `%cya` | Set the color to CYAN |'
  prefs: []
  type: TYPE_TB
- en: '| `%whi` | Set the color to WHITE |'
  prefs: []
  type: TYPE_TB
- en: '| `%blk` | Set the color to BLACK |'
  prefs: []
  type: TYPE_TB
- en: '| `%und` | Underline |'
  prefs: []
  type: TYPE_TB
- en: '| `%bld` | Bold |'
  prefs: []
  type: TYPE_TB
- en: The same formats can be used to set up prompt characters as well.
  prefs: []
  type: TYPE_NORMAL
- en: Variable manipulation in MSF
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Variable manipulation in Metasploit Framework can help users utilize the features
    of the modules to their full extent. As pen testers, sometimes, we need to scan
    a lot of targets and in almost all our testing scenarios, we have to set the options
    required by the Metasploit module. These options, such as the remote host IP/port,
    and the local host IP/port are set for the specific Metasploit module in use.
    The sooner we learn about variable manipulation, the more efficiently we'll be
    able to use the module.
  prefs: []
  type: TYPE_NORMAL
- en: 'Variable manipulation can be achieved using datastores. A datastore is a type
    of variable that has the following functionalities:'
  prefs: []
  type: TYPE_NORMAL
- en: Stores data in key/value pairs
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Enables the MSF console to configure settings at the time of module execution
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Enables MSF to pass the values to other modules internally
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Datastores are used by various classes to hold option values and other state
    information. There are two types of datastores:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Module datastore**: This datastore only saves information and options related
    to the loaded module (local declaration). In the MSF console, you can use the
    `set` command to save the module options and the `get` command to fetch the values
    that have been saved:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/0aef2212-9ebd-44b6-b829-372bc36de379.png)'
  prefs: []
  type: TYPE_IMG
- en: As shown in the preceding screenshot, the `smb_version` module was loaded and
    the `RHOSTS` option was set to `192.168.2.17`. But once we unloaded the module
    (using the `back` command), there was no value to set the RHOSTS option globally.
    To set these options globally, we need to use the global datastore.
  prefs: []
  type: TYPE_NORMAL
- en: '**Global Datastore**: This datastore saves information and options to all the
    modules (global declaration). In the MSF console, you can use the `setg` command
    to save the module options and the `getg` command to fetch:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/fbb6bc1c-8c60-4c7d-81e4-89378a31bd93.png)'
  prefs: []
  type: TYPE_IMG
- en: In the preceding screenshot, we saved the value `192.168.2.17` in the RHOSTS
    option globally, which means the RHOSTS option will be set in case we use another
    module. If `setg` is used, we can always retrieve the data by using `get` or `getg`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Executing just the `set` command in the module will show all the available
    options (for both module datastore and the global datastore) that have been saved:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/e06a6059-316a-4a62-a077-403487d71280.png)'
  prefs: []
  type: TYPE_IMG
- en: In the case of removing the values from the datastores, you can always use the
    `unset` and `unsetg` commands.
  prefs: []
  type: TYPE_NORMAL
- en: 'Note: If an option is set globally using `setg`, you cannot remove it using
    the `unset` command. Instead, you need to use `unsetg`.'
  prefs: []
  type: TYPE_NORMAL
- en: Exploring MSF modules
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'All the options and modules available in Metasploit Framework can be accessed
    using the `show` command. Let''s take a look:'
  prefs: []
  type: TYPE_NORMAL
- en: 'To see all the valid parameters for this command, you need to execute the `show
    -h` command in the MSF console, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/668ef9fe-1b22-4806-b056-8cd03047e982.png)'
  prefs: []
  type: TYPE_IMG
- en: 'To show the auxiliary available in Metasploit Framework, execute the `show
    auxiliary` command, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/abc3952c-eb84-4a26-b840-ad9b0aae2f42.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The same command is used to list the other modules and module-specific parameters.
    Alternatively, you can always press the *Tab* button on your keyboard twice to
    see the available parameters for the `show` command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/30e15b69-fd4f-4461-8ef5-50c9df89da06.png)'
  prefs: []
  type: TYPE_IMG
- en: 'For module-specific parameters, just load the module that you want to use and
    then execute the `show` command in it. In this case, we used the `smb_version`
    auxiliary module and pressed the *Tab* button twice to see all the parameters
    available for the `show` command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/4fad770a-cccf-465f-8180-aa47db7f7ebc.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We can look at all the evasion options that are available for this particular
    module using the `show evasion` command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/566a293c-b45b-45a7-aa8b-e447cadb01df.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Note: These options are generally used to bypass network filtration endpoints
    such as **intrusion detection/prevention systems** (**IDSes/IPSes**).'
  prefs: []
  type: TYPE_NORMAL
- en: Running OS commands in MSF
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'One of the features of Metasploit Framework is that we can execute normal shell
    commands from the console. You can execute any shell command that is supported
    by your shell (bash/sh/zsh/csh). In this case, we executed the `whoami && id`
    command from the console. The command was executed and the result was displayed
    in the console itself, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/e4d22347-6d89-4b9b-a212-b1824791be7c.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We can also use an interactive bash script from the console using the `/bin/bash
    -i` command or just `/bin/bash` (the `-i` switch is used to run bash in interactive
    mode):'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/18447378-757f-4ef6-a80f-9d82447a96d6.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Note: To get an interactive command prompt in Windows, execute `cmd.exe` in
    the console.'
  prefs: []
  type: TYPE_NORMAL
- en: Setting up a database connection in Metasploit Framework
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'One of the coolest features of Metasploit Framework is the use of backend databases
    in order to store all the content related to a target. Follow these steps to set
    up the database when running MSF:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Check whether the database is connected to MSF using the `db_status` command
    from the console, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/0ebe2b05-1d67-4120-9127-65d9c6cf7b4a.png)'
  prefs: []
  type: TYPE_IMG
- en: 'As shown in the preceding screenshot, the database is yet to be connected.
    We can connect to the database either by using a database config file, a one-liner
    command, or by using a RESTful HTTP API data service (a new feature of MSF 5).
    By default, there won''t be a `database.yml` file, but you can copy the content
    from the `database.yml.example` file. You can edit the file like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/b44a48a3-9c19-4505-9f85-2efd7a683279.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Note: If you don''t initialize and install the database, this method won''t
    work. For more information, go to [https://fedoraproject.org/wiki/Metasploit_Postgres_Setup](https://fedoraproject.org/wiki/Metasploit_Postgres_Setup).'
  prefs: []
  type: TYPE_NORMAL
- en: 'Once the file has been edited and saved, you can use the `-y` switch in the
    `db_connect` command to connect to the database:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/2ed60307-c7f8-4c1b-8ff4-3e82681942f5.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Let''s check the status once again:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/823b95d2-8a0b-424b-98aa-80a218309723.png)'
  prefs: []
  type: TYPE_IMG
- en: As you can see, the console is now connected to the backend database.
  prefs: []
  type: TYPE_NORMAL
- en: Loading plugins in MSF
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Plugins are an extended feature in Metasploit Framework. They are used to expand
    the reach of MSF by utilizing the flexibility of the Ruby language. This allows
    the plugin to do virtually anything, from building new automation capabilities
    to providing packet-level content filtering to bypass IDSes/IPSes. Plugins can
    also be used to integrate third-party software such as Nessus, OpenVAS, and Sqlmap
    into the framework. Follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'To load a plugin, you need to use the `load` command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/ff29b263-3386-47c7-a40a-42ca2257b63b.png)'
  prefs: []
  type: TYPE_IMG
- en: 'By default, Metasploit comes with some built-in plugins. These can be found
    by pressing the *Tab* button twice after using the `load` command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/7c21a5e0-a022-424d-acac-3fc0c33a7d6b.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Note: All the available built-in plugins can be found here: [https://github.com/rapid7/metasploit-framework/tree/master/plugins](https://github.com/rapid7/metasploit-framework/tree/master/plugins)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s load the OPENVAS plugin by executing the `**load openvas**` command
    in the console. This plugin will be covered in later chapters:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/4a7cb3bf-4765-4c4d-bfdb-2e0995a09519.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Once the plugin has been loaded successfully, you can execute the `**help**`
    command in the console and look for "OpenVAS Commands" to see all the supported
    commands for this specific plugin:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/e8111ce0-6cb2-428d-8b8c-7d12d7644fde.png)'
  prefs: []
  type: TYPE_IMG
- en: You can load custom plugins by copying the `.rb` plugin files in the `<MSF_INSTALL_DIR>/plugins/`
    directory and executing the `load` command with the plugin name.
  prefs: []
  type: TYPE_NORMAL
- en: Using Metasploit modules
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Metasploit modules are very easy to use. In a nutshell, anyone can follow this
    process to get familiar with the modules:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/8c958855-a745-4015-a57b-0cdad7f5fb09.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Let''s use the `smb_version` auxiliary module in this case:'
  prefs: []
  type: TYPE_NORMAL
- en: 'By executing the `use auxiliary/scanner/smb/smb_version` command, we have loaded
    the module in the console:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/d695097f-f4d8-4a79-8e93-9f009b17babf.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now, we need to configure the module according to our needs. The available
    options for `smb_version` can be seen by using the `show options` command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/a3db2380-e5ec-4b3c-a96a-9735d28cec1d.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We can use the `set/setg` command to configure the module options. Advanced
    options for `smb_version` are also available and can be shown by using the `show
    advanced` command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/7464bfba-6a35-465e-828d-233aa27d0ad3.png)'
  prefs: []
  type: TYPE_IMG
- en: 'To evade IDS/IPS endpoints, you can set the evasion options for the `smb_version`
    module. Use the `show evasion` command to list all the supported evasion options
    for this module:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/6bd9a927-0e7a-4e96-ba8e-da9ebe50d1a0.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now that the configuration is done, you can just check for the missing options
    one last time before running the module by executing the `show missing` command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/74945709-afcd-48c5-b33f-eae315429a7d.png)'
  prefs: []
  type: TYPE_IMG
- en: 'In this case, we''ll set up RHOSTS in `192.168.2.17` and then execute the module
    either by using the `run` command or the `execute` command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/86acd0eb-7f74-4358-8152-efa1d0cf9f88.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Note: The modules won''t run unless all the required settings have been configured.'
  prefs: []
  type: TYPE_NORMAL
- en: Searching modules in MSF
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Searching in Metasploit is very easy. The `search` command accepts string values
    from a user. As shown in the following screenshot, searching for the `windows`
    string will list all the modules that are intended for the Windows OS:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/d5f6f219-965c-4527-bd7e-ff41cff5bd2b.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Metasploit search also allows us to search based on the module type. For example,
    typing `**search windows type:exploit**` will show a list of all Windows exploits.
    Similarly, we can define the CVE. To search for a Windows exploit that came out
    in 2018, we can type `search windows type:exploit cve:2018`, as shown in the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/f038fa11-08fa-4feb-b0d3-067abb72ad1b.png)'
  prefs: []
  type: TYPE_IMG
- en: Next, we will learn how to check for hosts and services in MSF.
  prefs: []
  type: TYPE_NORMAL
- en: Checking for hosts and services in MSF
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'So far, we have covered the basics of `msfconsole`. Now, let''s move on and
    learn how to manage hosts and services:'
  prefs: []
  type: TYPE_NORMAL
- en: 'To view a list of all hosts that have been added, use the `hosts` command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/8ab73077-a357-46c6-8d63-4afbae32f675.png)'
  prefs: []
  type: TYPE_IMG
- en: 'To add a new host, we can use the `hosts -a <IP>` command, as shown in the
    following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/0e03d157-7ade-463a-880c-25fa3b03224f.png)'
  prefs: []
  type: TYPE_IMG
- en: 'To remove a host, we use the `hosts -d <IP>` command, as shown in the following
    screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/9f5138ec-fede-4ef2-9b83-fc82bb916e57.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Similarly, the `services` command allows us to view a list of all the services
    that are available across all the hosts that have been added to Metasploit. Let''s
    take a look:'
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we need to use the `services` command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/55ed767d-3862-4845-8fcf-9697db8f08d4.png)'
  prefs: []
  type: TYPE_IMG
- en: 'To view the list of services for a single host, we can use the `services <IP>`
    command, as shown in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/a3a70cb0-1ced-41d3-be13-2d735bc654e7.png)'
  prefs: []
  type: TYPE_IMG
- en: We cannot add multiple ports at once. Doing that will throw an error – Exactly
    one port required – as shown in the preceding screenshot.
  prefs: []
  type: TYPE_NORMAL
- en: 'Metasploit also allows us to add a custom service manually by using the `services
    -a -p <port number>` command, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/79b0677b-60a8-422a-86cf-cf01473981f9.png)'
  prefs: []
  type: TYPE_IMG
- en: Next, let's look at Nmap scanning with MSF.
  prefs: []
  type: TYPE_NORMAL
- en: Nmap scanning with MSF
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Once we've added hosts to Metasploit, the next step is scanning. Metasploit
    has an inbuilt wrapper for Nmap that gives us the same functionality of Nmap within
    the Metasploit console. The benefit of this wrapper is that it saves the output
    in the database by default.
  prefs: []
  type: TYPE_NORMAL
- en: 'To run a scan against a host, we can use the `db_nmap <IP>` command. Here,
    we have used the `--open` flag to view only open ports. `-v` is used for verbose,
    `-Pn` is used to perform a no-ping scan, `-sV` is used to perform a service scan,
    and `-sC` is used to run script scans against discovered ports:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/a4ab6f0c-7f9f-4578-aac2-9cc7de3008d1.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The following screenshot shows the output of the scan that was run on the host:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/e62ce0f6-8b68-4d8c-9c30-2a65c3d68109.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Metasploit also allows us to import external scans that have been completed
    by Nmap into its database using `db_import`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/cdf221b1-0e34-41c0-a562-fa2fbcb2c7cf.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Currently, MSF supports the following formats for importing data into its DB:
    Acunetix, Amap Log, Amap Log -m, Appscan, Burp Session XML, Burp Issue XML, CI,
    Foundstone, FusionVM XML, Group Policy Preferences Credentials, IP Address List,
    IP360 ASPL, IP360 XML v3, Libpcap Packet Capture, Masscan XML, Metasploit PWDump
    Export, Metasploit XML, Metasploit Zip Export, Microsoft Baseline Security Analyzer,
    NeXpose Simple XML, NeXpose XML Report, Nessus NBE Report, Nessus XML (v1), Nessus
    XML (v2), NetSparker XML, Nikto XML, Nmap XML, OpenVAS Report, OpenVAS XML, Outpost24
    XML, Qualys Asset XML, Qualys Scan XML, Retina XML, Spiceworks CSV Export, and
    Wapiti XML.'
  prefs: []
  type: TYPE_NORMAL
- en: Setting up payload handling in MSF
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Before launching the module, we need to set up the handler. This handler is
    a stub that''s used to handle the exploits that are launched outside Metasploit
    Framework:'
  prefs: []
  type: TYPE_NORMAL
- en: 'The handler module is loaded by typing the `use exploit/multi/handler` command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/5057728e-34b4-419d-8465-092a72472084.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Next, we view the available options using the `show options` command, as shown
    in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/8153fb19-5943-4470-9900-2ab95f95fc92.png)'
  prefs: []
  type: TYPE_IMG
- en: 'As we can see, the options are currently empty. These options are loaded once
    we define a payload. For example, we will use the `windows/x64/meterpreter/reverse_tcp`
    payload here and set the standard options for the payload, such as `LHOST` and
    `LPORT`. The `stageencoder` and `enablestageencoding` options are set to encode
    the second stage that''s sent by the handler to the victim:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/47236858-7ea1-4357-ac0b-e4b6683210fd.png)'
  prefs: []
  type: TYPE_IMG
- en: First, we set `LHOST` and `LPORT` before choosing the encoder, which will encode
    the stager using the `shikata_ga_nai` encoder. The reason we used a stager encoding
    mechanism is to bypass the IPSes/DPSes by encoding the stager, hence changing
    the signature on the fly.
  prefs: []
  type: TYPE_NORMAL
- en: We also need to enable stage encoding by setting its value to `true`**.** This
    option will enable the second stage encoding process with the encoder we selected.
    Once the `stageencoding` option has been set, the `run -j` command is executed
    to start the handler in the background.
  prefs: []
  type: TYPE_NORMAL
- en: 'Another way to run the handler is by using the `handler` command, which is
    available in the console, and passing arguments to it:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/a7abc47f-b039-407f-990c-42c7447797d0.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Hence, the one-liner command that''s used to execute the handler with all the
    previously discussed settings will be `handler -H <IP> -P <Port> -e <encoder>
    -p <payload>`, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/013a1e1b-b7f0-4384-8019-ed26a55fe118.png)'
  prefs: []
  type: TYPE_IMG
- en: Next, we will look at MSF payload generation.
  prefs: []
  type: TYPE_NORMAL
- en: MSF payload generation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Payload generation is one of the most useful features in Metasploit Framework.
    From a simple shellcode generation to a fully weaponized EXE/DLL file, Metasploit
    can generate this in a single-line command. The payload can be generated in two
    ways.
  prefs: []
  type: TYPE_NORMAL
- en: Generating an MSF payload using msfconsole (one-liner)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'By using the MSF console and executing the commands for payload generation,
    you can generate any MSF supported payload. One advantage of using this technique
    is that you don''t have to start a payload handler separately. This can be done
    using a single-line command. To generate the payload and start the handler, execute
    the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'The following screenshot shows the output of the preceding command:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/98134196-af74-4fcc-b15c-c66e3ed8bf92.png)'
  prefs: []
  type: TYPE_IMG
- en: The preceding command will generate the `reverse_https` Meterpreter payload.
    List it to confirm the generated payload and start the handler on port `9090`
    for the incoming connections. Another way to generate the payload is by using
    MSFvenom.
  prefs: []
  type: TYPE_NORMAL
- en: In the preceding command, the `-q` switch is used to start MSF in quiet mode,
    and `-x` executes the command in the console after it's started.
  prefs: []
  type: TYPE_NORMAL
- en: Generating an MSF payload using msfvenom
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'MSFvenom is a built-in tool that generates and obfuscates payloads without
    the need to start MSF. Execute the `msfvenom -p <MSF supported payload> lhost=<IP>
    lport=<PORT> -f <Output File Format> -o <payload filename>` command to generate
    a `reverse_https` Meterpreter payload in EXE format and save the file:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/02196b7c-1a4f-4874-8072-fd907beb0113.png)'
  prefs: []
  type: TYPE_IMG
- en: In both cases, we used `ls -alh https_2.exe`.
  prefs: []
  type: TYPE_NORMAL
- en: This payload can now be uploaded/executed on the victim's system to get a reverse
    Meterpreter connection over a secure HTTPS tunnel back to us.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we learned about the basic terminology of Metasploit Framework,
    as well as how to install it and set it up on *nix-based and Windows-based systems.
    Then, we looked at the usage of MSF. We loaded modules/auxiliaries, set target
    values, and ran them against a host. Finally, we learned how to generate payloads
    using MSFvenom for exploitation purposes.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we'll learn how to use Metasploit but with the web interface
    **User Interactive** (**UI**) option. This can really help those who don't have
    a strong understanding of the **command-line interface** (**CLI**).
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Is Metasploit Framework free for use?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Can I encrypt my payloads so that they can evade anti-virus software?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: I'm using MySQL as my pen testing backend. Can I integrate MySQL or any other
    Non-PostgreSQL database with Metasploit?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: I have multiple systems where Metasploit Framework is installed. Can I centralize
    the database for each Metasploit instance?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The following links will help you find out more about Metasploit, all of which
    are from its official blogs and documentation:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://www.offensive-security.com/metasploit-unleashed/](https://www.offensive-security.com/metasploit-unleashed/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[http://resources.metasploit.com/](http://resources.metasploit.com/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://metasploit.help.rapid7.com/docs](https://metasploit.help.rapid7.com/docs)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
