- en: Vulnerability Scanning and Intrusion Detection
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are lots of threats out there, and some of them might even penetrate into
    your network. You'll want to know when that happens, so you'll want to have a
    good **Network Intrusion Detection System** (**NIDS**) in place. We'll look at
    Snort, which is probably the most famous one. I'll then show you a way to cheat
    so that you can have a Snort system up and running in no time at all.
  prefs: []
  type: TYPE_NORMAL
- en: We've already seen how to scan a machine for viruses and rootkits by installing
    scanning tools onto the machines that we want to scan. However, there are a lot
    more vulnerabilities for which we can scan, and I'll show you some cool tools
    that you can use for that.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following topics are covered in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: An introduction to Snort and Security Onion
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Scanning and hardening with Lynis
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Finding vulnerabilities with OpenVAS
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Web server scanning with Nikto
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Looking at Snort and Security Onion
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Snort is a NIDS, which is offered as a free open source software product. The
    program itself is free of charge, but you'll need to pay if you want to have a
    complete, up-to-date set of threat detection rules. Snort started out as a one-man
    project, but it's now owned by Cisco.  Understand though, this isn't something
    that you install on the machine that you want to protect. Rather, you'll have
    at least one dedicated Snort machine someplace on the network, just monitoring
    all network traffic, watching for anomalies. When it sees traffic that shouldn't
    be there—something that indicates the presence of a bot, for example—it can either
    just send an alert message to an administrator or it can even block the anomalous
    traffic, depending on how the rules are configured. For a small network, you can
    have just one Snort machine that acts as both a control console and a sensor.
    For large networks, you could have one Snort machine set up as a control console
    and have it receive reports from other Snort machines that are set up as sensors.
  prefs: []
  type: TYPE_NORMAL
- en: Snort isn't too hard to deal with, but setting up a complete Snort solution
    from scratch can be a bit tedious. After we look at the basics of Snort usage,
    I'll show you how to vastly simplify things by setting up a prebuilt Snort appliance.
  prefs: []
  type: TYPE_NORMAL
- en: Space doesn't permit me to present a comprehensive tutorial about Snort. Instead,
    I'll present a high-level overview and then present you with other resources for
    learning Snort in detail.
  prefs: []
  type: TYPE_NORMAL
- en: Obtaining and installing Snort
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Snort isn't in the official repository of any Linux distro, so you'll need to
    get it from the Snort website. On their downloads page, you'll see installer files
    in the `.rpm` format for Fedora and CentOS and a `.exe` installer file for Windows.
    However, you won't see any `.deb` installer files for Ubuntu. That's okay because
    they also provide source code files that you can compile on a variety of different
    Linux distros. To make things simple, let's just talk about installing Snort on
    CentOS 7 with the prebuilt `.rpm` packages.
  prefs: []
  type: TYPE_NORMAL
- en: You can get Snort and Snort training from the official Snort website: [https://www.snort.org](https://www.snort.org).
  prefs: []
  type: TYPE_NORMAL
- en: 'On the Snort home page, just scroll down a bit, and you''ll see the guide on
    how to download and install Snort. Click on the Centos tab and follow the steps.
    The commands in Step 1 will download and install Snort all in one smooth operation,
    as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/825be8a6-1bc3-417e-a31d-defb1636a75b.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Step 2 and Step 3 involve signing up for your Oinkcode so that you can download
    the official Snort detection rules and then installing PulledPork so that you
    can keep the rules updated automatically, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/9fcc95e1-cce7-43fc-b61f-b394926a815a.png)'
  prefs: []
  type: TYPE_IMG
- en: Bear in mind though that the free-of-charge detection rules that the Snort folk
    provide are about a month behind the ones that paid subscribers get. For learning
    purposes though, they're all that you need. Also, if you choose to not get the
    Oinkcode, you can just use the Community rules, which are a subset of the official
    Snort rules.
  prefs: []
  type: TYPE_NORMAL
- en: 'Step 4 is just to read the documentation:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/34f8d630-e4e3-48ad-aa40-e1ce33afa131.png)'
  prefs: []
  type: TYPE_IMG
- en: And, that's it. You now have a working copy of Snort. The only catch is all
    you have so far is just the command-line interface, which might not be what you
    want.
  prefs: []
  type: TYPE_NORMAL
- en: Graphical interfaces for Snort
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Plain, unadorned Snort will do what you need it to do, and it will save its
    findings to its own set of log files. However, reading through log files to discern
    network traffic trends can get a bit tedious, so you'll want some tools to help
    you out. The best tools are the graphical ones, which can give you a good visualization
    of what's going on with your network.
  prefs: []
  type: TYPE_NORMAL
- en: 'One example is the **Basic Analysis and Security Engine** (**BASE**), as shown
    in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/a1273047-f170-4c8e-9822-259d9a0dcc7e.png)'
  prefs: []
  type: TYPE_IMG
- en: There are several more, but I'll show them to you when we get to the *Security
    Onion* section.
  prefs: []
  type: TYPE_NORMAL
- en: You can find out more about BASE from the author's *Professionally Evil* website: [https://professionallyevil.com/](https://professionallyevil.com/)
  prefs: []
  type: TYPE_NORMAL
- en: Getting Snort in prebuilt appliances
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Snort itself isn't too terribly difficult to set up. However, if you're doing
    everything manually, it can be a bit tedious by the time you've set up the control
    console, the sensors, and your choice of graphical frontends. So—and, imagine
    me peering at you over my dark glasses as I say this—what if I told you that you
    can get your Snort setup as part of a ready-to-go appliance? What if I told you
    that setting up such an appliance is an absolute breeze? I imagine that you'd
    probably say, *So, show me already!*
  prefs: []
  type: TYPE_NORMAL
- en: If you feel bad about cheating by making Snort deployment so easy, there's really
    no need to. An official Snort representative once told me that most people deploy
    Snort in this manner.
  prefs: []
  type: TYPE_NORMAL
- en: Since Snort is a **Free Open Source Software** (**FOSS**) project, it's perfectly
    legal for people to build it into their own FOSS applications. Also, if you think
    back to our discussion of firewalls in [Chapter 3](2ce81cc7-33d8-4d16-ae1a-c446995dd50a.xhtml),
    *Securing Your Server with a Firewall*, I completely glossed over any discussion
    of creating the **Network Address Translation** (**NAT**) rules that you would
    need for setting up an edge or gateway type of firewall. That's because there
    are several Linux distros that have been created specifically for this purpose.
    What if I told you, that some of them also include a full implementation of Snort?
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/470e2fe5-231d-49e4-81b3-1982a6cbc381.png)'
  prefs: []
  type: TYPE_IMG
- en: 'IPFire is completely free of charge, and it only takes a few minutes to set
    up. You install it on a machine with at least two network interface adapters and
    configure it to match your network configuration. It''s a proxy-type of a firewall,
    which means that in addition to doing normal firewall-type packet inspection,
    it also includes caching, content-filtering, and NAT capabilities. You can set
    up IPFire in a number of different configurations:'
  prefs: []
  type: TYPE_NORMAL
- en: On a computer with two network interface adapters, you can have one connected
    to the internet, and the other connected to the internal LAN.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: With three network adapters, you can have one connection to the internet, one
    to the internal LAN, and one to the **Demilitarized Zone** (**DMZ**), where you
    have your internet-facing servers.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: With a fourth network adapter, you can have all the above, plus protection for
    a wireless network.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'After you install IPFire, you''ll need to use the web browser of your normal
    workstation to navigate to the IPFire dashboard. Under the Services menu, you''ll
    see an entry for Intrusion Detection. Click on that to get to this screen, where
    you can download and enable the Snort detection rules:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/deb79b23-a4a1-43b1-83b1-b622c99c61be.png)'
  prefs: []
  type: TYPE_IMG
- en: 'There''s really only one slight bit of manual tweaking that you might need
    to do from the command line. That is, you might want to go into the rules directory
    and make sure that the rules that you want to enable are enabled. On my demo machine,
    I installed the community rules and the emerging threat rules:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: When you first install IPFire, the only user account that it sets up is for
    the root user. However, the tools are there to create a normal user account and
    give it `sudo` privileges. I haven't yet done that on this machine because I wanted
    to show you the default configuration. But, I definitely would do it on a production
    machine. I would then disable the root account.
  prefs: []
  type: TYPE_NORMAL
- en: 'When you open one of these rules files, you''ll see that a lot of them are
    disabled and relatively few are enabled. The disabled rules have a `#` sign in
    front of them, as do these two rules from the `community.rules` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'You''ve probably also noted that each rule begins with the keyword, `alert`.
    You can use `grep` to do a quick check to see which rules in a file are enabled:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'The `^` character means that I''m searching through the `community.rules` file for
    every line that begins with the word `alert`, without the preceding `#` sign.
    Piping the output into `less` is optional, but it can help you better see all
    of the output data. You can also search through all the files at once using a
    wildcard:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: You'll want to look through the rules to see which you need and which you don't
    need. Enable the desired rule by removing the `#` sign from in front of it and
    disable an undesired rule by placing a `#` sign in front of it.
  prefs: []
  type: TYPE_NORMAL
- en: 'Unfortunately, IPFire doesn''t include a graphical frontend for visualizing
    Snort data, but it does come with an IDS log viewer:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/17a98e3e-7965-4498-ba9b-73dfe68fe310.png)'
  prefs: []
  type: TYPE_IMG
- en: IPFire also has a lot of other cool features that I haven't yet mentioned. These
    include built-in **Virtual Private Network** (**VPN**) capabilities, a built-in
    DHCP server, a built-in dynamic DNS server, and Quality of Service controls. The
    best part is that it's totally free of charge unless you want to buy a subscription
    to always get the most up-to-date Snort rules.
  prefs: []
  type: TYPE_NORMAL
- en: You can download IPFire from their website: [https://www.ipfire.org/.](https://www.ipfire.org/)
  prefs: []
  type: TYPE_NORMAL
- en: Using Security Onion
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Okay, so maybe the firewall appliance with the built-in Snort isn't what you
    need right now.  Maybe what you need instead is a full-blown NIDS. But, you're
    a busy person who needs something quick and easy, and your boss has put you on
    a rather strict budget. So, what do you do?
  prefs: []
  type: TYPE_NORMAL
- en: Security Onion is a free-of-charge specialty Linux distro that's built on top
    of the Xubuntu **Long-term Support** (**LTS**) distro. It includes a full implementation
    of Snort, complete with just about every graphical goody you can imagine to help
    you visualize what's happening on your network. If you can install a Linux distro
    and do some point-and-click configuration after the installation, then you can
    install Security Onion.
  prefs: []
  type: TYPE_NORMAL
- en: Note that the Xubuntu LTS version on which Security Onion is based is always
    at least one version behind the current LTS version of  Xubuntu. At the time of
    writing, the current Xubuntu LTS version is version 16.04, whereas Security Onion
    is still based on Xubuntu 14.04\. But, that may change by the time you read this
    book.
  prefs: []
  type: TYPE_NORMAL
- en: Also, if you want to try out Security Onion, you can set it up in a VirtualBox
    virtual machine.  When you create the virtual machine, set it up with two network
    adapters, both in *Bridged* mode. For best performance, allocate at least 3 GB
    of memory.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once you''ve finished installing the operating system, the configuration is
    just a simple matter of double-clicking the Setup icon and then following through
    with the dialog boxes:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/bd8cdbf0-8157-4d55-ae8f-cbc2add30f1b.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'For setting up a machine with sensor capabilities, you''ll need a machine with
    two interface cards. One interface, which will have an IP address assigned to
    it, will be the management interface:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/61604ee1-7bbd-49a6-988f-df84287ec385.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'You can set the management interface to automatically get an IP address via
    DHCP, but it''s much better to assign a static IP address:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/ec1ad2ee-0f10-4ee3-9aed-cad2f089aa00.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'You''ll use the other network adapter as the sniffing interface. You won''t
    assign an IP address to it because you want that interface to be invisible to
    the bad guys:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/793d112c-1fbc-4e40-9d48-4f99d4ead81a.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'After you confirm the network configuration that you''ve selected, you''ll
    reboot the machine:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/896c92b3-90aa-4dd4-bc84-d47f13d78311.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Once the machine has rebooted, double-click on the Setup icon again, but this
    time choose to skip the network configuration. For a first-time user of Security
    Onion, Evaluation Mode is quite helpful because it automatically chooses the most
    correct options for most stuff.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/f669c960-bbe3-4221-9f3d-ec3984739106.jpg)'
  prefs: []
  type: TYPE_IMG
- en: From here on out, it's just a matter of confirming which network interface will
    be the sniffer interface and filling in login credentials for the different graphical
    frontends. And then, after waiting a few moments for the setup utility to download
    Snort rules and perform the final configuration steps, you'll have your very own
    operational NIDS. Now I ask, what could be easier?
  prefs: []
  type: TYPE_NORMAL
- en: 'Security Onion comes with several different graphical frontends. My favorite
    is Squert, which is shown here. Even with just the default set of detection rules,
    I''m already seeing some interesting stuff. The following screenshot shows Squert:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/80bc54f7-f1df-40c7-ad84-de2f28b8c732.jpg)'
  prefs: []
  type: TYPE_IMG
- en: For one thing, I see that somebody on the network is mining some Monero cryptocoin. 
    Well, actually, I'm the one who's doing it, so it's okay. But, that is a good
    thing to be able to detect because bad guys have been known to plant Monero mining
    software on corporate servers for their own benefit. Monero cryptocoin mining
    puts a big load on a server's CPUs, so it's not something that you want on your
    servers. Also, some sneaky website operators have placed JavaScript code on their
    web pages that cause any computer that visits them to start mining Monero. So,
    this rule is also good for protecting desktop systems.
  prefs: []
  type: TYPE_NORMAL
- en: Another thing I see is Dropbox client broadcasting, which again is okay because
    I'm a Dropbox user. But, that's something else that you may not want to have on
    a corporate network.
  prefs: []
  type: TYPE_NORMAL
- en: 'To see the Snort rule that''s associated with a particular item, just click
    on it:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/aa806acb-0fd3-4099-bf35-8feaed3a9b83.jpg)'
  prefs: []
  type: TYPE_IMG
- en: It's just a standard Snort rule that's already been set up for us.
  prefs: []
  type: TYPE_NORMAL
- en: 'Bad guys who want to mine Monero without paying for it have set up botnets
    of machines that have been infected with their mining software. In some of the
    attacks, only Windows servers have been infected. But, here''s a case where both
    Windows and Linux servers have been infected:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://www.v3.co.uk/v3-uk/news/3023348/cyber-crooks-conducting-sophisticated-malware-campaign-to-mine-monero](https://www.v3.co.uk/v3-uk/news/3023348/cyber-crooks-conducting-sophisticated-malware-campaign-to-mine-monero)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Click on Squert''s VIEWS tab, and you''ll see a graphical representation of
    the connections that your machines have established:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/54090a04-67d2-403b-a088-26bd25236c1e.jpg)'
  prefs: []
  type: TYPE_IMG
- en: There's still a lot more than I could show you about both Security Onion and
    Snort, but alas, space doesn't permit. I've given you the gist of it, now go try
    it for yourself.
  prefs: []
  type: TYPE_NORMAL
- en: 'I know that I made this Snort/Security Onion thing look rather easy, but there''s
    a lot more to it than what I''ve been able to show you. On a large network, you
    might see a lot of traffic that doesn''t make a lot of sense unless you know how
    to interpret the information that Snort presents to you. You might also need to
    fine-tune your Snort rules in order to see the anomalies that you want to see,
    without generating false positives. Or, you might even find the need to write
    your own custom Snort rules to handle unusual situations. Fortunately, the Security
    Onion folk do provide training, both on-site and online. You can find out more
    about it at the following website:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://securityonionsolutions.com/.](https://securityonionsolutions.com/)'
  prefs: []
  type: TYPE_NORMAL
- en: Scanning and hardening with Lynis
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Lynis is yet another FOSS tool that you can use to scan your systems for vulnerabilities
    and bad security configurations. It comes as a portable shell script that you
    can use not only on Linux, but also on a variety of different Unix systems and
    Unix-like systems. It's a multipurpose tool, which you can use for compliance
    auditing, vulnerability scanning, or hardening. Unlike most vulnerability scanners,
    you install and run Lynis on the system that you want to scan. According to the
    creator of Lynis, this allows for more in-depth scanning.
  prefs: []
  type: TYPE_NORMAL
- en: The Lynis scanning tool is available as a free-of-charge version, but its scanning
    capabilities are somewhat limited. If you need all that Lynis has to offer, you'll
    need to purchase an enterprise license.
  prefs: []
  type: TYPE_NORMAL
- en: Installing Lynis on Red Hat/CentOS
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Red Hat/CentOS users will find an up-to-date version of Lynis in the EPEL repository.
    So, if you have EPEL installed, as I showed you in [Chapter 1](366f0919-598d-4648-8873-b4dbe636d171.xhtml),
    *Running Linux on a Virtual Environment,* installation is just a simple matter
    of doing:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Installing Lynis on Ubuntu
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Ubuntu has Lynis in its own repository, but which version you get depends on
    which version of Ubuntu you have. The Ubuntu 16.04 LTS repository has a version
    that''s fairly far behind what''s current. The version in the Ubuntu 17.10 repository
    is newer, but still not completely up to date. In either case, the command to
    install Lynis is:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: If you want the newest version for Ubuntu or if you want to use Lynis on operating
    systems that don't have it in their repositories, you can download it from the
    author's website.
  prefs: []
  type: TYPE_NORMAL
- en: You can download Lynis from [https://cisofy.com/downloads/lynis/.](https://cisofy.com/downloads/lynis/)
    The cool thing about this is that once you download it, you can use it on any
    Linux, Unix, or Unix-like operating system.  (This even includes MacOS, which
    I just now confirmed by running it on my old Mac Pro that's running with macOS
    High Sierra.) [](https://cisofy.com/downloads/lynis/)
  prefs: []
  type: TYPE_NORMAL
- en: 'Since the executable file is nothing but a common shell script, there''s no
    need to perform an actual installation. All you need to do is to extract the archive
    file, `cd` into the resultant directory, and run Lynis from there:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: The `lynis -h` command shows you the help screen, with all of the Lynis commands
    that you need to know.
  prefs: []
  type: TYPE_NORMAL
- en: Scanning with Lynis
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Lynis commands work the same regardless of which operating system that you want
    to scan. The only difference is that if you're running it from the archive file
    that you downloaded from the website, you would `cd` into the `lynis` directory
    and precede the `lynis` commands with a `./`.  (That's because, for security reasons,
    your own home directory isn't in the path setting that allows the shell to automatically
    find executable files.)
  prefs: []
  type: TYPE_NORMAL
- en: 'To scan your system that has Lynis installed, follow this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'To scan a system on which you just downloaded the archive file, follow this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Running Lynis from the shell script in your home directory presents you with
    this message:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: That's not hurting anything, so you can just hit *Enter* to continue. Or, if
    seeing this message really bothers you, you can change ownership of the Lynis
    files to the root user, as the message tells you. For now, I'll just press *Enter*.
  prefs: []
  type: TYPE_NORMAL
- en: Running a Lynis scan in this manner is similar to running an OpenSCAP scan against
    a generic security profile. The major difference is that OpenSCAP has an automatic
    remediation feature, but Lynis doesn't. Lynis tells you what it finds and suggests
    how to fix what it perceives to be a problem, but it doesn't fix anything for
    you.
  prefs: []
  type: TYPE_NORMAL
- en: 'Space doesn''t permit me to show the entire scan output, but I can show you
    a couple of example snippets:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: The warning message shows that I don't have password protection for my `GRUB2`
    bootloader. That may or may not be a big deal because the only way someone can
    exploit that is to gain physical access to the machine. If it's a server that's
    locked away in a room that only a few trusted personnel can access, then I'm not
    going to worry about it, unless rules from an applicable regulatory agency dictate
    that I do. If it's a desktop machine that's out in an open cubicle, then I would
    definitely fix that. (We'll look at GRUB password protection in [Chapter 10](a991e0a0-ef66-417f-811c-c138e940663c.xhtml),
    *Security Tips and Tricks for the Busy Bee*.)
  prefs: []
  type: TYPE_NORMAL
- en: 'In the `File systems` section, we see some items with the `SUGGESTION` flag:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Exactly what Lynis suggests comes near the end of the output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'The last thing we''ll look at is the scan details section at the end of the
    output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: For `Components`, there's a red `X` by `Malware Scanner`. That's because I don't
    have ClamAV or `maldet` installed on this machine, so Lynis couldn't do a virus
    scan.
  prefs: []
  type: TYPE_NORMAL
- en: For `Lynis Modules`, we see a question mark by `Compliance Status`. That's because
    this feature is reserved for the Enterprise version of Lynis, which requires a
    paid subscription. As we saw in the previous chapter, you have OpenSCAP profiles
    to make a system compliant with several different security standards, and it doesn't
    cost you anything. With Lynis, you have to pay for the compliance profiles, but
    you have a wider range from which to choose. In addition to the compliance profiles
    that OpenSCAP offers, Lynis also offers profiles for HIPAA and Sarbanes-Oxley
    compliance.
  prefs: []
  type: TYPE_NORMAL
- en: If you're based here in the United States, you most surely know what HIPAA and
    Sarbanes-Oxley are and whether they apply to you. If you're not in the United
    States, then you probably don't need to worry about them.
  prefs: []
  type: TYPE_NORMAL
- en: Having said that, if you work in the healthcare industry, even if you're not
    in the United States, the HIPAA profile can give you guidance about how to protect
    private data for patients.
  prefs: []
  type: TYPE_NORMAL
- en: 'The last thing I want to say about Lynis is about the Enterprise version. In
    this screenshot from their website, you can see the current pricing and the differences
    between the different subscription plans:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/56958b7d-ddee-4df7-b56b-ad6cfb4b44ee.png)'
  prefs: []
  type: TYPE_IMG
- en: As you can see, you have choices.
  prefs: []
  type: TYPE_NORMAL
- en: 'You''ll find information about pricing at this website:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://cisofy.com/pricing/.](https://cisofy.com/pricing/)'
  prefs: []
  type: TYPE_NORMAL
- en: That pretty much wraps it up for our discussion of Lynis. Next, let's look at
    an *external* vulnerability scanner.
  prefs: []
  type: TYPE_NORMAL
- en: Finding vulnerabilities with OpenVAS
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The **Open Vulnerability Assessment Scanner** (**OpenVAS**) is something that
    you would use to perform remote vulnerability scans. You can scan a single machine,
    a group of similar machines, or an entire network. It's not included in the repositories
    of the major Linux distros, so the best way to get it is to install one of the
    specialty security distros.
  prefs: []
  type: TYPE_NORMAL
- en: The big three security distros are Kali Linux, Parrot Linux, and Black Arch.
    They're aimed at security researchers and penetration testers, but they contain
    tools that would also be good for just a normal security administrator of either
    the Linux or Windows variety. OpenVAS is one such tool. All three of these three
    security distros have their unique advantages and disadvantages, but as Kali is
    the most popular, we'll go with it for the demos.
  prefs: []
  type: TYPE_NORMAL
- en: You can download Kali Linux from [https://www.kali.org/downloads/.](https://www.kali.org/downloads/)
  prefs: []
  type: TYPE_NORMAL
- en: 'When you go to the Kali download page, you''ll see lots of choices. If you''re
    like me and don''t like the default Gnome 3 desktop environment, you can choose
    something else. I''m personally an LXDE guy, so I''ll go with it:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/d8022e70-a058-4517-b4b3-8fd1a9c3399f.png)'
  prefs: []
  type: TYPE_IMG
- en: Kali is built from Debian Linux, so installing it is pretty much the same as
    installing Debian.  The one exception is that the Kali installer lets you create
    a password for the root user, but it doesn't let you create a normal, non-root
    user account. That's because pretty much everything you do with Kali requires
    you to be logged in as the root user. I know that flies in the face of what I've
    been telling you about not logging in as `root` and about using `sudo` from a
    normal user account instead. However, most of the stuff you need to do with Kali
    doesn't work with `sudo`. Besides, Kali isn't meant to be used as a general-purpose
    distro, and you'll be okay logging in as a root as long as you only use Kali as
    it was intended to be used.
  prefs: []
  type: TYPE_NORMAL
- en: OpenVAS is a rather memory-hungry program, so if you're installing Kali in a
    virtual machine, be sure to allocate at least three GB of memory.
  prefs: []
  type: TYPE_NORMAL
- en: 'The first thing you''ll want to do after installing Kali is to update it, which
    is done in the same way that you''d update any Debian/Ubuntu-type of distro. Then,
    install OpenVAS, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'After the OpenVAS installation completes, you''ll need to run a script that
    will create the security certificates and download the vulnerability database:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'This will take a long time, so you might as well go grab a sandwich and a coffee
    while it''s running. When it''s finally done, you''ll be presented with the password
    that you''ll use to log in to OpenVAS. Write it down and keep it in a safe place:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/876e41e9-8657-4e9c-82b4-c2aa404e2281.png)'
  prefs: []
  type: TYPE_IMG
- en: 'You can control and update OpenVAS from the applications menu:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/94e3fd1a-6ecb-46ef-b233-246cbfe67655.png)'
  prefs: []
  type: TYPE_IMG
- en: 'On that menu, click on openvas start. Then, open Firefox and navigate to `https://localhost:9392`.
    You''ll get a security alert because OpenVAS uses a self-signed security certificate,
    but that''s okay. Just click on the Advanced button, then click on Add Exception:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/c92c5951-0845-4196-b747-e9801c6c1f45.png)'
  prefs: []
  type: TYPE_IMG
- en: At the login page, enter `admin` as the user and then enter the password that
    got generated by the `openvas-setup` script.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, there''s all kinds of fancy stuff that you can do with OpenVAS, but for
    now, we''ll just look at how to do a basic vulnerability scan. To begin, select
    Tasks from the Scans menu on the OpenVAS dashboard:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/e9e44e34-d33e-4018-b7fd-8144c6ab1dd2.png)'
  prefs: []
  type: TYPE_IMG
- en: 'This makes this dialog box pop up, telling you to use the wizard. (Yes indeed,
    we''re off to see the wizard.):'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/4f032242-2fd2-48b1-be96-38459018f05c.png)'
  prefs: []
  type: TYPE_IMG
- en: 'After you close the dialog box, you''ll see the purple wizard icon show up
    in the upper left-hand corner. For now, we''ll just select the Task Wizard option,
    which will choose all of the default scan settings for us:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/f10eb08c-d992-4ba7-ba21-c23023f02f14.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The only thing you need to do here is to enter the IP address of the machine
    that you want to scan and then start the scan:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/010d859c-f0cc-4125-aa11-1790c54a812d.png)'
  prefs: []
  type: TYPE_IMG
- en: The scan will take some time, so you might as well go grab a sandwich and a
    coffee.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/fe476525-6d56-4b2d-9d63-a253e287d4d2.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The type of scan that you''re doing is named Full and Fast, which isn''t the
    most comprehensive type of scan. To select another type of scan and to configure
    other scan options, use the Advanced Task Wizard as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/7035b467-e60d-4787-9e85-ec9b1d8d3843.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Here, you see the drop-down list of the different scan options:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/fdc8c84f-c9f5-4f31-a1c2-623a0a6b5d1d.png)'
  prefs: []
  type: TYPE_IMG
- en: 'When I did the first scan with the default Full and Fast option, I didn''t
    discover many problems. I had one of medium severity and 18 of low severity, and
    that was it. I knew that there had to be more problems than that due to the age
    of the machine that I was scanning, so I tried again with the Full and fast ultimate option.
    This time, I found more, including some high severity stuff:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/90b5493d-aa82-4d16-91fb-e42f1d21bf04.png)'
  prefs: []
  type: TYPE_IMG
- en: The report shows that my machine is using weak encryption algorithms for Secure
    Shell, which is classified as medium severity. It also has a print server vulnerability
    that's classified as a high-severity problem.
  prefs: []
  type: TYPE_NORMAL
- en: You also want to pay attention to the items that aren't flagged as vulnerabilities.
    For example, the VNC security types item shows that port `5900` is open. This
    means that the **Virtual Network Computing** (**VNC**) daemon is running, which
    allows users to remotely log in to this machine's desktop. If this machine were
    an internet-facing machine, that would be a real problem because there's no real
    security with VNC, the way there is with Secure Shell.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/c4a7abda-7d02-41fb-9170-002fceb1b0a9.png)'
  prefs: []
  type: TYPE_IMG
- en: By clicking on the print server item, I can see an explanation of this vulnerability.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/133d19f1-c93a-4aa6-b1eb-9a7970a25ab8.png)'
  prefs: []
  type: TYPE_IMG
- en: Keep in mind that the target machine, in this case, is a desktop machine. If
    it were a server, there's a good chance that we'd see even more problems.
  prefs: []
  type: TYPE_NORMAL
- en: And, that pretty much wraps things up for OpenVAS. As I said before, there's
    a lot of awesome stuff that you can do with it. But, what I've shown you here
    should be enough to get you started. Play around with it and try out the different
    scan options to see the difference in results.
  prefs: []
  type: TYPE_NORMAL
- en: If you want to find out more about Kali Linux, you'll find a great selection
    of books about it at the Packt Publishing website.
  prefs: []
  type: TYPE_NORMAL
- en: Web server scanning with Nikto
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: OpenVAS, which we just looked at, is a general-purpose vulnerability scanner.
    It can find vulnerabilities for any kind of operating system or for any server
    daemon. However, as we've just seen, an OpenVAS scan can take a while to run,
    and it might be more than what you need.
  prefs: []
  type: TYPE_NORMAL
- en: Nikto is a special-purpose tool with only one purpose. That is, it's meant to
    scan web servers and only web servers. It's easy to install, easy to use, and
    capable of doing a comprehensive scan of a web server fairly quickly. And, although
    it's included in Kali Linux, you don't need Kali Linux to run it.
  prefs: []
  type: TYPE_NORMAL
- en: Nikto in Kali Linux
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'If you already have Kali Linux, you''ll find that nikto is already installed
    under the Vulnerability Analysis menu:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/2a672fb6-b8ca-4630-8a4e-0b8f75378588.png)'
  prefs: []
  type: TYPE_IMG
- en: 'When you click on that menu item, you''ll open a command-line terminal with
    a display of the Nikto help screen:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/df7af3ce-9d87-4c84-b649-d2edaa72ac91.png)'
  prefs: []
  type: TYPE_IMG
- en: Installing and updating Nikto on Linux
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Nikto is in the EPEL repository for Red Hat/CentOS, and it's in the normal repository
    for Ubuntu. Along with the Nikto package itself, you'll also want to install a
    package that allows Nikto to scan web servers that are set up with SSL/TLS encryption.
  prefs: []
  type: TYPE_NORMAL
- en: 'To install on Red Hat/CentOS:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'To install on Ubuntu:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'The next thing you''ll want to do is to update the database of vulnerability
    signatures. But, at the time of writing this, there''s a slight bug in the Red
    Hat/CentOS implementation. For some reason, the `docs` directory is missing, which
    means that the update functions won''t be able to download the `CHANGES.txt` file
    to show you what changed with the new database updates. To fix that on your CentOS
    virtual machine, use this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: Keep in mind though that this could be fixed by the time you read this.
  prefs: []
  type: TYPE_NORMAL
- en: 'From here on out, things will work the same on either of your virtual machines.
    To update the vulnerability database, use this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: Nikto itself doesn't require `sudo` privileges, but updating it does because
    it requires writing to a directory where normal users can't write.
  prefs: []
  type: TYPE_NORMAL
- en: Scanning a web server with Nikto
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: From here on out, you no longer need `sudo` privileges.  So, you get a break
    from always having to type your password.
  prefs: []
  type: TYPE_NORMAL
- en: 'To do a simple scan, use the `-h` option to specify the target host:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s look at some sample output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: At the top, we see that there's an `shtml.exe` file present, that's supposedly
    for the FrontPage web authoring program.  I have no idea why it's there, considering
    that this is a Linux server and that that's a Windows executable. Nikto is telling
    me that by having that file there, someone could possibly do a **Denial-of-Service **(**DOS**)
    attack against me.
  prefs: []
  type: TYPE_NORMAL
- en: Next, we see that there are various scripts in the `/cgi-bin` directory. You
    can see from the explanatory messages that that's not a good thing because it
    could allow attackers to execute commands on my server.
  prefs: []
  type: TYPE_NORMAL
- en: After this, we see that there's an `author.exe` file in the `vti_bin` directory,
    which could theoretically allow someone to have authoring privileges.
  prefs: []
  type: TYPE_NORMAL
- en: The final item of interest is the `passwd.txt` file that's in the `wwwboard` directory. 
    Apparently, this password file is browsable, which is definitely not a good thing.
  prefs: []
  type: TYPE_NORMAL
- en: Now, before you accuse me of making these problems up, I will reveal that this
    is a scan of a real production website on a real hosting service. (And yes, I
    do have permission to scan it.)  So, these problems are real and need to be fixed.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here are a couple of other sample messages that I got from scanning a web server
    that''s running WordPress:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: To make a long story short, both of these two problems could potentially allow
    an attacker to steal user credentials. The fix, in this case, would be to see
    if the WordPress folk have issued any updates that would fix the problem.
  prefs: []
  type: TYPE_NORMAL
- en: So, how can we protect a web server against these kinds of vulnerabilities?
  prefs: []
  type: TYPE_NORMAL
- en: As we saw in the first example, you want to ensure that you don't have any risky
    executable files on your web server. In this case, we found two `.exe` files that
    might not hurt anything on our Linux server, since Windows executable files don't
    run on Linux. However, on the other hand, it could be a Linux executable that's
    disguised as a Windows executable. We also found some `perl` scripts that definitely
    would run on Linux and that could pose a problem.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In the event that someone were to plant some malicious script on your web server,
    you would want to have some form of mandatory access control, such as SELinux
    or AppArmor, that would keep the malicious scripts from running. (See [Chapter
    7](39aa4856-4412-4ca1-a2ee-f53a13ee96c9.xhtml), *Implementing Mandatory Access
    Control with SELinux and AppArmor,* for details about that.)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You might also consider installing a web application firewall, such as *ModSecurity*.
    Space doesn't permit me to cover the details of ModSecurity, but you'll find a
    book that covers it at the Packt Publishing website.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Keep your systems updated, especially if you're running a PHP-based content
    management system such as WordPress. (If you keep up with the IT security news,
    you'll see stories about WordPress vulnerabilities more often than you'd like
    to.)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There are other scan options, which you can see by just typing `nikto` at the
    command line. For now though, this is enough to get you started with basic web
    server scanning.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We've reached yet another milestone in our journey, and we saw some cool stuff.
    We started with a discussion about the basics of setting up Snort as a NIDS. I
    then showed you how to seriously cheat by deploying specialty Linux distros that
    already have Snort set up and ready to go.
  prefs: []
  type: TYPE_NORMAL
- en: Next, I introduced you to Lynis and how you can use it to scan your system for
    various vulnerabilities and compliance issues. Finally, we wrapped things up with
    working demos of OpenVAS and Nikto.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we'll wind up this whole journey with a look at some quick
    tips for busy administrators. I'll see you there.
  prefs: []
  type: TYPE_NORMAL
