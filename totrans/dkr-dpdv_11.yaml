- en: '9: Deploying Apps with Docker Compose'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this chapter, we’ll look at how to deploy multi-container applications using
    Docker Compose.
  prefs: []
  type: TYPE_NORMAL
- en: Docker Compose and Docker Stacks are very similar. In this chapter we’ll focus
    on Docker Compose, which deploys and manages multi-container applications on Docker
    nodes operating in **single-engine mode**. In a later chapter, we’ll focus on
    Docker Stacks. Stacks deploy and manage multi-container apps on Docker nodes operating
    in **Swarm mode**.
  prefs: []
  type: TYPE_NORMAL
- en: 'We’ll split this chapter into the usual three parts:'
  prefs: []
  type: TYPE_NORMAL
- en: The TLDR
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The deep dive
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The commands
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Deploying apps with Compose - The TLDR
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Most modern apps are made of multiple smaller services that interact to form
    a useful app. We call this microservices. A simple example might be an app with
    the following four services:'
  prefs: []
  type: TYPE_NORMAL
- en: web front-end
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ordering
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: catalog
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: back-end database
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Put all of these together, and you have a *useful application*.
  prefs: []
  type: TYPE_NORMAL
- en: Deploying and managing lots of services can be hard. This is where *Docker Compose*
    comes in to play.
  prefs: []
  type: TYPE_NORMAL
- en: Instead of gluing everything together with scripts and long `docker` commands,
    Docker Compose lets you describe an entire app in a single declarative configuration
    file. You then deploy it with a single command.
  prefs: []
  type: TYPE_NORMAL
- en: Once the app is *deployed*, you can *manage* its entire lifecycle with a simple
    set of commands. You can even store and manage the configuration file in a version
    control system! It’s all very grown-up :-D
  prefs: []
  type: TYPE_NORMAL
- en: That’s the basics. Let’s dig deeper.
  prefs: []
  type: TYPE_NORMAL
- en: Deploying apps with Compose - The Deep Dive
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'We’ll divide the Deep Dive section as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Compose background
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installing Compose
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Compose files
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Deploying an app with Compose
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Managing an app with Compose
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Compose background
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: In the beginning was *Fig*. Fig was a powerful tool, created by a company called
    *Orchard*, and it was the best way to manage multi-container Docker apps. It was
    a Python tool that sat on top of Docker, and allowed you to define entire multi-container
    apps in a single YAML file. You could then deploy the app with the `fig` command-line
    tool. Fig could even manage the entire life-cycle of the app.
  prefs: []
  type: TYPE_NORMAL
- en: Behind the scenes, Fig would read the YAML file and deploy and manage the app
    via the Docker API. It was a good thing!
  prefs: []
  type: TYPE_NORMAL
- en: In fact, it was so good, that in 2014, Docker, Inc. acquired Orchard and re-branded
    Fig as *Docker Compose*. The command-line tool was renamed from `fig` to `docker-compose`,
    and ever since the acquisition, it’s been an external tool that gets bolted on
    top of the Docker Engine. Even though it’s never been fully integrated into the
    Docker Engine, it’s always been immensely popular and very widely used.
  prefs: []
  type: TYPE_NORMAL
- en: As things stand today, Compose is still an external Python binary that you have
    to install on a host running the Docker Engine. You define multi-container (multi-service)
    apps in a YAML file, pass the YAML file to the `docker-compose` binary, and Compose
    deploys it via the Docker Engine API.
  prefs: []
  type: TYPE_NORMAL
- en: Time to see it in action.
  prefs: []
  type: TYPE_NORMAL
- en: Installing Compose
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Docker Compose is available on multiple platforms. In this section we’ll demonstrate
    *some* of the ways to install it on Windows, Mac, and Linux. More installation
    methods exist, but the ones we show here will get you started.
  prefs: []
  type: TYPE_NORMAL
- en: Installing Compose on Windows 10
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: The recommended way to run Docker on Windows 10 is *Docker for Windows (DfW)*.
    Docker Compose is included as part of the standard DfW installation. So if you’ve
    got DfW, you’ve got Docker Compose.
  prefs: []
  type: TYPE_NORMAL
- en: Use the following command to check that Compose is installed. You can run this
    command from a PowerShell or CMD terminal.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '`See **Chapter 3: Installing Docker** if you need more information on installing
    *Docker for Windows* on Windows 10.'
  prefs: []
  type: TYPE_NORMAL
- en: Installing Compose on Mac
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: As with Windows 10, Docker Compose is installed as part of *Docker for Mac (DfM)*.
    So if you have DfM, you have Docker Compose.
  prefs: []
  type: TYPE_NORMAL
- en: Run the following command from a terminal window to verify you have Docker Compose.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '`See **Chapter 3: Installing Docker** if you need more information on installing
    *Docker for Mac*.'
  prefs: []
  type: TYPE_NORMAL
- en: Installing Compose on Windows Server
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: Docker Compose is installed on Windows Server as a separate binary. To use it,
    you will need an up-to-date working installation of Docker on your Windows Server.
  prefs: []
  type: TYPE_NORMAL
- en: Type the following command into a PowerShell terminal to install Docker Compose.
  prefs: []
  type: TYPE_NORMAL
- en: For readability, the command uses backticks (`) to escape carriage returns and
    wrap the command over multiple lines.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following commands installs version `1.18.0` of Docker Compose. You can
    install any version listed here: https://github.com/docker/compose/releases. Just
    replace the `1.18.0` in the URL with the version you want to install.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '`Use the `docker-compose --version` command to verify the installation.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '`Compose is now installed. As long as your Windows Server machine has an up-to-date
    installation of the Docker Engine, you’re ready to go.'
  prefs: []
  type: TYPE_NORMAL
- en: Installing Compose on Linux
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: Installing Docker Compose on Linux is a two-step process. First, you download
    the binary using the `curl` command. Then you make it executable using `chmod`.
  prefs: []
  type: TYPE_NORMAL
- en: For Docker Compose to work on Linux, you’ll need a working version of the Docker
    Engine.
  prefs: []
  type: TYPE_NORMAL
- en: The following command will download version `1.18.0` of Docker Compose and copy
    it to `/usr/bin/local`. You can check the releases page on [GitHub](https://github.com/docker/compose/releases)
    for the latest version and replace the `1.18.0` in the URL with the version you
    want to install.
  prefs: []
  type: TYPE_NORMAL
- en: The command may wrap over multiple lines in the book. If you run the command
    on a single line you will need to remove any backslashes (`\`).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]``\`'
  prefs: []
  type: TYPE_NORMAL
- en: '`uname` `-``s[PRE5]uname` `-``m[PRE6][PRE7]`'
  prefs: []
  type: TYPE_NORMAL
