- en: Chapter 1. Introduction and Setup
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: CryENGINE is known as one of the most extensible engines available due to its
    ability to portray a vast variety of impressive visuals and gameplay. This makes
    it an invaluable tool at the hand of a programmer, where the only limit is one's
    creativity.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Installing **Visual Studio Express 2012 for Windows Desktop**
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Downloading the CryENGINE sample installation or using a custom engine install
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Registering an account at [http://www.crydev.net](http://www.crydev.net), the
    official CryENGINE development portal
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Compiling a stripped-down CryGame library
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Attaching and utilizing the debugger
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installing Visual Studio Express 2012
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In order to compile the game code, you will need a copy of Visual Studio. For
    this demonstration, we'll be using Visual Studio Express 2012 for Windows Desktop.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If you already have Visual Studio 2012 installed, you may skip this step.
  prefs: []
  type: TYPE_NORMAL
- en: '![Installing Visual Studio Express 2012](img/5909_01_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'To install Visual Studio, follow the given steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Visit [http://www.microsoft.com/visualstudio/](http://www.microsoft.com/visualstudio/)
    and download Visual Studio Express 2012 for Windows Desktop.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: After downloading the executable, install the application and proceed to the
    next step after restarting your computer.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Choosing your CryENGINE installation type
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that we have Visual Studio installed, we'll need to download a version of
    CryENGINE to develop on.
  prefs: []
  type: TYPE_NORMAL
- en: We have created a stripped-down sample installation for the book, which is recommended
    for users who are just starting out with the engine. To download it, see the following
    *Downloading the book's CryENGINE sample installation* section.
  prefs: []
  type: TYPE_NORMAL
- en: If you would rather use another build of CryENGINE, such as the latest Free
    SDK release, please see the *Using a custom or newer CryENGINE installation* section
    later in this chapter. This section will cover integrating CryMono on your own.
  prefs: []
  type: TYPE_NORMAL
- en: Downloading the book's CryENGINE sample installation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: For this book, we will be using a custom CryENGINE sample as a base for learning
    the workings of the engine. Most exercises in the book depend on this sample;
    however, the working knowledge you get from this can be applied to the default
    CryENGINE Free SDK (available at [http://www.crydev.net](http://www.crydev.net)).
  prefs: []
  type: TYPE_NORMAL
- en: 'To download the sample installation, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Visit [https://github.com/inkdev/CryENGINE-Game-Programming-Sample](https://github.com/inkdev/CryENGINE-Game-Programming-Sample)
    and click on the **Download ZIP** button in order to download a compressed archive
    containing the sample.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once downloaded, extract the contents of the archive to a folder of your choice.
    For the sake of the example, we will be extracting it to `C:\Crytek\CryENGINE-Programming-Sample`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What just happened?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You should now have a copy of our sample CryENGINE installation. You can now
    run and view the sample content which we will be using for the most part of this
    book.
  prefs: []
  type: TYPE_NORMAL
- en: Using a custom or newer CryENGINE installation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This section helps out the readers who choose to use custom or newer builds
    of the engine. If you are unsure of this process, we recommend reading the *Downloading
    the book's CryENGINE sample installation* section in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Verifying that the build is functional
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Before starting, you should verify that your version of CryENGINE is functional
    so that you can use it for running and creating code based on this book's chapters.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Note that if you are using an older or newer version of the engine, certain
    chapters may provide examples and information on changed systems. Keep this in
    mind, and refer to the sample mentioned previously for the optimal learning experience.
  prefs: []
  type: TYPE_NORMAL
- en: A good way to check this is by starting the Editor and Launcher applications
    and checking whether the engine behaves as expected.
  prefs: []
  type: TYPE_NORMAL
- en: Integrating CryMono (C# support)
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If you're interested in using the sample code and chapter contents written with
    C# in mind, you'll need to integrate the third-party CryMono plugin into your
    CryENGINE installation.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Note that CryMono is integrated by default in the sample we created specifically
    for this book.
  prefs: []
  type: TYPE_NORMAL
- en: To begin integrating CryMono, open the `Code` folder present in the engine root
    folder. We'll be placing the source files here, inside a subfolder called `CryMono/`.
  prefs: []
  type: TYPE_NORMAL
- en: To download the source code, visit [https://github.com/inkdev/CryMono](https://github.com/inkdev/CryMono)
    and click on **Download Zip** (or **Clone in Desktop** if you prefer using your
    Git revision control client).
  prefs: []
  type: TYPE_NORMAL
- en: Once downloaded, copy the contents into the `Code/CryMono` folder we mentioned
    earlier. If the folder does not exist, create it first.
  prefs: []
  type: TYPE_NORMAL
- en: 'When the files have been successfully moved, your folder structure should look
    similar to this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Integrating CryMono (C# support)](img/5909_01_Folder_Structure.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Compiling the CryMono project
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Now that we have the CryMono source code, we'll need to compile it.
  prefs: []
  type: TYPE_NORMAL
- en: To start, open `Code/CryMono/Solutions/CryMono.sln` using Visual Studio.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Make sure to use `CryMono.sln` and not `CryMono Full.sln`. The latter is only
    used when you need to rebuild the entire Mono runtime, which ships precompiled
    with the CryMono repository.
  prefs: []
  type: TYPE_NORMAL
- en: Before we compile, we'll need to modify the engine's `SSystemGlobalEnvironment`
    struct (this is exposed using the global `gEnv` pointer).
  prefs: []
  type: TYPE_NORMAL
- en: To do so, open `ISystem.h` in the `Code/CryEngine/CryCommon/` folder. Find the
    struct's definition by searching for the struct `SSystemGlobalEnvironment`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Then add the following code to the very end of the struct''s members and functions:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Modifying interfaces is not recommended if you do not have full engine source,
    as other engine modules have been compiled with the default interfaces in mind.
    However, appending to the end of this struct is mostly harmless.
  prefs: []
  type: TYPE_NORMAL
- en: Once done, open up the instance of Visual Studio where you opened `CryMono.sln`
    and start compiling.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The automated post-build step in the project should automatically move the compiled
    files to your build's `Bin32` folder following a successful compilation pass.
  prefs: []
  type: TYPE_NORMAL
- en: To verify that CryMono was compiled successfully, search for `CryMono.dll` in
    your `Bin32` folder.
  prefs: []
  type: TYPE_NORMAL
- en: Loading and initializing CryMono via the CryGame.dll library
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Now that we have the CryMono binaries present in our `Bin32` folder, we'll just
    have to load it during game startup. This is done via the CryGame project, via
    the `CGameStartup` class.
  prefs: []
  type: TYPE_NORMAL
- en: To start, open your CryEngine or CryGame solution file (.`sln`) present in `Code/Solutions/`.
  prefs: []
  type: TYPE_NORMAL
- en: Including the CryMono interface folder
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Before we modify the game startup code, we'll need to tell the compiler where
    to find the CryMono interfaces.
  prefs: []
  type: TYPE_NORMAL
- en: 'Start by right-clicking on the CryGame project in Visual Studio''s **Solution
    Explorer** and select **Properties**. This should bring up the following **CryGame
    Property Pages** window:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Including the CryMono interface folder](img/5909_01_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Now, click on **C/C++** and select **General**. This will bring up a screen
    of general compiler settings, which we''ll use to add an additional include folder
    as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Including the CryMono interface folder](img/5909_01_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Now all we have to do is add `..\..\CryMono\MonoDll\Headers` to the **Additional
    Include Directories** menu. This will tell the compiler to search CryMono's `Headers`
    folder when the `#include` macro is used, allowing us to find the CryMono C++
    interfaces.
  prefs: []
  type: TYPE_NORMAL
- en: Initializing CryMono at start up
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Open `GameStartup.h` in the CryGame project and add the following to the bottom
    of the class declaration:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Then open `GameStartup.cpp` and add the following before the `CGameStartup`
    constructor:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Now navigate to the `CGameStartup` destructor and add the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Now navigate to the `CGameStartup::Init` function declaration, and add the
    following prior to the `REGISTER_COMMAND("g_loadMod", RequestLoadMod,VF_NULL,"");`
    snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Now all we have to do is compile CryGame in order to have CryMono loaded and
    initialized at startup.
  prefs: []
  type: TYPE_NORMAL
- en: Registering flow nodes
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Due to a recent change in the flow system, flow nodes have to be registered
    at a certain point during game startup. To make sure that our C# nodes are registered,
    we'll need to call `IMonoScriptSysetm::RegisterFlownodes` from `IGame::RegisterGameFlowNodes`.
  prefs: []
  type: TYPE_NORMAL
- en: 'To do this, open `Game.cpp` and add the following inside the `CGame::RegisterGameFlowNodes`
    function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Now, after compiling, all managed flow nodes should appear in the Flowgraph
    Editor.
  prefs: []
  type: TYPE_NORMAL
- en: Registering your CryDev account
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The CryENGINE Free SDK requires a CryDev account in order for the application''s
    to launch. This can be easily retrieved via [http://www.crydev.net](http://www.crydev.net),
    by following these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Visit [http://www.crydev.net](http://www.crydev.net) in the browser of your
    choice.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on **Register** in the upper-right corner.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Read and accept the terms of usage.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select your username data.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What just happened?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You now have your own CryDev user account. While running the CryENGINE Free
    SDK applications (see *Running the sample application*), you will be prompted
    to log in with the details you have just registered.
  prefs: []
  type: TYPE_NORMAL
- en: Running the sample application
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Before we get started with building the game project, we'll go through the basics
    of the default CryENGINE applications.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: All executables are contained inside either the `Bin32` or `Bin64` folders,
    depending on the build architecture. However, our sample only includes a `Bin32`
    folder to keep things simple and the build repository small in size.
  prefs: []
  type: TYPE_NORMAL
- en: Editor
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This is the main application that developers will use. The Editor serves as
    the direct interface to the engine, used for all kinds of developer-specific tasks
    such as level design and character setup.
  prefs: []
  type: TYPE_NORMAL
- en: The Editor supports **WYSIWYP** (**What You See Is What You Play**) functionality,
    which allows developers to preview the game by hitting the shortcut *Ctrl* + *G*,
    or by navigating to the **Game** menu, and choosing **Switch to Game**.
  prefs: []
  type: TYPE_NORMAL
- en: Starting the Editor
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Open the main sample folder, and navigate to the `Bin32` folder. Once there,
    start `Editor.exe`.
  prefs: []
  type: TYPE_NORMAL
- en: '![Starting the Editor](img/5909_01_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: When the Editor has finished loading, you will be greeted by the Sandbox interface,
    which can be used to create most visual aspects of the game (excluding models
    and textures).
  prefs: []
  type: TYPE_NORMAL
- en: To create a new level, open the **File** menu, and select the **New** option.
    This should present you with the **New Level** message box. Simply specify your
    level name and click on **OK**, and the Editor will create and load your empty
    level.
  prefs: []
  type: TYPE_NORMAL
- en: To load an existing level, open the **File** menu, and select the **Open** option.
    This presents you with the **Open Level** message box. Select your level and click
    on **Open** to have your level loaded.
  prefs: []
  type: TYPE_NORMAL
- en: Launcher
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This is the application seen by the end user. Upon startup, the Launcher displays
    the game's main menu, along with different options allowing users to load levels
    and configure the game.
  prefs: []
  type: TYPE_NORMAL
- en: The Launcher's game context is commonly referred to as **Pure game mode**.
  prefs: []
  type: TYPE_NORMAL
- en: Starting the Launcher
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Open the main sample folder, and navigate into the `Bin32` folder. Once there,
    start `Launcher.exe`.
  prefs: []
  type: TYPE_NORMAL
- en: '![Starting the Launcher](img/5909_01_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: When you've started the application, you'll be greeted with the default main
    menu. This interface allows the user to load levels and alter game settings such
    as visuals and controls.
  prefs: []
  type: TYPE_NORMAL
- en: The Launcher is preferable over the Editor when you want to play the game as
    the end user would. Another benefit is the quick startup time.
  prefs: []
  type: TYPE_NORMAL
- en: Dedicated server
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The dedicated server is used to start up a multiplayer server for other clients
    to connect to. The dedicated server does not initialize a renderer, and instead
    functions as a console application.
  prefs: []
  type: TYPE_NORMAL
- en: '![Dedicated server](img/5909_01_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Compiling the CryGame project (C++)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The CryENGINE Free SDK ships with complete source access to the game logic library,
    `CryGame.dll`. This dynamic library is responsible for the main part of game features,
    as well as the initial game startup process.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: A library i*s a collection of existing classes and functions that can be integrated
    into other projects. In Windows, the most common form of library is a* **Dynamic
    Link Library** *, or* **DLL** *, which uses the* `.dll` *file extension.*
  prefs: []
  type: TYPE_NORMAL
- en: To start off, open the main sample folder, and navigate to `Code/Solutions/`,
    in which a Visual Studio solution file named `CE Game Programming Sample.sln`
    should be present. Double-click on the file and Visual Studio should start up,
    displaying the included projects (see the following breakdown).
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: A **solution** is a structure for organizing projects in Visual Studio. The
    **solution** contains information on projects in a text-based `.sln` file, as
    well as a `.suo` file (user-specific options).
  prefs: []
  type: TYPE_NORMAL
- en: To build the project, simply press *F7* or right-click on the CryGame project
    in the **Solution Explorer** and select **Build**.
  prefs: []
  type: TYPE_NORMAL
- en: What just happened?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You just compiled `CryGame.dll`, which should now be present in the binary folder.
    (`Bin32` for 32-bit compilation, `Bin64` for 64-bit). Launching the sample application
    will now load the `.dll` file containing the source code you compiled.
  prefs: []
  type: TYPE_NORMAL
- en: The CE Game Programming Sample solution breakdown
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The solution includes the following three projects, one of which compiles to
    a `.dll` file.
  prefs: []
  type: TYPE_NORMAL
- en: CryGame
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The CryGame project includes the underlying game logic used by the engine. This
    compiles to `CryGame.dll`.
  prefs: []
  type: TYPE_NORMAL
- en: CryAction
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The CryAction project includes partial source to `CryAction.dll`, which is responsible
    for a large number of systems, such as actors, UI Graphs, and game objects. This
    project does not compile to a `.dll` file, but is instead only used for interface
    access.
  prefs: []
  type: TYPE_NORMAL
- en: CryCommon
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The CryCommon project is a helper containing all shared CryENGINE interfaces.
    If there is a subsystem you want access to, look for its exposed interface in
    here.
  prefs: []
  type: TYPE_NORMAL
- en: The CryENGINE folder structure
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'See the following table for an explanation of the CryENGINE folder structure:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Folder name | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `Bin32` | Contains all 32-bit executables and libraries used by the engine.
    |'
  prefs: []
  type: TYPE_TB
- en: '| `Bin64` | Contains all 64-bit executables and libraries used by the engine.
    |'
  prefs: []
  type: TYPE_TB
- en: '| `Editor` | Editor configuration folder, contains common editor helpers, styles,
    and more. |'
  prefs: []
  type: TYPE_TB
- en: '| `Engine` | Used as a central folder for assets used by the engine itself,
    not any particular game.Shaders and configuration files are stored here. |'
  prefs: []
  type: TYPE_TB
- en: '| `Game` | Each game contains a game folder, which includes all its assets,
    scripts, levels, and so on.Does not have to be named "Game", but is dependent
    on the value of the `sys_game_folder` console variable. |'
  prefs: []
  type: TYPE_TB
- en: '| `Localization` | Contains localization assets such as localized sounds and
    text for each language. |'
  prefs: []
  type: TYPE_TB
- en: PAK files
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The engine ships with the **CryPak** module, allowing for the storage of game
    content files in compressed or uncompressed archives. The archives use the `.pak`
    file extension.
  prefs: []
  type: TYPE_NORMAL
- en: When game content is requested, the CryPak system will query through all found
    `.pak` files in order to find the file.
  prefs: []
  type: TYPE_NORMAL
- en: File query priority
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The PAK system prioritizes the files found in the loose folder structure over
    those in PAK, except when the engine was compiled in RELEASE mode. When that is
    the case, the file stored in a PAK system is preferred over the loose one.
  prefs: []
  type: TYPE_NORMAL
- en: If the file exists in multiple `.pak` archives, the one with the most recent
    filesystem creation date is used.
  prefs: []
  type: TYPE_NORMAL
- en: Attaching the debugger
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Visual Studio allows you to attach the **Debugger** to your application. This
    allows you to use functionalities such as **breakpoints**; letting you stop at
    a specific line in your C++ source code, and step through the program execution.
  prefs: []
  type: TYPE_NORMAL
- en: To start debugging, open `CE Game Programming Sample.sln` and press *F5*, or
    click on the green play icon on the Visual Studio toolbar. If a **No debug symbols
    could be found for Editor.exe** message box appears, simply click on **OK**.
  prefs: []
  type: TYPE_NORMAL
- en: What just happened?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The CryENGINE Sandbox editor should now have started, with the Visual Studio
    Debugger attached. We can now place breakpoints in code, and watch program execution
    pause when that specific line of code is executed.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we have downloaded and learned how to use a CryENGINE installation.
    You should now be aware of the process of compiling and debugging the CryGame
    project.
  prefs: []
  type: TYPE_NORMAL
- en: We now have the basic knowledge needed to move on to learning the ins and outs
    of the CryENGINE programming API.
  prefs: []
  type: TYPE_NORMAL
- en: If you feel like learning more about CryENGINE itself, besides programming knowledge,
    feel free to start the Sandbox editor and play around with the level design tools.
    This will help you prepare for future chapters, where you'll be required to utilize
    the Editor Viewport and more.
  prefs: []
  type: TYPE_NORMAL
