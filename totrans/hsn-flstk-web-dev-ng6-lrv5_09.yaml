- en: Creating Services and User Authentication
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we have a lot of work ahead of us. We will create many new
    things and refactor some things too. This is a great way to learn things in a
    regular and progressive way.
  prefs: []
  type: TYPE_NORMAL
- en: We will do a deep dive into the operation and use of the HTTP module of Angular,
    known as `HttpClient`.
  prefs: []
  type: TYPE_NORMAL
- en: In addition, we will see how to use interceptors and handle errors.
  prefs: []
  type: TYPE_NORMAL
- en: The new version of Angular provides extremely useful tools for creating modern
    web applications, and in this chapter we will use many of these resources.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Dealing with models and classes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using the new `HttpModule` and `HttpModuleClient` to deal with XHR requests
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Dealing with the `HttpErrorHandler` service
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to use authorization headers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to protect application routes with route guards
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Preparing the baseline code
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now, we need to prepare our baseline code, a process very similar to what we
    did in the previous chapter. Let''s follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Copy all the content from the `chapter-08` folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Rename the folder to `chapter-09`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Delete the `storage-db` folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, let's make some changes to the `docker-compose.yml` file so that it can
    fit a new database and server containers.
  prefs: []
  type: TYPE_NORMAL
- en: 'Open `docker-compose.yml` and replace its content with the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Note that we changed the container names, database, and MySQL user:'
  prefs: []
  type: TYPE_NORMAL
- en: '`container_name: chapter-09-mysql`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`container_name: chapter-09-webserver`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`container_name: chapter-09-php-fpm`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`MYSQL_DATABASE=chapter-09`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`MYSQL_USER=chapter-09`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Add the changes we made to Git source control. Open your Terminal window and
    type the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Dealing with models and classes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Considered good practice by the community of Angular developers (and we consider
    it essential) is the creation of classes to use them as models. These are also
    known as **domain models**.
  prefs: []
  type: TYPE_NORMAL
- en: We believe that creating classes to store our models in is a very important
    resource for creating large-scale applications or even small apps. This helps
    you keep your code organized.
  prefs: []
  type: TYPE_NORMAL
- en: Imagine if our project is much larger—if all the data was stored inside the
    plain objects, it would be hard for a new developer to find out where the data
    is stored.
  prefs: []
  type: TYPE_NORMAL
- en: This is also a good reason to use classes to store our model information.
  prefs: []
  type: TYPE_NORMAL
- en: Creating the User class model
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s start by creating the class to store our user information. By convention,
    we will name this file `user.ts`:'
  prefs: []
  type: TYPE_NORMAL
- en: Open your Terminal window.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Go to `./Client/src/app` and type the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'The previous command will create a new file in `./app/pages/auth/auth.ts`.
    Open this file and add the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Creating the builders class model
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now, let''s create the model for the builder and understand the operation of
    classes as models a little better. Before that, we will observe the return of
    the API when we make a GET to the `api/builders/1` endpoint, as we can see in
    the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/08cc1ca5-aaed-4f32-b5df-38b529601d7d.png)Builder-detail JSON result'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the previous screenshot, we have already included the bike information on
    the builders detail request. Let''s see how we can do this using the `builders`
    class:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Still in your Terminal, type the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'The previous command will create a new file in `./app/pages/builders/builder.ts`.
    Open this file and add the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Note that, in the previous code, we added an optional `bike` property and set
    its type to `Bike` model.
  prefs: []
  type: TYPE_NORMAL
- en: Creating the Bike class model
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now, it''s time to create the bike model class, but first let''s check the
    JSON format that we have on the bike''s detail endpoint, `api/bikes/2`, as we
    can see in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/b1af74f8-64cb-4259-aae0-7dee28e2c45f.png)bike-detail JSON result'
  prefs: []
  type: TYPE_NORMAL
- en: 'Here, we can note that the `bike-detail` result points to `garages`, `items`,
    `builder`, `user`, and `ratings`. For the sample application we are building,
    we will just use the builder and user model. Don''t worry about the others; the
    example we are going to use here is enough for understanding the model domain:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Still in your Terminal, type the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'The previous command will create a new file in `./app/pages/bikes/bike.ts`.
    Open this file and add the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Note that, in the previous code, we are using all properties from the previous
    screenshot, including `items` and `ratings`, as optional properties with type
    `any`, as we didn't create models for these properties.
  prefs: []
  type: TYPE_NORMAL
- en: Using the new HttpClient to deal with XHR requests
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The vast majority of web applications nowadays use `XMLHttpRequest` (XHR) requests,
    and applications made with Angular are no different. For that, we have the `HTTPClient`
    module that replaced the old HTTP module in previous versions.
  prefs: []
  type: TYPE_NORMAL
- en: In this session, we will understand how to use XHR requests inside our Angular
    services.
  prefs: []
  type: TYPE_NORMAL
- en: It is highly recommended that you use Angular services to handle requests of
    this type so that the code of the component is more organized and easy to maintain.
  prefs: []
  type: TYPE_NORMAL
- en: You can read more about XHR requests at [https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest](https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest).
  prefs: []
  type: TYPE_NORMAL
- en: Creating the auth service
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s create the file that will store the necessary code for our authentication
    module:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Still in your Terminal, type the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: The previous command will create a new folder and file in `./app/pages/auth/_services/auth.service.ts`.
    Now, let's add some pieces of code.
  prefs: []
  type: TYPE_NORMAL
- en: 'Open `./app/pages/auth/_services/auth.service.ts` and add the following imports
    to the top of the file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Now, we will use `HttpHeaders` to set the content type of our XHR requests.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following code right after the import files:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: The previous code sample will add a new header to our requests using `HttpHeaders`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Inside the `AuthService` class, add the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: You must be asking yourself why `currentUser` is `public`and the others are
    `private`, right?
  prefs: []
  type: TYPE_NORMAL
- en: Well, the `currentUser` property is `public` because we will access it in other
    files, as we will see later in this section. Therefore, the other properties will
    not be available outside the `AuthService`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, let''s create our `constructor` function. Inside the `constructor` function,
    add the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'The `constructor` class will look like the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Note here that we are using the `HttpClient` and `Router` module, so it is time
    to write our functions to see this module in practice.
  prefs: []
  type: TYPE_NORMAL
- en: Creating the Register function
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s create the `Register` function. After the `constructor` function, let''s
    add the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: Note that we are using the `pipe()`, `map()`, and `catchError()` functions from
    the **Reactive Extensions Library for JavaScript** (**RxJS**) that's included
    in Angular.
  prefs: []
  type: TYPE_NORMAL
- en: Before using the RxJS library, it was very common in AngularJS applications
    to use a library called Lodash to manipulate the results.
  prefs: []
  type: TYPE_NORMAL
- en: You can read more about the RxJS library in the official documentation link [https://rxjs-dev.firebaseapp.com/api](https://rxjs-dev.firebaseapp.com/api).
  prefs: []
  type: TYPE_NORMAL
- en: We are using the `pipe()` function which allows us to chain other functions,
    and this is pretty interesting when we are working with observables. Inside the
    `pipe()` function, this is exactly what we're doing with the `map()` and `catchError()`
    functions.
  prefs: []
  type: TYPE_NORMAL
- en: In addition, we are using three more local functions called `setToken()`,  `getUser()`, and
    `handleError()`, which we will look at later.
  prefs: []
  type: TYPE_NORMAL
- en: Keep in mind that function names are extremely important. Try to use self-explanatory
    names like we did in `setToken` and `getUser`.
  prefs: []
  type: TYPE_NORMAL
- en: Creating the Login function
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `Login` function follows almost the same structure as the `Register` function.
    The difference here is that we are just sending the email  address and password
    to the server.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following code right after the `onRegister()` function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: Note that we are saving the user token using the `setToken()` function and getting
    the user's details using the `getUser()` function. We will see this in detail
    later in this section.
  prefs: []
  type: TYPE_NORMAL
- en: Creating the Logout function
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: For the Logout function, we will use a different approach. Instead of using
    the `map()` operator, we will use the `tap()` operator.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following code right after the `onLogin()` function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: In the previous code, we just remove the token from `localStorage` and redirect
    the user to the home page. Now, it is time to create the local functions to deal
    with data.
  prefs: []
  type: TYPE_NORMAL
- en: Creating the setToken and getToken functions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We are almost at the end of our authentication service, but we still need to
    create some helper functions that we will use in other application blocks.
  prefs: []
  type: TYPE_NORMAL
- en: Let's create the functions to handle the user token. Recreating call from our
    backend with Laravel that we are using the `jwt-auth` library to authenticate
    our users.
  prefs: []
  type: TYPE_NORMAL
- en: In this example, we are using `localStorage` to store the user's token. So,
    let's create two very simple functions to write and retrieve this token.
  prefs: []
  type: TYPE_NORMAL
- en: 'Right after the `logout()` function, add the following block of code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: Creating the getUser function
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now, we will see how to get the information of the logged-in user. Remember
    that our API has an endpoint that gives us the information of the logged-in user
    based on the authentication token.
  prefs: []
  type: TYPE_NORMAL
- en: Let's see how we can do this in a simple way.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following code right after the `getToken()` function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: The previous code receives the user's information from the API and applies this
    to the `currentUser` property.
  prefs: []
  type: TYPE_NORMAL
- en: Creating the isAuthenticated function
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now, we will create just one more function. This function will help us to identify
    if the user is logged in.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following code right after the `getUser()` function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: Now, we can use this information anywhere we want just by using the `AuthService.currentUser`
    and `AuthService.isAuthenticated` methods.
  prefs: []
  type: TYPE_NORMAL
- en: Creating the handleError function
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You should have noticed that the `login()` and `register()` functions have a
    `catchError` function that points to another function called the `handleError`. At
    this moment in time, we are going to create this function, which is in charge
    of showing the possible errors that our request may have.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following code right after the **`getUser()`** function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: We are logging the error messages to the browser console, just for this example.
  prefs: []
  type: TYPE_NORMAL
- en: Creating the bikes service
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now, we are going to create the service to hold all bike operations. Remember,
    for both bikes and builders, our service must have methods for listing, details,
    creation, updating, and deletion:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Still in your Terminal, type the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: The previous command will create a new folder and file in `./app/pages/bikes/_services/bike.service.ts`.
    Now, let's add some pieces of code.
  prefs: []
  type: TYPE_NORMAL
- en: 'Open `./app/pages/bikes/_services/bike.service.ts` and add the following imports
    to the top of the file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'Inside the `bikesService` class, add the following properties:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, let''s create our `constructor` function. Inside the `constructor` function,
    add the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: Now, we are ready to create the functions of our bike service.
  prefs: []
  type: TYPE_NORMAL
- en: Creating CRUD functions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As we mentioned earlier, **CRUD** stands for `Create`, `Read`, `Update`, and
    `Delete`. We will add the code for the operations all at once, and then we will
    make the necessary comments.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following blocks of code right after the `constructor()` function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'The previous code does not have anything particularly different from what we
    used in our authentication service, except for the use of the template string:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: These are represented by back-tick ([PRE28]
  prefs: []
  type: TYPE_NORMAL
- en: /** Vote on bike */
  prefs: []
  type: TYPE_NORMAL
- en: 'voteOnBike (vote:  number, bike:  number):  Observable<any> {'
  prefs: []
  type: TYPE_NORMAL
- en: const  rating  =  vote;
  prefs: []
  type: TYPE_NORMAL
- en: return  this.http.post(this.bikesUrl  +
  prefs: []
  type: TYPE_NORMAL
- en: '`/${bike}/ratings`, {rating})'
  prefs: []
  type: TYPE_NORMAL
- en: .pipe(
  prefs: []
  type: TYPE_NORMAL
- en: catchError(error  =>  this.handleError(error))
  prefs: []
  type: TYPE_NORMAL
- en: );
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: /** Error handler */
  prefs: []
  type: TYPE_NORMAL
- en: 'private  handleError(error:  HttpErrorResponse) {'
  prefs: []
  type: TYPE_NORMAL
- en: if (error.error  instanceof  ErrorEvent) {
  prefs: []
  type: TYPE_NORMAL
- en: // A client-side error.
  prefs: []
  type: TYPE_NORMAL
- en: console.error('An error occurred:',
  prefs: []
  type: TYPE_NORMAL
- en: error.error.message);
  prefs: []
  type: TYPE_NORMAL
- en: '} else {'
  prefs: []
  type: TYPE_NORMAL
- en: // The backend error.
  prefs: []
  type: TYPE_NORMAL
- en: return  throwError(error);
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: // return a custom error message
  prefs: []
  type: TYPE_NORMAL
- en: return  throwError('Something bad happened; please try
  prefs: []
  type: TYPE_NORMAL
- en: again later.');
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: ng g service pages/builders/_services/builder
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: import { Injectable } from  '@angular/core';
  prefs: []
  type: TYPE_NORMAL
- en: import { HttpClient, HttpParams, HttpErrorResponse } from
  prefs: []
  type: TYPE_NORMAL
- en: '''@angular/common/http'';'
  prefs: []
  type: TYPE_NORMAL
- en: import { HttpHeaders } from  '@angular/common/http';
  prefs: []
  type: TYPE_NORMAL
- en: import { Observable, throwError } from  'rxjs';
  prefs: []
  type: TYPE_NORMAL
- en: import { catchError } from  'rxjs/operators';
  prefs: []
  type: TYPE_NORMAL
- en: // App import
  prefs: []
  type: TYPE_NORMAL
- en: import { environment } from
  prefs: []
  type: TYPE_NORMAL
- en: '''../../../../environments/environment'';'
  prefs: []
  type: TYPE_NORMAL
- en: import { Builder } from  '../builder';
  prefs: []
  type: TYPE_NORMAL
- en: '@Injectable({'
  prefs: []
  type: TYPE_NORMAL
- en: 'providedIn: ''root'''
  prefs: []
  type: TYPE_NORMAL
- en: '})'
  prefs: []
  type: TYPE_NORMAL
- en: export  class  BuildersService {
  prefs: []
  type: TYPE_NORMAL
- en: private  readonly  apiUrl  =  environment.apiUrl;
  prefs: []
  type: TYPE_NORMAL
- en: private  buildersUrl  =  this.apiUrl  +
  prefs: []
  type: TYPE_NORMAL
- en: '''/builders'';'
  prefs: []
  type: TYPE_NORMAL
- en: 'constructor(private  http:  HttpClient) { }'
  prefs: []
  type: TYPE_NORMAL
- en: /** GET builders from builders endpoint */
  prefs: []
  type: TYPE_NORMAL
- en: 'getBuilders ():  Observable<Builder[]> {'
  prefs: []
  type: TYPE_NORMAL
- en: return  this.http.get<Builder[]>
  prefs: []
  type: TYPE_NORMAL
- en: (this.buildersUrl)
  prefs: []
  type: TYPE_NORMAL
- en: .pipe(
  prefs: []
  type: TYPE_NORMAL
- en: catchError(error  =>
  prefs: []
  type: TYPE_NORMAL
- en: this.handleError(error))
  prefs: []
  type: TYPE_NORMAL
- en: );
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: /** GET builder detail from builder-detail endpoint
  prefs: []
  type: TYPE_NORMAL
- en: '*/'
  prefs: []
  type: TYPE_NORMAL
- en: 'getBuilderDetail (id:  number):'
  prefs: []
  type: TYPE_NORMAL
- en: Observable<Builder[]> {
  prefs: []
  type: TYPE_NORMAL
- en: return  this.http.get<Builder[]>(this.buildersUrl  +
  prefs: []
  type: TYPE_NORMAL
- en: '`/${id}`)'
  prefs: []
  type: TYPE_NORMAL
- en: .pipe(
  prefs: []
  type: TYPE_NORMAL
- en: catchError(error  =>
  prefs: []
  type: TYPE_NORMAL
- en: this.handleError(error))
  prefs: []
  type: TYPE_NORMAL
- en: );
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: /** POST builder to builders endpoint */
  prefs: []
  type: TYPE_NORMAL
- en: 'addBuilder (builder:  Builder):  Observable<Builder>'
  prefs: []
  type: TYPE_NORMAL
- en: '{'
  prefs: []
  type: TYPE_NORMAL
- en: return  this.http.post<Builder>
  prefs: []
  type: TYPE_NORMAL
- en: (this.buildersUrl, builder)
  prefs: []
  type: TYPE_NORMAL
- en: .pipe(
  prefs: []
  type: TYPE_NORMAL
- en: catchError(error  =>
  prefs: []
  type: TYPE_NORMAL
- en: this.handleError(error))
  prefs: []
  type: TYPE_NORMAL
- en: );
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: /** PUT builder to builders endpoint */
  prefs: []
  type: TYPE_NORMAL
- en: 'updateBuilder (builder:  Builder, id:  number):'
  prefs: []
  type: TYPE_NORMAL
- en: Observable<Builder> {
  prefs: []
  type: TYPE_NORMAL
- en: return  this.http.put<Builder>
  prefs: []
  type: TYPE_NORMAL
- en: (this.buildersUrl  +  `/${id}`, builder)
  prefs: []
  type: TYPE_NORMAL
- en: .pipe(
  prefs: []
  type: TYPE_NORMAL
- en: catchError(error  =>
  prefs: []
  type: TYPE_NORMAL
- en: this.handleError(error))
  prefs: []
  type: TYPE_NORMAL
- en: );
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: /** DELETE builder builder endpoint */
  prefs: []
  type: TYPE_NORMAL
- en: 'deleteBuilder (id:  number):  Observable<Builder[]>'
  prefs: []
  type: TYPE_NORMAL
- en: '{'
  prefs: []
  type: TYPE_NORMAL
- en: return  this.http.delete<Builder[]>
  prefs: []
  type: TYPE_NORMAL
- en: (this.buildersUrl  +  `/${id}`)
  prefs: []
  type: TYPE_NORMAL
- en: .pipe(
  prefs: []
  type: TYPE_NORMAL
- en: catchError(error  =>
  prefs: []
  type: TYPE_NORMAL
- en: this.handleError(error))
  prefs: []
  type: TYPE_NORMAL
- en: );
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: /** Error handler */
  prefs: []
  type: TYPE_NORMAL
- en: 'private  handleError(error:  HttpErrorResponse) {'
  prefs: []
  type: TYPE_NORMAL
- en: if (error.error  instanceof  ErrorEvent) {
  prefs: []
  type: TYPE_NORMAL
- en: // A client-side error.
  prefs: []
  type: TYPE_NORMAL
- en: console.error('An error occurred:',
  prefs: []
  type: TYPE_NORMAL
- en: error.error.message);
  prefs: []
  type: TYPE_NORMAL
- en: '} else {'
  prefs: []
  type: TYPE_NORMAL
- en: // The backend error.
  prefs: []
  type: TYPE_NORMAL
- en: return  throwError(error);
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: // return a custom error message
  prefs: []
  type: TYPE_NORMAL
- en: return  throwError('Something bad happened;
  prefs: []
  type: TYPE_NORMAL
- en: please try again later.');
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: ng g service pages/shared/_services/httpHandleError
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: import { HttpErrorResponse } from  '@angular/common/http';
  prefs: []
  type: TYPE_NORMAL
- en: import { Observable, of } from  'rxjs';
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: export  type  HandleError  =
  prefs: []
  type: TYPE_NORMAL
- en: '<T> (operation?:  string, result?:  T) => (error:  HttpErrorResponse) =>  Observable<T>;'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: /** Pass the service name to map errors */
  prefs: []
  type: TYPE_NORMAL
- en: createHandleError  = (serviceName  =  '') => <T>
  prefs: []
  type: TYPE_NORMAL
- en: (operation  =  'operation', result  = {} as  T) =>
  prefs: []
  type: TYPE_NORMAL
- en: this.handleError(serviceName, operation, result)
  prefs: []
  type: TYPE_NORMAL
- en: handleError<T> (serviceName  =  '', operation  =
  prefs: []
  type: TYPE_NORMAL
- en: '''operation'', result  = {} as  T) {'
  prefs: []
  type: TYPE_NORMAL
- en: 'return (response:  HttpErrorResponse):'
  prefs: []
  type: TYPE_NORMAL
- en: Observable<T> => {
  prefs: []
  type: TYPE_NORMAL
- en: // Optionally send the error to a third part
  prefs: []
  type: TYPE_NORMAL
- en: error logging service
  prefs: []
  type: TYPE_NORMAL
- en: console.error(response);
  prefs: []
  type: TYPE_NORMAL
- en: // Show a simple alert if error
  prefs: []
  type: TYPE_NORMAL
- en: const  message  = (response.error
  prefs: []
  type: TYPE_NORMAL
- en: instanceof  ErrorEvent) ?
  prefs: []
  type: TYPE_NORMAL
- en: 'response.error.message  :'
  prefs: []
  type: TYPE_NORMAL
- en: '`server returned code ${response.status}'
  prefs: []
  type: TYPE_NORMAL
- en: with body "${response.error.error}"`;
  prefs: []
  type: TYPE_NORMAL
- en: // We are using alert just for example, on
  prefs: []
  type: TYPE_NORMAL
- en: real world avoid this pratice
  prefs: []
  type: TYPE_NORMAL
- en: alert(message);
  prefs: []
  type: TYPE_NORMAL
- en: // Keep running and returning a safe result.
  prefs: []
  type: TYPE_NORMAL
- en: return  of( result );
  prefs: []
  type: TYPE_NORMAL
- en: '};'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: import { HttpErrorHandler } from  './shared/_services/http-handle-error.service';
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: 'providers: ['
  prefs: []
  type: TYPE_NORMAL
- en: Title,
  prefs: []
  type: TYPE_NORMAL
- en: HttpErrorHandler,
  prefs: []
  type: TYPE_NORMAL
- en: '],'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: import { Injectable } from  '@angular/core';
  prefs: []
  type: TYPE_NORMAL
- en: import { HttpClient, HttpParams, HttpErrorResponse } from
  prefs: []
  type: TYPE_NORMAL
- en: '''@angular/common/http'';'
  prefs: []
  type: TYPE_NORMAL
- en: import { HttpHeaders } from  '@angular/common/http';
  prefs: []
  type: TYPE_NORMAL
- en: import { Observable, throwError } from  'rxjs';
  prefs: []
  type: TYPE_NORMAL
- en: import { catchError } from  'rxjs/operators';
  prefs: []
  type: TYPE_NORMAL
- en: // App import
  prefs: []
  type: TYPE_NORMAL
- en: import { environment } from
  prefs: []
  type: TYPE_NORMAL
- en: '''../../../../environments/environment'';'
  prefs: []
  type: TYPE_NORMAL
- en: import { Builder } from  '../builder';
  prefs: []
  type: TYPE_NORMAL
- en: import { HttpErrorHandler, HandleError } from
  prefs: []
  type: TYPE_NORMAL
- en: '''../../../shared/_services/http-handle-error.service'';'
  prefs: []
  type: TYPE_NORMAL
- en: '@Injectable({'
  prefs: []
  type: TYPE_NORMAL
- en: 'providedIn: ''root'''
  prefs: []
  type: TYPE_NORMAL
- en: '})'
  prefs: []
  type: TYPE_NORMAL
- en: export  class  BuildersService {
  prefs: []
  type: TYPE_NORMAL
- en: private  readonly  apiUrl  =  environment.apiUrl;
  prefs: []
  type: TYPE_NORMAL
- en: private  buildersUrl  =  this.apiUrl  +
  prefs: []
  type: TYPE_NORMAL
- en: '''/builders'';'
  prefs: []
  type: TYPE_NORMAL
- en: 'private  handleError:  HandleError;'
  prefs: []
  type: TYPE_NORMAL
- en: constructor(
  prefs: []
  type: TYPE_NORMAL
- en: 'private  http:  HttpClient,'
  prefs: []
  type: TYPE_NORMAL
- en: 'httpErrorHandler:  HttpErrorHandler ) {'
  prefs: []
  type: TYPE_NORMAL
- en: this.handleError  =
  prefs: []
  type: TYPE_NORMAL
- en: httpErrorHandler.createHandleError('BuildersService');
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: /** GET builders from builders endpoint */
  prefs: []
  type: TYPE_NORMAL
- en: 'getBuilders ():  Observable<Builder[]> {'
  prefs: []
  type: TYPE_NORMAL
- en: return  this.http.get<Builder[]>
  prefs: []
  type: TYPE_NORMAL
- en: (this.buildersUrl)
  prefs: []
  type: TYPE_NORMAL
- en: .pipe(
  prefs: []
  type: TYPE_NORMAL
- en: catchError(this.handleError('getBuilders', []))
  prefs: []
  type: TYPE_NORMAL
- en: );
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: /** GET builder detail from builder-detail endpoint
  prefs: []
  type: TYPE_NORMAL
- en: '*/'
  prefs: []
  type: TYPE_NORMAL
- en: 'getBuilderDetail (id:  number):'
  prefs: []
  type: TYPE_NORMAL
- en: Observable<Builder[]> {
  prefs: []
  type: TYPE_NORMAL
- en: return  this.http.get<Builder[]>
  prefs: []
  type: TYPE_NORMAL
- en: (this.buildersUrl  +  `/${id}`)
  prefs: []
  type: TYPE_NORMAL
- en: .pipe(
  prefs: []
  type: TYPE_NORMAL
- en: catchError(this.handleError('getBuilderDetail', []))
  prefs: []
  type: TYPE_NORMAL
- en: );
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: /** POST builder to builders endpoint */
  prefs: []
  type: TYPE_NORMAL
- en: 'addBuilder (builder:  Builder):  Observable<Builder> {'
  prefs: []
  type: TYPE_NORMAL
- en: return  this.http.post<Builder>
  prefs: []
  type: TYPE_NORMAL
- en: (this.buildersUrl, builder)
  prefs: []
  type: TYPE_NORMAL
- en: .pipe(
  prefs: []
  type: TYPE_NORMAL
- en: catchError(this.handleError('addBuilder', builder))
  prefs: []
  type: TYPE_NORMAL
- en: );
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: /** PUT builder to builders endpoint */
  prefs: []
  type: TYPE_NORMAL
- en: 'updateBuilder (builder:  Builder, id:  number):'
  prefs: []
  type: TYPE_NORMAL
- en: Observable<Builder> {
  prefs: []
  type: TYPE_NORMAL
- en: return  this.http.put<Builder>(this.buildersUrl
  prefs: []
  type: TYPE_NORMAL
- en: +  `/${id}`, builder).pipe(
  prefs: []
  type: TYPE_NORMAL
- en: catchError(this.handleError('updateBuilder', builder))
  prefs: []
  type: TYPE_NORMAL
- en: );
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: /** DELETE builder builder endpoint */
  prefs: []
  type: TYPE_NORMAL
- en: 'deleteBuilder (id:  number):  Observable<Builder[]> {'
  prefs: []
  type: TYPE_NORMAL
- en: return  this.http.delete<Builder[]>
  prefs: []
  type: TYPE_NORMAL
- en: (this.buildersUrl  +  `/${id}`)
  prefs: []
  type: TYPE_NORMAL
- en: .pipe(
  prefs: []
  type: TYPE_NORMAL
- en: catchError(this.handleError('deleteBuilder'))
  prefs: []
  type: TYPE_NORMAL
- en: );
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: this.handleError = httpErrorHandler.createHandleError ('BuildersService');
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: import { Injectable } from  '@angular/core';
  prefs: []
  type: TYPE_NORMAL
- en: import { HttpClient, HttpParams, HttpErrorResponse } from  '@angular/common/http';
  prefs: []
  type: TYPE_NORMAL
- en: import { HttpHeaders } from  '@angular/common/http';
  prefs: []
  type: TYPE_NORMAL
- en: import { Observable, throwError } from  'rxjs';
  prefs: []
  type: TYPE_NORMAL
- en: import { catchError } from  'rxjs/operators';
  prefs: []
  type: TYPE_NORMAL
- en: // App import
  prefs: []
  type: TYPE_NORMAL
- en: import { environment } from  '../../../../environments/environment';
  prefs: []
  type: TYPE_NORMAL
- en: import { Bike } from  '../bike';
  prefs: []
  type: TYPE_NORMAL
- en: import { HttpErrorHandler, HandleError } from  '../../../shared/_services/http-handle-error.service';
  prefs: []
  type: TYPE_NORMAL
- en: '@Injectable({'
  prefs: []
  type: TYPE_NORMAL
- en: 'providedIn: ''root'''
  prefs: []
  type: TYPE_NORMAL
- en: '})'
  prefs: []
  type: TYPE_NORMAL
- en: export  class  BikesService {
  prefs: []
  type: TYPE_NORMAL
- en: private  readonly  apiUrl  =  environment.apiUrl;
  prefs: []
  type: TYPE_NORMAL
- en: private  bikesUrl  =  this.apiUrl  +  '/bikes';
  prefs: []
  type: TYPE_NORMAL
- en: 'private  handleError:  HandleError;'
  prefs: []
  type: TYPE_NORMAL
- en: constructor(
  prefs: []
  type: TYPE_NORMAL
- en: 'private  http:  HttpClient,'
  prefs: []
  type: TYPE_NORMAL
- en: 'httpErrorHandler:  HttpErrorHandler ) {'
  prefs: []
  type: TYPE_NORMAL
- en: this.handleError  =
  prefs: []
  type: TYPE_NORMAL
- en: httpErrorHandler.createHandleError('BikesService');
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: /** GET bikes from bikes endpoint */
  prefs: []
  type: TYPE_NORMAL
- en: 'getBikes ():  Observable<Bike[]> {'
  prefs: []
  type: TYPE_NORMAL
- en: return  this.http.get<Bike[]>(this.bikesUrl)
  prefs: []
  type: TYPE_NORMAL
- en: .pipe(
  prefs: []
  type: TYPE_NORMAL
- en: catchError(this.handleError('getBikes', []))
  prefs: []
  type: TYPE_NORMAL
- en: );
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: /** GET bike detail from bike-detail endpoint */
  prefs: []
  type: TYPE_NORMAL
- en: 'getBikeDetail (id:  number):  Observable<Bike[]> {'
  prefs: []
  type: TYPE_NORMAL
- en: return  this.http.get<Bike[]>(this.bikesUrl  +
  prefs: []
  type: TYPE_NORMAL
- en: '`/${id}`)'
  prefs: []
  type: TYPE_NORMAL
- en: .pipe(
  prefs: []
  type: TYPE_NORMAL
- en: catchError(this.handleError('getBikeDetail', []))
  prefs: []
  type: TYPE_NORMAL
- en: );
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: /** POST bike to bikes endpoint */
  prefs: []
  type: TYPE_NORMAL
- en: 'addBike (bike:  Bike):  Observable<Bike> {'
  prefs: []
  type: TYPE_NORMAL
- en: return  this.http.post<Bike>(this.bikesUrl,
  prefs: []
  type: TYPE_NORMAL
- en: bike)
  prefs: []
  type: TYPE_NORMAL
- en: .pipe(
  prefs: []
  type: TYPE_NORMAL
- en: catchError(this.handleError('addBike', bike))
  prefs: []
  type: TYPE_NORMAL
- en: );
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: /** PUT bike to bikes endpoint */
  prefs: []
  type: TYPE_NORMAL
- en: 'updateBike (bike:  Bike, id:  number):'
  prefs: []
  type: TYPE_NORMAL
- en: Observable<Bike> {
  prefs: []
  type: TYPE_NORMAL
- en: return  this.http.put<Bike>(this.bikesUrl  +
  prefs: []
  type: TYPE_NORMAL
- en: '`/${id}`, bike)'
  prefs: []
  type: TYPE_NORMAL
- en: .pipe(
  prefs: []
  type: TYPE_NORMAL
- en: catchError(this.handleError('updateBike', bike))
  prefs: []
  type: TYPE_NORMAL
- en: );
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: /** DELETE bike bike endpoint */
  prefs: []
  type: TYPE_NORMAL
- en: 'deleteBike (id:  number):  Observable<Bike[]> {'
  prefs: []
  type: TYPE_NORMAL
- en: return  this.http.delete<Bike[]>(this.bikesUrl
  prefs: []
  type: TYPE_NORMAL
- en: +  `/${id}`)
  prefs: []
  type: TYPE_NORMAL
- en: .pipe(
  prefs: []
  type: TYPE_NORMAL
- en: catchError(this.handleError('deleteBike'))
  prefs: []
  type: TYPE_NORMAL
- en: );
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: /** Vote on bike */
  prefs: []
  type: TYPE_NORMAL
- en: 'voteOnBike (vote:  number, bike:  number):'
  prefs: []
  type: TYPE_NORMAL
- en: Observable<any> {
  prefs: []
  type: TYPE_NORMAL
- en: const  rating  =  vote;
  prefs: []
  type: TYPE_NORMAL
- en: return  this.http.post(this.bikesUrl  +
  prefs: []
  type: TYPE_NORMAL
- en: '`/${bike}/ratings`, {rating})'
  prefs: []
  type: TYPE_NORMAL
- en: .pipe(
  prefs: []
  type: TYPE_NORMAL
- en: catchError(this.handleError('voteOnBike', []))
  prefs: []
  type: TYPE_NORMAL
- en: );
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: ng g service shared/_services/http-interceptor
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: import { Injectable, Injector } from  '@angular/core';
  prefs: []
  type: TYPE_NORMAL
- en: import { HttpEvent, HttpHeaders, HttpInterceptor, HttpHandler, HttpRequest,
    HttpErrorResponse, HttpResponse } from  '@angular/common/http';
  prefs: []
  type: TYPE_NORMAL
- en: import { Observable } from  'rxjs';
  prefs: []
  type: TYPE_NORMAL
- en: import { catchError, map, tap } from  'rxjs/operators';
  prefs: []
  type: TYPE_NORMAL
- en: import { Router } from  '@angular/router';
  prefs: []
  type: TYPE_NORMAL
- en: // App import
  prefs: []
  type: TYPE_NORMAL
- en: import { AuthService } from
  prefs: []
  type: TYPE_NORMAL
- en: '''../../pages/auth/_services/auth.service'';'
  prefs: []
  type: TYPE_NORMAL
- en: '@Injectable()'
  prefs: []
  type: TYPE_NORMAL
- en: export  class  AppHttpInterceptorService  implements
  prefs: []
  type: TYPE_NORMAL
- en: HttpInterceptor {
  prefs: []
  type: TYPE_NORMAL
- en: 'constructor(public  auth:  AuthService, private  router:'
  prefs: []
  type: TYPE_NORMAL
- en: Router ) { }
  prefs: []
  type: TYPE_NORMAL
- en: 'intercept(req:  HttpRequest<any>, next:  HttpHandler):'
  prefs: []
  type: TYPE_NORMAL
- en: Observable<HttpEvent<any>> {
  prefs: []
  type: TYPE_NORMAL
- en: console.log('interceptor running');
  prefs: []
  type: TYPE_NORMAL
- en: // Get the token from auth service.
  prefs: []
  type: TYPE_NORMAL
- en: const  authToken  =  this.auth.getToken();
  prefs: []
  type: TYPE_NORMAL
- en: if (authToken) {
  prefs: []
  type: TYPE_NORMAL
- en: // Clone the request to add the new header.
  prefs: []
  type: TYPE_NORMAL
- en: const  authReq  =  req.clone(
  prefs: []
  type: TYPE_NORMAL
- en: '{ headers:'
  prefs: []
  type: TYPE_NORMAL
- en: req.headers.set('Authorization', `Bearer ${authToken}`)}
  prefs: []
  type: TYPE_NORMAL
- en: );
  prefs: []
  type: TYPE_NORMAL
- en: console.log('interceptor running with new
  prefs: []
  type: TYPE_NORMAL
- en: headers');
  prefs: []
  type: TYPE_NORMAL
- en: // send the newly created request
  prefs: []
  type: TYPE_NORMAL
- en: return  next.handle(authReq).pipe(
  prefs: []
  type: TYPE_NORMAL
- en: 'tap((event:  HttpEvent<any>) => {'
  prefs: []
  type: TYPE_NORMAL
- en: if (event instanceof
  prefs: []
  type: TYPE_NORMAL
- en: HttpResponse) {
  prefs: []
  type: TYPE_NORMAL
- en: // Response wiht
  prefs: []
  type: TYPE_NORMAL
- en: HttpResponse type
  prefs: []
  type: TYPE_NORMAL
- en: console.log('TAP function',
  prefs: []
  type: TYPE_NORMAL
- en: event);
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '}, (err:  any) => {'
  prefs: []
  type: TYPE_NORMAL
- en: console.log(err);
  prefs: []
  type: TYPE_NORMAL
- en: if (err  instanceof
  prefs: []
  type: TYPE_NORMAL
- en: HttpErrorResponse) {
  prefs: []
  type: TYPE_NORMAL
- en: if (err.status ===  401) {
  prefs: []
  type: TYPE_NORMAL
- en: localStorage.removeItem('token');
  prefs: []
  type: TYPE_NORMAL
- en: this.router.navigate(['/']);
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '})'
  prefs: []
  type: TYPE_NORMAL
- en: );
  prefs: []
  type: TYPE_NORMAL
- en: '} else {'
  prefs: []
  type: TYPE_NORMAL
- en: console.log('interceptor without changes');
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: return  next.handle(req);
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: const  authReq  =  req.clone(
  prefs: []
  type: TYPE_NORMAL
- en: '{ headers: req.headers.set(''Authorization'', `Bearer ${authToken}`)}'
  prefs: []
  type: TYPE_NORMAL
- en: );
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: this.router.navigate(['/']);
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: import { AppHttpInterceptorService } from  './shared/_services/app-http-interceptor.service';
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: '{'
  prefs: []
  type: TYPE_NORMAL
- en: 'provide: HTTP_INTERCEPTORS,'
  prefs: []
  type: TYPE_NORMAL
- en: 'useClass: AppHttpInterceptorService ,'
  prefs: []
  type: TYPE_NORMAL
- en: 'multi: true'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: import { BrowserModule, Title } from  '@angular/platform-browser';
  prefs: []
  type: TYPE_NORMAL
- en: import { NgModule } from  '@angular/core';
  prefs: []
  type: TYPE_NORMAL
- en: import { HttpClientModule, HTTP_INTERCEPTORS } from  '@angular/common/http';
  prefs: []
  type: TYPE_NORMAL
- en: import { AppRoutingModule } from  './app-routing.module';
  prefs: []
  type: TYPE_NORMAL
- en: import { ServiceWorkerModule } from  '@angular/service-worker';
  prefs: []
  type: TYPE_NORMAL
- en: // Application modules
  prefs: []
  type: TYPE_NORMAL
- en: import { AppComponent } from  './app.component';
  prefs: []
  type: TYPE_NORMAL
- en: import { environment } from  '../environments/environment';
  prefs: []
  type: TYPE_NORMAL
- en: import { HomeModule } from  './pages/home/home.module';
  prefs: []
  type: TYPE_NORMAL
- en: import { BikesModule } from  './pages/bikes/bikes.module';
  prefs: []
  type: TYPE_NORMAL
- en: import { BuildersModule } from  './pages/builders/builders.module';
  prefs: []
  type: TYPE_NORMAL
- en: import { AuthModule } from  './pages/auth/auth.module';
  prefs: []
  type: TYPE_NORMAL
- en: import { NavComponent } from  './layout/nav/nav.component';
  prefs: []
  type: TYPE_NORMAL
- en: import { HttpErrorHandler } from  './shared/_services/http-handle-error.service';
  prefs: []
  type: TYPE_NORMAL
- en: import { AppHttpInterceptorService } from  './shared/_services/app-http-interceptor.service';
  prefs: []
  type: TYPE_NORMAL
- en: '@NgModule({'
  prefs: []
  type: TYPE_NORMAL
- en: 'declarations: ['
  prefs: []
  type: TYPE_NORMAL
- en: AppComponent,
  prefs: []
  type: TYPE_NORMAL
- en: NavComponent
  prefs: []
  type: TYPE_NORMAL
- en: '],'
  prefs: []
  type: TYPE_NORMAL
- en: 'imports: ['
  prefs: []
  type: TYPE_NORMAL
- en: BrowserModule,
  prefs: []
  type: TYPE_NORMAL
- en: AppRoutingModule,
  prefs: []
  type: TYPE_NORMAL
- en: HttpClientModule,
  prefs: []
  type: TYPE_NORMAL
- en: HomeModule,
  prefs: []
  type: TYPE_NORMAL
- en: BikesModule,
  prefs: []
  type: TYPE_NORMAL
- en: BuildersModule,
  prefs: []
  type: TYPE_NORMAL
- en: AuthModule,
  prefs: []
  type: TYPE_NORMAL
- en: 'ServiceWorkerModule.register(''/ngsw-worker.js'', { enabled: environment.production
    })'
  prefs: []
  type: TYPE_NORMAL
- en: '],'
  prefs: []
  type: TYPE_NORMAL
- en: 'providers: ['
  prefs: []
  type: TYPE_NORMAL
- en: Title,
  prefs: []
  type: TYPE_NORMAL
- en: HttpErrorHandler,
  prefs: []
  type: TYPE_NORMAL
- en: '{'
  prefs: []
  type: TYPE_NORMAL
- en: 'provide: HTTP_INTERCEPTORS,'
  prefs: []
  type: TYPE_NORMAL
- en: 'useClass: AppHttpInterceptorService ,'
  prefs: []
  type: TYPE_NORMAL
- en: 'multi: true'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '],'
  prefs: []
  type: TYPE_NORMAL
- en: 'bootstrap: [AppComponent]'
  prefs: []
  type: TYPE_NORMAL
- en: '})'
  prefs: []
  type: TYPE_NORMAL
- en: export  class  AppModule { }
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: /**
  prefs: []
  type: TYPE_NORMAL
- en: '* Protect update and delete methods, only for authenticated'
  prefs: []
  type: TYPE_NORMAL
- en: users.
  prefs: []
  type: TYPE_NORMAL
- en: '*'
  prefs: []
  type: TYPE_NORMAL
- en: '* @return  Unauthorized'
  prefs: []
  type: TYPE_NORMAL
- en: '*/'
  prefs: []
  type: TYPE_NORMAL
- en: public  function  __construct()
  prefs: []
  type: TYPE_NORMAL
- en: '{'
  prefs: []
  type: TYPE_NORMAL
- en: $this->middleware('auth:api')->except(['index']);
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: ng g guard pages/auth/_guards/auth
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: import { AuthService } from  '../_services/auth.service';
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: constructor(
  prefs: []
  type: TYPE_NORMAL
- en: 'private  router:  Router,'
  prefs: []
  type: TYPE_NORMAL
- en: 'private  auth:  AuthService) {}'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: if (this.auth.isAuthenticated()) {
  prefs: []
  type: TYPE_NORMAL
- en: // logged in so return true
  prefs: []
  type: TYPE_NORMAL
- en: return  true;
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: // not logged in so redirect to login page with the return url
  prefs: []
  type: TYPE_NORMAL
- en: 'this.router.navigate([''/login''], { queryParams: { returnUrl: state.url }});'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: import { AuthGuard } from '../auth/_guards/auth.guard';
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: '{'
  prefs: []
  type: TYPE_NORMAL
- en: 'path: '':id'','
  prefs: []
  type: TYPE_NORMAL
- en: 'component: BikeDetailComponent,'
  prefs: []
  type: TYPE_NORMAL
- en: 'canActivate: [AuthGuard]'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '```'
  prefs: []
  type: TYPE_NORMAL
- en: Voilà! Our `bike-detail` route is now protected.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now, we are very close to seeing our application in a working state. However,
    we still need to perform some steps that we will look at in the following chapters.
  prefs: []
  type: TYPE_NORMAL
- en: In the meantime, we have learned some important points for building modern web
    applications, such as creating services to handle XHR requests, learning how to
    protect our routes, as well as creating a route interceptor and a service for
    handling errors.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we are going to delve deeply into how to use the services
    we have just created within our components, and we will also apply a visual layer
    to our application.
  prefs: []
  type: TYPE_NORMAL
