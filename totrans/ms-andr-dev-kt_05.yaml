- en: Look and Feel
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Nowadays, applications have a breathtaking visual appearance. This is something
    that makes your application unique and original. An eye pleasing appearance will
    make your application stand out in a field of similar applications, but it will
    also strongly appeal to your users and they are more likely to install and keep
    your app on their devices. In this chapter, we will show you how to make your
    application beautiful. We will introduce you to the secrets of Android UI theming!
    Our focus will only be on the visual aspect of Android applications.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Themes and styles in Android
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Working with assets
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Custom fonts and coloring
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Button designs
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Animations and animation sets
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Themes in the Android Framework
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the last chapter, we established a connection between the main UI elements.
    Our application does not look like one until it gets some color. To get colors,
    we will start with the main application theme. We will extend one of the existing
    Android themes and override it with colors we like.
  prefs: []
  type: TYPE_NORMAL
- en: 'Open `styles.xml`. Here, you will set the default theme defined for our application
    needs. We will also have several colors overridden. However, we will change the
    `parent` theme and customize it according to our wishes. We will update the theme
    according to the following example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: We defined a theme that inherits from the `AppCompat` theme. The primary color
    represents the color for the application branding. The color's darker variant
    is `colorPrimaryDark`, while the UI controls colors that will be colored in `colorAccent`.
    We will also set the primary text color to black. The status bar will also use
    our primary branding color.
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the `colors.xml` file and define the colors we will use for the theme
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Before you run the application to see your theme, make sure that the theme
    is actually applied. Update the `manifest` file with the following lines of code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Also, update the color for the floating action button of `fragment_items` as
    follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: The background tint attribute will make sure that the button has the same color
    as the status bar. Build and run the application. Congratulations, you have successfully
    branded your application in orange!
  prefs: []
  type: TYPE_NORMAL
- en: Styles in Android
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The theme we just defined represents style. All styles are defined in the `styles.xml`
    file. We will create several styles to demonstrate how easy it is for you to create
    styles and how powerful they are. You can define styles for buttons, text, or
    any other view. You can inherit styles too.
  prefs: []
  type: TYPE_NORMAL
- en: 'For the purpose of styling, we will define the color palette that we will use
    in the application. Open your `colors.xml` file and extend it as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Pay attention to transparent colors! Observe the case of `white` color. Pure
    `white` color has the code `#ffffff` while the `40%` transparent white has the
    code `#64ffffff`. To achieve transparency, you can use the following values:'
  prefs: []
  type: TYPE_NORMAL
- en: '0% = #00'
  prefs: []
  type: TYPE_NORMAL
- en: '10% = #16'
  prefs: []
  type: TYPE_NORMAL
- en: '20% = #32'
  prefs: []
  type: TYPE_NORMAL
- en: '30% = #48'
  prefs: []
  type: TYPE_NORMAL
- en: '40% = #64'
  prefs: []
  type: TYPE_NORMAL
- en: '50% = #80'
  prefs: []
  type: TYPE_NORMAL
- en: '60% = #96'
  prefs: []
  type: TYPE_NORMAL
- en: '70% = #112'
  prefs: []
  type: TYPE_NORMAL
- en: '80% = #128'
  prefs: []
  type: TYPE_NORMAL
- en: '90% = #144'
  prefs: []
  type: TYPE_NORMAL
- en: 'Now that we have defined the color palette we will create our first styles.
    Open `styles.xml` and extend it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'We defined two styles. First that defines simple button. It has white text
    with letters of `16sp` in size. The second extends a first and adds the attribute
    for the background. We will create a selector so we can demonstrate you styles
    we defined. Since we do not have this resource yet, create `selector_button_green
    xml` in the `drawable resource` folder:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: We defined a selector. Selector is XML that describes visual behavior or the
    different states. We added a different color for the button's disabled state,
    color for states when the button is pressed, released, or when we do not have
    any interaction with it.
  prefs: []
  type: TYPE_NORMAL
- en: 'To see what the buttons will look like, open `activity_todo` layout and for
    each button set the style:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, run the application and open the Todo screen. Your screen should look
    like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/bce22470-94fa-4995-9b9a-5af05b6f57da.png)'
  prefs: []
  type: TYPE_IMG
- en: 'If you press the buttons you will notice that the color has changed to a darker
    green. In  the next sections, we will even more improve these buttons even more
    by adding rounded edges but before that let''s create some more styles:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Add styles for input fields and for navigation drawers to your `styles.xml`:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'For input fields, we defined the color for the hint. Also we introduced one
    more selector drawable, `selector_button_grey`:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'For `note_title` on both screens (Note and Todo) add the style:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'For `note_content` add:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'For `adapter_navigation_drawer` layout apply the style to a button:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'That''s it! You styled your application! Now run it and take a look at all
    screens and navigation drawers:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/c918278a-815c-40f5-9727-e4c6b0d254de.png)'
  prefs: []
  type: TYPE_IMG
- en: 'What do you think? Does the UI look nicer now? Observe the next screenshot
    too:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/628914df-4308-4f98-94b7-c18cc0862535.png)'
  prefs: []
  type: TYPE_IMG
- en: Application now seems nice. Feel free to adjust the attributes and colors according
    to your desire. We are not done yet. We need some fonts to apply! In the next
    sections, we will deal with that.
  prefs: []
  type: TYPE_NORMAL
- en: Working with assets
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The time has come that your application needs to work with raw resources. A
    good example of that is fonts. Each font application we use will be an individual
    file stored in the `assets` folder. The `assets` folder is a subdirectory of `main`
    directory or directory that represents the build variant. Besides fonts, it's
    common that here you store txt files, mp3, waw, mid, and similar. You can't store
    these types of files in the `res` directory.
  prefs: []
  type: TYPE_NORMAL
- en: Using custom fonts
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Fonts are assets. So to provide some fonts for your application we need to copy
    them first. There are a lot of good free font resources. For example, Google Fonts.
    Download some fonts and copy them to your `assets` directory. If there is no `assets`
    directory create one. We will place our fonts in the `assets/fonts` directory.
  prefs: []
  type: TYPE_NORMAL
- en: 'In our examples, we will use `Exo`. `Exo` comes with the following `font` files:'
  prefs: []
  type: TYPE_NORMAL
- en: '`Exo2-Black.ttf`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Exo2-BlackItalic.ttf`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Exo2-Bold.ttf`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Exo2-BoldItalic.ttf`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Exo2-ExtraBold.ttf`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Exo2-ExtraBoldItalic.ttf`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Exo2-ExtraLight.ttf`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Exo2-ExtraLightItalic.ttf`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Exo2-Italic.ttf`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Exo2-Light.ttf`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Exo2-LightItalic.ttf`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Exo2-Medium.ttf`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Exo2-MediumItalic.ttf`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Exo2-Regular.ttf`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Exo2-SemiBold.ttf`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Exo2-SemiBoldItalic.ttf`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Exo2-Thin.ttf`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Exo2-ThinItalic.ttf`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Copying `font` files into the `assets` directory will not give us support for
    those fonts out of the box. We need to use them through our code. We will create
    the code that will apply fonts for us.
  prefs: []
  type: TYPE_NORMAL
- en: 'Open `BaseActivity` and extend it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'We extended our base activity to handle fonts. When the activity enters `onPostCreate()`,
    the `applyFonts()` method will be called. `applyFonts()` then does the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Calls the `initFonts()` method which creates `TypeFace` instances from the assets.
    `TypeFace` is used as the representation of a font and its visual properties.
    We instantiated typefaces for `ExoBold` and `ExoRegular`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What happens next is that we are obtaining `root` view for our current activity
    and passing it to the `applyFonts()` method from the companion object. If the
    view is a `view group` we iterate through its children until the ordinary view
    is reached. View has a property `typeface` to which we set our `typeface` instance.
    You will notice also that we are retrieving the class property called `tag` from
    each view. In Android we can set tags to our views. Tags can be instances of any
    class. In our case, we are checking if the tag is `String` with the value of string
    resource by the name `tag_font_bold`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'To set tags, create a new `xml` in the `values` directory called **tags** and
    populate it with the following content:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Now all application's buttons will have the bold font version applied. Now build
    your application and run it. You will notice that the font has changed!
  prefs: []
  type: TYPE_NORMAL
- en: Applying coloring
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We defined the color palette for our application. We applied each color by accessing
    its resource. Sometimes we do not have a particular color resource available.
    It can happen that we obtained the color dynamically through the backend (in a
    response to some API call) or we want the color to be defined from the code because
    of some other reasons.
  prefs: []
  type: TYPE_NORMAL
- en: Android is very powerful when you need to deal with colors from your code. We
    will cover some examples and show you what you can do.
  prefs: []
  type: TYPE_NORMAL
- en: 'To get color from an existing resource you can do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Before we used to do this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: But it is deprecated from Android version 6.
  prefs: []
  type: TYPE_NORMAL
- en: 'When you obtained a color you can apply it on some view:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'Another way to obtain a color is by accessing `Color` class static methods.
    Let''s start with parsing some color string:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'We must note that there is already a certain number of predefined colors available:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'So we don''t need to parse `#ff0000`. There are some other colors as well:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'Sometimes you will have only parameters about red, green, or blue and based
    on that to create a color:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: We must note that this method is available from API version 26!
  prefs: []
  type: TYPE_NORMAL
- en: 'If RGB is not your desired color space then you can pass it as a parameter:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: As you can see there are a lot of possibilities when you deal with the color.
    If standard color resources are not enough for you to manage your colors you can
    do it in an advanced way. We encourage you to play with it and try on some user
    interfaces.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, if you are using the `AppCompat` library once you get `Color`
    instance you can use it like in the following example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'Consider the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/a593dbbc-7720-4759-b359-609f9d77da18.png)'
  prefs: []
  type: TYPE_IMG
- en: Make your buttons look pretty
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We colored our buttons and defined states for them. We colored each state differently.
    We have colors for disabled state, for enabled, and pressed states. Now we will
    go one step further. We will make our buttons rounded and color them with a gradient
    instead of a solid color. We will prepare a layout for a new button style. Open
    the `activity_todo` layout and modify the buttons container:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'We set the background the same as the one we used for the edit text field.
    Buttons will be rounded so we want them on the same background as the rest of
    the screen. Now, let''s define some additional dimensions and the colors we will
    use. We need to define the radius for a button with rounded corners:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'Since we plan to use gradient colors we must add a second color for gradients.
    Add these colors to your `colors.xml`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'Now when we have defined this we will need to update our style for green buttons:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'We added a margin so that buttons are separated from each other. We need now
    rectangular rounded drawables. Create three drawable resources `rect_rounded_green`,
    `rect_rounded_green_dark`, and `rect_rounded_grey_disabled`. Make sure they are
    defined like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '`rect_rounded_green`:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: '`rect_rounded_green_dark`:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: '`rect_rounded_grey_disabled`:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'We defined gradients containing attributes for:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: gradient angle (of 270 degrees)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: start color (we used our color resource)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: end color (we used our color resource too)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Also, each drawable resource has a value for its corner''s radius. Last step
    is to update our selector. Open `selector_button_green` and update it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'Build your app and run it. Open the Todo screen and take a look at it. Buttons
    are now much nicer with smooth rounded edges. Buttons are separated from each
    other by margins and if you press a finger on them you will see the secondary
    gradient with the darker green we defined:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/6ed3b309-e081-464f-a4fc-e90dd4839dac.png)'
  prefs: []
  type: TYPE_IMG
- en: Setting animations
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We consider our layout to be nice. It is pretty. But can it be more entertaining?
    Sure it can! If we make our layout more interactive we will achieve a better user
    experience and attract users to use it. We will achieve that by adding some animations.
    Animations can be defined through the code or by animating view properties. We
    will improve each of the screens by adding simple and effective opening animations.
  prefs: []
  type: TYPE_NORMAL
- en: 'Animations defined as resources are located in the `anim` resources directory.
    We will need a few animation resources there--`fade_in`, `fade_out`, `bottom_to_top`,
    `top_to_bottom`, `hide_to_top`, `hide_to_bottom`. Create them and define them
    according to these examples:'
  prefs: []
  type: TYPE_NORMAL
- en: '`fade_in`:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: '`fade_out`:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: '`top_to_bottom`:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: '`hide_to_top`:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: '`hide_to_bottom`:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: 'Take a look at this example and the attributes you can define. In the fade
    animation example, we animated an `alpha` property for the view. We set the animation
    duration, from, and to alpha values and the interpolator we will use for the animation.
    In Android, for your animations you can choose one of these interpolators:'
  prefs: []
  type: TYPE_NORMAL
- en: '`accelerate_interpolator`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`accelerate_decelerate_interpolator`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`bounce_interpolator`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`cycle_interpolator`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`anticipate_interpolator`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`anticipate_overshot_interpolator`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: and many others, all defined in--`@android:anim/...`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For other animations we defined the translation with `from` and `to` parameters.
  prefs: []
  type: TYPE_NORMAL
- en: 'Before we use these animations we will adjust some backgrounds so there is
    no gap in our layouts before the animation starts. For `activity_main`, add the
    background for Toolbar parent view:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: 'For `activity_note` and `activity_todo` nest toolbar in one more parent so
    the final color is the same as the color for the title field below the toolbar:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally we will apply our animations. We will use fade in and out animations
    for our screens, opening and closing. Open `BaseActivity` and modify it like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: We overrode transition effects by using the `overridePendingTransition()` method
    that takes enter and exit animations as parameters.
  prefs: []
  type: TYPE_NORMAL
- en: 'Update your `onResume()` and `onPause()` methods too:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: 'We created an instance of animation and applied it on the view using the `startAnimation()`
    method. `getAnimation()` method is ours. We defined it. So, add the implementation
    to `BaseActivity`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: 'Since we are using Kotlin, to make it available to all activities, not just
    the ones that are extending `BaseActivity` change method to be extension function
    like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: Build your application again and run it. Open and close screens multiple times
    to see how our animations are working.
  prefs: []
  type: TYPE_NORMAL
- en: Animation sets in Android
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In previous sections, we worked with animations from resources defined in XML.
    In this section, we will play with various view attributes and with animation
    sets. We will illustrate the purpose and use with simple and effective examples.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s demonstrate the first animation from the code. Open `ItemsFragment`.
    Add the following method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: What this method will do? This method will animate scaling for the button with
    bounce interpolation. If the expand parameter is `true`, we will scale up, otherwise
    we will scale down.
  prefs: []
  type: TYPE_NORMAL
- en: 'Apply it to our floating action button. Extend the button click listener:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: 'And set the main dialog to cancellable with on an cancel action set:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: Build and run the application. Click on the add item button and then close the
    dialog by tapping outside of it. We have a wonderful scale animation!
  prefs: []
  type: TYPE_NORMAL
- en: 'To have floating action button complete add PNG resource for plus sign and
    apply it to the button:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: With the icon added to the button the animation looks perfect! Let's make it
    even more perfect! We will create an animation set containing multiple animations!
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: The `AnimatorSet` class gives us the ability to create complex animations. In
    this case, we defined animations for scaling along the *x* axis and for scaling
    along the *y* axis. This two animations will be animated at the same time giving
    us the effect of scaling in both directions. After we scale view we will reduce
    (or increase) view's capacity. As you can see, we can chain or order animation's
    execution.
  prefs: []
  type: TYPE_NORMAL
- en: Build your project and run. You can see new animation behavior.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter was a rather interactive one. First we showed you how to add, define,
    change, and adjust a theme in Android. Then we submerged into Android styles and
    assets. In this chapter, we also adopted some custom fonts and coloring. In the
    end, we made some seriously beautiful buttons and swift animations. In the next
    chapter, you will start learning about the system part of the Android Framework.
    We will start with permissions.
  prefs: []
  type: TYPE_NORMAL
