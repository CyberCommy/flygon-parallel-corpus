- en: Chapter 6. Testing Interactions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: So far we have tested the filling of text fields on a form, but there are other
    more complex input fields that you can instruct a Zombie browser to fill.
  prefs: []
  type: TYPE_NORMAL
- en: For instance, you may want to select a radio button element, or choose one item
    from a drop-down list box, or you may want to select a particular date from a
    date input field.
  prefs: []
  type: TYPE_NORMAL
- en: When interacting with form fields and other elements, your application may manipulate
    the document—to show or hide some elements, for instance. By the end of this chapter
    you will know how to use Zombie.js to validate the effects of manipulating the
    document with JavaScript.
  prefs: []
  type: TYPE_NORMAL
- en: 'The topics covered in this chapter are:'
  prefs: []
  type: TYPE_NORMAL
- en: How to trigger changes in other form objects
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to test DOM manipulations
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Acting on radio buttons
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To test the usage of radio buttons, we need to add some to a form in our app.
    We will introduce a radio button in the to-do item creation form to indicate if
    an alarm should be scheduled. Depending on the selected value, a field should
    appear, allowing us to set the to-do item's alarm date and time.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we need to change the to-do item creation template in `templates/todos/new.html`
    to:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: This will present users with a couple of new radio buttons in the to-do item
    creation form:![Acting on radio buttons](img/0526OS_06_01.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now we also need to introduce some styles. Create a custom style sheet under
    `public/css/todo.css`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'We need to refer the previous CSS file in our layout file in `templates/layout.html`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Next we need to make the date and time form fields appear when the user selects
    the **Alarm** radio button. For that we need to introduce an event listener in
    the `public/js/todos.js` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'This new event listener will listen for changes in the radio button and then
    hide or show the alarm date and time fields accordingly, resulting in the following
    screen when the `Alarm` setting is turned on:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Acting on radio buttons](img/0526OS_06_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'We also need to change the route listener for the form post to accommodate
    these new fields:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'This new piece of code processes the alarm date and alarm time submitted in
    the form fields and parses them into a timestamp. A to-do item contained in the
    `todo` variable is then converted into a document that looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Testing the user interaction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'For testing these new form fields and their combined behavior, we will use
    the test file in `test/todos.js`, and augment the `Todo creation form` scope:'
  prefs: []
  type: TYPE_NORMAL
- en: 'First we test that these radio buttons do exist and that the alarms are turned
    off by default:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Here we're verifying that we actually have two radio buttons for the `alarm`
    field, one having a `false` and the other having a `true` string value. Then we
    also verify that the first one is checked.
  prefs: []
  type: TYPE_NORMAL
- en: 'We also need to verify that the animation of the new date and time form fields
    works; the `div` element that wraps the alarm date and time input fields should
    be hidden when the user chooses not to use the alarm. When the user selects the
    `Use alarm` radio button, the `div` element should then be made visible:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Here, we are turning the use alarm setting on and off and verifying that the
    style of the container, `div`, changes accordingly. In Zombie, all the user interaction
    functions (such as `browser.choose()`, `browser.fill()`, and others) allow you
    to pass in a callback function as the last argument. This function will be invoked
    once the browser event loop is free, which means that your function will only
    be invoked after any animation. This is really useful since your test code doesn't
    have to explicitly wait for the animation to finish. You can be assured that the
    DOM is manipulated once your callback function gets called.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Using this technique, you can also test for any user interaction. By providing
    a callback function that Zombie invokes when all the actions are complete, you
    can test the effect that those actions had on the document.
  prefs: []
  type: TYPE_NORMAL
- en: In our case, we tested that we succeed in changing the style attribute of a
    `div` element, but you can also test other interactions using this technique.
    For instance, as we'll see in the next chapter, we can test that the content has
    changed according to some user actions.
  prefs: []
  type: TYPE_NORMAL
- en: Selecting values
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If you have a select box in a form, you can also instruct Zombie to select a
    list item for you. Let's change our to-do item creation form to include an additional
    select box that describes the scope of the item—whether the item is related to
    work, family, or if it's a personal task.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we need to introduce this additional field into the to-do item creation
    form in `templates/todos/new.html`, right after the `What` text area field:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'This will present the following form containing the additional **Scope** label
    and a select box:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Selecting values](img/0526OS_06_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Now we need to have a test that verifies that this form contains the `select`
    element and the `option` items. For that, let''s keep extending the file in `test/todos.js`,
    inside the `Todo creation form` description scope:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Here we're testing that the `select` element exists, that it has four `option`
    items, and that each item has the expected value and text.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now we need to change the to-do list to present this new scope field. For that,
    we need to introduce it in the `templates/todos/index.html` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'We also need to fill the value when presenting the to-do item list in the `routes/todos.js`
    file, in the `GET /` route listener:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'This will result in a to-do list like the one shown in the following screenshot,
    where the `scope` attribute of each to-do item is presented:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Selecting values](img/0526OS_06_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Now we need to test that the to-do item creation succeeds in capturing the
    scope value. For this, we''ll slightly change the test named `should allow to
    create a todo`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Zombie allows you to manipulate any form object including text fields, text
    areas, select boxes, checkboxes and radio buttons.
  prefs: []
  type: TYPE_NORMAL
- en: Zombie not only allows the testing of server responses, but also the simulation
    of user interaction. If your application dynamically changes the document when
    a user event is triggered (such as selecting an option or clicking on an element),
    using Zombie and browser queries, you can verify that the behavior is as intended.
  prefs: []
  type: TYPE_NORMAL
- en: Even when user-triggered animations are present (such as fade-in), Zombie will
    not invoke the callback until these animations are complete.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will analyze how we can use Zombie.js to test user interactions
    that perform the AJAX calls.
  prefs: []
  type: TYPE_NORMAL
