- en: Starting with Android
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Kotlin** has been officially announced by Google as a first-class programming
    language for Android. Find out why Kotlin is the best tool available for you as
    a newcomer and why senior Android developers first adopted Kotlin.'
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, you will learn how to set up a working environment. You will
    install and run Android Studio and set up Android SDK and Kotlin. Here, you will
    also be introduced to some important and useful tools such as **Android Debug
    Bridge** (**adb**).
  prefs: []
  type: TYPE_NORMAL
- en: Since you don't have your project yet, you will set it up. You will initialize
    a Git repository to track changes in your code and create an empty project. You
    will enable it to support Kotlin and add support for additional libraries that
    we will use.
  prefs: []
  type: TYPE_NORMAL
- en: After we have initialized the repository and project, we will go through the
    project structure and explain each file the IDE has generated. Finally, you will
    create your first screen and take a look at it.
  prefs: []
  type: TYPE_NORMAL
- en: 'This chapter will cover the following points:'
  prefs: []
  type: TYPE_NORMAL
- en: Setting up an environment for the development of Git and Gradle basics
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Working with Android Manifest
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Android emulator
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Android tools
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Why Kotlin?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Before we start our journey, we will answer the question from the chapter title--Why
    Kotlin? Kotlin is a new programming language developed by JetBrains, the company
    that developed IntelliJ IDEA. Kotlin is concise and understandable, and it compiles
    everything to bytecode just like Java. It can also compile to JavaScript or native!
  prefs: []
  type: TYPE_NORMAL
- en: Kotlin comes from professionals of the industry and solves problems programmers
    are facing every day. It is easy to start and adopt! IntelliJ comes with a Java
    to Kotlin converter tool. You can convert Java code file by file and everything
    will still work flawlessly.
  prefs: []
  type: TYPE_NORMAL
- en: It is interoperable and can use any existing Java Framework or library. The
    interoperability is impeccable and does not require wrappers or adapter layers.
    Kotlin supports build systems such as Gradle, Maven, Kobalt, Ant, and Griffon
    with external support.
  prefs: []
  type: TYPE_NORMAL
- en: The most important thing about Kotlin, for us, is that it works perfectly with
    Android.
  prefs: []
  type: TYPE_NORMAL
- en: 'Some of the most impressive Kotlin features are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Null safety
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Exceptions are unchecked
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Type inference works everywhere
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: One-liner functions take one line
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Generated getters and setter out of the box
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We can define functions outside of classes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Data classes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Functional programming support
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Extension functions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Kotlin uses Markdown instead of HTML for API documents! The Dokka tool, a Javadoc
    alternative, can read Kotlin and Java source code and generate combined docs
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Kotlin has a better generics support than Java
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Reliable and performant concurrent programming
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: String patterns
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Named method arguments
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Kotlin for Android - it's official
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: On May 17th 2017, Google announced that it's making Kotlin, a statically typed
    programming language for the Java Virtual Machine, a first-class language to write
    Android apps.
  prefs: []
  type: TYPE_NORMAL
- en: The next version of Android Studio (3.0, current one is 2.3.3) will support
    Kotlin out of the box. Google will put its effort in the future of Kotlin.
  prefs: []
  type: TYPE_NORMAL
- en: It is important to note that this is only an additional language, not a replacement
    for existing Java and C++ support (for now).
  prefs: []
  type: TYPE_NORMAL
- en: Downloading and configuring Android Studio
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To develop our application, we will need some tools. First of all, we will need
    an IDE. For that purpose, we will use Android Studio. Android Studio provides
    the fastest tools to build apps on every type of Android device.
  prefs: []
  type: TYPE_NORMAL
- en: Android Studio offers professional code editing, debugging, and performance
    tooling. It's a flexible build system that allows you to focus on building a top
    quality application.
  prefs: []
  type: TYPE_NORMAL
- en: 'Setting up Android Studio takes just a few clicks. Before we go any further,
    you need to download the following version for your operating system:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://developer.android.com/studio/index.html](https://developer.android.com/studio/index.html)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Here are the instructions for macOS, Linux, and Windows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**macOS**:'
  prefs: []
  type: TYPE_NORMAL
- en: 'To install it on macOS, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Launch the Android Studio `DMG` file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Drag and drop Android Studio into the `Applications` folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Launch Android Studio.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select whether you want to import previous Android Studio settings.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on OK.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Follow the instructions until Android Studio is ready for use.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Linux:** To install it on Linux, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Unpack the archive you downloaded to an appropriate location for your applications.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Navigate to `bin/directory/`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Execute `/studio.sh`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select whether you want to import previous Android Studio settings or not.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on OK.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Follow the instructions until Android Studio is ready for use.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Optionally, select Tools | Create Desktop Entry from the menu bar.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'If you are running a 64-bit version of Ubuntu, you need to install some 32-bit
    libraries with the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '`**sudo apt-get install libc6:i386 libncurses5:i386 libstdc++6:i386 lib32z1
    libbz2-1.0:i386**`'
  prefs: []
  type: TYPE_NORMAL
- en: 'In case you are running a 64-bit Fedora, the command is follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`**sudo yum install zlib.i686 ncurses-libs.i686 bzip2-libs.i686**`'
  prefs: []
  type: TYPE_NORMAL
- en: '**Windows**:To install it on Windows, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Execute the `.exe` file you downloaded.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Follow the instructions until Android Studio is ready for use.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Setting up Android emulators
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Android SDK comes with **emulators** capable of running applications we develop.
    We will need it for our project! The purpose of an emulator is to simulate a device
    and displays all its activity windowed on your computer. What can we do with it?
    We can prototype, develop, and test--all this without a hardware device. You can
    emulate phones, tablets, wearables, and TV devices. You can create your own device
    definitions, or you can use predefined emulators.
  prefs: []
  type: TYPE_NORMAL
- en: The good thing about emulators is that they are fast. In many situations, it
    will take less time to run an application on an emulator instance than on a real
    hardware device.
  prefs: []
  type: TYPE_NORMAL
- en: Working with the emulators is just as easy with a real hardware device. For
    gestures, you use your mouse, and for input, your keyboard.
  prefs: []
  type: TYPE_NORMAL
- en: Emulators can do anything a real phone does! You can easily send incoming phone
    calls and text messages! You can specify the location of the device, send fingerprint
    scans, adjust network speed and status, or even simulate battery properties. Emulators
    can have a virtual SD card and internal data storage, both of them you can use
    to send real files to that space.
  prefs: []
  type: TYPE_NORMAL
- en: '**Android Virtual Device** (**AVD**) configuration is used to define an emulator.
    Each AVD instance works as a completely independent device! For the purpose of
    creating and management of AVDs, we use the AVD Manager. An AVD definition holds
    a hardware profile, system image, storage area, skin, and other important properties.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s play with it! To run the AVD Manager, do one of the following:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Select **Tools** | **Android** | **AVDManager** or click on the **AVDManager** icon
    in the toolbar:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/03be9bd5-d234-4dec-bd94-e61931a76689.png)'
  prefs: []
  type: TYPE_IMG
- en: It displays all AVDs you've already defined. As you can see, we don't have any
    yet!
  prefs: []
  type: TYPE_NORMAL
- en: 'What can we do here? We can do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a new AVD
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Edit an existing AVD
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Delete the existing AVD
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Create hardware profiles
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Edit an existing hardware profile
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Delete an existing hardware profile
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Import/export definitions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Start or stop the AVD
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Clear data and reset the AVD
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Access the AVD `.ini` and `.img` files on the filesystem
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: View the AVD configuration details
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: To obtain the AVD instance, you can either create a new AVD from the beginning
    or duplicate an existing AVD and modify it by need.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a new AVD instance
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'From the **Your Virtual Devices** of the AVD Manager, click on Create Virtual Device
    (you can do the same as you run your app from within Android Studio by clicking
    on the Run icon, and then, in the Select Deployment Target dialog, choose Create New Emulator).
    Please refer to the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/74eb1559-6335-4d0f-89f1-e02bf0ff0c05.png)'
  prefs: []
  type: TYPE_IMG
- en: Select a hardware profile and then click on Next, as shown in the previous screenshot.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/97a46a76-95f7-4af6-b69d-326d7548f2d5.png)'
  prefs: []
  type: TYPE_IMG
- en: 'If you notice the Download link next to the system image, you have to click
    on it. The download process starts, as you can see in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/66e46867-20b8-48ed-9789-36fbf3d490f5.png)'
  prefs: []
  type: TYPE_IMG
- en: We must note that the API level of the target device is very important! Your
    application can't run on a system image whose API level is less than the one required
    by your application. That attribute is specified in your Gradle configuration.
    We will deal with Gradle in detail later.
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, Verify Configuration appears:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/1ca71d03-a12e-4c21-981c-4ba2fe970635.png)'
  prefs: []
  type: TYPE_IMG
- en: Change the AVD properties if needed and then click on Finish to complete the
    wizard. The newly created AVD appears in the Your Virtual Devices list or the
    Select Deployment Target dialog, depending on where you accessed the wizard from.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/3c7bf1a9-d7ed-4da8-81a4-141b0c6cd5bc.png)'
  prefs: []
  type: TYPE_IMG
- en: 'If you need to create a copy of the existing AVD, follow these instructions:'
  prefs: []
  type: TYPE_NORMAL
- en: Open AVD Manager, right-click on the AVD instance, and select Duplicate.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Follow the wizard, and, after you modified what you needed, click on Finish.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A new modified version appears in our AVD list.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'We will demonstrate dealing with hardware profiles by creating a new one from
    scratch. To create a new hardware profile, follow these instructions. In Select
    Hardware, click on New Hardware Profile. Please refer to the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/c34dc3f9-363f-43e9-b4f5-bb38980fa738.png)'
  prefs: []
  type: TYPE_IMG
- en: Configure Hardware Profile appears. Adjust the hardware profile properties as
    needed. Click on Finish. Your newly created hardware profile appears.
  prefs: []
  type: TYPE_NORMAL
- en: Duplicating an existing AVD and modifying it by need
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'If you need a hardware profile based on an existing one, follow these instructions:'
  prefs: []
  type: TYPE_NORMAL
- en: Select an existing hardware profile and click on Clone Device.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Update the hardware profile properties by your needs. To complete the wizard,
    click on Finish.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Your profile appears in the hardware profile list.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Let''s go back to the AVD list. Here, you can perform the following operations
    on any existing AVD:'
  prefs: []
  type: TYPE_NORMAL
- en: Edit it by clicking on Edit
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Delete by right-clicking and choosing Delete
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Access the `.ini` and `.img` files on the disk by right-clicking on an AVD instance
    and choosing Show on Disk
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: To view the AVD configuration details, right-click on an AVD instance and choose View Details
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Since we covered this, let''s go back to the hardware profile list. Here, we
    can do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Edit a hardware profile by selecting it and choosing Edit Device
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Delete a hardware profile by right-clicking on it and choosing Delete
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You can't edit or delete the predefined hardware profiles!
  prefs: []
  type: TYPE_NORMAL
- en: 'Then, we can run or stop an emulator or clear its data as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: To run an emulator that uses an AVD, double-click on the AVD or just choose
    Launch
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: To stop it, right-click on it and choose Stop
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: To clear the data for an emulator, and return it to the same state as when it
    was first defined, right-click on an AVD and choose Wipe Data
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We will continue our emulators' journey with the explanation of command-line
    features that you can use with `*-`.
  prefs: []
  type: TYPE_NORMAL
- en: 'To start an emulator, use the emulator command. We will show you some basic
    command-line syntax to start a virtual device from a terminal:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Another command-line syntax is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s take a look at the following example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: You can specify startup options when you start the emulator; later, you can't
    set these options.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you need a list of available AVDs, use this command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: The result is a list of AVD names from the Android home directory. You can override
    the default home directory by setting the `ANDROID_SDK_HOME` environment variable.
  prefs: []
  type: TYPE_NORMAL
- en: Stopping an emulator is simple--just close its window.
  prefs: []
  type: TYPE_NORMAL
- en: It is important to note that we can run AVDs from Android Studio UI as well!
  prefs: []
  type: TYPE_NORMAL
- en: Android Debug Bridge
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To access devices, you will use the `adb` command executed from the terminal.
    We will take a look into the common cases.
  prefs: []
  type: TYPE_NORMAL
- en: 'Listing all devices:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Console output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Obtaining shell access to device:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Accessing a specific device instance:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Where `-s` represents device source.
  prefs: []
  type: TYPE_NORMAL
- en: 'Copying a file from and to a device:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Uninstalling an application:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: One of the greatest features of `adb` is that you can access it through telnet.
    Use `telnet localhost 5554` to connect to your emulator device. Terminate your
    session using the `quit` or `exit` command.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s play with `adb`:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Connect to device:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Change the power level:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Or simulate a call:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Send an SMS:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Set geolocation:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: With `adb`, you can also take a screenshot or record a video!
  prefs: []
  type: TYPE_NORMAL
- en: Other important tools
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We will cover some other tools you will need in everyday Android development.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s start with the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '`adb dumpsys`: To get information about a system and running an application,
    use the `adb dumpsys` command. To get a memory status, execute the following command--`adb
    shell dumpsys meminfo <package.name>`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Next important tool is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`adb shell procrank`: The `adb shell procrank` lists all the applications for
    you in the order of their memory consumption. This command does not work on live
    devices; you connect only with emulators. For the same purpose, you can use--`adb
    shell dumpsys meminfo`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For battery consumption, you can use--`adb shell dumpsys batterystats`--charged
    `<package-name>`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Next important tool is **Systrace**. To analyze performance of your application
    by capturing and displaying execution times, you will use this command.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: When you have problems with application glitches, Systrace tool comes as a powerful
    ally!
  prefs: []
  type: TYPE_NORMAL
- en: It does not work with Android SDK Tools less than 20! To use it, you must have
    Python installed and configured.
  prefs: []
  type: TYPE_NORMAL
- en: Let's try it!
  prefs: []
  type: TYPE_NORMAL
- en: 'To access it from UI, open Android Device Monitor in Android Studio and then
    choose Monitor:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/4725d134-3af5-45c5-bbf9-3ededd23281a.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Sometimes, it can be easier to access it from the terminal (command line):'
  prefs: []
  type: TYPE_NORMAL
- en: The Systrace tool has different command-line options, depending on the Android
    version running on your device.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s take a look at some examples:'
  prefs: []
  type: TYPE_NORMAL
- en: 'General usage:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Android 4.3 and up:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'Android 4.2 and lower options:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: The last important tool we want to present is `sdkmanager`. It allows you to
    view, install, update, and uninstall packages for the Android SDK. It is located
    in `android_sdk/tools/bin/`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s take a look at some common examples of use:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Listing installed and available packages:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'Installing packages:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: You can send packages you got from `--list` command.
  prefs: []
  type: TYPE_NORMAL
- en: 'Uninstalling:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'Updating:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: There are also some other tools you can use in Android, but we only showed the
    most important ones.
  prefs: []
  type: TYPE_NORMAL
- en: Initializing a Git repository
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We have installed Android Studio and introduced ourselves to some important
    SDK tools. We also learned how to deal with emulated devices that will run our
    code. It is time to start working on our project. We will develop a small application
    for notes and todos. This is a tool that everybody needs. We will give it a name--`Journaler`
    and it will be an application capable of creating notes and todos with reminders
    that will be synced to our backend.
  prefs: []
  type: TYPE_NORMAL
- en: First step in development is initializing a Git repository. Git will be our
    code versioning system. It is up to you to decide if you will use GitHub, BitBucket,
    or something else for a remote Git instance. Create your remote repository and
    keep its URL ready, along with your credentials. So, let's start!
  prefs: []
  type: TYPE_NORMAL
- en: 'Go into the directory containing the project:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'The console output will be something like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: We initialized the repo.
  prefs: []
  type: TYPE_NORMAL
- en: Let's add the first file--`vi notes.txt`.
  prefs: []
  type: TYPE_NORMAL
- en: Populate `notes.txt` with some content and save it.
  prefs: []
  type: TYPE_NORMAL
- en: Execute `git add .` to add all of the relevant files.
  prefs: []
  type: TYPE_NORMAL
- en: 'Then: `git commit -m "Journaler: First commit"`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The console output will be something like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'As you remember, you prepared your remote Git repository `url` with credentials.
    Copy `url` into a clipboard. Now, execute the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: This sets the new remote.
  prefs: []
  type: TYPE_NORMAL
- en: 'Then: `git remote -v`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This verifies the new remote URL.
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, push everything we have to remote: `git push -u origin master`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If you are asked for credentials, enter it and confirm by pressing *Enter*.
  prefs: []
  type: TYPE_NORMAL
- en: Creating an Android project
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We initialized our code repository. It is time to create a project. Start Android
    Studio and choose the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Start a new Android Studio Project or File | New | New Project.
  prefs: []
  type: TYPE_NORMAL
- en: Create New Project and a window appears.
  prefs: []
  type: TYPE_NORMAL
- en: 'Fill the application information:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/8a36da05-3057-4868-8470-33ea224f5028.png)'
  prefs: []
  type: TYPE_IMG
- en: Then, click on Next.
  prefs: []
  type: TYPE_NORMAL
- en: 'Check the Phone and Tablet option, and then choose Android 5.0 as the minimum
    Android version as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/45875cb2-148b-47a2-96d5-784235a8ebe0.png)'
  prefs: []
  type: TYPE_IMG
- en: Click on Next again.
  prefs: []
  type: TYPE_NORMAL
- en: 'Choose Add No Activity and click on Finish, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/2ec3717d-dcb5-48af-a610-5181dee08b24.png)'
  prefs: []
  type: TYPE_IMG
- en: Wait until your project is created.
  prefs: []
  type: TYPE_NORMAL
- en: 'You will notice a message about Unregistered VCS root detected. Click on add
    root or go to Preferences | Version Control | , and then select our Git repository
    from the list and the click on then + icon, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/6c43b03b-7217-4fb7-928d-51febe52a8a8.png)'
  prefs: []
  type: TYPE_IMG
- en: To confirm everything, click on Apply and OK.
  prefs: []
  type: TYPE_NORMAL
- en: Before committing and pushing, update your `.gitignore` files. The purpose of
    the `.gitignore` file is to allow you to ignore files, such as editor backup files,
    build products, or local configuration overrides that you never want to commit
    into a repository. Without matching the `.gitignore` rules, these files will appear
    in the `untracked files` section of the Git status output.
  prefs: []
  type: TYPE_NORMAL
- en: 'Open `.gitignore` located in your project `root` directory and edit it. To
    access it, expand Project by clicking on Project on the left side of Android Studio,
    and then, from the drop-down menu, choose Project, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/15cfa9bb-76e5-4eaf-99d8-91f3661fc73d.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Let''s add some lines:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, edit `.gitignore`, which is located in the `app` module directory:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: You can use this `.gitignore` configuration from the preceding. Now we can commit
    and push *cmd* + *9* on macOS or *ctrl* + *9* on Windows/Linux (shortcut for View
    | Tool Windows | Version Control). Expand unversioned files, select them, and
    right-click on Add to VCS.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/e5585919-893d-4466-ba70-60a24ba7bd6e.png)'
  prefs: []
  type: TYPE_IMG
- en: Press *Cmd* + *K* (or *Ctrl* + *K* on Windows/Linux), check all files, enter
    commit message, and, from the Commit drop-down menu, choose Commit and Push. If
    you get Line Separators Warning, choose Fix and Commit. The Push Commits window
    will appear. Check Push Tags and choose Current Branch, and then Push.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up Gradle
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Gradle is a build system. You can build your Android application without one,
    but, in that case, you have to use several SDK tools by yourself. That is not
    simple! This is a part where you need a Gradle and Android Gradle plugin.
  prefs: []
  type: TYPE_NORMAL
- en: Gradle takes all the source files and processes them by tools we mentioned.
    Then, it packs everything into one compressed file with the `.apk` extension.
    APK can be uncompressed. If you rename it by changing its extension to `.zip`,
    you can extract the content.
  prefs: []
  type: TYPE_NORMAL
- en: Each build system uses its convention. The most important convention is about
    placing source code and assets in a proper directory with proper structure.
  prefs: []
  type: TYPE_NORMAL
- en: 'Gradle is a JVM-based build system, so that practically means that you can
    write your own script in Java, Groovy, Kotlin, and so on. Also, it''s a plugin-based
    system and is easy to extend. One good example of it is Google''s Android plugin.
    You probably noticed `build.gradle` files in your project. They are all written
    in Groovy, so any Groovy code you write will be executed. We will define our Gradle
    scripts to automate a building process. Let''s set up our building! Open `settings.gradle`
    and take a look at it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: This directive tells Gradle that it will build a module named `App`. The `App`
    module is located in the `app` directory of our project.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now open `build.gradle` from project `root` and add the following lines:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'We defined that our build script will resolve its dependencies from JCenter
    and Maven Central repositories. The same repositories will be used to resolve
    project dependencies. Main dependencies are added to target each module we will
    have:'
  prefs: []
  type: TYPE_NORMAL
- en: Android Gradle plugin
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Kotlin Gradle plugin
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'After you updated the main `build.gradle` configuration, open `build.gradle`
    located in the `App module` directory and add the following lines:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: The configurations we set enable Kotlin as a development language for our project
    and Gradle scripts as well. Then, it defines a minimal and target sdk version
    that an application requires. In our case, this is `19` as minimum and `26` as
    target. It is important to note that in the default configuration section, we
    set application ID and version parameters too. The dependencies section sets dependencies
    for Kotlin itself and some Android UI components that will be explained later.
  prefs: []
  type: TYPE_NORMAL
- en: Explaining directory structure
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Android Studio contains everything you need to build an application. It contains
    source code and assets. All directories are created by the wizard we used to create
    our project. To see it, open the Project window on the left side of the IDE (click
    on View | ToolWindows | Project), as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/b3847c62-65ac-49e5-b948-e99f4deaf4f8.png)'
  prefs: []
  type: TYPE_IMG
- en: A project module represents a collection of source files, assets, and build
    settings that divide projects into discrete functionality parts. The minimal number
    of `modules` is one. There is no real limit on the maximal `modules` number your
    project can have. `Modules` can be built, tested, or debugged independently. As
    you saw, we defined the Journaler project with only one module named app.
  prefs: []
  type: TYPE_NORMAL
- en: 'To add a new module, following these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Go to File | New | New Module.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/105d3754-d922-4893-8dc8-002cbfce41ea.png)'
  prefs: []
  type: TYPE_IMG
- en: 'It''s possible to create the following `modules`:'
  prefs: []
  type: TYPE_NORMAL
- en: Android Application Module represents a container for your application source
    code, resources, and settings. The default module name is app, like in our created
    example.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Phone & Tablet Module.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Android Wear Module.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Glass Module.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Android TV module.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Library` module represents a container for reusable code--a library. The module
    can be used as a dependency in other application modules or imported into other
    projects. When it''s built, the module has an AAR extension--Android Archive instead
    of having an APK extension.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The Create New Module window offers the following options:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Android Library**: All types are supported in an Android project. The build
    result of this library is an **Android Archiver** (**AAR**).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Java Library**: Only supports pure Java. The build result of this library
    is a **Java Archiver** (**JAR**).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Google Cloud Module**: This defines a container for the Google Cloud backend
    code.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'It is important to understand that Gradle refers to `modules` as individual
    projects. If your application code depends on the code for the Android library
    called **Logger** then in **build.config**, you use must include the following
    directive:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: Let's navigate through the project structure. The default view Android Studio
    uses to display your project files is Android view. It doesn't represent the actual
    file hierarchy on disk. It hides certain files or directories that are not often
    used.
  prefs: []
  type: TYPE_NORMAL
- en: 'Android view presents the following:'
  prefs: []
  type: TYPE_NORMAL
- en: All the build-related configuration files
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: All manifest files
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: All other resource files in a single group
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'In each application, the module content is presented in these groups:'
  prefs: []
  type: TYPE_NORMAL
- en: Manifests and `AndroidManifest.xml` files.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Java and Kotlin source code for application and tests.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `res` and Android UI resources.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: To see the real file structure of the project, choose Project view. To do this,
    click on Android view and, from the drop-down menu, choose Project.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'By doing this, you will see a lot more files and directories. The most important
    of them are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`module-name/`: This is the name of the module'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`build/`: This holds build outputs'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`libs/`: This holds private libraries'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`src/`: This holds all code and resource files for the module organized in
    the following subdirectories:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`main`: This holds the `main` source set files--source code and resources shared
    by all build variants (we will explain build variants later)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`AndroidManifest.xml`: This defines the nature of our application and each
    of its components'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`java`: This holds the Java source code'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`kotlin`: This holds the Kotlin source code'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`jni`: This holds the native code using the **Java Native Interface** (**JNI**)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`gen`: This holds the Java files generated by Android Studio'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`res`: This holds application resources, for example, **drawable** files, layout
    files, strings, and so on'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`assets`: This holds files that should be compiled into an `.apk` file with
    no modification'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`test`: This holds the test source code'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`build.gradle`: This is the module level build configuration'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`build.gradle`: This is the project level build configuration'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Choose File | Project Structure to change settings for the project in the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/67d1bc33-5015-43da-b9aa-16218dd7e137.png)'
  prefs: []
  type: TYPE_IMG
- en: 'It contains the following sections:'
  prefs: []
  type: TYPE_NORMAL
- en: 'SDK Location: This sets the location of the JDK, Android SDK, and Android NDK
    that your project uses'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Project: This sets Gradle and Android Gradle plugin versions'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Modules: This edits module-specific build configurations'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The Modules section is divided in the following tabs:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Properties: This sets the versions of the SDK and build tools for module building'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Signing: This sets the certificate for APK signing'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Flavors: This defines flavors for the module'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Build Types: This defines build types for the module'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Dependencies: This sets dependencies needed by the module'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Please refer to the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/c985a074-a164-4a44-b980-2619cd9fe97e.png)'
  prefs: []
  type: TYPE_IMG
- en: Defining build types and flavors
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We are approaching an important phase of our project--defining build variants
    for our application. Build variant stands for a unique version of an Android application.
  prefs: []
  type: TYPE_NORMAL
- en: They are unique because they override some of the application attributes or
    resources.
  prefs: []
  type: TYPE_NORMAL
- en: Each build variant is configured per module level.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s extend our `build.gradle`! Put the following code in the `android` section
    of the `build.gradle` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: We defined the following `buildTypes` for our application--`debug`, `release`,
    `staging`, and `preproduction`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Product flavors are created in a similar way like `buildTypes`. You need to
    add them to `productFlavors` and configure the needed settings. The following
    code snippet demonstrates this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: After you create and configure your `productFlavors`, click on Sync Now in the
    notification bar.
  prefs: []
  type: TYPE_NORMAL
- en: 'You need to wait a while for the process to be done. Names for Build Variants
    are formed by the `<product-flavor><Build-Type>` convention. Here are some examples:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: You can change the build variant to the one that you want to build and run.
    Go to Build, select Build Variant, and select `completeDebug` from the drop-down
    menu.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/c97ef034-fda4-4f99-82ef-bc807325851a.png)'
  prefs: []
  type: TYPE_IMG
- en: The `Main/source` set is shared between all build variants in your application.
    If you need to create a new source set, you can do that for certain build types,
    product flavors, and their combinations.
  prefs: []
  type: TYPE_NORMAL
- en: All source set files and directories must be organized in a specific way, similar
    to the `Main/Source` set. Kotlin class files that are specific to your *debug*
    build type must be located in `src/debug/kotlin/directory`.
  prefs: []
  type: TYPE_NORMAL
- en: 'In order to learn how to organize your files, open the terminal window (View
    | ToolWindows | Terminal) and execute the following command line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: Take a look at the output carefully. The report is understandable and self-explanatory.
    Android Studio doesn't create the `sourceSets` directories. It's a work that has
    to be done by you.
  prefs: []
  type: TYPE_NORMAL
- en: 'If desired, you can change the location where Gradle is looking for a source
    set using the `sourceSets` block. Let''s update our build configuration. We will
    update the following expected source code paths:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: 'Code and resources that you want packaged only with certain configurations,
    you can store in the `sourceSets` directories. Here are given examples for build
    with the `demoDebug` build variant; this build variant is a product of a `demo`
    product flavor and `debug` build type. In Gradle, the following priority is given
    to them:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: 'This is the priority order that Gradle uses during the build process and considers
    it when applying the following build rules:'
  prefs: []
  type: TYPE_NORMAL
- en: It compiles source code in the `java/` and `kotlin/` directories together
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It merges manifests together into a single manifest
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It merges files in the `values/` directories
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It merges resources in the `res/` and `asset/` directories
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The lowest priority is given to resources and manifests included with library
    module dependencies.
  prefs: []
  type: TYPE_NORMAL
- en: Additional libraries
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We configured our build types and flavors, now we will need some third-party
    libraries. We will use and add support for Retrofit, OkHttp, and Gson. This is
    an explanation for each of them:'
  prefs: []
  type: TYPE_NORMAL
- en: Retrofit is a type-safe HTTP client for Android and Java by Square, Inc. Retrofit
    is one of the most popular HTTP client library for Android as a result of its
    simplicity and its great performance compared to the others.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`OkHttp` is an HTTP client that''s efficient by default--HTTP/2 support allows
    all requests to the same host to share a socket.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Gson is a Java library that can be used to convert Java objects into their JSON
    representation. It can also be used to convert a JSON string to an equivalent
    Java object. Gson can work with arbitrary Java objects including preexisting objects
    that you do not have a source code for.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There are a few open source projects that can convert Java objects to JSON.
    Later in this book, we will add Kotson to provide Gson bindings for Kotlin.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s extend `build.gradle` with dependencies for Retrofit and Gson:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: After you updated your Gradle configuration, sync it again when asked!
  prefs: []
  type: TYPE_NORMAL
- en: Getting familiar with Android Manifest
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Every application must have an `AndroidManifest.xml` file and the file must
    have exactly that name. Its location is in its `root` directory, and, in each
    module, it contains essential information about your application to the Android
    system. The `manifest` file is responsible for defining the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Naming a package for the application
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Describing the components of the application--activities (screens), services,
    broadcast receivers (messages), and content providers (database access)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Permissions that application must have in order to access protected parts of
    the Android API
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Permissions that other applications must have in order to interact with the
    application's components, such as content providers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following code snippet shows the general structure of the `manifest` file
    and elements that it can contain:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: Main Application class
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Each Android application defines its main `Application` class. The `Application`
    class in Android is the base class within an Android application that contains
    all other components, such as `activities` and `services`. The `Application` class,
    or any subclass of the `Application` class, is instantiated before any other class
    when the process for your application/package is created.
  prefs: []
  type: TYPE_NORMAL
- en: We will create an `Application` class for Journaler. Locate the main sources
    directory. Expand it, and if there is no Kotlin sources directory, create it.
    Then, create the `package com` and subpackage journaler; to do so, right-click
    on the Kotlin directory and choose **New** | **Package**. Once you've created
    the package structure, right-click on the **journaler** package and choose New
    | KotlinFile/Class. Name it `Journaler`. `Journaler.kt` is created.
  prefs: []
  type: TYPE_NORMAL
- en: 'Each `Application` class must extend the Android Application class as shown
    in our example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: 'For now, our main `Application` class will provide us with static access to
    application context. What this context is will be explained later. However, Android
    will not use this class until it''s mentioned in manifest. Open the `app` module
    `android manifest` and add the following block of code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: With `android:name=".Journaler"`, we tell Android which class to use.
  prefs: []
  type: TYPE_NORMAL
- en: Your first screen
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We created an application with no screens. We will not waste time, we will
    create one! Create a new package named `activity` where all our screen classes
    will be defined, and create your first `Activity` class named `MainActivity.kt`.
    We will start with one simple class:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: 'Soon, we will explain the meaning of all these lines. For now, it''s important
    to note that `setContentView(R.layout.activity_main)` assigns UI resource to our
    screen and `activity_main` is a name of the XML defining it. Since we don''t have
    it yet, we will create it. Locate `res` directory under the `main` directory.
    If there is no layout folder there, create one and then create a new layout named
    `activity_main` by right-clicking on `layout` directory and choosing the New |
    Layout resource file. Assign `activity_main` as its name and `LinearLayout` as
    its root element. The content of the file should be similar to this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: 'There is one more thing to do before we are ready to run our application: we
    must tell our manifest about this screen. Open the `main manifest` file and add
    the following piece of code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: We will explain all these attributes soon; all you need to know for now is that
    your application is ready to run. However, before that, `commit and push` your
    work. You don't want to lose it!
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we introduced the basics of Android and gave glimpses of Kotlin.
    We configured a working environment and made the first screen of our application.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will go deeper into the matter of Android. You will
    learn how to build your application and customize different variants. We will
    also cover different ways of running the application.
  prefs: []
  type: TYPE_NORMAL
