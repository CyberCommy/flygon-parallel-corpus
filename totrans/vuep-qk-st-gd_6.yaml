- en: Theme Development in VuePress
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous chapter, we learned about formatting our content with the help
    of Markdown. Prior to that, we had already set up a basic VuePress-powered website.
    Furthermore, we are also aware of most of the configuration settings that VuePress
    provides.
  prefs: []
  type: TYPE_NORMAL
- en: However, one key aspect of web development is still missing.
  prefs: []
  type: TYPE_NORMAL
- en: Yes, we are talking about theme development. As you might be aware, a good theme
    or template is an intangible part of any website or blog.
  prefs: []
  type: TYPE_NORMAL
- en: VuePress comes with its own default theme. In [Chapter 4](553abde8-768a-4320-b9bd-01edcbe2c4d9.xhtml),
    *Creating a Site in VuePress*, when setting up your first VuePress website, you
    were introduced to the default theme and how to use it to present your content.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, however, we will be revisiting everything related to theme
    development and configuration in the world of VuePress. This means we will not
    only be covering config entities and variables, but also be revisiting the default
    VuePress theme and how it works, what specific parts of its code can be used for,
    and so on.
  prefs: []
  type: TYPE_NORMAL
- en: But beyond that, we will also turn our attention to customization of themes
    in VuePress. We will talk at length about custom theme configuration toward the
    latter part of this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, you will learn about the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Theme development for VuePress
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Config entities and values for theme development
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Working with default theme config in VuePress
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Custom theme development in VuePress
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using CSS customization in VuePress
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Syncing with Git repository
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Theme development in VuePress
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: So now, without wasting any more time, let's get things rolling!
  prefs: []
  type: TYPE_NORMAL
- en: Working with themes in VuePress
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: VuePress, as a static site generator, focuses on simplicity and agility. This
    means, unlike WordPress, you will not find a plethora of themes and plugins to
    use. While it can be a deterrent for some people, as an easy-to-install theme
    is a real time-saver in some cases, this functional and developer-focused approach
    is highly useful for many others.
  prefs: []
  type: TYPE_NORMAL
- en: It helps you code your theme the way you want it to be. Plus, you can also work
    with just the default theme and quickly put together a site live within minutes.
    In [Chapter 4](553abde8-768a-4320-b9bd-01edcbe2c4d9.xhtml), *Creating a Site in
    VuePress*, we saw that setting up the default home page in VuePress is as easy
    as editing a simple Markdown file!
  prefs: []
  type: TYPE_NORMAL
- en: What and how?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The current chapter's layout is fairly straightforward, simply because we are
    dealing with just one particular concept of VuePress—themes. With that said, it
    is worth remembering that theme development in itself is a fairly broad topic.
    As VuePress grows in size and popularity, and newer versions come out over the
    course of time, you may need to brush up and revise your theme development skills
    in order to ensure that you adhere to the latest coding standards put forth by
    VuePress and Vue.js.
  prefs: []
  type: TYPE_NORMAL
- en: At this point, we will be discussing, or rather dissecting, the default theme
    structure for VuePress. This means we will cover home page, navigation, sidebar
    and all other related entities. You may have learned the basics in [Chapter 4](553abde8-768a-4320-b9bd-01edcbe2c4d9.xhtml),
    *Creating a Site in VuePress*,but for now, we will be more interested in understanding
    how and why code works here. You have already seen the practical application of
    the default theme in [Chapter 4](553abde8-768a-4320-b9bd-01edcbe2c4d9.xhtml), *Creating
    a Site in VuePress*.
  prefs: []
  type: TYPE_NORMAL
- en: After this, we will turn our attention toward customization. A custom theme
    in VuePress requires that several changes be made to the default structuring,
    as we shall soon see.
  prefs: []
  type: TYPE_NORMAL
- en: But before going any further, let's spend a moment trying to cover some of the
    basic theme configuration values in VuePress. Unlike the Markdown config entities
    or the basic config entities that we covered in previous chapters, theme config
    is not that elaborate.
  prefs: []
  type: TYPE_NORMAL
- en: Config entities for theming
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: At this point, let's first learn about some basic config entities related to
    theme development in VuePress. We have already learned about other config entities
    in previous chapters.
  prefs: []
  type: TYPE_NORMAL
- en: theme
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The theme config value is used to specify a custom theme. This means that if
    you are using a custom theme in your project, you need to invoke the theme config
    to specify it.
  prefs: []
  type: TYPE_NORMAL
- en: It is of the string type and is undefined by default, because VuePress uses
    its own default theme unless otherwise specified.
  prefs: []
  type: TYPE_NORMAL
- en: themeConfig
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As the name suggests, `themeConfig` provides configuration options for the current
    theme.
  prefs: []
  type: TYPE_NORMAL
- en: It is of the object type and is, by default, written as `{ }`.
  prefs: []
  type: TYPE_NORMAL
- en: Note that `themeConfig` contents and options will vary, depending on the way that
    you have structured your theme. You will be using the `themeConfig` entity often
    as you progress with theme customization.
  prefs: []
  type: TYPE_NORMAL
- en: Here is one handy example. Remember the Service Worker that we learned about
    in [Chapter 3](490b74d6-1bb0-4194-9173-c04c98e2b1e9.xhtml), *VuePress Development
    – Preliminary Steps*? That was a site-level Service Worker. But what about a theme-level
    one?
  prefs: []
  type: TYPE_NORMAL
- en: When you use `themeConfig.serviceWorker` you can customize it to work for the
    theme-level stuff only. In this manner, you can customize several elements of
    VuePress development to suit the needs of your theme with the help of `themeConfig`.
  prefs: []
  type: TYPE_NORMAL
- en: '**How is this useful?**'
  prefs: []
  type: TYPE_NORMAL
- en: Well, imagine the following. Your visitors have your VuePress site opened in
    multiple tabs and are browsing your content. Now, what if you update your content
    at that very time? In normal cases, your visitors will not see the new content
    until all the tabs are closed and then opened – in other words, a hard browser-side
    refresh or reload of the opened page.
  prefs: []
  type: TYPE_NORMAL
- en: When you configure the Service Worker to work with `themeConfig`, you can also
    use it for some fun things. One such thing is a UI for popups.
  prefs: []
  type: TYPE_NORMAL
- en: Yes, everyone knows what popups are and how annoying they can be. But we are
    not talking about an advertisement-like spammy popup. Instead, the `themeConfig.serviceWorker`
    element will add an `updatePopup` option that will inform the users when new content
    is available.
  prefs: []
  type: TYPE_NORMAL
- en: In other words, when you update your site and the tab is opened by the user,
    a popup will appear informing the user about new content and a button to refresh,
    so that new content is displayed straightaway, without having to close the clients.
  prefs: []
  type: TYPE_NORMAL
- en: This option is very helpful when you have a site that you update often, such
    as documentation for a technical project, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: 'The basic syntax for the `themeConfig.serviceWorker.updatePopup` option is
    as follows (a Boolean value):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Note that the popup feature in VuePress, as of now, is still in beta.
  prefs: []
  type: TYPE_NORMAL
- en: As you can see, `themeConfig` can be used for varied purposes to add more bells
    and whistles to your VuePress installation.
  prefs: []
  type: TYPE_NORMAL
- en: For now, that is all. These are the only two configuration values that we need
    to bear in mind. Thus, it is safe to turn our attention toward the default VuePress
    theme in order to gain better a functional understanding of this.
  prefs: []
  type: TYPE_NORMAL
- en: Default theme config in VuePress
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This particular section pertains entirely and only to the default VuePress theme.
    If you are using a custom theme, most or all of these settings may not apply.
  prefs: []
  type: TYPE_NORMAL
- en: At this stage, it is highly advisable to turn to the dummy site that you created
    in [Chapter 4](553abde8-768a-4320-b9bd-01edcbe2c4d9.xhtml), *Creating a Site in
    VuePress*. We covered concepts such as the home page, navigation, sidebar, a search
    function, and so on. We will now gain a better understanding of these, and also
    learning about other features that the default VuePress theme provides out of
    the box (such as integration with GitHub repo).
  prefs: []
  type: TYPE_NORMAL
- en: Home page
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We are aware that the default VuePress theme comes with its own home page layout.
    In order to use this, all we have to do is set the home: value to `true` in the
    root directory''s `README.md` file. The said file will then be parsed as `index.html`
    by VuePress, and the default home page will be shown.'
  prefs: []
  type: TYPE_NORMAL
- en: 'We can add metadata to the home page directly via the `README.md` file. In
    the previous chapter, we have learned how to write the front matter in YAML format.
    Thus, it is time to analyze the code for the home page. Copying the same home
    page front matter from [Chapter 4](553abde8-768a-4320-b9bd-01edcbe2c4d9.xhtml), *Creating
    a Site in VuePress*, gives us the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding code, we first specify the metadata about our site. Then, we
    add the link and anchor text details for the call-to-action button. Lastly, we
    enter additional info to be displayed.
  prefs: []
  type: TYPE_NORMAL
- en: 'As we saw in [Chapter 4](553abde8-768a-4320-b9bd-01edcbe2c4d9.xhtml), *Creating
    a Site in VuePress*, here is how the end result looks:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/7f6e8c14-1a4d-4972-a8c9-8d825689150e.png)'
  prefs: []
  type: TYPE_IMG
- en: Anything that is placed after the front matter is also parsed as simplified
    Markdown, and it will be shown below the front matter on the home page.
  prefs: []
  type: TYPE_NORMAL
- en: But what if you do not wish to use the default home page? Sure, you can create
    a custom theme, but why should you build a new theme just for adding a new page?
  prefs: []
  type: TYPE_NORMAL
- en: In this case, the better option would be to customize the home page layout.
    We can do this by means of custom layouts.
  prefs: []
  type: TYPE_NORMAL
- en: Custom layouts for pages
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We know that every Markdown `.md` file is rendered in HTML in the web browser
    by VuePress. In general, VuePress parses the contents of the Markdown file within
    `<div class="page">` containers in HTML.
  prefs: []
  type: TYPE_NORMAL
- en: This means that our default layout—comprising of the main content, nav bar and
    other links—is included within the container.
  prefs: []
  type: TYPE_NORMAL
- en: Thus, the task here is simple. If we have to add any custom layout or component,
    we just need to ensure it is included within our default container.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, say we have specified a custom `layout` named `MyLayout`. Now,
    in the YAML front matter, we just need to add the following line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: With this, the new layout will be rendered for the given page.
  prefs: []
  type: TYPE_NORMAL
- en: In this manner, you can specify custom layouts for as many pages as you want.
  prefs: []
  type: TYPE_NORMAL
- en: Nav bar
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The navigation bar in VuePress consists of a generic set of items, such as the
    navigation menu, the search bar, a link to your GitHub repo (if any), and so on.
  prefs: []
  type: TYPE_NORMAL
- en: Nav bar links
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Remember the `themeConfig` variable that we discussed previously? You can use
    it to add any amount of links to your navbar.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s analyze the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'In the preceding example, we are creating a simple navigation link menu that
    offers four links:'
  prefs: []
  type: TYPE_NORMAL
- en: Home page
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: About page
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A page about coffee
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An external link (GitHub)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Fairly simple, isn''t it? You can keep adding links here as per your needs.
    Here is how it looks in the browser:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/ba00b3ac-cc02-4fe4-9c19-2097184e3126.png)'
  prefs: []
  type: TYPE_IMG
- en: 'And what about dropdown menus? All you need to do is provide the said links
    as arrays, not independent links. For instance, consider the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: With this, the links will be shown as a drop-down menu.
  prefs: []
  type: TYPE_NORMAL
- en: 'Furthermore, you can also have highly complicated menus, with sub-groups and
    nested items under drop-down entries. For a VuePress website, such a type of menu
    structure is highly unlikely to be used, and potentially not so useful. Nevertheless,
    here is the default syntax for such a menu structure, which you can modify as
    per your requirements:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Search bar
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'You can choose to use either the native search or Algolia DocSearch in VuePress.
    The default search bar location is right next to the navigation menu links, as
    we saw in [Chapter 4](553abde8-768a-4320-b9bd-01edcbe2c4d9.xhtml), *Creating a
    Site in VuePress*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/82f865c1-dd3b-49ec-84a4-5e0ab99d5521.png)'
  prefs: []
  type: TYPE_IMG
- en: Native search box
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: VuePress comes with its own native search box that you do not need to tinker
    with. However, if you want, you can use the `themeConfig` value to entirely disable
    the search box, or limit the number of suggestions that are shown for the search
    term.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is how to disable the native search box:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Or, to limit the number of suggestions, try the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: One big drawback of native search in VuePress is that it builds its index from
    the `H1`, `H2`, and `H3` tags only. This means it will not scan through the actual
    body content for the search term.
  prefs: []
  type: TYPE_NORMAL
- en: Naturally, such search functionality may not suffice for everyone, as often,
    the correct keyword is found in the content and not the headings.
  prefs: []
  type: TYPE_NORMAL
- en: To overcome this, we can integrate an external search mechanism into our theme.
  prefs: []
  type: TYPE_NORMAL
- en: Using Algolia Search
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If you are not familiar with Algolia DocSearch, it might be useful to visit
    their website and learn more at [https://community.algolia.com/docsearch/](https://community.algolia.com/docsearch/).
  prefs: []
  type: TYPE_NORMAL
- en: 'Basically, Algolia DocSearch is an enhanced version of the documentation search
    engine. It crawls through your content, indexes it, and then returns better search
    results that span and crawl the entire content, not just headings. A screenshot
    of their website is shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/4fc86854-b6d5-4a6f-9f8b-6c371eb60711.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Algolia DocSearch is fully compatible with various environments, including
    Bootstrap, React, and of course Vue.js Plus, it is a context-aware search mechanism
    that learns as you type. As a result, Algolia DocSearch can offer an array of
    features that may otherwise be lacking in native search methodology, such as:'
  prefs: []
  type: TYPE_NORMAL
- en: Autocomplete suggestions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Customized analytics to view detailed search stats
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Algolia DocSearch comes with an MIT License and is open source. With that said,
    in order to make use of it on your VuePress website, you will need to register
    for an account with Algolia.
  prefs: []
  type: TYPE_NORMAL
- en: Detailed documentation for integrating Algolia DocSearch with your site is available
    at [https://github.com/algolia/docsearch#docsearch-options](https://github.com/algolia/docsearch#docsearch-options).
  prefs: []
  type: TYPE_NORMAL
- en: 'Once you have signed up for an account with Algolia, you can submit your site
    for indexing and crawling. Thereafter, you just need to inform VuePress about
    the Algolia DocSearch engine. To do that, you will once again use the very handy
    `themeConfig` option, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Note that you will need to specify your own API key and index name, as provided
    by the Algolia DocSearch when site indexing is complete. In the absence of an
    API key or index name, or in case of incorrect values for either of them, the
    search functionality will not work.
  prefs: []
  type: TYPE_NORMAL
- en: How to disable the navbar?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Sometimes, you may need to or wish to disable the navbar entirely. In that
    case, you can just specify this via the `themeConfig` option, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: The navbar display value is now set to false, and it will not therefore show
    up on the frontend.
  prefs: []
  type: TYPE_NORMAL
- en: 'However, the preceding option disables navbar globally. To disable it just
    for a specific page, you should preferably edit the front matter for the said
    page, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Previous and next links
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: By default, VuePress will add prev and next navigation links at the end of each
    page on your site. These links are automatically inferred on the basis of headers
    in your sidebar, and calculated from the active page.
  prefs: []
  type: TYPE_NORMAL
- en: 'However, you can override their appearance and selection as well. In the front
    matter of the active page, you just need to specify your choices. For example,
    for a custom selection of pages, you would add the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Optionally, you can also disable both of them:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Or, just disable one of them with the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Or:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: And so on.
  prefs: []
  type: TYPE_NORMAL
- en: That covers the part about navigation per se. Now, it is time to turn our attention
    toward the sidebar.
  prefs: []
  type: TYPE_NORMAL
- en: The sidebar
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: VuePress provides your site with a native sidebar that is built on the basis
    of your page structure and the header links therein.
  prefs: []
  type: TYPE_NORMAL
- en: 'To enable the sidebar for your site, you need to configure it using an array
    of links via the `themeConfig.sidebar` option. Note that the following code goes
    into your `config.js` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: In this sample, the links go to the `README.md` files by default. It means any
    link ending in `/` forward slash will go to the relevant `README.md` file.
  prefs: []
  type: TYPE_NORMAL
- en: Notice the optional link text? If you specify something here, then it will be
    shown as the link text in the sidebar. Alternatively, if you specify a title in
    the front matter for the page, then it will be shown in the sidebar as link text.
    Lastly, if no title is specified in either location, VuePress will automatically
    pick the link text from the first header of the concerned page.
  prefs: []
  type: TYPE_NORMAL
- en: Modifying header links in the sidebar
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You can play with header links in the sidebar of VuePress. A number of examples
    will be discussed here.
  prefs: []
  type: TYPE_NORMAL
- en: Displaying the header links of every page
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'By default, the sidebar will only show the header links for the active page.
    You can change it to show the header links of all pages straightaway. All you
    need to do is to set the concerned value to `true`, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: Nested header links
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The sidebar, as you are aware, will automatically display the links for headers
    in the current active page. Thus, as you browse through the pages, the relevant
    header links will be shown for easier navigation.
  prefs: []
  type: TYPE_NORMAL
- en: Such headers are nested under the active page, with a default depth of `1` (which
    means all `H2` tags are shown as headers, whereby the page title itself is `H1`).
  prefs: []
  type: TYPE_NORMAL
- en: You can modify this behavior to show deeper nesting of header links using the
    `themeConfig.sidebarDepth` option. For example, if the depth of nesting is changed
    to `0`, all header links are hidden and only `H1` values (page titles) are shown.
    Similarly, changing the depth to `2` will imply that all `H3` headings nested
    under `H2` header links are also shown, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can specify the relevant depth in the front matter. For instance, to show
    `H1` page titles, `H2` header links as well as `H3` and `H4` links, you will specify
    the depth to be `3`, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: Active header links
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As the user scrolls down the page, the sidebar's active links are automatically
    updated. This is the default behavior for virtually all static site generators
    that tend to work as single page apps. In this manner, there is no need to refresh
    or reload the full page at all.
  prefs: []
  type: TYPE_NORMAL
- en: 'However, you can disable this behavior should you need to, with the help of
    `themeConfig.activeHeaderLinks` option, as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: Note that this will mean that the active header link is not highlighted during
    browsing, and this may impact the overall UX of the site. However, it can also
    boost page speed slightly, as the corresponding scripts will no longer be loaded.
  prefs: []
  type: TYPE_NORMAL
- en: Organizing the sidebar
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You can choose to organize or divide your sidebar into multiple groups. This
    is accomplished with the help of objects.
  prefs: []
  type: TYPE_NORMAL
- en: 'Sidebar groups in VuePress are collapsible by default. However, you can specify
    the collapsible option to be false as well. The syntax for creating sidebar groups
    is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: This syntax is self-explanatory. We are just creating groups of links with the
    given titles, and then adding pages and links as children to each.
  prefs: []
  type: TYPE_NORMAL
- en: Using more than one sidebar
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You can, indeed, have multiple sidebars for different sections of your content.
  prefs: []
  type: TYPE_NORMAL
- en: However, for this to properly work, you first need to organize your content
    accordingly. A good idea is to organize your pages into directories and sub-directories.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, consider the following directory structure wherein the pages are
    organized as per directories:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, to create multiple sidebars, we need to add the following to our `config.js`
    file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: The preceding configuration will declare sidebars for each section. Note that
    it is highly recommended to declare the fallback option only at the end, because
    VuePress reads config for sidebars from top to bottom; that is, chronologically
    in order of declaration.
  prefs: []
  type: TYPE_NORMAL
- en: Adding sidebars to single pages
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You can generate custom mini-sidebars that contain header links for a given
    page only—generally the currently active page.
  prefs: []
  type: TYPE_NORMAL
- en: 'For this to happen, you first need to specify this in the front matter of the
    concerned page, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'You can repeat this globally, too, across all pages. In this case, you can
    modify your `config.js` file as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: How to disable the sidebar?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'If you wish to disable the sidebar on a particular page, you can specify this
    in the front matter. This will give a full-width appearance to the page, and is
    done as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: For GitHub users
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Considering the facts that VuePress is actively maintained on its own GitHub
    repository, and that a good number of Vue.js users tend to prefer GitHub, it is
    natural for VuePress to come loaded with some native support for GitHub.
  prefs: []
  type: TYPE_NORMAL
- en: Syncing to a GitHub repository
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You can easily add edit links and updates to and from your GitHub repository
    by simply specifying the repo name.
  prefs: []
  type: TYPE_NORMAL
- en: However, if you are not a GitHub user and rely on some other service, such as
    BitBucket or GitLab, you still have nothing to worry about. In this case, you
    can simply provide the full URL to your repository in the `config.js` file (as
    we will see in the upcoming syntax), and you will find that VuePress can pull
    the relevant info therefrom.
  prefs: []
  type: TYPE_NORMAL
- en: 'Thus, to sum it up:'
  prefs: []
  type: TYPE_NORMAL
- en: GitHub users only need to tell VuePress which repository to use
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: GitLab and BitBucket (or other Git-based platform users) need to specify the
    full URL to their repository
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'To enable this particular feature, the following piece of code is all you need.
    Pay specific attention to the comments in this code, as you will need to change
    it to your required values in order to make things work. Plus, depending on how
    you have organized your repository, you will probably not be needing most of this
    code (for instance, if your docs are not in a different repository, you can safely
    omit that line from the following code):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding code snippet, you will need to specify the address to your
    repository, as well as the the documentation repository (or whatever literature
    you are hosting on VuePress), if it's different. Then, you can tweak the appearance
    of the link and choose whether or not you want people to edit or contribute to
    your repository.
  prefs: []
  type: TYPE_NORMAL
- en: How to hide the Edit link on some pages?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Often, you want open source users to contribute to all the pages on your project
    or site, but there might be certain pages that you want to safeguard from edits.
    This is especially true in the case of pages pertaining to licensing, legal terms,
    copyright holders, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this case, you just need to use the given page''s front matter and turn
    off the `editLink` property, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: Timestamps from GitHub
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When working with GitHub repositories, it is natural for developers to showcase
    or display a *last updated on* timestamp, so as to keep track of progress and
    also to inform users that the said project is actually under active development.
  prefs: []
  type: TYPE_NORMAL
- en: This timestamp comes from the Git commit and is shown when the first commit
    is made for a given page. Following that, it is updated as and when a new commit
    is made.
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/9fe6c5a0-d25c-4394-bf3b-ff662faab38e.png)'
  prefs: []
  type: TYPE_IMG
- en: In VuePress, it is turned off by default. But you can choose to turn it on and
    show it as a Last Updated display.
  prefs: []
  type: TYPE_NORMAL
- en: You can use the `themeConfig.lastUpdated` option that will pull the timestamp
    of each page's last Git commit, and display it at the bottom of the page.
  prefs: []
  type: TYPE_NORMAL
- en: 'The syntax is as follows. Note that the timestamp is a string value:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: That's all that there is when working with GitHub repositories for your VuePress
    site.
  prefs: []
  type: TYPE_NORMAL
- en: Now, since we are talking theme development, we need to turn toward something
    that makes the web pages appear the way they are.
  prefs: []
  type: TYPE_NORMAL
- en: Yes, we are talking about Cascading Style Sheets, or CSS.
  prefs: []
  type: TYPE_NORMAL
- en: CSS in VuePress theme development
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: At this point, we are going to look at which custom CSS overrides and changes
    we can play with in VuePress.
  prefs: []
  type: TYPE_NORMAL
- en: Note that you will need a working knowledge of CSS in order to execute any of
    the tweaks suggested in this section.
  prefs: []
  type: TYPE_NORMAL
- en: Custom classes for pages
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: More often than not, you may need to add custom CSS for a specific page on your
    VuePress site. In such cases, what you need is to add a custom class that is unique
    to the given page.
  prefs: []
  type: TYPE_NORMAL
- en: By now, you may already be aware that page-specific content needs to be declared
    with the YAML front matter for that particular page.
  prefs: []
  type: TYPE_NORMAL
- en: 'Thus, we will first need to add the unique page class to the theme container
    `div` in the front matter:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'Thereafter, we can safely write custom CSS for that particular page only, as
    follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'But the big question is: where do we add the theme containers and write our
    custom CSS? Surely, not in the Markdown files.'
  prefs: []
  type: TYPE_NORMAL
- en: CSS override file structure
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The first step is to create an `override.styl` file in your `.vuepress/` directory.
    The general idea here is to add sitewide constant overrides here, such as color,
    textcolor, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, to make the entire text color black, here is what you can add:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: You can write in normal CSS syntax. But if you so desire, using Stylus is a
    good idea too.
  prefs: []
  type: TYPE_NORMAL
- en: Stylus is a CSS preprocessor that is famous for making things easier to read
    and write when working with CSS. It supports multiple iterations, nested operators,
    and also does away with the need for colons, braces, and other syntactical decorations.
    Learn more about Stylus at [http://stylus-lang.com/](http://stylus-lang.com/).
  prefs: []
  type: TYPE_NORMAL
- en: However, the `override.styl` file is only for Stylus constants. What about your
    own extra styles in CSS?
  prefs: []
  type: TYPE_NORMAL
- en: For that, you need to add another `style.styl` file in `.vuepress/` directory.
    In this file, you can write any CSS style that you wish to. Once again, you can
    use Stylus or normal CSS syntax.
  prefs: []
  type: TYPE_NORMAL
- en: If you are not very fond of Stylus, bear in mind that you can use other CSS
    preprocessors too, such as LESS or SASS. Remember the build pipeline config values
    that you learned in [Chapter 3](490b74d6-1bb0-4194-9173-c04c98e2b1e9.xhtml), *VuePress
    Development – Preliminary Steps*? You just need to use the correct one for the
    relevant loaders, depending on the CSS preprocessor of your choice.
  prefs: []
  type: TYPE_NORMAL
- en: At any point, you can turn to the list of config values (build pipeline) and
    refer to these; this is why this book covered it well in advance in [Chapter 3](490b74d6-1bb0-4194-9173-c04c98e2b1e9.xhtml), *VuePress
    Development – Preliminary Steps*.
  prefs: []
  type: TYPE_NORMAL
- en: Backwards compatibility
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This info is not relevant anymore for newer versions of VuePress. However,
    if you are using an older version of VuePress, you might even be able to use just
    the `override.styl` file and not the second `style.styl` file. Consider the following
    example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: While this works in practice for older versions, even then, it is double the
    processing. This is because Stylus requires that all Stylus constants override
    be compiled first, and all user-specified extra CSS be compiled later.
  prefs: []
  type: TYPE_NORMAL
- en: If you were to write your styles in the `override.styl` file, it would mean
    that the same file would be duplicated multiple times after being imported once.
    To avoid this, starting with version 0.12.0 and higher, VuePress has split CSS
    processing into `override.styl` and `style.styl` files, as described previously.
    This is the correct way of adding custom CSS styles.
  prefs: []
  type: TYPE_NORMAL
- en: Learn more about how older VuePress versions worked with the same file in this
    GitHub issue, available at [https://github.com/vuejs/vuepress/issues/637](https://github.com/vuejs/vuepress/issues/637).
  prefs: []
  type: TYPE_NORMAL
- en: Ejecting the theme
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Sometimes, creating a custom theme from scratch is not required. The reasons
    for this are plenty:'
  prefs: []
  type: TYPE_NORMAL
- en: It takes a lot of time, especially on a platform like VuePress, which is still
    in its infancy
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Coding a custom theme requires extensive knowledge of JavaScript and can potentially
    defeat the very purpose of using a static site generator, where the goal is to
    save time and effort
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Maintaining a custom theme is not always easy in terms of bug fixes, regular
    updates, and so on
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: With that said, you may not be fond of using the default theme either, as it
    does not help your site stand out from the crowd. In such cases, you can choose
    to use custom CSS styles and other such measures, as described previously, to
    give your site a unique look even when using the default theme.
  prefs: []
  type: TYPE_NORMAL
- en: But what if you wish to make grand changes to your default theme? Once you update
    VuePress, any changes that you make to the source code of the default theme will
    be lost.
  prefs: []
  type: TYPE_NORMAL
- en: In these cases, you can make a copy of the default theme, and then edit the
    copy to make changes as if it were a custom theme. This is called ejecting the
    theme.
  prefs: []
  type: TYPE_NORMAL
- en: 'To eject your theme, you need to pass the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: This command will pull the default theme source code and copy it into the `.vuepress/theme`
    sub-directory. This particular directory will act as new home for your custom
    theme, and you can make changes therein.
  prefs: []
  type: TYPE_NORMAL
- en: Note that once you eject your theme, you will be responsible for its maintenance
    and bug fixes. You can still update VuePress as and when required, but you will
    not get bug fixes or feature updates related to the default theme anymore.
  prefs: []
  type: TYPE_NORMAL
- en: Make sure you eject your VuePress theme only when you know what you're doing
    and you have a sound knowledge of Vue.js at large. This, of course, is beyond
    the scope of this quick start guide.
  prefs: []
  type: TYPE_NORMAL
- en: But once you have, indeed, ejected your theme, it is time to turn toward custom
    theme development!
  prefs: []
  type: TYPE_NORMAL
- en: Custom theme development in VuePress
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: For creating custom VuePress themes, Vue single file components are used. This
    means you will need functional knowledge of Vue.js in order to create a VuePress
    theme. Perchance you find yourself lacking in terms of time or skills for this,
    it is advisable to customize the default VuePress theme instead, as discussed
    earlier in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: With that said, the first step to create a custom VuePress theme is to create
    a `/theme/` directory in your VuePress `root` folder.
  prefs: []
  type: TYPE_NORMAL
- en: Then, in that `.vuepress/theme/` directory, create a `layout.vue` file.
  prefs: []
  type: TYPE_NORMAL
- en: Thereafter, you can proceed with custom theme creation pretty much as you would
    for a custom Vue.js application. The layout options and settings are entirely
    up to you.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can also choose to use a custom VuePress theme from an npm dependency.
    In this case, you will need to make use of the theme config option in your `config.js`
    file. Simply add the following code to your `.vuepress/config.js` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: Note that you will need to declare and publish the theme on npm beforehand in
    order to use it as a dependency.
  prefs: []
  type: TYPE_NORMAL
- en: Customizing the default theme
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The default VuePress theme that we discussed earlier can be customized to make
    a custom theme. However, in this case, you will need to eject the default theme,
    as mentioned previously in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Following that, you can start tweaking the custom theme yourself—note that any
    future updates or bug fixes for the default theme will not be automatically copied
    over once you eject the theme. You can, however, update VuePress as usual.
  prefs: []
  type: TYPE_NORMAL
- en: Working with metadata
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Every VuePress theme needs metadata to display site details properly, and as
    we have already learned, this is best done using the layout component.
  prefs: []
  type: TYPE_NORMAL
- en: At this stage, you should familiarize yourself with two Vue.js properties, namely,
    `$page` and `$site`. Both of these are injected into every component.
  prefs: []
  type: TYPE_NORMAL
- en: Thus, each time the layout component is invoked, the `$site` and `$page` properties
    are invoked too. It is, therefore, a logical idea to place your site's metadata
    to be exposed as `this.$site` and `this.$page`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s look at `$site` first. Here is a sample value:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: The preceding syntax shows very clearly that `$site` holds value pertaining
    to sitewide metadata.
  prefs: []
  type: TYPE_NORMAL
- en: 'And for `$page`, we have the following syntax:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: As can be seen, `$page` holds page-specific metadata.
  prefs: []
  type: TYPE_NORMAL
- en: For $site values, most of the details are copied from the `.vuepress/config.js`
    file. But the pages value contains an array that comprises of metadata objects
    for each page. These metadata objects are generally lifted from the front matter
    of the concerned pages, or inferred, such as in the case of the page title, which
    can be specified in the front matter or taken from the header tags.
  prefs: []
  type: TYPE_NORMAL
- en: The $page values can often be used to construct customized behavior for themes.
    You can order the pages as per your requirements, too. This is fairly similar
    to customizing the order of a Vue.js application.
  prefs: []
  type: TYPE_NORMAL
- en: Other possible enhancements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The following are some other potential pointers that you can make use of when
    customizing your VuePress theme.
  prefs: []
  type: TYPE_NORMAL
- en: Note that you will need working knowledge of Vue.js workflow in order to implement
    most of these enhancements.
  prefs: []
  type: TYPE_NORMAL
- en: Application-level enhancements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the root directory of your theme, you can create an `enhanceApp.js` file
    to work with application-level enhancements.
  prefs: []
  type: TYPE_NORMAL
- en: This particular file will export a hook function. Now, in this function, you
    should receive an object value that will contain application-specific details
    or data.
  prefs: []
  type: TYPE_NORMAL
- en: You can then very easily make use of the hook to register custom plugins, add
    extensions, register global components, customize other features, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: 'The general syntax for this hook function is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: Sound confusing? All of this is useful only if you are an experienced Vue.js
    developer and are looking to build something customized with VuePress. If you
    just want to get a simple site up and running, you can safely ignore these details.
  prefs: []
  type: TYPE_NORMAL
- en: These are all the details that you would need to get started with custom VuePress
    theme development. Once again, a theme in VuePress requires decent knowledge of
    Vue.js, and it is better to experiment a little before entering into production-level
    development.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This marks the end of this particular chapter related to VuePress themes.
  prefs: []
  type: TYPE_NORMAL
- en: We have covered quite a lot of ground in this chapter. We now have a very good
    understanding of what the default VuePress theme is, how it can be tweaked, how
    we can change the appearance of the header links, the navbar, the sidebar, and
    other things.
  prefs: []
  type: TYPE_NORMAL
- en: Furthermore, for cases when the aim is to build a documentation site based on
    a GitHub project, we have also learned how to integrate the site with our GitHub
    repository. Beyond that, we learned how to add CSS styles to our theme to change
    the appearance of our site.
  prefs: []
  type: TYPE_NORMAL
- en: Not only that, we now know how to eject the VuePress default theme and start
    creating a custom theme of our own, though, of course, this will require Vue.js
    application knowledge too.
  prefs: []
  type: TYPE_NORMAL
- en: Currently, you have an active site on localhost that you built in [Chapter 4](553abde8-768a-4320-b9bd-01edcbe2c4d9.xhtml),
    *Creating a Site in VuePress*. It is a good idea to experiment with theme changes
    and tweaks on that very site. You have all the syntax and code samples in this
    chapter, but for the sake of clarity, I have refrained from making them use case-particular.
    Thus, you can modify these agnostic code samples to suit your production and website-specific
    needs.
  prefs: []
  type: TYPE_NORMAL
- en: Combined with our progress so far, you should now be able to install VuePress,
    tweak the `config.js` file to modify theme and other items, as well as create
    content in Markdown files and upload these.
  prefs: []
  type: TYPE_NORMAL
- en: All that is left is to get the website live for the world to see!
  prefs: []
  type: TYPE_NORMAL
- en: But before that, we need to cover another step of learning—localization and
    internationalization. Therein, we will talk about support for multiple languages
    in VuePress and how and when we can make use of this. The next chapter will deal
    with this, and following that, we will turn our attention toward getting our site
    live on the internet.
  prefs: []
  type: TYPE_NORMAL
