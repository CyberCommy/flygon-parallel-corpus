- en: Moving Laterally and Escalating Your Privileges
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that you have exploited the system, you may be wondering what's next. Post-exploitation
    is the next step and is where we want to gain further access to targets within
    the internal network. In this chapter, we will look at how we can obtain higher
    privileges than what we currently have. This might entail further sniffing across
    the network, along with performing lateral movement techniques.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, you will learn about different post-exploitation techniques
    and why post-exploitation forms an integral part of a penetration test. You will
    learn how to build an AD lab that you can use to test your post-exploitation skills
    against. By using the tools that are available, you will understand their purposes
    and how they can be used in a penetration test so that you can ensure you have
    access to the exploited system.
  prefs: []
  type: TYPE_NORMAL
- en: 'As you progress through this chapter, you will learn about the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Discovering post-exploitation techniques
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Preparing your environment
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Post-exploitation tools
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Performing post-exploitation attacks
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To follow along with the examples and instructions in this chapter, please
    ensure that you have the following technical requirements:'
  prefs: []
  type: TYPE_NORMAL
- en: Kali Linux 2019.1
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Metasploitable 3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Windows Server 2016 (Evaluation)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Windows 10 Enterprise (Evaluation)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Discovering post-exploitation techniques
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When performing post-exploitation, there are a number of techniques that you
    will need to be aware of. These techniques are what you will leverage when you
    are engaged in a penetration test. For example, consider a scenario where you
    might compromise a standard user who doesn't have access to many resources on
    a network. Your goal (as defined in the scope of the penetration test) is to obtain
    domain dominance and create a high privileged user account. How would you progress?
    This is where understanding the different techniques of post-exploitation comes
    in, as you will be able to see gaps that can be leveraged to bring you closer
    to your goal.
  prefs: []
  type: TYPE_NORMAL
- en: We will cover some of these techniques in this section.
  prefs: []
  type: TYPE_NORMAL
- en: Lateral movement
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Once you have compromised the initial host on the target network, you will need
    to start moving laterally within the environment. Lateral movement is the process
    of moving from one host to another in search of higher privileged accounts, pivot
    points, sensitive data, or simply reconnaissance. During this phase, it is a common
    practice to use built-in tools in order to avoid detection. Tools such as PowerShell
    or WMI are usually whitelisted and allowed on endpoints within an environment.
  prefs: []
  type: TYPE_NORMAL
- en: Credential harvesting is usually a main focus point during lateral movement.
    It begins with the host that has been compromised and persists as you move through
    the network. Harvesting credentials can provide you with escalation paths if you
    use techniques such as key logging, memory dumps, or even capturing files that
    store credentials. Most organizations underestimate the built-in local administrator
    account. This account can be used to jump around to different endpoints.
  prefs: []
  type: TYPE_NORMAL
- en: Another way you can move around within a network is by exploiting unpatched
    machines. Some organizations don't use an isolated environment when provisioning
    new workstations for its employees. While the OS is busy updating, you have a
    small window where patches are missing, and this can be exploited.
  prefs: []
  type: TYPE_NORMAL
- en: Privilege escalation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Privilege escalation is the process of looking for ways to obtain higher privileged
    access than what you currently have. For example, if you have compromised a normal
    user account, chances are that account doesn't have access to a domain controller.
    Therefore, you will need to look for an account that does have access. A dead
    giveaway is accounts inside the `domain administrators` group.
  prefs: []
  type: TYPE_NORMAL
- en: In order to find that high privileged account, you will need to work your way
    through computers using lateral movement, as discussed in the previous section.
    You will work through files that might contain credentials, misconfigured services,
    excessive user rights, or even security measures that have been made insecure
    deliberately.
  prefs: []
  type: TYPE_NORMAL
- en: Pivoting
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Corporate networks will often have logical boundaries that you need to traverse
    in a penetration test. A logical network boundary is a logical separation within
    the network, which is usually done by segmenting the network into different subnets
    and controlling access to the subnets via routers, switches, or even firewalls.
    For example, a network will contain a trusted segment, server segment, **demilitarized
    segment** (**DMZ**), and an external segment. The trusted zone will be the internal
    network, which is the most trusted network and will probably not have many restrictions
    within it. The server segment will be a subnet that has various servers within
    it. The demilitarized segment holds external facing servers, and the external
    segment will be an untrusted network, such as the internet.
  prefs: []
  type: TYPE_NORMAL
- en: Pivoting is the process of accessing resources that you would not have access
    to under normal circumstances. If we consider the various segments we discussed
    in the previous paragraph, you might have gained initial access to the trusted
    segment. You are now looking at accessing a specific server in the server segment,
    but this is not allowed from the general trusted network—it is only allowed from
    a jump host, which will have access to both the server and trusted segment. Gaining
    access to that jump host will give you a pivot point to the server segment.
  prefs: []
  type: TYPE_NORMAL
- en: Preparing your environment
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To demonstrate the various post-exploitation attacks in this chapter, I have
    built a basic **Active Directory** (**AD**) lab. You can build the same one that
    I built by using the following diagram:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/0559212b-d04b-408a-a512-24375715a065.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 1: Lab diagram'
  prefs: []
  type: TYPE_NORMAL
- en: 'Windows 10 Enterprise Evaluation can be downloaded from the following URL:
    [https://www.microsoft.com/en-us/evalcenter/evaluate-windows-10-enterprise](https://www.microsoft.com/en-us/evalcenter/evaluate-windows-10-enterprise).'
  prefs: []
  type: TYPE_NORMAL
- en: 'Windows Server 2016 Evaluation can be downloaded from the following URL: [https://www.microsoft.com/en-us/evalcenter/evaluate-windows-server-2016](https://www.microsoft.com/en-us/evalcenter/evaluate-windows-server-2016).'
  prefs: []
  type: TYPE_NORMAL
- en: 'The setup steps for creating a domain on the server operating system is as
    follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Once your server is installed, log in using the local administrator account.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Configure a static IP address on the Ethernet adapter. If you are building a
    virtual machine, ensure that you set your network adapter to be a private network
    on the virtualization software.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on start and search for `PowerShell`. Then, right-click on PowerShell
    and select Run as administrator.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Once PowerShell is open, enter the `Install-WindowsFeatures -Name AD-Domain-Services
    -IncludeManagementTools` command. Once the feature has been installed, you will
    receive a message, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/d08faddb-2203-43c5-a2cc-8a7c1c93042d.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 2: Installing AD Domain Services'
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, we need to set up the AD forest configuration. Enter the `Install-ADDSForest
    -DomainName "pentest.lab" -InstallDNS` command. You will be prompted to enter
    a recovery password; this can be anything you desire. Use `A` to say yes to all
    of the questions:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/b8abcd85-79e4-4621-acd6-b339fd4258cc.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 3: Installing the AD forest'
  prefs: []
  type: TYPE_NORMAL
- en: During this time, the installation will install a number of components. After
    a while, the server will reboot. Once rebooted, you will be able to log in with
    the administrator username and password you defined when you first installed the
    server.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'You can confirm that the domain has been successfully set up by issuing the
    `Get-ADDomain` command in an administrative PowerShell window:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/a8847d33-0f1a-45c2-bf71-dc7d6de7fb12.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 4: Verifying Active Directory information'
  prefs: []
  type: TYPE_NORMAL
- en: 'If you prefer to use the graphical interface, there is a great blog located
    at the following link which tells you all about how to go about this: [https://blogs.technet.microsoft.com/canitpro/2017/02/22/step-by-step-setting-up-active-directory-in-windows-server-2016/](https://blogs.technet.microsoft.com/canitpro/2017/02/22/step-by-step-setting-up-active-directory-in-windows-server-2016/).'
  prefs: []
  type: TYPE_NORMAL
- en: 'There are some additional tasks that need to be completed, and you can use
    the PowerShell commands defined here to do so. Ensure that you are logged in to
    the domain controller using a domain administrator account and then perform these
    additional steps using PowerShell:'
  prefs: []
  type: TYPE_NORMAL
- en: 'The first thing we will do is create a new organization unit within AD. You
    can call this anything you want. In my environment, I have called this `IT`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'The next step is to create the user accounts. You can repeat this step to create
    the `helpdeskagent` and `serveradmin` accounts by changing the names marked in
    **bold**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, we will create a security group. `helpdeskagent` will be added to this
    group:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, we will add the various users to their respective security groups:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Once the domain controller has been built, you can join your Metasploitable
    3 and Windows 10 Enterprise virtual machines to the domain. Ensure that you set
    up a static IP and DNS, as per the preceding diagram.
  prefs: []
  type: TYPE_NORMAL
- en: 'To simulate the attacks that we''ll be covering later, I have configured the
    following:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Windows 10 Enterprise virtual machine**: Here, the logged on user will be `domainadmin`.
    I have configured the `Helpdesk Staff`groupas a local administrator on the PC.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Metasploitable 3**: Here, I have logged in with both the `serveradmin`and `helpdeskagent`accounts.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Post-exploitation tools
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Post-exploitation forms an important part of a penetration test. There are a
    number of tools that can be leverage for post-exploitation. Understanding when
    and how to use these tools will help you to conduct successful post-exploitation
    activities.
  prefs: []
  type: TYPE_NORMAL
- en: We will discuss a few of these tools in this section.
  prefs: []
  type: TYPE_NORMAL
- en: Metasploit Framework
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Metasploit Framework really has a lot of functionality, and we have used it
    extensively throughout this book. We focused mostly on the exploitation features
    of the framework. Now, we will look at the post-exploitation features. Metasploit
    provides a number of modules that can be used against a variety of systems.
  prefs: []
  type: TYPE_NORMAL
- en: To perform these attacks in your lab, I have used the Metasploitable 3 (Windows)
    virtual machine as the target. The exploit I have used is `windows/smb/ms17_010_eternalblue`,
    which we covered in [Chapter 5](8c5306b6-5c1e-4554-a839-5b2422286120.xhtml), *Diving
    into the Metasploit Framework*.
  prefs: []
  type: TYPE_NORMAL
- en: Let's look at some of the post-exploitation features that are available and
    what they can be used for.
  prefs: []
  type: TYPE_NORMAL
- en: Metasploit post modules
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Within the Metasploit Framework, there are a number of post modules that span
    across different operating systems. These can be viewed by typing in `use post`,
    followed by pressing the *Tab* key twice. Metasploit will prompt you to display
    all of the possibilities. At the time of writing, there are 328 `post` modules
    that can be used:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/53a4e7e0-57ec-48bc-b309-b89d5f3a8bce.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 5: Viewing post modules in Metasploit'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s look at some of the modules that you can use. For example, the `post/windows/gather/enum_ad_users`
    and `post/windows/gather/enum_ad_groups` modules would provide you with some insight
    into the users and groups that exist within the AD domain:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/6173fa01-d8a4-4594-9014-c3e4f4705f07.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 6: Enumerating AD groups'
  prefs: []
  type: TYPE_NORMAL
- en: 'On the target system that you have exploited, you will need to identify what
    is currently installed. This will help in determining security controls such as
    host intrusion detection or antivirus applications. By using `post/windows/gather/enum_applications`,
    you will be able to see a list of installed applications:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/fb49c035-8b44-48b6-885b-e96d5d48abef.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 7: Listing currently installed applications'
  prefs: []
  type: TYPE_NORMAL
- en: Let's look at options that exist within Meterpreter. Recall from [Chapter 5](8c5306b6-5c1e-4554-a839-5b2422286120.xhtml), *Diving
    into the Metasploit Framework*, that using a Meterpreter shell provides a lot
    more functionality.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once you have compromised a system, you may want to migrate your Meterpreter
    session to another process in order to avoid detection or gain persistence. Process
    migration can be done by using the `run post/windows/manage/migrate` command from
    a Meterpreter session:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/b7ab3487-8c6b-485d-82dc-1cbd8764dbd0.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 8: Meterpreter process migration'
  prefs: []
  type: TYPE_NORMAL
- en: 'Meterpreter enables the use of additional extension categories such as `powershell` and `Mimikatz`.
    These can be loaded using the `load` command from a Meterpreter shell:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/e09918b6-dcbb-4431-959c-3a5a9b898ecd.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 9: Loading meterpreter modules'
  prefs: []
  type: TYPE_NORMAL
- en: Performing privilege escalation to a local system using Meterpreter is possible
    by using the `getsystem` command.
  prefs: []
  type: TYPE_NORMAL
- en: 'This command tells Meterpreter to use any available technique to obtain local
    system privileges. These techniques are **Named Pipe Impersonation** and **Token
    Elevation**:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/28d746e5-4e45-421c-882e-f9b680346bff.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 10: Escalating to system privileges using Meterpreter'
  prefs: []
  type: TYPE_NORMAL
- en: In the upcoming section of this chapter (*Performing post-exploitation attacks),*
    we will look at how we can use some of Meterpreter's features to perform post-exploitation
    activities.
  prefs: []
  type: TYPE_NORMAL
- en: Empire
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Empire is another great tool that can be used for post-exploitation. It is flexible
    and leverages secure communications. It provides you with the ability to run PowerShell
    agents without the need for `powershell.exe`. The post-exploitation modules range
    from keyloggers to credential extraction tools such as Mimikatz.
  prefs: []
  type: TYPE_NORMAL
- en: 'Empire can be installed by cloning the repository. You can do this by using
    the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Once the repository is cloned, you can install Empire using the `./install.sh` command
    within its directory. Once the installation is completed, you can run Empire using
    the `./empire` command.
  prefs: []
  type: TYPE_NORMAL
- en: 'When Empire loads, you will be presented with the main screen, which shows
    the modules that were loaded, listeners, and active agents:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/6c50e219-521d-4acd-918d-14f32e761c3c.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 11: Empire main screen'
  prefs: []
  type: TYPE_NORMAL
- en: Before you can have an active agent, we need to create a listener. This is done
    using the `listeners` command and then defining the type of listener we want to
    create using the `uselistener [type]` command. There are various types, such as
    `http`, `meterpreter` and `redirector`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s set up a simple `http` listener using the `uselistener http` command.
    Once you selected the `listeners` , you can check the available options using
    the `info` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/488d8240-2321-49f1-b110-cb9b9e059cf1.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 12: Viewing the listener options'
  prefs: []
  type: TYPE_NORMAL
- en: Take note of the fields that are `Required`. By default, the only thing you
    will need to provide is a name for the listener. This can be done using the `set
    Name [name]` command. In my example, I have given my listener a name, that is, `Metasploitable3`.
    Once you have defined a name, enter the `execute` command to start the listener.
  prefs: []
  type: TYPE_NORMAL
- en: Empire commands are case-sensitive. Using the `set name` command will not work—you
    must use `set Name`.
  prefs: []
  type: TYPE_NORMAL
- en: Now that you have set up the listener, you will need to link a stager to the
    listener. This can be done by going back to the listeners configuration using
    the `back` command. To define a stager, you will use the `usestager [stager]` command.
    You can view a full list of stagers by pressing the *Tab* button twice.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will create a simple windows launcher stager by using the `usestager windows/launcher_bat` command.
    This will create a batch file that can be run on the target machine and store
    it in a temporary location:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/d62b743b-5baf-43ce-b8ac-f7423a513b1e.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 13: Creating a stager using Empire'
  prefs: []
  type: TYPE_NORMAL
- en: 'Once the stager has been created, all you need to do is run the file on the
    target system. Once you run the stager, it will connect back to Empire and become
    an agent:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/0e004694-ce17-43e2-a39e-26437ad65d2b.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 14: Active agent in Empire'
  prefs: []
  type: TYPE_NORMAL
- en: To interact with the agent, we use the `interact [agent name]` command.
  prefs: []
  type: TYPE_NORMAL
- en: 'Using the `sysinfo` command, we can confirm that we have administrative integrity.
    This is defined by the value of `1` in the `High Integrity` variable:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/8c0c7818-9095-440c-9e08-cbeb715e93db.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 15: Obtaining the remote system information'
  prefs: []
  type: TYPE_NORMAL
- en: Once you have access to the agent, you can perform post-exploitation activities
    as you please.
  prefs: []
  type: TYPE_NORMAL
- en: Responder
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The responder is a tool that can be used to quickly gain credentials. It is
    built into Kali Linux and it leverages **LLMNR**, **NBT-NS**, and **MDNS** poisoners,
    which are simple to use against vulnerable networks. The Responder is successful
    purely because network components such as **ARP** (**Address Resolution Protocol**),
    **DHCP** (**Dynamic Host Configuration Protocol**), and **DNS** (**Domain Name
    System**) are not configured securely.
  prefs: []
  type: TYPE_NORMAL
- en: '**Link Local Multicast Name Resolution** (**LLMNR**) and **NetBios-Name Service**
    (**NBT-NS**) are components that are used within Windows operating systems for
    communication and name resolution; they attempt to resolve names when DNS fails.
    MDNS stands for Microsoft DNS.'
  prefs: []
  type: TYPE_NORMAL
- en: The basic syntax for the Responder is `responder -I [interface]`.
  prefs: []
  type: TYPE_NORMAL
- en: 'The Responder has a number of poisoning servers that are available. These are
    configurable via the configuration file that exists in `/usr/share/responder/Responder.conf`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/409213f6-8e1b-481b-8c26-111142d1b110.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 16: Responder poisoning servers'
  prefs: []
  type: TYPE_NORMAL
- en: To understand how the Responder works, let's consider the following scenario.
  prefs: []
  type: TYPE_NORMAL
- en: A user is directed to a non-existent share either using social engineering,
    opening a malicious document that forces the computer to try to access a non-existent
    share, or by making a typo while trying to access a legitimate share.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s follow these steps to see this in action:'
  prefs: []
  type: TYPE_NORMAL
- en: 'The PC will attempt to connect to the non-existent file share by performing
    name resolution to its configured DNS server:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/5a53f53c-5e91-4896-838b-d36dcfab97d0.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 17: User attempting to access a non-existent share'
  prefs: []
  type: TYPE_NORMAL
- en: The DNS server doesn't have the record that matches what the PC is attempting
    to access, so it will tell the PC that the record does not exist. This is where
    LLMNR and NetBIOS-NS queries takes over.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The PC will then broadcast using LLMNR and NetBIOS-NS, which will be intercepted
    by the attacker running the Responder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The Responder will answer the query and trick the PC into believing it has the
    share. It will then proceed to ask the PC to encrypt a challenge request with
    the user's password hash. Once the hash challenge is completed, the Responder
    will drop the request with an error.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The Responder has now captured the hash and displayed it on the console:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/531367db-91aa-4be9-b042-1b72c5608ad7.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 18: NTLMv2 hash captured'
  prefs: []
  type: TYPE_NORMAL
- en: 'Once the hash is captured, it can be cracked using a tool such as `hashcat`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/3198ad3b-8c52-4c36-9356-10352b814729.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 19: Using hashcat to crack the NLTMv2 hash'
  prefs: []
  type: TYPE_NORMAL
- en: The Responder has the ability to create a rogue proxy server, which will answer
    **Web Proxy Auto Discovery** (**WPAD**) requests. This is a protocol and is used
    by clients to download a configuration file that will define proxy settings. With
    the rogue proxy, the Responder is able to force authentication, hence tricking
    the user into entering their credentials, which can be captured.
  prefs: []
  type: TYPE_NORMAL
- en: Although the Responder is not a post-exploitation tool per se, understanding
    how it works can be helpful in post-exploitation activities if you find yourself
    stuck. There is no harm in leaving it running while performing other post-exploitation
    activities, as chances are that you will collect a good number of hashes, especially
    in big environments where users are prone to make a typo when trying to access
    a share.
  prefs: []
  type: TYPE_NORMAL
- en: Mimikatz
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Mimikatz is a tool that is well-known in the community. It is an open source
    application that allows you to interact with credentials such as NTLM hashes or
    Kerberos tickets. The tool is constantly maintained and its attack vectors are
    kept up to date. The repository for Mimikatz is located here: [https://github.com/gentilkiwi/mimikatz](https://github.com/gentilkiwi/mimikatz).'
  prefs: []
  type: TYPE_NORMAL
- en: Both attackers and penetration testers will commonly use Mimikatz to steal credentials
    and perform activities such as privilege escalation. With the advancements made
    in antivirus technologies, this tool is often detected by antivirus products.
    However, there are a number of articles available on the internet on how to evade
    detection when using Mimikatz.
  prefs: []
  type: TYPE_NORMAL
- en: 'Some of the main features of Mimikatz are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Pass-the-Hash** (**PtH**): Within Windows, password data is stored in a hash
    format (NTLM). Mimikatz allows you to leverage this hash and pass it to your target,
    hence removing the need to crack the hash. By passing this hash, you can obtain
    access to the target system and have full privileges of the account that belongs
    to the hash.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Pass-the-Ticket**: This attack involves authenticating to a system using
    Kerberos tickets; there is no need to have the account''s password. It works by
    capturing the Kerberos tickets of a valid account. Capturing the **Ticket Granting
    Tticket** (**TGT**) can be used to request service tickets from the **Ticket Granting
    Service **(**TGS**) to access any resource that the account has access to.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Overpass-the-Hash** (**Pass-the-Key**): This attack is a combination of both
    pass-the-hash and pass-the-ticket attacks. By using a valid NTLM hash, you will
    be able to obtain a valid user''s Kerberos ticket request.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Kerberos Silver Ticket**: A silver ticket attack entails creating a forget
    service ticket. These tickets can provide access to a particular service. For
    example, creating a silver ticket of a SQL service account allows you to access
    a SQL service on a particular host. When performing a silver ticket account, there
    is no communication required with the domain controller. This allows you to avoid
    detection.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Kerberos Golden Ticket:** This attack involves an account known as `krbtgt`.
    This account is used to encrypt and sign all Kerberos tickets within an AD domain.
    The golden ticket attack involves stealing the `krbtgt` hash; once this is stolen,
    you are able to create and sign your own Kerberos tickets. This ultimately gives
    you full access to anything within the domain, and the ticket does not expire.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Mimikatz is leveraged in a number of post-exploitation tools, such as Empire,
    Metasploit Framework, and Powersploit.
  prefs: []
  type: TYPE_NORMAL
- en: Performing post-exploitation attacks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let's perform some post-exploitation attacks in the lab environment. We will
    use the Metasploitable 3 virtual machine as an entry point, since we know there
    are vulnerabilities that exist.
  prefs: []
  type: TYPE_NORMAL
- en: Using the `windows/smb/ms17_010_eternalblue` exploit, we will spawn a Meterpreter
    session. Once we have the session established, we will escalate to system privileges
    using the `getsystem` command.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once we have a Meterpreter session, we will confirm the current system''s information
    using the `sysinfo` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/66418363-a9f2-4af8-b302-10e65d153faa.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 20: Confirming current system information'
  prefs: []
  type: TYPE_NORMAL
- en: 'Here, we have some interesting information: we can see that there are three
    users who are logged in. Let''s proceed and perform credential harvesting.'
  prefs: []
  type: TYPE_NORMAL
- en: Performing credential harvesting
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now that we know there are three users logged in, we will attempt to extract
    any credentials. To do this, we will load the `kiwi` extension within Meterpreter
    using the `load kiwi` command*. *Once the extension has loaded, we will dump the
    current logged on user credentials using the `kiwi_cmd sekurlsa::logonpasswords` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/5befff3b-5fd7-463e-85ad-992220e0735c.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 21: Loading the kiwi extension'
  prefs: []
  type: TYPE_NORMAL
- en: When we use the `kiwi_cmd sekurlsa::logonpasswords` command, we are telling
    Meterpreter to use a command that we will define by entering `kiwi_cmd`, and then
    we define the command we want to use within Mimikatz. The `sekurlsa::logonpasswords` command
    is responsible for extracting passwords, keys, pin codes, and tickets from the **Local
    Security Authority Subsystem Service** (**lsass**) within memory.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once the command runs, there will be a lot of output. Take note of the output
    in the following screenshot. Here, we have some valuable information. We can see
    that there is a user account called `serveradmin`who is logged in. We have the
    user account''s LM and NTLM hash, and since the domain is still using `wdigest`,
    we have the cleartext password of `P@ssw0rd!@#$%`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/46097532-b391-4ee6-a257-a603f09b7254.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 22: ServerAdmin credentials dumped with Mimikatz'
  prefs: []
  type: TYPE_NORMAL
- en: 'Looking deeper into the output, we have another interesting credential, `helpdeskagent`.
    Here, we also have the NTLM hash and cleartext password:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/66aeb08c-2a84-42a1-a655-d702d929b5cb.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 23: helpdeskagent credentials dumped with Mimikatz'
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, we have two interesting accounts that we have harvested for use. Before
    moving on to lateral movement, we will upload two files using Meterpreter, using
    the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: View the current working directory by using the `pwd` command.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You can either upload the files here or create a new folder. I have created
    a new folder called `tools`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Ensure that you have downloaded the Windows version of `mimikatz.exe` from
    the GitHub repository that we mentioned in the *Mimikatz* section. Upload the
    file using the `upload` command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/405cdb1a-6268-4490-956f-7c67578ff0bc.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 24: Uploading mimikatz.exe'
  prefs: []
  type: TYPE_NORMAL
- en: The next file that will be uploaded is `PSexec.exe`*.* `PSexec` is used to perform
    remote command execution and can be downloaded from [https://docs.microsoft.com/en-us/sysinternals/downloads/psexec](https://docs.microsoft.com/en-us/sysinternals/downloads/psexec).
  prefs: []
  type: TYPE_NORMAL
- en: In a real penetration test, you would not simply upload files, especially Mimikatz
    and `PSexec`, as they would probably be deleted by the local antivirus or logged
    and the IT staff could be alerted to your presence on the machine. In the case
    of this demo, there is no antivirus or logging software installed on Metasploitable
    3.
  prefs: []
  type: TYPE_NORMAL
- en: 'Lastly, we will create a local user account that we can use to access the server.
    We can do this from Windows Command Prompt, which can be accessed by using the
    `shell` command in Meterpreter. Once we have shell access, we will use the following
    two commands to create a local user in the built-in administrators group:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'This command creates a local user and adds the user to a specified group:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/65aeb61c-6834-497f-a3ae-9c1c90eccaf0.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 25: Creating a local administrative user'
  prefs: []
  type: TYPE_NORMAL
- en: Having this local administrative user account can form a backdoor.
  prefs: []
  type: TYPE_NORMAL
- en: Performing Overpass-the-Hash
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Since we have determined that Metasploitable 3 is a server, let's attempt to
    log in using the local account we created in the event that one of the users whose
    hashes we harvested might be logged in. To perform this, we will use the `xfreerdp`
    tool, which is built into Kali.
  prefs: []
  type: TYPE_NORMAL
- en: 'The command syntax we will use is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'In this command, we are defining the user (`/u`), the password (`/p`), and
    the server IP (`/v`). Once you have entered the command, you will have a remote
    desktop session:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/89a47c5d-67c8-46ba-9284-c45f5d43db11.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 26: Remote desktop session established'
  prefs: []
  type: TYPE_NORMAL
- en: 'Now that we are logged in to the server, let''s attempt to enumerate the current
    domain users and groups. Remember that we have harvested the credentials for `serveradmin`
    and `helpdeskagent`. Opening Command Prompt and entering the `net user /domain` command
    fails since we are not authenticated to the domain:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/14f0558d-53ec-482e-bcbb-08e32416a1ed.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 27: User enumeration denied'
  prefs: []
  type: TYPE_NORMAL
- en: 'Since we have the hashes for two domain credentials, let''s use this to perform
    an Overpass-the-Hash attack. We will use the hash of `serveradmin` with the Mimikatz
    tool. The command to do this is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: In this command, we are telling Mimikatz to use the highest privilege (`privilege::debug`)
    by using the Overpass-the-Hash attack (`sekurlsa::pth`) and defining the username
    (`/user`), the NTLM hash (`/ntlm`), and the domain (`/domain`).
  prefs: []
  type: TYPE_NORMAL
- en: 'Once the command executes, we will have a new Command Prompt window that will
    open. This window will have the permissions of the `serveradmin` account, hence
    allowing us to perform the user and group enumeration while masquerading as `serveradmin`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/6401a820-27f6-4ef3-aadc-01969bee8e27.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 28: Successful Overpass-the-Hash attack'
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, let''s see what we can do with the `helpdeskagent`account. During user
    and group enumeration, we determined that there is a `helpdeskagent`account and
    a `Helpdesk Staff`group within the domain. Let''s assume that the user account
    is a member of this group. We can confirm this by using the `net user helpdeskagent
    /domain` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/d6d1b129-6a70-4da6-a146-1b1ec98b9cbb.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 29: Verifying the groups of helpdeskagent'
  prefs: []
  type: TYPE_NORMAL
- en: Sure enough, the account is a member of the group.
  prefs: []
  type: TYPE_NORMAL
- en: Before proceeding to the next step, we will repeat the Overpass-the-Hash attack,
    but this time using the NTLM hash of the `helpdeskagent` account.
  prefs: []
  type: TYPE_NORMAL
- en: Performing lateral movement
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Using the new command window that was spawned by the Overpass-the-Hash attack
    using the `helpdeskagent` account, we will attempt to access the Windows 10 PC.
    Performing a simple directory listing using the `dir \\192.168.10.9\c$` command
    results in the directory being listed. This tells us that `Helpdesk Staff`probably
    has local admin privileges on that PC.
  prefs: []
  type: TYPE_NORMAL
- en: 'The first thing we will do is copy Mimikatz to the Windows 10 PC. This can
    be done by using the `xcopy mimikatz.exe \\192.168.10.9\c$\tools` command. As
    per the following screenshot*,* since I didn''t create the directory, I am prompted
    to define whether the destination is a file or directory:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/4740813b-7b6c-4011-8221-a5bda59bbedf.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 30: Copying mimikatz.exe to a new target'
  prefs: []
  type: TYPE_NORMAL
- en: 'Using `PSexec`, we will look at dumping the current logged in user credentials.
    This can be done by using the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'In this command, we are telling `PSexec` to run the Mimikatz command on the
    remote system. The `-accepteula` command is extremely important as this will stop
    the EULA prompt from showing up on the remote system:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/48ab34c0-243a-4b49-b876-83da3a361a9a.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 31: Using PSexec to remotely execute the mimikatz command'
  prefs: []
  type: TYPE_NORMAL
- en: 'Once we have the output, we will see that there is a high privilege account
    logged in, that is, `domainadmin`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/2c4720ed-0027-4370-9d41-9c7d205896f7.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 32: Harvesting credentials on a remote system'
  prefs: []
  type: TYPE_NORMAL
- en: Here, we don't have the password in cleartext, but we still have the NTLM hash,
    which we can use. The next thing we will do is perform a Pass-the-Ticket attack.
    We will use the same command-line window that we used in this section.
  prefs: []
  type: TYPE_NORMAL
- en: Performing a Pass-the-Ticket attack
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In order to perform this attack, we need to export the current Kerberos tickets
    from the Windows 10 PC. This can be done using the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: In this command, we are exporting the current Kerberos tickets so that we can
    copy them and import them into our session. Once you run this command, you will
    have a number of `*.kirbi` files. Since we are only interested in `domainadmin`,
    we will copy those to our Metasploitable 3 server. Copying can be done using the
    normal Windows `copy` command.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once you have the `.kirbi` files on the Metasploitable 3 server, you can perform
    the Pass-the-Ticket attack by using the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'In this command, we are defining the attack (`kerberos:ptt`) and the location
    of the `.kirbi` files:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/1e6cad93-e0fd-4825-9a8b-f22ff3e90782.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 33: Importing the domainadmin Kerberos tickets'
  prefs: []
  type: TYPE_NORMAL
- en: Notice the output in the preceding screenshot.  Before performing the attack,
    I tried to access the DC, which was denied. Remember that this is the same window
    that we spawned using the `helpdeskagent` account. Once the Mimikatz command has
    executed, we will see that the `domainadmin` Kerberos tickets have been imported
    into our session.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can confirm that the Kerberos tickets has been imported by running the `klist` command,
    which will display the current Kerberos tickets:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/2238ba36-f813-468b-bf8f-eeed2d8195ee.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 34: Kerberos tickets successfully imported'
  prefs: []
  type: TYPE_NORMAL
- en: 'Notice that our session now has the Kerberos tickets for the `domainadmin` account.
    We are now masquerading as the domain admin, so we will be able to access the
    domain controller:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/1f93ebce-56e3-4eac-9205-0f4a95f06840.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 35: The domain controller is now accessible'
  prefs: []
  type: TYPE_NORMAL
- en: At this point, we have full access to the domain controller, which leads to
    a full compromise of the environment.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Post-exploitation can be performed in many different ways. Sometimes, using
    just one tool, such as the Responder, can lead to you capturing a high privileged
    hash. On other occasions, you need to really work through the environment by using
    various techniques. In this chapter, we focused on just a few tools, but there
    are many more available.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, you identified the various techniques that can be utilized
    when performing post-exploitation. You can now build a basic AD lab, which can
    be used to test your skills in post-exploitation. You have the ability to use
    real-world tools that are used by penetration testers and attackers. You have
    also gained practical hands-on skills in regards to performing various post-exploitation
    attacks.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter ([Chapter 12](e4dd2f7e-f929-4877-aef7-e97f1c359784.xhtml)*,
    Maintaining Control within the Environment*), we will discuss persistence and
    how to maintain access to the compromised network.
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: What techniques can be leveraged during post-exploitation?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What tools can be used for post-exploitation?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Name some post-exploitation scripts that exists within Meterpreter.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Explain a Pass-the-Hash attack.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What is unique about the `krbtgt` account?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
