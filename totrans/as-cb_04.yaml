- en: Chapter 4. Android Wear
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter will inform you about Android Wear and how the phenomenon materializes
    as watches and other devices.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, you will learn about:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
- en: Wearables
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A fullscreen wearable app
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Watch faces
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Notifications
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Wearables
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Android Wear is what many wearable devices run on. You might have a smartwatch
    yourself. Will wearables be the next hype after phones, phablets, and tablets?
    Or will smartwatches become part of something bigger, such as the **Internet of**
    **Things** (**IoT**)?
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
- en: Android Wear is a special version of the Android SDK and is dedicated to wearables
    that are often more limited in hardware and available sensors and have smaller
    screens. Wearables may appear as watches, glasses, or maybe in future as contact
    lenses, tattoos, or clothing.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
- en: 'Currently, we see wearables appearing mostly as watches but there are plenty
    of other wearable devices that you can think of. However, it will take some time
    for people to adopt this new technology. Think of the Google Glass project for
    example. It is a brilliant solution but mostly because of the built-in camera,
    people are having serious objections to it. In San Francisco, they have even made
    up a word for it: glass hole. Hmm. That is not really flattering is it? Let''s
    have a look at the following device:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
- en: '![Wearables](img/B04299_04_01.jpg)'
  id: totrans-11
  prefs: []
  type: TYPE_IMG
- en: Devices do not necessarily have to be wearable. When the IOT is discussed, project
    Brillo comes to mind. It extends the Android platform to any connected device
    that you can think of. In future, Brillo and Android Wear might even be merged.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
- en: Imagine a hot summer day; the fridge notifies us about the fact that we are
    running out of sparkling water (or was it beer?). Cool! The learning thermostat
    sets the temperature to 18°C an hour before you come home. Even cooler! The light
    in the living room dims automatically because it is late in the evening; you are
    playing some romantic music and the system knows you have just opened a bottle
    of wine-Ehrm. Weird. That is a completely different story and so is Brillo for
    now.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
- en: Instead, let's find out which apps we can build for a smart watch such as a
    brand new watch face or a health app displaying notifications from time to time.
    In the upcoming recipes, we will see what we need to do for that.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
- en: First things first, let's see if we can get things up and running on a wearable
    device. For the first two recipes, you do not need to have a real smartwatch.
    We will create a virtual one in the first recipe.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
- en: Fullscreen wearable app
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Wearable fullscreen apps do have a phone (or other handheld device) and a wearable
    component. The user install the handheld app on their phone and the wearable component
    is pushed to the paired wear device automatically.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
- en: This is a great start to exploring the interesting world of developing apps
    for wearables, as they are basically the same as Android phone apps. However,
    Google encourages you to integrate your app with Android Wear's context stream.
    This context stream does contain various interesting pieces of information. Think
    of them as incoming e-mails, the weather, the number of steps you have taken today,
    or your heart beat rate. We will find out more about this in the recipe about
    notifications.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  id: totrans-19
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To go through this recipe, you need to have Android Studio up and running.
    Also make sure that you have installed the latest SDK, including the Android Wear
    SDK. You can check whether this is the case when you open the SDK manager. (Navigate
    to the **Tools** menu, **Android SDK Manager**) as shown in the following screenshot:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
- en: '![Getting ready](img/B04299_04_02.jpg)'
  id: totrans-21
  prefs: []
  type: TYPE_IMG
- en: How to do it...
  id: totrans-22
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let''s see how we can create our own wearable app and make it run on a virtual
    device using the following steps:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
- en: Start a new Android Studio project. Name your application `WatchApp` and enter
    `packtpub.com` in the **Company Domain** field. Then, click on the **Next** button.
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the next dialog, check **Phone and tablet**. Also check the **Wear** option.
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: For both options, select **API 21** or higher and click on the **Next** button.
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the **Add an activity to wear** dialog, choose **Blank Wear Activity** and
    click on the **Next** button.
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select **Blank Activity** and click on the **Next** button.
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Name your new activity `PhoneActivity` and click on the **Next** button.
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select **Blank Wear Activity** and click on the **Next** button as shown in
    the following screenshot:![How to do it...](img/B04299_04_03.jpg)
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Name your new wear activity `WatchActivity` and click on the **Finish** button.
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Android Studio will create two modules: `mobile` and `wear`. The mobile one
    runs on a smartphone (or phablet or tablet). The wear app will be pushed to a
    paired wearable device such as your smart watch for example. The project view
    now looks like this:![How to do it...](img/B04299_04_04.jpg)'
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Let's see what it will look like on a smartphone by default. To do so, we will
    create a wearable virtual device. From the **Tools** menu, select the **Android**
    option and next select the **AVD Manager** option.
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Then, click on the button that reads **Create virtual device**.
  id: totrans-34
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the dialog that comes up, choose **Wear** in the **Category** list. Choose
    the **Android Wear Round** device in the list next to it and click on the **Next**
    button as shown in the following screenshot:![How to do it...](img/B04299_04_05.jpg)
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the next dialog, choose a system image, for example **Lollipop**, **API level
    21**, **x86** (or higher if available. You might need to click on the **Download**
    link first to do so). Then, click on the **Next** button to continue.
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Give your virtual device a nice name and click on the **Finish** button. Your
    new Android wear device will now appear in the list as shown in the next screenshot:![How
    to do it...](img/B04299_04_06.jpg)
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Start the device by clicking on the play icon.
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once the virtual device has been booted, change the configuration to **wear**
    and click on the **Run** button next to it on the toolbar.![How to do it...](img/B04299_04_07.jpg)
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'After the app has been installed, it will look like this:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/B04299_04_08.jpg)'
  id: totrans-41
  prefs: []
  type: TYPE_IMG
- en: If the **Hello Round World!** message does not appear immediately, the app may
    have been installed but may not be visible yet. Swipe the screen a couple of times
    to check whether it is there.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
- en: If your app is up and running, it is time to explore something that is even
    more fun. Let's create a watch face in the next recipe.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  id: totrans-44
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: At the time of writing this, Genymotion does not support wearable devices yet.
    This is why we are using the default emulator instead in this recipe.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
- en: But that one is so sloooow! You might say. That is true, but by installing HAXM,
    you can make it a little bit faster. There is some interesting information about
    this topic at [http://developer.android.com/tools/devices/emulator.html](http://developer.android.com/tools/devices/emulator.html).
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
- en: In case you do have a real device, you can of course also deploy your app on
    a smartwatch. If you want to do so, you also need to have the Android wear companion
    app installed on a handheld device since you cannot install and test your wearable
    app on it directly.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
- en: You can get this companion app from Google Play. Download the app, install it,
    and connect your handheld device through a USB.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
- en: See also
  id: totrans-49
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Refer *Testing your app with an emulator called Genymotion* section from [Chapter
    1](ch01.html "Chapter 1. Welcome to Android Studio"), *Welcome to Android Studio*
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Watch faces
  id: totrans-51
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Out of the box, your Android smartwatch comes with various watch faces and
    there are plenty of other watch faces that you can download. They are available
    in any shape or type: square and round or analogue and digital. Actually, there
    is even another shape - the so-called flat tire one - as seen on the Moto 360
    device.'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
- en: There are many customization options that you can think of but all watch faces
    are about displaying time and date information in an easy way. This is what watches
    are for in the first place, aren't they?
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 有许多自定义选项，但所有的表盘都是为了以简单的方式显示时间和日期信息。这首先是手表的用途，不是吗？
- en: They should be aware of incoming notifications and also need to make room for
    the system indicators such as the battery life icon and the **Ok Google** text.
    For more information, check out [https://developer.android.com/design/wear/watchfaces.html](https://developer.android.com/design/wear/watchfaces.html).
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 他们应该注意到即将到来的通知，还需要为系统指示器腾出空间，例如电池寿命图标和**Ok Google**文本。有关更多信息，请访问[https://developer.android.com/design/wear/watchfaces.html](https://developer.android.com/design/wear/watchfaces.html)。
- en: What we will create in the upcoming recipe is a watch face that tells you the
    time, for example, **half past seven** or **five minutes past ten**.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 在即将创建的示例中，我们将创建一个手表表盘，告诉你时间，例如**七点半**或**十点五分钟**。
- en: Getting ready
  id: totrans-56
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: To go through this recipe, you need to have Android Studio up and running. Also
    make sure you have installed the latest SDK, including the Android Wear SDK. You
    can check whether this is the case by opening the SDK manager, which is accessible
    when you navigate to the **Tools** menu under **Android** which is under the **SDK
    Manager** menu item.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 要完成本示例，您需要运行Android Studio。还要确保已安装了最新的SDK，包括Android Wear SDK。您可以通过打开SDK管理器来检查是否已安装，该管理器可在**工具**菜单下的**Android**中找到，该菜单项位于**SDK
    Manager**下。
- en: How to do it…
  id: totrans-58
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 操作步骤
- en: 'Let''s create a new Android project with the following steps to create a watch
    face app:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们按以下步骤创建一个手表表盘应用的新Android项目：
- en: Create a new Android Studio project.
  id: totrans-60
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个新的Android Studio项目。
- en: Name your app `HelloTime` or whatever you want the name of your app to be. Enter
    `packtpub.com` in the **Company Domain** field. Then click on the **Next** button.
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将应用命名为`HelloTime`，或者您想要的应用名称。在**公司域**字段中输入`packtpub.com`，然后单击**下一步**按钮。
- en: In the next dialog, check **Phone and tablet**. Also check the **Wear** option.
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在下一个对话框中，勾选**手机和平板**。还要勾选**Wear**选项。
- en: For both options, select **API 21** or a higher version and click on the **Next**
    button.
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于这两个选项，选择**API 21**或更高版本，然后单击**下一步**按钮。
- en: Select **Blank activity** and click on the **Next** button.
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择**空白活动**，并单击**下一步**按钮。
- en: Name your new activity `PhoneActivity` and click on the **Next** button.
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将新的活动命名为`PhoneActivity`，并单击**下一步**按钮。
- en: Select **Watch Face** and click on the **Next** button.
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择**表盘**，并单击**下一步**按钮。
- en: Name the watch face `HelloTimeWatchFace` and choose **Digital** for **Style**.
    After that, click on the **Finish** button.
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将表盘命名为`HelloTimeWatchFace`，并选择**数字**作为**样式**。之后，点击**完成**按钮。
- en: Android Studio will create the necessary modules for both the phone or tablet
    and the wearable device.
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Android Studio将为手机或平板和可穿戴设备创建必要的模块。
- en: In the project view, open the `HelloTimeWatchFace` class of the `wear` module.
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在项目视图中，打开`wear`模块的`HelloTimeWatchFace`类。
- en: Open the `strings.xml` file in the `res/values` folder within the `wear` module
    and change the string for `my_digital_name` to `Hello Time!`
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`wear`模块的`res/values`文件夹中打开`strings.xml`文件，并将`my_digital_name`的字符串更改为`Hello
    Time!`
- en: Let's see what we have got so far. Start the virtual (or your real) wearable
    device. In case you do not know how to create a virtual wearable device, refer
    to the previous recipe.
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们看看我们到目前为止得到了什么。启动虚拟（或真实的）可穿戴设备。如果你不知道如何创建虚拟可穿戴设备，请参考上一个示例。
- en: Once the virtual device has been booted, change the configuration to **Wear**
    and click on the **Run** button next to it on the toolbar as shown in the following
    figure:![How to do it…](img/B04299_04_09.jpg)
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 虚拟设备启动后，将配置更改为**Wear**，并单击工具栏旁边的**运行**按钮，如下图所示：![操作步骤…](img/B04299_04_09.jpg)
- en: On the wearable, swipe to see the **Settings** icon and click on it.
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在可穿戴设备上，滑动查看**设置**图标并点击它。
- en: Swipe down to **Change watch face** and click on it.
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 向下滑动到**更改表盘**，并点击它。
- en: Swipe to the right until you see the **Hello Time!** watch face and click on
    it.
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 向右滑动，直到看到**Hello Time!**表盘，然后点击它。
- en: You will now see the digital watch face that Android Studio has created for
    you.
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您现在将看到Android Studio为您创建的数字表盘。
- en: Let's examine this code for a bit. The `HelloTimeWatchFace` class that has been
    created for you extends `CanvasWatchFaceService` and an inner `Engine` class has
    been added. The engine has a handler so that the time could be updated. It also
    has a broadcast receiver that will handle the situation if the user moves to another
    time zone while traveling.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们稍微检查一下这段代码。为你创建的`HelloTimeWatchFace`类扩展了`CanvasWatchFaceService`，并添加了一个内部的`Engine`类。引擎有一个处理程序，以便可以更新时间。它还有一个广播接收器，将处理用户在旅行时移动到另一个时区的情况。
- en: 'The `Engine` class has some interesting methods. The `onCreate` method allocates
    two `Paint` objects: one for the background and one for the foreground (text).
    The `onVisibilityChanged` method will be called when the user displays or hides
    the watch face. The `onApplyWindowInSets` method is used to determine whether
    the app is running on a round or square screen.'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: '`Engine`类有一些有趣的方法。`onCreate`方法分配了两个`Paint`对象：一个用于背景，一个用于前景（文本）。`onVisibilityChanged`方法将在用户显示或隐藏表盘时调用。`onApplyWindowInSets`方法用于确定应用是否在圆形或方形屏幕上运行。'
- en: Next there is the `onPropertiesChanged` method, which will be called once the
    hardware properties of the wearable device are known, for example, if the low-bit
    ambient mode is supported. The `onAmbientModeChanged` method is very important
    because it can save the battery. It can also be used to apply burn-in protection.
    Here you may want to change the color of the background or foreground.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来是`onPropertiesChanged`方法，一旦可穿戴设备的硬件属性已知，例如是否支持低位环境模式，就会调用该方法。`onAmbientModeChanged`方法非常重要，因为它可以节省电池。它还可以用于应用防烧屏保护。在这里，您可能想要更改背景或前景的颜色。
- en: 'Let''s change the way the time is shown:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们改变时间的显示方式：
- en: 'Add a method that returns the current time in the spoken language, something
    like this:'
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加一个以口语语言返回当前时间的方法，类似于这样：
- en: '[PRE0]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Add this method to convert the numbers to text:'
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加此方法以将数字转换为文本：
- en: '[PRE1]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'In the `onDraw` method, replace the `canvas.DrawText` part with the lines shown
    here. This method displays multiple lines of the current time in the spoken language:'
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`onDraw`方法中，用这里显示的行替换`canvas.DrawText`部分。此方法显示口语语言中当前时间的多行：
- en: '[PRE2]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Note
  id: totrans-87
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: '**Magic is not always cool…**'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: '**魔术并不总是很酷...**'
- en: 'Wait! What is that magic number doing there in the previous step? 65 is not
    really meaningful. What does this mean? What does it do? Create a constant value
    for it somewhere in your class and use that variable name instead (here it would
    be even better to put the value in a dimension resource file, but we will have
    a look at that later so let''s forget about that for now):'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 等等！在上一步中那个魔术数字是在做什么？65实际上并没有意义。这是什么意思？它是做什么的？在您的类中的某个地方创建一个常量值，并使用该变量名称（在这里最好将值放在尺寸资源文件中，但我们稍后会看到这一点，所以现在让我们暂时忘记它）：
- en: '[PRE3]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Go to the `onCreate` method and add this line to make the text appear with
    a nice green color (yep, `GREEN` is a constant as well):'
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 转到`onCreate`方法，并添加此行以使文本以漂亮的绿色显示（是的，`GREEN`也是一个常量）：
- en: '[PRE4]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Run your app again. It will look like this:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 再次运行您的应用程序。它会看起来像这样：
- en: '![How to do it…](img/B04299_04_10.jpg)'
  id: totrans-94
  prefs: []
  type: TYPE_IMG
  zh: '![如何做...](img/B04299_04_10.jpg)'
- en: To prepare the watch face for the Play Store later, you need to take screenshots
    once you have completed it. You need to provide screenshots for both square and
    circular watches. In the `res/drawable` folder, you will find the default preview
    images that Android Studio has created for you.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 为了以后准备好Play商店的手表表盘，您需要在完成后拍摄屏幕截图。您需要为方形和圆形手表提供屏幕截图。在`res/drawable`文件夹中，您会找到Android
    Studio为您创建的默认预览图像。
- en: For now, you have just created your first watch face app in its most basic shape.
    In the next recipe, we will see what happens when a notification comes in.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，您只是以最基本的形式创建了您的第一个手表表盘应用程序。在下一个食谱中，我们将看到通知到来时会发生什么。
- en: There's more...
  id: totrans-97
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: The watch face app in this recipe is far from perfect. The text is not aligned;
    it does not properly respond to ambient mode changes and you may want to localize
    it to display the time in your own language.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 本食谱中的手表表盘应用程序远非完美。文本未对齐；它没有正确响应环境模式的更改，您可能希望将其本地化以以您自己的语言显示时间。
- en: To see where this could be going, you could check out the many watch faces that
    are already available at the Play Store.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解这可能会发展成什么样，您可以查看Play商店中已经可用的许多手表表盘。
- en: Notifications
  id: totrans-100
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 通知
- en: Android Wear is somewhat different from apps running on phones or tablets. Instead
    of icons and lists, Android Wear uses cards, which is something we saw already
    in the recipes that introduced us to the basic concepts of material design.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: Android Wear与在手机或平板上运行的应用程序有所不同。 Android Wear使用卡片，而不是图标和列表，这是我们在介绍材料设计基本概念的食谱中已经看到的东西。
- en: According to the context and only at a relevant moment, a card is added to the
    stream of cards once a new notification arrives. This is known as the context
    stream, and it does contain various interesting pieces of information. Think of
    them as incoming emails, the weather, the number of steps you took today, your
    heart beat rate, and other events or reminders.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 根据上下文，并且只在相关时刻，一旦新通知到达，就会向卡片流中添加一张卡片。这被称为上下文流，其中包含各种有趣的信息。将它们视为收件箱中的电子邮件，天气，今天走的步数，心率，以及其他事件或提醒。
- en: Remember the water app from the previous chapter? For example, we could create
    a notification to remind us to drink water more often and to add a new card for
    it. This would be a nice feature to have.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 还记得上一章的饮水应用程序吗？例如，我们可以创建一个提醒我们更频繁饮水并为其添加新卡片的通知。这将是一个很好的功能。
- en: Getting ready
  id: totrans-104
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: This recipe requires Android Studio and the latest SDKs, including the wear
    SDK, installed. Check out the previous recipe for more information.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 此食谱需要安装Android Studio和最新的SDK，包括wear SDK。有关更多信息，请查看上一个食谱。
- en: You also need a handheld device running on Android Lollipop or above that has
    the `Android Wear` app installed and a wearable device that is connected to your
    handheld device through Bluetooth.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 您还需要一台运行Android Lollipop或更高版本的手持设备，该设备已安装`Android Wear`应用程序，并且通过蓝牙连接到您的手持设备的可穿戴设备。
- en: How to do it...
  id: totrans-107
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'Let''s see how notifications can be triggered and how to display them nicely
    on a smartwatch:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看如何触发通知以及如何在智能手表上漂亮地显示它们：
- en: Create a new project in Android Studio. Name it `WaterNowNotification` and click
    on the **Next** button.
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Android Studio中创建一个新项目。将其命名为`WaterNowNotification`，然后单击**下一步**按钮。
- en: Choose **Phone and Tablet** as smartwatch platform. Do not check the **Wear**
    option. Click on the **Next** button.
  id: totrans-110
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择**手机和平板电脑**作为智能手表平台。不要选择**Wear**选项。然后单击**下一步**按钮。
- en: Select **Blank Activity** and click on the **Next** button.
  id: totrans-111
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择**空白活动**，然后单击**下一步**按钮。
- en: Name your activity `WaterNowActivity` and click on the **Finish** button.
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将您的活动命名为`WaterNowActivity`，然后单击**完成**按钮。
- en: 'Open the `build.gradle` file in your app. Add this to the dependencies section
    and apply the appropriate version for it:'
  id: totrans-113
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在您的应用中打开`build.gradle`文件。将其添加到依赖项部分并应用适当的版本：
- en: '[PRE5]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Click on the **Sync project with Gradle files** button that you can find on
    the toolbar.
  id: totrans-115
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 单击工具栏上可以找到的**与Gradle文件同步项目**按钮。
- en: Open the `activity_water_now.xml` file and change it to the **Text** mode using
    the tab at the bottom of Android Studio.
  id: totrans-116
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`activity_water_now.xml`文件，并使用Android Studio底部的选项卡将其更改为**文本**模式。
- en: 'Create a layout with a button that we will use to send a test notification:'
  id: totrans-117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个带有按钮的布局，我们将用它来发送测试通知：
- en: '[PRE6]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'In the `onCreate` method of the `WaterNowActivity` class, add an `onClick`
    handler for the button that we just created. Use the *Alt* + *Enter* shortcut
    to add import statements as needed:'
  id: totrans-119
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`WaterNowActivity`类的`onCreate`方法中，添加一个`onClick`处理程序，用于刚刚创建的按钮。根据需要使用*Alt* +
    *Enter*快捷键添加导入语句：
- en: '[PRE7]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Create the `sendNotification` method:'
  id: totrans-121
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建`sendNotification`方法：
- en: '[PRE8]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Notifications do require an icon, so create one in the `res/drawable` folder.
    Create a drawable `icon.xml` file and add the implementation to create a nice
    blue circle:'
  id: totrans-123
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通知确实需要一个图标，所以在`res/drawable`文件夹中创建一个。创建一个drawable `icon.xml`文件，并添加实现以创建一个漂亮的蓝色圆圈：
- en: '[PRE9]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Connect your handheld device; make sure that the wearable device is connected
    (use the `Android wear` app to check this) and run the app. You will see the output
    similar to the following screenshot:![How to do it...](img/B04299_04_11.jpg)
  id: totrans-125
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 连接你的手持设备；确保可穿戴设备已连接（使用`Android wear`应用来检查），然后运行应用。你会看到类似以下截图的输出：![操作步骤...](img/B04299_04_11.jpg)
- en: Click on the **Drink water now** button within your app.
  id: totrans-126
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击应用内的**现在喝水**按钮。
- en: A notification will be shown on your phone similar to the following screenshot.
    If it does not appear right away, there will be some indicator at the top of the
    screen. In this case, open the notification center to see it.![How to do it...](img/B04299_04_12.jpg)
  id: totrans-127
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 手机上会显示类似以下截图的通知。如果通知没有立刻出现，屏幕顶部会有一些指示。在这种情况下，打开通知中心查看。![操作步骤...](img/B04299_04_12.jpg)
- en: If all is up and running and configured correctly, the same notification appears
    on the wearable device, shown as follows:![How to do it...](img/B04299_04_13.jpg)
  id: totrans-128
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果一切正常并且配置正确，同样的通知会出现在可穿戴设备上，如下所示：![操作步骤...](img/B04299_04_13.jpg)
- en: If notifications are shown on your phone but do not appear on your wearable,
    then verify the **Notification access** settings. Open the **Settings** app and
    choose **Sound and messages**. Next, choose **Notification access** and check
    whether the **Android Wear** option has been checked.
  id: totrans-129
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果通知在你的手机上显示，但在你的可穿戴设备上没有出现，那么请验证**通知访问**设置。打开**设置**应用，选择**声音和消息**。接下来，选择**通知访问**，并检查**Android
    Wear**选项是否已被选中。
- en: For other Android versions or for particular brands (customized Android versions),
    the setting you are looking for may be located elsewhere and/or may have a different
    name.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 对于其他Android版本或特定品牌（定制的Android版本），你要找的设置可能在其他地方，或者可能有不同的名称。
- en: There's more...
  id: totrans-131
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: Where to go from here? You can combine this notification recipe with the Water
    app from the recipes within the [Chapter 3](ch03.html "Chapter 3. Material Design"),
    *Material Design* and create something cooler or you can check whether you can
    find a way to customize the notification.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来怎么办？你可以将这个通知配方与[第3章](ch03.html "第3章 材料设计")中的Water应用配方相结合，创造出更酷的东西，或者你可以检查是否可以找到一种自定义通知的方法。
- en: Smartwatches, phones, phablets, and tablets come with screens of all sizes and
    shapes. How can we benefit from a larger screen or how can we provide smart navigations
    for smaller screens and maintain the same functionality and code within one app?
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 智能手表、手机、平板手机和平板电脑都配备了各种尺寸和形状的屏幕。我们如何从更大的屏幕中受益，或者如何为较小的屏幕提供智能导航，并在一个应用中保持相同的功能和代码？
- en: Different layouts for different Android versions? Multiple layouts are what
    we need combined with multiple fragments. This is where the recipes in the next
    chapter come in.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 不同Android版本的不同布局？多个布局与多个片段的结合正是我们需要的。这就是下一章中的配方发挥作用的地方。
- en: See also
  id: totrans-135
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参阅
- en: Refer to the *RecyclerView* *and CardView* section from [Chapter 3](ch03.html
    "Chapter 3. Material Design"), *Material Design*
  id: totrans-136
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 参考[第3章](ch03.html "第3章 材料设计")中的*RecyclerView*和*CardView*部分，*材料设计*
- en: Refer to [Chapter 5](ch05.html "Chapter 5. Size Does Matter"), *Size does matter*
  id: totrans-137
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 参考[第5章](ch05.html "第5章 尺寸很重要"), *尺寸很重要*
