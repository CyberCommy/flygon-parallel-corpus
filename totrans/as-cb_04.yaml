- en: Chapter 4. Android Wear
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter will inform you about Android Wear and how the phenomenon materializes
    as watches and other devices.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, you will learn about:'
  prefs: []
  type: TYPE_NORMAL
- en: Wearables
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A fullscreen wearable app
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Watch faces
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Notifications
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Wearables
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Android Wear is what many wearable devices run on. You might have a smartwatch
    yourself. Will wearables be the next hype after phones, phablets, and tablets?
    Or will smartwatches become part of something bigger, such as the **Internet of**
    **Things** (**IoT**)?
  prefs: []
  type: TYPE_NORMAL
- en: Android Wear is a special version of the Android SDK and is dedicated to wearables
    that are often more limited in hardware and available sensors and have smaller
    screens. Wearables may appear as watches, glasses, or maybe in future as contact
    lenses, tattoos, or clothing.
  prefs: []
  type: TYPE_NORMAL
- en: 'Currently, we see wearables appearing mostly as watches but there are plenty
    of other wearable devices that you can think of. However, it will take some time
    for people to adopt this new technology. Think of the Google Glass project for
    example. It is a brilliant solution but mostly because of the built-in camera,
    people are having serious objections to it. In San Francisco, they have even made
    up a word for it: glass hole. Hmm. That is not really flattering is it? Let''s
    have a look at the following device:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Wearables](img/B04299_04_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Devices do not necessarily have to be wearable. When the IOT is discussed, project
    Brillo comes to mind. It extends the Android platform to any connected device
    that you can think of. In future, Brillo and Android Wear might even be merged.
  prefs: []
  type: TYPE_NORMAL
- en: Imagine a hot summer day; the fridge notifies us about the fact that we are
    running out of sparkling water (or was it beer?). Cool! The learning thermostat
    sets the temperature to 18°C an hour before you come home. Even cooler! The light
    in the living room dims automatically because it is late in the evening; you are
    playing some romantic music and the system knows you have just opened a bottle
    of wine-Ehrm. Weird. That is a completely different story and so is Brillo for
    now.
  prefs: []
  type: TYPE_NORMAL
- en: Instead, let's find out which apps we can build for a smart watch such as a
    brand new watch face or a health app displaying notifications from time to time.
    In the upcoming recipes, we will see what we need to do for that.
  prefs: []
  type: TYPE_NORMAL
- en: First things first, let's see if we can get things up and running on a wearable
    device. For the first two recipes, you do not need to have a real smartwatch.
    We will create a virtual one in the first recipe.
  prefs: []
  type: TYPE_NORMAL
- en: Fullscreen wearable app
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Wearable fullscreen apps do have a phone (or other handheld device) and a wearable
    component. The user install the handheld app on their phone and the wearable component
    is pushed to the paired wear device automatically.
  prefs: []
  type: TYPE_NORMAL
- en: This is a great start to exploring the interesting world of developing apps
    for wearables, as they are basically the same as Android phone apps. However,
    Google encourages you to integrate your app with Android Wear's context stream.
    This context stream does contain various interesting pieces of information. Think
    of them as incoming e-mails, the weather, the number of steps you have taken today,
    or your heart beat rate. We will find out more about this in the recipe about
    notifications.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To go through this recipe, you need to have Android Studio up and running.
    Also make sure that you have installed the latest SDK, including the Android Wear
    SDK. You can check whether this is the case when you open the SDK manager. (Navigate
    to the **Tools** menu, **Android SDK Manager**) as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Getting ready](img/B04299_04_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let''s see how we can create our own wearable app and make it run on a virtual
    device using the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Start a new Android Studio project. Name your application `WatchApp` and enter
    `packtpub.com` in the **Company Domain** field. Then, click on the **Next** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the next dialog, check **Phone and tablet**. Also check the **Wear** option.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: For both options, select **API 21** or higher and click on the **Next** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the **Add an activity to wear** dialog, choose **Blank Wear Activity** and
    click on the **Next** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select **Blank Activity** and click on the **Next** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Name your new activity `PhoneActivity` and click on the **Next** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select **Blank Wear Activity** and click on the **Next** button as shown in
    the following screenshot:![How to do it...](img/B04299_04_03.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Name your new wear activity `WatchActivity` and click on the **Finish** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Android Studio will create two modules: `mobile` and `wear`. The mobile one
    runs on a smartphone (or phablet or tablet). The wear app will be pushed to a
    paired wearable device such as your smart watch for example. The project view
    now looks like this:![How to do it...](img/B04299_04_04.jpg)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Let's see what it will look like on a smartphone by default. To do so, we will
    create a wearable virtual device. From the **Tools** menu, select the **Android**
    option and next select the **AVD Manager** option.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Then, click on the button that reads **Create virtual device**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the dialog that comes up, choose **Wear** in the **Category** list. Choose
    the **Android Wear Round** device in the list next to it and click on the **Next**
    button as shown in the following screenshot:![How to do it...](img/B04299_04_05.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the next dialog, choose a system image, for example **Lollipop**, **API level
    21**, **x86** (or higher if available. You might need to click on the **Download**
    link first to do so). Then, click on the **Next** button to continue.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Give your virtual device a nice name and click on the **Finish** button. Your
    new Android wear device will now appear in the list as shown in the next screenshot:![How
    to do it...](img/B04299_04_06.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Start the device by clicking on the play icon.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once the virtual device has been booted, change the configuration to **wear**
    and click on the **Run** button next to it on the toolbar.![How to do it...](img/B04299_04_07.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'After the app has been installed, it will look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/B04299_04_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: If the **Hello Round World!** message does not appear immediately, the app may
    have been installed but may not be visible yet. Swipe the screen a couple of times
    to check whether it is there.
  prefs: []
  type: TYPE_NORMAL
- en: If your app is up and running, it is time to explore something that is even
    more fun. Let's create a watch face in the next recipe.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: At the time of writing this, Genymotion does not support wearable devices yet.
    This is why we are using the default emulator instead in this recipe.
  prefs: []
  type: TYPE_NORMAL
- en: But that one is so sloooow! You might say. That is true, but by installing HAXM,
    you can make it a little bit faster. There is some interesting information about
    this topic at [http://developer.android.com/tools/devices/emulator.html](http://developer.android.com/tools/devices/emulator.html).
  prefs: []
  type: TYPE_NORMAL
- en: In case you do have a real device, you can of course also deploy your app on
    a smartwatch. If you want to do so, you also need to have the Android wear companion
    app installed on a handheld device since you cannot install and test your wearable
    app on it directly.
  prefs: []
  type: TYPE_NORMAL
- en: You can get this companion app from Google Play. Download the app, install it,
    and connect your handheld device through a USB.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Refer *Testing your app with an emulator called Genymotion* section from [Chapter
    1](ch01.html "Chapter 1. Welcome to Android Studio"), *Welcome to Android Studio*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Watch faces
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Out of the box, your Android smartwatch comes with various watch faces and
    there are plenty of other watch faces that you can download. They are available
    in any shape or type: square and round or analogue and digital. Actually, there
    is even another shape - the so-called flat tire one - as seen on the Moto 360
    device.'
  prefs: []
  type: TYPE_NORMAL
- en: There are many customization options that you can think of but all watch faces
    are about displaying time and date information in an easy way. This is what watches
    are for in the first place, aren't they?
  prefs: []
  type: TYPE_NORMAL
- en: They should be aware of incoming notifications and also need to make room for
    the system indicators such as the battery life icon and the **Ok Google** text.
    For more information, check out [https://developer.android.com/design/wear/watchfaces.html](https://developer.android.com/design/wear/watchfaces.html).
  prefs: []
  type: TYPE_NORMAL
- en: What we will create in the upcoming recipe is a watch face that tells you the
    time, for example, **half past seven** or **five minutes past ten**.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To go through this recipe, you need to have Android Studio up and running. Also
    make sure you have installed the latest SDK, including the Android Wear SDK. You
    can check whether this is the case by opening the SDK manager, which is accessible
    when you navigate to the **Tools** menu under **Android** which is under the **SDK
    Manager** menu item.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let''s create a new Android project with the following steps to create a watch
    face app:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a new Android Studio project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Name your app `HelloTime` or whatever you want the name of your app to be. Enter
    `packtpub.com` in the **Company Domain** field. Then click on the **Next** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the next dialog, check **Phone and tablet**. Also check the **Wear** option.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: For both options, select **API 21** or a higher version and click on the **Next**
    button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select **Blank activity** and click on the **Next** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Name your new activity `PhoneActivity` and click on the **Next** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select **Watch Face** and click on the **Next** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Name the watch face `HelloTimeWatchFace` and choose **Digital** for **Style**.
    After that, click on the **Finish** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Android Studio will create the necessary modules for both the phone or tablet
    and the wearable device.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the project view, open the `HelloTimeWatchFace` class of the `wear` module.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open the `strings.xml` file in the `res/values` folder within the `wear` module
    and change the string for `my_digital_name` to `Hello Time!`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Let's see what we have got so far. Start the virtual (or your real) wearable
    device. In case you do not know how to create a virtual wearable device, refer
    to the previous recipe.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once the virtual device has been booted, change the configuration to **Wear**
    and click on the **Run** button next to it on the toolbar as shown in the following
    figure:![How to do it…](img/B04299_04_09.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: On the wearable, swipe to see the **Settings** icon and click on it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Swipe down to **Change watch face** and click on it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Swipe to the right until you see the **Hello Time!** watch face and click on
    it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You will now see the digital watch face that Android Studio has created for
    you.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Let's examine this code for a bit. The `HelloTimeWatchFace` class that has been
    created for you extends `CanvasWatchFaceService` and an inner `Engine` class has
    been added. The engine has a handler so that the time could be updated. It also
    has a broadcast receiver that will handle the situation if the user moves to another
    time zone while traveling.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `Engine` class has some interesting methods. The `onCreate` method allocates
    two `Paint` objects: one for the background and one for the foreground (text).
    The `onVisibilityChanged` method will be called when the user displays or hides
    the watch face. The `onApplyWindowInSets` method is used to determine whether
    the app is running on a round or square screen.'
  prefs: []
  type: TYPE_NORMAL
- en: Next there is the `onPropertiesChanged` method, which will be called once the
    hardware properties of the wearable device are known, for example, if the low-bit
    ambient mode is supported. The `onAmbientModeChanged` method is very important
    because it can save the battery. It can also be used to apply burn-in protection.
    Here you may want to change the color of the background or foreground.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s change the way the time is shown:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Add a method that returns the current time in the spoken language, something
    like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Add this method to convert the numbers to text:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'In the `onDraw` method, replace the `canvas.DrawText` part with the lines shown
    here. This method displays multiple lines of the current time in the spoken language:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Magic is not always cool…**'
  prefs: []
  type: TYPE_NORMAL
- en: 'Wait! What is that magic number doing there in the previous step? 65 is not
    really meaningful. What does this mean? What does it do? Create a constant value
    for it somewhere in your class and use that variable name instead (here it would
    be even better to put the value in a dimension resource file, but we will have
    a look at that later so let''s forget about that for now):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Go to the `onCreate` method and add this line to make the text appear with
    a nice green color (yep, `GREEN` is a constant as well):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Run your app again. It will look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it…](img/B04299_04_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: To prepare the watch face for the Play Store later, you need to take screenshots
    once you have completed it. You need to provide screenshots for both square and
    circular watches. In the `res/drawable` folder, you will find the default preview
    images that Android Studio has created for you.
  prefs: []
  type: TYPE_NORMAL
- en: For now, you have just created your first watch face app in its most basic shape.
    In the next recipe, we will see what happens when a notification comes in.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The watch face app in this recipe is far from perfect. The text is not aligned;
    it does not properly respond to ambient mode changes and you may want to localize
    it to display the time in your own language.
  prefs: []
  type: TYPE_NORMAL
- en: To see where this could be going, you could check out the many watch faces that
    are already available at the Play Store.
  prefs: []
  type: TYPE_NORMAL
- en: Notifications
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Android Wear is somewhat different from apps running on phones or tablets. Instead
    of icons and lists, Android Wear uses cards, which is something we saw already
    in the recipes that introduced us to the basic concepts of material design.
  prefs: []
  type: TYPE_NORMAL
- en: According to the context and only at a relevant moment, a card is added to the
    stream of cards once a new notification arrives. This is known as the context
    stream, and it does contain various interesting pieces of information. Think of
    them as incoming emails, the weather, the number of steps you took today, your
    heart beat rate, and other events or reminders.
  prefs: []
  type: TYPE_NORMAL
- en: Remember the water app from the previous chapter? For example, we could create
    a notification to remind us to drink water more often and to add a new card for
    it. This would be a nice feature to have.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This recipe requires Android Studio and the latest SDKs, including the wear
    SDK, installed. Check out the previous recipe for more information.
  prefs: []
  type: TYPE_NORMAL
- en: You also need a handheld device running on Android Lollipop or above that has
    the `Android Wear` app installed and a wearable device that is connected to your
    handheld device through Bluetooth.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let''s see how notifications can be triggered and how to display them nicely
    on a smartwatch:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a new project in Android Studio. Name it `WaterNowNotification` and click
    on the **Next** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Choose **Phone and Tablet** as smartwatch platform. Do not check the **Wear**
    option. Click on the **Next** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select **Blank Activity** and click on the **Next** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Name your activity `WaterNowActivity` and click on the **Finish** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Open the `build.gradle` file in your app. Add this to the dependencies section
    and apply the appropriate version for it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Click on the **Sync project with Gradle files** button that you can find on
    the toolbar.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open the `activity_water_now.xml` file and change it to the **Text** mode using
    the tab at the bottom of Android Studio.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a layout with a button that we will use to send a test notification:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'In the `onCreate` method of the `WaterNowActivity` class, add an `onClick`
    handler for the button that we just created. Use the *Alt* + *Enter* shortcut
    to add import statements as needed:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Create the `sendNotification` method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Notifications do require an icon, so create one in the `res/drawable` folder.
    Create a drawable `icon.xml` file and add the implementation to create a nice
    blue circle:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Connect your handheld device; make sure that the wearable device is connected
    (use the `Android wear` app to check this) and run the app. You will see the output
    similar to the following screenshot:![How to do it...](img/B04299_04_11.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Drink water now** button within your app.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A notification will be shown on your phone similar to the following screenshot.
    If it does not appear right away, there will be some indicator at the top of the
    screen. In this case, open the notification center to see it.![How to do it...](img/B04299_04_12.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If all is up and running and configured correctly, the same notification appears
    on the wearable device, shown as follows:![How to do it...](img/B04299_04_13.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If notifications are shown on your phone but do not appear on your wearable,
    then verify the **Notification access** settings. Open the **Settings** app and
    choose **Sound and messages**. Next, choose **Notification access** and check
    whether the **Android Wear** option has been checked.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: For other Android versions or for particular brands (customized Android versions),
    the setting you are looking for may be located elsewhere and/or may have a different
    name.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Where to go from here? You can combine this notification recipe with the Water
    app from the recipes within the [Chapter 3](ch03.html "Chapter 3. Material Design"),
    *Material Design* and create something cooler or you can check whether you can
    find a way to customize the notification.
  prefs: []
  type: TYPE_NORMAL
- en: Smartwatches, phones, phablets, and tablets come with screens of all sizes and
    shapes. How can we benefit from a larger screen or how can we provide smart navigations
    for smaller screens and maintain the same functionality and code within one app?
  prefs: []
  type: TYPE_NORMAL
- en: Different layouts for different Android versions? Multiple layouts are what
    we need combined with multiple fragments. This is where the recipes in the next
    chapter come in.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Refer to the *RecyclerView* *and CardView* section from [Chapter 3](ch03.html
    "Chapter 3. Material Design"), *Material Design*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Refer to [Chapter 5](ch05.html "Chapter 5. Size Does Matter"), *Size does matter*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
