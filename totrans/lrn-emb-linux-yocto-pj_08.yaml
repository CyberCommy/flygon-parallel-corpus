- en: Chapter 8. Hob, Toaster, and Autobuilder
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you will be introduced to new tools and components used in
    the Yocto community. As the title suggests, this chapter is dedicated to another
    category of tools. I will start with **Hob** as a graphical interface, which is
    slowly dying, and in time, will be replaced by a new web interface called **Toaster**.
    A new point of discussion will also be introduced in this chapter. Here, I am
    referring to the QA and testing component that is, in most cases, absent or lacking
    from most of the projects. Yocto takes this problem very seriously and offers
    a solution for it. This solution will be presented in the last section of the
    chapter.
  prefs: []
  type: TYPE_NORMAL
- en: You will also be offered a more detailed presentation to components, such as
    Hob, Toaster, and Autobuilder. Each of these components will be assessed separately
    and their benefits and use cases are looked at in detail. For the first two components,
    (that is, Hob and Toaster) information regarding the build process is offered
    alongside the various setup scenarios. Hob is similar to BitBake and is tightly
    integrated with Poky and the Build Directory. Toaster, on the other hand, is a
    looser alternative that offers multiple configuration alternatives and setups,
    and a performance section that can be very useful for any developer interested
    in improving the build system's overall performance. The chapter ends with section
    on Autobuilder. This project is the cornerstone of the Yocto project that is dedicated
    to making embedded development and open source more user-friendly, in general,
    but also offers more secure and error-free projects. I hope that you enjoy this
    chapter; let's proceed to the first section.
  prefs: []
  type: TYPE_NORMAL
- en: Hob
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Hob project represents a GUI alternative to the BitBake build system. Its
    purpose is to execute the most common tasks in an easier and faster manner, but
    it does not make command-line interactions go away. This is because most parts
    of recipes and configurations still need to be done manually. In the previous
    chapter, the BitBake Commander extension was introduced as an alternative solution
    for the editing of recipes, but in this project, it has its limitations.
  prefs: []
  type: TYPE_NORMAL
- en: Hob's primary purpose is to allow interaction with the build system made easier
    for users. Of course, there are users who do not prefer the graphical user interface
    alternatives to command-line options, and I kind of agree with them, but this
    is another discussion altogether. Hob can be an option for them also; it is an
    alternative not only for people who prefer having an interface in front of them,
    but also for those who are attached to their command-line interaction.
  prefs: []
  type: TYPE_NORMAL
- en: Hob may not be able to a lot of tasks apart from most common ones, such as building
    an image, modifying its existing recipes, running an image through a QEMU emulator,
    or even deploying it on a USB device for some live-booting operations on a target
    device. Having all these functionalities is not much, but is a lot of fun. Your
    experience with the tools in Yocto Project do not matter here. The previously
    mentioned tasks can be done very easily and in an intuitive manner, and this is
    the most interesting thing about Hob. It offers its users what they need in a
    very easy fashion. People who interact with it can learn from the lessons it has
    to offer, whether they're graphic interface enthusiasts or command-line savvy.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, I will show you how to use the Hob project to build a Linux
    operating system image. To demonstrate this, I will use the Atmel SAMA5D3 Xplained
    machine, which is what I also used for other demonstrations in previous chapters.
  prefs: []
  type: TYPE_NORMAL
- en: 'First of all, let''s see what Hob looks like when you start it for the first
    time. The result is shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Hob](img/image00343.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'To retrieve the graphical interface, the user needs perform the given steps
    required for the BitBake command-line interaction. Firstly, it needs to create
    a build directory and from this build directory, the user needs to start the Hob
    graphical interface, using the Hob commands, given as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: The next step is to establish the layers that are required for your build. You
    can do this by selecting them in the **Layers** window. The first thing to do
    for the `meta-atmel` layer is to add it to the build. Although you may start work
    in an already existing build directory, Hob will not be able to retrieve the existing
    configurations and will create a new one over the `bblayers.conf` and `local.conf`
    configuration files. It will mark the added lines using the next `#added by hob`
    message.
  prefs: []
  type: TYPE_NORMAL
- en: '![Hob](img/image00344.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'After the corresponding `meta-atmel` layer is added to the build directory,
    all the supported machines are available in the **Select a machine** drop-down,
    including those that are added by the `meta-atmel` layer. From the available options,
    the **sama5d3-xplained** machine needs to be selected:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Hob](img/image00345.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'When the Atmel **sama5d3-xplained** machine is selected, an error, shown in
    the following screenshot, appears:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Hob](img/image00346.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'After adding the `meta-qt5` layer to the layers section, this error disappears
    and the build process can continue. To retrieve the `meta-qt5` layer, the following
    `git` command is necessary:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Since all the available configuration files and recipes are parsed, the parsing
    process takes a while, and after this, you will see an error, as shown in the
    following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Hob](img/image00347.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'After another quick inspection, you will see the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: The only explanation is the fact the `meta-atmel` layer does not update its
    recipes but appends them. This can be overcome in two ways. The simplest one would
    be to update the recipe the `.bbappend` file and make sure that the new available
    recipe is transformed into a patch for the upstream community. A patch with the
    required changes inside the `meta-atmel` layer will be explained to you shortly,
    but first, I will present the available options and the necessary changes that
    are needed to resolve the problems existing in the build process.
  prefs: []
  type: TYPE_NORMAL
- en: The other solution would be to include the required recipes that `meta-atmel`
    needs for the build process. The best place for it to be available would be also
    in `meta-atmel`. However, in this case, the `.bbappend` configuration file should
    be merged with the recipe, since having a recipe and its appended file in the
    same place does not make much sense.
  prefs: []
  type: TYPE_NORMAL
- en: 'After this problem is fixed, new options will be available to the user, as
    depicted in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Hob](img/image00348.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Now, the user has the chance to select the image that needs to be built, as
    well as the extra configurations that need to be added. These configurations include:'
  prefs: []
  type: TYPE_NORMAL
- en: Selection of the distribution type
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Selection of the image types
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A packaging format
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Other small tweaks around the root filesystem
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Some of these are depicted in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Hob](img/image00349.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'I''ve chosen to change the distribution type from **poky-tiny** to **poky**,
    and the resulting root filesystem output format is visible in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Hob](img/image00350.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'With the tweaks made, the recipes are reparsed, and when this process is finished,
    the resulting image can be selected so that the build process can start. The image
    that is selected for this demonstration is the **atmel-xplained-demo-image** image,
    which corresponds to the recipes with the same name. This information is also
    displayed in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Hob](img/image00351.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'The build process is started by clicking on the **Build image** button. A while
    after the build starts, an error will show up, which tells us that the **meta-atmel**
    BSP layer requires more of the dependencies that need to be defined by us:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Hob](img/image00352.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'This information is gathered from the `iperf` recipe, which is not available
    in the included layers; it is available inside the `meta-openembedded/meta-oe`
    layer. After a more detailed search and update process, there have been a few
    revelations. There are more layer dependencies than required for the `meta-atmel`
    BSP layer, which are given as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: The `meta-openembedded/meta-oe` layer
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `meta-openembedded/meta-networking` layer
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `meta-openembedded/meta-ruby` layer
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `meta-openembedded/meta-python` layer
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `meta-qt5` layer
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The end result is available in the `BBLAYERS` variable that is be found in
    the `bblayers.conf` file, shown as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'There are some required changes in the `meta-atmel` layer that needs to be
    made before starting a complete build, given as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Replace `packagegroup-core-basic` with `packagegroup-core-full-cmdline` because
    the latest Poky has updated the `packagegroup` names.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Delete `python-setuptools` because it is not available in the `meta-openembedded/meta-oe`
    layer anymore, as well as in the new `meta-openembedded/meta-python` layer, which
    is the new placeholder for all Python-related recipes. The `python-setuptools`
    tool was removed because it had the ability to download, build, install, upgrade,
    and uninstall extra Python packages, and is not a mandatory requirement for Yocto.
    This is its general purpose.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The preceding change regarding the update to `qt4-embedded-4.8.6` for `qt4-embedded-4.8.5`,
    as shown earlier, presented errors.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'All the changes made to the `meta-atmel` layer are available in following patch:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: This patch has been given in the chapter as an example for Git interaction and
    is a necessity when creating a patch that needs to be upstream to the community.
    At the time of writing this chapter, this patch had not yet been released to the
    upstream community, so this could be a gift for anyone interested in adding a
    contribution to the meta-atmel community in particular and the Yocto community
    in general.
  prefs: []
  type: TYPE_NORMAL
- en: 'The steps necessary to obtain this patch after the changes have been made,
    are described shortly. They define the steps needed to generate the patch, as
    shown in the following command, and is `0001-Update-suppport-for-atmel-xplained-demo-image-image.patch`.
    It can be upstream to the community or directly to the maintainer of the `meta-atmel`
    layer using the information available in the `README` file and the `git send-email`
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Toaster
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Toaster represents an alternative to Hob, which at a given point in time, will
    replace it completely. It is also a web-based interface for the BitBake command
    line. This tool is much more effective than Hob; it is not only able to do the
    most common tasks in a similar manner as Hob, but it also incorporates a build
    analysis component that collects data regarding the build process and the resultant
    outcome. These results are presented in a very easy-to-grasp manner, offering
    the chance to search, browse, and query the information.
  prefs: []
  type: TYPE_NORMAL
- en: 'From the collected information, we can mention the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Structure of the image directory
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The available build configurations
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The outcome of a build along with the errors and registered warnings
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The packages present in an image recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Recipes and packages that are built
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Tasks that are executed
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Performance data regarding executed tasks, such as CPU usage, time, and disk
    I/O usage
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Dependency and reverse dependencies for recipes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There are also some drawbacks to the Hob solution. Toaster does not yet offer
    the ability to configure and launch a build. However, there are initiatives taken
    to include these functionalities that Hob has inside Toaster, which will be implemented
    in the near future.
  prefs: []
  type: TYPE_NORMAL
- en: 'The current status of the Toaster Project permits the execution in various
    setups and running modes. Each of them will be presented and accordingly defined
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Interactive mode**: This is the mode available and released with the Yocto
    Project 1.6 release version. It is based on a `toasterui` build recording component
    and a `toastergui` build inspection and statistics user interface.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Managed mode**: In addition to the Yocto Project 1.6 release version, this
    is the mode that handles build configurations, scheduling, and executions that
    are triggered from the web interface.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Remote managed mode**: This is a hosted Toaster mode and is defined for production
    because it offers support for multiple users and customized installations.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Local managed mode or** **_local_ is**: This is the mode available after
    a Poky checkout and permits running builds using the local machine code and build
    directory. It is the also used by anyone who interacts with a Toaster project
    for the first time.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'For the **interactive mode**, building with tools, such as AutoBuilder, BuildBot,
    or Jenkins, a set up separated from the hardware on which the Yocto Project builds
    are running will be required. Behind a normal instance of Toaster, there are three
    things that happen:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A BitBake server is started
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A Toaster UI is started and connected to the BitBake server as well as to an
    SQL database
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A web server is started for the purpose of reading information related to a
    database and displaying it on the web interface
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There are scenarios when multiple Toaster instances are running on multiple
    remote machines, or when a single Toaster instance is shared among multiple users
    and build servers. All of them can be resolved by modifying the mode that the
    Toaster starts in and changing the SQL database and location of the web server
    accordingly. By having a common SQL database, a web server, and multiple BitBake
    servers with the Toaster user interface for each separate build directory, you
    can solve problems involved in the previously mentioned scenarios. So, each component
    in a Toaster instance can be run on a different machine, as long as communication
    is done appropriately and the components know about each other.
  prefs: []
  type: TYPE_NORMAL
- en: 'To set up an SQL server on a Ubuntu machine, a package needs to be installed,
    using the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Having the necessary packages is not enough; setting them up is also required.
    Therefore, the proper username and password for the access web server is necessary,
    along with the proper administration rights for the MySQL account. Also, a clone
    of the Toaster master branch would be necessary for the web server, and after
    the sources are available, make sure that inside the `bitbake/lib/toaster/toastermain/settings.py`
    file, the `DATABASES` variable indicates the previous setup of the database. Make
    sure that you use the username and password defined for it.
  prefs: []
  type: TYPE_NORMAL
- en: 'With the set up done, the database synchronization can begin in the following
    way:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Now, the web server can be started using the `python bitbake/lib/toaster/manage.py
    runserver` command. For background execution, you can use the `nohup python bitbake/lib/toaster/manage.py
    runserver 2>toaster_web.log >toaster_web.log &` command.
  prefs: []
  type: TYPE_NORMAL
- en: 'This may be enough for starters, but as case logs are required for the builds,
    some extra setup is necessary. Inside the `bitbake/lib/toaster/toastermain/settings.py`
    file, the `DATABASES` variable indicates the SQL database for the logging server.
    Inside the build directory, call the `source toaster start` command and make sure
    that the `conf/toaster.conf` file is available. Inside this file, make sure that
    the Toaster and build history `bbclasses` are enabled to record information about
    the package:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'After this set up is available, start the BitBake server and the logging interface
    with these commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'After this is done, the normal build process can be started and builds can
    begin while the build is running inside the web interface logs and data is available
    to be examined. One quick mention, though: do not forget to kill the BitBake server
    after you have finished working inside the build directory using the `bitbake
    –m` command.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The local is very similar to the builds of the Yocto Project presented until
    now. This is the best mode for individual usage and learning to interact with
    the tool. Before starting the setup process, a few packages are required to be
    installed, using the following command lines:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'After these packages are installed, make sure that you install the components
    required by Toaster; here, I am referring to the Django and South packages:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: For interaction with the web server, the `8000` and `8200` ports are necessary,
    so make sure that they are not already reserved for other interactions. With this
    in mind, we can start the interaction with Toaster. Using the Poky build directory
    available from the downloads in the previous chapters, call the `oe-init-build-env
    script` to create a new build directory. This can be done on an already existing
    build directory, but having a new one will help identify the extra configuration
    files available for interaction with Toaster.
  prefs: []
  type: TYPE_NORMAL
- en: 'After the build directory is set according to your needs, the `source toaster
    start` command should be called, as mentioned previously, to start Toaster. At
    `http://localhost:8000` , you will see the following screenshot if no build is
    executed:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Toaster](img/image00353.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Run a build in the console, and it will be automatically updated in the web
    interface, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Toaster](img/image00354.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: After the build is finished, the web interface will be updated accordingly.
    I closed the header image and information to make sure that only the builds are
    visible in the web page.
  prefs: []
  type: TYPE_NORMAL
- en: '![Toaster](img/image00355.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: As seen in the preceding example, there are two builds that have finished in
    the preceding screenshot. Both of them are kernel builds. The first one finished
    with success, while the second has some errors and warnings. I did this as an
    example to present the user with alternative outputs for their build.
  prefs: []
  type: TYPE_NORMAL
- en: 'The build that failed took place due to lack of memory and space on the host
    machine, as seen in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Toaster](img/image00356.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'For the failing build, a detailed fail report is available, as displayed in
    the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Toaster](img/image00357.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'The build that finished successfully offers access to a lot of information.
    The following screenshot shows interesting features that a build should have.
    It shows, for the kernel build, all the BitBake variables used, their values,
    their location, and a short description. This information is very useful for all
    developers, not only because it offers all of this at a single location, but also
    because it offers a search option that reduces the search time spent looking for
    a troublesome variable to a minimum:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Toaster](img/image00358.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: To stop Toaster, the `source toaster stop` command can be used after the execution
    activities are finished.
  prefs: []
  type: TYPE_NORMAL
- en: 'Inside a build directory, Toaster creates a number of files; their naming and
    purpose are presented in the following lines:'
  prefs: []
  type: TYPE_NORMAL
- en: '`bitbake-cookerdaemon.log`: This log file is necessary for the BitBake server'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`.toastermain.pid`: This is the file that contains `pid` of the web server'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`.toasterui.pid`: It contains the DSI data bridge, `pid`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`toaster.sqlite`: This is the database file'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`toaster_web.log`: This is the web server log file'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`toaster_ui.log`: This is the log file used for components of the user interface'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: With all of these factors mentioned, let's move to the next component, but not
    before offering a link to some interesting videos about Toaster.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Information about Toaster Manual 1.7 can be accessed at [https://www.yoctoproject.org/documentation/toaster-manual-17](https://www.yoctoproject.org/documentation/toaster-manual-17).
  prefs: []
  type: TYPE_NORMAL
- en: Autobuilder
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Autobuilder is the project responsible for QA, and a testing build is available
    inside the Yocto Project. It is based on the BuildBot project. Although this topic
    isn't dealt with in this book, for those of you interested in the BuildBot project,
    you can find more information about it in the following information box.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The starting page of Buildbot can be accssed at [http://trac.buildbot.net/](http://trac.buildbot.net/).
    You can find a guide on quick starting BuildBot at [http://docs.buildbot.net/0.8.5/tutorial/tour.html](http://docs.buildbot.net/0.8.5/tutorial/tour.html),
    and its concepts can be found at [http://docs.buildbot.net/latest/manual/concepts.html](http://docs.buildbot.net/latest/manual/concepts.html).
  prefs: []
  type: TYPE_NORMAL
- en: We are now going to address a software area that is very poorly treated by developers
    in general. Here, I am referring to the testing and quality assurance of a development
    process. This is, in fact, an area that requires more attention from us, including
    me as well. The Yocto Project through the AutoBuilder initiative tries to bring
    more attention to this area. Also, in the past few years, there has been a shift
    toward QA and **Continuous Integration** (**CI**) of available open source projects,
    and this can primarily be seen in the Linux Foundation umbrella projects.
  prefs: []
  type: TYPE_NORMAL
- en: 'The Yocto Project is actively involved in the following activities as part
    of the AutoBuilder project:'
  prefs: []
  type: TYPE_NORMAL
- en: Publishing the testing and QA plans using Bugzilla test cases and plans ([https://bugzilla.yoctoproject.org](https://bugzilla.yoctoproject.org)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Demonstrating these plans and making them accessible for everyone to see. Of
    course, for this, you will need a corresponding account.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Developing tools, tests, and QA procedures for everyone to use.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Having the preceding activities as a foundation, they offer access to a public
    AutoBuilder that shows the current status of the Poky master branch. Nightly builds
    and test sets are executed for all the supported targets and architectures and
    are all available for everyone at [http://autobuilder.yoctoproject.org/](http://autobuilder.yoctoproject.org/).
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If you do not have a Bugzilla account to access the QA activities done within
    the Yocto Project, refer to [https://wiki.yoctoproject.org/wiki/QA](https://wiki.yoctoproject.org/wiki/QA).
  prefs: []
  type: TYPE_NORMAL
- en: 'To interact with the AutoBuilder Project, the setup is defined in the `README-QUICKSTART`
    file as a four-step procedure:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: The configuration files for this project are available inside the `config` directory.
    The `autobuilder.conf` file is used to define the parameters for the project,
    such as `DL_DIR`, `SSTATE_DIR`, and other build artifacts are very useful for
    a production setup, though not so useful for a local one. The next configuration
    file to inspect is `yoctoABConfig.py`, available in the `yocto-controller` directory
    where it defines the properties for the executed builds.
  prefs: []
  type: TYPE_NORMAL
- en: 'At this point, the AutoBuilder should be running. If it is started inside a
    web interface, the result should look similar to the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Autobuilder](img/image00359.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'As it can be visible from the header of the web page, there are multiple options
    available not only for the executed builds, but also for a different view and
    perspective of them. Here is one of the visualization perspectives:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Autobuilder](img/image00360.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: This project has more to offer to its users, but I will let the rest be discovered
    through trial and error and a reading of the README file. Keep in mind that this
    project was built with Buildbot, so the workflow is very similar to it.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you were presented with a new set of components that are available
    in the Yocto Project. Here, I am referring to the Hob, Toaster, and AutoBuilder
    projects. The chapter first introduced Hob as a BitBake alternative. It was followed
    by the Toaster alternative to Hob, which also comes with a lot of interesting
    features, and although it is not at its best now, over time, it will become a
    real solution for developers who are not interested in learning a new technology.
    Instead, they only interact with a tool to get what they want in a quick and easy
    manner. This chapter finished with the AutoBuilder project that offers a QA and
    testing platform for the Yocto Project community and can be transformed in a continuous
    integration tool.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, some of the other tools will be presented, but this time,
    the focus will move a little towards the exterior of the community and also its
    small tools. We will also cover projects and tools, such as Swabber, a project
    that is continuously in a developing stage. We will also take a look at Wic, a
    little tool with great personality, and the new sensation from Linaro called LAVA.
    I hope you enjoy learning all of them.
  prefs: []
  type: TYPE_NORMAL
