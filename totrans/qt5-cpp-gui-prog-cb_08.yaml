- en: Chapter 8. Accessing Databases
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following recipes:'
  prefs: []
  type: TYPE_NORMAL
- en: Setting up SQL Driver for Qt
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Connecting to a database
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Writing basic SQL queries
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a login screen with Qt
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Displaying information from a database on a model view
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Advanced SQL queries
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**SQL** stands for **Structured Query Language**, a special programming language
    used to manage data held in a relational database management system. A SQL server
    is a database system designed to use one of the many types of SQL programming
    language to manage its data.'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'If you want to learn more about SQL, visit this link: [http://www.w3schools.com/sql/sql_intro.asp](http://www.w3schools.com/sql/sql_intro.asp).'
  prefs: []
  type: TYPE_NORMAL
- en: Qt supports several different types of SQL driver in the form of plugins/add-ons.
    However, it's very easy to integrate these drivers to your Qt project. We will
    learn how to do it in the following example.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let''s set up our SQL server before we dive into Qt:'
  prefs: []
  type: TYPE_NORMAL
- en: Before setting up Qt for SQL, we need to install and set up a MySQL server.
    There are many ways you can install it. The first method is to download MySQL
    from the official website at [http://dev.mysql.com/downloads/mysql/](http://dev.mysql.com/downloads/mysql/)
    and install it. After that, you also need to install the MySQL Workbench from
    [http://dev.mysql.com/downloads/workbench/](http://dev.mysql.com/downloads/workbench/)
    to administrate your databases.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: An alternative method is to install a third-party package that comes with MySQL
    and other useful applications, such as Apache web server, phpMyAdmin, and so on,
    all in a unified installer. Examples of such packages are XAMPP, [https://sourceforge.net/projects/xampp/](https://sourceforge.net/projects/xampp/),
    and AppServ, [https://www.appservnetwork.com/en/download/](https://www.appservnetwork.com/en/download/).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In this example, we will install XAMPP. Open up your web browser, download the
    XAMPP installer from [https://sourceforge.net/projects/xampp/](https://sourceforge.net/projects/xampp/),
    and proceed to install it on your computer.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once you have installed XAMPP, open up XAMPP Control Panel and you should see
    something like this:![How to do it…](img/B02820_08_01.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What we need is the Apache web server and the MySQL database server. Click the
    **Start** buttons next to the **Apache** and **MySQL** options on the control
    panel.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once the servers have been started, open up your web browser and visit [http://localhost/phpmyadmin/](http://localhost/phpmyadmin/).
    You will see a web interface by the name of **PhpMyAdmin** that looks like this:![How
    to do it…](img/B02820_08_02.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: phpMyAdmin is a web-based utility that help you manage your MySQL databases,
    much like the official MySQL Workbench. In my opinion, phpMyAdmin is a lot simpler
    and better suited for beginners, which is why I recommend using it instead of
    MySQL Workbench.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: By default, phpMyAdmin automatically logs in to MySQL using the default user
    account `root`, which is saved in its configuration file. We don't want to use
    that for security reasons. So the next thing we need to do is to create an account
    for ourselves. Go to the **Users** tab located at the top and once you're on that
    page, click **Add user** located at the bottom. Key in your desired username and
    password in the fields in the login information pane. Choose **Local** for the
    **Host** option for now. At the bottom, you will see options related to **Global
    privileges**; check the **Check All** option and click **Go**:![How to do it…](img/B02820_08_03.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now that you have created your user account, go to XAMPP Control Panel and click
    **Stop** for both Apache and MySQL. Then, click the **Config** button on the **Apache**
    column and select the **phpMyAdmin (config.inc.php)** option. After that, the
    `config.inc.php` file will be opened with your choice of text editor.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Search for the following line in `config.inc.php` and change the word `config`
    to `cookie`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: After that, start Apache and MySQL again by clicking the **Start** buttons.
    This way, we force phpMyAdmin to reload its configurations and apply the changes.
    Go to phpmyAdmin again from your web browser, and this time around, a login screen
    should appear on the screen:![How to do it…](img/B02820_08_04.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Log in to phpMyAdmin, then click on the **New** link located on the side bar:![How
    to do it…](img/B02820_08_05.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Key in your desired database name and press the **Create** button. Once it's
    been created, the database name will appear on the side bar. Click on the database
    name and it will bring you to another page, which displays a message, **No tables
    found in database**. Under the message, you can create your first data table by
    filling in your desired table name and the number of columns for the table:![How
    to do it…](img/B02820_08_06.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'After you click the **Go** button, you will be brought to another page where
    you will set up the new table you''re going to create. In this example, we created
    an `employee` table that consists of five columns of data: `id`, `name`, `age`,
    `gender`, and `married`:![How to do it…](img/B02820_08_07.jpg)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once you are done with that, click **Save** and now you will be able to see
    the `employee` table name appear on the side bar. We have successfully installed
    MySQL and set up our first database and data table.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: After that, we need to insert data into the database from phpMyAdmin so that
    we will be able to retrieve it in the next example. Click on the **Insert** tab
    while you're still in the `employee` table; you will then be brought to another
    page for inserting new data into the `employee` table:![How to do it…](img/B02820_08_08.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, we will proceed to set up the SQL driver for our Qt project. Basically,
    all you need to do is to go to your Qt installation folder and look for the `sqldrivers`
    folder. For example, mine is located at `C:\Qt\5.5\mingw492_32\plugins\sqldrivers`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Copy the entire `sqldrivers` folder to your project's build directory. You can
    remove the DLL files that are not relevant to the SQL server you're running. In
    our case, since we're using a MySQL server, we can delete everything except `qsqlmysql.dll`
    and `qsqlmysqld.dll`. The DLL file with the letter `d` at the back is for debug
    builds only, while the other one is for release builds. Put those DLL files in
    their respective build directories, for example, `builds/debug/sqldrivers/qsqlmysqld.dll`
    for debug builds and `builds/release/sqldrivers/qsqlmysql.dll` for release builds.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The DLL files mentioned in the previous step are the drivers that enable Qt
    to communicate with different types of SQL architecture. You may also need the
    DLL file of the SQL client library in order for the driver to work. In our case,
    we need `libmysql.dll` to be located in the same directory as our program's executable.
    You can either get it from the installation directory of MySQL or download the
    Connector/C++ package from the official website, [https://dev.mysql.com/downloads/connector/cpp/](https://dev.mysql.com/downloads/connector/cpp/).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Qt provides us with SQL drivers so that we can easily connect to different types
    of SQL servers without implementing them ourselves.
  prefs: []
  type: TYPE_NORMAL
- en: Currently, Qt officially supports SQLite, MySQL, ODBC, and PostgreSQL. SQL architectures
    that are forks from one of the supported architectures, such as MariaDB (a fork
    of MySQL), may still compatible with Qt without much problem.
  prefs: []
  type: TYPE_NORMAL
- en: If you are using an architecture that isn't supported by Qt, you can still interact
    with your SQL database indirectly by sending an HTTP request using QNetworkAccessManager
    to your backend script (such as PHP, ASP, JSP, and so on), which can then communicate
    with the database.
  prefs: []
  type: TYPE_NORMAL
- en: If you only need a simple file-based database and don't plan to use a server-based
    database, SQLite is a good choice for you.
  prefs: []
  type: TYPE_NORMAL
- en: Connecting to a database
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will learn how to connect to our SQL database using Qt's
    SQL module.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Connecting to SQL server in Qt is really simple:'
  prefs: []
  type: TYPE_NORMAL
- en: First of all, open up Qt Creator and create a new **Qt Widgets Application**
    project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Open up your project file (`.pro`) and add the SQL module to your project,
    like so:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Next, open up `mainwindow.ui` and drag seven label widgets, a combo box, and
    a checkbox to the canvas. Set the text properties of four of the labels to `Name:`,
    `Age:`, `Gender:`, and `Married:`. Then, set the `objectName` properties of the
    rest to `name`, `age`, `gender`, and `married`. There is no need to set the object
    name for the previous four labels because they're for display purposes only:![How
    to do it…](img/B02820_08_09.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'After that, open up `mainwindow.h` and add the following headers below the
    `QMainWindow` header:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, open up `mainwindow.cpp` and insert the following code to the class constructor:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Compile and run your project now and you should get something like the following:![How
    to do it…](img/B02820_08_10.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The previous example shows you how to connect to your SQL database using the
    `QSqlDatabase` class derived from the SQL module. You won't be able to access
    any of the classes related to SQL without adding the module to your Qt project.
  prefs: []
  type: TYPE_NORMAL
- en: We must tell Qt which SQL architecture we are running by mentioning it when
    calling the `addDatabase()` function. Options supported by Qt are QSQLITE, QMYSQL,
    QMYSQL3, QODBC, QODBC3, QPSQL, and QPSQL7
  prefs: []
  type: TYPE_NORMAL
- en: 'If you encounter an error message that says, **QSqlDatabase: QMYSQL driver
    not loaded**, then you should again check whether the DLL files are placed in
    the correct directory.'
  prefs: []
  type: TYPE_NORMAL
- en: We can send our SQL statements to the database through the `QSqlQuery` class,
    and wait for it to return the results, which usually are either the data you requested
    or error messages due to invalid statements.
  prefs: []
  type: TYPE_NORMAL
- en: If there is any data coming from the database server, it will all be stored
    in the `QSqlQuery` class. All you need to do to retrieve this data is to do a
    `while` loop on the `QSqlQuery` class to check for all existing records, and retrieve
    them by calling the `value()` function.
  prefs: []
  type: TYPE_NORMAL
- en: Writing basic SQL queries
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous example, we wrote our very first SQL query, which involves the
    `SELECT` statement. This time, we will learn how to use some other SQL statements,
    such as `INSERT`, `UPDATE`, and `DELETE`.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let''s create a simple program that demonstrates basic SQL query commands by
    following these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: We can use our previous project files, but there are couples of things we need
    to change. First, open up `mainwindow.ui` and replace the labels for name and
    age with line edit widgets. Then, add three buttons to the canvas and call them
    **Update**, **Insert**, and **Delete**:![How to do it…](img/B02820_08_11.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'After that, open up `mainwindow.h` and add the following variables under private
    inheritance:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, open up `mainwindow.cpp` and go to the class constructor. It is still
    pretty much the same as the previous example, except we store the database connection
    status in a Boolean variable called `connected` and we also obtain the ID of the
    data from the database and store it to an integer variable called `currentID`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, go to `mainwindow.ui` and right-click on one of the buttons we added
    to the canvas in step 1\. Select **Go to slot…** and click **OK**. Repeat these
    steps on the other button, and now you should see three slot functions being added
    to both your `mainwindow.h` and `mainwindow.cpp`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'After that, open up `mainwindow.cpp` and we will declare what the program will
    do when we click on the **Update** button:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Once you have done that, we will proceed to declare what will happen when the
    **Insert** button is clicked:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'After that, we also declare what will happen when the **Delete** button is
    clicked:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Lastly, call `QSqlDatabase::close()` at the class destructor to properly terminate
    the SQL connection before exiting the program:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Compile and run the program now and you should be able to select the default
    data from the database; then you can choose to update it or delete it from the
    database. You can also insert new data into the database by clicking the **Insert**
    button. You can use phpMyAdmin to check whether the data is being altered correctly
    or not:![How to do it…](img/B02820_08_12.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: It's very important to check whether or not the database is connected in the
    first place before we proceed to send a SQL query to the database. Therefore,
    we keep that status in a variable and use it to check before sending out any queries.
    This, however, is not recommended for complex programs that are kept open for
    long periods of time, as the database might get disconnected during these periods,
    and a fixed variable may not be accurate. In that case, it's better to check the
    actual status by calling `QSqlDatabase::isOpen()`.
  prefs: []
  type: TYPE_NORMAL
- en: The `currentID` variable is used to save the ID of the current data you obtained
    from the database. When you want to update the data or delete it from the database,
    this variable is crucial for letting the database know which data you're trying
    to update or delete. If you set your database table correctly, MySQL will treat
    each item of data as a unique entry, so you can be sure that no repeated ID will
    be produced in the database when new data is being saved.
  prefs: []
  type: TYPE_NORMAL
- en: After inserting new data into the database, we call `QSqlQuery::lastInsertId()`
    to obtain the ID of the new data and save it as a `currentID` variable, so that
    it becomes the current data that we can update or delete from the database.
  prefs: []
  type: TYPE_NORMAL
- en: It is a good habit to test your SQL queries on phpMyAdmin first before using
    them in Qt. You can instantly find out whether your SQL statements are correct
    or incorrect, instead of waiting for your project to get built, then try it out,
    then rebuild again. As a programmer, we must work in the most efficient way. Work
    hard, and work smart.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a login screen with Qt
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will learn how put our knowledge to use and create a functional
    login screen using Qt and MySQL.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Create your first functional login screen by following these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: First, open up a web browser and go to phpMyAdmin. We will create a new data
    table called `user`, which looks like this:![How to do it…](img/B02820_08_13.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, insert our first item of data into the newly created table and set the
    `employeeID` to the ID of an existing employee's data. This way, the user account
    we created will be linked to the data of one of the employees:![How to do it…](img/B02820_08_14.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: After that, open up Qt Creator and create a new **Qt Widgets Application** project.
    We will start off with `mainwindow.ui`. First, place a stacked widget on the canvas
    and make sure it contains two pages. Then, set up the two pages in the stacked
    widget like this:![How to do it…](img/B02820_08_15.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Then, on the first page of the stacked widget, click the **Edit Tab Order**
    button on top of the widget so that we can adjust the order of the widgets in
    our program:![How to do it…](img/B02820_08_16.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once you click the **Edit Tab Order** button, you will see some numbers appear
    on top of each widget in the canvas. Make sure the numbers look like this. Otherwise,
    click on the numbers to change their order. We only do this for the first page
    of the stacked widget; it's okay to keep the second page as it is:![How to do
    it…](img/B02820_08_17.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, right-click on the **Login** button and select **Go to slot…**. Then,
    make sure the **clicked()** option is selected and press **OK**. Qt will then
    create a slot function for you in your project source files. Repeat this step
    for the **Log Out** button as well.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Then, open up `mainwindow.h` and add the following headers after the line `#include
    <QMainWindow>`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'After that, add the following variable to `mainwindow.h`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Once we''re done with that, let''s open up `mainwindow.cpp` and put this code
    in the class constructor:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'After that, we will define what will happen if the **Login** button is clicked:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, we also define what will happen if the **Log Out** button is clicked:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Lastly, close the database when the main window is closed:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: Compile and run the program now and you should be able to log in with the dummy
    account. After you have logged in, you should be able to see the dummy employee
    information linked to the user account. You can also log out by clicking on the
    **Log Out** button:![How to do it…](img/B02820_08_18.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this example, we select data from the `user` table that matches the username
    and password that we have inserted into the text fields. If nothing is found,
    it means we have provided an invalid username or password. Otherwise, obtain the
    `employeeID` data from the user account and do another SQL query to look for information
    from the `employee` table that matches the `employeeID` variable. Then, display
    the data accordingly to the UI of our program.
  prefs: []
  type: TYPE_NORMAL
- en: We must set the widget order in the **Edit Tab Order** mode so that when the
    program has started, the first widget that gets focused on is the username line
    edit widget. If the user presses on the **TAB** button on the keyboard, the focus
    should switch to the second widget, which is the password line edit. Incorrect
    widget order will totally ruin the user experience and drive away your potential
    users.
  prefs: []
  type: TYPE_NORMAL
- en: Do make sure that the **echoMode** option of the password line edit is set to
    `Password`. That setting will hide the actual password inserted into the line
    edit and replace it with dot symbols for security purposes.
  prefs: []
  type: TYPE_NORMAL
- en: Displaying information from a database on a model view
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will learn how to display multiple sets of data obtained
    from our SQL database on a model view in our program.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Follow these steps to display information from a database on a model view widget:'
  prefs: []
  type: TYPE_NORMAL
- en: We will be using the database table called `employee`, which we used in the
    previous example. This time, we need a lot more data in the `employee` table.
    Open up your web browser and log in to your phpMyAdmin control panel. Add data
    for a few more employees so that we can display it later in our program:![How
    to do it…](img/B02820_08_19.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: After that, open up Qt Creator, create a new **Qt Widgets Application** project,
    and then add the SQL module to your project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, open up `mainwindow.ui` and add a table widget (not table view) from **Item
    Widget (Item-Based)** under the **Widget** box pane. Select the main window on
    the canvas and click on either the **Layout Vertically** or **Layout Horizontally**
    button to make the table widget stick to the size of the main window, even when
    it's resized:![How to do it…](img/B02820_08_20.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: After that, double-click on the table widget and a window will then appear.
    Under the **Columns** tab, add five items by clicking on the **+** button at the
    top-left corner. Name the items `ID`, `Name`, `Age`, `Gender`, and `Married`.
    Click **OK** when you're done:![How to do it…](img/B02820_08_21.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Then, right-click on the table widget and select **Go to slot…** in the pop-up
    menu. Scroll all the way down, select the **itemChanged(QTableWidgetItem*)** option
    in the pop-up window, and press **OK**. A slot function will be created in both
    your source files.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Open up `mainwindow.h` and add these private variables to our `MainWindow`
    class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'We also add the following class headers to `mainwindow.h`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'Once you''re done with that, open up `mainwindow.cpp` and we''re going to write
    tons of code there. First, we need to declare what will happen when the program
    is started. Add the following code to the constructor of the `MainWindow` class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'After that, declare what will happen when an item of the table widget has been
    edited. Add the following code to the slot function called `on_tableWidget_itemChanged()`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'Lastly, close the database at the class destructor:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: Compile and run the example now and you should be getting something like this:![How
    to do it…](img/B02820_08_22.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A table widget is similar to the one you see in spreadsheet applications such
    as Microsoft Excel and Open Office Calc. In contrast with other types of model
    viewers such as list view or tree view, table view (or table widget) is a two-dimensional
    model viewer, which displays data in the form of rows and columns.
  prefs: []
  type: TYPE_NORMAL
- en: The main difference between a table view and table widget in Qt is that a table
    widget is built on top of a table view class, which means a table widget is easier
    to use and more suitable for beginners. However, a table widget is less flexible
    and tends to be less scalable than a table view, which is not the best choice
    if you want to customize your table.
  prefs: []
  type: TYPE_NORMAL
- en: After retrieving data from MySQL, we created a `QTableWidgetItem` item for each
    of the data items and set which column and row should be added to the table widget.
    Before adding an item to the table widget, we must increase the row count of the
    table by calling `QTableWidget::setRowCount()`. We can also get the current row
    count of the table widget by simply calling `QTableWidget::rowCount()`.
  prefs: []
  type: TYPE_NORMAL
- en: The first column from the left is hidden from view because we only use it to
    save the ID of the data so that we can use it to update the database when one
    of the data items in its row has changed.
  prefs: []
  type: TYPE_NORMAL
- en: The slot function `on_tableWidget_itemChanged()` will be called when the data
    in one of the cells has changed. It will not only get called when you edit the
    data in the cell, but also when the data is first added to the table after being
    retrieved from the database. To ensure that this function is only triggered when
    we edit the data, we used a Boolean variable called `hasInit` to check whether
    we have done the initialization process (adding the first batch of data to the
    table) or not. If `hasInit` is `false`, ignore the function call.
  prefs: []
  type: TYPE_NORMAL
- en: To prevent users from entering a totally irrelevant type of data, such as inserting
    alphabets into a supposedly numerical-only data cell, we checked manually whether
    the data is anything close to what we'd expected when it's being edited. Revert
    it to a default value if it doesn't come close to anything considered as valid.
    This is of course a simple hack, which does the job but is not the most professional
    method. Alternatively, you can try to create a new class that inherits the `QItemDelegate`
    class and define how your model view should behave. Then, call `QTableWidget::setItemDelegate()`
    to apply the class to your table widget.
  prefs: []
  type: TYPE_NORMAL
- en: Advanced SQL queries
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: By following this recipe, we will learn how to use advanced SQL statements such
    as `INNER JOIN`, `COUNT`, `LIKE`, `DISTINCT`, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'You can do a lot more than just perform simple queries of SQL database:'
  prefs: []
  type: TYPE_NORMAL
- en: First of all, we need to add a few tables to our database before we can dive
    into the programming part. Open up your web browser and access your phpMyAdmin.
    We need several tables for this example to work:![How to do it…](img/B02820_08_23.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: I will show you the structure of each of the tables required for this project
    and the dummy data inserted to the tables for testing. The first table is called
    `branch`, which is used to store the IDs and names of different branches of the
    dummy company:![How to do it…](img/B02820_08_24.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Secondly, we have the `department` table, which stores the IDs and names of
    different departments of the dummy company, which is also linked to the branch
    data by the branch IDs:![How to do it…](img/B02820_08_25.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, we also have an `employee` table, which stores the information of all
    the employees in the dummy company. This table is similar to the one we used in
    the previous examples, except it has two more extra columns, namely `birthday`
    and `departmentID`:![How to do it…](img/B02820_08_26.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Other than that, we also have a table called `log`, which contains dummy records
    of the login time for each employee. The `loginTime` column can be a `timestamp`
    or `date time` variable type:![How to do it…](img/B02820_08_27.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Lastly, we have the `user` table that we also used in the previous examples:![How
    to do it…](img/B02820_08_28.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We are done with the database; let's move on to Qt. Open up Qt Creators, and
    this time, instead of choosing **Qt Widgets Application**, we create **Qt Console
    Application**:![How to do it…](img/B02820_08_29.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'After you have done creating your console project, open up your project file
    (`.pro`) and add the SQL module to your project:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, open up `main.cpp` and add the following header files to the top of the
    source file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, add the following function to display employees who are above 30 years
    old:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'After that, add this function for displaying the department and branch information
    of each employee:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, add this function, which displays employees who are working in the `New
    York` branch and are below 30 years old:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, add this function which counts the total number of female employees in
    the dummy company:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'Once you''re done with that, we will add another function, which filters the
    employee list and only displays those who have name that starts with `Ja`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, we also add another function, which displays employees who have their
    birthdays in `August`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, we add the last function, which checks who logged in to the dummy system
    on `27 April 2016` and displays their names on the terminal:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'Lastly, in our `main()` function, connect our program to the MySQL database
    and call all the functions that we have defined in the previous steps. After that,
    close the database connection and we''re done:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: Compile and run the project now and you should see a terminal window, which
    displays the filtered results from the database as defined earlier:![How to do
    it…](img/B02820_08_30.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A console application does not have any GUI at all and only shows you a text
    display in a terminal window. This is usually used in a backend system, as it
    uses fewer resources compared to a widget application. We use it in this example
    because it's faster to display the result without the need to place any widgets
    in the program, which we don't need in this case.
  prefs: []
  type: TYPE_NORMAL
- en: We separated the SQL queries into different functions so that it's easier to
    maintain the code and it doesn't become too messy. Do note that in C++, the functions
    have to be located before the `main()` function, or they will not be able to be
    called by `main()`.
  prefs: []
  type: TYPE_NORMAL
- en: There's more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `INNER JOIN` statement used in the preceding example joins two tables together
    and selects all rows from both tables, as long as there is a match between the
    columns in both tables. There are many other types of `JOIN` statement that you
    can use in MySQL (and some other types of SQL architecture), such as `LEFT JOIN`,
    `RIGHT JOIN`, `FULL OUTER JOIN`, and so on. The following diagram shows the different
    types of `JOIN` statements and their effects:'
  prefs: []
  type: TYPE_NORMAL
- en: '![There''s more…](img/B02820_08_31.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The `LIKE` statement is normally used to search for a string variable in the
    database without the full word. Notice that there are two `%` symbols, located
    before and after the search keyword.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The `DISTINCT` statement used in the previous example filters out results that
    have the exact same variable. For example, without the `DISTINCT` statement, you
    will see two versions of Larry King appear in the terminal because there are two
    records of him logging in to the system on the same day. By adding the `DISTINCT`
    statement, MySQL will eliminate one of the repeating results and ensure every
    result is unique.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You may be wondering what `d-MMMM-yyyy` stands for and why we used it in the
    preceding example. That is actually an expression supplied to the `QDateTime`
    class in Qt to display the date time result using a given format. In this case,
    it will change the date time data that we get from MySQL, `2016-08-06`, to the
    format that we specified, resulting in `6-August-2016`. For more information,
    check out Qt's documentation at [http://doc.qt.io/qt-5/qdatetime.html#toString](http://doc.qt.io/qt-5/qdatetime.html#toString),
    which has the full list of expressions that can be used to determine the format
    of the date and time string.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
