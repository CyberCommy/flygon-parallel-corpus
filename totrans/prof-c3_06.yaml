- en: Chapter 6. Styling Forms
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Styling forms is one of the most challenging tasks, especially when the form
    needs to be created as desktop and mobile. Why?
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: How to create a good structure for easy styling
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using form selectors
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to style forms
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What is possible and what not with CSS in forms
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Forms – the most known issues
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Do you know any frontend developer who hasn't built any form in HTML/CSS? Do
    you know any of them who like to do this work? Yeah… It's not simple to adjust
    it, but you need to learn to understand what you can do with HTML/CSS and where
    you need to use JavaScript code to make it easier or even possible.
  prefs: []
  type: TYPE_NORMAL
- en: 'The most known restrictions are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Usage of pseudoelements `:before` and `:after` is not allowed because the input
    has no content (`:before` and `:after` appear before or after the content)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Usage of global input styles is not good because of lots of types of inputs
    (text, password, submit)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Styling of displayed elements in the selected box is not possible at all (sometimes
    it is easier to use some JavaScript plugin to enable additional structure, which
    is easier for styling)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Forms – enable superpowers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As mentioned previously, in the input, there is no way to use `:before` and
    `:after` pseudoelements. But a quick trick to do that, which will be better described
    in the following sections, is to wrap it in some other elements. It always helps
    to keep some label and input groups and additionally allows to append the `:before`
    and `:after` pseudoelements.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, take the following bare HTML form code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Now you just need to add wrapping elements:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Where is the difference? It is easy to see it. The first form output is as
    follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Forms – enable superpowers](img/00075.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'The second form is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Forms – enable superpowers](img/00076.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: How to style simple input
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Styling input is based on the selectors `<input> <select> <textarea>`. But
    there is a problem with `<input>` types. It will gather all types:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'For password input:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Let's gather these inputs into one mostly appeared on websites' login form.
  prefs: []
  type: TYPE_NORMAL
- en: 'HTML code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'In a browser, it will appear like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to style simple input](img/00077.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Let''s change the structure a little bit with wrapping divs:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Now we have a base code to start styling:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to style simple input](img/00078.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Now we can start creating styles:'
  prefs: []
  type: TYPE_NORMAL
- en: 'SASS:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Generated CSS:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, after getting knowledge about proper selectors and adding basic CSS, our
    form looks like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to style simple input](img/00079.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Let''s look at the **Submit** button. We need to remove its border. In this
    iteration, let''s add some pseudoelements. Let''s update our SASS code as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Generated CSS:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'The resulting output is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to style simple input](img/00080.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: As we can see, we omitted the problem with `:before` and `:after` pseudoelements.
  prefs: []
  type: TYPE_NORMAL
- en: Don't forget about placeholders
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'With HTML5, we have a support in all browsers'' placeholder attribute. It gives
    us an opportunity to add a description of the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Compiled CSS:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'The resulting output is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Don''t forget about placeholders](img/00081.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Complex form based on input[type="text"] and labels
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'So let''s start with the styling of complex and elastic forms. Let''s assume
    that we need to create a form with labels and inputs, where labels are always
    on the left and inputs are resizing. Let''s bring the HTML structure:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding code will look like the following in a browser:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Complex form based on input[type="text"] and labels](img/00082.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'As you can see, it now behaves almost like it should but its inputs are not
    in 100% of width. When you change it to 100%, the label will be moved over the
    input. So what we can do is to wrap the input in an additional `div` and use a
    trick with padding and position absolute/relative. Let''s change our HTML code
    into first `fieldset`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'After this change in the first `fieldset` only, you will see how the code behaves
    with and without an additional `inputKeeper` `div`. Let''s use the following SASS
    code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'Compiled CSS:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Now what you can see in the browser is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Complex form based on input[type="text"] and labels](img/00083.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'And on a bigger screen, you will see the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Complex form based on input[type="text"] and labels](img/00084.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'As we can see, position absolute for label without an additional wrapper caused
    the problem with overlaying the label over the input. An additional wrapper gives
    us an opportunity to add a padding. In place of this padding, we can push a label
    with position absolute. After appending wrappers to the second section, it should
    look in the browser like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Complex form based on input[type="text"] and labels](img/00085.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: How to style textarea
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Styling of `textarea` is pretty simple and very comparable to the styling of
    text input. One of the differences is the opportunity to resize `textarea`. This
    is same as the `input[type="text"]` textarea which can have a placeholder so that
    you can add a styling for it. Let''s prepare simple HTML code for short investigation
    about textarea:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'Now in the browser, you will see the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to style textarea](img/00086.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Remember not to add any space or end of line in between the opening and closing
    tags because it will be treated as a content of `textarea`. This will cause a
    problem with the placeholder.
  prefs: []
  type: TYPE_NORMAL
- en: 'And SASS code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'Compiled CSS:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'In the browser, you will see the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to style textarea](img/00087.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'As values of property resize, you can use the following ones:'
  prefs: []
  type: TYPE_NORMAL
- en: '`none`: This disables resizement in both axes'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`vertical`: This enables vertical resizement and blocks horizontal resizement'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`horizontal`: This enables horizontal resizement and blocks vertical resizement'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`both`: This enables resizement in both axes'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Styling of select (drop down)
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Hell yeah… the styling of `select` (drop down) is not as simple as it should
    be. In most cases, you will need to use some JavaScript plugin to make it easier.
    But what can you do with the simple CSS/HTML code? Let''s get the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding code will generate an unstyled select box like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Styling of select (drop down)](img/00088.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'And after focus action, it gives the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Styling of select (drop down)](img/00089.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'What can we do with it now? Let''s try to add more flavor. Firstly, let''s
    wrap it into additional elements:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'Now let''s add an SASS code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'Compiled CSS:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: '![Styling of select (drop down)](img/00090.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: As you can see, this approach is pretty tricky. We made select a little bit
    wider than the container to move the native controls out. Then we added an overflow
    hidden to container. Additionally, we added the after element to add a triangle.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you gained knowledge about styling forms. It's pretty tricky
    to deal with all of them but as you can see there is always some solution (for
    example, with additional wrappers) to do that. I recommend you to create a simple
    framework with which you can deal with forms. It makes you fully prepared to style
    forms.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will try to resolve the most repeatable classic problems
    with CSS, such as the centering of elements, dealing with display types and many
    more. It will be a show of old school and new school methodologies possible with
    new CSS features.
  prefs: []
  type: TYPE_NORMAL
