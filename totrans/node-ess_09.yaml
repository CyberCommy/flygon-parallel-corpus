- en: Chapter 9. Unit Testing
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We have come this far but haven't done any testing! That's not very good, is
    it? Usually, if not always, testing is a major concern in software development.
    In this chapter, we will cover unit testing concepts with Node.
  prefs: []
  type: TYPE_NORMAL
- en: There are many testing frameworks for Node.js and in this chapter we will be
    covering Mocha.
  prefs: []
  type: TYPE_NORMAL
- en: Installing mocha
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To ensure that `mocha` gets installed everywhere, we need to install it globally.
    This can be done using the `-g` flag with `npm install`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Now, we can use Mocha through the terminal console.
  prefs: []
  type: TYPE_NORMAL
- en: Typically, we will contain all our testing code in a `test` sub-directory within
    the project. All we need to do to get our code running is run `mocha`, assuming
    we have written some tests first.
  prefs: []
  type: TYPE_NORMAL
- en: As with many (if not all) unit testing frameworks, Mocha uses assertions to
    ensure that a test runs correctly. If an error is thrown and is not handled then
    the test is considered to have failed. What assertion libraries do is throw errors
    when an unexpected value is passed, so this works well.
  prefs: []
  type: TYPE_NORMAL
- en: 'Node.js provides a simple assertion module, let''s have a look at the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'As we can see, an error is thrown if the assertion doesn''t pass. However,
    the error message provided wasn''t very handy; to fix this we can pass an error
    message as well:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: With this we can create a test.
  prefs: []
  type: TYPE_NORMAL
- en: Mocha provides many ways of creating tests, these are called *interfaces* and
    the default is called BDD.
  prefs: []
  type: TYPE_NORMAL
- en: You can view all interfaces at [http://mochajs.org/#interfaces](http://mochajs.org/#interfaces).
  prefs: []
  type: TYPE_NORMAL
- en: The **BDD** (**Behavior Driven Development**) interface can be compared to Gherkin
    where we specify a feature and a set of scenarios. It provides methods to help
    define these sets, `describe` or `context` is used to define a feature, and the
    `it` or `specify` functions are used to define a scenario.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, if we were to have a function that joins someone''s first and
    last name, the tests might look something like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'We can also add a few more tests for this; for example, if it threw an error
    in case of no object being passed:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: You can explore many more mocha-specific features at [http://mochajs.org/](http://mochajs.org/).
  prefs: []
  type: TYPE_NORMAL
- en: Chai
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Along with the many testing frameworks, there are also many assertion frameworks,
    one of which is called **Chai**. Complete documentation can be found at [http://chaijs.com/](http://chaijs.com/).
  prefs: []
  type: TYPE_NORMAL
- en: Instead of just using the built-in assertion module provided by Node.js, we
    may want to use a module such as Chai to extend our possibilities.
  prefs: []
  type: TYPE_NORMAL
- en: Chai has three sets of interfaces, should, expect, and assert. In this chapter,
    we will be covering expect.
  prefs: []
  type: TYPE_NORMAL
- en: 'When using expect, you are using natural language to describe what you want;
    for example, if you want something to exist, you can say, `expect( x ).to.exist`
    rather than `assert( !!x )`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Using natural language makes things a lot clearer for people reading your tests.
  prefs: []
  type: TYPE_NORMAL
- en: 'This language can be linked together; we have `to`, `be`, `been`, `is`, `that`,
    `which`, `and`, `has`, `have`, `with`, `at`, `of`, and `same`, which can help
    us to build sentences like:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: However, these words are only for reliability and they don't modify the result.
    There are a lot of other words that can be used to assert things, such as `not`,
    `exists`, `ok`, and many more. You can view them all at [http://chaijs.com/api/bdd/](http://chaijs.com/api/bdd/).
  prefs: []
  type: TYPE_NORMAL
- en: 'Some examples of chai in use are:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Stubbing methods
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '*If it looks like a duck, swims like a duck, and quacks like a duck, then it
    probably is a duck*.'
  prefs: []
  type: TYPE_NORMAL
- en: As you write your tests you want to be only be testing `units` of code. Generally
    this will be a method, provide it some input, and expect an output of some kind,
    or if it is a `void` function, expect nothing to be returned.
  prefs: []
  type: TYPE_NORMAL
- en: With this in mind, you have to think of your application as being in a sandboxed
    state where it can't talk to the outside world. For example, it might not be able
    to talk to a database or make any kind of external request. Having this assumption
    is great if you are going to (and you usually should) implement continuous integration
    and deployment. It also means that there are no external requirements for the
    machine you are testing on except for Node.js and the testing framework, which
    could just be a part of your package anyway.
  prefs: []
  type: TYPE_NORMAL
- en: Unless the method you are testing is rather simple and doesn't have any external
    dependencies, you will probably want to `mock` the methods that you know it is
    going to execute. A great module to do this is called Sinon.js; it allows you
    to create `stubs` and `spies` to make sure that the correct data returns from
    other methods and to ensure that they were called in the first place.
  prefs: []
  type: TYPE_NORMAL
- en: '`sinon` provides many helpers, as mentioned before and one of these is called
    a **spy**. A spy is used mainly to just wrap a function to see what its input
    and output was. Once a spy has been applied to a function, to the outside world
    it behaves exactly the same.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'We can use a spy to check if a function was called:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Or what arguments were passed for each call:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'If we provided `spy` with an object and a method to replace then we can restore
    the original once we are finished. We will usually do this in the `tear down`
    of our test:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: We also have a `stub` function, which inherits all the functionality of `spy`
    but instead of calling the original function it completely replaces it.
  prefs: []
  type: TYPE_NORMAL
- en: 'This is so we can define the behavior, for example, what it returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'We can also define a return value for a set of arguments passed:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s say we had this set of methods:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Now, we only care about the scenario where a user is returned, as the `getUser`
    function will throw an error if it can't find it. Knowing this, we just want to
    test that when a user is found it returns their name.
  prefs: []
  type: TYPE_NORMAL
- en: 'This is a perfect example of when we want to `stub` a method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: Instead of replacing the function we can also pass the function using the scope,
    replacing this with the object we passed; either way is sufficient.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Everything we need to create a Node.js application is now at our fingertips.
    Testing is just one of those things that are essential to any successful software.
    We covered using mocha as a testing framework and chai as an assertion framework.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will cover using another language with Node.js, CoffeeScript!
  prefs: []
  type: TYPE_NORMAL
- en: 'Prepared for Bentham Chang, Safari ID bentham@gmail.com User number: 2843974
    © 2015 Safari Books Online, LLC. This download file is made available for personal
    use only and is subject to the Terms of Service. Any other use requires prior
    written consent from the copyright owner. Unauthorized use, reproduction and/or
    distribution are strictly prohibited and violate applicable laws. All rights reserved.'
  prefs: []
  type: TYPE_NORMAL
