- en: Chapter 2. Setting Up an Angular 2 Development Environment with angular-cli
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Angular 2 takes advantage of modern web technologies and tools, which means
    the development environment becomes more sophisticated and requires some tools
    and their understanding.
  prefs: []
  type: TYPE_NORMAL
- en: Luckily, we don't need to spend time installing and configuring all the required
    dependencies and wiring everything together. We can use the angular-cli (command-line
    tool) that is being developed in parallel with Angular 2.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will walk through setting up our development environment
    with angular-cli: how to install it and how to use it to kickstart our Angular
    2 project in minutes.'
  prefs: []
  type: TYPE_NORMAL
- en: Node and npm
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Before we can start using angular-cli, we need to install Node.js on our machine.
    Node is a JavaScript runtime built on Chrome's V8 JavaScript engine. It enables
    JavaScript to run without a browser, which leads to the development of many development
    tools that we use today, such as task runners, compilers, linters, and module
    loaders. The modern web frontend development environment relies on these tools.
  prefs: []
  type: TYPE_NORMAL
- en: Installing Node
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Node is cross-platform, so it can run on any popular operating system. The easiest
    way to install `node` is by downloading the official installer for your operating
    system. To do this, go to [https://nodejs.org/en/](https://nodejs.org/en/) and
    find the official installer for Windows, Macintosh, or Linux. Currently, Node
    releases have two major paths—a **Long Time Support** (**LTS**) and a stable version.
    For this book, we will use the LTS version of Node. Make sure to download the
    Node 4.24.53 LTS version installer.
  prefs: []
  type: TYPE_NORMAL
- en: After you download and run the installer successfully, open your terminal (or
    command line in Windows) and type `node -v`. This command should print the current
    version of `node` that you just installed; in our case, it should be `4.24.53`,
    or greater.
  prefs: []
  type: TYPE_NORMAL
- en: We use `node` as the JavaScript engine that our development environment tools
    depend on. The version that was mentioned here does not have any special meaning
    due to the fact that we won't write any Node.js code throughout this book, but
    the other tools we use will.
  prefs: []
  type: TYPE_NORMAL
- en: Note! The angular-cli tool will work with any version of node larger than 4.x,
    so you can use another installation if you like.
  prefs: []
  type: TYPE_NORMAL
- en: Introducing npm
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Npm is a package manager for node. It is bundled with the node installer. If
    you installed `node` successfully in the previous step, npm should be ready to
    use. To make sure it is installed properly, open the terminal (command line on
    Windows) and type `npm -v`. This command should print the `npm` version. It should
    be 3 or greater.
  prefs: []
  type: TYPE_NORMAL
- en: We use `npm` to install the dependencies we need both for development and for
    runtime. Npm searches for those packages in the `npm` registry, which currently
    contain more than 1,90,000 packages (and growing). You can either visit [https://www.npmjs.com/](https://www.npmjs.com/)
    and search for packages, or use the `npm cli` for searching, installing, and managing
    packages. Npm also helps us manage the project life cycle as we will see next.
  prefs: []
  type: TYPE_NORMAL
- en: Installing angular-cli
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We will use `npm` to install angular-cli on our workstation. To do so, follow
    these simple steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Launch the `Terminal` (or command line in Windows).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Type: `npm install -g angular-cli@latest` and press *Enter* (in Windows, you
    might need to run this command as an administrator).'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: That's it! The `angular-cli` is now installed on your machine, and, because
    we used the flag `-g` with our `npm install` command, `angular-cli` exposed an
    `ng` alias that is available from anywhere. `(-g` stands for `global`, which means
    the module was installed on a system-level directory).
  prefs: []
  type: TYPE_NORMAL
- en: Generating an Angular 2 project
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The first command that we will use with `angular-cli` is `new`. This command
    will create a folder structure for our project and install all the required dependencies.
    Along with the basic Angular 2 files and modules, `angular-cli` will install modules
    for testing, linting, and documenting our code. This book is all about components,
    so we won''t touch most of this stuff. You can read more about the available commands
    on the official angular-cli page: [https://cli.angular.io/](https://cli.angular.io/).'
  prefs: []
  type: TYPE_NORMAL
- en: 'To generate a new project, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Launch the `Terminal` (or command-line in Windows).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Type `ng new ng_components` and press *Enter*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The `angular-cli` software will generate a new project under the current directory:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Generating an Angular 2 project](../Images/image00093.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Note that the last line prints: `Installing packages for tooling via npm`.
    The `angular-cli` tool will download all the required modules using standard `npm`
    command behind the scenes.'
  prefs: []
  type: TYPE_NORMAL
- en: That's it! You just generated a complete Angular 2 project with everything you
    need already configured and wired.
  prefs: []
  type: TYPE_NORMAL
- en: 'To serve it on top of a development server, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Navigate using `cd` into the directory you just created by typing: `cd ng_components.`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Type `ng serve` and sit back.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Wait until `angular-cli` prints the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Generating an Angular 2 project](../Images/image00094.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'If you see something related to Brocolli, its because a previous version of
    `angular-cli` was not properly uninstalled. In such cases, use the following commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Then you can reinstall the tool as described in the chapter, using this command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Behind the scenes, `angular-cli` builds the project, launches a server and
    serves the application. All we need to do know is launch our browser and point
    it to `http://localhost:4200`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Generating an Angular 2 project](../Images/image00095.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: There is a lot going on behind the scenes. The angular-cli tool uses various
    other tools like `webpack` to perform its magic. These tools are beyond the scope
    of this book, but you can read all about it in the angular-cli documentation on
    GitHub at [https://github.com/angular/angular-cli](https://github.com/angular/angular-cli).
  prefs: []
  type: TYPE_NORMAL
- en: Choosing an IDE
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: While Angular 2 applications can be developed with a plain text editor, working
    with an IDE (integrated develop environment) is highly recommended. Personally,
    I'm using `webstorm` ([https://www.jetbrains.com/webstorm/](https://www.jetbrains.com/webstorm/)),
    which offers complete support for Angular out of the box. If you are looking for
    a free, open source alternative, we have `VSCode` ([https://code.visualstudio.com/](https://code.visualstudio.com/)),
    which also supports Angular 2 naturally. Both of them offer Angular code inspection
    and highlighting along with refactoring and autocomplete features. WebStorm offers
    a complete integration with almost every JavaScript tool out there and is considered
    by many to be the best JavaScript IDE out there.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we learned how to use angular-cli to create, configure, and
    serve a new Angular 2 project in minutes. This tool is helping us as developers
    to focus on our application code rather than on configurations.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will get familiar with the TypeScript language, focusing
    on the important features for building Angular 2 components (and all the rest
    of the project).
  prefs: []
  type: TYPE_NORMAL
