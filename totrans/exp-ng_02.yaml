- en: Migrating AngularJS App to Angular App
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将AngularJS应用程序迁移到Angular应用程序
- en: We all know Angular has had loads of improvements and has been designed from
    scratch. So, one of the most bugging questions among the Angular developers is
    how can we migrate existing AngularJS applications into Angular. In this chapter,
    we are going to discuss best practices, approaches, and tools recommended to successfully
    migrate existing AngularJS applications.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 我们都知道Angular有很多改进，并且是从头开始设计的。因此，Angular开发人员中最令人困扰的问题之一是如何将现有的AngularJS应用程序迁移到Angular。在本章中，我们将讨论成功迁移现有AngularJS应用程序所推荐的最佳实践、方法和工具。
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Migration process
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 迁移过程
- en: Syntax difference
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 语法差异
- en: Benefits of upgrading to Angular
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 升级到Angular的好处
- en: Rules for incremental upgrade to Angular
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 升级到Angular的规则
- en: Incremental upgrading using UpgradeAdapter
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用UpgradeAdapter进行增量升级
- en: Components migration
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 组件迁移
- en: Roadmap from AngularJS to Angular
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从AngularJS到Angular的路线图
- en: Migration process
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 迁移过程
- en: AngularJS and Angular differ syntactically and conceptually. So the migration
    process involves code change not only on a syntactical level but also in implementation.
    The Angular team made the life of the developers easier by providing built-in
    tools in Angular for migrating AngularJS applications to Angular. There is some
    preliminary process to do in our existing AngularJS applications before starting
    up the migration process.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: AngularJS和Angular在语法和概念上有所不同。因此，迁移过程不仅涉及在语法层面上的代码更改，还涉及实现层面的更改。Angular团队通过在Angular中提供内置工具，使开发人员更容易将AngularJS应用程序迁移到Angular。在开始迁移过程之前，我们的现有AngularJS应用程序中有一些初步过程要做。
- en: The preliminary process involves decoupling the existing code and making the
    existing code maintainable. This preliminary process not only prepares the code
    for upgradation, but will also improve the performance of the existing AngularJS
    applications.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 初步过程涉及解耦现有代码并使现有代码可维护。这个初步过程不仅为升级代码做好准备，还将改善现有的AngularJS应用程序的性能。
- en: We can follow an incremental approach by running both AngularJS and Angular
    in the same application and initiate the migration process one by one starting
    from the components. This approach helps to migrate large applications, isolating
    the business from any impact and completing the upgradation over a period of time.
    This approach can be achieved using the Angular upgrade module.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过在同一个应用程序中同时运行AngularJS和Angular，并逐个启动迁移过程，从组件开始逐步迁移。这种方法有助于迁移大型应用程序，将业务与任何影响隔离开，并在一段时间内完成升级。这种方法可以使用Angular升级模块实现。
- en: Syntax difference between Angular and AngularJS
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Angular和AngularJS之间的语法差异
- en: Angular has different syntax compared to AngularJS in many ways. Let us see
    few of them here.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: Angular在许多方面与AngularJS的语法不同。让我们在这里看一些。
- en: Local variables and bindings in templates
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 模板中的本地变量和绑定
- en: A template is a view that deals with the UI part of an application that is written
    in HTML. First we will see the syntax differences for One-way Data Binding.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 模板是处理应用程序的UI部分的视图，使用HTML编写。首先，我们将看到单向数据绑定的语法差异。
- en: 'AngularJS:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: AngularJS：
- en: '[PRE0]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Angular:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: Angular：
- en: '[PRE1]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Both the code snippets show the One-way Data Binding that binds the book and
    author name to the UI using the double-curly braces. However, the AngularJS prefixes
    with the alias of controller when referring the properties of the controller to
    bind to the template and Angular does not use prefixes with the alias, as the
    view or template is associated with the component by default.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '这两个代码片段都显示了单向数据绑定，将书籍和作者名称绑定到UI，使用双大括号。然而，AngularJS在引用控制器的属性以绑定到模板时会加上控制器的别名前缀，而Angular不会使用别名前缀，因为视图或模板默认与组件关联。 '
- en: Filters and pipes in templates
  id: totrans-23
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: AngularJS filters are now called as pipes in Angular. The filters are used after
    the pipe character (`|`) in AngularJS and there is no syntactical change in Angular.
    However, Angular calls the filters as pipes.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
- en: 'AngularJS:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Angular:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Notice we have applied a date pipe or filter to `releaseDate` and there is no
    syntactical change between AngularJS and Angular.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
- en: Local variables in templates
  id: totrans-30
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let us see the example of using local variables in `ng-repeat` and `ngFor` in
    AngularJS and Angular, respectively.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
- en: 'AngularJS:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Angular:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Notice that the local variable book is implicitly declared in AngularJS and
    in Angular the let keyword is used to define the local variable book.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
- en: Angular app directives
  id: totrans-37
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: AngularJS allowed declarative bootstrapping the application using the `ng-app`
    directive. But, Angular doesn't support declarative bootstrapping. It supports
    only bootstrapping the application explicitly by calling the bootstrap function
    and passing the root component of the application.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
- en: 'AngularJS:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Angular:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Notice that in AngularJS, the Angular module name `packtPub` has been assigned
    to the `ng-app` directive. However, in Angular, we pass `AppModule` to the bootstrap
    module as per the execution environment. Notice that `AppModule` is the `NgModule`
    class, which is the root module of the application that we just bootstrapped as
    per the execution environment.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
- en: Handling the CSS classes
  id: totrans-44
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: AngularJS provides the `ng-class` directive to include or exclude CSS classes.
    Similarly, Angular has the `ngClass` directive to apply or remove CSS classes
    based on the expression. Class binding is another better option provided by Angular
    to add or remove a CSS class.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
- en: 'AngularJS:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Angular:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Notice the class binding applied to the second `div` in Angular.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
- en: Binding click event
  id: totrans-51
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: AngularJS provides an event based directive, `ng-click`, that can bind a `click`
    event to a method in an associated controller. Angular achieves the same by using
    native DOM elements which can be targeted with the `( )` syntax and it accomplishes
    this by combining One-way Data Binding with the `event` binding.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
- en: 'AngularJS:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Angular:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Notice that in Angular, the target event click is defined inside the parentheses
    and the method from the component is specified in quotes.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
- en: Controllers and components in templates
  id: totrans-58
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: AngularJS provides the `ng-controller` directive to attach a controller to the
    view and ties the view to the controller related to that view. Angular doesn't
    support the controller and the `ng-controller` directive to associate a controller
    to the view. The component agrees its associated view or template and not vice
    versa.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
- en: 'AngularJS:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Angular:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: In AngularJS, we define controllers using **Immediately Invoked Function Expressions**
    (**IIFE**). In Angular, we define components using TypeScript classes decorated
    with `@Component`, providing the metadata such as `selector`, `templateUrl`, and
    others.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
- en: 'AngularJS:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Angular:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Benefits of upgrading to Angular
  id: totrans-69
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let us see some of the benefits of upgrading to Angular:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
- en: '**Better performance**: Angular supports faster change detection, faster bootstrap
    time, view caching, template pre-compilation, and so on.'
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Server-side rendering**: Angular has been split up into an application layer
    and a render layer. This enables us to run Angular in web workers or even servers
    other than browsers.'
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**More powerful templating**: Angular introduces new template syntax that removes
    many directives and integrates better with web components and other elements.'
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Better ecosystem**: The Angular ecosystem will eventually get better and
    more interesting in the future.'
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Strategies to upgrade to Angular
  id: totrans-75
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'There are different upgrade strategies available to migrate to Angular. They
    are as follows:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
- en: '**One time**: Replacing the entire AngularJS app, rewriting the code in Angular
    starting at one point.'
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Incremental**: Upgrading the existing app one service or component at a time,
    running AngularJS and Angular side by side.'
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If the AngularJS app is small, then rewriting at one time is probably the easiest
    and fastest way to upgrade. If the AngularJS app is larger and can't rewrite the
    whole code at once, we need to rewrite step by step, component by component, service
    by service. This is called incremental upgrading. However, running `ng1` and `ng2`
    side by side has performance implications.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
- en: Rules for incremental upgrade to Angular
  id: totrans-80
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'It will be easier to do an incremental upgrade if we adhere to the following
    set of rules:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
- en: Implement one component per file; it helps to isolate the components and migrate
    them one by one.
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Apply modular programming and arrange the folder by features; this will enable
    the developers to concentrate on migrating one feature at a time.
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use a module loader; following the preceding rules, you will end up with a large
    number of files in a project. This creates the hassle of organizing the files
    and referring them in the correct order in the HTML pages. When you use a module
    loader such as `SystemJS`, `Webpack`, or `Browserify`, it enables us to use TypeScript
    built-in module systems. This enables the developers to import or export features
    explicitly and share them between various parts of the application in the code.
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Install TypeScript first; it is good to bring in the TypeScript compiler before
    starting the actual upgrade process. This can be achieved by a simple step of
    installing the TypeScript compiler.
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use Component Directives; it is good practice to use Component Directives rather
    than `ng-controller` and `ng-include` in the AngularJS apps so that in Angular,
    migrating the Component Directives will be much easier than migrating the controllers.
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Incremental upgrading using UpgradeAdapter
  id: totrans-87
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Incremental upgrading can be done seamlessly using `UpgradeAdapter`. `UpgradeAdapter`
    is a service that can bootstrap and manage hybrid applications that support both
    Angular and AngularJS code. `UpgradeAdapter` enables you to run both AngularJS
    and Angular code simultaneously. `UpgradeAdapter` facilitates interoperability
    between components and services from one framework to another framework. The interoperability
    in Dependency Injection, the DOM, and change detection will be taken care of by
    `UpgradeAdapter`.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
- en: Injecting AngularJS dependencies to Angular
  id: totrans-89
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We may come across a scenario where the business logic on AngularJS services
    or any built-in services, such as `$location` or `$timeout`, is to be injected
    to Angular code. This can be handled by upgrading the AngularJS provider to Angular
    and injecting it into Angular code wherever required.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
- en: Injecting Angular dependencies to AngularJS
  id: totrans-91
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Sometimes it may be necessary to downgrade Angular dependencies in order to
    use them in AngularJS code. This is necessary when we have a situation to migrate
    existing services to Angular or create new services in Angular where the components
    written in AngularJS are depending on them.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
- en: Components migration
  id: totrans-93
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Designing AngularJS applications by component centric is good practice rather
    than designing them by controller centric. If you had developed your application
    following this practice, then it will be easier for you to migrate. Component
    Directives in AngularJS will have their template, controller, and binding similar
    to Angular components. But make sure your AngularJS application Component Directives
    did not use the attributes such as compile, replace, priority, and terminal. If
    your application implemented Component Directives with these attributes then it
    is not liaising with Angular architecture. If your AngularJS application was developed
    using AngularJS 1.5 and the components are implemented using the component API,
    then you might have noticed the similarities in Angular components.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
- en: Roadmap from AngularJS to Angular
  id: totrans-95
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'It is good to follow this roadmap in migrating AngularJS to Angular:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
- en: JavaScript to TypeScript
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installing Angular packages
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating the AppModule
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bootstrapping your application
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Upgrading your application service
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Upgrading your application component
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding the Angular router
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let us discuss them in detail in the following sections.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
- en: JavaScript to TypeScript
  id: totrans-105
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Start your migration process by introducing TypeScript, as you will be writing
    your code using TypeScript in Angular. Installing TypeScript into your Angular
    application is quite easy. Run the following command to install TypeScript from
    `npm` into your application and save the package information to `package.json`:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Note: As the Angular package is only available on npm, we will be installing
    any new packages from npm and we will slowly phase out from the Bower package
    manager'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
- en: We also need to configure TypeScript, instructing it on transpiling the TypeScript
    code into ES5 code in the `tsconfig.json` file.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, we need to add the following commands under the scripts section of
    `package.json` that runs the TypeScript compiler in watch mode in the background
    so that the code will be recompiled as and when you make changes:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Installing Angular packages
  id: totrans-112
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We need to install Angular along with the `SystemJS` module loader. The quickest
    way to do this is by cloning the `quickstart` application from GitHub to your
    development system. Then copy the dependencies related to Angular from `package.json`
    into your application `package.json` and also copy the `SystemJS` configuration
    file `systemjs.config.js` to your application root directory. Once all this is
    done, then run the following command to install the packages we have just added
    in `package.json:`
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Add the following statement to the `index.html` file. This will help the relative
    URLs to be served from the `app` folder. This is important because we need to
    move the `index.html` file from the `app` folder to the `root` folder of the application:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Now, let us add the JavaScript file references and load Angular via `SystemJS`.
    Finally, load the actual application using the `System.import` statement:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Creating the AppModule
  id: totrans-119
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We need to create an `AppModule` for your application. The following `AppModule`
    class is defined with the minimum `NgModule`:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Here we just imported an `NgModule` from `@angular/core` and `BrowserModule`
    from `@angular/platform-browser`. Any simple browser-based Angular application
    will have such a simple `AppModule`.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
- en: Bootstrapping your application
  id: totrans-123
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: An AngularJS application will be bootstrapped by attaching the `ng-app` directive
    to the `<html>` element. This will no longer work in Angular as bootstrapping
    an Angular application differs.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
- en: 'Install the Angular upgrade package by running the following command and add
    the mapping to `system.config.js`:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'This statement also updates `package.json` with the reference to `@angular/upgrade`.
    The updated `systemjs.config.js` is shown here:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Now remove the `ng-app` attribute from the `<html>` element in the `index.html`
    file. Then we need to import `UpgradeModule` to `AppModule`. To bootstrap our
    AngularJS application in an Angular way, we need to override the `ngDoBootstrap`
    function in `AppModule` as follows:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Finally, we need to bootstrap `AppModule` in `main.ts`, which is configured
    as the entry point of the application in `system.config.js`. The code snippet
    of `main.ts` is shown here:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: Upgrading application services
  id: totrans-133
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A service in an Angular application is mostly used to supply data across the
    application and this data will be fetched from any service. In AngularJS, we have
    been using `ngResource` and `%http` to communicate with services and handling
    the data.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
- en: 'As part of the migration, we need to use the Angular HTTP module wherever we
    used `ngResource` and `$http`. To use the Angular HTTP module, we first need to
    import `HttpModule` and add it to the imports array in the `NgModule` directive
    of `AppModule` as follows:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Next replace the code snippets of your `ngResource` or `$http` based services
    in your application with the new TypeScript class decorated with the `@Injectable`
    directive as follows:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'The decorator `@Injectable` will add metadata specific to Dependency Injection
    to the `BookService` class so that Angular knows about the classes that are ready
    for Dependency Injection. We need to inject the HTTP service to the constructor
    of `BookService` and the injected HTTP service will be used to access the data
    from `books.json` to get the list of books, as follows:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'The following is the `Book` interface that can serve as a model type for a
    book:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'This Angular service is not compatible with AngularJS and cannot be injected
    directly. So we need to downgrade the `injectable` method to plug in our `BookService`
    into AngularJS code. For that we need to use a method called `downgradeInjectable`
    in `@angular/upgrade/static`:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'The complete code snippet of `BookService` is shown here:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  id: totrans-146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'Finally, we need to register `BookService` as the provider under `NgModule`
    so that Angular will keep the instance of `BookService` ready to supply wherever
    it is injected across the application. The updated code snippet of `app.module.ts`
    is shown here:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  id: totrans-148
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: Upgrading your application component
  id: totrans-149
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'As part of upgrading the components, we need to create a downgraded Angular
    component so that it can be consumed by AngularJS code. The following is the code
    snippet of the downgraded Angular component:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  id: totrans-151
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'Here, we give an instruction to the TypeScript compiler that the `directive`
    factory is returned from `downgradeComponent`. Now we need to register `downgradeComponent`
    by adding it to `entryComponents` in `AppModule`, as follows:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  id: totrans-153
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'And the updated template of `phone-list.template.html` is shown here:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  id: totrans-155
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: Here `ng-repeats` has been replaced with `*ngFor`.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
- en: Adding the Angular router
  id: totrans-157
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Angular has completely redefined the router. It is good practice to upgrade
    the router module by module. Angular has a special tag, `<router-outlet>`, that
    displays or loads the routed views. This should be in a template of the root component.
    So for your application, we need to create a root component named `AppComponent`:'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  id: totrans-159
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'This is an instruction to load the root component into `<your-app>` if it is
    found in a web page. So let us replace the `ng-view` directive in `index.html`
    with the application element `<your-app>`:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  id: totrans-161
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'We need to create another `NgModule` for routing and the code snippet is shown
    here:'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  id: totrans-163
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: Here we defined single routes in a routes object and also a default route for
    empty or the root path of the application. Then we passed the routes object to
    `RouterModule.forRoot` so that `RouterModule` will take care of it. We used `HashLocationStrategy`
    to instruct `RouterModule` to use a hash (`#`) in the fragment of the URL.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, let us update `AppModule` to import `AppRoutingModule` and also we
    have come to a stage to remove `ngDoBootstrap` as everything is Angular at this
    stage. The following is the updated code snippet of `AppModule`:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  id: totrans-166
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: Notice that we added `AppRoutingModule` to the imports collection of the `NgModule`
    attribute so that the application routing will be registered with `AppModule`.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  id: totrans-168
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Way to go! Loads of stuffs, isn't it?! We started learning about migration in
    Angular.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
- en: Then we have seen various approaches and best practices in migrating AngularJS
    to Angular applications.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
- en: Next we discussed incremental upgrading using the upgrade adapter.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
- en: Finally, we learned in detail about the roadmap in migrating from AngularJS
    to Angular.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will discuss Angular CLI, which is the command line
    interface for Angular.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
