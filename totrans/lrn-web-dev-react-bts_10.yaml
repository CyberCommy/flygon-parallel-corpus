- en: Chapter 10. Best Practices
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Before delving into the best practices to be followed while dealing with React,
    let's recap on what we have seen so far in the earlier chapters.
  prefs: []
  type: TYPE_NORMAL
- en: 'We have covered the following key points:'
  prefs: []
  type: TYPE_NORMAL
- en: What is ReactJS
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How we can build a responsive theme with React-Bootstrap and ReactJS
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: DOM interaction with React
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ReactJS-JSX
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: React-Bootstrap component integration
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Redux architecture
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Routing with React
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: React API integration with other APIs
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: React with Node.js
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: With the preceding topics, you should have a much clearer understanding about
    ReactJS, responsive themes, custom components, JSX, Redux, Flux, and integration
    with other APIs. I hope you have enjoyed this journey. Now we know where to start
    and how to write code, but it is also important to know how to write standard
    coding by following best practices.
  prefs: []
  type: TYPE_NORMAL
- en: In 2015, there were many new releases and conferences conducted for React across
    the world and now I have seen many people asking how can we write standard code
    in React?
  prefs: []
  type: TYPE_NORMAL
- en: Each individual will have their opinion about following best practices. I have
    shared some of my observations and experiences with you so far, but you might
    have different opinions.
  prefs: []
  type: TYPE_NORMAL
- en: If you want more detailed stuff, you can always visit React's official sites
    and tutorials.
  prefs: []
  type: TYPE_NORMAL
- en: Handling data in React
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Whenever we have components with dynamic functionality, data comes into the
    picture. The same applies with React; we have to deal with dynamic data, which
    seems easy but it is not every time.
  prefs: []
  type: TYPE_NORMAL
- en: Sounds confusing!
  prefs: []
  type: TYPE_NORMAL
- en: Why is it easy and tough at the same time? Because, in React components, it's
    easy to pass properties and there are many ways to build rendering trees, but
    there is not much clarity about updating the views.
  prefs: []
  type: TYPE_NORMAL
- en: In 2015, we have seen many Flux libraries and with them there have been many
    functional and reactive solutions released.
  prefs: []
  type: TYPE_NORMAL
- en: Using Flux
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In my experience, many people have misconceptions regarding Flux as to where
    it's not needed. They are using it because they have a good grip on that.
  prefs: []
  type: TYPE_NORMAL
- en: In our example, we have seen that Flux has a clear way to store and update the
    state of your application and when it is needed, it will trigger rendering.
  prefs: []
  type: TYPE_NORMAL
- en: 'Many times we have heard this: "*There are two sides to every coin"*. Likewise,
    Flux is also beneficial as well as harmful for your code. For example, it''s beneficial
    to declare global states for your application. Suppose that you have to manage
    logged in users and you are defining the state of router and active accounts;
    it will be painful when you start using Flux while managing temporary or local
    data.'
  prefs: []
  type: TYPE_NORMAL
- en: From my perspective, I would not advise using Flux just in order to manage `/items/:itemIdroute`
    related data. Instead, you can just declare it within your component and you can
    store it there. How is it beneficial? The answer is, it will have a dependency
    on your component, so when your component does not exist, it will also not exist.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding Redux-based reducer code, we are managing the `state` of the
    application as part of the reducers. It stores the previous `state` and `action`
    and returns the next state.
  prefs: []
  type: TYPE_NORMAL
- en: Using Redux
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'As we know, in SPAs, when we have to contract with state and time, it would
    be difficult to handgrip state over time. Here, Redux helps a lot. How? Because,
    in a JavaScript application, Redux handles two states: one is the data state and
    another is the UI state and this is a standard option for SPAs. Moreover, bear
    in mind that Redux can be used with AngularJS, jQuery, or React JavaScript libraries
    or frameworks.'
  prefs: []
  type: TYPE_NORMAL
- en: Redux is equal to Flux, really?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Redux is a tool whereas Flux is just a pattern which you can't use via plug
    and play or download it. I'm not denying that Redux derives some influence from
    the Flux pattern but we can't say it's 100% similar to Flux.
  prefs: []
  type: TYPE_NORMAL
- en: Let's go ahead to and look at a few differences.
  prefs: []
  type: TYPE_NORMAL
- en: Redux follows three guiding principles, as follows. We will also cover some
    differences between Redux and Flux.
  prefs: []
  type: TYPE_NORMAL
- en: Single-store approach
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: We have seen in earlier diagrams that the store is pretending to be an *intermediary*
    for all kinds of state modifications within applications and Redux is controlling
    the direct communication between two components through the store with a single
    point of communication.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here the difference between Redux and Flux is: Flux has multiple store approaches
    and Redux has a single-store approach.'
  prefs: []
  type: TYPE_NORMAL
- en: Read-only state
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In React applications, components cannot change state directly but have to dispatch
    changes to the store through `actions`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here, the `store` is an object and it has four methods, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`store.dispatch(action)`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`store.subscribe(listener)`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`store.getState()`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`replaceReducer(nextReducer)`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Reducer functions to change the state
  prefs: []
  type: TYPE_NORMAL
- en: Reducer functions will handle `dispatch` actions to change the `state` as the
    Redux tool doesn't allow direct communication between two components; thus it
    will also not change the `state` but the `dispatch` action will be described for
    the `state` change.
  prefs: []
  type: TYPE_NORMAL
- en: 'Reducers here can be considered pure functions and the following are a few
    characteristics for writing reducer functions:'
  prefs: []
  type: TYPE_NORMAL
- en: No outside database or network calls
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Returns values based on its parameters
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Arguments are *immutable*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The same argument returns the same value
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Reducer functions are called pure-functions as they are doing nothing except
    returning a value based on their set parameters; they don't have any other consequences.
  prefs: []
  type: TYPE_NORMAL
- en: In Flux or Redux architecture, it's always tough to deal with nested resources
    from an API's return, so it's recommended to have a flat state in your component
    such as `normalize`.
  prefs: []
  type: TYPE_NORMAL
- en: 'A hint for pros:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Immutable React state
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In a flat state, we have the benefit of dealing with nested resources and `immutable`
    objects, along with the benefit, that a declared state cannot be modified.
  prefs: []
  type: TYPE_NORMAL
- en: 'The other benefit of `immutable` objects is that, with their reference level
    equality checks, we can have fabulously improved rendering performance. For example,
    with `immutable` objects there is `shouldComponentUpdate`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'In JavaScript, the use of the **immutability deep freeze** node will help you
    to freeze nodes before mutation and then it will verify the results. The following
    code example shows the same logic:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'I hope that the preceding examples have clarified Immutable.js and its benefits.
    It also has uncomplicated methods but it isn''t much used:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: From my point of view, it's a very fast and beautiful feature to use.
  prefs: []
  type: TYPE_NORMAL
- en: Observables and reactive solutions
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Quite often, I have heard people asking about the alternatives to Flux and
    Redux, as they want more reactive solutions. You can find some alternatives in
    the following list:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Cycle.js**: This is a functional and reactive JavaScript framework for cleaner
    code.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**.rx-flux**: This is the flux architecture with an add on, RxJS.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**redux-rx**: This is the utilities of RxJS, used for Redux.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Mobservable**: This comes with three different flavors--observable data,
    reactive functions, and simple code.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: React routing
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We have to use routing in client-side applications. For ReactJS we also need
    another routing library, so I recommend you use `react-router`, which is provided
    by the React community.
  prefs: []
  type: TYPE_NORMAL
- en: 'The advantages of React routing are:'
  prefs: []
  type: TYPE_NORMAL
- en: Viewing declarations in a standardized structure helps us to instantly identify
    our app views
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Lazy code loading
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using `react-router`, we can easily handle the nested views and their progressive
    resolution of views
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using the browsing history feature, a user can navigate backwards/forwards and
    restore the state of the view
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Dynamic route matching
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: CSS transitions on views when navigating
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Standardized app structure and behavior, useful when working in a team
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The React router doesn't provide any way to handle data fetching. We need to
    use `async-props` or other React data fetching mechanisms.
  prefs: []
  type: TYPE_NORMAL
- en: How React will help to split your code in lazy loading
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Very few developers who are dealing with **webpack module bundler** know about
    splitting your application code into several files of JavaScript:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Why this splitting of code is necessary is because each chunk of code is not
    always useful to each user and it's not necessary to load it on each page; it
    will overburden the browser. Therefore, to avoid such a situation, we should split
    our application into several chunks.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, you may have the following question: If we have more chunks of code then
    will we have to have more HTTP requests, which will also affect performance? With
    the help of HTTP/2 multiplexed  ([https://http2.github.io/faq/#why-is-http2-multiplexed](https://http2.github.io/faq/#why-is-http2-multiplexed)),
    your problem will be resolved. Observe the following diagram:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How React will help to split your code in lazy loading](graphics/B05743_10_07-1.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Visit [http://stackoverflow.com/questions/10480122/difference-between-http-pipeling-and-http-multiplexing-with-spdy](http://stackoverflow.com/questions/10480122/difference-between-http-pipeling-and-http-multiplexing-with-spdy) 
    for more information.
  prefs: []
  type: TYPE_NORMAL
- en: You can also combine your chunked code with chunk hashing, which will also optimize
    your browser cache ratio whenever you change your code.
  prefs: []
  type: TYPE_NORMAL
- en: JSX components
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: JSX is, in simple words, just an extension of JavaScript syntax. And if you
    observe the syntax or structure of JSX, you will find it to be similar to XML
    coding.
  prefs: []
  type: TYPE_NORMAL
- en: JSX performs preprocessor footsteps that add XML syntax to JavaScript. You can
    certainly use React without JSX but JSX makes React a lot more neat and elegant.
    Similar to XML, JSX tags have tag names, attributes, and children. JSX is also
    similar to XML in that, if an attribute value is enclosed in quotes, that value
    becomes a string.
  prefs: []
  type: TYPE_NORMAL
- en: XML works with balanced opening and closing tags; JSX works similarly and it
    helps make large trees which are easier to read than *function calls* or *object
    literals*.
  prefs: []
  type: TYPE_NORMAL
- en: 'The advantages of using JSX in React are:'
  prefs: []
  type: TYPE_NORMAL
- en: JSX is much simpler to understand than JavaScript functions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Mark-up in JSX is more familiar to the designer and the rest of your team
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Your mark-up becomes more semantic, structured, and meaningful
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How easy is it to visualize?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As I said, the structure and syntax are so easy to visualize and notice in JSX.
    They are intended to be more clear and readable in JSX format compared to JavaScript.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following simple code snippets will give you a clearer idea. Let''s see
    a plain JavaScript `render` syntax:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Lets look at the following JSX syntax:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Hopefully, it's very clear to you that it is much easier for non-programmers
    already familiar with HTML to work with JSX than with JavaScript.
  prefs: []
  type: TYPE_NORMAL
- en: Acquaintance or understanding
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In the development region, there are many teams such as non-developers, UI developers,
    and UX designers who are acquainted with HTML, and quality assurance teams who
    are responsible for thoroughly testing the product.
  prefs: []
  type: TYPE_NORMAL
- en: JSX is a great way to clearly comprehend this structure in a solid and concise
    way.
  prefs: []
  type: TYPE_NORMAL
- en: Semantics/structured syntax
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Until now, we have seen how JSX syntax is easy to understand and visualize.
    Behind this there is a big reason for having a semantic syntax structure.
  prefs: []
  type: TYPE_NORMAL
- en: JSX easily converts your JavaScript code into a more semantic, meaningful, and
    structured mark-up. This gives you the benefit of declaring your component structure
    and information using an HTML-like syntax, knowing it will transform into simple
    JavaScript functions.
  prefs: []
  type: TYPE_NORMAL
- en: React outlines all the HTML elements you would expect in the `React.DOM` namespace.
    The good part is that it also allows you to use your own written, custom components
    within the mark-up.
  prefs: []
  type: TYPE_NORMAL
- en: 'Please check out the following HTML simple mark-up and see how the JSX component
    helps you have a semantic mark-up:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'After wrapping this in a `divider` React composite component, you can use it
    like you would use any other HTML element with ease, and with the added benefit
    of a mark-up with better semantics:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Using classes
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Observe the following code snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: You may have observed that in the preceding code, the `React.Component` is being
    used in place of `creatClass`. There is nothing problematic if you use either
    of these, but many developers do not have a clear understanding about this and
    they mistakenly use both.
  prefs: []
  type: TYPE_NORMAL
- en: Using PropType
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Knowledge of properties is a must; it will give you more flexibility to extend
    your component and save you time. Please refer to the following code snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: You can also validate your properties, the way we can validate properties for
    Immutable.js with React `ImmutablePropTypes`.
  prefs: []
  type: TYPE_NORMAL
- en: Benefits of higher-order components
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Observe the following code snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Higher-order components are just extended versions of your original component.
  prefs: []
  type: TYPE_NORMAL
- en: 'The main benefit of using them is that we can use them in multiple situations,
    for example in authentication or login validation:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: The other benefit is that, with higher-order components, you can fetch data
    separately and set your logic to have your views in a simple way.
  prefs: []
  type: TYPE_NORMAL
- en: Redux architectural benefits
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Compared to other frameworks, the Redux architecture has more plus points:'
  prefs: []
  type: TYPE_NORMAL
- en: It might not have any other side-effects
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: As we know, binding is not needed because components can't interact directly
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: States are managed globally so there is less possibility of mismanagement
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Sometimes, for middleware, it would be difficult to manage other side effects
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: From the aforementioned points, it's very clear that the Redux architecture
    is very powerful and it has reusability as well.
  prefs: []
  type: TYPE_NORMAL
- en: Customizing Bootstrap for your app
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'While reviewing best practices in React, how can we forget about the look and
    feel of our app? When we talk about responsiveness and wonderful components only
    one name comes to mind: Bootstrap. Bootstrap gives us a magic wand to achieve
    the best with less effort and also saves the money.'
  prefs: []
  type: TYPE_NORMAL
- en: These days, responsiveness is very important, or should I say, it's mandatory.
    While making your application, you should include Bootstrap in your package and
    you can leverage Bootstrap classes, Bootstrap grids, and Bootstrap-ready components.
    Moreover, Bootstrap's responsive themes are also available; some are free and
    some need to be paid for, but they are very useful. Earlier, we were writing media
    queries in CSS to achieve responsiveness but Bootstrap has really helped us by
    saving our time, efforts, and the client's money by providing wonderful ready-made
    features.
  prefs: []
  type: TYPE_NORMAL
- en: Bootstrap content - typography
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'You might have observed that in the Bootstrap package, Bootstrap is using Helvetica
    font type, which is commonly used worldwide. So you only have the choice of using
    Helvetica, but you can also have some custom fonts, which you can find at [https://www.google.com/fonts](https://www.google.com/fonts).
    For example, if I wanted the **Lato** font from the Google library then I can
    select the font from there and choose the required font in the package, as shown
    in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Bootstrap content - typography](graphics/image_10_002.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Now the questions are: How can I use this font in my system? Should I download
    it? Or what is the way out? There is a very simple way, as we have seen in the
    preceding screenshot; the same dialog box has a tab called **EMBED**.'
  prefs: []
  type: TYPE_NORMAL
- en: '![Bootstrap content - typography](graphics/image_10_003.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'When you click on that, it will show you the following screen:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Bootstrap content - typography](graphics/image_10_004.jpg)'
  prefs: []
  type: TYPE_IMG
- en: As shown in the **@IMPORT** tab, you can copy that line from `@import url()`
    and add it to your `bootstrap.less` file or `bootstrap.scss` file at the top of
    all the CSS. Then you can us the Lato font family in your application.
  prefs: []
  type: TYPE_NORMAL
- en: Moreover, you can also customize other font properties, such as font size, font
    color, and font style, if required.
  prefs: []
  type: TYPE_NORMAL
- en: Bootstrap component - navbar
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In any application, the navigation flow is very important and the Bootstrap
    `navbar` gives you a way to build responsive navigation with several options.
    You can even customize it by defining its size, color, and type, as shown in the
    following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'As seen in the preceding code, we can define whatever color we want in line
    with the expected look and feel of our `navbar` and its links:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Not only for desktops but also for mobile navigation, you can customize the
    `navbar default` color settings as per your requirements:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'You can even set the `height` and `border` settings of `navbar`, as shown in
    the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: Bootstrap component - forms
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Forms are very commonly used to get data from the user, where you can use form
    elements and create components such as inquiry form, registration form, login
    form, contact us form, and so on. Bootstrap also provides the `form` component
    and its benefit lies in its responsive behavior. It is also customizable.
  prefs: []
  type: TYPE_NORMAL
- en: There are a couple of files in the Bootstrap package where you can change form-related
    CSS and get the expected output.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, changing the `input` field `border-radius` CSS property:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'Changing the `border-focus` color for the `input` field:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: What I very much like in Bootstrap's latest version is that it has separate
    sections for each component/element like React does. For example, in mixins, you
    can see separate files, which have the respective CSS properties only, so they
    are be easy to understand, debug, and change.
  prefs: []
  type: TYPE_NORMAL
- en: 'Form control (`.form-control`) is one of the beautiful features of the Bootstrap
    `form` component and you can see in the following code how easy it is to make
    custom changes:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'In the preceding example, we have seen how we can customize border colors,
    outlines, and box shadows; if you don''t want a box shadow then you can comment
    out that particular line and see the output without the box shadow, as shown in
    the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: You might have observed that I have commented code with `//`, which we generally
    do in JavaScript but it is also valid here and we can also use the CSS standard
    comment `/* */` to comment one line of code or multiple lines of code in CSS.
  prefs: []
  type: TYPE_NORMAL
- en: Bootstrap component - button
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The Bootstrap component also has a ready-made component called `button`, so
    whatever button we are composing in our application, we can use Bootstrap classes
    to enhance it. The Bootstrap `button` component has different sizes, colors, and
    states, which can be customized as per your requirements:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Bootstrap component - button](graphics/image_10_005.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'We can also achieve a similar look and feel for states by using Bootstrap''s
    button classes as defined here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'While writing HTML code for a button, you can define the Bootstrap class in
    the `button` tag of your application:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'In previous chapters, we have also used Bootstrap classes to achieve responsiveness
    and the default components of Bootstrap. You can see one example of a `button`
    in the following screenshot, where I have defined the following code. We can also
    change the color of all the defined `button` states:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'Refer to the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Bootstrap component - button](graphics/B05743_10_05-2.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Bootstrap themes
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As I said earlier, Bootstrap also provides ready-made responsive themes, which
    we should use if required. For more details, you can check out [http://getbootstrap.com/examples/theme/](http://getbootstrap.com/examples/theme/).
  prefs: []
  type: TYPE_NORMAL
- en: 'You can also visit the following references to learn about more options for
    Bootstrap themes:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://www.blacktie.co/](http://www.blacktie.co/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://wrapbootstrap.com/](https://wrapbootstrap.com/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[http://startbootstrap.com/](http://startbootstrap.com/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[http://bootswatch.com/](http://bootswatch.com/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bootstrap responsive grid system
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The Bootstrap grid system has some predefined classes and behaviors, so it would
    be very helpful to set your page layout and set different behaviors for the same
    layout in different devices and resolutions.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following screenshot shows you the setup of the mobile and desktop columns:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Bootstrap responsive grid system](graphics/image_10_007.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The following screenshot shows you the setup of the mobile, tablet, and desktop
    columns:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Bootstrap responsive grid system](graphics/image_10_008.jpg)'
  prefs: []
  type: TYPE_IMG
- en: This is how you can use predefined classes to set your columns. In small and
    medium-sized devices, they will automatically adjust your data to fit the resolution
    without breaking your user interface.
  prefs: []
  type: TYPE_NORMAL
- en: Lastly, I would like to inform you about some *Things to remember* while dealing
    with ReactJS.
  prefs: []
  type: TYPE_NORMAL
- en: Interesting information about ReactJS and Bootstrap projects
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: ReactJS and Bootstrap are both massively used and followed by communities in
    the developer world. There are millions of projects running on these two frameworks,
    so obviously there is a dedicated team behind these two successful frameworks.
  prefs: []
  type: TYPE_NORMAL
- en: 'Bootstrap is always launching something new and useful with their latest versions,
    or extensions, to their core area. We all know that Bootstrap is owned by Twitter
    Bootstrap and two developers should get the credit for its success: Mark Otto
    (`@mdo`) and Jacob Thornton (`@fat`)'
  prefs: []
  type: TYPE_NORMAL
- en: 'There are many useful websites on Bootstrap, worth visiting in the searc for
    increased knowledge:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://www.getbootstrap.com](http://www.getbootstrap.com) | Twitter: `@twbootstrap`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[http://expo.getbootstrap.com](http://expo.getbootstrap.com) | Twitter: Mark
    Otto (`@mdo`)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[http://www.bootsnipp.com](http://www.bootsnipp.com) | Twitter: `@BootSnipp`
    and Maksim Surguy (`@msurguy`)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[http://codeguide.co/](http://codeguide.co/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[http://roots.io/](http://roots.io/) | Twitter: Ben Word (`@retlehs`)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[http://www.shoelace.io](http://www.shoelace.io) | Twitter: Erik Flowers (`@Erik_UX`)
    and Shaun Gilchrist'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://github.com/JasonMortonNZ/bs3-sublime-plugin](https://github.com/JasonMortonNZ/bs3-sublime-plugin) |
    Twitter: Jason Morton (`@JasonMortonNZ`)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[http://fortawesome.github.io/Font-Awesome/](http://fortawesome.github.io/Font-Awesome/) |
    Twitter: Dave Gandy (`@davegandy`)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[http://bootstrapicons.com/](http://bootstrapicons.com/) | Twitter: Brent Swisher
    (`@BrentSwisher`)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Helpful React projects
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'At the beginner level, many developers find React very confusing but if you
    learn it by heart, interest, and know it in and out, you will love it. There are
    many open source projects that have been done on ReactJS, and which I have shared
    in the following list; I hope that it will definitely help you to understand React
    well:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Calypso**:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'URL: [developer.wordpress.com/calypso](http://developer.wordpress.com/calypso)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'GitHub: Automattic/wp-calypso'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Developers: Automattic'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Front-end level technologies: React Redux wpcomjs'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Back-end level technologies: Node.js ExpressJS'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Sentry**:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'URL: [getsentry.com/welcome](http://getsentry.com/welcome)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'GitHub: getsentry/sentry'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Front-end level technologies: React'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Back-end level technologies: Python'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**SoundRedux**:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'URL: [soundredux.io/](https://soundredux.io/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'GitHub: andrewngu/sound-redux'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Developer: Andrew Nguyen'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Front-end level technologies: React Redux'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Back-end level technologies: Node.js'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Phoenix Trello**:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'URL: [phoenix-trello.herokuapp.com/](https://phoenix-trello.herokuapp.com/sign_in)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'GitHub: bigardone/phoenix-trello'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Developer: Ricardo García'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Front-end level technologies: React Webpack Sass for the stylesheets React
    router Redux ES6/ES7 JavaScript'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Back-end level technologies: Elixir Phoenix framework Ecto PostgreSQL'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Kitematic**:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'URL: [kitematic.com](https://kitematic.com/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'GitHub: docker/kitematic'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Developers: Docker'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Front-end level technologies: React'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Google map clustering example**:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'URL: [istarkov.github.io/google-map-clustering-example](http://istarkov.github.io/google-map-clustering-example/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'GitHub: istarkov/google-map-clustering-example'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Developer: Ivan Starkov'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Front-end level technologies: React'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Fil**:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'URL: [fatiherikli.github.io/fil](http://fatiherikli.github.io/fil/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'GitHub: fatiherikli/fil'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Developer: FatihErikli'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Front-end level technologies: React Redux'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**React iTunes Search**:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'URL: [leoj.js.org/react-iTunes-search](http://leoj.js.org/react-iTunes-search/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'GitHub: LeoAJ/react-iTunes-search'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Developer: Leo Hsieh'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Front-end level technologies: React Packaging components: Webpack'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Sprintly**:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'URL: [sprintly.ly](https://sprint.ly/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'GitHub: sprintly/sprintly-ui'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Developers: Quick Left'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Front-end level technologies: React Flux React Router'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Back-end technologies: Node.js'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Glimpse**:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'URL: [getglimpse.com/](http://getglimpse.com/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'GitHub: Glimpse/Glimpse'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Developers: Glimpse'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Front-end level technologies: React Packaging components: Webpack'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Back-end level technologies: Node.js'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'When you need support for ReactJS and Bootstrap, please refer to the following
    sites:'
  prefs: []
  type: TYPE_NORMAL
- en: 'For React:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://facebook.github.io/react/community/support.html](https://facebook.github.io/react/community/support.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'For Bootstrap:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://getbootstrap.com/](http://getbootstrap.com/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://github.com/twbs/bootstrap/issues](https://github.com/twbs/bootstrap/issues)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Things to remember
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Observe the following list of points to remember:'
  prefs: []
  type: TYPE_NORMAL
- en: Before you start working on React, always remember that it is just a view library,
    not an MVC framework.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It is advisable to have a small length of the component to deal with classes
    and modules; it also makes life easy when it comes to code understanding, unit
    testing, and long-running maintenance of a component.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: React has introduced functions of props in its 0.14 version which is recommended
    to use. It is also known as a functional component that helps to split your component.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: To avoid a painful journey while dealing with a React-based app, please don't
    use too many states.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: As I said earlier, React is only a view library, so to deal with the rendering
    part I recommend using Redux rather than Flux.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If you want to have more type safety then always use `PropTypes`, which also
    helps to catch bugs early and acts as a document.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: I recommend the use of the shallow rendering method to test React components,
    which allows rendering single components without touching their child components.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: While dealing with large React applications, always use webpack, NPM, ES6, JSX,
    and Babel to complete your application.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If you want to delve into React's applications and its elements, you can use
    the Redux-dev tools.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We have covered a lot in this chapter, so before concluding let's recap it all.
  prefs: []
  type: TYPE_NORMAL
- en: When we handle data in React, whenever we have components with dynamic functionality,
    data comes into the picture. With React, we have to deal with dynamic data, which
    seems easy but is'nt always.
  prefs: []
  type: TYPE_NORMAL
- en: 'From my personal view, I do not advise using Flux just to manage `/items/:itemIdroute`-related
    data. Instead, you can just declare it within your component and you can store
    it there. How is it beneficial? The answer is: it will have a dependency on your
    component, so when your component does not exist, it will also not exist.'
  prefs: []
  type: TYPE_NORMAL
- en: Regarding the use of Redux, as we know, in single page applications, when we
    have to contract with state and time, it would be difficult to handgrip state
    over time. Here, Redux helps a lot.
  prefs: []
  type: TYPE_NORMAL
- en: We also looked at other key factors such as JSX, flat states, immutable state,
    observables, reactive solutions, React routing, React classes, `ReactPropTypes`,
    and so on, which are the most usable elements in the React app.
  prefs: []
  type: TYPE_NORMAL
- en: We have also covered the usefulness of Bootstrap and its components, which will
    give you more flexibility in dealing with different browsers and devices.
  prefs: []
  type: TYPE_NORMAL
- en: Finaly, we gave you, things to remember while dealing with any React application,
    whether it be a new application or just integration; these points will definitely
    help you a lot.
  prefs: []
  type: TYPE_NORMAL
