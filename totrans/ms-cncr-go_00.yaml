- en: Preface
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: I just love new programming languages. Perhaps it's the inevitable familiarity
    and ennui with regard to existing languages and the frustration with existing
    tools, syntaxes, coding conventions, and performance. Maybe I'm just hunting for
    that one "language to rule them all". Whatever the reason, any time a new or experimental
    language is released, I have to dive right in.
  prefs: []
  type: TYPE_NORMAL
- en: 'This has been a golden age for new languages and language design. Think about
    it: the C language was released in the early 1970s—a time when resources were
    so scarce that verbosity, clarity, and syntactical logic were often eschewed for
    thrift. And most of the languages we use today were either originally written
    in this era or were directly influenced by those languages.'
  prefs: []
  type: TYPE_NORMAL
- en: Since the late 1980s and early 1990s, there has been a slow flood of powerful
    new languages and paradigms—Perl, Python, Ruby, PHP, and JavaScript—have taken
    an expanding user base by storm and has become one of the most popular languages
    (up there with stalwarts such as C, C++, and Java). Multithreading, memory caching,
    and APIs have allowed multiple processes, dissonant languages, applications, and
    even separate operating systems to work in congress.
  prefs: []
  type: TYPE_NORMAL
- en: 'And while this is great, there''s a niche that until very recently was largely
    unserved: powerful, compiled, cross-platform languages with concurrency support
    that are geared towards systems programmers.'
  prefs: []
  type: TYPE_NORMAL
- en: Very few languages match these parameters. Sure, there have been lower-level
    languages that fulfill some of these characteristics. Erlang and Haskell fit the
    bill in terms of power and language design, but as functional languages they pose
    a learning barrier for systems programmers coming from a C/Java background. Objective-C
    and C# are relatively easy, powerful, and have concurrency support—but they're
    bound enough to a specific OS to make programming for other platforms arduous.
    The languages we just mentioned (Python, JavaScript, and so on)—while extremely
    popular—are largely interpreted languages, forcing performance into a secondary
    role. You can use most of them for systems programming, but in many ways it's
    the proverbial square peg in a round hole. So when Google announced Go in 2009,
    my interest was piqued. When I saw who was behind the project (more on that later),
    I was elated. When I saw the language and its design in action, I was in heaven.
  prefs: []
  type: TYPE_NORMAL
- en: For the last few years I've been using Go to replace systems applications I'd
    previously written in C, Java, Perl, and Python. I couldn't be happier with the
    results. Implementing Go has improved these applications in almost every instance.
    The fact that it plays nicely with C is another huge selling point for systems
    programmers looking to dip their toes in Go's pool.
  prefs: []
  type: TYPE_NORMAL
- en: With some of the best minds in language design (and programming in general)
    behind it, Go has a bright future.
  prefs: []
  type: TYPE_NORMAL
- en: For years—decades, really—there have been less than a handful of options for
    writing servers and network interfaces. If you were tasked with writing one, you
    probably reached for C, C++, or Java. And while these certainly can handle the
    task, and while they all now support concurrency and parallelism in some way or
    another, they weren't designed for that.
  prefs: []
  type: TYPE_NORMAL
- en: Google brought together a team that included some giants of programming—Rob
    Pike and Ken Thompson of Bell Labs fame and Robert Griesemer, who worked on Google's
    JavaScript implementation V8—to design a modern, concurrent language with development
    ease at the forefront.
  prefs: []
  type: TYPE_NORMAL
- en: 'To do this, the team focused on some sore spots in the alternatives, which
    are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Dynamically typed languages have—in recent years—become incredibly popular.
    Go eschews the explicit, "cumbersome" type systems of Java or C++. Go uses type
    inference, which saves development time, but is still also strongly typed.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Concurrency, parallelism, pointers/memory access, and garbage collection are
    unwieldy in the aforementioned languages. Go lets these concepts be as easy or
    as complicated as you want or need them to be.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: As a newer language, Go has a focus on multicore design that was a necessary
    afterthought in languages such as C++.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Go's compiler is super-fast; it's so fast that there are implementations of
    it that treat Go code as interpreted.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Although Google designed Go to be a systems language, it's versatile enough
    to be used in a myriad of ways. Certainly, the focus on advanced, cheap concurrency
    makes it ideal for network and systems programming.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Go is loose with syntax, but strict with usage. By this we mean that Go will
    let you get a little lazy with some lexer tokens, but you still have to produce
    fundamentally tight code. As Go provides a formatting tool that attempts to clarify
    your code, you can also spend less time on readability concerns as you're coding.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What this book covers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '[Chapter 1](part0014_split_000.html#page "Chapter 1. An Introduction to Concurrency
    in Go"), *An Introduction to Concurrency in Go*, introduces goroutines and channels,
    and will compare the way Go handles concurrency with the approach other languages
    use. We''ll build some basic concurrent applications utilizing these new concepts.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 2](part0021_split_000.html#page "Chapter 2. Understanding the Concurrency
    Model"), *Understanding the Concurrency Model*, focuses on resource allocation,
    sharing memory (and when not to), and data. We will look at channels and channels
    of channels as well as explain exactly how Go manages concurrency internally.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 3](part0032_split_000.html#page "Chapter 3. Developing a Concurrent
    Strategy"), *Developing a Concurrent Strategy*, discusses approach methods for
    designing applications to best use concurrent tools in Go. We''ll look at some
    available third-party packages that can play a role in your strategy.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 4](part0040_split_000.html#page "Chapter 4. Data Integrity in an Application"),
    *Data Integrity in an Application*, looks at ensuring that delegation of goroutines
    and channels maintain the state in single thread and multithread applications.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 5](part0048_split_000.html#page "Chapter 5. Locks, Blocks, and Better
    Channels"), *Locks, Blocks, and Better Channels*, looks at how Go can avoid dead
    locks out of the box, and when and where they can still occur despite Go''s language
    design.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 6](part0054_split_000.html#page "Chapter 6. C10K – A Non-blocking
    Web Server in Go"), *C10K – A Non-blocking Web Server in Go*, tackles one of the
    Internet''s most famous and esteemed challenges and attempt to solve it with core
    Go packages. We''ll then refine the product and test it against common benchmarking
    tools.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 7](part0060_split_000.html#page "Chapter 7. Performance and Scalability"),
    *Performance and Scalability*, focuses on squeezing the most out of your concurrent
    Go code, best utilizing resources and accounting for and mitigating third-party
    software''s impact on your own. We''ll add some additional functionality to our
    web server and talk about other ways in which we can use these packages.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 8](part0066_split_000.html#page "Chapter 8. Concurrent Application
    Architecture"), *Concurrent Application Architecture*, focuses on when and where
    to implement concurrent patterns, when and how to utilize parallelism to take
    advantage of advanced hardware, and how to ensure data consistency.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 9](part0078_split_000.html#page "Chapter 9. Logging and Testing Concurrency
    in Go"), *Logging and Testing Concurrency in Go*, focuses on OS-specific methods
    for testing and deploying your application. We''ll also look at Go''s relationship
    with various code repositories.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 10](part0082_split_000.html#page "Chapter 10. Advanced Concurrency
    and Best Practices"), *Advanced Concurrency and Best Practices*, looks at more
    complicated and advanced techniques including duplicating concurrent features
    not available in Go''s core.'
  prefs: []
  type: TYPE_NORMAL
- en: What you need for this book
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To work along with this book's examples, you'll need a computer running Windows,
    OS X, or quite a few Linux variants that support Go. For this book, our Linux
    examples and notes reference Ubuntu.
  prefs: []
  type: TYPE_NORMAL
- en: If you do not already have Go 1.3 or newer installed, you will need to get it
    either from the binaries download page on [http://golang.org/](http://golang.org/)
    or through your operating system's package manager.
  prefs: []
  type: TYPE_NORMAL
- en: 'To use all of the examples in this book, you''ll also need to have the following
    software installed:'
  prefs: []
  type: TYPE_NORMAL
- en: MySQL ([http://dev.mysql.com/downloads/](http://dev.mysql.com/downloads/))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Couchbase ([http://www.couchbase.com/download](http://www.couchbase.com/download))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Your choice of IDE is a matter of personal preference, as anyone who's worked
    with developers can attest. That said, there are a few that lend themselves better
    to some languages than others and a couple that have good support for Go. This
    author uses Sublime Text, which plays very nice with Go, is lightweight, and allows
    you to build directly from within the IDE itself. Anywhere you see screenshots
    of code, it will be from within Sublime Text.
  prefs: []
  type: TYPE_NORMAL
- en: And while there's a good amount of baked-in support for Go code, there's also
    a nice plugin collection for Sublime Text called GoSublime, available at [https://github.com/DisposaBoy/GoSublime](https://github.com/DisposaBoy/GoSublime).
  prefs: []
  type: TYPE_NORMAL
- en: Sublime Text isn't free, but there is a free evaluation version available that
    has no time limit. It's available in Windows, OS X, and Linux variants at [http://www.sublimetext.com/](http://www.sublimetext.com/).
  prefs: []
  type: TYPE_NORMAL
- en: Who this book is for
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If you are a systems or network programmer with some knowledge of Go and concurrency,
    but would like to know about the implementation of concurrent systems written
    in Go this is the book for you. The goal of this book is to enable you to write
    high-performance, scalable, resource-thrifty systems and network applications
    in Go.
  prefs: []
  type: TYPE_NORMAL
- en: In this book, we'll write a number of basic and somewhat less - basic network
    and systems applications. It's assumed that you've worked with these types of
    applications before. If you haven't, some extracurricular study may be warranted
    to be able to fully digest this content.
  prefs: []
  type: TYPE_NORMAL
- en: Conventions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this book, you will find a number of styles of text that distinguish between
    different kinds of information. Here are some examples of these styles, and an
    explanation of their meaning.
  prefs: []
  type: TYPE_NORMAL
- en: 'Code words in text, database table names, folder names, filenames, file extensions,
    pathnames, dummy URLs, user input, and Twitter handles are shown as follows: "The
    `setProxy` function is called after every request, and you can see it as the first
    line in our handler."'
  prefs: []
  type: TYPE_NORMAL
- en: 'A block of code is set as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'When we wish to draw your attention to a particular part of a code block, the
    relevant lines or items are set in bold:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Any command-line input or output is written as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '**New terms** and **important words** are shown in bold. Words that you see
    on the screen, in menus or dialog boxes for example, appear in the text like this:
    "If you upload a file by dragging it to the **Drop files here to upload** box,
    within a few seconds you''ll see that the file is noted as changed in the web
    interface."'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Warnings or important notes appear in a box like this.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Tips and tricks appear like this.
  prefs: []
  type: TYPE_NORMAL
- en: Reader feedback
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Feedback from our readers is always welcome. Let us know what you think about
    this book—what you liked or may have disliked. Reader feedback is important for
    us to develop titles that you really get the most out of.
  prefs: []
  type: TYPE_NORMAL
- en: To send us general feedback, simply send an e-mail to `<[feedback@packtpub.com](mailto:feedback@packtpub.com)>`,
    and mention the book title via the subject of your message.
  prefs: []
  type: TYPE_NORMAL
- en: If there is a topic that you have expertise in and you are interested in either
    writing or contributing to a book, see our author guide on [www.packtpub.com/authors](http://www.packtpub.com/authors).
  prefs: []
  type: TYPE_NORMAL
- en: Customer support
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that you are the proud owner of a Packt book, we have a number of things
    to help you to get the most from your purchase.
  prefs: []
  type: TYPE_NORMAL
- en: Downloading the example code
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You can download the example code files for all Packt books you have purchased
    from your account at [http://www.packtpub.com](http://www.packtpub.com). If you
    purchased this book elsewhere, you can visit [http://www.packtpub.com/support](http://www.packtpub.com/support)
    and register to have the files e-mailed directly to you.
  prefs: []
  type: TYPE_NORMAL
- en: Errata
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Although we have taken every care to ensure the accuracy of our content, mistakes
    do happen. If you find a mistake in one of our books—maybe a mistake in the text
    or the code—we would be grateful if you would report this to us. By doing so,
    you can save other readers from frustration and help us improve subsequent versions
    of this book. If you find any errata, please report them by visiting [http://www.packtpub.com/submit-errata](http://www.packtpub.com/submit-errata),
    selecting your book, clicking on the **errata** **submission** **form** link,
    and entering the details of your errata. Once your errata are verified, your submission
    will be accepted and the errata will be uploaded on our website, or added to any
    list of existing errata, under the Errata section of that title. Any existing
    errata can be viewed by selecting your title from [http://www.packtpub.com/support](http://www.packtpub.com/support).
  prefs: []
  type: TYPE_NORMAL
- en: Piracy
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Piracy of copyright material on the Internet is an ongoing problem across all
    media. At Packt, we take the protection of our copyright and licenses very seriously.
    If you come across any illegal copies of our works, in any form, on the Internet,
    please provide us with the location address or website name immediately so that
    we can pursue a remedy.
  prefs: []
  type: TYPE_NORMAL
- en: Please contact us at `<[copyright@packtpub.com](mailto:copyright@packtpub.com)>`
    with a link to the suspected pirated material.
  prefs: []
  type: TYPE_NORMAL
- en: We appreciate your help in protecting our authors, and our ability to bring
    you valuable content.
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You can contact us at `<[questions@packtpub.com](mailto:questions@packtpub.com)>`
    if you are having a problem with any aspect of the book, and we will do our best
    to address it.
  prefs: []
  type: TYPE_NORMAL
