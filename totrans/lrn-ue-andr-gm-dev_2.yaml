- en: Chapter 2. Launching Unreal Engine 4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that you know how to download and install UE4, you should have everything
    setup and be ready to begin making games. However, there is an important topic
    that needs to be covered before we start making our game, and that is the **Editor**.
    The Editor is where all the magic happens. It is where you make the game. So,
    it is important that you know about the Editor, its functionalities, the user
    interface, and how to navigate through it before we go any further. So, this chapter
    is devoted to taking you through it.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will be covering the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: What the Editor is
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Its user interface
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Navigating through the Editor
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Hotkeys and controls
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Meet the Editor
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Editor is where you make the game. All of the assets you create for your
    game are implemented via the Editor. You set up your environment and the levels
    in the Editor, and all of the code sequences you create can be tested here; the
    testing, debugging, and packaging of your game is done here as well.
  prefs: []
  type: TYPE_NORMAL
- en: Needless to say, it is important you understand what the Editor is, get familiar
    with its user interface, and know how to navigate through it before we can go
    any further. Finally, to improve your workflow, you should also be familiar with
    some hotkeys.
  prefs: []
  type: TYPE_NORMAL
- en: The Unreal Project Browser
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When you launch UE4 via the Engine Launcher, unless you have opened a project
    directly from the library, the Unreal Project Browser will open. In the Unreal
    Project Browser, you can see a list of all the Unreal projects that you have already
    created, and you can open whichever one you wish. You can also create a new project
    from here.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will cover what a project is; for now, we will only
    focus on the **Unreal Project Browser** and its user interface, as shown in the
    following screenshot.
  prefs: []
  type: TYPE_NORMAL
- en: '![The Unreal Project Browser](img/image00215.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: At the top, just below the tab bar, are two tabs, namely **Projects** and **New
    Project**. Each of these tabs contains certain features that we will go through.
  prefs: []
  type: TYPE_NORMAL
- en: In the **Projects** tab, you can see and open any project you have stored on
    your system. At the top is the search bar. If you have a lot of projects and have
    difficulty finding a particular one, you can simply type in the name of the project
    you wish to open in the search bar and it will display projects that match the
    name you have entered.
  prefs: []
  type: TYPE_NORMAL
- en: To the right of the search bar is the **Refresh** button. If you have made any
    purchases from the marketplace, it will not reflect in the browser. To update
    the project list, click on the **Refresh** button. Next to the **Refresh** button
    is the **Marketplace** button; clicking on this will take you to the Engine Launchers
    Marketplace panel.
  prefs: []
  type: TYPE_NORMAL
- en: Below the search bar is the **My Projects** section; all the projects you have
    created are displayed here. Below **My Projects** is the **Samples** section.
    Any gameplay feature samples or engine feature samples that you can purchase from
    the Marketplace are displayed here.
  prefs: []
  type: TYPE_NORMAL
- en: As you can see in the preceding screenshot, there are currently two projects
    displayed. You might have also noticed that one of the projects, **Test**, is
    quite dark and has 4.4 written next to it on the bottom-right corner of the thumbnail.
    This is because the project **Test** was created using version 4.4, and we have
    launched version 4.6.1\. If we try to launch this project, we will get a prompt
    saying that this project was built with a different engine version and will be
    given the option to convert the project to be compatible with the version of Unreal
    4 that we are currently running. Once you have converted the project, it will
    be compatible with your current engine version.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: While conversion works well for upgrading projects, downgrading a project (for
    example, converting a project created in version 4.6 to be compatible with version
    4.4) has a few complications. For one, although you will be able to use most of
    the assets created in the project, you will not be able to load the map created
    in it and will start with a completely empty scene.
  prefs: []
  type: TYPE_NORMAL
- en: Next we have the **Samples** section. Anything you download from Engine Feature
    Samples, Example Game Projects, and such are displayed here. The upgrading and
    downgrading process we discussed earlier regarding projects applies to these project
    files as well.
  prefs: []
  type: TYPE_NORMAL
- en: To open a project, simply click on it and the selected project will be highlighted
    yellow. After selecting it, click on the **Open** button to launch it. If you
    have to open a project not listed in the **My Projects** section, simply click
    on the **Browse** button, search for the project file, and run it. Finally, at
    the bottom-left corner of the window is a small tick box, which reads **Always
    load last project on startup**. If the box is ticked, it will automatically open
    the last project you had opened when you next launch UE4.
  prefs: []
  type: TYPE_NORMAL
- en: 'Moving over to the **New Project** panel, we see the following screen:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The Unreal Project Browser](img/image00216.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: As we can see in the preceding screenshot, there are a number of types of templates
    to choose from, depending on what type of game you want to make. For example,
    there are templates for first person games, puzzle games, side scroller games,
    and vehicle games. There are two types of templates you can choose from, **Blueprint**
    and **C++**. Blueprint projects do not require the user to have prior programming
    experience. All of the games features can be implemented using Blueprint, and
    the template also provides the basic set of blueprints required for specific game
    modes, such as camera, controls, physics, and so on. C++ projects, however, require
    the developers to know C++. These projects provide the basic framework for that
    particular template, upon which the developers can make the game. Picking Blueprint
    projects is beneficial for developers who lack programming knowledge, providing
    ease of development. However, though Blueprint is a great tool, it is still not
    as versatile as coding. With coding, you have more control over the engine, and
    can even modify it to suit your requirements. It also means better optimization
    of your game. Developers can use Blueprint to implement features, if they so require.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: To create C++ projects, it is recommended that you have Visual Studio 2013 or
    higher installed on your system. If you do not, you will first have to download
    and install Visual Studio before you can create these kinds of projects. You can,
    however, use Visual Studio 2012 provided that you download the source code from
    GitHub, and then compile the entire engine in Visual Studio 2012\. But, since
    the Engine Launcher is built with Visual Studio 2013, it is advised that you have
    the 2013 version. If you are on Mac, you will need Xcode 5 or higher.
  prefs: []
  type: TYPE_NORMAL
- en: To the right of the project list is a screenshot of the highlighted project,
    below which is a description of it.
  prefs: []
  type: TYPE_NORMAL
- en: After deciding which template to use, there are a few settings you can select
    before opening the project. First of all, you can choose which hardware you are
    going to develop your game on, either PC/console, or mobile/tablet.
  prefs: []
  type: TYPE_NORMAL
- en: This will set things like controls when you launch the project. After that,
    you can set the quality of rendering in the game. You have the option to either
    pick maximum quality, or scalable. Now, although it is understandable that you
    would want to make your game look amazing, you do have to keep in mind that mobile
    devices have limitations. When developing for mobile devices, it is advisable
    that you pick **Scalable**. The difference between Scalable and Maximum Quality
    is that in Scalable, the engine config files are optimized to give the best performance.
    This means that some of the more costly features, such as anti-aliasing, and motion
    blur are, by default, turned off. Finally, you can choose whether you want to
    create the project with the starter content (starter content contains materials,
    props, audio files, textures, and so on) or not.
  prefs: []
  type: TYPE_NORMAL
- en: Once you have set these options, you can set the location where your project
    will be stored. The left bar shows the location and name of the folder where the
    project will be stored. You can set it to anything you wish. In the right bar,
    you can set the name of the project. Finally, after you have set all of these
    options, simply click on the **Create Project** button to open the Editor.
  prefs: []
  type: TYPE_NORMAL
- en: The user interface
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'After you have opened or created a new project, the Editor will open. Once
    opened, you will see the following screen:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The user interface](img/image00217.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: The Editor is where you create your game. As you can see, even though the Editors
    user interface is neatly categorized, there are still quite a lot of buttons,
    menus, and panels. To make explaining the user interface easier, we will divide
    the Editor into various parts, and then go over each section individually.
  prefs: []
  type: TYPE_NORMAL
- en: '![The user interface](img/image00218.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: The tab bar and the menu bar
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: At the top, we have the tab bar. Just like in an internet browser, you can see
    tabs of all the map files that are currently opened, and you can dock several
    viewports.
  prefs: []
  type: TYPE_NORMAL
- en: '![The tab bar and the menu bar](img/image00219.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: On the right side of the tab bar, you can see the name of the project written
    in light grey, **MyProject2**, in this case. Next to the projects name is the
    **Send Quick Feedback** button, which looks like a chat bubble. Want to give some
    feedback to Epic regarding the Editor, positive or negative? You can do so with
    this button. Simply click on the icon to open a menu from which you can choose
    either to send positive or negative feedback, as well as ask questions of Epic.
    After you have made your choice, a window opens, in which you can select what
    the feedback is about, followed by your thoughts. After you have written your
    feedback, click on **Send** and it will be sent to Epic.
  prefs: []
  type: TYPE_NORMAL
- en: Next, we have the **Show Available Tutorials** button, which, when clicked,
    opens a window, from which you can select what tutorial you would like to see.
    There are tutorials available inside the Editor itself. When you click on the
    button, a new window opens up, showing you all of the tutorials available.
  prefs: []
  type: TYPE_NORMAL
- en: Below the tab bar, is the menu bar. It offers all of the general commands and
    tools offered by all applications.
  prefs: []
  type: TYPE_NORMAL
- en: '**File**: Here, you can create, open, and save levels/maps and you can also
    create or open projects from here (when you create or open a new project, the
    current project closes and the Editor reopens). You also package your game from
    here. To do so, simply click on **File**, hover over **Package Product**, which
    will open another menu, choose which platform to package your game on, and then
    follow the instructions to complete the process. There are various settings and
    build configurations that you can set here, which we will cover in later chapters.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Edit**: From the **Edit** menu, you can do things like undoing or redoing
    the last action, cut, copy, paste, and/or duplicate whatever object (or group
    of objects) you have selected. You can also access the Editor preferences from
    here. To do so, simply click on **Editor Preferences** in the **Edit** menu. Doing
    so will open a new window, where you can set options such as toggling autosaves
    on/off or setting the frequency of autosaves, changing or assigning hotkeys, and
    changing the measuring units (centimeters, meters, or kilometers). There are more
    settings available in preferences, so feel free to explore, and tweak them to
    suit your game.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Finally, you can also set and change settings of the currently open project.
    Just below **Editor Preferences** is the **Project Settings** option; clicking
    on this opens the projects settings window. In the **Project Settings** window,
    you can set things like the projects description (this includes adding a thumbnail
    for your project, adding a description, and a project ID), how the game will be
    packaged, and what platforms will the project support.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: There are a lot of settings that you can change and tweak to suit your requirements
    both in the **Editor Preferences** and **Project Settings**, so it is advised
    that you go through them thoroughly.
  prefs: []
  type: TYPE_NORMAL
- en: '**Window**: The Editor window is fully customizable. Apart from the tab and
    menu bar, all the other windows can be customized in the Editor to suit your preferences.
    The screenshot in the preceding section is the default layout of the Editor. You
    can add, remove, and move around any window you like.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'To do so, simply follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Move your cursor to the tab of the window you wish to move
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Hold down the left-mouse button on the tab
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Move the window to wherever you wish to move it
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Release the left-mouse button and the window will be set
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Sometimes you may not be able to find the windows tab. For example, in the preceding
    screenshot, the Viewport does not have a tab. This is because its tab is hidden.
    To unhide it, just click on the little yellow arrow located at the top-left corner
    of the window.
  prefs: []
  type: TYPE_NORMAL
- en: Keeping the above in mind, the Windows menu is for just that. If you wish to
    add another window in your Editor, you can simply open the Windows menu, select
    which window to add, and click on it. When you do so, the window will open, which
    you can then move and set wherever you want. If you are using a dual screen, then
    the Window menu may come in handy, since you have space to add more windows.
  prefs: []
  type: TYPE_NORMAL
- en: '**Help**: Epic has tried their best to ensure that the tutorials provided by
    them and the community are easily accessible at all times, either on their website,
    the Engine Launcher, or the Editor itself. The Help menu is similar to the **Learn**
    section of the Engine Launcher (described in [Chapter 1](part0014.xhtml#aid-DB7S1
    "Chapter 1. Getting Started with Unreal 4"), *Getting Started with Unreal 4*);
    it has links to all of the tutorials and documentation regarding UE4\. On the
    far right corner of the menu bar is the **Search for Help** bar. Do you need to
    find a specific tutorial, without having to go through the entire Help section?
    In that case, simply type in the name of the topic you wish to find tutorials
    on and it will show you matching results.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The toolbar
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Next up, we have the toolbar, located directly below the tab and menu bar.
  prefs: []
  type: TYPE_NORMAL
- en: '![The toolbar](img/image00220.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: It provides quick access to the most commonly used commands and operations.
  prefs: []
  type: TYPE_NORMAL
- en: '**Save**: On the very left, is the **Save** button. Any developer knows how
    important this function is. One crash, and all your work goes down the drain;
    hence, it is available on the toolbar, so that you have quick access to it.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Source Control**: From here, you can either enable or disable source control,
    which is, by default, disabled. Source control is an important tool when working
    in a team. It is a method of keeping track of any changes made to a file and controlling
    the version of the software. When any modification has been made to the file,
    the team can check the modified files, and if they made any changes, post it for
    others.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: To enable it, click on the button, which will open a dropdown menu, and select
    **Connect to Source**. A new window will open, asking you to choose the provider.
    Select the one you want and click on **Accept Settings**. Once enabled, you can
    check any modifications other team members have made, and post any modification
    you have made yourself.
  prefs: []
  type: TYPE_NORMAL
- en: '**Content**: The **Content** button opens up the Content Browser. This is similar
    to the Content Browser in Unreal Engine 3\. So, if you are familiar with it, you
    should have no problem with the new version. For those who have not used Unreal
    Engine 3, the Content Browser is where all of the assets, code, levels, and everything
    can be found.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Marketplace**: You''ve suddenly realized that you require an asset or assets
    for your game; instead of opening the Engine Launcher again, simply click on this
    button to go to the **Marketplace** section of the Engine Launcher, where you
    can browse and buy the required item or items.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Settings**: This is similar to the **Info** settings in Unreal Engine 3\.
    It lists out the most commonly used settings for the Editor. Things such as toggling
    on/off actor snapping, allowing/disallowing selection of translucent objects,
    allowing/disallowing group selection, and more can be changed here. It is also
    worth mentioning that the Engines visual settings, such as resolution, texture
    rendering quality, anti-aliasing, and more can also be changed here.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Blueprints**: We have a whole chapter dedicated to Blueprint; therefore,
    it should be no surprise that it is an important and one of the most commonly
    used features in UE4\. You can access the Blueprint Editor from here.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Matinee**: This is yet another important and commonly used feature offered
    by UE4 using which you can create cinematics and so on in Unreal Matinee. You
    can open Unreal Matinee from here.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Build**: Build is a very important function of UE4\. When you build your
    level, the Engine precomputes lighting and visibility data and generates navigation
    networks, and updates geometry.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Play**: When you click on the **Play** button, the game starts normally in
    the viewport for you to test your level and to see whether everything is functioning
    as intended. When the game starts, the **Play** button gets replaced by the three
    other buttons.![The toolbar](img/image00221.jpeg)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Pause**: This button pauses the game session. When paused, you can resume,
    or skip a frame.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Stop**: This button stops the game session and takes you back to the editing
    mode.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Eject**: When you click on **Play**, you take control of a character. If
    you click **Eject**, you stop taking control of it and can move it around in the
    Viewport.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There are other options you can set for **Play**, by clicking on the downward
    facing arrow next to the button, which opens the **Play** menu.
  prefs: []
  type: TYPE_NORMAL
- en: '**Launch**: When you believe that your game is finished and ready to be ported,
    clicking on the **Launch** button will cook, package, and deploy your project
    into an executable application file (depending upon what platform you want to
    deploy your game on).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Viewport
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Located in the center of the Editor, the Viewport is where you create and view
    your game. All of your assets are placed and assembled here to create your world.
  prefs: []
  type: TYPE_NORMAL
- en: '![Viewport](img/image00222.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Let''s look at the Viewport closely. To move around, hold the left or right
    mouse button, and use the *W*, *S*, *A*, and *D* keys to move around. To select
    an object, left click on it. At the top is the Viewports toolbar, some on the
    left, and some on the right. Lets examine these tools individually:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Viewport Options**: At the far left of the toolbar, represented by the downward
    facing arrow, is the Viewport Options. When clicked, it opens a menu, which contains
    options for viewing the Viewport, and what you want to see in it. For example,
    you can switch to something called **Game Mode**, which displays the scene as
    it would appear in the game. This means, things such as volumes, hidden actors,
    and actor icons (for example, in the preceding screenshot, there are four actor
    icons), all get hidden. There is also something called **Immersive Mode**, which
    makes the Viewport go full screen. There are other options that can be set in
    the Viewport Options menu, so have a look around!'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Viewport Type**: Next, we have the **Viewport Type** menu. There are two
    types of Viewports, perspective and orthographic. The perspective view is the
    full 3D view, in which you can see the scene in three dimensions. Orthographic
    view enables you to view the world in two dimensions, either along the *XZ* plane
    (front), the *YZ* plane (side), or the *XY* plane (top).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**View Mode**: There are various modes in which you can choose to view your
    world. By clicking on the **View Mode** button, you can check out all the various
    view modes offered by UE4\. By default, the mode set is **Lit**. In this mode,
    you can see the levels rendered with all of the light actors placed in the scene.
    You can switch to **Unlit**, which, as the name suggests, shows the scene without
    any lighting. Another mode you can switch to is **Wireframe**, which only shows
    the wireframes of the actors placed in the scene.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Show**: From here, you can select what types of actors you want to view or
    hide in your scene. When you open the menu, you can see a list of items with tick
    boxes. If the box is ticked, those types of actors are visible in the scene. If
    the box is unticked, those types of actors are hidden.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Transform Tools**: Lets move to the right side of the toolbar. First, we
    have the transform tools, with three icons. There are three transform actions
    that can be performed on an actor. The first action is translate, which is changing
    the position (or coordinates) of an actor in your world. The second action is
    rotate, which is rotating an actor about the *x*, *y*, or *z* axis. The third
    action is scale, which is increasing or decreasing the size of an object. You
    can choose which action to perform by selecting any one of them from the Transform
    Tools (you can also do this in the Details window).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Coordinate System**: The next item in the Viewport Toolbar, represented by
    an icon shaped as a globe, is the Coordinate System. There are two coordinate
    systems in which any transform action takes place: global, and local. You can
    click on the button to switch between them. If the global coordinate system is
    active, the icon will be of a globe. When the local coordinate system is selected,
    the icon will be a cube. When the local coordinate system is active, the axes
    about which you perform a transform action will align itself to the actors rotation.
    When the global coordinate system is active, it will not align itself with the
    actors rotation; instead, it will align itself with the world. The following screenshot
    shows you what this means. On the left, the local coordinate system is active,
    and on the right the global coordinate system is active.![Viewport](img/image00223.jpeg)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Surface Snapping, Grid Snapping, and Grid Snap Value**: The next three tools
    all relate to the translate action; hence, they are grouped together. Surface
    snapping tool, represented by an icon in the shape of a curved line with an arrow
    perpendicular to it, when active, causes the actor to snap to surfaces (BSPs,
    other Actors surfaces, and so on) when translated. This is handy when you want
    to place actors on the ground. Just make sure that the actors pivot is at the
    bottom, since its the pivot point that snaps onto the surfaces.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Grid Snapping, represented by a grid-shaped icon, when active, causes the actor
    to move in specific values, when translated. Think of the world as a grid, with
    each cell in that grid a certain size. When active, if you translate an actor,
    it will snap to this grid. This is especially handy in level design, when you
    want precise placement of actors with everything properly spaced or aligned. The
    value by which these actors will move can be set in the Grid Snap Value menu.
  prefs: []
  type: TYPE_NORMAL
- en: '**Rotation Grid Snapping and Rotation Grid Snap Value**: The next two tools
    are similar to Grid Snapping, the only difference being that these tools are for
    the rotation action. When active, the actor will rotate in set values (for example,
    10 degrees). This value can be changed in the Rotation Grid Snap Value menu.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Scale Grid Snapping and Scale Grid Snap Value**: The final member in the
    grid snap group is the Scale Grid Snapping. This applies when you wish to scale
    objects. When active, the actor will scale up or scale down in specific increments,
    which can be set in the Scale Grid Snap Value menu.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Camera Speed**: Moving on from Scale Grid Snapping, we have the Camera Speed.
    You can move the camera around using the arrow keys. You can set how fast the
    camera will move, by setting its speed in the Camera Speed menu.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Maximize or Restore Viewport**: The last item in the Viewport toolbar, at
    the far right corner, is the Maximize or Restore Viewport button. As mentioned
    previously, there are four Viewport types that you can switch to: perspective,
    front, side, and top. When clicked, the Viewport is divided into 4 segments, with
    each Viewport type in each segment. The following screenshot shows what this looks
    like:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: \
  prefs: []
  type: TYPE_NORMAL
- en: '![Viewport](img/image00224.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: At the top left, is the Side view; at the top right, is the Front view; at the
    bottom left, is the Perspective view; and at the bottom right, is the Top view.
    Each window has its own Viewport toolbar. You can maximize any viewport type,
    by clicking on the Maximize or Restore Viewport button in the Viewport you wish
    to maximize. This viewport setting is most comment when designing levels, and
    placing assets, since you want to make sure they are properly aligned from all
    directions. So, be ready to switch between those settings frequently.
  prefs: []
  type: TYPE_NORMAL
- en: Modes
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The **Modes** window contains various modes present in the Editor. Based on
    what task you wish to perform in the Editor, you can choose which mode to switch
    to from this panel.
  prefs: []
  type: TYPE_NORMAL
- en: '![Modes](img/image00225.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'There are five modes, represented by five different icons that you can switch
    to. These are:'
  prefs: []
  type: TYPE_NORMAL
- en: '**PlaceMode**: This is the default mode. It is used for placing actors onto
    your level. An actor is anything you place in your game; this includes things
    like static meshes, lights, triggers, volumes, and so on. This is similar to *entities*
    or *objects*, which is used in other game engines. There are various types of
    actors that can be placed in the level; especially, actors common to all types
    of projects. All of these actors have been categorized based on their type, called
    classes. There are 5 types of classes. They are as follows:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Basic**: This contains the very basic actors, and ones that are used in pretty
    much any game you make. These include triggers, camera, player start, and so on.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Lights**: The lights panel contains the different types of light actors available.
    For instance, you have point lights, which act as a normal light bulb, emitting
    light equally from a point source in all directions; and directional lights, which
    is emit lights from an infinitely far away source, like the sun, and so on.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Visual**: This class contains all of the actors that affect the games visuals,
    such as post processing volumes, atmospheric fog, decals, and so on.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**BSP**: BSP or Binary Space Partitioning, contains BSP brushes, which are
    the basic building blocks for creating in-game geometry. The class contains BSP
    brushes of different shapes, such as box, cone, spiral staircase, and more.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Volumes**: The volumes class contains different volumes, each with a different
    property. For example, you have something called the **KillZ** Volume, which destroys
    any actor that enters it, including the Player actor. This is useful when you
    are making pitfalls, and areas where the place can fall off.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Paint Mode**: Paint Mode allows you to paint and adjust colors and textures
    onto static meshes. Here, you can set the brush size, falloff radius, strength,
    and more. One thing to note is that you can only paint on the actor that is currently
    selected to ensure that you only paint on the mesh and not anywhere else.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Landscape Mode**: If you have a natural outdoor environment, instead of creating
    the entire landscape first in a 3D modeling software and then importing it in
    the Engine, you can create it in the Engine itself with the help of the Landscape
    tool! When you enable the landscape tool, a huge green plane appears in the viewport.
    This shows you what the dimensions of the landscape will be, once created. You
    can set the dimensions and other settings in the window. When you are satisfied,
    just click on the **Create** button at the bottom of the modes window, and it
    will create the landscape plane. Once created, you can sculpt and paint the plane
    to create your landscape. To delete the plane, simply click on **Place Mode**
    to enable the place mode, select the plane, and hit *Delete*, to remove it.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Foliage Mode**: In this mode, you can quickly paint static meshes using paint
    selection (place) and erase static meshes on landscape planes and other static
    meshes. This is an extremely handy tool if you are placing things like trees,
    plants, bushes, rocks, and so on, hence the name Foliage Mode. Instead of painstakingly
    placing each tree, rock, and bush in your level one at a time, you can simply
    use this tool to place them. You can set the density of the mesh you want to place,
    the brush size, and what actor or actors to place in the Foliage Mode.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Geometry Editing Mode**: Finally, we have the Geometry Editing Mode. As mentioned
    previously, BSP brushes are the basic building blocks for your in-game geometry
    and are extremely useful. However, the BSP brushes provided to you come in specific
    shapes. If you require the BSP brush to be of a different shape, you can switch
    to the Geometry Editing Mode, and then manually customize your BSP brush.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Finally, if you want to find a specific actor, you can type in its name in the
    search bar at the top, and it will show you the actors which match the name you
    entered.
  prefs: []
  type: TYPE_NORMAL
- en: World Outliner
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The **World Outliner** displays all of the actors that are in your level in
    a hierarchical format. You can select and modify actors from the **Scene Outliner**
    window. It is a great way to keep track of which actors are in the scene. When
    making a relatively large level, it is a common occurrence for the developers
    to forget to remove some actors, that they do not need anymore, from the scene.
    As a result, these actors stay in the scene and take up unnecessary memory when
    the game is running. The World Outliner is one way to prevent this from happening.
  prefs: []
  type: TYPE_NORMAL
- en: '![World Outliner](img/image00226.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Some of the operations you can perform in the **World Outliner** are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Create Folders**: You have the option to create a folder and put actors into
    it. For example, in the preceding screenshot, there is a folder titled `Lighting`,
    which contains all of the light actors that are present in the scene. This makes
    keeping track of your assets even easier. It also makes things look neat, tidy,
    and organized!'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Grouping actors into a folder is also really handy when you want to move certain
    actors, without disturbing their relative position from each other. For example,
    say you have made an indoor scene and you want to move it to a different location.
    Instead of moving all of the assets individually, or group selecting them, you
    can group all of the assets that are in the room into a folder. If you want to
    move the room, simply click on the folder and all of the assets in the room will
    be selected, and you can move all of them simultaneously, without disturbing their
    relative position. To select all of the objects in a folder, right click on the
    folder to open a menu. Then, move the cursor over to **Select**, and then click
    on **AllDescendants**.
  prefs: []
  type: TYPE_NORMAL
- en: '**Hide Function**: You may have noticed an icon shaped as an eye on the left
    of every actor/folder. This is the hide function. If you click on it, the corresponding
    actor will be hidden in the scene. If it is a folder, then all of the actors in
    that folder will be hidden.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Attach Actors**: You can attach two or more actors. This is another, and
    relatively quicker way of moving a group of actors without disturbing their relative
    position from each other. To do so, in the Scene Outliner window, simply select
    the actor, and drag it over to the actor you wish to attach it to, and then release
    it when you see a popup saying **Attach *actor name* to *other actor name***.
    You can also attach multiple actors to another actor.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Attaching forms – a hierarchy**: The actor to which you attach other actors
    becomes somewhat of a parent actor. When you move the parent actor, all of the
    actors attached to it move as well. However, if you move the attached actor, the
    parent actor will not move.'
  prefs: []
  type: TYPE_NORMAL
- en: One thing to note is that to move the attached actors together, you have to
    select the parent actor from the Scene Outliner and then move it. If you select
    the parent actor from the Viewport, only it will move, and the other attached
    actors will not.
  prefs: []
  type: TYPE_NORMAL
- en: At the bottom left, you can see a number of actors in your scene. At the bottom-right
    corner, is something called **View Options**, from where you can choose what actors
    you want to see based on filters in the **View Options** menu.
  prefs: []
  type: TYPE_NORMAL
- en: Content Browser
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: All of your games assets, such as static meshes, materials, textures, blueprints,
    audio files, and so on are displayed in the Content Browser. It is where you import,
    organize, view, and create your assets.
  prefs: []
  type: TYPE_NORMAL
- en: '![Content Browser](img/image00227.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'At the top are three icons, **Add New**, **Import**, and **Save All**. They
    are described as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Add New**: Using this button, you can create a new asset, such as a material,
    a particle system, blueprint, and so on'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Import**: If you want to import content into your project file, you can do
    so using the import function'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Save All**: If you have created or modified an asset in the Content Browser,
    click on **Save All** to save all modified or created assets'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Below these icons, we have the navigation bar. If you have a lot of folders
    and subfolders in your Content Browser, this will come in handy to help you navigate
    through them quickly. At the far right corner, there is a small padlock icon,
    which is, by default, unlocked. If you click on it, it will lock all **Find in
    Content Browser** requests. In the Viewport, when you right-click on an actor,
    it opens up a menu. Inside it, is a function called **Find in Content Browser**.
    When you click on it, the Content Browser shows you where the asset is located.
    If locked, when you click on **Find in Content Browser**, it will not show you
    where that asset is located. Instead, it will open a new **Content Browser** window,
    showing you where the actor is located.
  prefs: []
  type: TYPE_NORMAL
- en: Underneath the navigation bar, on the left, is the **Sources Panel**. The **Sources
    Panel** contains all of the folders and collections you have in your project.
    On the right, is the **Asset View**; this shows all of the assets and subfolders
    contained within the selected folder in the Sources Panel. At the top is the **Filters**
    menu. If you only want to see a certain type of asset, say, if you only want to
    see what material assets are contained within the folder you have selected, then
    you can do so with the help of the **Filters** menu. To its right, is the Search
    Bar, which you can use to find a specific asset in the selected folder.
  prefs: []
  type: TYPE_NORMAL
- en: At the bottom of the Asset View, you can see the total number of items, including
    assets and folders inside the selected folder. On the bottom right, is the **View
    Options** menu, from where you can set how you want the items in the Asset View
    to be displayed. For example, you can set whether you want to see the items as
    tiles, as a list, or as columns.
  prefs: []
  type: TYPE_NORMAL
- en: Details
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In the **Details** panels, you can see and modify the properties of the currently
    selected actor.
  prefs: []
  type: TYPE_NORMAL
- en: '![Details](img/image00228.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: At the top, you can see the name of the selected actor (which, in this case,
    is `Cube06`). This is the name box, where you can set the name of the actor to
    whatever you like. On the far right, is the lock button. It is by default, unlocked.
    When locked, the Details panel will only display the properties or details, of
    that actor, even if you have selected a different actor.
  prefs: []
  type: TYPE_NORMAL
- en: Below this is the search bar, which you can use to filter what properties you
    wish to see. Next to it, is the **Property Matrix** button which opens the Property
    Editor window. On the far right, is the **Display Filter** button, which you can
    use to do things like collapsing/expanding all of the categories, only displaying
    modified properties, and showing all of the advanced properties in the **Details**
    window.
  prefs: []
  type: TYPE_NORMAL
- en: Below the name, there are two buttons, **Add Component**, and **Blueprint/Add
    Script**. The Add Component, as the name suggests, allows you to add a component
    to the selected actor. These components include static meshes, shape primitives
    (cube, sphere, cylinder, and cone), light actors, and so on. This is similar to
    the Attach Actors function in the World Outliner. The actors get attached in a
    hierarchy, with the selected actor as the parent.
  prefs: []
  type: TYPE_NORMAL
- en: Apart from attaching components, you can also convert the selected actor into
    a Blueprint Class. A Blueprint Class is an actor which as components, as well
    as some code in it. (In other engines, the equivalent term would be **Prefab**).
    We will be covering this in great detail in the later chapters.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, at the bottom, is the Properties Area, which displays all of the selected
    actors properties, such as location, rotation, scale, what material is currently
    on it, adding and removing materials, and so on, which you can modify.
  prefs: []
  type: TYPE_NORMAL
- en: Hotkeys and controls
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We will end our discussion on the Editor, by listing some controls and hotkeys
    for windows that you should know. Memorize them! It will make navigating through
    the Editor much easier and more efficient. Here are the essential controls that
    you should know:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Control | Action |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| Left-mouse button | This selects whichever actor is under the cursor |'
  prefs: []
  type: TYPE_TB
- en: '| Left-mouse button + mouse drag | This moves the camera forward and backward
    and rotates it left and right |'
  prefs: []
  type: TYPE_TB
- en: '| Right-mouse button | This selects the actor under the cursor and opens an
    options menu for the actor |'
  prefs: []
  type: TYPE_TB
- en: '| Right-mouse button + drag | This rotates the camera in the direction you
    drag the mouse |'
  prefs: []
  type: TYPE_TB
- en: '| Left-mouse button + right mouse button+ drag | This moves the camera up,
    down, left, and right, depending upon where you move your mouse |'
  prefs: []
  type: TYPE_TB
- en: '| Middle-mouse button + drag | This moves the camera up, down, left, and right,
    depending upon where you move your mouse |'
  prefs: []
  type: TYPE_TB
- en: '| Scroll up | This moves the camera forward |'
  prefs: []
  type: TYPE_TB
- en: '| Scroll down | This moves the camera backward |'
  prefs: []
  type: TYPE_TB
- en: '| *F* | This zooms in and focuses on the selected actor |'
  prefs: []
  type: TYPE_TB
- en: '| Arrow keys | This moves the camera forward, backward, left, and right |'
  prefs: []
  type: TYPE_TB
- en: '| *W* | This selects the translate tool |'
  prefs: []
  type: TYPE_TB
- en: '| *E* | This selects the rotation tool |'
  prefs: []
  type: TYPE_TB
- en: '| *R* | This selects the scale tool |'
  prefs: []
  type: TYPE_TB
- en: '| *W* + any mouse button | This moves the camera forward |'
  prefs: []
  type: TYPE_TB
- en: '| *S* + any mouse button | This moves the camera backward |'
  prefs: []
  type: TYPE_TB
- en: '| *A* + any mouse button | This moves the camera left |'
  prefs: []
  type: TYPE_TB
- en: '| *D* + any mouse button | This moves the camera right |'
  prefs: []
  type: TYPE_TB
- en: '| *E* + any mouse button | This moves the camera up |'
  prefs: []
  type: TYPE_TB
- en: '| *Q* + any mouse button | This moves the camera down |'
  prefs: []
  type: TYPE_TB
- en: '| *Z* + any mouse button | This increases the field of view (goes back to the
    default value when the buttons are released) |'
  prefs: []
  type: TYPE_TB
- en: '| *C* + any mouse button | This decreases the field of view (goes back to default
    value when the buttons are released) |'
  prefs: []
  type: TYPE_TB
- en: '| *Ctrl* + *S* | This saves the scene |'
  prefs: []
  type: TYPE_TB
- en: '| *Ctrl* + *N* | This creates a new scene |'
  prefs: []
  type: TYPE_TB
- en: '| *Ctrl* + *O* | This opens a saved scene |'
  prefs: []
  type: TYPE_TB
- en: '| *Ctrl* + *Alt* + *S* | This lets you save a scene in a different format |'
  prefs: []
  type: TYPE_TB
- en: '| *Alt* + left-mouse button+ drag | This creates a duplicate of the selected
    actor |'
  prefs: []
  type: TYPE_TB
- en: '| *Alt* + left-mouse button + drag | This rotates the camera in a complete
    360 degrees |'
  prefs: []
  type: TYPE_TB
- en: '| *Alt* + right-mouse button + drag | This moves the camera forward or backward
    |'
  prefs: []
  type: TYPE_TB
- en: '| *Alt* + *P* | This lets you enter into play mode |'
  prefs: []
  type: TYPE_TB
- en: '| *Esc* (while playing) | This escapes the play mode |'
  prefs: []
  type: TYPE_TB
- en: '| *F11* | This switches to immersive mode |'
  prefs: []
  type: TYPE_TB
- en: '| *G* | This switches to game mode |'
  prefs: []
  type: TYPE_TB
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we looked closely at the Project Brower, Editor, its UI, how
    to navigate through it, and some important controls and hotkeys that you should
    be aware of. We have now covered everything you need to know to actually start
    using UE4 to make games. So, without further ado, lets start making our game.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will take you through what a project is, the different
    types of projects you can create, how to use BSP brushes, importing and implementing
    assets in the game, lighting, and so on.
  prefs: []
  type: TYPE_NORMAL
