- en: C# with LINQ and Built-In Types
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we will talk about the basics of LINQ. You will learn how to
    use LINQ or Language Integrated Query. It's a powerful way of manipulating data
    directly within your C# code.
  prefs: []
  type: TYPE_NORMAL
- en: Adding a Show Values button to the HTML
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Bring up a project, and below the line beginning with `<form id=...` in the
    <html>, we will place a button. Change the text on the button to something different,
    for example, Show Values.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now switch to the Design view, and double-click on the Show Values button.
    This takes us into `Default.aspx.cs`. Delete the `Page_Load` block. We don''t
    need it. The relevant portion of the starting code for this project should look
    like *Figure 9.4.1*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/aaebe79d-7bbb-4d49-a1ca-e6ddafe87957.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 9.4.1: The starting code section for this project'
  prefs: []
  type: TYPE_NORMAL
- en: We'll work with a little bit of code in this chapter, but it's sequential from
    top to bottom.
  prefs: []
  type: TYPE_NORMAL
- en: Adding namespaces
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The first thing to do is to add two new namespaces; so, enter the following
    after `using System`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: LINQ stands for Language Integrated Query, and `using System.Collections .Generic`
    is for working with lists. These are the two new namespaces that we are using.
  prefs: []
  type: TYPE_NORMAL
- en: Working with the IEnumerable generic interface
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Next, in between the set of curly braces beneath the line beginning with `protected
    void Button1_Click...`, the first thing that we will do is create an array of
    names. For this, enter the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Let's name it `names`, and then say, create a `new string` array. Then, to specify
    the initializer list, we enter a series of names in quotes, and close this with
    a semicolon.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now notice that, on the left-hand side, we have `IEnumerable`. This is a generic
    interface. As you can see, the `new string` array in this line can be created
    this way because it''s possible to take an array then step through it, so that
    each entry inside the array is a string. So, it''s `IEnumerable`: we can list
    values within it, and each value to be listed is a string. To enumerate means
    to list.'
  prefs: []
  type: TYPE_NORMAL
- en: Converting an array to a list of integers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Next, enter the following below this line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: To make a list of integers, we say `lst = new int[]`. Then we specify the initializer
    list and the values shown here. It doesn't matter what values you use. I'll show
    you some of the methods. Of course, as you can imagine, there are many of them.
  prefs: []
  type: TYPE_NORMAL
- en: Now, note that you could not stop writing this line after the array. If you
    did, the pop-up tip would say Cannot implicitly convert type 'int[]' System.Collections.Generic.List<int>';
    so you have to add `.ToList()`. You can convert an array to a list of integers.
  prefs: []
  type: TYPE_NORMAL
- en: Determining the values in a collection
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now that we have collections of items to go through, we can do that. To do
    this, enter the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Here, we first operate on the list of numerical values, so we say `valuesMoreThanTen`.
    To make this happen, you enter the name of the list, which is `lst`. Notice in
    the pop-up tip all of the functions that have become available. One of them is
    `Where<>`. After you select `Where<>`, you can specify a condition that applies,
    in our case, where `x` is such that `x` is greater than `10`, or `(x => x > 10)`,
    and close this with a semicolon.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you hover your mouse over `Where`, and look where it says `IEnumerable<int>`,
    it says that it returns, in other words, an `IEnumerable` construct, which we
    can iterate through with a `foreach` loop, for example. Further, it says `(Func<int,bool>...`
    and then there is a `predicate` delegate. So, we will take each value and we''ll
    basically apply some action to it. We''ll check whether some condition holds:
    either the condition holds on it or it doesn''t.'
  prefs: []
  type: TYPE_NORMAL
- en: 'As you can see, we basically have LINQ, and then we have inside that, a Lambda
    expression. So, to make use of it, you''ll enter the following next:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Converting the values back to a list
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: After `valuesMoreThanTen`, you would like to be able to use a `foreach` loop.
    To do this, you've got to convert this back to a list because, remember, `IEnumerable`
    is not a list. That's why the `foreach` loop doesn't show if you typed it right
    after the `.` (dot) after `valuesMoreThanTen`. You convert it to a list, and then
    `foreach` shows. Now you can again display the values; so in `foreach x`, you'll
    take the `x` value and display it in a label as shown in the preceding line of
    code. This line now will display each `x` value from the `valuesMoreThanTen` list.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, you can tell just by examining it that `12`, `25`, and `54` should print.
    That''s the first thing. Now, let''s also display a horizontal line below this
    line. So, enter the following next:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Extracting values from the list and sorting them
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now, imagine that you have this array of names, and you want to extract those
    that, for example, have a `j` letter, and then sort them from, say, the shortest
    to the longest. These are the kinds of things that you can do when you operate
    on data. So, enter the following next:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Again, `IEnumerable` is of the `string` type in this line. That's why we mean
    that `IEnumerable` is generic, because it operates on integers, and string and
    so on. Next, you say `namesWithJSorted`, and I've named this variable this particular
    way because the functions will be chained from left to right. So, you type the
    name of the names array, and then you type `Where(name => name.Contains("j")`
    in order to check each name to see if it contains the letter `j`. Then further,
    once you have all of those names that contain a letter `j`, you'll order that
    result by the length of each name with `OrderBy(name => name.Length)`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Again, from left to right you can chain these functions. This is LINQ. As you
    can see inside each one, you basically have a Lambda expression: `Where` and then,
    `OrderBy`. It''s powerful, right?'
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, to display it, remember, because `namesWithJSorted` is `IEnumerable`,
    you can convert it back to a list and then use `foreach`; or, if you want, you
    can just type the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Remember, in the directly preceding line, `+=` is to append, `$` is for string
    interpolation, and `<br>` is there to push down a line. The actual value to be
    printed appears within the curly braces.
  prefs: []
  type: TYPE_NORMAL
- en: These are the basics of these concepts.
  prefs: []
  type: TYPE_NORMAL
- en: Running the program
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now, we have to confirm that this will work as expected. So, crank it up in
    your browser, and click on the Show Values button. As you can see in *Figure 9.4.2*,
    it displays x=12, x=25, and x=54, and then below that it displays the names job,
    john, and janet. Each name contains a `j` letter, and they are listed from shortest
    to longest, as expected:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/337f46a8-bf2b-46d4-8ce8-53d038f22cfc.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 9.4.2: The results of running the program for this chapter'
  prefs: []
  type: TYPE_NORMAL
- en: Remember, this is basically a combination. You have a Lambda expression, `(x
    => x > 10)`, and then you stick that into a method such as `where` or `OrderBy`.
    When you combine the two, the code becomes very powerful, as you can see, and
    very expressive, letting you accomplish a lot. Also, remember that on the left-hand
    side, many of the results in LINQ return items of the `IEnumerable` type.
  prefs: []
  type: TYPE_NORMAL
- en: Chapter review
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'For review, the complete version of the `Default.aspx.cs` file for this chapter,
    including comments, is shown in the following code block:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we talked about the basics of LINQ. You learned how to use
    LINQ, or Language Integrated Query. It's a powerful way of manipulating data directly
    within your C# code. You added namespaces, worked with the `IEnumerable` generic
    interface, converted an array into a list of integers, determined the values within
    a collection, converted those values back to a list, and extracted those values
    from the list and sorted them.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will talk about using LINQ with custom types.
  prefs: []
  type: TYPE_NORMAL
