- en: Chapter 3. Configuring the Server
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: WebSocket stands for bidirectional, full-duplex communication. As a result,
    we need two parties for this kind of conversation. In the previous chapter, we
    implemented the WebSocket client application. Now it's time to establish the other
    side of the channel, which is the WebSocket server.
  prefs: []
  type: TYPE_NORMAL
- en: Why do I need a WebSocket server?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We assume that you have a minor familiarity with servers in general. A server
    is nothing but a remote computer that has specific hardware and software requirements
    in order to achieve high availability and up-time, enhanced security, and management
    of multiple concurrent connections.
  prefs: []
  type: TYPE_NORMAL
- en: A WebSocket server is nothing but a simple program that is able to handle WebSocket
    events and actions. It usually exposes similar methods to the WebSocket client
    API and most programming languages provide an implementation. The following diagram
    illustrates the communication process between a WebSocket server and a WebSocket
    client, emphasizing the triggered events and actions.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following diagram shows WebSocket server and client event triggering:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Why do I need a WebSocket server?](img/6962_03_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Do not get confused—a WebServer can either run on top of Apache or IIS—or it
    can be a completely different application by itself.
  prefs: []
  type: TYPE_NORMAL
- en: Considering the hardware, you could use a super-computer or your developer machine
    as a server. It's all down to the requirements and the budget of each project.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up the server
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Implementing a WebSocket server from scratch is not a hard process, though it
    requires specific knowledge and it's far from the purposes of this book. As a
    result, we are going to use one of the existing WebSocket implementations that
    are currently out there. Thanks to the large community of developers, we can easily
    pick the WebSocket server of our preferred programming language or framework.
    Furthermore, most of the implementations are open source, so you can even adjust
    them to your own needs if necessary!
  prefs: []
  type: TYPE_NORMAL
- en: Selecting the technology that suits you
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We have listed some popular WebSocket server implementations. Here are some
    questions you should ask yourself before picking one:'
  prefs: []
  type: TYPE_NORMAL
- en: What technology are you most familiar with?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What are the specific requirements of your project?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Do you already have a solution you want to enhance?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Is the server's documentation thorough and understandable?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Is there an active support community for the server?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let's now have a look at the most popular WebSocket server libraries for the
    most extensively used programming languages.
  prefs: []
  type: TYPE_NORMAL
- en: C/C++
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '| Tufao | [https://github.com/vinipsmaker/tufao](https://github.com/vinipsmaker/tufao)
    |'
  prefs: []
  type: TYPE_TB
- en: '| Wslay | [http://wslay.sourceforge.net/](http://wslay.sourceforge.net/) |'
  prefs: []
  type: TYPE_TB
- en: '| Libwebsockets | [http://libwebsockets.org/trac](http://libwebsockets.org/trac)
    |'
  prefs: []
  type: TYPE_TB
- en: '| Mongoose | [https://code.google.com/p/mongoose/](https://code.google.com/p/mongoose/)
    |'
  prefs: []
  type: TYPE_TB
- en: Java
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '| Apache Tomcat | [http://tomcat.apache.org/](http://tomcat.apache.org/) |'
  prefs: []
  type: TYPE_TB
- en: '| JBoss | [http://www.jboss.org/](http://www.jboss.org/) |'
  prefs: []
  type: TYPE_TB
- en: '| GlassFish | [http://glassfish.java.net/](http://glassfish.java.net/) |'
  prefs: []
  type: TYPE_TB
- en: '| Atmosphere | [https://github.com/Atmosphere/atmosphere](https://github.com/Atmosphere/atmosphere)
    |'
  prefs: []
  type: TYPE_TB
- en: '| Play Framework | [http://www.playframework.com/](http://www.playframework.com/)
    |'
  prefs: []
  type: TYPE_TB
- en: '| Jetty | [http://www.eclipse.org/jetty/](http://www.eclipse.org/jetty/) |'
  prefs: []
  type: TYPE_TB
- en: '| jWebSocket | [http://jwebsocket.org/](http://jwebsocket.org/) |'
  prefs: []
  type: TYPE_TB
- en: '| Migratory data | [http://migratorydata.com/](http://migratorydata.com/) |'
  prefs: []
  type: TYPE_TB
- en: '| Bristleback | [http://bristleback.pl/](http://bristleback.pl/) |'
  prefs: []
  type: TYPE_TB
- en: .NET
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '| Internet Information Services 8 | [http://www.iis.net/](http://www.iis.net/)
    |'
  prefs: []
  type: TYPE_TB
- en: '| Fleck | [https://github.com/statianzo/Fleck](https://github.com/statianzo/Fleck)
    |'
  prefs: []
  type: TYPE_TB
- en: '| SuperWebSocket | [http://superwebsocket.codeplex.com/](http://superwebsocket.codeplex.com/)
    |'
  prefs: []
  type: TYPE_TB
- en: PHP
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '| Php-websocket | [https://github.com/nicokaiser/php-websocket](https://github.com/nicokaiser/php-websocket)
    |'
  prefs: []
  type: TYPE_TB
- en: '| Rachet | [http://socketo.me/](http://socketo.me/) |'
  prefs: []
  type: TYPE_TB
- en: '| Hoar | [https://github.com/hoaproject/Websocket](https://github.com/hoaproject/Websocket)
    |'
  prefs: []
  type: TYPE_TB
- en: Python
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '| Tornado | [http://www.tornadoweb.org/en/stable/](http://www.tornadoweb.org/en/stable/)
    |'
  prefs: []
  type: TYPE_TB
- en: '| Pywebsocket | [https://code.google.com/p/pywebsocket/](https://code.google.com/p/pywebsocket/)
    |'
  prefs: []
  type: TYPE_TB
- en: '| Autobahn | [http://autobahn.ws/](http://autobahn.ws/) |'
  prefs: []
  type: TYPE_TB
- en: '| txWS | [https://github.com/MostAwesomeDude/txWS](https://github.com/MostAwesomeDude/txWS)
    |'
  prefs: []
  type: TYPE_TB
- en: '| WebSocket for Python | [https://github.com/Lawouach/WebSocket-for-Python](https://github.com/Lawouach/WebSocket-for-Python)
    |'
  prefs: []
  type: TYPE_TB
- en: Ruby
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '| EM-WebSocket | [https://github.com/igrigorik/em-websocket](https://github.com/igrigorik/em-websocket)
    |'
  prefs: []
  type: TYPE_TB
- en: '| Socky server | [https://github.com/socky/socky-server-ruby](https://github.com/socky/socky-server-ruby)
    |'
  prefs: []
  type: TYPE_TB
- en: JavaScript
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This is no joke. You can create a web server using JavaScript thanks to `Node.js`.
    `Node.js` ([http://nodejs.org](http://nodejs.org)) is an event-driven framework
    that lets you build real-time web applications. It is also interpreted by Google's
    JavaScript engine, V8\. Although the framework does not support WebSockets out-of-the-box,
    there are some quite good extensions which do so.
  prefs: []
  type: TYPE_NORMAL
- en: '| Socket IO | [http://socket.io/](http://socket.io/) |'
  prefs: []
  type: TYPE_TB
- en: '| WebSocket-Node | [https://github.com/Worlize/WebSocket-Node](https://github.com/Worlize/WebSocket-Node)
    |'
  prefs: []
  type: TYPE_TB
- en: '| Node WebSocket Server | [https://github.com/miksago/node-websocket-server](https://github.com/miksago/node-websocket-server)
    |'
  prefs: []
  type: TYPE_TB
- en: '`Node.js` is constantly getting more and more fans, so it might be worth a
    try.'
  prefs: []
  type: TYPE_NORMAL
- en: Setting up the development environment
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The environment where your server will be created depends on the technology,
    frameworks, and programming languages that you are planning to use. There is an
    amazingly huge variety of **Integrated Development Environments** (**IDEs**) and
    utilities that make your life easier!
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is a list of some IDEs we propose, along with the web programming languages
    they support:'
  prefs: []
  type: TYPE_NORMAL
- en: '| IDE | Operating System | Supported languages |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| Aptana | Windows, Mac, Linux | HTML5JavaScriptPHP |'
  prefs: []
  type: TYPE_TB
- en: '| NetBeans | Windows, Mac, Linux | HTML5C/C++Java |'
  prefs: []
  type: TYPE_TB
- en: '| Eclipse (with the Web Developer plugin) | Windows, Mac, Linux | HTML5JavaScriptC/C++Java
    |'
  prefs: []
  type: TYPE_TB
- en: '| Visual Studio | Windows | HTML5JavaScript.NET |'
  prefs: []
  type: TYPE_TB
- en: '| WebMatrix | Windows | HTML5JavaScriptPHP.NET |'
  prefs: []
  type: TYPE_TB
- en: Throughout the book, we decided to use C#.NET and Fleck, though this should
    make no difference to you. Feel free to pick the language you prefer or the language
    your existing projects require.
  prefs: []
  type: TYPE_NORMAL
- en: 'For didactic purposes, C# has the following advantages:'
  prefs: []
  type: TYPE_NORMAL
- en: It runs on Windows using the .NET framework and on Mac and Linux using Mono
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It has an active community of developers, making it easier to find support
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It is easy-to-learn
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You can quickly setup a WebSocket server with minimum configuration
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Fleck library was chosen because of three reasons:'
  prefs: []
  type: TYPE_NORMAL
- en: It is supported on both Windows and Unix-based operating systems
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It is extremely easy-to-use and configure
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It is well-maintained and well-documented
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'This is how you can quickly set up a Fleck WebSocket server using C#:'
  prefs: []
  type: TYPE_NORMAL
- en: Download Visual Studio Express (It is freely available at [http://www.microsoft.com/visualstudio/eng/products/visual-studio-express-for-windows-desktop](http://www.microsoft.com/visualstudio/eng/products/visual-studio-express-for-windows-desktop)).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Download Fleck ([https://github.com/statianzo/Fleck](https://github.com/statianzo/Fleck)).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Launch Visual Studio and click on **File** | **New** | **Project**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Under Visual C#, select **Windows**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Choose **Console Application** (yes, a console-based server is the easiest way
    to set up a WebSocket server).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Name your project whatever you like and click on **OK**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: On the **Solution Explorer** tab, right-click on the **References** icon and
    select **Add new reference**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on **browse** and find the `Fleck.dll` file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on **OK** and you are done!
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Connecting to the web server
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The WebSocket server works in a similar way to the WebSocket clients. It responds
    to events and performs actions when necessary.Regardless of the programming language
    you use, every WebSocket server performs some specific actions. It is initialized
    to a WebSocket address, it handles `OnOpen`, `OnClose` and `OnMessage` events,
    and sends messages to the clients, too.
  prefs: []
  type: TYPE_NORMAL
- en: Creating the WebSocket server instance
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Every WebSocket server needs a valid host and port. Here is how we create a
    WebSocketServer instance in Fleck:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: You can type any valid URL you'd like and specify a port that is not in use.
  prefs: []
  type: TYPE_NORMAL
- en: It is very useful to keep a record of the connected clients, as you may need
    to provide them with different data or send different messages to each one.
  prefs: []
  type: TYPE_NORMAL
- en: 'Fleck represents the incoming connections (clients) with the `IWebSocketConnection`
    interface. We can create an empty list and update it whenever someone connects
    or disconnects from our service:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: After that, we can call the `Start` method and wait for the clients to connect.
    When started, the server is able to accept incoming connections.
  prefs: []
  type: TYPE_NORMAL
- en: 'In Fleck, the `Start` method needs a parameter which indicates the socket that
    raised the events:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Some syntax explanation: what follows the `Start` declaration is called a C#
    Action and you can totally ignore it if you''re using a different language. We''ll
    handle all of the events inside the `Start` block.'
  prefs: []
  type: TYPE_NORMAL
- en: Open
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `OnOpen` event determines that a new client has requested access and performs
    the initial handshake. We should add the client to the list and probably store
    any information related to it, such as the IP address. Fleck provides us with
    such information, as well as a unique identifier for the connection.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Close
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `OnClose` event is raised whenever a client is disconnected. We can remove
    that client from our list and inform the rest of the clients about the disconnection:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Message
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `OnMessage` event is raised when a client sends data to the server. Inside
    this event handler, we can transmit the incoming message to all of the clients,
    or probably select only some of them. The process is straightforward. Note that
    this handler takes a string named `message` as a parameter:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Send
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `Send()` method simply transmits the desired message to the specified client.
    Using `Send()`, we can deliver text or binary data across the clients. Let''s
    loop through the registered clients and transfer the messages to them. We need
    to modify the `OnMessage` event as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Obviously, you do not need to expose everyone's IP address or ID publicly! It's
    totally useless and makes no sense for your users (unless they are hackers). Of
    course, during a real chat conversation, users pick nicknames instead of string
    literals. We'll give them the nickname option in the next chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Fleck accepts strings and byte arrays. Strings contain plain text, XML, or JSON
    messages. Byte arrays are handful when dealing with images or binary files.
  prefs: []
  type: TYPE_NORMAL
- en: Other methods
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Depending on which WebSocket server implementation you use, there might be additional
    events or methods. For example, Fleck supports the `OnBinary` event, which is
    a binary-supporting equivalent of the `OnMessage` event.
  prefs: []
  type: TYPE_NORMAL
- en: Keep in mind that the web server stores the connections in a list and we need
    to loop through all of them in order to send messages.
  prefs: []
  type: TYPE_NORMAL
- en: The complete source code
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Here is the complete server-side source code, with a couple of extra additions
    for better user experience. The screenshots display a Chrome and an Internet Explorer
    10 window chatting side-by-side!
  prefs: []
  type: TYPE_NORMAL
- en: 'The following screenshot shows a user chatting using Chrome:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The complete source code](img/6962_03_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The following screenshot shows a second user chatting concurrently using Internet
    Explorer 10:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The complete source code](img/6962_03_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: By now, you should be able to create a complete WebSocket application! [Chapter
    2](ch02.html "Chapter 2. The WebSocket API"), *The WebSocket API*, illustrated
    how to configure a client using JavaScript and this chapter showed you how you
    can configure a WebSocket server using the environment and programming language
    you are most familiar with. Moreover, we had a look at the WebSocket server events
    and actions. In the upcoming chapters, we are going to learn how we can effectively
    handle different data formats and secure our WebSocket-based apps.
  prefs: []
  type: TYPE_NORMAL
