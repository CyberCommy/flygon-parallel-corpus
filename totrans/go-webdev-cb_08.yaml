- en: Working with the Go Web Application Framework – Beego
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following recipes:'
  prefs: []
  type: TYPE_NORMAL
- en: Creating your first project using Beego
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating your first controller and router
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating your first view
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating your first session variable
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating your first filter
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Handling HTTP errors in Beego
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Implementing caching in Beego
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Monitoring the Beego application
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Deploying the Beego application on a local machine
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Deploying the Beego application with Nginx
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A web application framework is a must whenever we are developing an application
    because it significantly speeds up and simplifies our work by eliminating the
    need to write a lot of repetitive code and providing features such as models,
    APIs, and other elements. Using an application framework, we can enjoy the perks
    of its architecture pattern and boost the development of an application.
  prefs: []
  type: TYPE_NORMAL
- en: A popular type of web application framework is **Model-View-Controller** (**MVC**)
    and there are many MVC frameworks available for Go, such as Revel, Utron, and
    Beego.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we will learn about Beego, which is one of the most popular
    and commonly used web MVC frameworks. We will start with creating the project
    and then move on to creating controllers, views, and  filters. We will also look
    at implementing caching, and monitoring and deploying an application.
  prefs: []
  type: TYPE_NORMAL
- en: Creating your first project using Beego
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The first and the foremost thing we have to do to start a project is to set
    up its basic architecture. In Beego, this can be achieved easily using a tool
    called `bee`, which we will cover in this recipe.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Install the `github.com/beego/bee` package using the `go get` command, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Open a terminal to your `$GOPATH/src` directory and create a project using
    the `bee new` command, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Once the command has executed successfully, it will create a new Beego project,
    and the creation steps on the console will look like the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/a8194ce7-d255-4723-b99f-c570e1fdeb92.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Go to the path of the newly created project and enter `bee run` to compile
    and run the project, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Once, command has executed successfully, `bee` will build the project and start
    the application, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/edc1967e-3c91-4b9e-ae04-4f85abd4cb87.png)'
  prefs: []
  type: TYPE_IMG
- en: How it works…
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Once the command has executed successfully, a web application will run on the
    default Beego port `8080` and browsing `http://localhost:8080/` will render the
    welcome page of the application, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/34d6133d-8cb1-476f-af60-3dccfa850c63.png)'
  prefs: []
  type: TYPE_IMG
- en: Creating your first controller and router
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: One of the main components of a web application is the controller, which acts
    as a coordinator between the view and the model and handles the user's requests,
    which could be a button click, or a menu selection, or HTTP `GET` and `POST` requests.
    In this recipe, we will learn how we can create a controller in Beego.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Move to `$GOPATH/src/my-first-beego-project/controllers` and create `firstcontroller.go`,
    as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Move to `$GOPATH/src/my-first-beego-project/routers` and edit `router.go` to
    add `GET` mapping `/employees`, which will be handled by the `GetEmployees` handler
    defined in `FirstController`, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the project using the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: How it works…
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Once the command has executed successfully, the web application will run on
    the default Beego port `8080`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, executing a `GET` request from the command line will give you a list
    of all the employees:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Let’s understand the program we have written:'
  prefs: []
  type: TYPE_NORMAL
- en: '`import “github.com/astaxie/beego"`: Here, we imported Beego.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`type FirstController struct { beego.Controller }`: Here, we defined the `FirstController`
    struct type, which contains an anonymous struct field of type `beego.Controller`
    because of which `FirstController` automatically acquires all the methods of `beego.Controller`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`func (this *FirstController) GetEmployees() { this.Ctx.ResponseWriter.WriteHeader(200)
    this.Data["json"] = employees this.ServeJSON() }` : Here, we defined the `GetEmployees`
    handler, which will execute for every `GET` request for the URL pattern `/employees`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In Go, functions or handlers that start with a capital letter are exported functions,
    which means they are public and can be used outside the program. That’s the reason
    we have defined all the functions in our program using a capital letter rather
    than in camel case.
  prefs: []
  type: TYPE_NORMAL
- en: Creating your first view
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A view is a visual representation of a model. It accesses data through the model
    and specifies how that data should be presented. It  maintains consistency in
    its presentation when the model changes, which can be either through a push model,
    where the view registers itself with the model for change notifications, or a
    pull model, where the view is responsible for calling the model when it needs
    to retrieve the most current data. In this recipe, we will learn how to create
    our first view to render the list of employees.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Move to `$GOPATH/src/my-first-beego-project/views` and create `dashboard.tpl` and
    copy the following content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Move to `$GOPATH/src/my-first-beego-project/controllers` and edit `firstcontroller.go`
    to add the `Dashboard` handler, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Move to `$GOPATH/src/my-first-beego-project/routers` and edit `router.go` to
    add the `GET` mapping `/dashboard`, which will be handled by the `Dashboard` handler
    defined in `FirstController`, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the project using the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: How it works…
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Once the command has executed successfully, the web application will run on
    the default Beego port `8080`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Browsing `http://localhost:8080/dashboard` will render the employee dashboard,
    as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/bb36f8f2-6852-4f28-8e3f-6778731ecb60.png)'
  prefs: []
  type: TYPE_IMG
- en: Creating your first session variable
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Whenever we need to pass on the user data from one HTTP request to another,
    we can make use of HTTP sessions, which we will be covering in this recipe.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready…
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This recipe assumes you have `Redis` installed and running locally on port `6379`.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Install the `github.com/astaxie/beego/session/redis` package using the `go
    get` command, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Move to `$GOPATH/src/my-first-beego-project/controllers` and create `sessioncontroller.go`,
    where we will define handlers which make sure that only authenticated users can
    view the home page, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Move to `$GOPATH/src/my-first-beego-project/routers` and edit `router.go` to
    add the `GET` mapping `/home`, `/login`, and `/logout`, which will be handled
    by the `Home`, `Login`, and `Logout` handlers defined in `FirstController`, respectively,
    as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Move to `$GOPATH/src/my-first-beego-project` and edit `main.go` to import `github.com/astaxie/beego/session/redis`,
    as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'Switch on the `session` usage in `$GOPATH/src/my-first-beego-project/conf/app.conf`,
    as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the program using the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: How it works…
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Once the command has executed successfully, the web application will run on
    the default Beego port `8080`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, we will execute a couple of commands to see how the session works. Firstly,
    we will access `/home` by executing the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'This will give us an unauthorized access message as a response from the server:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'Apparently, we can''t access it because we have to login into the application
    first, which will create a `beegosessionID`. Now let''s log in to the application
    by executing the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'This will result in the following response from the server:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/6ddd6d86-c388-4b8b-bcb9-bb0a801be17d.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now we will use the cookie `beegosessionID` created as part of the `/login`
    request to access `/home`, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: Creating your first filter
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Sometimes, we may want to perform logic either before an action method is called
    or after an action method runs. In that case, we use filters, which we will be
    covering in this recipe.
  prefs: []
  type: TYPE_NORMAL
- en: Filters are basically handlers which encapsulate the common functionality or
    the cross-cutting concern. We just define them once and then apply them to the
    different controllers and action methods.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Install the `github.com/astaxie/beego/context` package using the `go get` command,
    as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'Move to `$GOPATH/src/my-first-beego-project/filters` and create `firstfilter.go`,
    which runs before the `Controller`, and log the IP address and current timestamp,
    as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'Move to `$GOPATH/src/my-first-beego-project/routers` and edit `router.go` to
    add the `GET` mapping `/*`, which will be handled by the `LogManager` filter,
    as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the program using the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: How it works…
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Once the command has executed successfully, the web application will run on
    the default Beego port `8080`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, we will execute a request to get all the employees by executing the following
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'Once the command has executed successfully, we can see the IP and timestamp
    printed in the application logs on the console, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/5f17dd63-8b1e-4118-a2fa-686a57917a47.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Using `beego.InsertFilter("/*", beego.BeforeRouter, filters.LogManager) `,
    we inserted a filter in an application which executes for the URL pattern `/*`
    before finding a router and that is handled by `LogManager`. Similar to `beego.BeforeRouter`,
    there are four other places where we can position the filters: `beego**.**BeforeStatic`,
    `beego.BeforeExec`, `beego.AfterExec`, and `beego.FinishRouter`.'
  prefs: []
  type: TYPE_NORMAL
- en: Handling HTTP errors in Beego
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Error handling is one of the most important aspects in a web application design
    because it helps in two ways. Firstly, it lets the application user know in a
    relatively friendly manner that something has gone wrong and they should contact
    the technical support department or someone from tech support should be notified.
    Secondly, it allows the programmer to put in some niceties to aid in the debugging
    of issues. In this recipe, we will learn how we can implement error handling in
    Beego.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Move to `$GOPATH/src/my-first-beego-project/controllers` and create `errorcontroller.go`,
    where we will define handlers to handle `404` and `500` HTTP errors as well as
    the handler to handle any generic error in an application, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'Move to `$GOPATH/src/my-first-beego-project/controllers` and edit `firstcontroller.go`
    to add the `GetEmployee` handler, which will get the ID from an HTTP request parameter,
    fetch the employee details from the static employee array, and return it as a
    response or throw the generic error if the requested ID does not exist, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'Move to `$GOPATH/src/my-first-beego-project/views` and create `genericerror.tpl`
    with the following content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the program using the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: How it works…
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Once the command has executed successfully, the web application will run on
    the default Beego port `8080`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, browsing `http://localhost:8080/employee?id=2` will give you the employee
    details, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/46d2b6f4-a78c-46ce-b33c-653bf5346abe.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Whereas browsing `http://localhost:8080/employee?id=4` as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/15fa193a-8f0a-4154-b574-38c885b00a10.png)'
  prefs: []
  type: TYPE_IMG
- en: It will give you the error message as Some Error Occurred. This is because we
    have asked for details of the employee with the ID as `4`, which does not exist
    in the static employee array, hence the generic error thrown from the server,
    which is handled by the `ErrorGeneric` handler defined in `errorcontroller.go`.
  prefs: []
  type: TYPE_NORMAL
- en: Implementing caching in Beego
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Caching data in a web application is sometimes necessary to avoid requesting
    the static data from a database or external service again and again. In this recipe,
    we will learn how we can implement caching in a Beego application.
  prefs: []
  type: TYPE_NORMAL
- en: 'Beego supports four cache providers: `file`, `Memcache`, `memory`, and `Redis`.
    In this recipe, we will be working with the framework default cache provider,
    which is a `memory` cache provider.'
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Install the `github.com/astaxie/beego/cache` package using the `go get` command,
    as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'Move to `$GOPATH/src/my-first-beego-project/controllers` and create `cachecontroller.go`,
    where we will define the `GetFromCache` handler, which will get the value for
    a key from a cache and write it to an HTTP response, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'Move to `$GOPATH/src/my-first-beego-project/routers` and edit `router.go` to
    add the `GET` mapping `/getFromCache`, which will be handled by the `GetFromCache`
    handler defined in a `CacheController`, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the program using the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: How it works…
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Once the command has executed successfully, the web application will run on
    the default Beego port `8080`.
  prefs: []
  type: TYPE_NORMAL
- en: 'On application startup, the key with the name `foo` with the value as `bar`
    will be added to the cache. Next, browsing `http://localhost:8080/getFromCache`
    will read a `foo` key value from the cache, append it to Hello, and display it
    on the browser,as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/35ad2340-26fa-41f7-9b3b-dd7c9c2d5056.png)'
  prefs: []
  type: TYPE_IMG
- en: Monitoring the Beego application
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Once the Beego application is up and running, we can easily monitor application
    request statistics, performance, health checks, tasks, and the configuration status
    through its admin dashboard. We will learn how to do this in this recipe.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Enable the application live monitor by adding `EnableAdmin = true` in `$GOPATH/src/my-first-beego-project/conf/app.conf`,
    as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: 'Optionally, change the port it listens on, by adding fields in `$GOPATH/src/my-first-beego-project/conf/app.conf`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the program using the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: How it works…
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Once the command has executed successfully, the web application will run on
    the default Beego port `8080` and browsing `http://localhost:8088/` will render
    the admin dashboard, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/c53d95cd-edbc-432a-b968-96b5e9211ce8.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Browsing `http://localhost:8088/qps` will show us the request statistics of
    an application, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/b9affdd6-bf38-4319-8855-584efdaf1be2.png)'
  prefs: []
  type: TYPE_IMG
- en: Deploying the Beego application on a local machine
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Once the application development is over, we have to deploy it to make it available
    for use by the end users, which can be done either locally or remotely. In this
    recipe, we will learn how we can deploy our Beego application on a local machine.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Because the application created by `bee` is in the development mode by default
    and it’s always a best practice to run an application in the production mode on
    the public facing servers, we have to change the `RunMode` as `prod` in `$GOPATH/src/my-first-beego-project/conf/app.conf`,
    as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: 'Include static files, configuration files, and templates as part of the Beego
    application bytecode file in a separate directory by executing the following commands:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: 'Move to `$GOPATH/my-first-beego-app-deployment` and use the `nohup` command
    to run an application as a backend process, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: How it works…
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Once the command has executed successfully, the web application will run on
    the default Beego port `8080`, and browsing `http://localhost:8080/` will render
    the welcome page of the application, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/4d67d510-d668-4788-b5fe-53b2f4d307bb.png)'
  prefs: []
  type: TYPE_IMG
- en: Deploying the Beego application with Nginx
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous recipe, we learned how we can run the Beego application locally.
    In this recipe, we will be deploying the same application with `Nginx`.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready…
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This recipe assumes you have `Nginx` installed and running on port `80`. For
    me, it's installed at `/Users/ArpitAggarwal/nginx`.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Open the Nginx configuration file at `/Users/ArpitAggarwal/nginx/conf/nginx.conf`
    and replace the `location` block under `server` with the following content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: 'Start Nginx by executing the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the Beego application by executing the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: How it works…
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Once the command has executed successfully, browsing `http://localhost:80/`
    will render the welcome page of the application, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/9ca23b43-cd30-4fb7-8c77-33a1e83f9530.png)'
  prefs: []
  type: TYPE_IMG
