- en: Preface
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Linux system programming is all about developing system programs for the Linux
    operating system. Linux is the world's most popular open-source operating system
    and runs on everything from big servers to small **Internet of Things** (**IoT**)
    devices. Knowing how to write system programs for Linux will enable you to extend
    the operating system and connect it with other programs and systems.
  prefs: []
  type: TYPE_NORMAL
- en: 'We''ll start by learning how to make our programs easy to script and easy to
    interact with other programs. When we write system programs for Linux, we should
    always strive to make them small and do one thing only—and do it well. This is
    one of the key concepts in Linux: to create small programs that can exchange data
    with each other in simple ways.'
  prefs: []
  type: TYPE_NORMAL
- en: As we move ahead, we'll take a deep dive into C and look at how the compiler
    works, what the linker does, how to write Makefiles, and much more.
  prefs: []
  type: TYPE_NORMAL
- en: Then, we'll learn all about forking and daemons. We'll also create our own daemon.
    We will then put our daemon under systemd's control. This will enable us to start,
    stop, and restart the daemon using built-in Linux tools.
  prefs: []
  type: TYPE_NORMAL
- en: We will also learn how to make our processes exchange information using different
    kinds of **Inter-Process Communication** (**IPC**). We'll also take a look at
    how to write threaded programs.
  prefs: []
  type: TYPE_NORMAL
- en: At the end of this book, we'll cover how to debug our programs using the **GNU
    Debugger** (**GDB**) and Valgrind.
  prefs: []
  type: TYPE_NORMAL
- en: By the end of this book, you'll be able to write a wide variety of system programs
    for Linux—everything from filters to daemons.
  prefs: []
  type: TYPE_NORMAL
- en: Who this book is for
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This book is intended for anyone who wants to develop system programs for Linux
    and wants to have a deep understanding of the Linux system. Anyone facing any
    issues related to a particular part of Linux system programming and looking for
    some specific recipes or solutions can take advantage of this book.
  prefs: []
  type: TYPE_NORMAL
- en: What this book covers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '[*Chapter 1*](B13043_01_Final_SK_ePub.xhtml#_idTextAnchor020), *Getting the
    Necessary Tools and Writing Our First Linux Programs*, shows you how to install
    the tools we need throughout this book. We also write our first program in this
    chapter.'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 2*](B13043_02_Final_SK_ePub.xhtml#_idTextAnchor050), *Making Your
    Programs Easy to Script*, covers how—and why—we should make our programs easy
    to script and easy to be used by other programs on the system.'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 3*](B13043_03_Final_SK_ePub.xhtml#_idTextAnchor097), *Diving Deep
    into C in Linux*, takes us on a journey into the inner workings of C programming
    in Linux. We learn how to use system calls, how the compiler works, how to use
    the Make tool, how to specify different C standards, and so on.'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 4*](B13043_04_Final_SK_ePub.xhtml#_idTextAnchor147), *Handling Errors
    in Your Programs*, teaches us how to handle errors gracefully.'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 5*](B13043_05_Final_SK_ePub.xhtml#_idTextAnchor182), *Working with
    File I/O and Filesystem Operations*, covers how to read and write to files, using
    both file descriptors and streams. This chapter also covers how to create and
    delete files and read file permissions using system calls.'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 6*](B13043_06_Final_SK_ePub.xhtml#_idTextAnchor245), *Spawning Processes
    and Using Job Control*, covers how forking works, how to create a daemon, what
    parent processes are, and how to send jobs to the background and foreground.'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 7*](B13043_07_Final_SK_ePub.xhtml#_idTextAnchor299), *Using systemd
    to Handle Your Daemons*, shows us how to put our daemon from the previous chapter
    under the control of systemd. This chapter also teaches us how to write logs to
    systemd''s journal and how to read those logs.'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 8*](B13043_08_Final_SK_ePub.xhtml#_idTextAnchor330), *Creating Shared
    Libraries*, teaches us what shared libraries are, why they''re important, and
    how to make our own shared libraries.'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 9*](B13043_09_Final_SK_ePub.xhtml#_idTextAnchor365), *Terminal I/O
    and Changing Terminal Behavior*, covers how to modify the terminal in different
    ways—for example, how to disable echoing for a password prompt.'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 10*](B13043_10_Final_SK_ePub.xhtml#_idTextAnchor402), *Using Different
    Kinds of IPC*, is all about IPC—that is, how to make processes communicate with
    each other on the system. This chapter covers FIFO, Unix sockets, message queues,
    pipes, and shared memory.'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 11*](B13043_11_Final_SK_ePub.xhtml#_idTextAnchor460), *Using Threads
    in Your Programs*, explains what threads are, how to write threaded programs,
    how to avoid race conditions, and how to optimize threaded programs.'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 12*](B13043_12_Final_SK_ePub.xhtml#_idTextAnchor489), *Debugging
    Your Programs*, covers debugging using GDB and Valgrind.'
  prefs: []
  type: TYPE_NORMAL
- en: To get the most out of this book
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To get the most out of this book, you'll need a basic understanding of Linux,
    some basic commands, be familiar with moving around the filesystem, and installing
    new programs. It would help if you also have a basic understanding of programming,
    preferably the C language.
  prefs: []
  type: TYPE_NORMAL
- en: You will need a Linux computer with root access—either via su or sudo—to complete
    all the recipes. You'll also need to install the GCC compiler, the Make tool,
    GDB, Valgrind, and some other smaller tools. The particular Linux distribution
    doesn't matter that much. There are installation instructions in the book for
    these programs for Debian, Ubuntu, CentOS, Fedora, and Red Hat.
  prefs: []
  type: TYPE_NORMAL
- en: '**If you are using the digital version of this book, we advise you to type
    the code yourself or access the code via the GitHub repository (link available
    in the next section). Doing so will help you avoid any potential errors related
    to the copying and pasting of code.**'
  prefs: []
  type: TYPE_NORMAL
- en: Download the example code files
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You can download the example code files for this book from GitHub at [https://github.com/PacktPublishing/Linux-System-Programming-Techniques](https://github.com/PacktPublishing/Linux-System-Programming-Techniques).
    In case there's an update to the code, it will be updated on the existing GitHub
    repository.
  prefs: []
  type: TYPE_NORMAL
- en: We also have other code bundles from our rich catalog of books and videos available
    at [https://github.com/PacktPublishing/](https://github.com/PacktPublishing/).
    Check them out!
  prefs: []
  type: TYPE_NORMAL
- en: Code in Action
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Code in Action videos for this book can be viewed at https://bit.ly/39ovGd6.
  prefs: []
  type: TYPE_NORMAL
- en: Download the color images
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We also provide a PDF file that has color images of the screenshots/diagrams
    used in this book. You can download it here: [http://www.packtpub.com/sites/default/files/downloads/9781789951288_ColorImages.pdf](_ColorImages.pdf).'
  prefs: []
  type: TYPE_NORMAL
- en: Conventions used
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are a number of text conventions used throughout this book.
  prefs: []
  type: TYPE_NORMAL
- en: '`Code in text`: Indicates code words in the text, directories, filenames, file
    extensions, pathnames, dummy URLs, user input, and so on. Here is an example:
    "Copy the `libprime.so.1` file to `/usr/local/lib`."'
  prefs: []
  type: TYPE_NORMAL
- en: 'A block of code is set as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'When we wish to draw your attention to a particular part of a code block, the
    relevant lines or items are set in bold:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Any command-line input or output is written as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: In numbered listings, command-line input is set in bold. The `$>` characters
    indicate the prompt and aren't something you should write.
  prefs: []
  type: TYPE_NORMAL
- en: 'This is an example of a numbered listing:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: $> ./exist.sh /asdf &> /dev/null; \
  prefs: []
  type: TYPE_NORMAL
- en: if [ $? -eq 3 ]; then echo "That doesn't exist"; fi
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: That doesn't exist
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
