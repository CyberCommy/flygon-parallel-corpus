- en: Bells and Whistles
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Using the Django shell
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using database query expressions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Monkey patching the `slugify()` function for better internationalization support
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Toggling the Debug toolbar
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using ThreadLocalMiddleware
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using signals to notify administrators about new entries
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Checking for missing settings
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we will go over several important bits and pieces that will
    help you to better understand and utilize Django. We will provide an overview
    of how to use the Django shell to experiment with the code before writing it in
    the files. You will be introduced to monkey patching, also known as guerrilla
    patching, which is a powerful feature of dynamic languages, such as Python and
    Ruby. We will also talk about full-text search capabilities, and you will learn
    how to debug your code and check its performance. Then, you will learn how to
    access the currently logged-in user (and other request parameters) from any module.
    You will also learn how to handle signals and create system checks. Get ready
    for an interesting programming experience!
  prefs: []
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To work with the code of this chapter, you will need the latest stable version
    of a Python, MySQL, or PostgreSQL database and a Django project with a virtual
    environment.
  prefs: []
  type: TYPE_NORMAL
- en: You can find all the code for this chapter in the `ch10` directory of the GitHub
    repository at [https://github.com/PacktPublishing/Django-3-Web-Development-Cookbook-Fourth-Edition](https://github.com/PacktPublishing/Django-3-Web-Development-Cookbook-Fourth-Edition).
  prefs: []
  type: TYPE_NORMAL
- en: Using the Django shell
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'With the virtual environment activated and your project directory selected
    as the current directory, enter the following command in your command-line tool:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: By executing the preceding command, you will enter an interactive Python shell,
    configured for your Django project, where you can play around with the code, inspect
    the classes, try out methods, or execute scripts on the fly. In this recipe, we
    will go over the most important functions that you need to know in order to work
    with the Django shell.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'You can install either **IPython** or **bpython** to provide additional interface
    options for Python shells or you can install both if you want a choice. These
    will highlight the syntax for the output of your Django shell and will add some
    other helpers. Install them both by using the following commands for a virtual
    environment:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Learn the basics of using the Django shell by following these instructions:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Run the Django shell by typing the following command:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'If you have installed `IPython` or`bpython`, then whichever one you have installed
    will automatically become the default interface when you are entering the shell.
    You can also use a particular interface by adding the `-i <interface>` option
    to the preceding command. The prompt will change according to which interface
    you use. The following screenshot shows what an `IPython` shell might look like,
    starting with `In [1]:` as the prompt:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/cee38439-ef1b-4683-9bd3-9a4bd12b37c4.png)'
  prefs: []
  type: TYPE_IMG
- en: 'If you use `bpython`, the shell will be shown with the `>>>` prompt, along
    with code highlighting and text autocompletion when you type, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/1943fe09-c0c4-4e1e-902d-52888447be3c.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The **default Python interface** shell looks as follows, also using the `>>>`
    prompt, but with a preamble that provides information about the system:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/d462bac1-2f1a-47f3-95e5-723b4ccad356.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now you can import classes, functions, or variables, and play around with them.
    For example, to see the version of an installed module, you can import the module
    and then try to read its `__version__`, `VERSION`, or `version` attribute (shown
    using `bpython`, which will also demonstrate both its highlighting and autocompletion
    features), as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/e1ec6437-bcc0-432d-8f95-ea0a9089f663.png)'
  prefs: []
  type: TYPE_IMG
- en: 'To get a comprehensive description of a module, class, function, method, keyword,
    or documentation topic, use the `help()` function. You can either pass a string
    with the path to a specific entity or the entity itself, as follows:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: This will open the help page for the `django.forms` module. Use the arrow keys
    to scroll the page up and down. Press `Q` to get back to the shell. If you run
    `help()` without the parameters, it opens an interactive help page. There, you
    can enter any path of a module, class, function, and so on, and get information
    on what it does and how to use it. To quit the interactive help, press `Ctrl +
    D`.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is an example of how to pass an entity to the `help()` function
    with IPython:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/24b5ec75-ff8f-4aa0-8dac-9cca0983c654.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Doing this will open a help page for the `ModelForm` class, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/9e660105-7b0f-4ee7-a7dd-275a31e0ee46.png)'
  prefs: []
  type: TYPE_IMG
- en: 'To quickly see what fields and values are available for a model instance, use
    the `__dict__` attribute. You can use the `pprint()` function to print the dictionaries
    in a more readable format (not just one long line), as shown in the following
    screenshot. Note that when we use `__dict__`, we don''t get many-to-many relationships;
    however, this might be enough for a quick overview of the fields and values:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/1944ed9a-8ccd-4814-868d-1cbce7593817.png)'
  prefs: []
  type: TYPE_IMG
- en: 'To get all of the available properties and methods of an object, you can use
    the `dir()` function, as follows:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/5b025518-cda4-4e34-8ec6-8f5d856a6674.png)'
  prefs: []
  type: TYPE_IMG
- en: 'To print one attribute per line, you can use the code shown in the following
    screenshot:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/f6dd409a-6e5c-48d6-9e54-9986f6050a6f.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The Django shell is useful for experimenting with `QuerySets` or regular expressions
    before putting them into your model methods, views, or management commands. For
    example, to check the email validation regular expression, you can type the following
    into the Django shell:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'If you want to try out different `QuerySets`, use the following code:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'To exit the Django shell, press *Ctrl* + *D* or type the following command:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The difference between a normal Python shell and the Django shell is that when
    you run the Django shell, `manage.py` sets the `DJANGO_SETTINGS_MODULE` environment
    variable so that it points to the project's `settings.py` path, and then all of
    the code in the Django shell is handled in the context of your project. With the
    use of the third-party IPython or bpython interfaces, we can enhance the default
    Python shell further, with syntax highlighting, autocompletion, and more.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The *Using database query expressions* recipe
  prefs: []
  type: TYPE_NORMAL
- en: The *Monkey patching the slugify() function for better internationalization
    support* recipe
  prefs: []
  type: TYPE_NORMAL
- en: Using database query expressions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Django Object-Relational Mapping (ORM)** comes with special abstraction constructs
    that can be used to build complex database queries. They are called **query expressions**,
    and they allow you to filter data, order it, annotate new columns, and aggregate
    relations. In this recipe, you will see how these can be used in practice. We
    will create an app that shows viral videos and counts how many times each video
    has been seen by anonymous or logged-in users.'
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To start with, create a `viral_videos` app with a `ViralVideo` model and set
    up the system so that it logs to a log file by default:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create the `viral_videos` app and add it under `INSTALLED_APPS` in the settings:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, create a model for viral videos with a **Universally Unique Identifier** (**UUID**)
    as a primary key, along with creation and modification timestamps, a title, embedded
    code, impressions by anonymous users, and impressions by authenticated users,
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Make and run migrations for the new app so that your database will be ready
    to go:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Add logging configuration to the settings:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: This will log debugging information into a temporary file named `tmp/debug.log`.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To illustrate the query expressions, let''s create the viral video detail view
    and plug it into the URL configuration, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create the viral video list and detail views in `views.py` as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Define the URL configuration for the app as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Include the URL configuration of the app in the project''s root URL configuration
    as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a template for the viral video list view as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a template for the viral video detail view as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Set up the administration for the `viral_videos` app as follows, and add some videos
    to the database when you are finished:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'You might have noticed the `logger.debug()` statement in the view. If you run
    the server in `DEBUG` mode and access a video in the browser (for example, `http://127.0.0.1:8000/en/viral-videos/2b14ffd3-d1f1-4699-a07b-1328421d8312/`,
    in local development), you will see an SQL query like the following printed in
    the logs (`tmp/debug.log`):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, in the browser, you will see a simple page showing the following:'
  prefs: []
  type: TYPE_NORMAL
- en: The title of the video
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The label of the video
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The embedded video
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The number of views from authenticated and anonymous users, and the number of
    views in total
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'It will be similar to the following image:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/4a1f0dea-f959-4597-879d-5e24a3470968.png)'
  prefs: []
  type: TYPE_IMG
- en: The `annotate()` method in Django `QuerySets` allows you to add extra columns
    to the `SELECT` SQL statement, as well as properties that were created on the
    fly for the objects retrieved from `QuerySets`. With `models.F()`, we can reference
    different field values from the selected database table. In this example, we will
    create the `total_views` attribute, which is the sum of the views from authenticated
    and anonymous users.
  prefs: []
  type: TYPE_NORMAL
- en: With `models.Case()` and `models.When()`, we can return the values according
    to different conditions. To mark the values, we are using `models.Value()`. In
    our example, we will create the `label` column for the SQL query and the property
    for the objects returned by `QuerySet`. It will be set to popular if it has more
    than 500 impressions, new if it was created in the last 24 hours, and cool otherwise.
  prefs: []
  type: TYPE_NORMAL
- en: At the end of the view, we called the `qs.update()` methods. They increment
    the `authenticated_views` or `anonymous_views` of the current video, depending
    on whether the user looking at the video was logged in. The incrementation happens
    not at the Python level, but at the SQL level. This solves issues with so-called
    race conditions where two or more visitors are accessing the view at the same
    time, trying to increase the view count simultaneously.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The *Using the Django shell* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Creating a model mixin with URL-related methods* recipe in [Chapter 2](4d961db0-e9dd-4449-b140-41ea147bccb5.xhtml)*,
    Models and Database Structure*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Creating a model mixin to handle creation and modification dates* recipe
    in [Chapter 2](4d961db0-e9dd-4449-b140-41ea147bccb5.xhtml)*, Models and Database
    Structure*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Monkey patching the slugify() function for better internationalization support
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A monkey patch (or guerrilla patch) is a piece of code that extends or modifies
    another piece of code at runtime. It is not recommended that you use monkey patches
    often; however, sometimes, they are the only possible way to fix a bug in complex
    third-party modules without creating a separate branch of the module. Also, monkey
    patching can be used to prepare functional or unit tests without using complicated
    and time-consuming database or file manipulations.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, you will learn how to exchange the default `slugify()` function
    with the one from the third-party `transliterate` package, which handles the conversion
    of Unicode characters to ASCII equivalents more intelligently and includes a number
    of language packs that provide even more specific transformations as needed. As
    a quick reminder, we use the `slugify()` utility to create a URL-friendly version
    of an object's title or uploaded filename. When processed, the function strips
    any leading and trailing whitespace, converts the text to lowercase, removes non-alphanumeric
    characters, and converts spaces to hyphens.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s start with these small steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Install `transliterate` in your virtual environment as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: Then, create a `guerrilla_patches` app in your project and put it under `INSTALLED_APPS`
    in the settings.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In the `models.py` file of the `guerrilla_patches` app, overwrite the `slugify`
    function from `django.utils.text` with the one from the `transliterate` package:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The default Django `slugify()` function handles German diacritical symbols
    incorrectly. To see this for yourself, try to slugify a very long German word
    with all the German diacritical symbols. First, run the following code in the
    Django shell, without the monkey patch:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: This is incorrect in German, as the letter `ß` is totally stripped out instead
    of being substituted for `ss` and the letters `ä`, `ö`, and `ü` are changed to
    `a`, `o`, and `u`, where they should have been substituted with `ae`, `oe`, and
    `ue`.
  prefs: []
  type: TYPE_NORMAL
- en: 'The monkey patch that we created loads the `django.utils.text` module at initialization
    and reassigns `transliteration.slugify` in place of the core `slugify()` function.
    Now, if you run the same code in the Django shell, you will get the correct results,
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: To read more about how to utilize the `transliterate` module, refer to [https://pypi.org/project/transliterate](https://pypi.org/project/transliterate/).
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Before creating a monkey patch, we need to completely understand how the code
    that we want to modify works. This can be done by analyzing the existing code
    and inspecting the values of different variables. To do this, there is a useful
    built-in Python debugger module, **pdb,** that can be temporarily added to the
    Django code (or any third-party module) to stop the execution of a development
    server at any breakpoint. Use the following code to debug an unclear part of a
    Python module:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: This launches the interactive shell, where you can type in the variables in
    order to see their values. If you type `c` or `continue`, the code execution will
    continue until the next breakpoint. If you type `q` or `quit`, the management
    command will be aborted.
  prefs: []
  type: TYPE_NORMAL
- en: You can learn more Python debugger commands and how to inspect the traceback
    of the code at [https://docs.python.org/3/library/pdb.html](https://docs.python.org/3/library/pdb.html).
  prefs: []
  type: TYPE_NORMAL
- en: 'Another quick way to see the value of a variable in the development server
    is to raise a warning with the variable as a message, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: When you are in `DEBUG` mode, the Django logger will provide you with the traceback
    and other local variables.
  prefs: []
  type: TYPE_NORMAL
- en: Don't forget to remove debugging code before committing your work to a repository.
  prefs: []
  type: TYPE_NORMAL
- en: If you are using the PyCharm interactive development environment, you can set
    breakpoints and debug variables there visually without modifying the source code.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The *Using the Django shell* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Toggling the Debug toolbar
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: While developing with Django, you may want to inspect request headers and parameters,
    check the current template context, or measure the performance of SQL queries.
    All of this and more is possible with the **Django Debug Toolbar**. It is a configurable
    set of panels that display various debugging information about the current request
    and response. In this recipe, we will guide you through how to toggle the visibility
    of the Debug toolbar, depending on a cookie whose value can be set by a bookmarklet.
    A bookmarklet is a bookmark with a small piece of JavaScript code that you can
    run on any page in a browser.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To get started with toggling the visibility of the Debug toolbar, go through
    the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Install the Django Debug Toolbar in your virtual environment:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'Add `"debug_toolbar"` under `INSTALLED_APPS` in the settings:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Follow these steps to set up the Django Debug Toolbar, which can be switched
    on or off using a bookmarklet in the browser:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following project settings:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'In the `core` app, create a `misc.py` file with the `custom_show_toolbar()` function,
    as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'In the `urls.py` of the project, add these configuration rules:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'Open the Chrome or Firefox browser and go to the bookmark manager. Then, create
    two new bookmarks that contain JavaScript. The first link will show the toolbar,
    and will look similar to the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/eb9e72cf-62f5-499f-80d5-af10e85065c7.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The JavaScript code is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'The second JavaScript link will hide the toolbar, and will look similar to
    the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/1894ef15-be7e-4e6a-b76a-5b69c7d710c1.png)'
  prefs: []
  type: TYPE_IMG
- en: 'This is the full JavaScript code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `DEBUG_TOOLBAR_PANELS` setting defines the panels to show in the toolbar.
    The `DEBUG_TOOLBAR_CONFIG` dictionary defines the configuration for the toolbar,
    including a path to the function that is used to check whether or not to show
    the toolbar.
  prefs: []
  type: TYPE_NORMAL
- en: 'By default, when you browse through your project, the Django Debug Toolbar
    will not be shown; however, as you click on your bookmarklet, Debug Toolbar On,
    the `DebugToolbar` cookie will be set to `1`, the page will be refreshed, and
    you will see the toolbar with debugging panels—for example, you will be able to
    inspect the performance of SQL statements for optimization, as shown in the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/522d836e-d3fa-4c80-8f8f-64fb91b4789e.png)'
  prefs: []
  type: TYPE_IMG
- en: 'You will also be able to check the template context variables for the current
    view, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/fc773aa8-5179-435c-a50d-d4efc15bf495.png)'
  prefs: []
  type: TYPE_IMG
- en: Clicking on the second bookmarklet, Debug Toolbar Off, will similarly set the
    `DebugToolbar` cookie to `0` and refresh the page, hiding the toolbar again.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The *Getting detailed error reporting via email* recipe in [Chapter 13](498be2b9-4d46-4b50-ab7a-27c535792ae6.xhtml)*,
    Maintenance*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using ThreadLocalMiddleware
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `HttpRequest` object contains useful information about the current user,
    language, server variables, cookies, session, and so on. As a matter of fact,
    `HttpRequest` is provided in the views and middleware, and you can pass it (or
    its attribute values) to forms, model methods, model managers, templates, and
    so on. To make life easier, you can use a so-called `ThreadLocalMiddleware` that
    stores the current `HttpRequest` object in the globally accessible Python thread.
    Therefore, you can access it from model methods, forms, signal handlers, and other
    places that didn't have direct access to the `HttpRequest` object previously.
    In this recipe, we will define this middleware.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Create the `core` app and put it under `INSTALLED_APPS` in the settings, if
    you have not done so already.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Execute the following two steps to set up `ThreadLocalMiddleware`, which can
    be used to get the current `HttpRequest` or user in any function or method of
    the project''s code:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Add a `middleware.py` file to the `core` app with the following content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'Add this middleware to `MIDDLEWARE` in the settings:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `ThreadLocalMiddleware` processes each request and stores the current `HttpRequest`
    object in the current thread. Each request–response cycle in Django is single
    threaded. We have created two functions: `get_current_request()` and `get_current_user()`.
    These functions can be used from anywhere to grab the current `HttpRequest` object
    or the current user, respectively.'
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, you can use this middleware to develop and use `CreatorMixin`,
    which will save the current user as the creator of a new model object, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The *Creating a model mixin with URL-related methods* recipe in [Chapter 2](4d961db0-e9dd-4449-b140-41ea147bccb5.xhtml)*,
    Models and Database **Structure*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Creating a model mixin to handle creation and modification dates* recipe
    in [Chapter 2](4d961db0-e9dd-4449-b140-41ea147bccb5.xhtml)*, Models and Database
    Structure*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Creating a model mixin to take care of meta tags* recipe in [Chapter 2](4d961db0-e9dd-4449-b140-41ea147bccb5.xhtml)*,
    Models and Database Structure*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Creating a model mixin to handle generic relations* recipe in [Chapter
    2](4d961db0-e9dd-4449-b140-41ea147bccb5.xhtml)*, Models and Database Structure*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using signals to notify administrators about new entries
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Django framework includes the concept of **signals**, which are similar
    to events in JavaScript. There are a handful of built-in signals. You can use
    them to trigger actions before and after the initialization of a model, saving
    or deleting an instance, migrating the database schema, handling a request, and
    so on. Moreover, you can create your own signals in your reusable apps and handle
    them in other apps. In this recipe, you will learn how to use signals to send
    emails to administrators whenever a specific model is saved.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let's start with the `viral_videos` app that we created in the *Using database
    query expressions* recipe.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Follow these steps to create notifications for administrators:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a `signals.py` file with the following content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: 'Then we need to create some templates. Start with the template for the email
    subject:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: 'Then create a template for a plain text message—something like the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: 'Then create a template for the HTML message as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: 'Create the `apps.py` file with the following content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: 'Update the `__init__.py` file with the following content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: 'Make sure that you have `ADMINS` set in the project settings similar to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `ViralVideosAppConfig` app configuration class has the `ready()` method,
    which will be called when all of the models of the project are loaded into the
    memory. According to the Django documentation, signals allow for certain senders
    to notify a set of receivers that an action has taken place. In the `ready()`
    method, therefore, we import the `inform_administrators()` function.
  prefs: []
  type: TYPE_NORMAL
- en: Through the `@receiver` decorator, `inform_administrators()` is registered for
    the `post_save` signal, and we have limited it to handle only the signals where
    the `ViralVideo` model is `sender`. Therefore, whenever we save a `ViralVideo`
    object, the `receiver` function will be called. The `inform_administrators()`
    function checks whether a video is newly created. If it is, it sends an email
    to the system administrators that are listed in `ADMINS` in the settings.
  prefs: []
  type: TYPE_NORMAL
- en: We use templates to generate the content of the `subject`, `plain_text_message`,
    and the `html_message` so that we can define default templates for each of these
    within our app. If we make our `viral_videos` app publicly available, those who
    pull it into their own projects can then customize the templates as desired, perhaps
    to wrap them in a company email template wrapper.
  prefs: []
  type: TYPE_NORMAL
- en: You can learn more about the Django signals in the official documentation at
    [https://docs.djangoproject.com/en/3.0/topics/signals/](https://docs.djangoproject.com/en/3.0/topics/signals/).
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The *Creating app configuration* recipe in [Chapter 1](87d1a2a0-31bb-4c77-ab38-98b738f55fa1.xhtml)*,
    Getting Started with Django 3.0*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Using database query expressions* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Checking for missing settings* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Checking for missing settings
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: From Django 1.7 onward, you can use an extensible **system-check framework**,
    which replaces the old `validate` management command. In this recipe, you will
    learn how to create a check if the `ADMINS` setting is set. Similarly, you will
    be able to check whether different secret keys or access tokens are set for the
    APIs that you are using.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let's start with the `viral_videos` app that was created in the *Using database
    query expressions* recipe and was extended in the previous recipe.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To use the system-check framework, go through these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create the `checks.py` file with the following content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: 'Import the checks in the `ready()` method of the app configuration as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: 'To try the check that you just created, remove or comment out the `ADMINS`
    setting and then run the `check` management command in your virtual environment:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The system-check framework has a bunch of checks in the models, fields, databases,
    administration authentication configuration, content types, and security settings,
    where it raises errors or warnings if something in the project is not set correctly.
    Additionally, you can create your own checks, similar to what we did in this recipe.
  prefs: []
  type: TYPE_NORMAL
- en: We have registered the `settings_check()` function, which returns a list with
    `Warning` if there is no `ADMINS` setting defined for the project.
  prefs: []
  type: TYPE_NORMAL
- en: Aside from the `Warning` instances from the `django.core.checks` module, the
    returned list can also contain instances of the `Debug`, `Info`, `Error`, and
    `Critical` built-in classes or any other class inheriting from `django.core.checks.CheckMessage`.
    Logging at the debug, info, and warning levels would fail silently, whereas logging
    at the error and critical levels would prevent the project from running.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this example, the check is tagged as a compatibility check via the `Tags.compatibility`
    argument passed to the `@register` decorator. Other options provided in `Tags`
    include the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '`admin` for checks related to the admin site'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`caches` for checks related to server caching'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`database` for checks related to the database configuration'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`models` for checks related to models, model fields, and managers'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`security` for security-related checks'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`signals` for checks related to signal declarations and handlers'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`staticfiles` for static-file checks'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`templates` for template-related checks'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`translation` for checks related to string translations'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`url` for checks related to URL configuration'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Learn more about the system-check framework in the official documentation at
    [https://docs.djangoproject.com/en/3.0/topics/checks/](https://docs.djangoproject.com/en/3.0/topics/checks/)​.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The *Creating app configurations* recipe in [Chapter 1](87d1a2a0-31bb-4c77-ab38-98b738f55fa1.xhtml)*,
    Getting Started with Django 3.0*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Using database query expressions* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Using signals to notify administrators about new entries* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
