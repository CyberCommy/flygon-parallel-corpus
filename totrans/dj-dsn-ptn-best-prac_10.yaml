- en: Chapter 10. Security
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will discuss the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Various web attacks and countermeasures
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Where Django can and cannot help
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Security checks for Django applications
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Several prominent industry reports suggest that websites and web applications
    remain one of the primary targets of cyber attacks. Yet, about 86 percent of all
    websites, tested by a leading security firm in 2013, had at least one serious
    vulnerability.
  prefs: []
  type: TYPE_NORMAL
- en: Releasing your application to the wild is fraught with several dangers ranging
    from the leaking of confidential information to denial-of service attacks. Mainstream
    media headlines security flaws focusing on exploits, such as Heartbleed, Superfish,
    and POODLE, that have an adverse impact on critical website applications, such
    as e-mail and banking. Indeed, one often wonders if WWW stands for World Wide
    Web or the Wild Wild West.
  prefs: []
  type: TYPE_NORMAL
- en: One of the biggest selling points of Django is its strong focus on security.
    In this chapter, we will cover the top techniques that attackers use. As we will
    soon see, Django can protect you from most of them out of the box.
  prefs: []
  type: TYPE_NORMAL
- en: I believe that to protect your site from attackers, you need to think like one.
    So, let's familiarize ourselves with the common attacks.
  prefs: []
  type: TYPE_NORMAL
- en: Cross-site scripting (XSS)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Cross-site scripting** (**XSS**), considered the most prevalent web application
    security flaw today, enables an attacker to execute his malicious scripts (usually
    JavaScript) on web pages viewed by users. Typically, the server is tricked into
    serving their malicious content along with the trusted content.'
  prefs: []
  type: TYPE_NORMAL
- en: 'How does a malicious piece of code reach the server? The common means of entering
    external data into a website are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Form fields
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: URLs
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Redirects
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: External scripts such as Ads or Analytics
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'None of these can be entirely avoided. The real problem is when outside data
    gets used without being validated or sanitized (as shown in the following screenshot).
    Never trust outside data:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Cross-site scripting (XSS)](img/6644_10_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'For example, let''s take a look at a piece of vulnerable code, and how an XSS
    attack can be performed on it. It is strongly advised not to use this code in
    any form:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: This is a `View` class that shows a search form when accessed without any `GET`
    parameters. If the search form is submitted, it shows the search string entered
    by the user in the form.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now open this view in a dated browser (say, IE 8), and enter the following
    search term in the form and submit it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Unsurprisingly, the browser will show an alert box with the ominous message.
    Note that this attack fails in the latest Webkit browsers such as Chrome with
    an error in the console—**Refused to execute a JavaScript script. Source code
    of script found within request**.
  prefs: []
  type: TYPE_NORMAL
- en: 'In case, you are wondering what harm a simple alert message could cause, remember
    that any JavaScript code can be executed in the same manner. In the worst case,
    the user''s cookies can be sent to a site controlled by the attacker by entering
    the following search term:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Once your cookies are sent, the attacker might be able to conduct a more serious
    attack.
  prefs: []
  type: TYPE_NORMAL
- en: Why are your cookies valuable?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: It might be worth understanding why cookies are the target of several attacks.
    Simply put, access to cookies allows attackers to impersonate you and even take
    control of your web account.
  prefs: []
  type: TYPE_NORMAL
- en: To understand this in detail, you need to understand the concept of sessions.
    HTTP is stateless. Be it an anonymous or an authenticated user, Django keeps track
    of their activities for a certain duration of time by managing sessions.
  prefs: []
  type: TYPE_NORMAL
- en: A session consists of a `session ID` at the client end, that is, the browser,
    and a dictionary-like object stored at the server end. The `session ID` is a random
    32-character string that is stored as a cookie in the browser. Each time a user
    makes a request to a website, all their cookies, including this `session ID`,
    are sent along with the request.
  prefs: []
  type: TYPE_NORMAL
- en: At the server end, Django maintains a session store that maps this `session
    ID` to the session data. By default, Django stores the session data in the `django_session`
    database table.
  prefs: []
  type: TYPE_NORMAL
- en: Once a user successfully logs in, the session will note that the authentication
    was successful and will keep track of the user. Therefore, the cookie becomes
    a temporary user authentication for subsequent transactions. Anyone who acquires
    this cookie can use this web application as that user, which is called **session
    hijacking**.
  prefs: []
  type: TYPE_NORMAL
- en: How Django helps
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'You might have observed that my example was an extremely unusual way of implementing
    a view in Django for two reasons: it did not use templates for rendering and form
    classes were not used. Both of them have XSS-prevention measures.'
  prefs: []
  type: TYPE_NORMAL
- en: By default, Django templates auto-escape HTML special characters. So, if you
    had displayed the search string in a template, all the tags would have been HTML
    encoded. This makes it impossible to inject scripts unless you explicitly turn
    them off by marking the content as safe.
  prefs: []
  type: TYPE_NORMAL
- en: Using forms in Django to validate and sanitize the input is also a very effective
    countermeasure. For example, if your application requires a numeric employee ID,
    then use an `IntegerField` class rather than the more permissive `CharField` class.
  prefs: []
  type: TYPE_NORMAL
- en: In our example, we can use a `RegexValidator` class in our search-term field
    to restrict the user to alphanumeric characters and allowed punctuation symbols
    recognized by your search module. Restrict the acceptable range of the user input
    as strictly as possible.
  prefs: []
  type: TYPE_NORMAL
- en: Where Django might not help
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Django can prevent 80 percent of XSS attacks through auto-escaping in templates.
    For the remaining scenarios, you must take care to:'
  prefs: []
  type: TYPE_NORMAL
- en: Quote all HTML attributes, for example, replace `<a href={{link}}>` with `<a
    href="{{link}}">`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Escape dynamic data in CSS or JavaScript using custom methods
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Validate all URLs, especially against unsafe protocols such as `javascript:`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Avoid client-side XSS (also, known as DOM-based XSS)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: As a general rule against XSS, I suggest—filter on input and escape on output.
    Make sure that you validate and sanitize (filter) any data that comes in and transform
    (escape) it immediately before sending it to the user. Specifically, if you need
    to support the user input with HTML formatting such as comments, consider using
    Markdown instead.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Filter on input and escape on output.
  prefs: []
  type: TYPE_NORMAL
- en: Cross-Site Request Forgery (CSRF)
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Cross-Site Request Forgery** (**CSRF**) is an attack that tricks a user into
    making unwanted actions on a website, where they are already authenticated, while
    they are visiting another site. Say, in a forum, an attacker can place an `IMG`
    or `IFRAME` tag within the page that makes a carefully crafted request to the
    authenticated site.'
  prefs: []
  type: TYPE_NORMAL
- en: 'For instance the following fake 0x0 image can be embedded in a comment:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: If you were already signed into SuperBook in another tab, and if the site didn't
    have CSRF countermeasures, then a very embarrassing message will be posted. In
    other words, CSRF allows the attacker to perform actions by assuming your identity.
  prefs: []
  type: TYPE_NORMAL
- en: How Django helps
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The basic protection against CSRF is to use an HTTP `POST` (or `PUT` and `DELETE`,
    if supported) for any action that has side effects. Any `GET` (or `HEAD`) request
    must be used for information retrieval, for example, read-only.
  prefs: []
  type: TYPE_NORMAL
- en: Django offers countermeasures against `POST`, `PUT`, or `DELETE` methods by
    embedding a token. You must already be familiar with the `{% csrf_token %}` mentioned
    inside each Django form template. This is a random value that must be present
    while submitting the form.
  prefs: []
  type: TYPE_NORMAL
- en: The way this works is that the attacker will not be able to guess the token
    while crafting the request to your authenticated site. Since the token is mandatory
    and must match the value presented while displaying the form, the form submission
    fails and the attack is thwarted.
  prefs: []
  type: TYPE_NORMAL
- en: Where Django might not help
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Some people turn off CSRF checks in a view with the `@csrf_exempt` decorator,
    especially for AJAX form posts. This is not recommended unless you have carefully
    considered the security risks involved.
  prefs: []
  type: TYPE_NORMAL
- en: SQL injection
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**SQL injection** is the second most common vulnerability of web applications,
    after XSS. The attack involves entering malicious SQL code into a query that gets
    executed on the database. It could result in data theft, by dumping database contents,
    or the distruction of data, say, by using the `DROP TABLE` command.'
  prefs: []
  type: TYPE_NORMAL
- en: 'If you are familiar with SQL, then you can understand the following piece of
    code. It looks up an e-mail address based on the given `username`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'At first glance, it might appear that only the e-mail address corresponding
    to the username mentioned as the `GET` parameter will be returned. However, imagine
    if an attacker entered `'' OR ''1''=''1` in the form field, then the SQL code
    would be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Since this `WHERE` clause will be always true, the e-mails of all the users
    in your application will be returned. This can be a serious leak of confidential
    information.
  prefs: []
  type: TYPE_NORMAL
- en: 'Again, if the attacker wishes, he could execute more dangerous queries like
    the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Now all the user entries will be wiped off your database!
  prefs: []
  type: TYPE_NORMAL
- en: How Django helps
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The countermeasure against a SQL injection is fairly simple. Use the Django
    ORM rather than crafting SQL statements by hand. The preceding example should
    be implemented as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Here, Django's database drivers will automatically escape the parameters. This
    will ensure that they are treated as purely data and therefore, they are harmless.
    However, as we will soon see, even the ORM has a few escape latches.
  prefs: []
  type: TYPE_NORMAL
- en: Where Django might not help
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: There could be instances where people would need to resort to raw SQL, say,
    due to limitations of the Django ORM. For example, the `where` clause of the `extra()`
    method of a queryset allows raw SQL. This SQL code will not be escaped against
    SQL injections.
  prefs: []
  type: TYPE_NORMAL
- en: If you are using a low-level database operation, such as the `execute()` method,
    then you might want to pass bind parameters instead of interpolating the SQL string
    yourself. Even then, it is strongly recommended that you check whether each identifier
    has been properly escaped.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, if you are using a third-party database API such as MongoDB, then you
    will need to manually check for SQL injections. Ideally, you would want to use
    only thoroughly sanitized data with such interfaces.
  prefs: []
  type: TYPE_NORMAL
- en: Clickjacking
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Clickjacking** is a means of misleading a user to click on a hidden link
    or button in the browser when they were intending to click on something else.
    This is typically implemented using an invisible IFRAME that contains the target
    website over a dummy web page(shown here) that the user is likely to click on:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Clickjacking](img/6644_10_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Since the action button in the invisible frame would be aligned exactly above
    the button in the dummy page, the user's click will perform an action on the target
    website instead.
  prefs: []
  type: TYPE_NORMAL
- en: How Django helps
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Django protects your site from clickjacking by using middleware that can be
    fine-tuned using several decorators. By default, this `'django.middleware.clickjacking.XFrameOptionsMiddleware'`
    middleware will be included in your `MIDDLEWARE_CLASSES` within your settings
    file. It works by setting the `X-Frame-Options` header to `SAMEORIGIN` for every
    outgoing `HttpResponse`.
  prefs: []
  type: TYPE_NORMAL
- en: Most modern browsers recognize the header, which means that this page should
    not be inside a frame in other domains. The protection can be enabled and disabled
    for certain views using decorators, such as `@xframe_options_deny` and `@xframe_options_exempt`.
  prefs: []
  type: TYPE_NORMAL
- en: Shell injection
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As the name suggests, **shell injection** or **command injection** allows an
    attacker to inject malicious code to a system shell such as `bash`. Even web applications
    use command-line programs for convenience and their functionality. Such processes
    are typically run within a shell.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, if you want to show all the details of a file whose name is given
    by the user, a naïve implementation would be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: An attacker can enter the `filename` as `manage.py; rm -rf *` and delete all
    the files in your directory. In general, it is not advisable to use `os.system`.
    The `subprocess` module is a safer alternative (or even better, you can use `os.stat()`
    to get the file's attributes).
  prefs: []
  type: TYPE_NORMAL
- en: Since a shell will interpret the command-line arguments and environment variables,
    setting malicious values in them can allow the attacker to execute arbitrary system
    commands.
  prefs: []
  type: TYPE_NORMAL
- en: How Django helps
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Django primarily depends on WSGI for deployment. Since WSGI, unlike CGI, does
    not set on environment variables based on the request, the framework itself is
    not vulnerable to shell injections in its default configuration.
  prefs: []
  type: TYPE_NORMAL
- en: However, if the Django application needs to run other executables, then care
    must be taken to run it in a restricted manner, that is, with least permissions.
    Any parameter originating externally must be sanitized before passing to such
    executables. Additionally, use `call()` from the `subprocess` module to run command-line
    programs with its default `shell=False` parameter to handle arguments securely
    if shell interpolation is not necessary.
  prefs: []
  type: TYPE_NORMAL
- en: And the list goes on
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: There are hundreds of attack techniques that we have not covered here, and the
    list keeps growing every day as new attacks are found. It is important to keep
    ourselves aware of them.
  prefs: []
  type: TYPE_NORMAL
- en: Django's official blog ([https://www.djangoproject.com/weblog/](https://www.djangoproject.com/weblog/))
    is a great place to find out about the latest exploits that have been discovered.
    Django maintainers proactively try to resolve them by releasing security releases.
    It is highly recommended that you install them as quickly as possible since they
    usually need very little or no changes to your source code.
  prefs: []
  type: TYPE_NORMAL
- en: The security of your application is only as strong as its weakest link. Even
    if your Django code might be completely secure, there are so many layers and components
    in your stack. Not to mention humans, who can be also tricked with various social-engineering
    techniques, such as phishing.
  prefs: []
  type: TYPE_NORMAL
- en: Vulnerabilities in one area, such as the OS, database, or web server, can be
    exploited to gain access to other parts of your system. Hence, it is best to have
    a holistic view of your stack rather than view each part separately.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**The safe room**'
  prefs: []
  type: TYPE_NORMAL
- en: 'As soon as Steve stepped outside the board room, he took out his phone and
    thumbed a crisp one-liner e-mail to his team: "It''s a go!" In the last 60 minutes,
    he had been grilled by the directors on every possible detail of the launch. Madam
    O, to Steve''s annoyance, maintained her stoic silence the entire time.'
  prefs: []
  type: TYPE_NORMAL
- en: He entered his cabin and opened his slide printouts once more. The number of
    trivial bugs dropped sharply after the checklists were introduced. Essential features
    that were impossible to include in the release were worked out through early collaboration
    with helpful users, such as Hexa and Aksel.
  prefs: []
  type: TYPE_NORMAL
- en: The number of signups for the beta site had crossed 9,000, thanks to Sue's brilliant
    marketing campaign. Never in his career had Steve seen so much interest for a
    launch. It was then that he noticed something odd about the newspaper on his desk.
  prefs: []
  type: TYPE_NORMAL
- en: Fifteen minutes later, he rushed down the aisle in level-21\. At the very end,
    there was a door marked 2109\. When he opened it, he saw Evan working on what
    looked like a white plastic toy laptop. "Why did you circle the crossword clues?
    You could have just called me," asked Steve.
  prefs: []
  type: TYPE_NORMAL
- en: '"I want to show you something," he replied with a grin. He grabbed his laptop
    and walked out. He stopped between room 2110 and the fire exit. He fell on his
    knees and with his right hand, he groped the faded wallpaper. "There has to be
    a latch here somewhere," he muttered.'
  prefs: []
  type: TYPE_NORMAL
- en: Then, his hand stopped and turned a handle barely protruding from the wall.
    A part of the wall swiveled and came to a halt. It revealed an entrance to a room
    lit with a red light. A sign inside dangling from the roof said "Safe room 21B."
  prefs: []
  type: TYPE_NORMAL
- en: As they entered, numerous screens and lights flicked on by themselves. A large
    screen on the wall said "Authentication required. Insert key." Evan admired this
    briefly and began wiring up his laptop.
  prefs: []
  type: TYPE_NORMAL
- en: '"Evan, what are we doing here?" asked Steve in a hushed voice. Evan stopped,
    "Oh, right. I guess we have some time before the tests finish." He took a deep
    breath.'
  prefs: []
  type: TYPE_NORMAL
- en: '"Remember when Madam O wanted me to look into the Sentinel codebase? I did.
    I realized that we were given censored source code. I mean I can understand removing
    some passwords here and there, but thousands of lines of code? I kept thinking—there
    had to be something going on.'
  prefs: []
  type: TYPE_NORMAL
- en: '"So, with my access to the archiver, I pulled some of the older backups. The
    odds of not erasing a magnetic medium are surprisingly high. Anyways, I could
    recover most of the erased code. You won''t believe what I saw.'
  prefs: []
  type: TYPE_NORMAL
- en: '"Sentinel was not an ordinary social network project. It was a surveillance
    program. Perhaps the largest known to mankind. Post-Cold War, a group of nations
    joined to form a network to share the intelligence information. A network of humans
    and sentinels. Sentinels are semi-autonomous computers with unbelievable computing
    power. Some believe they are quantum computers.'
  prefs: []
  type: TYPE_NORMAL
- en: '"Sentinels were inserted at thousands of strategic locations around the world—mostly
    ocean beds where major fiber optic cables are passed. Running on geothermal energy
    they were self-powered and practically indestructible. They had access to nearly
    every Internet communication in most countries.'
  prefs: []
  type: TYPE_NORMAL
- en: '"At some point in the nineties, perhaps fearing public scrutiny, the Sentinel
    program was shut down. This is where it gets really interesting. The code history
    suggests that the development on Sentinels was continued by someone named Cerebos.
    The code has been drastically enhanced from its surveillance abilities to form
    a sort of massively parallel supercomputer. A number-crunching beast for whom
    no encryption algorithm poses a significant challenge.'
  prefs: []
  type: TYPE_NORMAL
- en: '"Remember the breach? I found it hard to believe that there was not a single
    offensive move before the superheroes arrived. So, I did some research. S.H.I.M.''s
    cyber security is designed as five concentric rings. We, the employees, are in
    the outermost, least privileged, ring protected by Sauron. Inner rings are designed
    with increasingly stronger cryptographic algorithms. This room is in Level 4.'
  prefs: []
  type: TYPE_NORMAL
- en: '"My guess is—long before we knew about the breach, all systems of SAURON were
    already compromised. Systems were down and it was practically a cakewalk for those
    robots to enter the campus. I just looked at the logs. The attack was extremely
    targeted—everything from IP addresses to logins were known beforehand."'
  prefs: []
  type: TYPE_NORMAL
- en: '"Insider?" asked Steve in horror.'
  prefs: []
  type: TYPE_NORMAL
- en: '"Yes. However, Sentinels needed help only for Level 5\. Once they acquired
    the public keys for Level 4, they began attacking Level 4 systems. It sounds insane
    but that was their strategy."'
  prefs: []
  type: TYPE_NORMAL
- en: '"Why is it insane?"'
  prefs: []
  type: TYPE_NORMAL
- en: '"Well, most of world''s online security is based on public-key cryptography
    or asymmetric cryptography. It is based on two keys: one public and the other
    private. Although mathematically related—it is computationally impractical to
    find one key, if you have the other."'
  prefs: []
  type: TYPE_NORMAL
- en: '"Are you saying that the Sentinel network can?"'
  prefs: []
  type: TYPE_NORMAL
- en: '"In fact, they can for smaller keys. Based on the tests I am running right
    now, their powers have grown significantly. At this rate, they should be ready
    for another attack in less than 24 hours."'
  prefs: []
  type: TYPE_NORMAL
- en: '"Damn, that''s when SuperBook goes live!"'
  prefs: []
  type: TYPE_NORMAL
- en: A handy security checklist
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Security is not an afterthought but is instead integral to the way you write
    applications. However, being human, it is handy to have a checklist to remind
    you of the common omissions.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following points are a bare minimum of security checks that you should
    perform before making your Django application public:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Don''t trust data from a browser, API, or any outside sources**: This is
    a fundamental rule. Make sure you validate and sanitize any outside data.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Don''t keep** `SECRET_KEY` **in version control**: As a best practice, pick
    `SECRET_KEY` from the environment. Check out the `django-environ` package.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Don''t store passwords in plain text**: Store your application password hashes
    instead. Add a random salt as well.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Don''t log any sensitive data**: Filter out the confidential data such as
    credit card details or API keys from your log files.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Any secure transaction or login should use SSL**: Be aware that eavesdroppers
    in the same network as you are could listen to your web traffic if is not in HTTPS.
    Ideally, you ought to use HTTPS for the entire site.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Avoid using redirects to user-supplied URLs**: If you have redirects such
    as `http://example.com/r?url=http://evil.com`, then always check against whitelisted
    domains.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Check authorization even for authenticated users**: Before performing any
    change with side effects, check whether the logged-in user is allowed to perform
    it.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Use the strictest possible regular expressions**: Be it your `URLconf` or
    form validators, you must avoid lazy and generic regular expressions.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Don''t keep your Python code in web root**: This can lead to an accidental
    leak of source code if it gets served as plain text.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Use Django templates instead of building strings by hand**: Templates have
    protection against XSS attacks.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Use Django ORM rather than SQL commands**: The ORM offers protection against
    SQL injection.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Use Django forms with** `POST` **input for any action with side effects**:
    It might seem like overkill to use forms for a simple vote button. Do it.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**CSRF should be enabled and used**: Be very careful if you are exempting certain
    views using the `@csrf_exempt` decorator.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Ensure that Django and all packages are the latest versions**: Plan for updates.
    They might need some changes to be made to your source code. However, they bring
    shiny new features and security fixes too.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Limit the size and type of user-uploaded files**: Allowing large file uploads
    can cause denial-of-service attacks. Deny uploading of executables or scripts.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Have a backup and recovery plan**: Thanks to Murphy, you can plan for an
    inevitable attack, catastrophe, or any other kind of downtime. Make sure you take
    frequent backups to minimize data loss.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Some of these can be checked automatically using Erik's Pony Checkup at [http://ponycheckup.com/](http://ponycheckup.com/).
    However, I would recommend that you print or copy this checklist and stick it
    on your desk.
  prefs: []
  type: TYPE_NORMAL
- en: Remember that this list is by no means exhaustive and not a substitute for a
    proper security audit by a professional.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we looked at the common types of attacks affecting websites
    and web applications. In many cases, the explanation of the techniques has been
    simplified for clarity at the cost of detail. However, once we understand the
    severity of the attack, we can appreciate the countermeasures that Django provides.
  prefs: []
  type: TYPE_NORMAL
- en: In our final chapter, we will take a look at pre-deployment activities in more
    detail. We will also take a look at the various deployment strategies, such as
    cloud-based hosting for deploying a Django application.
  prefs: []
  type: TYPE_NORMAL
