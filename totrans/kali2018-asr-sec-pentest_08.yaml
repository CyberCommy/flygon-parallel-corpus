- en: Target Exploitation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Target exploitation is one area that sets a penetration test apart from a vulnerability
    assessment. Now that vulnerabilities have been found, you will actually validate
    and take advantage of these vulnerabilities by exploiting the system, in the hope
    of gaining full control or additional information and visibility into the targeted
    network and the systems therein. This chapter will highlight and discuss practices
    and tools that are used to conduct real-world exploitation.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: In the *Vulnerability research* section, we will explain what areas of vulnerability
    research are crucial in order to understand, examine, and test the vulnerability
    before transforming it into a practical exploit code.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We will point you to several exploit repositories that should keep you informed
    about publicly-available exploits and when to use them.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We will illustrate the use of one of the infamous exploitation toolkits from
    a target-evaluation perspective. This will give you a clear idea about how to
    exploit the target in order to gain access to sensitive information. The *Advanced
    exploitation toolkit* section involves a couple of hands-on practical exercises.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In the end, we will attempt to briefly describe the steps for writing a simple
    exploit module for Metasploit.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Writing exploit code from scratch can be a time-consuming and expensive task.
    Hence, using publicly-available exploits and adjusting them to fit your target
    environment may require expertise, which would assist you in transforming the
    skeleton of one exploit into another, if the similarity and purpose is almost
    the same. We highly encourage the practice of publicly-available exploits in your
    own labs to further understand and kickstart writing your own exploit code.
  prefs: []
  type: TYPE_NORMAL
- en: Vulnerability research
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Understanding the capabilities of a specific software or hardware product may
    provide a starting point for investigating vulnerabilities that could exist in
    that product. Conducting vulnerability research is not easy, nor is it a one-click
    task. Hence, it requires a strong knowledge base with different factors to carry
    out security-analysis:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Programming skills**: This is a fundamental factor for ethical hackers. Learning
    the basic concepts and structures that exist with any programming language should
    grant the tester an advantage when finding vulnerabilities. Apart from basic knowledge
    of programming languages, you must be prepared to deal with the advanced concepts
    of processors, system memory, buffers, pointers, data types, registers, and caches.
    These concepts are implementable in almost any programming language, such as C/C++,
    Python, Perl, and Assembly.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: To learn the basics of writing an exploit code from a discovered vulnerability,
    visit [http://www.phreedom.org/presentations/exploit-code-development/exploit-code-development.pdf](http://www.phreedom.org/presentations/exploit-code-development/exploit-code-development.pdf).
  prefs: []
  type: TYPE_NORMAL
- en: '**Reverse-engineering**: This is another broad area for discovering the vulnerabilities
    that could exist in an electronic device, software, or system by analyzing its
    functions, structures, and operations. The purpose is to deduce code from a given
    system without any prior knowledge of its internal working; to examine it for
    error conditions, poorly-designed functions, and protocols; and to test the boundary
    conditions. There are several reasons to use your reverse-engineering skills,
    such as the removal of copyright protection from a software, security auditing,
    competitive technical intelligence, identification of patent infringement, interoperability,
    understanding the product workflow, and acquiring sensitive data. Reverse-engineering
    adds two layers of concept to examining the code of an application: source-code
    auditing and binary auditing. If you have access to the application source code,
    you can accomplish the security analysis through automated tools; or manually
    study the source in order to extract the conditions where a vulnerability can
    be triggered. On the other hand, binary auditing simplifies the task of reverse-engineering
    where the application exists without any source code. Disassemblers and decompilers
    are two generic types of tools that may assist the auditor with binary analysis.
    Disassemblers generate the assembly code from a complied binary program, while
    decompilers generate a high-level language code from a compiled binary program.
    However, dealing with either of these tools is quite challenging and requires
    a careful assessment.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Instrumented tools**: Instrumented tools, such as debuggers, data extractors,
    fuzzers, profilers, code coverage, flow analyzers, and memory monitors, play an
    important role in the vulnerability-discovery process, and provide a consistent
    environment for testing purposes. Explaining each of these tool categories is
    beyond the scope of this book. However, you may find several useful tools already
    present in Kali Linux. To keep track of the latest reverse-code-engineering tools,
    we strongly recommend that you visit the online library atÂ [http://www.woodmann.com/collaborative/tools/index.php/Category:RCE_Tools](http://www.woodmann.com/collaborative/tools/index.php/Category:RCE_Tools).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Exploitability and payload construction**: This is the final step in writing
    the **Proof of Concept** (**PoC**) code for a vulnerable element of an application,
    which could allow the penetration tester to execute custom commands on the target
    machine. We apply our knowledge of vulnerable applications from the reverse-engineering
    stage to polish shellcode with an encoding mechanism, in order to avoid bad characters
    that may result in the termination of the exploit process.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Depending on the type and classification of vulnerability discovered, it is
    very important to follow the specific strategy that may allow you to execute an
    arbitrary code or command on the target system. As a professional penetration
    tester, you will always be looking for loopholes that will result in getting shell
    access to your target operating system. Thus, we will demonstrate a few scenarios
    with the Metasploit framework in a later section of this chapter, which will show
    these tools and techniques.
  prefs: []
  type: TYPE_NORMAL
- en: Vulnerability and exploit repositories
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: For many years, a number of vulnerabilities have been reported in the public
    domain. Some of these were disclosed with the PoC exploit code to prove the feasibility
    and viability of a vulnerability found in the specific software or application.
    Many still remain unaddressed. This competitive era of finding publicly-available
    exploits and vulnerability information makes it easier for penetration testers
    to quickly search and retrieve the best-available exploit that may suit their
    target system environment. You can also port one type of exploit to another type
    (for example, Win32 architecture to Linux architecture) provided that you hold
    intermediate programming skills, and a clear understanding of OS-specific architecture.
    We have provided a combined set of online repositories that may help you to track
    down any vulnerability information, or its exploit, by searching through them.
  prefs: []
  type: TYPE_NORMAL
- en: Not every single vulnerability found has been disclosed to the public on the
    internet. Some are reported without any PoC exploit code, and some do not even
    provide detailed vulnerability information. For this reason, consulting more than
    one online resource is common practice among many security auditors.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is a list of online repositories:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Repository name | Website URL |'
  prefs: []
  type: TYPE_TB
- en: '| Bugtraq SecurityFocus | [http://www.securityfocus.com](http://www.securityfocus.com)
    |'
  prefs: []
  type: TYPE_TB
- en: '| OSVDB Packet Stormulnerabilities | [https://blog.osvdb.org/](https://blog.osvdb.org/)
    |'
  prefs: []
  type: TYPE_TB
- en: '| Packet Storm | [http://www.packetstormsecurity.org](http://www.packetstormsecurity.org)
    |'
  prefs: []
  type: TYPE_TB
- en: '| National Vulnerability Database | [http://nvd.nist.gov](http://nvd.nist.gov)  |'
  prefs: []
  type: TYPE_TB
- en: '| IBM ISS X-Force | [https://exchange.xforce.ibmcloud.com/](https://exchange.xforce.ibmcloud.com/)
    |'
  prefs: []
  type: TYPE_TB
- en: '| US-CERT Vulnerability Notes | [http://www.kb.cert.org/vuls](http://www.kb.cert.org/vuls)
    |'
  prefs: []
  type: TYPE_TB
- en: '| US-CERT Alerts | [http://www.us-cert.gov/cas/techalerts/](http://www.us-cert.gov/cas/techalerts/)
    |'
  prefs: []
  type: TYPE_TB
- en: '| SecuriTeam | [http://www.securiteam.com](http://www.securiteam.com) |'
  prefs: []
  type: TYPE_TB
- en: '| Secunia Advisories | [http://secunia.com/advisories/historic/](http://secunia.com/advisories/historic/)
    |'
  prefs: []
  type: TYPE_TB
- en: '| CXSecurity.com | [http://cxsecurity.com](http://cxsecurity.com) |'
  prefs: []
  type: TYPE_TB
- en: '| XSSed XSS-Vulnerabilities | [http://www.xssed.com](http://www.xssed.com)
    |'
  prefs: []
  type: TYPE_TB
- en: '| Security Vulnerabilities Database | [http://securityvulns.com](http://securityvulns.com)
    |'
  prefs: []
  type: TYPE_TB
- en: '| SEBUG | [http://www.sebug.net](http://www.sebug.net) |'
  prefs: []
  type: TYPE_TB
- en: '| MediaService Lab | [http://techblog.mediaservice.net](http://techblog.mediaservice.net)
    |'
  prefs: []
  type: TYPE_TB
- en: '| Intelligent Exploit Aggregation Network | [http://www.intelligentexploit.com](http://www.intelligentexploit.com)
    |'
  prefs: []
  type: TYPE_TB
- en: 'Although there are many other internet resources available, we have listed
    only a few reviewed ones. Kali Linux comes with the integration of the Exploit
    database from Offensive Security. This provides the extra advantage of keeping
    all archived exploits to date on your system for future reference and use. To
    access Exploit-DB, execute the following commands on your shell:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: This will open a complete list of exploits currently available from Exploit-DB
    under the `/usr/share/exploitdb/platforms/directory`. These exploits are categorized
    in their relevant subdirectories based on the type of system (Windows, Linux,
    HP-UX, Novell, Solaris, BSD, IRIX, TRU64, ASP, PHP, and so on). Most of these
    exploits were developed using C, Perl, Python, Ruby, PHP, and other programming
    technologies. Kali Linux already comes with a handful of compilers and interpreters
    that support the execution of these exploits.
  prefs: []
  type: TYPE_NORMAL
- en: How do we extract particular information from the exploits list?
  prefs: []
  type: TYPE_NORMAL
- en: Using the power of Bash commands, you can manipulate the output of any text
    file in order to retrieve the meaningful data. You can use SearchsploitÂ or this
    can also be accomplished by typing `cat files.csv |cut -d"," -f3` on your console.
    It will extract the list of exploit titles from a `files.csv` file. To learn the
    basic shell commands, refer to [http://tldp.org/LDP/abs/html/index.html](http://tldp.org/LDP/abs/html/index.html).
  prefs: []
  type: TYPE_NORMAL
- en: Advanced exploitation toolkit
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Kali Linux is preloaded with some of the best and most advanced exploitation
    toolkits. The Metasploit framework ([http://www.metasploit.com](http://www.metasploit.com))
    is one of these. Here, we have explained it in greater detail and presented a
    number of scenarios that will increase its productivity, and enhance your experience
    with penetration testing. The framework was developed in the Ruby programming
    language and supports modularization so that it makes it easier for the penetration
    tester, with optimum programming skills, to extend or develop custom plugins and
    tools. The architecture of a framework is divided into three broad categories:
    libraries, interfaces, and modules. A key part of our exercise is to focus on
    the capabilities of various interfaces and modules. Interfaces (console, CLI,
    web, and GUI) basically provide the frontend operational activity when dealing
    with any type of modules (exploits, payloads, auxiliaries, encoders, and NOP).
    Each of the following modules has their own meaning and are function-specific
    to the penetration testing process:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Exploit**: This module is the PoC code developed to take advantage of a particular
    vulnerability in a target system'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Payload**: This module is a malicious code intended, as a part of an exploit
    or independently compiled, to run the arbitrary commands on the target system'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: "**Auxiliaries**: These modules are the set of tools developed to perform scanning,\
    \ sniffing, wardialing, fingerprinting, and other security \Lassessment tasks"
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Encoders**: These modules are provided to evade the detection of antivirus,
    firewall, IDS/IPS, and other similar malware defences by encoding the payload
    during a penetration operation'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**No Operation or No Operation Performed (NOP)**: This module is an assembly-language
    instruction often added into a shellcode to perform nothing but to cover a consistent
    payload space'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For your understanding, we will explain the basic use of two well-known Metasploit
    interfaces with their relevant command-line options. Each interface has its own
    strengths and weaknesses. However, we strongly recommend that you stick to a console
    version as it supports most of the framework features.
  prefs: []
  type: TYPE_NORMAL
- en: MSFConsole
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The MSFConsole is one of the most efficient, powerful, and all-in-one centralized
    frontend interfaces for penetration testers to make the best use of the exploitation
    framework. To access `msfconsole`, navigate to Applications | Exploitation Tools
    | Metasploit or use the Terminal to execute the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'You will be dropped into an interactive console interface. To learn about all
    of the available commands, you can type the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'This will display two sets of commands; one set will be widely used across
    the framework, and the other will be specific to the database backend where the
    assessment parameters and results are stored. Instructions about other usage options
    can be retrieved through the use of `-h`Â following the core command. Let''s examine
    the use of the `show` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'This command is typically used to display the available modules of a given
    type, or all, of the modules. The most frequently used commands could be any of
    the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '`show auxiliary`: This command will display all of the auxiliary modules.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`show exploits`: This command will get a list of all of the exploits within
    the framework.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`show payloads`: This command will retrieve a list of payloads for all platforms.
    However, using the same command in the context of a chosen exploit will display
    only compatible payloads. For instance, Windows payloads will only be displayed
    with the Windows-compatible exploits.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`show encoders`: This command will print a list of available encoders.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`shownops`: This command will display all the available NOP generators.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`show options`: This command will display the settings and options available
    for specific module.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`show targets`: This command will help us to extract a list of target OS supported
    by a particular exploit module.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`show advanced`: This command will provide you with more options to fine-tune
    your exploit execution.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'We have compiled a short list of the most valuable commands in the following
    table; you can practice each one of them with the Metasploit console. The italicized
    terms next to the commands will need to be provided by you:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Commands** | **Description** |'
  prefs: []
  type: TYPE_TB
- en: '| `check` | Verifies a particular exploit against your vulnerable target without
    exploiting it. This command is not supported by many exploits. |'
  prefs: []
  type: TYPE_TB
- en: '| `connectip port` | Works similarly to the Netcat and Telnet tools. |'
  prefs: []
  type: TYPE_TB
- en: '| `exploit` | Launches a selected exploit. |'
  prefs: []
  type: TYPE_TB
- en: '| `run` | Launches a selected auxiliary. |'
  prefs: []
  type: TYPE_TB
- en: '| `jobs` | Lists all of the background modules currently running and provides
    the ability to terminate them. |'
  prefs: []
  type: TYPE_TB
- en: '| `route add subnet netmasksessionid` | Adds a route for the traffic through
    a compromised session for network-pivoting purposes. |'
  prefs: []
  type: TYPE_TB
- en: '| `info module` | Displays detailed information about a particular module (exploit,
    auxiliary, and so on). |'
  prefs: []
  type: TYPE_TB
- en: '| `setparam value` | Configures the parameter value within a current module.
    |'
  prefs: []
  type: TYPE_TB
- en: '| `setgparam value` | To set the parameter value globally across the framework
    to be used by all exploits and auxiliary modules. |'
  prefs: []
  type: TYPE_TB
- en: '| `unsetparam` | It is the reverse of the `set` command. You can also reset
    all of the variables at once by using the `unset all` command. |'
  prefs: []
  type: TYPE_TB
- en: '| `unsetgparam` | To unset one or more global variable. |'
  prefs: []
  type: TYPE_TB
- en: '| `sessions` | Ability to display, interact with, and terminate the target
    sessions. Use with `-l` for listing, `-i` ID for interaction, and `-k` ID for
    termination. |'
  prefs: []
  type: TYPE_TB
- en: '| `search string` | Provides a search facility through module names and descriptions.
    |'
  prefs: []
  type: TYPE_TB
- en: '| `use module` | Selects a particular module in the context of penetration
    testing. |'
  prefs: []
  type: TYPE_TB
- en: We will demonstrate the practical use of some of these commands in the upcoming
    sections. It is important for you to understand their basic use with different
    sets of modules within the framework.
  prefs: []
  type: TYPE_NORMAL
- en: MSFCLI
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As with the MSFConsole interface, a CLIÂ provides extensive coverage of various
    modules that can be launched at any one instance. However, it lacks some of the
    advanced automation features of MSFConsole.
  prefs: []
  type: TYPE_NORMAL
- en: 'To access `msfcli`, use the Terminal to execute the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'This will display all of the available modes similar to that of MSFConsole,
    as well as usage instructions for selecting the particular module and setting
    its parameters. Note that all of the variables or parameters should follow the
    convention of `param=value` and that all options are case-sensitive. We have presented
    a small exercise to select and execute a particular exploit:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'The use of `O` at the end of the preceding command instructs the framework
    to display the available options for the selected exploit. The following command
    sets the target IP using the `RHOST` parameter:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, after setting the target IP using the `RHOST` parameter, it is time
    to select the compatible payload and execute our exploit:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: As you can see, we have acquired local shell access to our target machine after
    setting the `LHOST` parameter for a chosen payload.
  prefs: []
  type: TYPE_NORMAL
- en: Ninja 101 drills
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The examples provided in this section will clarify your understanding of how
    the exploitation framework can be used in various ways. It is not possible to
    pump every single aspect, or use the Metasploit framework, but we have carefully
    examined and extracted the most important features for your drills. To get an
    in-depth understanding of the Metasploit framework, we highly recommend you read
    the online tutorial, *Metasploit Unleashed*, at [http://www.offensive-security.com/metasploit-unleashed/](http://www.offensive-security.com/metasploit-unleashed/).
    This tutorial has been developed with advanced material that includes insights
    on exploit development, vulnerability research, and assessment techniques from
    a penetration testing perspective.
  prefs: []
  type: TYPE_NORMAL
- en: Scenario 1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'During this exercise, we will demonstrate how the Metasploit framework can
    be utilized for port-scanning, OS-fingerprinting, and service-identification using
    an integrated Nmap facility. On your MSFConsole, execute the following commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'The following two commands can be used if experiencing database connectivity
    errors:'
  prefs: []
  type: TYPE_NORMAL
- en: '`Systemclt start postgresql`'
  prefs: []
  type: TYPE_NORMAL
- en: '`Msfdb inint`'
  prefs: []
  type: TYPE_NORMAL
- en: 'The database tracker will save the data obtained for the sessions for further
    use. To start the Nmap scan, input the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: At this point, we have successfully scanned our target and saved the results
    in our current database session. To list the target and services discovered, you
    can issue the `db_hosts and db_services` commands independently. Additionally,
    if you have already scanned your target using the Nmap program separately and
    saved the result in the XML format, you can import these results into Metasploit
    using the `db_import_nmap_xml` command.
  prefs: []
  type: TYPE_NORMAL
- en: Scenario 2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this example, we will illustrate a few auxiliaries from the Metasploit framework.
    The key is to understand their importance in the context of the vulnerability
    analysis process.
  prefs: []
  type: TYPE_NORMAL
- en: SMB usernames
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This module will perform a sweep of target IP addresses attempting to locate
    usernames associated with the **Server Message Block** (**SMB**). This service
    is used by applications for access to file shares, printers, or for communication
    between devices on the network. Using one of the Metasploit auxiliary scanners,
    we can determine possible usernames.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, search Metasploit for scanners by typing the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'We can then see the number of different scanners available to scan for open
    SMB services:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/3dab00b7-fa86-49c8-89fe-d537d2bc740b.png)'
  prefs: []
  type: TYPE_IMG
- en: 'To use the scanner, type the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Set the `RHOSTS` parameter to the network range, in this caseÂ `192.168.0.1/24`,
    by entering the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, type this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'The results of the scan indicate that there is an SMB service running with
    theÂ `METASPLOITABLE`Â username:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/3a9213aa-2a64-426c-a5cf-e9a889b71620.png)'
  prefs: []
  type: TYPE_IMG
- en: This may indicate open shares or other network services that can be attacked.
    TheÂ `METASPLOIT`Â username can also provide us with a starting point when we start
    cracking user credentials and passwords.
  prefs: []
  type: TYPE_NORMAL
- en: VNC blank authentication scanners
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This module will scan the range of IP addresses for the **Virtual Network Computing**
    (**VNC**) servers that are accessible without any authentication details:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Note that we have found a couple of VNC servers that are accessible without
    authentication. This attack vector can become a serious threat for system administrators
    and can trivially invite unwanted guests to your VNC server from the internet
    if no authorization controls are enabled.
  prefs: []
  type: TYPE_NORMAL
- en: PostGRESQL logins
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In previous chapters, we identified the PostgreSQL database service running
    on port `5432` during our Nmap scans against the Metasploitable operating system:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/ba867ce8-b274-4ebc-bc5b-2f435f5455c7.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We can utilize a Metasploit auxiliary scanner to determine login information
    about the database. First, we configure Metasploit to utilize the scanner by typing
    the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, we want to configure two of the options. The first one sets the scanner
    to continue to scan, even if it finds a successful login. This allows us to scan
    a number of database instances as well as enumerate many usernames and passwords.
    We configure this by typingÂ the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'Second, we set the hosts we want to scan. The scanner will take a CIDR range
    or a single IP address. In this case, we are going to point the scanner at the
    Metasploitable OS at `192.168.0.30` because we have determined, in our examination
    of the Nmap scan, that there is an active instance at that IP address. We set
    this by typing:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'We then run the exploit. When we examine the output, we can see that the username
    and password were located for this database:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/53efbb30-f0b7-4273-921e-3fcf0f6b65c4.png)'
  prefs: []
  type: TYPE_IMG
- en: Database security is critical to organizations as databases often contain confidential
    information. Scanners, such as PostgreSQL, allow us to test the security surrounding
    the crown jewels of the organization in an efficient manner.
  prefs: []
  type: TYPE_NORMAL
- en: Scenario 3
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We will now explore the use of some common payloads (bind, reverse, and meterpreter),
    and discuss their capabilities from an exploitation point of view. This exercise
    will give you an idea of how and when to use a particular payload.
  prefs: []
  type: TYPE_NORMAL
- en: Bind shells
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A bind shell is a remote shell connection that provides access to the target
    system on the successful exploitation and execution of shellcode by setting up
    a bind port listener. This opens a gateway for an attacker to connect back to
    the compromised machine on the bind shell port using a tool such as Netcat, which
    could tunnel the standard input (`stdin`) and output (`stdout`) over a TCP connection.
    This scenario works in a similar way to that of a Telnet client establishing a
    connection to a Telnet server, and is applicable in an environment where the attacker
    is behind the **Network Address Translation** (**NAT**) or firewall andÂ direct
    contact from the compromised host to the attacker IP is not possible.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following are the commands to begin exploitation and set up a bind shell:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: Thus, we have analyzed that Metasploit also automates the process of connecting
    to the bind shell using an integrated multipayload handler. Tools such as Netcat
    can come in handy in situations where you write your own exploit with a bind shellcode,
    which should require a third-party handler to establish a connection to the compromised
    host. You can read some practical examples of Netcat usage for various network-security
    operations atÂ [http://en.wikipedia.org/wiki/Netcat](http://en.wikipedia.org/wiki/Netcat).
  prefs: []
  type: TYPE_NORMAL
- en: Reverse shells
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A reverse shell is the complete opposite of a bind shell. Instead of binding
    a port on the target system and waiting for the connection from the attacker's
    machine, it simply connects back to the attacker's IP and port, and spawns a shell.
    A visible dimension of the reverse shell is to consider a target behind the NAT
    or firewall that prevents public access to its system resources.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following are the commands to begin exploitation and set up a reverse shell:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: You can clearly differentiate between a reverse shell and a bind shell using
    the attacker's IP. We have to provide the attacker's IP (for example, `LHOST`
    `192.168.0.3`) in a reverse shell configuration, while there is no need to provide
    it in a bind shell.
  prefs: []
  type: TYPE_NORMAL
- en: What is the difference between the inline and stager payloads?Â An inline payload
    is a single self-contained shellcode that is to be executed with one instance
    of an exploit, while the stager payload creates a communication channel between
    the attacker and victim machine to read off the rest of the staging shellcode
    in order to perform a specific task. It is common practice to choose stager payloads
    because they are much smaller than inline payloads.
  prefs: []
  type: TYPE_NORMAL
- en: Meterpreters
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A meterpreter is an advanced, stealthy, multifaceted, and dynamically-extensible
    payload that operates by injecting a reflective DLL into a target memory. Scripts
    and plugins can be dynamically loaded at runtime for the purpose of extending
    the post exploitation activity. This includes privilege-escalation, dumping system
    accounts, keylogging, persistent backdoor service, and enabling a remote desktop.
    Moreover, the whole communication of the meterpreter shell is encrypted by default.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following are the commands to begin exploitation and set up a meterpreter
    payload:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'As you can see, we have successfully acquired a meterpreter shell. By typing,
    we will be able to see the various types of commands available to us. Let''s check
    our current privileges and escalate them to `SYSTEM` level using a meterpreter
    script named `getsystem`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'This will display the number of techniques available for elevating our privileges.
    By using a default command, `getsystem`, without any options, it will attempt
    every single technique against the target and will stop as soon as it is successful:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: If you choose to execute theÂ `-j -z`Â exploit command, you are pushing the exploit
    execution to the background, and will not be presented with an interactive meterpreter
    shell. However, if the session has been established successfully, then you can
    interact with that particular session using the sessions `-i` ID or get a list
    of the active session's by typing sessions `-l` to get the exact ID value.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s use the power of the meterpreter shell and dump the current system accounts
    and passwords held by the target. These will be displayed in the NTLM hash format
    and can be reversed by cracking through several tools and techniques using the
    following commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, let''s take this activity further by recording the keystrokes using the
    keylogging capability of the meterpreter shell, using the following commands,
    which may reveal some useful data from our target:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'At this stage, we will migrate the meterpreter shell to the `explorer.exe`
    process (`3172`) in order to start logging the current user activity on a system
    with the following commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'We have now started our keylogger and should wait for some time to get the
    chunks of recorded data:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: As you can see, we have dumped the target's web-surfing activity. Similarly,
    we could also capture the credentials of all users logging into the system by
    migrating the `winlogon.exe` process (`648`).
  prefs: []
  type: TYPE_NORMAL
- en: 'You have exploited and gained access to the target system, but now want to
    keep this access permanent, even if the exploited service or application will
    be patched at a later stage. This kind of activity is typically known as a backdoor
    service. Note that the backdoor service provided by the meterpreter shell does
    not require authentication before accessing a particular network port on the target
    system. This may allow some uninvited guests to access your target and pose a
    significant risk. As part of following the rules of engagement for penetration
    testing, such an activity is generally not allowed. Therefore, we strongly suggest
    you keep the backdoor service away from an official pentest environment. You should
    also ensure that this was explicitly permitted in writing during the scoping and
    rules-of-engagement phases:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'So, we have finally started the backdoor service on our target. We will close
    the current meterpreter session and use theÂ multi/handler with a `windows/metsvc_bind_tcp`
    payload to interact with our backdoor service whenever we want:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s use another useful meterpreter script, `getgui`, to enable remote desktop
    access for our target. The following exercise will create a new user account on
    the target and enable remote desktop service if it was disabled previously:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, we can log into our target system using the `rdesktop` program by entering
    the following command on another Terminal:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: Note that, if you already hold a cracked password for any existing user on the
    target machine, you can simply execute the `runÂ getgui -e`Â command to enable the
    remote desktop service, instead of adding a new user. Additionally, don't forget
    to clean up your tracks on the system by executing the `getgui/clean_up` script
    cited at the end of the previous output.
  prefs: []
  type: TYPE_NORMAL
- en: How should I extend my attack landscape by gaining deeper access to the targeted
    network that is inaccessible from the outside?Â Metasploit provides the capability
    to view and add new routes to the destination network using the `route add targetSubnettargetSubnetMaskSessionId`
    command (for example, route add `10.2.4.0 255.255.255.0 1`). Here, the `SessionId`
    parameter points to the existing meterpreter session (gateway), and the `targetsubnet`
    parameter is another network address (or dual-homed Ethernet network address)
    that resides beyond our compromised target. Once you set Metasploit to route all
    of the traffic through a compromised host session, we are ready to penetrate further
    into a network that is normally non-routable from our side. This is commonly known
    as pivoting or foot-holding.
  prefs: []
  type: TYPE_NORMAL
- en: Writing exploit modules
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Developing an exploit is one of the most interesting aspects of the Metasploit
    framework. In this section, we will briefly discuss the core issues surrounding
    the development of an exploit, and explain its key skeleton by taking a live example
    from the existing framework's database. However, it is important to be adept with
    the Ruby programming language before you attempt to write your own exploit module.
    On the other hand, intermediate skills of reverse-engineering and a practical
    understanding of vulnerability-discovery tools (for example, fuzzers and debuggers)
    provide an open map toward the exploit construction. This section is meant only
    as an introduction to the topic, not a complete guide.
  prefs: []
  type: TYPE_NORMAL
- en: 'For our example, we have selected the exploit (EasyFTP Server <= 1.7.0.11 MKD
    Command Stack Buffer Overflow), which will provide a basic view of exploiting
    a buffer-overflow vulnerability in the Easy FTP Server application. You can port
    this module for a similar vulnerability found in other FTP server applications
    and so utilize your time effectively. The exploit code is located at `/usr/share/metasploit-framework/modules/exploits/windows/ftp/easyftp_mkd_fixret.rb`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding code is a basic header representing a file name, a revision number,
    and the date and time values of an exploit:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'The MSF core library requires an initialization at the beginning of an exploit:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'In the preceding code, the `Exploitmixin/` class is the one that provides various
    options and methods for the remote TCP connections, such as `RHOST`, `RPORT`,
    `Connect()`, `Disconnect()`, and `SSL()`. The followingÂ code is the rank level
    assigned to the exploit on the basis of its frequent demand and usage:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: 'In the followingÂ code, theÂ `Ftp mixin/`Â class establishes a connection with
    the FTP server:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: 'The followingÂ code provides generic information about the exploit and points
    to known references:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: 'The followingÂ code instructs the payload to clean up itself once the execution
    process is completed:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: 'The followingÂ code snippet defines 512 bytes of space available for the shellcode,
    lists bad characters that should terminate our payload delivery, and disables
    the NOP-padding:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: 'The followingÂ code snippet provides instructions on what platform is being
    targeted and defines the vulnerable targets (`0`Â toÂ `9`) that list the different
    versions of the Easy FTP Server (`1.7.0.2Â toÂ 1.7.0.11`), each representing a unique
    return address based on the application binary (`ftpbasicsvr.exe`). Furthermore,
    the exploit disclosure date was added, and the default target was set to `0` (`v1.7.0.2`):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: 'In the followingÂ code, theÂ `check()`Â function determines whether the target
    is vulnerable:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: 'The followingÂ code defines a function that generates NOP sleds to aid with
    IDS/IPS/AV evasion. Some consider NOP sleds to be a quick and dirty solution to
    this problem and believeÂ that they should not be used unless there is a particularly
    good reason. For simplicity, during this example of writing a module, we have
    left the function in the code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: 'The followingÂ procedure fixes a return address from where the payload can be
    executed. Technically, it resolves the issue of stack-addressing:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: 'Initially,Â the exploit buffer holds the encoded return address and the randomized
    NOP instructions:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: 'The followingÂ code adds a dynamically-generated shellcode to our exploit at
    runtime:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: 'The followingÂ code fixes the stack data and makes a short jump over the return
    address holding our shellcode buffer:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: 'At the end, using the preceding code, we send our finalized buffer to the specific
    target using the vulnerable MKD FTP post-authentication command. Since the MKD
    command in the Easy FTP Server is vulnerable to stack-based buffer-overflow, theÂ `buf`Â command
    will overflow the target stack and exploit the target system by executing our
    payload:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: 'Close your connections using the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: Metasploit is equipped with useful tools, such as `msfpescan` for Win32 and
    `msfelfscan` for Linux systems, that may assist you in finding a target-specific
    return address. For instance, to find a sustainable return address from your chosen
    application file, type `# msfpescan -p targetapp.ext`.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we pointed out several key areas necessary for target exploitation.
    At the beginning, we provided an overview of vulnerability research that highlighted
    the requirement for a penetration tester to hold the necessary knowledge and skills,
    which in turn become effective for vulnerability assessment. Then, we presented
    a list of online repositories from where you can reach a number of publicly-disclosed
    vulnerabilities and exploit codes. In the final section, we demonstrated the practical
    use of an advanced exploitation toolkit called the Metasploit framework. The exercises
    provided are designed purelyÂ  to explore and understand the target-acquisition
    process through tactical exploitation methods. Additionally, we interpreted the
    insights into exploit development by analyzing each step of the sample exploit
    code from a framework, to help you understand the basic skeleton and construction
    strategy.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will discuss the process of privilege-escalation and
    maintaining access using various tools and techniques and how it is beneficial
    once the target is acquired.
  prefs: []
  type: TYPE_NORMAL
