- en: Writing and Consuming RESTful Web Services in Go
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following recipes:'
  prefs: []
  type: TYPE_NORMAL
- en: Creating your first HTTP GET method
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating your first HTTP POST method
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating your first HTTP PUT method
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating your first HTTP DELETE method
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Versioning your REST API
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating your first REST client
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating your first AngularJS client
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating your first ReactJS client
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating your first VueJS client
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Whenever we build a web application that encapsulates logic that could be helpful
    to other related applications, we will often also write and consume web services.
    This is because they expose functionality over a network, which is accessible
    through the HTTP protocol, making an application a single source of truth.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we will write a RESTful API that supports `GET`, `POST`, `PUT`,
    and `DELETE` HTTP methods, and then we will learn how we can version the REST
    API, which is very helpful when we are creating APIs consumed publicly. We will
    finish up with writing the REST client to consume them.
  prefs: []
  type: TYPE_NORMAL
- en: Creating your first HTTP GET method
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: While writing web applications, we often have to expose our services to the
    client or to the UI so that they can consume a piece of code running on a different
    system. Exposing the service can be done with HTTP protocol methods. Out of the
    many HTTP methods, we will be learning to implement the HTTP `GET` method in this
    recipe.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Install the `github.com/gorilla/mux` package using the `go get` command, as
    follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Create `http-rest-get.go` where we will define two routes—`/employees` and
    `/employee/{id}` along with their handlers. The former writes the static array
    of employees and the latter writes employee details for the provided ID to an
    HTTP response stream, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the program with the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: How it works…
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Once we run the program, the HTTP server will start locally listening on port `8080`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, executing a `GET` request from the command line as follows will give
    you a list of all the employees:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Here, executing a `GET` request for a particular employee ID from the command
    line as follows, will give you the employee details for the corresponding ID:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Let’s understand the program we have written:'
  prefs: []
  type: TYPE_NORMAL
- en: We used `import ("encoding/json" "log" "net/http" "strconv" "github.com/gorilla/mux")`.
    Here, we imported `github.com/gorilla/mux` to create a `Gorilla Mux Router`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, we declared the `Route` struct type with four fields—`Name`, `Method`,
    `Pattern`, and `HandlerFunc`, where `Name` represents the name of an HTTP method,
    `Method` represents the HTTP method type which can be `GET`, `POST`, `PUT`, `DELETE`,
    and so on, `Pattern` represents the URL path, and `HandlerFunc` represents the
    HTTP handler.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Next, we defined two routes for the `GET` request, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, we defined a static `Employees` array, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Then, we defined two handlers—`getEmployees` and `getEmployee` where the former
    just marshals a static array of employees and writes it to an HTTP response stream,
    and the latter gets the employee ID from an HTTP request variable, fetches the
    employee for the corresponding ID from the array, marshals the object, and writes
    it to an HTTP response stream.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Following the handlers, we defined an `AddRoutes` function, which iterates over
    the routes array we defined, adds it to the `gorilla/mux` router, and returns
    the `Router` object.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Finally, we defined `main()` where we create a `gorilla/mux` router instance
    using the `NewRouter()` handler with the trailing slash behavior for new routes
    as true, which means the application will always see the path as specified in
    the route. For example, if the route path is `/path/`, accessing `/path` will
    redirect to the former and vice versa.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Creating your first HTTP POST method
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Whenever we have to send data to the server either through an asynchronous call
    or through an HTML form, then we go with the HTTP `POST` method implementation,
    which we will cover in this recipe.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Install the `github.com/gorilla/mux` package using the `go get` command, as
    follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Create `http-rest-post.go` where we will define an additional route that supports
    the HTTP `POST` method and a handler that adds an employee to the initial static
    array of employees and writes the updated list to an HTTP response stream, as
    follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the program with the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: How it works…
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Once we run the program, the HTTP server will start locally listening on port
    `8080`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, executing a `POST` request from the command line as follows will add
    an employee to the list with `ID` as `3` and return the list of employees as a
    response:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'This is shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/50fb9970-5845-4bfe-b5b9-a9145541375d.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Let’s understand the change we introduced in this recipe:'
  prefs: []
  type: TYPE_NORMAL
- en: First, we added another route with the name `addEmployee` that executes the
    `addEmployee` handler for every `POST` request for the URL pattern `/employee/add`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Then, we defined an `addEmployee` handler, which basically decodes the employee
    data that comes as part of a `POST` request using the `NewDecoder` handler of
    the built-in `encoding/json` package of Go, appends it to the initial static array
    of an employee, and writes it to an HTTP response stream.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Creating your first HTTP PUT method
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Whenever we want to update a record that we have created earlier or want to
    create a new record if it does not exist, often termed an **Upsert,** then we
    go with the HTTP `PUT` method implementation, which we will cover in this recipe.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Install the `github.com/gorilla/mux` package using the `go get` command, as
    follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Create `http-rest-put.go` where we will define an additional route that supports
    the HTTP `PUT` method and a handler that either updates the employee details for
    the provided ID or adds an employee to the initial static array of employees;
    if the ID does not exist, marshal it to the JSON, and write it to an HTTP response
    stream, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the program with the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: How it works…
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Once we run the program, the HTTP server will start locally listening on port
    `8080`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, executing a `PUT` request from the command line as follows, will update
    the `firstName` and the `lastName` for an employee with ID `1`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'This can be seen in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/35526607-03fd-4d3b-80a1-77bcdf89de43.png)'
  prefs: []
  type: TYPE_IMG
- en: 'If we execute a `PUT` request for an employee with ID `3` from the command
    line as follows, it will add another employee to the array, as there is no employee
    with ID 3, demonstrating the upsert scenario:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'This can be seen in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/e7a429b0-4bb7-4fc3-a4f1-ab29b4540853.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Let’s understand the change we introduced in this recipe:'
  prefs: []
  type: TYPE_NORMAL
- en: First, we added another route with the name `updateEmployee`, which executes
    the `updateEmployee` handler for every `PUT` request for the URL pattern `/employee/update`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Then, we defined an `updateEmployee` handler, which basically decodes the employee
    data that comes as part of a `PUT` request using the `NewDecoder` handler of the
    built-in `encoding/json` package of Go, iterates over the employees array to know
    whether the employee ID requested exists in the initial static array of employees,
    which we may also term as an UPDATE or UPSERT scenario, performs the required
    action, and writes the response to an HTTP response stream.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Creating your first HTTP DELETE method
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Whenever we want to remove a record that is no longer required then we go with
    the HTTP `DELETE` method implementation, which we will cover in this recipe.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Install the `github.com/gorilla/mux` package, using the `go get` command, as
    follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'Create `http-rest-delete.go` where we will define a route that supports the
    HTTP `DELETE` method and a handler that deletes the employee details for the provided
    ID from the static array of employees, marshals the array to JSON, and writes
    it to an HTTP response stream, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the program with the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: How it works…
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Once we run the program, the HTTP server will start locally listening on port
    `8080`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, executing a `DELETE` request from the command line as follows, will delete
    an employee with ID 1 and give us the updated list of employees:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'This can be seen in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/6b9b0cfe-75e6-46f0-97da-eec53d4eb18f.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Let’s understand the change we introduced in this recipe:'
  prefs: []
  type: TYPE_NORMAL
- en: First, we added another route with the name `deleteEmployee`, which executes
    the `deleteEmployee` handler for every `DELETE` request for the URL pattern `/employee/delete`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Then, we defined a `deleteEmployee` handler, which basically decodes the employee
    data that comes as part of a `DELETE` request using the `NewDecoder` handler of
    the built-in `encoding/json` package of Go, gets the index of the requested employee
    using the `GetIndex` helper function, deletes the employee, and writes the updated
    array as JSON to an HTTP response stream.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Versioning your REST API
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When you create a RESTful API to serve an internal client, you probably don't
    have to worry about versioning your API. Taking things a step further, if you
    have control over all the clients that access your API, the same may be true.
  prefs: []
  type: TYPE_NORMAL
- en: However, in a case where you have a public API or an API where you do not have
    control over every client using it, versioning of your API may be required, as
    businesses need to evolve, which we will be covering in this recipe.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Install the `github.com/gorilla/mux` package, using the `go get` command, as
    follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'Create `http-rest-versioning.go` where we will define two versions of the same
    URL path that support the HTTP `GET` method, with one having `v1` as a prefix
    and the other one with `v2` as a prefix in the route, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the program with the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: How it works…
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Once we run the program, the HTTP server will start locally listening on port
    `8080`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, executing a `GET` request with the path prefix as `/v1` from the command
    line as follows, will give you a list of one set of employees:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'Here, executing a `GET` request with path prefix as `/v2` will give you a list
    of another set of employees, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'Sometimes, while designing the REST URL, we prefer to return the default data
    if the client queries the endpoint without specifying the version in the URL path.
    To incorporate it, we have modified the `getEmployees` handler to check for the
    prefix in the URL and act accordingly. So, executing a `GET` request without the
    path prefix from the command line as follows, will give you a list with a single
    record, which we can call the default or initial response of the REST endpoint
    called:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'Let’s understand the change we introduced in this recipe:'
  prefs: []
  type: TYPE_NORMAL
- en: First, we defined a single route with the name `getEmployees`, which executes
    a `getEmployees` handler for every `GET` request for the URL pattern `/employees`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Then, we created three arrays, namely `employees`, `employeesV1`, and `employeesV2`,
    which are returned as a response to an HTTP `GET` call for the URL patterns `/employees`,
    `/v1/employees`, and `/v2/employees` respectively.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, we have defined a `getEmployees` handler where we check for the prefix
    in the URL path and perform an action based on it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Then, we defined an `AddRoutes` helper function, which iterates over the routes
    array we defined, adds it to the `gorilla/mux` router, and returns the `Router`
    object.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Finally, we defined `main()` where we create a `gorilla/mux` router instance
    using the `NewRouter()` handler with the trailing slash behavior for new routes
    as true, and add routes to it calling the `AddRoutes` helper function passing
    the default router and two subrouters, one with the prefix as `v1` and the other
    with the prefix as `v2`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Creating your first REST client
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Today, most applications that communicate with servers use RESTful services.
    Based on our needs, we consume these services through JavaScript, jQuery, or through
    a REST client.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we will write a REST client using the `https://gopkg.in/resty.v1`
    package, which itself is inspired by the Ruby rest client to consume the RESTful services.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready…
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Run `http-rest-get.go`, which we created in one of our previous recipes, in
    a separate terminal, executing the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: See the *Creating your first HTTP GET method* recipe.
  prefs: []
  type: TYPE_NORMAL
- en: 'Verify whether the `/employees` service is running locally on port `8080` by
    executing the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'This should return the following response:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: How to do it…
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Install the `github.com/gorilla/mux` and `gopkg.in/resty.v1` packages using
    the `go get` command, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'Create `http-rest-client.go` where we will define handlers that call `resty`
    handlers, such as `GET`, `POST`, `PUT`, and `DELETE`, get the response from the
    REST service, and write it to an HTTP response stream, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the program with the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: How it works…
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Once we run the program, the HTTP server will start locally listening on port
    `8090`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, executing a `GET` request to the REST client from the command line as
    follows will give you a list of all the employees from the service:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'Similarly, run `http-rest-post.go`, which we created in one of our previous
    recipes, in a separate terminal by executing the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'Execute a `POST` request to the REST client from the command line, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: 'This will add an employee to the initial static list and return an updated
    list of the employees, which will look as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/e91da249-f9ae-42b1-ba53-391407df8998.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Let’s understand the program we have written:'
  prefs: []
  type: TYPE_NORMAL
- en: Using `import ("encoding/json" "fmt" "log" "net/http" "github.com/gorilla/mux"
    resty “gopkg.in/resty.v1")`, we imported `github.com/gorilla/mux` to create a
    `Gorilla Mux Router` and `gopkg.in/resty.v1` with the package alias as `resty`,
    which is a REST client of Go, having various handlers to consume the RESTful web
    service.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Using `const WEB_SERVICE_HOST string = "http://localhost:8080"`, we declared
    the complete URL of the RESTful web service host.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Depending on the project size, you can move the `WEB_SERVICE_HOST` string to
    the constants file or to the properties file, helping you to override its value
    at runtime.
  prefs: []
  type: TYPE_NORMAL
- en: Next, we defined a `getEmployees` handler where we create a new `resty` request
    object calling its `R()` handler, call the `Get` method, which performs the HTTP `GET` request,
    gets the response, and writes it to an HTTP response.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Similarly, we defined three more handlers that do the `POST`, `PUT`, and `DELETE`
    requests to the RESTful service and a `main()` where we create a `gorilla/mux`
    router instance and register the `/employees` URL path with the `getEmployees`
    handler and `/employee/add`, `/employee/update`, and  `/employee/delete` with
    the `addEmployee`, `updateEmployee`, and `deleteEmployee` handlers, respectively.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Creating your first AngularJS Client
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: AngularJS is an open source JavaScript Model-View-Whatever (MVW) framework,
    which lets us build well-structured, easily testable and maintainable browser-based
    applications.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we will learn to create an AngularJS with TypeScript 2 client to
    send a `POST` request to the HTTP server running locally.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready…
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As we have already created an HTTP server that accepts both `GET` and `POST`
    requests in one of our previous recipes, we will be using the same code base as
    our HTTP server.
  prefs: []
  type: TYPE_NORMAL
- en: 'Also, this recipe assumes you have Angular2 CLI installed on your machine.
    If not, install it by executing the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: See the *Creating your first HTTP POST method* recipe.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Create a new project and skeleton application by executing the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: 'Move to the `angularjs-client` directory and create `server.go` by executing
    the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: 'Copy the following code to `server.go`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: 'Move to the `angularjs-client` directory and create `models/employee.ts` and
    `service/employee.service.ts` by executing the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: 'Copy the following code to `angularjs-client/src/app/models/employee.ts`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: Copy the following code to `angularjs-client/src/app/services
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '/employee.service.ts`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: 'Replace the code of `angularjs-client/src/app/app.component.html` with the
    following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: 'Replace the code of `angularjs-client/src/app/app.component.ts` with the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: 'Replace the code of `angularjs-client/src/app/app.module.ts` with the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: 'With everything in place, the directory structure should look like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/b8fa1211-122f-4c01-ae7a-7b7041b79476.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Move to the `angularjs-client` directory and execute the following commands
    to build the project artifacts and run the program:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: How it works…
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Once we run the program, the HTTP server will start locally listening on port `8080`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Browsing to `http://localhost:8080` will show us the AngularJS client page,
    which has an HTML form with Id, FirstName, and LastName fields, as shown in the
    following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/203d5e4b-c4f3-4b47-aac8-31bf7bdeda08.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Clicking on the Add button after filling in the form will send a `POST` request
    to an HTTP server running on port `8080`. Once a request is processed by the server
    it will return a list of all the static employees along with the newly added one,
    and display it in a browser, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/d2c666e9-0b1c-4b91-8376-a454e565541e.png)'
  prefs: []
  type: TYPE_IMG
- en: List of all the static employees along with the newly added one
  prefs: []
  type: TYPE_NORMAL
- en: Creating your first ReactJS client
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: ReactJS is a declarative JavaScript library that helps in building user interfaces
    efficiently. Because it works on the concept of virtual DOM it improves application
    performance, since JavaScript virtual DOM is faster than the regular DOM.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we will learn to create a ReactJS client to send a `POST` request
    to the HTTP server running locally.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready…
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As we have already created an HTTP server that accepts both `GET` and `POST` HTTP
    requests in our previous recipe, we will be using the same code base as our HTTP
    server.
  prefs: []
  type: TYPE_NORMAL
- en: Also, this recipe assumes you have `npm` installed on your machine and you have
    basic knowledge of `npm` and `webpack`, which is a JavaScript Module bundler.
  prefs: []
  type: TYPE_NORMAL
- en: See the *Creating your first HTTP POST method* recipe.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Create a `reactjs-client` directory where we will keep all our ReactJS source
    files and an HTTP server, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: 'Copy the following code to `server.go`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: 'Create another directory with the name `assets` where all our frontend code
    files, such as `.html`, `.js`, `.css`, and `images` will be kept, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: 'Copy the following content to `index.html`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: 'Move to the `reactjs-client` directory and execute `npm init` to create `package.json`
    where we specify all the dependencies required to build our react client such
    as `React`, `React DOM`, `Webpack`, `Babel Loader`, `Babel Core`, `Babel Preset:
    ES2015`, and `Babel Preset: React`, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: 'Replace the content of `package.json` with the following content:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: 'Create `webpack.config.js` where we will configure `webpack`, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: 'Copy the following content to `webpack.config.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: 'Create an entry point for the `webpack`, which is `reactjs-client/app/main.js` by
    executing the following commands:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: 'Copy the following content to `main.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: 'Define `ReactApp` along with its child components by executing the following
    commands:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: 'Copy the following content to `reactjs-client/app/components/employee-app.jsx`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs: []
  type: TYPE_PRE
- en: 'Copy the following content to `reactjs-client/app/components/employee.jsx`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs: []
  type: TYPE_PRE
- en: 'Copy the following content to `reactjs-client/app/components/employee-list.jsx`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs: []
  type: TYPE_PRE
- en: Copy the following content to `reactjs-client/app/components/add-employee.jsx`**:**
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs: []
  type: TYPE_PRE
- en: 'With everything in place, the directory structure should look like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/50c0bf0f-cdbe-4833-bf8d-99c9a104973b.png)'
  prefs: []
  type: TYPE_IMG
- en: Directory structure
  prefs: []
  type: TYPE_NORMAL
- en: 'Move to the `reactjs-client` directory and execute the following commands to
    install `node modules` and build `webpack`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the program with the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE63]'
  prefs: []
  type: TYPE_PRE
- en: How it works…
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Once we run the program, the HTTP server will start locally listening on port
    `8080`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Browsing to `http://localhost:8080` will show us the ReactJS client page, as
    shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/f00b32c2-acbb-4ab3-a636-89add88479d7.png)'
  prefs: []
  type: TYPE_IMG
- en: ReactJS client page
  prefs: []
  type: TYPE_NORMAL
- en: 'Clicking on the Add button after filling in the textbox will send a `POST`
    request to the HTTP server running on port `8080`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/1584d5e4-c3e7-42e3-a70e-e61ccea90f6e.png)'
  prefs: []
  type: TYPE_IMG
- en: Click on the Add button after filling in the textbox
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, executing a `GET` request from the command line as follows will give
    you a list of all the static employees:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE64]'
  prefs: []
  type: TYPE_PRE
- en: 'This will be alongside the newly added one, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE65]'
  prefs: []
  type: TYPE_PRE
- en: Creating your first VueJS client
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Being open source, VueJS is one of the incrementally adoptable and progressive
    JavaScript frameworks that companies are adopting to build their frontend or client-facing
    user interfaces for the web.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we will learn to create a client in VueJS, which adds an employee
    sending an HTTP `POST` request to the HTTP server running locally.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready…
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As we have already created an HTTP server that accepts both `GET` and `POST`
    requests in one of our previous recipes, we will be using the same code base as
    our HTTP server.
  prefs: []
  type: TYPE_NORMAL
- en: See the *Creating your first HTTP POST method* recipe.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Create a `vuejs-client` directory where we will keep all our VueJS source files
    and an HTTP server, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE66]'
  prefs: []
  type: TYPE_PRE
- en: 'Copy the following code to `server.go`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE67]'
  prefs: []
  type: TYPE_PRE
- en: 'Create another directory with the name `assets` where all our frontend code
    files such as `.html`, `.js`, `.css`, and `images` will be kept, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE68]'
  prefs: []
  type: TYPE_PRE
- en: 'Copy the following content to `index.html`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE69]'
  prefs: []
  type: TYPE_PRE
- en: 'Copy the following content to `main.js`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE70]'
  prefs: []
  type: TYPE_PRE
- en: 'With everything in place, the directory structure should look like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/9f55a822-3ed2-4737-9a32-67a78d767f14.png)'
  prefs: []
  type: TYPE_IMG
- en: Directory structure
  prefs: []
  type: TYPE_NORMAL
- en: 'Run the program with the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE71]'
  prefs: []
  type: TYPE_PRE
- en: How it works…
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Once we run the program, the HTTP server will start locally listening on port
    `8080`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Browsing to `http://localhost:8080` will show us the VueJS client page, which
    has an HTML form with Id, FirstName, and LastName fields, as shown in the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/6ca52730-9d1a-41ab-9232-ce31c5b2b145.png)'
  prefs: []
  type: TYPE_IMG
- en: VueJS client page
  prefs: []
  type: TYPE_NORMAL
- en: 'Clicking on the Add button after filling in the form will send a `POST` request
    to the HTTP server running on port `8080`, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/2787ecca-7f98-4c93-8b51-27a5ef3a79eb.png)'
  prefs: []
  type: TYPE_IMG
- en: Click on the Add button after filling in the form
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, executing a `GET` request from the command line as follows, will give
    you a list of all the static employees:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE72]'
  prefs: []
  type: TYPE_PRE
- en: 'This will be alongside the newly added one as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE73]'
  prefs: []
  type: TYPE_PRE
