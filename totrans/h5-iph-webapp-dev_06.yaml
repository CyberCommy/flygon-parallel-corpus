- en: Chapter 6. Location-aware Applications
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Geolocation is a widely requested feature in today's applications, giving accurate
    location-specific information to the user. In this chapter, we'll review the Geolocation
    API in the HTML5 specification. With this knowledge, we'll go ahead and build
    a wrapper that allows us to easily tap into this feature. Once we have a thorough
    understanding of how we can retrieve the user's location, we put our newly found
    knowledge to use with a simple application that uses the Google Maps API. At the
    end of this chapter you should have a thorough understanding of the Geolocation
    specification, have a simple example of its implementation, and as a bonus you
    should have gained some experience in using the Google Maps API. So let's start
    out by exploring the specification.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter we will cover:'
  prefs: []
  type: TYPE_NORMAL
- en: Geolocation specification
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Retrieving the user's current location
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Watching the user's location
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Handling geolocation errors
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Google Maps API
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Tying Google Maps with geolocation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Customizing Google Maps
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Geolocation specification
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Location-based services have been around for quite a while and have evolved
    over time. In essence these services strive to provide features that allow the
    use of time and location in various types of programs. However, until now there
    has not been a useful set of tools for the frontend. Therefore, the **W3C** (**World
    Wide Web Consortium**), has tried to standardize the API that retrieves geographical
    location from a client-side device, whether that is your desktop computer, mobile
    phone, or tablet.
  prefs: []
  type: TYPE_NORMAL
- en: Implementation
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The Geolocation API defines a high-level interface to location information associated
    only with the device hosting the implementation, such as latitude and longitude.
    The API itself is agnostic of the underlying location information sources.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: (As mentioned at [http://dev.w3.org/geo/api/spec-source.html#introduction](http://dev.w3.org/geo/api/spec-source.html#introduction).)
  prefs: []
  type: TYPE_NORMAL
- en: Common ways that browsers have implemented the Geolocation API involve **Global
    Positioning Systems** (**GPS**), IP addresses, WIFI and Bluetooth MAC addresses,
    and basic user input. Due to the various ways these technologies work and the
    varying degrees browser vendors choose to implement the specification, there is
    no guarantee that this API will return the location of the user or device. Therefore
    it is up to you, as the developer, to make sure your users are also aware of this
    limitation and that reasonable expectations are explained to all involved.
  prefs: []
  type: TYPE_NORMAL
- en: Scope, security, and privacy
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When it comes to implementing Geolocation into our apps the only part we'll
    need to worry about is the scripts. There is no need to provide any sort of markup
    and there's no need to query or tap some external resource or API. The implementation
    of Geolocation is strictly on the scripting side and is directly associated with
    the device in use. It is also useful to know that the position is delivered in
    terms of World Geodetic System coordinates or latitude and longitude.
  prefs: []
  type: TYPE_NORMAL
- en: 'Security and privacy concerns must also be considered when exposing a user''s
    location. From the security methods used to retrieve and store this information
    to how it is distributed among other parties, each device implementing it must
    provide a mechanism that protects the user''s privacy. Therefore, the following
    considerations are required by the W3C specification:'
  prefs: []
  type: TYPE_NORMAL
- en: Permission from the user is required to send the location information.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Location information must only be requested when necessary.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The user must approve of retransmitting location information.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The party holding this information must disclose to the user that they are collecting
    location data, including its purpose, security, accessibility, sharing (if the
    data will be shared among other parties), and the length of time such data will
    be stored.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Keep in mind that applications written for mobile Safari do not have direct
    access to the device. They can only query the browser to access the device on
    their behalf. Therefore, your application is requesting the browser for specific
    information and the browser does the work for you, but you never have one-on-one
    communication with the device itself.
  prefs: []
  type: TYPE_NORMAL
- en: 'Overall, the specification takes into account the concerns that arise with
    sharing personal information, such as Geolocation, with other parties. However,
    these considerations do not take into account the complexity that might arise
    when a user inadvertently grants permission or if the users decides to change
    their mind. For these reasons, the specification does make the following recommendation:'
  prefs: []
  type: TYPE_NORMAL
- en: Mitigation and in-depth defensive measures are an implementation responsibility
    and not prescribed by this specification. However, in designing these measures,
    implementers are advised to enable user awareness of location sharing, and to
    provide easy access to interfaces that enable revocation of permissions.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: (As mentioned at [http://www.w3.org/TR/geolocation-API/#implementation_considerations](http://www.w3.org/TR/geolocation-API/#implementation_considerations).)
  prefs: []
  type: TYPE_NORMAL
- en: With these concerns and considerations in mind, we now briefly dive into describing
    API. In the following section, we'll look at how API is built and specifically
    look at parts that will be utilized in the application built in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: API descriptions
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: At this point of the chapter you may be wondering why we haven't looked at the
    code yet, and although that is a valid concern, my goal here is to help you understand
    the Geolocation API thoroughly and to guide you through the actual W3C specification.
    So in this chapter we look at four interfaces or exposed behaviors that define
    the `Geolocation` specification, including the `Geolocation`, `PositionOptions`,
    `Position`, `Coordinates` and `PositionError` interfaces. If you get confused
    by any of the information provided here, there's no need to worry. Consider this
    section more of reference material that can help you increase your knowledge on
    the subject.
  prefs: []
  type: TYPE_NORMAL
- en: The Geolocation interface
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The Geolocation object is used to determine the location of the device. When
    we instantiate the Geolocation object a user-agent algorithm is used to determine
    the location, then a `position` object is created and populated with the data.
    If we look at the W3C specification, the Geolocation is defined as this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: (As seen at [http://www.w3.org/TR/geolocation-API/#geolocation](http://www.w3.org/TR/geolocation-API/#geolocation).)
  prefs: []
  type: TYPE_NORMAL
- en: 'The previous code is not JavaScript and is a description of the API or **Interface
    Definition Language** (**IDL**). If its confusing, don''t worry, I felt the same
    way when I first looked at a specification page. However, what you are looking
    at here is the description of the Geolocation object. When you read the previous
    code, you should gather the following information:'
  prefs: []
  type: TYPE_NORMAL
- en: 'There are three methods:'
  prefs: []
  type: TYPE_NORMAL
- en: '`getCurrentPosition`, which accepts three parameters, two of which are optional'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`watchPosition`, which accepts three parameters, two of which are optional'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`clearWatch`, which accepts one parameter'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You should now know that there are three methods associated with the Geolocation
    object and each has a specific purpose as described by the function name. So let's
    go over these three methods, beginning with `getCurrentPosition`, which as you
    may have guessed obtains the current location of the device or attempts to.
  prefs: []
  type: TYPE_NORMAL
- en: The getCurrentPosition method
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: As described earlier, this method accepts three parameters, two of which are
    optional. The first parameter should be a `callback` method for a successful request.
    The second and third parameters are completely optional. The second parameter,
    if defined, is another `callback` method for when an error occurs. The last parameter
    is an `options` object as defined by the `PositionsOptions` interface.
  prefs: []
  type: TYPE_NORMAL
- en: The watchPosition method
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The `watchPosition` method also accepts three parameters, which are the same
    as the `getCurrentPosition` method parameters. The only difference here is that
    this method will continuously fire the `successCallback`, or the first parameter,
    until the `clearWatch` method is called. Keep in mind that the `successCallback`
    will only fire if the position has changed and is thus not dependent on any time
    option. This method also returns a long value that defines the watch operation—this
    is what is used to clear it with the `clearWatch` method.
  prefs: []
  type: TYPE_NORMAL
- en: The clearWatch method
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: As we've already discussed, `clearWatch` is used to stop the process set by
    `watchPosition`. To use this method we must use the long value returned by `watchPosition`
    and send it in as a parameter to `clearWatch`.
  prefs: []
  type: TYPE_NORMAL
- en: The PositionOptions interface
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'We have seen that the `PositionOptions` object is used to pass an optional
    parameter to both the `getCurrentPosition` and `watchPosition` methods. This object
    is defined by W3C as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: (As seen at [http://www.w3.org/TR/geolocation-API/#position-options](http://www.w3.org/TR/geolocation-API/#position-options).)
  prefs: []
  type: TYPE_NORMAL
- en: 'What we should take from this is that we can create an object with the key/value
    pairs for `enableHighAccuracy`, `timeout`, and `maximumAge`. This object would
    look like the following in our JavaScript code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: But what do these values mean? Well, lucky for us this is all defined in the
    specification. Don't worry though, here's a simple explanation for each of these
    options.
  prefs: []
  type: TYPE_NORMAL
- en: The enableHighAccuracy option
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: This option basically hints to the device that the application would like to
    receive the best possible results. The default is set to `false`, because if set
    to `true` it may result in slower response times and/or increased power consumption.
    Keep in mind that the user might deny this feature and that the device may not
    be able to provide more accurate results.
  prefs: []
  type: TYPE_NORMAL
- en: The timeout option
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Timeout is defined as the amount of time, in milliseconds, to wait until the
    successCallback is invoked. If the amount of time to get location data exceeds
    this value then the error callback is invoked and a `PositionError` code of `TIMEOUT`
    is sent. By default, the value is set to `Infinity`.
  prefs: []
  type: TYPE_NORMAL
- en: The maximumAge option
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The maximum age option is in reference to using a cached position whose age
    is not greater than the amount set by this option. By default this attribute is
    set to `0` and therefore an attempt to acquire a new position object is made each
    time. If this option is set to `Infinity` then the cached position is returned
    each time.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now that we understand the options, we could pass this object as the third
    parameter to the `getCurrentPosition` and `watchPosition` methods. A simple implementation
    of the API would look something like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Now we know how to customize our calls to the Geolocation API, but what does
    the data look like when a success call is made? Or, what does an error return
    back? These are extremely useful to know in order to develop a good wrapper around
    the Geolocation API. So let's take a look at the coordinates and position error
    interfaces.
  prefs: []
  type: TYPE_NORMAL
- en: The Position interface
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The Position interface is just a container for the information returned by
    device implementation of the Geolocation API. It returns a `Coordinates` object
    and `Timestamp`. This is described in the W3C specification as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: (As seen at [http://www.w3.org/TR/geolocation-API/#position](http://www.w3.org/TR/geolocation-API/#position).)
  prefs: []
  type: TYPE_NORMAL
- en: 'In context of what we have discussed up to this point, the position interface
    comes into play on the `successCallback` of the `getCurrentPosition` method. If
    you recall, this method accepts one parameter called `options` that is of the
    `position` object defined earlier. In practice, if we wanted to log out the coordinates
    and timestamp we could do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: The timestamp returned is represented as `DOMTimeStamp` and the `coords` object
    contains the geographic coordinates with additional information, which is defined
    by the `Coordinates` interface.
  prefs: []
  type: TYPE_NORMAL
- en: The Coordinates interface
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'As we have discussed previously, the `successCallback` for `getCurrentPosition`
    and `watchPosition` returns a `position` object that contains the `Coordinates`
    object. This `Coordinates` object contains multiple attributes, which are described
    in the following table:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Attribute | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `latitude` | Geographic coordinate in decimal degrees. |'
  prefs: []
  type: TYPE_TB
- en: '| `longitude` | Geographic coordinate in decimal degrees. |'
  prefs: []
  type: TYPE_TB
- en: '| `altitude` | Height of the position in meters. Null if not present. |'
  prefs: []
  type: TYPE_TB
- en: '| `accuracy` | Accuracy of longitude and latitude in meters. Null if not present.
    Must be a non-negative real number. |'
  prefs: []
  type: TYPE_TB
- en: '| `altitudeAccuracy` | Accuracy of altitude in meters. Null if not present.
    Must be a non-negative real number. |'
  prefs: []
  type: TYPE_TB
- en: '| `heading` | Direction of travel in degrees (0° ≤ heading ≤ 360°) clockwise.
    Null if not present. If stationary value must be NaN. |'
  prefs: []
  type: TYPE_TB
- en: '| `speed` | Magnitude of current velocity in meters per second. Null if not
    present. Must be a non-negative real number. |'
  prefs: []
  type: TYPE_TB
- en: (Seen at [http://www.w3.org/TR/geolocation-API/#coordinates](http://www.w3.org/TR/geolocation-API/#coordinates).)
  prefs: []
  type: TYPE_NORMAL
- en: Now that we know the properties available through the `Coordinates` interface,
    we can access these properties with the following implementation.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: As you can see, we can access the attributes via the `position.coords` object.
    In this way it is extremely easy for us to access the user's current location
    and tie it to other APIs, which is what we will be doing shortly with the Google
    Maps API. Lastly, let's discuss the `PositionError` interface so that we know
    how to handle errors efficiently within our applications.
  prefs: []
  type: TYPE_NORMAL
- en: The PositionError interface
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The `PositionError` interface comes into play when an error occurs on the `getCurrentPosition`
    or `watchPosition` method(s). This interface describes the codes that are sent
    to our error handler or callback, and a message. The W3C explains the `PositionError`
    interface as following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: (As seen at [http://www.w3.org/TR/geolocation-API/#position-error](http://www.w3.org/TR/geolocation-API/#position-error).)
  prefs: []
  type: TYPE_NORMAL
- en: The previous code describes two attributes that are sent over as an object to
    the error handler, the two attributes being `code` and `message`.
  prefs: []
  type: TYPE_NORMAL
- en: The `code` attribute could be any of the three constants,
  prefs: []
  type: TYPE_NORMAL
- en: '`PERMISSION_DENIED` (error code 1): The user chose not to let the browser have
    access to the location information.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`POSITION_UNAVAILABLE` (error code 2): The location of the device could not
    be determined by the browser.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`TIMEOUT` (error code 3): The total time in acquiring the location information
    has surpassed the specified timeout property in the PositionOptions interface.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The second parameter, `message`, would be a DOMstring or String describing the
    problem.
  prefs: []
  type: TYPE_NORMAL
- en: 'In our implementation we could then do something like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: As you can see, we can easily determine an error using the `PositionError` interface
    and customize our error messages based on the codes provided. At this point, you
    should have a solid foundation on which you can build. We'll now briefly go over
    some use cases for implementing the Geolocation API into our applications and
    then move into building our application for this book. You can skim over the next
    section, as it will only give you ideas of how Geolocation can or has been implemented.
  prefs: []
  type: TYPE_NORMAL
- en: Use cases
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Before we jump into building our application, I'd like to review some instances
    in which Geolocation can be implemented into our applications. This will be sweet
    and short, but it will help you formulate ideas on how to efficiently implement
    this feature. Much of this is already located in the W3C specification, but I
    hope this will give you more insight into how useful the specification is and
    why you should definitely check it out when exploring new features.
  prefs: []
  type: TYPE_NORMAL
- en: Points of interest
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: We have always been interested in our surroundings whether that is food, beer,
    or entertainment. So wouldn't it be cool if we could list out possible points
    of interest in our applications that relate to the content the user is accessing?
    We can do this with the Geolocation API. By finding the user's current location
    and tapping into open APIs from third-party vendors we can easily find where the
    user is and present relevant information about the area they are currently located
    in.
  prefs: []
  type: TYPE_NORMAL
- en: Route navigation
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: We've seen this being done before, plenty of times with native applications
    on our phones. It's even possible that your phone comes preloaded with this feature
    for which so many have paid hundreds of dollars before. Now, with the HTML5 Geolocation
    API we can build this using the `currentPosition` method and tie it to something
    like Google Maps so that we can present the user with a route. If we wanted to,
    we could even possibly make it a live application using the `watchPosition` method,
    although you may run into API access limits, so keep that in mind when building
    your apps.
  prefs: []
  type: TYPE_NORMAL
- en: Latest information
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Another useful feature in this application is to present the user with the latest
    information. This can be easily created if we expose an API from a backend system,
    but what if we went further and implemented information outside our own application
    based on the current position of the user. For example, if I lived in Boston and
    went on a trip to Seattle, I would probably want to know what's going on in Seattle
    and not Boston, so my application should probably handle that scenario. With the
    HTML5 Geolocation API we can achieve this very easily without much complication.
  prefs: []
  type: TYPE_NORMAL
- en: We now have a solid understanding of the Geolocation API, from theoretical understanding
    to simple implementation, we have gone over everything we need to know about Geolocation
    and how to work with it. Use cases have also been defined to help us find a way
    of integrating it into our applications, more likely than not you'll find new
    and innovative ways of using this piece of technology in your applications. As
    for now, let's gear ourselves for a simple use case scenario of pointing out the
    user's current location using the Google Maps API. So let's get started.
  prefs: []
  type: TYPE_NORMAL
- en: Google Maps API
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Before we get on to implementing Geolocation with Google Maps, we need to do
    some setup work that is pretty simple. As you may already know, Google Maps provides
    an API that you can tap into to implement their maps into your application, making
    it easy for you to display information relative to a user's input or even better—their
    current location. However, for several reasons we need to use an API key from
    Google to authorize our application and keep track of the requests made from your
    application. In this section we'll cover the setup work and hopefully move you
    along quickly.
  prefs: []
  type: TYPE_NORMAL
- en: The API(s)
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'First of all, you need to know that there are several APIs related to Maps,
    including JavaScript v3, Places, iOS SDK, Android API, Earth API, and more. For
    our purposes we''ll be using the JavaScript API v3; note that we will be using
    using version 3 of the API. If you would like more information on the several
    APIs you can visit the following page:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://developers.google.com/maps/](https://developers.google.com/maps/)'
  prefs: []
  type: TYPE_NORMAL
- en: Obtaining an API key
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'If you have been following along you''ll notice that we need an API key for
    our application. Google has provided the following reasoning for this:'
  prefs: []
  type: TYPE_NORMAL
- en: Using an API key enables you to monitor your application's Maps API usage, and
    ensures that Google can contact you about your application if necessary. If your
    application's Maps API usage exceeds the Usage Limits, you must load the Maps
    API using an API key in order to purchase additional quota.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: (As seen at [https://developers.google.com/maps/documentation/javascript/tutorial#api_key](https://developers.google.com/maps/documentation/javascript/tutorial#api_key).)
  prefs: []
  type: TYPE_NORMAL
- en: Activating the service
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Now let''s get started on creating the API key. First, log in to your Google
    account at the following URL:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://code.google.com/apis/console](https://code.google.com/apis/console)'
  prefs: []
  type: TYPE_NORMAL
- en: Once we log in at the previous URL, we select the **Services** tab.
  prefs: []
  type: TYPE_NORMAL
- en: '![Activating the service](img/1024_06_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The Services tab
  prefs: []
  type: TYPE_NORMAL
- en: 'In the **Services** tab, we are presented with all the services provided by
    Google. In this list we need to activate the Google Maps API v3\. It should look
    like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Activating the service](img/1024_06_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Inactive Google Maps API
  prefs: []
  type: TYPE_NORMAL
- en: 'When you click on the **OFF** button, the service will activate and should
    look like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Activating the service](img/1024_06_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Active Google Maps API
  prefs: []
  type: TYPE_NORMAL
- en: The Google Maps API v3 service is now activated under your Google account. The
    next step is to retrieve the key that will be used in our implementation of the
    Geolocation API.
  prefs: []
  type: TYPE_NORMAL
- en: Retrieving the key
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Now that the service has been activated under our Google account, let's get
    the key—the final step. To do this, switch to the **API Access** tab in the left-hand
    navigation.
  prefs: []
  type: TYPE_NORMAL
- en: '![Retrieving the key](img/1024_06_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The API Access tab
  prefs: []
  type: TYPE_NORMAL
- en: When we access this page we'll be presented with a **Simple API Access** section
    that will contain our generated key. This is the key you'll want to use to authorize
    your Google Maps implementation in the next section. Along with the key you'll
    notice that it will list the referrers, when it was activated, and who activated
    the key (you). To the right of all this information, you'll also notice a couple
    of options. These options include the ability to generate a new key, edit the
    referrers, and ultimately delete the key generated.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Note you also have the ability to set up an OAuth 2.0 Client ID, which will
    secure your applications. This is definitely recommended if you'll be dealing
    with sensitive information, which in a way you would be because you will be working
    with user location. However, the setup and use of OAuth is beyond the scope of
    this book, but I recommend that you take some time to learn this new authentication
    method and implement it within your own application once you get a solid foundation
    working with APIs.
  prefs: []
  type: TYPE_NORMAL
- en: With the API key in hand we are now all set to start implementing Geolocation
    with Google Maps. The following section will take what we've learned and use the
    simple methods available to us for putting a Google Map on our page. In this regard
    I hope it sparks your interest into the Google Maps API as it has been developed
    over time and is a great framework to use in almost any application. Now let's
    get started developing some cool stuff.
  prefs: []
  type: TYPE_NORMAL
- en: Geolocation and Google Maps
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If you have been following along from the beginning of this chapter you should
    have a thorough understanding of the Geolocation API and have your Google account
    set up to tap into the Google Maps JavaScript API. If you haven't been following
    along that's okay as well, since this section is primarily driven to show how
    to implement both technologies. This section will prepare our location page within
    our application and then move quickly to implement Geolocation with Google Maps.
  prefs: []
  type: TYPE_NORMAL
- en: Markup preparation
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In the previous chapter, we did some setup work to get our application going;
    we will follow the same setup work here to make sure all our pages are consistent.
    So let''s open up the markup page related to `location` `in` `/location/index.html`
    of the source files accompanying this book. When we have this page open in our
    text editor, let''s make the following updates to the markup:'
  prefs: []
  type: TYPE_NORMAL
- en: Update the navigation to reflect a select menu.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Include the `location.css` file that will have the page specific styling for
    this page.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Remove unused scripts from the bottom of the page.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Include `App.Location.js`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Initialize `App.Location` after the inclusion of `main.js`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Once we have made these updates, your markup should look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Note that comments were added where more markup should exist. The markup that
    pertains to these sections is in the source code provided with the book. Please
    look there for more on what should exist in those sections.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now that we have brought the markup up to the consistent layout of our previous
    pages we are ready to start customizing this application for location awareness.
    The next step in the process is to prepare the markup for the additional functionality
    we''ll build in. To do this, here is what we need to do:'
  prefs: []
  type: TYPE_NORMAL
- en: Include the Google Maps API JavaScript.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Include the `Geolocation` wrapper we'll be building.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Create a `div` that will contain our map.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'When we follow the previous directions, our markup will look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: As you can see, there is not much of a difference. What we have done here is
    include in a new script that includes the Google Maps JavaScript. We then include
    another script named `Geolocation.js`, which will exist in `/js/` and finally
    we create a `div` with an ID of `map_canvas` that exists between the header and
    footer.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Note that you will need to include the API key, which you created in the last
    section, into the Google Maps JavaScript URL string, replacing `YOUR_API_KEY`
    with the key you were provided earlier. Also keep in mind that you must set the
    sensor parameter to either true or false. The sensor parameter tells Google Maps
    that the application uses a sensor, such as a GPS, for the user's location.
  prefs: []
  type: TYPE_NORMAL
- en: Okay, so our markup is now ready. We don't need to do anything else here and
    so now we'll move to the JavaScript, creating our `Geolocation` wrapper first
    and then implementing it into our `App.Location` class. So let's take a look at
    how we can make tapping into Geolocation easier within our applications.
  prefs: []
  type: TYPE_NORMAL
- en: The Geolocation wrapper
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In most cases, we don't want to rewrite the same methods over and over for every
    use case. So we create wrappers that abstract the functionality of certain technologies
    so we can use them easily within our apps. This is what we're going to do now,
    abstract the Geolocation API so we can use it with the Google Maps API.
  prefs: []
  type: TYPE_NORMAL
- en: Let's get started by creating a `Geolocation.js` file inside of our `JavaScript`
    directory. As you may have already noticed this is not going to exist under the
    `App` namespace; this is because it is an abstract class that any application
    might be able to use. For our purpose we'll only want to get the current position
    of the user and we want to be able to use this information across our application,
    so we'll make it global.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is the basic template for our `Geolocation` class:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'This is not different from any of the code we''ve written previously except
    for how we expose this class with the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Instead of returning the `Geolocation` object we basically just initialize
    it and set it to the `window` object, which makes it global. You''ll also notice
    the addition of a closure scoped variable named `_callbacks`, which will contain
    callbacks that the user can override when extending Geolocation functionality.
    Now let''s extend this even further by including default values for retrieving
    the current position, and a general properties object that will hold all returned
    data from the Geolocation API:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'These options will be used when we retrieve the user''s location. As for now,
    let''s leave these as it is, and create a callback that the user can override
    when a success or error occurs with the Geolocation API:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'We''ll see how to implement this shortly, but for now this will be a default
    method that will be used to do callbacks. Next, let''s check if the device/browser
    actually supports the Geolocation API:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'This is a fairly simple check for geolocation support, and essentially we just
    create a property on Geolocation called `geolocation` that will be set to the
    API if it exists. In this way, we don''t have to do `navigator.geolcation` every
    time within the class. Also, it will make it easier to double-check if the geolocation
    functionality exists later on. At this point, we''re ready to expose the `getCurrentPosition`
    method from the Geolocation API:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: The previous method is public and accessible because we have attached it to
    the prototype of Geolocation. This method will accept one parameter, a function
    callback that will be called on success or error of the `getCurrentPosition` call
    on the Geolocation API. This method checks to see if the parameter is not undefined
    and then reassigns based on what was sent in. We then do a check on the `geolocation`
    property we set in the constructor; if it's not undefined we call the `getCurrentPosition`
    method on the Geolocation API and send in the appropriate parameters. We then
    return the instance of our `Geolocation` class. If the `geolocation` property
    is not defined we return a Boolean of false, so error checking could also be done
    at the time the developer uses this method.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Note we are passing two undefined methods `currentPositionSuccess` and `currentPositionError`,
    which will be defined shortly. However, also notice we sent in the default properties
    we defined previously into this method as its third parameter. By doing this we
    give the developer the ability to further customize the experience of Geolocation
    functionality easily. You'll see how easy it will be to customize these values
    when we start developing the `App.Location.js` file.
  prefs: []
  type: TYPE_NORMAL
- en: 'At this point, all that''s left is creating the earlier callbacks. So let''s
    create the following `successCallback`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: The last callback is called, as you may have guessed, when we have successfully
    retrieved the user's location. As defined by the W3C specification, this method
    accepts a single parameter—a `Position` object containing the coordinates and
    timestamp. We expose the returned information using the property `props` defined
    in the constructor. Once all this information is retrieved and set, the callback
    `getCurrentPositionCallback` is invoked and passed the retrieved properties.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Note we are also changing the meaning of `this` inside the callback to be that
    of the instance of Geolocation by passing in `_self` as the first parameter to
    call.
  prefs: []
  type: TYPE_NORMAL
- en: 'Lastly, lets create our error callback:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: This callback, as defined by the W3C specification, accepts one parameter, a
    `PositionError` object that has an error code along with a brief message. However,
    all we have to do is use the callback and pass this information along, similar
    to what was done in the `successCallback`. Except here, all we are doing is passing
    the `PositionError` object so that custom messages can be created outside of this
    wrapper.
  prefs: []
  type: TYPE_NORMAL
- en: And with that, we are done creating a simple wrapper for the Geolocation API.
    We can now easily tap into the API from within `App.Location.js`. So let's move
    on to extending the `App.Location` object and start using the Google Maps API
    with Geolocation.
  prefs: []
  type: TYPE_NORMAL
- en: Geolocation with Google Maps
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'So we''re now ready to start implementing Geolocation with Google Maps using
    `App.Location`. We''ll use the same boilerplate that has been used throughout
    the book to connect our `Geolocation` wrapper with the Google Maps API. To get
    started let''s open up `App.Location.js` provided with the book''s source code.
    When you have this open, it should look similar to the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'There''s nothing new here if you have been following the book in order. But
    as a review, we have declared a new namespace called `Location` under the general
    `App` object. This namespace will contain all the functionality for our location
    page so it''s perfect as a controller between Google Maps and Geolocation functionality.
    So let''s start by caching the map element creating a closure scoped reference
    to the `Location` instance and then initializing it. The constructor should then
    look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: Here we have created a `$cache` property onto the instance of `Location`, this
    `$cache` property will contain the reference to the `map` element and can thus
    be accessed using this property. We then create a closure scoped self variable
    that reference the instance of `Location`. Finally we initialize our code by calling
    the `init` method located on the instance's prototype.
  prefs: []
  type: TYPE_NORMAL
- en: 'The next step in the process is to retrieve the user''s current location using
    our `Geolocation` wrapper. We''ll add this bit of code to the `initialize` method,
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: Here we can finally see the implementation of our `Geolocation` wrapper and
    how easy it is to integrate within our applications since the `Geolocation` class
    has taken care of validating and verifying the setup. The great part about this
    is that our callback actually handles the errors; by checking the object type
    of `PositionError` we are able to continue with the integration of Google Maps
    or logging out the error returned. Of course our way of handling the error should
    be more elaborate for the user, but for this case it helps identify how easy it
    is to go with this approach in our applications.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, let''s take a look at how we can implement Google Maps with a successful
    callback by looking at the `initGoogleMaps` method called earlier:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: There's a lot going on here but, believe it or not, we're pretty much done.
    So let's go through this step by step.
  prefs: []
  type: TYPE_NORMAL
- en: First, we are setting the `latlng` property to a new instance of the `LatLng`
    class that is part of the Google Maps API. This `class` constructor returns an
    object representing a geographic point ([https://developers.google.com/maps/documentation/javascript/reference#LatLng](https://developers.google.com/maps/documentation/javascript/reference#LatLng)).
    Although we already have the coordinates from the Geolocation API, we need to
    make sure that we create a Google Maps instance of `LatLng` because it will be
    used in the following methods.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, before moving on we need to sidestep for a moment. The Google Maps API
    is extremely extensive and customizable, allowing us to customize the look and
    feel of the map in pretty much every area. To explore this a bit more, let''s
    create a `mapOptions` object on the defaults that will customize our map for mobile:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, we won''t jump into this extensively but keep in mind that there are many
    options available to you that can be explored and optimized for our iPhone web
    application. I encourage you to visit the following URL and explore these options
    so that you are familiar with what is available to you:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://developers.google.com/maps/documentation/javascript/reference#MapOptions](https://developers.google.com/maps/documentation/javascript/reference#MapOptions)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s return to the `initGoogleMaps` method that we were describing previously.
    Continuing from the initialization of the `LatLng` class, we now define the center
    property on the `mapOptions` object we just created. This property is set to the
    instance of `LatLng`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'Now that we have defined all the properties we need to create Google Map, we
    initialize the `Map` class part of the Google Maps API:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: This method accepts the `div` element we created and have cached in our JavaScript,
    as its first parameter. The second parameter will be the `options` object we created.
    The reason we set the `center` property on the `mapOptions` object is because
    the initialization of the map would display the user's location. We have now completed
    the implementation of the Geolocation and Google Maps API.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we reviewed the Geolocation specification as defined by the
    W3C. We then used this information to build a wrapper so we could tap into the
    API easily. As a bonus we reviewed the Google Maps API, created an access key
    and then used our Geolocation wrapper to determine the user's location and display
    it to the user. You should now have a good understanding of determining a user's
    location and using it effectively. In the next chapter, we'll get into one-page
    application development, using the concepts we've learned and extending it using
    some additional open source libraries.
  prefs: []
  type: TYPE_NORMAL
