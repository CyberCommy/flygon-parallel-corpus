- en: Building Your Own Website
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The fun part has finally come. We''re going to start implementing our website
    from A to Z. I will explain thoroughly through each step. Here''s the list of
    what is going to be covered in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Installation of HTML Boilerplate
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting up our project with images, fonts, and normalize.css
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating our header and stylising it
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating our hero section and learn about the positioning in CSS
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating our Blog section
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding an about section
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a Partner section
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a footer section
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: First, let's see the design we're going to implement. If you can remember, we
    saw a little preview back in [Chapter 4](e6d6711e-b61a-421f-b883-5a1d4f2da13b.xhtml),
    *Responsive Versus Adaptive Design*.
  prefs: []
  type: TYPE_NORMAL
- en: Our design
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Our home page will contain the following:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Header: We will learn how to create and stylize a navigation section, with
    a logo and a menu on the right-hand side.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A hero Image:  In web design, it describes a front banner image, usually a big
    image.  We'll learn how to create a full-width background image with a big title.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'A preview of the `Blog` with six `blog` posts: We''ll learn how to display
    three responsive columns with images and content.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'An ABOUT US section: We will learn how to add a gradient to an image.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'A PARTNERS section: We will learn how to center content on the page.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'A footer: Basically the same thing as the header, but at the bottom.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You can check the image of the home page in full size in the resources files
    I provided, in `Resources` | `Screens`. There is also the `Sketch` source file
    of the project.
  prefs: []
  type: TYPE_NORMAL
- en: I strongly recommend you to install Sketch or Figma if you're not using one
    of these design tools yet. The Sketch app is commonly used for web design projects
    and can be downloaded at [http://sketchapp.com](http://sketchapp.com). It has
    a free trial period of 14 days. Figma is similar to Sketch and can be used without
    a trial.
  prefs: []
  type: TYPE_NORMAL
- en: 'This is what our design looks like:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/950045cf-145c-433e-8386-f5f70342876b.png)'
  prefs: []
  type: TYPE_IMG
- en: Our home page design
  prefs: []
  type: TYPE_NORMAL
- en: Without further ado, let's get started!
  prefs: []
  type: TYPE_NORMAL
- en: Installing HTML Boilerplate
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We're going to start a fresh, so let's create a new file for this project. What
    I like to do when I start a project is download an HTML Boilerplate. HTML5 Boilerplate
    is a frontend template, created to help you build fast, robust, and adaptable
    web apps or sites. You basically download one package, and it contains all the
    files you need to start a project.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s go to [https://html5boilerplate.com/](https://html5boilerplate.com/)
    to download the latest version of the template:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/bf458b1b-e3c9-418b-9b43-fb32cdfdaee0.png)'
  prefs: []
  type: TYPE_IMG
- en: Click on Download v6.0.1 or higher.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s have a look at what''s inside our package:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/c25985c3-e6d4-42c4-9592-77cd698dd7ab.png)'
  prefs: []
  type: TYPE_IMG
- en: 'There are plenty of files in the folder. What we can see is that it contains
    all the essential files a website needs to work properly:'
  prefs: []
  type: TYPE_NORMAL
- en: '`index.html`: Our home page, the page where the user will land upon going to
    your website'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The `css` folder: A folder for all our CSS files'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The `img` folder: A folder for all our images'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The `js` folder: A folder for all our JS files'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`favicon.ico`: An icon that shows up at the left corner of a tab of a browser
    that indicates to the user that they''re on your website, usually your logo'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`404.html`: An HTML page for users who landed on an incorrect URL'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The rest of the files are not so important for us to understand at the moment;
    we will review them in an upcoming chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Let's rename our folder to make it our own, for example,  `Web Project`.
  prefs: []
  type: TYPE_NORMAL
- en: Editing index.html
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let's now open our folder in Atom; click on Menu | Open… | and select our `Web
    Project` folder.
  prefs: []
  type: TYPE_NORMAL
- en: 'Select `index.html` from the left panel. You can see the HTML document and
    what it contains:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'We''ll now review each part of this HTML file so you understand each part of
    the code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Here you will put the title of our website; for this exercise, let's put `Racing
    Club - Events & Tickets`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: This section is the description of the page, It will be useful for SEO and will
    appear on a search result after the title.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: This will tell the browser how to behave for desktop and mobile view. You can
    leave it as it is.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: We learned in the previous chapter that there are three different ways to use
    CSS in our HTML page. We used the second method in our exercise, but the best
    way to use CSS is to put it into an external file, like so. You can leave it as
    it is.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: This is basically to advise users with Internet Explorer 9 or lower to update
    their internet browser. You don't need to change the code.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: This is our content. We'll edit this part of the HTML to add element and content
    in our HTML page. You can remove the `<p>` element since we don't need it.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following code contains a list of the JavaScript plugins that are linked
    to our page:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'The plugins are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`modernizr`: Detects our user''s browser and changes the website''s behavior
    accordingly.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Jquery`: We will use this framework to create interaction and animation in
    our next chapter.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Plugin.js`: Contains all the other plugins that we will need.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Main.js`: Contains all the JS code we will create.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Google Analytics`: An analytics plugin for analyzing users and to help understand
    how your website is performing. We''ll go through this in [Chapter 10](f2acf30e-85be-47a2-ab01-8b7225eb1b8a.xhtml),
    *Optimizing and Launching Our* *Website.*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let's start editing our web page!
  prefs: []
  type: TYPE_NORMAL
- en: Creating our web page
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that everything is set up, let's get started with putting together our images
    folder and installing our fonts.
  prefs: []
  type: TYPE_NORMAL
- en: Images folder
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: I have prepared a folder with all the images that you'll need to do this exercise.
    Those images can be found in `Resources` | `Image Web project`. You can simply
    copy all the images and assets to the `img` folder in our new project folder.
  prefs: []
  type: TYPE_NORMAL
- en: Installing our font
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If you have a second look at the website, you can see that we're using custom
    fonts, which means that we're not using web *safe* fonts. Web-safe fonts are the
    fonts pre-installed on every device. They appear on all operating systems. This
    collection of fonts is used by Windows, Mac, Google, Linux, Unix, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: 'There may be a few more, but this is a list of the common web-safe fonts:'
  prefs: []
  type: TYPE_NORMAL
- en: Arial
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Helvetica
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Times New Roman
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Courier New
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Courier
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Verdana
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Georgia
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Comic Sans MS
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Trebuchet MS
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Arial Black
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Impact
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Not super appealing; let's be honest.
  prefs: []
  type: TYPE_NORMAL
- en: 'But, with CSS3, we can now add our own custom fonts, by using `@font-face`.
    Let''s see how we can add this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'For this exercise, I have provided a zip file called `fonts.zip` to make it
    easier for you. You can unzip this file and move the folder fonts to our `Web
    Project` folder. Let''s see what''s in this folder:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/1b09f29a-51b1-449f-8c81-deb3334a918d.png)'
  prefs: []
  type: TYPE_IMG
- en: It contains the font files needed and ready to use for the web.
  prefs: []
  type: TYPE_NORMAL
- en: To use a custom font on the web, we need to generate or convert this font to
    a webfont beforehand. You can use the website [fontsquirrel.com](http://fontsquirrel.com)
    to generate web fonts from your own fonts.
  prefs: []
  type: TYPE_NORMAL
- en: 'There is also a CSS file that uses the `@font-face` property:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'So, let''s link this CSS file to our HTML file. And in our `index.html`, let''s
    add the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Great, we have now linked our fonts to our HTML page. Let's now add our second
    font, which is a Google font.
  prefs: []
  type: TYPE_NORMAL
- en: Importing Google Font
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Google, since 2010, has provided a platform for users to discover fonts and
    use them freely. There are over 800 font families available through Google Font's
    main website, and we'll use one of them in this exercise.
  prefs: []
  type: TYPE_NORMAL
- en: 'Google made it very easy to import a font. The following are the steps to incorporate
    a font on our website:'
  prefs: []
  type: TYPE_NORMAL
- en: Go to the Google Font website ([https://fonts.google.com/](https://fonts.google.com/)).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Search for our font, Roboto, and click on the corresponding font ([https://fonts.google.com/specimen/Roboto](https://fonts.google.com/specimen/Roboto)).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on SELECT THIS FONT.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the little popup at the bottom and switch to the CUSTOMIZE tab.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We want to have regular and bold.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Switch back to the EMBED tab and copy the code displayed:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Copy and paste this code just before our previous CSS link:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: You have now your Google Font installed!
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, to use our Google Font, simply paste the CSS property on the element we
    want to stylize:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Let's go to our CSS file, located in `css` | `main.css`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Find the section with the following comment:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'Here, write:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: This will apply the font-family property to the `<body>` element, which is the
    main element of our HTML page, so it will be applied to all elements inside `<body>`.
  prefs: []
  type: TYPE_NORMAL
- en: Adding normalize.css
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You probably noticed another `css` file when looking for the `main.css`. What
    is `normalize.css` and why should we integrate this with our HTML?
  prefs: []
  type: TYPE_NORMAL
- en: As we saw earlier, every browser does not render the same. With `normalize.css`,
    all browsers will render elements more consistently and in line with modern standards.
    We simply need to add it to our other `css` files and it will do the job. Cool,
    isn't it?
  prefs: []
  type: TYPE_NORMAL
- en: The header
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let's start implementing our header. Best practice is to first do the HTML and
    then finish with the CSS. Let's have a look at our design first.
  prefs: []
  type: TYPE_NORMAL
- en: As you can see, our header has a transparent background, with a logo and main
    menu on the left-hand side, and a secondary menu on the right-hand side.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, create a `<header>` tag in our HTML document:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: Creating a menu
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To create our menu, we need to create a list. In HTML, to create a list you
    have to use the tag `<ul>`.
  prefs: []
  type: TYPE_NORMAL
- en: '`<ul>` stands for unordered list; it needs to have a list tag inside `<li>`.
    You can use it as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'Our list should end up looking like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: Inserting links
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To make the menu work, we need to add links to our list; otherwise, it will
    go nowhere. To add a link, you have to use the tag `<a>`. To make each `<li>`
    element clickable as a link, we need to add the `<a>` tag inside the `<li>` tag,
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'Now we need to specify where the link goes. For that, we need to add the attribute
    `href`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: If the `href` attribute is not present, the `<a>` tag won't act as a hyperlink.
    The value of `href` can be an absolute link to another website or a relative link
    to a file on the same domain. It's basically the same behavior as the `src` attribute
    we saw earlier.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the end, our menu should look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'Lastly, let''s add a class to our `<ul>` tag so we can specify the style later
    on with `css`, like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: Adding a logo
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In addition to our navigation, we also have a logo on the left-hand side. I
    have provided some assets you can use for this exercise in the `Resources` folder
    (`Exercise 2` | `Assets`).
  prefs: []
  type: TYPE_NORMAL
- en: Simply copy and paste the `logo.png` and `logo@2x.png` files into your `img`
    folder on your `Web Project`.
  prefs: []
  type: TYPE_NORMAL
- en: '`logo@2x.png` is simply the retina version of the image, which means it has
    double the pixel density of the normal image. It''s a good practice to name your
    retina image with the suffix `@2x`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Now we''ll simply add an image before our menu, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'Perhaps you have noticed that we only put `logo.png` and there is no use of
    the `logo@2x.png`. To be able to use our retina version image only on retina devices,
    we''ll have to use the attribute `srcset`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: '`srcset` attribute is pretty simple to use. For each asset, add the density
    at the end to specify which screen density it should be used. In this example,
    we''ll put `img/logo@2x.png 2x`. You can also specify at which screen width it
    should appear, but let''s keep it simple for this example.'
  prefs: []
  type: TYPE_NORMAL
- en: 'One web design good practice is to make the logo link to the homepage. To do
    so, we need to put the `img` tag inside a tag:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'To make sure the link is landing on the website''s homepage, we need to change
    the `href` attribute `"#"` to `"/"` so it will go to the root of the folder:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'Lastly, let''s put a class `"logo"` so we can target this element later:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: Right-hand side menu
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The last part of the menu is the right-hand side menu with the `Login` and
    `Facebook` like buttons. There are many ways to do it, but I suggest using another
    list such as the previous one we created:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: We'll add the class `"right-nav"` and add 2 `<li>`, as shown in the preceding
    code.
  prefs: []
  type: TYPE_NORMAL
- en: Adding a Facebook like button
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To add the `Facebook` like button, we first need to create the button. To do
    so, we need to go to the Facebook Developer''s website to get the information.
    I have the link handy for you: [https://developers.facebook.com/docs/plugins/like-button](https://developers.facebook.com/docs/plugins/like-button%23).
    On this page, you''ll find the means to customize your button, as shown in the
    following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/bf44dc43-7b50-49ae-8c75-14fcbda4b6ea.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Once done, click on Get Code and select the tab IFrame:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/9005f3a1-a6a7-420d-a54b-3a472259ee62.png)'
  prefs: []
  type: TYPE_IMG
- en: We can copy this piece of code into our website in our second `<li>` tag.
  prefs: []
  type: TYPE_NORMAL
- en: 'We''re going to customize the button a bit; change the default value of the
    attribute height to `20px`. You should end up with code like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: We have now our menu in HTML; let's add some styling with CSS to make it look
    better.
  prefs: []
  type: TYPE_NORMAL
- en: Styling our header
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: At the moment, our header is looking very boring. But, no worries, we'll add
    some magic with CSS and make it prettier.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/fe352669-a5d5-460c-b020-77d9cc704624.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We saw earlier that CSS can be written in three different ways:'
  prefs: []
  type: TYPE_NORMAL
- en: Inside an HTML Tag with a `style` attribute
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Inside our `<head>` section in a HTML document with the tag `<style>`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: CSS code can also be put into an external file
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For our own project, we're going to use the third way, as commonly used in the
    web in general, because the CSS can be changed without changing the HTML file.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s create our CSS file that will be used for our general styling. In Atom,
    click File | New File, and save the file with File | Save As. Choose the folder
    `css` and name this file `styles.css`. We have to link this file as we did with
    the `font.css` file we created earlier:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'Now that we have our `styles.css`, we can get started. But I usually like to
    view both HTML and CSS at the same time. It''s easy to do so; select your `styles.css`,
    then go to View | Panes | Split Right. You now have the file open on two different
    panes. You can close the one on the left:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/1d1d2304-cd7a-4047-915c-146f2ebf62fd.png)'
  prefs: []
  type: TYPE_IMG
- en: The view split in two in Atom.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we need to target the `header` tag. The `header` tag has no class, but
    we can target an HTML tag with just this tag. In CSS it will be:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'This will basically target every `<header>` tag in the HTML, so you need to
    be careful about it:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/39e89a00-64cf-4ca0-9a81-7ef5df63d514.png)'
  prefs: []
  type: TYPE_IMG
- en: If we take a look closely at our design, we can notice that the header takes
    the full width of the web page, has a height of *70px*, and has a gradient grey
    to a transparent background that lets the image appear behind it.
  prefs: []
  type: TYPE_NORMAL
- en: 'To do so we have the CSS property `width`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'We can now add the background gradient. For that, we have the CSS property
    `background-image: linear-gradient`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: To create a gradient with CSS, I often use a generator ([http://www.colorzilla.com/gradient-editor/](http://www.colorzilla.com/gradient-editor/))
    that creates the final code for me.
  prefs: []
  type: TYPE_NORMAL
- en: I also sometimes use the CSS tool provided by Sketch or Photoshop to copy the
    CSS property straight from the design.
  prefs: []
  type: TYPE_NORMAL
- en: 'For this exercise, you can just copy the code I provided:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: 'Save both CSS and HTML files and open `index.html` on your browser:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/02519181-8ff7-4219-b23f-6b7046aff2c6.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We now have our container, but we still need to stylize our menu. Let''s first
    target our list by its class, `main-nav`. If you remember, to call a class, we
    need to add a dot before the name of the class, like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: 'Now we want to specifically target every `<li>` inside the `<ul>`. To do so,
    we simply have to add `li` after, as we saw in the chapter earlier:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s first remove the list styling, which is a circle by default. To do that,
    we need to use the CSS property `list-style-type`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: Let's put `none`, so it will remove all styling in the `li` tag.
  prefs: []
  type: TYPE_NORMAL
- en: 'We also have to display the list horizontally instead of vertically. To make
    this happen, we need to use the CSS property `display: inline-block`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The CSS property `display: inline-block` will display the list as inline but
    with the ability to set width and height as a block element:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s save our work and check to see what we have so far:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/1156431d-ae9c-4916-93d2-51a192fe0ed0.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Our goal now is to put the menu right next to the logo. For that, we''ll need
    to make the logo float. As we saw earlier in the CSS chapter, we''ll use the CSS
    property `float: left;` on the logo:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: 'We now need to display the menu correctly. We''ll first add a height to our
    `main-nav` :'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: 'We also need to make the menu float so the right-hand menu can come on top:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: 'Since all `<ul>` tags have some padding and margin by default, we need to overwrite
    that:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: '![](img/f0a6ea9d-540d-4224-bcea-f678c3f80d5d.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The problem is that we have the menu side by side with the logo, so we need
    to add some padding to the menu:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: 'But now we have two properties that are overlapping since padding includes
    all paddings such as padding-left. This will still work but it''s bad CSS. To
    write it properly, we can combine and modify the paddings with just one CSS property:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/8e3fbf8f-74db-4d02-be1f-90061813f75a.png)'
  prefs: []
  type: TYPE_IMG
- en: This image explains how you can change different paddings with just one property.
  prefs: []
  type: TYPE_NORMAL
- en: 'For our exercise, we will do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: 'Our next goal is to make our menu vertically aligned with the logo. To do so,
    we can use a little CSS hack by using line-height, which is used normally to change
    the space between lines on a paragraph. By setting the `line-height` to the height
    of the menu, we''ll make the menu vertically aligned:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: 'Now let''s customize the font to the one we installed earlier. Let me show
    you the final CSS so that I can explain line by line what, exactly, it means:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: 'First we need to target the `<a>` tag in our `.main-nav` class. Inside our
    bracket, we''ll have the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '`color: white;` will specify the color of the text. You can set this color
    with a HEX code or with the 140 native color CSS support ([https://www.w3schools.com/cssref/css_colors.asp](https://www.w3schools.com/cssref/css_colors.asp)).'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`text-decoration: none;` will suppress all decoration on the text. Here we
    want to suppress the underline on every link.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`font-family: ''built_titling'', Helvetica, sans-serif;` is to specify the
    font we want to display. The following font name will serve if the first one couldn''t
    load.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`font-weight: 200;` is the level of bold of the font.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`font-size: 20px;` will be the size of the font in pixels.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`letter-spacing:` will indicate the spacing between each character.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`padding:` it''s inside-padding as we learned earlier.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'We''re almost done. Let''s save and have a look:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/02519181-8ff7-4219-b23f-6b7046aff2c6.png)'
  prefs: []
  type: TYPE_IMG
- en: We have only the right-hand part to finish, let's get this done!
  prefs: []
  type: TYPE_NORMAL
- en: 'For this part, we''ll need to make it float on the right. Let''s first target
    this class:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: 'This right nav will follow almost the same properties as the left nav; we''ll
    only change the float to right:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: As you will see, we'll use a lot of copy/paste for coding as a lot of elements
    will use the same properties.
  prefs: []
  type: TYPE_NORMAL
- en: But what if we have a lot of selectors that use the same CSS properties? Do
    we have to copy/paste all of them? A good practice in coding is always to simplify
    our code so that it takes less time to load.
  prefs: []
  type: TYPE_NORMAL
- en: 'In CSS, we can call on multiple selectors and put the same CC properties. To
    do so, we need to separate them with a comma `,`. For our `left-nav` and `right-nav`
    for example, we can do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: 'This will have the same effect as the code we wrote before. And because we
    call `.right-nav` and put the property `float: right;` after, it overwrites the
    previous property, which was `float: left;`. This is a good practice to have when
    coding in CSS.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s make the rest of the code with this good practice in mind:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: 'We now have our header. Let''s save it and have a final look:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/1ac77da7-5344-4f43-ae36-20f144fc0bcd.png)'
  prefs: []
  type: TYPE_IMG
- en: Fantastic! Lastly, to make our code clean and easy to read, I'll advise putting
    some comments at the beginning and at the end of each section of your code.
  prefs: []
  type: TYPE_NORMAL
- en: 'This will be the final CSS code for our `HEADER` section:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: Adding the hero section
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: After implementing our header, we can now go the next step, which is the hero
    Section. The hero section is, in web design, usually composed with a big image,
    a title, a description, and a **Call to Action** (**CTA**). It serves as an overview
    of the website because it's the first thing the visitor will see.
  prefs: []
  type: TYPE_NORMAL
- en: 'In our design, we have the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/e6c90e0c-69d4-40a2-9121-0600b314cb60.png)'
  prefs: []
  type: TYPE_IMG
- en: 'It''s quite simple. It''s composed of a background image, with a gradient overlay
    and some text with a button on the left. If we try to mark out the outline of
    each block, we could have something like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/7f2a1d36-1804-40bc-9f62-55a221471807.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Maybe this can help you visualize what we''re trying to do in HTML/CSS. Let''s
    start with the HTML:'
  prefs: []
  type: TYPE_NORMAL
- en: 'We can start first by creating a section (purple) that will hold everything:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: We'll add an `id` so it's easier to call upon it later.
  prefs: []
  type: TYPE_NORMAL
- en: 'We now have to create a `container` (fuschia) that will contain all the elements
    inside but also be centered horizontally. For that, we''ll create a `div` with
    the class `container`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: 'Inside we''ll have a block that will contain the title, description, and button,
    which will be left aligned. We can call it `"hero-text"`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, let''s add the content inside:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: 'As you might have seen, we didn''t add the image in the HTML, because we want
    to add it with CSS. Adding images with CSS allows more flexibility and customization.
    In this case, we want to make it full screen and to cover the background. First,
    let''s call our `#hero` div:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s add the following styling:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: 'Here are some explanations:'
  prefs: []
  type: TYPE_NORMAL
- en: We first need to set the size of the block. As we want it to be full screen,
    we have to make the width 100 percent and the height 700px, as the dimension is
    the design.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: With CSS5, we have the ability to add multiple backgrounds. For that, we need
    to separate them with a comma, as shown previously.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We use `background-repeat` to make the background not repeat indefinitely as
    per default.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`background-size: cover;` will make the background image stretch following
    the size of the block, here the full screen.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`background-position: center;` will always put the background in the center,
    even when resizing.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Let''s save our files and see what we get:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/f5fc3b00-ff4e-4029-bab8-03450731a6e8.png)'
  prefs: []
  type: TYPE_IMG
- en: We have our image and gradient; let's now move into our content.
  prefs: []
  type: TYPE_NORMAL
- en: 'As we said earlier, we need our content to be centered. As you may have spotted,
    our design follows a grid:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/8c7e7e11-1dc3-4940-a58a-06c2674cb445.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We need to create this container, which has a width of 940px and is centered
    horizontally. For that it''s very simple, all we''ll need to do is:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs: []
  type: TYPE_PRE
- en: 'Here are some notes:'
  prefs: []
  type: TYPE_NORMAL
- en: '`max-width: 940px:`: we don''t want the container to be more than `940px`,
    but it can be less than that depending on screen size.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`margin: 0 auto;` is a simple way to horizontally center a block element.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The next step will be to stylise the content. But, first, we need to analyze
    the design before jumping into the code. When looking at the design, we can see
    that:'
  prefs: []
  type: TYPE_NORMAL
- en: The hero content needs to be vertically centered from the hero section
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The hero content needs to be aligned on the left and have a width of 50 percent
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: CSS flexbox
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To make that happen, we''ll use the new CSS property `display: flex`. CSS flexbox
    is very practical because it allows you to position element very easily. Centering,
    ordering, and aligning is made very easy with flexbox. If you can handle this
    new property, I guarantee you''ll be a killer in CSS.'
  prefs: []
  type: TYPE_NORMAL
- en: 'In our case, we want our `.container` to be centered vertically. To do that,
    we''ll target the class and add these properties:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs: []
  type: TYPE_PRE
- en: 'By adding `#hero` before `.container`, we''re targeting only elements with
    the class `.container` inside `#hero`. We don''t want all `.container` to have
    the same properties:'
  prefs: []
  type: TYPE_NORMAL
- en: '`display: flex;` has to be set on the parent element.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`align-items: center;` will vertically align and center all elements inside
    this element. Magic!'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The `height` needs to be set so you can align the elements in the middle.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: CSS flexbox has very powerful properties. We could have done the entire website
    with flexbox properties, but for you to learn all the possibilities, we had to
    go through all the steps.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s continue with our text styling:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs: []
  type: TYPE_PRE
- en: 'We set this width because we don''t want the text to go all the way to the
    right, so we set the max-width to half of the `.container` ''s `max-width`. Continue
    to follow our design:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, we have our title:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs: []
  type: TYPE_PRE
- en: 'Lastly, we have our button:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE63]'
  prefs: []
  type: TYPE_PRE
- en: 'We use `display: inline-block;` so we can use the button as an inline element
    but with the characteristic of a block element (width and height). `border` and
    `outline` are set to `none` by default. Every button has a `border` and `outline`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s see what we have:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/f1a91dad-7393-4be9-91a8-3edca345130b.png)'
  prefs: []
  type: TYPE_IMG
- en: The website is looking great, but we have some annoying margins at the top.
    To fix this, we need to use the CSS property `"position"`.
  prefs: []
  type: TYPE_NORMAL
- en: Positioning in CSS
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In CSS, there are five different position values:'
  prefs: []
  type: TYPE_NORMAL
- en: Static
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Relative
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixed
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Absolute
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Sticky
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Position static
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: They all have different usages. All HTML elements are positioned static by default.
  prefs: []
  type: TYPE_NORMAL
- en: Position relative
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: An element with the position relative is positioned relatively to its normal
    position. You adjust the positioning by changing its left, top, right, or bottom
    position.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE64]'
  prefs: []
  type: TYPE_PRE
- en: 'Check the following diagram for better understanding:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/b852641e-891e-4059-9f3a-d24f9c0bdd94.png)'
  prefs: []
  type: TYPE_IMG
- en: Position absolute
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: An element with the position absolute will be positioned next to its nearest
    positioned parent, which means any element with a position that expects position
    static. If this element has no parent, it will be positioned to the viewport itself.
  prefs: []
  type: TYPE_NORMAL
- en: A positioned absolute element will be placed over the parent element.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/3f0a049e-1171-4be2-8eee-9ee152b22e6d.png)'
  prefs: []
  type: TYPE_IMG
- en: Position fixed
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'An element with the position fixed will act as a position absolute but only
    with the viewport itself. It will stay in the same position even if the page is
    scrolled:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/8e21ca28-321e-4146-bffc-735c2f73e563.png)'
  prefs: []
  type: TYPE_IMG
- en: Position sticky
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: An element with the position sticky is positioned based on the user's scroll
    position.
  prefs: []
  type: TYPE_NORMAL
- en: It's not fully supported in every browser, however, so we will not use it in
    this exercise.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we understand the usage of a position in CSS, we need to make the header
    superimposed on to the hero section. To do that, we need to make the header position
    absolute. As the header has no parent element, it will be positioned on the viewport
    itself.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s go back to the header section and add the position: absolute property:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE65]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s save and see what we have:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/5887efb0-00d0-4303-9696-aba69f8e6807.png)'
  prefs: []
  type: TYPE_IMG
- en: We have now our first section and header well implemented. Let's continue to
    the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Blog section
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'First, as we always do (and you need to get into this habit), we need to analyze
    the design and see how is it composed:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/d7b7385e-9f60-4fe8-88ff-66f9d87d9628.png)'
  prefs: []
  type: TYPE_IMG
- en: As we can see, the Blog section is composed of a header and six Blog posts.
    There are two rows of three posts each, with an equal width of one-third.
  prefs: []
  type: TYPE_NORMAL
- en: 'We know how to design this with a `float` and the `display: inline-block` properties.
    Let''s try to build it with CSS flexbox.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s first add the HTML:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE66]'
  prefs: []
  type: TYPE_PRE
- en: 'Here are some explanations:'
  prefs: []
  type: TYPE_NORMAL
- en: We need to create another `section id "blog"`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We need to reuse the class `container` to have a container that follows the
    same width
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We add an `<h2>` since it's not as important as the hero title
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We add a `<b>` tag to make the word Blog bold
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Let''s add our `blog` posts section now:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE67]'
  prefs: []
  type: TYPE_PRE
- en: 'Here is what we did:'
  prefs: []
  type: TYPE_NORMAL
- en: We added a `div` with the class `"blog-posts"` that contains all the Blog posts.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Inside, we create a div with the class `"blog-post"`, which will be a single
    blog post.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Inside this `div`, we added the image with the `img` tag and `srcset` we learned
    earlier.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We also added a p tag with a class `"blog-post-date"` for the Blog post date.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We added a `<h3>` without class because it's the only `h3` element, so we can
    target it easily with CSS.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Lastly, we added the `description` text with a link inside.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: This represents a single Blog post, so to make six of them, we simply need to
    duplicate the `blog` post element six times.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s also add another `div` to make our Show More button:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE68]'
  prefs: []
  type: TYPE_PRE
- en: 'In the end, you should have something like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE69]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s head to the CSS now! We will style the title first:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE70]'
  prefs: []
  type: TYPE_PRE
- en: 'For the `blog-posts` container, we''ll do as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE71]'
  prefs: []
  type: TYPE_PRE
- en: '`.blog-posts` is the parent element and `.blog-post` is the child element.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is some information regarding `.blog-posts`:'
  prefs: []
  type: TYPE_NORMAL
- en: '`display: flex;` always needs to be added to the parent element.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`flex-direction: row;` will direct the child elements as a row. You can put
    it as a column if you want.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`flex-wrap: wrap;` will make the child elements wrap onto multiple lines, from
    top to bottom. By default, it will try to fit every element on to one line.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`margin-top: 50px;` adds a bit of margin on the top.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Here is some information regarding `.blog-post`:'
  prefs: []
  type: TYPE_NORMAL
- en: '`width: 33.33%;` sets the width as one-third of the total width'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`padding: 0 5px;` adds some padding on the right and left sides'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`box-sizing: border-box;`: as we saw earlier, this makes the padding and margin
    properties apply inside the box instead of outside'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'So far, we have the right layout:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/3db24515-d18f-4681-9653-3abe48a7f65c.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Let''s style the content inside a Blog post:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE72]'
  prefs: []
  type: TYPE_PRE
- en: 'We use `width: 100%;` as we want our images to take `100%` of the `width`.
    The rest is pretty basic CSS, just to follow the design:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE73]'
  prefs: []
  type: TYPE_PRE
- en: 'Here''s what we end up with:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/a1977518-badb-4ddc-bda9-d4834385a659.png)'
  prefs: []
  type: TYPE_IMG
- en: 'It''s looking quite similar to me now. The last part is the Show More button.
    A simple hack would be to add a `text-align: center` to the parent element so
    it will make the button aligned in the middle:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE74]'
  prefs: []
  type: TYPE_PRE
- en: 'For the last touch, I''ll add some margins at the bottom to add a bit of white
    space:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE75]'
  prefs: []
  type: TYPE_PRE
- en: 'Our CSS for the `blog` section:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE76]'
  prefs: []
  type: TYPE_PRE
- en: Creating the ABOUT US section
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This section is not very complex. Let''s check out the design:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/590a2346-7a37-48e2-9527-1231bbdbe7d1.png)'
  prefs: []
  type: TYPE_IMG
- en: 'If we use our block analyzer, we can have something such as this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/c9cc4042-4633-4ec2-8229-6d62a1f3fe41.png)'
  prefs: []
  type: TYPE_IMG
- en: 'What we need to do:'
  prefs: []
  type: TYPE_NORMAL
- en: Make the content vertically centered
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Align the text on the left
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Have a background image covering the entire section
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The best way to align elements vertically is, as we saw earlier, to use CSS
    flexbox.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s create our HTML. After our `blog` section, we''re going to add our `about-us`
    section:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE77]'
  prefs: []
  type: TYPE_PRE
- en: 'Inside this section, as usual, we''re going to add our `container`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE78]'
  prefs: []
  type: TYPE_PRE
- en: 'And inside our container, we''ll create our two blocks that will contain our
    big title and our description:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE79]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s save and jump into our CSS file:'
  prefs: []
  type: TYPE_NORMAL
- en: 'First, target our about section ID:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE80]'
  prefs: []
  type: TYPE_PRE
- en: 'Add the background image for our section:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE81]'
  prefs: []
  type: TYPE_PRE
- en: We use the same CSS properties that we used previously in our hero section.
    Some padding is added, to remain similar to the design. We set the color at the
    parent level so we don't have to set the color in each child element.
  prefs: []
  type: TYPE_NORMAL
- en: 'Set flexbox in the `container`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE82]'
  prefs: []
  type: TYPE_PRE
- en: '`align-items: top;` will align the text from the `top`, as in the design.'
  prefs: []
  type: TYPE_NORMAL
- en: 'We now have to set the `width` of the block inside the container; otherwise,
    the flexbox will not work:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE83]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s save and check the design:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/4fbee7a3-9aa9-4eb7-905e-af77a48b2a09.png)'
  prefs: []
  type: TYPE_IMG
- en: So far, so good; we're heading the right way. Let's add some styles for our
    title and description.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add styling to our heading:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE84]'
  prefs: []
  type: TYPE_PRE
- en: '`margin: 0` had to be added by default, as every `h` title has a margin following
    the size of the text. Let''s check again:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/40546356-f808-41e7-9ec9-e100554383f0.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We''re pretty close, but we still need to be more precise in our implementation:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/89732d20-6250-465c-919e-bc09d4db7cf7.png)'
  prefs: []
  type: TYPE_IMG
- en: We can see in our design that we have a few line breaks and a red line at the
    bottom of the title.
  prefs: []
  type: TYPE_NORMAL
- en: 'To do that, we''ll need to add some break lines with HTML. To add a break line
    with HTML, we can use the tag `<br />` in any text block. So in our title, we''ll
    add a `<br />` tag after `The` and `love`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE85]'
  prefs: []
  type: TYPE_PRE
- en: Now, to add the red line, we can create a `<div>` and customize it to be the
    shape and colors we want. But it will add something useless in the HTML.
  prefs: []
  type: TYPE_NORMAL
- en: 'A better way to do it is to use the `::before/:: after` selector in CSS. This
    selector can add some text before or after an HTML element.'
  prefs: []
  type: TYPE_NORMAL
- en: It's primarily used to add extra text after a paragraph, but we'll use it to
    add this red line.
  prefs: []
  type: TYPE_NORMAL
- en: 'To do so, we have to select the `h3` element and add `::after`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE86]'
  prefs: []
  type: TYPE_PRE
- en: 'For every `::after` or `::before` selection, we need to add the CSS property
    `content`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE87]'
  prefs: []
  type: TYPE_PRE
- en: 'We''ll leave the value blank as we don''t want any text. Continue:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE88]'
  prefs: []
  type: TYPE_PRE
- en: 'What we did:'
  prefs: []
  type: TYPE_NORMAL
- en: We set the `display` as `block` as it's inline by default
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We added the red background and the dimension
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We added a margin to have some space between the text and the red line
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'We''re almost set. We have a final touch to add to the title of our description:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE89]'
  prefs: []
  type: TYPE_PRE
- en: '![](img/c33e957c-a5da-4558-bf22-394ca63ceaef.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The final CSS code for the `ABOUT US` section is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE90]'
  prefs: []
  type: TYPE_PRE
- en: Adding the Partner section
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let's go through this section efficiently, as we did with the last one.
  prefs: []
  type: TYPE_NORMAL
- en: 'Look at the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/ddb03355-ba38-4afb-9fb4-328fa7f85701.png)'
  prefs: []
  type: TYPE_IMG
- en: This section contains only a title, two images, text, and a button. We'll need
    to create a block inside our usual container (as shown in orange).
  prefs: []
  type: TYPE_NORMAL
- en: 'HTML:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE91]'
  prefs: []
  type: TYPE_PRE
- en: 'Start with our `section` tag and `id`, which we name `partners`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE92]'
  prefs: []
  type: TYPE_PRE
- en: 'As usual, we''ll need our div `"container"` to maintain our structure:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE93]'
  prefs: []
  type: TYPE_PRE
- en: 'Inside, we create another container, `"partners-container"`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE94]'
  prefs: []
  type: TYPE_PRE
- en: 'Inside our `"partners-container"` `div` we do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: We put our title into an `h2`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We also created another div `"partners-inner"` to hold our two partners images
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Inside this `partner-inners div`, we have our single partner `div` with an image
    and a text each
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We also added a button, outside of `partners-inner` but inside `"partners-container"`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Our CSS will look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE95]'
  prefs: []
  type: TYPE_PRE
- en: 'Here are some explanation of the code:'
  prefs: []
  type: TYPE_NORMAL
- en: The background is `black;` since in the design, we have a black background
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We can put the `color:white;` in the parent element so all elements inside will
    have the same property
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We can do the same for `text-align:center;`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We also added some padding to the top and bottom
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE96]'
  prefs: []
  type: TYPE_PRE
- en: 'We added a `max-width` and `margin: 0 auto;` to center our `partners-container`.
    To align anything with the `margin: auto` method, you always need to define a
    width to the element:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE97]'
  prefs: []
  type: TYPE_PRE
- en: 'Also, add the following CSS:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE98]'
  prefs: []
  type: TYPE_PRE
- en: To be able to use `display:flex;`, we'll need to set the `width` for the child
    elements.
  prefs: []
  type: TYPE_NORMAL
- en: 'You''re done for the PARTNERS section; let''s save it and take a look:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/6c92deaa-26fe-4ed7-bad4-31f10c32850f.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Our final CSS code for the PARTNERS section is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE99]'
  prefs: []
  type: TYPE_PRE
- en: All done! Let's move to the final step, the footer!
  prefs: []
  type: TYPE_NORMAL
- en: Adding the footer section
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we will be working on the footer section.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/2de61400-8d29-459c-875c-1dd4f8879cf3.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The footer is basically the same as the header, so to facilitate the coding,
    we will simply copy and paste the code from our header and change a few things:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE100]'
  prefs: []
  type: TYPE_PRE
- en: 'Here are the things that we need to change:'
  prefs: []
  type: TYPE_NORMAL
- en: Change the `<header>` tag to a `<footer>` tag
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Add a `.container` `div` inside our footer as it follows the grid
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Change our logo image to `"logo-footer.png"`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'This is the final HTML:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE101]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s jump to the CSS. We''re first going to target our `footer`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE102]'
  prefs: []
  type: TYPE_PRE
- en: We're calling the `footer` without any dot or `#` because we're calling the
    tag by itself. It also means that every other `footer` tag will be selected. So,
    we need to make sure that we'll only select the tag `footer` for the `footer`
    element.
  prefs: []
  type: TYPE_NORMAL
- en: We add a background black like it is in the design but also add a `color:white`
    at the parent level. We're lazy, we don't want to add every time.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE103]'
  prefs: []
  type: TYPE_PRE
- en: This is getting interesting; we now have targeted the `.container` inside the
    `footer` and changed its property to `flex`, so we can display those elements
    inline.
  prefs: []
  type: TYPE_NORMAL
- en: We're not going to specify the width for each child element because we want
    them to take as much space as they would naturally take.
  prefs: []
  type: TYPE_NORMAL
- en: 'For the final touch, we''ll add some padding to the logo to align it with the
    menu:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE104]'
  prefs: []
  type: TYPE_PRE
- en: 'We also took some styling from the `header` and copied it here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/d49c8bbc-ac34-49c2-8bb0-5092d4b47df9.png)'
  prefs: []
  type: TYPE_IMG
- en: We have our footer done now!
  prefs: []
  type: TYPE_NORMAL
- en: 'Here''s the final CSS code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE105]'
  prefs: []
  type: TYPE_PRE
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To summarize what we've done so far: We've created one web page from scratch
    also used HTML Boilerplate to kick-start our project. We've learned plenty of
    CSS techniques, and in particular about CSS flexbox, which can be very useful
  prefs: []
  type: TYPE_NORMAL
- en: For the next chapter, we'll tackle the responsive side of the CSS and also add
    some interactivity to our website. Let's jump into it!
  prefs: []
  type: TYPE_NORMAL
