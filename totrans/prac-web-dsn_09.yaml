- en: Adding Interaction and Dynamic Content
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: I find this part of building a website to be the most fun and enjoyable. Adding
    interaction and dynamic content will bring life to our website and add a personal
    touch to it.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will:'
  prefs: []
  type: TYPE_NORMAL
- en: Start by learning the basics of **pseudo-class** in CSS, with a few examples
    of hover and active states
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Learn how to create a CSS animation from scratch
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Add some dynamic content by connecting to an API and importing some content
    to display on our website
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let's get started!
  prefs: []
  type: TYPE_NORMAL
- en: CSS pseudo-classes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A pseudo-class is used to define a special state of an element. For example,
    when you hover or when you click on a button, a state can be activated.
  prefs: []
  type: TYPE_NORMAL
- en: 'We''re going to learn two easy pseudo-classes for the moment, the most common
    ones. You can easily add and activate other pseudo-classes when you know how to
    use them:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/86da0197-77e2-406d-9e26-e0d8fed74f45.png)'
  prefs: []
  type: TYPE_IMG
- en: Different pseudo-classes
  prefs: []
  type: TYPE_NORMAL
- en: The two pseudo-classes are `hover` and `active`. The `hover` state is used when
    you hover over an element with the mouse. It's useful to show that the element
    is clickable. The `active` state, on the other hand, is used when you click on
    an element.
  prefs: []
  type: TYPE_NORMAL
- en: 'To use these pseudo-classes, you simply have to call them with a colon `:`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: For the first example, we'll add some styling when hovering over the links in
    the menu. We want to add an underline to the link when hovering it. To do that,
    it will be better for us to be able to target every single `<a>` with a class.
    But if we look at our HTML, we have many different classes for each navigation.
    What we'll do is add a common class to each `nav` so we can call it with CSS easily.
  prefs: []
  type: TYPE_NORMAL
- en: 'We have the class `.main-nav` and `.right-nav` on the header and footer. What
    we''ll do is add a common class `.nav` to each of those classes:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, we have to target the link inside the `nav`. The link is the element `<a>`
    as we saw earlier. To target it, we will call in CSS as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: This will target every `<a>` in every `<li>` that is a child of every `.nav`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s add the pseudo-class `:hover `:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'To add an underline under a link, we can use the CSS property `text-decoration:underline;`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Now let's add some styling for the button as well.
  prefs: []
  type: TYPE_NORMAL
- en: 'For every button, we have the class `.btn-primary`, so, with the same process
    as before, we''ll add the pseudo-class `hover`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'What we did here is to change the background color of the button when hovering
    over it. Let''s now add an `active` state:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: This will add an inner-shadow to the button when clicking on it.
  prefs: []
  type: TYPE_NORMAL
- en: 'To add an extra touch, we can add a `transition` to make the action smoother.
    Don''t forget, a `transition` has to be added in the normal state, not on the
    pseudo-classes:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Voila! Pretty easy. There are plenty of pseudo-classes in CSS. We'll go through
    some more but you can already have a play around. Here's a list of pseudo-classes
    in CSS: [https://www.w3schools.com/css/css_pseudo_classes.asp](https://www.w3schools.com/css/css_pseudo_classes.asp).
  prefs: []
  type: TYPE_NORMAL
- en: The next step is to build a sticky navigation! We'll combine some jQuery and
    CSS and build a navigation that sticks to the top when the user scrolls the page.
    Exciting times!
  prefs: []
  type: TYPE_NORMAL
- en: Sticky navigation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'What we want to do is make the navigation stick to the top when we scroll passed
    the Blog section, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/b28f0318-d69f-4438-a1a8-666bd83e7478.png)'
  prefs: []
  type: TYPE_IMG
- en: The sticky navigation we want to build.
  prefs: []
  type: TYPE_NORMAL
- en: 'To make this happen, we''ll add an extra class with jQuery on the header. This
    extra class will make the navigation stick to the top and make the navigation
    background dark. Let''s first create this extra class:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: We need to be careful here as we didn't separate the class with space, which
    means it's when the header has also the class `sticky`.
  prefs: []
  type: TYPE_NORMAL
- en: 'To this class, we will add the following properties:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s break that down:'
  prefs: []
  type: TYPE_NORMAL
- en: 'We use `position: fixed;` as we want to make the navigation stick to the top.
    `position: fixed` will position the element relative to the browser window.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`top: 0;` tells us it will stick to the top.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`background-color:` sets a solid background color.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`background-image: none;` removes the gradient.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/67776c8d-fb7a-41ee-b957-0ecda1ee39d5.png)'
  prefs: []
  type: TYPE_IMG
- en: Sticky header on the Blog section
  prefs: []
  type: TYPE_NORMAL
- en: We have our CSS class `.sticky` ready to go. Now we have to create our jQuery
    function to make this happen.
  prefs: []
  type: TYPE_NORMAL
- en: 'JS Plugin: Waypoints'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We''re going to use a plugin that triggers an action when scrolled to an element.
    The plugin is called *Waypoints* and can be downloaded from this link: [http://imakewebthings.com/waypoints/](http://imakewebthings.com/waypoints/):'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/328c157e-24c0-4de0-ba00-c3ced86c96de.png)'
  prefs: []
  type: TYPE_IMG
- en: Waypoints website.
  prefs: []
  type: TYPE_NORMAL
- en: Simply click on the Download button to download the files. In the files that
    you have downloaded, only one file will be necessary. Go to the `lib` folder and
    look for `jquery.waypoints.min`. Copy this file and paste it to our `Web Project`
    folder, specifically in our `js` | `vendor` folder.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once pasted, we need to link it to our HTML page. To do so, go to our HTML
    file before the closing tag `</body>`. You''ll see a bunch of scripts that were
    already linked previously for our jQuery file. Before the last file `main.js`,
    simply add the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: '`main.js` should be the last file in the list because it contains all our personal
    JS functions and needs to read by the browser last.'
  prefs: []
  type: TYPE_NORMAL
- en: Every plugin has a different way to be used. The best way is to read the document
    provided by the author of the plugin. Here, I'll explain to you the easiest way
    to use this plugin.
  prefs: []
  type: TYPE_NORMAL
- en: 'To use `.waypoint` with jQuery, we can call it with the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Here are some explanations:'
  prefs: []
  type: TYPE_NORMAL
- en: '`elementToTrigger` will be the element we want the plugin to watch and trigger
    the action when the user scroll passes the element. In this case, it will be `#blog`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`direction`: this argument will serve to detect whether the user is scrolling
    down or up the page.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Let''s head to our `main.js` and create our own `JS code`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Now what we want is to do an action when the user scrolls `down` and scrolls
    past the Blog section, but also do another action when the user scrolls up and
    leaves the blog section.
  prefs: []
  type: TYPE_NORMAL
- en: 'To do that, we''ll need to use a condition, as we saw earlier:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: '`direction == ''down''` means the direction of the scroll is equal to `down`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Now what we want to do is to add the class `sticky` when the user scrolls `down` and
    passes the blog section, and remove the same class when the latter leaves it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s save and see how it works:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/8529c335-dcb1-4bb9-96fc-7ba7885837ea.png)'
  prefs: []
  type: TYPE_IMG
- en: Our sticky header.
  prefs: []
  type: TYPE_NORMAL
- en: It works perfectly, but the header appears instantly, with no animation whatsoever.
    Let's try to make it a bit smoother. To add a bit a transition, we'll use, in
    this example, CSS animation.
  prefs: []
  type: TYPE_NORMAL
- en: CSS animation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: CSS animation allows for the creation of animation without JS or Flash, with
    keyframes and every CSS property. It offers more advantages than a simple transition.
  prefs: []
  type: TYPE_NORMAL
- en: 'To create a CSS animation, you need to create a keyframe:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: '`from` means at the start of the animation, while `to` means at the end of
    the animation.'
  prefs: []
  type: TYPE_NORMAL
- en: 'You can also be more precise with the timeframe by setting the percentage:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'To trigger the animation, you need to call it in the specific div with the
    CSS properties:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'For our header navigation, the keyframe would be:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: '`transform:` is a new type of position in CSS that allows you to move an element
    in a 2D or 3D environment. With `translateY`, we''re moving the element in the
    *Y-axis*. Also, we named the keyframes `sticky-animation`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: The last part will be to call the animation in the class `.sticky`, with a duration
    of `0.3s`.
  prefs: []
  type: TYPE_NORMAL
- en: We now have a sticky navigation that works perfectly, with a cool animation!
  prefs: []
  type: TYPE_NORMAL
- en: Adding a dynamic Instagram feed
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The end goal here is to be able to implement your own Instagram feed by connecting
    to the Instagram API and pulling out information from them.
  prefs: []
  type: TYPE_NORMAL
- en: From a design point of view, we want to show a feed of our latest photo from
    Instagram after our footer, with a hover effect of opacity when you move your
    mouse over it.
  prefs: []
  type: TYPE_NORMAL
- en: 'It should look something like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/111a176c-e0b0-4f01-8413-308386d17435.png)'
  prefs: []
  type: TYPE_IMG
- en: The final design of our Instagram feed
  prefs: []
  type: TYPE_NORMAL
- en: 'To achieve that, first, we need to have an Instagram account. If you already
    have one, you can use your own. Otherwise, I''ve created an account for the exercise:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/103d30e4-70b8-4740-9611-7a8a0c205485.png)'
  prefs: []
  type: TYPE_IMG
- en: Our awesome Instagram feed
  prefs: []
  type: TYPE_NORMAL
- en: Installing Instafeed.js
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'I have, beforehand, uploaded a couple of images of racing. The next step is
    to install a plugin called `Instafeed.js`. Let''s go to the website to download
    it: [http://instafeedjs.com/](http://instafeedjs.com/):'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/69057812-1aea-4399-8528-ebb349eb1390.png)'
  prefs: []
  type: TYPE_IMG
- en: Instafeed.js home page
  prefs: []
  type: TYPE_NORMAL
- en: Right click on download and click on Save link As.... Place the file in the
    `vendor` folder, located in the `js` folder in our `Web Project`.
  prefs: []
  type: TYPE_NORMAL
- en: For each plugin, the installation is quite similar each time. All the installation
    process is generally detailed on the website itself. Let's have a look at Instafeed's
    documentation.
  prefs: []
  type: TYPE_NORMAL
- en: 'Setting up `Instafeed.js` is pretty straight-forward. Just download the script
    and include it in your HTML:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'First, we need to call the `js` file we initially placed in our `vendor` folder:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: Place it after the Waypoints plugin we previously installed.
  prefs: []
  type: TYPE_NORMAL
- en: Now, if we look thoroughly at the documents, we can find the section we need.
  prefs: []
  type: TYPE_NORMAL
- en: Getting images from your user account
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To fetch images specifically from your account, set the `get` and `userId`
    options:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: The next step is to find the userID and TokenAccess. If you don't want to create
    an Instagram account and want to use the one I created beforehand, you can go
    straight to the section titled Displaying the feed.
  prefs: []
  type: TYPE_NORMAL
- en: Finding our userID and TokenAccess
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The information we need to find is the `userID` and the `accessToken`. To get
    the `userID`, we need our Instagram username. Instagram didn''t really make it
    easy to find our `userID`. Fortunately, there are plenty of people who created
    an easy way to find it. You can easily find a way by googling *How to find Instagram
    userID*, but we''ll go straight to the point. Just head to this website [https://codeofaninja.com/tools/find-instagram-user-id](https://codeofaninja.com/tools/find-instagram-user-id) and
    fill the input with your Instagram username:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/dd4522c2-2b9a-4fd7-9b3f-1487c63fbd57.png)'
  prefs: []
  type: TYPE_IMG
- en: The Find Instagram User ID website
  prefs: []
  type: TYPE_NORMAL
- en: 'After clicking on Find Instagram ID, you''ll get something like this with your
    `User ID`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/63341f47-27a1-457a-b4a0-a0e75dcfd810.png)'
  prefs: []
  type: TYPE_IMG
- en: Our userID
  prefs: []
  type: TYPE_NORMAL
- en: 'Now let''s head to our `main.js` and copy/paste the example of code showed
    in the `instafeedjs` documentation. After our `Sticky Nav` code, paste the code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'Just copy and paste the `userID` we got from the website, replacing `''YOUR_USER_ID''`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: It's not done; we still need our access token. This will be a bit more complicated.
  prefs: []
  type: TYPE_NORMAL
- en: Getting our access token
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Instagram didn't really make it easy to find the access token either. Usually,
    it would take quite a bit of time to generate our access token, but we'll use
    a tool to help us get it. Let's head to[ http://instagram.pixelunion.net/ ](http://instagram.pixelunion.net/)and
    click on Generate Access Token.
  prefs: []
  type: TYPE_NORMAL
- en: 'This site will generate for us a token access with one click, the only thing
    we need is to authorize the website to access our account:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/1baba778-4ddc-4eed-8c19-3f2eb1bdc5c8.png)'
  prefs: []
  type: TYPE_IMG
- en: The Pixel Union website
  prefs: []
  type: TYPE_NORMAL
- en: 'Click on Generate Token Access; it should direct you to the Instagram *Authorization*
    page:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/9aa1cc17-8077-40e1-bf09-63719a929924.png)'
  prefs: []
  type: TYPE_IMG
- en: Instagram Authorization page
  prefs: []
  type: TYPE_NORMAL
- en: 'Once done, you can copy paste the code provided by them:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/2e518079-ff7c-4f09-b513-e0d55640ef05.png)'
  prefs: []
  type: TYPE_IMG
- en: Pixel Union Access Token Code
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s copy/paste the last piece of the puzzle in our `main.js` code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: Save the `main.js`. The next step is to fill the HTML with photos of our Instagram
    feed.
  prefs: []
  type: TYPE_NORMAL
- en: Displaying the feed
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: How does the Instafeed plugin work to display our feed? It will look for the `<div
    id="instafeed"></div>` and fill it with linked thumbnails.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s head to the end of our HTML file, after our `<footer>` tag, and add `<div
    id="instafeed"></div>`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s save and see how it looks:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/5d38ae13-b37a-4adb-8f9b-336775bb1c74.png)'
  prefs: []
  type: TYPE_IMG
- en: Our Instagram feed indeed appears, but we can't leave it like this. Let's customize
    our feed and add a bit of CSS to make it pretty.
  prefs: []
  type: TYPE_NORMAL
- en: 'The first thing we''re going to do is to get larger images from our feed. By
    default, Instafeed gets the smallest size of thumbnails from Instagram. To get bigger
    thumbnails, we can read the documentation, and find the following information:'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the s*tandard option* provided by Instafeed, we can see that we have the
    option to choose between three types of resolution from the thumbnails with the
    attribute `resolution`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/f95961e0-e496-4a84-90e7-cfb10813641b.png)'
  prefs: []
  type: TYPE_IMG
- en: Instafeed documentation.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s choose the largest one. To add this option, we simply need to add an
    attribute to our JavaScript function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: So, after `accessToken`, we can add the attribute `resolution`. Be sure to add
    a comma after the end of the attribute `accessToken` to mention that this is not
    the last property. The last attribute doesn't need a comma at the end.
  prefs: []
  type: TYPE_NORMAL
- en: 'Save and see what we have:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/53822b42-389d-4e7c-a62e-d13369bc3b69.png)'
  prefs: []
  type: TYPE_IMG
- en: Website work in progress
  prefs: []
  type: TYPE_NORMAL
- en: 'Great, now it needs a bit of CSS to make this pretty. Before heading to the
    CSS, we need to check what HTML Instafeed generates for us, so we are able to
    call it in CSS. If you remember, we can inspect the HTML of an element in Google
    Chrome. We just have to right-click on it and click on Inspect:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/716951d8-a88f-4fda-a829-ca8d1847ba7a.png)'
  prefs: []
  type: TYPE_IMG
- en: Our Google Chrome inspector
  prefs: []
  type: TYPE_NORMAL
- en: We can see that Instafeed generates a `<a>` tag with an `<img>` inside. Pretty
    straightforward.
  prefs: []
  type: TYPE_NORMAL
- en: 'Knowing that, let''s go to our `styles.css` file, and write, after our `footer`
    section:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'To explain, we use:'
  prefs: []
  type: TYPE_NORMAL
- en: '`width: 100%;` because #instafeed is our container that holds everything. We
    want it to take the full width.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`display: flex;` because we want to display the thumbnails horizontally side
    by side.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`justify-content: center;` to place the content in the center.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`overflow: hidden;` because we don''t want the page to extend horizontally.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`background: black;` because by default the background is white.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'And, last, but not the least, the most important one:'
  prefs: []
  type: TYPE_NORMAL
- en: '`flex-grow: 1;`: The remaining space in the `container` will be distributed
    equally to all children if all items have flex-grow set to `1`. If one of the
    children has a value of 2 or more, the remaining space or more would take up twice
    as much space as the others.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Let''s see how it looks now:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/0ab28e1b-91d8-460a-b17e-3cbef084e816.png)'
  prefs: []
  type: TYPE_IMG
- en: Website work in progress
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, the last part is to add that opacity effect when hovering it. We''ll play
    with opacity and pseudo-class `:hover` we learned just earlier:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: Again, you only need to add the value you want to change in the pseudo-class;
    here, it is the opacity.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s also add some `transition`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s save it and see:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/6e50d18a-46a5-42a1-910d-5ce37ba55f3a.png)'
  prefs: []
  type: TYPE_IMG
- en: Website work in progress
  prefs: []
  type: TYPE_NORMAL
- en: 'Perfect, we did a great job so far. But if you''re a perfectionist, as I am,
    you''ll notice that on mobiles and tablets, the images are quite big. Let''s add
    some quick responsive CSS and we can wrap this up:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'What I did here is to change the image size on each breakpoint:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/066c4830-e2c7-4cf8-8bdf-7b9df1898300.png)'
  prefs: []
  type: TYPE_IMG
- en: Tablet and mobile view of our Instagram Feed
  prefs: []
  type: TYPE_NORMAL
- en: We're now done with the interaction and dynamic content of our website.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Obviously, there are plenty of things you can do and add to your website. This
    has just been a little preview of what can be achieved very quickly. Again, your
    imagination and determination will be the only limit. Here''s what we''ve covered
    in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: We've learned the CSS pseudo-class and how it can help with different animation.
    We've learned how to create animation with CSS `@keyframe`. We can now target
    elements with JQuery and add different functions to it. We've learned how to connect
    to an API and display information by using a plugin
  prefs: []
  type: TYPE_NORMAL
- en: A lot of exciting stuff in this chapter! In the next chapter, we will cover
    how to optimize our website and publish it!
  prefs: []
  type: TYPE_NORMAL
