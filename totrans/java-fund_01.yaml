- en: '*Chapter 1*'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Introduction to Java
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Learning Objectives
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'By the end of this lesson, you''ll be able to:'
  prefs: []
  type: TYPE_NORMAL
- en: Describe the working of the Java ecosystem
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Write simple Java programs
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Read input from the users
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Utilize classes in the java.util package
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this first lesson, we are embarking on our study of Java. If you are coming
    to Java from a background of working with another programming language, you probably
    know that Java is a language for programming computers. But Java goes beyond just
    that. It's more than a very popular and successful language that is virtually
    present everywhere, it is a collection of technologies. Besides the language,
    it encompasses a very rich ecosystem and it has a vibrant community working on
    many facets to make the ecosystem as dynamic as it can be.
  prefs: []
  type: TYPE_NORMAL
- en: The Java Ecosystem
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The three most basic parts of the Java ecosystem are the **Java Virtual Machine
    (JVM)**, the **Java Runtime Environment (JRE)**, and the **Java Development Kit
    (JDK)**, which are *stock* parts that are supplied by Java implementations.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.1: A representation of the Java ecoystem](img/C09581_01_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 1.1: A representation of the Java ecosystem'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Every Java program runs under the control of a **JVM**. Every time you run a
    Java program, an instance of JVM is created. It provides security and isolation
    for the Java program that is running. It prevents the running of the code from
    clashing with other programs within the system. It works like a non-strict sandbox,
    making it safe to serve resources, even in hostile environments such as the internet,
    but allowing interoperability with the computer on which it runs. In simpler terms,
    JVM acts as a *computer inside a computer*, which is meant specifically for running
    Java programs.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: It is common for servers to have many JVMs in execution simultaneously.
  prefs: []
  type: TYPE_NORMAL
- en: Up in the hierarchy of stock Java technologies is the `java` command). It includes
    all the base Java classes (the runtime) as well as the libraries for interaction
    with the host system (such as font management, communication with the graphical
    system, the ability to play sounds, and plugins for the execution of Java applets
    in the browser) and utilities (such as the Nashorn JavaScript interpreter and
    the keytool cryptographic manipulation tool). As stated before, the JRE includes
    the JVM.
  prefs: []
  type: TYPE_NORMAL
- en: At the top layer of stock Java technologies is the `javac`). The JDK also includes
    many auxiliary tools such as a Java disassembler (`javap`), a utility to create
    packages of Java applications (`jar`), system to generate documentation from source
    code (`javadoc`), among many other utilities. The JDK is a superset of the JRE,
    meaning that if you have the JDK, then you also have the JRE (and the JVM).
  prefs: []
  type: TYPE_NORMAL
- en: But those three parts are not the entirety of Java. The ecosystem of Java includes
    a very large participation of the community, which is one of the reasons for the
    popularity of the platform.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Research into the most popular Java libraries that are used by the top Java
    projects on GitHub (according to research that has been repeated in 2016 and 2017)
    showed that JUnit, Mockito, Google's Guava, logging libraries (log4j, sl4j), and
    all of Apache Commons (Commons IO, Commons Lang, Commons Math, and so on), marked
    their presence, together with libraries to connect to databases, libraries for
    data analysis and machine learning, distributed computing, and almost anything
    else that you can imagine. In other words, for almost any use that you want to
    write programs to, there are high chances of an existing library of tools to help
    you with your task.
  prefs: []
  type: TYPE_NORMAL
- en: Besides the numerous libraries that extend the functionality of the stock distributions
    of Java, there is a myriad of tools to automate builds (for example, Apache Ant,
    Apache Maven, and Gradle), automate tests, distribution and continuous integration/delivery
    programs (for example, Jenkins and Apache Continuum), and much, much more.
  prefs: []
  type: TYPE_NORMAL
- en: Our First Java Application
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'As we briefly hinted before, programs in Java are written in source code (which
    are plain text, human-readable files) that is processed by a compiler (in the
    case of Java, `javac`) to produce the Java bytecode in class files. The class
    files containing Java bytecode are, then, fed to a program called java, which
    contains the Java interpreter/JVM that executes the program that we wrote:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.2: The process of compilation in Java](img/C09581_01_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 1.2: The process of compilation in Java'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Syntax of a Simple Java Program
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Like all programming languages, the source code in Java must follow particular
    syntaxes. Only then, will the program compile and provide accurate results. Since
    Java is an object-oriented programming language, everything in Java is enclosed
    within classes. A simple Java program looks similar to this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Every java program file should have the same name as that of the class that
    contains `main ()`. It is the entry point into the Java program.
  prefs: []
  type: TYPE_NORMAL
- en: Therefore the preceding program will compile and run without any errors only
    when these instructions are stored in a file called `Test.java`.
  prefs: []
  type: TYPE_NORMAL
- en: Another key feature of Java is that it is case-sensitive. This implies that
    `System.out.Println` will throw an error as it is not capitalized correctly. The
    correct instruction should be `System.out.println.`
  prefs: []
  type: TYPE_NORMAL
- en: '`main()` should always be declared as shown in the sample. This is because,
    if `main()` is not a `public` method, it will not be accessed by the compiler,
    and the java program will not run. The reason `main()` is static is because we
    do not call it using any object, like you would for all other regular methods
    in Java.'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: We will discuss these the public and static keywords later in this book, in
    greater depth.
  prefs: []
  type: TYPE_NORMAL
- en: Comments are used to provide some additional information. The Java compiler
    ignores these comments.
  prefs: []
  type: TYPE_NORMAL
- en: Single line comments are denoted by `//` and multiline comments are denoted
    by `/* */`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Exercise 1: A Simple Hello World Program'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Right-click the `src` folder and select **New** | **Class**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter `HelloWorld` as the class name, and then click **OK**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Enter the following code within the class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Run the program by clicking on **Run** | **Run 'Main'**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The output of the program should be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Exercise 2: A Simple Program for Performing Simple Mathematic Operations'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Right-click the `src` folder and select **New** | **Class**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter `ArithmeticOperations` as the class name, and then click **OK**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Replace the code inside this folder with the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Run the main program.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The output should be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: In Java, when you divide an integer (such as 4) by another integer (such as
    5), the result is always an integer (unless you instruct the program otherwise).
    In the preceding case, do not be alarmed to see that 4 / 5 gives 0 as a result,
    since that's the quotient of 4 when divided by 5 (you can get the remainder of
    the division by using a % instead of the division bar).
  prefs: []
  type: TYPE_NORMAL
- en: 'To get the result of 0.8, you would have to instruct the division to be a floating-point
    division instead of an integer division. You can do that with the following line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Yes, this does mean, like most programming languages, there is more than one
    type of number in Java.
  prefs: []
  type: TYPE_NORMAL
- en: 'Exercise 3: Displaying Non-ASCII Characters'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Right-click the `src` folder and select **New** | **Class**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter `ArithmeticOperations` as the class name, and then click **OK**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Replace the code in this folder with the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Run the main program.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The output for the program should be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Activity 1: Printing the Results of Simple Arithmetic Operations'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'To write a java program that prints the sum and the product of any two values,
    perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a new class.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Within `main()`, print a sentence describing the operation on the values you
    will be performing along with the result.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Run the main program. Your output should be similar to the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The solution for this activity can be found on page 304.
  prefs: []
  type: TYPE_NORMAL
- en: Getting Input from the User
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'We previously studied a program that created output. Now, we are, going to
    study a complementary program: a program that gets input from the user so that
    the program can work based on what the user gives the program:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, we must dissect the structure of our new program, the one with the public
    class `ReadInput`. You might notice that it has more lines and that it is apparently
    more complex, but fret not: every single detail will be revealed (in all its full,
    glorious depth) when the time is right. But, for now, a simpler explanation will
    do, since we don''t want to lose our focus on the principal, which is taking input
    from the user.'
  prefs: []
  type: TYPE_NORMAL
- en: First, on line 1, we use the `import` keyword, which we have not seen yet. All
    Java code is organized in a hierarchical fashion, with many packages (we will
    discuss packages in more detail later, including how to make your own).
  prefs: []
  type: TYPE_NORMAL
- en: Here, hierarchy means "organized like a tree", similar to a family tree. In
    line 1 of the program, the word `import` simply means that we will use methods
    or classes that are organized in the `java.io.Exception` package.
  prefs: []
  type: TYPE_NORMAL
- en: On line 2, we, as before, create a new public class called `ReadInput`, without
    any surprises. As expected, the source code of this program will have to be inside
    a source file called `ReadInput.java`.
  prefs: []
  type: TYPE_NORMAL
- en: On line 3, we start the definition of our `main` method, but, this time, add
    a few words after the closing parentheses. The new words are `throws IOException`.
    Why is this needed?
  prefs: []
  type: TYPE_NORMAL
- en: 'The short explanation is: "Because, otherwise, the program will not compile."
    A longer version of the explanation is "Because when we read the input from the
    user, there may be an error and the Java language forces us to tell the compiler
    about some errors that our program may encounter during execution."'
  prefs: []
  type: TYPE_NORMAL
- en: 'Also, line 3 is the line that''s responsible for the need of the `import` in
    line 1: the `IOException` is a special class that is under the `java.io.Exception`
    hierarchy.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Line 5 is where the real action begins: we define a variable called `inByte`
    (short for "byte that will be input"), which will contain the results of the `System.in.read`
    method.'
  prefs: []
  type: TYPE_NORMAL
- en: The `System.in.read` method, when executed, will take the first byte (and only
    one) from the standard input (usually, the keyboard, as we already discussed)
    and give it back as the answer to those who executed it (in this case, we, in
    line 5). We store this result in the `inByte` variable and continue the execution
    of the program.
  prefs: []
  type: TYPE_NORMAL
- en: With line 6, we print (to the standard output) a message saying what byte we
    read, using the standard way of calling the `System.out.println` method.
  prefs: []
  type: TYPE_NORMAL
- en: 'Notice that, for the sake of printing the byte (and not the internal number
    that represents the character for the computer), we had to use a construct of
    the following form:'
  prefs: []
  type: TYPE_NORMAL
- en: An open parenthesis
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The word `char`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A closing parenthesis
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We use this before the variable named `inByte`. This construct is called a type
    cast and will be explained in much more detail in the lessons that follow.
  prefs: []
  type: TYPE_NORMAL
- en: On line 7, we use a different way to print the same message to the standard
    output. This is meant to show you how many tasks may be accomplished in more than
    one way and that there is "no single correct" way. Here, we use the `System.out.println`
    function.
  prefs: []
  type: TYPE_NORMAL
- en: The remaining lines simply close the braces of the `main` method definition
    and that of the `ReadInput` class.
  prefs: []
  type: TYPE_NORMAL
- en: 'Some of the main format strings for `System.out.printf` are listed in the following
    table:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Table 1.1: Format strings and its meaning](img/C09581_Table_01_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Table 1.1: Format strings and their meaning'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: There are many other formatting strings and many variables, and you can find
    the full specification on Oracle's website.
  prefs: []
  type: TYPE_NORMAL
- en: We will see some other common (modified) formatted strings, such as %.2f (which
    instructs the function to print a floating-point number with exactly two decimal
    digits after the decimal point, such as 2.57 or -123.45) and %03d (which instructs
    the function to print an integer with at least three places possibly left filled
    with 0s, such as 001 or 123 or 27204).
  prefs: []
  type: TYPE_NORMAL
- en: 'Exercise 4: Reading Values from the User and Performing Operations'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'To read two numbers from the user and print their product, perform the following
    steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Right-click the `src` folder and select **New** | **Class**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter `ProductOfNos` as the class name, and then click **OK**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Import the `java.io.IOException` package:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Enter the following code within the `main()` to read integers:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Enter the following code to display the product of the two variables:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the program. You should see an output similar to this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Well done, this is your first Java program.
  prefs: []
  type: TYPE_NORMAL
- en: Packages
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Packages are namespaces in Java that can be used to avoid name collisions when
    you have more than one class with the same name.
  prefs: []
  type: TYPE_NORMAL
- en: For example, we might have more than one class named `Student` being developed
    by Sam and another class with the same name being developed by David. We need
    a way to differentiate between the two classes if we need to use them in our code.
    We use packages to put the two classes in two different namespaces.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, we might have the two classes in two packages:'
  prefs: []
  type: TYPE_NORMAL
- en: '`sam.Student`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`david.Student`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The two packages look as follows in File Explorer:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.3: Screenshot of the sam.Student and david.Student packages in File
    Explorer](img/C09581_01_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 1.3: Screenshot of the sam.Student and david.Student packages in File
    Explorer'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: All the classes that are fundamental to the Java language belong to the `java.lang`
    package. All the classes that contain utility classes in Java, such as collections,
    classes for localization, and time utilities, belong to the `java.util` package.
  prefs: []
  type: TYPE_NORMAL
- en: As a programmer, you can create and use your own packages.
  prefs: []
  type: TYPE_NORMAL
- en: Rules to Follow When Using Packages
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Here are a few rules to be considered while using packages:'
  prefs: []
  type: TYPE_NORMAL
- en: Packages are written in lowercase
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: To avoid name conflicts, the package name should be the reverse domain of the
    company. For example, if the company domain is `example.com`, then the package
    name should be `com.example`. So, if we have a `Student` class in that package,
    the class can be accessed with `com.example.Student.`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Package names should correspond to folder names. For the preceding example,
    the folder structure would be as follows:![Figure 1.4: Screenshot of the folder
    structure in File Explorer](img/C09581_01_04.jpg)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Figure 1.4: Screenshot of the folder structure in File Explorer'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'To use a class from a package in your code, you need to import the class at
    the top of your Java file. For example, to use the Student class, you would import
    it as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: '`Scanner` is a useful class in the `java.util` package. It is an easy way of
    inputting types, such as int or strings. As we saw in an earlier exercise, the
    packages use `nextInt()` to input an integer with the following syntax:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Activity 2: Reading Values from the User and Performing Operations Using the
    Scanner Class'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'To read two numbers from the user and print their sum, perform the following
    steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a new class and enter `ReadScanner` as the class name
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Import the `java.util.Scanner` package
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the `main()` use `System.out.print` to ask the user to enter two numbers
    of variables `a` and `b`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Use `System.out.println` to output the sum of the two numbers.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Run the main program.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The output should be similar to this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The solution for this activity can be found on page 304.
  prefs: []
  type: TYPE_NORMAL
- en: 'Activity 3: Calculating the Percent Increase or Decrease of Financial Instruments'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Users expect to see the daily percentage of increase or decrease of financial
    instruments such as stocks and foreign currency. We will ask the user for the
    stock symbol, the value of the stock on day 1, the value of the same stock on
    day 2, calculate the percent change and print it in a nicely formatted way. To
    achieve this, perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a new class and enter `StockChangeCalculator` as the class name
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Import the `java.util.Scanner` package:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the `main()` use `System.out.print` to ask the user for the `symbol` of the
    stock, followed by the `day1` and `day2` values of the stock.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Calculate the `percentChange` value.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Use `System.out.println` to output the symbol and the percent change with two
    decimal digits.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Run the main program.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The output should be similar to:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The solution for this activity can be found on page 305.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This lesson covered the very basics of Java. We saw some of the basic features
    of a Java program, and how we can display or print messages to the console. We
    also saw how we can read values using the input consoles. We also looked at packages
    that can be used to group classes, and saw an example of `Scanner` in `java.util`
    package.
  prefs: []
  type: TYPE_NORMAL
- en: In the next lesson, we will cover more about how values are stored, and the
    different values that we can use in a Java program.
  prefs: []
  type: TYPE_NORMAL
