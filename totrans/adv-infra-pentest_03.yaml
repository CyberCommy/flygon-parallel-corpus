- en: Corporate Network and Database Exploitation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: I n the previous chapter, we had the opportunity to learn how to attack and
    secure the Linux infrastructure. Now, it's time to expand our skills and gain
    the required knowledge and hands-on expertise for penetrating corporate networks
    and databases.
  prefs: []
  type: TYPE_NORMAL
- en: 'The topics that are covered in this chapter are:'
  prefs: []
  type: TYPE_NORMAL
- en: Advanced topics in network scanning
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Insecure SNMP configuration
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Database server exploitations
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Before getting in too deep, let's get started with some basics.
  prefs: []
  type: TYPE_NORMAL
- en: Networking fundamentals
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To understand how to attack corporate networks, it is essential that you learn
    some important networking terminology.
  prefs: []
  type: TYPE_NORMAL
- en: Network topologies
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The schematic description of a network is called a topology. It refers to the
    layout of the different devices in a network. The arrangement of the network components
    can be either physical or logical. There are many network topologies: bus, mesh,
    star, ring, tree, and hybrid.'
  prefs: []
  type: TYPE_NORMAL
- en: Bus topology
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'A bus topology represents a layout where all the networking components are
    connected using a central connection, which is sometimes referred to as a backbone.
    This type of topology is very cost effective because it uses a single expendable
    cable. It is a good choice for small networks, but when the cable goes down, all
    the connected devices goes down. As a network architect, it is better to avoid
    the single point of failure approach. The **Bus Topology** is shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00066.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Star topology
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'A star topology refers to connecting all the devices to a single hub, which
    is a central node with a dedicated connection to every device. The role of the
    hub is to repeat the data flow. It is easy to manage and to troubleshoot, but
    it is a little bit expensive compared to other topologies. The **Star Topology**
    is shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00067.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Ring topology
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'A ring topology represents a ring layout where the data transmission is done
    in one direction. It represents a single point of failure, like the bus topology.
    The **Ring Topology** is shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00068.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Tree topology
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'A tree topology is a hierarchical layout. You can see it as a combination of
    the bus topology and the star topology. Sometimes, it is considered as another
    form of the star topology. It contains a root node and other devices and is a
    good choice for a grouped workspace, but it is heavily cabled. The **Tree Topology**
    is shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00069.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Mesh topology
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In a mesh topology, every connected device is connected to every other device
    in the network, using a point-to-point connection. This type of topology is expensive,
    but it is recommended in a redundancy architecture because if a device fails,
    the data goes to another machine, generally using the shortest path. The **Mesh
    Topology** is shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00070.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Hybrid topology
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A hybrid topology is a combination of at least two topologies of the layouts
    discussed previously. Based on your requirements, you can choose some topologies
    to fulfill the needs of your different departments. It is effective and flexible.
  prefs: []
  type: TYPE_NORMAL
- en: Transmission modes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'After studying the different topologies of a network, now let''s look at how
    the data is transmitted between two different devices. When it comes to communications,
    we have three main transmission categories:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Simple mode**: This mode occurs when the data is flowing in only one direction.
    This type is widely used in television broadcasting (you can only send data from
    a source to monitor and not the opposite).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Half-duplex mode**: In this type of transmission, the data goes in both directions
    using a single means of communication at a time, such as ping-pong mode; you can''t
    send and receive a message at the same time.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Full-duplex mode**: This mode is used when the data flow is bi-directional
    and simultaneous, like the mode used in telephone networks.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'We saw the "how" of the transmission operation, let''s see the"what"; in other
    words, the different means of transmission. There are two types of transmission:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Bounded means**: The data is transmitted via three types of physical cables
    – coaxial, fiber optics, and twisted cables'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Unbound means**: The data is transmitted as radio and microwave signals'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Communication networks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are many types of communication networks.
  prefs: []
  type: TYPE_NORMAL
- en: Local area network
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'A **local area network** (**LAN**) is used in small areas, such as small working
    offices or buildings. For the network design, you can use any topology from the
    layouts discussed previously. This type of network is easy to troubleshoot, and
    it is used frequently in shared environments (printers, computers, and so on).
    An example is shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00071.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Metropolitan area network
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A **metropolitan area network** (**MAN**) is larger than a LAN, but it is extensible
    as it can be used at a greater distance, for example, between two offices in the
    same city. The intermediate could be another company and service (the local telephone
    exchange, for example).
  prefs: []
  type: TYPE_NORMAL
- en: Wide area network
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'A **wide area network** (**WAN**) is used where large distances are involved.
    In general, it is used over the internet to connect between the different parties.
    The following figure summarizes the difference between the different categories:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00072.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Personal area network
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A **personal area network** (**PAN**) is the short-range wireless network. In
    general, a PAN is a range smaller than a single room. The most well-known PAN
    is Bluetooth.
  prefs: []
  type: TYPE_NORMAL
- en: Wireless network
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Wireless networks are a great solution to reducing networking costs, by replacing
    physical cables with radio waves.
  prefs: []
  type: TYPE_NORMAL
- en: Data center multi-tier model design
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The data center multi-tier model design is a widely used model in data centers
    of modern organizations. This topology is very flexible but expensive. This multilayer
    architecture is based on three principal layers: **Core**, **Aggregation**, and
    **Access**:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Core layer**: This layer is called the backbone as it ensures the reliable
    delivery of packets using a high data transfer rate.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Aggregation layer**: This layer is sometimes called the Workgroup layer as
    it ensures the correct routing of packets between the subnets and VLANs of the
    organization. It may include firewalling, **Quality of Services** (**QoS**), and
    many other policy-based network connectivities.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Access layer**: This layer is responsible for connecting endpoints and workstations
    to the network.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'These layers are shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00073.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Open Systems Interconnection model
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Networking is a vital component in every modern organization and for every
    individual. To facilitate data communication and handling, the **Open Systems
    Interconnection** (**OSI**) standardization model has evolved. The data moves
    around networks following a specific order. This order is presented by seven steps
    and layers; the OSI model contains seven layers. You can remember the layers from
    top to bottom using this phrase *All People Seem To Need Data Processing*:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Application layer**: This layer contains all the required services for software
    applications.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Presentation layer**: This layer is mostly responsible for how the data is
    presented. The operations may include compression and encryption.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Session layer**: This layer provides the communication procedures between
    the hosts (starting a session, restarting, termination, and so on).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Transport layer**: This layer manages the reliability of the transport of
    sent data.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Network layer**: This layer handles the routing operation of data, specifically
    packets between networks using logical addresses named IP addresses. A router
    is a network layer device.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Data link layer**: This layer is responsible for setting up the links for
    the organization network. It contains two different sublayers: **Logical Link
    Control** (**LLC**) for flow control and error corrections and **Media Access
    Control** (**MAC**) which determines the flow of a frame. The switch is a data
    link layer device.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Physical layer**: This layer deals with the hardware means (cables, electrical
    aspects, and so on) of moving (sending and receiving) data. The hub, for example,
    is a physical layer device.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The process of moving data from data to bits is called **encapsulation**. The
    opposite operation is named de-encapsulation.
  prefs: []
  type: TYPE_NORMAL
- en: 'The OSI model is shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00074.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: In-depth network scanning
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Scanning is a vital step in hacking processes. In this section, you will learn
    how to scan and map networks. The aim of network scanning is identifying the live
    hosts, including their network services. But before diving into in-depth network
    scanning techniques, let's begin with the basic TCP communication sequences.
  prefs: []
  type: TYPE_NORMAL
- en: TCP communication
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The **Transmission Control Protocol** (**TCP**) is one of the most well-known
    internet protocols. It is used in reliable host-to-host communications as a connection-oriented
    protocol. That means the connection is maintained until the message is fully transmitted.
    The TCP communications are handled by TCP flags called control bits, in a structured
    format known as TCP Headers. The control bits are URG, SYN, PSH, RST, and FIN**.**
  prefs: []
  type: TYPE_NORMAL
- en: '**SYN**: Starts the connection'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**ACK**: Acknowledges the reception'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**RST**: Resets a connection'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**FIN**: Finishes reception'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**URG**: Indicates urgent processing'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**PSH**: Sends immediately'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The data exchange is done, thanks to a three-way handshake technique, shown
    here. The first step is the client sending an **SYN** packet to the server. The
    server then responds with an **SYN-ACK** packet, if the target port is open. Finally,
    the server receives an **ACK** packet and a connection is established:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00075.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: ICMP scanning
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The **Internet Control Message Protocol** (**ICMP**) is like the TCP protocol;
    both support protocols in the internet protocol suite. ICMP is used for checking
    live systems; ping is the most well-known utility that uses ICMP requests. Its
    principle is very simple—ICMP scanning sends requests to hosts and waits for an
    echo request to check whether the system is alive. An example of a ping sweep
    is shown here: `ping <target>`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00076.gif)'
  prefs: []
  type: TYPE_IMG
- en: The ping sweep is a technique of ICMP scanning, but it scans a range of IP addresses.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are many TCP services scanning techniques, such as:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Full open scan**: This is done when the three-way handshake is completed
    (full connection).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Half open scan**: Sometimes called stealth scanning, this is done by only
    performing the first half of a three-way handshake.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**FIN scan**: During a FIN scan, the attacker sends a FIN packet. If he gets
    no response, then the port is open or it has been dropped by a placed firewall.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**NULL scan**: To perform a NULL scan, the attacker sends a series of TCP packets
    containing zeros and no set flags. If the port is open, then the target will discard
    the packet.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: SSDP scanning
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Simple Service Discovery Protocol** (**SSDP**) is a networking protocol used
    to discover the directly connected devices. This protocol uses UDP using plug
    and play devices in order to exchange data. It works on port `1900`.'
  prefs: []
  type: TYPE_NORMAL
- en: UDP Scanning
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**User Datagram Protocol** (**UDP**) is an internet protocol suite. It is an
    alternative to TCP, but it is unreliable. It just sends the packets without waiting
    for an acknowledgment. The UDP header has four 2-byte fields:'
  prefs: []
  type: TYPE_NORMAL
- en: Source port
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Destination port
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: UDP length
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: UDP checksum
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: During UDP scanning, a UDP packet is sent to a UDP port of a host. If there
    is no response, then the port is open or else it will receive a `"Destination
    unreachable"` error.
  prefs: []
  type: TYPE_NORMAL
- en: '**Nmap** is the most famous open source network discovery and mapping tool.
    It is a very flexible, powerful, and well-documented utility. You can download
    it from: [https://nmap.org/download.html](https://nmap.org/download.html).'
  prefs: []
  type: TYPE_NORMAL
- en: 'The following screenshot shows the main interface of the graphical user interface
    mode of Nmap called **Zenmap**:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00077.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'To use nmap you just need to use the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'These are some useful options in network scanning:'
  prefs: []
  type: TYPE_NORMAL
- en: '`-p`: For scan a port'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-F`: For fast scanning (using most common ports)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-p-`: For scanning all ports'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-sT`: For TCP scan'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-sU`: For UDP scan'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-A`: For identifying operating system and service'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-sN`: For NULL scanning'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-SF`: For FIN scanning'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Also, you can use a Nmap script (`.nse`) using the following expression, for
    example: `nmap -sV -p 443 –script=ssl-heartbleed.nse <Target_Here>`
  prefs: []
  type: TYPE_NORMAL
- en: Intrusion detection systems
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Intrusion detection systems** (**IDS**) are used to defend restricted access
    to an organization''s network. They can consist of either software or hardware.
    There are two types of IDS:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Host-based IDS**: This system traces the hosts'' behaviors for any suspicious
    activities'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Network-based IDS**: This system analyzes the network traffic for any intrusion
    and produces alerts'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'IDS uses two detection methods:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Signature-based detection**: Like anti-virus products, this type of detection
    is based on predefined patterns, such as sequences and signatures.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Anomaly-based detection**: This method of detection is based on the behaviors
    of activities. It is a dynamic approach that detects anomalies and suspicious
    activities, based on previously known attacks.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Machine learning for intrusion detection
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Machine learning is obviously the hottest trend in the tech industry at the
    moment, thanks to the huge amount of data collected in many organizations. It
    is so powerful to make decisions and predictions, based on big data. Fraud detection,
    natural-language processing, self-driving cars and image recognition are a few
    examples of machine learning applications. Machine learning is a combination of
    statistics, computer science, linear algebra, and mathematical optimization methods.
    The following graph illustrates the difference between the traditional programming
    and machine learning:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00078.gif)'
  prefs: []
  type: TYPE_IMG
- en: Machine learning is the study and the creation of algorithms that can learn
    from data and make predictions from it. According to Tom Mitchell, a professor
    at the **Carnegie Mellon University** (**CMU**), a computer program is said to
    learn from experience *E*, with respect to some class of tasks *T*, and performance
    measure *P*, if its performance of tasks in *T*, as measured by *P*, improves
    with experience *E*. For example, in speech recognition; the task *T* is recognizing
    words correctly, the performance measure *P* is the number of words successfully
    recognized, and the experience *E* is a dataset of spoken words. Machine learning
    can be categorized into four models; supervised learning, unsupervised learning,
    semi-supervised learning, and reinforcement.
  prefs: []
  type: TYPE_NORMAL
- en: Supervised learning
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Supervised learning is used when we have input variables (*I*) and an output
    variable (*O*), and we need to map the function from the input to the output,
    as a learning algorithm. Supervised learning can be represented by two categories:
    classification, which is used when the output is a category, and regression, which
    is used when the output is a real value. The following are some supervised machine
    learning algorithms:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Decision trees**: A decision tree is a machine learning algorithm that uses
    a tree-like graph and its possible outputs. These outputs could be YES/NO or continuous
    variables. This algorithm has four important terms:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Root node**: This represents all the data'
  prefs:
  - PREF_UL
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Splitting**: This is the operation of dividing a node into sub-nodes'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Decision node**: This could be divided into other sub-nodes'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Leaf node**: This is the final divisible node (also known as **terminal node**)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Naive Bayes classification**: Naive Bayes classifiers are multiple probabilistic
    classifiers based on the Bayes’ theorem of predicting the category of a given
    sample. For example, it is used to check whether an email is a spam or not. Here
    is Bayes’ theorem:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/00079.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: '**Support Vector Machines**: A **Support Vector Machine** (**SVM**) is a binary
    classification algorithm. It is used to find what we call a separating hyperplane
    that separates data. It is defined as a hyperplane and not a simple line because
    we are talking about a multi-dimensional space.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Unsupervised learning
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Unsupervised learning is useful in cases where you only have input data (*X*)
    and no corresponding output variables. An example of an unsupervised learning
    algorithm is clustering, which is the task of grouping a set of objects such that
    the objects in the same group (cluster) are more similar to each other than to
    those in other groups, as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00080.gif)'
  prefs: []
  type: TYPE_IMG
- en: Semi-supervised learning
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Semi-supervised learning is used when we have a huge input data (*I*) and only
    a few output variables (*O*). We can view it as being between both supervised
    and unsupervised learning, thus we can use the techniques in the two models.
  prefs: []
  type: TYPE_NORMAL
- en: Reinforcement
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Reinforcement is used when the agent or the system is improving its performance,
    based on the interaction with the environment, including a reward function.
  prefs: []
  type: TYPE_NORMAL
- en: Machine learning systems' workflow
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Every machine learning project should follow specific steps to achieve its goal.
    The first step is data processing—during this step we need to extract the meaningful
    features from the raw data. This step is crucial because good feature engineering
    is needed to build a good machine learning model. After processing the data, we
    have to train and choose the best predictive model for our situation. Finally,
    after training the model, evaluation is an important process where we check the
    accuracy and the performance of the trained model to predict new data.
  prefs: []
  type: TYPE_NORMAL
- en: Many IDS, based on machine learning, have begun to surface. They can create
    great solutions for detecting unknown threats, while network security engineers
    can extract useful features from the collected data and build machine learning
    models. Information security professionals and data science enthusiasts are free
    to choose the most convenient machine learning algorithm and model for their purposes,
    which is why there are various explored machine learning IDS available. One of
    them is artificial neural networks and, in particular, deep learning.
  prefs: []
  type: TYPE_NORMAL
- en: '**Artificial Intelligence** (**AI**) requires computers to mimic a cognitive
    function of the human mind. The first artificial neural networks were introduced
    around 1960 and in 2006, Geoffrey Hinton came up with the first implementation
    of neural networks. Artificial neural networks work like a human mind; they are
    composed of many interconnected neurons in a linear way. They take an input and
    decide the class as an output; in other words, artificial neural networks are
    modeling information like the brain does. Artificial neural networks are trying
    to perform like a brain, but how does a brain work?'
  prefs: []
  type: TYPE_NORMAL
- en: In order to understand how a single-layer neural network works, we will make
    the comparison between a biological neuron and an artificial perceptron. A neuron
    is a cell that is part of the nervous system, including the brain. It transmits
    information using electrochemical signaling. A typical neuron possesses dendrites
    which propagate information from other cells to the cell body that contains the
    nucleus and a single axon.
  prefs: []
  type: TYPE_NORMAL
- en: Using the analogy of brain behavior, an artificial neuron behaves in the same
    way as a biological neuron, thus the inputs are a multiple variable vector that
    is typically fully connected to an output node. The output node takes the sum
    of all the inputs and applies what we call an activation function. The activation
    function is like a deciding function that chooses what to pass and what to block.
  prefs: []
  type: TYPE_NORMAL
- en: Multi-layer neural networks are artificial neural networks with at least three
    layers of nodes; they contains many perceptrons. The layers in the middle are
    called hidden layers.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are many types of artificial networks:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Convolutional Neural Network** (**CNN**): Passing a huge amount of information
    through the input layer could cause a problem, for example, in image recognition
    passing every pixel of a big image is not an efficient solution. This is why we
    need a type of neural network called a convolutional neural network, which is
    composed of a convolutional layer and a pooling layer (sometimes called a sampling
    layer) and, of course, an input and an output layer.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Recurrent neural network** (**RNN**): A RNN is a neural network that is used
    when the input is sequential information and the input and outputs are independent
    of each other. Generally, it is very popular for processing natural-language processing
    tasks. An RNN has a memory that captures information about what has been calculated
    so far.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Machine learning model evaluation metrics
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To evaluate machine learning models, we need some metrics. There are many ways
    of measuring classification performance. Accuracy, F1 score, Precision, Recall
    are a few of the commonly used metrics to evaluate machine learning models. They
    are calculated based on four parameters: false positive, false negative, true
    positive, and true negative. A confusion matrix is a table that is often used
    to describe the performance of a classification model, based on the four discussed
    parameters.'
  prefs: []
  type: TYPE_NORMAL
- en: Services enumeration
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Services enumeration is the operation of extracting information about the running
    services from a target, in order to explore an attack vector which would compromise
    the systems, such as machines'' hostnames, network services, service settings,
    and details about SNMP and DNS. The following subsections discuss, in detail,
    how to enumerate and exploit two different networking services: SNMP and DNS.'
  prefs: []
  type: TYPE_NORMAL
- en: Insecure SNMP configuration
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The **Simple Network Management Protocol** (**SNMP**) is a protocol that manages
    network devices; it runs on the **UDP**. Every network device contains an SNMP
    agent that connects with an independent SNMP manager. This protocol uses two authenticating
    passwords: the first is a public key to view the configuration, and the second
    is a private key to configure the devices. Network nodes are stored in a database
    called the **Management Information Base** (**MIB**) in a tree structure. An attacker,
    for example, can enumerate SNMP services to check for default SNMP passwords or
    brute force them.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Nmap can be very handy in SNMP penetration testing as it is loaded with very
    useful `.nse` scripts for this mission, such as:'
  prefs: []
  type: TYPE_NORMAL
- en: '`snmp-info.nse`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`snmp-netstat.nse`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`snmp-brute.nse`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`snmp-interfaces.nse`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`snmp-processes.nse`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'To defend against SNMP attacks, we need to:'
  prefs: []
  type: TYPE_NORMAL
- en: Change default passwords
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Block access to UDP ports `161`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use SNMPv3 for decrypting passwords
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use only the required SNMP agents
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: DNS security
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The **Domain Name System** (**DNS**) was developed in 1983 by American scientists,
    Paul Mockapetris and Jon Postel. We all know that remembering websites using their
    IP addresses is hard, so the need for an easier naming service was a must. This
    was the goal of DNS, as it provides a naming structure based on names and not
    IP addresses. The diagram here shows the different steps of DNS:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00081.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'The DNS data is distributed among many locations, based on a specific hierarchy
    across the globe, to ensure a faster information transfer. In general, we have
    root domains (13), top-level domains and second-level domains:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00082.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'A **Fully Qualified Domain Name** (**FQDN**) format is: `<host_name>.<Domain_name>`'
  prefs: []
  type: TYPE_NORMAL
- en: 'To test a zone transfer, you can use a host utility:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00083.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: DNS attacks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'DNS is facing a various number of malicious attacks. These are some of the
    DNS attacks:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Single point of failure**: One failure can result in the simultaneous stopping of
    the entire system'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Man-in-the-middle (MITM) attacks**: During this attack, the attacker intercepts
    the traffic'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**DNS cache poisoning**: Here, the attacker redirects the victim to a malicious
    server'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Kaminsky DNS vulnerability**: This vulnerability could allow an attacker
    to redirect network clients to alternate servers of his own choosing, presumably
    for ill ends'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Dynamic DNS (DDNS):** A malware developer use DDNS to quickly change the
    address'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Distributed Denial of Service (DDoS) attacks:** The attacker floods the target
    with unhandled requests'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Sniffing attacks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Sniffing is the process of intercepting network traffic by turning the **network
    interface card** (**NIC**) to promiscuous mode, in order to be able to sniff the
    transmitted data. There are two types of network sniffing – active and passive
    sniffing:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Passive sniffing**: This occurs at hub devices or switches without injecting
    any additional packets.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Active sniffing**: This is done by injecting **Address Resolution Protocol**
    (**ARP**) packets into the network. The following are some active network sniffing
    attacks:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: MAC flooding—this is the process of flooding the CAM table with random data
    until it is full
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Switch port stealing
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: These two previous attacks could be avoided by allowing only one MAC address
    on the switch port and implementing port security.
  prefs: []
  type: TYPE_NORMAL
- en: '**ARP Poisoning**: ARP is used to resolve MAC addresses. An attacker could
    forge the ARP requests to flood a switch. It is called poisoning when they flood
    the ARP cache.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**MAC spoofing**: This is the act of sniffing a MAC address and using it in
    another context. To defend against this attack, you need to block traffic that
    is not mentioned in the binded table. This is an illustrated sniffing attack'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/00084.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Generally, to defend against sniffing attacks, we need to follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Use secure protocols, such as SFTP and HTTPS, instead of FTP and HTTP
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use SSH and security protocols (IPSec)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Identify MAC addresses from the network interface card
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Always check whether there is a machine that is using the promiscuous mode
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Deploy IDS
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Wireshark is a well-known tool for troubleshooting network issues. To download
    it, visit [https://www.wireshark.org/download.html](https://www.wireshark.org/download.html).
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00085.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Choose your version and install it on your computer:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00086.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Congratulations! You can use it to analyze all the traffic on your network.
    Select your network card:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00087.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Now, you are ready to explore it:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00088.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: DDoS attacks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'DDoS attacks occurs when compromised devices flood the network traffic of a
    targeted system. This type of attack threatens the availability of the system.
    When it comes to DDoS attacks, there are four attack vectors:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Volumetric attack**: This floods the victim using the organization''s bandwidth.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Fragmentation attacks**: This attack exploits datagram fragmentation mechanisms
    by preventing the  reassembling back of fragmented data packets. It is also called Teardrop
    attack.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**TCP state-exhaustion attack**: This attack exhaust the  number of concurrent
    connections supported by web servers, load balancers and firewalls.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Application layer attack:** This uses application weaknesses to disable the
    service. As shown in the following graph, an attacker exploits compromised hosts
    also known as zombies to perform a DDoS attack against his target.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/00089.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Types of DDoS attacks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**SYN flooding**: This is done when an attacker sends an SYN request without
    replying to the acknowledgment.'
  prefs: []
  type: TYPE_NORMAL
- en: '**ICMP flood attack**: This is the process of flooding the server with ICMP
    requests without waiting for the response. Smurf attacks, ICMP floods, and ping
    floods are forms of ICMP flood attacks. As a demonstration, you can try the hping3
    utility, using the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Where `-flood` means flood mode (sending requests without waiting for responses)
    and `-S` stands for the SYN requests option:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00090.gif)'
  prefs: []
  type: TYPE_IMG
- en: '**Application flood attack**: This attack targets applications in order to
    lose or degrade an online service. The attacks flood an application so it cannot
    handle requests properly.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Botnets**: These are networks of compromised machines that are generally controlled
    by a **command and control** (**C2C**) channel.'
  prefs: []
  type: TYPE_NORMAL
- en: Defending against DDoS attacks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The following are some countermeasures for use against **DDoS** attacks:'
  prefs: []
  type: TYPE_NORMAL
- en: Implementing detection mechanisms, especially signal analysis techniques
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Deploying high-availability solutions and redundancy resources
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Disabling non-required services
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Traffic pattern analysis
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: DDoS scrubbing centers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'On a data center scale, implementing DDoS scrubbing centers is a wise decision
    to defend against DDoS attacks, where traffic is analyzed and the normal traffic
    is passed back to the network. Usually, this central station is used by large-scale
    enterprises such as internet services and cloud providers:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00091.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Software-Defined Network penetration testing
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'A **Software-Defined Network** (**SDN**) is a network architecture with a centralized
    fully programmable controller that has a view of all the paths and devices of
    a network in one entity. That is why, it is considered as a single point of configuration.
    This huge automation shift adds great value to a corporate network. The graph
    below represent the different SDN layers and the interactions between them:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00092.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'In the classic networking stack, every component implements two aspects: control
    and data entities. But in SDNs, we isolate these two panels. The following diagram
    illustrates the difference between the two networking approaches:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00093.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'There are three main SDN models:'
  prefs: []
  type: TYPE_NORMAL
- en: The network virtualization model
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The evolutionary model
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The OpenFlow model
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'A typical SDN architecture is composed of the following three main components:'
  prefs: []
  type: TYPE_NORMAL
- en: '**SDN controller**: This is an intelligent logical entity that controls operations
    between applications and devices to maintain a global view of the corporate network'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**SDN networking devices**: These are responsible for forwarding and processing
    data across the network'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**SDN applications**: These are the programs that send the desired operation
    to the SDN controllers via APIs'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: SDN attacks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This new networking model is recent, but now it is a high-value target for
    attackers. As discussed before, we said that a single point of control is a huge
    threat for assets. SDN comes with a single point of control; that is why great
    power comes with great responsibility. If an attacker succeeds in compromising
    a SDN, they will control the entire network. Another attack vector is SDN applications;
    in the end, they are programs and, as such, any software malfunction or badly
    written code could lead to a system compromise. DDoS attacks and sniffing are
    also real threats to SDNs that can damage the entire network. The following illustration
    describes some attacks in the different model layers:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00094.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: SDNs penetration testing
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As a penetration tester, your role is to simulate SDN attacks to try to identify
    weaknesses. There are many SDN penetration testing frameworks currently out there.
  prefs: []
  type: TYPE_NORMAL
- en: 'DELTA: SDN security evaluation framework'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'DELTA: SDN security evaluation framework is a security framework based on attacking
    scenarios. It also provides fuzzing techniques in the case of unknown SDN attacks.
    It contains the following four agents, as shown:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Agent Manager**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Application Agent**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Channel Agent**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Host Agent**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/00095.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'You can clone the DELTA framework using GitHub via this command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'This is the main architecture of the DELTA framework:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00096.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: SDNPWN
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'SDNPWN is a toolkit for testing the security of SDNs. It provides a simple
    command-line tool to test SDN attacks. To download SDNPWN, you can clone the repository
    by typing:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: You can use the toolkit after executing the scripts.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'You can choose the attack by executing its module. These are some available
    modules:'
  prefs: []
  type: TYPE_NORMAL
- en: '`[*] Available modules:``[+] arpmon``[+] controller-detect``[+] dp-arp-poison``[+]
    dp-mitm``[+] help``[+] host-location-hijack``[+] info``[+] lfa-relay``[+] lfa-scapy``[+]
    lldp-replay``[+] mods``[+] of-gen``[+] of-switch``[+] phantom-host-scan``[+] phantom-storm``[+]
    sdn-detect``[+] system`'
  prefs: []
  type: TYPE_NORMAL
- en: Attacks on database servers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Databases are a vital component in every organization. They represent a serious
    target for attackers because they contain sensitive data. Databases are facing
    many serious threats; these are some of the database attacks:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Excessive privileges**: This is an attack where the attacker gains unauthorized
    privileges to access confidential information'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**SQL injection**: This is a server-side attack that takes advantage of vulnerabilities
    in web applications to send unauthorized database queries.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Weak authentication**: An attacker can use social engineering attacks and
    brute forcing to access when the passwords are weak'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Exposure of backup data**: Non-encrypted backups represent a real danger
    for an organization. All the backups need to be encrypted.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we covered the essential skills to secure organization networks
    through understanding networking concepts and hands-on experience to respond to
    network breaches. The chapter not only gives you the ability to defend modern
    day networking attacks, but it also puts you in a strong position to be ready
    to secure next-generation networking technologies, taking SDNs as a study case.
    The next chapter will take you to another important component in modern enterprises.
    You will be confronted with Microsoft Active Directory threats, and you will be
    stronger by gaining the in-demand skills to secure Active Directory.
  prefs: []
  type: TYPE_NORMAL
