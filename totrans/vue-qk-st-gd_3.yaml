- en: Working with Vue-CLI, Components, Props, and Slots
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The previous chapter was an introduction to the basic concepts of Vue. We will
    start this chapter with a more realistic approach: we''ll introduce Vue-cli. We''ll
    look at the component hierarchy, global and local components, and communication
    between components. We will introduce slots, and we will also examine the difference
    between slots and props.'
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Vue component hierarchy, and global and local components
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using Vue-cli
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting up code editors to use with Vue
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The structure of our Vue-cli-based project
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding basic functionality to a child component
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding props to our `HelloAgain.vue`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction to slots
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Vue component hierarchy, and global and local components
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'As we learned in [Chapter 2](28e7b192-ef00-4ece-bd6c-4390d095bc45.xhtml), *Basic
    Concepts of Vue 2,* to get a new Vue instance running, we use new Vue:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Our `app` component resides inside this Vue instance.
  prefs: []
  type: TYPE_NORMAL
- en: 'The app component usually has a child component, like we saw in this example
    from [Chapter 2](28e7b192-ef00-4ece-bd6c-4390d095bc45.xhtml), *Basic Concepts
    of Vue 2*: [https://codepen.io/AjdinImsirovic/pen/xzpOaJ](https://codepen.io/AjdinImsirovic/pen/xzpOaJ):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'What we did not mention in the previous chapter is this:'
  prefs: []
  type: TYPE_NORMAL
- en: A child component can be reused as many times as needed
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A child component can also have its own children
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'An example of this is available in the following pen: [https://codepen.io/AjdinImsirovic/pen/ZjdOdK](https://codepen.io/AjdinImsirovic/pen/ZjdOdK).'
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is the code which demonstrates these two principles:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'As seen already, to add a component to our Vue instance, we are using the following
    syntax:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: In Vue terminology, we use this code to **register** a component. As described
    before, it's referred to as **global registration**. There is also **local registration**.
  prefs: []
  type: TYPE_NORMAL
- en: 'Local registration works similarly to the `Vue.component` syntax. The only
    difference in the code is how we introduce the local component when compared to
    a global one. In the previous code, we had the following global component:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Converting this global component to a local component is as simple as removing
    this snippet of code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Instead of the previous code, we''ll simply make a new variable and give it
    the exact same options object that we used in the global component, like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'In order to use this local component in our Vue instance, we''ll introduce
    the `components` option, like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: An example with a local component is available here: [https://codepen.io/AjdinImsirovic/pen/ZMzrpr](https://codepen.io/AjdinImsirovic/pen/ZMzrpr).
  prefs: []
  type: TYPE_NORMAL
- en: However, the previous example is incomplete on purpose. As we can see, the `customArticle` local
    component is only available in the main Vue instance, but it is not available
    in the `anotherCustomArticle` component.
  prefs: []
  type: TYPE_NORMAL
- en: 'To make this work and complete the example, we need to tweak this bit of code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'We will simply remove the comments on these three lines:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: By doing that, we have registered the local component `customArticle` in the
    global component `anotherCustomArticle`. Basically, we are following the same
    procedure of registering a local component in our main Vue instance, and we are
    applying that same approach of registering local component in our `anotherCustomArticle`
    global component.
  prefs: []
  type: TYPE_NORMAL
- en: 'To get into the nuances of global and local registration, you can refer to
    this section of the official Vue documentation:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://vuejs.org/v2/guide/components-registration.html](https://vuejs.org/v2/guide/components-registration.html).'
  prefs: []
  type: TYPE_NORMAL
- en: In the following section, we'll start using Vue-cli.
  prefs: []
  type: TYPE_NORMAL
- en: Using Vue-CLI
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In order to start using Vue-cli, we need to have Node.js set up on our machine,
    and we also need to have a command-line app on our operating system of choice.
  prefs: []
  type: TYPE_NORMAL
- en: For example, my preferred tools are Windows 10 and Git bash for Windows.
  prefs: []
  type: TYPE_NORMAL
- en: There are many different operating systems and command-line apps that you could
    potentially be using.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you run into problems during the installation of any of the tools mentioned
    in this section, it might be worthwhile to have a look at this in-depth guide
    on installing Node.js on your operating system:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://www.packtpub.com/mapt/book/web_development/9781788626859/2](https://www.packtpub.com/mapt/book/web_development/9781788626859/2)'
  prefs: []
  type: TYPE_NORMAL
- en: Installing Git bash
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You first need to visit [https://git-scm.com/downloads](https://git-scm.com/downloads),
    which lets you choose between macOS X, Windows, and Linux/Unix installations.
    After clicking on the Windows download, you can proceed with the installation
    steps for Git bash. Just following the default preset options during the installation
    should be fine.
  prefs: []
  type: TYPE_NORMAL
- en: Installing nvm
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To download the Node version manager for Windows, visit this link:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://github.com/coreybutler/nvm-windows/releases](https://github.com/coreybutler/nvm-windows/releases)'
  prefs: []
  type: TYPE_NORMAL
- en: Once on the page, click the `nvm-setup.zip` file to download it, then run the
    downloaded `nvm-setup.exe` and go through the regular installation steps.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, start Git bash with administrator privileges and run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'The following message will be logged to the console:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Why use nvm?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'There are two major reasons:'
  prefs: []
  type: TYPE_NORMAL
- en: Security-critical upgrades
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Easier switching between Node versions in different projects
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The first reason listed here has to do with future updates to Node.js. In case
    there is a major security patch a few month after this book is published, it would
    be smart to update Node on your system. Using nvm makes this easy, which brings
    us to the second point. Even if there are no major releases of Node available
    for you to upgrade, you could still run different versions of Node based on the
    needs of different projects you'll be working on. Either way, using nvm pays off.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once the download is complete, in our Git bash we can simply run this command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Now, we are ready to use Vue-cli.
  prefs: []
  type: TYPE_NORMAL
- en: Installing and updating Vue-cli
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: It might be interesting to note that Vue-cli is a wrapper around Webpack, which
    has been tweaked and adjusted so it provides the best possible experience both
    during development and when releasing our Vue apps into production. This is a
    major plus for developers, since this setup lets us focus on coding without having
    to grapple with the toolchain for extended periods of time.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s open up Git bash and run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Since Vue-cli is an `npm` package, you can read more about it here: [https://www.npmjs.com/package/vue-cli](https://www.npmjs.com/package/vue-cli).
  prefs: []
  type: TYPE_NORMAL
- en: 'To check the current version of Vue-cli installed on your system, run this
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'Note that there has been a major upgrade between Vue-cli versions 2 and 3\.
    To make sure that you are using the most up-to-date version on your system, you
    can run this command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: This command will update your version of Vue-cli to the most recent one. The
    update is local, meaning it will put it in the `node_modules` folder of the folder
    in which you run the previous command. Note that this operation could take some
    time because of all the dependencies that need to be installed.
  prefs: []
  type: TYPE_NORMAL
- en: Before initializing our project using Vue-cli, it would be beneficial to quickly
    list the improvements that version 3 of Vue-cli brings. Hopefully, this will reinforce
    some of the key points made in [Chapter 1](5fdb984c-98f5-4703-96ce-7bd3150fbe2f.xhtml), *Introducing
    Vue*, regarding the ease of use of Vue.
  prefs: []
  type: TYPE_NORMAL
- en: 'The goals of version 3 of Vue-cli are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Simplify and streamline tooling to avoid toolchain fatigue for frontend development
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Follow best practices in the tooling and thus make it become the default for
    Vue apps
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'There is also a whole slew of features and upgrades to the new version of Vue-cli:'
  prefs: []
  type: TYPE_NORMAL
- en: Preset Webpack configuration for hot module replacement, tree-shaking, and so
    on
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ES2017 features
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Babel 7 support
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: PostCSS support
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Optional integration for Typescript, PWA, Jest, E2E testing, and so on
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Put succinctly, Vue.js is keeping up with the times, and Vue-cli is just more
    proof of that.
  prefs: []
  type: TYPE_NORMAL
- en: Initializing a new project with Vue-cli
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Once installed, we can initialize a new project with the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: We are giving our Vue app the name of *quickstart-vue*. We might as well have
    named it anything else.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once we run the preceding command, we can choose to use a preset, or to manually
    pick features we''d like to use:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'We could choose the default preset, but just as a little exercise, let''s choose
    the Manually select features option instead. Then we''ll choose `npm` rather then
    `yarn`. That will result in the following output on the screen:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'You will know that the plugins have been installed when you see this message:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'Now we can simply follow the previous instructions and change into the `quickstart-vue` directory:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, we will run the server (which is actually running a Webpack dev server
    in the background):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'The message that our app is available at port `8080` will be logged out to
    the console. So, let''s open up our browser at `http://localhost:8080` and look
    at the default site:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/7ffa1c92-53e9-4b24-b12b-7e03948fe060.png)'
  prefs: []
  type: TYPE_IMG
- en: In the next section, we'll set up two editors to use with our new Vue project.
    These editors are Sublime Text and Visual Studio Code.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up code editors to use with Vue
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'There are a number of code editors and **IDEs** (**integrated development environments**)
    that we can use to work with Vue. Some of the more popular ones include these:'
  prefs: []
  type: TYPE_NORMAL
- en: Sublime Text [https://www.sublimetext.com/](https://www.sublimetext.com/)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Visual Studio Code (VS Code), [https://code.visualstudio.com/](https://code.visualstudio.com/)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Atom, [https://atom.io/](https://atom.io/)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: WebStorm, [https://www.jetbrains.com/webstorm/](https://www.jetbrains.com/webstorm/)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Visual Studio 2017, [https://visualstudio.microsoft.com/downloads/](https://visualstudio.microsoft.com/downloads/)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In this section, we'll look at using Vue.js in Sublime Text and VS Code.
  prefs: []
  type: TYPE_NORMAL
- en: Working with Vue.js in Sublime Text 3
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Sublime Text is a mature and fun-to-use text editor, and so we will download
    it and set it up to be used with our Vue.js projects.
  prefs: []
  type: TYPE_NORMAL
- en: Dowloading Sublime Text 3
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We''ll begin by downloading Sublime Text 3 from the download page:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://www.sublimetext.com/3](https://www.sublimetext.com/3)'
  prefs: []
  type: TYPE_NORMAL
- en: Next, visit the website, [https://packagecontrol.io/](https://packagecontrol.io/),
    which is the home of the package manager for Sublime Text.
  prefs: []
  type: TYPE_NORMAL
- en: Install Package Manager
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'On the package manager website, click the Install Now button in the top right
    of the page and follow these installation steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Select and copy all the text inside the Sublime Text 3 tab.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open up the newly installed Sublime Text 3.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Inside Sublime Text 3, press the keyboard shortcut of *Ctrl* +  *`* (hold and
    press control and then press the backtick key). On most keyboards, the backtick
    character is available to the left of number 1 on the alphanumerical section of
    the keyboard.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Paste the code copied from [https://packagecontrol.io](https://packagecontrol.io)
    into the bottom input field that opened up in the previous step.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'After completing these steps, restart Sublime Text and you''ll have access
    to a quick-launch installer via this keyboard shortcut: *Ctrl* + *Shift* + *P*.'
  prefs: []
  type: TYPE_NORMAL
- en: 'This keyboard combination will display a little input in the middle of the
    screen, and you can type the word `install` inside it. This will show different
    options that you can either click on with a mouse or use the `arrow up` and `arrow
    down` keys to highlight, then the `Enter` key to run:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/951589bd-b6ae-4cda-985d-1a8a667b29c3.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Next, select the option that reads Package control: Install package.'
  prefs: []
  type: TYPE_NORMAL
- en: 'This is the list of packages that we will install:'
  prefs: []
  type: TYPE_NORMAL
- en: Vue Syntax Highlight, at [https://packagecontrol.io/packages/Vue%20Syntax%20Highlight](https://packagecontrol.io/packages/Vue%20Syntax%20Highlight)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Vuejs Snippets, at [https://packagecontrol.io/packages/Vuejs%20Snippets](https://packagecontrol.io/packages/Vuejs%20Snippets)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: JavaScript Beautify, at [https://packagecontrol.io/packages/Javascript%20Beautify](https://packagecontrol.io/packages/Javascript%20Beautify)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Interestingly, the Chrome browser has recently* received a similar quick-launch
    functionality, available via the same shortcut keys. To see it in action, you
    can simply open the developer tools utility with the *F12* key and then run the
    *Ctrl* + *Shift* + *P* shortcut keys.
  prefs: []
  type: TYPE_NORMAL
- en: For example, in the launcher that opens, you can type the word node, then click
    on the first command in the drop-down, Capture node screenshot. This command will
    capture a screenshot of the element you are currently on in the DOM tree of the
    DevTools.
  prefs: []
  type: TYPE_NORMAL
- en: '* A few months ago'
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, we'll look at setting up our Vue-based project in VS Code.
  prefs: []
  type: TYPE_NORMAL
- en: Working with Vue.js in VS Code
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Although Sublime Text has the advantage of maturity and being light on the system,
    which makes it easy to use on slower machines, VS Code is a viable alternative.
  prefs: []
  type: TYPE_NORMAL
- en: Installing VS Code and extensions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let's navigate to [https://code.visualstudio.com/download](https://code.visualstudio.com/download)
    and download the appropriate version of VS Code for our operating system.
  prefs: []
  type: TYPE_NORMAL
- en: If you are using Widows 10, you can easily see if your system is 32-bit or 64-bit.
    Simply use the shortcut keys *Winkey* + *X*, then click System in the contextual
    menu. A new window will open and you'll see whether your system is 32-bit or 64-bit
    in the Device Specifications | System type area.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once you have downloaded and opened VS Code, it''s easy to add extensions to
    it. Simply click the bottom-most icon (the extensions icon) on the left side of
    the screen:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/97362cf0-30ec-4c01-8ea5-b8c44ab19cce.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Clicking the icon will open up the extensions pane, into which you can type
    Vue and get back results similar to this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/bc0a53e8-0fd8-45cf-b294-b43753a24bda.png)'
  prefs: []
  type: TYPE_IMG
- en: Next, simply choose either of the Vue VS Code Extension Packs, then click on
    the green Install button. Extensions that are part of this pack include syntax
    highlighting, snippets, linting and error checking, formatting (such as js-beautify),
    auto completion, hover info, auto-rename-tags, npm support for VS code, ES6 snippets,
    ESLint, and more.
  prefs: []
  type: TYPE_NORMAL
- en: Alternatively, if you want to avoid bloat in your VS Code extensions, you can
    reduce it somewhat by installing the Vetur extension by Pine Wu instead of the
    previously mentioned Vue extension pack.
  prefs: []
  type: TYPE_NORMAL
- en: Once the installation is complete, we can simply click the button that reads
    Reload to restart VS Code and activate the extension. Finally, to get back to
    the tree structure of our project, simply click the top-most icon on the left
    side of the screen, just under VS Code's main menu.
  prefs: []
  type: TYPE_NORMAL
- en: The structure of our Vue-cli-based project
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this section, we''ll look at the file structure of our Vue project that
    we have set up using Vue-cli. Our `quickstart-vue` folder structure is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/411b4431-89b9-476b-ae41-c3f3b6d522ff.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Let''s first examine the contents of the `main.js` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: We begin by importing `Vue` from the `vue` folder. This `vue` folder is located
    in your `node_modules` folder.
  prefs: []
  type: TYPE_NORMAL
- en: Next, we import `App` from `App.vue`.
  prefs: []
  type: TYPE_NORMAL
- en: As we have already learned, `new Vue` creates a Vue instance, and we then pass
    it the options object.
  prefs: []
  type: TYPE_NORMAL
- en: 'Inside the options object, we are only setting the `render` property. As we
    can see, the `render` property''s value is an arrow function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: The arrow function accepts, as its parameter, the `App` component that we imported
    on line two of the `main.js` file.
  prefs: []
  type: TYPE_NORMAL
- en: 'As you can probably tell, the previous function is written in ES6\. Transpiled
    to ES5, it would look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: The preceding function receives a Vue template to be rendered. Where will it
    render? It will render it in our `index.html` page, replacing whatever static
    piece of the DOM we pass to the `$mount()` function.
  prefs: []
  type: TYPE_NORMAL
- en: Which location in the DOM that will be depends on what we pass on as the parameter
    to the `$mount()` function. In the previous code, we passed the `#app` parameter.
  prefs: []
  type: TYPE_NORMAL
- en: Where does `'#app'` come from? It comes from the `App` component, or, more specifically,
    from the `App.vue` file, located in our `src` folder.
  prefs: []
  type: TYPE_NORMAL
- en: The `src` folder holds all the actual application code of our Vue project.
  prefs: []
  type: TYPE_NORMAL
- en: 'Note that `main.js` is the only actual JavaScript file in our project—all the
    files in the `src` folder have the `.vue` extension. Every `.vue` file has three
    parts: the template, the script, and the style tag. The template defines the HTML
    of the component, the script defines the JS, and the style tag defines the CSS.
    Also, Vue-cli (with Webpack under the hood) puts all of this together because
    it understands how to work with `.vue` files.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s alter the `App.vue` file in our `src` folder, so that it looks like
    this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s also change the contents of `HelloWorld.vue`, so that it looks like
    this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, let''s add another component inside the `src/components/` folder.
    We''ll call it `HelloAgain.vue`, and we''ll give it the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'What we did in these three files is that we have mostly just removed some extra
    pieces of code to more clearly demonstrate the following points:'
  prefs: []
  type: TYPE_NORMAL
- en: Each `vue` file holds a single file component
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The structure of every single file component follows the same pattern: template
    at the top, script in the middle, and style at the bottom'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Style can be scoped to each individual file
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `App.vue` file imports the components from the `components` folder and exports
    itself so that it can be used by `main.js`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `HelloWorld` and `HelloAgain` components simply export themselves to the
    parent component, the `App.vue` file
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In order to use the newly introduced component (the `HelloAgain` component),
    the `App.vue` file needs to add it inside its `<template>` tag
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `App.vue` file also needs to both import and export the `HelloAgain` single
    file template so that `main.js` can use it
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`App.vue`, `HelloWorld.vue`, and `HelloAgain.vue` are examples of single-file
    components. Single-file components are the preferred way of working with components
    in our Vue projects.'
  prefs: []
  type: TYPE_NORMAL
- en: 'If you have changed the files as described previously, you should have the
    following screen in your browser at `http://localhost:8080`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/36843230-2832-419a-8797-b07bdbab04fa.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now that we have seen how the `vue/components/` folder is organized and how
    it basically works, we will list other important files in our Vue project:'
  prefs: []
  type: TYPE_NORMAL
- en: List of files that should not be tracked by Git source version control: `.gitignore`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Config file for Babel:`.babel.config.js`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: File that lists the dependencies and other information of our npm-based projects:`package.json`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'A manual for our app in markdown format: `README.md`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Of course, there is also the public folder, which contains our compiled application,
    referenced from the `index.html` file. This is the file that will ultimately be
    rendered and re-rendered in the browser, as our Vue app keeps compiling. The content
    of the `index` file is very simple:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: As mentioned before, the `div` with the `id` attribute set to `app` is our Vue
    app's entry point.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have a better understanding of our project structure, we will move
    on to building child components.
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, we will add some basic functionality to our `HelloAgain`
    component.
  prefs: []
  type: TYPE_NORMAL
- en: Adding basic functionality to a child component
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we will add some very basic functionality to a child component.
    Before we get into the specifics of how this is done, we will also need to install
    the official Vue Chrome extension.
  prefs: []
  type: TYPE_NORMAL
- en: 'The Vue developer tools extension for Chrome is available at this URL: [http://bit.ly/2Pkpk2I](http://bit.ly/2Pkpk2I).'
  prefs: []
  type: TYPE_NORMAL
- en: Installing the official Vue Chrome extension is straightforward; you just install
    it like any other Chrome extension.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once you have completed the installation, you will have a Vue logo available
    in the top-right area of Chrome, and clicking that logo will give you the following
    message:'
  prefs: []
  type: TYPE_NORMAL
- en: Vue.js is detected on this page. Open DevTools and look for the Vue panel.
  prefs: []
  type: TYPE_NORMAL
- en: 'Opening DevTools is easy: just press the F12 key. Then you can find the Vue
    panel as one of the tabs in the area which has the following tabs: Elements, Console,
    Sources, and so on. You should get something similar to the following screen:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/57fb3263-e102-4969-a3d2-8b4dc908bc44.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Back in VS Code, let''s open up the `HelloAgain.vue` component and update the
    template section of the code so that it looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s also update the `script` tag, like so:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, we''ll update the styles to make our button look nicer:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'The end result of this update will be rendered in our browser as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/36b70dfd-26c2-402f-a6ae-6657f22cc9bd.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now that we have looked at building templates and working with some basic functionality,
    let''s switch our focus to another important topic: communication between components.
    We''ll begin by revisiting props, which are a way to communicate between parent
    and child components.'
  prefs: []
  type: TYPE_NORMAL
- en: Adding props to our HelloAgain.vue
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we will briefly revisit props to see a practical example of
    how to communicate between a parent and a child component in Vue. In other words,
    we want to take some data from the parent component and pass it to the child component.
    The data we will be passing will simply be additional numbers to be included in
    the counter of our `quickstart-vue` app.
  prefs: []
  type: TYPE_NORMAL
- en: 'In our `App.vue` file, we''ll add a button:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'The button is placed between the two components we already had. We have added
    a `v-on` directive, tracking a click event on the button. The click event will
    trigger the `addTen` method, so we will specify it in between the `<script>` tags
    of our `App.vue` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'The `addTen` method is using the `countUp` piece of data, so let''s add this
    new data to our `<script>` too:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: So, initially, our `data` function in `App.vue` returns `countUp` of zero. Whenever
    a user clicks the button in our `App.vue` component, the value of `countUp` increases
    by 10\. This value is the data that we want to pass to the child component, namely
    to the `HelloAgain.vue` child component. Our goal is to add this data from the
    parent to the value stored in the counter in the child component.
  prefs: []
  type: TYPE_NORMAL
- en: 'This is where the props syntax comes in. To specify to our `HelloAgain.vue`
    component that it should expect the data from the parent, we will add the following
    code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: The value of the `props` key is an array, and we add strings of props that the
    child component should be expecting from the parent.
  prefs: []
  type: TYPE_NORMAL
- en: Note that the `props` option can also be an object. An example of using an object
    for our `props` option would be, for example, if we'd want to validate the data
    being passed from the parent to the child component. We will validate props in
    later chapters of this book.
  prefs: []
  type: TYPE_NORMAL
- en: 'Still in `HelloAgain.vue`, we will alter the `<span>` tag inside its template,
    like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: 'Now that we have set up the code in both the parent and the child, it''s just
    the matter of passing the data from one to the other. We will do that inside the
    `App.vue` template by adding the `v-bind` directive to the `<HelloAgain />` tag.
    Here is the updated `App.vue` template:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: Note that we are binding the `counterFromParent` to the value of `countUp`.
    The value of `countUp` starts from zero, and upon every button click on the parent's
    button, the `addTen` method will be run, which we specify in the `methods` option
    of the parent `<script>` tag.
  prefs: []
  type: TYPE_NORMAL
- en: The `addTen` method adds 10 to the current value of `countUp`.
  prefs: []
  type: TYPE_NORMAL
- en: On the child side, in the `HelloAgain.vue` component, we simply add the current
    value of `counterFromParent` to our `counter` variable. To get the value of `counterFromParent`,
    we list it in the `props` array of the `<script>` tag of our `HelloAgain.vue`
    component.
  prefs: []
  type: TYPE_NORMAL
- en: Passing data from children to parent components
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To pass data from a child component to a parent component, we use the following
    syntax:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: 'The `$` sign is there to signify a built-in Vue function. This specific one,
    `$emit`, is used to send a custom event to the parent. The first parameter that
    we pass to the `$emit` function is the name of the custom event. For example,
    we could reset the counter to zero, so we might name the custom event like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: 'The second argument is the data to be passed, so we will pass the current counter
    value, like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: 'Of course, this means that we need to update the value of `countUp` so that
    it goes back to zero. In order to do that, we need to update the `methods` option
    in the `script` tag of our `HelloAgain` child component so that it looks like
    this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: Basically, we are saying in our methods option that whenever the `resetTheCounter`
    method is run, the `countUp` value should be reset to `0`. Next, we follow up
    by emitting this updated value in the `counterHasBeenReset` custom event.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now let''s add a reset button to the child component `template` tag, also in
    `HelloAgain.vue`. We will do that by simply adding another line to our `template`
    tag:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: As we see here, the button click will run the `resetTheCounter` method.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now that we are emitting the event, we will capture it in the parent component
    by using the following syntax:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: 'As we can see here, we have added to the `<HelloAgain>` tag in our parent component.
    Specifically, we have added a `v-on` directive as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: The component is listening for the `counterHasBeenReset` custom event, which
    will be emitted from the child component. When such an event is captured in the
    parent, the value of `countUp` will be set to whatever its value is in the event
    itself. Since we have set it to zero, that's what it will be.
  prefs: []
  type: TYPE_NORMAL
- en: There are alternative ways to communicate between components in Vue (both parent-to-child
    and child-to-child), and we will discuss them in a later chapter, when we discuss
    Vuex.
  prefs: []
  type: TYPE_NORMAL
- en: The end result of this exercise is that we will reset the values in the counter
    that have been added from the parent component, but the event will not affect
    the values added from the child component.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have learned about custom events, we can continue our discussion
    of components by looking at slots.
  prefs: []
  type: TYPE_NORMAL
- en: Introduction to slots
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Slots are a way to reuse components. With props, we are passing data to a component.
    But what if we wanted to pass entire components to other components? That's where
    slots come in.
  prefs: []
  type: TYPE_NORMAL
- en: Slots are simply a way to pass on more complex code to our components. They
    can be just some HTML, or even entire components.
  prefs: []
  type: TYPE_NORMAL
- en: 'To insert HTML elements from a parent to a child component, we use the `slot`
    element inside a child component:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: The actual content of the slot is specified in the parent component.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is an example of slots in use:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: This example can be viewed live here: [https://codepen.io/AjdinImsirovic/pen/ERoLQM](https://codepen.io/AjdinImsirovic/pen/ERoLQM).
  prefs: []
  type: TYPE_NORMAL
- en: 'There are several key points when working with slots:'
  prefs: []
  type: TYPE_NORMAL
- en: Slots are implemented based on the web component's spec draft
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The slot styling is determined by the scoped style tag in the child component
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Slots enable the use of composable components
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You can use any template code in slots
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If you have more than one slot, you can name them (using the `name` attribute)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If you have more than one slot, you can leave out the `name` attribute in one
    of them, and that one will be the default slot
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: As of Vue 2.1.0, slots can be scoped
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Slot scope can be destructured using ES2015 expression destructuring
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: To add default information to a slot, you can simply add content to the slot
    tag.
  prefs: []
  type: TYPE_NORMAL
- en: 'It''s as simple as changing the code of the slot tag from this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: 'And changing it to this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: If you update the provided example pen by adding the default unnamed slot code
    referenced just above this line, you will notice the slot gets populated even
    though we have not referenced it in our Vue instance.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we looked at Vue's components. We discussed the Vue component
    hierarchy and the differences between global and local components. We fired up
    Vue-cli v3 and learned how to use it. We worked with `.vue` files and we set up
    the development in a couple of code editors. We learned about adding functionality
    to child components and the use cases for both props and slots. Finally, we looked
    at component communication in Vue.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will discuss filters as a way of changing what gets
    rendered on the screen without affecting the data behind it. We will also see
    how to adhere to the DRY rule of programming with the help of mixins.
  prefs: []
  type: TYPE_NORMAL
