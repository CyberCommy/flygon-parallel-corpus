- en: Appendix C – Installing third-party packages
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Packaging in Python has had a troubled and confusing history. Thankfully, the
    situation has settled down and a tool called `pip` has emerged as the clear front-runner
    among package installation tools for general purpose Python use. For more specialist
    uses such as numerical or scientific computing which rely on the *Numpy* or *Scipy*
    packages you should consider *Anaconda* as a strong alternative to `pip`.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
- en: Introducing `pip`
  id: totrans-2
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In this appendix we’ll focus on `pip`, as it is officially blessed by the core
    Python developers and comes with support out of the box. The `pip` tool is included
    and installed with Python since Python 3.4\. For older versions of Python 3, you’ll
    need to look up specific instructions on how to install `pip` for your platform,
    as you may need to use your operating system’s package manager, depending on how
    you originally installed Python. The best place to start is the [Python Packaging
    User Guide](https://packaging.python.org/tutorials/installing-packages/#install-pip-setuptools-and-wheel).
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
- en: The `venv` module will also ensure that `pip` is installed into newly created
    environments.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
- en: 'The `pip` tool is developed independently of the rest of the standard library,
    so there are often more recent versions available than the version that came packaged
    with your Python distribution. You can use `pip` to upgrade itself with:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  id: totrans-6
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: This is useful to do, to avoid repeated warning from `pip` about not being up-to-date.
    Bear in mind though, that this will only take effect in your current Python environment,
    which may be a virtual-environment.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
- en: The Python Package Index
  id: totrans-8
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `pip` tool can search for packages in a central repository — the *Python
    Package Index*, or *PyPI*, also known by the nickname “Cheeseshop” — and then
    download and install them along with their dependencies. You can browse the PyPI
    at [https://pypi.python.org/pypi](https://pypi.python.org/pypi). This is an extremely
    convenient way to install Python software, so it’s good to understand how to use
    it.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
- en: Installing with `pip`
  id: totrans-10
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: We’ll demonstrate how to use `pip` by installing the `nose` testing tool. `nose`
    is a sort of power-tool for running `unittest` based tests such as those we developed
    in Chapter 10\. One really useful thing it can do is *discover* all of your tests
    and run them. This means that you don’t need to add `unittest.main()` into your
    code; you can just use nose to find and run your tests.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
- en: 'First though, we need to do some groundwork. Let’s create a virtual environment
    (see Appendix B) so we don’t inadvertently install into our system Python installation.
    Create a virtual environment using `pyenv`, and activate it:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'As `pip` is updated much more frequently than Python itself, it’s good practice
    to upgrade `pip` in any new virtual environment, so let’s do that. Fortunately,
    `pip` is capable of updating itself:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: If you don’t upgrade `pip` it will give you warnings every time you use it,
    if a new version has become available since you last upgraded.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
- en: 'Now let’s use `pip` to install `nose`. `pip` uses subcommands to decide what
    to do, and to install modules you use `pip install package-name`:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'If this succeeds, `nose` is ready to use in our virtual environment. Let’s
    check that it’s available by trying to import it at the REPL and instrospecting
    the path at which it is installed:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'As well as installing a module, `nose` installs the `nosetests` program in
    the `bin` directory of the virtual environment. To really put the icing on the
    cake, let’s use `nosetests` to run the tests from `palindrome.py` from Chapter
    11:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Installing local packages with `pip`
  id: totrans-23
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'You can also use `pip` to install from local packages in files rather than
    from the Python Package Index. To do this, pass the filename of the packaged distribution
    to `pip install`. For example, in Appendix B we showed how to build a so called
    source distribution using `distutils`. To install this using `pip`, do:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Uninstalling packages
  id: totrans-26
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'A key advantage to installing packages with `pip` rather than directly invoking
    `setup.py` of the source distribution is that `pip` knows how to uninstall packages.
    To do so, use the `uninstall` subcommand:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`pip`安装软件包而不是直接调用源分发的`setup.py`的一个关键优势是，`pip`知道如何卸载软件包。要这样做，使用`uninstall`子命令：
- en: '[PRE7]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
