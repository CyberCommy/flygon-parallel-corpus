- en: Window Layout
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following recipes:'
  prefs: []
  type: TYPE_NORMAL
- en: Grouping widgets with frames
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using the Pack geometry manager
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using the Grid geometry manager
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using the Place geometry manager
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Grouping inputs with the FrameLabel widget
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Dynamically laying out widgets
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating horizontal and vertical scrollbars
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Widgets determine the actions that users can perform with our GUI application;
    however, we should pay attention to their placement and the relationships we establish
    with that arrangement. Effective layouts help users to identify the meaning and
    priority of each graphical element so that they can quickly understand how to
    interact with our program.
  prefs: []
  type: TYPE_NORMAL
- en: Layout also determines the visual appearance that users expect to find consistently
    across the whole application, such as always placing confirmation buttons at the
    bottom-right corner of the screen. Although this information might be obvious
    to us as developers, end users may feel overwhelmed if we do not guide them through
    the application by following a natural order.
  prefs: []
  type: TYPE_NORMAL
- en: This chapter will dive into the different mechanisms that Tkinter offers to
    lay out and group widgets and control other attributes, such as their size or
    spacing.
  prefs: []
  type: TYPE_NORMAL
- en: Grouping widgets with frames
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A frame represents a rectangular region of a window, typically used in complex
    layouts to contain other widgets. Since they have their own padding, border, and
    background, you can remark that the group of widgets is related logically.
  prefs: []
  type: TYPE_NORMAL
- en: Another common pattern for frames is to encapsulate part of the application's
    functionality so that you can create an abstraction that hides the implementation
    details of child widgets.
  prefs: []
  type: TYPE_NORMAL
- en: We will see an example that covers both scenarios by creating a component that
    inherits from the `Frame` class and exposes certain information on the containing
    widgets.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We will build an application that contains two lists, where the first one has
    a list of items and the second one is initially empty. Both lists are scrollable,
    and you can move items between them with two central buttons that transfer the
    current selection:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](images/4c30ba49-f25a-48ca-85ed-5533ffb88ce7.png)'
  prefs: []
  type: TYPE_IMG
- en: How to do it…
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We will define a `Frame` subclass to represent a scrollable list, and then
    create two instances of this class. The two buttons will also be directly added
    to the main window:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: How it works…
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Our `ListFrame` class has only two methods to interact with the inner list:
    `pop_selection()` and `insert_item()`. The first one returns and deletes the current
    selection, or none if there is no item selected, whereas the second one inserts
    a new item at the end of the list.'
  prefs: []
  type: TYPE_NORMAL
- en: 'These methods are used in the parent class to transfer an item from one list
    to the other one:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'We also took advantage of the parent frame containers to correctly pack them
    with the appropriate padding:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Thanks to these frames, our calls to the geometry manager are more isolated
    and organized in our global layout.
  prefs: []
  type: TYPE_NORMAL
- en: There's more…
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Another benefit of this approach is that it allows us to use different geometry
    managers in each container widget, such as using `grid()` for the widgets within
    a frame and `pack()` to lay out the frame in the main window.
  prefs: []
  type: TYPE_NORMAL
- en: However, remember that mixing these geometry managers within the same container
    is not allowed in Tkinter and will make your application crash.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The *Using the Pack geometry manager* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using the Pack geometry manager
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In previous recipes, we have seen that creating a widget does not automatically
    display it on the screen. We have called the `pack()` method on each widget to
    do so, which means that we used the Pack geometry manager.
  prefs: []
  type: TYPE_NORMAL
- en: This is one of the three available geometry managers in Tkinter, and it is well
    suited for simple layouts, such as when you want to place all the widgets on top
    of each other or side by side.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s suppose that we want to achieve the following layout in our application:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](images/fce828e9-1f75-4590-a50e-bb8adbc1d8eb.png)'
  prefs: []
  type: TYPE_IMG
- en: It consists of three rows, where the last one has three widgets placed side
    by side. In this scenario, the Pack geometry manager can easily add the widgets
    as expected, without the need for additional frames.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We will use five `Label` widgets with different texts and background colors
    to help us identify each rectangular region:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'We also added some options with the `opts` dictionary to make the size of each
    region clear:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](images/1a0e72a4-090a-4af8-af83-c8574e730056.png)'
  prefs: []
  type: TYPE_IMG
- en: How it works…
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To have a better understanding of the Pack geometry manager, we will explain
    step by step how it adds widgets to the parent container. Here, we pay special
    attention to the values of the `side` option, which indicates, the relative position
    of the widget with respect to the next one that will be packed.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we pack the two labels at the top of the screen. While the `tk.TOP`
    constant is the default value of the `side` option, we set it explicitly to clearly
    differentiate it from the calls where we used the `tk.LEFT` value:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](images/77b7063f-2c0b-4a2b-ab75-c1704861201d.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Then, we pack the next three labels with the `side` option set to `tk.LEFT`,
    which causes them to be placed side by side:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](images/0f54aec2-5957-4da5-9e32-d63acc06903f.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Specifying the side on `label_e` does not really matter, as long as it is the
    last widget we add to the container.
  prefs: []
  type: TYPE_NORMAL
- en: Keep in mind that this is the reason why order is so important when working
    with the Pack geometry manager. To prevent unexpected results in complex layouts,
    it is common to group widgets with frames so that when you pack all the widgets
    within a frame, you do not interfere with the arrangement of the other ones.
  prefs: []
  type: TYPE_NORMAL
- en: In these cases, we strongly recommend that you use the Grid geometry manager
    since it allows you to directly set the position of each widget with one call
    to the geometry manager and avoids the need for additional frames.
  prefs: []
  type: TYPE_NORMAL
- en: There's more…
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Apart from `tk.TOP` and `tk.LEFT`, you can pass the `tk.BOTTOM` and `tk.RIGHT`
    constants to the `side` option. They perform the opposite stacking, as their names
    suggest; however, it may be counterintuitive since the natural order we follow
    is from top to bottom and from left to right.
  prefs: []
  type: TYPE_NORMAL
- en: For instance, if we replace the `tk.LEFT` value with `tk.RIGHT` in our three
    last widgets, their order from left to right would be `label_e`, `label_d`, and
    `label_c`.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The *Using the Grid geometry manager* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Using the Place geometry manager* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using the Grid geometry manager
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Grid geometry manager is considered the more versatile of the three geometry
    managers. It directly reassembles the *grid* concept that is commonly used in
    user interface design—a two-dimensional table divided into rows and columns, where
    each cell represents the space available for a widget.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We will demonstrate how to use the Grid geometry manager to achieve the following
    layout:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](images/2f7823b8-c9f3-4408-8b62-eccfb7ab446d.png)'
  prefs: []
  type: TYPE_IMG
- en: This can be represented as a 3 x 3 table, where the widgets in the second and
    third columns span two rows and the widget at the bottom row spans three columns.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'As we did in the preceding recipe, we will use five labels with different backgrounds
    to illustrate the distribution of the cells:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: We also passed a dictionary of options to add some internal padding and expand
    the widgets to all the available space in the cells.
  prefs: []
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The placement of `label_a` and `label_b` is almost self-explanatory: they occupy
    the first and second rows of the first column, respectively—remember that grid
    positions are zero-indexed:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](images/956d78d6-3cda-41e4-949e-45489d30fdda.png)'
  prefs: []
  type: TYPE_IMG
- en: To expand `label_c` and `label_d` through multiple cells, we will set the `rowspan`
    option to `2`, so they will span two cells, starting from the position indicated
    with the `row` and `column` options. Finally, we will place `label_e` with the
    `columnspan` option to set it to `3`.
  prefs: []
  type: TYPE_NORMAL
- en: It is important to remark that in contrast with the Pack geometry manager, it
    is possible to change the order of the calls to `grid()` on each widget without
    modifying the final layout.
  prefs: []
  type: TYPE_NORMAL
- en: There's more…
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `sticky` option indicates the borders where the widget should stick, expressed
    in cardinal directions: north, south, west and east. These values are represented
    by the Tkinter constants  `tk.N`, `tk.S`, `tk.W`, and  `tk.E`, as well as the
    combined versions `tk.NW`, `tk.NE`, `tk.SW`, and `tk.SE`.'
  prefs: []
  type: TYPE_NORMAL
- en: For example, `sticky=tk.N` aligns the widget to the top border of the cell (north),
    whereas `sticky=tk.SE` positions the widget in the bottom-right corner of the
    cell (south-east).
  prefs: []
  type: TYPE_NORMAL
- en: Since these constants represent their corresponding lowercase letters, we shorthanded
    the `tk.N + tk.S + tk.W + tk.E` expression with the `"nswe"` string. This means
    that the widget should expand both horizontally and vertically—similar to the
    `fill=tk.BOTH` option of the Pack geometry manager.
  prefs: []
  type: TYPE_NORMAL
- en: If no value is passed to the `sticky` option, the widget is centered within
    the cell.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The *Using the Pack geometry manager* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Using the Place geometry manager* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using the Place geometry manager
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Place geometry manager allows you to set the position and size of a widget
    in absolute terms, or in relative terms to another one.
  prefs: []
  type: TYPE_NORMAL
- en: Of the three geometry managers, it is the least commonly used one. On the other
    hand, it can fit some complex scenarios where you want to freely position a widget
    or overlap a previously placed one.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To demonstrate how to work with the Place geometry manager, we will replicate
    the following layout by mixing absolute and relative positions and sizes:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](images/78190289-c61d-422c-8422-84a24b8a0d78.png)'
  prefs: []
  type: TYPE_IMG
- en: How to do it…
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The labels that we will display have different backgrounds and are defined
    in the order they are placed from left to right and top to bottom:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: If you run the preceding program, you can see the overlapping between `label_c`
    and `label_d` in the center of the screen, something that we have not achieved
    with other geometry managers.
  prefs: []
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The first label is placed with the `relwidth` and `relheight` options set to
    `0.25`, which means that its width and height are 25% of its parent container.
    By default, widgets are placed at the `x=0` and `y=0` positions and aligned to
    north-west, that is, the top-left corner of the screen.
  prefs: []
  type: TYPE_NORMAL
- en: The second label is placed at the absolute position—`x=100`—and aligned to the
    top border with the `anchor` option set to the `tk.N` (north) constant. Here,
    we also specified an absolute size with `width` and `height`.
  prefs: []
  type: TYPE_NORMAL
- en: The third label is centered on the window using the relative positioning and
    setting the `anchor` to `tk.CENTER`. Remember that a value of `0.5` for `relx`
    and `relwidth` means half of the parent's width and a value of `0.5` for `rely`,
    and `relheight` means half of the parent's height.
  prefs: []
  type: TYPE_NORMAL
- en: The fourth label is placed on top of `label_c` by passing it as the `in_` argument
    (note that Tkinter suffixes it with an underscore because `in` is a reserved keyword).
    When using `in_`, you might notice that the alignment is not geometrically exact. In
    our example, we had to add an offset of `2` pixels in each direction to perfectly
    overlap the right-bottom corner of `label_c`.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, the fifth label uses absolute positioning and relative size. As you
    may have already noticed, these dimensions can be easily switched since we assume
    a parent container of 200 x 200 pixels; however, only relative weights will work
    as expected if the main window is resized. You can test this behavior by resizing
    the window.
  prefs: []
  type: TYPE_NORMAL
- en: There's more…
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Another important advantage of the Place geometry manager is that it may be
    used in conjunction with Pack or Grid.
  prefs: []
  type: TYPE_NORMAL
- en: 'For instance, imagine that you want to dynamically display a caption over a
    widget when you right-click on it. You can represent this caption with a Label
    widget, which gets placed in the relative position where you clicked on the widget:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: As general advice, we recommend that you use any of the other geometry managers
    as much as possible in your Tkinter applications and leave this only for those
    specialized cases where you need a custom positioning.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The *Using the Pack geometry manager* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Using the Grid geometry manager* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Grouping inputs with the LabelFrame widget
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `LabelFrame` class can be used to group multiple input widgets, indicating the
    logical entity with a label they represent. It is typically used in forms and
    is very similar to the `Frame` widget.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We will build a form with a couple of `LabelFrame` instances, each one with
    their corresponding child input widgets:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](images/e9759bcf-5dd1-41ce-9de4-bdb6de6a32e9.png)'
  prefs: []
  type: TYPE_IMG
- en: How to do it…
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Since the purpose of this example is to show the final layout, we will add
    some widgets, without keeping their references as attributes:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: How it works…
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `LabelFrame` widget takes the `labelwidget` option to set the widget used
    as a label. If it is not present, it displays the string passed as the `text`
    option. For instance, instead of creating an instance with `tk.LabelFrame(master,
    text="Info")`, you can replace it with the following statements:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: This would allow you to do any kind of customization, such as adding an image.
    Note that we did not use any geometry manager for the label since it is managed
    when you place the frame.
  prefs: []
  type: TYPE_NORMAL
- en: Dynamically laying out widgets
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Grid geometry manager is easy to use both in simple and advanced layouts,
    and it is also a powerful mechanism to combine with a list of widgets.
  prefs: []
  type: TYPE_NORMAL
- en: We will take a look at how we can reduce the number of lines and call the geometry
    manager methods with just a few lines, thanks to list comprehensions and the `zip`
    and `enumerate` built-in functions.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The application we will build contains four `Entry` widgets, each one with
    its corresponding label that indicates the meaning of the input. We will also
    add a button to print all the entries'' values:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](images/a4586bd3-a7cf-4f0d-9ce6-a538e7114f37.png)'
  prefs: []
  type: TYPE_IMG
- en: Instead of creating and assigning each widget to a separate attribute, we will
    work with lists of widgets. Since we will track the index while iterating over
    these lists, we can easily invoke the `grid()` method with the appropriate `column`
    option.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We will aggregate the lists of labels and entries with the `zip` function.
    The button will be created and displayed individually, as it does not share any
    option with the rest of the widgets:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: You can enter different text on each input and click on the Print info button
    to verify that each tuple contains the corresponding label and entry.
  prefs: []
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Each list comprehension iterates over the strings of the fields list. While
    labels use each item as the displayed text, entries only need the reference to
    the parent container—the underscore is a common idiom that means the variable
    value is ignored.
  prefs: []
  type: TYPE_NORMAL
- en: 'Starting from Python 3, `zip` returns an iterator instead of a list, so we
    consume the aggregation with the list function. As a result, the `widgets` attribute
    contains a list of tuples that can be safely iterated multiple times:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, we have to call the geometry manager on each tuple of widgets. With the
    `enumerate` function, we can track the index of each iteration and pass it as
    the *row* number:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Note that we used the `for i, (label, entry) in ...` syntax because we must
    unpack the tuple generated with `enumerate`, and then unpack each tuple of the
    `widgets` attribute.
  prefs: []
  type: TYPE_NORMAL
- en: Within the `print_info()` callback, we iterate over widgets to print each label
    text with its corresponding entry value. To retrieve the labels' `text`, we used
    the `cget()` method, which allows you to get the value of a widget option by its
    name.
  prefs: []
  type: TYPE_NORMAL
- en: Creating horizontal and vertical scrollbars
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In Tkinter, geometry managers take all the necessary space to fit all the widgets
    in their parent container. However, if the container has a fixed size or exceeds
    the screen's size, there will be a region that will not be visible to users.
  prefs: []
  type: TYPE_NORMAL
- en: Scroll bar widgets are not automatically added in Tkinter, so you must create
    and lay them out as any other type of widget. Another consideration is that only
    a few widget classes have the configuration options that make it possible to connect
    them to a scrollbar.
  prefs: []
  type: TYPE_NORMAL
- en: To work around this, you will learn to take advantage of the flexibility of
    the **Canvas** widget to make any container scrollable.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To demonstrate the combination of the `Canvas` and `Scrollbar` classes to create
    a resizable and scrollable frame, we will build an application that dynamically
    changes its size by loading an image.
  prefs: []
  type: TYPE_NORMAL
- en: 'When the Load image button is clicked, it removes itself and loads an image into
    the `Canvas` that is larger than the scrollable region—for this example, we used
    a predefined image, but you can modify this program to select any other GIF image
    with a file dialog:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](images/5ed14b60-2769-43a6-9204-75d6a42f8198.png)'
  prefs: []
  type: TYPE_IMG
- en: 'This enables the horizontal and vertical scrollbars, which automatically adjust
    themselves if the main window is resized:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](images/1c73a705-07ce-497d-a353-1cc76c01b56e.png)'
  prefs: []
  type: TYPE_IMG
- en: How to do it…
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'When we will dive into the functionality of the Canvas widget in a separate
    chapter, this application will introduce its standard scroll interface and the
    `create_window()` method. Note that this script requires the file `python.gif`
    to be placed in the same directory:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: How it works…
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The first lines of our application create the scroll bars and connect them to
    the `Canvas` object with the `xscrollcommand` and `yscrollcommand` options, which
    take a reference to the `set()` method of `scroll_x` and `scroll_y`, respectively—this
    is the method in charge of moving the scroll bar slider.
  prefs: []
  type: TYPE_NORMAL
- en: 'It is also necessary to configure the `command` option of each scroll bar once
    the `Canvas` is defined:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: It is also possible to create the `Canvas` first and configure its options later,
    when the scroll bars are instantiated.
  prefs: []
  type: TYPE_NORMAL
- en: 'The next step is to add the frame to our scrollable `Canvas` with the `create_window()`
    method. The first argument it takes is the position to place the widget passed
    with the `window` option. Since the *x* and *y* axes of the `Canvas` widget start
    in the top-left corner, we placed the frame at the `(0, 0)` position and also
    aligned it to that corner with `anchor=tk.NW` (north-west):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Then, we will make the first row and column resizable with the `rowconfigure()`
    and `columnconfigure()` methods. The `weight` option indicates the relative weight
    to distribute the extra space, but in our case, there are no more rows or columns
    to resize.
  prefs: []
  type: TYPE_NORMAL
- en: 'The binding to the `<Configure>` event will help us to properly reconfigure
    the `canvas` when the main window gets resized. Handling this type of event follows
    the same principles that we saw in the previous chapter to process mouse and keyboard
    events:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: Finally, we will set the minimum size of the main window with the current width
    and height, which can be retrieved with the `winfo_width()` and `winfo_height()`
    methods.
  prefs: []
  type: TYPE_NORMAL
- en: 'In order to get the real size of a container, we have to force the geometry
    manager to draw all the child widgets first by calling `update_idletasks()`. This
    method is available in all widget classes, and forces Tkinter to process all pending
    idle events, such as redrawings and geometry recalculations:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'The `resize` method handles the window resize event and updates the `scrollregion`
    option, which defines the area of the `canvas` that can be scrolled. To easily
    recalculate it, you can use the `bbox()` method with the `ALL` constant. This
    returns the bounding box of the whole Canvas widget:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: Tkinter will automatically trigger several `<Configure>`­ events when we start
    our application, so there is no need to call `self.resize()` at the end of the
    `__init__` method.
  prefs: []
  type: TYPE_NORMAL
- en: There's more…
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Only a few widget classes support the standard scroll options: `Listbox`, `Text`,
    and `Canvas` allow `xscrollcommand` and `yscrollcommand`, whereas the Entry widget
    only allows the `xscrollcommand`. We have seen how to apply this pattern to a
    `canvas` since it can be used as a generic solution, but you can follow a similar
    structure to make any of these widgets scrollable and resizable.
  prefs: []
  type: TYPE_NORMAL
- en: Another detail to point out is that we did not call any geometry manager to
    draw the frame because the `create_window()` method does this for us. To better
    organize our application class, we could move all the functionalities that belong
    to the frame and its inner widgets to a dedicated `Frame` subclass.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The *Handling mouse and keyboard events* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Grouping widgets with frames* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
