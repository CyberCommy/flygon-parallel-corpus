- en: Performance Improvements, Tips, and Tricks
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we will focus on optimizing an application and discovering
    bottlenecks. These are some tips and tricks that can be used immediately by existing
    applications. Many of these recipes are necessary if you or your organization
    requires fully reproducible builds. They're also useful when you want to benchmark
    an application's performance. The final recipe focuses on increasing the speed
    of HTTP; however, it's always important to remember that the web world moves quickly,
    and it's important to refresh yourself on the best practices. For example, if
    you require HTTP/2, it has been available using the built-in Go `net/http` package
    since version 1.6.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following recipes:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
- en: Using the pprof tool
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Benchmarking and finding bottlenecks
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Memory allocation and heap management
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using fasthttprouter and fasthttp
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In order to proceed with all the recipes in this chapter, configure your environment
    according to these steps:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
- en: Download and install Go 1.12.6 or greater on your operating system from [https://golang.org/doc/install.](https://golang.org/doc/install)
  id: totrans-9
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open a Terminal or console application and create and navigate to a project
    directory such as `~/projects/go-programming-cookbook`. All code will be run and
    modified from this directory.
  id: totrans-10
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Clone the latest code into `~/projects/go-programming-cookbook-original` and
    optionally work from that directory rather than typing the examples manually:'
  id: totrans-11
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Optionally, install Graphviz from [http://www.graphviz.org/Home.php](http://www.graphviz.org/Home.php).
  id: totrans-13
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Using the pprof tool
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `pprof` tool allows Go applications to collect and export runtime profiling
    data. It also provides webhooks to access the tool from a web interface. This
    recipe will create a basic application that verifies a `bcrypt`-hashed password
    against a plaintext one, then it will profile the application.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
- en: You might have expected the `pprof` tool to be covered in [Chapter 11](eb7b5af6-36b8-4fbb-9d06-960586569cd5.xhtml),
    *Distributed Systems*, with other metrics and monitoring recipes. It was instead
    put in this chapter because it will be used to analyze and improve a program much
    in the same way that benchmarking can be used. As a result, this recipe will largely
    focus on `pprof` for analyzing and improving the memory usage of an application.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'These steps cover writing and running your application:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
- en: From your Terminal or console application, create a new directory called `~/projects/go-programming-cookbook/chapter14/pprof` and
    navigate to this directory.
  id: totrans-19
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Run this command:'
  id: totrans-20
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'You should see a file called `go.mod` that contains the following:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Copy tests from `~/projects/go-programming-cookbook-original/chapter14/pprof`,
    or use this as an exercise to write some of your own code!
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a directory named `crypto` and navigate to it.
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a file called `handler.go` with the following content:'
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Navigate up a directory.
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a new directory named `example` and navigate to it.
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a `main.go` file with the following content:'
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Run `go run main.go`.
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'You may also run the following command:'
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'You should now see the following output:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'In a separate Terminal, run the following:'
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: This will start a 30-second timer.
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Run several `curl` commands while `pprof` runs:'
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Return to the `pprof` command and wait for it to complete.
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Run the `top10` command from the `pprof` prompt:'
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'If you installed Graphviz or a supported browser, run the `web` command from
    the `pprof` prompt. You should see something like this with a much longer chain
    of red boxes on the right side:'
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/7df536c6-2641-4619-97a3-e9ada9b6084d.png)'
  id: totrans-46
  prefs: []
  type: TYPE_IMG
- en: The `go.mod` file may be updated and the `go.sum` file should now be present
    in the top-level recipe directory.
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If you have copied or written your own tests, go up one directory and run `go
    test`. Ensure that all the tests pass.
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  id: totrans-49
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `pprof` tool provides a lot of runtime information about your application.
    Using the `net/pprof` package is usually the most simple to configure—all that's
    required is listening on a port and doing an import.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
- en: In our case, we wrote a handler that uses a very compute-heavy application (`bcrypt`)
    so that we can demonstrate how they pop up when profiling with `pprof`. This will
    quickly isolate chunks of code that are creating bottlenecks in your application.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
- en: We chose to collect a general profile that causes `pprof` to poll our application
    endpoint for 30 seconds. We then generated traffic against the endpoint to help
    produce results. This can be helpful when you're attempting to check a single
    handler or branch of code.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
- en: Lastly, we looked at the top 10 functions in terms of CPU utilization. It's
    also possible to look at memory/heap management with the `pprof http://localhost:8080/debug/pprof/heap`
    command. The`web` command in the `pprof` console can be used to look at a visualization
    of your CPU/memory profile and helps highlight more active code.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
- en: Benchmarking and finding bottlenecks
  id: totrans-54
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Another method for determining slow parts of code is to use benchmarks. Benchmarks
    can be used to test functions for average performance and can also run benchmarks
    in parallel. This can be useful when comparing functions or doing micro-optimizations
    for certain code, especially to see how a function implementation might perform
    when using it concurrently. For this recipe, we'll create two structures that
    both implement an atomic counter. The first will use the `sync` package, and the
    other will use `sync/atomic`. We'll then benchmark both the solutions.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  id: totrans-56
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'These steps cover writing and running your application:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
- en: From your Terminal or console application, create a new directory called `~/projects/go-programming-cookbook/chapter14/bench` and
    navigate to this directory.
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Run this command:'
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'You should see a file called `go.mod` that contains the following:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Copy tests from `~/projects/go-programming-cookbook-original/chapter14/bench`,
    or use this as an exercise to write some of your own code!
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note that copied tests also include benchmarks written later in this recipe.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a file called `lock.go` with the following content:'
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Create a file called `atomic.go` with the following content:'
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Create a file called `lock_test.go` with the following content:'
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Create a file called `atomic_test.go` with the following content:'
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Run the `go test -bench .` command, and you will see the following output:'
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: If you have copied or written your own tests, go up one directory and run `go
    test`. Ensure that all the tests pass.
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  id: totrans-76
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This recipe is an example of comparing a critical path of code. For example,
    sometimes your application must execute certain functionality often, maybe every
    call. In this case, we've written an atomic counter that can add or read values
    from multiple go routines.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
- en: The first solution uses `RWMutex` and `Lock` or `RLock` objects to write and
    read, respectively. The second uses the `atomic` package, which provides the same
    functionality out of the box. We make the signatures of our functions the same,
    so benchmarks can be reused with minor modifications and so that either can satisfy
    the same `atomic` integer interface.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
- en: Lastly, we write standard benchmarks for adding values and reading them. Then,
    we write a parallel benchmark that calls the add and read functions. The parallel
    benchmark will create lot of lock contention, so we expect a slowdown. Perhaps
    unexpectedly, the atomic package significantly outperforms `RWMutex`.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
- en: Memory allocation and heap management
  id: totrans-80
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Some applications can benefit a lot from optimization. Consider routers, for
    example, which we'll look at in a later recipe. Fortunately, the tool benchmark
    suite provides flags to collect a number of memory allocations as well as memory
    allocation size. It can be helpful to tune certain critical code paths to minimize
    these two attributes.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
- en: This recipe will show two approaches to writing a function that glues together
    strings with a space, similar to `strings.Join("a", "b", "c")`. One approach will
    use concatenation, while the other will use the `strings` package. We'll then
    compare performance and memory allocations between the two.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  id: totrans-83
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'These steps cover writing and running your application:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
- en: From your Terminal or console application, create a new directory called `~/projects/go-programming-cookbook/chapter14/tuning` and
    navigate to this directory.
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Run this command:'
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'You should see a file called `go.mod` that contains the following:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Copy tests from `~/projects/go-programming-cookbook-original/chapter14/tuning`,
    or use this as an exercise to write some of your own code!
  id: totrans-90
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note that copied tests also include benchmarks written later in this recipe.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a file called `concat.go` with the following content:'
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Create a file called `join.go` with the following content:'
  id: totrans-94
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Create a file called `concat_test.go` with the following content:'
  id: totrans-96
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Create a file called `join_test.go` with the following content:'
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Run the `GOMAXPROCS=1 go test -bench=. -benchmem -benchtime=1s` command and
    you will see the following output:'
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: If you have copied or written your own tests run `go test`. Ensure that all
    the tests pass.
  id: totrans-102
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  id: totrans-103
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Benchmarking helps us tune applications and do certain micro-optimizations for
    things such as memory allocations. When benchmarking allocations for applications
    with input, it's important to try a variety of input sizes to determine whether
    it affects allocations. We wrote two functions, `concat` and `join`. Both join
    together a `variadic` string parameter with spaces, so the arguments (*a*, *b*,
    *c*) will return the string *a b c*.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
- en: The `concat` approach accomplishes this solely through string concatenation.
    We create a string and append the strings in the list and spaces in a `for` loop.
    We omit adding a space on the last loop. The `join` function uses the internal
    `Strings.Join` function to accomplish this far more efficiently in most cases.
    It can be helpful to benchmark standard library compared to your own functions
    to help better understand trade-offs in performance, simplicity, and functionality.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
- en: We used sub-benchmarks to test all of our parameters, which also work excellently
    with table-driven benchmarks. We can see how `concat` approach results in a lot
    more allocations than `join`, at least for single length inputs. A good exercise
    would be to try this with variable-length input strings as well as a number of
    arguments.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
- en: Using fasthttprouter and fasthttp
  id: totrans-107
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Although the Go standard library provides everything you need to run an HTTP
    server, sometimes you need to further optimize for things such as routing and
    request time. This recipe will explore a library that speeds up request handling,
    called `fasthttp` ([https://github.com/valyala/fasthttp](https://github.com/valyala/fasthttp)),
    and a router that dramatically speeds up routing performance, called `fasthttprouter`
    ([https://github.com/buaazp/fasthttprouter](https://github.com/buaazp/fasthttprouter)).
    Although `fasthttp` is quick, it's important to note that it doesn't support HTTP/2
    ([https://github.com/valyala/fasthttp/issues/45](https://github.com/valyala/fasthttp/issues/45)).
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  id: totrans-109
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'These steps cover writing and running your application:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
- en: From your Terminal or console application, create a new directory called `~/projects/go-programming-cookbook/chapter14/fastweb` and
    navigate to this directory.
  id: totrans-111
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Run this command:'
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'You should see a file called `go.mod` that contains the following:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: Copy tests from `~/projects/go-programming-cookbook-original/chapter14/fastweb`,
    or use this as an exercise to write some of your own code!
  id: totrans-116
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a file called `items.go` with the following content:'
  id: totrans-117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Create a file called `handlers.go` with the following content:'
  id: totrans-119
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Create a file called `main.go` with the following content:'
  id: totrans-121
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: Run the `go build` command.
  id: totrans-123
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Run the `./fastweb` command:'
  id: totrans-124
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'From a separate Terminal, test it our with some `curl` commands:'
  id: totrans-126
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从单独的终端，使用一些`curl`命令进行测试：
- en: '[PRE30]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: The `go.mod` file may be updated and the `go.sum` file should now be present
    in the top-level recipe directory.
  id: totrans-128
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`go.mod`文件可能会被更新，`go.sum`文件现在应该存在于顶级配方目录中。'
- en: If you have copied or written your own tests, run `go test`. Ensure that all
    the tests pass.
  id: totrans-129
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果您已经复制或编写了自己的测试，请运行`go test`。确保所有测试都通过。
- en: How it works...
  id: totrans-130
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The `fasthttp` and `fasthttprouter` packages can do a lot to speed up the life
    cycle of a web request. Both packages do a lot of optimization on the hot path
    of code, but with the unfortunate caveat of rewriting your handlers to use a new
    context object rather than traditional requests and response writer.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: '`fasthttp`和`fasthttprouter`包可以大大加快Web请求的生命周期。这两个包在热代码路径上进行了大量优化，但不幸的是，需要重写处理程序以使用新的上下文对象，而不是传统的请求和响应写入器。'
- en: There are a number of frameworks that have taken a similar approach to routing,
    and some have directly incorporated `fasthttp`. These projects keep up-to-date
    information in their `README` files.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 有许多框架采用了类似的路由方法，有些直接集成了`fasthttp`。这些项目在它们的`README`文件中保持最新的信息。
- en: Our recipe implemented a simple `list` object that we can append to with one
    endpoint and that will be returned by the other. The primary purpose of this recipe
    is to demonstrate working with parameters, setting up a router that now explicitly
    defines the supported methods instead of the generic `Handle` and `HandleFunc`,
    and to show how similar they are to standard handlers, but with many other benefits.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的配方实现了一个简单的`list`对象，我们可以通过一个端点进行附加，然后由另一个端点返回。这个配方的主要目的是演示如何处理参数，设置一个现在明确定义支持的方法的路由器，而不是通用的`Handle`和`HandleFunc`，并展示它们与标准处理程序有多么相似，但又有许多其他好处。
