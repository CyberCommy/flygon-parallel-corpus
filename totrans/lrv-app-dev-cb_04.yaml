- en: Chapter 4. Storing and Using Data
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover:'
  prefs: []
  type: TYPE_NORMAL
- en: Creating data tables using migrations and schemas
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Querying using raw SQL statements
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Querying using Fluent
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Querying using Eloquent ORM
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using automatic validation in models
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using advanced Eloquent and relationships
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a CRUD system
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Importing a CSV using Eloquent
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using RSS as a data source
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using attributes to change table column names
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using a non-Eloquent ORM in Laravel
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: One of the backbones of any web application is the use and manipulation of data.
    Laravel comes with many handy ways to interact with databases and display their
    information. In this chapter, we'll begin with some simple database interactions.
    Then we'll use other, non-databases for our data source, and then work on some
    customizations for our Laravel application.
  prefs: []
  type: TYPE_NORMAL
- en: Creating data tables using migrations and schemas
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Using Laravel, we can easily create our data model using schemas and migrations.
    In this recipe, we'll see some basic functionality of how Laravel accomplishes
    this.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For this recipe, we need a standard Laravel installation, as well as a MySQL
    database configured in our database config file.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To complete this recipe, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Install our migrations table from the command prompt, using `artisan`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a migration to hold our Schema code for creating a new table:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'In our `app/database/migrations` directory, locate the file that should be
    named similar to `2012_01_01_222551_create_shows_table.php`. Add the schema to
    create our table and add the columns:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the migration to add the table to the database, using the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Create another migration so we can add a column to our table:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'In the `app/database/migrations` directory, find the file that has a name similar
    to `2012_01_01_222551_add_actor_to_shows_table.php`. Add the column to our schema:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the migration in the command prompt to add the column to our table:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Using Laravel's Artisan command-line tool, we run the command to create a migrations
    table. This will track any migrations and schema changes we make. Then we use
    Artisan to create a migrations file that will hold the schema for our `shows`
    table.
  prefs: []
  type: TYPE_NORMAL
- en: In the `shows` schema, we create a simple table to hold a list of TV shows,
    and how we rate them. The name of the show is set as a string, the rating as an
    integer, and we use Laravel's default mechanism for creating timestamps. When
    we run the migration, our table will be created for us.
  prefs: []
  type: TYPE_NORMAL
- en: If we decide we want to add another column in our table, we just create another
    migration file using Artisan. In this case, we'll be adding a column to hold an
    actor's name. Our schema will get the table we already created and add the column
    to it. When we rerun the migration, everything will be updated in the database.
  prefs: []
  type: TYPE_NORMAL
- en: There's more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We could also have some more boilerplate code created for us by using a couple
    of command-line switches with Artisan. For example, to create the shows table,
    we could run this command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Running that command will produce a migration file that includes the following
    code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Querying using raw SQL statements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Laravel provides many ways to access our database. If we have existing queries
    that we've used before, or if we need something a bit more complicated, we can
    use raw SQL to access our database.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For this recipe, we'll be using the table created in the *Creating data tables
    using migrations and schema* recipe.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To complete this recipe, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the command prompt, create a migration so we can add some data:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'In our `app/database/migrations` directory, find a file similar to `2012_01_01_222551_add_data_to_shows_table.php`,
    and add some data using raw SQL:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the migration in the command prompt to add the data:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'In our `app/models` directory, create a file named `Show.php` and add a method
    to get the shows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'In our `routes.php` file, create a `Show` route to display the information
    from the model:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To populate some data in our `shows` table, we first need to create a migration
    using the Artisan command-line tool. In the migration file's `up` method, we create
    a simple SQL insert command, and pass in three parameters. We then create three
    arrays, with the values in the same order as columns in our query. Then we pass
    the SQL statement variable and array of values to Laravel's `DB::insert()` command.
    For our `down` method, we use a SQL delete statement, searching by the show's
    name. Once we run the migration, our data will populate into the table.
  prefs: []
  type: TYPE_NORMAL
- en: Next, we create a model to interact with the database in the frontend. Our model
    has one method to display all the shows in our table, with optional parameters
    if we'd like to re-order how they're displayed.
  prefs: []
  type: TYPE_NORMAL
- en: Our route instantiates the Show model and runs the `allShows()` method. To display
    the results, we use Laravel's `dd()` helper function. At this point, we could
    pass the data to a view and loop through it to display.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Creating data tables using migrations and schema* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Querying using Fluent
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Laravel provides many ways to access databases. If we choose not to write raw
    SQL statements, we can use the Fluent query builder to make things easier.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For this recipe, we'll be using the table created in the *Creating data tables
    using migrations and schemas* recipe.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To complete this recipe, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the command prompt, create a migration so we can add some data:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'In our `app/database/migrations` directory, find a file similar to `2012_01_01_222551_add_data_to_shows_table.php`,
    and add some data using the Fluent query builder:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the migration to add the data:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'In our `app/models` directory, create a file named `Show.php` and add a method
    to get the shows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'In our `routes.php` file, create a `Show` route to display the information
    from the model:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To populate some data in our `shows` table, we first need to create a migration
    using the Artisan command-line tool. In the migration file's `up` method, we create
    three arrays that hold our values, using the column names as keys. Those arrays
    are then put into an array and passed to the Fluent `insert` function. The `down`
    method uses the `where()` and `orWhere()` functions to locate records by their
    name, and deletes them. Once we run the migration, our data will populate into
    the table.
  prefs: []
  type: TYPE_NORMAL
- en: Next, we create a model to interact with the database in the frontend. Our model
    has one method to display all the shows in our table, with optional parameters
    if we'd like to reorder how they're displayed.
  prefs: []
  type: TYPE_NORMAL
- en: Our route instantiates the Show model and runs the `allShows()` method. To display
    the results, we use Laravel's `dd()` helper function. We could also create a view
    and pass the data there to loop through.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Many more fluent methods can be found in Laravel's documentation at [http://laravel.com/docs/queries](http://laravel.com/docs/queries).
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Creating data tables using migrations and schemas* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Querying using Eloquent ORM
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Laravel provides many ways to interact with databases. One of the easiest ways
    is using the Eloquent ORM. It provides a simple and intuitive way to work with
    data.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For this recipe, we'll be using the table created in the *Creating data tables
    using migrations and schemas* recipe.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To complete this recipe, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the command prompt, create a migration so we can add some data:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'In our `app/database/migrations` directory, find a file similar to `2012_01_01_222551_add_data_to_shows_table.php`,
    and add some data using the Fluent query builder:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the migration to add the data:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'In our `app/models` directory, create a file named `Show.php` that extends
    `Eloquent`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'In our `routes.php` file, create a show route to display the information from
    the model:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To populate some data in our `shows` table, we first need to create a migration
    using the Artisan command-line tool. In the migration file's `up` method, we create
    three arrays that hold our values, using the column names as keys. Those arrays
    are then put into an array and passed to the Fluent `insert` function. The `down`
    method uses the `where()` and `orWhere()` functions to locate records by their
    name, and deletes them. Once we run the migration, our data will populate into
    the table.
  prefs: []
  type: TYPE_NORMAL
- en: Next, we create a model to interact with the database in the frontend. For this
    recipe, all we need to do is extend `Eloquent` and the ORM will automatically
    take care of everything else. We also add in a method that will return all of
    the top shows.
  prefs: []
  type: TYPE_NORMAL
- en: Our route calls the `all()` method for our Show ORM object; this will put all
    the data into the `$shows` variable. Then we do a simple loop through the records
    and display the fields we want. Next, we get a filtered list by calling the method
    in the Show model, by only getting records with a rating greater than 5 and ordered
    by rating.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this recipe, we're displaying all the data inside the route. Ideally, we'd
    pass the data into a view and display it there.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Creating data tables using migrations and schemas* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using automatic validation in models
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When validating data that's being sent to the database, ideally we should put
    the rules and validation in our model. In this recipe we'll see one way to accomplish
    this.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For this recipe, we need a standard Laravel installation with a configured MySQL
    database. We also need our migrations table set up by running the Artisan command
    `php artisan migrate:install`.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To complete this recipe, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the command prompt, create a migration for a simple `users` table:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'Create the schema in the migration file. The file is located in the `app/database/migrations`
    directory and will be named something like `2012_01_01_222551_create_users_table.php`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the migration:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a file named `User.php` in our `app/models` directory. If there''s already
    a file named `User.php`, we can just rename it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'Make a route that loads the ORM and tries to save some data:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To begin, we create a migration for a basic `users` table. In our schema, we
    set up a table with an ID, username, e-mail ID, and timestamps. Then run the migration
    to create the table in the database.
  prefs: []
  type: TYPE_NORMAL
- en: Next, we set up our User model and extend `Eloquent`. We need to create our
    rules, using a private variable named as `$rules` that contains an array of the
    validation rules we want to check. In our model, we create a `validate` method.
    This will run our input through Laravel's `Validator` using the rules we have
    just set up.
  prefs: []
  type: TYPE_NORMAL
- en: In our route, we create a new user and add some values. Before we save, we run
    the input through the `validate` method; if it fails, we can loop through the
    validation error messages. If it passes, we could then save the input to our database
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: There are a few other ways to validate our data using models. One way is to
    use a package that will handle most of the validation work for us. One great package
    to use is Ardent, which can be found at [https://github.com/laravelbook/ardent](https://github.com/laravelbook/ardent).
  prefs: []
  type: TYPE_NORMAL
- en: Using advanced Eloquent and relationships
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: One of the great things about using Laravel's Eloquent ORM is the ease with
    which we can interact with multiple tables that have foreign keys and pivot tables.
    In this recipe, we'll see how easy it is to set up our models and run queries
    against joined tables.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For this recipe, we'll be using the `shows` and `users` tables created in the
    previous recipes *Creating data tables using migrations and schemas* and *Using
    automatic validation in models*.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To complete this recipe, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the command prompt, create a migration for a new pivot table:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'Open the migrations file in the `app/database/migrations` directory and add
    the schema:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the migration:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a `User.php` file in the `app/model` directory:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a `Show.php` file in our `app/model` directory:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'Make a route in `routes.php` to add a new user and attach two shows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: 'Make a route to get all the users attached to a show:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Our first task is to create a pivot table that will join our `users` tables
    with our `shows` table. In our migration's schema, we need to add columns for
    our `user_id` and a `show_id`. We then run the migration to get the table set
    up in our database.
  prefs: []
  type: TYPE_NORMAL
- en: To set up our models, we need to create a function that will return our many-to-many
    relationship. In our User model, we create the `shows()` function that points
    to our Show model for the relationship. In the Show model, we create a function
    named `users()` that points to our User model. With this set up, we can now run
    queries against both tables with ease.
  prefs: []
  type: TYPE_NORMAL
- en: Next, we create a route that will add in a new user. Once we save the user,
    we create the relationship with the shows by using the `attach()` method, and
    pass in the ID of the show we want to attach. After this, if we were to look in
    our `show_user` table, we'd see two records—one with our new user's ID and the
    show ID `1`, and another with the show ID of `3`. By running the `get()` method
    in our route, we can loop through the records and see which show names are joined
    to our user.
  prefs: []
  type: TYPE_NORMAL
- en: Our next route will take a show and get all the users that are joined. In our
    case, we get the show with the ID of `1`, and then get all of the users. Using
    Laravel's `dd()` helper, we can see our results.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Database relationships can get fairly complicated and this recipe merely scratches
    the surface of what can be done. To learn more about how Laravel's Eloquent ORM
    uses relationships, view the documentation at [http://laravel.com/docs/eloquent#many-to-many](http://laravel.com/docs/eloquent#many-to-many).
  prefs: []
  type: TYPE_NORMAL
- en: Creating a CRUD system
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To interact with our database, we might need to create a CRUD (create, read,
    update, and delete) system. That way, we add and alter our data without needing
    a separate database client. This recipe will be using a RESTful controller for
    our CRUD system.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For this recipe, we'll be building on the User tables created in the recipe
    *Using automatic validation in models*.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To complete this recipe, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the `app/controllers` directory, create a file named as `UsersController.php`
    and add the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: 'In our `routes.php` file, add a route to the controller:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: 'In the `app/views` directory, create another directory named as `users`, create
    a file named `index.php` in that, and add the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: 'In the `app/views/users` directory, create a new file named `create.php` and
    the form as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: 'In the `app/views/users` directory, add a file named `record.php` and use the
    following form:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In our controller, our method names can be prepended with the HTTP verb we want
    to use. We then add in the route in our routes file, so it points to the correct
    place.
  prefs: []
  type: TYPE_NORMAL
- en: Our first method will generate a list of all our users. We pass the users to
    our view, and then loop through them and display them in a simple table.
  prefs: []
  type: TYPE_NORMAL
- en: Under that table, we have a link to our second method to add a new user. Our
    `getRreate()` method displays a simple form, and that form gets posted and saved.
    After saving, we're redirected back to the list page.
  prefs: []
  type: TYPE_NORMAL
- en: To edit a record, we create a `getRecord()` method that gets the record's ID
    passed to it. Our view is a form that is automatically filled in with the values
    of the user for the ID that was passed in. Since we're doing an update, we want
    to use the `put` verb; to accomplish this, we need a hidden field with the name
    `_method` and the value of the request we want to use. When the form is submitted,
    Laravel will send it to the `putRecord()` method, and update the information.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, to delete a record, we create a simple form that has the hidden field
    named `_method` and the value `DELETE`. When submitted, Laravel will send it to
    the `deleteRecord()` method, and the user will be removed from the database.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Please be aware that this is the most basic of CRUD systems. For a full system,
    we'd need to add validation and error checking any time we add or edit our data.
  prefs: []
  type: TYPE_NORMAL
- en: Importing a CSV using Eloquent
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When working with data, there are many different sources and file types that
    we may encounter. A common type is a CSV, or comma separated value, file. In this
    recipe, we'll take a CSV file's contents and insert them into our database.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To get started, we need to have a standard Laravel installation that's configured
    with a MySQL database. We also need to have our migrations table created by running
    the Artisan command, `php artisan migrate:install`.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To complete this recipe, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'In a text editor, create a file named `scifi.csv`, save it to your application''s
    `public` folder. Add in the following data:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: 'In the command prompt, create a migration:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: 'Open the migration file that was just created and add in our schema:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the migration to create the table:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a model in the `app/models` directory named as `Scifi.php`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a new route to process our CSV and save the results:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Our first step is to create a simple CSV file, with the names of some science
    fiction characters and the movies in which they appeared. Then we create a migration
    and a schema that will add a `scifi` table with fields we want to save.
  prefs: []
  type: TYPE_NORMAL
- en: For our model, we extend `Eloquent` and add in a protected variable named `$table`
    that is set to our table's name. Since we're not pluralizing `scifi` for our table's
    name, we need to let Eloquent know which table to use.
  prefs: []
  type: TYPE_NORMAL
- en: In our route, we open the file and loop through the data using PHP's built-in
    functions `fopen()` and `fgetcsv()` respectively. In each loop, we create a new
    `Scifi` object, then set the values to the data we get from the CSV file. After
    looping, we close the file.
  prefs: []
  type: TYPE_NORMAL
- en: To see our data, we call the `all()` method on our `Scifi` object and return
    it to display all the data.
  prefs: []
  type: TYPE_NORMAL
- en: Using RSS as a data source
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Many blogs and news sites offer RSS feeds of their content. Using Laravel, we
    can get those feeds and display them as a feed reader, or even save them in our
    own database.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For this recipe, we just need a standard Laravel installation, and RSS URL to
    use.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To complete this recipe, follow this step:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a new route in our `routes.php` file to read in the RSS:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We create a route to hold our RSS reader. Then we set our `$source` variable
    to whichever RSS feed we want to consume.
  prefs: []
  type: TYPE_NORMAL
- en: To make sure our source is still active, we use the PHP function `get_headers()`,
    and grab the response code. If the code is `404`, then the URL doesn't work.
  prefs: []
  type: TYPE_NORMAL
- en: Next, we get the contents from the URL, and use the `simplexml_load_string()`
    function to process the XML in the feed. If that feed actually has data, we can
    loop through it and display the information. We could also save it to our database
    as we loop.
  prefs: []
  type: TYPE_NORMAL
- en: Using attributes to change table column names
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Sometimes we may be working with a database that was created using less-than-logical
    column names. In those cases, we can use Laravel's Eloquent ORM to allows us to
    interact with the table using more standardized names, without having to make
    database changes.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For this recipe, we need a standard Laravel installation, a properly configured
    MySQL database, and our migrations table set up by running the command `php artisan
    migrate:install`.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To complete this recipe, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a migration for our table with the column name `odd`, in the command
    prompt:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a migration to add some data to the table, in the command prompt:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: 'In the `app/database/migrations` folder, open the `create_odd_table` migration
    and add the schema:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: 'In the `app/database/migrations` directory, open the `add_data_to_odd_table`
    file and add some data:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: 'In the command prompt, run the migration:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: 'In the `app/models` directory, create a new file named as `Odd.php` and create
    the getters:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: 'Make a new route in `routes.php` to access the table using the regular column
    name:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: 'Make another route, using the more standard column names:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To begin, we create two migration files. One file will actually create the tables
    with the non-standard column name, and the other will populate the data.
  prefs: []
  type: TYPE_NORMAL
- en: For our model, we extend `Eloquent` and add a few `get` methods. Inside each
    `get` method, set our attributes, which tells Eloquent which column name we want
    to use. Now, since we have the `getUsernameAttribute()` method in our model, whenever
    we try access the username in our object, it will actually access the column name
    we defined.
  prefs: []
  type: TYPE_NORMAL
- en: Then, we create a route that will pull all of the records from our `odd` table,
    and loop through. For our first route, we access the column using their real names.
    In our second route, we use the new names. If we access both of these routes,
    we would see the exact same information.
  prefs: []
  type: TYPE_NORMAL
- en: Using a non-Eloquent ORM in Laravel
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Laravel's Eloquent ORM is easy-to-use and very efficient. However, there are
    many different PHP ORMs and we may decide we prefer another ORM. In this recipe,
    we'll install the RedBean ORM and use it for our data.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For this recipe, we'll be using the RedBean ORM. You'll need to download it
    from [http://www.redbeanphp.com/manual/installing](http://www.redbeanphp.com/manual/installing),
    and unzip the file. Then move the file `rb.php` to the `app/libraries` directory
    of your app.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To complete this recipe, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the `composer.json` file, make our autoloader load our `libraries` directory.
    The `autoload` section should look similar to this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: 'In the command prompt, dump our autoloader:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: 'In our `routes.php` file, we''ll add a simple configuration:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a route that will add some data and then display it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: After adding the RedBean file to our `libraries` directory, we need to update
    our composer file's autoloader so that it will load the `rb.php` file.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up the database configuration can be done in various places but, for
    this recipe, we'll set it up at the top of our routes file. So we can keep our
    database information in one place, we use Laravel's database configuration to
    get it set up.
  prefs: []
  type: TYPE_NORMAL
- en: Once all that is done, we're ready to use RedBean in our application. In our
    route, we're creating three superheroes and adding them to the `superheroes` table.
    With RedBean, if the table doesn't exist, it will automatically create it for
    you and add in the relevant columns.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, we get three records and can loop through them to display the information.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: RedBeans has many features that might be useful as a replacement ORM. To see
    all the features, visit its official manual at [http://redbeanphp.com/manual/](http://redbeanphp.com/manual/).
  prefs: []
  type: TYPE_NORMAL
