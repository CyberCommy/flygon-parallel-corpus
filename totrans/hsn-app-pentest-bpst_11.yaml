- en: Breaking the Authentication for a Large Online Retailer
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous chapters, we reviewed how to detect many types of vulnerabilities,
    and how to exploit them. We also reviewed how to use a large variety of extensions,
    and also how to develop our extensions. In this chapter, we will recapitulate
    all the concepts from the previous chapters to assess an application in production
    and try to break its authentication.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will cover the following topics in the chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Remembering about authentication
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Large online retailers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Performing information gathering
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Remembering about authentication
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'As you remember from [Chapter 7](907db073-60ef-4d85-a4cb-03f9fcc76855.xhtml), *Detecting
    Vulnerabilities Using Burp Suite*, the issues that affect authentication controls
    are the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Weak storage for credentials
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Predictable login credentials
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Session IDs exposed in the URL
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Session IDs susceptible to session fixations attacks
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Wrong time out implementation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The session is not destructed after the logout
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Sensitive information sent via unprotected channels
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Now, using Burp Suite, we are going to analyze all of these.
  prefs: []
  type: TYPE_NORMAL
- en: Large online retailers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The list of online retailers is huge, but the following is a list of the more
    popular ones:'
  prefs: []
  type: TYPE_NORMAL
- en: eBay (all regional variants)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Mercado Libre
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Amazon
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We will analyze one of them as an example. Bear in mind that all the information
    used in this chapters is public; we are not going to disclose any public or private
    vulnerabilities on these applications and the explanations do not affect the functionality
    of the applications.
  prefs: []
  type: TYPE_NORMAL
- en: Performing information gathering
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We are going to start collecting information about the targets. The most basic
    way to detect information about the technology used in a specific application
    and to determine potential security issues is to first navigate all through the
    application, use the normal flows, detect and take note of each entry point in
    the application, and add the different URLs that are interesting to us to the
    **Scope** option in the **Target** tool.
  prefs: []
  type: TYPE_NORMAL
- en: Port scanning
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In a real assessment, an agreement between the person or company that is reviewing
    the application and the application's owners is established. This is one of the
    first steps involved in detecting the services.
  prefs: []
  type: TYPE_NORMAL
- en: 'This task is usually carried out using Nmap ([https://nmap.org/](https://nmap.org/)),
    which is a command-line tool that is used to detect ports and services running
    on a remote host. Using Nmap is not complicated; you can just type `nmap` on a
    command line to see all the different options we have, as shown in the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/a52f2146-d715-4574-bebf-643722baa56a.png)'
  prefs: []
  type: TYPE_IMG
- en: 'To perform a standard scan to a host, we can use the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Authentication method analysis
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You should analyze an application issue by issue to determine whether it is
    vulnerable or not, as explained in the following sections.
  prefs: []
  type: TYPE_NORMAL
- en: Weak storage for credentials
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The application is storing the session ID in a ciphered way, so it is not vulnerable
    to being extracted. Also, the session ID is combined with more than one token,
    and cookies are protected from extraction as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/9fd5d310-2548-47ff-8295-2f3fef7b6293.png)'
  prefs: []
  type: TYPE_IMG
- en: Discovering Blind SQL injection
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The URL that we will be analyzing is [www.dhl.com](http://www.dhl.com). This
    is the international page, but if you visualize the regional websites, they are
    similar, so it is possible that a vulnerability in one of them replicates others.
    This happens to a lot of companies that have operations in various countries.
    Actually, sometimes the company has a different representation in a different
    country, but the web application is the same.
  prefs: []
  type: TYPE_NORMAL
- en: 'To determine whether [dhl.com](http://dhl.com) has an SQL injection, we will
    do three different analyses:'
  prefs: []
  type: TYPE_NORMAL
- en: Automatic scan
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: SQLMap detection
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Intruder detection
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Predictable login credentials
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The user enters the application using a username or an email, so the credentials
    are not predictable.
  prefs: []
  type: TYPE_NORMAL
- en: Session IDs exposed in the URL
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Reviewing the History tool, we can see that there are some tokens and sessions
    exposed in the URL as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/50d480e0-6c02-47b1-8575-27a66ed8213a.png)'
  prefs: []
  type: TYPE_IMG
- en: 'However, the application does not use just one token, so, having only one of
    them is not useful. Actually, one of the tokens sent in the URL is a request tracker,
    as shown in the following screenshots:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/97a734de-9032-42d4-a691-12d57cb44fad.png)'
  prefs: []
  type: TYPE_IMG
- en: '![](img/f348b9a0-bfaf-43ad-ad49-934269eff7b0.png)'
  prefs: []
  type: TYPE_IMG
- en: '![](img/38d2a7f7-cf3d-4bda-9163-10d3ead5edde.png)'
  prefs: []
  type: TYPE_IMG
- en: '![](img/1d89c217-a584-410b-b1d2-6092cc19732f.png)'
  prefs: []
  type: TYPE_IMG
- en: The conclusion is that, despite there being tokens exposed in the URL, they
    are not exploitable.
  prefs: []
  type: TYPE_NORMAL
- en: Session IDs susceptible to session fixations attacks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Open a user's session in a browser in the normal way.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Then, open an other session for a completely different user.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now, intercept a request using the **Proxy** tool, and modify the user''s information
    to try to access the second user''s information, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/1cd10312-3a41-4268-b0a6-69058ee9a794.png)'
  prefs: []
  type: TYPE_IMG
- en: When you open the [https://www.mercadolibre.com.mx/](https://www.mercadolibre.com.mx/)
    web page, you notice that the application shows the first information's user.
    So, it is not vulnerable to session fixation.
  prefs: []
  type: TYPE_NORMAL
- en: The session is not destructed after the logout
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Close the session using the logout option, then go to **History**, and look
    for a request made while the user was logged in. Right-click on **Send to repeater**,
    and, without modifying any value, click on **Go** to resend the request, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/84d70dbf-a882-4b31-8a4b-76bbbc0ac643.png)'
  prefs: []
  type: TYPE_IMG
- en: The result is the application being shown without the user being logged in.
    So, the application is not vulnerable.
  prefs: []
  type: TYPE_NORMAL
- en: Since we have used a Mexican website for authentication, some of the text in
    the screenshot is in Spanish.
  prefs: []
  type: TYPE_NORMAL
- en: Sensitive information sent via unprotected channels
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Just using passive scanning, which means without aggressive actions, Burp Suite
    detected that the users can force the application to be used in an unprotected
    channel. This means that instead of using the HTTPS protocol, a user can force
    the use of the HTTP protocol and send information in clear text. It could be exploited
    by a malicious user, combined with other flaws to steal a user''s information,
    as shown in the following example:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/d6ba5748-8939-42a3-b7ac-dee9ff803d3e.png)'
  prefs: []
  type: TYPE_IMG
- en: This flaw is confirmed.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we showed the analysis of a real application. The tasks performed
    included protocol and service detection, request and post analysis, and vulnerability
    detection.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the next chapter, we will perform the same activities that we discussed
    in this chapter using one of the most popular shipping companies: DHL.'
  prefs: []
  type: TYPE_NORMAL
