- en: Getting a List of Files Using the Dropbox API
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Over the next few chapters, we are going to be building a Vue-based Dropbox
    browser. This app will take your Dropbox API key and allow you to navigate to
    folders and download files. You will learn about interacting with an API within
    a Vue app, the Vue life cycle hooks, including the `created()` method, and finally
    we will introduce a library called `Vuex` to handle the caching and state of the
    app. The app will have shareable URLs and retrieve the contents of the folder
    passed in via the `#` URL parameter.
  prefs: []
  type: TYPE_NORMAL
- en: This kind of app would be useful if you wanted to give users access to the contents
    of your Dropbox without giving out a username and password. Be warned, however,
    a tech-savvy user could find your API key in the code and abuse it, so don't publish
    this code to the World Wide Web.
  prefs: []
  type: TYPE_NORMAL
- en: 'This chapter is going to cover:'
  prefs: []
  type: TYPE_NORMAL
- en: Loading and querying the Dropbox API
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Listing the directories and files from your Dropbox account
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding a loading state to your app
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using Vue animations
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You will need a Dropbox account to follow these next few chapters. If you don't
    have one, sign up and add a few dummy files and folders. The contents of the Dropbox
    don't matter, but having folders to navigate through will help with understanding
    the code.
  prefs: []
  type: TYPE_NORMAL
- en: Getting started—loading the libraries
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Create a new HTML page for your app to run in. Create the HTML structure required
    for a web page and include your app view wrapper:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: It's called `#app` here, but call it whatever you want - just remember to update
    the JavaScript.
  prefs: []
  type: TYPE_NORMAL
- en: As our app code is going to get quite chunky, make a separate JavaScript file
    and include it at the bottom of the document. You will also need to include Vue
    and the Dropbox API SDK.
  prefs: []
  type: TYPE_NORMAL
- en: 'As with before, you can either reference the remote files or download a local
    copy of the library files. Download a local copy for both speed and compatibility reasons.
    Include your three JavaScript files at the bottom of your HTML file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Create your `app.js` and initialize a new Vue instance, using the `el` tag to
    mount the instance onto the ID in your view.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Creating a Dropbox app and initializing the SDK
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Before we interact with the Vue instance, we need to connect to the Dropbox
    API through the SDK. This is done via an API key that is generated by Dropbox
    itself to keep track of what is connecting to your account and where Dropbox requires
    you to make a custom Dropbox app.
  prefs: []
  type: TYPE_NORMAL
- en: Head to the Dropbox developers area and select Create your app. Choose Dropbox
    API and select either a restricted folder *or *full access. This depends on your
    needs, but for testing, choose Full Dropbox. Give your app a name and click the
    button Create app.
  prefs: []
  type: TYPE_NORMAL
- en: 'Generate an access token to your app. To do so, when viewing the app details
    page, click the Generate button under the Generated access token. This will give
    you a long string of numbers and letters - copy and paste that into your editor
    and store it as a variable at the top of your JavaScript. In this book, the API
    key will be referred to as `XXXX`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Now that we have our API key, we can access the files and folders from our
    Dropbox. Initialize the API and pass in your `accessToken` variable to the `accessToken` property
    of the Dropbox API:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'We now have access to Dropbox via the `dbx` variable. We can verify our connection
    to Dropbox is working by connecting and outputting the contents of the root path:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: This code uses JavaScript promises, which are a way of adding actions to code
    without requiring callback functions. If you are unfamiliar with promises, check
    out this blog post from Google ([https://developers.google.com/web/fundamentals/primers/promises](https://developers.google.com/web/fundamentals/primers/promises)).
  prefs: []
  type: TYPE_NORMAL
- en: Take a note of the first line, particularly the `path` variable. This lets us
    pass in a folder path to list the files and folders within that directory. For
    example, if you had a folder called `images` in your Dropbox, you could change
    the parameter value to `/images` and the file list returned would be the files
    and folders within that directory.
  prefs: []
  type: TYPE_NORMAL
- en: Open your JavaScript console and check the output; you should get an array containing
    several objects - one for each file or folder in the root of your Dropbox.
  prefs: []
  type: TYPE_NORMAL
- en: Displaying your data and using Vue to get it
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that we can retrieve our data using the Dropbox API, it's time to retrieve
    it within our Vue instance and display in our view. This app is going to be entirely
    built using components so we can take advantage of the compartmentalized data
    and methods. It will also mean the code is modular and shareable, should you want
    to integrate into other apps.
  prefs: []
  type: TYPE_NORMAL
- en: We are also going to take advantage of the native Vue `created()` function -
    we'll cover it when it gets triggered in a bit.
  prefs: []
  type: TYPE_NORMAL
- en: Create the component
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'First off, create your custom HTML element, `<dropbox-viewer>`, in your View.
    Create a `<script>` template block at the bottom of the page for our HTML layout:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Initialize your component in your `app.js` file, pointing it to the template
    ID:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Viewing the app in the browser should show the heading from the template. The
    next step is to integrate the Dropbox API into the component.
  prefs: []
  type: TYPE_NORMAL
- en: Retrieve the Dropbox data
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Create a new method called `dropbox`. In there, move the code that calls the
    Dropbox class and returns the instance. This will now give us access to the Dropbox
    API through the component by calling `this.dropbox()`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'We are also going to integrate our API key into the component. Create a data
    function that returns an object containing your access token. Update the Dropbox
    method to use the local version of the key:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: We now need to add the ability for the component to get the directory list.
    For this, we are going to create another method that takes a single parameter—the
    path. This will give us the ability later to request the structure of a different
    path or folder if required.
  prefs: []
  type: TYPE_NORMAL
- en: 'Use the code provided earlier - changing the `dbx` variable to `this.dropbox()`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Update the Dropbox `filesListFolder` function to accept the path parameter passed
    in, rather than a fixed value. Running this app in the browser will show the Dropbox
    heading, but won't retrieve any folders because the methods have not been called
    yet.
  prefs: []
  type: TYPE_NORMAL
- en: The Vue life cycle hooks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This is where the `created()` function comes in. The `created()` function gets
    called once the Vue instance has initialized the data and methods, but has yet
    to mount the instance on the HTML component. There are several other functions
    available at various points in the life cycle; more about these can be read at Alligator.io.
    The life cycle is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/02ada895-fdcb-4485-af9c-4c0b4d76c68d.png)'
  prefs: []
  type: TYPE_IMG
- en: Using the `created()` function gives us access to the methods and data while
    being able to start our retrieval process as Vue is mounting the app. The time
    between these various stages is split-second, but every moment counts when it
    comes to performance and creating a quick app. There is no point waiting for the
    app to be fully mounted before processing data if we can start the task early.
  prefs: []
  type: TYPE_NORMAL
- en: 'Create the `created()` function on your component and call the `getFolderStructure`
    method, passing in an empty string for the path to get the root of your Dropbox:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Running the app now in your browser will output the folder list to your console,
    which should give the same result as before.
  prefs: []
  type: TYPE_NORMAL
- en: We now need to display our list of files in the view. To do this, we are going
    to create an empty array in our component and populate it with the result of our
    Dropbox query. This has the advantage of giving Vue a variable to loop through
    in the view, even before it has any content.
  prefs: []
  type: TYPE_NORMAL
- en: Displaying the Dropbox data
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Create a new property in your data object titled `structure`, and assign this
    to an empty array. In the response function of the folder retrieval, assign `response.entries`
    to `this.structure`. Leave `console.log` as we will need to inspect the entries
    to work out what to output in our template:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: We can now update our view to display the folders and files from your Dropbox.
    As the structure array is available in our view, create a `<ul>` with a repeatable
    `<li>` looping through the structure.
  prefs: []
  type: TYPE_NORMAL
- en: 'As we are now adding a second element, Vue requires templates to have one containing
    the element, wrap your heading and list in a `<div>`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Viewing the app in the browser will show a number of empty bullet points when
    the array appears in the JavaScript console. To work out what fields and properties
    you can display, expand the array in the JavaScript console and then further for
    each object. You should notice that each object has a collection of similar properties
    and a few that vary between folders and files.
  prefs: []
  type: TYPE_NORMAL
- en: 'The first property, `.tag`, helps us identify whether the item is a file or
    a folder. Both types then have the following properties in common:'
  prefs: []
  type: TYPE_NORMAL
- en: '`id`: A unique identifier to Dropbox'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`name`: The name of the file or folder, irrespective of where the item is'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`path_display`: The full path of the item with the case matching that of the
    files and folders'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`path_lower`: Same as `path_display` but all lowercase'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Items with a `.tag` of a file also contain several more fields for us to display:'
  prefs: []
  type: TYPE_NORMAL
- en: '`client_modified`: This is the date when the file was added to Dropbox.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`content_hash`: A hash of the file, used for identifying whether it is different
    from a local or remote copy. More can be read about this on the Dropbox website.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`rev`: A unique identifier of the version of the file.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`server_modified`: The last time the file was modified on Dropbox.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`size`: The size of the file in bytes.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'To begin with, we are going to display the name of the item and the size, if
    present. Update the list item to show these properties:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: More file meta information
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To make our file and folder view a bit more useful, we can add more rich content
    and metadata to files such as images. These details are available by enabling
    the `include_media_info` option in the Dropbox API.
  prefs: []
  type: TYPE_NORMAL
- en: 'Head back to your `getFolderStructure` method and add the parameter after `path`.
    Here are some new lines of readability:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Inspecting the results from this new API call will reveal the `media_info`
    key for videos and images. Expanding this will reveal several more pieces of information
    about the file, for example, dimensions. If you want to add these, you will need
    to check that the `media_info` object exists before displaying the information:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'Try updating the path when retrieving the data from Dropbox. For example, if
    you have a folder called `images`, change the `this.getFolderStructure` parameter
    to `/images`. If you''re not sure what the path is, analyze the data in the JavaScript
    console and copy the value of the `path_lower` attribute of a folder, for example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: Formatting the file sizes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: With the file size being output in plain bytes it can be quite hard for a user
    to dechiper. To combat this, we can add a formatting method to output a file size
    which is more user-friendly, for example displaying <q>1kb</q> instead of <q>1024</q>.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, create a new key on the data object that contains an array of units
    called `byteSizes`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: This is what will get appended to the figure, so feel free to make these properties
    either lowercase or full words, for example, *megabyte*.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, add a new method, `bytesToSize`, to your component. This will take one
    parameter of `bytes` and output a formatted string with the unit at the end:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'We can now utilize this method in our view:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: Adding a loading screen
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The last step of this chapter is to make a loading screen for our app. This
    will tell the user the app is loading, should the Dropbox API be running slowly
    (or you have a lot of data to show!).
  prefs: []
  type: TYPE_NORMAL
- en: The theory behind this loading screen is fairly basic. We will set a loading
    variable to `true` by default that then gets set to `false` once the data has
    loaded. Based on the result of this variable, we will utilize view attributes
    to show, and then hide, an element with the loading text or animation in and also
    reveal the loaded data list.
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a new key in the data object titled `isLoading`. Set this variable to
    `true` by default:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'Within the `getFolderStructure` method on your component, set the `isLoading`
    variable to `false`. This should happen within the promise after you have set
    the structure:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: We can now utilize this variable in our view to show and hide a loading container.
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a new `<div>` before the unordered list containing some loading text.
    Feel free to add a CSS animation or an animated gif—anything to let the user know
    the app is retrieving data:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: We now need to only show the loading div if the app is loading and the list
    once the data has loaded. As this is just one change to the DOM, we can use the
    `v-if` directive. To give you the freedom of rearranging the HTML, add the attribute
    to both instead of using `v-else`.
  prefs: []
  type: TYPE_NORMAL
- en: 'To show or hide, we just need to check the status of the `isLoading` variable.
    We can prepend an exclamation mark to the list to only show if the app is not
    loading:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'Our app should now show the loading container once mounted, and then it should
    show the list once the app data has been gathered. To recap, our complete component
    code now looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: Animating between states
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As a nice enhancement for the user, we can add some transitions between components
    and states. Helpfully, Vue includes some built-in transition effects. Working
    with CSS, these transitions allow you to add fades, swipes, and other CSS animations
    easily when DOM elements are being inserted. More information about transitions
    can be found in the Vue documentation.
  prefs: []
  type: TYPE_NORMAL
- en: 'The first step is to add the Vue custom HTML `<transition>` element. Wrap both
    your loading and list with separate transition elements and give it an attribute
    of `name` and a value of `fade`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'Now add the following CSS to either the head of your document or a separate
    style sheet if you already have one:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'With the transition element, Vue adds and removes various CSS classes based
    on the state and time of the transition. All of these begin with the name passed
    in via the attribute and are appended with the current stage of transition:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/e49dfffb-4158-44a3-abcb-0a1955bb862e.png)'
  prefs: []
  type: TYPE_IMG
- en: Try the app in your browser, you should notice the loading container fading
    out and the file list fading in. Although in this basic example, the list jumps
    up once the fading has completed, it's an example to help you understand using
    transitions in Vue.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we learned how to make a Dropbox viewer, which is a single-page
    application that lists out files and folders from our Dropbox account and allows
    us to show different folder contents by updating the code. We have learned how
    to add a basic loading state to our apps and use the Vue animations for navigation.
  prefs: []
  type: TYPE_NORMAL
- en: In Chapter 5, *Navigating through the File Tree and Loading Folders from the
    URL*, we are going to navigate through our app folders and add download links
    to our files.
  prefs: []
  type: TYPE_NORMAL
