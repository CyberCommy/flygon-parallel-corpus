- en: Identifying Vulnerabilities Using Burp Suite
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Burp Suite is more than an HTTP proxy; it is a complete set of tools for detecting
    and exploiting vulnerabilities. In fact, we will use Burp Suite to explain to
    developers how these vulnerabilities work in an approach that they can understand.
    In this chapter, we will focus on how to detect vulnerabilities using Burp Suite
    and some extensions. We will be covering the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Detecting SQL injection flaws
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Detecting OS command injection
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Detecting **cross-site scripting** (**XSS**) vulnerabilities
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Detecting XML-related issues such as **XML External Entity** (**XXE**)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Detecting **Server-Side Template Injection** (**SSTI**)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Detecting **Server-Side Request Forgery** (**SSRF**)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Detecting SQL injection flaws
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: SQL injection is a vulnerability generated by weak input validation controls
    in an application. It allows a malicious user to execute arbitrary SQL code, which
    exposes the information stored, and, in some critical cases, allows complete control
    of the server where the application is residing.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are three main ways to detect SQL injections using Burp Suite: first,
    by manually inserting testing strings; second, by using the scanner; and third,
    by using an extension called CO2, which uses **sqlmap** in the background, a tool
    for exploiting and detecting SQL injections. Let''s take a look at these three
    methods.'
  prefs: []
  type: TYPE_NORMAL
- en: Manual detection
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Manual detection means to analyze request by request, using just the **Proxy**
    tool and **Intruder** tool, to detect an error or an unexpected behavior to detect
    SQL injection.
  prefs: []
  type: TYPE_NORMAL
- en: 'Imagine you have an application that allows the user to see information about
    the users registered in a database; to do that, the application will use the following
    request:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Scanner detection
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The easiest way to detect a SQL injection, and any vulnerability using Burp
    Suite, is through a scanner. To use a scanner, you do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open Burp Suite to view the main Dashboard, as shown in the following screenshot.
    Note that this is only available in the Professional Edition; the Community Edition
    does not have Scanner as an option. If you use the Community Edition, then use
    the scanner included in ZAP Proxy (which can be found here: [https://www.owasp.org/index.php/OWASP_Zed_Attack_Proxy_Project](https://www.owasp.org/index.php/OWASP_Zed_Attack_Proxy_Project)):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/a10c294b-778f-4eba-af4a-0838278a67bb.png)'
  prefs: []
  type: TYPE_IMG
- en: 'In this screen, click on New scan. This button will launch the wizard to configure
    the scan; here, you can add all the URLs that you want to scan, limit the scope
    of the scan, set credentials for authenticated scans, and create specific tasks,
    such as filters. To perform an application scan, enter the URL you want to scan,
    as shown in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/f65a1186-879a-4ee1-8c68-64b164b1a5b7.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Next, click on Application Login and add credentials for the application. In
    this case, we add the user for the website, as demonstrated in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/d04d1885-6cd6-4c9d-a7f3-e5b603712cbc.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Click on the OK button and the scanner will start the detection, as shown in
    the following screenshot. Burp Suite will ask you whether it needs more information
    to perform the scan:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/0bfa0822-e287-427a-b7ff-0619705953e6.png)'
  prefs: []
  type: TYPE_IMG
- en: Now, let's move on to the next detection method, which is CO2 detection.
  prefs: []
  type: TYPE_NORMAL
- en: CO2 detection
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'CO2 is a popular extension for Burp Suite that integrates sqlmap, a tool developed
    in Python, which is focused toward detecting and exploiting SQL injections in
    web applications. Let''s look into the installation and working of CO2, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: 'To install CO2, navigate to the Extender tab in Burp Suite, and then click
    on BApp Store; here, you will find a list of the latest versions, as shown in
    the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/fefb4d21-10b5-4450-9d4e-b0b09e958273.png)'
  prefs: []
  type: TYPE_IMG
- en: 'To install, click on the Install button, and a new tab will appear in your
    Burp Suite installation, as shown in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: CO2 is actually just a frontend extension for sqlmap. To work, it ...
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Detecting OS command injection
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Command injection is another input validation error, which derives in the interaction
    directly with the operating system. It is usually because the application is using
    a function, such as `exec()`, `execve()`, or `system()`.
  prefs: []
  type: TYPE_NORMAL
- en: Like SQL injections and all the vulnerabilities described in this chapter, OS
    command injection could be detected by using the scanner method and following
    similar steps. So, we will describe how to detect this vulnerability in a manual
    way.
  prefs: []
  type: TYPE_NORMAL
- en: Manual detection
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To detect command injection vulnerabilities, open Burp Suite and intercept the
    request where you think there is a potential vulnerability.
  prefs: []
  type: TYPE_NORMAL
- en: We think there is a vulnerability in the IP parameter. The normal application's
    flow is that the user inserts an IP address, and then the application executes
    a ping to this IP address. If we try to imagine what is happening in the backend,
    we can suppose that the IP parameter is received by a variable in PHP; then it
    is concatenated with the string ping to create a string that contains the command
    and the IP address.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, this complete string is passed as a parameter to a function in charge
    to execute in a low-level command. So, if the IP parameter is not validated in
    a correct way ...
  prefs: []
  type: TYPE_NORMAL
- en: Detecting XSS vulnerabilities
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'XSS has three different types, but all of them have one thing in common—they
    derive from the input validation error to manage characters that are used to inject
    JavaScript code or HTML tags. So, we can use some inputs as shown in the following
    screenshot (which is a cheat sheet from the OWASP project), and add to the Intruder
    tool as payload:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/9c3bedb9-5c5b-454a-94d3-8072437cc666.png)'
  prefs: []
  type: TYPE_IMG
- en: A cheat sheet from the OWASP project
  prefs: []
  type: TYPE_NORMAL
- en: The way to detect XSS vulnerabilities is to find these codes without encoding
    or modifications in the responded HTML or that we did not get an error after injecting
    the testing strings.
  prefs: []
  type: TYPE_NORMAL
- en: 'To add the cheat sheet, use a similar process to adding the payload list to
    Intruder. Open the Intruder tool, click on the Payloads tab, and then select the
    Load button. Finally, mark all the parameters that you think are vulnerable, then
    click on Start attack, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/def13e36-7a2d-41e2-964d-173d46fc76d6.png)'
  prefs: []
  type: TYPE_IMG
- en: List of vulnerable parameters
  prefs: []
  type: TYPE_NORMAL
- en: In the preceding screenshot, we can see how all the strings were launched by
    Intruder, and how one of them is affecting the response in a confirmed XSS.
  prefs: []
  type: TYPE_NORMAL
- en: Detecting XML-related issues, such as XXE
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The XML issues need that the request accepts XML, so we need this information
    in the header''s `content-type`, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'We can configure a filter in Burp Suite to detect requests that have this information
    in the headers. To configure the filter, go to the Target tool, and then click
    on the Filter bar. Once there, select the XML file format, and if you want, write
    the `content-type` string that we know all requests need to have, as shown in
    the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/c94ff119-9be8-4cde-a710-a66585b1f416.png)'
  prefs: []
  type: TYPE_IMG
- en: After filtering the request that could be vulnerable, add common testing strings
    as a payload list in the Intruder ...
  prefs: []
  type: TYPE_NORMAL
- en: Detecting SSTI
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'SSTIvulnerabilities depend a lot on the engine used by the tested application.
    However, the main idea in template engines is that you pass a parameter, which
    is interpreted by the engine, and it creates the view. So, most engines are waiting
    for a text to parse it and display it. Take the following as an example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'In the preceding example, the application receives a string and the engine
    automatically adds HTML tags to display it. Also, these engines can interpret
    values passed as parameters, such as operators. For example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'In this case, the engine evaluates the `*` operator with the values passed.
    So, if you pass an unexpected string as a parameter, it could be reflected, or
    it could be used to extract sensible information, as can be seen in the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Here, the engine is interpreting the parameter to show the information related,
    as it was a query. James Kettle, in 2015, created a map to detect SSTI vulnerabilities
    depending on the engine used. The following screenshot shows Kettle''s map to
    detect whether the SSTI exists, inferring from the inputs:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/2af73839-4666-408d-b1d3-d05c0e732cea.png)'
  prefs: []
  type: TYPE_IMG
- en: Detecting SSTI vulnerabilities using Burp Suite needs to be manual, and involves
    catching and entering the testing parameters to detect, first, what the engine
    used is, and then, whether it is vulnerable.
  prefs: []
  type: TYPE_NORMAL
- en: Detecting SSRF
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The basic idea behind SSRF is to find access to internal resources that can
    be manipulated to access unauthorized resources. For example, imagine that we
    have the following URL:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: In this case, we have a website that is public behind the `site.com` domain,
    and it processes something using the information retrieved from an internal IP.
    If the developer does not validate the `url` parameter, a malicious user can access unauthorized
    resources located in the internal IP, or maybe in others that have the same visibility.
  prefs: []
  type: TYPE_NORMAL
- en: To detect this kind of vulnerability, we can use Burp Suite's Scanner, which
    will detect them automatically, or apply a filter in the Target tool to find requests
    that ...
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we learned about the tools Burp Suite uses to detect the most
    common vulnerabilities related to input validation weaknesses.
  prefs: []
  type: TYPE_NORMAL
- en: Most of them are detected using Burp Suite's Scanner, which is an active scanner
    that works while the pentester is navigating the application. So, it is more interactive
    and has more access to hide areas than other scanners. However, this vulnerabilities
    could be detected by sending crafted requests and putting attention in the response.
    For this task, the Intruder tool is the most useful of Burp Suite's tools.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will be looking for errors that are not related to input
    validation.
  prefs: []
  type: TYPE_NORMAL
