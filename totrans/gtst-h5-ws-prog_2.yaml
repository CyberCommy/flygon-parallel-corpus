- en: Chapter 2. The WebSocket API
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'If you are familiar with HTML and JavaScript, you already know enough stuff
    to start developing HTML5 WebSockets right now. WebSocket communication and data
    transmission is bidirectional, so we need two parties to establish it: a server
    and a client. This chapter focuses on the HTML5 web client and introduces the
    WebSocket client API.'
  prefs: []
  type: TYPE_NORMAL
- en: HTML5 basics
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Any HTML5 web client is a combination of structure, styling, and programming
    logic. As we have already mentioned, the HTML5 framework provides discrete sets
    of technologies for each use. Although we assume that you are already slightly
    familiar with these concepts, let's have a quick look at them.
  prefs: []
  type: TYPE_NORMAL
- en: Markup
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The markup defines the structure of your web application. It is a set of XML
    tags that lets you specify the hierarchy of the visual elements within an HTML
    document. Popular new HTML5 tags include the `header`, `article`, `footer`, `aside`,
    and `nav` tags. The elements have a specific meaning and help distinguish the
    different parts of a web document.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is a simple example of HTML5 markup code that generates the essential
    elements for our chatting app: a text field, two buttons, and a label. The text
    field is used for typing our message, the first button will send the message,
    the second button will terminate the chat, and the label will display the interactions
    coming from the server:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: The first line of the preceding code (the `DOCTYPE`) indicates that we are using
    the latest version of HTML, which is HTML5.
  prefs: []
  type: TYPE_NORMAL
- en: For more information about the HTML5 markup, consider visiting [http://html5doctor.com/](http://html5doctor.com/).
    There is a complete reference for the supported HTML5 tags at [http://html5doctor.com/element-index/](http://html5doctor.com/element-index/).
  prefs: []
  type: TYPE_NORMAL
- en: Styling
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In order to display colors, backgrounds, fonts, alignments, and so on, you
    need to be familiar with **Cascading Style Sheets** (**CSS**). CSS is quite self-explanatory,
    so, if you want to change the header style (for example color, alignment, and
    font), you would write something similar to the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '[http://www.css3.info/](http://www.css3.info/) is a great resource for CSS3
    and further reading.'
  prefs: []
  type: TYPE_NORMAL
- en: Logic
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The markup defines the structure and the CSS rules apply the styling. What about
    event handling and user actions? Well, here comes JavaScript! JavaScript is a
    scripting programming language that lets you control and alter the behavior of
    your web app according to the accompanying actions. Using JavaScript, you can
    handle button clicks, page loads, apply addition styling, add special effects,
    or even fetch data from web services. Using JavaScript, you can create objects,
    assign them properties and methods, and raise and catch events when something
    occurs.
  prefs: []
  type: TYPE_NORMAL
- en: 'Following is a simple JavaScript example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: The first line searches the document tree, finds the element named `action-button`
    and stores it in an object named `buttonSend`. Then, a function is assigned to
    the onclick event of the button. The body of the function is executed every time
    the button is clicked on.
  prefs: []
  type: TYPE_NORMAL
- en: The brand-new HTML5 features are heavily based on JavaScript, so a basic knowledge
    of this language is essential before implementing any web app. Most importantly,
    the WebSocket API is pure JavaScript, too!
  prefs: []
  type: TYPE_NORMAL
- en: A chatting application
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The most popular kind of full-duplex communication is chatting. We''ll start
    the development of a simple chatting application right here. First thing to do
    is configure the client side, which consists of three basic files:'
  prefs: []
  type: TYPE_NORMAL
- en: An HTML (`.html`) file containing the markup structure of the web page
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A CSS (`.css`) file containing all the styling information
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A JavaScript (`.js`) file containing the logic of the application
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Currently, that's all you need to have for a full-featured HTML5 chat client.
    No browser plugins or other external libraries are required.
  prefs: []
  type: TYPE_NORMAL
- en: API overview
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**API**, which stands for **Application Programming Interface**, is a set of
    objects, methods, and routines that let you interact with the underlying layer
    of functionality. Considering the WebSocket protocol, its API includes the WebSocket
    primary object, events, methods, and attributes.'
  prefs: []
  type: TYPE_NORMAL
- en: Translating these characteristics into actions, the WebSocket API allows you
    to connect to a local or remote server, listen for messages, send data, and close
    the connection.
  prefs: []
  type: TYPE_NORMAL
- en: Here is a typical usage of the WebSocket API.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following illustration shows the typical WebSocket workflow:'
  prefs: []
  type: TYPE_NORMAL
- en: '![API overview](img/6962_02_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Browser support
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The WebSocket protocol is a new HTML5 feature, so not every browser supports
    it yet. If you ever tried to run WebSocket-specific code on a browser that is
    not supported, nothing would happen. Think of your users: it wouldn''t be nice
    for them to surf on an unresponsive site. Moreover, you wouldn''t like to miss
    any potential customers!'
  prefs: []
  type: TYPE_NORMAL
- en: As a result, you should check for browser compatibility before running any WebSocket
    code. If the browser cannot run the code, you should provide an error message
    or a fallback, such as AJAX or Flash-based functionality. There will be more on
    fallbacks in [Chapter 6](ch06.html "Chapter 6. Error Handling and Fallbacks"),
    *Error Handling and Fallbacks*. I also like providing messages that gently prompt
    my users to update their browser.
  prefs: []
  type: TYPE_NORMAL
- en: 'JavaScript provides an easy way to find out whether a browser can execute WebSocket-specific
    code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'The `window.WebSocket` statement indicates whether the WebSocket protocol is
    implemented in the browser. The following statements are equivalent:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Each one of them results in the same validation check. You can also check about
    any feature support using your browser's developer tools.
  prefs: []
  type: TYPE_NORMAL
- en: Want to see which browsers do support the WebSocket protocol? There is an up-to-date
    resource available at [http://caniuse.com/#feat=websockets](http://caniuse.com/#feat=websockets).
  prefs: []
  type: TYPE_NORMAL
- en: At the time of writing, WebSocket is fully supported by Internet Explorer 10+,
    Firefox 20+, Chrome 26+, Safari 6+, Opera 12.1+, Safari for iOS 6+, and Blackberry
    Browser 7+.
  prefs: []
  type: TYPE_NORMAL
- en: The WebSocket object
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'It''s now time to initialize a connection to the server. All we need is to
    create a WebSocket JavaScript object, providing the URL to the remote or local
    server:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: When this object is constructed, it immediately opens a connection to the specified
    server. [Chapter 3](ch03.html "Chapter 3. Configuring the Server"), *Configuring
    the Server*, will show us in detail how we can develop the server-side program.
    For now, just keep in mind that a valid WebSocket URL is necessary.
  prefs: []
  type: TYPE_NORMAL
- en: The example URL `ws://echo.websocket.org` is a public address that we can use
    for testing and experiments. The [Websocket.org](http://Websocket.org) server
    is always up and running and, when it receives a message, it sends it back to
    the client! It's all we need in order to ensure that our client-side application
    works properly.
  prefs: []
  type: TYPE_NORMAL
- en: Events
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'After creating the `WebSocket` object, we need to handle the events it exposes.
    There are four main events in the WebSocket API: Open, Message, Close, and Error.
    You can handle them either by implementing the `onopen`, `onmessage`, `onclose`,
    and `onerror` functions respectively, or by using the `addEventListener` method.
    Both ways are almost equivalent for what we need to do, but the first one is much
    clearer.'
  prefs: []
  type: TYPE_NORMAL
- en: Note that, obviously, the functions we'll provide to our events will not be
    executed consecutively. They will be executed asynchronously when a specific action
    occurs.
  prefs: []
  type: TYPE_NORMAL
- en: So, let's have a closer look at them.
  prefs: []
  type: TYPE_NORMAL
- en: onopen
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The `onopen` event is raised right after the connection has been successfully
    established. It means that the initial handshake between the client and the server
    has led to a successful first deal and the application is now ready to transmit
    data:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: It's a good practice to provide your users with the appropriate feedback while
    they are waiting for the connection to open. WebSockets are definitely fast, but
    the Internet connection might be slow!
  prefs: []
  type: TYPE_NORMAL
- en: onmessage
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The `onmessage` event is the client''s ear to the server. Whenever the server
    sends some data, the `onmessage` event is fired. Messages might contain plain
    text, images, or binary data. It''s up to you how that data will be interpreted
    and visualized:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Checking for data types is pretty easy. Here is how we can display a string
    response:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: We'll learn more about the supported data types in [Chapter 4](ch04.html "Chapter 4. Data
    Transfer – Sending, Receiving, and Decoding"), *Data Transfer – Sending, Receiving,
    and Decoding*
  prefs: []
  type: TYPE_NORMAL
- en: onclose
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `onclose` event marks the end of the conversation. Whenever this event is
    fired, no messages can be transferred between the server and the client unless
    the connection is reopened. A connection might be terminated due to a number of
    reasons. It can be closed by the server, it may be closed by the client using
    the `close()` method, or due to TCP errors.
  prefs: []
  type: TYPE_NORMAL
- en: You can easily detect the reason the connection was closed by checking the `code`,
    `reason`, and `wasClean` parameters of the event.
  prefs: []
  type: TYPE_NORMAL
- en: The `code` parameter provides you with a unique number indicating the origin
    of the interruption.
  prefs: []
  type: TYPE_NORMAL
- en: The `reason` parameter provides the description of the interruption in a string
    format.
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, the `wasClean` parameter indicates whether the connection was closed
    due to a server decision or due to unexpected network behavior. The following
    code snippet illustrates the proper usage of the parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: You can find a detailed list of the code values in the appendix of this book.
  prefs: []
  type: TYPE_NORMAL
- en: onerror
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `onerror` event is fired when something wrong (usually unexpected behavior
    or failure) occurs. Note that `onerror` is always followed by a connection termination,
    which is a close event.
  prefs: []
  type: TYPE_NORMAL
- en: 'A good practice when something bad happens is to inform the user about the
    unexpected error and probably try to reconnect:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Actions
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Events are raised when something happens. We make explicit calls to actions
    (or methods) when we want something to happen! The WebSocket protocol supports
    two main actions: `send()` and `close()`.'
  prefs: []
  type: TYPE_NORMAL
- en: send()
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'While a connection is open, you can exchange messages with the server. The
    `send()` method allows you to transfer a variety of data to the web server. Here
    is how we can send a chat message (actually, the contents of the HTML text field)
    to everyone in the chat room:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: It's that simple!
  prefs: []
  type: TYPE_NORMAL
- en: 'But wait… The preceding code is not 100 percent correct. Remember that you
    can send messages only if the connection is open. This means that we either need
    to place the `send()` method inside the `onopen` event handler or check the `readyState`
    property. This property returns the state of the WebSocket connection. So, the
    previous snippet should be modified accordingly:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: After sending the desired data, you can wait for an interaction from the server
    or close the connection. In our demo example, we leave the connection open, unless
    the stop button is clicked on.
  prefs: []
  type: TYPE_NORMAL
- en: close()
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `close()` method stands as a goodbye handshake. It terminates the connection
    and no data can be exchanged unless the connection opens again.
  prefs: []
  type: TYPE_NORMAL
- en: 'Similarly to the previous example, we call the `close()` method when the user
    clicks on the second button:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'It is also possible to pass the `code` and `reason` parameters we mentioned
    earlier:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Properties
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `WebSocket` object exposes some property values that let us understand
    its specific characteristics. We have already met the `readyState` property. Following
    are the rest:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Properties | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `url` | Returns the URL of the WebSocket |'
  prefs: []
  type: TYPE_TB
- en: '| `protocol` | Returns the protocol used by the server |'
  prefs: []
  type: TYPE_TB
- en: '| `readyState` | Reports the state of the connection and can take one of the
    following self-explanatory values:`WebSocket.OPEN``WebSocket.CLOSED``WebSocket.CONNECTING``WebSocket.CLOSING`
    |'
  prefs: []
  type: TYPE_TB
- en: '| `bufferedAmount` | Returns the total number of bytes that were queued when
    the `send()` method was called |'
  prefs: []
  type: TYPE_TB
- en: '| `binaryType` | Returns the binary data format we received when the `onmessage`
    event was raised |'
  prefs: []
  type: TYPE_TB
- en: The complete example
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Here are the complete HTML and JavaScript files we used. We have omitted the
    stylesheet file in order to keep the main points simple. However, you can download
    the complete source code at [http://pterneas.com/books/websockets/source-code](http://pterneas.com/books/websockets/source-code).
  prefs: []
  type: TYPE_NORMAL
- en: index.html
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The complete markup code for our web app page is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: chat.js
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'All the JavaScript code for the chatting functionality is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: What about the server?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You have probably noticed that we use the `echo.websocket.org` server for this
    demo. This public service simply returns back the data you send. In the next chapter,
    we are going to build our own WebSocket server and develop a true chatting app.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we built our first WebSocket client application! We introduced
    the `WebSocket` object and explained its various methods, events, and properties.
    We also developed a basic chat client in a few lines of HTML and JavaScript code.
    As you noticed in the current examples, there is only a dummy server which echoes
    the messages. Read on to find out how we you can configure your own WebSocket
    server to do a lot more magic.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Downloading the example code**'
  prefs: []
  type: TYPE_NORMAL
- en: You can download the example code files for all Packt books you have purchased
    from your account at [http://www.packtpub.com](http://www.packtpub.com). If you
    purchased this book elsewhere, you can visit [http://www.packtpub.com/support](http://www.packtpub.com/support)
    and register to have the files e-mailed directly to you.
  prefs: []
  type: TYPE_NORMAL
