- en: Chapter 5. Node.js and Regex
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: So far, we've had fun learning how to create regular expressions for different
    situations. However, you may be wondering what it would be like to apply a regular
    expression in a real-world situation, such as reading a log file and presenting
    its information in a user-friendlier format?
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we will learn how to implement a simple **Node.js** application
    that reads a log file and parses it using a regular expression. This way, we can
    retrieve specific information from it and output it in a different format. We
    are going to test all the knowledge we obtained from the previous chapters of
    this book.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Installing the required software to develop our example
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Reading a file with Node.js
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Analyzing the anatomy of an Apache log file
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a parse with regular expressions to read an Apache log file
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting up Node.js
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Since we will be developing a Node.js application, the first step is to have
    Node.js installed. We can get it from [http://nodejs.org/download/](http://nodejs.org/download/).
    Just follow the download instructions and we will have it set up on our computer.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If this is your first time working with Node.js, please go through the tutorials
    at [https://nodejs.org/](https://nodejs.org/).
  prefs: []
  type: TYPE_NORMAL
- en: 'To make sure we have Node.js installed, open the terminal application (Command
    Prompt, if you''re using Windows), and type `node –v`. The Node.js version installed
    should be displayed as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Setting up Node.js](img/2258OS_05_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: We are now good to go!
  prefs: []
  type: TYPE_NORMAL
- en: Getting started with our application
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s start developing our sample application with Node.js, which will read
    a log file and parse its information using a regular expression. We are going
    to create all the required code inside a JavaScript file, which we will name as
    `regex.js`. Before we start coding, we will perform a simple test. Add the following
    content inside the `regex.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, in the terminal application, execute the `regex.js` command node from
    the directory that the file was created in. The **Hello, World!** message should
    be displayed as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Getting started with our application](img/2258OS_05_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The hello world application with Node.js is created and it works! We can now
    start coding our application.
  prefs: []
  type: TYPE_NORMAL
- en: Reading a file with Node.js
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As the main goal of our application is to read a file, we need the file that
    the application is going to read! We will be using a sample Apache log file. There
    are many files on the Internet, but we will be using the log file that can be
    downloaded from [http://fossies.org/linux/source-highlight/tests/access.log](http://fossies.org/linux/source-highlight/tests/access.log).
    Place the file in the same directory that the `regex.js` file was created.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This sample Apache log file is also available within the source code bundle
    from this book.
  prefs: []
  type: TYPE_NORMAL
- en: 'To read a file with Node.js, we need to import the Node.js filesystem module.
    Remove the `console.log` message we placed inside the `regex.js` file and add
    the following line of code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: To learn more about the Node.js filesystem module, please read its documentation
    at [http://nodejs.org/api/fs.html](http://nodejs.org/api/fs.html).
  prefs: []
  type: TYPE_NORMAL
- en: 'The next step is to open the file and read its content. We are going to use
    the following code to do this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'According to the Node.js documentation, the `readFile` function (`#1`) can
    receive three arguments: the name of the file (`access.log`), certain options
    (that we are not using in this example), and the callback function that will be
    executed when the contents of the file are loaded in the memory.'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: To learn more about the `readLine` function, please access [http://nodejs.org/api/fs.html#fs_fs_readfile_filename_options_callback](http://nodejs.org/api/fs.html#fs_fs_readfile_filename_options_callback).
  prefs: []
  type: TYPE_NORMAL
- en: The callback function receives two arguments. The first one is the error. In
    case something goes wrong, an exception will be thrown (`#2`). The second argument
    is `data`, which contains the file contents. We are going to store a string with
    all the file contents in a variable named `text` (`#3`).
  prefs: []
  type: TYPE_NORMAL
- en: Each record of the log is then placed in a row of the file. So, we can go ahead
    and separate the file records and store it into an array (`#4`). We can now iterate
    the array that holds the log rows (`#5`) and perform an action in each line. In
    this case, we are simply outputting the content of each line in `console` (`#6`)
    for now. We will replace line `#6` of the code with a different logic in the next
    section.
  prefs: []
  type: TYPE_NORMAL
- en: 'If we execute the `regex.js` command node, all the file content should be displayed
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Reading a file with Node.js](img/2258OS_05_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The anatomy of an Apache log file
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Before we create the regular expression that will match a line of the Apache
    file, we need to understand what kind of information it holds.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s take a look at a line from `access.log`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'The Apache access log that we are reading follows the `%h %l %u %t \"%r\" %>s
    %b \"%{Referer}i\" \"%{User-agent}i\"` format. Let''s take a look at each part:'
  prefs: []
  type: TYPE_NORMAL
- en: '`%h`: The first part of the log is the (`127.0.0.1`) IP address'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`%l`: In the second part, the hyphen in the output indicates that the requested
    piece of information is not available'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`%u`: The third part is the user ID of the person requesting the (`jan`) document.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`%t`: The fourth part is the time taken for the request to be received, such
    as (`[30/Jun/2004:22:20:17 +0200]`). It is in the `[day/month/year:hour:minute:second
    zone]` format, where:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`day` = 2*digit'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`month` = 3*letter'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`year` = 4*digit'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`hour` = 2*digit'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`minute` = 2*digit'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`second` = 2*digit'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`zone` = (``+'' | `-''`) 4*digit'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`\"%r\"`: The fifth part is the request line from the client that is given
    in double quotes, such as (`"GET /cgi-bin/trac.cgi/login HTTP/1.1"`)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`%>s`: The sixth part is the status code that the server sends back to the
    (`302`) client'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`%b`: The seventh part is the size of the object returned to the (`4370`) client'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`\"%{Referer}i\"`: The eighth part is the site that the client reports having
    been referred from, which is given in double quotes, such as (`"http://saturn.solar_system/cgi-bin/trac.cgi"`)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`\"%{User-agent}i\"`: The ninth and last part is the user-agent HTTP request
    header and is also given in double quotes, such as (`"Mozilla/5.0 (X11; U; Linux
    i686; en-US; rv:1.7) Gecko/20040620 Galeon/1.3.15"`)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: All the parts are separated by a space. With this information and that given
    previously, we can start creating our regular expression.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: For more information about the format of Apache logs, please read [http://httpd.apache.org/docs/2.2/logs.html](http://httpd.apache.org/docs/2.2/logs.html).
  prefs: []
  type: TYPE_NORMAL
- en: Creating the Apache log Regex
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In the Apache access log file, we have nine parts that we want to recognize
    and extract from each line of the file. We can try two approaches while creating
    a Regex: we can be very specific or more generic. As mentioned previously, the
    most powerful regular expressions are the ones that are generic. We will try to
    achieve these expressions in this chapter as well.'
  prefs: []
  type: TYPE_NORMAL
- en: For example, for the first part of the log, we know it is an IP address. We
    can be specific and use a Regex for the (`^\b\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}\b`)
    IPs or, as we know, the log starts with an IP we can use, such as `^(\S+)`, where,
    `^` means it matches the beginning of the input and `\S` matches a single character
    other than whitespace. The `^(\S+)` expression will match exactly the first part
    of the log, which consists of some specific information until it finds a space
    (such as the IP address). Also, `^(\S+)` is simpler than using `^\b\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}\b`
    and we've still achieved the same result.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s go ahead and test the regular expression created so far:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating the Apache log Regex](img/2258OS_05_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: To recapitulate what we learned in [Chapter 1](ch01.html "Chapter 1. Getting
    Started with Regex"), *Getting Started with Regex*, the `exec` method executes
    a search for a match in a string. It returns an array of information, as it is
    the first position the string has matched and then the subsequent position in
    each part of the Regex.
  prefs: []
  type: TYPE_NORMAL
- en: 'For the second and third parts, we can continue using the `^(\S+)` Regex. The
    second and third part can contain certain information (including a set of alphanumeric
    characters), or it can contain a hyphen. We are interested in the information
    present in each part until it finds a space. So, we can add two more `^(\S+)`
    to our Regex: `^(\S+) (\S+) (\S+)` and test it:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating the Apache log Regex](img/2258OS_05_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The first three parts of the log line are recognized.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a Regex for the time part
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The fourth part is the time that is given between brackets. The Regex that is
    going to match the time from the log is `\[([^:]+):(\d+:\d+:\d+) ([^\]]+)\]`.
  prefs: []
  type: TYPE_NORMAL
- en: Let's see how we can achieve this result.
  prefs: []
  type: TYPE_NORMAL
- en: First, we have the opening and closing brackets. We cannot simply use `[]` as
    part of the Regex, because brackets in a regular expression represent a set of
    characters (groups as we learned in [Chapter 3](ch03.html "Chapter 3. Special
    Characters"), *Special Characters*). So, we need to use the (`\`) scape character
    before each bracket, so that we can represent the bracket as part of the regular
    expression.
  prefs: []
  type: TYPE_NORMAL
- en: The next piece of the time Regex is `"([^:]+):"`. After the opening bracket,
    we want to match any character until we find the (`:`) colon. We learned in [Chapter
    2](ch02.html "Chapter 2. The Basics"), *The Basics* about a negated range and
    this is exactly what we are going to use. We are expecting any character to be
    present except the colon, so we use `[ˆ:]` to represent it. Also, it can consist
    of one or more characters, such as (`+`). Next, we are expecting a (`:`) colon.
    With this piece of the regular expression, we can match `"[30/Jun/2004:" from
    "[30/Jun/2004:22:20:17 +0200]"`.
  prefs: []
  type: TYPE_NORMAL
- en: The same Regex can be represented as `"(\d{2}\/\w{3}\/\d{4}):"`, since the day
    is given in the form of two digits, the month is given in three characters, and
    the year in four digits, and are separated by `\`.
  prefs: []
  type: TYPE_NORMAL
- en: The next piece of the Regex is `(\d+:\d+:\d+)`. It will match `22:20:17` from
    the example. The `\d` character matches any number (`+` matches one or more),
    followed by a (`:`) colon. We could also use (`\d{2}:\d{2}:\d{2}`), since the
    hours, minutes, and seconds are represented by two digits each.
  prefs: []
  type: TYPE_NORMAL
- en: The final piece is `([^\]]+)\]`. We are expecting any character except `"]"
    ([^\]] – negate ] )`. This will match the time zone (+0200). We could also use
    `([\+|-]\d{4})` as Regex, since the zone format is `+` or `-`, followed by four
    digits.
  prefs: []
  type: TYPE_NORMAL
- en: 'When we test the regular expression, we will get this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating a Regex for the time part](img/2258OS_05_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Note that each piece of the time was split (the date, time, and zone) by a
    subset, separated by a parenthesis group "()". If we want to have the time as
    a single piece, we can remove the subsets: `\[(\d{2}\/\w{3}\/\d{4}:\d{2}:\d{2}:\d{2}
    [\+|-]\d{4})\]`.'
  prefs: []
  type: TYPE_NORMAL
- en: Creating a Regex for the request information
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Following the parts that we separated (in a few sections previous to this one),
    let's work on the fifth part of the log, which is the request information.
  prefs: []
  type: TYPE_NORMAL
- en: Let's take a look at the "`GET /cgi-bin/trac.cgi/login HTTP/1.1`" example, so
    we can create a regular expression from it.
  prefs: []
  type: TYPE_NORMAL
- en: The request is given in double quotes, so that we know a regular expression
    is to be created inside `\" \"`. From the preceding example, there are three pieces
    (`GET`, `/cgi-bin/trac.cgi/login`, and `HTTP/1.1`). So, `GET` can be represented
    by `(\S+)`.
  prefs: []
  type: TYPE_NORMAL
- en: Next, we have `/cgi-bin/trac.cgi/login`. We will use `(.*?)`, meaning, it can
    be any character or nothing else. We will use this because we do not know the
    format of this information.
  prefs: []
  type: TYPE_NORMAL
- en: Then, we have the `HTTP/1.1` protocol and to match it, we will also use `(\S+)`.
  prefs: []
  type: TYPE_NORMAL
- en: 'This will be the result when we try to match the regular expression:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating a Regex for the request information](img/2258OS_05_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If we want to retrieve each part of the request separately (such as the method,
    resource, and protocol), we can use `()`, as we used in the first approach, for
    the time.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a Regex for the status code and object size
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The next two parts of the log are simple. The first one is the status, which
    is represented by `2xx`, `3xx`, `4xx`, or `5xx`, so, it is basically three digits.
    We can represent it in two ways: `(\S+)`, which will match any character until
    it finds a space, or `(\d{3})`. Of course, we can be even more specific and allow
    the first digit to be only `2`, `3`, `4`, or `5`, though, let''s not complicate
    it any more than is needed.'
  prefs: []
  type: TYPE_NORMAL
- en: A number can also represent the object size. However, if no information is returned,
    it will be represented by a hyphen, so `(\S+)` represents best. Or we can also
    use `([\d|-]+)`.
  prefs: []
  type: TYPE_NORMAL
- en: 'The output will be the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating a Regex for the status code and object size](img/2258OS_05_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Creating a Regex for the referrer and the user agent
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Both parts are given in double quotes. We can represent the information using
    the `"([^"]*)"` expression, which means including any character except `"`. We
    can apply it in both parts.
  prefs: []
  type: TYPE_NORMAL
- en: 'With the addition of the last two parts of the log, we will get this output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating a Regex for the referrer and the user agent](img/2258OS_05_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Our final Regex to match a line of the Apache access log, is given here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Trying to create a regular expression at once can be tricky and complicated.
    However, we've split each part and created a Regex. At the end of all this, all
    we have to do is combine all these parts together.
  prefs: []
  type: TYPE_NORMAL
- en: We are now ready to continue coding our application.
  prefs: []
  type: TYPE_NORMAL
- en: Parsing each Apache log row
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'We now know the regular expression that we want to use, so all we need to do
    is add the (`#1`) Regex to the code, execute the Regex with each line (`#2`),
    and obtain the results (`#3`). We will simply output the results in the console
    for now (`#4`). The code is presented here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Is this the only way of making Regex work with Node.js?**'
  prefs: []
  type: TYPE_NORMAL
- en: In this example, we used the JavaScript Regex, which we've learned throughout
    this book. However, Node.js has other packages that can make our lives easier
    when working with regular expressions. The `node-regexp` package is one of the
    packages that provides a new way of working with regular expressions while working
    with Node.js. It is worth taking a look at it and spending some time playing with
    it at [https://www.npmjs.com/package/node-regexp](https://www.npmjs.com/package/node-regexp).
  prefs: []
  type: TYPE_NORMAL
- en: We will continue completing our code in the next two sections.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a JSON object for each row
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Let's try to do something more useful with each row of the Apache log. We are
    going to create a **JavaScript Object Notation** (**JSON**) object with each row
    and add it to an array. To wrap our application, we will save the JSON content
    into a file.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: To learn more about JSON, please refer to [http://www.json.org/](http://www.json.org/).
  prefs: []
  type: TYPE_NORMAL
- en: 'So after the Regex declaration (which is inside the `var` declaration), we
    are going to add a new variable that will hold the collection of **JSON** objects
    we are going to create:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Instead of lines `#3` and `#4`, as seen in the code of the previous section,
    we will place this code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: This code will verify if any result arises from the execution of the Regex,
    and will create a JSON object called **row**. Then, we simply need to add the
    JSON object into the `jsonObject` array.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, we will construct the last piece of the Node.js application. We will
    create a JSON file with the JSON array that we created. We need to place the following
    code in the `#5` line of the code, as seen in the previous section:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: To learn more about the `writeFile` function, please refer to [http://nodejs.org/api/fs.html#fs_fs_writefile_filename_data_options_callback](http://nodejs.org/api/fs.html#fs_fs_writefile_filename_data_options_callback).
  prefs: []
  type: TYPE_NORMAL
- en: 'The result will be a JSON with content similar to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Display the JSON in a table
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'The last step is to create a simple HTML page to display the Apache log content.
    We are going to create an HTML file and place the following code in it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: The preceding code contains the required JavaScript and CSS imports, so that
    we can display the Apache log.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The table for this example was created using a Bootstrap table. For more information
    on its usage and examples, please access [http://wenzhixin.net.cn/p/bootstrap-table/docs/examples.html](http://wenzhixin.net.cn/p/bootstrap-table/docs/examples.html).
  prefs: []
  type: TYPE_NORMAL
- en: 'The next and last piece of code is the body of the HTML:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: The body will hold a table that will read the content of the `log.json` file,
    parse it, and display it.
  prefs: []
  type: TYPE_NORMAL
- en: To be able to open the html file in the browser, we need a server. This is because
    our code is using an Ajax request to load the JSON file created by the Node.js
    application. Since we have Node.js installed, we can use its simplest server to
    execute our code.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the terminal, execute the following command to install the server:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, change the directory to the one you created for the HTML file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, start the server:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'You will be able to see the results from the `http://localhost:8080/` URL.
    We can see the final result in the following image:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Display the JSON in a table](img/2258OS_05_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'We can also toggle the results in the table and view the complete data:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Display the JSON in a table](img/2258OS_05_11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Now we are done with our sample Node.js application, which has read and parsed
    an Apache log file and can be displayed in a friendlier way.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we learned how to create a simple Node.js application that
    read an Apache log file and extracted the log information using a regular expression.
    We were able to put in to practice the knowledge we acquired in the previous chapters
    of the book.
  prefs: []
  type: TYPE_NORMAL
- en: We also learned that to create a very complex Regex, it is best to do it in
    parts. We learned that we can be very specific while creating a regular expression
    or we can be more generic and achieve the same results.
  prefs: []
  type: TYPE_NORMAL
- en: As a new version of **EcmaScript** is being created (EcmaScript 6, which will
    add lots of new features to JavaScript), it is good to familiarize yourself with
    the improvements related to regular expressions as well. For more information
    please visit [http://www.ecmascript.org/dev.php](http://www.ecmascript.org/dev.php).
  prefs: []
  type: TYPE_NORMAL
- en: We hope you enjoy the book! Have fun creating regular expressions!
  prefs: []
  type: TYPE_NORMAL
