- en: Chapter 2. Getting Started
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The real pleasures and benefits of Yii are quickly revealed simply by using
    it. In this chapter, we will see how the concepts introduced in the previous chapter
    are manifested in an example Yii application. In the spirit of Yii's philosophy
    of convention over configuration, we will follow a standard convention and begin
    by writing a "Hello, World!" program in Yii.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter we will cover:'
  prefs: []
  type: TYPE_NORMAL
- en: Yii framework installation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a new application
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating controllers and views
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding dynamic content to view files
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Yii request routing and linking pages together
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Our first step is to install the framework. Let's do that now.
  prefs: []
  type: TYPE_NORMAL
- en: Installing Yii
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Prior to installing Yii, you must configure your application development environment
    as a web server capable of supporting PHP 5.1.0 or above. Yii has been thoroughly
    tested with the Apache HTTP server on Windows and Linux operating systems. It
    may also run on other web servers and platforms that support PHP 5\. We assume
    that the reader has previously engaged in PHP development, and has access to or
    otherwise has knowledge of how to set up such an environment. We will leave the
    installation of a web server and PHP itself, as an exercise to the reader.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Some popular installation packages includ
  prefs: []
  type: TYPE_NORMAL
- en: '[http://www.apachefriends.org/en/xampp.html](http://www.apachefriends.org/en/xampp.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[http://www.mamp.info/en/index.html](http://www.mamp.info/en/index.html) (`mac
    only`)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The basic Yii installation is almost trivial. There are really only two necessary
    steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Download the Yii framework from [http://www.yiiframework.com/download/](http://www.yiiframework.com/download/).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Unpack the downloaded file to a web-accessible directory. There are several
    versions of Yii to choose from when downloading the framework. We will be using
    version 1.1.12 for the purpose of this book, which is the latest stable version
    as of the time of writing. Though most of the example code should work with any
    1.1.x version of Yii, there may be some subtle differences if you are using a
    different version. Please attempt to use 1.1.12 if you are following along with
    the examples.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'After you have downloaded the framework files and unpacked them in a web-accessible
    directory, list the contents. You should see the following high-level directories
    and files:'
  prefs: []
  type: TYPE_NORMAL
- en: '`CHANGELOG`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`LICENSE`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`README`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`UPGRADE`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`demos/`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`framework/`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`requirements/`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Now that we have our framework unpacked in a web-accessible directory, it is
    advised that you verify that your server satisfies all of the requirements of
    using Yii, to ensure that the installation was a success. Luckily, doing so is
    very easy. Yii comes with a simple requirements checking tool. To use the tool
    and have it verify the requirements for your installation, simply point your browser
    to the `index.php` entry script under the `requirements/` directory that came
    with the downloaded files. For example, assuming that the name of the directory
    containing all of the framework files is simply called `yii`, the URL to access
    the requirements checker might look like:'
  prefs: []
  type: TYPE_NORMAL
- en: '`http://localhost/yii/requirements/index.php`'
  prefs: []
  type: TYPE_NORMAL
- en: 'The following screenshot shows the results that we see for our configuration:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Installing Yii](graphics/8727_02_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Using the requirements checker is not, in itself, a requirement for installation.
    But it is certainly recommended to ensure proper installation. As you can see,
    not all of our results under the details section received a **Passed** status,
    as some display a **Warning** result. Of course, your configuration will most
    likely be slightly different from ours, and consequently your results may be slightly
    different as well. That is okay. It is not necessary that all of the checks under
    the **Details** section pass, but it is necessary to receive the following message
    under the **Conclusion** section: **Your server configuration satisfies the minimum
    requirements by Yii**.'
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The Yii framework files do not need to be, and it is recommended they not be,
    placed in a publicly accessible web directory. We did this here simply to quickly
    take advantage of the requirements checker in our browser. A Yii application has
    a one entry script, which is usually the only file that needs to be placed in
    the webroot (by webroot, we mean the directory containing the `index.php` entry
    script). Other PHP scripts, including all of the Yii framework files, should be
    protected from outside user access to avoid security issues. Simply reference
    the directory containing the Yii framework files in the entry script and place
    these files outside of the webroot.
  prefs: []
  type: TYPE_NORMAL
- en: Installing a database
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Throughout this book, we will be using a database to support many of our examples
    and the application that we will be writing. In order to properly follow along
    with this book, it is recommended you install a database server. Though you can
    use any database that is supported by PHP with Yii, if you want to use some of
    the built-in database abstraction layers and tools within Yii, as we will be using,
    you will need to use one that is supported by the framework. As of version 1.1
    those are:'
  prefs: []
  type: TYPE_NORMAL
- en: MySQL 4.1 or later
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: PostgresSQL 7.3 or later
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: SQLite 2 and 3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Microsoft SQL Server 2000 or later
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Oracle
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: While you may follow along with all of the examples in this book by using any
    of the supported database servers, we will be using MySQL (5.1 to be more specific)
    as our database server throughout all the examples. It is recommended that you
    also use MySQL, version 5 or greater, to ensure that the examples provided work
    without having to make adjustments. We won't need a database for our simple "Hello,
    World!" application seen in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have installed the framework and have verified that we have met
    the minimum requirements, let's move on to creating a brand new Yii web application.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a new application
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To create a new application, we are going to use a little powerhouse of a tool
    that comes packaged with the framework, called *yiic*. This is a command-line
    tool that you can use to quickly bootstrap a brand new Yii application. It is
    not mandatory to use this tool, but it saves time and guarantees that a proper
    directory and file structure is in place for the application.
  prefs: []
  type: TYPE_NORMAL
- en: 'To use this tool, open up your command line, and navigate to a place in your
    filesystem where you will want to create your application''s directory structure.
    For the purpose of this demo application, we will assume the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '`YiiRoot` is the name of the directory where you have installed the Yii framework
    files'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`WebRoot` is configured as a document root of your web server'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'From your command line, change to your `WebRoot` directory and execute the
    `yiic` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `yiic` command may not work for you as expected, especially if you are attempting
    to use it in a Windows environment. The `yiic` file is an executable that runs
    using your command-line version of PHP. It invokes the `yiic.php` script. You
    may need to fully qualify by using `php` in front, as in `$ php yiic` or `$ php
    yiic.php`. You may also need to specify the PHP executable to be used, such as
    `C:\PHP5\php.exe yiic.php`. There is also the `yiic.bat` file, which executes
    the `yiic.php` file, that may be more suitable for Windows users. You may need
    to ensure that your PHP executable location is accessible in your `%PATH%` variable.
    Please try these variations to find a suitable solution for your computer configuration.
    I will continue to simply refer to this command as `yiic`.
  prefs: []
  type: TYPE_NORMAL
- en: The `yiic webapp` command is used to create a brand new Yii web application.
    It takes just a single argument to specify either the absolute or relative path
    to the directory in which the application should be created. The result is the
    generation of all the necessary directories and files that are used to provide
    a skeleton of the default Yii web application.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s list the contents of our new application to see what was created for
    us:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'The following is a description of these high-level items that were automatically
    created:'
  prefs: []
  type: TYPE_NORMAL
- en: '`index.php`: Web application entry script file'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`index-test.php`: Entry script file for loading a test configuration'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`assets/`: Contains published resource files'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`css/`: Contains CSS files'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`images/`: Contains image files'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`themes/`: Contains application themes'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`protected/`: Contains protected (non-public) application files'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: With the execution of one simple command from the command line, we have created
    all the directory structure and files needed to immediately take advantage of
    Yii's sensible default configuration. All of these directories and files, along
    with the subdirectories and files that they contain, can look a little daunting
    at first glance. However, we can ignore most of them as we are getting started.
    What is important to note is that all of these directories and files are actually
    a working web application. The `yiic` command has populated the application with
    enough code to establish a simple home page, a typical contact-us page to provide
    an example of a web form, and a login page to demonstrate basic authorization
    and authentication in Yii. If your web server supports the GD2 graphics library
    extension, you will also see a CAPTCHA widget on the contact-us form, and the
    application will have the corresponding validation for this form field.
  prefs: []
  type: TYPE_NORMAL
- en: 'As long as your web server is running, you should be able to open up your browser
    and navigate to `http://localhost/helloworld/index.php`. Here you will be presented
    with a **My Web Application** home page along with the friendly greeting **Welcome
    To My Web Application**, followed by some helpful next steps information. The
    following screenshot shows this example home page:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating a new application](graphics/8727_02_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You will need to ensure that both the `assets/` and `protected/runtime/` directories
    are writable by your web server process, otherwise you may see an error rather
    than the working application.
  prefs: []
  type: TYPE_NORMAL
- en: You'll notice that there is a working application navigation bar along the top
    of the page. From left to right there is **Home**, **About**, **Contact**, and
    **Login**. Click around and explore. Clicking on the **About** link provides a
    simple example of a static page. The **Contact** link will take you to the contact
    us form that was mentioned before, along with the CAPTCHA input field in the form.
    (Again, you will only see the CAPTCHA field if you have the `gd` graphics extension
    as part of your PHP configuration.)
  prefs: []
  type: TYPE_NORMAL
- en: The **Login** link will take you to a page displaying a login form. This is
    working code with form validations, as well as username and password credential
    validation and authentication. Using either *demo/demo* or *admin/admin* as the
    username/password combination will get you logged onto the site. Try it out! You
    can try a login that will fail (any combination other than demo/demo or admin/admin)
    and see the error validation messages get displayed. After successfully logging
    in, the **Login** link in the header changes to a **Logout** link (username),
    where the username is either demo or admin depending on the username that you
    used to log in. It is amazing that so much has been accomplished without having
    to do any coding.
  prefs: []
  type: TYPE_NORMAL
- en: '"Hello, World!"'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: All of this generated code will start to make more sense once we walk through
    a simple example. To try out this new system, let's build that "Hello, World!"
    program we promised at the start of this chapter. A "Hello, World!" program in
    Yii will be a simple web page application that sends this very important message
    to our browser.
  prefs: []
  type: TYPE_NORMAL
- en: As discussed in [Chapter 1](ch01.html "Chapter 1. Meet Yii"), *Meet Yii*, Yii
    is a Model-View-Controller framework. A typical Yii web application takes in an
    incoming request from a user, processes information in that request in order to
    create a controller, and then calls an action within that controller. The controller
    can then invoke a particular view to render and return a response to the user.
    If dealing with data, the controller may also interact with a model to handle
    all the **CRUD** (**Create, Read, Update, Delete**) operations on that data. In
    our simple "Hello, World!" application, all we will require is the code for a
    controller and a view. We are not dealing with any data, so a model will not be
    needed. Let's begin our example by creating our controller.
  prefs: []
  type: TYPE_NORMAL
- en: Creating the controller
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Previously, we used the `yiic` `webapp` command to help us generate a new Yii
    web application. To create a new controller for our "Hello, World!" application,
    we'll use another utility tool provided by Yii. This tool is called Gii. **Gii**
    is a highly customizable and extensible, web-based, code-generating platform.
  prefs: []
  type: TYPE_NORMAL
- en: Configuring Gii
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Before we can use Gii, we have to configure it within our application. We do
    this in our main application configuration file located at `protected/config/main.php`.
    To configure Gii, open up this file and uncomment the `gii` module. Our autogenerated
    code already added the `gii` configuration, but it is commented out. So all we
    need to do is uncomment and then also add our own password, as shown in the following
    snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Once uncommented, Gii is configured as an application module. We will cover
    Yii *modules* in detail, later in the book. The important thing at this point
    is to make sure this is added to the configuration file and that you provide your
    password. With this in place, navigate to the tool via `http://localhost/helloworld/index.php?r=gii`.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Actually, you can specify the password value as `false` then the module will
    not require a password. Since the ipFilters property is specified to only allow
    access to the localhost machine, it is safe to set the password to `false` for
    you local development environment.
  prefs: []
  type: TYPE_NORMAL
- en: 'Okay, after a successful entry of your password (unless you specified that
    a password should not be used), you are presented with the menu page listing Gii''s
    main features:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Configuring Gii](graphics/8727_02_03_new.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Gii has several code generation options listed in the left-hand side menu. We
    want to create a new controller, so click on the **Controller Generator** menu
    item.
  prefs: []
  type: TYPE_NORMAL
- en: 'Doing so will bring us to a form that allows us to fill out the relevant details
    to create a new Yii controller class. In the following screenshot, we have already
    filled out the **Controller ID** value to be `message`, and we have added an **Action
    ID** value that we are calling `hello`. The following screenshot also reflects
    that we have clicked on the **Preview** button. This is showing us all of the
    files that will be generated along with our controller class:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Configuring Gii](graphics/8727_02_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: We can see that in addition to our `MessageController` class, Gii is also going
    to create a view file for each of the Action IDs that we specified. You may recall
    from [Chapter 1](ch01.html "Chapter 1. Meet Yii"), *Meet Yii*, that if `message`
    is the **Controller ID**, our corresponding class file is named `MessageController`.
    Similarly if we provide an **Action ID** value of `hello`, we would expect there
    to be a method name in the controller called `actionHello`.
  prefs: []
  type: TYPE_NORMAL
- en: You can also click on the links provided in the **Preview** option to see the
    code that will be generated for each file. Go ahead and check them out. Once you
    are happy with what is going to be generated, go ahead and click on the **Generate**
    button. You should receive a message telling you that the controller was successfully
    created, with a link to try it now. If instead you received an error message,
    make sure that the `controllers`/ and `views`/ directories are writable by your
    web server process.
  prefs: []
  type: TYPE_NORMAL
- en: 'Clicking on the **try it now** link will actually take us to a *404 page not
    found* error page. The reason for this is that we did not specify the default
    actionID `index` when we created our new controller. We decided to call ours `hello`
    instead. All we need to do in order to make the request route to our `actionHello()`
    method is to add the actionID to the URL. This is shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Configuring Gii](graphics/8727_02_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Now we have it displaying the result of calling the `MessageController::actionHello()`
    method.
  prefs: []
  type: TYPE_NORMAL
- en: 'This is great. With a little help from Gii, we have generated a new controller
    PHP file called `MessageController.php`, and it was placed properly under the
    default controllers'' directory `protected/controllers/`. The generated `MessageController`
    class extends an application base class `Controller` located at `protected/components/Controller.php`,
    and this class in turn extends the base framework class `CController`. Since we
    specified the actionID `hello`, a simple action was also created within `MessageController`
    called `actionHello()`. Gii also assumed that this action, like most actions defined
    by a controller, will need to render a view. So it added the code to this method
    to render a view file by the same name, `hello.php`, and placed it in the default
    directory `protected/views/message/` for view files associated with this controller.
    Here is the uncommented part of the code that was generated for the `MessageController`
    class:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: As we can see, since we did not specify 'index' as one of the actionIDs when
    creating this controller with Gii, there is no `actionIndex()` method. As was
    discussed in [Chapter 1](ch01.html "Chapter 1. Meet Yii"), *Meet Yii*, by convention,
    a request that specifies a message as the controllerID, but does not specify an
    action, will be routed to the `actionIndex()` method for further processing. This
    is why we initially saw the 404 error, because the request was not specifying
    an actionID.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s take a second and fix this. As we have mentioned, Yii favors convention
    over configuration and has sensible defaults for almost everything. At the same
    time, almost everything is also configurable, and the default action for a controller
    is no exception. With a simple, single line at the top of our `MessageController`,
    we can define our `actionHello()` method as the default action. Add the following
    line to the top of the `MessageController` class:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Downloading the example code**'
  prefs: []
  type: TYPE_NORMAL
- en: You can download the example code files for all Packt books you have purchased
    from your account at [http://www.PacktPub.com](http://www.PacktPub.com). If you
    purchased this book elsewhere, you can visit [http://www.PacktPub.com/support](http://www.PacktPub.com/support)
    and register to have the files e-mailed directly to you.
  prefs: []
  type: TYPE_NORMAL
- en: Try it out by navigating to `http://localhost/helloworld/index.php?r=message`.
    You should still see the `hello action` page being displayed and no longer see
    the error page.
  prefs: []
  type: TYPE_NORMAL
- en: One final step
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To turn this into a "Hello, World!" application, all we need to do is customize
    our `hello.php` view to display "Hello, World!". Doing so is simple. Edit the
    file `protected/views/message/hello.php` so that it contains just the following
    code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Save it, and view it again in your browser: `http://localhost/helloworld/index.php?r=message`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'It now displays our introductory greeting, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![One final step](graphics/8727_02_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: We have our simple application working with stunningly minimal code. All we
    have added is one line of HTML to our `hello.php` view file.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You may be wondering where/how all of the other HTML is being generated. Our
    basic `hello.php` view file only contains a single line with an `<h1>` tag. When
    we call `render()` in our controller, there is also a layout view file being applied.
    No need to worry too much about this now, as we will be covering layouts in greater
    detail later. But if curious, you can take a look at the `protected/views/layouts/`
    directory to see the layout files that have been defined and to help shine a little
    light on where the rest of the HTML is defined.
  prefs: []
  type: TYPE_NORMAL
- en: Reviewing our request routing
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let''s review how Yii analyzes our request within the context of this example
    application:'
  prefs: []
  type: TYPE_NORMAL
- en: Navigate to the "Hello, World!" page by pointing your browser at the URL `http://localhost/helloworld/index.php?r=message`
    (or you can use the equivalent URL `http://localhost/helloworld/index.php?r=message/hello`).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Yii analyzes the URL. The **r** (route) querystring variable indicates that
    the controllerID is `message`. This tells Yii to route the request to the message
    controller class, which it finds in `protected/controllers/MessageController.php`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Yii also discovers that the actionID specified is `hello`. (Or if no actionID
    is specified, it routes to the controller's default action.) So the action method
    `actionHello()` is invoked within the `MessageController`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The `actionHello()` method renders the `hello.php` view file located at `protected/views/message/hello.php`.
    And we altered this view file to simply display our introductory greeting, which
    is then returned to the browser.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: This all came together with very little effort. By following Yii's default conventions,
    the entire application request routing has been seamlessly stitched together for
    us. Of course, Yii gives us every opportunity to override this default workflow
    if needed, but the more you stick with the conventions, the less time you will
    spend in tweaking configuration code.
  prefs: []
  type: TYPE_NORMAL
- en: Adding dynamic content
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The simplest way to add dynamic content to our view template is to embed PHP
    code into the template itself. View files are rendered by our simple application
    to result in HTML, and any basic text in these files is passed through without
    being changed. However, any content between `<?php` and `?>` is interpreted and
    executed as PHP code. This is a typical way that PHP code is embedded within HTML
    files and is probably familiar to you.
  prefs: []
  type: TYPE_NORMAL
- en: Adding the date and time
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To spice up our page with dynamic content, let''s display the date and time:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open up the hello view again and add the following line below the greeting
    text:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Save and view: `http://localhost/helloworld/index.php?r=message/hello`.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Presto! We have added dynamic content to our application. With each page refresh,
    we can see the displayed content changing.
  prefs: []
  type: TYPE_NORMAL
- en: Admittedly this is not terribly exciting, but it does show you how to embed
    simple PHP code into our view templates.
  prefs: []
  type: TYPE_NORMAL
- en: A different approach for adding the date and time
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Although this approach of embedding PHP code directly into the view file does
    allow for any PHP code of any amount or complexity, it is strongly recommended
    that these statements do not alter data models and remain simple, display-oriented
    statements. This will help keep our business logic separate from our presentation
    code, which is part of the benefit of using the MVC architecture.
  prefs: []
  type: TYPE_NORMAL
- en: Moving the data creation to the controller
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Let's move the logic that creates the time back to the controller and have the
    view do nothing more than display the time. We'll move the determination of the
    time into our `actionHello()` method within the controller and set the value in
    an instance variable called `$time`.
  prefs: []
  type: TYPE_NORMAL
- en: 'First let''s alter the controller action. Currently our action in our `MessageController`,
    `actionHello()`, simply makes a call to render our hello view by executing the
    following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Before we render the view, let''s add the call to determine the time and then
    store it in a local variable called `$theTime`. Let''s then alter our call to
    `render()` by adding a second parameter, which includes this variable:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: When calling `render()` with a second parameter containing array data, it will
    extract the values of the array into PHP variables and make those variables available
    to the view script. The keys in the array will be the names of the variables made
    available to our view file. So in this example, our array key '`time`', whose
    value is `$theTime`, will be extracted into a variable named `$time`, which will
    be made available in the view. This is one way to pass data from the controller
    to the view.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This assumes you are using the default view renderer with Yii. As has been mentioned
    many times previously, Yii allows you to customize nearly everything, and you
    can specify different view rendering implementations if you so desire. Other view
    renders may not behave in exactly the same way.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now let''s alter the view to use this `$time` variable rather than calling
    the date function itself:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open up the HelloWorld view file again, and replace the line that we previously
    added to echo the time with the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Save and view the results again: `http://localhost/helloworld/index.php?r=message/hello`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once again we see the time displaying just as before, so the end result is no
    different with the two approaches.
  prefs: []
  type: TYPE_NORMAL
- en: We have demonstrated the two approaches to adding PHP-generated content to the
    view template files. The first approach puts the data creation logic directly
    into the view file itself. The second approach houses this logic in the controller
    class, and feeds the information to the view file by using variables. The end
    result is the same; the time is displayed in our rendered HTML, but the second
    approach takes a small step forward in keeping the data acquisition and manipulation,
    that is business-logic, separate from our presentation code. This separation is
    exactly what a Model-View-Controller architecture strives to provide, and Yii's
    explicit directory structure and sensible defaults make this a snap to implement.
  prefs: []
  type: TYPE_NORMAL
- en: Have you been paying attention?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: It was mentioned in [Chapter 1](ch01.html "Chapter 1. Meet Yii"), *Meet Yii*,
    that the view and controller are indeed very close cousins. So much so that `$this`
    within a view file refers to the `Controller` class that rendered the view.
  prefs: []
  type: TYPE_NORMAL
- en: In the previous example, we explicitly fed the time to the view file from the
    controller by using the second argument in the render method. This second argument
    explicitly sets the variables that are immediately available to the view file.
    But there is another approach you can try out for yourself.
  prefs: []
  type: TYPE_NORMAL
- en: Alter the previous example by defining a public class property on `MessageController`,
    rather than a locally scoped variable whose value is the current date time. Then
    display the time in the view file by accessing this class property via `$this`.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The downloadable codebase has the solution to this "do-it-yourself" exercise
    included.
  prefs: []
  type: TYPE_NORMAL
- en: Linking pages together
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Typical web applications have more than one page within them for users to experience,
    and our simple application should be no exception. Let's add another page that
    displays a response from the World, "Goodbye, Yii developer!", and link to this
    page from our "Hello, World!" page, and vice versa.
  prefs: []
  type: TYPE_NORMAL
- en: Normally, each rendered HTML page within a Yii web application will correspond
    to a separate view (though this does not always have to be the case). So we will
    create a new view and use a separate action method to render this view. When adding
    a new page like this, we also need to consider whether or not to use a separate
    controller. Since our Hello and Goodbye pages are related and very similar, there
    is no compelling reason to delegate the application logic to a separate controller
    class at the moment.
  prefs: []
  type: TYPE_NORMAL
- en: Linking to a new page
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Let's have the URL for our new page be of the form `http://localhost/helloworld/index.php?r=message/goodbye`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Sticking with Yii conventions, this decision defines the name of our action
    method, which we need in the controller, as well as the name of our view. So open
    up `MessageController` and add an `actionGoodbye()` method just below our `actionHello()`
    action:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Next, we have to create our view file in the `/protected/views/message/` directory.
    This should be called `goodbye.php` as it should be the same as the actionID that
    we chose.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Please keep in mind that this is just a recommended convention. The view does
    not, by any means, have to have the same name as the action. The view file name
    just has to match the first argument of `render()`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Create an empty file in that directory, and add the single line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Saving and viewing `http://localhost/helloworld/index.php?r=message/goodbye`
    again will display the goodbye message.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now we need to add the links to connect the two pages. To add a link on the
    Hello screen to the Goodbye page, we could add an `<a>` tag directly to the `hello.php`
    view file and hardcode the URL structure as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: And this would work, but it tightly couples the view code implementation to
    a specific URL structure, which might change at some point. If the URL structure
    were to change, these links would become invalid.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Remember in [Chapter 1](ch01.html "Chapter 1. Meet Yii"), *Meet Yii*, when
    we went through the blog posting application example? We used URLs that were of
    a different, more SEO-friendly format than the Yii default format, namely:'
  prefs: []
  type: TYPE_NORMAL
- en: '`http://yourhostname/controllerID/actionID`'
  prefs: []
  type: TYPE_NORMAL
- en: It is a simple matter of configuring a Yii Web application to use this "path"
    format, as opposed to the querystring format we are using in this example. Being
    able to easily change the URL format can be important to web applications. As
    long as we avoid hardcoding them throughout our application, changing them will
    remain a simple matter of altering the application configuration file.
  prefs: []
  type: TYPE_NORMAL
- en: Getting a little help from Yii CHtml
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Luckily, Yii comes to the rescue here. Yii comes with myriad helper methods
    that can be used in view templates. These methods exist in the static HTML helper
    framework class `CHtml`. In this case, we want to employ the helper method "link"
    that takes in a *controllerID/actionID* pair and creates the appropriate hyperlink
    for you, based on how the URL structure is configured for the application. Since
    all these helper methods are static, we can call them directly without the need
    to create an explicit instance of the `CHtml` class. Using this link helper, we
    can add a link in our `hello.php` view just below where we echoed the time, as
    follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Save and view the "Hello, World!" page: `http://localhost/helloworld/index.php?r=message/hello`'
  prefs: []
  type: TYPE_NORMAL
- en: You should see the hyperlink, and clicking on it should take you to the goodbye
    page. The first parameter in the call to the `link` method is the text that will
    be displayed in the hyperlink. The second parameter is an array that holds the
    value for our *controllerID*/*actionID* pair.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can follow the same approach to place a reciprocal link in our Goodbye view:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'Save and view the goodbye page:'
  prefs: []
  type: TYPE_NORMAL
- en: '`http://localhost/helloworld/index.php?r=message/goodbye`'
  prefs: []
  type: TYPE_NORMAL
- en: You should now see an active link back to the "Hello, World!" page, from the
    goodbye page.
  prefs: []
  type: TYPE_NORMAL
- en: So we now know a couple of ways to link web pages together in our simple application.
    One approach added an HTML `<a>` tag directly to the view file and hardcoded the
    URL structure. The other, preferred approach, made use of Yii's `CHtml` helper
    class to help construct the URLs based on the *controllerID* */actionID* pairs,
    so that the resulting format will always conform to the application configuration.
    In this way, we can easily alter the URL format throughout the application, without
    having to go back and change every view file that happens to have internal links.
  prefs: []
  type: TYPE_NORMAL
- en: Our simple "Hello, World!" application really reaps the benefits of Yii's convention
    over configuration philosophy. By applying certain default behavior and following
    the recommended conventions, the building of this simple application and our entire
    request routing process just fell together in a very easy and convenient way.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we constructed an extremely simple application in order to
    cover many topics. First we installed the framework. We then used the `yiic` console
    command to bootstrap the creation of a new Yii application. We then introduced
    an incredibly powerful code generation tool called Gii. We used this to create
    a new controller within our simple application.
  prefs: []
  type: TYPE_NORMAL
- en: Once our application was in place, we could see first hand how Yii handles the
    request and routing to controllers and actions. We then moved on to creating and
    displaying very simple dynamic content. And finally, we looked at how to link
    the pages in a Yii application together.
  prefs: []
  type: TYPE_NORMAL
- en: While this incredibly simple application has provided concrete examples to help
    us better understand the use of the Yii framework, it is far too simplistic to
    demonstrate Yii's ability to ease the building of our real-world applications.
    In order to demonstrate this, we need to build a real-world web application. We
    are going to do just that. In the next chapter, we will introduce you to the project
    task and issue tracking application that we will be building throughout the remainder
    of this book.
  prefs: []
  type: TYPE_NORMAL
