- en: Chapter 3. Understanding Data Storage on Android Devices
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The primary motive of forensic analysis is to extract necessary data from the
    device. Hence, for effective forensic analysis, it is imperative to know what
    kind of data is stored on the device, where it is stored, how it is stored, and
    the details of the filesystems on which the data is stored. This knowledge is
    very important to a forensic analyst to take an informed decision about where
    to look for data and the techniques that can be used to extract the data. In this
    chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Android partition layout and file hierarchy
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Application data storage on the device
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An overview of the Android filesystem
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Android partition layout
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Partitions are logical storage units made inside the device's persistent storage
    memory. Partitioning allows you to logically divide the available space into sections
    that can be accessed independently of each other.
  prefs: []
  type: TYPE_NORMAL
- en: Common partitions in Android
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The partition layout varies between vendors and versions. However, a few partitions
    are present in all the Android devices. The following sections explain some of
    the common partitions found in most of the Android devices.
  prefs: []
  type: TYPE_NORMAL
- en: boot loader
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This partition stores the phone's boot loader program. This program takes care
    of initializing the low-level hardware when the phone boots. Thus, it is responsible
    for booting the Android kernel and booting into other boot modes, such as the
    recovery mode, download mode, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: boot
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: As the name suggests, this partition has the information and files required
    for the phone to boot. It contains the kernel and RAM disk. So, without this partition,
    the phone cannot start its processes.
  prefs: []
  type: TYPE_NORMAL
- en: recovery
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Recovery partition allows the device to boot into the recovery console through
    which activities such as phone updates and other maintenance operations are performed.
    For this purpose, a minimal Android boot image is stored. This boot image serves
    as a failsafe.
  prefs: []
  type: TYPE_NORMAL
- en: userdata
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This partition is usually called the data partition and is the device's internal
    storage for application data. A bulk of user data is stored here, and this is
    where most of our forensic evidence will reside. It stores all app data and standard
    communications as well.
  prefs: []
  type: TYPE_NORMAL
- en: system
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: All the major components other than kernel and RAM disk are present here. The
    Android system image here contains the Android framework, libraries, system binaries,
    and preinstalled applications. Without this partition, the device cannot boot
    into normal mode.
  prefs: []
  type: TYPE_NORMAL
- en: cache
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This partition is used to store frequently accessed data and various other files,
    such as recovery logs and update packages downloaded over the cellular network.
  prefs: []
  type: TYPE_NORMAL
- en: radio
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Devices with telephony capabilities have a baseband image stored in this partition
    that takes care of various telephony activities.
  prefs: []
  type: TYPE_NORMAL
- en: Identifying partition layout
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'For a given Android device, partition layout can be determined in a number
    of ways. The `partitions` file under `/proc` gives us details about all the partitions
    available on the device. The following screenshot shows the contents of the `partitions`
    file:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Identifying partition layout](img/image00283.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Partitions file in Android
  prefs: []
  type: TYPE_NORMAL
- en: 'The entries in the preceding screenshot show only the block names. To get a
    mapping of these blocks to their logical functions, check the contents of the
    `by-name` directory present under `/dev/block/platform/dw_mmc`. The following
    screenshot shows the contents of this directory:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Identifying partition layout](img/image00284.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Mapping of blocks to their logical functions
  prefs: []
  type: TYPE_NORMAL
- en: As you can see in the preceding output, various partitions such as system, user
    data, and so on are present in the partition layout.
  prefs: []
  type: TYPE_NORMAL
- en: Android file hierarchy
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In order to perform forensic analysis on any system (desktop or mobile), it''s
    important to understand the underlying file hierarchy. A basic understanding of
    how Android organizes its data in files and folders helps a forensic analyst narrow
    down his research to specific locations. If you are familiar with Unix-like systems,
    you will understand the file hierarchy in Android very well. In Linux, the file
    hierarchy is a single tree, with the top of the tree being denoted as `/`. This
    is called the **root**. This is different from the concept of organizing files
    in drives (as with Windows). Whether the filesystem is local or remote, it will
    be present under the root. Android file hierarchy is a customized version of this
    existing Linux hierarchy. Based on the device manufacturer and the underlying
    Linux version, the structure of this hierarchy may have a few insignificant changes.
    To see the complete file hierarchy, you need to have root access. The following
    screenshot shows the file hierarchy on an Android device:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Android file hierarchy](img/image00285.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Folders present under `/` (root) in Android
  prefs: []
  type: TYPE_NORMAL
- en: An overview of directories
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The following sections provide an overview of the directories present in the
    file hierarchy of an Android device.
  prefs: []
  type: TYPE_NORMAL
- en: acct
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This is the mount point for the acct cgroup (control group) that provides for
    user accounting.
  prefs: []
  type: TYPE_NORMAL
- en: cache
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This is the directory (`/cache`) where Android stores frequently accessed data
    and app components. Wiping the cache doesn't affect your personal data, but simply
    deletes the existing data there. There is also another directory in this folder
    called `lost+found`. This directory holds recovered files (if any) in the event
    of filesystem corruption, such as incorrectly removing the SD card without unmounting
    it and so on. The cache may contain forensically relevant artifacts, such as images,
    browsing history, and other app data.
  prefs: []
  type: TYPE_NORMAL
- en: d
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This is a symbolic link to `/sys/kernel/debug`. This folder is used to mount
    the debugfs filesystem and to debug kernel.
  prefs: []
  type: TYPE_NORMAL
- en: data
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'This is the partition that contains the data of each application. Most of the
    data belonging to a user, such as the contacts, SMS, dialed numbers, and so on,
    is stored in this folder. This folder has significant importance from a forensic
    point of view as it holds valuable data. The following screenshot shows the folders
    present in this partition:'
  prefs: []
  type: TYPE_NORMAL
- en: '![data](img/image00286.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Contents of data partition of an Android device
  prefs: []
  type: TYPE_NORMAL
- en: The following sections provide a brief explanation of other important subdirectories
    present under the `data` folder.
  prefs: []
  type: TYPE_NORMAL
- en: dalvik-cache
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: As discussed in [Chapter 1](part0014.xhtml "Chapter 1. Introducing Android Forensics"),
    *Introducing Android Forensics*, Android applications contain `.dex` files that
    are optimized versions of Java bytecode. When an application is installed on an
    Android device, some modifications are performed on the corresponding `.dex` file,
    and a resultant file called `.odex` file (optimized `,de`x file) is created. It
    is then cached in the `/data/dalvik-cache` directory so that it doesn't have to
    perform the optimization process every time it loads `application.log`.
  prefs: []
  type: TYPE_NORMAL
- en: 'This folder contains several logs that might be useful during examination,
    depending on the underlying requirements. For example, the following screenshot
    shows one of the log files `recovery_log.txt`, which gives details about the recovery
    log:'
  prefs: []
  type: TYPE_NORMAL
- en: '![dalvik-cache](img/image00287.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: The recovery_log.txt file output
  prefs: []
  type: TYPE_NORMAL
- en: data
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The `/data/data` partition contains the private data of all the applications.
    Most of the data belonging to the user is stored in this folder. This folder has
    significant importance from a forensic point of view as it holds valuable data.
    This partition is covered in detail in the *Internal Storage* section.
  prefs: []
  type: TYPE_NORMAL
- en: dev
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This directory contains special device files for all the devices. This is the
    mount point for the tempfs filesystem. This filesystem defines the devices available
    to the applications.
  prefs: []
  type: TYPE_NORMAL
- en: init
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: As discussed in [Chapter 1](part0014.xhtml "Chapter 1. Introducing Android Forensics"),
    *Introducing Android Forensics*, when booting the Android kernel, the init program
    is executed. This program present under this folder.
  prefs: []
  type: TYPE_NORMAL
- en: mnt
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'This directory serves as a mount point for all the filesystems, internal and
    external SD cards, and so on. The following screenshot shows the mount points
    present in this directory:'
  prefs: []
  type: TYPE_NORMAL
- en: '![mnt](img/image00288.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: proc
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'This is the mount point for the procfs filesystem that provides access to the
    kernel data structures. Several programs use `/proc` as the source for their information.
    It contains files that have useful information about the processes. For instance,
    as shown in the following screenshot, `meminfo` present under `/proc` gives information
    about the memory allocation:'
  prefs: []
  type: TYPE_NORMAL
- en: '![proc](img/image00289.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: meminfo file under proc folder in Android
  prefs: []
  type: TYPE_NORMAL
- en: root
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This is the home directory for the root account. This folder can be accessed
    only if the device is rooted.
  prefs: []
  type: TYPE_NORMAL
- en: sbin
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This contains binaries for several important daemons. This is not of much significance
    from a forensic perspective.
  prefs: []
  type: TYPE_NORMAL
- en: misc
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: As the name suggests, this folder contains information about miscellaneous settings.
    These settings mostly define the state, that is, ON/OFF. Information about hardware
    settings, USB settings, and so on can be accessed from this folder.
  prefs: []
  type: TYPE_NORMAL
- en: sdcard
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'This is the partition that contains the data present on the SD card of the
    device. Note that this SD card can be either removable storage or non-removable
    storage. Any app on your phone with the `WRITE_EXTERNAL_STORAGE` permission may
    create files or folders in this location. There are some default folders, such
    as `android_secure`, `Android`, `DCIM`, `media`, and so on, present in most of
    the mobiles. The following screenshot shows the contents of `/sdcard` location:'
  prefs: []
  type: TYPE_NORMAL
- en: '![sdcard](img/image00290.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Contents of the sdcard partition of an Android device
  prefs: []
  type: TYPE_NORMAL
- en: '**Digital Camera Images** (**DCIM**) is the default directory structure for
    digital cameras, smartphones, tablets, and related solid-state devices. Some tablets
    have a `photos` folder that points to the same location. Within `DCIM`, you will
    find photos you have taken, videos, and thumbnails (cache) files. Photos are stored
    in `/DCIM/Camera`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Android developer''s reference explains that there are certain public storage
    directories that are not specifically tied to a specific program. Here is a quick
    overview of these folders:'
  prefs: []
  type: TYPE_NORMAL
- en: '`Music:` Media scanner classifies all media found here as user music.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Podcasts``:` Media scanner classifies all media found here as a podcast.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Ringtones:` Media files present here are classified as ringtones.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Alarms:` Media files present here are classified as alarms.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Notifications:` Media files under this location are used for notification
    sounds.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Pictures:` All photos, except the ones taken with a camera, are stored in
    this folder.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Movies:` All movies, except the ones taken with a camera, are stored in this
    folder.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Download`: Miscellaneous downloads are stored in this folder.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: system
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'This directory contains libraries, system binaries, and other system-related
    files. The pre-installed applications that come along with the phone are also
    present in this partition. The following screenshot shows the files present in
    the system partition on an Android device:'
  prefs: []
  type: TYPE_NORMAL
- en: '![system](img/image00291.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Contents of the system partition of an Android device
  prefs: []
  type: TYPE_NORMAL
- en: Here are some of the interesting files and folders present in the `/system`
    partition that are of interest to a forensic investigator.
  prefs: []
  type: TYPE_NORMAL
- en: build.prop
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'This file contains all the build properties and settings for a given device.
    For a forensic analyst, this file gives an overview about the device model, manufacturer,
    Android version, and many other details. Contents of this file can be viewed by
    issuing a `cat` command, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![build.prop](img/image00292.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: The build.prop file output
  prefs: []
  type: TYPE_NORMAL
- en: As shown in the preceding output, you can find out the product model, CPU details,
    and Android version by viewing this file content. On a rooted device, tweaking
    the `build.prop` file could lead to a change in several system settings.
  prefs: []
  type: TYPE_NORMAL
- en: app
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'This folder contains system apps and preinstalled apps. This is mounted as
    read only to prevent any changes. The following screenshot shows various system-related
    apps that are present in this folder:'
  prefs: []
  type: TYPE_NORMAL
- en: '![app](img/image00293.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: System apps present under the /system/app partition
  prefs: []
  type: TYPE_NORMAL
- en: Along with the APK files, you might have also noticed `.odex` files in the preceding
    output. In Android, applications come in packages, with the`.apk` extension. These
    APKs contain `.odex` files whose supposed function is to save space. The `.odex`
    files are collection of certain parts of an application that are optimized before
    booting.
  prefs: []
  type: TYPE_NORMAL
- en: framework
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: This folder contains the sources for the Android framework. In this partition,
    you can find the implementation of key services, such as the system server with
    the package and activity managers. A lot of the mapping between the Java application
    APIs and the native libraries is also done here.
  prefs: []
  type: TYPE_NORMAL
- en: ueventd.goldfish.rc and ueventd.rc
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: These files contain configuration rules for the `/dev` directory.
  prefs: []
  type: TYPE_NORMAL
- en: 'To sum up, here is a screenshot of the Android file tree reference from [http://wiki.robotz.com/index.php/Android_File_System](http://wiki.robotz.com/index.php/Android_File_System):'
  prefs: []
  type: TYPE_NORMAL
- en: '![ueventd.goldfish.rc and ueventd.rc](img/image00294.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Android file tree
  prefs: []
  type: TYPE_NORMAL
- en: Application data storage on the device
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Android devices store a lot of sensitive data through the use of apps. Although
    we have earlier categorized apps as system and user-installed apps, here is a
    more detailed split:'
  prefs: []
  type: TYPE_NORMAL
- en: Apps that come along with Android
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Apps installed by the manufacturer
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Apps installed by a wireless carrier
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Apps installed by the user
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'All of these store different types of data on the device. Application data
    often contains a wealth of information that is relevant to the investigation.
    Here is a sample list of possible data that can be found on an Android device:'
  prefs: []
  type: TYPE_NORMAL
- en: SMS
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: MMS
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Chat messages
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Backups
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: E-mails
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Call logs
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Contacts
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Pictures
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Videos
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Browser history
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: GPS data
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Files or documents downloaded
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Data that belongs to installed apps (Facebook, Twitter, and other social media
    apps)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Calendar appointments
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Data belonging to different applications can be stored either internally or
    externally. In the case of external storage (SD card), data can be stored in any
    location. However, in the case of internal storage, the location is predefined.
    To be specific, internal data of all apps present on the device (either system
    apps or user-installed apps) is automatically saved in the `/data/data` subdirectory,
    named after the package name. For example, the default Android e-mail app has
    a package named `com.android.email`, and the internal data is stored in `/data/data/com.android.email`.
    We will discuss this in detail in the upcoming sections, but for now, this knowledge
    will be sufficient to understand the following details.
  prefs: []
  type: TYPE_NORMAL
- en: 'Android provides developers with certain options to store data to the device.
    The option that can be used depends on the underlying data that is to be stored.
    Data that belongs to applications can be stored in one of the following locations:'
  prefs: []
  type: TYPE_NORMAL
- en: Shared preferences
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Internal storage
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: External storage
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: SQLite database
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Network
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The following sections provide a clear explanation about each of these options.
  prefs: []
  type: TYPE_NORMAL
- en: Shared preferences
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'This location provides a framework to store key-value pairs of primitive data
    types in the `.xml` format. Primitive data types include boolean, float, int,
    long, and string. Strings are stored in the **Universal Character Set Transformation
    Format-8** (**UTF-8**) format. These files are typically stored in the application''s
    `/data/data/<package_name>/shared_prefs` path. For instance, the `shared_prefs`
    folder for the Android e-mail app contains less than six `.xml` files, as shown
    in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Shared preferences](img/image00295.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Contents of the `shared_prefs` folder of the Android e-mail app
  prefs: []
  type: TYPE_NORMAL
- en: 'As explained in [Chapter 2](part0019.xhtml "Chapter 2. Setting Up an Android
    Forensic Environment"), *Setting Up an Android Forensic Environment*, contents
    of these files can be viewed using the `cat` command. The following screenshot
    shows the contents of the `com.android.email_preferences.xml` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Shared preferences](img/image00296.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Android e-mail app's shared preferences file content
  prefs: []
  type: TYPE_NORMAL
- en: As seen in the preceding screenshot, the data is stored in name-value pairs.
    Perhaps in the preceding `.xml` file, `account_name`, `account_password`, `recent_messages`
    are some of the interesting parameters from a forensic point of view. Many applications
    use shared peferences to store sensitive data, because it is light weight. Thus,
    they can be a key source of information during a forensic investigation.
  prefs: []
  type: TYPE_NORMAL
- en: Internal storage
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The files here are stored in the internal storage. These files are located typically
    in the application's `/data/data` subdirectory. Data stored here is private and
    cannot be accessed by other applications. Even the device owner is prevented from
    viewing the files (unless they have root access). However, based on the requirement,
    the developer can allow other processes to modify and update these files.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following screenshot shows the details of the apps stored with their package
    name in the `/data/data` directory:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Internal storage](img/image00297.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Contents of the `/data/data` folder in Android
  prefs: []
  type: TYPE_NORMAL
- en: 'Internal data of each app is stored in their respective folders. For instance,
    the following screenshot shows the internal storage that belongs to the Twitter
    app on an Android device:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Internal storage](img/image00298.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Internal storage of the Android Twitter app
  prefs: []
  type: TYPE_NORMAL
- en: 'Usually, the `databases`, `lib`, `shared_pref`, `cache` folders are created
    for most of the applications. The following table provides a brief description
    of these folders:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Sub directory | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| shared_prefs | XML file of shared preferences |'
  prefs: []
  type: TYPE_TB
- en: '| lib | Custom library files required by app |'
  prefs: []
  type: TYPE_TB
- en: '| files | Developer-saved files |'
  prefs: []
  type: TYPE_TB
- en: '| cache | Files cached by app |'
  prefs: []
  type: TYPE_TB
- en: '| databases | SQLite and journal files |'
  prefs: []
  type: TYPE_TB
- en: 'Folders other than these are custom folders created by the app developer. The
    `databases` folder is the one that contains crucial data that helps in forensic
    investigations. As shown in the following screenshot, data in this folder is stored
    in SQLite files:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Internal storage](img/image00299.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: SQLite files present under the databases folder of the Android browser app
  prefs: []
  type: TYPE_NORMAL
- en: This data can be viewed using tools such as SQLite Browser. More details about
    how to extract data is covered in detail in [Chapter 4](part0031.xhtml "Chapter 4. Extracting
    Data Logically from Android Devices"), *Extracting Data Logically from Android
    Devices*.
  prefs: []
  type: TYPE_NORMAL
- en: External storage
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Files can also be stored by the apps in external storage. External storage can
    be a removable media, such as an SD card or non-removable storage that comes with
    the phone. In the case of a removable SD card, data can be used on other devices
    just by removing the SD card and inserting it in any other device. SD cards are
    usually formatted with the FAT32 filesystem, but other filesystems, such as EXT3
    and EXT4, are also being used increasingly. Unlike internal storage, external
    storage does not have strict security enforcements. In other words, data stored
    here is public and can be accessed by other applications, provided the requesting
    apps have the necessary permissions.
  prefs: []
  type: TYPE_NORMAL
- en: For example, the Twitter app discussed earlier also stores certain files on
    the SD card in the `/Android/data` location. Large files, such as images and videos,
    loaded by the apps are usually stored in the external storage for faster retrieval.
  prefs: []
  type: TYPE_NORMAL
- en: SQLite database
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'SQLite is a popular database format present in many mobile systems and is used
    for structured data storage. SQLite is open source, and unlike many other databases,
    it is compact and offers lot of functionality. Android supports SQLite through
    dedicated APIs, and hence, developers can take advantage of it. SQLite databases
    are a rich source of forensic data. The SQLite files used by the apps are generally
    stored at `/data/data/<ApplicationPackageName>/databases`. For example, in the
    case of the Android e-mail app, the following screenshot shows the SQLite files
    present in its `databases` folder. We will examine these files in more detail
    in the upcoming sections. From a forensic point of view, they are highly valuable
    since they often store a lot of important data handled by the application. The
    contents of the `databases` folder can be seen in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![SQLite database](img/image00300.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: The databases folder of the Android e-mail app
  prefs: []
  type: TYPE_NORMAL
- en: Network
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You can use the network to store and retrieve data on your own web-based services.
    To do network operations, the classes in the `java.net.*` and `android.net.*`
    packages can be used. These packages provide developers with the low-level APIs
    that are necessary to interact with the network, web servers, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: Android filesystem overview
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Understanding the filesystem is very important in Android forensics, as it helps
    us gain knowledge of how the data is stored and retrieved. This knowledge about
    properties and the structure of a filesystem will prove to be useful during forensic
    analysis. Filesystem refers to the way data is stored, organized, and retrieved
    from a volume. A basic installation may be based on one volume split into several
    partitions; here, each partition can be managed by a different filesystem. Microsoft
    Windows users are mostly familiar with the FAT32 or NTFS filesystem, whereas Linux
    users are more familiar with the EXT2 or EXT4 filesystem. As is true in Linux,
    Android also utilizes mount points and not drives (that is `C:` or `E:`). Each
    filesystem defines its own rules to manage the files on the volume. Depending
    on these rules, each filesystem offers a different speed for file retrieval, security,
    size, and so on. Linux uses several filesystems and so does Android. From a forensic
    point of view, it's important to understand what filesystems are used by Android
    and to identify the filesystems that are of significance to the investigation.
    For example, the filesystem that stores the user's data is of primary concern
    to us, as opposed to a filesystem used to boot the device.
  prefs: []
  type: TYPE_NORMAL
- en: As mentioned earlier, Linux is known to support a large number of filesystems.
    These filesystems used by the system are not accessed by drive names, but instead
    are combined into a single hierarchical tree structure that represents these filesystems
    as a single entity. Each new filesystem is added into this single filesystem tree
    when it is mounted.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In Linux, mounting is an act of attaching an additional filesystem to the currently
    accessible filesystem of a computer.
  prefs: []
  type: TYPE_NORMAL
- en: Thus, the filesystems are mounted on to a directory, and files present in this
    filesystem are now the contents of that directory. This directory is called a
    **mount point**. It makes no difference whether the filesystem exists on the local
    device or on a remote device. Everything is integrated into a single file hierarchy
    that begins with root. Each filesystem has a separate kernel module that registers
    the operations that it supports with something called **virtual file system**
    (**VFS**). VFS allows different applications to access different filesystems in
    a uniform way. By separating the implementation from the abstraction, adding a
    new filesystem becomes a matter of writing another kernel module. These modules
    are either part of the kernel or are dynamically loaded on demand. The Android
    kernel comes with a subset of a vast collection of filesystems that range from
    the **Journal File System** (**JFS**) to the Amiga filesystem. All the background
    work is handled by the kernel when a filesystem is mounted.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The preceding information is referenced from [http://trikandroid.hol.es/page/100/](http://trikandroid.hol.es/page/100/).
  prefs: []
  type: TYPE_NORMAL
- en: Viewing filesystems on an Android device
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The filesystems supported by the Android kernel can be determined by checking
    the contents of the `filesystems` file that are present in the `proc` folder.
    The content of this file can be viewed using the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding output, the filesystems preceded by the `nodev` property are
    not mounted on the device.
  prefs: []
  type: TYPE_NORMAL
- en: Common Android filesystems
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The filesystems present in Android can be divided into three main categories,
    which are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Flash memory filesystems
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Media-based filesystems
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Pseudo filesystems
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Flash memory filesystems
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Flash memory is a type of constantly-powered non-volatile memory that can be
    erased and reprogrammed in units of memory called blocks. Due to the particular
    characteristics of flash memories, special filesystems are needed to write over
    the media and deal with the long erase times of certain blocks. While the supported
    filesystems vary on different Android devices, the common flash memory filesystems
    are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Extended File Allocation Table** (**exFAT**): This type of filesystem is
    a Microsoft proprietary filesystem optimized for flash drives. As a result of
    the license requirements, it is not part of the standard Linux kernel. However,
    a few manufacturers provide support for this filesystem.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Flash Friendly File System** (**F2FS** ): This type of filesystem is introduced
    by Samsung as an open source filesystem. The basic intention was to build a filesystem
    that takes into account the characteristics of the storage devices based on the
    NAND flash memory.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Journal Flash File System version 2** (**JFFS2**): This type of filesystem
    is a log-structured filesystem used in Android. JFFS2 is the default flash filesystem
    for **Android Open Source Project** (**AOSP**) since the Ice Cream Sandwich version.
    Filesystems such as LogFS, UBIFS, YAFFS, and so on have been developed as a replacement
    for JFFS2.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Yet Another Flash File System version 2** (**YAFFS2**): This type of filesystem
    is an open source, single-threaded filesystem that was released in 2002\. It is
    mainly designed to be fast when dealing with NAND flash. YAFFS2 utilizes OOB.
    This is often not captured or decoded correctly during forensic acquisition, which
    makes analysis difficult. YAFFS2 was the most popular release at one point and
    is still widely used in Android devices. YAFFS2 is a log-structured filesystem.
    Data integrity is guaranteed even in the case of sudden power outage. In 2010,
    there was an announcement stating that in releases after Gingerbread, devices
    were going to move from YAFFS2 to EXT4\. Currently, YAFFS2 is not supported in
    newer kernel versions, but certain mobile manufacturers might still continue to
    support it.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Robust File System** (**RFS**): This type of filesystem supports the NAND
    flash memory on Samsung devices. RFS can be summarized as a FAT16 (or FAT32) filesystem
    where journaling is enabled through a transaction log. Many users complain that
    Samsung should stick to EXT4\. RFS has been known to have lag times that slow
    down the features of Android.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Media-based filesystems
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Besides the flash memory filesystems discussed earlier, Android devices typically
    support the following media-based filesystems:'
  prefs: []
  type: TYPE_NORMAL
- en: '**EXTended file system** (**EXT2**/**EXT3**/**EXT4**): This filesystem was
    introduced in 1992 specifically for the Linux kernel. This was one of the first
    filesystems and used the virtual filesystem. EXT2, EXT3, and EXT4 are the subsequent
    versions. Journaling is the main advantage of EXT3 over EXT2\. With EXT3, in the
    case of an unexpected shutdown, there is no need to verify the filesystem. The
    EXT4 filesystem, the fourth extended filesystem, has gained significance with
    mobile devices that implement dual-core processors. The YAFFS2 filesystem is known
    to have a bottleneck on dual-core systems. With the Gingerbread version of Android,
    the YAFFS filesystem was swapped for EXT4.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**File Allocation Table** (**FAT**): These filesystems, such as FAT12, FAT16,
    and FAT32, are supported by the MSDOS driver.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Virtual File Allocation Table** (**VFAT**): This filesystem is an extension
    of the FAT16 and FAT32 filesystems. Microsoft''s FAT32 filesystem is supported
    by most Android devices. It is supported by almost all the major operating systems,
    including Windows, Linux, and Mac OS. This enables these systems to easily read,
    modify, and delete the files present on the FAT32 portion of the Android device.
    Most of the external SD cards are formatted using the FAT32 filesystem.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Pseudo filesystems
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'In addition to these, there are pseudo filesystems that can be thought of as
    logical groupings of files. Here are some of the important pseudo filesystems
    found in an Android device:'
  prefs: []
  type: TYPE_NORMAL
- en: '**control group** (**cgroup**): This type of pseudo filesystem provides a way
    to access and define several kernel parameters. There are a number of different
    process-control groups present. As shown in the following command-line output,
    the list of groups can be seen in the `/proc/cgroups` file:![Pseudo filesystems](img/image00301.jpeg)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The cgroups file output
  prefs: []
  type: TYPE_NORMAL
- en: Android devices use this filesystem to track their jobs. They are responsible
    for aggregating the tasks and keeping track of them.
  prefs: []
  type: TYPE_NORMAL
- en: '**rootfs**: This type of filesystem is one of the main components of Android
    and contains all the information required to boot the device. When the device
    starts the boot process, it needs access to many core files and, thus, mounts
    the root file system. This filesystem is mounted at `/` (root folder). Hence,
    this is the filesystem on which all the other filesystems are slowly mounted.
    If this filesystem is corrupt, the device cannot be booted.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**procfs**: This type of filesystem contains information about kernel data
    structures, processes, and other system-related information in the `/proc` directory.
    For instance, the `/proc/filesystems` file displays the list of available filesystems
    on the device. The following command shows all the information about the CPU of
    the device:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '**sysfs**: This type of filesystem mounts the `/sys` folder, which contains
    information about the configuration of the device. The following output shows
    various folders in the `sys` directory in an Android device:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Since the data present in these folders is mostly related to configuration,
    this is not usually of much significance to a forensic investigator. However,
    there could be some circumstances where we might want to check whether a particular
    setting was enabled on the phone. Analyzing this folder could be useful under
    such conditions. Note that each folder consists of a large number of files. Capturing
    this data through forensic acquisition is the best method to ensure that this
    data is not changed during examination.
  prefs: []
  type: TYPE_NORMAL
- en: '**tmpfs**: This type of filesystem is a temporary storage facility on the device
    that stores the files in RAM (volatile memory). This is often mounted on the `/dev`
    directory. The main advantage of using RAM is its faster access and retrieval.
    However, once the device is restarted or switched off, this data will not be accessible
    anymore. Hence, it''s important for a forensic investigator to either examine
    the data in RAM before a device reboot happens or extract the data.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'You can use the `mount` command to see different partitions and their filesystems
    available on the device, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: As seen in the preceding command-line output, different partitions have different
    filesystems, and they are mounted accordingly.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Having sound knowledge of Android's partition layout, filesystems, and important
    locations will help the forensic investigator during the process of extracting
    data from the device. The user data location on the Android device contains a
    bulk of user information that can be crucial for any forensic investigation. However,
    most of these files may be accessed only on a rooted phone (especially, files
    present in the `/data/data` location). You have also learned about Android data-storage
    options, various filesystems used by Android, and their significance.
  prefs: []
  type: TYPE_NORMAL
- en: With this knowledge, you will now learn how to logically and physically extract
    the data from an Android device in the upcoming chapters.
  prefs: []
  type: TYPE_NORMAL
