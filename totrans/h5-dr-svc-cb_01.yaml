- en: Chapter 1. Display of Textual Data
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we''re going to cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Rounding numbers for display
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Padding numbers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Displaying metric and imperial measurements
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Displaying formatted dates in the user's time zone
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Displaying the dynamic time that has elapsed
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Displaying Math
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating an endless scrolling list
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a sortable paginated table
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating multiple-choice filters
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating range filters
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating combined complex filters
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Displaying code in HTML
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Rendering Markdown
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Autoupdating fields
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The most common task related to web application development is the displaying
    of text. This chapter will cover some of the issues programmers face when displaying
    data in browsers, and will explain how to tackle the problems in a simple yet
    effective way, giving several different options for the programmer from which
    to choose. These examples will contain the rendering of markup or the conversion
    of other datatypes into plain text.
  prefs: []
  type: TYPE_NORMAL
- en: Rounding numbers for display
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The second, most common datatype used in applications after text is numbers.
    There are many different ways of working with numbers, and we will take a look
    at some of these ways when a given precision is required. The first obvious option
    is to use the JavaScript `Number` object wrapper to work with numerical values.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `Number` object contains the `toFixed([digits])` method that can be used
    to display numbers; here the `digits` parameter can have a value between 0 and
    20\. The number will either get rounded automatically if needed, or the number
    will get padded with additional zeros if necessary. Ok, so let's see it in action.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Perform the following steps do demonstrate working with the `Number` object:'
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we''ll create a list of numbers; note that the numbers have been picked
    intentionally to illustrate some of the characteristics of the functions:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Iterate the list and display numbers using the `.toFixed()` method with the
    `digits` parameter''s values 0, 1, and 2 accordingly:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The result retrieved from executing the code will print out the numbers with
    their respective `toFixed` representation, which should be straightforward.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s take a look at some of the characteristic values:'
  prefs: []
  type: TYPE_NORMAL
- en: '`1.616.toFixed(2)` will return `1.62`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`1.4.toFixed(2)` will return `1.40` as expected, adding a trailing zero'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`1.5454.toFixed()` will return `2`, because the default value for `toFixed()`
    is `0`; this means that no decimal points, and additionally the `0.5` segment
    is rounded to `1` so the ceiling value is used here'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`1.615.toFixed(2)` will either return `1.61`, ignoring the `0.005` segment,
    or the floor value will be used'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `toFixed()` method works mostly as expected so long as we don't need the
    higher precision or are only using it to display numbers where the type of rounding
    is not mission critical.
  prefs: []
  type: TYPE_NORMAL
- en: Additionally, we cannot rely on `toFixed()` when we need rounding in cases where
    we have numbers such as 1.446 and others that fall in the same category; calling
    `1.446.toFixed(1)` would result in inconsistent and unpredictable results.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'There are various ways to solve this. The quick and dirty solution would be
    to redefine the `Number.prototype.toFixed()` function, but we encourage you to
    not do so, as doing this may have side effects that are not apparent. Any redefinition
    of the functions from the built-in objects is considered an anti-pattern if it
    is not absolutely essential. The problem arises if another library or a piece
    of code is using the same function. The other library might expect our redefined
    function to work a certain way. These types of redefinitions are hard to track;
    even if we are to add a function instead of redefining it, someone else might
    do the same thing. For example, say we decided to add some function to the `Number`
    object:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: There are no guarantees that someone else has not already added `theFunction`
    to the `Number` object. We could do additional checks to verify if the function
    already exists, but we cannot be sure if it does what we want it to do.
  prefs: []
  type: TYPE_NORMAL
- en: Instead, using a utility function for achieving consistent data would be a better
    option.
  prefs: []
  type: TYPE_NORMAL
- en: 'One way of tackling the problem is to first multiply the number with `10 ^
    digits` and then call the `Math.round(number)` method on the result, or you can
    call `Math.ceil(number)`. For example, if you need to have the value rounded upwards
    to the nearest integer, use the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Now, as the number gets multiplied with `10 ^ digits` and then gets rounded,
    we do not observe the problems with `toFixed()`. Note that this method has a different
    behavior from `toFixed()` not just in the way of how rounding is being handled,
    but also the addition of trailing zeroes.
  prefs: []
  type: TYPE_NORMAL
- en: A different option would be to use an arbitrary precision library such as Big.js
    if precision is crucial ([https://github.com/MikeMcl/big.js](https://github.com/MikeMcl/big.js)).
  prefs: []
  type: TYPE_NORMAL
- en: Padding numbers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We are sometimes faced with the need to pad numbers to a certain range. For
    example, suppose we want to display a number in five possible digits, such as
    `00042`. One obvious solution would be to use the iterative approach and prepend
    characters, but there are a few cleaner solutions.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'First, we need to take a look at some of the functions that we are going to
    use. Let''s take a look at the `Array.join(separator)` method that can be applied
    to create joined text from a list of elements:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'This will result in `"life*is*life"` that shows fairly simple elements that
    are joined with a given separator. Another method that is of interest is `Array.slice(begin[,
    end])` that returns a copy of a portion of an array. For our use, we are only
    interested in the `begin` parameter that can have both positive and negative values.
    If we use a positive value, it means that this will be the starting index for
    the slice using zero-based indexing; for example, consider the following line
    of code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: The preceding line of code will return an array with the elements `'e'`,`'f'`,
    and `'g'`.
  prefs: []
  type: TYPE_NORMAL
- en: 'If, on the other hand, using a negative value for the `begin` element indicates
    an offset from the end of the array, consider the same example using a negative
    value as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: The result would be `'e','f','g'`, as we are slicing from the end.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let''s get back to our problem: how do we create a clean solution for prepending
    zeros to a number? For an iterative solution, we create a method that accepts
    the number, the size of the formatted result, and the character that will be used
    for padding; let''s take `''0''` for example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Here we converted the number to a string in order to get the length of its representation;
    afterwards, we simply create `prefix` that will have the `size–len` characters
    of the `character` variable, and just return the resulting `prefix + strNumber`
    that is the string representation for that number.
  prefs: []
  type: TYPE_NORMAL
- en: You may notice that in the case where `size` is smaller than `len`, the original
    number is returned, and this should probably be changed in order to have the function
    working for that corner case.
  prefs: []
  type: TYPE_NORMAL
- en: 'Another way would be to use the `Array.slice()` method to achieve similar results:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'This will just prepend a prefix to a number and slice off the extra `''0''`
    counting from the end, making the solution a lot cleaner and, additionally, enabling
    us to be more flexible around what will be part of the prefix. The downside of
    this is that we are manually constructing the prefix that will be part of the
    method call `sliceExample(42,"00000")`. In order to make this process automatic,
    we can make use of `Array.join`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'We create an array of the expected `size + 1` as on joining, we''ll get the
    total array `size-1 joined elements`. This will construct the prefix with the
    expected size, and the other part will remain the same:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: A sample method call will be `padNumber(42,5,'0')`; this will not have the flexibility
    of the previous method, but it will be a lot simpler to use in larger numbers.
  prefs: []
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The recipe is fairly straightforward, but an important thing to note is the
    functional approach. If there is one thing to take with you from this recipe,
    it is that the iterative solution is not always the best. When it comes to JavaScript,
    there are usually a few other ways to complete the task that you have; they are
    not always *that* straightforward and sometimes not even faster, but they can
    be much cleaner.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'If, for some reason, we are padding numbers very often, it might make sense
    to add the function into the `Number` object and remove the `input` parameter
    number with the `this` keyword:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'As the function is now part of every `Number` object, we can use it directly
    from any number; let''s take the following example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Additionally, if the `'.'` character should not be included in the calculation
    of the padding, we could add an additional check that would reduce the size of
    the prefix.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Note that in the *Rounding numbers for display* recipe, we explained why adding
    functions to a standard object is a hack that can backfire at us.
  prefs: []
  type: TYPE_NORMAL
- en: Displaying metric and imperial measurements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Websites that deal with calculations and measurements often need to solve the
    problem of using both metric and imperial units of measurement. This recipe will
    demonstrate a data-driven approach to dealing with unit conversions. As this is
    an HTML5 book, the solution will be implemented on the client side rather than
    on the server side.
  prefs: []
  type: TYPE_NORMAL
- en: We're going to implement a client-side, "ideal weight" calculator that supports
    metric and imperial measurements. This time, we're going to create a more general
    and elegant data-driven solution that utilizes modern HTML5 capabilities, such
    as data attributes. The goal is to abstract away the messy and error-prone conversion
    as much as possible.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The formula for calculating the body mass index (BMI) is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: BMI = (Weight in kilograms / (height in meters x height in meters))
  prefs: []
  type: TYPE_NORMAL
- en: We're going to use BMI = 22 to calculate the "ideal weight".
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Create the following HTML page:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'This page looks very much like the regular page we would make for a BMI-based
    ideal weight calculator. The main differences are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: We have an imperial/metric selection input
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We also have additional custom data attributes to give special meanings to the
    HTML fields
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We use `data-measurement` to denote the kind of measurement that the element
    will display (for example, either the weight or the height)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We use `data-display-unit` and `data-display-value` to denote fields that display
    unit strings and values of the measurement respectively
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Create a file named `example.js` with the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: The first part of the code configures a jQuery plugin called `unitval`, with
    the conversion factors for the measurements and units that we are going to use
    (weight and height).
  prefs: []
  type: TYPE_NORMAL
- en: 'The second part sets the measurement units for the document by reading the
    specification from the `select` field. It specifies an array of measurements,
    each having the following:'
  prefs: []
  type: TYPE_NORMAL
- en: A type string, for example `"height"`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A list of units, for example `["ft", "inch"]`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The number of decimals to use for the last unit
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The third part is a regular calculator that is written almost exactly as it
    would be written if there were no unit conversions. The only exception is that
    values are taken from the elements that have the `data-measurement` attribute
    using the jQuery plugin named `$.unitval`.
  prefs: []
  type: TYPE_NORMAL
- en: 'We''re going to write a generic unit converter. It will need two functions:
    one that will convert user-displayed (input) data to standard international (SI)
    measurement units, and another to convert it back from SI units to user-friendly
    display units. Our converter will support using multiple units at the same time.
    When converting from input, the first argument is the measurement type (for example,
    distance), the second is an array of value-unit pairs (for example, `[[5, ''km''],
    [300,''m'']]`), a single pair (for example `[5,''km'']`), or simply the value
    (for example `5`).'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If the second parameter is a simple value, we're going to accept a third one
    containing the unit (for example `'km'`). The output is always a simple SI value.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When converting a value to the desired output units, we specify the units as
    an array, for example, as either `['km', 'm']` or as a single unit. We also specify
    rounding decimals for the last unit. Our output is an array of converted values.
  prefs: []
  type: TYPE_NORMAL
- en: Conversion is done using the values in the `Factors` object. This object contains
    a property for every measurement name that we're going to use. Each such property
    is an object with the available units for that measurement as properties, and
    their SI factors as values. Look in the following in `example.js` for an example.
  prefs: []
  type: TYPE_NORMAL
- en: 'The source code of the jQuery plugin, `unitval.js`, is as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Our generic convertor is useful, but not very convenient or user friendly;
    we still have to do all the conversions manually. To avoid this, we''re going
    to put data attributes on our elements, denoting the measurements that they display.
    Inside them, we''re going to put separate elements for displaying the value(s)
    and unit(s). When we set the measurement units, the function `setMeasurementUnits`
    will set them on every element that has this data attribute. Furthermore, it will
    also adjust the inner value and unit elements accordingly:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'As every element knows its measurement and units, we can now simply put SI
    values inside them and have them display converted values. To do this, we''ll
    write `unitval`. It allows us to set and get "united" values, or set unit options
    on elements that have the `data-measurement` property:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: This plugin will be explained in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: HTML elements have no notion of measurement units. To support unit conversion,
    we added our own data attributes. These allow us to give a special meaning to
    certain elements—the specifics of which are then decided by our own code.
  prefs: []
  type: TYPE_NORMAL
- en: Our convention is that an element with a `data-measurement` attribute will be
    used to display values and units for the specified measurement. For example, a
    field with the `data-measurement="weight"` attribute will be used to display weight.
  prefs: []
  type: TYPE_NORMAL
- en: This element contains two types of subelements. The first type has a `data-display-value`
    attribute, and displays the value of the measurement (always a number). The second
    type has a `data-display-unit` attribute, and displays the unit of the measurement
    (for example, `"kg"`). For measurements expressed in multiple units (for example,
    height can be expressed in the form of "5 ft 3 inch"), we can use multiple fields
    of both types.
  prefs: []
  type: TYPE_NORMAL
- en: 'When we change our unit system, `setMeasurementUnits` adds additional data
    attributes to the following elements:'
  prefs: []
  type: TYPE_NORMAL
- en: '`data-round` attributes are attached to `data-measurement` elements'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`data-unit attributes` containing the appropriate unit is added to the `data-display-value`
    elements'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`data-display-unit` elements are filled with the appropriate units'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: As a result, `$.unitval()` knows both the values and units displayed on every
    measurement element on our page. The function reads and converts the measurement
    to SI before returning it. We do all our calculations using the SI units. Finally,
    when calling `$.unitval(si_value)`, our value is automatically converted to the
    appropriate units before display.
  prefs: []
  type: TYPE_NORMAL
- en: This system minimizes the amount of error-prone unit conversion code by recognizing
    that conversions are only really needed when reading user input and displaying
    output. Additionally, the data-driven approach allows us to omit conversions entirely
    from our code and focus on our application logic.
  prefs: []
  type: TYPE_NORMAL
- en: Displaying formatted dates in the user's time zone
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will learn how to format the user's date in their local time
    zone and display it; additionally, we are going to see how dates are used and
    represented in JavaScript. The best way to do this is to have the user pick the
    time zone in which they would like the dates to be displayed, but unfortunately,
    this is rarely an option.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Just like most programming languages, JavaScript uses Unix time. This is actually
    a system for representing a given instance of time, for how many seconds or, in
    JavaScript's case, milliseconds have passed since midnight January 1, 1970 in
    Universal Coordinated Time, commonly known as UTC.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Some fun trivia regarding UTC: the abbreviation is a compromise between the
    French version Temps Universel Coordonné, which would be TUC, and the English
    version Coordinated Universal Time, which would be CUT ([http://en.wikipedia.org/wiki/Coordinated_Universal_Time#Abbreviation](http://en.wikipedia.org/wiki/Coordinated_Universal_Time#Abbreviation)).'
  prefs: []
  type: TYPE_NORMAL
- en: This number is actually not fully compliant with UTC, nor does it account for
    the various atypical situations such as leap seconds, but this is acceptable in
    most cases.
  prefs: []
  type: TYPE_NORMAL
- en: 'In JavaScript, we have the `Date` object that can be constructed in different
    ways:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Note that creating a date from a string representation can have different behaviors
    in various browsers, and that the same thing applies for the `Date.parse` method
    that parses a string into a date.
  prefs: []
  type: TYPE_NORMAL
- en: During construction, if you supply some of the arguments and leave out the optional
    ones, they get defaulted to zero. And one other thing to note is that months in
    JavaScript are zero based while days are not.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Using the JavaScript `Date` object as a function rather than as a constructor,
    with `new Date(...)`, will result in your getting a string representation of that
    date and not getting the `Date` object, like you would expect in most of the other
    JavaScript objects.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The first thing you need to do is to create the `Date` object:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, just use the localized date and time representation:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'If you need to know the offset in hours in the user''s time zone from UTC,
    you can use the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: This offset variable represents the number of hours from the local user's time
    zone to UTC. The minus sign here reverts the logic for the date; this means that
    the difference will be from date to UTC instead of the original from UTC to date.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: What we can usually do is return the millisecond representation from the server
    side and have the number formatted in the local time zone. So let's say that our
    API returned us the milliseconds `1355270400000` that is actually 12.12.2012,
    which is also known as the end-of-the-world date.
  prefs: []
  type: TYPE_NORMAL
- en: 'The creation of the date is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'When printing in the local string, there are few available options; one of
    them is `toLocaleDateString`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: This method uses the underlying operation system to get the formatting convention.
    For example, in the U.S. the format is month/day/year while in other countries
    it is day/month/year. For our case, the end of the world is on "Wednesday, December
    12, 2012". You could also manually construct the printed date using the appropriate
    `getX` methods.
  prefs: []
  type: TYPE_NORMAL
- en: There is also a method of printing out the local time called `toLocaleTimeString`
    that can be used on our end-of-the-world date. Because this method also uses the
    operating system's local time for us, it is 01:00:00, because we are in the UTC+1
    time zone. For us, this means that we have one extra hour to live; or maybe not?
  prefs: []
  type: TYPE_NORMAL
- en: In order to get the offset for the local user, there is a method in the `Date`
    object called `getTimezoneOffset()` that returns the time zone offset from the
    date to UTC in minutes. The problem is that there is no such method for hours
    and, additionally, it is contraintuitive as we usually want to know the difference
    from UTC to the given date.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If working with dates is something common that you need for your application,
    it makes sense to use a library, such as **Moment.js** ([http://momentjs.com/](http://momentjs.com/)).
  prefs: []
  type: TYPE_NORMAL
- en: 'Moment.js provides support for internationalization and the more advanced manipulation
    of dates. For example, removing 10 days from the current date can simply be accomplished
    with the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'For getting the time from today''s start of day, use the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: Displaying the dynamic time that has elapsed
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: It is very common on every major site to have these great counters that display
    timestamps on various elements on the page. For example, this would be "you opened
    this page 3 hours ago" or "commented 2 minutes ago". That is why, this feature,
    besides the name "dynamic time elapsed", is also known as "time ago".
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We are going to use a jQuery plugin called **timeago** that has especially been
    designed for this purpose that can be retrieved from [http://timeago.yarp.com/](http://timeago.yarp.com/).
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We will create a simple page where we will display the passed time by performing
    the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Because `timeago` is a jQuery plugin, we first need to include jQuery and then
    add the `timeago` plugin:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'Just as an example, add the following HTML:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'This will enable us to get an overview of the basic features provided by the
    `timeago` plugin. Afterwards, let''s add the following JavaScript:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: And that is it; you now have a fully working time example that will calculate
    the time since a given date and update it, and additionally, the second part selected
    with `page-opened` will be autoupdated as the user spends more time on the page.
  prefs: []
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The first thing you might be wondering is about the `abbr` and `time` tags.
    The first one, in actuality, is a representation of "abbreviation" and optionally
    provides a full description for it. If the full description is present, the `title`
    attribute must contain this full description and nothing else. The full description
    is usually presented as a tool tip in the browsers, but this is a noting standard.
    Why have we picked the `abbr` tag to display time? Well, there is the new HTML5
    time element named `time` that had some controversies surrounding it, as it was
    pulled from the spec but then gotten back. This element is more semantically correct
    and, additionally, represents the date in a machine-readable format that can be
    used by browsers to enable something like the "add to calendar" feature. The rationale
    for the use of the `abbr` element is only supported for older browsers, but this
    becomes more and more irrelevant as time passes. Currently, most modern browsers
    for desktops and mobiles provide support for the semantically correct `time` element—even
    IE 9+ has support for it.
  prefs: []
  type: TYPE_NORMAL
- en: The rest of the HTML consists of standard, well-known tags and a few markers,
    such as different CSS classes added in order to later select those elements.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s take a look at the JavaScript; first we use the standard jQuery document-ready
    function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'Afterwards, we set the setting for `allowFuture` to `true` to enable the `timeago`
    plugin to work with future dates, as this has not been set by default:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'If `timeago` is applied directly on the selected `abbr` or `time` elements,
    there is no need for us to do anything else as the calculations are done automatically:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'You can also notice that we can get the text for a given date directly from
    JavaScript, and work with it in whatever way we see fit:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: There are a few questions that come in mind when working on internationalized
    and localized applications. One of them is time zone support that `timeago` handles
    automatically. The only thing we need to make sure of is that our timestamps follow
    the **ISO 8601** ([http://en.wikipedia.org/wiki/ISO_8601](http://en.wikipedia.org/wiki/ISO_8601))
    time format and have a full time zone designator ([http://en.wikipedia.org/wiki/ISO_8601#Time_zone_designators](http://en.wikipedia.org/wiki/ISO_8601#Time_zone_designators)).
    The other issue that often comes up is language support, but we are mostly covered
    in that area as there are localized versions of the plugin for many languages,
    and you can even create your own version and contribute it to the community. To
    do this, you can use the code hosted on [https://github.com/rmm5t/jquery-timeago/tree/master/locales](https://github.com/rmm5t/jquery-timeago/tree/master/locales).
  prefs: []
  type: TYPE_NORMAL
- en: There are a few other implementations that perform a similar job, like for example,
    *pretty date* by *John Resig* available at his blog at [http://ejohn.org/blog/javascript-pretty-date/](http://ejohn.org/blog/javascript-pretty-date/).
  prefs: []
  type: TYPE_NORMAL
- en: Displaying Math
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When it comes to technical writing, we often want to display mathematical formulas
    inside the page. In the past, this was done by creating an image on the server
    from some kind of markup, or even manually creating an image with an external
    program. Since the introduction of MathML, this is no longer needed; this thereby
    saves us time, which was otherwise spent on sorting out layout issues, and enables
    native support from the browsers for the display of equations. At the time of
    writing this book, not all of the major browsers support MathML, even though the
    spec for most of the features has been available for a few years now.
  prefs: []
  type: TYPE_NORMAL
- en: '![Displaying Math](img/9282OT_01_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Mathematical Markup Language** (**MathML**) is a standardized way for an
    application to describe a formula, and is intended not only to enable integration
    for the Web, but also to be used in other applications.'
  prefs: []
  type: TYPE_NORMAL
- en: There is a list of software that uses MathML maintained by the W3C; it can be
    found at [http://www.w3.org/Math/Software/](http://www.w3.org/Math/Software/).
    Few revisions of the specification are done from the working group ([http://www.w3.org/Math/](http://www.w3.org/Math/)),
    with the latest being number 3 ([http://www.w3.org/TR/MathML3/](http://www.w3.org/TR/MathML3/)).
  prefs: []
  type: TYPE_NORMAL
- en: HTML5 adds the support for embedding MathML documents inside HTML.
  prefs: []
  type: TYPE_NORMAL
- en: What we are going to do in this recipe is describe a formula, as shown in the
    previous continued fraction of Pi, with MathML where we have an example of a different
    representation of the number *π*.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We will be using a library called `MathJax` that can either be retrieved from
    the author's CDN or downloaded separately and included in the project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'We can proceed by adding the MathML example as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: The basics on what the elements mean will be explained later, but you can notice
    that the example becomes really big after very few nesting levels and is hard
    to read. This is because MathML was never intended to be created manually, but
    to be used instead as a format by some application.
  prefs: []
  type: TYPE_NORMAL
- en: 'So what are the real simple options for us if we want to enable human-editable
    markup? Well, the simplest possible option is something called `ASCIIMath`; in
    order to enable it, we need to change the `config` parameter in the request:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: We generally use the version with all the possible input formats and rendering
    options, but that way we would have a problem with the size of the JavaScript
    file.
  prefs: []
  type: TYPE_NORMAL
- en: 'So how much simpler is the use of `ASCIIMath`? Well, the expression we explained
    previously can be displayed with a single line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Note that the the expression is encompassed in a [PRE37]" or the Grave accent
    character will get rendered to HTML and CSS or any other rendering method that
    has been configured.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `ASCIIMath` method is very simple and extremely popular with major websites
    such as Khan Academy ([https://www.khanacademy.org/](https://www.khanacademy.org/))
    and Math StackExchange ([http://math.stackexchange.com/](http://math.stackexchange.com/)).
    If you are interested to get more details on how `ASCIIMath` can be used, you
    can get more info on its official web page at [http://www1.chapman.edu/~jipsen/mathml/asciimath.html](http://www1.chapman.edu/~jipsen/mathml/asciimath.html).
    Using `MathJax` you can also render other markup format languages such as Tex
    and Latex.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Tex is a typesetting format made by *Donald Knuth* for the purpose of helping
    him with the writing of his famous books. Latex, on the other hand, is a document
    markup that uses Tex as the typesetting format. More information on them can be
    found at [http://en.wikipedia.org/wiki/TeX](http://en.wikipedia.org/wiki/TeX)
    and [http://www.latex-project.org/](http://www.latex-project.org/).
  prefs: []
  type: TYPE_NORMAL
- en: Creating an endless scrolling list
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Endless scrolling lists were popularized by social networking websites, such
    as Facebook and Twitter. Their goal is to create the illusion that the entire
    available content has already been loaded. Additionally, with this technique,
    interruptions to the normal scrolling that are caused by the user trying to find
    the button for the next page are avoided.
  prefs: []
  type: TYPE_NORMAL
- en: At the same time, we would also want to avoid unnecessary waste of bandwidth;
    this means that loading the whole set of data at once is not an option.
  prefs: []
  type: TYPE_NORMAL
- en: The solution is to monitor the user's scrolling and detect the approach at the
    bottom of the page. When the user is sufficiently close to the bottom, we can
    automatically load the next page of content by appending it to the end of the
    currently shown content.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You must already have a service that provides the content on a page-by-page
    basis. This example works without such a service by default, but to make it fully
    functional, an actual HTTP server is needed in order for the Ajax requests for
    the next page to work.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Let's write the HTML page, CSS style, and JavaScript code.
  prefs: []
  type: TYPE_NORMAL
- en: Create a file named `index.html` that will contain the full HTML, CSS, and JavaScript
    code of our example. We need to insert a DOCTYPE into our HTML document; otherwise,
    the browser will operate in "quirks mode" and the height measurement function
    `$(window).height()` will not work.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: 'We''ll add a content placeholder element in the page:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: 'For demonstration purposes, we''ll add the following CSS code to make the pages
    visible. Feel free to skip this CSS:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, we add the JavaScript code. First we load jQuery:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: 'Then we can add our script:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: Our page getter calls the callback with a null error argument and a simple string
    containing the page number as the content (for example, `Page 1`), but it can
    also perform an Ajax request. See the following code for more info on how to modify
    it to make an Ajax request.
  prefs: []
  type: TYPE_NORMAL
- en: 'This function is artificially limited to 10 pages of content. After the tenth
    page, the callback function is called with an error, indicating that there are
    no more pages available:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: 'We use `triggerPxFromBottom` to specify when to start loading the next page.
    When only `triggerPxFromBottom` pixels remain to be scrolled, the loading of the
    next page will begin. Its value is set to `0`; this means that the user must reach
    the end of the currently visible page to trigger the loading process:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: '`loadNext` appends the next page into the `#content` div. However, if the callback
    function is called with an error, it will display `No more content` below the
    last part of the page. After an error event, no more pages will be loaded. This
    means that when `getPage` returns an error, our code will stop loading new pages.
    This is the desired behavior:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: 'This event handler is called when the page is scrolled in any way. It calculates
    the number of pixels of scrolling that remain below. If the number of the pixels
    is small enough and the code is not currently loading a page, it calls the page-loading
    function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, we call `loadNext()` for the first time to load the first page:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The visible area of the browser (also called the viewport) has its own dimensions
    that can be fetched by calling jQuery's `$.fn.height()` function on the `$(window)`
    object. On the other hand, `$(document).height()` provides us with the height
    of the entire content of the page. Finally, `$(window).scrollTop()` gives us the
    scroll offset.
  prefs: []
  type: TYPE_NORMAL
- en: Using these functions, we can calculate the remaining pixels to be scrolled.
    Then we recalculate and check this value every time the user scrolls the page.
    If the value is sufficiently small, we call our loading function. At the same
    time, we make sure to stop loading new pages until the current loading process
    is finished. (Otherwise, the user's scrolling actions might load a couple of more
    pages while they wait for the content to load.)
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Here is a possible Ajax implementation of the `getPage` function. This function
    sends Ajax requests to a request handler hosted on the same domain at the path
    `/pages/<number>` to retrieve the HTML contents of the next page:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: To make this version work, you will need to implement the request handler in
    your server-side code.
  prefs: []
  type: TYPE_NORMAL
- en: Your server-side code can return an error, such as 404, to indicate that there
    is no more content available. As a result, jQuery will never call our success
    callback, and our code will stop loading new pages.
  prefs: []
  type: TYPE_NORMAL
- en: The endless scrolling list recipe provides great user experience, but it has
    one significant drawback. We must make sure that we don't have any important page
    content below the `contents` element. This means that page elements placed at
    the bottom (usually the footer links and copyright messages) might become unreachable.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a sortable paginated table
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: One of the most common tasks we encounter when creating websites is displaying
    lists and tables. Most techniques focus on server-side sorting, paging, and the
    rendering of data. Our solution will be completely on the client side, suitable
    for small to medium amounts of data. The main benefit of a client-side solution
    is speed; sorting and switching pages will be nearly instantaneous.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we're going to create a client-side, sortable paginated table.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We assume that a service provides the data in a JSON object, containing a `data`
    property that is an array of arrays:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: In our example, we're going to display a list of people near us. Every person
    in the table will have their own ID number, name, age, distance from us, and transportation
    method.
  prefs: []
  type: TYPE_NORMAL
- en: We're going to display the distance in km, and would like to be able to sort
    the list of people by their last names.
  prefs: []
  type: TYPE_NORMAL
- en: As table display problems quickly grow beyond the original simple problem, we're
    not going to build our own solution. Instead, we're going to use the excellent
    jQuery DataTables plugin available at [http://datatables.net/](http://datatables.net/).
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Downloading the example code**'
  prefs: []
  type: TYPE_NORMAL
- en: You can download the example code files for all Packt books you have purchased
    from your account at [http://www.packtpub.com](http://www.packtpub.com). If you
    purchased this book elsewhere, you can visit [http://www.packtpub.com/support](http://www.packtpub.com/support)
    and register to have the files e-mailed directly to you.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Let's write the HTML page, CSS style, and JavaScript code.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we''re going to create an HTML page containing an empty table. We''re
    also going to add some CSS to import a basic DataTables style for the table. The
    stylesheets are normally available with the DataTables distribution. Our `index.html`
    file is as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: The example includes a link to the minified version of DataTables hosted on
    the official website.
  prefs: []
  type: TYPE_NORMAL
- en: The DataTables plugin appends the `pager` and `info` elements below the table.
    Because of this, we need to wrap our table inside a `container` element.
  prefs: []
  type: TYPE_NORMAL
- en: 'And the `example.js` file is as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: The implementation of `fetchData` in the example provides hardcoded example
    data. You can easily replace it with a request to your service. The `setData`
    function is a convenient function to change the table data—we're going to use
    the same script, which will call this function to set its own data, for multiple
    recipes. Finally, the rest of the code is specific to DataTables and will be explained
    in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The following image shows the resulting table:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works...](img/9282OT_01_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: To initialize the table we use the `dataTable` initialization function. We can
    pass multiple options to the function. For example, we can specify that we want
    10 items per page by setting the value of the `iDisplayLength` property to `10`.
  prefs: []
  type: TYPE_NORMAL
- en: Because we're going to render the **Distance** column (column 3) slightly differently
    than just displaying it, we add an item to the `aoColumnDefs` option for target
    column 3 that sets a custom rendering function for that column. This is a function
    that simply appends the `km` string to our number; but we could also use a more
    elaborate function (involving custom date formatting, unit conversions, and so
    on).
  prefs: []
  type: TYPE_NORMAL
- en: Paging works automatically with DataTables—the plugin appends a pager control
    that provides access to the previous/next page. Sorting also mostly works automatically.
    However, in our particular example, we need special sorting for the **Name** column
    (by last name) even though it's displayed in the format "firstname lastname".
    To do this, we specify a custom sort type for that column called `lastname-sort`.
    We also specify a special sort type for the **Distance** column called `unitnumber`.
  prefs: []
  type: TYPE_NORMAL
- en: 'DataTables allows us to define custom sort types as plugins. Custom sorters
    have the following properties:'
  prefs: []
  type: TYPE_NORMAL
- en: A preprocessing function that pre-processes the column value before passing
    it to the sorter
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'An ascending sorting function that returns a value depending on the value of
    the two arguments that are passed: -1 if the first value is smaller, 0 if they
    are equal, or 1 if the first value is larger'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A descending order sorting function that works similarly to the ascending sorting
    function
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: These properties allow us to implement sorting by last name for the **Name**
    column, as well as by number for the **Distance** column.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Here is a simple Ajax replacement of the `fetchData` function, sending an Ajax
    request to a request handler hosted on the same domain at the path `/people` to
    retrieve the array data:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: Note that this solution doesn't work very well for large datasets. While modern
    clients have the performance to manipulate a lot of data, bandwidth is also a
    consideration. A careful consideration of bandwidth requirements and the target
    clients (desktop or mobile) should be exercised before using this solution.
  prefs: []
  type: TYPE_NORMAL
- en: Creating multiple-choice filters
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: One common task when displaying tables is to filter the data in the table to
    a subset that satisfies a certain criteria. Multiple-choice table filters work
    on columns with a finite number of values. For example, if we had a table containing
    data of some people where one column is the transportation method used by the
    person, the filter used on this column would be a multiple-choice filter. The
    user should be able to select one or more transportation methods, and the table
    view would display all the people that are using the selected methods.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We're going to assume that we're using the code and data from the previous recipe.
    We have a list of people with their transportation methods displayed in a sortable,
    paginated table using the DataTables jQuery plugin. We will copy the files from
    the previous recipe, and then add to them.
  prefs: []
  type: TYPE_NORMAL
- en: The data that we need to filter is already available in the `tableData` global
    variable; we can filter this data and then use the global `tableSetData` function
    to display the filtered table.
  prefs: []
  type: TYPE_NORMAL
- en: The filter is going to work on the **Transportation** field.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let''s modify the previous code to add multiple-choice filters to our table:'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the `index.html` file from the previous recipe, add a multiple-choice select
    list after the opening `<body>` tag:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: 'Add a script element for `filter.js` before the closing `</body>` tag:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: 'We''re also going to modify the `fetchData` call at the end of `example.js`
    to trigger a custom event notifying any observers that the data has been fetched
    and set:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: The code is wrapped to be executed after the page is loaded in order for event
    triggering to work. Before the page load, no events can be triggered.
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a file named `filter.js` and add the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The easiest way to implement a user interface for a multiple-choice filter is
    to use a multiple-choice select element.
  prefs: []
  type: TYPE_NORMAL
- en: We also need to populate the element when the data becomes available. To do
    this, we trigger our new custom event `table:data` after fetching the data (either
    from our server or otherwise). The listener extracts the unique values from the
    **Transportation** column of the data and populates the select list with options
    for the values.
  prefs: []
  type: TYPE_NORMAL
- en: When the selection changes, we extract the selected values (as an array) and
    create a new filter function using `choiceFilter`, a higher-order function. The
    higher-order function returns a new filtering function. This filtering function
    takes a table row argument and returns `true` if the value of the fourth column
    of that row is contained within the specified list.
  prefs: []
  type: TYPE_NORMAL
- en: The filtering function is passed to `Array.filter`; it applies this function
    to every row and returns an array containing only the rows for which the filtering
    function returns `true`. The filtered data is then displayed instead of the original
    data.
  prefs: []
  type: TYPE_NORMAL
- en: Creating range filters
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Tables can also be filtered by their numerical columns. For example, given a
    table where each row is a person and one of the columns contain data about the
    person's age, we might need to filter this table by specifying the age range.
    To do this, we use range filters.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We're going to assume that we're using the code and data from the *Creating
    a sortable paginated table* recipe. We have a list of people with their age displayed
    in a sortable, paginated table using the DataTables jQuery plugin. We will copy
    the files from the recipe and then add some extra filtering code.
  prefs: []
  type: TYPE_NORMAL
- en: The data that we need to filter is already available in the `tableData` global
    variable; we can filter this data and then use the `tableSetData` global function
    to display the filtered table.
  prefs: []
  type: TYPE_NORMAL
- en: The filter is going to work on the **Age** field.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let''s modify the previous code to add range filters to our table:'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the `index.html` file from the previous recipe, add two input elements after
    the opening `<body>` tag:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: 'Add a script element for `filter.js` before the closing `</body>` tag:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, we create our `filter.js` script:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The easiest way to filter array data is to use JavaScript's built-in `Array.filter`
    function. This is a higher-order function; its first argument is a function that
    takes a row argument and returns `true` if the row is to be added to the filtered
    array or `false` if the row is to be left out.
  prefs: []
  type: TYPE_NORMAL
- en: To provide such a function, we create our own higher-order function. It takes
    the start and end ranges and the specified column. The return result is a function
    that filters every row.
  prefs: []
  type: TYPE_NORMAL
- en: To ignore empty or invalid values from the input, we use the number function.
    If the input field is empty or contains non-number data, a default value is provided
    (`-Infinity` for the start of the range and `+Infinity` for the end). This also
    enables us to do one-sided range filtering.
  prefs: []
  type: TYPE_NORMAL
- en: The `Array.filter` function returns an array of all the elements that pass the
    filter. We display this array in our table.
  prefs: []
  type: TYPE_NORMAL
- en: Creating combined complex filters
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When displaying tables, we sometimes want to filter table elements using multiple
    criteria involving multiple columns. For example, given a table of people that
    contains information such as their name, age, and transportation method, we might
    only want to view the people older than 30 that use a bus for transportation.
    We might also want to filter people by name. To do this, we have to apply multiple
    filters, such as an age range filter, a multiple-choice filter, and a text filter,
    to the data at the same time. The easiest way to do this is to make a filter combination
    function.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We're going to assume that we're using the code from the *Creating a sortable
    paginated table* recipe, and we're going to add our filters as described in the
    previous two recipes. This time we're going to allow for the combination of filters.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let''s modify the previous code to add multiple filters to our table:'
  prefs: []
  type: TYPE_NORMAL
- en: 'We''re going to add filter-related inputs to our page after the opening `<body>`
    tag:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs: []
  type: TYPE_PRE
- en: 'Add the `filter.js` script before the closing `</body>` tag:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs: []
  type: TYPE_PRE
- en: 'We''re going to modify `example.js` to fetch data after the page is loaded
    and trigger a `table:data` event after displaying the data:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs: []
  type: TYPE_PRE
- en: 'Then we can create `filter.js` by combining the code from the previous two
    recipes:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE63]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Like in the previous recipes, we use the `Array.filter` function to filter the
    table. This time we apply multiple filters in succession. We store all of the
    filter functions in an array.
  prefs: []
  type: TYPE_NORMAL
- en: Whenever there is a change in the inputs, we update the appropriate filter function
    and rerun `filterAndShow()` to display the filtered data.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: DataTables is a highly flexible table library with many options and a rich API.
    More information and examples can be found on the official website at [http://www.datatables.net/](http://www.datatables.net/).
  prefs: []
  type: TYPE_NORMAL
- en: Displaying code in HTML
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There is a common need to display code in HTML or even to display HTML code
    inside HTML, especially in technical documentation or blogs. This has been done
    far too many times by taking an image from a piece of formatted code and making
    it part of the page. The code in the image will probably not get picked up by
    search engines. Additionally, it can limit us to a specific page layout or even
    screen size, and with today's mobile revolution, that is just not an option.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The only requirement for this recipe is that the data that will be displayed
    needs to be properly escaped; this means that `<p>awesome </p>` needs to be translated
    into `&lt;p&gt;awesome &lt;/p&gt;`. This can be done either on the server side
    or escaped before saving.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We will be using **Google code prettify** because, at the time of speaking,
    this library is not available completely on any of the CDN's; you can get it from
    [http://code.google.com/p/google-code-prettify/](http://code.google.com/p/google-code-prettify/).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Afterwards, we can add the escaped code in the `<pre /> <code />` block:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE64]'
  prefs: []
  type: TYPE_PRE
- en: Either one of these two tags has to include the `prettyprint` CSS class. In
    addition to that, we need to include the `onload="prettyPrint()"` attribute.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'There is also the option to call the `prettyPrint` function from other event
    listeners added in JavaScript:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE65]'
  prefs: []
  type: TYPE_PRE
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `prettyprint` class automatically selects all the blocks marked with the
    appropriate CSS class, and autodetects the programming language used, and does
    the highlighting afterwards.
  prefs: []
  type: TYPE_NORMAL
- en: The lexer should work on most languages; in the common languages there are custom
    scripts for specific languages, for example, for the lisp-based ones.
  prefs: []
  type: TYPE_NORMAL
- en: There's more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Because `prettyprint` automatically detects the source language, we could additionally
    specify it ourselves if we want to get better results. For example, if we wanted
    to display XML, the code would be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE66]'
  prefs: []
  type: TYPE_PRE
- en: There are CSS classes for most of the common languages.
  prefs: []
  type: TYPE_NORMAL
- en: '`prettyprint` is one of the older scripts available, and there are few alternatives
    that can offer many more customization options and better JavaScript APIs.'
  prefs: []
  type: TYPE_NORMAL
- en: Some of them, such as **SyntaxHighliger** ([http://alexgorbatchev.com/SyntaxHighlighter/](http://alexgorbatchev.com/SyntaxHighlighter/)),
    **Rainbow** ([http://craig.is/making/rainbows](http://craig.is/making/rainbows)),
    and **Highlight.js** ([http://softwaremaniacs.org/soft/highlight/en/](http://softwaremaniacs.org/soft/highlight/en/)),
    are commonly found on most of the sites.
  prefs: []
  type: TYPE_NORMAL
- en: Rendering Markdown
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Markdown is a popular, lightweight markup language. The language is similar
    to Wiki markup (used on Wikipedia), with an emphasis on simplicity. Its main purpose
    is to enable users to write plain text and get stylized, formatted HTML output.
    As such, it is used by popular websites, such as Reddit, Stack Overflow, GitHub,
    as well as various forums as a replacement of the less intuitive BBCode format.
  prefs: []
  type: TYPE_NORMAL
- en: Markdown is the fastest way to enable formatted text input for our users without
    embedding a full-fledged HTML editor into the page. There are multiple libraries
    to render markdown; in this recipe, we're going to use the simple `markdown-js`
    script to render markdown in real time.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Rendering markdown is very simple. A minimal example is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE67]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'When the page is loaded, the markdown text in the `textarea` element is rendered
    into the #`render` element on the right-hand side. Every key press will also cause
    the script to update the rendered element.'
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Find out more about the markdown format from its official website at [http://daringfireball.net/projects/markdown/](http://daringfireball.net/projects/markdown/).
  prefs: []
  type: TYPE_NORMAL
- en: Autoupdating fields
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: These days, it is common to have an autoupdate on fields where one section is
    either the result of given choices or it displays a given image or text block.
    One example of this is having a password strength calculation; for example, searching
    for "currency converter" on Google will result in a box where you can do currency
    conversion between USD and EUR. Linking fields in this way makes sense when we
    have two or more that are logically linked, or when one is a result form of the
    other.
  prefs: []
  type: TYPE_NORMAL
- en: To demonstrate this, we will create a converter for temperature where updating
    one of the fields will result in changes in the other, as the values are linked.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'For this recipe, we only need a basic knowledge of jQuery and a simple formula
    to convert the temperatures between Celsius and Fahrenheit and vice versa:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE68]'
  prefs: []
  type: TYPE_PRE
- en: 'Or:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE69]'
  prefs: []
  type: TYPE_PRE
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'First, we are going to create the HTML part and create two input fields that
    will get autoupdated and add the appropriate labels:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE70]'
  prefs: []
  type: TYPE_PRE
- en: 'Afterwards, we have to make sure that we have included jQuery:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE71]'
  prefs: []
  type: TYPE_PRE
- en: 'Following this, we can add the script that will handle the binding between
    the fields:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE72]'
  prefs: []
  type: TYPE_PRE
- en: This will connect and automatically calculate the temperature back and forward.
  prefs: []
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Let's first take a look at the display part where there is nothing specific;
    here we use a simple input type text and add the appropriate labels for each field.
    Furthermore, we can use the escaped character `&deg;` that will show the degree
    character.
  prefs: []
  type: TYPE_NORMAL
- en: 'If we take a look at the jQuery `keyup` event, we can see that it''s executed
    when a user releases a key on the keyboard on a given element. This event can
    be attached on any HTML element, but it will only work when the element is in
    focus; so it mostly makes sense to use it on input elements. As the `keyup` event
    has an option to execute a function that will accept the event object, so for
    our case, it is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE73]'
  prefs: []
  type: TYPE_PRE
- en: 'In the `event` object, we can access the element that fired the event and access
    its value:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE74]'
  prefs: []
  type: TYPE_PRE
- en: 'After that, we can do the calculation (*celsius *(9/5) + 32*) and set the result
    as a value to the other element that displays it in Fahrenheit:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE75]'
  prefs: []
  type: TYPE_PRE
- en: 'As we wanted the binding to work both ways, we can do the same on the input
    field for Fahrenheit:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE76]'
  prefs: []
  type: TYPE_PRE
- en: And of course, you need to use the appropriate formula (*fahrenheit-32)*(5/9)*)
    for returning back to Celsius.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: While this recipe shows a simple use of jQuery `event` to make an instant update
    on input text, it can also be applied for creating autocomplete boxes or features,
    such as Google's instant search. The idea here is that we can and should use one-
    or two-way binding for various HTML elements, especially when we are talking about
    derived data or data that is a representation of the same source.
  prefs: []
  type: TYPE_NORMAL
