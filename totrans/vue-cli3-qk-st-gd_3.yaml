- en: Babel in Vue CLI 3
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will work with Babel to bring the new features of **JavaScript**
    (**JS**) to browsers before they can understand them by transpiling it to older
    versions of JS. We''ll discuss the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Understanding Babel
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Running webpack with ES5 and ES6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Updating our webpack configuration to work with Babel
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Vue, Babel, and JSX
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding Babel plugins manually
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let's begin by looking at what problems Babel solves.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding Babel
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As we've seen already in the previous chapters, once you build a default Vue
    application using the Vue CLI, you can then serve it with `npm run serve`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Your app will usually be served at `localhost:8080`. Looking at the served
    page with its default contents, you''ll notice that there are two plugins listed
    under the Installed CLI Plugins heading: `babel` and `eslint`.'
  prefs: []
  type: TYPE_NORMAL
- en: Why would these two plugins come pre-installed with the default application?
    Obviously, the Vue framework's team is trying hard to follow best practices and
    be up-to-date with the modern approach to building web applications. Using Babel
    is one of these best practices.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you visit the Babel website, you''ll see the following definition of what
    it is:'
  prefs: []
  type: TYPE_NORMAL
- en: '"Babel is a toolchain that is mainly used to convert ECMAScript 2015+ code
    into a backwards compatible version of JS in current and older browsers or environments."'
  prefs: []
  type: TYPE_NORMAL
- en: So, how can we use the Vue CLI Babel plugin? And what would be the easiest way
    to get more information about it?
  prefs: []
  type: TYPE_NORMAL
- en: 'Since we have already used Vue CLI to create default Vue apps, and since we
    have also learned about Vue CLI''s UI, we can reach the official documentation
    easily, by just opening our Git Bash and starting the Vue CLI UI:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'As we''ve seen in [Chapter 1](081bc26f-96a8-4cb0-8e73-d7c6e67f409b.xhtml),
    *Introducing Vue CLI 3*, this command will have webpack serve our most recent
    project''s dashboard in the browser. There, we can click the Plugins icon, as
    can be seen in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/6041d666-2d4e-4056-b36c-5db5021024cb.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Once you''ve clicked on the Installed plugins link, you''ll see the following
    screen:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/f6d4909a-8125-4c75-9cc1-3559a4cff885.png)'
  prefs: []
  type: TYPE_IMG
- en: 'This app lists three default plugins installed: *@vue/cli-service*, *@vue/cli-plugin-babel*,
    and *@vue/cli-plugin-eslint*. To make things easier to understand, the other plugins
    have been grayed out, and numbered boxes have been added to the screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: More info links to the GitHub repository of `cli-plugin-babel`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Update `@vue/cli-plugin-babel`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The button with the home icon is the link to Vue UI's project manager that lists
    all the available projects
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: This section of the UI shows the location of the current Vue project in your
    OS
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Clicking here lets you toggle Vue UI's logs on and off
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: As we've seen earlier, this allows you to switch between the two color variations
    of the Vue UI
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The report bug icon takes you to the Vue-CLI bug-reporting web page
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If you're interested in translating the UI, this button links to the page for
    UI localization
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: This icon simply refreshes the plugin's API
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If you need to use the popular **vuex** or **vue-router** plugins, you can simply
    click on the appropriate buttons at the very top of the plugins page to install
    them.
  prefs: []
  type: TYPE_NORMAL
- en: The search input to the right of the Add vuex and Add vue-router buttons lets
    you filter the installed plugins, and the Add plugin button takes you to the `localhost:8000/plugins/add`
    screen, where you can choose from a number of plugins, such as `@vue/cli-plugin-unit-jest`,
    `@vue/cli-plugin-typescript`, `@vue/cli-plugin-pwa`, and so on. There is a huge
    selection of plugins here, and we'll look into it in more detail in later chapters.
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, we'll discuss all the features of `cli-plugin-babel`.
  prefs: []
  type: TYPE_NORMAL
- en: The building blocks of @vue/cli-plugin-babel
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are several parts that `@vue/cli-plugin-babel` comes with out-of-the-box.
    These are Babel 7, babel-loader, and `@vue/cli-plugin-babel`.
  prefs: []
  type: TYPE_NORMAL
- en: Babel 7 in @vue/cli-plugin-babel
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Here is the problem that Babel solves.
  prefs: []
  type: TYPE_NORMAL
- en: Let's say that you are developing your web app's frontend, and you are using
    the more modern, ES6+ syntax of the JS language. Once your app is complete, and
    released into the wild, some of your users run your web app on, say, Internet
    Explorer. Contrary to other users of your web app who get a smooth experience
    running your app, the Internet Explorer users would get a syntax error instead.
  prefs: []
  type: TYPE_NORMAL
- en: 'Babel was the answer to problems such as this. It*leveled the playing field*:
    it allowed developers to outsource their JS browser compatibility problems to
    Babel. Instead of having to worry about, and cater to older browsers, they could
    simply write their JS code using the newest features of the language, even before
    they were fully available in any browser. Babel was then responsible for converting
    this code to the older JS dialect, the one that older browsers could speak.'
  prefs: []
  type: TYPE_NORMAL
- en: The `@vue/cli-plugin-babel` runs on Babel 7, which was released on August 27,
    2018\. There is a three-year difference between Babel 6 and Babel 7, and this
    iteration came with a slew of improvements. Vue CLI supporting such a recent update
    is another testament to its team being dedicated to keeping up with the times
    as much as possible.
  prefs: []
  type: TYPE_NORMAL
- en: The role of babel-loader in @vue/cli-plugin-babel
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As we've seen in the previous chapter, Vue CLI runs on webpack 4.
  prefs: []
  type: TYPE_NORMAL
- en: To be able to use Babel 7, `@vue/cli-plugin-babel` employs babel-loader, available
    here: [https://github.com/babel/babel-loader](https://github.com/babel/babel-loader).
  prefs: []
  type: TYPE_NORMAL
- en: As mentioned in the previous chapter, with webpack loaders, we can preprocess
    and bundle a bunch of different resources, not just regular JS, but virtually
    any other static resource.
  prefs: []
  type: TYPE_NORMAL
- en: Specifically, babel-loader takes ES6+ JS, and converts it to ES5 JS. This process
    is commonly referred to as **transpiling**. Thus, the role of babel-loader in
    `@vue/cli-plugin-babel` is to **transpile** our ES6+ code to ES5.
  prefs: []
  type: TYPE_NORMAL
- en: The role of @vue/babel-preset-app
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'There is more to `@vue/cli-plugin-babel`. It includes the `@vue/babel-preset-app`,
    whose sole purpose is to be used in projects generated via Vue CLI. Without going
    into too many details on how `@vue/babel-preset-app` works, we can list its main
    features:'
  prefs: []
  type: TYPE_NORMAL
- en: It looks at your browser targets using `browserslist`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It automatically applies transforms and polyfills needed (achieved with the
    help of `@babel/preset-env`)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It adds support for Vue JSX
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It prevents inlining helpers in all the files during builds
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Other than the previously listed features, there are also other things that
    `@vue/cli-plugin-babel` is capable of, and we'll discuss them in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Other features of @vue/cli-plugin-babel
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Besides the default settings listed in the previous section, `@vue/cli-plugin-babel`
    is also extendable. We can add other Babel presets and plugins using `babel.config.js`.
  prefs: []
  type: TYPE_NORMAL
- en: It uses a couple of webpack loaders to perform two other major tasks: caching
    (with the help of cache-loader), and utilizing multi-core processors (with the
    help of thread-loader). This is referred to as **parallelization**.
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, similar to what we did in [Chapter 2](cd533fca-589a-475b-b0ff-da2f7fb52251.xhtml),
    *Webpack in Vue CLI 3*, we will go through setting up Babel in Vue without CLI.
    After that, we will look at how CLI makes things a lot easier and how it can further
    be extended.
  prefs: []
  type: TYPE_NORMAL
- en: Using Babel and webpack in Vue 2 without Vue CLI
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s call our new project `npm-vue-babel-webpack`. We''ll open Git Bash,
    add the folder for this project, and `cd` into it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'We''ll initialize NPM and accept all the defaults:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: In [Chapter 2](cd533fca-589a-475b-b0ff-da2f7fb52251.xhtml), *Webpack in Vue
    CLI 3*, we installed NPM packages one by one, explained what each one does, and
    fixed any errors along the way. That gave us a thorough understanding of the building
    blocks of webpack and of how Vue and webpack fit together. To avoid unnecessary
    repetition, this time we'll just install everything at once.
  prefs: []
  type: TYPE_NORMAL
- en: Installing the necessary NPM packages
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Install the necessary NPM packages:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Now add the `src` and `dist` folders to our project, and open our project in
    VS Code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Feel free to inspect the contents of `package.json` in VS Code, to confirm all
    the NPM packages were indeed installed.
  prefs: []
  type: TYPE_NORMAL
- en: Let's create three new files inside the `src` folder, specifically `main.js`,
    `App.vue`, and `index.html`, almost the same as we did in [Chapter 2](cd533fca-589a-475b-b0ff-da2f7fb52251.xhtml),
    *Webpack in Vue CLI 3*.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here''s the code to be added to `index.html`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Here is the contents of `main.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, here is the contents of `App.vue`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Notice that inside the preceding `script` tag, we are importing `AnotherComponent`
    from a `components` folder.
  prefs: []
  type: TYPE_NORMAL
- en: So, let's add a `components` folder inside our project's `src` folder. Inside
    the `components` folder, we'll add a new file and call it `AnotherComponent.vue`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, add this code to `AnotherComponent.vue`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding code, we are finally seeing an example in which our component
    has some basic JS-powered Vue functionality. We are using Vue's built-in `data` and
    `methods` options. Inside the `methods` option, we define the `alertTime` function,
    which, whenever it gets called, shows the current time in an alert box.
  prefs: []
  type: TYPE_NORMAL
- en: 'Discussing the details of how all these moving parts work is outside of the
    scope of this book. The focus of this chapter is understanding Babel. If you need
    more information on the basic concepts of Vue such as the ones mentioned in the
    previous paragraphs, refer to one of many useful resources in the Packt library.
    A great companion to this book would be a quick introduction to the Vue 2 framework:
    *Vue.js Quick Start Guide* by *Ajdin Imsirovic* ([https://prod.packtpub.com/in/application-development/vuejs-quick-start-guide](https://prod.packtpub.com/in/application-development/vuejs-quick-start-guide)).'
  prefs: []
  type: TYPE_NORMAL
- en: The thing that we need to focus on at this point is working with ES6+ features
    in our `methods` option. Currently, the `methods` option's code is written in
    ES5 JS, and, thus, it will be easy to run webpack on this code, as we'll soon
    see.
  prefs: []
  type: TYPE_NORMAL
- en: Running webpack with ES5 code
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To run webpack, do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Add another file to the root of our project, `webpack.config.js`, so that we
    can set up our webpack configuration as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Note that the entry and output files are both `main.js`, so we don't have to
    specify them, but we're doing this anyway in the preceding code, to make things
    more obvious.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, in `package.json`, update the `scripts` key:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Now run our project from Git Bash, with the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Now, in VS Code, navigate to the `dist` folder in our project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Right-click on `index.html`, and click on the Open in Default Browser command.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Our browser will now show the following output (zoomed-in for easier viewing):'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/330dd18a-b7ff-4a6f-9006-17a6d5dd4d29.png)'
  prefs: []
  type: TYPE_IMG
- en: If a user clicks on the What's the time? button, an alert box will appear on
    the web page, showing the current time. Now let's update our `methods` option
    to ES6 syntax, and see what happens.
  prefs: []
  type: TYPE_NORMAL
- en: Adding webpack-dev-server
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Before we begin updating our code to ES6 syntax, there is one more thing that
    we can do to make things quicker and more convenient:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the `webpack-dev-server`. With the help of this NPM package, our code will
    be continually served and watched for changes. Let''s install it with the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'To get the webpack dev server running and serving our code, we also need to
    update `scripts` of `package.json` entry to this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Now we can play around with adding various features to our components and watch
    them being hot reloaded in the browser whenever we save our code in VS Code.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s test it out right now by running the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: You can test out the web page served at `http://localhost:8080/`, and you'll
    notice that it still works, just as before.
  prefs: []
  type: TYPE_NORMAL
- en: Next, we'll add some ES6 syntax to our `methods` option.
  prefs: []
  type: TYPE_NORMAL
- en: Updating the methods option to ES6 syntax
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s update the `methods` option in `AnotherComponent.vue` file. Here is
    the updated code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: Once you save changes you made in VS Code, you can click the What's the time?
    button, and the expected alert will appear, followed by another alert that reads
    something else. This way, we can be sure that we're looking at the updated app.
  prefs: []
  type: TYPE_NORMAL
- en: Now let's find our ES6 code in the compiled `main.js` file inside the `dist`
    folder.
  prefs: []
  type: TYPE_NORMAL
- en: 'If we inspect the `/dist/index.html` file inside the dev tools, we can see
    a reference to `main.js`, the webpack-compiled JS code. If you right-click `main.js` and
    click the Open in new tab command on the contextual right-click menu, you''ll
    get the full code showing in a new tab. To find our ES6 code, let''s press the
    *Ctrl* + *F* shortcut key so that we can enter our search term: `alertTime`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Toward the very bottom of the file, we see our ES6 arrow function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: In the next section, we'll update our webpack configuration with babel-loader,
    and see how webpack will transpile the preceding code to ES5.
  prefs: []
  type: TYPE_NORMAL
- en: Adding babel-loader to our webpack configuration
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Before we begin, we'll need to stop our webpack-dev-server, by using the *Ctrl*
    + *C* keyboard combination inside Git Bash.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, to be able to transpile ES6+ syntax in our project, we need to update
    our webpack configuration with Babel. Let''s first install the babel-loader package
    with NPM:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, let''s run webpack on our project again:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'Unfortunately, this still doesn''t work. If we inspected our transpiled `main.js`,
    we''d still see `alertTime` key, and it''s accompanying ES6 anonymous function.
    This means we still need another package: `babel core`.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: If we ran webpack at this point, we'd see that our issue was still not fixed.
  prefs: []
  type: TYPE_NORMAL
- en: 'This means that we still need to add `babel-preset-env`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'At this point, it doesn''t hurt to verify that our `package.json` has all the
    expected updates in the `devDependencies`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: Finally, before we can re-run webpack, we need to set up a `babel.config.js`
    file, Babel's own configuration file (similar to webpack's `webpack.config.js`).
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s create a new file, `babel.config.js`, in the root of our project, and
    let''s add it the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: All that we need to do now is update our webpack configuration so that it can
    work with Babel.
  prefs: []
  type: TYPE_NORMAL
- en: Updating our webpack configuration to work with babel
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To make our webpack work with babel, we need to explain to it when to use babel-loader.
    We do that by adding a rule to test for, inside the `module` option of `webpack.config.js`,
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: Now that we've set everything up, we can run our `npm run webpack-dev` command
    in Git Bash again.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here''s a quick way to see whether webpack bundled our JS file differently
    than before: just look at the webpack logging information inside Git Bash. During
    our previous attempts at hooking up Babel to work with webpack, the bundle size
    was exactly 70.2 KB. However, after this last run of the `webpack` NPM script,
    the bundle size for `main.js` is 70.6 KB. We can inspect the `./dist/main.js`
    file in our dev tools again. Alternatively, you can search for an `alertTime`
    string inside `./dist/main.js` right inside your VS Code.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Regardless of how we locate it, our bundled `main.js` file''s `methods` entry
    looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: Just glancing at the preceding code and seeing the `function` keyword, it should
    be obvious that this code is ES5, which means Babel was successfully run by webpack,
    and our ES6 `alertTime` Vue method in our input file inside the `src` folder was
    successfully transpiled to the output file inside the `dist` folder.
  prefs: []
  type: TYPE_NORMAL
- en: 'To verify that our setup works, we can run our `webpack-dev-server` again,
    and while it''s running, make another minor change to our `methods` option inside
    `AnotherComponent.vue`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: If you take a look at the project served at `localhost:8080`, you'll see it
    works as expected, and if you open `main.js` from the dev tools, you'll see the
    transpiled syntax as well.
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, we'll briefly mention a common source of confusion and
    how it is dealt with in Vue. It has to do with the arrow function syntax, and
    the `this` keyword.
  prefs: []
  type: TYPE_NORMAL
- en: The problem with the this keyword in arrow functions in Vue
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Unfortunately, when Babel transpiles the `this` keyword inside an arrow function,
    it transpiles it to `_this`. That means that any of our methods will be broken
    and our apps won't work. The underlying cause for this is due to the fact that
    arrow functions are scoped differently than ES5 functions.
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, we'll look at the recommended approach in defining functions
    inside the methods option of a Vue instance.
  prefs: []
  type: TYPE_NORMAL
- en: Recommended solutions to keyword problems
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The recommended solution to the `this` keyword inside Vue components is to not
    use the arrow function syntax since it doesn't produce the expected results due
    to scoping issues. Specifically, arrow functions are scoped to the parent context.
  prefs: []
  type: TYPE_NORMAL
- en: Let's see a simple app as an example of the problem.
  prefs: []
  type: TYPE_NORMAL
- en: Adding one counter app
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Before we begin, make sure you're back inside the `VUE-CLI-3-QSG/Chapter03`
    folder, the root folder for all our projects in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: 'Before we even begin building our app, we''ll need to remind ourselves of some
    options we have when using `vue create`, so let''s run this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: Inside the list of options, we can see that `-d` is for the `--default` flag,
    which skips prompts and uses default presets, and that the `-b` option is shorthand
    for `--bare` flag, which scaffolds our project without beginner instructions.
  prefs: []
  type: TYPE_NORMAL
- en: 'Interestingly, we can combine these individual flags, which we''ll do right
    now. Let''s begin our app by running the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: As we can see, we can chain the letter aliases for flags appended to the `vue
    create` command, which is a nice little productivity boost.
  prefs: []
  type: TYPE_NORMAL
- en: In the app that gets built, we'll alter the contents of `main.js` inside the `src`
    folder. This file will be exactly the same as it was in the previous example app
    (the `npm-vue-b-w-es6-syntax` app from the previous section), so you can just
    copy and paste this file from that previous Vue app into our new example, the
    `add-one-counter` app.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you open our new `add-one-counter` app inside VS Code, you''ll also notice
    another folder: the `public` folder, with `index.html` inside it. We will leave
    this file as it is.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Back inside the `src` folder, we need to change the contents of `App.vue`,
    to this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, we''ll need to add a `components` folder to the root of our project,
    and inside it, the `AnotherComponent.vue` file. Here is the contents of `AnotherComponent.vue`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: In the `methods` option, we can see the `incrementUp` function defined using
    the ES6 syntax.
  prefs: []
  type: TYPE_NORMAL
- en: If you tried running this app, it would not work. This is the case, because
    the arrow function's scoping and the Babel setup make it difficult to properly
    set up Vue apps with `methods` in the `arrow` functions.
  prefs: []
  type: TYPE_NORMAL
- en: 'The only improvement, and the usual way to write functions inside the method
    options, is to avoid both the arrow function syntax, and the use of the `function`
    keyword altogether, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: The `incrementUp` function is called a **shorthand** function. You can read
    more about it at following URL: [https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Object_initializer#Method_definitions](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Object_initializer#Method_definitions).
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s test-drive the app by serving it from the UI:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: Once the Vue UI is serving in the browser, let's point our browser's address
    bar to `http://localhost:8000/project/select`. Next, click on the `add-one-counter`
    folder, and click the Import this folder button.
  prefs: []
  type: TYPE_NORMAL
- en: Next, click on the Tasks button on the main menu. Finally, click the Serve icon.
    Click the Output button to see the app building and serving.
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, open the website at `http://localhost:8080/`. You''ll see a working
    app being served:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/9f8b4063-82e3-4dea-b2a7-a549b4e0e610.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The previous example showed us the best practice of how to name and organize
    methods inside our Vue instances. Also, we saw how to use Vue UI to automate webpack
    building and serving our apps in a few clicks—much better than what we were doing
    for most of this chapter! This leads us to a conclusion: a lot of the piping and
    functionality is abstracted away and hence, this made a lot easier for using and
    accessing with the help of Vue UI, including Babel settings.'
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we had a brief overview of what Babel is, what it does, and
    what is needed to make it work with Vue. All of this is abstracted away with the
    help of `vue-cli-service`, which is powered by webpack under the hood. Now that
    we have an understanding of how all these different parts work together, we will
    start using only the Vue CLI and its UI, and learn how to work with it better
    in the following chapters.
  prefs: []
  type: TYPE_NORMAL
- en: We'll begin by understanding testing in Vue CLI with the help of Jest. We'll
    also learn about **Test-Driven Development** (**TDD**)and running tests with the
    help of Vue CLI UI.
  prefs: []
  type: TYPE_NORMAL
