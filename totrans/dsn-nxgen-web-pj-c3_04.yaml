- en: Chapter 4. Zooming User Interface
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we'll learn how to create a simple **ZUI**. This acronym stands
    for a **zooming user interface**; a graphical environment where users can change
    the scale of the viewed area in order to see more or less detail. For this project,
    we'll create a ZUI to let users move and explore an **infographic**, which is
    a visual graphic representation of data, information, or knowledge. The project
    we are going to build combines many CSS3 features, such as transitions, transformations,
    and Flexible Box Layout. It also introduces SVG and the various methods we can
    use to embed them in an HTML page. Additionally, as an extra challenge, we will
    also enable our page to perform on older browsers and will explore clever ways
    to accomplish this task.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is a preview of the topics discussed in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Infographics
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Flexible Box Layout
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Polyfills
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Embedding SVG
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Modernizr
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `:target` pseudo-selector
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: CSS3 transforms
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Targeting SVG with CSS
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Graceful degradation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Infographics
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Infographics are rapidly changing the way we consume information by creating
    graphical representations that aggregate data or show flows, and are able to display
    a great quantity of knowledge in a very intuitive and easy-to-use way. A great
    source of information about this topic is the blog, FlowingData ([http://flowingdata.com/](http://flowingdata.com/)).
  prefs: []
  type: TYPE_NORMAL
- en: 'For this project, we will use the following stunning infographic created by
    Oxigenio, an Italian-based company ([http://www.officinastrategia.it](http://www.officinastrategia.it)):'
  prefs: []
  type: TYPE_NORMAL
- en: '![Infographics](img/3264OT_04_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'We want to reserve most of the browser''s viewport area for this amazing infographic,
    except for a sidebar, 200 px wide, which contains some commands we''ll see in
    a moment. First let''s define some basic HTML in an `index.html` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: For this project, we use the `modernizr.js` and `prefixfree.js` files. So let's
    create a `js` directory under the root folder of our project and download them
    to there from their respective websites ([http://modernizr.com/downloads/modernizr-latest.js](http://modernizr.com/downloads/modernizr-latest.js)
    and [http://leaverou.github.com/prefixfree/](http://leaverou.github.com/prefixfree/)).
  prefs: []
  type: TYPE_NORMAL
- en: Next we have to prepare a `css` folder and create an empty `application.css`
    in it.
  prefs: []
  type: TYPE_NORMAL
- en: 'The HTML structure we defined so far is quite simple and minimalistic: a `header`
    element and an `article` element surrounded by a `section` element. Now we want
    to place the `header` element on the left side with a fixed width of 200 px, and
    tell the `article` element to cover the remaining portion of the screen.'
  prefs: []
  type: TYPE_NORMAL
- en: We can achieve this element disposition with a variety of techniques. For the
    purpose of this book, we're going to use CSS3 Flexible Box Layout.
  prefs: []
  type: TYPE_NORMAL
- en: Implementing Flexible Box Layout
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'CSS2.1 defined four layout modes: block, inline, tabular, and positioned. CSS3
    has added some new layout modes, and one of them is **Flexible Box Layout**. This
    new mode is activated by a new value we can give to the `display` statement, and
    can be configured through a whole new set of properties.'
  prefs: []
  type: TYPE_NORMAL
- en: The basic idea behind this new layout mode is that within a container element
    (for example, our `section` element) we can specify the direction we want our
    inner elements to be displayed in. So if we say `horizontal` then the elements
    will flow from left to right, and if we say `vertical` they'll be positioned one
    below the other, top to bottom.
  prefs: []
  type: TYPE_NORMAL
- en: Then we can decide the size of each of the elements either by using fixed dimensions
    or by defining a grow factor.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: When a new space is available within the container, the elements increase their
    width proportionally to their grow factors.
  prefs: []
  type: TYPE_NORMAL
- en: 'Enough talk! Let''s create a small demo to test this out:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'We can see how the `li` elements within the `ul` element start with the same
    width, which is exactly one-fifth of the width of the containing element. This
    is because they all have the same grow factor specified by the property `box-flex`,
    which makes them divide the available space equally. When we hover our mouse over
    one of the `li` elements, we change the `box-flex` value of the element; we hover
    over to `2` that makes its width twice as long as the others. The following is
    a screenshot with the page just loaded:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Implementing Flexible Box Layout](img/3264OT_04_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The following is a screenshot while hovering over an element:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Implementing Flexible Box Layout](img/3264OT_04_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'By changing the direction property (`box-orient`) from `horizontal` to `vertical`,
    we can observe the same behavior on the opposite axis. Due to the structure of
    this specific example, we also have to modify `line-height` to remove the `200px`
    height we have set:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'The following is the screenshot that shows the result:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Implementing Flexible Box Layout](img/3264OT_04_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Defining the basic structure
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that we have the basics to create the structure of our project, we need
    to define a horizontal direction within the `section` element, and then set the
    `header` element's width to a fixed value.
  prefs: []
  type: TYPE_NORMAL
- en: 'We have already created the `index.html` HTML in the first section of this
    chapter. Now let''s reprint the `body` section again for clarity:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'We can start adding the following instructions to `application.css`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'We''ve added a little more instructions than in the previous example because
    we also want the `section` element to cover the whole browser''s viewport. Additionally,
    we should prevent the display of a vertical scroll bar because the only navigation
    mechanisms must be the ones offered by the ZUI. So we''ve added an `overflow:
    hidden` property to both `section` and `article`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'If we now load the project in a browser that supports CSS3, we can appreciate
    the result:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Defining the basic structure](img/3264OT_04_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The Flexible Box Layout Module specification is evolving rapidly, and currently
    none of the web browsers support all of the specs. Our implementation corresponds
    to the following document published on July 23, 2009:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://www.w3.org/TR/2009/WD-css3-flexbox-20090723/](http://www.w3.org/TR/2009/WD-css3-flexbox-20090723/)'
  prefs: []
  type: TYPE_NORMAL
- en: Adding Polyfills
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: For the first time since the beginning of this book, we are using CSS3 to define
    the structure of our page. This means we cannot simply rely on graceful degradation
    to support older browsers because it would compromise the whole structure of the
    project. Instead, we're going to look for some JavaScript libraries that are able
    to emulate the behavior we have implemented. This, of course, can lead to some
    problems if the user's browser is missing both JavaScript support and Flexible
    Box Layout, but at least we can hope that the number of such users is pretty low.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are different types of such JavaScript libraries, categorized by how
    much extra work is required to obtain the same result as the native implementation:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Generic libraries**: Generic libraries don''t allow the developer to obtain
    exactly the same result, but give him/her some tools to code an alternative implementation
    of the solution.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Shims**: Shims allow the developer to mimic the native implementation perfectly,
    but achieving it requires an extra cost in terms of work.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Polyfills**: Polyfills are the best ones. These libraries read our code,
    detect the unsupported features, and implement the required JavaScript workaround
    without the need to add extra code.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'We need to find a polyfill that emulates Flexible Box Layout Module. We can
    start our search from the following page, created and kept by the authors of Modernizr
    that lists all the polyfills they have tested and found to work:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://github.com/Modernizr/Modernizr/wiki/HTML5-Cross-Browser-Polyfills](https://github.com/Modernizr/Modernizr/wiki/HTML5-Cross-Browser-Polyfills)'
  prefs: []
  type: TYPE_NORMAL
- en: After scrolling down the page, we find Flexie, which claims to add support to
    Flexible Box Layout for older browsers (up to IE6). All we have to do is download
    the library, `flexie.js`, to our `js` folder (it is also available from GitHub
    at [https://github.com/doctyper/flexie](https://github.com/doctyper/flexie), within
    the `src` folder).
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s modify our `index.html` file by adding the following lines just before
    the `</body>` tag:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Now we can test if everything went well by loading our project in a browser
    that doesn''t support CSS3 Flexible Box Layout. The following is a screenshot
    taken from IE8:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Adding Polyfills](img/3264OT_04_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: As we see from the output, there's no striped background but the overall structure
    is well preserved.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Adding a polyfill to a project inevitably increases its level of complexity.
    Polyfills are almost always able to emulate the CSS3 feature they are built for,
    but in a way that obviously differs from the native implementation. It might be
    that a polyfill needs to inject extra elements to our page, or to add CSS properties.
    So it's a good rule of thumb to add these libraries earlier, during the development
    of our pages and to test them often in order to catch conflicts between the developing
    pages and libraries.
  prefs: []
  type: TYPE_NORMAL
- en: Embedding SVG
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We'd like to use **Scalable Vector Graphics** (**SVG**) instead of a raster
    image where supported. We're building a ZUI so our infographic needs to be zoomed,
    and using a vector graphic allows us to preserve the quality of the object. Vector
    images, in fact, are size independent and thus don't get pixelated when scaled.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: More information about vector images and SVG can be found on Wikipedia at [http://en.wikipedia.org/wiki/Vector_graphics](http://en.wikipedia.org/wiki/Vector_graphics).
  prefs: []
  type: TYPE_NORMAL
- en: 'There are three ways to embed an SVG:'
  prefs: []
  type: TYPE_NORMAL
- en: As an `<object>` element. This is the most supported way of adding SVG. However,
    it is limited in a sense that the SVG is treated like an external element and
    therefore cannot be manipulated through JavaScript (except for some obvious properties,
    such as `width` and `height`).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: As a value for CSS where an image is required.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Directly into our HTML code. This approach offers the most interaction available
    between the SVG and the page. As we'll see later in this chapter, we can interact
    with the vector graphic directly from CSS, or even from JavaScript.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Let''s go for the third way because we want our CSS to be able to affect part
    of the SVG graphic. First of all, let''s create a `div` element that is going
    to act as a container for our SVG element within the `<article>` we created earlier
    in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, we can use jQuery to load the SVG file from the `img` folder directly
    into the container we just created by adding a few lines to our `index.html` file,
    after the `script` tags we wrote earlier:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: In these lines, we first ask jQuery to wait until the DOM is ready, and then
    to load the content of our SVG file inside the `div` element with the `.panel`
    class.
  prefs: []
  type: TYPE_NORMAL
- en: Now we can add a bit of CSS to center the `div` element both vertically and
    horizontally in the containing `article`.
  prefs: []
  type: TYPE_NORMAL
- en: 'This can be weird because only Webkit browsers and IE9+ seem to accept a container
    with size `100%`, so we have to discriminate between these browsers and the others.
    So let''s add the following instructions to `application.css`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'We have now covered all the possible cases:'
  prefs: []
  type: TYPE_NORMAL
- en: We used Prefix Free's ability to add an extra class to the `<html>` element
    to detect Webkit and Microsoft browsers, and set the container size to `100%`
    for these browsers in order to obtain an SVG as big as the container permits
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If the browser is not one of those discussed in the previous item, we align
    the SVG centrally and set a fixed size
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If there is an image instead of the SVG (we'll see in a moment how we can handle
    this), we do basically the same thing as in the previous item.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'If we now reload the project in our browser, we can see the display of the
    SVG:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Embedding SVG](img/3264OT_04_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Due to the fact that we're using AJAX, we need a proper web server to try this
    project. Just double-clicking on the `index.html` file won't generate the expected
    results. Refer to the *Preface* section of the book to get more information on
    how to install a web server.
  prefs: []
  type: TYPE_NORMAL
- en: Of course there are browsers that don't support SVG. IE8 is among them, so we
    need to find a solution in order to keep our project enjoyable on these browsers
    too.
  prefs: []
  type: TYPE_NORMAL
- en: Taking advantage of Modernizr
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We have already had a glimpse of Modernizr in the last chapter, it''s a library
    that does plenty of things, some of which are listed as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: It adds support for new HTML5 tags in older browsers.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It exposes some methods in JavaScript allowing us to test for a certain CSS3/HTML5
    feature. For example, `Modernizr.multiplebg` returns `true` or `false` depending
    on the support of multiple backgrounds.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It adds some classes to the `<html>` element reflecting the support of certain
    CSS3/HTML5 features. For example, `<html class="multiplebg">` or `<html class="no-multiplebg">`
    depending on the support of multiple backgrounds.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We have already added this library to our project. However, if not properly
    tuned, Modernizr performs all the tests to detect the supported features even
    if we're not going to use them. To enhance the performance of the library, we
    can select which tests we want it to perform.
  prefs: []
  type: TYPE_NORMAL
- en: To do that, we have to click on the download page of Modernizr ([http://modernizr.com/download/](http://modernizr.com/download/))
    and check only the features we're going to use this library for.
  prefs: []
  type: TYPE_NORMAL
- en: 'For this project, we need to test for inline SVG support. The following is
    a screenshot with the checkboxes on the right-hand side checked:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Taking advantage of Modernizr](img/3264OT_04_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Next we click on the **Generate!** button, and then on the **Download** button
    to download and overwrite the `modernizr.js` file we have in our project.
  prefs: []
  type: TYPE_NORMAL
- en: We may now check the generated HTML code for our project and see how the `html`
    elements get enriched by an `inlinesvg` class if the browser supports inline SVG,
    or a `no-inlinesvg` class otherwise.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You can check the generated HTML code using the browser's development console.
    If using Google Chrome, for example, press *Ctrl* + *Shift* + *I* (on Windows
    and Linux), or press *Command* + *Option* + *I* (on Mac).
  prefs: []
  type: TYPE_NORMAL
- en: '![Taking advantage of Modernizr](img/3264OT_04_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'We''re now going to implement an alternative to the SVG graphic using a plain
    image; and then, by taking advantage of the class provided to us by Modernizr,
    switch between one or the other depending upon the browser''s support. So let''s
    first add a small HTML snippet to `index.html` just before the `</article>` tag:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Then we need to modify our `application.css`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'If we now reload the project in IE8, we can see how everything is handled correctly:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Taking advantage of Modernizr](img/3264OT_04_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The :target pseudo-selector
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now we can start adding some interaction to our project. What we want is to
    expose some controls in the `<header>` sidebar that, when clicked, zoom to a defined
    area of the infographic.
  prefs: []
  type: TYPE_NORMAL
- en: 'To achieve this, we are going to take advantage of a new CSS3 pseudo-selector:
    `:target`. It gets activated when an anchor becomes the target of the current
    URL. Let''s create a small example to try this out:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'In the previous example, we basically say that when an `a` element becomes
    the target of the current URL, its background color must turn yellow. The following
    screenshot shows the result (notice the URL):'
  prefs: []
  type: TYPE_NORMAL
- en: '![The :target pseudo-selector](img/3264OT_04_11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Now we need a set of `a` elements containing the command we want the user to
    be able to execute. So let''s add a `nav` element within the `header` element
    in our `index.html` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, we can style these commands with a few CSS instructions in our `application.css`
    file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'If we reload the project, we can see the result:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The :target pseudo-selector](img/3264OT_04_12.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Adding some anchors
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Now we need to place the `a` elements that are targets of the commands we just
    implemented. And here comes a small trick: if we put these elements on the top
    of our page and then we hide them, we can use proximity selectors (`+` and `~`)
    to match the elements that follow them and be able to virtually reach every other
    element in the page.'
  prefs: []
  type: TYPE_NORMAL
- en: 'So, let''s start by adding an `a` element for each command we have specified,
    just below the `body` element of our `index.html` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'Good! Now if we want to change the `header` background color when the **Italy**
    command has been clicked, we can add a simple line to our CSS:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: Of course we don't want to do that, but by using the same principle we can trigger
    some changes to the infographic. First we have to learn about transformations.
  prefs: []
  type: TYPE_NORMAL
- en: CSS3 transforms
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We are going to explore a whole new set of properties with the goal of being
    able to arbitrarily scale an element using CSS. This is the last core technique
    we need to learn to complete the ZUI, and the properties involved are called **CSS3
    transforms**.
  prefs: []
  type: TYPE_NORMAL
- en: 'With CSS3 transforms we can apply some modifiers to the elements on a page,
    namely:'
  prefs: []
  type: TYPE_NORMAL
- en: '`translateX(x)`, `translateY(y)`, and `translate(x,y)`: These modifiers move
    the element along one or both axes by a distance specified by the `x` and `y`
    variables (in px)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`rotate(deg)`: It rotates the element by the value specified by the `deg` variable,
    which must be expressed in grades (from 0 to 360 degrees)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`scaleX(s)`, `scaleY(s)`, and `scale(s,[s])`: It scales the element of the
    value specified by a scale factor `s` where a scale of `1` corresponds to keeping
    the element at the same size'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`skewX(k)` and `skewY(k)`: It applies a skew transformation by the given `k`
    angle expressed in grades (from 0 to 360 degrees)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There's also a `matrix` modifier that accepts six parameters and lets us define
    a transformation matrix. More information about the `matrix` modifier can be found
    at [http://www.w3.org/TR/SVG/coords.html#TransformMatrixDefined](http://www.w3.org/TR/SVG/coords.html#TransformMatrixDefined).
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s experiment with these modifiers in a small demo:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'As you can see, transformations can be combined in order to obtain some interesting
    results. The following is a screenshot of this demo running in a CSS3-compliant
    browser:'
  prefs: []
  type: TYPE_NORMAL
- en: '![CSS3 transforms](img/3264OT_04_13.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Another good feature to note is the fact that the element position is calculated
    *before* the transformation is applied. A proof of this is the fact that the scaled
    `div` element doesn't move the others down, but simply overlaps them.
  prefs: []
  type: TYPE_NORMAL
- en: Applying transformations
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Now we only need to put together what we have just learned, and transform the
    infographic in response to a click of one of the commands. To have a smooth transformation,
    let''s specify a transition of `1` second to all the transform properties in `application.css`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'Good! Let''s reload the project in a browser:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Applying transformations](img/3264OT_04_14.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Flashing issues
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'All of the latest Chrome versions (up to version 18 at the time of writing)
    switch between CPU and GPU-accelerated graphics when some CSS properties are applied
    (transitions are among them). This could generate a flash on the screen if the
    computer is not fast enough to handle it. One solution is to force Chrome to apply
    a GPU-accelerated property when the page loads. In this solution, the 3D transform
    properties we''ll see in the next few chapters come in handy, so we can add a
    null `translateZ` property to the `body` element as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: However, we have to remember that this solution lowers the quality of the SVG
    because Chrome doesn't seem to refine graphics after a `transform` property while
    accelerated. Additionally, 3D transform properties such as the one we just used
    should be treated with caution on mobile environments as they are memory intensive.
  prefs: []
  type: TYPE_NORMAL
- en: Adding a mask
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We might want to add a small description mask for each of the zoom areas available.
    In the mask, we also want the user to be able to move between the zoomed areas
    using small arrows.
  prefs: []
  type: TYPE_NORMAL
- en: 'First of all let''s define the HTML needed: there will be four masks, one for
    each of the three commands, and one for the central area. We can add the required
    markup just after the `</section>` tag:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'Now we have to place the `#mask` element just below the bottom line of the
    viewport, and activate it when one of the commands is triggered. So let''s write
    the following instructions in `application.css`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'In the highlighted chunk of code, we instructed the browser to:'
  prefs: []
  type: TYPE_NORMAL
- en: Hide the `#mask` element below the browser bottom line
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Hide all the `div` elements within the `#mask` element
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Show only the `div` element within the `#mask` element corresponding to the
    targeted `a` element
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Reveal the `#mask` element when one of the `a` elements is `:target`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Now we need to take care of the `italy2` anchor. So let''s add another `a`
    element just before `<section>` in `index.html`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'And the corresponding CSS in `application.css`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'Well done! Now let''s reload the project in the browser:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Adding a mask](img/3264OT_04_15.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Targeting SVG with CSS
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Ok, time for some final touches. What we want now is to provide a mechanism
    to toggle the visibility of the labels of the infographic. Due to the fact that
    our SVG is inline, we can turn them off by simply adding `opacity: 0` to their
    `id` selector, in the same way as we would have done with plain HTML elements.
    So let''s add the following lines to `application.css`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: The next step is to find a way to let the user toggle the `opacity` value. We
    can achieve this result using a checkbox and taking advantage of the `:checked`
    pseudo-selector more or less as we did with the `:target` one.
  prefs: []
  type: TYPE_NORMAL
- en: 'So, first of all let''s add a checkbox just before the `<section>` tag in our
    `index.html` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'And then, let''s add the corresponding label just before the `</ul>` tag in
    the `nav` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'Now add the following lines to `application.css`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'The following is a final screenshot of our project:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Targeting SVG with CSS](img/3264OT_04_16.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Graceful degradation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Because we added CSS transformations, things started to go wrong on older browsers.
    In fact, both transformations and the `:target` pseudo-selector are not supported
    on older browsers, so we have to find a valid alternative. One solution can be
    to listen to URL hash changes via JavaScript and use a `hashchange` event to add
    a class reflecting the current hash to both `section` and `#mask` elements. This
    class can then be used to trigger some CSS properties.
  prefs: []
  type: TYPE_NORMAL
- en: To be able to listen to the `hashchange` event on older browsers, we need a
    small JavaScript library. We can download it from [http://benalman.com/code/projects/jquery-hashchange/docs/files/jquery-ba-hashchange-js.html](http://benalman.com/code/projects/jquery-hashchange/docs/files/jquery-ba-hashchange-js.html),
    rename it to `jquery.hashchange.js`, and place it in our `js` folder. Next we
    have to replace our copy of Modernizr (`js/modernizr.js`) with a new one that
    also includes the test for **multiple backgrounds**. To achieve this, we can use
    the same procedure as discussed earlier.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now we need to insert this library and then add some small JavaScript code
    just before the `</body>` tag:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: Good! Now we can emulate the `transform` property by varying the width, height,
    and position of the `img.panel` element. Additionally, we can also use the class
    we added dynamically with JavaScript to show and hide the `#mask` element.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'The following screenshot shows the final result:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Graceful degradation](img/3264OT_04_17.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we learned how to deal with CSS3 properties that structurally
    affect our page. We also discovered transformations, and some cool ways to interact
    with SVG. In the next chapter, we'll discuss how to enhance an image gallery.
  prefs: []
  type: TYPE_NORMAL
