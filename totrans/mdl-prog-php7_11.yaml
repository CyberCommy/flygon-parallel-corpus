- en: Chapter 11. Building the Sales Module
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Sales module is the final one in the series of modules we will build in
    order to deliver a simple yet functional web shop application. We will do so by
    adding the cart and the checkout features on top of the catalog. The checkout
    itself will finally make use of the shipping and payment services defined throughout
    the previous chapters. The overall focus here will be on absolute basics, since
    the real shopping cart application would take a far more robust approach. However,
    understanding how to tie it all together in a simple way is the first step toward
    opening up a door for more robust web shop application implementations later on.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will be covering the following topics of the Sales module:'
  prefs: []
  type: TYPE_NORMAL
- en: Requirements
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Dependencies
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Implementation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Unit testing
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Functional testing
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Application requirements, defined in [Chapter 4](ch04.html "Chapter 4. Requirement
    Specification for a Modular Web Shop App"), *Requirement Specification for Modular
    Web Shop App*, give us some wireframes relating to the cart and checkout. Based
    on these wireframes, we can speculate about what type of entities we need to create
    in order to deliver on functionality.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is a list of required module entities:'
  prefs: []
  type: TYPE_NORMAL
- en: Cart
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Cart Item
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Order
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Order Item
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The `Cart` entity includes the following properties and their data types:'
  prefs: []
  type: TYPE_NORMAL
- en: '`id`: integer, auto-increment'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`customer_id`: string'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`created_at`: datetime'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`modified_at`: datetime'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The `Cart Item` entity includes the following properties:'
  prefs: []
  type: TYPE_NORMAL
- en: '`id`: integer, auto-increment'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`cart_id`: integer, foreign key that references the category `table id` column'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`product_id`: integer, foreign key that references product `table id` column'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`qty`: string'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`unit_price`: decimal'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`created_at`: datetime'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`modified_at`: datetime'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The `Order` entity includes the following properties:'
  prefs: []
  type: TYPE_NORMAL
- en: '`id`: integer, auto-increment'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`customer_id`: integer, foreign key that references the customer `table id`
    column'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`items_price`: decimal'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`shipment_price`: decimal'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`total_price`: decimal'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`status`: string'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`customer_email`: string'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`customer_first_name`: string'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`customer_last_name`: string'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`address_first_name`: string'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`address_last_name`: string'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`address_country`: string'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`address_state`: string'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`address_city`: string'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`address_postcode`: string'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`address_street`: string'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`address_telephone`: string'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`payment_method`: string'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`shipment_method`: string'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`created_at`: datetime'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`modified_at`: datetime'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The `Order Item` entity includes the following properties:'
  prefs: []
  type: TYPE_NORMAL
- en: '`id`: integer, auto-increment'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`sales_order_id`: integer, foreign key that references the order `table id`
    column'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`product_id`: integer, foreign key that references product `table id` column'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`title`: string'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`qty`: int'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`unit_price`: decimal'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`total_price`: decimal'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`created_at`: datetime'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`modified_at`: datetime'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Aside from just adding these entities and their CRUD pages, we also need to
    override a core module service responsible for building the category menu and
    on-sale items.
  prefs: []
  type: TYPE_NORMAL
- en: Dependencies
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Sales module will have several dependencies across the code. These dependencies
    are directed toward customer and catalog modules.
  prefs: []
  type: TYPE_NORMAL
- en: Implementation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We start by creating a new module called `Foggyline\SalesBundle`. We do so
    with the help of the console, by running the command as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'The command triggers an interactive process, asking us several questions along
    the way, as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Implementation](graphics/B05460_11_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Once done, the `app/AppKernel.php` and `app/config/routing.yml` files get modified
    automatically. The `registerBundles` method of an `AppKernel` class has been added
    to the following line under the `$bundles` array:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'The `routing.yml` file has been updated with the following entry:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'In order to avoid collision with the core application code, we need to change
    `prefix: /` into `prefix: /sales/`.'
  prefs: []
  type: TYPE_NORMAL
- en: Creating a Cart entity
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let''s go ahead and create a `Cart` entity. We do so by using the console,
    as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'This triggers the interactive generator as shown in the following sreenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating a Cart entity](graphics/B05460_11_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'This creates the `Entity/Cart.php` and `Repository/CartRepository.php` files
    within the `src/Foggyline/SalesBundle/` directory. After this, we need to update
    the database, so it pulls in the `Cart` entity, by running the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: With the `Cart` entity in place, we can go ahead and generate the `CartItem`
    entity.
  prefs: []
  type: TYPE_NORMAL
- en: Creating the cart item entity
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let''s go ahead and create a `CartItem` entity. We do so by using the now well-known
    `console` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'This triggers the interactive generator as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating the cart item entity](graphics/B05460_11_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'This creates `Entity/CartItem.php` and `Repository/CartItemRepository.php`
    within the `src/Foggyline/SalesBundle/` directory. Once the auto generate has
    done its work, we need to go back and edit the `CartItem` entity to update the
    `cart` field relation as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Here, we have defined the so-called *bidirectional one-to-many* association.
    The foreign key in a one-to-many association is being defined on the many side,
    which in this case is the `CartItem` entity. The bidirectional mapping requires
    the `mappedBy` attribute on the `OneToMany` association and the `inversedBy` attribute
    on the `ManyToOne` association. The `OneToMany` side in this case is the `Cart`
    entity, so we go back to the `src/Foggyline/SalesBundle/Entity/Cart.php` file
    and add the following to it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'We then need to update the database, so it pulls in the `CartItem` entity,
    by running the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: With the `CartItem` entity in place, we can go ahead and generate the `Order`
    entity.
  prefs: []
  type: TYPE_NORMAL
- en: Creating an Order entity
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let''s go ahead and create an `Order` entity. We do so by using the console,
    as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'If we tried to provide `FoggylineSalesBundle:Order` as an entity shortcut name,
    the generated output would throw an error as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating an Order entity](graphics/B05460_11_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Instead, we will use `SensioGeneratorBundle:SalesOrder` for the entity shortcut
    name, and follow the generator through as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating an Order entity](graphics/B05460_11_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'This is followed by the rest of the customer-information-related fields. To
    get a better idea, look at the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating an Order entity](graphics/B05460_11_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'This is followed by the rest of the order-address-related fields as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating an Order entity](graphics/B05460_11_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: It is worth noting that normally we would like to extract the address information
    in its own table, that is make it its own entity. However, to keep things simple,
    we will proceed by keeping it as part of the `SalesOrder` entity.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once done, this creates `Entity/SalesOrder.php` and `Repository/SalesOrderRepository.php`
    files within the `src/Foggyline/SalesBundle/` directory. After this, we need to
    update the database, so it pulls in the `SalesOrder` entity, by running the following
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: With the `SalesOrder` entity in place, we can go ahead and generate the `SalesOrderItem`
    entity.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a SalesOrderItem entity
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let''s go ahead and create a `SalesOrderItem` entity. We start the code generator
    by using the following `console` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'When asked for the entity shortcut name, we provide `FoggylineSalesBundle:SalesOrderItem`,
    and then follow the generator field definitions as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating a SalesOrderItem entity](graphics/B05460_11_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'This creates `Entity/SalesOrderItem.php` and `Repository/SalesOrderItemRepository.php`
    files within the `src/Foggyline/SalesBundle/` directory. Once the auto-generate
    has done its work, we need to go back and edit the `SalesOrderItem` entity to
    update the `SalesOrder` field relation as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Here, we have defined two types of relations. The first one, relating to `$salesOrder`,
    is the bidirectional one-to-many association, which we saw in the `Cart` and `CartItem`
    entities. The second one, relating to `$product`, is the unidirectional one-to-one
    association. The reference is said to be unidirectional because `CartItem` references
    `Product`, while P`roduct` won't be referencing `CartItem`, as we do not want
    to change something that is part of another module.
  prefs: []
  type: TYPE_NORMAL
- en: 'We still need to go back to the `src/Foggyline/SalesBundle/Entity/SalesOrder.php`
    file and add the following to it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'We then need to update the database, so it pulls in the `SalesOrderItem` entity,
    by running the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: With the `SalesOrderItem` entity in place, we can go ahead and start building
    the cart and checkout pages.
  prefs: []
  type: TYPE_NORMAL
- en: Overriding the add_to_cart_url service
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `add_to_cart_url` service was originally declared in `FoggylineCustomerBundle`
    with dummy data. This is because we needed a way to build Add to Cart URLs on
    products before sales functionality was available. While certainly not ideal,
    it is one possible way of doing it.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now we are going to override that service with the one declared in our Sales
    module in order to provide correct Add to Cart URLs. We start off by defining
    the service within `src/Foggyline/SalesBundle/Resources/config/services.xml`,
    by adding the following service element under the services as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'We then create `src/Foggyline/SalesBundle/Service/AddToCartUrl.php` with content
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'The `router` service here expects the route named `foggyline_sales_cart_add`,
    which still does not exist. We create the route by adding the following entry
    under the `routes` element of the `src/Foggyline/SalesBundle/Resources/config/routing.xml`
    file as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'Route definition expects to find the `addAction` function within the cart controller
    in the `src/Foggyline/SalesBundle/Controller/CartController.php` file, which we
    define as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: There is quite a bit of logic going on here in the `addAction` method. We are
    first checking whether the current user already has a cart entry in the database;
    if not, we create a new one. We then add or update the existing cart item.
  prefs: []
  type: TYPE_NORMAL
- en: 'In order for our new `add_to_cart` service to actually override the one from
    the `Customer`module, we still need to add a compiler. We do so by defining the
    `src/Foggyline/SalesBundle/DependencyInjection/Compiler/OverrideServiceCompilerPass.php`file
    with content as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'Later on, we will add the rest of the overrides to this file. In order to tie
    things up for the moment, and make the `add_to_cart` service override kick in,
    we need to register the *compiler pass* within the `build` method of our `src/Foggyline/SalesBundle/FoggylineSalesBundle.php`
    file as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: The override should now be in effect, and our `Sales` module should now be providing
    valid Add to Cart links.
  prefs: []
  type: TYPE_NORMAL
- en: Overriding the checkout_menu service
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The checkout menu service defined in the `Customer` module has a simple purpose
    which is to provide a link to the cart and the first step of the checkout process.
    Since the Sales module was unknown at the time, the `Customer` module provided
    a dummy link, which we will now override.
  prefs: []
  type: TYPE_NORMAL
- en: 'We start by adding the following service entry under the `services` element
    of the `src/Foggyline/SalesBundle/Resources/config/services.xml` file as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'We then add the `src/Foggyline/SalesBundle/Service/CheckoutMenu.php` file with
    content as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'The service expects two routes, `foggyline_sales_cart` and `foggyline_sales_checkout`,
    so we need to amend the `src/Foggyline/SalesBundle/Resources/config/routing.xml`
    by file adding the following route definitions to it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'The newly added routes expect the `cart` and `checkout` controller. The `cart`
    controller is already in place, so we just need to add the `indexAction` to it.
    At this point, let''s just add an empty one as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'Similarly, let''s create a `src/Foggyline/SalesBundle/Controller/CheckoutController.php`
    file with content as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: Later on, we will revert back to these two `indexAction` methods and add proper
    method body implementations.
  prefs: []
  type: TYPE_NORMAL
- en: 'To conclude the service override, we now amend the previously created `src/Foggyline/SalesBundle/DependencyInjection/Compiler/OverrideServiceCompilerPass.php`
    file, by replacing the `// Override ''checkout_menu''` service comment with the
    following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: Our newly defined service should now override the one defined in the `Customer`
    module, thus providing the right checkout and cart (with items in the cart count)
    URL.
  prefs: []
  type: TYPE_NORMAL
- en: Overriding the customer orders service
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `foggyline_customer.customer_orders` service was to provide a collection
    of previously created orders for currently logged-in customers. The `Customer`
    module defined a dummy service for this purpose, just so we can move forward with
    building up the **My Orders** section under **My Account** page. We now need to
    override this service, making it return proper orders.
  prefs: []
  type: TYPE_NORMAL
- en: 'We start by adding the following `service` element under the services of the
    `src/Foggyline/SalesBundle/Resources/config/services.xml` file as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'We then add the `src/Foggyline/SalesBundle/Service/CustomerOrders.php` file
    with content as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: The `route generate` method expects to find two routes, `foggyline_sales_order_cancel`
    and `foggyline_sales_order_print`, which are not yet created.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s go ahead and create them by adding the following under the `route` element
    of the `src/Foggyline/SalesBundle/Resources/config/routing.xml` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'The routes definition, in turn, expects `SalesOrderController` to be defined.
    Since our application will require an admin user to be able to list and edit the
    orders, we will use the following Symfony command to auto-generate the CRUD for
    our `Sales Order`entity:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'When asked for the entity shortcut name, we simply provide `FoggylineSalesBundle:SalesOrder`
    and proceed, allowing for creation of write actions. At this point, several files
    have been created for us, as well as a few entries outside of the `Sales` bundle.
    One of these entries is the route definition within the `app/config/routing.yml`
    file, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: We should already have a `foggyline_sales` entry in there as well. The difference
    being that `foggyline_sales` points to our `router.xml` file and the newly created
    `foggyline_sales_sales_order` points to the exact newly created `SalesOrderController`.
    For the sake of simplicity, we can keep them both.
  prefs: []
  type: TYPE_NORMAL
- en: The auto-generator also created a `salesorder` directory under the `app/Resources/views/`
    directory, which we need to move over into our bundle as the `src/Foggyline/SalesBundle/Resources/views/Default/salesorder/`
    directory.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can now address our print and cancel actions by adding the following into
    the `src/Foggyline/SalesBundle/Controller/SalesOrderController.php` file as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: The `cancelAction` method merely checks whether the order in question belongs
    to the currently logged-in customer; if so, a change of order status is allowed.
    The `printAction` method merely loads the order if it belongs to the currently
    logged-in customer, and passes it on to a `print.html.twig` template.
  prefs: []
  type: TYPE_NORMAL
- en: 'We then create the `src/Foggyline/SalesBundle/Resources/views/Default/salesorder/print.html.twig`
    template with content as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: Obviously, this is just a simplified output, which we can further customize
    to our needs. The important bit is that we have passed along the `order` object
    to our template, and can now extract any piece of information needed from it.
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, we replace the `// Override ''foggyline_customer.customer_orders''`
    service comment within the `src/Foggyline/SalesBundle/DependencyInjection/Compiler/OverrideServiceCompilerPass.php`
    file with code as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: This will make the service override kick in, and pull in all of the changes
    we just made.
  prefs: []
  type: TYPE_NORMAL
- en: Overriding the bestsellers service
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `bestsellers` service defined in the `Customer` module was supposed to provide
    dummy data for the bestsellers feature shown on the homepage. The idea is to showcase
    five of the bestselling products in the store. The `Sales` module now needs to
    override this service in order to provide the right implementation, where actual
    sold product quantities will affect the content of the bestsellers shown.
  prefs: []
  type: TYPE_NORMAL
- en: 'We start off by adding the following definition under the `service` element
    of the `src/Foggyline/SalesBundle/Resources/config/services.xml` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: 'We then define the `src/Foggyline/SalesBundle/Service/BestSellers.php` file
    with content as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: 'Here, we are fetching the instance of the `SalesOrderItemRepository` class
    and calling the `getBestsellers` method on it. This method still has not been
    defined. We do so by adding it to file `src/Foggyline/SalesBundle/Repository/SalesOrderItemRepository.php`
    file as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: 'Here, we are using **Doctrine Query Language** (**DQL**) in order to build
    a list of the five bestselling products. Finally, we need to replace the `// Override
    ''bestsellers''` service comment from within the `src/Foggyline/SalesBundle/DependencyInjection/Compiler/OverrideServiceCompilerPass.php`
    file with code as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: By overriding the `bestsellers` service, we are exposing the actual sales-based
    list of bestselling products for other modules to fetch.
  prefs: []
  type: TYPE_NORMAL
- en: Creating the Cart page
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The cart page is where the customer gets to see a list of products added to
    the cart via **Add to Cart** buttons, from either the homepage, a category page,
    or a product page. We previously created `CartController` and an empty `indexAction`
    function. Now let''s go ahead and edit the `indexAction` function as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: 'Here, we are checking whether the user is logged in; if they are, we are showing
    them the cart with all their items. The non-logged-in user is redirected to a
    customer login URL. The `indexAction` function is expecting the `src/Foggyline/SalesBundle/Resources/views/Default/cart/index.html.twig`
    file, whose content we define as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: When rendered, the template will show quantity input elements under each added
    product, alongside the **Update Cart** button. The **Update Cart** button submits
    the form, whose action is pointing to the `foggyline_sales_cart_update` route.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s go ahead and create `foggyline_sales_cart_update`, by adding the following
    entry under the `route` element of the `src/Foggyline/SalesBundle/Resources/config/routing.xml`
    file as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: 'The newly defined route expects to find an `updateAction` function under the
    `src/Foggyline/SalesBundle/Controller/CartController.php` file, which we add as
    follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: To remove a product from the cart, we simply insert `0` as the quantity value
    and click the **Update Cart** button. This completes our simple cart page.
  prefs: []
  type: TYPE_NORMAL
- en: Creating the Payment service
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In order to move from cart to checkout, we need to sort out payment and shipment
    services. The previous `Payment` and `Shipment` modules exposed some of their
    `Payment` and `Shipment` services, which we now need to aggregate into a single
    `Payment` and `Shipment` service that our checkout process will use.
  prefs: []
  type: TYPE_NORMAL
- en: 'We start by replacing the previously added `// Pickup/parse ''payment_method''`
    services comment under the `src/Foggyline/SalesBundle/DependencyInjection/Compiler/OverrideServiceCompilerPass.php`
    file with code as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: The `findTaggedServiceIds` method returns a key-value list of all the services
    tagged with `payment_method`, which we then pass on as argument to our `foggyline_sales.payment`
    service. This is the only way to fetch the list of services in Symfony during
    the compilation time.
  prefs: []
  type: TYPE_NORMAL
- en: 'We then edit the `src/Foggyline/SalesBundle/Resources/config/services.xml`
    file by adding the following under the `service` element:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, we create the `Payment` class under the `src/Foggyline/SalesBundle/Service/Payment.php`
    file as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: In compliance with the service definition in the `services.xml` file, our service
    accepts two parameters, one being `$container` and the second one being `$methods`.
    The `$methods` argument is passed during compilation time, where we are able to
    fetch a list of all the `payment_method` tagged services. This effectively means
    our `getAvailableMethods` is now capable of returning all `payment_method` tagged
    services, from any module.
  prefs: []
  type: TYPE_NORMAL
- en: Creating the Shipment service
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `Shipment` service is implemented much like the `Payment` service. The
    overall idea is similar, with merely a few differences along the way. We start
    by replacing the previously added `// Pickup/parse shipment_method''` services
    comment under the `src/Foggyline/SalesBundle/DependencyInjection/Compiler/OverrideServiceCompilerPass.php`
    file with code as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: 'We then edit the `src/Foggyline/SalesBundle/Resources/config/services.xml`
    file by adding the following under the `service` element:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, we create the `Shipment` class under the `src/Foggyline/SalesBundle/Service/Shipment.php`
    file as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: We are now able to fetch all the `Payment` and `Shipment` services via our unified
    `Payment` and `Shipment` service, thus making the checkout process easy.
  prefs: []
  type: TYPE_NORMAL
- en: Creating the Checkout page
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The checkout page will be constructed out of two checkout steps, the first one
    being shipment information gathering, and the second one being payment information
    gathering.
  prefs: []
  type: TYPE_NORMAL
- en: 'We start off with a shipment step, by changing our `src/Foggyline/SalesBundle/Controller/CheckoutController.php`
    file and its `indexAction` as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: Here, we are fetching the currently logged-in customer cart and passing it onto
    a `checkout/index.html.twig` template, alongside several other variables needed
    for the shipment step. The `getAddressForm` method simply builds an address form
    for us. There is also a call toward our newly created the `foggyline_sales.shipment`
    service, which enables us to fetch a list of all available shipment methods.
  prefs: []
  type: TYPE_NORMAL
- en: 'We then create `src/Foggyline/SalesBundle/Resources/views/Default/checkout/index.html.twig`
    with content as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: The template lists all of the address-related form fields, alongside available
    shipment methods. The JavaScript part handles the **Next** button click, which
    basically submits the form to the `foggyline_sales_checkout_payment` route.
  prefs: []
  type: TYPE_NORMAL
- en: 'We then define the `foggyline_sales_checkout_payment` route by adding the following
    entry under the `routes` element of the `src/Foggyline/SalesBundle/Resources/config/routing.xml`
    file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: 'The route entry expects to find a `paymentAction` within `CheckoutController`,
    which we define as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: The preceding code fetches the submission made from the shipment step of the
    checkout process, stores the relevant values into the session, fetches the variables
    required for the payment step and renders back the `checkout/payment.html.twig`
    template.
  prefs: []
  type: TYPE_NORMAL
- en: 'We define the `src/Foggyline/SalesBundle/Resources/views/Default/checkout/payment.html.twig`
    file with content as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: 'Similar to the shipment step, we have a rendering of available payment methods
    here, alongside a **Place Order** button which is handled by JavaScript as the
    button is located outside of the submission form. Once an order is placed, the
    POST submission is made onto the `foggyline_sales_checkout_process` route, which
    we defined under the `routes` element of the `src/Foggyline/SalesBundle/Resources/config/routing.xml`
    file as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: 'The route points to the `processAction` function within `CheckoutController`,
    which we define as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: Once the POST submission hits the controller, a new order with all of the related
    items gets created. At the same time, the cart and cart items are cleared. Finally,
    the customer is redirected to the order success page.
  prefs: []
  type: TYPE_NORMAL
- en: Creating the order success page
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The order success page has an important role in full-blown web shop applications.
    This is where we get to thank the customer for their purchase and possibly present
    some more related or cross-related shopping options, alongside some optional discounts.
    Though our application is simple, it's worth building a simple order success page.
  prefs: []
  type: TYPE_NORMAL
- en: 'We start by adding the following route definition under the `routes` element
    of the `src/Foggyline/SalesBundle/Resources/config/routing.xml` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: 'The route points to a `successAction` function within `CheckoutController`,
    which we define as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: 'Here, we are simply fetching the last created order ID for the currently logged-in
    customer and passing the full order object to the `src/Foggyline/SalesBundle/Resources/views/Default/checkout/success.html.twig`
    template as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs: []
  type: TYPE_PRE
- en: With this, we finalize the entire checkout process for our web shop. Though
    it is an absolutely simplistic one, it sets the foundation for more robust implementations.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a store manager dashboard
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Now that we have finalized the checkout `Sales` module, let's revert quickly
    to our core module, `AppBundle`. As per our application requirements, let's go
    ahead and create a simple store manager dashboard.
  prefs: []
  type: TYPE_NORMAL
- en: 'We start by adding the `src/AppBundle/Controller/StoreManagerController.php`
    file with content as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs: []
  type: TYPE_PRE
- en: 'The `indexAction` function simply returns the `src/AppBundle/Resources/views/default/store_manager.html.twig`
    file, whose content we define as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs: []
  type: TYPE_PRE
- en: The template merely renders the category, product, customer, and order management
    links. The actual access to these links is controlled by the firewall, as explained
    in previous chapters.
  prefs: []
  type: TYPE_NORMAL
- en: Unit testing
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `Sales` module is far more robust than any of the previous modules. There
    are several things we can unit test. However, we won't be covering full unit testing
    as part of this chapter. We will simply turn our attention to a single unit test,
    the one for the `CustomerOrders` service.
  prefs: []
  type: TYPE_NORMAL
- en: 'We start off by adding the following line under the `testsuites` element of
    our `phpunit.xml.dist` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs: []
  type: TYPE_PRE
- en: With that in place, running the `phpunit` command from the root of our shop
    should pick up any test we have defined under the `src/Foggyline/SalesBundle/Tests/`
    directory.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, let''s go ahead and create a test for our `CustomerOrders` service. We
    do so by defining the `src/Foggyline/SalesBundle/Tests/Service/CustomerOrdersTest.php`
    file with content as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs: []
  type: TYPE_PRE
- en: Here, we are using the `UsernamePasswordToken` function in order to simulate
    a customer login. The password token is then passed on to the `CustomerOrders`
    service. The `CustomerOrders` service then internally checks whether token storage
    has a token assigned, flagging it as a logged-in user and returning the list of
    its orders. Being able to simulate customer login is essential for any other tests
    we might be writing for our sales module.
  prefs: []
  type: TYPE_NORMAL
- en: Functional testing
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Similar to unit testing, we will only focus on a single functional test, as
    doing anything more robust would be out of the scope of this chapter. We will
    write a simple code that adds a product to the cart and accesses the checkout
    page. In order to add an item to the cart, here we also need to simulate the user
    login.
  prefs: []
  type: TYPE_NORMAL
- en: 'We write the `src/Foggyline/SalesBundle/Tests/Controller/CartControllerTest.php`
    test as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE63]'
  prefs: []
  type: TYPE_PRE
- en: Once run, the test will simulate the customer login, add an item to the cart,
    and try to access the checkout page. Depending on the actual customers we have
    in our database, we might need to change the customer e-mail provided in the preceding
    test.
  prefs: []
  type: TYPE_NORMAL
- en: Running the `phpunit` command now should successfully execute our tests.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we built a simple yet functional `Sales` module. With just
    four simple entities (`Cart`, `CartItem`, `SalesOrder`, and `SalesOrderItem`),
    we managed to implement simple cart and checkout features. By doing so, we empowered
    customers to actually make a purchase, instead of just browsing the product catalog.
    The sales module made use of the payment and shipment services defined in previous
    chapters. While the payment and shipment services are implemented as imaginary,
    dummy ones, they do provide a basic skeleton that we can use for real payment
    and shipment API implementations.
  prefs: []
  type: TYPE_NORMAL
- en: Furthermore, in this chapter, we addressed the admin dashboard, by making a
    simple interface that merely aggregates a few of the existing CRUD interfaces.
    Access to the dashboard and the management links is protected by entries in `app/config/security.yml`,
    and allowed only for `ROLE_ADMIN`.
  prefs: []
  type: TYPE_NORMAL
- en: Together, the modules written so far make up a simplified application. Writing
    robust web shop applications would normally include tens of other features found
    in modern e-commerce platforms such as Magento. These include multiple language,
    currency, and website support; robust category, product, and product inventory
    management; shopping cart and catalog sales rules; and many others. Modularizing
    our application makes development and maintenance processes easier.
  prefs: []
  type: TYPE_NORMAL
- en: Moving forward, in the final chapter, we will look into distributing our modules.
  prefs: []
  type: TYPE_NORMAL
