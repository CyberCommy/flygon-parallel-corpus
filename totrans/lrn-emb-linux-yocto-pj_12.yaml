- en: Chapter 12. Virtualization
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you will be presented with information about various concepts
    that appeared in the Linux virtualization section. As some of you might know,
    this subject is quite vast and selecting only a few components to be explained
    is also a challenge. I hope my decision would please most of you interested in
    this area. The information available in this chapter might not fit everyone's
    need. For this purpose, I have attached multiple links for more detailed descriptions
    and documentation. As always, I encourage you to start reading and finding out
    more, if necessary. I am aware that I cannot put all the necessary information
    in only a few words.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
- en: In any Linux environment today, Linux virtualization is not a new thing. It
    has been available for more than ten years and has advanced in a really quick
    and interesting manner. The question now does not revolve around virtualization
    as a solution for me, but more about what virtualization solutions to deploy and
    what to virtualize.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
- en: There are, of course, scenarios in which virtualization is not a solution. In
    embedded Linux, there are a large category of domains for which virtualization
    does not apply, mostly because some workloads are a better fit on top of hardware.
    However, for others that do not have these kind of requirements, there are quite
    a few advantages to using virtualization. More information about the various virtualization
    strategies, cloud computing, and other related topics will be discussed in this
    chapter, so let's have a look.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
- en: Linux virtualization
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The first benefit everyone sees when looking at virtualization is the increase
    in server utilization and the decrease in energy costs. Using virtualization,
    the workloads available on a server are maximized, which is very different from
    scenarios where hardware uses only a fraction of the computing power. It can reduce
    the complexity of interaction with various environments and it also offers an
    easier-to-use management system. Today, working with a large number of virtual
    machines is not as complicated as interaction with a few of them because of the
    scalability most tools offer. Also, the time of deployment has really decreased.
    In a matter of minutes, you can deconfigure and deploy an operating system template
    or create a virtual environment for a virtual appliance deploy.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
- en: One other benefit virtualization brings is flexibility. When a workload is just
    too big for allocated resources, it can be easily duplicated or moved on another
    environment that suit its needs better on the same hardware or on a more potent
    server. For a cloud-based solution regarding this problem, the sky is the limit
    here. The limit may be imposed by the cloud type on the basis of whether there
    are tools available for a host operating system.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
- en: Over time, Linux was able to provide a number of great choices for every need
    and organization. Whether your task involves server consolidation in an enterprise
    data centre, or improving a small nonprofit infrastructure, Linux should have
    a virtualization platform for your needs. You simply need to figure out where
    and which project you should chose.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
- en: Virtualization is extensive, mainly because it contains a broad range of technologies,
    and also since large portions of the terms are not well defined. In this chapter,
    you will be presented with only components related to the Yocto Project and also
    to a new initiative that I personally am interested in. This initiative tries
    to make **Network Function Virtualization** (**NFV**) and **Software-Defined Networking**
    (**SDN**) a reality and is called **Open Platform for NFV** (**OPNFV**). It will
    be explained here briefly.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
- en: SDN and NFV
  id: totrans-9
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: I have decided to start with this topic because I believe it is really important
    that all the research done in this area is starting to get traction with a number
    of open source initiatives from all sorts of areas and industries. Those two concepts
    are not new. They have been around for 20 years since they were first described,
    but the last few years have made possible it for them to resurface as real and
    very possible implementations. The focus of this section will be on the *NFV*
    section since it has received the most amount of attention, and also contains
    various implementation proposals.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 我决定从这个话题开始，因为我相信这个领域的所有研究都开始得到各种领域和行业的开源倡议的支持，这是非常重要的。这两个概念并不新。它们自20年前首次被描述以来就存在，但过去几年使它们有可能重新出现为真实而非常可能的实现。本节的重点将放在*NFV*部分，因为它受到了最多的关注，并包含了各种实施提议。
- en: NFV
  id: totrans-11
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: NFV
- en: NFV is a network architecture concept used to virtualize entire categories of
    network node functions into blocks that can be interconnected to create communication
    services. It is different from known virtualization techniques. It uses **Virtual
    Network Functions** (**VNF**) that can be contained in one or more virtual machines,
    which execute different processes and software components available on servers,
    switches, or even a cloud infrastructure. A couple of examples include virtualized
    load balancers, intrusion detected devices, firewalls, and so on.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: NFV是一种网络架构概念，用于将整个网络节点功能虚拟化为可以相互连接以创建通信服务的块。它不同于已知的虚拟化技术。它使用**虚拟网络功能**（**VNF**），可以包含在一个或多个虚拟机中，执行不同的进程和软件组件，可用于服务器、交换机甚至云基础设施。一些例子包括虚拟化负载均衡器、入侵检测设备、防火墙等。
- en: The development product cycles in the telecommunication industry were very rigorous
    and long due to the fact that the various standards and protocols took a long
    time until adherence and quality meetings. This made it possible for fast moving
    organizations to become competitors and made them change their approach.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 由于各种标准和协议需要很长时间才能达到一致性和质量，电信行业的产品开发周期非常严格和漫长。这使得快速发展的组织有可能成为竞争对手，并迫使它们改变自己的方法。
- en: In 2013, an industry specification group published a white paper on software-defined
    networks and OpenFlow. The group was part of **European Telecommunications Standards
    Institute** (**ETSI**) and was called Network Functions Virtualisation. After
    this white paper was published, more in-depth research papers were published,
    explaining things ranging from terminology definitions to various use cases with
    references to vendors that could consider using NFV implementations.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 2013年，一个行业规范组发布了一份关于软件定义网络和OpenFlow的白皮书。该组是**欧洲电信标准化协会**（**ETSI**）的一部分，被称为网络功能虚拟化。在这份白皮书发布后，还发布了更深入的研究论文，从术语定义到各种使用案例，都有参考供应商可以考虑使用NFV实现。
- en: ETSI NFV
  id: totrans-15
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: ETSI NFV
- en: The ETSI NFV workgroup has appeared useful for the telecommunication industry
    to create more agile cycles of development and also make it able to respond in
    time to any demands from dynamic and fast changing environments. SDN and NFV are
    two complementary concepts that are key enabling technologies in this regard and
    also contain the main ingredients of the technology that are developed by both
    telecom and IT industries.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: ETSI NFV工作组对电信行业非常有用，可以创建更灵活的开发周期，并且能够及时响应来自动态和快速变化环境的需求。SDN和NFV是两个互补的概念，在这方面是关键的启用技术，并包含了电信和IT行业共同开发的主要技术要素。
- en: 'The NFV framework consist of six components:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: NFV框架包括六个组件：
- en: '**NFV Infrastructure (NFVI)**: It is required to offer support to a variety
    of use cases and applications. It comprises of the totality of software and hardware
    components that create the environment for which VNF is deployed. It is a multitenant
    infrastructure that is responsible for the leveraging of multiple standard virtualization
    technologies use cases at the same time. It is described in the following **NFV
    Industry Specification Groups** (**NFV ISG**) documents:'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**NFV基础设施（NFVI）**：它需要支持各种用例和应用。它包括为部署VNF创建环境的软件和硬件组件的总体。它是一个多租户基础设施，负责同时利用多种标准虚拟化技术用例。它在以下**NFV行业规范组**（**NFV
    ISG**）文件中有描述：'
- en: NFV Infrastructure Overview
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: NFV基础设施概述
- en: NFV Compute
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: NFV计算
- en: NFV Hypervisor Domain
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: NFV虚拟化程序域
- en: NFV Infrastructure Network Domain
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: NFV基础设施网络域
- en: The following image presents a visual graph of various use cases and fields
    of application for the NFV Infrastructure.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 以下图片展示了NFV基础设施的各种用例和应用领域的可视化图表。
- en: '![ETSI NFV](img/image00374.jpeg)'
  id: totrans-24
  prefs: []
  type: TYPE_IMG
  zh: '![ETSI NFV](img/image00374.jpeg)'
- en: '**NFV Management and Orchestration (MANO)**: It is the component responsible
    for the decoupling of the compute, networking, and storing components from the
    software implementation with the help of a virtualization layer. It requires the
    management of new elements and the orchestration of new dependencies between them,
    which require certain standards of interoperability and a certain mapping.'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**NFV管理和编排（MANO）**：它是负责将计算、网络和存储组件与软件实现分离的组件，借助虚拟化层。它需要管理新元素和编排它们之间的新依赖关系，这需要一定的互操作性标准和一定的映射。'
- en: '**NFV Software Architecture**: It is related to the virtualization of the already
    implemented network functions, such as proprietary hardware appliances. It implies
    the understanding and transition from a hardware implementation into a software
    one. The transition is based on various defined patterns that can be used in a
    process.'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**NFV软件架构**：它涉及已实施的网络功能的虚拟化，如专有硬件设备。它意味着从硬件实施到软件实施的理解和过渡。过渡基于可以在过程中使用的各种定义的模式。'
- en: '**NFV Reliability and Availability**: These are real challenges and the work
    involved in these components started from the definition of various problems,
    use cases, requirements, and principles, and it has proposed itself to offer the
    same level of availability as legacy systems. It relates to the reliability component
    and the documentation only sets the stage for future work. It only identifies
    various problems and indicates the best practices used in designing resilient
    NFV systems.'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**NFV可靠性和可用性**：这些是真正的挑战，这些组件的工作始于各种问题、用例、需求和原则的定义，并且它提出要提供与传统系统相同水平的可用性。它涉及可靠性组件，文档只是为未来的工作奠定基础。它只确定了各种问题，并指出了在设计具有弹性的NFV系统中使用的最佳实践。'
- en: '**NFV Performance and Portability**: The purpose of NFV, in general, is to
    transform the way it works with networks of future. For this purpose, it needs
    to prove itself as wordy solution for industry standards. This section explains
    how to apply the best practices related to performance and portability in a general
    VNF deployment.'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**NFV性能和可移植性**：总体而言，NFV的目的是改变未来网络的工作方式。为此，它需要证明自己是行业标准的解决方案。本节解释了如何在一般VNF部署中应用与性能和可移植性相关的最佳实践。'
- en: '**NFV Security**: Since it is a large component of the industry, it is concerned
    about and also dependent on the security of networking and cloud computing, which
    makes it critical for NFV to assure security. The Security Expert Group focuses
    on those concerns.'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**NFV安全性**：由于它是行业的一个重要组成部分，因此它关注并且也依赖于网络和云计算的安全性，这使得确保NFV安全性至关重要。安全专家组专注于这些问题。'
- en: 'An architectural of these components is presented here:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 这些组件的架构如下所示：
- en: '![ETSI NFV](img/image00375.jpeg)'
  id: totrans-31
  prefs: []
  type: TYPE_IMG
  zh: '![ETSI NFV](img/image00375.jpeg)'
- en: After all the documentation is in place, a number of proof of concepts need
    to be executed in order to test the limitation of these components and accordingly
    adjust the theoretical components. They have also appeared to encourage the development
    of the NFV ecosystem.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 在所有文档就位之后，需要执行一些概念验证，以测试这些组件的限制，并相应地调整理论组件。它们还出现鼓励NFV生态系统的发展。
- en: Note
  id: totrans-33
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'For more information about the available roof of concepts and specifications
    for NFV, refer to these links: [http://www.etsi.org/technologies-clusters/technologies/nfv/nfv-poc?tab=2](http://www.etsi.org/technologies-clusters/technologies/nfv/nfv-poc?tab=2)
    and [http://www.etsi.org/technologies-clusters/technologies/nfv](http://www.etsi.org/technologies-clusters/technologies/nfv).'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 有关NFV可用概念和规范的更多信息，请参考以下链接：[http://www.etsi.org/technologies-clusters/technologies/nfv/nfv-poc?tab=2](http://www.etsi.org/technologies-clusters/technologies/nfv/nfv-poc?tab=2)
    和 [http://www.etsi.org/technologies-clusters/technologies/nfv](http://www.etsi.org/technologies-clusters/technologies/nfv)。
- en: SDN
  id: totrans-35
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: SDN
- en: '**Software-Defined Networking** (**SDN**) is an approach to networking that
    offers the possibility to manage various services using the abstraction of available
    functionalities to administrators. This is realized by decoupling the system into
    a control plane and data plane and making decisions based on the network traffic
    that is sent; this represents the control plane realm, and where the traffic is
    forwarded is represented by the data plane. Of course, some method of communication
    between the control and data plane is required, so the OpenFlow mechanism entered
    into the equation at first; however other components could as well take its place.'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: '**软件定义网络**（**SDN**）是一种网络方法，通过将可用功能的抽象提供给管理员，实现了管理各种服务的可能性。这是通过将系统分离为控制平面和数据平面，并根据发送的网络流量做出决策来实现的；这代表了控制平面领域，而数据平面代表了流量的转发位置。当然，控制平面和数据平面之间需要一种通信方法，因此OpenFlow机制首先进入了方程式；然而其他组件也可以取代它。'
- en: 'The intention of SDN was to offer an architecture that was manageable, cost-effective,
    adaptable, and dynamic, as well as suitable for the dynamic and high-bandwidth
    scenarios that are available today. The OpenFlow component was the foundation
    of the SDN solution. The SDN architecture permitted the following:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: SDN的目的是提供一种可管理、成本效益高、适应性强、动态的架构，以及适用于当今动态和高带宽场景的解决方案。OpenFlow组件是SDN解决方案的基础。SDN架构允许以下内容：
- en: '**Direct programming**: The control plane is directly programmable because
    it is completely decoupled by the data plane.'
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**直接编程**：控制平面是直接可编程的，因为它完全与数据平面分离。'
- en: '**Programmatically configuration**: SDN permitted management, configuration,
    and optimization of resources though programs. These programs could also be written
    by anyone because they were not dependent on any proprietary components.'
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**可编程配置**：SDN允许通过程序对资源进行管理、配置和优化。这些程序可以由任何人编写，因为它们不依赖于任何专有组件。'
- en: '**Agility**: The abstraction between two components permitted the adjustment
    of network flows according to the needs of a developer.'
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**灵活性**：两个组件之间的抽象允许根据开发人员的需求调整网络流量。'
- en: '**Central management**: Logical components could be centered on the control
    plane, which offered a viewpoint of a network to other applications, engines,
    and so on.'
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**中央管理**：逻辑组件可以集中在控制平面上，为其他应用程序、引擎等提供了一个网络视图。'
- en: '**Opens standards and vendor neutrality**: It is implemented using open standards
    that have simplified the SDN design and operations because of the number of instructions
    provided to controllers. This is smaller compared to other scenarios in which
    multiple vendor-specific protocols and devices should be handled.'
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**开放标准和供应商中立性**：它使用开放标准实施，这简化了SDN的设计和操作，因为控制器提供的指令数量较少。这与其他情况相比要小得多，在其他情况下，需要处理多个供应商特定的协议和设备。'
- en: Also, meeting market requirements with traditional solutions would have been
    impossible, taking into account newly emerging markets of mobile device communication,
    Internet of Things (IoT), Machine to Machine (M2M), Industry 4.0, and others,
    all require networking support. Taking into consideration the available budgets
    for further development in various IT departments, were all faced to make a decision.
    It seems that the mobile device communication market all decided to move toward
    open source in the hope that this investment would prove its real capabilities,
    and would also lead to a brighter future.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
- en: OPNFV
  id: totrans-44
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The Open Platform for the NFV Project tries to offer an open source reference
    platform that is carrier-graded and tightly integrated in order to facilitate
    industry peers to help improve and move the NFV concept forward. Its purpose is
    to offer consistency, interoperability, and performance among numerous blocks
    and projects that already exist. This platform will also try to work closely with
    a variety of open source projects and continuously help with integration, and
    at the same time, fill development gaps left by any of them.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
- en: This project is expected to lead to an increase in performance, reliability,
    serviceability, availability, and power efficiency, but at the same time, also
    deliver an extensive platform for instrumentation. It will start with the development
    of an NFV infrastructure and a virtualized infrastructure management system where
    it will combine a number of already available projects. Its reference system architecture
    is represented by the x86 architecture.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
- en: 'The project''s initial focus point and proposed implementation can be consulted
    in the following image. From this image, it can be easily seen that the project,
    although very young since it was started in November 2014, has had an accelerated
    start and already has a few implementation propositions. There are already a number
    of large companies and organizations that have started working on their specific
    demos. OPNFV has not waited for them to finish and is already discussing a number
    of proposed project and initiatives. These are intended both to meet the needs
    of their members as well as assure them of the reliability various components,
    such as continuous integration, fault management, test-bed infrastructure, and
    others. The following figure describes the structure of OPNFV:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
- en: '![OPNFV](img/image00376.jpeg)'
  id: totrans-48
  prefs: []
  type: TYPE_IMG
- en: The project has been leveraging as many open source projects as possible. All
    the adaptations made to these project can be done in two places. Firstly, they
    can be made inside the project, if it does not require substantial functionality
    changes that could cause divergence from its purpose and roadmap. The second option
    complements the first and is necessary for changes that do not fall in the first
    category; they should be included somewhere in the OPNFV project's codebase. None
    of the changes that have been made should be up streamed without proper testing
    within the development cycle of OPNFV.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
- en: Another important element that needs to be mentioned is that OPNFV does not
    use any specific or additional hardware. It only uses available hardware resources
    as long the VI-Ha reference point is supported. In the preceding image, it can
    be seen that this is already done by having providers, such as Intel for the computing
    hardware, NetApp for storage hardware, and Mellanox for network hardware components.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
- en: The OPNFV board and technical steering committee have a quite large palette
    of open source projects. They vary from **Infrastructure as a Service** (**IaaS**)
    and hypervisor to the SDN controller and the list continues. This only offers
    the possibility for a large number of contributors to try some of the skills that
    maybe did not have the time to work on, or wanted to learn but did not have the
    opportunity to. Also, a more diversified community offers a broader view of the
    same subject.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
- en: 'There are a large variety of appliances for the OPNFV project. The virtual
    network functions are diverse for mobile deployments where mobile gateways (such
    as Serving Gateway (SGW), Packet Data Network Gateway (PGW), and so on) and related
    functions (Mobility Management Entity (MME) and gateways), firewalls or application-level
    gateways and filters (web and e-mail traffic filters) are used to test diagnostic
    equipment (Service-Level Agreement (SLA) monitoring). These VNF deployments need
    to be easy to operate, scale, and evolve independently from the type of VNF that
    is deployed. OPNFV sets out to create a platform that has to support a set of
    qualities and use-cases as follows:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: OPNFV项目有各种各样的设备。移动部署的虚拟网络功能多种多样，其中移动网关（如Serving Gateway（SGW）、Packet Data Network
    Gateway（PGW）等）和相关功能（Mobility Management Entity（MME）和网关）、防火墙或应用级网关和过滤器（Web和电子邮件流量过滤器）用于测试诊断设备（服务级别协议（SLA）监控）。这些VNF部署需要易于操作、扩展，并且可以独立于部署的VNF类型进行演进。OPNFV旨在创建一个平台，支持以下一系列特性和用例：
- en: A common mechanism is needed for the life-cycle management of VNFs, which include
    deployment, instantiation, configuration, start and stop, upgrade/downgrade, and
    final decommissioning
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 需要一种常见的机制来管理VNF的生命周期，包括部署、实例化、配置、启动和停止、升级/降级以及最终的取消
- en: A consistent mechanism is used to specify and interconnect VNFs, VNFCs, and
    PNFs; these are independant of the physical network infrastructure, network overlays,
    and so on, that is, a virtual link
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用一种一致的机制来指定和互连VNF、VNFC和PNF；这些与物理网络基础设施、网络覆盖等无关，即虚拟链路
- en: A common mechanism is used to dynamically instantiate new VNF instances or decommission
    sufficient ones to meet the current performance, scale, and network bandwidth
    needs
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用一种常见的机制来动态实例化新的VNF实例或取消足够的实例以满足当前的性能、规模和网络带宽需求
- en: A mechanism is used to detect faults and failure in the NFVI, VIM, and other
    components of an infrastructure as well as recover from these failures
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用一种机制来检测NFVI、VIM和基础设施的其他组件中的故障和失败，并从这些故障中恢复
- en: A mechanism is used to source/sink traffic from/to a physical network function
    to/from a virtual network function
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用一种机制从/向虚拟网络功能源/接收流量到/从物理网络功能
- en: NFVI as a Service is used to host different VNF instances from different vendors
    on the same infrastructure
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: NFVI作为服务用于在同一基础设施上托管来自不同供应商的不同VNF实例
- en: 'There are some notable and easy-to-grasp use case examples that should be mentioned
    here. They are organized into four categories. Let''s start with the first category:
    the Residential/Access category. It can be used to virtualize the home environment
    but it also provides fixed access to NFV. The next one is data center: it has
    the virtualization of CDN and provides use cases that deal with it. The mobile
    category consists of the virtualization of mobile core networks and IMS as well
    as the virtualization of mobile base stations. Lastly, there are cloud categories
    that include NFVIaaS, VNFaaS, the VNF forwarding graph (Service Chains), and the
    use cases of VNPaaS.'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 这里应该提到一些显著且易于理解的用例示例。它们分为四类。让我们从第一类开始：住宅/接入类。它可以用于虚拟化家庭环境，但也提供对NFV的固定访问。接下来是数据中心：它具有CDN的虚拟化，并提供处理它的用例。移动类别包括移动核心网络和IMS的虚拟化，以及移动基站的虚拟化。最后，有云类别，包括NFVIaaS、VNFaaS、VNF转发图（服务链）以及VNPaaS的用例。
- en: Note
  id: totrans-60
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: More information about this project and various implementation components is
    available at [https://www.opnfv.org/](https://www.opnfv.org/). For the definitions
    of missing terminologies, please consult [http://www.etsi.org/deliver/etsi_gs/NFV/001_099/003/01.02.01_60/gs_NFV003v010201p.pdf](http://www.etsi.org/deliver/etsi_gs/NFV/001_099/003/01.02.01_60/gs_NFV003v010201p.pdf).
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 有关该项目和各种实施组件的更多信息，请访问[https://www.opnfv.org/](https://www.opnfv.org/)。有关缺失术语的定义，请参阅[http://www.etsi.org/deliver/etsi_gs/NFV/001_099/003/01.02.01_60/gs_NFV003v010201p.pdf](http://www.etsi.org/deliver/etsi_gs/NFV/001_099/003/01.02.01_60/gs_NFV003v010201p.pdf)。
- en: Virtualization support for the Yocto Project
  id: totrans-62
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Yocto Project的虚拟化支持
- en: 'The `meta-virtualization` layer tries to create a long and medium term production-ready
    layer specifically for an embedded virtualization. This roles that this has are:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: '`meta-virtualization`层试图创建一个长期和中期的、专门用于嵌入式虚拟化的生产就绪层。它的作用是：'
- en: Simplifying the way collaborative benchmarking and researching is done with
    tools, such as KVM/LxC virtualization, combined with advance core isolation and
    other techniques
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 简化协作基准测试和研究的方式，使用KVM/LxC虚拟化等工具，结合先进的核心隔离和其他技术
- en: Integrating and contributing with projects, such as OpenFlow, OpenvSwitch, LxC,
    dmtcp, CRIU and others, which can be used with other components, such as OpenStack
    or Carrier Graded Linux.
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 集成和贡献项目，如OpenFlow、OpenvSwitch、LxC、dmtcp、CRIU等，这些项目可以与其他组件一起使用，如OpenStack或Carrier
    Graded Linux。
- en: To summarize this in one sentence, this layer tries to provide support while
    constructing OpenEmbedded and Yocto Project-based virtualized solutions.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 简而言之，这一层试图在构建基于OpenEmbedded和Yocto Project的虚拟化解决方案时提供支持。
- en: 'The packages that are available in this layer, which I will briefly talk about
    are as follows:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 我将简要讨论的这一层中可用的软件包如下：
- en: '`CRIU`'
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`CRIU`'
- en: '`Docker`'
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Docker`'
- en: '`LXC`'
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`LXC`'
- en: '`Irqbalance`'
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Irqbalance`'
- en: '`Libvirt`'
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Libvirt`'
- en: '`Xen`'
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Xen`'
- en: '`Open vSwitch`'
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Open vSwitch`'
- en: 'This layer can be used in conjunction with the `meta-cloud-services` layer
    that offer cloud agents and API support for various cloud-based solutions. In
    this section, I am referring to both these layers because I think it is fit to
    present these two components together. Inside the `meta-cloud-services` layer,
    there are also a couple of packages that will be discussed and briefly presented,
    as follows:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 这一层可以与提供各种云解决方案的云代理和API支持的`meta-cloud-services`层一起使用。在这一部分，我提到这两个层，因为我认为一起呈现这两个组件是合适的。在`meta-cloud-services`层中，还有一些将被讨论和简要介绍的软件包，如下所示：
- en: '`openLDAP`'
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`openLDAP`'
- en: '`SPICE`'
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`SPICE`'
- en: '`Qpid`'
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Qpid`'
- en: '`RabbitMQ`'
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`RabbitMQ`'
- en: '`Tempest`'
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 风暴
- en: '`Cyrus-SASL`'
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Cyrus-SASL`'
- en: '`Puppet`'
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Puppet`'
- en: '`oVirt`'
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`oVirt`'
- en: '`OpenStack`'
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`OpenStack`'
- en: 'Having mentioned these components, I will now move on with the explanation
    of each of these tools. Let''s start with the content of the meta-virtualization
    layer, more exactly with `CRIU` package, a project that implements **Checkpoint/Restore
    In Userspace** for Linux. It can be used to freeze an already running application
    and checkpoint it to a hard drive as a collection of files. These checkpoints
    can be used to restore and execute the application from that point. It can be
    used as part of a number of use cases, as follows:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 提到了这些组件，我现在将继续解释每个工具。让我们从元虚拟化层的内容开始，更确切地说是`CRIU`软件包，这是一个为Linux实现**用户空间中的检查点/恢复**的项目。它可以用于冻结已经运行的应用程序，并将其检查点到硬盘上作为一组文件。这些检查点可以用于从该点恢复和执行应用程序。它可以作为许多用例的一部分使用，如下所示：
- en: '**Live migration of containers**: It is the primary use case for a project.
    The container is check pointed and the resulting image is moved into another box
    and restored there, making the whole experience almost unnoticeable by the user.'
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**容器的实时迁移**：这是该项目的主要用例。容器被检查点，生成的镜像被移动到另一个盒子中并在那里恢复，使整个体验对用户几乎是不可察觉的。'
- en: '**Upgrading seamless kernels**: The kernel replacement activity can be done
    without stopping activities. It can be check pointed, replaced by calling kexec,
    and all the services can be restored afterwards.'
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**无缝升级内核**：内核替换活动可以在不停止活动的情况下进行。它可以被检查点，通过调用kexec替换，并且所有服务可以在之后恢复。'
- en: '**Speeding up slow boot services**: It is a service that has a slow boot procedure,
    can be check pointed after the first start up is finished, and for consecutive
    starts, can be restored from that point.'
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**加快启动速度慢的服务**：对于启动过程缓慢的服务，可以在第一次启动完成后进行检查点，并在后续启动时从该点恢复。'
- en: '**Load balancing of networks**: It is a part of the `TCP_REPAIR` socket option
    and switches the socket in a special state. The socket is actually put into the
    state expected from it at the end of the operation. For example, if `connect()`
    is called, the socket will be put in an `ESTABLISHED` state as requested without
    checking for acknowledgment of communication from the other end, so offloading
    could be at the application level.'
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**网络负载均衡**：它是`TCP_REPAIR`套接字选项的一部分，并将套接字切换到特殊状态。实际上，套接字被放置在操作结束时所期望的状态中。例如，如果调用`connect()`，则套接字将被放置在所请求的`ESTABLISHED`状态中，而不会检查来自另一端的通信确认，因此卸载可以在应用程序级别进行。'
- en: '**Desktop environment suspend/resume**: It is based on the fact that the suspend/restore
    action for a screen session or an `X` application is by far faster than the close/open
    operation.'
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**桌面环境的挂起/恢复**：它基于这样一个事实，即屏幕会话或`X`应用程序的挂起/恢复操作比关闭/打开操作要快得多。'
- en: '**High performance and computing issues**: It can be used for both load balancing
    of tasks over a cluster and the saving of cluster node states in case a crash
    occurs. Having a number of snapshots for application doesn''t hurt anybody.'
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**高性能和计算问题**：它可以用于在集群上平衡任务的负载和保存集群节点状态以防发生崩溃。对应用程序进行多个快照不会对任何人造成伤害。'
- en: '**Duplication of processes**: It is similar to the remote `fork()` operation.'
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**进程的复制**：类似于远程`fork()`操作。'
- en: '**Snapshots for applications**: A series of application states can be saved
    and reversed back if necessary. It can be used both as a redo for the desired
    state of an application as well as for debugging purposes.'
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**应用程序的快照**：一系列应用程序状态可以被保存并在必要时恢复。它可以被用作应用程序所需状态的重做，也可以用于调试目的。'
- en: '**Save ability in applications that do not have this option**: An example of
    such an application could be games in which after reaching a certain level, the
    establishment of a checkpoint is the thing you need.'
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**在没有此选项的应用程序中保存能力**：这样的应用程序的一个例子可能是游戏，在达到一定级别后，建立检查点是你需要的。'
- en: '**Migrate a forgotten application onto the screen**: If you have forgotten
    to include an application onto the screen and you are already there, CRIU can
    help with the migration process.'
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**将遗忘的应用程序迁移到屏幕上**：如果您忘记将一个应用程序包含在屏幕上，而您已经在那里，CRIU可以帮助进行迁移过程。'
- en: '**Debugging of applications that have hung**: For services that are stuck because
    of `git` and need a quick restart, a copy of the services can be used to restore.
    A dump process can also be used and through debugging, the cause of the problem
    can be found.'
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**调试挂起的应用程序**：对于因`git`而被卡住并需要快速重启的服务，可以使用服务的副本进行恢复。也可以使用转储过程，并通过调试找到问题的原因。'
- en: '**Application behavior analysis on a different machine**: For those applications
    that could behave differently from one machine to another, a snapshot of the application
    in question can be used and transferred into the other. Here, the debugging process
    can also be an option.'
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**在不同机器上分析应用程序行为**：对于那些在不同机器上可能表现不同的应用程序，可以使用该应用程序的快照，并将其转移到另一台机器上。在这里，调试过程也可以是一个选项。'
- en: '**Dry running updates**: Before a system or kernel update on a system is done,
    its services and critical applications could be duplicated onto a virtual machine
    and after the system update and all the test cases pass, the real update can be
    done.'
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**干运行更新**：在系统或内核更新之前，可以将其服务和关键应用程序复制到虚拟机上，系统更新并且所有测试用例通过后，才能进行真正的更新。'
- en: '**Fault-tolerant systems**: It can be used successfully for process duplication
    on other machines.'
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**容错系统**：它可以成功用于在其他机器上复制进程。'
- en: The next element is `irqbalance`, a distributed hardware interrupt system that
    is available across multiple processors and multiprocessor systems. It is, in
    fact, a daemon used to balance interrupts across multiple CPUs, and its purpose
    is to offer better performances as well as better IO operation balance on SMP
    systems. It has alternatives, such as `smp_affinity`, which could achieve maximum
    performance in theory, but lacks the same flexibility that `irqbalance` provides.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 下一个元素是`irqbalance`，这是一个分布式硬件中断系统，可跨多个处理器和多处理器系统使用。实际上，它是一个用于在多个CPU之间平衡中断的守护程序，其目的是在SMP系统上提供更好的性能以及更好的IO操作平衡。它有替代方案，如`smp_affinity`，理论上可以实现最大性能，但缺乏`irqbalance`提供的同样灵活性。
- en: 'The `libvirt` toolkit can be used to connect with the virtualization capabilities
    available in the recent Linux kernel versions that have been licensed under the
    GNU Lesser General Public License. It offers support for a large number of packages,
    as follows:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: '`libvirt`工具包可用于连接到最近的Linux内核版本中提供的虚拟化功能，这些功能已根据GNU Lesser General Public License许可。它支持大量软件包，如下所示：'
- en: KVM/QEMU Linux supervisor
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: KVM/QEMU Linux监督员
- en: Xen supervisor
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Xen监督员
- en: LXC Linux container system
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: LXC Linux容器系统
- en: OpenVZ Linux container system
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: OpenVZ Linux容器系统
- en: Open Mode Linux a paravirtualized kernel
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Open Mode Linux是一个半虚拟化内核
- en: Hypervisors that include VirtualBox, VMware ESX, GSX, Workstation and player,
    IBM PowerVM, Microsoft Hyper-V, Parallels, and Bhyve
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 包括VirtualBox、VMware ESX、GSX、Workstation和player、IBM PowerVM、Microsoft Hyper-V、Parallels和Bhyve在内的虚拟机监视器
- en: Besides these packages, it also offers support for storage on a large variety
    of filesystems, such as IDE, SCSI or USB disks, FiberChannel, LVM, and iSCSI or
    NFS, as well as support for virtual networks. It is the building block for other
    higher-level applications and tools that focus on the virtualization of a node
    and it does this in a secure way. It also offers the possibility of a remote connection.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 除了这些软件包，它还支持多种文件系统的存储，如IDE、SCSI或USB磁盘、FiberChannel、LVM以及iSCSI或NFS，以及虚拟网络的支持。它是其他专注于节点虚拟化的更高级别应用程序和工具的构建块，并以安全的方式实现这一点。它还提供了远程连接的可能性。
- en: Note
  id: totrans-109
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: For more information about `libvirt`, take a look at its project goals and terminologies
    at [http://libvirt.org/goals.html](http://libvirt.org/goals.html).
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 有关`libvirt`的更多信息，请查看其项目目标和术语[http://libvirt.org/goals.html](http://libvirt.org/goals.html)。
- en: The next is `Open vSwitch`, a production-quality implementation of a multilayer
    virtual switch. This software component is licensed under Apache 2.0 and is designed
    to enable massive network automations through various programmatic extensions.
    The `Open vSwitch` package, also abbreviated as **OVS**, provides a two stack
    layer for hardware virtualizations and also supports a large number of the standards
    and protocols available in a computer network, such as sFlow, NetFlow, SPAN, CLI,
    RSPAN, 802.1ag, LACP, and so on.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来是`Open vSwitch`，一个多层虚拟交换机的生产质量实现。这个软件组件根据Apache 2.0许可证授权，并旨在通过各种编程扩展实现大规模网络自动化。`Open
    vSwitch`软件包，也缩写为**OVS**，提供了硬件虚拟化的两个堆栈层，并支持计算机网络中的大量标准和协议，如sFlow、NetFlow、SPAN、CLI、RSPAN、802.1ag、LACP等。
- en: Xen is a hypervisor with a microkernel design that provides services offering
    multiple computer operating systems to be executed on the same architecture. It
    was first developed at the Cambridge University in 2003, and was developed under
    GNU General Public License version 2\. This piece of software runs on a more privileged
    state and is available for ARM, IA-32, and x86-64 instruction sets.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: Xen是一个具有微内核设计的虚拟化程序，提供服务，可以在同一架构上执行多个计算机操作系统。它最初是在2003年在剑桥大学开发的，并在GNU通用公共许可证第2版下开发。这个软件运行在更高特权状态下，并可用于ARM、IA-32和x86-64指令集。
- en: 'A hypervisor is a piece of software that is concerned with the CPU scheduling
    and memory management of various domains. It does this from the **domain 0** (**dom0**),
    which controls all the other unprivileged domains called **domU**; Xen boots from
    a bootloader and usually loads into the dom0 host domain, a paravirtualized operating
    system. A brief look at the Xen project architecture is available here:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 虚拟机监视器是一种软件，涉及CPU调度和各种域的内存管理。它是从**域0**（**dom0**）执行的，控制所有其他非特权域，称为**domU**；Xen从引导加载程序引导，并通常加载到dom0主机域，一个半虚拟化操作系统。Xen项目架构的简要介绍在这里：
- en: '![Virtualization support for the Yocto Project](img/image00377.jpeg)'
  id: totrans-114
  prefs: []
  type: TYPE_IMG
  zh: '![Yocto项目的虚拟化支持](img/image00377.jpeg)'
- en: '**Linux Containers** (**LXC**) is the next element available in the meta-virtualization
    layer. It is a well-known set of tools and libraries that offer virtualization
    at the operating system level by offering isolated containers on a Linux control
    host machine. It combines the functionalities of kernel **control groups** (**cgroups**)
    with the support for isolated namespaces to provide an isolated environment. It
    has received a fair amount of attention mostly due to Docker, which will be briefly
    mentioned a bit later. Also, it is considered a lightweight alternative to full
    machine virtualization.'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: '**Linux容器**（**LXC**）是meta-virtualization层中提供的下一个元素。它是一组著名的工具和库，通过在Linux控制主机机器上提供隔离容器，以操作系统级别进行虚拟化。它结合了内核**控制组**（**cgroups**）的功能与对隔离命名空间的支持，以提供一个隔离的环境。它受到了相当多的关注，主要是由于稍后将简要提到的Docker。此外，它被认为是完整机器虚拟化的轻量级替代方案。'
- en: Both of these options, containers and machine virtualization, have a fair amount
    of advantages and disadvantages. If the first option, containers offer low overheads
    by sharing certain components, and it may turn out that it does not have a good
    isolation. Machine virtualization is exactly the opposite of this and offers a
    great solution to isolation at the cost of a bigger overhead. These two solutions
    could also be seen as complementary, but this is only my personal view of the
    two. In reality, each of them has its particular set of advantages and disadvantages
    that could sometimes be uncomplementary as well.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 这两个选项，容器和机器虚拟化，都有相当多的优点和缺点。如果选择容器，它们通过共享某些组件来提供低开销，但可能会发现它的隔离效果不好。机器虚拟化恰恰相反，提供了很好的隔离解决方案，但开销更大。这两种解决方案也可以看作是互补的，但这只是我个人对这两种解决方案的看法。实际上，它们每个都有自己特定的一套优点和缺点，有时也可能是互补的。
- en: Note
  id: totrans-117
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注
- en: More information about Linux containers is available at [https://linuxcontainers.org/](https://linuxcontainers.org/).
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 有关Linux容器的更多信息，请访问[https://linuxcontainers.org/](https://linuxcontainers.org/)。
- en: 'The last component of the `meta-virtualization` layer that will be discussed
    is **Docker**, an open source piece of software that tries to automate the method
    of deploying applications inside Linux containers. It does this by offering an
    abstraction layer over LXC. Its architecture is better described in this image:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 将讨论的`meta-virtualization`层的最后一个组件是Docker，这是一款开源软件，试图自动化在Linux容器中部署应用程序的方法。它通过在LXC上提供一个抽象层来实现这一点。它的架构在这张图片中更好地描述了：
- en: '![Virtualization support for the Yocto Project](img/image00378.jpeg)'
  id: totrans-120
  prefs: []
  type: TYPE_IMG
  zh: '![Yocto项目的虚拟化支持](img/image00378.jpeg)'
- en: As you can see in the preceding diagram, this software package is able to use
    the resources of the operating system. Here, I am referring to the functionalities
    of the Linux kernel and have isolated other applications from the operating system.
    It can do this either through LXC or other alternatives, such as `libvirt` and
    `systemd-nspawn`, which are seen as indirect implementations. It can also do this
    directly through the `libcontainer` library, which has been around since the 0.9
    version of Docker.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您在上图中所看到的，这个软件包能够使用操作系统的资源。我指的是Linux内核的功能，并且已经将其他应用程序从操作系统中隔离出来。它可以通过LXC或其他替代方案（如`libvirt`和`systemd-nspawn`）来实现，也可以直接通过`libcontainer`库来实现，这个库从Docker的0.9版本开始就存在了。
- en: Docker is a great component if you want to obtain automation for distributed
    systems, such as large-scale web deployments, service-oriented architectures,
    continuous deployment systems, database clusters, private PaaS, and so on. More
    information about its use cases is available at [https://www.docker.com/resources/usecases/](https://www.docker.com/resources/usecases/).
    Make sure you take a look at this website; interesting information is often here.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: Docker是一个很好的组件，如果您想要为分布式系统（如大规模Web部署、面向服务的架构、持续部署系统、数据库集群、私有PaaS等）获得自动化。有关其用例的更多信息，请访问[https://www.docker.com/resources/usecases/](https://www.docker.com/resources/usecases/)。确保您查看这个网站；这里经常有有趣的信息。
- en: Note
  id: totrans-123
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注
- en: More information about the Docker project is available on their website. Check
    out the **What is Docker?** section at [https://www.docker.com/whatisdocker/](https://www.docker.com/whatisdocker/).
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 有关Docker项目的更多信息，请访问他们的网站。在[https://www.docker.com/whatisdocker/](https://www.docker.com/whatisdocker/)上查看**什么是Docker？**部分。
- en: After finishing with the `meta-virtualization` layer, I will move next to the
    `meta-cloud-services` layer that contains various elements. I will start with
    **Simple Protocol for Independent Computing Environments** (**Spice**). This can
    be translated into a remote-display system for virtualized desktop devices.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 完成`meta-virtualization`层后，我将转向包含各种元素的`meta-cloud-services`层。我将从**独立计算环境的简单协议**（**Spice**）开始。这可以被翻译成用于虚拟化桌面设备的远程显示系统。
- en: 'It initially started as a closed source software, and in two years it was decided
    to make it open source. It then became an open standard to interaction with devices,
    regardless of whether they are virtualized one not. It is built on a client-server
    architecture, making it able to deal with both physical and virtualized devices.
    The interaction between backend and frontend is realized through **VD-Interfaces**
    (**VDI**), and as shown in the following diagram, its current focus is the remote
    access to QEMU/KVM virtual machines:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 它最初是作为闭源软件开始的，在两年后决定将其开源。然后它成为了与设备交互的开放标准，无论它们是虚拟化的还是非虚拟化的。它建立在客户端-服务器架构上，使其能够处理物理和虚拟化设备。后端和前端之间的交互是通过VD-Interfaces（VDI）实现的，如下图所示，它目前的重点是远程访问QEMU/KVM虚拟机：
- en: '![Virtualization support for the Yocto Project](img/image00379.jpeg)'
  id: totrans-127
  prefs: []
  type: TYPE_IMG
  zh: '![Yocto项目的虚拟化支持](img/image00379.jpeg)'
- en: 'Next on the list is **oVirt**, a virtualization platform that offers a web
    interface. It is easy to use and helps in the management of virtual machines,
    virtualized networks, and storages. Its architecture consists of an oVirt Engine
    and multiple nodes. The engine is the component that comes equipped with a user-friendly
    interface to manage logical and physical resources. It also runs the virtual machines
    that could be either oVirt nodes, Fedora, or CentOS hosts. The only downfall of
    using oVirt is that it only offers support for a limited number of hosts, as follows:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来是**oVirt**，一个提供Web界面的虚拟化平台。它易于使用，并有助于管理虚拟机、虚拟化网络和存储。它的架构由oVirt Engine和多个节点组成。引擎是一个配备了用户友好界面的组件，用于管理逻辑和物理资源。它还运行虚拟机，这些虚拟机可以是oVirt节点、Fedora或CentOS主机。使用oVirt的唯一缺点是它只支持有限数量的主机，如下所示：
- en: Fedora 20
  id: totrans-129
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Fedora 20
- en: CentOS 6.6, 7.0
  id: totrans-130
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: CentOS 6.6, 7.0
- en: Red Hat Enterprise Linux 6.6, 7.0
  id: totrans-131
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Red Hat Enterprise Linux 6.6, 7.0
- en: Scientific Linux 6.6, 7.0
  id: totrans-132
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Scientific Linux 6.6, 7.0
- en: As a tool, it is really powerful. It offers integration with `libvirt` for **Virtual
    Desktops and Servers Manager** (**VDSM**) communications with virtual machines
    and also support for SPICE communication protocols that enable remote desktop
    sharing. It is a solution that was started and is mainly maintained by Red Hat.
    It is the base element of their **Red Hat Enterprise Virtualization** (**RHEV**),
    but one thing is interesting and should be watched out for is that Red Hat now
    is not only a supporter of projects, such as oVirt and Aeolus, but has also been
    a platinum member of the OpenStack foundation since 2012.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
- en: Note
  id: totrans-134
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'For more information on projects, such as oVirt, Aeolus, and RHEV, the following
    links can be useful to you: [http://www.redhat.com/promo/rhev3/?sc_cid=70160000000Ty5wAAC&offer_id=70160000000Ty5NAAS
    http://www.aeolusproject.org/](http://www.redhat.com/promo/rhev3/?sc_cid=70160000000Ty5wAAC&offer_id=70160000000Ty5NAAS%20http://www.aeolusproject.org/),
    and [http://www.ovirt.org/Home](http://www.ovirt.org/Home).'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
- en: I will move on to a different component now. Here, I am referring to the open
    source implementation of the Lightweight Directory Access Protocol, simply called
    **OpenLDAP**. Although it has a somewhat controverted license called **OpenLDAP
    Public License**, which is similar in essence to the BSD license, it is not recorded
    at opensource.org, making it uncertified by **Open Source Initiative** (**OSI**).
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
- en: 'This software component comes as a suite of elements, as follows:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
- en: A standalone LDAP daemon that plays the role of a server called **slapd**
  id: totrans-138
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A number of libraries that implement the LDAP protocol
  id: totrans-139
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Last but not the least, a series of tools and utilities that also have a couple
    of clients samples between them
  id: totrans-140
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There are also a number of additions that should be mentioned, such as ldapc++
    and libraries written in C++, JLDAP and the libraries written in Java; LMDB, a
    memory mapped database library; Fortress, a role-based identity management; SDK,
    also written in Java; and a JDBC-LDAP Bridge driver that is written in Java and
    called **JDBC-LDAP**.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
- en: '**Cyrus SASL** is a generic client-server library implementation for **Simple
    Authentication and Security Layer** (**SASL**) authentication. It is a method
    used for adding authentication support for connection-based protocols. A connection-based
    protocol adds a command that identifies and authenticates a user to the requested
    server and if negotiation is required, an additional security layer is added between
    the protocol and the connection for security purposes. More information about
    SASL is available in the RFC 2222, available at [http://www.ietf.org/rfc/rfc2222.txt](http://www.ietf.org/rfc/rfc2222.txt).'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
- en: Note
  id: totrans-143
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: For a more detailed description of Cyrus SASL, refer to [http://www.sendmail.org/~ca/email/cyrus/sysadmin.html](http://www.sendmail.org/~ca/email/cyrus/sysadmin.html).
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
- en: '**Qpid** is a messaging tool developed by Apache, which understands **Advanced
    Message Queueing Protocol** (**AMQP**) and has support for various languages and
    platforms. AMQP is an open source protocol designed for high-performance messaging
    over a network in a reliable fashion. More information about AMQP is available
    at [http://www.amqp.org/specification/1.0/amqp-org-download](http://www.amqp.org/specification/1.0/amqp-org-download).
    Here, you can find more information about the protocol specifications as well
    as about the project in general.'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
- en: 'Qpid projects push the development of AMQP ecosystems and this is done by offering
    message brokers and APIs that can be used in any developer application that intends
    to use AMQP messaging part of their product. To do this, the following can be
    done:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
- en: Letting the source code open source.
  id: totrans-147
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Making AMQP available for a large variety of computing environments and programming
    languages.
  id: totrans-148
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Offering the necessary tools to simplify the development process of an application.
  id: totrans-149
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a messaging infrastructure to make sure that other services can integrate
    well with the AMQP network.
  id: totrans-150
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a messaging product that makes integration with AMQP trivial for any
    programming language or computing environment. Make sure that you take a look
    at Qpid Proton at [http://qpid.apache.org/proton/overview.html](http://qpid.apache.org/proton/overview.html)
    for this.
  id: totrans-151
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note
  id: totrans-152
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: More information about the the preceding functionalities can be found at [http://qpid.apache.org/components/index.html#messaging-apis](http://qpid.apache.org/components/index.html#messaging-apis).
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
- en: '**RabbitMQ** is another message broker software component that implements AMQP,
    which is also available as open source. It has a number of components, as follows:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
- en: The RabbitMQ exchange server
  id: totrans-155
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Gateways for HTTP, **Streaming Text Oriented Message Protocol** (**STOMP**)
    and **Message Queue Telemetry Transport** (**MQTT**)
  id: totrans-156
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: AMQP client libraries for a variety of programming languages, most notably Java,
    Erlang, and .Net Framework
  id: totrans-157
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'A plugin platform for a number of custom components that also offer a collection
    of predefined one:'
  id: totrans-158
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Shovel**: It is a plugin that executes the copy/move operation for messages
    between brokers'
  id: totrans-159
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Management**: It enables the control and monitoring of brokers and clusters
    of brokers'
  id: totrans-160
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Federation**: It enables sharing at the exchange level of messages between
    brokers'
  id: totrans-161
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note
  id: totrans-162
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You can find out more information regarding RabbitMQ by referring to the RabbitMQ
    documentation section at [http://www.rabbitmq.com/documentation.html](http://www.rabbitmq.com/documentation.html).
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
- en: 'Comparing the two, Qpid and RabbitMQ, it can be concluded that RabbitMQ is
    better and also that it has a fantastic documentation. This makes it the first
    choice for the OpenStack Foundation as well as for readers interested in benchmarking
    information for more than these frameworks. It is also available at [http://blog.x-aeon.com/2013/04/10/a-quick-message-queue-benchmark-activemq-rabbitmq-hornetq-qpid-apollo/](http://blog.x-aeon.com/2013/04/10/a-quick-message-queue-benchmark-activemq-rabbitmq-hornetq-qpid-apollo/).
    One such result is also available in this image for comparison purposes:'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
- en: '![Virtualization support for the Yocto Project](img/image00380.jpeg)'
  id: totrans-165
  prefs: []
  type: TYPE_IMG
- en: 'The next element is **puppet**, an open source configuration management system
    that allows IT infrastructure to have certain states defined and also enforce
    these states. By doing this, it offers a great automation system for system administrators.
    This project is developed by the Puppet Labs and was released under GNU General
    Public License until version 2.7.0\. After this, it moved to the Apache License
    2.0 and is now available in two flavors:'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
- en: '**The open source puppet version**: It is mostly similar to the preceding tool
    and is capable of configuration management solutions that permit for definition
    and automation of states. It is available for both Linux and UNIX as well as Max
    OS X and Windows.'
  id: totrans-167
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**The puppet enterprise edition**: It is a commercial version that goes beyond
    the capabilities of the open source puppet and permits the automation of the configuration
    and management process.'
  id: totrans-168
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It is a tool that defines a declarative language for later use for system configuration.
    It can be applied directly on the system or even compiled as a catalogue and deployed
    on a target using a client-server paradigm, which is usually the REST API. Another
    component is an agent that enforces the resources available in the manifest. The
    resource abstraction is, of course, done through an abstraction layer that defines
    the configuration through higher lever terms that are very different from the
    operating system-specific commands.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
- en: Note
  id: totrans-170
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If you visit [http://docs.puppetlabs.com/](http://docs.puppetlabs.com/), you
    will find more documentation related to Puppet and other Puppet Lab tools.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
- en: 'With all this in place, I believe it is time to present the main component
    of the meta-cloud-services layer, called **OpenStack**. It is a cloud operating
    system that is based on controlling a large number of components and together
    it offers pools of compute, storage, and networking resources. All of them are
    managed through a dashboard that is, of course, offered by another component and
    offers administrators control. It offers users the possibility of providing resources
    from the same web interface. Here is an image depicting the Open Source Cloud
    operating System, which is actually OpenStack:'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
- en: '![Virtualization support for the Yocto Project](img/image00381.jpeg)'
  id: totrans-173
  prefs: []
  type: TYPE_IMG
- en: 'It is primarily used as an IaaS solution, its components are maintained by
    the OpenStack Foundation, and is available under Apache License version 2\. In
    the Foundation, today, there are more than 200 companies that contribute to the
    source code and general development and maintenance of the software. At the heart
    of it, all are staying its components Also, each component has a Python module
    used for simple interaction and automation possibilities:'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
- en: '**Compute (Nova)**: It is used for the hosting and management of cloud computing
    systems. It manages the life cycles of the compute instances of an environment.
    It is responsible for the spawning, decommissioning, and scheduling of various
    virtual machines on demand. With regard to hypervisors, KVM is the preferred option
    but other options such as Xen and VMware are also viable.'
  id: totrans-175
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Object Storage (Swift)**: It is used for storage and data structure retrieval
    via RESTful and the HTTP API. It is a scalable and fault-tolerant system that
    permits data replication with objects and files available on multiple disk drives.
    It is developed mainly by an object storage software company called **SwiftStack**.'
  id: totrans-176
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Block Storage (Cinder)**: It provides persistent block storage for OpenStack
    instances. It manages the creation and attach and detach actions for block devices.
    In a cloud, a user manages its own devices, so a vast majority of storage platforms
    and scenarios should be supported. For this purpose, it offers a pluggable architecture
    that facilitates the process.'
  id: totrans-177
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Networking (Neutron)**: It is the component responsible for network-related
    services, also known as **Network Connectivity as a Service**. It provides an
    API for network management and also makes sure that certain limitations are prevented.
    It also has an architecture based on pluggable modules to ensure that as many
    networking vendors and technologies as possible are supported.'
  id: totrans-178
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Dashboard (Horizon)**: It provides web-based administrators and user graphical
    interfaces for interaction with the other resources made available by all the
    other components. It is also designed keeping extensibility in mind because it
    is able to interact with other components responsible for monitoring and billing
    as well as with additional management tools. It also offers the possibility of
    rebranding according to the needs of commercial vendors.'
  id: totrans-179
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Identity Service (Keystone)**: It is an authentication and authorization
    service It offers support for multiple forms of authentication and also existing
    backend directory services such as LDAP. It provides a catalogue for users and
    the resources they can access.'
  id: totrans-180
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Image Service (Glance)**: It is used for the discovery, storage, registration,
    and retrieval of images of virtual machines. A number of already stored images
    can be used as templates. OpenStack also provides an operating system image for
    testing purposes. Glance is the only module capable of adding, deleting, duplicating,
    and sharing OpenStack images between various servers and virtual machines. All
    the other modules interact with the images using the available APIs of Glance.'
  id: totrans-181
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Telemetry (Ceilometer)**: It is a module that provides billing, benchmarking,
    and statistical results across all current and future components of OpenStack
    with the help of numerous counters that permit extensibility. This makes it a
    very scalable module.'
  id: totrans-182
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Orchestrator (Heat)**: It is a service that manages multiple composite cloud
    applications with the help of various template formats, such as Heat Orchestration
    Templates (HOT) or AWS CloudFormation. The communication is done both on a CloudFormation
    compatible Query API and an Open Stack REST API.'
  id: totrans-183
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Database (Trove)**: It provides Cloud Database as service functionalities
    that are both reliable and scalable. It uses relational and nonrelational database
    engines.'
  id: totrans-184
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Bare Metal Provisioning (Ironic)**: It is a components that provides virtual
    machine support instead of bare metal machines support. It started as a fork of
    the Nova Baremetal driver and grew to become the best solution for a bare-metal
    hypervisor. It also offers a set of plugins for interaction with various bare-metal
    hypervisors. It is used by default with PXE and IPMI, but of course, with the
    help of the available plugins it can offer extended support for various vendor-specific
    functionalities.'
  id: totrans-185
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Multiple Tenant Cloud Messaging (Zaqar)**: It is, as the name suggests, a
    multitenant cloud messaging service for the web developers who are interested
    in **Software as a Service** (**SaaS**). It can be used by them to send messages
    between various components by using a number of communication patterns. However,
    it can also be used with other components for surfacing events to end users as
    well as communication in the over-cloud layer. Its former name was **Marconi**
    and it also provides the possibility of scalable and secure messaging.'
  id: totrans-186
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Elastic Map Reduce (Sahara)**: It is a module that tries to automate the
    method of providing the functionalities of Hadoop clusters. It only requires the
    defines for various fields, such as Hadoop versions, various topology nodes, hardware
    details, and so on. After this, in a few minutes, a Hadoop cluster is deployed
    and ready for interaction. It also offers the possibility of various configurations
    after deployment.'
  id: totrans-187
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Having mentioned all this, maybe you would not mind if a conceptual architecture
    is presented in the following image to present to you with ways in which the above
    preceding components are interacted with. To automate the deployment of such an
    environment in a production environment, automation tools, such as the previously
    mentioned Puppet tool, can be used. Take a look at this diagram:'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
- en: '![Virtualization support for the Yocto Project](img/image00382.jpeg)'
  id: totrans-189
  prefs: []
  type: TYPE_IMG
- en: 'Now, let''s move on and see how such a system can be deployed using the functionalities
    of the Yocto Project. For this activity to start, all the required metadata layers
    should be put together. Besides the already available Poky repository, other ones
    are also required and they are defined in the layer index on OpenEmbedded''s website
    because this time, the `README` file is incomplete:'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  id: totrans-191
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'After the appropriate controller build is created, it needs to be configured.
    Inside the `conf/layer.conf` file, add the corresponding machine configuration,
    such as qemux86-64, and inside the `conf/bblayers.conf` file, the `BBLAYERS` variable
    should be defined accordingly. There are extra metadata layers, besides the ones
    that are already available. The ones that should be defined in this variable are:'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
- en: '`meta-cloud-services`'
  id: totrans-193
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`meta-cloud-services/meta-openstack-controller-deploy`'
  id: totrans-194
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`meta-cloud-services/meta-openstack`'
  id: totrans-195
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`meta-cloud-services/meta-openstack-qemu`'
  id: totrans-196
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`meta-openembedded/meta-oe`'
  id: totrans-197
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`meta-openembedded/meta-networking`'
  id: totrans-198
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`meta-openembedded/meta-python`'
  id: totrans-199
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`meta-openembedded/meta-filesystem`'
  id: totrans-200
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`meta-openembedded/meta-webserver`'
  id: totrans-201
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`meta-openembedded/meta-ruby`'
  id: totrans-202
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'After the configuration is done using the `bitbake openstack-image-controller`
    command, the controller image is built. The controller can be started using the
    `runqemu qemux86-64 openstack-image-controller kvm nographic qemuparams="-m 4096"`
    command. After finishing this activity, the deployment of the compute can be started
    in this way:'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  id: totrans-204
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: With the new build directory created and also since most of the work of the
    build process has already been done with the controller, build directories such
    as `downloads` and `sstate-cache`, can be shared between them. This information
    should be indicated through `DL_DIR` and `SSTATE_DIR`. The difference between
    the two `conf/bblayers.conf` files is that the second one for the `build-compute`
    build directory replaces `meta-cloud-services/meta-openstack-controller-deploy
    with meta-cloud-services/meta-openstack-compute-deploy`.
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
- en: 'This time the build is done with `bitbake openstack-image-compute` and should
    be finished faster. Having completed the build, the compute node can also be booted
    using the `runqemu qemux86-64 openstack-image-compute kvm nographic qemuparams="-m
    4096 –smp 4"` command. This step implies the image loading for OpenStack Cirros
    as follows:'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  id: totrans-207
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Having done all of this, the user is free to access the Horizon web browser
    using `http://<compute_ip_address>:8080/` The login information is admin and the
    password is password. Here, you can play and create new instances, interact with
    them, and, in general, do whatever crosses your mind. Do not worry if you've done
    something wrong to an instance; you can delete it and start again.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
- en: The last element from the `meta-cloud-services` layer is the **Tempest integration
    test suite** for OpenStack. It is represented through a set of tests that are
    executed on the OpenStack trunk to make sure everything is working as it should.
    It is very useful for any OpenStack deployments.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
- en: Note
  id: totrans-210
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: More information about Tempest is available at [https://github.com/openstack/tempest](https://github.com/openstack/tempest).
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  id: totrans-212
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you were not only presented with information about a number
    of virtualization concepts, such as NFV, SDN, VNF, and so on, but also a number
    of open source components that contribute to everyday virtualization solutions.
    I offered you examples and even a small exercise to make sure that the information
    remains with you even after reading this book. I hope I made some of you curious
    about certain things. I also hope that some of you documented on projects that
    were not presented here, such as the **OpenDaylight** (**ODL**) initiative, that
    has only been mentioned in an image as an implementation suggestion. If this is
    the case, I can say I fulfilled my goal. If not, maybe this summary will make
    you go through the previous pages again.
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will visit a new and real carrier graded one. It will
    be the last chapter of this book and I will conclude it with a topic that is very
    important to me personally. I will discuss the Yocto shy initiative called **meta-cgl**
    and its purpose. I will present the various specifications and changes for the
    **Carrier Graded Linux** (**CGL**), and the requirements of **Linux Standard Base**
    (**LSB**). I hope you enjoy reading it as much as I have enjoyed writing it.
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
