- en: Auditing Our App
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Auditing** is a way of confirming that our Progressive Web App is a true
    PWA, that it lives up to the standards of the name. This audit is an important
    last step for us to check our work and ensure that our app is as good as it can
    be in terms of PWA functionality.'
  prefs: []
  type: TYPE_NORMAL
- en: As mentioned previously, the biggest champion of Progressive Web Apps is Google.
    Not only are their Chrome browser and Android operating systems the most PWA-friendly
    of all, Google puts a great deal of effort into educating developers on how and
    why to build a PWA. As you move forward (beyond this book) into the world of the
    PWA, you'll probably often turn to their documentation.
  prefs: []
  type: TYPE_NORMAL
- en: However, Google provides another way to light the way forward to the progressive
    web. To ensure the quality of your web page or application, they have released
    a set of tools to measure your site against a set criteria. The main tool they
    use to do so is called Lighthouse.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here''s what we''ll cover in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: What is Lighthouse?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What criteria does it follow?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What is the Audits tab in DevTools?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Running our first audit
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Evaluating the readout
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using the Lighthouse CLI
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What is Lighthouse?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In a sentence, **Lighthouse** is a tool that runs your site and tells you how
    progressive it really is, based on a set of specific criteria.
  prefs: []
  type: TYPE_NORMAL
- en: It does so by trying to load the page under a variety of conditions (including
    a 3G network and offline) and assessing how the page responds. It also checks
    for some PWA standbys, such as a splash screen and a service worker.
  prefs: []
  type: TYPE_NORMAL
- en: The criteria
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The following criteria are essentially a checklist that Lighthouse follows while
    looking at your app. Each "test" is a simple yes/no. If you pass all the tests,
    you get a score of 100\. That's what we want!
  prefs: []
  type: TYPE_NORMAL
- en: 'Here’s a written list of the criteria, as of August 2017:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Registers a Service Worker**: The service worker is the technology that enables
    your app to use many Progressive Web App features, such as offline, add to homescreen,
    and push notifications.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Responds with a 200 when offline:** If you''re building a Progressive Web
    App, consider using a service worker so that your app can work offline.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Contains some content when JavaScript is not available**: Your app should
    display some content when JavaScript is disabled, even if it''s just a warning
    to the user that JavaScript is required to use the app.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Configured for a custom splash screen:** A default splash screen will be
    constructed for your app, but satisfying these requirements guarantees a high-quality
    splash screen that transitions the user from tapping on the home screen icon to
    your app''s first paint.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Uses HTTPS**: All sites should be protected with HTTPS, even ones that don''t
    handle sensitive data. HTTPS prevents intruders from tampering with or passively
    listening in on the communications between your app and your users, and is a prerequisite
    for HTTP/2 and many new web platform APIs.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Redirects HTTP traffic to HTTPS**: If you''ve already set up HTTPS, ensure
    that you redirect all HTTP traffic to HTTPS.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Page load is fast enough on 3G:** This criterion is satisfied if the **Time
    To Interactive** duration is shorter than 10 seconds, as defined by the PWA Baseline
    Checklist (source--[https://developers.google.com/web/progressive-web-apps/checklist](https://developers.google.com/web/progressive-web-apps/checklist)).
    Network throttling is required (specifically, RTT latencies >= 150 RTT are expected).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**User can be prompted to install the Web App:** While users can manually add
    your site to their home screen, the prompt (also known as app install banner)
    will proactively prompt the user to install the app if the various requirements
    are met and the user has moderate engagement with your site.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Address bar matches brand colors:** The browser address bar can be themed
    to match your site. A ``theme-color`` meta tag will upgrade the address bar when
    a user browses the site, and the manifest theme color will apply the same theme
    site-wide once it''s been added to the home screen.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Has a <meta name="viewport"> tag with width or initial-scale:** Add a `viewport`
    meta tag to optimize your app for mobile screens.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Content is sized correctly for the viewport:** If the width of your app''s
    content doesn''t match the width of the viewport, your app might not be optimized
    for mobile screens.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Audits tab
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Until the release of Chrome 60, Lighthouse was only available in beta version
    as a Chrome extension or command-line tool. Now, however, it has its very own
    place in the Chrome DevTools, in the new **Audits tab**.
  prefs: []
  type: TYPE_NORMAL
- en: Included in the Audits tab, alongside the Lighthouse PWA audit, is a selection
    of other benchmark tests, including performance and web best practices. We’ll
    focus on the PWA test and performance tests, but feel free to run the other tests
    as well.
  prefs: []
  type: TYPE_NORMAL
- en: Another useful feature of the Audits tab is the ability to save previous audits,
    to get a sort of history of your application as you improve it.
  prefs: []
  type: TYPE_NORMAL
- en: Okay, enough talk. Let's go ahead and run our first audit!
  prefs: []
  type: TYPE_NORMAL
- en: Our first audit
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Open up your DevTools, navigate to the Audits tab, and click on Run Audit.
  prefs: []
  type: TYPE_NORMAL
- en: 'It should take a few seconds, and then give you a nice summary of how our site
    looks, drumroll. How good is our Progressive Web App?:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../images/00091.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Not bad at all. In fact, it doesn't get better than that in the PWA category.
    Give yourself a pat on the back and perhaps a high-five for a job well-done. Let's
    evaluate the readout, and then decide whether we want to move on or aim for 100%
    in all categories.
  prefs: []
  type: TYPE_NORMAL
- en: Please note that since Lighthouse is under active development, your scores may
    not match the above due to new criteria. In that case, I encourage you to take
    a look at what Lighthouse is complaining about, and see if you can solve it to
    get to that '100' score.
  prefs: []
  type: TYPE_NORMAL
- en: Evaluating the readout
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'If your results don''t match the preceding, there are two possibilities:'
  prefs: []
  type: TYPE_NORMAL
- en: Chrome has added a new test that our app does not fulfill. As we've mentioned
    many times, PWAs are an evolving technology, so this is certainly possible.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You missed some step in the book; happens to the best of us.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In either case, I encourage you to investigate and try to solve the root issue.
    Google provides documentation for every test criteria, which is a good place to
    start.
  prefs: []
  type: TYPE_NORMAL
- en: 'In our case, the only test we didn''t pass with flying colors was Performance.
    Let''s look at the reason we didn''t:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../images/00092.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: As we see here, our first meaningful paint takes about three seconds. Note that
    our app shell is not considered a meaningful paint, though it does improve the
    perceived performance of the page. Chrome is smart enough to know that it is not
    until our `login` form or `chat` container appears that we actually have meaningful
    content on the screen--stuff the user can actually use.
  prefs: []
  type: TYPE_NORMAL
- en: The reason it takes over three seconds to display that meaningful content, though,
    is that we need to wait for our JavaScript to load, boot up, and then load whether
    our user is currently logged in, and then either load the chat messages or redirect
    to login. That’s a lot of subsequent steps.
  prefs: []
  type: TYPE_NORMAL
- en: Is this a solvable problem? Perhaps. We can wire up some way of finding out
    whether our user is logged in before React loads (in other words, move some JavaScript
    out of our main app). We can move both the `chat` container and the `login` form
    out of React to ensure that they can be rendered before the library loads, and
    then come up with some means of replacing them once React initializes (the challenge
    being replacing inputs without erasing anything the user has started typing).
  prefs: []
  type: TYPE_NORMAL
- en: All the mentioned challenges fall under the category of optimizing the critical
    render path. For anyone who wants to dive deeper into performance optimization,
    I encourage you to try it out. From a business perspective, however, that’s a
    lot of (potentially buggy) optimization for little gain. Our users already receive
    content in around 400 ms, according to the previous benchmarks, and the full application
    in just over three seconds. Remember that, thanks to caching, most users will
    then get a much faster load time in their subsequent visits.
  prefs: []
  type: TYPE_NORMAL
- en: Our lower performance score demonstrates, in fact, the cost-benefit of using
    a weighty JavaScript library such as React to build a high performance application.
    For those interested in a more lightweight alternative, check out the section
    on Preact in the next chapter, a possible solution to the preceding problem.
  prefs: []
  type: TYPE_NORMAL
- en: Using the Lighthouse CLI
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Running the tests from the Audits tab is nice and easy, but how can we ensure
    that the quality of our application is maintained before we push it live?
  prefs: []
  type: TYPE_NORMAL
- en: The answer is to incorporate Lighthouse into our deploy process, and use it
    to assess our build automatically. This is similar to having a test suite run
    when we hit `yarn deploy`. Fortunately, Google supplies with a Lighthouse CLI
    for exactly this purpose.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s install it with the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Here, our goal is to run Lighthouse on our application whenever we run `yarn
    deploy`. To do so, we have to make a custom deploy script.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you open up our `package.json`, you’ll see the following under `scripts`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s change that to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: We will use node to run a custom build script written in JavaScript. Create
    `scripts/ folder` in your directory root, along with the `assess.js` file.
  prefs: []
  type: TYPE_NORMAL
- en: 'Our process will be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Serve our `build` folder locally, so it runs in the browser.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Use Lighthouse to assess the served page.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Console log the results.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Let''s add the package we need to serve our `build` folder:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Note that we're saving this and `lighthouse` as `dev` dependencies, given that
    we'll never use them in production.
  prefs: []
  type: TYPE_NORMAL
- en: Serving our build folder
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Inside our new `scripts/assess.js`, require the `serve` package:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'All we want to do is `serve` our newly compiled `build` folder on `port:5000`,
    which looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: We can stop the server at any time by running `server.stop()`. We'll do that
    once our scores are displayed.
  prefs: []
  type: TYPE_NORMAL
- en: Using Lighthouse to assess the served page
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now, let''s require two more tools at the top of `assess.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '`chromeLauncher` will allow us to open up Chrome to the target page, and then
    run Lighthouse. Let’s make a function called `launchChromeAndRunLighthouse` to
    do exactly this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: We can optionally pass in some flags and config, which we won't use here (flags
    can be used to turn on logging as the process unfolds).
  prefs: []
  type: TYPE_NORMAL
- en: 'Inside the function, we''ll launch Chrome, set the port for Lighthouse to run
    on, and then run it. Lastly, we''ll stop Chrome:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: This function is taken directly from the Lighthouse CLI documentation, by the
    way.
  prefs: []
  type: TYPE_NORMAL
- en: 'Okay, now for the last step. We''ll run our function with our chosen URL (put
    this at the bottom of the file, below the `serve` command):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Once we have our results, we stop the server, but we need to display our results
    properly.
  prefs: []
  type: TYPE_NORMAL
- en: Logging the results
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The results variable comes in as an object. It gives a detailed breakdown of
    each category with the score given, but we only care about trouble areas. Above
    our function invocation, let''s add a score cutoff:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: We'll use this to say "only show results that score less than 90/100."
  prefs: []
  type: TYPE_NORMAL
- en: 'The process of logging out the results isn''t too exciting, so we won''t walk
    through it here in depth. Here''s the complete file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: If you run `node scripts/assess.js` from your Terminal, you should see a list
    of problem areas as well as a final score for each category. Bring it all together
    by running `yarn deploy`, and you'll see those scores appear before the Firebase
    deployment.
  prefs: []
  type: TYPE_NORMAL
- en: Now we have an easy and clean way to keep up to date on the status of our application
    as it evolves, without having to launch the site ourselves to test it.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Done! We fully audited our application, and it passed with flying colors in
    every category. We have a working Progressive Web Application. In this chapter,
    we learned what Lighthouse was, and why it's important to verify our PWA. We also
    added it as part of our deployment process to ensure that our app continues to
    meet the quality standards. We can now consider our app complete in every aspect.
  prefs: []
  type: TYPE_NORMAL
- en: Next, we'll talk about the subsequent steps as well as useful resources for
    growing your knowledge of PWAs, but first, about submitting our app to your friend
    and the Chatastrophe board.
  prefs: []
  type: TYPE_NORMAL
