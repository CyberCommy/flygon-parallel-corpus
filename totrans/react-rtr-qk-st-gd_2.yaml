- en: Configuring Routes - Using Various Options in the Route Component
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: React-Router allows you to declaratively define routes using the `<Route>` component.
    It's the main building block of React-Router, and renders the component mentioned
    in the `component` prop when the path value mentioned in the `path` prop matches
    the browser's URL location. The `<Route>` component, like any other React component,
    accepts a set of props. These props provide more granular control over how the
    browser's URL path should match the `<Route>` component's path, and a couple of
    other rendering options as well.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the previous chapter, we briefly saw how a `<Route>` component is used to
    match the URL path and render a component. In this chapter, we will take a look
    at the following:'
  prefs: []
  type: TYPE_NORMAL
- en: A deep dive into various props that can be added to a `<Route>` component, such
    as `exact`, `strict`, `render`, `children`, and `sensitive`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Route component props**: the component, which gets rendered as a result of
    a `<Route>` path match, receives data as props that can then be used to create
    nested routes.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Route parameters**: The `<Route>` component''s path can be configured to
    accept additional params from the URL segment, and these params can be read in
    the rendered component.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Nested or dynamic routes**: a `<Route>` component can be added inside a rendered
    component instead of defining routes at the application level. The rendered component
    thus provides the next step in the application journey.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Generating routes from JSON configuration**: Route information available
    in the JSON object can be used to add routes to the application.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Route props
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'When you look at the source code of React-Router, the `<Route>` component accepts
    the following props:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Let's take a look at each of these props in the following section.
  prefs: []
  type: TYPE_NORMAL
- en: The exact prop
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In our previous `<Route>` example, let''s change the `''/home''` route path
    to `''/''`, as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'With these routes in place, when the browser''s URL is set to `/dashboard`,
    you''ll notice that the content from both components is displayed as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Here, the `''/''` in `''/dashboard''` matches both of the `<Route>` paths, `''/''`
    and `''/dashboard''` ; therefore it renders content from both the components.
    To match the browser''s `location.pathname` exactly with the `<Route>` component''s
    path, add the exact prop to the `<Route>`, as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Similarly, when you try to access the `'/dashboard'` and `'/dashboard/portfolio'` paths,
    you'll notice that in both instances, `DashboardComponent` is rendered. To prevent `'/dashboard/portfolio'`
    from matching the `<Route>` component with the `'/dashboard'` path, add the `exact` prop.
  prefs: []
  type: TYPE_NORMAL
- en: React-Router uses the `path-to-regexp` library internally to determine whether
    a route element's path prop matches the current location.
  prefs: []
  type: TYPE_NORMAL
- en: The strict prop
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When the `<Route>` path has a trailing slash, and you would like to match this
    path, including the trailing slash, with the browser's URL, then include the `strict`
    prop. For example, after changing the `<Route>` path from `'/dashboard'` to `'/dashboard/'`,
    the `<Route>` component would still match the URL path without the trailing slash.
    In other words, `'/dashboard'` would match the `<Route>` component with the `'/dashboard/'` path.
  prefs: []
  type: TYPE_NORMAL
- en: 'However, after adding the `strict` prop, React-Router ensures that `<Route>`
    matches only if the URL has a trailing slash:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: With this `<Route>` configuration in place, the `'/dashboard'` path would not
    match. However, when you add a trailing slash to the URL, as in `'/dashboard/'`,
    the `<Route>` component with a `strict` prop will match and the `DashboardComponent`
    would be rendered.
  prefs: []
  type: TYPE_NORMAL
- en: Please note, if you mention additional URL segments, then it would still match
    the `path` prop mentioned in the `<Route>` component. For example, if the URL
    path is `'/dashboard/123'`, it would match the `'/dashboard/'` path with a `<Route>` component
    that has the `strict` prop. To match a path including the additional URL segments,
    you can specify the `exact` prop along with the `strict` prop.
  prefs: []
  type: TYPE_NORMAL
- en: The sensitive prop
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'A `<Route>` component''s path is not case-sensitive, that is, a `<Route>` component
    with its path prop value set to `''/Dashboard''` would match the `''/dashboard''`
    or `''/DASHBOARD''` URL path. To make a `<Route>` component''s path case-sensitive,
    add the `sensitive` prop:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'The `sensitive` prop ensures that the path prop''s case is taken into consideration
    when matching it with the browser''s URL path. By adding the `sensitive` prop,
    one can define routes with the same pathname, but do so using a different case:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: This code would create two distinct routes and would render the corresponding
    component when the `<Route>` component's case-sensitive path matches the browser's
    URL path.
  prefs: []
  type: TYPE_NORMAL
- en: Inline rendering with the render prop
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We have already taken a look at how the `component` prop can be used to render
    a view when the `<Route>` path matches the browser's `location.pathname`. There
    are two other props available to render a view: `render` and `children`.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `render` prop is used for inline rendering. The function mentioned as a
    value to the `render` prop should return a React element similar to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: From the preceding code snippet, when the `'/user'` path matches the browser's
    URL, the function specified as a value to the `render` prop is executed, and the
    React element returned from this function is rendered.
  prefs: []
  type: TYPE_NORMAL
- en: When you specify both `component` and `render` props in the same `<Route>` component,
    the `component` prop will take precedence.
  prefs: []
  type: TYPE_NORMAL
- en: Inline rendering with the children prop
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `children` prop should be used in a case where you want to render the view
    irrespective of whether or not there''s a path match. The syntax for the `children`
    prop is similar to the `render` prop, as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: The `<Route>` component with a `children` prop is rendered even if the `path`
    prop is not specified. Also, the `exact` and `strict` props will not have any
    effect on a `<Route>` component with a `children` prop.
  prefs: []
  type: TYPE_NORMAL
- en: Both the `component` and `render` props take precedence over the `children`
    prop. Also, when either the `component` or `render` props are mentioned, the view
    is rendered only if the path matches the requested URL.
  prefs: []
  type: TYPE_NORMAL
- en: 'A `<Route>` component with a `children` prop is rendered based on its position
    in the list of routes. For example, if the previous `<Route>` component is specified
    as the last entry in the list of routes, then it is rendered after all the preceding
    matching routes have been rendered. Also, if the previous `<Route>` component
    is listed before the matching route, then the route''s content is rendered before
    rendering the matching route''s content, as seen here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Here, when you try to access the `'/user'` path, the `<Route>` component with
    a `children` prop is rendered before rendering the route with the `'/user'` path.
  prefs: []
  type: TYPE_NORMAL
- en: Route component props
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The component that gets rendered when the `<Route>` path matches the browser's
    URL path receives certain `props`, such as `history`, `location`, `match`, and
    `staticContext`. The data provided by these props includes information pertaining
    to the route. The props are available to the component that gets rendered using
    the `component`, `render`, or `children` props of the `<Route>` component.
  prefs: []
  type: TYPE_NORMAL
- en: The `staticContext` property is set when you are rendering the application on
    the server side and it is not available (as in, set to `undefined`) in the client-side
    router that is, when using the `<BrowserRouter>` interface. Server-side rendering
    of the application is covered in the upcoming chapters.
  prefs: []
  type: TYPE_NORMAL
- en: History
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'React-Router has a dependency on the `history` package. `history` is a JavaScript
    library used in maintaining sessions in any JavaScript application. Consider the
    following quote from history’s documentation ([https://github.com/ReactTraining/history](https://github.com/ReactTraining/history)):'
  prefs: []
  type: TYPE_NORMAL
- en: '"**history** is a JavaScript library that lets you easily manage session history
    anywhere JavaScript runs. history abstracts away the differences in various environments
    and provides a minimal API that lets you manage the history stack, navigate, confirm
    navigation, and persist state between sessions."'
  prefs: []
  type: TYPE_NORMAL
- en: 'The `history` object has several properties and methods:'
  prefs: []
  type: TYPE_NORMAL
- en: '**action**: The current action, `PUSH`, `POP`, or `REPLACE`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**length**: The count of entries in the history stack'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**location**: The current location, which includes the `hash`, `pathname`, `search`,
    and `state` properties'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**hash**: Hash fragment'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**pathname**: URL path'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**search**: URL query string'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**state**: The state information provided when navigating from one route to
    the other using `location.pushState`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`block()`: A function that registers a prompt message that will be displayed
    when the user tries to navigate away from the current page.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`createHref()`: A function that constructs a URL segment; it accepts an object
    with the `pathname`, `search`, and `hash` properties.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`go(n)`: A function that navigates through the history stack. `history.go(-1)`
    moves the pointer back by one position and `history.go(1)` moves the pointer forward
    by one position in the `history` stack.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`goBack()`: A function that navigates the pointer back by one position in the
    `history` stack; the same as `history.go(-1)`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`goForward()`: A function that navigates the pointer forward by one position
    in the `history` stack; the same as `history.go(1)`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`listen(listenerFn)`: A function that registers a listener function that gets
    called whenever there''s a change in `history.location`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`push(path, state?)`: A function that navigates to the given pathname, adding
    an entry to the `history` stack. It optionally accepts a `state` parameter, which
    can be used to pass application state data.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`replace(path, state?)`: A function that navigates to the given pathname, replacing
    the current entry in the `history` stack. It also accepts an optional `state`
    parameter.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `history` object is used by React-Router internally to update the entries
    in the history stack when the user tries to navigate between pages. It's provided
    to the rendered component as a prop so that the user can be navigated to different
    pages using the aforementioned methods in the `history` object. In the next chapter,
    we will take a look at various APIs provided by React-Router that help you navigate
    to different routes defined in the application.
  prefs: []
  type: TYPE_NORMAL
- en: The location object
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `location` object gives a snapshot of data representing the current state
    of the application. It includes the following properties: `pathname`, `hash`,
    `search`, and `state`. The navigation components can provide values to these props,
    which can then be read by the rendered component that matches the browser's URL.
    As mentioned previously, we will take a look at various navigation components
    in [Chapter3](9ac59d4f-1b5c-4da6-98f0-986ac2b7e3ae.xhtml), *Using Link and NavLink
    Components to Navigate to a Route*.
  prefs: []
  type: TYPE_NORMAL
- en: The location information is also found in the `history` object; however, the `history`
    object is mutable, and thus, accessing the location in the `history` object should
    be avoided.
  prefs: []
  type: TYPE_NORMAL
- en: The match object
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `match` object contains information on how the `<Route>` path matches the
    current URL. It includes the `url`, `path`, `isExact`, and `params` properties.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s refer to one of the earlier routes where the `render` prop is used:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'When you try accessing the `/user` path, the `match` object''s properties will
    have the following values:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: '`url`: A string that returns the matched portion of the URL'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`path`: A string that returns the route''s path string, that is, the path pattern
    mentioned in the `<Route>` component''s path prop'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`params`: An object containing a list of path params passed to the route (there
    will be more on params in the upcoming sections)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`isExact`: A Boolean value; this is `true` if the URL matches the provided
    `path` prop in its entirety'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `isExact` property is `false` if only a part of the URL segment matches
    the `<Route>` component's path. For example, the `<Route>` component with the `/user` path
    doesn't match the URL of `/user/123` in its entirety, and in this case, `isExact`
    is false.
  prefs: []
  type: TYPE_NORMAL
- en: 'As mentioned earlier, a `<Route>` component with a `children` prop is rendered
    irrespective of whether or not the `path` prop matches the browser''s URL path.
    Here, the `match` object would be set to null if the path does not match the URL
    segment:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: With this `<Route>` configuration, when you try to access the `/user` path,
    the `<Route>` component with the `/sidenav` path is matched, since it has a `children` prop.
    However, here the `match` object is set to null. This helps in determining whether
    a path matched the URL segment or not for a `<Route>` component with a `children`
    prop.
  prefs: []
  type: TYPE_NORMAL
- en: Route parameters
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A `<Route>` component in React-Router can be configured to accept URL parameters
    that change for a given object. For example, to display user information for a
    given `userID`, the URL path could look like `'/user/1'` for a user with a `userID` of `'1'`, and `'/user/123'` for
    a user with a `userID` of `'123'`. The last portion of the URL is dynamic; however,
    in each instance, the rendered component would perform the same operation for
    a given `userID`.
  prefs: []
  type: TYPE_NORMAL
- en: An example of such a use case is Twitter's profile page. The page accepts `twitterID` and
    displays the feed for the given user.
  prefs: []
  type: TYPE_NORMAL
- en: 'A `<Route>` component can be configured to accept the dynamic portion in the
    URL by appending an additional path in the `''to''` prop, prefixed with a colon
    (:) as seen here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Here, the `'/:githubID'` path is dynamic, and can match paths such as `'/github/ryanflorence'` and `'/github/mjackson'` (the
    GitHub IDs of the creators of React-Router).
  prefs: []
  type: TYPE_NORMAL
- en: 'These matched URL parameters can then be consumed in the rendered component
    using `match.params`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'When you try accessing the `''/github/mjackson''` URL path, you''ll see this
    message:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'The `match.params` object contains key-value pairs of the matching params in
    the route. The `<Route>` component can also accept multiple params in the URL,
    as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: Here, the `githubID` and `twitterID` params are dynamic and can match URL paths
    such as `'/github/ryanflorence/mjackson'`. The second param, `twitterID`, can
    be read in the component using `match.params.twitterID`.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the previous `<Route>` configuration, the `githubID` and `twitterID` params
    are required params, that is, the route won''t match if both the params are not
    present in the URL path. To mark a param as optional, suffix the param with a
    question mark (`?`), as shown in the following snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding `<Route>` configuration, the `twitterID` param is marked as
    optional. This means that when you try to access the `'/github/ryanflorence'` path,
    that is, access the path without providing a value to the `twitterID` param in
    the URL, then the path will match the URL and the component will be rendered.
    However, when the component tries to access the param using `match.params.twitterID`,
    it will return `undefined`.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `<Route>` path can also be configured to accept params that match a regular
    expression, as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: Here, the `githubID` param is restricted to alphanumeric strings, and the `userID` param
    is restricted to numeric values. The param is suffixed with a regex pattern to
    define the kind of values that the `<Route>` param would accept, that is, a pattern
    that restricts the values that can be provided to the param.
  prefs: []
  type: TYPE_NORMAL
- en: Nested routes and dynamic routing
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The earlier versions of React-Router required the routes to be defined upfront,
    and the child routes to be nested inside another route, as seen here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: This code can be considered static routing, wherein the route configuration
    is required by the library when the application initializes. Here, the route with
    the `'/'` path serves as the parent of all the routes, and the route with the `'user'` path
    is a child route of `'/'`, and a parent route for the route with the `'instagram'` path.
  prefs: []
  type: TYPE_NORMAL
- en: In React-Router v4, nested routes can be defined inside the rendered components,
    that is, routes get registered as the user navigates through the application. With
    the rewrite in v4, `<Route>` is a React component, and thus can be included in
    any component's `render` method.
  prefs: []
  type: TYPE_NORMAL
- en: 'Consider a parent route as defined in `App.js` (the `<App />` root component):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: Here, the `'/category'` path is mapped to the `CategoryComponent` component.
  prefs: []
  type: TYPE_NORMAL
- en: '`CategoryComponent` can, in turn, render other routes using the same `<Route>`
    component. However, when defining routes inside the rendered component (`CategoryComponent`),
    a reference to the current matching URL is required to be specified in the `<Route>`
    component''s `to` prop. For example, a sub route with a `''/pictures''` path can
    be created using a `<Route>` component; however, an absolute path needs to be
    specified in the `to` prop, that is, `''/category/pictures''` or, more generally, `''/<current_matching_url>/pictures''`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'As mentioned earlier, the `match` prop passed to the rendered component contains
    information on how the path matched the current URL. The `match` prop''s URL property
    can be used to refer to the parent URL:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: The `CategoryComponent` defined in the preceding snippet accepts the `match` prop,
    and the routes defined in the component have path values in the format of `'${match.url}/<child_route_path>'`.
    The `match.url` template variable contains the parent route's URL value, in this
    case, `/category`. Using the same principle, routes with the paths of `'/category/pictures'`
    and `'/category/books'` are also defined.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s test these routes:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Scenario 1**: `location.pathname` is `''/category''`:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Here, the parent route is rendered and the page will render the route information
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: Here, `match.isExact` is true, since there are no additional URL segments after
    the `/category` path.
  prefs: []
  type: TYPE_NORMAL
- en: '**Scenario 2:** `location.pathname` is `''/category/pictures''` or `''/category/books''`:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'After rendering the `''/category''` parent route, the library looks for `<Route>` components
    with the paths of `''/category/pictures''` and `''/category/books''`. It finds
    one and renders the corresponding component:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: Now, `match.isExact` in the parent route (a `<Route>` component with a `'/category'`
    path) is false; however, it's true in the child route.
  prefs: []
  type: TYPE_NORMAL
- en: '**Scenario 3**: `location.pathname` is `''/category/books/popular''`:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'It''s possible to nest as many routes as you wish. Here, `''/books''` is a
    nested route, and also has another nested route, `''/popular''`, which matches
    the `''/category/books/popular''` path:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: The `match` prop is very useful in creating nested routes. These nested routes
    become accessible only when their parent route is rendered, allowing you to add
    your routes dynamically.
  prefs: []
  type: TYPE_NORMAL
- en: Dynamic routes from JSON
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A set of `<Route>` components can also be generated by looking up an array containing
    a collection of route configuration options. Each route option should contain
    the necessary details, such as `'path'` and `'component'`.
  prefs: []
  type: TYPE_NORMAL
- en: 'A collection of routes could look like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'Each object in the preceding array contains a `''path''` key specifying the
    route path, and a `''component''` key containing a reference to the component
    that you want to render when the user visits the route. The preceding collection
    can then be used inside the component''s `render` method to generate a list of
    `<Route>` components, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: The route configuration defined in `STOCK_ROUTES` is used to add a list of `<Route>`
    components when the `StockComponent` renders. The parent `<Route>` component is
    rendered at the `'/stocks'` path, hence the use of `match.url` in the path when
    generating the `<Route>` component under the `'/stocks'` path.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we learned that the `<Route>` component can be configured using
    various props. This includes using the `exact` prop to render a component only
    when the browser's URL path matches the value mentioned in the `<Route>` component's
    path; using the `strict` prop in a `<Route>` component to ensure that the URL
    path matches the trailing slash mentioned in the `path` prop; including the `sensitive`
    prop to make the `path` prop value case-sensitive; and using the `render` and
    `children` props for inline rendering. The `<Route>` component with the `children`
    prop renders irrespective of the value specified in the `path` prop. This is useful
    in cases where you have several view components in the page layout and these should
    be rendered irrespective of the value specified in the `path` prop.
  prefs: []
  type: TYPE_NORMAL
- en: The component rendered as a result of the `<Route>` path match can receive data
    as props. This includes props such as `history`, `location`, `match`, and `staticContext`.
    The `match` prop can be used to used create nested routes, that is, the `url`
    property in the `match` prop contains information that can then be used in the
    `path` prop of the `<Route>` component included in the rendered component. The `<Route>`
    components can also be added by looking up the configuration specified in an object.
    An array containing `path` and `component` information can then be used to add
    multiple routes in the application.
  prefs: []
  type: TYPE_NORMAL
- en: The `<Route>` component's `path` prop can be configured to accept URL segments
    as path params. These params can then be read by the rendered component using
    `match.params`. The params can be configured to accept certain values by specifying
    a regular expression as a suffix to the `path` param.
  prefs: []
  type: TYPE_NORMAL
