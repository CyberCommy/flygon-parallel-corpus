- en: Debugging, Tracing, and Profiling
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Tools such as PHPUnit and Behat take an automated approach to testing software.
    They give us a great level of reassurance that our application will deliver according
    to the tests. The tests, however, like the code itself, are subject to flaws.
    Be it a faulty test code or an incomplete test case, having a fully written test
    for something does not necessarily mean our code is perfect in a bug-free and
    performance-optimized way.
  prefs: []
  type: TYPE_NORMAL
- en: More often than not, there are unexpected bugs and performance issues that are
    far from obvious during development cycles, only to occasionally resurface at
    production stage. While perfect code is a far-reaching concept or, at the very
    least, a subject for debate, there certainly is more we can do to improve the
    quality of our software. To complete the canvas of software testing, a more methodical
    process and thorough insight into the application is required during its runtime.
  prefs: []
  type: TYPE_NORMAL
- en: 'This is where debugging kicks in. The term is so common among developers that
    it usually indicates the following three distinctive processes:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Debugging**: This is process of detecting and fixing an application''s bugs'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Tracing**: This is a process of logging an application''s chronologically
    relevant information'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Profiling**: This is a process of logging an application''s performance-relevant
    information'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: While the tracing and profiling processes automatically log the relevant information
    every time an application is run, the debugging process is more of a manual undertaking.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will take a closer look at the two PHP extensions that
    deal with the debugging, tracing, and profiling functionalities:'
  prefs: []
  type: TYPE_NORMAL
- en: Xdebug
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Debugging
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Tracing
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Profiling
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Zend Z-Ray
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installing Zend Server
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting up the virtual host
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using Z-Ray
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Xdebug
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Xdebug is a PHP extension that provides debugging, tracing, and profiling capabilities.
    The debugger component uses the DBGp debugging protocol in order to establish
    the communication between a PHP scripting engine and a debugger IDE. There are
    several IDEs and text editors that support the DBGp debugging protocol; the following
    are merely a few of the more popular ones:'
  prefs: []
  type: TYPE_NORMAL
- en: '**NetBeans**: This is a free cross-platform  IDE available at [https://netbeans.org/](https://netbeans.org/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Eclipse PDT**: This is a free cross-platform IDE available at [https://eclipse.org/pdt/](https://eclipse.org/pdt/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**PhpStorm**: This is a commercial cross-platform IDE available at [https://www.jetbrains.com/phpstorm/](https://www.jetbrains.com/phpstorm/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Zend Studio**: This is a commercial cross-platform IDE available at [http://www.zend.com/en/products/studio](http://www.zend.com/en/products/studio)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Sublime Text 3** : This is a commercial cross-platform text editor available
    at [https://www.sublimetext.com/3](https://www.sublimetext.com/3)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Notepad++**: This is a free Windows platform text editor available at [https://notepad-plus-plus.org/](https://notepad-plus-plus.org/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Vim**: This is a  free cross-platform text editor available at [http://www.vim.org/](http://www.vim.org/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: While the DBGp debugging protocol support may seem sufficient as a debugger
    selection factor, what really differentiates these IDEs and text editors is their
    level of support for latest versions of PHP.
  prefs: []
  type: TYPE_NORMAL
- en: With its cutting-edge PHP support and innovative solutions, PhpStorm is likely
    the most popular commercial choice among professional PHP developers. Considering
    the average hourly rate of a skilled PHP developer, the cost of tool seems all
    but expensive with regards to the abundance of features that speed up the development
    work.
  prefs: []
  type: TYPE_NORMAL
- en: 'To get a better understanding of the Xdebug capabilities, let''s go ahead and
    perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Install LAMP stack.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Install the Xdebug extension.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Install NetBeans.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Pull in the sample PHP application as our playground for debugging.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Configure debugging.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Configure tracing.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Configure profiling.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Installation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Assuming that we have a fresh Ubuntu 17.04 (Zesty Zapus) installation, installing
    the complete LAMP stack and Xdebug extension is easy via the following commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Once this process is done, opening [http://localhost/index.html](http://localhost/index.html) in
    our browser should give us a default Apache page. Now, let''s go ahead and do
    some permission changes:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Be sure to replace `user_name` with the name of the actual user on the system.
  prefs: []
  type: TYPE_NORMAL
- en: The reason for doing this permissions update is to make it possible for a user's
    NetBeans IDE to access the `/var/www/html/` directory, where our project will be
    located. Once these commands are executed, we need to log out and log in, or restart
    the computer for permissions to kick in.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can now execute the following command on the console and then open `http://localhost/index.php`
    in order to confirm whether PHP and Xdebug are up and running:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'This should give us an output indicating the presence of the Xdebug extension,
    much like the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/eccf9606-0241-4f9e-96a6-fa9ecf9b0c0b.png)'
  prefs: []
  type: TYPE_IMG
- en: 'To this point, we have merely installed the extension, but haven''t really
    enabled any of its three core features: debugging, tracing, and profiling. Before
    we go ahead with debugging, let''s quickly install NetBeans IDE. This will make
    our debugging efforts much easier. We will first need to download NetBeans for
    PHP from [https://netbeans.org/downloads/](https://netbeans.org/downloads/). Once
    downloaded and unpacked, we can execute the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'It is worth noting that the use of NetBeans IDE here is completely optional.
    We could have easily used one of the other free or even commercial solutions.
    Now would be a good time to open NetBeans IDE; click on File | New Project | Categories
    [PHP] | Projects [PHP Application with Existing Sources] and point it to our `/var/www/html/`
    directory, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/1318241c-5e05-4111-8605-f67714a168e9.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Once we fill in the required data on the Name and Location screen, clicking
    on Next brings us to the Run Configuration setup:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/a010be45-cd7b-4363-a916-6f52df2e9012.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Clicking on the Finish button finishes the project setup, and we should now
    be able to see our `index.php` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/b69cb494-43c0-499d-8ac6-50deeec4fac3.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Finally, let''s go ahead and pull in our sample application by executing the
    following console commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: The NetBeans IDE should be able to instantly pick up these changes in its Projects
    tab. To this point, we haven't really actually done any configuration or setup
    related to Xdebug's debugging, tracing, or profiling components. We merely installed
    LAMP stack, Xdebug itself, NetBeans IDE and pulled in the sample application.
    Now, let's go ahead and look into the debugging component of Xdebug.
  prefs: []
  type: TYPE_NORMAL
- en: Debugging
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The debugging feature of Xdebug can be easily turned on with the `xdebug.remote_enable=1`
    option. With modern PHP, there is usually a special `xdebug.ini` configuration
    file; otherwise, we would edit the default `php.ini` file. With our Ubuntu installation,
    we add this to the `/etc/php/7.0/apache2/conf.d/20-xdebug.ini` file as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Once the file has been modified, we need to make sure the Apache server is
    restarted:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'While `xdebug.remote_enable` is the required option to turn on the debugging feature,
    other related options include the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '`xdebug.extended_info`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`xdebug.idekey`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`xdebug.remote_addr_header`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`xdebug.remote_autostart`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`xdebug.remote_connect_back`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`xdebug.remote_cookie_expire_time`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`xdebug.remote_enable`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`xdebug.remote_handler`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`xdebug.remote_host`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`xdebug.remote_log`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`xdebug.remote_mode`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`xdebug.remote_port`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Supplemental information about individual debugger configuration options can
    be found under [https://xdebug.org/docs/all_settings](https://xdebug.org/docs/all_settings).
  prefs: []
  type: TYPE_NORMAL
- en: 'Back in NetBeans, we can turn our focus on the Debug toolbar:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/5339ee3b-1125-4ec1-a9bb-70729f9f2292.png)'
  prefs: []
  type: TYPE_IMG
- en: When we click on the Debug Project button, NetBeans kicks off a browser with
    the URL `http://localhost/index.php?XDEBUG_SESSION_START=netbeans-xdebug` and
    activates the previously disabled buttons.
  prefs: []
  type: TYPE_NORMAL
- en: 'The buttons available on the `Debug` toolbar present us with several debugging
    options:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Step Into: This tells the debugger to go into the next function call and break
    there.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Step Over: This tells the debugger to execute the next function and break afterwards.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Step Out: This tells the debugger to finish the current function and break
    after it.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Run to Cursor: This has a bit of a dual role. When used in combination with
    enabled breakpoints, it jumps directly from one breakpoint to another. When breakpoints
    are disabled, it jumps straight to the line where we positioned our cursor. We
    can, therefore, debug in a sort of free manner, as we decide on the next breakpoint
    dynamically after the debugging process is started, simply by placing our cursor
    where needed.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The Run to Cursor option seems like a sensible and straightforward first approach.
    Let''s go ahead and set several breakpoints in our sample application as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`index.php`: This is a total of six  breakpoints:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](assets/383d01fb-eb1c-490c-8dbb-cf0755f27a14.png)'
  prefs: []
  type: TYPE_IMG
- en: '`src/Foggyline/Catalog/Model/Category.php`: This is a total of one breakpoint:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](assets/d28d6691-ff54-4289-8b57-53baaaf0af70.png)'
  prefs: []
  type: TYPE_IMG
- en: '`src/Foggyline/Catalog/Block/Category/View.php`: This is a total of one breakpoint:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](assets/1f760dfb-9037-4f75-adb2-39ff842b3c88.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The following steps outline a debugging using only the Run to Cursor button:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Click on Debug Project. This jumps to line 3 of `index.php` and records the
    following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/96a3c8a6-89c3-4e8d-b092-42f85d9758a4.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Click on Run to Cursor. This jumps to line 11 of `index.php` and records the
    following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/60f7f629-e92e-46ed-ba8e-7ef2b068f307.png)'
  prefs: []
  type: TYPE_IMG
- en: Notice how the Breakpoints tab now shows a green arrow next to index.php:11.
  prefs: []
  type: TYPE_NORMAL
- en: 'Click on Run to Cursor. This jumps to line 15 of `src/Foggyline/Catalog/Model/Category.php`
    and records the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/309c8e91-2001-4bde-863f-7ed7624fbfbe.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Click on Run to Cursor. This jumps to line15 of the `index.php` file and records
    the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/160a741c-0c85-4cdf-b460-6a630ea7359d.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Click on Run to Cursor. This jumps to line 18 of the `index.php` file and records
    the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/1456b18b-d0bd-461d-b9aa-50d19a38e9f0.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Click on Run to Cursor. This jumps to line 23 of the `index.php` file and records
    the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/b881cbaa-6b2b-48b6-b1c0-df032f7d7569.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Click on Run to Cursor. This jumps to line 25 of the `index.php` file and records
    the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/f729916a-3732-4767-81fd-13cb4209bb1c.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Click on Run to Cursor. This jumps to line 22 of the `src/Foggyline/Catalog/Block/Category/View.php`
    file and records the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/f1db855c-81dc-4cd4-9a94-f36fe7d91391.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Click on Run to Cursor. This jumps to line 22 of the `src/Foggyline/Catalog/Block/Category/View.php`
    file and records the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/bbd40601-aad0-4028-aa27-c97b0cecf622.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Click on Run to Cursor. This jumps to line 22 of the `src/Foggyline/Catalog/Block/Category/View.php`
    file and records the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/b8aaa9d1-1405-4b1a-ae7c-85399275bfd3.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Click on Run to Cursor. This jumps to line 27 of the `index.php` file and records
    the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/bec133f0-fc15-430f-9d38-f8c6f1f213fa.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Click on Run to Cursor. This leaves us at line 27 of the `index.php` file as
    it reaches our last debug point where it records the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/1814bfea-022c-4d64-ac2a-cee65048bf34.png)'
  prefs: []
  type: TYPE_IMG
- en: Now we can click on the Finish Debugger Session button.
  prefs: []
  type: TYPE_NORMAL
- en: Throughout this twelve-step process, we can clearly observe a behavior of IDE
    and the values it manages to record. It makes it easy to target specific bits
    and pieces of our code and then observe the variables as they change during the
    debugging process.
  prefs: []
  type: TYPE_NORMAL
- en: Note that in between steps 10 and 11, we never see the Variables tab recording
    values for our third product. This is because variables get recorded after we
    move past the given debug breakpoint, which, in this case, shifts the context
    from the `View.php` class file onto an `index.php` file. This is where clicking
    on the Step Into button might have come in handy, as it would enable us to drill
    further down the code within the body of `while` during the execution of the third
    loop, thus yielding values for the third product.
  prefs: []
  type: TYPE_NORMAL
- en: We should encourage mixing and using all of the debugging options in order to
    properly reach and read-out the variables of interest.
  prefs: []
  type: TYPE_NORMAL
- en: Tracing
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The tracing feature of Xdebug can be easily turned on with the `xdebug.auto_trace=1` option.
    With our Ubuntu installation, we add this to the `/etc/php/7.0/apache2/conf.d/20-xdebug.ini`
    file as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Once the file has been modified, we need to make sure the Apache server is
    re started :'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'While `xdebug.auto_trace` is the required option to turn on the tracing feature,
    other related options include the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '`xdebug.collect_assignments`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`xdebug.collect_includes`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`xdebug.collect_params`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`xdebug.collect_return`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`xdebug.show_mem_delta`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`xdebug.trace_enable_trigger`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`xdebug.trace_enable_trigger_value`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`xdebug.trace_format`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`xdebug.trace_options`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`xdebug.trace_output_dir`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`xdebug.trace_output_name`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`xdebug.var_display_max_children`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`xdebug.var_display_max_data`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`xdebug.var_display_max_depth`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Supplemental information about individual *tracing* configuration options can
    be found at [https://xdebug.org/docs/execution_trace](https://xdebug.org/docs/execution_trace).
  prefs: []
  type: TYPE_NORMAL
- en: Unlike the debugging feature, which we control from IDE or text editor, we don't
    get to control tracing. By default, the tracing feature creates a different `trace.%c` file
    under the `/tmp` directory each time an application is run. What this means in
    the context of web application is that, each time we refresh the page in the browser,
    the tracing feature creates a `trace.%c` file for us.
  prefs: []
  type: TYPE_NORMAL
- en: 'Our specific example application, once executed, results in a trace file, much
    like the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/15d84c26-6ffa-4369-b0fa-e3f34da53eb9.png)'
  prefs: []
  type: TYPE_IMG
- en: The output itself is relatively easy for a developer to read and understand.
    Surely, this gets a bit clunky when it comes to large applications, as we end
    up with a large trace file. Still, knowing the bits of code we are targeting,
    we can search the file and find the needed occurrences of the code. Let's assume
    that we are looking for the use of the `number_format()` function throughout our
    code. A quick search for `number_format` would point us to line 22 of `Category/View.php`,
    with an execution time next to it. This is a valuable piece of information for
    the overall debugging efforts.
  prefs: []
  type: TYPE_NORMAL
- en: Profiling
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The profiling feature of Xdebug can be easily turned on with the `xdebug.profiler_enable=1` option.
    With our Ubuntu installation, we will modify the `/etc/php/7.0/apache2/conf.d/20-xdebug.ini`
    file as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Once the file has been modified, we need to make sure the Apache server is
    restarted :'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'While `xdebug.profiler_enable` is the required option to turn on the profiling feature,
    other related options include the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '`xdebug.profiler_aggregate`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`xdebug.profiler_append`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`xdebug.profiler_enable`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`xdebug.profiler_enable_trigger`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`xdebug.profiler_enable_trigger_value`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`xdebug.profiler_output_dir`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`xdebug.profiler_output_name`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Supplemental information about individual profiler configuration options can
    be found at [https://xdebug.org/docs/profiler](https://xdebug.org/docs/profiler).
  prefs: []
  type: TYPE_NORMAL
- en: Similar to tracing, we don't get to control the profiling feature from IDE or
    text editor. By default, the profiling feature creates a different `cachegrind.out.%p` file
    under the `/tmp` directory each time an application is executed.
  prefs: []
  type: TYPE_NORMAL
- en: 'Our specific example application, once executed, results in a cachegrind file,
    much like the following screenshot (partial output):'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/7994b47d-b7f8-41c6-aefa-dfff1832babd.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The information contained here is far less readable than that of a tracing file,
    which is alright as the two target different types of information. The cachegrind
    file can be pulled into an application such as KCachegrind or QCacheGrind, which
    then gives us a much more user -friendly and visual representation of the captured
    information :'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/b35fbde8-3648-4354-8feb-9a0519cc15f0.png)'
  prefs: []
  type: TYPE_IMG
- en: The cachegrind file output delivers an important performance-related information.
    We get an insight into all of the functions used within the application, sorted
    by time spent within an individual function and all of its children. This allows
    us to spot performance bottlenecks, even if it is within the millisecond time
    frame.
  prefs: []
  type: TYPE_NORMAL
- en: Zend Z-Ray
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The *Rougue Wave Software* company offers a commercial PHP server called Zend
    Server. One of Zend Server's outstanding features is its **Z-Ray** extension.
    Seemingly analogous to Xdebug’s tracing and profiling functionality, Z-Ray offers
    comprehensive information capturing and  an improved user experience. Captured
    information ranges from execution times, errors and warnings, database queries,
    and function calls to request information. These are provided in a form that resembles
    a built-in browser’s developer tools, making it easy for the developer to retrieve
    a vital piece of profiling information within seconds.
  prefs: []
  type: TYPE_NORMAL
- en: The Z-Ray extension itself is free, and can be used independently off the commercially
    available Zend Server. We can install it just like any other PHP extension. Although,
    at the time of writing, the stand-alone Z-Ray extension is available only for
    the PHP 5.5 and 5.6 versions, which are now considered outdated.
  prefs: []
  type: TYPE_NORMAL
- en: Installing Zend Server
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Given that this book is targeting PHP 7, moving forward, we will grab a free
    trial version of the Zend Server and install it. We can do so by opening the official
    Zend page and clicking on the Download Free Trial button:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/78bc0714-fda2-4cc6-bc27-514b6edba1d2.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Assuming that we are using the fresh Ubuntu 17.04 installation, Zend''s download
    service is likely to offer us a `tar.gz` archive download:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/5c77d43c-a0c3-46bb-9150-4ff70f482ff0.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Once downloaded and unpacked, we need to trigger the `install_zs.sh` command
    with the PHP version argument as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/4a9e93ce-7098-4a5c-b9e5-91b87ae43cbf.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Upon installation completion, the console gives us information about how to
    access the server administration interface through the browser :'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/dbcbf25d-9fa9-4e37-9207-a732b8fe0d7e.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Opening `https://localhost:10082/ZendServer` triggers the License Agreement
    step of the Launch Zend Server process:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/1b684742-0689-434e-ba02-6a91dece3d1c.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Agreeing to the license agreement and clicking on the Next button takes us
    to the Profile step of the Launch Zend Server process:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/b804dd91-9008-40be-8ae6-ad417d406653.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The Profile step offers three distinctive options: Development, Production
    (Single Server), and Production (Create or Join a Cluster). Choosing the Development
    option, we click on the Next button, which takes us to the User Passwords step
    of the Launch Zend Server process:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/711c548b-e761-4401-b191-bb96eae458c5.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Here we provide admin and developer with user passwords. Clicking on the Next
    button takes us to the Summary step of the Launch Zend Server process:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/454c67c5-5225-4b7e-97e0-e92390885e4e.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The summary step merely confirms our previous selections and entries. By clicking
    on the Launch button, we finalize the Launch Zend Server process and land on the
    Getting Started page:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/a6d9c047-c008-488c-a5b2-0293ad0df0b4.png)'
  prefs: []
  type: TYPE_IMG
- en: The Zend Server provides a rich interface for managing pretty much every aspect
    of the running sever. From here, we can manage virtual hosts, applications, job
    queues, caching, security, and other bits. Before we can focus on Z-Ray functionality,
    we need to set up our test application. We will use the same application we used
    with Xdebug, mapped on the `test.loc` domain.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up the virtual host
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We first amend the `/etc/hosts` file by adding the `127.0.0.1 test.loc` line
    entry to it.
  prefs: []
  type: TYPE_NORMAL
- en: 'With the `test.loc` host now added to the hosts file, we turn back to the Zend
    Server and click on the Add virtual host button under the Applications | Virtual
    Hosts screen. This takes us to the Properties step of the Add Virtual Host process:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/25c18bc8-ea48-46cc-a414-0c26f7d68a9d.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Here we enter `test.loc` for Virtual Host Name and `80` for Listen on Port.
    Clicking on the Next button takes us to the SSL Configuration step of the Add
    Virtual Host process:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/b8d4b9cb-635d-4bca-a730-552deede5650.png)'
  prefs: []
  type: TYPE_IMG
- en: 'To keep things simple, let''s just leave the This virtual host does not use
    SSL selection active and click on the Next button. This takes us to the Template
    step of the Add Virtual Host process:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/f4785716-fab8-4310-ba39-3cecce5c75fa.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Likewise, let’s just leave the Use the default virtual host configuration template
    selection active and click on the Next button. This takes us to the Summary step
    of the Add Virtual Host process:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/20213edc-6f36-4a63-a667-c906062262d6.png)'
  prefs: []
  type: TYPE_IMG
- en: 'To complete the virtual host setup, we click on the Finish button. Our `test.loc`
    virtual host should now be created, showing details such as the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/6b153af0-2a80-4500-a2fc-de9577bc6686.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The document root used for our newly created virtual host points to the `/usr/local/zend/var/apps/http/test.loc/80/_docroot_`
    directory. This is where we will dump our sample application using the following `git
    clone` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'The output of the preceding command is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/40e9359f-ad68-4977-ab11-9afc62b6b9ca.png)'
  prefs: []
  type: TYPE_IMG
- en: 'With  the code in place, accessing the `http://test.loc` URL within the browser
    should give us the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/b552103b-6a82-4c6a-ad9e-27937067e63d.png)'
  prefs: []
  type: TYPE_IMG
- en: Using Z-Ray
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now that we have our test application up and running, we can finally focus
    on the Z-Ray functionality. Within the Zend Server administration interface, under
    Z-Ray | Mode, we need to make sure that the Enabled option is the active one.
    Now, if we access the `http://test.loc` URL within the browser, we should be able
    to see the Z-Ray toolbar at the bottom of the page:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/f6e9ff1c-9648-470b-b97b-8d189644520f.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The toolbar itself consists of several key sections, each of which gathers
    a specific metric:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Page Requests :'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](assets/f27eaf69-5749-4417-aa62-e75fd5f21d6a.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Execution Time and Memory Peak:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](assets/5041377a-e48e-40a2-aba0-864b7fed093b.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Monitor Events:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](assets/35ccd405-460d-4449-a77b-e0e2c18d4871.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Errors & Warnings:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](assets/011e3e78-50ba-4371-a845-dea83ae746c8.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Database Queries:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](assets/ce9b1877-5521-4db0-b2cb-104b621cdeca.png)'
  prefs: []
  type: TYPE_IMG
- en: 'While our specific sample application has no database interactions, the following
    output illustrates Z-Ray capturing raw SQL database queries as well as their execution
    times from a resource-intense Magento eCommerce platform:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/743fd037-ddcc-4e22-b9c3-2db841b2c586.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Functions:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](assets/d5e769dd-68b4-4199-8c15-a27702ae6155.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Request Info:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](assets/78345d2f-bf13-4fec-aee0-2277fbd45748.png)'
  prefs: []
  type: TYPE_IMG
- en: Z-Ray acts like a mix of Xdebug's trace and profile functionalities, delivered
    straight into the browser. This makes it an extremely handy tool for developers. Capturing rawSQL
    queries adds even more value to the tool, as, usually, these tend to be the unexpected
    performance bottlenecks.
  prefs: []
  type: TYPE_NORMAL
- en: The Z-Ray feature can be easily enabled only for a specific host. The way to
    do this is by activating the Selective option under the Z-Ray | Mode screen. This
    type of setup makes it convenient to profile production sites.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Throughout this section, we touched upon three unique types of process we contribute
    to overall application testing. Distinctively labeled as debugging, tracing, and
    profiling, these processes provide a unique and remarkably informative perspective
    on our application inner bits. While tracing and profiling gather application
    performance and path-of-execution data for us in a sort of hands-free mode, debugging
    allows for a unique experience of tapping into a specific bit of code. Whether
    we are a seasonal or a full-time software developer, debugging, tracing, and profiling are
    absolutely essential skills to master. Without them, resolving the really nasty
    bugs or writing performance-optimized applications becomes a whole new challenge.
  prefs: []
  type: TYPE_NORMAL
- en: Moving forward, we will take a closer look at the landscape and available choices
    around PHP application hosting, provisioning, and deployment.
  prefs: []
  type: TYPE_NORMAL
