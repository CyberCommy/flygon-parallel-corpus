- en: Debugging, Tracing, and Profiling
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 调试、跟踪和分析
- en: Tools such as PHPUnit and Behat take an automated approach to testing software.
    They give us a great level of reassurance that our application will deliver according
    to the tests. The tests, however, like the code itself, are subject to flaws.
    Be it a faulty test code or an incomplete test case, having a fully written test
    for something does not necessarily mean our code is perfect in a bug-free and
    performance-optimized way.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 诸如PHPUnit和Behat之类的工具采用自动化方法来测试软件。它们给了我们很大的保证，即我们的应用程序将按照测试结果交付。然而，测试本身，就像代码本身一样，也会存在缺陷。无论是错误的测试代码还是不完整的测试用例，为某些东西编写完整的测试并不一定意味着我们的代码在没有错误和性能优化的情况下是完美的。
- en: More often than not, there are unexpected bugs and performance issues that are
    far from obvious during development cycles, only to occasionally resurface at
    production stage. While perfect code is a far-reaching concept or, at the very
    least, a subject for debate, there certainly is more we can do to improve the
    quality of our software. To complete the canvas of software testing, a more methodical
    process and thorough insight into the application is required during its runtime.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 往往在开发周期中会出现意想不到的错误和性能问题，只有偶尔在生产阶段才会重新出现。虽然完美的代码是一个遥不可及的概念，或者至少是一个有争议的话题，但我们确实可以做更多来提高软件的质量。为了完成软件测试的画布，需要在运行时对应用程序进行更系统的过程和深入的洞察。
- en: 'This is where debugging kicks in. The term is so common among developers that
    it usually indicates the following three distinctive processes:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是调试开始的地方。这个术语在开发人员中非常常见，通常指的是以下三个独特的过程：
- en: '**Debugging**: This is process of detecting and fixing an application''s bugs'
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 调试：这是检测和修复应用程序错误的过程
- en: '**Tracing**: This is a process of logging an application''s chronologically
    relevant information'
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 跟踪：这是记录应用程序的时间顺序相关信息的过程
- en: '**Profiling**: This is a process of logging an application''s performance-relevant
    information'
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 分析：这是记录应用程序性能相关信息的过程
- en: While the tracing and profiling processes automatically log the relevant information
    every time an application is run, the debugging process is more of a manual undertaking.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然跟踪和分析过程在每次运行应用程序时会自动记录相关信息，但调试过程更多是手动进行的。
- en: 'In this chapter, we will take a closer look at the two PHP extensions that
    deal with the debugging, tracing, and profiling functionalities:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将更仔细地看看处理调试、跟踪和分析功能的两个PHP扩展：
- en: Xdebug
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Xdebug
- en: Installation
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装
- en: Debugging
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 调试
- en: Tracing
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 跟踪
- en: Profiling
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 分析
- en: Zend Z-Ray
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Zend Z-Ray
- en: Installing Zend Server
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装Zend Server
- en: Setting up the virtual host
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置虚拟主机
- en: Using Z-Ray
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Z-Ray
- en: Xdebug
  id: totrans-18
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Xdebug
- en: 'Xdebug is a PHP extension that provides debugging, tracing, and profiling capabilities.
    The debugger component uses the DBGp debugging protocol in order to establish
    the communication between a PHP scripting engine and a debugger IDE. There are
    several IDEs and text editors that support the DBGp debugging protocol; the following
    are merely a few of the more popular ones:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: Xdebug是一个PHP扩展，提供了调试、跟踪和分析的功能。调试器组件使用DBGp调试协议来建立PHP脚本引擎和调试器IDE之间的通信。有几个IDE和文本编辑器支持DBGp调试协议；以下仅是一些较受欢迎的选择：
- en: '**NetBeans**: This is a free cross-platform  IDE available at [https://netbeans.org/](https://netbeans.org/)'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: NetBeans：这是一个免费的跨平台IDE，可以在[https://netbeans.org/](https://netbeans.org/)上找到
- en: '**Eclipse PDT**: This is a free cross-platform IDE available at [https://eclipse.org/pdt/](https://eclipse.org/pdt/)'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Eclipse PDT：这是一个免费的跨平台IDE，可以在[https://eclipse.org/pdt/](https://eclipse.org/pdt/)上找到
- en: '**PhpStorm**: This is a commercial cross-platform IDE available at [https://www.jetbrains.com/phpstorm/](https://www.jetbrains.com/phpstorm/)'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: PhpStorm：这是一个商业跨平台的IDE，可以在[https://www.jetbrains.com/phpstorm/](https://www.jetbrains.com/phpstorm/)上找到
- en: '**Zend Studio**: This is a commercial cross-platform IDE available at [http://www.zend.com/en/products/studio](http://www.zend.com/en/products/studio)'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Zend Studio：这是一个商业跨平台的IDE，可以在[http://www.zend.com/en/products/studio](http://www.zend.com/en/products/studio)上找到
- en: '**Sublime Text 3** : This is a commercial cross-platform text editor available
    at [https://www.sublimetext.com/3](https://www.sublimetext.com/3)'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Sublime Text 3：这是一个商业跨平台文本编辑器，可以在[https://www.sublimetext.com/3](https://www.sublimetext.com/3)上找到
- en: '**Notepad++**: This is a free Windows platform text editor available at [https://notepad-plus-plus.org/](https://notepad-plus-plus.org/)'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Notepad++：这是一个免费的Windows平台文本编辑器，可以在[https://notepad-plus-plus.org/](https://notepad-plus-plus.org/)上找到
- en: '**Vim**: This is a  free cross-platform text editor available at [http://www.vim.org/](http://www.vim.org/)'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Vim：这是一个免费的跨平台文本编辑器，可以在[http://www.vim.org/](http://www.vim.org/)上找到
- en: While the DBGp debugging protocol support may seem sufficient as a debugger
    selection factor, what really differentiates these IDEs and text editors is their
    level of support for latest versions of PHP.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然DBGp调试协议支持可能看起来足够作为调试器选择因素，但真正区分这些IDE和文本编辑器的是它们对最新版本PHP的支持程度。
- en: With its cutting-edge PHP support and innovative solutions, PhpStorm is likely
    the most popular commercial choice among professional PHP developers. Considering
    the average hourly rate of a skilled PHP developer, the cost of tool seems all
    but expensive with regards to the abundance of features that speed up the development
    work.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 凭借其尖端的PHP支持和创新解决方案，PhpStorm很可能是专业PHP开发人员中最受欢迎的商业选择。考虑到熟练的PHP开发人员的平均小时费率，工具的成本似乎并不昂贵，因为它拥有丰富的功能，可以加快开发工作。
- en: 'To get a better understanding of the Xdebug capabilities, let''s go ahead and
    perform the following steps:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 为了更好地了解Xdebug的功能，让我们继续执行以下步骤：
- en: Install LAMP stack.
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装LAMP堆栈。
- en: Install the Xdebug extension.
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装Xdebug扩展。
- en: Install NetBeans.
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装NetBeans。
- en: Pull in the sample PHP application as our playground for debugging.
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 拉取示例PHP应用程序作为我们调试的游乐场。
- en: Configure debugging.
  id: totrans-34
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 配置调试。
- en: Configure tracing.
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 配置跟踪。
- en: Configure profiling.
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 配置分析。
- en: Installation
  id: totrans-37
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装
- en: 'Assuming that we have a fresh Ubuntu 17.04 (Zesty Zapus) installation, installing
    the complete LAMP stack and Xdebug extension is easy via the following commands:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们有一个全新的Ubuntu 17.04（Zesty Zapus）安装，通过以下命令安装完整的LAMP堆栈和Xdebug扩展非常容易：
- en: '[PRE0]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Once this process is done, opening [http://localhost/index.html](http://localhost/index.html) in
    our browser should give us a default Apache page. Now, let''s go ahead and do
    some permission changes:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 完成此过程后，打开浏览器中的[http://localhost/index.html](http://localhost/index.html)应该会给我们一个默认的Apache页面。现在，让我们继续进行一些权限更改：
- en: '[PRE1]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Be sure to replace `user_name` with the name of the actual user on the system.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 请确保将`user_name`替换为系统上实际用户的名称。
- en: The reason for doing this permissions update is to make it possible for a user's
    NetBeans IDE to access the `/var/www/html/` directory, where our project will be
    located. Once these commands are executed, we need to log out and log in, or restart
    the computer for permissions to kick in.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 进行此权限更新的原因是为了使用户的NetBeans IDE能够访问`/var/www/html/`目录，这是我们项目将位于的地方。执行这些命令后，我们需要注销并重新登录，或者重新启动计算机以使权限生效。
- en: 'We can now execute the following command on the console and then open `http://localhost/index.php`
    in order to confirm whether PHP and Xdebug are up and running:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以在控制台上执行以下命令，然后打开`http://localhost/index.php`以确认PHP和Xdebug是否正常运行：
- en: '[PRE2]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'This should give us an output indicating the presence of the Xdebug extension,
    much like the following screenshot:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 这应该给我们一个输出，指示Xdebug扩展的存在，就像以下屏幕截图一样：
- en: '![](assets/eccf9606-0241-4f9e-96a6-fa9ecf9b0c0b.png)'
  id: totrans-47
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/eccf9606-0241-4f9e-96a6-fa9ecf9b0c0b.png)'
- en: 'To this point, we have merely installed the extension, but haven''t really
    enabled any of its three core features: debugging, tracing, and profiling. Before
    we go ahead with debugging, let''s quickly install NetBeans IDE. This will make
    our debugging efforts much easier. We will first need to download NetBeans for
    PHP from [https://netbeans.org/downloads/](https://netbeans.org/downloads/). Once
    downloaded and unpacked, we can execute the following command:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们只是安装了扩展，但实际上还没有启用其三个核心功能：调试、跟踪和分析。在进行调试之前，让我们快速安装NetBeans IDE。这将使我们的调试工作更加容易。我们首先需要从[https://netbeans.org/downloads/](https://netbeans.org/downloads/)下载PHP的NetBeans。下载并解压后，我们可以执行以下命令：
- en: '[PRE3]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'It is worth noting that the use of NetBeans IDE here is completely optional.
    We could have easily used one of the other free or even commercial solutions.
    Now would be a good time to open NetBeans IDE; click on File | New Project | Categories
    [PHP] | Projects [PHP Application with Existing Sources] and point it to our `/var/www/html/`
    directory, as shown in the following screenshot:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 值得注意的是，在这里使用NetBeans IDE是完全可选的。我们完全可以使用其他免费或商业解决方案。现在是打开NetBeans IDE的好时机；单击文件|新建项目|类别[PHP]|项目[具有现有源的PHP应用程序]，并将其指向我们的`/var/www/html/`目录，如下面的屏幕截图所示：
- en: '![](assets/1318241c-5e05-4111-8605-f67714a168e9.png)'
  id: totrans-51
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/1318241c-5e05-4111-8605-f67714a168e9.png)'
- en: 'Once we fill in the required data on the Name and Location screen, clicking
    on Next brings us to the Run Configuration setup:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 在“名称和位置”屏幕上填写所需数据后，单击“下一步”将我们带到“运行配置”设置：
- en: '![](assets/a010be45-cd7b-4363-a916-6f52df2e9012.png)'
  id: totrans-53
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/a010be45-cd7b-4363-a916-6f52df2e9012.png)'
- en: 'Clicking on the Finish button finishes the project setup, and we should now
    be able to see our `index.php` file:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 单击“完成”按钮完成项目设置，现在我们应该能够看到我们的`index.php`文件：
- en: '![](assets/b69cb494-43c0-499d-8ac6-50deeec4fac3.png)'
  id: totrans-55
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/b69cb494-43c0-499d-8ac6-50deeec4fac3.png)'
- en: 'Finally, let''s go ahead and pull in our sample application by executing the
    following console commands:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，让我们执行以下控制台命令来引入我们的示例应用程序：
- en: '[PRE4]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: The NetBeans IDE should be able to instantly pick up these changes in its Projects
    tab. To this point, we haven't really actually done any configuration or setup
    related to Xdebug's debugging, tracing, or profiling components. We merely installed
    LAMP stack, Xdebug itself, NetBeans IDE and pulled in the sample application.
    Now, let's go ahead and look into the debugging component of Xdebug.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: NetBeans IDE应该能够立即在其项目选项卡中捕捉到这些更改。到目前为止，我们实际上还没有进行任何与Xdebug的调试、跟踪或分析组件相关的配置或设置。我们只是安装了LAMP堆栈、Xdebug本身、NetBeans
    IDE并引入了示例应用程序。现在，让我们继续研究Xdebug的调试组件。
- en: Debugging
  id: totrans-59
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 调试
- en: 'The debugging feature of Xdebug can be easily turned on with the `xdebug.remote_enable=1`
    option. With modern PHP, there is usually a special `xdebug.ini` configuration
    file; otherwise, we would edit the default `php.ini` file. With our Ubuntu installation,
    we add this to the `/etc/php/7.0/apache2/conf.d/20-xdebug.ini` file as follows:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: Xdebug的调试功能可以通过`xdebug.remote_enable=1`选项轻松启用。对于现代PHP，通常会有一个特殊的`xdebug.ini`配置文件；否则，我们将编辑默认的`php.ini`文件。在我们的Ubuntu安装中，我们将其添加到`/etc/php/7.0/apache2/conf.d/20-xdebug.ini`文件中，如下所示：
- en: '[PRE5]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Once the file has been modified, we need to make sure the Apache server is
    restarted:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 文件修改后，我们需要确保Apache服务器已重新启动：
- en: '[PRE6]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'While `xdebug.remote_enable` is the required option to turn on the debugging feature,
    other related options include the following:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然`xdebug.remote_enable`是打开调试功能的必选项，但其他相关选项包括以下内容：
- en: '`xdebug.extended_info`'
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`xdebug.extended_info`'
- en: '`xdebug.idekey`'
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`xdebug.idekey`'
- en: '`xdebug.remote_addr_header`'
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`xdebug.remote_addr_header`'
- en: '`xdebug.remote_autostart`'
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`xdebug.remote_autostart`'
- en: '`xdebug.remote_connect_back`'
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`xdebug.remote_connect_back`'
- en: '`xdebug.remote_cookie_expire_time`'
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`xdebug.remote_cookie_expire_time`'
- en: '`xdebug.remote_enable`'
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`xdebug.remote_enable`'
- en: '`xdebug.remote_handler`'
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`xdebug.remote_handler`'
- en: '`xdebug.remote_host`'
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`xdebug.remote_host`'
- en: '`xdebug.remote_log`'
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`xdebug.remote_log`'
- en: '`xdebug.remote_mode`'
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`xdebug.remote_mode`'
- en: '`xdebug.remote_port`'
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`xdebug.remote_port`'
- en: Supplemental information about individual debugger configuration options can
    be found under [https://xdebug.org/docs/all_settings](https://xdebug.org/docs/all_settings).
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 有关各个调试器配置选项的补充信息可以在[https://xdebug.org/docs/all_settings](https://xdebug.org/docs/all_settings)下找到。
- en: 'Back in NetBeans, we can turn our focus on the Debug toolbar:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 回到NetBeans，我们可以把注意力转向调试工具栏：
- en: '![](assets/5339ee3b-1125-4ec1-a9bb-70729f9f2292.png)'
  id: totrans-79
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/5339ee3b-1125-4ec1-a9bb-70729f9f2292.png)'
- en: When we click on the Debug Project button, NetBeans kicks off a browser with
    the URL `http://localhost/index.php?XDEBUG_SESSION_START=netbeans-xdebug` and
    activates the previously disabled buttons.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
- en: 'The buttons available on the `Debug` toolbar present us with several debugging
    options:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
- en: 'Step Into: This tells the debugger to go into the next function call and break
    there.'
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Step Over: This tells the debugger to execute the next function and break afterwards.'
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Step Out: This tells the debugger to finish the current function and break
    after it.'
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Run to Cursor: This has a bit of a dual role. When used in combination with
    enabled breakpoints, it jumps directly from one breakpoint to another. When breakpoints
    are disabled, it jumps straight to the line where we positioned our cursor. We
    can, therefore, debug in a sort of free manner, as we decide on the next breakpoint
    dynamically after the debugging process is started, simply by placing our cursor
    where needed.'
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The Run to Cursor option seems like a sensible and straightforward first approach.
    Let''s go ahead and set several breakpoints in our sample application as follows:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
- en: '`index.php`: This is a total of six  breakpoints:'
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](assets/383d01fb-eb1c-490c-8dbb-cf0755f27a14.png)'
  id: totrans-88
  prefs: []
  type: TYPE_IMG
- en: '`src/Foggyline/Catalog/Model/Category.php`: This is a total of one breakpoint:'
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](assets/d28d6691-ff54-4289-8b57-53baaaf0af70.png)'
  id: totrans-90
  prefs: []
  type: TYPE_IMG
- en: '`src/Foggyline/Catalog/Block/Category/View.php`: This is a total of one breakpoint:'
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](assets/1f760dfb-9037-4f75-adb2-39ff842b3c88.png)'
  id: totrans-92
  prefs: []
  type: TYPE_IMG
- en: 'The following steps outline a debugging using only the Run to Cursor button:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
- en: 'Click on Debug Project. This jumps to line 3 of `index.php` and records the
    following:'
  id: totrans-94
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/96a3c8a6-89c3-4e8d-b092-42f85d9758a4.png)'
  id: totrans-95
  prefs: []
  type: TYPE_IMG
- en: 'Click on Run to Cursor. This jumps to line 11 of `index.php` and records the
    following:'
  id: totrans-96
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/60f7f629-e92e-46ed-ba8e-7ef2b068f307.png)'
  id: totrans-97
  prefs: []
  type: TYPE_IMG
- en: Notice how the Breakpoints tab now shows a green arrow next to index.php:11.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
- en: 'Click on Run to Cursor. This jumps to line 15 of `src/Foggyline/Catalog/Model/Category.php`
    and records the following:'
  id: totrans-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/309c8e91-2001-4bde-863f-7ed7624fbfbe.png)'
  id: totrans-100
  prefs: []
  type: TYPE_IMG
- en: 'Click on Run to Cursor. This jumps to line15 of the `index.php` file and records
    the following:'
  id: totrans-101
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/160a741c-0c85-4cdf-b460-6a630ea7359d.png)'
  id: totrans-102
  prefs: []
  type: TYPE_IMG
- en: 'Click on Run to Cursor. This jumps to line 18 of the `index.php` file and records
    the following:'
  id: totrans-103
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/1456b18b-d0bd-461d-b9aa-50d19a38e9f0.png)'
  id: totrans-104
  prefs: []
  type: TYPE_IMG
- en: 'Click on Run to Cursor. This jumps to line 23 of the `index.php` file and records
    the following:'
  id: totrans-105
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/b881cbaa-6b2b-48b6-b1c0-df032f7d7569.png)'
  id: totrans-106
  prefs: []
  type: TYPE_IMG
- en: 'Click on Run to Cursor. This jumps to line 25 of the `index.php` file and records
    the following:'
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/f729916a-3732-4767-81fd-13cb4209bb1c.png)'
  id: totrans-108
  prefs: []
  type: TYPE_IMG
- en: 'Click on Run to Cursor. This jumps to line 22 of the `src/Foggyline/Catalog/Block/Category/View.php`
    file and records the following:'
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/f1db855c-81dc-4cd4-9a94-f36fe7d91391.png)'
  id: totrans-110
  prefs: []
  type: TYPE_IMG
- en: 'Click on Run to Cursor. This jumps to line 22 of the `src/Foggyline/Catalog/Block/Category/View.php`
    file and records the following:'
  id: totrans-111
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/bbd40601-aad0-4028-aa27-c97b0cecf622.png)'
  id: totrans-112
  prefs: []
  type: TYPE_IMG
- en: 'Click on Run to Cursor. This jumps to line 22 of the `src/Foggyline/Catalog/Block/Category/View.php`
    file and records the following:'
  id: totrans-113
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/b8aaa9d1-1405-4b1a-ae7c-85399275bfd3.png)'
  id: totrans-114
  prefs: []
  type: TYPE_IMG
- en: 'Click on Run to Cursor. This jumps to line 27 of the `index.php` file and records
    the following:'
  id: totrans-115
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/bec133f0-fc15-430f-9d38-f8c6f1f213fa.png)'
  id: totrans-116
  prefs: []
  type: TYPE_IMG
- en: 'Click on Run to Cursor. This leaves us at line 27 of the `index.php` file as
    it reaches our last debug point where it records the following:'
  id: totrans-117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/1814bfea-022c-4d64-ac2a-cee65048bf34.png)'
  id: totrans-118
  prefs: []
  type: TYPE_IMG
- en: Now we can click on the Finish Debugger Session button.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
- en: Throughout this twelve-step process, we can clearly observe a behavior of IDE
    and the values it manages to record. It makes it easy to target specific bits
    and pieces of our code and then observe the variables as they change during the
    debugging process.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
- en: Note that in between steps 10 and 11, we never see the Variables tab recording
    values for our third product. This is because variables get recorded after we
    move past the given debug breakpoint, which, in this case, shifts the context
    from the `View.php` class file onto an `index.php` file. This is where clicking
    on the Step Into button might have come in handy, as it would enable us to drill
    further down the code within the body of `while` during the execution of the third
    loop, thus yielding values for the third product.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，在步骤10和11之间，我们从未看到变量标签记录第三个产品的值。这是因为变量在我们通过给定的调试断点之后记录，而在这种情况下，它将上下文从`View.php`类文件转移到`index.php`文件。这就是点击“步入”按钮可能会有用的地方，因为它可以使我们在第三个循环的执行期间在`while`的代码内部进一步深入，从而为第三个产品产生值。
- en: We should encourage mixing and using all of the debugging options in order to
    properly reach and read-out the variables of interest.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 我们应该鼓励混合使用所有调试选项，以便正确地达到并读取感兴趣的变量。
- en: Tracing
  id: totrans-123
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 跟踪
- en: 'The tracing feature of Xdebug can be easily turned on with the `xdebug.auto_trace=1` option.
    With our Ubuntu installation, we add this to the `/etc/php/7.0/apache2/conf.d/20-xdebug.ini`
    file as follows:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: Xdebug的跟踪功能可以通过`xdebug.auto_trace=1`选项轻松启用。在我们的Ubuntu安装中，我们将其添加到`/etc/php/7.0/apache2/conf.d/20-xdebug.ini`文件中如下：
- en: '[PRE7]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Once the file has been modified, we need to make sure the Apache server is
    re started :'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 修改文件后，我们需要确保重新启动Apache服务器：
- en: '[PRE8]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'While `xdebug.auto_trace` is the required option to turn on the tracing feature,
    other related options include the following:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: '`xdebug.auto_trace`是打开跟踪功能所需的选项，其他相关选项包括以下内容：'
- en: '`xdebug.collect_assignments`'
  id: totrans-129
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`xdebug.collect_assignments`'
- en: '`xdebug.collect_includes`'
  id: totrans-130
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`xdebug.collect_includes`'
- en: '`xdebug.collect_params`'
  id: totrans-131
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`xdebug.collect_params`'
- en: '`xdebug.collect_return`'
  id: totrans-132
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`xdebug.collect_return`'
- en: '`xdebug.show_mem_delta`'
  id: totrans-133
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`xdebug.show_mem_delta`'
- en: '`xdebug.trace_enable_trigger`'
  id: totrans-134
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`xdebug.trace_enable_trigger`'
- en: '`xdebug.trace_enable_trigger_value`'
  id: totrans-135
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`xdebug.trace_enable_trigger_value`'
- en: '`xdebug.trace_format`'
  id: totrans-136
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`xdebug.trace_format`'
- en: '`xdebug.trace_options`'
  id: totrans-137
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`xdebug.trace_options`'
- en: '`xdebug.trace_output_dir`'
  id: totrans-138
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`xdebug.trace_output_dir`'
- en: '`xdebug.trace_output_name`'
  id: totrans-139
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`xdebug.trace_output_name`'
- en: '`xdebug.var_display_max_children`'
  id: totrans-140
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`xdebug.var_display_max_children`'
- en: '`xdebug.var_display_max_data`'
  id: totrans-141
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`xdebug.var_display_max_data`'
- en: '`xdebug.var_display_max_depth`'
  id: totrans-142
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`xdebug.var_display_max_depth`'
- en: Supplemental information about individual *tracing* configuration options can
    be found at [https://xdebug.org/docs/execution_trace](https://xdebug.org/docs/execution_trace).
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 有关个别*跟踪*配置选项的补充信息可以在[https://xdebug.org/docs/execution_trace](https://xdebug.org/docs/execution_trace)找到。
- en: Unlike the debugging feature, which we control from IDE or text editor, we don't
    get to control tracing. By default, the tracing feature creates a different `trace.%c` file
    under the `/tmp` directory each time an application is run. What this means in
    the context of web application is that, each time we refresh the page in the browser,
    the tracing feature creates a `trace.%c` file for us.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 与我们从IDE或文本编辑器控制的调试功能不同，我们无法控制*跟踪*。默认情况下，每次运行应用程序时，*跟踪*功能会在`/tmp`目录下创建一个不同的`trace.%c`文件。在Web应用程序的上下文中，这意味着每次在浏览器中刷新页面时，跟踪功能都会为我们创建一个`trace.%c`文件。
- en: 'Our specific example application, once executed, results in a trace file, much
    like the following screenshot:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 我们特定的示例应用程序一旦执行，就会产生一个跟踪文件，就像以下截图一样：
- en: '![](assets/15d84c26-6ffa-4369-b0fa-e3f34da53eb9.png)'
  id: totrans-146
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/15d84c26-6ffa-4369-b0fa-e3f34da53eb9.png)'
- en: The output itself is relatively easy for a developer to read and understand.
    Surely, this gets a bit clunky when it comes to large applications, as we end
    up with a large trace file. Still, knowing the bits of code we are targeting,
    we can search the file and find the needed occurrences of the code. Let's assume
    that we are looking for the use of the `number_format()` function throughout our
    code. A quick search for `number_format` would point us to line 22 of `Category/View.php`,
    with an execution time next to it. This is a valuable piece of information for
    the overall debugging efforts.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 输出本身对于开发人员来说相对容易阅读和理解。当涉及到大型应用程序时，这可能会有些笨重，因为我们最终会得到一个大型的跟踪文件。但是，了解我们正在定位的代码部分，我们可以搜索文件并找到所需的代码出现。假设我们正在寻找代码中`number_format()`函数的使用。快速搜索`number_format`会指向`Category/View.php`的第22行，并附有执行时间。这对于整体调试工作是有价值的信息。
- en: Profiling
  id: totrans-148
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 分析
- en: 'The profiling feature of Xdebug can be easily turned on with the `xdebug.profiler_enable=1` option.
    With our Ubuntu installation, we will modify the `/etc/php/7.0/apache2/conf.d/20-xdebug.ini`
    file as follows:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: Xdebug的分析功能可以通过`xdebug.profiler_enable=1`选项轻松启用。在我们的Ubuntu安装中，我们将修改`/etc/php/7.0/apache2/conf.d/20-xdebug.ini`文件如下：
- en: '[PRE9]'
  id: totrans-150
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Once the file has been modified, we need to make sure the Apache server is
    restarted :'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 修改文件后，我们需要确保重新启动Apache服务器：
- en: '[PRE10]'
  id: totrans-152
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'While `xdebug.profiler_enable` is the required option to turn on the profiling feature,
    other related options include the following:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: '`xdebug.profiler_enable`是打开分析功能所需的选项，其他相关选项包括以下内容：'
- en: '`xdebug.profiler_aggregate`'
  id: totrans-154
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`xdebug.profiler_aggregate`'
- en: '`xdebug.profiler_append`'
  id: totrans-155
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`xdebug.profiler_append`'
- en: '`xdebug.profiler_enable`'
  id: totrans-156
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`xdebug.profiler_enable`'
- en: '`xdebug.profiler_enable_trigger`'
  id: totrans-157
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`xdebug.profiler_enable_trigger`'
- en: '`xdebug.profiler_enable_trigger_value`'
  id: totrans-158
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`xdebug.profiler_enable_trigger_value`'
- en: '`xdebug.profiler_output_dir`'
  id: totrans-159
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`xdebug.profiler_output_dir`'
- en: '`xdebug.profiler_output_name`'
  id: totrans-160
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`xdebug.profiler_output_name`'
- en: Supplemental information about individual profiler configuration options can
    be found at [https://xdebug.org/docs/profiler](https://xdebug.org/docs/profiler).
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 有关个别分析器配置选项的补充信息可以在[https://xdebug.org/docs/profiler](https://xdebug.org/docs/profiler)找到。
- en: Similar to tracing, we don't get to control the profiling feature from IDE or
    text editor. By default, the profiling feature creates a different `cachegrind.out.%p` file
    under the `/tmp` directory each time an application is executed.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 与跟踪类似，我们无法从IDE或文本编辑器控制分析功能。默认情况下，每次执行应用程序时，分析功能会在`/tmp`目录下创建一个不同的`cachegrind.out.%p`文件。
- en: 'Our specific example application, once executed, results in a cachegrind file,
    much like the following screenshot (partial output):'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 我们特定的示例应用程序一旦执行，就会产生一个cachegrind文件，就像以下截图（部分输出）一样：
- en: '![](assets/7994b47d-b7f8-41c6-aefa-dfff1832babd.png)'
  id: totrans-164
  prefs: []
  type: TYPE_IMG
- en: 'The information contained here is far less readable than that of a tracing file,
    which is alright as the two target different types of information. The cachegrind
    file can be pulled into an application such as KCachegrind or QCacheGrind, which
    then gives us a much more user -friendly and visual representation of the captured
    information :'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/b35fbde8-3648-4354-8feb-9a0519cc15f0.png)'
  id: totrans-166
  prefs: []
  type: TYPE_IMG
- en: The cachegrind file output delivers an important performance-related information.
    We get an insight into all of the functions used within the application, sorted
    by time spent within an individual function and all of its children. This allows
    us to spot performance bottlenecks, even if it is within the millisecond time
    frame.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
- en: Zend Z-Ray
  id: totrans-168
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The *Rougue Wave Software* company offers a commercial PHP server called Zend
    Server. One of Zend Server's outstanding features is its **Z-Ray** extension.
    Seemingly analogous to Xdebug’s tracing and profiling functionality, Z-Ray offers
    comprehensive information capturing and  an improved user experience. Captured
    information ranges from execution times, errors and warnings, database queries,
    and function calls to request information. These are provided in a form that resembles
    a built-in browser’s developer tools, making it easy for the developer to retrieve
    a vital piece of profiling information within seconds.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
- en: The Z-Ray extension itself is free, and can be used independently off the commercially
    available Zend Server. We can install it just like any other PHP extension. Although,
    at the time of writing, the stand-alone Z-Ray extension is available only for
    the PHP 5.5 and 5.6 versions, which are now considered outdated.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
- en: Installing Zend Server
  id: totrans-171
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Given that this book is targeting PHP 7, moving forward, we will grab a free
    trial version of the Zend Server and install it. We can do so by opening the official
    Zend page and clicking on the Download Free Trial button:'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/78bc0714-fda2-4cc6-bc27-514b6edba1d2.png)'
  id: totrans-173
  prefs: []
  type: TYPE_IMG
- en: 'Assuming that we are using the fresh Ubuntu 17.04 installation, Zend''s download
    service is likely to offer us a `tar.gz` archive download:'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/5c77d43c-a0c3-46bb-9150-4ff70f482ff0.png)'
  id: totrans-175
  prefs: []
  type: TYPE_IMG
- en: 'Once downloaded and unpacked, we need to trigger the `install_zs.sh` command
    with the PHP version argument as follows:'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/4a9e93ce-7098-4a5c-b9e5-91b87ae43cbf.png)'
  id: totrans-177
  prefs: []
  type: TYPE_IMG
- en: 'Upon installation completion, the console gives us information about how to
    access the server administration interface through the browser :'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/dbcbf25d-9fa9-4e37-9207-a732b8fe0d7e.png)'
  id: totrans-179
  prefs: []
  type: TYPE_IMG
- en: 'Opening `https://localhost:10082/ZendServer` triggers the License Agreement
    step of the Launch Zend Server process:'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/1b684742-0689-434e-ba02-6a91dece3d1c.png)'
  id: totrans-181
  prefs: []
  type: TYPE_IMG
- en: 'Agreeing to the license agreement and clicking on the Next button takes us
    to the Profile step of the Launch Zend Server process:'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/b804dd91-9008-40be-8ae6-ad417d406653.png)'
  id: totrans-183
  prefs: []
  type: TYPE_IMG
- en: 'The Profile step offers three distinctive options: Development, Production
    (Single Server), and Production (Create or Join a Cluster). Choosing the Development
    option, we click on the Next button, which takes us to the User Passwords step
    of the Launch Zend Server process:'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/711c548b-e761-4401-b191-bb96eae458c5.png)'
  id: totrans-185
  prefs: []
  type: TYPE_IMG
- en: 'Here we provide admin and developer with user passwords. Clicking on the Next
    button takes us to the Summary step of the Launch Zend Server process:'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/454c67c5-5225-4b7e-97e0-e92390885e4e.png)'
  id: totrans-187
  prefs: []
  type: TYPE_IMG
- en: 'The summary step merely confirms our previous selections and entries. By clicking
    on the Launch button, we finalize the Launch Zend Server process and land on the
    Getting Started page:'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/a6d9c047-c008-488c-a5b2-0293ad0df0b4.png)'
  id: totrans-189
  prefs: []
  type: TYPE_IMG
- en: The Zend Server provides a rich interface for managing pretty much every aspect
    of the running sever. From here, we can manage virtual hosts, applications, job
    queues, caching, security, and other bits. Before we can focus on Z-Ray functionality,
    we need to set up our test application. We will use the same application we used
    with Xdebug, mapped on the `test.loc` domain.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
- en: Setting up the virtual host
  id: totrans-191
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We first amend the `/etc/hosts` file by adding the `127.0.0.1 test.loc` line
    entry to it.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
- en: 'With the `test.loc` host now added to the hosts file, we turn back to the Zend
    Server and click on the Add virtual host button under the Applications | Virtual
    Hosts screen. This takes us to the Properties step of the Add Virtual Host process:'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/25c18bc8-ea48-46cc-a414-0c26f7d68a9d.png)'
  id: totrans-194
  prefs: []
  type: TYPE_IMG
- en: 'Here we enter `test.loc` for Virtual Host Name and `80` for Listen on Port.
    Clicking on the Next button takes us to the SSL Configuration step of the Add
    Virtual Host process:'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/b8d4b9cb-635d-4bca-a730-552deede5650.png)'
  id: totrans-196
  prefs: []
  type: TYPE_IMG
- en: 'To keep things simple, let''s just leave the This virtual host does not use
    SSL selection active and click on the Next button. This takes us to the Template
    step of the Add Virtual Host process:'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/f4785716-fab8-4310-ba39-3cecce5c75fa.png)'
  id: totrans-198
  prefs: []
  type: TYPE_IMG
- en: 'Likewise, let’s just leave the Use the default virtual host configuration template
    selection active and click on the Next button. This takes us to the Summary step
    of the Add Virtual Host process:'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/20213edc-6f36-4a63-a667-c906062262d6.png)'
  id: totrans-200
  prefs: []
  type: TYPE_IMG
- en: 'To complete the virtual host setup, we click on the Finish button. Our `test.loc`
    virtual host should now be created, showing details such as the following:'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/6b153af0-2a80-4500-a2fc-de9577bc6686.png)'
  id: totrans-202
  prefs: []
  type: TYPE_IMG
- en: 'The document root used for our newly created virtual host points to the `/usr/local/zend/var/apps/http/test.loc/80/_docroot_`
    directory. This is where we will dump our sample application using the following `git
    clone` command:'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  id: totrans-204
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'The output of the preceding command is as follows:'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/40e9359f-ad68-4977-ab11-9afc62b6b9ca.png)'
  id: totrans-206
  prefs: []
  type: TYPE_IMG
- en: 'With  the code in place, accessing the `http://test.loc` URL within the browser
    should give us the following output:'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/b552103b-6a82-4c6a-ad9e-27937067e63d.png)'
  id: totrans-208
  prefs: []
  type: TYPE_IMG
- en: Using Z-Ray
  id: totrans-209
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now that we have our test application up and running, we can finally focus
    on the Z-Ray functionality. Within the Zend Server administration interface, under
    Z-Ray | Mode, we need to make sure that the Enabled option is the active one.
    Now, if we access the `http://test.loc` URL within the browser, we should be able
    to see the Z-Ray toolbar at the bottom of the page:'
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/f6e9ff1c-9648-470b-b97b-8d189644520f.png)'
  id: totrans-211
  prefs: []
  type: TYPE_IMG
- en: 'The toolbar itself consists of several key sections, each of which gathers
    a specific metric:'
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
- en: 'Page Requests :'
  id: totrans-213
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](assets/f27eaf69-5749-4417-aa62-e75fd5f21d6a.png)'
  id: totrans-214
  prefs: []
  type: TYPE_IMG
- en: 'Execution Time and Memory Peak:'
  id: totrans-215
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](assets/5041377a-e48e-40a2-aba0-864b7fed093b.png)'
  id: totrans-216
  prefs: []
  type: TYPE_IMG
- en: 'Monitor Events:'
  id: totrans-217
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](assets/35ccd405-460d-4449-a77b-e0e2c18d4871.png)'
  id: totrans-218
  prefs: []
  type: TYPE_IMG
- en: 'Errors & Warnings:'
  id: totrans-219
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](assets/011e3e78-50ba-4371-a845-dea83ae746c8.png)'
  id: totrans-220
  prefs: []
  type: TYPE_IMG
- en: 'Database Queries:'
  id: totrans-221
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](assets/ce9b1877-5521-4db0-b2cb-104b621cdeca.png)'
  id: totrans-222
  prefs: []
  type: TYPE_IMG
- en: 'While our specific sample application has no database interactions, the following
    output illustrates Z-Ray capturing raw SQL database queries as well as their execution
    times from a resource-intense Magento eCommerce platform:'
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/743fd037-ddcc-4e22-b9c3-2db841b2c586.png)'
  id: totrans-224
  prefs: []
  type: TYPE_IMG
- en: 'Functions:'
  id: totrans-225
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](assets/d5e769dd-68b4-4199-8c15-a27702ae6155.png)'
  id: totrans-226
  prefs: []
  type: TYPE_IMG
- en: 'Request Info:'
  id: totrans-227
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](assets/78345d2f-bf13-4fec-aee0-2277fbd45748.png)'
  id: totrans-228
  prefs: []
  type: TYPE_IMG
- en: Z-Ray acts like a mix of Xdebug's trace and profile functionalities, delivered
    straight into the browser. This makes it an extremely handy tool for developers. Capturing rawSQL
    queries adds even more value to the tool, as, usually, these tend to be the unexpected
    performance bottlenecks.
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
- en: The Z-Ray feature can be easily enabled only for a specific host. The way to
    do this is by activating the Selective option under the Z-Ray | Mode screen. This
    type of setup makes it convenient to profile production sites.
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: Z-Ray功能可以轻松地仅针对特定主机启用。这样做的方法是在Z-Ray | Mode屏幕下激活选择性选项。这种设置使得对生产站点进行分析变得更加方便。
- en: Summary
  id: totrans-231
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: Throughout this section, we touched upon three unique types of process we contribute
    to overall application testing. Distinctively labeled as debugging, tracing, and
    profiling, these processes provide a unique and remarkably informative perspective
    on our application inner bits. While tracing and profiling gather application
    performance and path-of-execution data for us in a sort of hands-free mode, debugging
    allows for a unique experience of tapping into a specific bit of code. Whether
    we are a seasonal or a full-time software developer, debugging, tracing, and profiling are
    absolutely essential skills to master. Without them, resolving the really nasty
    bugs or writing performance-optimized applications becomes a whole new challenge.
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们涉及了我们对整体应用程序测试的三种独特类型的过程。这些过程被称为调试、跟踪和分析，它们为我们提供了对应用程序内部细节的独特和非常信息丰富的视角。虽然跟踪和分析以一种类似无人驾驶的模式为我们收集应用程序性能和执行路径数据，调试则允许我们深入到特定的代码中。无论我们是季节性还是全职软件开发人员，调试、跟踪和分析都是必须掌握的技能。没有它们，解决真正讨厌的错误或编写性能优化的应用程序将成为一个全新的挑战。
- en: Moving forward, we will take a closer look at the landscape and available choices
    around PHP application hosting, provisioning, and deployment.
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 前进，我们将更仔细地审视PHP应用程序托管、配置和部署的景观和可用选择。
