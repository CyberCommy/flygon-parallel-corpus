- en: Chapter 3. Building the Gallery Page
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous chapter, we did a lot of work and we built quite a base for
    the rest of our portfolio site. With the knowledge we now have and the small amount
    of code we wrote on top of the 320 and Up framework, we can really start to move
    fast. In this chapter, we are going to do just that. We are going to build a gallery
    of panels that will be stacked for narrow screens and tiled for wide screens.
    To do this, we are going to use the same basic approach that we did in the previous
    chapter for the triad of content panels at the bottom of our page.
  prefs: []
  type: TYPE_NORMAL
- en: Creating the wireframe
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Before we jump into the code, let''s take a look at some wireframes. The following
    screenshot shows how our screen should look on a small screen:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating the wireframe](img/6463_03_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'As the browser gets wider, we''d like those images to get bigger and change
    the layout from stacking to tiling for better use of the screen space. The following
    screenshot is the basic layout of a screen over 992 px wide:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating the wireframe](img/6463_03_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: There are a lot of visual breakpoints between the two that I have created above
    that 320 and Up facilitates. The only thing to keep in mind with 320 and Up is
    how to keep the rest of your page consistent with it. As we go along here, let's
    analyze what the layout is doing and get the rest of our page to play nice with
    it by either using styles that already exist in 320 and Up or creating our own.
  prefs: []
  type: TYPE_NORMAL
- en: 'The way I would create a **Gallery** page for myself is with some kind of hero
    at the top of the page, but not a slideshow. I feel it''s important to orient
    users with a simple, bold statement at the top of most pages for this kind of
    site. The main reason is that you cannot count on the user coming to your **Home**
    page first, so you need to establish quite a bit of background about your website
    on every page. I guess I would compare this strategy to the one that writers of
    serial television use: you have to assume that the viewer may need a little background
    information in every episode or, in this case, page.'
  prefs: []
  type: TYPE_NORMAL
- en: So, let's start the page off with a hero that is not quite as tall, but still
    has really bold text—a heading and a short sentence.
  prefs: []
  type: TYPE_NORMAL
- en: To get started, you can grab the `gallery.html` file from `ch3/before/320andup/gallery.html`.
    This file will have all the items we can re-use from our **Home** page, for example,
    the code in the head of the file, the navigation, the footer, and so on. Take
    a few moments to look at it and see what we are re-using for every page as we
    move forward. Go ahead and open this page in a browser to see what you have to
    start with. You should see the navigation part butted right up against the footer.
    Don't worry, we will fill the space in between them soon.
  prefs: []
  type: TYPE_NORMAL
- en: Before we move on, I just want to quickly outline what code we are keeping from
    the first page we made and why. Of course, we are keeping everything from the
    top of the file to the closing `</head>` tag. We are also re-using the code that
    begins at the footer and continues to the bottom of the file. This is the entire
    code that we need on every page to do essential work across devices and browsers
    as well as to include our styles, favicons, and JavaScript libraries. We also
    have code that will be the same on every page, such as the markup for navigation
    and the footer. In other words, we are repeating this code on every single page
    we are building. This is true but if, for example, you were using a framework
    such as Django or Rails, or some kind of templating language in another framework,
    you would separate the code that would be repeated on every page out to its own
    file so it could be re-used and shared in other files. This would be a great approach
    to solve the problem of requiring this code to appear on every page.
  prefs: []
  type: TYPE_NORMAL
- en: However, in order for me to make this book platform-agnostic, I have simply
    copied this code over from page to page as we progress. I really do not recommend
    making a site this way. Repeating the same code in different places is just an
    invitation to make a horrible mistake at some point (here's hoping I haven't made
    one).
  prefs: []
  type: TYPE_NORMAL
- en: Let me explain some of the risks of just manually copying this code over from
    page to page. For example, if you decide to make a change to the navigation part
    on one page, you have to remember to make the same change on every page and also
    make sure you execute it with precision. If you've been programming for a while,
    you will recognize this principle as **Don't Repeat Yourself** (**DRY**). It is
    a bedrock principle of writing code. You should follow it. This principle is a
    major justification as to why I recommended using Sass (or LESS) in the previous
    chapter and why you should be using a framework like 320 and Up!
  prefs: []
  type: TYPE_NORMAL
- en: Ok, enough of me pontificating.
  prefs: []
  type: TYPE_NORMAL
- en: Other aspects of this page would also do well to be re-used in your framework
    of choice. The header, which contains the navigation, and the footer are highly
    likely to be identical on every page, so I would make these components re-usable,
    too. The last thing I will point out is that you should also re-use the JavaScript
    at the bottom. Many times, developers use strategies to make the inclusion of
    CSS and JavaScript dynamic, based on the page needs, but for our simple site that
    is unnecessary.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we've got that business taken care of, let's move on to taking care
    of the content that will be unique to this page.
  prefs: []
  type: TYPE_NORMAL
- en: The slim hero
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now, we need a hero at the top of this page, but we don't want to distract too
    much from the gallery tiles. So, we don't want a big, splashy image. Instead we
    want some bold content that quickly sums up what is happening on the page and
    meets the following requirements (that I also mentioned previously); Assume that
    the visitor may have landed on this page without ever seeing the rest of the site
    while not insulting the intelligence of a person who has already been browsing
    the site.
  prefs: []
  type: TYPE_NORMAL
- en: What you actually say is up to you, of course. The real objective is to understand
    the strategy of the content and how it relates to our layout.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is a mock-up of what we are shooting for in a 320 px-wide device:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The slim hero](img/6463_03_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Here is how it should look on a desktop browser:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The slim hero](img/6463_03_11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The major differences between the two mockups are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: The 320 px layout will need smaller font sizes than the wider layout
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The 320 px layout has the text aligned to the center whereas the wider layout
    has the text aligned left
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This isn't mandatory or anything; it's just a design decision I have made that
    we can also support with the responsive design, as luck would have it.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, let''s write some code for this. Place the following markup just below
    the closing the `</header>` tag. Here is what the markup needs to look like:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, the cool thing is, if you have everything in its right place, your page
    will look close to how we want it to because we are re-using styles from the **Home**
    page. To be precise, it only looks right when we look at it on a 320 px wide screen.
    Take a moment to look at the **Home** page and this new **Gallery** page and get
    your head around how the styles are being re-used. You may notice one thing, now
    that our `<h1>` tag has text that goes over two lines, our `line-height` is too
    high. Let''s tighten that up a bit. Edit the `.hero h1` style by adding the following
    line of code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Now, refresh the page and see how that keeps the headline nice and compact.
    It's a cozy look, don't you think?
  prefs: []
  type: TYPE_NORMAL
- en: Ok, so that was super easy! This just works.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here''s why that works: You''ll notice I set the height to `1em`. An `em` is
    a unit of measurement different from pixels. Pixels set an explicit measurement
    and `em`s set a relative measurement. Why set a relative height? To make future
    changes easier. An `em` is equal to whatever the current font size is. So, in
    this case the `line-height` ends up being equal to the font size. This is the
    desired outcome, since we want there to be little to no extra white space generated
    by a `line-height` greater than the font size.'
  prefs: []
  type: TYPE_NORMAL
- en: So, why bother to be so abstract? You don't always have to be but I like to
    use `em`s in places like this because it makes changing the font size less troublesome.
    If I come back later and need to adjust the font size, I won't need to also adjust
    the `line-height` to maintain the current styling effect. `Em`s will continue
    to render a `line-height` that is the same as the font size.
  prefs: []
  type: TYPE_NORMAL
- en: Next, let's look at how all this works for the desktop view. Using your preferred
    method (the responsive `.html` page or just resizing your browser), go ahead and
    take a look at the widest width we are styling for, 1382 px wide.
  prefs: []
  type: TYPE_NORMAL
- en: The trouble is that there are some fine points that are off by just a little
    bit. One thing you will notice is that the font size on the desktop layout is
    just a tad too big to keep the layout slim as we want. So, we need to override
    some of the styles we re-used from the **Home** page.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are two ways to accomplish this. One way is to assign a class somewhere
    above the page elements that we want to style differently and then have some new
    style descend from that class that will override the existing class. For example,
    currently, the `<h1>` element in the hero gets this style:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'So, we could just add a new class to our hero as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, somewhere further down on the stylesheet, have a style that has the following
    properties:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Then, this style would override the `.hero` styles applied above it. However,
    this is not ideal; now that we have two kinds of `hero`, the non-slim one is semantically
    vague. Instead, we can add a class to both kinds of `hero` to make it clear that
    the styles apply to a large version of a `hero`.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, let''s go back and change our **Home** page HTML as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Notice the addition of the class `jumbo`. Now, assuming you are using SCSS,
    we need to edit our stylesheet for screens with dimensions 768 px and above to
    match it. In order to do that, open up the `ch3/before/320andup/scss/_76s.scss`
    file. For future reference, I will just ask you to open up the file by its name
    rather than stating the whole path. So, for this file, I will ask you to open
    up the `768` file. When we need to edit styles that apply to layouts 992 px and
    wider; I will ask you to open up your `992` file, and so on. With that established,
    let''s continue with adding some code to the `768` file. In this file, our SCSS
    used to read is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Now we will replace `.hero` with `.jumbo`.
  prefs: []
  type: TYPE_NORMAL
- en: 'So now, the whole section of SCSS file should look like the following code
    snippet (with CSS to follow):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, add the following CSS in the previous code snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: So, the cool thing is that `.jumbo h1` and `.jumbo p` are much more re-usable
    now that they are decoupled from `.hero`, which has a pretty specific application.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now we need to work on the styles for our **Gallery** page. Let''s make the
    HTML code look as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: We don't assign a `subhead` style for 320 styles, but let's add it for styles
    that need text to use up the available space better. The first stop is the 480
    px visual breakpoint. Take a look at this layout at 480 px; we can get away with
    pumping the font size up a bit. It seems like a small change but let's do this
    not only because we can, but because next year there will almost certainly be
    a tablet that is 520 px wide and your layout is going to be more likely to hold
    up at this resolution now that you took the time to do this!
  prefs: []
  type: TYPE_NORMAL
- en: 'If you are using SCSS (or another preprocessor), add the following code to
    your `480px` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'This will render CSS that is once again nested inside the query `@media only
    screen and (min. width: 480px)` and looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: We are keeping the text centered at this point, since the rest of the layout
    is going to be centered too. More on this once we add the content panels.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s move on to the next visual breakpoint, that is, 600 px. The heading
    at `48px` looks a bit puny. Let''s go ahead and pump it all the way up to `60px`.
    Add this to your `600px` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'This previous code renders the following CSS:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Now, moving on to the 768 px visual breakpoint—how does it look to you? I think
    this font size works here and up to the other breakpoints but, if you are so inclined,
    make changes to the larger sizes too. To a certain extent, it depends on how much
    you want to tailor the font size to your content or how much you want some safer,
    more generic styles to work well with the dynamic content. My goal with these
    layouts is to make a layout that is likely to work with a wide range of content.
  prefs: []
  type: TYPE_NORMAL
- en: Now, we have the fonts in the `subhead` hero looking good at all sizes! Take
    a moment to re-size your browser and watch how everything changes and uses the
    existing screen space. One thing you may notice is how the space between the text
    and the edge of the viewing area gets dramatically narrower, up to somewhere between
    600 px and 786 px. The reason this happens, you might recall, is because we don't
    style the `div` tag with the `container` class until we hit the 768px breakpoint.
    We will address that in a moment, but let's see how it plays with the content
    panels before we mess with it too much.
  prefs: []
  type: TYPE_NORMAL
- en: At this point, I should mention that my own approach to building responsive
    layouts, whether working alone or with a team, is always recursive like this.
    I try to build one component of a page until I feel like it is either exactly
    what I want or I find that I have questions about how it will play with the rest
    of the content on the page; this is one such juncture for me. While working with
    a team, I might start to code out this page and get feedback from a designer or
    another developer, then tweak it until we are all satisfied enough to ship the
    code or show the client, whatever the case may be. Since, we are making a site
    for ourselves we are just iterating alone (you and me together).
  prefs: []
  type: TYPE_NORMAL
- en: So, on that note, we are going to add our content panels, but then we are going
    to need to loop back around and make sure our `subhead` hero looks Ok.
  prefs: []
  type: TYPE_NORMAL
- en: Content panels
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You may remember that, as with the **Home** page, each content panel will have
    an image, a heading, and a short blurb.
  prefs: []
  type: TYPE_NORMAL
- en: '![Content panels](img/6463_03_12.jpg)'
  prefs: []
  type: TYPE_IMG
- en: If I were doing this to show off my portfolio of work on websites, I would use
    screen grabs of each project I want to highlight and work on writing fairly short
    headings and blurbs for each. By default 320 and Up has each heading as a link
    to a corresponding page but you could link each panel, instead, if you are worried
    that people won't click on it. Later, we will make an example page to demonstrate
    where a user might land if they were to click the heading.
  prefs: []
  type: TYPE_NORMAL
- en: For this example page, we will continue to use the placeholder image and Lorem
    Ipsum, but feel free to make actual, meaningful content if you have some ready.
    Additionally, if you are hooking these layouts up to some kind of content management
    system or blog, you should think through how you will have to change your code
    for those kinds of approaches. For example, you may be building this layout via
    a loop in a template that relies on the number of `gallery` objects you have created.
  prefs: []
  type: TYPE_NORMAL
- en: For the panels themselves, all you need to do is use the same ones we put on
    the **Home** page; but instead of only three, you can add as many as you want
    to show off your awesome work.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is the HTML code you will need to make the first set of three panels:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Now, you just have to save and refresh your page and you will see it all work!
    Ridiculously efficient, isn't it? Now, of course, for your own content, it is
    critical that you use 410 x 230 pixel-images that you will crop with either image-editing
    software or a nifty editing tool in a CMS or blog. You will notice that there
    is an `<h2>` heading above this group of three panels. I would only include this
    if you have some kind of sensible groupings that will benefit from being titled.
    The layout will work fine with or without this particular heading. I would not
    recommend removing the `<h3>` headings because, along with the images, they will
    really help viewers scan the page and find information quickly.
  prefs: []
  type: TYPE_NORMAL
- en: So, at this point, you can either use the placeholder images in the code sample
    to build this page or start including your own content. If you are doing it statically,
    as opposed to building the page with a loop in some kind of template, you will
    just need to keep copying-and-pasting these panels.
  prefs: []
  type: TYPE_NORMAL
- en: Experiment a bit; however, I would like to give you just some quick thoughts
    about how these panels will work on the page. One thing to consider is how one
    gets the panels to lay out without being separated by headings or additional whitespace.
    All you really need to do is keep repeating the `grid-1`, `grid-2`, and `grid-3`
    blocks as needed (with the entire markup that is inside them, of course). I have
    also shared this in the example code.
  prefs: []
  type: TYPE_NORMAL
- en: Another thing to consider is what to do if you don't have panels in exact multiples
    of three. That is Ok, too! It just works. I have shared this in the example code
    as well. I stopped at just five blocks and it lays out just as you'd want it to.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are only two problems left to solve with regard to this page. The first
    problem, you may notice, is that, in my initial wireframe, I wanted to left-align
    the text for larger layouts. Somewhat arbitrarily, I have decided that we will
    do that for all layouts above 600 px. Go to your `600px` file and add the following
    code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Or, add the following code in the `600px` `@media` query in your CSS:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: Now, the text is only centered for smaller devices and left-aligned for tablets
    and larger devices.
  prefs: []
  type: TYPE_NORMAL
- en: The second problem you might catch as you resize your browser between 600 px
    and 768 px. Hopefully, you've noticed that the text in the hero ends up being
    a lot closer to the edge of the viewing area than the rest of the layout. You
    may recall that we have all the content inside the `content` container, but that
    class doesn't get styled until the `768px` `@media` query fires. Perhaps we should
    try to apply the styles within `768` `@media` query to `600px`-width screens instead
    and see what this does to all layouts at all breakpoints above `600px`. So, right
    now, go ahead and cut that style from the `768px` file and paste it in the `600px`
    file. Or, if you are using plain CSS, you will need to remove this code from the
    `768px` `@media` query and paste into the `600px` one.
  prefs: []
  type: TYPE_NORMAL
- en: Now, once you've done that, go back and play around with both the **Home** and
    **Gallery** pages by resizing your browser. The heading in the hero now stays
    nicely aligned with the panels beneath it. This change doesn't seem to adversely
    affect the **Home** page hero or the footer, so it looks like we are good to go.
  prefs: []
  type: TYPE_NORMAL
- en: To a certain extent, this is how I develop for responsive websites, I see what
    breaks and try to fix it, in a generic, elegant way where possible, without putting
    undue constraints on the content.
  prefs: []
  type: TYPE_NORMAL
- en: Now, the last big task we have for this chapter is to make the page that the
    users will land on when they click on the link for the corresponding content panel.
    We will call this task the gallery detail.
  prefs: []
  type: TYPE_NORMAL
- en: The gallery detail
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: So, let's have a look at the content we want on this page and how to strategize
    the layouts for different devices.
  prefs: []
  type: TYPE_NORMAL
- en: The main things, I think, most people want to see in a portfolio of any kind
    are a few key images and some lengthier, detailed text describing images.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is the layout we will need for mobile screens:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The gallery detail](img/6463_03_13.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The smaller squares, shown in the screenshot, will be the thumbnails that users
    can touch or click on to show the larger image above the smaller images on the
    page. The first thumbnail will be the default image that will be displayed when
    the **Gallery** page loads. We will also highlight the thumbnail that is currently
    active, with a border. In order to do this, we will need to make both full-sized
    and thumbnail-sized images of all the images. The description for each image will
    be below the thumbnails (and that's completely appropriate in my book). If your
    images are compelling enough, people will scroll down to read it.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, let''s look at the opposite end of the spectrum—the desktop view. We will
    want to orient things differently now that we have more screen real estate:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The gallery detail](img/6463_03_14.jpg)'
  prefs: []
  type: TYPE_IMG
- en: With the added space, we can put the text that you worked so hard to write right
    next to the big image below which the thumbnails are placed. Let's assume that,
    as with the other responsive layouts, these two layouts will cover all the breakpoints
    as long as we size key components of the page in percentages.
  prefs: []
  type: TYPE_NORMAL
- en: As before, let's start with the layout for mobile screens first. The HTML structure
    of the page should be fairly straightforward. We will need to put all the images
    on the page, hiding all but the first featured image, and then we will add our
    text. Again, let's not think too hard about what the desktop page will look like;
    let's just get what the mobile layout needs as simply as possible.
  prefs: []
  type: TYPE_NORMAL
- en: As before, you will need to make sure you re-use the basic structure of our
    page—the header, navigation, and footer. We will be inserting new content below
    the header after the closing `</header>` tag (to be precise). Please make sure
    to carefully investigate where the following code is going in the example code
    at `ch3/320andup/gallery-item.html` so you can follow along.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is what the HTML code we will add on the gallery item page will look like:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: You should notice in the basic structure of the code that we have an outer container
    that holds all our main images and all our thumbnail images. This container has
    the class `gallery-showcase`. Inside this class, there are containers for the
    big images and the smaller thumbnail images—`featured-images` and `thumbnail-images`,
    respectively—that users will click on or touch to see the corresponding larger
    images. The inner `gallery-image-area` container is there to help out with layout,
    mostly. As we did with the slideshow, we will load all the images onto the page
    while hiding the ones that aren't active using CSS. Later, we will hook up some
    simple, elegant JS to make it all interactive. The last bit, you will notice in
    the previous code, is the `gallery-description` container that will hold the text
    you write about the portfolio item.
  prefs: []
  type: TYPE_NORMAL
- en: I have included placeholder images for you and they are provided in the shared
    code. The size of the big images is 550 x 550 pixels and that of the thumbnails
    is 80 x 80 pixels. If you want to use these layouts for your own purposes without
    modifying the layout, you will need to edit some images to those sizes.
  prefs: []
  type: TYPE_NORMAL
- en: If you are feeling impatient, as I often do, you have already refreshed this
    page and can see that it is not ready for primetime. We have some work to do.
    Let's start off by hiding the large gallery images that won't be seen when the
    page loads. Much as we did for our hero slideshow, we will assign a class to the
    first image; this will make it the only visible image on the page. Go back to
    the HTML file we just made and notice that we have the class `active` assigned
    to the first large image and the first thumbnail.
  prefs: []
  type: TYPE_NORMAL
- en: Ok, let's get to styling!
  prefs: []
  type: TYPE_NORMAL
- en: We are going to add some styles to the `page` file; for me that is the `page.scss`
    file. But, if you are just directly editing CSS, you will need to just add these
    styles into your CSS file. The way they are rendered by the SCSS preprocessor
    includes these styles below the table styles in the code, fairly far down in the
    file. I recommend following this so that these styles are lower in the stylesheet
    than the more general, sitewide styles. I tend to think of the `site` and `page`
    files a little differently from *Andy* (no offense). I think of the `site` styles
    as elements on the page that will appear across the site on every (or nearly every)
    page. Then, I think of the `page` styles as being specific to particular pages,
    with less likelihood of being re-used on another page.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, let''s get the headings how we want them. You may notice that we have
    a second `<header>` on this page (yes that is allowed). We want to add some page-specific
    styles to the headings within the page. First, we need to get the text below the
    image to align to the center, so all we need in SCSS or CSS is the following code
    added to the appropriate spot (see the code samples that can be downloaded from
    the Packt Publishing website if you''re not sure):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, we need to apply styles for the fonts:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'The previous code is rendered to this CSS:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, let''s apply styles to hide all the big gallery images that aren''t active.
    To do that, write the following SCSS code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'The previous code renders the following CSS:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: Refresh the page and now you should only see the first big gallery image. Progress!
  prefs: []
  type: TYPE_NORMAL
- en: You should be looking at our layout at 320 px (remember that this is mobile
    first) and will see that, so far, everything is stacked—absolutely everything.
    The only thing that we, for sure, don't want to stack is the thumbnail images.
    So, let's get those laid out correctly. Basically, all we need to do is get the
    `<li>` tags to float left and add some space and we will have most of what we
    need.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following code to your stylesheet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: In this code, we first removed the browser's default bullets for lists (but
    only for lists inside the `gallery-image-container` block) and then we made the
    thumbnails float left. This way, you can potentially have as many thumbnails as
    you want, but I'd keep it down to about three to keep things simple for your site's
    visitors. The trouble, though, is that, if you have three in there as I do with
    the shared code, you will trick yourself into thinking that this layout works
    just fine. If you have three thumbnails in there, temporarily remove the entire
    HTML code for the third one so that you only have two left.
  prefs: []
  type: TYPE_NORMAL
- en: '![The gallery detail](img/6463_03_15.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'See what happens? The text we have below the thumbnails creeps up because the
    thumbnails `<li>` are floats. If you don''t know about all the idiosyncrasies
    of floats, I encourage you to read up on them. Here is the link to a great article
    about floats: [http://alistapart.com/article/css-floats-101](http://alistapart.com/article/css-floats-101)'
  prefs: []
  type: TYPE_NORMAL
- en: 'But, for now, I will just show you one way to fix this. All we need to do is
    clear the container that holds the text. You do that by adding the following SCSS/CSS:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s do just one more thing before we move on to the larger layouts: let''s
    get all the content away from the edges of the screen and get it to a size similar
    to that of navigation. We can do this using a similar approach to what we used
    earlier with the hero.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following SCSS/CSS code to your stylesheet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, it''s looking good! All we need is to make the layout appropriate for
    a larger layout. Once we are above 768 px, we can move the text up to the right
    of the large image. Go ahead and open up your `_768` file or find the `768` `@media`
    query in your CSS and we will move the text up to right with minimal effort. Here
    is the SCSS/CSS code (again; it is the same as the one shown earlier in the chapter):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, drag your browser''s width around and enjoy. There is one last problem
    to solve: you may notice that the headings shift up under the navigation part
    once the size of navigation changes. You may recall that this is due to the navigation
    part being a fixed element. All we need to do is specify a different margin on
    the `page-header` as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: And, that should look right. Refresh the page and enjoy!
  prefs: []
  type: TYPE_NORMAL
- en: The back link
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Let's add a simple enhancement to the page in order to make navigation easy.
    Since this Gallery item page isn't in the menu and it wouldn't necessarily be
    practical to add a menu item for every Gallery item, let's just add a back link
    to the top of the page. This makes it easy for users on any device to get back
    to the **Gallery** page.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, let''s add this link to the markup on `gallery-item.html`. Make the
    back link the last thing inside the header:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'Here is the code in context:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'Refresh your browser and you will notice that you get some nice button styling
    for free, thanks to 320 and Up. We will need to do just a little bit more styling
    but first let me clear up something important. What we just built is one example
    Gallery item page linked from the `gallery.html` page. If you are building this
    as a hand-built, static site (despite my earlier advice not to), you will need
    to build this page manually for all your gallery items and give each page its
    own name that is not `gallery-item.html`. Instead, you might need to name it `company-site.html`
    or whatever the project you are showing off is. Furthermore, you will notice that
    I created the back link back to the **Gallery** page as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'That is not a typical way to form links; in your own project you are more likely
    to make the link as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: In our example code, we need to use `gallery.html` because the more typical`/gallery.html`
    would take us to the root of our entire project. And, guess what? There is no
    `gallery.html` page at the root of this project because I have broken the project
    up into chapters. So, with this example project, you will get a **404** response
    (**Page Not Found**). Try it out.
  prefs: []
  type: TYPE_NORMAL
- en: To sum up, you will most likely want your link to look like `href="/gallery.html"`
    not like `href="gallery.html"`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, let''s add some styles to that button so that it isn''t just sitting in
    the middle of the page. The simplest thing to do, for now, is to float it to the
    left. To do this, add the following code of styles to your equivalent of the `_page.scss`
    file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'I nested this inside the code for `.page-header`. So, in this context, the
    code looks as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'And the code in CSS will look as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: 'That isn''t enough, though. Refresh the page after adding this style and you
    will notice that things look broken. That is because we need to clear that float.
    Simple! Add the following line of code to your SCSS or CSS for the `.gallery-showcase`,
    `.gallery-description` style:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: 'This style will be applied to both elements, which doesn''t affect anything
    adversely for our purposes. If you want to, though, you can always split your
    CSS code up into two separate styles if it bothers you. There is one last thing
    to do now for this button. It is sitting right up next to both the viewport and
    the main image. Let''s go back and add a margin to push it away from everything.
    Here is what the updated `.page-header` `.back` style should look like:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: Next, let's get the gallery item JavaScript happening!
  prefs: []
  type: TYPE_NORMAL
- en: The JavaScript gallery item
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Next, we need to write some JavaScript to meet our needs in this Gallery item
    page. Our needs are very simple; if a user clicks on a thumbnail, we want to show
    the corresponding larger image. There are lots of strategies for this but I am
    going to rely on two things to do this fast and easily: our page structure and
    jQuery''s ability to index things easily. So, let me show you the code first and
    then I will explain how it works. Paste or type this code into your `script.js`
    file, anywhere within the `ready` function (look at the code sample that can be
    downloaded from the Packt Publishing website if you aren''t sure):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: 'Here is what that code does line by line:'
  prefs: []
  type: TYPE_NORMAL
- en: 'The following line of code attaches an event listener to the thumbnails so
    that, when it is clicked, the rest of the code inside that function is executed:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: The following line of code gets the zero-based index of the thumbnail you just
    clicked on. In other words, it finds out how many other thumbnails are alongside
    this one and which number it is in the sequence. Zero-based is the way computers
    count. So, if you clicked on the first thumbnail in the list, it will get an index
    of `0`; the second will get an index of `1`. Sorry if that is confusing, but that
    is how computers count many things. Anyway, we are going to use that number to
    target the corresponding image in the list of `featured-images` in a moment.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: 'The following line of code removes the `active` class from the `featured-image-item`
    that currently has the class `active` on it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: 'The following line of code adds the `active` class to the `featured-image-item`
    container that is in the same place in the list as the corresponding thumbnail:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: 'The following two lines of code function the same as the two we just looked
    at and also remove and add the `active` class on thumbnails instead:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: To oversimplify it a bit, the previous code says that, when a user clicks on
    the *n*th thumbnail, the `active` class makes it active, and then makes the *n*th
    featured image active.
  prefs: []
  type: TYPE_NORMAL
- en: Now that you have the `active` class, another nice enhancement is to add a border
    to highlight the active thumbnail.
  prefs: []
  type: TYPE_NORMAL
- en: 'Update your `_page.scss` file (or its equivalent) to the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: 'The CSS code will look as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: I added a 3 px wide border and chose our theme's base color (choose whatever
    color works best for you, though). Since the border will make each thumb take
    up more space, I reduced the margins by a corresponding amount. It makes the thumbnail
    jump a little, but I don't mind because it gives the user some feedback. If you
    do mind, I encourage you to find a strategy that makes it not do that!
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We've covered a lot of ground, yet again! In this chapter, we made a gallery
    overview and a gallery detail that will work equally well for devices ranging
    from mobile phones to desktops. We re-used some of 320 and Up's upstarts so that
    we didn't have to build responsive, three-columned layouts from scratch. The columns
    stack nicely on small screens and arrange themselves horizontally to fill the
    width on wider screens. We made a slightly modified hero for the **Gallery** page
    without having to write a ton of override styles and we even wrote some elegant
    JavaScript to make the **Gallery** detail page interactive. In the next chapter,
    we will build a page so site visitors can contact us.
  prefs: []
  type: TYPE_NORMAL
