- en: Getting Started with Zappa
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Previously, we learned about creating a serverless application using the AWS
    Web Console and AWS CLI. Now, we are going to learn about Zappa and automating
    operations for creating a serverless application.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we are going to cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: What is Zappa?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installing and configuring Zappa
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Building, testing, and deploying a Python web service using Zappa
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Zappa's uses
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Before moving ahead, let's ensure we fulfill the technical requirements. The
    following subsections will go over the hardware and software requirements for
    this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Hardware
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'For demonstration purposes, we used a basic configured machine with the following
    specification:'
  prefs: []
  type: TYPE_NORMAL
- en: Memory—16GB
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Processor—Intel Core i5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: CPU—2.30GHz x 4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Graphics—Intel HD Graphics 520
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Software
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The following are the software specifications:'
  prefs: []
  type: TYPE_NORMAL
- en: OS—Ubuntu 16.04 LTS
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: OS-Type—64 bit
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Python 3.6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Python development packages: `build-essential`, `python-dev`, and `python-virtualenv`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: AWS credentials and AWS CLI
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Zappa
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We will go over a detailed description for setting up the environment in the
    upcoming sections. In the meantime, you can configure essential packages such
    as `python3.6` and `awscli`.
  prefs: []
  type: TYPE_NORMAL
- en: What is Zappa?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Zappa is an open source tool that was developed and designed by Rich Jones,
    founder/CTO of Gun.io ([https://www.gun.io/](https://www.gun.io/)). Zappa was
    mainly designed to build and deploy serverless Python applications on AWS Lambda
    and API Gateway.
  prefs: []
  type: TYPE_NORMAL
- en: Zappa is great for deploying serverless Python microservices with frameworks
    such as Flask and Bottle for hosting large web applications and CMSes with Django.
    You can also deploy any Python WSGI application as well.
  prefs: []
  type: TYPE_NORMAL
- en: In the previous chapter, we implemented the basic hello world microservice,
    using AWS Lambda and API Gateway. Zappa automates all these manual processes and
    gives us a handy tool to build and deploy Python applications.
  prefs: []
  type: TYPE_NORMAL
- en: 'It''s as easy as this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: As we described earlier, the tradition of web hosting is where the server needs
    to be always online, listening to HTTP requests and processing the requests one
    by one. If the queue of incoming HTTP requests grows, then a timeout error will
    occur as the server will have failed to serve that many requests per second.
  prefs: []
  type: TYPE_NORMAL
- en: API Gateway serves each request with a virtual HTTP server with auto scalability.
    That's the reason it can serve a single request to millions of requests without
    fail. Hence, we get the infinite scaling with zero downtime infraction of your
    current deployment cost.
  prefs: []
  type: TYPE_NORMAL
- en: Now, we are going to go through an app demonstration, but, before we do that,
    let's configure Zappa on your machine, which we will go through in the upcoming
    section.
  prefs: []
  type: TYPE_NORMAL
- en: Installing and configuring Zappa
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Installing Zappa is a straightforward task, but before we move ahead, we need
    to configure the prerequisites. Make sure you have Python 2.7 or Python 3.6 and
    have a valid AWS account. Now, you need to configure the AWS credentials on your
    machine with `help awscli`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Configure the AWS credentials using the `aws configure` command, as shown in
    the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00027.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: The configuration for AWS credentials requires that you have an AWS Access Key
    ID, AWS Secret Access Key, Default region name, and a Default output format.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can get AWS credential information from your My Security Credentials page,
    as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00028.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Once you've configured your AWS credentials, we can move ahead with Zappa's
    installation.
  prefs: []
  type: TYPE_NORMAL
- en: 'Zappa must be installed in a virtual environment. It''s strongly recommended
    that you create a virtual environment and activate it before installing Zappa.
    I prefer to use the `virtualenv` tool. There are other tools available to manage
    your virtual environments:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Here, we are creating a virtual environment named `env` and using `python3.6`,
    where `-p` indicates the Python version. Now, activate the virtual environment
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'We are set to go now, so let''s install Zappa using `pip`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Now, we are ready to launch Zappa. In the following sections, we will be creating
    a small program to demonstrate how we can make Zappa's deployment serverless.
  prefs: []
  type: TYPE_NORMAL
- en: Building, testing, and deploying a Python web service using Zappa
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We are going to create a simple hello world program as a microservice using
    Python''s Bottle framework. Let''s follow some basic steps to configure a small
    project using the Bottle framework:'
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we will create a new project directory named `lambda_bottle_poc`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s create a virtual environment inside the `lambda_bottle_poc` directory:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Here is the basic hello world program using the Bottle framework:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00029.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Now it's time to deploy the program as serverless on AWS Lambda and expose the
    `/hello` API via API Gateway. In the previous chapter, we described the manual
    process to deploy the Python application, using AWS console and AWS CLI, which
    was a really big challenge.
  prefs: []
  type: TYPE_NORMAL
- en: But with the help of Zappa, all manual processes of the AWS console and AWS
    CLI are automated and provides a rapid process to deploy and maintain your application
    in a serverless environment.
  prefs: []
  type: TYPE_NORMAL
- en: Building the deployment package
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let's initialize Zappa using the `zappa init` command. This command helps you
    to create and deploy Python applications. This command runs in a user interactive
    mode with some basic questions required so that we can set up the deployment process.
  prefs: []
  type: TYPE_NORMAL
- en: By the end of the questionnaire, Zappa creates a JSON file named `zappa_settings.json.`
    This file is nothing but the backbone of Zappa as it maintains the mapping information
    that's used by Zappa internally.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will discuss the Zappa `init` command process in detail in a few moments.
    Before that, just have a look at following screenshot, which describes the flow
    of the `zappa init` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00030.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: As you can see, `zappa init` starts up user interactive mode with some questions.
    Let's look at some information about each question.
  prefs: []
  type: TYPE_NORMAL
- en: What do you call this environment? (default dev)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Amazon API Gateway provides a mechanism to maintain different environment stages
    of your hosted API. For example, you can create environment stages for development,
    staging, and production.
  prefs: []
  type: TYPE_NORMAL
- en: With the help of Zappa, you can manage environment stages in a very easy way.
    In answer to the preceding question, you can define your own environment stage
    name or leave it empty to consider the default stage name as `dev`.
  prefs: []
  type: TYPE_NORMAL
- en: What do you want to call your bucket? (default zappa-2o2zd8dg4)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Zappa deployments will need to be uploaded to a private Amazon S3 bucket. AWS
    Lambda requires two types of code entry, such as inline code and uploading the
    ZIP. If the ZIP file size exceeds 10 MB, then consider uploading the ZIP onto
    Amazon S3\. This is why Zappa, by default, creates a bucket which will be used
    to upload the deployment ZIP file and refer to AWS Lambda.
  prefs: []
  type: TYPE_NORMAL
- en: You can provide your own existing bucket name or choose the default, as suggested
    by Zappa. If the bucket doesn't exist, then Zappa will automatically create one
    for you.
  prefs: []
  type: TYPE_NORMAL
- en: What's your modular path to your app function? (default dev)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The AWS Lambda function requires an attribute, such as `lambda_handler`, which
    points to a function as an entry point for Lambda execution. Hence, we need to
    provide information about the function name with a modular path such as `<filename>.<function_name/app_name>` to
    Zappa.
  prefs: []
  type: TYPE_NORMAL
- en: In our case, we have a file named `hello.py` and an app object that was created
    using the `Bottle` class of Python's Bottle framework. Hence, the answer to this
    question is `hello.app`.
  prefs: []
  type: TYPE_NORMAL
- en: Would you like to deploy the application globally? (default n)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: AWS provides a feature to extend the Lambda services to all available regions.
    That’s what you should do if you want to make your service available globally
    with much less latency. Zappa supports this feature, which will enable you to
    extend the Lambda service in all regions without any manual effort.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, you would get a `zappa_settings.json` file, which will have all configurations
    related to your deployments. Let's have a look at the `zappa_settings.json` file
    in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: The zappa_settings.json file
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Once you've finished the questionnaire session, Zappa creates a basic `zappa_settings.json`
    file based on your input. `zappa_settings.json` plays an important role in configuring
    Zappa with your project. If you initialize Zappa in your existing project (`Django/Flask/Pyramid/Bottle`),
    then Zappa automatically detects the type of project and creates the `zappa_settings.json` file
    accordingly.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is the content of our newly created `zappa_settings.json` file
    for the hello world program:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'For a Django project, it uses `django_settings` instead of `app_function`.
    `django_settings` needs to be initialized with the path to your Django settings:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: The preceding configuration is enough to deploy a basic Python web application.
    Let's move on and deploy hello world as a serverless application.
  prefs: []
  type: TYPE_NORMAL
- en: Deploying and testing hello world
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Zappa deployment is super easy, as you only need to run a single command in
    order start the deployment:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'That''s it! We are done with deployment. Now, let''s deploy the hello world
    program. The following screenshot describes the deployment process:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00031.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Once the deployment completes, we get the API URL endpoint. Let''s test the
    hello world application by hitting the API URL with the `/hello` endpoint:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'After running the preceding command, you will see the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: It's really amazing to be able to configure the service and deploy it in a few
    seconds. Now, we will see its basic uses related to the `zappa_settings.json` file
    in detail.
  prefs: []
  type: TYPE_NORMAL
- en: Basic uses
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Zappa covers each and every deployment process. Let's have a detailed discussion
    regarding the deployment flow with Zappa.
  prefs: []
  type: TYPE_NORMAL
- en: Initial deployments
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Once you are done with initializing Zappa, then you can deploy the application
    on to the `production` stage in a single command, as shown in the following code
    snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'When you call the `$ zappa deploy` command, Zappa performs some tasks to complete
    the deployment. The following is the internal flow and process of Zappa regarding
    deployment:'
  prefs: []
  type: TYPE_NORMAL
- en: Compress the application code in your local environment into a ZIP archive by
    replacing any dependencies with versions in a precompiled Lambda package.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set up the Lambda `handler` function with the required WSGI middleware based
    on your application's type.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Upload the generated archive from the preceding two steps into the Amazon S3
    bucket.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create and manage the necessary AWS IAM policies and roles.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Creates the AWS Lambda function with reference to the uploaded ZIP archive file
    on the AWS S3 bucket.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create the AWS API Gateway resources along with the different stages as per
    Zappa configuration.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create the WSGI compatible routes for the API Gateway resources.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Link the API Gateway routes to the AWS Lambda functions.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Finally, remove the ZIP file from AWS S3.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Note: `lambda-packages` ([https://github.com/Miserlou/lambda-packages](https://github.com/Miserlou/lambda-packages))
    is an open source repository that''s maintained by the Zappa community. This repository
    contains the most essential Python libraries as precompiled binaries, which will
    be compatible with AWS Lambda.'
  prefs: []
  type: TYPE_NORMAL
- en: This is how Zappa deals with the deployment process—It completes all of these
    tasks on its own and gives you the honor of deploying your application with a
    single command.
  prefs: []
  type: TYPE_NORMAL
- en: Update
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'If you have already deployed your application, then you are required to update
    your latest application code on AWS Lambda by simply using the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'We can compare this to using `zappa deploy`, which only updates a few tasks.
    They are mentioned here:'
  prefs: []
  type: TYPE_NORMAL
- en: It creates an archive ZIP with the latest application code; the local environment
    is a precompiled Lambda package
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It uploads the archived ZIP on to AWS S3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It updates the AWS Lambda
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: That's it! We're done with updating the existing deployment, and it only took
    a couple of seconds.
  prefs: []
  type: TYPE_NORMAL
- en: Status
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'You can simply check the status of your application deployment by running the
    following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: This will print detailed information about the AWS Lambda function, schedule
    events, and the API Gateway.
  prefs: []
  type: TYPE_NORMAL
- en: Tailing logs
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Zappa provides a facility for watching the logs related to your deployment.
    You can simply use the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'This will print all logs related to HTTP requests and AWS events. If you want
    to print logs related to HTTP requests, you can simply pass the `--http` argument:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'You can reverse the preceding command with non-HTTP events and log messages
    by simply using the following code::'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'You can also limit the log with respect to time using the `--since` argument:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'You can also filter the logs with the `--filter` argument, for example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: This will show only HTTP `POST` requests for the last hour. This uses the AWS
    CloudWatch log-filter pattern ([http://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/FilterAndPatternSyntax.html](http://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/FilterAndPatternSyntax.html)).
  prefs: []
  type: TYPE_NORMAL
- en: Rollback
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'AWS Lambda maintains the revision of your deployments. You can rollback to
    the previously deployed version by providing a revision number, as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: This will simply revert the Lambda code with the previously uploaded archived
    ZIP.
  prefs: []
  type: TYPE_NORMAL
- en: Undeploy
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'If you wanted to remove your deployed application completely, then you simply
    use the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'This will remove the published AWS Lambda and API Gateway. If you want the
    logs related to your application from AWS CloudWatch, then you simply pass the
    argument along with the preceding command, as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: This will purge the logs from AWS CloudWatch.
  prefs: []
  type: TYPE_NORMAL
- en: Package
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Zappa provides a command to generate a build package archive locally without
    deploying the application:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: When you run this command, Zappa automatically packages your active virtual
    environment into an AWS Lambda compatible package.
  prefs: []
  type: TYPE_NORMAL
- en: 'Internally, it replaces any local dependencies with AWS Lambda compatible,
    precompiled versions. These dependencies are included in the following order:'
  prefs: []
  type: TYPE_NORMAL
- en: Lambda compatible many Linux wheels from the local cache
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Lambda compatible many Linux wheels from PyPi
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Lambda-specific versions from Lambda packages ([https://github.com/Miserlou/lambda-packages](https://github.com/Miserlou/lambda-packages))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Archive the active virtual environment
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Archive the project directory
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: While processing, packaging, and packing, Zappa ignores some unnecessary files
    such as `.pyc` files. If they are available, then `.py` will get ignored. Zappa
    also sets the correct execution permissions, configures package settings, and
    creates a unique, auditable package manifest file.
  prefs: []
  type: TYPE_NORMAL
- en: 'The generated package archive will be Lambda compatible. You can set a callback
    function that will be invoked once the archive is created:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: Here, production is your stage name and under callback, you can set the callback
    method by mapping to `"zip"`. This can help you write your own custom deployment
    automation.
  prefs: []
  type: TYPE_NORMAL
- en: We have seen the basic uses of Zappa. Now it's time to do some practical work.
    We are going to build some Python application developments with Zappa, so stay
    tuned!
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Zappa provides flexible features so that you can perform the deployment process.
    We covered the basic uses of Zappa and gained an understanding of the packaging
    and deployment process. Zappa makes it very simple and easy for developers to
    configure and perform the deployment of an application to a serverless environment.
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: What is Zappa?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How can we secure the application in AWS?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
