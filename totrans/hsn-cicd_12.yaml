- en: Installation and Basics of CircleCI
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous chapter, we showed how to debug a Travis CI project locally
    and explained the Travis CI web interface in more detail.  We also looked at how
    to do logging in Travis CI. This chapter will help you get set up with CircleCI
    and we will explain how to create a Bitbucket account and we will go over how
    to set up both GitHub and Bitbucket on a new CircleCI account. We will create
    a simple Java project in Bitbucket and run a CircleCI build for it. We will also
    discuss how to navigate the Bitbucket UI. We will then end the chapter by creating
    a new GitHub repository and discuss a CircleCI YML script that will install Golang
    via a Docker image and run our unit tests.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following topics will be covered in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: An introduction to CircleCI
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A comparison of CircleCI and Jenkins
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: CircleCI prerequisites
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting up CircleCI in GitHub
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting up CircleCI in Bitbucket
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An overview of CircleCI configuration
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter will require some basic programming skills and we will utilize
    some of the continuous integration/continuous delivery concepts that we will discuss
    in this chapter. It will be helpful if you try to create a Bitbucket account and
    a CircleCI account on your own. You can follow the steps in the *CircleCI prerequisites*
    section. We will create a basic Java application using Maven so it would be helpful
    to understand some basic programming concepts in Java, but if you know any programming
    language you should be able to follow along. Basic Git and Unix knowledge would
    be very helpful.
  prefs: []
  type: TYPE_NORMAL
- en: CircleCI
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: CircleCI is a hosted and automated solution for **continuous integration** (**CI**)
    builds. CircleCI uses an in application configuration file that uses YAML ( [http://yaml.org/spec/1.2/spec.html](http://yaml.org/spec/1.2/spec.html))
    syntax, such as Travis YML script, which we discussed in [Chapter 9](65f27cc1-0630-4515-be75-5eedeb8004e5.xhtml),
    *Installation and Basics of Travis CI*, to [Chapter 11](f2319c39-b2e4-40cb-b1bb-53daa589776b.xhtml),
    *Travis CI UI Logging and Debugging*. Since CircleCI is hosted in the cloud, it
    has the advantage that it can be set up quickly in other environments as well
    as used in different operating systems without having to worry about setup and
    installation like you have to do with Jenkins CI. Because of this, CircleCI is
    much faster to set up than Jenkins.
  prefs: []
  type: TYPE_NORMAL
- en: Comparing CircleCI and Jenkins
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Jenkins is a self-contained and open source automation server that is customizable
    and requires setup and configuration at the organization level. Remember in the
    Jenkins CI chapters, we spent some time installing Jenkins in the Windows, Linux,
    and macOS operating systems. We also had the ability to configure Jenkins however
    we wanted. While this is great for software companies with dedicated teams in
    operations, DevOps, and so on, it is not as great for open source projects where
    often lone developers are setting up environments for their personal projects.
  prefs: []
  type: TYPE_NORMAL
- en: CircleCI was designed around the principle of open source development and for
    ease of use. CircleCI can be set up within minutes of creating a project in the
    GitHub and Bitbucket platforms. Although CircleCI is not as customizable as Jenkins
    CI in this respect, it has the distinct advantage of having a quick setup. CircleCI
    uses an in application configuration file that uses YAML syntax and can be used
    in the GitHub ([https://github.com/](https://github.com/)) platform as well as
    in the Bitbucket ([https://bitbucket.org/](https://bitbucket.org/)) platform,
    unlike Travis CI.
  prefs: []
  type: TYPE_NORMAL
- en: CircleCI prerequisites
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In order to get started with CircleCI, you will need to either create a GitHub
    account at [https://github.com/](https://github.com/) or a Bitbucket account at  [https://bitbucket.org/product](https://bitbucket.org/product).
  prefs: []
  type: TYPE_NORMAL
- en: Creating a GitHub account
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We covered in detail how to create a GitHub account in [Chapter 9](65f27cc1-0630-4515-be75-5eedeb8004e5.xhtml), *Installation
    and Basics of Travis CI*, in the *Creating a GitHub account* section.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a Bitbucket account
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We will create a Bitbucket account and once again use the username of `packtci`
    for our user:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/c9637bd7-2562-420a-867a-34f214f89f8b.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Once you click the green Continue button, you will be redirected to a page
    like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/31f8559e-135d-4670-8f40-f53b3f7caac7.png)'
  prefs: []
  type: TYPE_IMG
- en: 'You will need to enter your Full name and a Password and the email address
    you provided in the previous page will already be set for you. Once you click
    the green Continue button, you will receive a verification email for your new
    Bitbucket account that looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/b7616f17-d59a-4178-9455-37f516fee550.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Once you click the Verify my email address button, you will be redirected to
    the following page:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/9d160f00-7ee5-4879-94fd-fad7888dcf0e.png)'
  prefs: []
  type: TYPE_IMG
- en: 'You must provide a unique username for your new Bitbucket account, as you cannot
    use any existing usernames. Once you click the Continue button, you will routed
    to the following page:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/6dd4fcde-f653-4f92-bf8d-a82f2d446fa0.png)'
  prefs: []
  type: TYPE_IMG
- en: 'You can either skip this section by clicking the Skip button or you can enter
    your information and then click the Submit button and you will be routed to the
    following page:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/962a0a33-991a-44cd-a1ef-08b15b487288.png)'
  prefs: []
  type: TYPE_IMG
- en: Creating a CircleCI account
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'You will need to create a CircleCI account in order to get started with CircleCI
    and you can either use your GitHub login credentials or your Bitbucket login credentials:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/39ad9180-338f-4ac7-befd-d36e61976b4b.png)'
  prefs: []
  type: TYPE_IMG
- en: 'You will need to click the Sign Up button in order to create a new CircleCI
    account and you will be redirected to the following page:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/b4a94106-f9c2-4258-bd5e-eaa5fd407be3.png)'
  prefs: []
  type: TYPE_IMG
- en: 'You can sign up with either but we will choose *Sign Up with Bitbucket**. O***nce
    you click the button, you will be redirected to the following page:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/078426cc-a695-40a3-be78-6d6d0be2fd85.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We will click the Grant access button and then we will be routed to the following
    page:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/1db8446d-a1c1-46a2-a864-616658e4c3cf.png)'
  prefs: []
  type: TYPE_IMG
- en: Notice that we have no projects set up to run in CircleCI and will need to add
    a project later on.
  prefs: []
  type: TYPE_NORMAL
- en: 'Even though we signed up our new Bitbucket account, we can still connect our
    GitHub account to our new CircleCI account. You will need to click on the avatar
    in the upper right corner of the screen and then click the User settings button:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/45e13624-b199-4c55-853a-4802ec136587.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Once you click the User settings button, you will be routed to a page showing Account
    Integrations. We need to connect our GitHub account to CircleCI by clicking the
    Connect button:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/acfbda9a-9678-4eb3-b8f2-f52a9f1f982e.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Once you click the Connect button, you will be redirected to an Authorize CircleCI application
    page that looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/ad503136-9770-4afa-a88a-be2b3a7099ad.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Once you click the Authorize circleci button, you will be redirected to the
    CircleCI dashboard page and you will now have two `packtci` accounts corresponding
    to your GitHub account and your Bitbucket account, respectively:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/7c04e8ed-5df5-44bb-b6e0-27a46be94129.png)'
  prefs: []
  type: TYPE_IMG
- en: Setting up CircleCI in GitHub
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let us add a new project to CircleCI with our `functional-summer` ([https://github.com/packtci/functional-summer](https://github.com/packtci/functional-summer))
    GitHub project using our `packtci`  ([https://github.com/packtci](https://github.com/packtci))
    GitHub account. The first thing we need to do is to click the Add Projects button
    for GitHub that looks like this in the dashboard:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/717943b4-8242-46fc-bdb4-0e0b400f053a.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Once you click the Add Projects button you will be routed to a page like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/dfe9f6fd-c8b0-4d42-b6aa-e8249a6f3489.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We will click the Set Up Project button for the `functional-summer` GitHub
    repository and will be routed to a page like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/9b6a8138-7d43-47a7-a211-62aa256ae9b0.png)'
  prefs: []
  type: TYPE_IMG
- en: 'CircleCI automatically picked Node as our language because we have a `package.json`
    file and because we have JavaScript files in this repository. We are not done
    yet, though. If you scroll further down this page, you will notice some next steps
    to get CircleCI started in our project:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/77b296fe-5b73-4e36-a9be-25072538959c.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We need to create a folder called `.circleci` in the root of our project and
    add a file called `config.yml` in this folder. Let us create this folder and file
    by using the GitHub UI. We will go to the following URL: [https://github.com/packtci/functional-summer](https://github.com/packtci/functional-summer).
    Then click the Create new file button:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/1c32c15c-a00b-4251-ab9c-17b5ab4c8ee2.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Once we click this button, we will be redirected to a page like this in the
    GitHub UI:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/62fe413c-6c1e-4b08-b1ec-13de1a2c5730.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Enter the name of our folder as `.circleci` and then enter the `/` character
    and then name our file `config.yml`. Once you are done, it will look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/a76294cb-f5b4-4ebe-ba55-78230d524731.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now we need to enter contents for our `config.yml` file and `.circleci` provides
    us with a sample `config.yml` file with values that we can use for our new CircleCI
    project:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'We will explain the contents of this in more detail later but for now we will
    just copy and paste this into the GitHub UI Editor and then click the Commit new
    file button:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/efbe44f4-10b2-4436-aa08-17ce1def5339.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The last step that we need to do is to go back to the Add Projects page in
    CircleCI and click the Start building button to launch our newly configured project
    in CircleCI:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/70141810-499d-45d8-9dac-a518c209c6ba.png)'
  prefs: []
  type: TYPE_IMG
- en: This also sets up a webhook with CircleCI so that CircleCI listens to any new
    code changes that we commit to GitHub.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once we click the Start building button, we will be redirected to our first
    build job with our `functional-summer` repository with CircleCI:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/bb38ec4f-204b-4c1e-af9e-7409e2f3d227.png)'
  prefs: []
  type: TYPE_IMG
- en: 'If we scroll further down, we will see each step of the build in the CircleCI
    application:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/7eec3ceb-c381-4f02-97b1-e228ee94aadf.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We will explain this in greater detail in later chapters but each step can
    be expanded to show the detail for that step. For example, if we click the yarn
    test step, we will see the following details:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/e490c4ff-e4fb-4918-82a6-fc75c8c80c28.png)'
  prefs: []
  type: TYPE_IMG
- en: Setting up CircleCI in Bitbucket
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Since we have just created a new Bitbucket account, we will need to upload
    our ssh keys into Bitbucket to be able to push changes to Bitbucket. We covered
    how to create SSH keys in [Chapter 9](65f27cc1-0630-4515-be75-5eedeb8004e5.xhtml), *Installation
    and Basics of Travis CI*, in the *Adding a SSH key to your new GitHub account *section,
    so please read that chapter if you do not have any SSH keys set up already. We
    already created an SSH Key in *Chapter 9, Installation and Basics of Travis CI*
    in the *Adding an SSH Key to your new GitHub Account* section. We just need to
    copy the public ssh key into our system clipboard, by running the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Once we have our public SSH key copied into our system clipboard, we need to
    go to the following page in Bitbucket:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/0cf57ed2-793b-4608-bf7b-6c949403d30b.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We will need to click the Add key button. This will open a modal where we enter
    a label and the contents of our public key, which looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/d43516f1-3396-4b0f-b269-50f13201a48b.png)'
  prefs: []
  type: TYPE_IMG
- en: We then click the Add key button and now we are ready to push changes to our
    Bitbucket account.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up a new Java project in Bitbucket with CircleCI build
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We will create a new Java project in Bitbucket called `java-summer` by clicking
    on the plus button in the left navigation pane:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/8d4cfacc-ca43-4373-a253-5ccc64c523ac.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Next we will click the Repository button, which looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/0067be31-254a-45d4-b5c5-90b7ceda9c12.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Next we will create a new repository by providing a Repository name, setting
    our Version control system to Git, and then finish by clicking the Create repository
    button:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/e09cf57c-8f00-4248-beac-10b27055218d.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Notice here that we clicked the optional Advanced settings dropdown and set
    our Language to the Java programming language. Once we click the Create repository
    button, we will be redirected to a page that could look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/b14b4643-df50-4252-a4c3-7e5828c9a0f6.png)'
  prefs: []
  type: TYPE_IMG
- en: We will use the Maven build tool to create a new Java project that has a `src`
    directory with a main subdirectory and a test subdirectory. We explained in detail
    in [Chapter 7](6b13378c-73a7-4dc5-b547-0e6f2f153927.xhtml),* Developing Plugins*,
    how to install and use the Maven build tool, so please reread the appropriate
    sections in [Chapter 7](https://cdp.packtpub.com/hands_on_continuous_integration_and_delivery/wp-admin/post.php?post=35&action=edit#post_30),* Developing
    Plugins*, if you don't have Maven installed and don't know how to use it.
  prefs: []
  type: TYPE_NORMAL
- en: 'To create our new Java project with Maven, we will issue the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'We will first clone our repository by issuing the following command in a shell
    session:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'We will then copy the contents of the hidden `.git` directory in this cloned
    repository and paste it into our new `java-summer` folder that we created with
    the Maven build tool. Assuming that we have the correct path structure, we can
    issue the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: We can then delete the `java-summer-proj` folder and then `cd` into the `java-summer`
    folder. We will then use the Java language sample configuration, which you can
    find at **language-java** ([https://circleci.com/docs/2.0/language-java/](https://circleci.com/docs/2.0/language-java/))
    in CircleCI documentation. We will create a folder called `.circleci` and then
    create a file called `config.yml`.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will commit our changes and push it to Bitbucket with the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Now if you look at the CircleCI application, we can switch to the packtci Bitbucket
    user account by clicking on the upper left of the application, which looks like
    this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/1ff09b67-9bfa-4fba-b457-39e115778495.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Next we need to click the ADD PROJECTS button in the left navigation pane,
    which looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/4ba24bf5-8120-472d-8de3-539c4e71ae2f.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We then need to click the Set Up Project button so that CircleCI knows about
    our `java-summer` repository in Bitbucket, which looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/560414e9-269a-4463-b14c-6908451c72ab.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We will then be routed to the Set Up Project page where we need to pick our
    operating system, which defaults to Linux in CircleCI. Then we pick our build
    language, which should be Java in our case. For clarity, we will show this page
    once again in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/4c28eea2-ce14-492a-a9ab-96c0041cc10a.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We will then copy the sample configuration file that CircleCI provided for
    us into the `.circleci/config.yml` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Next we will commit the changes and push it up into Bitbucket version control
    system and then we need to scroll to the Next Steps section and simply click the
    Start building button, which looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/86f5041d-52f3-4e25-a3d5-cdabdb6e5781.png)'
  prefs: []
  type: TYPE_IMG
- en: 'This will trigger our first build for the `java-summer` project and get the
    webhook working for the repository. Once we click the Start building button, we
    need to click the JOBS button, in order to see our new build that was triggered:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/83ac58b8-7a05-4e9c-a227-685f38cae333.png)'
  prefs: []
  type: TYPE_IMG
- en: Now to test that the webhooks are listening to code changes in Bitbucket, let
    us make a change to our `java-summer` file so that it actually has a function
    that sums up an array of values and add a unit test case with JUnit ([https://junit.org/junit4/javadoc/latest/](https://junit.org/junit4/javadoc/latest/)).
  prefs: []
  type: TYPE_NORMAL
- en: 'Let us add a static function like this in the app file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Then let us add a test case to test the average function like this with JUnit:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: We can test the changes locally with the `mvn package`  command to make sure
    that nothing is broken and then commit our changes and push these changes up to
    the Bitbucket version control system. We should now notice a build that was automatically
    triggered with CircleCI because of our code change to the master branch.
  prefs: []
  type: TYPE_NORMAL
- en: 'If we go back to the CircleCI web application, we can see that a new build
    was triggered and that it passed:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/73a4fd33-6554-4c2a-997a-542296cebbb6.png)'
  prefs: []
  type: TYPE_IMG
- en: Notice that in the preceding screenshot, CircleCI shows that the second build
    was triggered. It also shows the commit SHA hash and the commit message and confirms
    that the build was a success.
  prefs: []
  type: TYPE_NORMAL
- en: CircleCI configuration overview
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: CircleCI uses YAML ([http://yaml.org/spec/1.2/spec.html](http://yaml.org/spec/1.2/spec.html)),
    which is a data serialization language, for its configuration language, as does
    Travis CI.
  prefs: []
  type: TYPE_NORMAL
- en: Concept overview of CircleCI configuration
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We will discuss many more concepts and configuration options in CircleCI in
    later chapters but, as an overview, let us look at a basic `config.yml` file and
    explain some of its concepts. We will create a new repository in GitHub with our
    `packtci` ([https://github.com/packtci](https://github.com/packtci)) Github user.
    You can find the new repository at [https://github.com/packtci/go-template-example-with-circle-ci](https://github.com/packtci/go-template-example-with-circle-ci).
    We will also create a function in Golang that parses a template. We will then
    write a test case that parses the template text and then create a CircleCI `config.yml`
    file. We will push these code changes up to GitHub and then finally set up this
    new project with CircleCI.
  prefs: []
  type: TYPE_NORMAL
- en: Adding source files to the new repository
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In the new repository, we added a file called `template.go` and here is the
    function we will test:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'We added the following unit test case to test the `parseTemplate` function
    in the `template_test.go` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'We then added the following CircleCI YML script to the repository:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: The first thing to add in a CircleCI YML script is the version ([https://circleci.com/docs/2.0/configuration-reference/#version](https://circleci.com/docs/2.0/configuration-reference/#version))
    field. This is a required field to add, and at the moment **version 1** is still
    supported but will soon become deprecated so it is advised to use **version 2** of
    the CircleCI YML syntax. You can read more about this in the following CircleCI
    blog post: [https://circleci.com/blog/sunsetting-1-0/](https://circleci.com/blog/sunsetting-1-0/).
  prefs: []
  type: TYPE_NORMAL
- en: The next thing we have in this `config.yml` script is the jobs ([https://circleci.com/docs/2.0/configuration-reference/#jobs](https://circleci.com/docs/2.0/configuration-reference/#jobs))
    field, which is comprised of one or more named jobs. In our case, we have one
    named job called build and this build job is required if we are not using the
    workflows field. We will discuss this in greater detail in later chapters.
  prefs: []
  type: TYPE_NORMAL
- en: We then have a field called `docker`, which has a language image for Golang.
    We can also have a service image to run a particular service, which we will discuss
    in later chapters.
  prefs: []
  type: TYPE_NORMAL
- en: We then have a field called `steps`, which defines the steps we want to execute
    in our CircleCI build. Notice that we have three field entries in the `steps`
    field, which are `checkout` and two `run` ([https://circleci.com/docs/2.0/configuration-reference/#jobs](https://circleci.com/docs/2.0/configuration-reference/#jobs))
    commands. The run commands have a name and a command but you can also omit a name
    and just give a command.
  prefs: []
  type: TYPE_NORMAL
- en: CircleCI build job for the new repository
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The following screenshot shows that the CircleCI build passed:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/e082879b-17e6-4fbb-a726-131992ca9edc.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Here are the steps in the build job:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/60506a6b-8f14-41a5-93ba-477a53144542.png)'
  prefs: []
  type: TYPE_IMG
- en: Notice here that there is an additional step called Spin up Environment. This
    step creates a new build environment and, for our build in particular, it creates
    a Golang Docker image and then sets some CircleCI-specific environment variables.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we covered the differences between CircleCI and Travis CI and
    covered the prerequisites of CircleCI. We created a new Bitbucket account and
    explained the basics of the Bitbucket UI and where to upload your SSH keys for
    repository access in Bitbucket. We then set up CircleCI in GitHub and Bitbucket
    and explained parts of the CircleCI web application and how to navigate around
    it. We finished by giving a brief overview of the CircleCI YAML configuration
    syntax. In the next chapter, we will go over the CircleCI commands and go over
    some more advanced topics in CircleCI, such as workflows.
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: What is the primary difference between Jenkins and Travis CI?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Can CircleCI work in both Bitbucket and GitHub?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Where do you set up a repository in CircleCI?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How do you view build jobs in CircleCI?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Which build tool did we use in the `java-summer` repository in Bitbucket?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Should you be using version 1 of the CircleCI syntax?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In what field do we enter our build language in CircleCI `config.yml` script?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You can further explore concepts in CircleCI by looking at the official CircleCI
    documentation at [https://circleci.com/docs/2.0/.](https://circleci.com/docs/2.0/)
  prefs: []
  type: TYPE_NORMAL
