- en: Making Your Own Directives and Plugins
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we will look at ways of extending Vue. First, we will code
    our own directives and see how we can use them. Next, we will make a custom Vue
    plugin.
  prefs: []
  type: TYPE_NORMAL
- en: 'More specifically, in this chapter, we will examine the following:'
  prefs: []
  type: TYPE_NORMAL
- en: The structure of custom directives and how to make them
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using global and local custom directives
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Passing values to custom directives
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Authoring Vue plugins
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Publishing Vue plugins
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Making our own directives
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In Vue 2, components are the go-to strategy to use, be it keeping things DRY
    or abstracting away some functionality. However, another approach that you can
    take is to utilize custom directives.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding custom directives
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As we discussed earlier in this book, directives help us explain to Vue what
    kind of behavior we would like to attach to a piece of markup. As we have previously
    seen, there are a number of directives that come built-in with Vue. Some examples
    are `v-on`, `v-if`, `v-model`, and so on. As a quick refresher, a directive is
    an HTML attribute that starts with `v-`.
  prefs: []
  type: TYPE_NORMAL
- en: 'When we need to build a custom directive, we simply provide a custom word after
    the hyphen. For example, we could create a custom directive, which we''ll call `v-custom-directive`,
    and we can then use this name in our markup, for example, like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Note that it is perfectly normal to have a directive without a value, just
    like it is to provide it a value, like so:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, in our JS code, we would need to register this directive, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: So, as we can see, the first argument provided to `Vue.directive` is the name
    of our custom directive. Note that the Vue convention of using kebab-case in HTML
    and lowerCamelCase in JS is also applied to custom directives.
  prefs: []
  type: TYPE_NORMAL
- en: The second argument provided to our custom directive is an object that holds
    all of the directive's functionality.
  prefs: []
  type: TYPE_NORMAL
- en: As you might infer by now, the previous code gives an example of registering
    a directive globally. If you would like to register a directive locally, you would
    need to specify a `directives` option to a specific component.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, we could register a local component as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Just like components, directives use hooks too, which allows us to control
    when their functionality will be called. There are five directive hooks: `bind`,
    `inserted`, `update`, `componentUpdated`, and `unbind`.'
  prefs: []
  type: TYPE_NORMAL
- en: For a full list of arguments that some of these hooks can take, you can refer
    to [https://vuejs.org/v2/guide/custom-directive.html#Directive-Hook-Arguments](https://vuejs.org/v2/guide/custom-directive.html#Directive-Hook-Arguments).
  prefs: []
  type: TYPE_NORMAL
- en: Building a simple custom directive
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The full code for this example is available here: [https://codepen.io/AjdinImsirovic/pen/yxWObV](https://codepen.io/AjdinImsirovic/pen/yxWObV).'
  prefs: []
  type: TYPE_NORMAL
- en: 'In our HTML, we will add the following simple code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'In our JS, we will add our `customDirective` globally:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: In the previous code, we are using the `inserted` directive hook. With this
    hook, the directive's code will be run when the element that the directive is
    bound to is *inserted* into its parent node.
  prefs: []
  type: TYPE_NORMAL
- en: When this occurs, the element will be styled according to the values we assigned
    to `el.style.cssText`.
  prefs: []
  type: TYPE_NORMAL
- en: Of course, there is nothing preventing us from using more than one custom directive
    on an element. For example, we could specify several custom directives, and then
    mix and match them as suitable.
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, we are going to rewrite the global custom directive as
    a local one.
  prefs: []
  type: TYPE_NORMAL
- en: Using local directives
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let's now look at how we could rewrite the previous code so that our directive
    uses local directives instead of a global one.
  prefs: []
  type: TYPE_NORMAL
- en: In this section, we will build a very simple custom directive. We will use an
    example from [Chapter 4](47cb5109-67ad-44b5-8d5c-31343859b6ae.xhtml), *Filters
    and Mixins*, and we will build on it, so that we can easily compare the differences
    to the previous example, only this time with a simple local custom directive.
  prefs: []
  type: TYPE_NORMAL
- en: The code for this example is available here: [https://codepen.io/AjdinImsirovic/pen/yxWJNp](https://codepen.io/AjdinImsirovic/pen/yxWJNp).
  prefs: []
  type: TYPE_NORMAL
- en: 'In our HTML, we will specify the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'In our JS, we will specify the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: In the next section, we will see how to pass values to custom directives.
  prefs: []
  type: TYPE_NORMAL
- en: Passing values to custom directives
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We will improve on this chapter''s initial example by allowing our custom directives
    to receive arguments. The code for this example is available in this pen: [https://codepen.io/AjdinImsirovic/pen/xaNgPN](https://codepen.io/AjdinImsirovic/pen/xaNgPN).'
  prefs: []
  type: TYPE_NORMAL
- en: 'This is the HTML for our example of passing values to custom directives:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'And here is the JavaScript:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, still in JS, we add the Vue constructor with the `options` object:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Note that the specific settings for directive hook arguments can be found at [https://vuejs.org/v2/guide/custom-directive.html#Directive-Hook-Arguments](https://vuejs.org/v2/guide/custom-directive.html#Directive-Hook-Arguments).
    The one argument that is of most interest to us is `binding`, which is an object
    with these properties: `name`, `value`, `oldValue`, `expression`, `arg`, and `modifiers`.'
  prefs: []
  type: TYPE_NORMAL
- en: In the previous code, we see an example of passing two different values that
    give us different results based on the values passed. We also see an example of
    what happens when we pass a nonsensical value (one that utilizes the `switch`
    statement's `default` branch).
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, we will discuss ways in which we can further extend Vue
    functionality by building Vue plugins.
  prefs: []
  type: TYPE_NORMAL
- en: Working with Vue plugins
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Some popular Vue plugins are Vuex and Vue-router. A Vue plugin is used when
    we need to give additional functionality to Vue globally. There are a few very
    common scenarios where Vue plugins might be useful: adding global methods, adding
    global assets, adding instance methods on `Vue.prototype`, or adding global mixins.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Where Vue plugins shine is the ability to share them with the community. To
    get an idea of the vastness of Vue''s plugin system, navigate to the following
    URLs: [https://github.com/vuejs/awesome-vue#components--libraries](https://github.com/vuejs/awesome-vue#components--libraries) and [https://vuejsexamples.com/](https://vuejsexamples.com/).'
  prefs: []
  type: TYPE_NORMAL
- en: Next, we'll create a simple Vue plugin.
  prefs: []
  type: TYPE_NORMAL
- en: Creating the simplest possible Vue plugin
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We'll begin by creating the simplest possible Vue plugin. In order to do that,
    we'll again use Vue CLI, version 3\. The instructions for setting up Vue CLI are
    available in [Chapter 3](dc944b0b-91b8-462b-a64b-5d92621565ac.xhtml), *Working
    with Vue-CLI, Components, Props, and Slots*.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we will need to initialize a new project. Navigate your console to the
    parent folder in which you want to create a new Vue project, and run the following
    commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: When we run the first of these three commands, we will be asked a few questions,
    and after that, a large number of packages will be run. This can take some time—a
    nice opportunity for a short break. Once done, and we have run the other two commands
    listed before, our boilerplate Vue app will be available at `localhost:8080`.
  prefs: []
  type: TYPE_NORMAL
- en: To start off, let's create a new folder inside the `src` folder and call it
    `plugins`. Next, inside the `plugins` folder, let's make another folder, which
    we'll call `SimplePlugin`. Inside the `SimplePlugin` folder, let's make a new
    file and call it `index.js`.
  prefs: []
  type: TYPE_NORMAL
- en: 'A Vue plugin is an object. For our plugin object to be accessible to our Vue
    app, we need to make it available by exporting it. Therefore, let''s add this
    export code to our `index.js` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'A Vue''s plugin object has an `install` method. The `install` method takes
    in two arguments. The first argument is the `Vue` object, and the second argument
    is the `options` object. Therefore, we''ll add the `install` method inside the
    `plugin` object:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Currently, inside our `install` method, we are only alerting a message to the
    browser. This is the absolute minimum of functionality our plugin can have. With
    this functionality in place, it's time to use our plugin inside our app.
  prefs: []
  type: TYPE_NORMAL
- en: Note that we are also concatenating the `options` argument to our alert message.
    If we didn't do it, our Vue-cli would throw an error, stating that <q>options
    is defined but never used</q>. Apparently, it favors the <q>(no-unused-vars)</q>
    scenarios.
  prefs: []
  type: TYPE_NORMAL
- en: 'To use the plugin, we need to open our `main.js` file and import the plugin
    by adding these two lines of code on line three of the `main.js` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: First, we import the plugin and we specify the import path. Next, we add our
    plugin as an argument to the `Vue.use` method.
  prefs: []
  type: TYPE_NORMAL
- en: 'With this, we have successfully authored the simplest possible plugin. Open
    your local project at `localhost:8080` and you''ll be greeted with the alert message,
    stating this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: Next, we'll see how to add the options object to our plugins.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a plugin with options defined
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Due to the way we have set up our project, we will leave `SimplePlugin` as is
    and, in this section of our exploration of plugins in Vue, we'll add another folder
    inside our `plugins` folder in our project. We'll call this folder `OptionsPlugin`
    and inside of it, we'll again create an `index.js` file.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, let''s update the `main.js` file, so that now it looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, back in `OptionsPlugin/index.js`, we will add the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'Notice that we have completely omitted the `options` object in the `install`
    method. The reason is simple: the `options` object is optional, and not providing
    it will not break our code.'
  prefs: []
  type: TYPE_NORMAL
- en: In the previous plugin definition, we are getting the length of the `el.innerText`
    string, and then we are logging it out to the console. Additionally, the `el` that
    has our plugin's custom `v-text-length` directive applied will also be made more
    noticeable with a red border.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, let''s use the functionality from our plugin in a  component''s template.
    Specifically, we''ll use it at the beginning of the `HelloWorld.vue` file inside
    the `src/components` folder:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'Running our app in the browser at this point will produce the following message
    in the console:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: Now, we can introduce our `options` object. The purpose of the `options` object
    will be to allow us to customize the way in which the HTML element that is affected
    by the `v-text-length` directive is displayed. In other words, we can decide to
    give the users of our plugin the option to choose between different kinds of styles
    based on options that we pass in.
  prefs: []
  type: TYPE_NORMAL
- en: 'So, let''s update our plugin with the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: There are a few things happening in the previous code. First, we are creating
    an object on the fly and we are assigning it to `const OptionsPlugin`. At the
    bottom of the file, we are exporting the `OptionsPlugin` we have just defined.
  prefs: []
  type: TYPE_NORMAL
- en: Inside the `optionsPlugin` object, we are using a couple of if statements to
    serve different styles based on the length of text found in the text node of the
    `el` element. If the length of text is less than 40 characters, then we will assign
    the value `options.selectedOption
  prefs: []
  type: TYPE_NORMAL
- en: .plum` to the `border` CSS property.
  prefs: []
  type: TYPE_NORMAL
- en: Otherwise, if the length of text is equal to or greater than 40 characters,
    we will assign the value of `options.selectedOption.orange` to the `border` CSS
    property inside the inline `style` attribute of the element in question.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, let''s set these option values. We''ll do that in our `main.js` file.
    We''ll update the section where we use the plugin to the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, in the `HelloWorld.vue` file, we made only a slight update. We add
    the plugin-defined directive to the `p` tag that follows right after the `h1`
    tag:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, when we run our app, we''ll get the following text logged to the console:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: In our viewport, this plugin will add a dashed purple border around the `h1`
    tag and a double orange border around the `p` tag.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now that we understand the basic way in which plugins can be created and used,
    we can think of creative ways to make our plugin do something more useful. For
    example, we could improve the existing plugin by adding a tooltip that would display
    the number of words that are present in different elements on the page. We could
    also add color intensity: the more words there are, the more color we could give
    to this "character count" badge.'
  prefs: []
  type: TYPE_NORMAL
- en: Alternatively, we could list the values present in the style attribute, or the
    class attribute, or both. This plugin would be useful for the quick inspection
    of styles without opening the dev tools, which could prove useful on smaller screens
    or workstations that have only one screen available.
  prefs: []
  type: TYPE_NORMAL
- en: Next, we'll discuss how we can publish a Vue plugin. Specifically, we will publish
    the OptionsPlugin we just made.
  prefs: []
  type: TYPE_NORMAL
- en: Publishing a Vue plugin
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A prerequisite to authoring an `npm` plugin is registering on the website and
    verifying your email address. Hence, the first step in authoring your Vue plugin
    on `npm` is to visit [https://www.npmjs.com](https://www.npmjs.com) and register
    an account.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will publish our Vue plugin on `npm`. First, let''s check whether we already
    have a user. Run the following command in your console:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'If that throws an error, you will need to create a new user by running this
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: Then, just follow the instructions to add yourself as the user.
  prefs: []
  type: TYPE_NORMAL
- en: Adding a simple plugin
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To add a simple, one-file plugin, simply run `npm init` in the folder of your 
    choice. This command will help you create a `package.json` file.
  prefs: []
  type: TYPE_NORMAL
- en: 'This is the list of questions and answers provided:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: The default answers that the `npm init` utility provides are listed in round
    brackets. To accept the defaults, simply press the *Enter* key. Otherwise, simply
    type the desired answer.
  prefs: []
  type: TYPE_NORMAL
- en: 'There is also the concept of scope for `npm` authors. Scope is simply your
    username. The best approach to not having to worry about scope is to have it set
    in your `.npmrc` file, via the command line, by running the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: Of course, you need to replace the word `username` with your actual username.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once done, run the `dir` command to list the contents of the folder. It should
    list only one file: `package.json`. Now, we can create another file, named `OptionsPlugin.vue`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s quickly verify that our `package.json` file looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, let''s update the `OptionsPlugin.vue` file with this code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, let''s add a `README.md` file. The `md` file extension stands for
    Markdown, which is a format that makes it very easy to author content online.
    We will add the following contents to the `README`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]bash'
  prefs: []
  type: TYPE_NORMAL
- en: npm install --save optionsplugin
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]javascript'
  prefs: []
  type: TYPE_NORMAL
- en: import Vue from 'vue';
  prefs: []
  type: TYPE_NORMAL
- en: import OptionsPlugin from 'optionsplugin'
  prefs: []
  type: TYPE_NORMAL
- en: Vue.use(OptionsPlugin, {
  prefs: []
  type: TYPE_NORMAL
- en: 'selectedOption: {'
  prefs: []
  type: TYPE_NORMAL
- en: 'plum: "5px dashed purple",'
  prefs: []
  type: TYPE_NORMAL
- en: 'orange: "10px double orange"'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '})'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'This should be a good starting point for our plugin''s description. We can
    always improve the `README` later. Now that we have `package.json`, `README.md`,
    and `OptionsPlugin.vue` ready, we can publish our plugin simply by running this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: We need to provide the `--access=public` flag to our `npm publish` command,
    because scope packages default to private access and we need to explicitly override
    this setting.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once published, our console will log out the following information:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: 'This is the sign that we have successfully published our plugin. Our new plugin
    now has its very own home, at the following URL:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://www.npmjs.com/package/vue-options-plugin](https://www.npmjs.com/package/vue-options-plugin).'
  prefs: []
  type: TYPE_NORMAL
- en: Finally, let's look how to install our newly added plugin to another project.
  prefs: []
  type: TYPE_NORMAL
- en: Installing our NPM plugin in a Vue project using Vue CLI 3
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To install our Vue plugin from `npm`, we need to first create a new project.
    Let''s run these commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, we can add our `npm` plugin by running this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: 'That''s all there is to it; now, our plugin is available in our project and
    we can use it as described earlier, by importing it like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: And now, we can use our plugin's functionality as needed.
  prefs: []
  type: TYPE_NORMAL
- en: Additional plugins to learn from
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'It is always good to look at well-coded examples of other people''s code, so
    that we can learn from them. Some useful plugins that we can learn from and possibly
    contribute to are these:'
  prefs: []
  type: TYPE_NORMAL
- en: A guided tour plugin, vue-tour: [https://github.com/pulsardev/vue-tour](https://github.com/pulsardev/vue-tour)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Multi-select plugin, vue-multiselect: [https://vue-multiselect.js.org/](https://vue-multiselect.js.org/)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A tooltip plugin, v-tooltip: [https://akryum.github.io/v-tooltip](https://akryum.github.io/v-tooltip)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we looked at creating custom directives and custom plugins
    in Vue. We covered how to structure custom directives, and how to make global
    and local custom directives. We also looked at passing values to custom directives
    and working with Vue plugins. We looked at how to create a couple of custom Vue
    plugins. Finally, we have seen how to publish our plugin to `npm` and how to install
    it in our projects from NPM.
  prefs: []
  type: TYPE_NORMAL
- en: In the chapter that follows, we will examine how to make our apps feel more
    interactive with the help of transitions and animations.
  prefs: []
  type: TYPE_NORMAL
