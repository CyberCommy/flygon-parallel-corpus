- en: Making Your Own Directives and Plugins
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 制作您自己的指令和插件
- en: In this chapter, we will look at ways of extending Vue. First, we will code
    our own directives and see how we can use them. Next, we will make a custom Vue
    plugin.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一章中，我们将看看扩展Vue的方法。首先，我们将编写自己的指令并看看如何使用它们。接下来，我们将制作一个自定义的Vue插件。
- en: 'More specifically, in this chapter, we will examine the following:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 更具体地，在这一章中，我们将研究以下内容：
- en: The structure of custom directives and how to make them
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 自定义指令的结构以及如何制作它们
- en: Using global and local custom directives
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用全局和本地自定义指令
- en: Passing values to custom directives
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 向自定义指令传递值
- en: Authoring Vue plugins
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 编写Vue插件
- en: Publishing Vue plugins
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 发布Vue插件
- en: Making our own directives
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 制作我们自己的指令
- en: In Vue 2, components are the go-to strategy to use, be it keeping things DRY
    or abstracting away some functionality. However, another approach that you can
    take is to utilize custom directives.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在Vue 2中，组件是使用的主要策略，无论是保持DRY还是抽象化一些功能。然而，你可以采取的另一种方法是利用自定义指令。
- en: Understanding custom directives
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解自定义指令
- en: As we discussed earlier in this book, directives help us explain to Vue what
    kind of behavior we would like to attach to a piece of markup. As we have previously
    seen, there are a number of directives that come built-in with Vue. Some examples
    are `v-on`, `v-if`, `v-model`, and so on. As a quick refresher, a directive is
    an HTML attribute that starts with `v-`.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们在本书中之前讨论过的，指令帮助我们解释给Vue什么样的行为我们想要附加到一段标记上。正如我们之前看到的，Vue内置了许多指令。一些例子是`v-on`，`v-if`，`v-model`等等。简单回顾一下，指令是以`v-`开头的HTML属性。
- en: 'When we need to build a custom directive, we simply provide a custom word after
    the hyphen. For example, we could create a custom directive, which we''ll call `v-custom-directive`,
    and we can then use this name in our markup, for example, like this:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们需要构建一个自定义指令时，我们只需在连字符后面提供一个自定义单词。例如，我们可以创建一个自定义指令，我们将其称为`v-custom-directive`，然后我们可以在我们的标记中使用这个名称，例如，像这样：
- en: '[PRE0]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Note that it is perfectly normal to have a directive without a value, just
    like it is to provide it a value, like so:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，拥有一个没有值的指令是完全正常的，就像为它提供一个值一样，就像这样：
- en: '[PRE1]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Next, in our JS code, we would need to register this directive, as follows:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，在我们的JS代码中，我们需要注册这个指令，如下所示：
- en: '[PRE2]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: So, as we can see, the first argument provided to `Vue.directive` is the name
    of our custom directive. Note that the Vue convention of using kebab-case in HTML
    and lowerCamelCase in JS is also applied to custom directives.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，正如我们所看到的，提供给`Vue.directive`的第一个参数是我们自定义指令的名称。请注意，Vue在HTML中使用kebab-case，而在JS中使用lowerCamelCase的约定也适用于自定义指令。
- en: The second argument provided to our custom directive is an object that holds
    all of the directive's functionality.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 提供给我们自定义指令的第二个参数是一个包含所有指令功能的对象。
- en: As you might infer by now, the previous code gives an example of registering
    a directive globally. If you would like to register a directive locally, you would
    need to specify a `directives` option to a specific component.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你现在可能推断的那样，前面的代码给出了全局注册指令的一个例子。如果你想要本地注册一个指令，你需要为特定组件指定一个`directives`选项。
- en: 'For example, we could register a local component as follows:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，我们可以注册一个本地组件如下：
- en: '[PRE3]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Just like components, directives use hooks too, which allows us to control
    when their functionality will be called. There are five directive hooks: `bind`,
    `inserted`, `update`, `componentUpdated`, and `unbind`.'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 就像组件一样，指令也使用钩子，这允许我们控制它们的功能何时被调用。有五个指令钩子：`bind`，`inserted`，`update`，`componentUpdated`和`unbind`。
- en: For a full list of arguments that some of these hooks can take, you can refer
    to [https://vuejs.org/v2/guide/custom-directive.html#Directive-Hook-Arguments](https://vuejs.org/v2/guide/custom-directive.html#Directive-Hook-Arguments).
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 有关某些这些钩子可以接受的参数的完整列表，您可以参考[https://vuejs.org/v2/guide/custom-directive.html#Directive-Hook-Arguments](https://vuejs.org/v2/guide/custom-directive.html#Directive-Hook-Arguments)。
- en: Building a simple custom directive
  id: totrans-25
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 构建一个简单的自定义指令
- en: 'The full code for this example is available here: [https://codepen.io/AjdinImsirovic/pen/yxWObV](https://codepen.io/AjdinImsirovic/pen/yxWObV).'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 此示例的完整代码在此处可用：[https://codepen.io/AjdinImsirovic/pen/yxWObV](https://codepen.io/AjdinImsirovic/pen/yxWObV)。
- en: 'In our HTML, we will add the following simple code:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的HTML中，我们将添加以下简单代码：
- en: '[PRE4]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'In our JS, we will add our `customDirective` globally:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的JS中，我们将全局添加我们的`customDirective`：
- en: '[PRE5]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: In the previous code, we are using the `inserted` directive hook. With this
    hook, the directive's code will be run when the element that the directive is
    bound to is *inserted* into its parent node.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 在先前的代码中，我们使用了`inserted`指令钩子。使用此钩子，当将指令绑定到的元素*插入*到其父节点中时，将运行指令的代码。
- en: When this occurs, the element will be styled according to the values we assigned
    to `el.style.cssText`.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 当这种情况发生时，该元素将根据我们分配给`el.style.cssText`的值进行样式设置。
- en: Of course, there is nothing preventing us from using more than one custom directive
    on an element. For example, we could specify several custom directives, and then
    mix and match them as suitable.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，没有什么能阻止我们在一个元素上使用多个自定义指令。例如，我们可以指定几个自定义指令，然后根据需要混合和匹配它们。
- en: In the next section, we are going to rewrite the global custom directive as
    a local one.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将重写全局自定义指令为本地自定义指令。
- en: Using local directives
  id: totrans-35
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用本地指令
- en: Let's now look at how we could rewrite the previous code so that our directive
    uses local directives instead of a global one.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们看看如何重写先前的代码，使我们的指令使用本地指令而不是全局指令。
- en: In this section, we will build a very simple custom directive. We will use an
    example from [Chapter 4](47cb5109-67ad-44b5-8d5c-31343859b6ae.xhtml), *Filters
    and Mixins*, and we will build on it, so that we can easily compare the differences
    to the previous example, only this time with a simple local custom directive.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将构建一个非常简单的自定义指令。我们将使用[第4章](47cb5109-67ad-44b5-8d5c-31343859b6ae.xhtml)中的一个示例，*过滤器和混合*，并在此基础上构建，以便我们可以轻松地将其与先前的示例进行比较，只是这次使用一个简单的本地自定义指令。
- en: The code for this example is available here: [https://codepen.io/AjdinImsirovic/pen/yxWJNp](https://codepen.io/AjdinImsirovic/pen/yxWJNp).
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 此示例的代码在此处可用：[https://codepen.io/AjdinImsirovic/pen/yxWJNp](https://codepen.io/AjdinImsirovic/pen/yxWJNp)。
- en: 'In our HTML, we will specify the following code:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的HTML中，我们将指定以下代码：
- en: '[PRE6]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'In our JS, we will specify the following code:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的JS中，我们将指定以下代码：
- en: '[PRE7]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: In the next section, we will see how to pass values to custom directives.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将看到如何将值传递给自定义指令。
- en: Passing values to custom directives
  id: totrans-44
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将值传递给自定义指令
- en: 'We will improve on this chapter''s initial example by allowing our custom directives
    to receive arguments. The code for this example is available in this pen: [https://codepen.io/AjdinImsirovic/pen/xaNgPN](https://codepen.io/AjdinImsirovic/pen/xaNgPN).'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将通过允许我们的自定义指令接收参数来改进本章的初始示例。此示例的代码在此笔中可用：[https://codepen.io/AjdinImsirovic/pen/xaNgPN](https://codepen.io/AjdinImsirovic/pen/xaNgPN)。
- en: 'This is the HTML for our example of passing values to custom directives:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我们示例中将值传递给自定义指令的HTML：
- en: '[PRE8]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'And here is the JavaScript:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是JavaScript代码：
- en: '[PRE9]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Finally, still in JS, we add the Vue constructor with the `options` object:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，在JS中，我们添加带有`options`对象的Vue构造函数：
- en: '[PRE10]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Note that the specific settings for directive hook arguments can be found at [https://vuejs.org/v2/guide/custom-directive.html#Directive-Hook-Arguments](https://vuejs.org/v2/guide/custom-directive.html#Directive-Hook-Arguments).
    The one argument that is of most interest to us is `binding`, which is an object
    with these properties: `name`, `value`, `oldValue`, `expression`, `arg`, and `modifiers`.'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
- en: In the previous code, we see an example of passing two different values that
    give us different results based on the values passed. We also see an example of
    what happens when we pass a nonsensical value (one that utilizes the `switch`
    statement's `default` branch).
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, we will discuss ways in which we can further extend Vue
    functionality by building Vue plugins.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
- en: Working with Vue plugins
  id: totrans-55
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Some popular Vue plugins are Vuex and Vue-router. A Vue plugin is used when
    we need to give additional functionality to Vue globally. There are a few very
    common scenarios where Vue plugins might be useful: adding global methods, adding
    global assets, adding instance methods on `Vue.prototype`, or adding global mixins.'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
- en: 'Where Vue plugins shine is the ability to share them with the community. To
    get an idea of the vastness of Vue''s plugin system, navigate to the following
    URLs: [https://github.com/vuejs/awesome-vue#components--libraries](https://github.com/vuejs/awesome-vue#components--libraries) and [https://vuejsexamples.com/](https://vuejsexamples.com/).'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
- en: Next, we'll create a simple Vue plugin.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
- en: Creating the simplest possible Vue plugin
  id: totrans-59
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We'll begin by creating the simplest possible Vue plugin. In order to do that,
    we'll again use Vue CLI, version 3\. The instructions for setting up Vue CLI are
    available in [Chapter 3](dc944b0b-91b8-462b-a64b-5d92621565ac.xhtml), *Working
    with Vue-CLI, Components, Props, and Slots*.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we will need to initialize a new project. Navigate your console to the
    parent folder in which you want to create a new Vue project, and run the following
    commands:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: When we run the first of these three commands, we will be asked a few questions,
    and after that, a large number of packages will be run. This can take some time—a
    nice opportunity for a short break. Once done, and we have run the other two commands
    listed before, our boilerplate Vue app will be available at `localhost:8080`.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
- en: To start off, let's create a new folder inside the `src` folder and call it
    `plugins`. Next, inside the `plugins` folder, let's make another folder, which
    we'll call `SimplePlugin`. Inside the `SimplePlugin` folder, let's make a new
    file and call it `index.js`.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
- en: 'A Vue plugin is an object. For our plugin object to be accessible to our Vue
    app, we need to make it available by exporting it. Therefore, let''s add this
    export code to our `index.js` file:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'A Vue''s plugin object has an `install` method. The `install` method takes
    in two arguments. The first argument is the `Vue` object, and the second argument
    is the `options` object. Therefore, we''ll add the `install` method inside the
    `plugin` object:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Currently, inside our `install` method, we are only alerting a message to the
    browser. This is the absolute minimum of functionality our plugin can have. With
    this functionality in place, it's time to use our plugin inside our app.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
- en: Note that we are also concatenating the `options` argument to our alert message.
    If we didn't do it, our Vue-cli would throw an error, stating that <q>options
    is defined but never used</q>. Apparently, it favors the <q>(no-unused-vars)</q>
    scenarios.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
- en: 'To use the plugin, we need to open our `main.js` file and import the plugin
    by adding these two lines of code on line three of the `main.js` file:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: First, we import the plugin and we specify the import path. Next, we add our
    plugin as an argument to the `Vue.use` method.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
- en: 'With this, we have successfully authored the simplest possible plugin. Open
    your local project at `localhost:8080` and you''ll be greeted with the alert message,
    stating this:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Next, we'll see how to add the options object to our plugins.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
- en: Creating a plugin with options defined
  id: totrans-77
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Due to the way we have set up our project, we will leave `SimplePlugin` as is
    and, in this section of our exploration of plugins in Vue, we'll add another folder
    inside our `plugins` folder in our project. We'll call this folder `OptionsPlugin`
    and inside of it, we'll again create an `index.js` file.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, let''s update the `main.js` file, so that now it looks like this:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Now, back in `OptionsPlugin/index.js`, we will add the following code:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Notice that we have completely omitted the `options` object in the `install`
    method. The reason is simple: the `options` object is optional, and not providing
    it will not break our code.'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
- en: In the previous plugin definition, we are getting the length of the `el.innerText`
    string, and then we are logging it out to the console. Additionally, the `el` that
    has our plugin's custom `v-text-length` directive applied will also be made more
    noticeable with a red border.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, let''s use the functionality from our plugin in a  component''s template.
    Specifically, we''ll use it at the beginning of the `HelloWorld.vue` file inside
    the `src/components` folder:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Running our app in the browser at this point will produce the following message
    in the console:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Now, we can introduce our `options` object. The purpose of the `options` object
    will be to allow us to customize the way in which the HTML element that is affected
    by the `v-text-length` directive is displayed. In other words, we can decide to
    give the users of our plugin the option to choose between different kinds of styles
    based on options that we pass in.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
- en: 'So, let''s update our plugin with the following code:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: There are a few things happening in the previous code. First, we are creating
    an object on the fly and we are assigning it to `const OptionsPlugin`. At the
    bottom of the file, we are exporting the `OptionsPlugin` we have just defined.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
- en: Inside the `optionsPlugin` object, we are using a couple of if statements to
    serve different styles based on the length of text found in the text node of the
    `el` element. If the length of text is less than 40 characters, then we will assign
    the value `options.selectedOption
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
- en: .plum` to the `border` CSS property.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
- en: Otherwise, if the length of text is equal to or greater than 40 characters,
    we will assign the value of `options.selectedOption.orange` to the `border` CSS
    property inside the inline `style` attribute of the element in question.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, let''s set these option values. We''ll do that in our `main.js` file.
    We''ll update the section where we use the plugin to the following code:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Finally, in the `HelloWorld.vue` file, we made only a slight update. We add
    the plugin-defined directive to the `p` tag that follows right after the `h1`
    tag:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Now, when we run our app, we''ll get the following text logged to the console:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: In our viewport, this plugin will add a dashed purple border around the `h1`
    tag and a double orange border around the `p` tag.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
- en: 'Now that we understand the basic way in which plugins can be created and used,
    we can think of creative ways to make our plugin do something more useful. For
    example, we could improve the existing plugin by adding a tooltip that would display
    the number of words that are present in different elements on the page. We could
    also add color intensity: the more words there are, the more color we could give
    to this "character count" badge.'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
- en: Alternatively, we could list the values present in the style attribute, or the
    class attribute, or both. This plugin would be useful for the quick inspection
    of styles without opening the dev tools, which could prove useful on smaller screens
    or workstations that have only one screen available.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
- en: Next, we'll discuss how we can publish a Vue plugin. Specifically, we will publish
    the OptionsPlugin we just made.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
- en: Publishing a Vue plugin
  id: totrans-106
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A prerequisite to authoring an `npm` plugin is registering on the website and
    verifying your email address. Hence, the first step in authoring your Vue plugin
    on `npm` is to visit [https://www.npmjs.com](https://www.npmjs.com) and register
    an account.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
- en: 'We will publish our Vue plugin on `npm`. First, let''s check whether we already
    have a user. Run the following command in your console:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'If that throws an error, you will need to create a new user by running this
    command:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: Then, just follow the instructions to add yourself as the user.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
- en: Adding a simple plugin
  id: totrans-113
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To add a simple, one-file plugin, simply run `npm init` in the folder of your 
    choice. This command will help you create a `package.json` file.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
- en: 'This is the list of questions and answers provided:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: The default answers that the `npm init` utility provides are listed in round
    brackets. To accept the defaults, simply press the *Enter* key. Otherwise, simply
    type the desired answer.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
- en: 'There is also the concept of scope for `npm` authors. Scope is simply your
    username. The best approach to not having to worry about scope is to have it set
    in your `.npmrc` file, via the command line, by running the following command:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: Of course, you need to replace the word `username` with your actual username.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
- en: 'Once done, run the `dir` command to list the contents of the folder. It should
    list only one file: `package.json`. Now, we can create another file, named `OptionsPlugin.vue`:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Let''s quickly verify that our `package.json` file looks like this:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Next, let''s update the `OptionsPlugin.vue` file with this code:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'Finally, let''s add a `README.md` file. The `md` file extension stands for
    Markdown, which is a format that makes it very easy to author content online.
    We will add the following contents to the `README`:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]bash'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
- en: npm install --save optionsplugin
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]javascript'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
- en: import Vue from 'vue';
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
- en: import OptionsPlugin from 'optionsplugin'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
- en: Vue.use(OptionsPlugin, {
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
- en: 'selectedOption: {'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
- en: 'plum: "5px dashed purple",'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
- en: 'orange: "10px double orange"'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
- en: '})'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'This should be a good starting point for our plugin''s description. We can
    always improve the `README` later. Now that we have `package.json`, `README.md`,
    and `OptionsPlugin.vue` ready, we can publish our plugin simply by running this:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: We need to provide the `--access=public` flag to our `npm publish` command,
    because scope packages default to private access and we need to explicitly override
    this setting.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
- en: 'Once published, our console will log out the following information:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'This is the sign that we have successfully published our plugin. Our new plugin
    now has its very own home, at the following URL:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
- en: '[https://www.npmjs.com/package/vue-options-plugin](https://www.npmjs.com/package/vue-options-plugin).'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
- en: Finally, let's look how to install our newly added plugin to another project.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
- en: Installing our NPM plugin in a Vue project using Vue CLI 3
  id: totrans-148
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To install our Vue plugin from `npm`, we need to first create a new project.
    Let''s run these commands:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  id: totrans-150
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'Now, we can add our `npm` plugin by running this:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  id: totrans-152
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'That''s all there is to it; now, our plugin is available in our project and
    we can use it as described earlier, by importing it like this:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  id: totrans-154
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: And now, we can use our plugin's functionality as needed.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
- en: Additional plugins to learn from
  id: totrans-156
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'It is always good to look at well-coded examples of other people''s code, so
    that we can learn from them. Some useful plugins that we can learn from and possibly
    contribute to are these:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
- en: A guided tour plugin, vue-tour: [https://github.com/pulsardev/vue-tour](https://github.com/pulsardev/vue-tour)
  id: totrans-158
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Multi-select plugin, vue-multiselect: [https://vue-multiselect.js.org/](https://vue-multiselect.js.org/)
  id: totrans-159
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A tooltip plugin, v-tooltip: [https://akryum.github.io/v-tooltip](https://akryum.github.io/v-tooltip)
  id: totrans-160
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Summary
  id: totrans-161
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we looked at creating custom directives and custom plugins
    in Vue. We covered how to structure custom directives, and how to make global
    and local custom directives. We also looked at passing values to custom directives
    and working with Vue plugins. We looked at how to create a couple of custom Vue
    plugins. Finally, we have seen how to publish our plugin to `npm` and how to install
    it in our projects from NPM.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
- en: In the chapter that follows, we will examine how to make our apps feel more
    interactive with the help of transitions and animations.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
