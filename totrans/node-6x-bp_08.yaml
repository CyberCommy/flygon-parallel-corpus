- en: Chapter 8.  Creating a Blog with the Keystone CMS
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we discuss the use of a CMS made entirely with Node.js, called
    **Keystone**.
  prefs: []
  type: TYPE_NORMAL
- en: The **KeystoneJS** describes itself as an open source platform to create database-driven
    websites. It already has a core engine to build web applications and a powerful
    blog, but it is much more than that. It is possible to build anything using the
    Keystone.js framework.
  prefs: []
  type: TYPE_NORMAL
- en: One of the main attractions of the Keystone CMS is that it uses the Express
    framework and Mongoose ODM, two tools that we have already used in this book.
  prefs: []
  type: TYPE_NORMAL
- en: Due to it being a very recent framework, it comes only with a simple default
    theme using the Bootstrap framework, but the team behind Keystone are planning
    to include options to customize new themes something about in the near feature.
  prefs: []
  type: TYPE_NORMAL
- en: Keystone uses the Model View Template pattern, very similar to patterns such
    as Model View Presentation.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we will see how to build a new theme using all the features
    of the framework and how to extend it with new features.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Installing KeystoneJS
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The KeystoneJS structure and features
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to customize using simple stylesheets
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Dealing with themes and how to create new themes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Extending core functionality to create models and views.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What we are building
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'For this chapter, we will take as a base a simple blog. We''ll see how to extend
    it and create new pages that can be administered through a control panel, and
    we will have a very similar result to the following figure:'
  prefs: []
  type: TYPE_NORMAL
- en: '![What we are building](img/image_08_001.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Keystone Blog Theme home page
  prefs: []
  type: TYPE_NORMAL
- en: Installing Keystone framework
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As we have done in previous chapters, we will use the official Keystone.js yeoman
    generator.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'You can find more information about the KeystoneJS at this link: [http://keystonejs.com/](http://keystonejs.com/).'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s install the generator. Open your terminal/shell and type the following
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Creating the scaffold application
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now it is time to create a new folder and start to development our blog application:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a folder called chapter-08.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Open your terminal/shell at the chapter-08 folder and type the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'After this command, the keystone.js will trigger a series of questions about
    the basic configurations of the application; you must answer them, as shown in
    the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating the scaffold application](img/image_08_002.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Prompt questions from Keystone generator
  prefs: []
  type: TYPE_NORMAL
- en: 'After the end of all generator tasks, we can see the following output on our
    terminal window:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Note that before starting the application, we need to correct two small bugs.
    At the time of writing, the generator has this fault; however, when the book is
    released this should have been fixed. If not, here's the workaround for this issue.
  prefs: []
  type: TYPE_NORMAL
- en: Fixing the lint error and admin object name
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Open gulpfile.js in the root project folder and remove line about lint task:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Fixing admin user name, open the Keystone.js file in the root folder and replace
    the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: That's all, we already have our blog. Let's check the result.
  prefs: []
  type: TYPE_NORMAL
- en: Running the Keystone  blog
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Open terminal/shell and type the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Go to http://localhost:3000/; you should see the following result:![Running
    the Keystone  blog](img/image_08_003.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Keystone home screen
  prefs: []
  type: TYPE_NORMAL
- en: As previously commented on, the interface is very simple. It can view the default
    information generated by the generator, including the information about the user
    and password.
  prefs: []
  type: TYPE_NORMAL
- en: Click on the **Sign in** link in the top-right corner and fill in the login
    form with the user and password from the previous screenshot. The result will
    be the control panel, as shown in the following figure:![Running the Keystone 
    blog](img/image_08_004.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Keystone Control Panel
  prefs: []
  type: TYPE_NORMAL
- en: Each link has a form to insert data for the blog, but don't worry about this
    at this time; later in the chapter, we will see how to use the admin panel.
  prefs: []
  type: TYPE_NORMAL
- en: As we can see in the previous images, the layout is very simple. However, the
    highlight of this framework is not its visual appearance, but the power its core
    engine has to build robust applications.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'You can read more about Keystone on the official website at: [http://keystonejs.com/](http://keystonejs.com/).'
  prefs: []
  type: TYPE_NORMAL
- en: Anatomy of the Keystone engine
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Before we dive directly into the code, we will understand how the directories
    structure of Keystone works.
  prefs: []
  type: TYPE_NORMAL
- en: 'After starting the application, we will have the following result:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Anatomy of the Keystone engine](img/image_08_005.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Keystone directories structure
  prefs: []
  type: TYPE_NORMAL
- en: 'Here''s a description of what makes each directory/folder:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Folder Name** | **Folder Path** | **Description** |'
  prefs: []
  type: TYPE_TB
- en: '| Models | /models/ | Application database Models. |'
  prefs: []
  type: TYPE_TB
- en: '| Public | /public/ | Images, JavaScript, Stylesheet, and fonts. |'
  prefs: []
  type: TYPE_TB
- en: '| Routes | /routes//routes/views | View controllers (On Restful API we can
    use a folder called API). |'
  prefs: []
  type: TYPE_TB
- en: '| Templates | /templates//templates/emails//templates/layouts//templates/mixins//templates/views
    | Application views templates. |'
  prefs: []
  type: TYPE_TB
- en: '| updates | /updates/ | Migration scripts and database population. |'
  prefs: []
  type: TYPE_TB
- en: 'Also, we have in the root folder the following files:'
  prefs: []
  type: TYPE_NORMAL
- en: '.editorconfig: Setting the editor''s indentation'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '.env: Setting Cloudnary Cloud credentials'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '.gitignore: Ignore files for Git Source Control'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'gulpfile.js: Application tasks'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'keystone.js: Bootstrap application'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'package.json: Project configurations and NPM modules'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'procfile: Configurations for **Heroku** deployment'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In the coming lines, we will see in depth what each of these parts performs.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The Routes folder has some files that we will not explain right now, but don't
    worry about that; we will see these files in the next topics.
  prefs: []
  type: TYPE_NORMAL
- en: Changing the default bootstrap theme
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We will show two ways to customize our blog: one superficial, changing only
    the stylesheet, and a deeper one, changing all the page''s markup.'
  prefs: []
  type: TYPE_NORMAL
- en: For the stylesheet changes, we are using the [http://bootswatch.com/](http://bootswatch.com/)
    free Bootstrap themes.
  prefs: []
  type: TYPE_NORMAL
- en: The bootstrap framework is very flexible for this; we will use a theme called
    the superhero.
  prefs: []
  type: TYPE_NORMAL
- en: Go to the [http://bootswatch.com/superhero/_variables.scss](http://bootswatch.com/superhero/_variables.scss)
    URL.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Copy the page content.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Inside public/styles/boostrap/bootstrap, create a new file called _theme_variables.scss
    and paste the code copied from the Bootswatch page.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Open public/styles/bootstrap/_bootstrap.scss and replace the following  lines:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Now we will repeat *steps 1* and *2*, but now with a different URL.
  prefs: []
  type: TYPE_NORMAL
- en: Go to the [http://bootswatch.com/superhero/_bootswatch.scss](http://bootswatch.com/superhero/_bootswatch.scss)
    URL.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Copy the page content.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a file called _bootswatch.scss in: public/styles/bootstrap and paste
    the content.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Open public/styles/bootstrap/_bootstrap.scss and replace the following highlighted
    line:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Done. Right now we have a different layout to the standard one adopted by keystone.js,
    so let''s see the result. Open your terminal/shell and type the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Go to URL: http://localhost:3000/, and you should see the following result:![Changing
    the default bootstrap theme](img/image_08_006.jpg)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Keystone home screen
  prefs: []
  type: TYPE_NORMAL
- en: With this small change, we can already see the results achieved. However, it
    is a very superficial customization, since we do not change any HTML markup files.
  prefs: []
  type: TYPE_NORMAL
- en: In the preceding images, we can see that we just changed the colors of the page
    as it kept the markup intact, using only a bootstrap theme.
  prefs: []
  type: TYPE_NORMAL
- en: In the next example, we will see how to modify the whole structure of the application.
  prefs: []
  type: TYPE_NORMAL
- en: Modifying the KeystoneJS core template path
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now let's do a little refactoring of the templates directory.
  prefs: []
  type: TYPE_NORMAL
- en: Inside templates, create a folder called default.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Move all files in the templates folder to the new default folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Copy all the contents from the default folder and paste them in a new folder
    called newBlog.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The result will be the following screenshot, but we need to change the keystone.js
    file to configure the new folder:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Modifying the KeystoneJS core template path](img/image_08_007.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Templates folder structure
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the keystone.js file from the root folder and update the following lines:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Done. We have created a folder to hold all our themes.
  prefs: []
  type: TYPE_NORMAL
- en: Building our own theme
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Now we will change the theme markup. This means that we will edit all the HTML
    files inside the newBlog theme. We are using as reference and source the following
    free template from [https://github.com/BlackrockDigital/startbootstrap-clean-blog](https://github.com/BlackrockDigital/startbootstrap-clean-blog).
    Our goal is to have a layout similar to the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Building our own theme](img/image_08_008.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Keystone home screen
  prefs: []
  type: TYPE_NORMAL
- en: 'Open templates/themes/newBlog/layouts/default.swig and add the following code
    to the <head> tag:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Remove all lines between the {# HEADER #} and {# JAVASCRIPT #} comments.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Note that this action will remove all the content after the body tag and the
    JavaScript links at the bottom of the default.swig file.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now place the following lines of code between the {# HEADER #} and {# JAVASCRIPT
    #} comments:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Open templates/themes/newBlog/views/blog.swig and replace the code with the
    following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Open templates/themes/newBlog/views/contact.swig and replace the code with
    the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Open templates/themes/newBlog/views/gallery.swig and replace the code with
    the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'Open templates/themes/newBlog/views/index.swig and replace the code with the
    following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: Note that here, in index.swig, we add some lines of code to show a list of posts
    on the index page, so we need to change the index.js controller.
  prefs: []
  type: TYPE_NORMAL
- en: 'Open routes/views/index.js and add the following lines of code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'Open templates/themes/newBlog/views/post.swig and replace the code with the
    following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: With this block of code, we have finished the HTML markup changes. Now we need
    to apply the new stylesheet.
  prefs: []
  type: TYPE_NORMAL
- en: Changing the stylesheet
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As we chose SASS to deal with stylesheets on the keystone.js setup, we already
    have everything to use the **SASS** features.
  prefs: []
  type: TYPE_NORMAL
- en: 'Open public/styles/site/_variables.scss and replace the code for the following
    lines of code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: Remember that we used the http://blackrockdigital.github.io/startbootstrap-clean-blog/index.html
    as a reference and we just picked some blocks of code. Note that the template
    uses LESS instead **SASS,** but here we re-write all the code to fit SASS syntax.
  prefs: []
  type: TYPE_NORMAL
- en: For reasons of space, we do not put the entire stylesheet in this example. You
    can download the sample code from the Packt Publishing website ([www.packtpub.com](http://www.packtpub.com))
    or directly from the book repository on GitHub.
  prefs: []
  type: TYPE_NORMAL
- en: It is important to note that we have created the same stylesheet for our sample
    blog, but we convert the **LESS** syntax to **SASS.**
  prefs: []
  type: TYPE_NORMAL
- en: Open public/styles/site/_layout.scss and use the code.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a new file called _mixins.scss inside public/styles/site/ and add the
    following lines of code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: Now we just need to edit the public/styles/site.scss to include the new mixins
    file.
  prefs: []
  type: TYPE_NORMAL
- en: 'Open public/styles/site.scss and add the following lines of code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: Add the image header-bg-1290x1140.jpg from the sample-images folder (you can
    download all the examples files from Packt Publishing or on the GitHub official
    book page) to the public/images/ folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Adding the Gallery script
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As we can see, the default Keystone.js theme is very simple and uses only the
    Bootstrap framework. Now we will use a jQuery plugin called Fancybox to apply
    a new style in our gallery.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'You can get more information about **Fancybox** at the official website: [http://fancybox.net/](http://fancybox.net/).'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open templates/themes/newBlog/layouts/default.swig and add the following highlighted
    code inside the head tag:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'Now let''s add the following highlighted lines of code to scripts at the bottom
    of templates/themes/newBlog/layouts/default.swig:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: As we already use jQuery in the project, since Bootstrap depends on it, we do
    not need to insert it again.
  prefs: []
  type: TYPE_NORMAL
- en: 'Open your terminal/shell and type the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: Go to http://localhost:3000/gallery, and you can see the following result:![Adding
    the Gallery script](img/image_08_009.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Template image gallery
  prefs: []
  type: TYPE_NORMAL
- en: Note that we already include the sample content to our blog, but don't worry
    about this; later in this chapter we will see how to include content.
  prefs: []
  type: TYPE_NORMAL
- en: Extending the keystone.js core
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now we have the new theme almost ready.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will now see how we can extend the core keystone.js and add another page
    on our blog, as the previous screenshot shows, we have an **ABOUT** menu item,
    so let''s create it:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a new file called About.js inside models/folder and add the following
    lines of code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'Add the new module to admin navigation, open keystone.js in the root folder,
    and add the following highlighted lines of code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: Note that the word on the left will be displayed at the nav bar as an About
    menu item and the word on the right-hand side is the about.js collection.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s customize the column display. Add the following lines of code, before
    the register() function on the About.js file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'To add the route to the about page, open routes/index.js and add the following
    highlighted lines of code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: Now let's create the controller for the routes.views.blog function.
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a new file called about.js inside the routes/views/ folder and add the
    following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'Add the route on routes/middleware.js, as the following highlighted code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: In this example, we see how it is possible to extend the functionality of the
    framework using the built-in functions.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'You can read more about the **Keystone API** at this link: [https://github.com/keystonejs/keystone/wiki/Keystone-API](https://github.com/keystonejs/keystone/wiki/Keystone-API).'
  prefs: []
  type: TYPE_NORMAL
- en: 'So, the final result for all these steps will be like the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Extending the keystone.js core](img/image_08_010.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Keystone Control Panel with Abouts menu item
  prefs: []
  type: TYPE_NORMAL
- en: Note that we can see the **Abouts** menu on the previous screenshot.
  prefs: []
  type: TYPE_NORMAL
- en: Inserting content using control panel
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'After all these steps, we managed to create a fully customized layout for our
    blog; we will now enter content using the available images in the sample-images
    folder that you can find in the download of the book''s source code:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Go to http://localhost:3000/keystone, use the user: john@doe.com and password:
    123456 to access the control panel.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Go to http://localhost:3000/keystone/post-categories, click on the **Post Categories**
    link.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Create Post Category** button, insert the **Old Cars** title
    into the input field, and click **Create** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: For the book example, we will use only one category, but in a real application
    you can create as many as you want.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Go to http://localhost:3000/keystone/posts, click on the **Create Post** button
    and add the content as shown in the following screenshot:![Inserting content using
    control panel](img/image_08_011.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Sample content on create post screen
  prefs: []
  type: TYPE_NORMAL
- en: Repeat the same process as for *step 4* for the second post entry and change
    the title to **Sample Post Example Without Image II**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Repeat the same process as for *step 4* for the third post entry and change
    the title to **Sample Post Example With Image**, click on the **Upload Image**
    button, and use the file sample-blog-image.png from the sample-images folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Note that you can download the book source code and image samples at any time
    from the Packt Publishing website or directly from the GitHub book repository.
  prefs: []
  type: TYPE_NORMAL
- en: 'At the end of *step 6*, our control panel will be as in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Inserting content using control panel](img/image_08_012.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Posts Control Panel
  prefs: []
  type: TYPE_NORMAL
- en: As we can see, Keystone.js has a very simple and easy-to-use interface. We can
    extend all the features of the framework to create incredible things.
  prefs: []
  type: TYPE_NORMAL
- en: 'Our Posts page was as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Inserting content using control panel](img/image_08_013.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Screenshot of the Blog page
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we discussed some very important concepts about the Keystone
    framework to create applications and websites with a database.
  prefs: []
  type: TYPE_NORMAL
- en: We saw how we can extend the framework by creating new models, views, and templates,
    using the internal Keystone API.
  prefs: []
  type: TYPE_NORMAL
- en: In addition, we showed two different ways to customize the CMS using only a
    stylesheet, as well as how to completely alter the page structure and how to insert
    new functionalities, such as the **Fancybox** plugin, to the Images Gallery.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will see how to use Command-line Interface (CLI) for
    JSLint, Concat, Minify, and other tasks, using only the Node Package Manager (NPM)
    to build and deploy the application.
  prefs: []
  type: TYPE_NORMAL
