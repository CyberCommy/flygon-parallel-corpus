- en: Chapter 6. Parallax Scrolling
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: What is **parallax scrolling**? Parallax scrolling is a visual effect technique
    that tries to achieve a sense of depth by moving the elements of a scene, which
    have different speeds, for them to respond to a user action, such as the scrolling
    of a web page. This technique has been widely used in the 2D video game industry
    since the eighties.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we'll discover how to enhance our websites with parallax scrolling
    and other cool effects that respond to page scrolling. To achieve this, we'll
    dig into some advanced—and sometimes experimental—CSS 3D techniques and learn
    how to deal with perspective effectively.
  prefs: []
  type: TYPE_NORMAL
- en: Due to some implementation differences, we will then focus on how to obtain
    similar effects on different layout engines, such as WebKit and Gecko.
  prefs: []
  type: TYPE_NORMAL
- en: If you are working on a Windows operating system and using Chrome, you might
    have to switch to Firefox (or IE10) if the CSS 3D results are not as expected
    due to an absent or unsupported GPU. To check this, we can navigate to **about:gpu**
    from our Chrome browser and check whether the **3D CSS** checkbox has been enabled
    or not.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here are the topics covered in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Discovering perspective
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a cube
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Perspective origin
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: CSS 3D parallax
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Differences between layout engines
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Changing parallax on page scroll
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a parallax-enabled image gallery
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Discovering perspective
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As we started exploring in the previous chapter, CSS3 introduces the possibility
    to move our HTML elements in a three-dimensional space. We can now move and rotate
    them around each of the three axes, namely, x, y, and z. While dealing with movement
    around x and y axes is quite easy to figure out, things become a little messy
    when the z axis comes into play.
  prefs: []
  type: TYPE_NORMAL
- en: 'Moving an element along the z axis means getting it closer to or farther away
    from our viewpoint, but this action has some hidden problems, for example, take
    the following statement:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: How can we imagine moving an object of a distance measured in pixels towards
    us? To solve this dilemma, W3C has introduced a property called `perspective`
    that basically tells the browser what distance we're observing the page from.
  prefs: []
  type: TYPE_NORMAL
- en: So if we set `500px` as the perspective property, objects placed at the z axis
    with a distance of `250` pixels will look twice as big, and objects placed at
    the z axis with a distance of `500` pixels half as big.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s try this out with a small example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'If we run this code in a browser (such as Chrome, Firefox, or IE10) that supports
    CSS 3D features, we''ll notice a result similar to the one shown in the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Discovering perspective](img/3264OT_06_1.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'On increasing the `perspective` property''s value, the result will look flatter,
    on the other hand, if this property is reduced, the red box will look stretched
    to the horizon. Here''s an example with `perspective: 250px`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Discovering perspective](img/3264OT_06_2.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Creating a cube
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To better understand some of the `perspective` properties, we can use what
    we have learned until now to create a real 3D cube using only CSS. We''ll need
    six `div` tags, one for each side, plus one that will act as a container for the
    others:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'First of all, we have to apply some properties to the `#container` selector;
    let''s insert the following chunk of CSS code within the `style` tag that we already
    defined:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Here we tell the browser that what's inside this container must be rendered
    taking into account the position on the z axis, and we set the `perspective` property
    to `500px` for the `#container` selector and the elements within the container.
    Last but not least, we ask the browser to also render the rear face of the `div`
    tag that we'll use to create the cube.
  prefs: []
  type: TYPE_NORMAL
- en: 'Good, now let''s create the faces. We can begin with some basic properties
    for `.square`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Okay, now each square lays down one over the other and we can begin adjusting
    them one by one. Let''s start with `.back`, we have to move it away from the camera
    to half its size, so set the `transform` property to `-100px`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Next we look at `.left`. Here we have to apply a rotation against its y axis
    first and then translate it by half of its size to the left-hand side. This is
    because every transformation, unless stated differently, has its origin in the
    center of the element; also, we have to remember that transformations are applied
    in sequence, so the element has to be translated against its z axis in order to
    achieve the correct result:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Here''s a screenshot reminding us of the progress we have made so far:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating a cube](img/3264OT_06_3.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'We can use the same strategy with all the remaining faces:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'If we now try to take a screenshot of this experiment (as shown here), we may
    encounter a small disappointment:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating a cube](img/3264OT_06_4.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The `.front` selector's `div` tag covers all the other `div` tags. This small
    experiment shows us that the vanishing point of a scene is set, by default, to
    the center of the element that holds the `perspective` property.
  prefs: []
  type: TYPE_NORMAL
- en: The perspective-origin property
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Luckily, we can easily change the vanishing point using the `perspective-origin`
    property that accepts two values, which can be expressed in all the common CSS
    measurement units or using literals, as happens with `background-position`.
  prefs: []
  type: TYPE_NORMAL
- en: 'So we''ll add the following to `#container`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'And obtain a result similar to the one shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The perspective-origin property](img/3264OT_06_5.jpg)'
  prefs: []
  type: TYPE_IMG
- en: If we resize the browser window, we will also notice that the vanishing point
    changes because it is related to the `#container` selector that has the `width`
    and `height` properties set equal to the browser viewport.
  prefs: []
  type: TYPE_NORMAL
- en: This behavior is at the root of the trick that we'll use in the next chapter
    to build our parallax project.
  prefs: []
  type: TYPE_NORMAL
- en: CSS 3D parallax
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Good, now we have the tools that we need to start building our project. The
    basic idea behind what we're going to create is that if we place elements at a
    different height and scroll while keeping the vanishing point in the center of
    the viewable area, then we can obtain a cool parallax scrolling effect.
  prefs: []
  type: TYPE_NORMAL
- en: 'As usual, we first need an HTML structure, so let''s begin with this. Let''s
    create the `index.html` file with the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Along with this page, we have to create a file named `css/application.css`
    that will hold our CSS properties and selectors. As we did in the previous example,
    we will stretch `#body` to fit the browser''s viewport, so we can add a few lines
    of CSS code to `application.css`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'We''ve also added `overflow-y: auto` and `overflow-x: hidden` to the element,
    we''ll discuss how these will be useful in a moment.'
  prefs: []
  type: TYPE_NORMAL
- en: Implementing parallax scrolling in WebKit
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Ok, before continuing we now have to focus on a single layout engine at a time;
    this is because there are some differences between WebKit and Firefox regarding
    the implementation of the CSS 3D properties, and so we have to handle the two
    cases separately. Let's start with WebKit.
  prefs: []
  type: TYPE_NORMAL
- en: We can take advantage of a neat class that Lea Verou's Prefix Free puts automatically
    on the `html` element of the page where it's inserted. This class has a name equal
    to the experimental prefix needed for the browser; so if we're viewing the page
    from Internet Explorer, the class is `-ms-`, and if from Firefox, it's `-moz-`.
  prefs: []
  type: TYPE_NORMAL
- en: 'So we can start adding the `perspective` and `transform-style` properties to
    `#body`, like we did in the previous example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Now we have to deal with the `#container` selector; this has to be longer than
    the viewport—as usual all the images required for this project are located on
    the Packt Publishing website ([www.packtpub.com](http://www.packtpub.com)):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Due to the fact that we've applied the `overflow` property to `#body`, the scroll
    bar that we'll see in the browser doesn't belong to the whole HTML document, but
    instead belongs to `#body`.
  prefs: []
  type: TYPE_NORMAL
- en: But `#body` also has a `perspective` property; this means that the vanishing
    point for the contained elements is always at the center of the browser screen,
    so we've achieved the structure that we wished to achieve at the beginning of
    this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: 'To test our code, we can start adding a few elements inside the container and
    assign them different heights:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'We can use `transform: translateZ();` to set up the height:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'Good, now we can test what we''ve done so far in a WebKit-compliant browser:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Implementing parallax scrolling in WebKit](img/3264OT_06_6.jpg)'
  prefs: []
  type: TYPE_IMG
- en: While scrolling, we can note how the second image—the one closest to our viewpoint—moves
    faster than the first image. We've just achieved parallax on WebKit!
  prefs: []
  type: TYPE_NORMAL
- en: Implementing parallax scrolling in Gecko
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: There are some subtle implementation differences between Gecko and WebKit, along
    with some bugs.
  prefs: []
  type: TYPE_NORMAL
- en: 'First of all, the property `transform-style: preserve-3d` in Gecko doesn''t
    propagate to all the descendants of the matched elements, but only to first-level
    children. The `perspective` and `perspective-origin` properties also do the same.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Fortunately, we can find a way around this problem. This can be done by expressing
    `perspective` as a transformation, for example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: When we use this method, `perspective-origin` is no longer useful and `transform-origin`
    should be used in its place. Imposing `perspective` on Gecko-based browsers in
    this way results in the same behavior as when using perspective on WebKit-based
    browsers.
  prefs: []
  type: TYPE_NORMAL
- en: 'So we can add a few lines of CSS code using the same strategy we did with WebKit:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'If we open Firefox now and test our project, we''ll see something like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Implementing parallax scrolling in Gecko](img/3264OT_06_7.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Although the result looks like the one obtained with WebKit, scrolling the
    page in this case doesn''t generate any parallax effect. After a quick analysis,
    we may be tempted to assume that this behavior is caused by having placed the
    `transform: perspective` property on the wrong element (`#container` instead of
    `#body`), but the truth is that we consciously chose to act this way due to a
    subtle bug ([https://bugzilla.mozilla.org/show_bug.cgi?id=704469](https://bugzilla.mozilla.org/show_bug.cgi?id=704469))
    that removes the `transform: perspective` property from elements that have the
    `overflow` property.'
  prefs: []
  type: TYPE_NORMAL
- en: So now the only way to make Gecko-based browsers behave as expected is to implement
    a small chunk of JavaScript that can dynamically modify our vanishing point, keeping
    it in the center of the browser window.
  prefs: []
  type: TYPE_NORMAL
- en: 'This script has to adjust the `transform-origin` property in response to the
    scrolling event:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: Perfect! Now Gecko-based browsers will also behave as expected.
  prefs: []
  type: TYPE_NORMAL
- en: Implementing parallax scrolling in Internet Explorer
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Internet Explorer 9 does not support CSS 3D transforms but IE10 does, so we
    can also try to run this project with that browser. To achieve the right behavior
    on IE10, we've to apply a few custom properties; this is because IE10 behaves
    in a way that is slightly different from those followed by the other two browsers.
  prefs: []
  type: TYPE_NORMAL
- en: 'Basically IE10 supports both the `perspective` and `transform: perspective`
    properties, but the former takes effect only on direct descendants of the element
    that have this property, and the latter works only on the element that has the
    property.'
  prefs: []
  type: TYPE_NORMAL
- en: 'So we have to adopt a behavior closer to the one used for Gecko, but using
    `perspective` instead of `transform: perspective`. Here it is:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'Now we also need to change our JavaScript code a bit in order to affect `perspective-origin`
    when the browser is Internet Explorer and supports 3D transforms. Here''s the
    code that can be used instead of the previous one:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'To make this work, we must download Modernizr in order to check for CSS 3D
    support, we can create a custom build as we did in the previous chapter, but this
    time we only check the **CSS 3D** **Transforms** checkbox in the configuration
    panel ([http://modernizr.com/download/](http://modernizr.com/download/)). Next,
    we have to include the downloaded file ([js/modernizr.js](http://js/modernizr.js))
    in our page just after the other `script` tags:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'And here''s a screenshot from IE10:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Implementing parallax scrolling in Internet Explorer](img/3264OT_06_8.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Adding some randomness to the gallery
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that we've addressed the browser compatibility issues, we can safely remove
    the experimental comments and classes we previously attached to the images.
  prefs: []
  type: TYPE_NORMAL
- en: 'To create a sense of randomness, we can define a few groups of classes, each
    group having more variants of the same property, and then we can pick one class
    for each group of each image we want to display. Here''s an example; let''s add
    the following to `application.css`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'Now we can substitute the images used in the previous section with this list,
    where each image has a `depth-*` and one `size-*` attribute (where `*` denotes
    a randomly chosen class from the ones defined in the preceding code) attached
    to it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'Last but the least, let''s define a basic CSS for each of these images:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'Good, now let''s reload our browser and test this out:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Adding some randomness to the gallery](img/3264OT_06_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Rotating the images
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Since we''re dealing with a real 3D environment, we can try to develop more
    interesting effects using the same basic idea. For example, what if we rotate
    an element instead of simply moving it towards us? Let''s try! First of all we
    need to add a few more images to our gallery; this time we also decided to add
    some decorative text, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'Then we can use the `rotateX` transformation method on the images:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'A few more CSS properties to also style the paragraphs a little, and we''re
    done:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'Here''s a screenshot of the resulting gallery:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Rotating the images](img/3264OT_06_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: A 3D panorama
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let's also experiment with the `rotateY` method to complete this project. This
    time we'll use this property along with the `perspective-origin` property trick
    to create a cool panoramic effect.
  prefs: []
  type: TYPE_NORMAL
- en: 'First of all we need a panorama image, and then we can use an image editor
    to cut it into three pieces wherein the central image is roughly twice the size
    of the other two (for example, 800 x 800 px and 500 x 800 px). Once we''ve finished
    this, we can then add these images just before the end of the `#container` selector:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'Now we can use the `rotateY` method for both `.left` and `.right`, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'And here''s the result:'
  prefs: []
  type: TYPE_NORMAL
- en: '![A 3D panorama](img/3264OT_06_11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Dealing with older browsers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Although the core effects of this project take advantage of some CSS 3D properties
    that cannot be emulated in older versions of the browser, the whole structure
    is made using only CSS 2-compatible properties and selectors, and so can be viewed
    from almost any browser:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Dealing with older browsers](img/3264OT_06_12.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Dealing with the third dimension could lead to a fight with a lot of small implementation
    differences, but once we tame them, the results are stunning and really enjoyable.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here''s what we have discussed in this chapter so far:'
  prefs: []
  type: TYPE_NORMAL
- en: CSS can be used to transform elements and move them in a 3D space
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We can use some properties to define the vanishing point in a 3D scene
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A cool parallax scrolling effect can be emulated by using CSS 3D properties
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Some JavaScript coding is required to deal with browser implementation differences
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In the next chapter, we'll learn how to enhance the HTML5 `video` element with
    CSS.
  prefs: []
  type: TYPE_NORMAL
