- en: Data Binding, Events, and Computed Properties
  prefs: 
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Data** is the most valuable asset in the world right now, and knowing how
    to manage it is a must. In Vue, we have the power to choose how we can gather
    this data, manipulate it as we want, and deliver it to the server.'
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we will learn more about the process of data manipulation and
    data handling, form validations, data filtering, how to display this data to the
    user, and how to present it in a way that is different from what we have inside
    our application.
  prefs: []
  type: TYPE_NORMAL
- en: We will learn how to use various `vue-devtools` so that we can go deep inside
    the Vue components and see what is happening to our data and application.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we''ll cover the following recipes:'
  prefs: []
  type: TYPE_NORMAL
- en: Creating your first project with the Vue CLI
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating the hello world component
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating an input form with two-way data binding
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding an event listener to an element
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Removing the `v-model` directive from the input
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a dynamic to-do list
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating computed properties and understanding how they work
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Displaying cleaner data and text with custom filters
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating filters and sorters for a list
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating conditional filters to sort list data
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding custom styles and transitions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using `vue-devtools` to debug your application
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let's get started!
  prefs: []
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we will be using **Node.js** and **Vue CLI****.**
  prefs: []
  type: TYPE_NORMAL
- en: Attention, Windows users – you need to install an `npm` package called `windows-build-tools` to
    be able to install the following required packages. To do this, open PowerShell
    as administrator and execute the
  prefs: []
  type: TYPE_NORMAL
- en: '`> npm install -g windows-build-tools` command.'
  prefs: []
  type: TYPE_NORMAL
- en: 'To install the **Vue CLI**, you need to open a Terminal (macOS or Linux) or
    Command Prompt/PowerShell (Windows) and execute the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Creating your first project with the Vue CLI
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When the Vue team realized that developers were having problems creating and
    managing their applications, they saw an opportunity to create a tool that could help developers
    around the world. With this, the Vue CLI project was born.
  prefs: []
  type: TYPE_NORMAL
- en: The Vue CLI tool is a CLI tool that is used in terminal command lines, such
    as Windows PowerShell, Linux Bash, or macOS Terminal. It was created as a starting
    point for the development of Vue, where developers can start a project and manage
    and build it smoothly. The focus of the Vue CLI team was to give developers the
    opportunity to have more time to think about the code and spend less time on the
    tooling needed to put their code into production, adding new plugins or a simple `hot-module-reload`.
  prefs: []
  type: TYPE_NORMAL
- en: The Vue CLI tool has been tweaked in such a way that there is no need to eject
    your tooling code outside the CLI before putting it into production.
  prefs: []
  type: TYPE_NORMAL
- en: When version 3 was released, the Vue UI project was added to the CLI as the
    main function, transforming the CLI commands into a more complete visual solution
    with lots of new additions and improvements.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The prerequisite for this recipe is Node.js 12+.
  prefs: []
  type: TYPE_NORMAL
- en: 'The Node.js global objects that are required for this recipe are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`@vue/cli`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`@vue/cli-service-global`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To create a Vue CLI project, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'We need to open a Terminal (macOS or Linux) or Command Prompt/PowerShell (Windows)
    and execute the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'The CLI will ask some questions that will help you create the project. You
    can use the arrow keys to navigate, the *Enter* key to continue, and the *Spacebar* to
    select an option:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: There are two methods for starting a new project. The default method is a basic `babel` and `eslint` project
    without any plugin or configuration, but there's also `Manually` mode, where you
    can select more modes, plugins, linters, and options. We will go for `Manually`.‌
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'At this point, we will be asked about the features that we will want for our
    project. These features are some Vue plugins such as Vuex or Router (Vue-Router),
    testers, linters, and more. For this project, we will choose `CSS Pre-processors` and
    press *Enter* to continue:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'The CLI will ask you to choose a Vue version to use to start your application.
    We will choose `3.x (Preview)` here. Press *Enter* to continue:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'It''s possible to choose the main **Cascading Style Sheets** (**CSS**) preprocessors
    to be used with Vue; that is, `Sass`, `Less`, and `Stylus`. It''s up to you to choose which
    fits your design the most and is best for you:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'It''s time to format your code. You can choose between `AirBnB`, `Standard`,
    and `Prettier` with a basic config. Those rules that are imported inside `ESLint` can
    always be customized without any problem, and there is a perfect one for your
    needs. You find out what is best for you, do the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Once the linting rules have been set, we need to define when they are applied
    to our code. They can either be applied on save or fixed on commit:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Once all those plugins, linters, and processors have been defined, we need
    to choose where the settings and configs will be stored. The best place to store
    them is in a dedicated file, but it is also possible to store them in the `package.json` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, you can choose if you want to make this selection a preset for future
    projects so that you don''t need to reselect everything again:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: The CLI will automatically create the folder with the name you set in *step
    1*, install everything, and configure the project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'With that, you can now navigate and run the project. The basic commands of
    Vue CLI projects are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`npm run serve`: For running a development server locally'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`npm run build`: For building and minifying the application for deployment'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`npm run lint`: To execute the lint on the code'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You can execute these commands via the Terminal (macOS or Linux) or Command
    Prompt/PowerShell (Windows).
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The CLI has a tool inside it called Vue UI that helps you manage your Vue projects. This
    tool will take care of the project's dependencies, plugins, and configurations.
  prefs: []
  type: TYPE_NORMAL
- en: Each `npm` script in the Vue UI tool is known as a Task, and on those tasks,
    you can gather real-time statistics such as the size of the assets, modules, and
    dependencies; the numbers of errors or warnings; and more deep networking data
    for fine-tuning your application.
  prefs: []
  type: TYPE_NORMAL
- en: 'To enter the Vue UI interface, you need to open a Terminal (macOS or Linux)
    or Command Prompt/PowerShell (Windows) and execute the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You can find more information about the Vue CLI project at [https://cli.vuejs.org/guide/](https://cli.vuejs.org/guide/).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You can find more information about the development of Vue CLI plugins at [https://cli.vuejs.org/dev-guide/plugin-dev.html](https://cli.vuejs.org/dev-guide/plugin-dev.html).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating the hello world component
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A Vue application is a combination of various components, bound together and
    orchestrated by the Vue framework. Knowing how to make your component is important. Each
    component is like a brick in the wall and needs to be made in a way that, when
    placed, doesn't end up needing other bricks to be reshaped in different ways around
    it. In this recipe, we are going to learn how to make a base component while following
    some important principles that focus on organization and clean code.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The prerequisite for this recipe is Node.js 12+.
  prefs: []
  type: TYPE_NORMAL
- en: 'The Node.js global objects that are required for this recipe are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`@vue/cli`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`@vue/cli-service-global`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: To start our component, we can create our Vue project with the Vue CLI, as we
    learned in the *Creating your first project with the Vue CLI* recipe, or start
    a new one.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To start a new component, open a Terminal (macOS or Linux) or Command Prompt/PowerShell (Windows)
    and execute the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'The **Command-Line Interface** (**CLI**) will ask some questions that will
    help you create the project. You can use the arrow keys to navigate, the *Enter* key
    to continue, and the *Spacebar* to select an option. Choose the **`default`** option:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s create our first `hello world` component by following these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Let's create a new file called `CurrentTime.vue` file in the `src/components` folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In this file, we will start with the `<template>` part of our component. It
    will be a shadowed-box card that will display the current date, formatted:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, we need to create the `<script>` part. We will start with the `name` property.
    This will be used when debugging our application with `vue-devtools` to identify
    our component and helps the **Integrated Development Environment** (**IDE**) too.
    For the `getCurrentDate` computed property, we will create a `computed` property
    that will return the current date, formatted by the `Intl` browser function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'For styling our box, we need to create a `style.css` file in the `src` folder,
    then add the `cardBox` style to it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'In the `App.vue` file, we need to import our component so that we can see it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'In the `main.js` file, we need to import the `style.css` file so that it''s
    included in the Vue application:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'To run the server and see your component, you need to open a Terminal (macOS
    or Linux) or Command Prompt/PowerShell (Windows) and execute the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: Remember to always execute the command `npm run lint --fix`, to automatically
    fix any code lint error.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is the component rendered and running:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/e36e209b-3257-4c7f-9aaa-203af1535c44.png)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The Vue component works almost like the Node.js packages. To use it in your
    code, you need to import the component and then declare it inside the `components` property
    on the component you want to use.
  prefs: []
  type: TYPE_NORMAL
- en: Like a wall of bricks, a Vue application is made of components that call and
    use other components.
  prefs: []
  type: TYPE_NORMAL
- en: For our component, we used the `Intl.DateTimeFormat` function, a native function
    that can be used to format and parse dates to declared locations. To get the local
    format, we used the navigator global variable.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You can find out more information about `Intl.DateTimeFormat` at [https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DateTimeFormat](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DateTimeFormat).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You can find out more information about Vue components at [https://v3.vuejs.org/guide/single-file-component.html](https://v3.vuejs.org/guide/single-file-component.html).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating an input form with two-way data binding
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To gather data on the web, we use HTML form inputs. In Vue, it's possible to
    use a two-way data binding method, where the value of the input on the **Document
    Object Model** (**DOM**) is passed to the JavaScript – or vice versa.
  prefs: []
  type: TYPE_NORMAL
- en: This makes the web form more dynamic, giving you the possibility to manage,
    format, and validate the data before saving or sending the data back to the server.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The prerequisite for this recipe is Node.js 12+.
  prefs: []
  type: TYPE_NORMAL
- en: 'The Node.js global objects that are required for this recipe are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`@vue/cli`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`@vue/cli-service-global`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: To start our component, we can create our Vue project with the Vue CLI, as we
    learned in the *Creating your first project with the Vue CLI* recipe, or use the project from
    the *Creating the hello world component* recipe.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Follow these steps to create an input form with a two-way data binding:'
  prefs: []
  type: TYPE_NORMAL
- en: Let's create a new file called `TaskInput.vue` in the `src/components` folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In this file, we''re going to create a component that will have a text input
    and some display text. This text will be based on what is typed in as the text
    input. At the `<template>` part of the component, we need to create an HTML input
    and a `mustache` variable that will receive and render the data:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, on the `<script>` part of the component, we will name it and add the task
    to the `data` property. Since the data always needs to be a returned `Object`,
    we will use an arrow function to return an `Object` directly:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'We need to add some style to this component. In the `<style>` part of the component,
    we need to add the `scoped` attribute so that the style only remains bound to
    the component and won''t mix with other **Cascading Style Sheets** (**CSS**) rules:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, we need to import this component into our `App.vue` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'To run the server and see your component, you need to open a Terminal (macOS
    or Linux) or Command Prompt/PowerShell (Windows) and execute the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: Remember to always execute the command `npm run lint --fix`, to automatically
    fix any code lint error.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is the component rendered and running:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/87548754-ee45-4945-b465-041190016424.png)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When you create an HTML `input` element and add a `v-model` to it, you are passing
    a directive, built into Vue, that checks the input type and gives us sugar syntax
    for the input. This handles updating the value of the variable and the DOM.
  prefs: []
  type: TYPE_NORMAL
- en: This model is what is called **two-way data binding**. If the variable is changed by
    the code, the DOM will rerender, and if it's changed by the DOM via user input,
    such as `input-form`, the JavaScript code can then execute a function.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You can find out more information about the form input bindings at [https://v3.vuejs.org/guide/forms.html](https://v3.vuejs.org/guide/forms.html).
  prefs: []
  type: TYPE_NORMAL
- en: Adding an event listener to an element
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The most common method of parent-child communication in Vue is through props
    and events. In JavaScript, it's common to add event listeners to elements of the
    DOM tree to execute functions on specific events. In Vue, it's possible to add
    listeners and name them as you wish, rather than sticking to the names that exist
    on the JavaScript engine.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we are going to learn how to create custom events and how to
    emit then.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The prerequisite for this recipe is Node.js 12+.
  prefs: []
  type: TYPE_NORMAL
- en: 'The Node.js global objects that are required for this recipe are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`@vue/cli`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`@vue/cli-service-global`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: To start our component, we can create our Vue project with the Vue CLI, as we
    learned in the *Creating your first project with the Vue CLI* recipe, or use the
    project from the *Creating an input form with two-way data binding* recipe.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Follow these steps to add an event listener to an element in Vue:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a new component or open the `TaskInput.vue` file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'At the `<template>` part, we are going to add a button element and add an event
    listener to the button click event with the `v-on` directive. We will remove the `{{
    task }}` variable from the component because from now on, it will be emitted and
    won''t be displayed on the component anymore:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'On the `<script>` part of the component, we need to add a method that will
    handle the click event. This method will be named `addTask`. It will emit an event
    called `add-task` and send the task to the data. After that, the task on the component
    will be reset:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'In the `App.vue` file, we need to add an event listener bind to the component.
    This listener will be attached to the `add-task` event. We will use the shortened
    version of the `v-on` directive, `@`. When it''s fired, the event will call the
    `addNewTask` method, which will send an alert stating that a new task was added:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, let''s create the `addNewTask` method. This will receive the task as a
    parameter and show an alert to the user, stating that the task was added:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'To run the server and see your component, you need to open a Terminal (macOS
    or Linux) or Command Prompt/PowerShell (Windows) and execute the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: Remember to always execute the command `npm run lint --fix`, to automatically
    fix any code lint error.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is the component rendered and running:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/10282a27-e2db-4efe-8182-9e896614c2e7.png)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The HTML events are read by Vue with the `v-on` event handling directive. When
    we attached the `v-on:click` directive to the button, we added a listener to the
    button so that a function will be executed when the user clicks on it.
  prefs: []
  type: TYPE_NORMAL
- en: The function is declared on the component methods. This function, when called,
    will emit an event, denoting that any component using this component as a child
    can listen to it with the `v-on` directive.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You can find out more information about event handling at [https://v3.vuejs.org/guide/events.html](https://v3.vuejs.org/guide/events.html).
  prefs: []
  type: TYPE_NORMAL
- en: Removing the v-model directive from the input
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: What if I told you that behind the magic of `v-model`, there is a lot of code
    that makes our magic sugar syntax happen? What if I told you that the rabbit hole
    can go deep enough that you can control everything that can happen with the events
    and values of the inputs?
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we will learn how to extract the sugar syntax of the `v-model` directive
    and transform it into the base syntax behind it.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The prerequisite for this recipe is Node.js 12+.
  prefs: []
  type: TYPE_NORMAL
- en: 'The Node.js global objects that are required for this recipe are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`@vue/cli`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`@vue/cli-service-global`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: To start our component, we can create our Vue project with the Vue CLI, as we
    learned in the *Creating your first project with the Vue CLI* recipe, or use the
    project from the *Adding an event listener to an element* recipe.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'By performing the following steps, we will remove the `v-model` directive sugar
    syntax from the input:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the `TaskInput.vue` file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'At the `<template>` block of the component, find the `v-model` directive. We
    need to remove the `v-model` directive. Then, we need to add a new bind to the
    input called `v-bind:value` or the shortened version, `:value`, and an event listener
    to the HTML `input` element. We need to add an event listener to the `input` event
    with the `v-on:input` directive or the shortened version, `@input`. The input
    bind will receive the task value as a parameter and the event listener will receive
    a value attribution, where it will make the task variable equal to the value of
    the event value:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'To run the server and see your component, you need to open a Terminal (macOS
    or Linux) or Command Prompt/PowerShell (Windows) and execute the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: Remember to always execute the command `npm run lint --fix`, to automatically
    fix any code lint error.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As a syntactic sugar syntax, the `v-model` directive does the magic of automatically
    declaring the bind and the event listener to the element for you. However, the
    side effect is that you don't have full control over what can be achieved.
  prefs: []
  type: TYPE_NORMAL
- en: As we've seen, the bound value can be a variable, a method, a computed property,
    or a Vuex getter, for example. In terms of the event listener, it can be a function
    or a direct declaration of a variable assignment. When an event is emitted and
    passed to Vue, the `$event` variable is used to pass the event. In this case,
    as in normal JavaScript, to catch the value of an input, we need to use the `event.target.value`
    value.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You can find out more information about event handling at [https://v3.vuejs.org/guide/events.html](https://v3.vuejs.org/guide/events.html).
  prefs: []
  type: TYPE_NORMAL
- en: Creating a dynamic to-do list
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: One of the first projects every programmer creates when learning a new language
    is a to-do list. Doing this allows us to learn more about the language process
    that's followed when it comes to manipulating states and data.
  prefs: []
  type: TYPE_NORMAL
- en: We are going to make our to-do list using Vue. We'll use what we have learned
    and created in the previous recipes.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The prerequisite for this recipe is Node.js 12+.
  prefs: []
  type: TYPE_NORMAL
- en: 'The Node.js global objects that are required for this recipe are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`@vue/cli`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`@vue/cli-service-global`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: To start our component, we can create our Vue project with the Vue CLI, as we
    learned in the *Creating your first project with Vue CLI* recipe, or use the project
    from the *Removing the v-model directive from the input* recipe.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: There are some basic principles involved in making a to-do application – it
    must contain a list of tasks, the tasks can be marked as done and undone, and
    the list can be filtered and sorted. Now, we are going to learn how to take the
    tasks and add them to the task list.
  prefs: []
  type: TYPE_NORMAL
- en: 'Follow these steps to create a dynamic to-do list with Vue and the information
    you''ve gained from the previous recipes:'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the `App.vue` file, we will create our array of tasks. This task will be
    filled every time the `TaskInput.vue` component emits a message. We will add an
    object to this array with the task, as well as the current date when the task
    was created. The date when the task was finished will be left undefined for now.
    To do this, in the `<script>` part of the component, we need to create a method
    that receives a task and add this task, along with the current date, to the `taskList` array:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, we need to render this list on the `<template>` part. We will iterate
    the list of tasks using the `v-for` directive of Vue. This directive, when we
    use it with an array, gives us access to two properties – the item itself and
    the index of the item. We will use the item to render it and the index to make
    the key of the element for the rendering process. We need to add a checkbox that,
    when marked, calls a function that changes the status of the task and displays
    when the task was done:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: It's always important to remember that the key in the iterator needs to be unique.
    This is because the `render` function needs to knows which elements were changed.
    In this example, we added the `Math.random()` function to the index to generate
    a unique key, because the index of the first elements of the array is always the
    same number when the number of elements is reduced.
  prefs: []
  type: TYPE_NORMAL
- en: 'We need to create the `changeStatus` function on the `methods` property of
    the `App.vue` file. This function will receive the index of the task as a parameter,
    then go to the array of tasks and change the `finishedAt` property, which is our marker for
    when a task is complete:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, we need to add the task text to the left-hand side of the screen. On the `<style>` part
    of the component, we will make it scoped and add the custom class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: 'To run the server and see your component, you need to open a Terminal (macOS
    or Linux) or Command Prompt/PowerShell (Windows) and execute the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: Remember to always execute the command `npm run lint --fix`, to automatically
    fix any code lint error.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is the component rendered and running:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/8ea10da5-7222-4bc8-9f5b-55f65fdabe55.png)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When we received the emitted message from the component, we hydrated the message
    with more data and pushed it to a local array variable.
  prefs: []
  type: TYPE_NORMAL
- en: In the template, we iterate this array, turning it into a list of tasks. This
    displays the tasks we need to complete, the checkbox to mark when the task is
    complete, and the time that a task was completed by.
  prefs: []
  type: TYPE_NORMAL
- en: When the user clicks on the checkbox, it executes a function, which marks the
    current task as done. If the task is already done, the function will set the `finishedAt` property
    to `undefined`.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You can find out more information about list rendering at [https://v3.vuejs.org/guide/list.html#mapping-an-array-to-elements-with-v-for](https://v3.vuejs.org/guide/list.html#mapping-an-array-to-elements-with-v-for).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You can find out more information about conditional rendering at [https://v3.vuejs.org/guide/conditional.html#v-if](https://v3.vuejs.org/guide/conditional.html#v-if).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You can find out more information about `Math.random` at [https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/random](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/random).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating computed properties and understanding how they work
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Imagine that every time you have to fetch manipulated data, you need to execute a
    function. Imagine that you need to get specific data that needs to go through some
    process and you need to execute it through a function every time. This type of
    work would not be easy to maintain. Computed properties exist to solve these problems. Using
    computed properties makes it easier to obtain data that needs preprocessing or
    even caching without executing any other external memorizing function.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The prerequisite for this recipe is Node.js 12+.
  prefs: []
  type: TYPE_NORMAL
- en: 'The Node.js global objects that are required for this recipe are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`@vue/cli`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`@vue/cli-service-global`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You can continue with our to-do list project or create a new Vue project with
    the Vue CLI, as we learned in the *Creating your first project with the Vue CLI* recipe.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Follow these steps to create a computed property and understand how it works:'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the `App.vue` file, at the `<script>` part, we will add a new property between `data` and `method`,
    called `computed`. This is where the `computed` properties will be placed. We
    will create a new computed property called `displayList`, which will be used to
    render the final list on the template:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: For now, the `displayList` property is just returning a cached value of the
    variable, and not the direct variable itself.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, for the `<template>` part, we need to change where the list is being fetched:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: 'To run the server and see your component, you need to open a Terminal (macOS
    or Linux) or Command Prompt/PowerShel*l* (Windows) and execute the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: Remember to always execute the command `npm run lint --fix`, to automatically
    fix any code lint error.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When using the `computed` property to pass a value to the template, this value
    is now cached. This means we will only trigger the rendering process when the
    value is updated. At the same time, we made sure that the template doesn't use
    the variable for rendering so that it can't be changed on the template, as it
    is a cached copy of the variable.
  prefs: []
  type: TYPE_NORMAL
- en: Using this process, we get the best performance because we won't waste processing
    time rerendering the DOM tree for changes that have no effect on the data being
    displayed. This is because if something changes and the result is the same, the `computed` property
    caches the result and won't update the final result.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You can find out more information about computed properties at [https://v3.vuejs.org/guide/computed.html](https://v3.vuejs.org/guide/computed.html).
  prefs: []
  type: TYPE_NORMAL
- en: Displaying cleaner data and text with custom filters
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Sometimes, you may find that the user, or even you, cannot read the Unix timestamp or
    other `DateTime` formats. How can we solve this problem? When rendering the data
    in Vue, it's possible to use what we call filters.
  prefs: []
  type: TYPE_NORMAL
- en: Imagine a series of pipes that data flows through. Data enters each pipe in
    one shape and exits in another. This is what filters in Vue look like. You can
    place a series of filters on the same variable so that it gets formatted, reshaped,
    and ultimately displayed with different data while the code remains the same.
    The code of the initial variable is immutable in those pipes.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The prerequisite for this recipe is Node.js 12+.
  prefs: []
  type: TYPE_NORMAL
- en: 'The Node.js global objects that are required for this recipe are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`@vue/cli`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`@vue/cli-service-global`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We can continue with our to-do list project or create a new Vue project with
    the Vue CLI, as we learned in the *Creating your first project with Vue CLI* recipe.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Follow these steps to create your first custom Vue filter:'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the `App.vue` file, at the `<script>` part, in the methods, create a `formatDate` function
    inside this property. This function will receive `value` as a parameter and enter
    the filter pipe. We can check if the value is a number because we know that our
    time is based on the Unix timestamp format. If it''s a number, we will format
    based on the current browser location and return that formatted value. If the
    value is not a number, we just return the passed value:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: 'For the `<template>` part of the component, we need to pass the variable to
    the filter method. To do this, we need to find the `taskItem.finishedAt` property
    and make it the parameter of the `formatDate` method. We will add some text to
    denote that the task was `Done at:` at the beginning of the date:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: 'To run the server and see your component, open a Terminal (macOS or Linux)
    or Command Prompt/PowerShell (Windows) and execute the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: Remember to always execute the command `npm run lint --fix`, to automatically
    fix any code lint error.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is the component rendered and running:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/8ea29522-f5dc-41bb-9162-747cec4936b3.png)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Filters are methods that receive a value and must return a value to be displayed
    in the `<template>` section of the file, or used in a Vue property.
  prefs: []
  type: TYPE_NORMAL
- en: When we pass the value to the `formatDate` method, we know that it's a valid
    Unix timestamp, so it's possible to invoke a new `Date` class constructor, passing
    `value` as a parameter because the Unix timestamp is a valid date constructor.
  prefs: []
  type: TYPE_NORMAL
- en: The code behind our filter is the `Intl.DateTimeFormat` function, a native function
    that can be used to format and parse dates to declared locations. To get the local format,
    we can use the `navigator` global variable.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You can find out more information about `Intl.DateTimeFormat` at [https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DateTimeFormat](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DateTimeFormat).
  prefs: []
  type: TYPE_NORMAL
- en: Creating filters and sorters for a list
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When working with lists, it's common to find yourself with raw data. Sometimes,
    you need to get this data filtered so that it can be read by the user. To do this,
    we need a combination of computed properties to form a final set of filters and
    sorters.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we will learn how to create a simple filter and sorter that
    will control our initial to-do task list.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The prerequisite for this recipe is Node.js 12+.
  prefs: []
  type: TYPE_NORMAL
- en: 'The Node.js global objects that are required for this recipe are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`@vue/cli`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`@vue/cli-service-global`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We can continue with our to-do list project or create a new Vue project with
    the Vue CLI, as we learned in the *Creating your first project with Vue CLI* recipe.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Follow these steps to add a set of filters and sorts to your list:'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the `App.vue` file, at the `<script>` part, we will add new computed properties;
    these will be for sorting and filtering. We will add three new computed properties: `baseList`, `filteredList`,
    and `sortedList`. The `baseList` property will be our first manipulation. We will
    add an `id` property to the task list via `Array.map`. Since JavaScript arrays
    start at zero, we will add `1` to the index of the array. The `filteredList` property
    will filter the `baseList` property and return just the unfinished tasks, while
    the `sortedList` property will sort the `filteredList` property so that the last
    added `id` property will be the first that''s displayed to the user:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: 'For the `<template>` part, we will add `Task ID` and change how the `changeStatus` method
    sends the argument. Because the index is now mutable, we can''t use it as a variable;
    it''s just a temporary index on the array. We need to use the task `id`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: 'We also need to update our function inside the `changeStatus` method. Since
    the index now starts at `1`, we need to decrease the index of the array by one to
    get the real index of the element before we can update it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: 'To run the server and see your component, you need to open a Terminal (macOS
    or Linux) or Command Prompt/PowerShell (Windows) and execute the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: Remember to always execute the command `npm run lint --fix`, to automatically
    fix any code lint error.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is the component rendered and running:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/b8319597-b627-4f82-b44f-7109c197afac.png)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `computed` properties worked together as a cache for the list and made
    sure there were no side effects when it came to manipulating the elements:'
  prefs: []
  type: TYPE_NORMAL
- en: For the `baseList` property, we created a new array with the same tasks but
    added a new `id` property to the task.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: For the `filteredList` property, we took the `baseList` property and only returned
    the tasks that weren't finished.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: For the `sortedList` property, we sorted the tasks on the `filteredList` property
    by their ID, in descending order.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When all the manipulation was done, the `displayList` property returned the
    result of the data that was manipulated.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You can find more information about `Array.prototype.map` at [https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You can find more information about `Array.prototype.filter` at [https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You can find more information about `Array.prototype.sort` at [https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/sort](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/sort).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating conditional filters to sort list data
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that you've completed the previous recipe, your data should be filtered
    and sorted, but you might need to check the filtered data or need to change how
    it was sorted. In this recipe, you will learn how to create conditional filters
    and sort the data on a list.
  prefs: []
  type: TYPE_NORMAL
- en: Using some basic principles, it's possible to gather information and display
    it in many different ways.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The prerequisite for this recipe is Node.js 12+.
  prefs: []
  type: TYPE_NORMAL
- en: 'The Node.js global objects that are required for this recipe are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`@vue/cli`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`@vue/cli-service-global`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We can continue with our to-do list project or create a new Vue project with
    the Vue CLI, as we learned in the *Creating your first project with the Vue CLI* recipe.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Follow these steps to add a conditional filter to sort your list data:'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the `App.vue` file, at the `<script>` part, we will update the `computed` properties;
    that is, `filteredList`, `sortedList`, and `displayList`. We need to add three
    new variables to our project: `hideDone`, `reverse`, and `sortById`. All three
    are going to be Boolean variables and will start with a default value of `false`.
    The `filteredList` property will check if the `hideDone` variable is `true`. If
    it is, it will have the same behavior, but if not, it will show the whole list
    with no filter. The `sortedList` property will check if the `sortById`variableis `true`.
    If it is, it will have the same behavior, but if not, it will sort the list by
    the finished date of the task. Finally, the `displayList`propertywill check if
    the `reverse` variable is `true`. If it is, it will reverse the displayed list,
    but if not, it will have the same behavior:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: 'For the `<template>` part, we need to add the controllers for those variables.
    We will create three checkboxes, linked directly to the variables via the `v-model` directive:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: 'To run the server and see your component, you need to open a Terminal (macOS
    or Linux) or Command Prompt/PowerShell (Windows) and execute the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: Remember to always execute the command `npm run lint --fix`, to automatically
    fix any code lint error.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is the component rendered and running:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/0015cb11-98a7-418f-82fb-6c2a80859358.png)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `computed` properties worked together as a cache for the list and made
    sure there weren''t any side effects when it came to manipulating the elements.
    With the conditional process, it was possible to change the rules for the filtering
    and sorting processes through a variable, and the display was updated in real
    time:'
  prefs: []
  type: TYPE_NORMAL
- en: For the `filteredList` property, we took the `baseList` property and returned
    just the tasks that weren't finished. When the `hideDone` variable was `false`,
    we returned the whole list without any filter.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: For the `sortedList` property, we sorted the tasks on the `filteredList` property.
    When the `sortById` variable was `true`, the list was sorted by ID in descending
    order; when it was `false`, the sorting was done by the task's finish time in
    ascending order.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: For the `displayList` property, when the `reverse` variable was `true`, the
    final list was reversed.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When all the manipulation was done, the `displayList`property returned the result
    of the data that was manipulated.
  prefs: []
  type: TYPE_NORMAL
- en: These `computed` properties were controlled by the checkboxes on the user screen,
    so the user had total control of what they could see and how they could see it.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You can find more information about `Array.prototype.map` at [https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You can find more information about `Array.prototype.filter` at [https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You can find more information about `Array.prototype.sort` at [https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/sort](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/sort).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding custom styles and transitions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Adding styles to your components is a good practice as it allows you to show
    your user what is happening more clearly. By doing this, you can show a visual
    response to the user and also give them a better experience of your application.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we will learn how to add a new kind of conditional class binding.
    We will use CSS effects mixed with the rerendering that comes with each new Vue
    update.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The prerequisite for this recipe is Node.js 12+.
  prefs: []
  type: TYPE_NORMAL
- en: 'The Node.js global objects that are required for this recipe are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`@vue/cli`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`@vue/cli-service-global`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We can continue with our to-do list project or create a new Vue project with
    the Vue CLI, as we learned in the *Creating your first project with the Vue CLI* recipe.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Follow these steps to add custom styles and transitions to your component:'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the `App.vue` file, we will add a conditional class to the list items for
    the tasks that have been completed:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: 'For the `<style>` part of the component, we will create the CSS style sheet
    classes for the `taskDone` CSS class. We need to make the list have a separator between the
    items; then, we will make the list have a striped style. When they get marked
    as done, the background will change with an effect. To add the separator between
    the lines and the striped list or zebra style, we need to add a CSS rule that
    applies to each `even nth-child`of our list:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: 'To add the effect to the background when the task has been completed, at the
    end of the `<style>` part, we will add a CSS animation keyframe that indicates
    the background color change and applies this animation to the `.taskDone` CSS
    class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: 'To run the server and see your component, you need to open a Terminal (macOS
    or Linux) or Command Prompt/PowerShell (Windows) and execute the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: Remember to always execute the command `npm run lint --fix`, to automatically
    fix any code lint error.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is the component rendered and running:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/03cbe64b-7a4b-465b-aea8-1cacbc764f87.png)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Each time a new item in our application is marked as done, the `displayList` property
    gets updated and triggers the rerendering of the component.
  prefs: []
  type: TYPE_NORMAL
- en: Because of this, our `taskDone` CSS class has an animation attached to it that
    is executed on rendering, showing a green background.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You can find more information about CSS animations at [https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Animations/Using_CSS_animations](https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Animations/Using_CSS_animations).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You can find more information about class and style bindings at [https://v3.vuejs.org/guide/class-and-style.html](https://v3.vuejs.org/guide/class-and-style.html)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using vue-devtools to debug your application
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '`vue-devtools` is a must for every Vue developer. This tool shows us the depths
    of the Vue components, routes, events, and Vuex.'
  prefs: []
  type: TYPE_NORMAL
- en: With the help of the `vue-devtools` extension, it's possible to debug our application,
    try new data before changing our code, execute functions without needing to call
    them in our code directly, and so much more.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we will learn more about how to use various devtools to find
    out more about our application and how they can be used to help with our debug
    process.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The prerequisite for this recipe is Node.js 12+.
  prefs: []
  type: TYPE_NORMAL
- en: 'The Node.js global objects that are required for this recipe are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`@vue/cli`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`@vue/cli-service-global`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'You will need to install the `vue-devtools` extension in your browser:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Chrome extension: [http://bit.ly/chrome-vue-devtools](http://bit.ly/chrome-vue-devtools)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Firefox extension: [http://bit.ly/firefox-vue-devtools](http://bit.ly/firefox-vue-devtools)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We can continue with our to-do list project or create a new Vue project with
    the Vue CLI, as we learned in the *Creating your first project with the Vue CLI* recipe.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When developing any Vue application, it's always a good practice to develop
    with `vue-devtools` at hand.
  prefs: []
  type: TYPE_NORMAL
- en: 'Follow these steps to understand how to use `vue-devtools` and how to properly
    debug a Vue application:'
  prefs: []
  type: TYPE_NORMAL
- en: 'To enter `vue-devtools`, you need to have it installed in your browser, so
    check the *Getting ready* section of this recipe for the links to the extension
    for Chrome or Firefox. In your Vue development application, enter the Browser
    developer inspector mode. A new tab called Vue will appear:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/c08fd0d0-ff90-4257-933d-b53c85b29b28.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The first tab that you will be presented with is the Components tab. This tab
    shows your application component tree. If you click on a component, you will be
    able to see all the available data, the computed property, and extra data that''s
    been injected by plugins such as `vuelidate`, `vue-router`, or `vuex`. You can
    edit this data to see the changes in the application in real time:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/fbab0838-bec5-4d25-8106-38bd57b51ebd.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The second tab is for Vuex development. This tab will show the history of the
    mutations, the current state, and the getters. It''s possible to check on the
    passed payload for each mutation and do time-travel mutations, to *go back in
    time* and look at the Vuex changes in the states:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/450a5c02-da10-4793-9290-996b13cc3845.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The third tab is dedicated to Event emitters in the application. All events
    that are emitted in the application will be shown here. You can check the event
    that was emitted by clicking on it. By doing this, you can see the name of the
    event, the type, who was the source of the event (in this case, it was a component),
    and the payload:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/88c382ae-8d0a-44ce-9e50-6ae3e9c24f06.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The fourth tab is dedicated to the vue-router plugin. There, you can view its
    navigation history, along with all the metadata that was passed to the new route.
    This is where you can check all the available routes in your application:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/5431685c-f94f-4bf8-8eba-6e0ca4fcd486.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The fifth tab is the Performance tab. Here, you can check your component''s
    loading time and the frames per second that your application is running at for
    the events that are happening in real time. The following screenshot shows the
    current frames per second of the current application, and for the selected component:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/833ad7aa-88bb-49d0-9522-fbba99d168c5.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The following screenshot shows the component''s life cycle hook performance
    and the time it took to execute each hook:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/c539f0f6-7f06-4dba-95a6-dbc587b1702e.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The sixth tab is your Settings tab. Here, you can manage the extension and
    change how it looks, how it behaves internally, and how it will behave within
    the Vue plugins:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/5ded148d-1d5b-4239-9746-9a4ac0fc912e.png)'
  prefs: []
  type: TYPE_IMG
- en: The last tab is a refresh button for `vue-devtools`. Sometimes, when `hot-module-reload` occurs
    or when some complex events occur in your application component tree, the extension
    can lose track of what is happening. This button forces the extension to reload
    and read the Vue application state again.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You can find more information about `vue-devtools` at [https://github.com/vuejs/vue-devtools](https://github.com/vuejs/vue-devtools).
  prefs: []
  type: TYPE_NORMAL
