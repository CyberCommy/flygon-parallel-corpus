- en: '*Chapter 13*: Creating and Publishing Your Own Node on the Node-RED Library'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: So far, we have learned about Node-RED using the prepared nodes. In this chapter,
    you'll learn how to create your own node and publish it in a library. After completing
    the tutorials in this chapter, you will be able to publish your own node for use
    by various developers around the world.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s get started with the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Creating your own node
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Testing your own node in a local environment
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Publishing your own node as a module on the Node-RED Library
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: By the end of this chapter, you will have mastered how to create your own node.
  prefs: []
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To progress in this chapter, you will need the following:'
  prefs: []
  type: TYPE_NORMAL
- en: 'A GitHub account: [https://github.com/](https://github.com/).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'An npm account: [https://www.npmjs.com/](https://www.npmjs.com/).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Node-RED (standalone in a local environment).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An IBM Cloud account.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The code used in this chapter can be found in `Chapter13` folder at [https://github.com/PacktPublishing/-Practical-Node-RED-Programming](https://github.com/PacktPublishing/-Practical-Node-RED-Programming).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The steps of this tutorial are basically processed on Mac. If you use a Windows
    PC, please replace the commands and file path with your environment.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating your own node
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Before developing a node, there is something you need to know first. The following
    policies are set for node development. Let's follow these and develop a node.
  prefs: []
  type: TYPE_NORMAL
- en: When creating a new node, you need to follow some general rules. They adhere
    to the approach adopted by the core nodes and provide a consistent user experience.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can check the rules for creating a node on the official Node-RED website:
    [https://nodered.org/docs/creating-nodes/](https://nodered.org/docs/creating-nodes/).'
  prefs: []
  type: TYPE_NORMAL
- en: Node program development
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Node-RED nodes consist of two files: a JavaScript file that defines processing
    and an HTML file that provides a UI such as a setting screen. In the JavaScript
    file, the processing of the node you create is responsible for is defined as a
    function. This function is passed an object that contains node-specific properties.
    The HTML file describes the property settings screen displayed by the Node-RED
    flow editor. The settings values entered on the property settings screen displayed
    in this HTML file are called from the JavaScript file and processed.'
  prefs: []
  type: TYPE_NORMAL
- en: Here, we will create a GitHub repository, but if you just want to create a node,
    you don't need a GitHub repository. In this chapter, we will use the GitHub repository
    to publish the created node to the library, so I would like you to create the
    repository at the beginning of the step.
  prefs: []
  type: TYPE_NORMAL
- en: 'Please implement the following steps to create a GitHub repository:'
  prefs: []
  type: TYPE_NORMAL
- en: Go to [https://github.com/](https://github.com/) and log in with your GitHub
    account.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select `node-red-contrib-<name representing a group of nodes>`, so specify the
    GitHub repository name accordingly. In this example, it is `node-red-contrib-taiponrock`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: After specifying the repository name, set the repository disclosure range to
    **Public**, check the README file, and specify the license. In this example, it
    is created with the **Apache License 2.0**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'After setting everything, click the **Create repository** button to create
    a repository:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 13.2 – The repository is created as a public project'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_13.2_B16353.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 13.2 – The repository is created as a public project
  prefs: []
  type: TYPE_NORMAL
- en: You have now created your GitHub repository.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now let''s clone the repository we just created to our local development environment
    by following these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Copy the repository URL to the clipboard. Click the green **Code** dropdown
    and click the **clipboard** button to copy the URL:![Figure 13.3 – Copy the URL
    to clone this repository
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_13.3_B16353.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 13.3 – Copy the URL to clone this repository
  prefs: []
  type: TYPE_NORMAL
- en: Clone the repository locally (git clone) from a command-line interface (such
    as a terminal) where **Bash** can run.
  prefs: []
  type: TYPE_NORMAL
- en: 'Go to the working directory where you want to clone (copy) the repository.
    Here, I created a work directory under the `user` directory and moved to it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Execute the `git clone` command with the URL of the repository you created
    earlier:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'When the clone is finished, use the `ls` command to confirm that it has been
    successfully cloned:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Let's make a JavaScript file now.
  prefs: []
  type: TYPE_NORMAL
- en: From here, we will create the actual node processing. But don't worry, we already
    have the code ready. The provided code is very simple for processing the node.
    It's just a matter of converting the string passed as input to lowercase.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, change to the directory of the cloned repository:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Under this directory, create a file with the filename `node.js`, as shown in
    the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '`node.js` has been created.'
  prefs: []
  type: TYPE_NORMAL
- en: Let's make an HTML file now.
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a file under the same directory with the filename `node.html`, as shown
    in the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '`node.html` has been created. This HTML file is responsible for the UI and
    design of the node you create. As mentioned previously, a node always consists
    of an HTML file and a JavaScript file.'
  prefs: []
  type: TYPE_NORMAL
- en: The node implementation has been almost completed. Next, let's package the created
    node so that it can be deployed.
  prefs: []
  type: TYPE_NORMAL
- en: Node packaging
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Now that we've created the node processing (JavaScript) and appearance (HTML),
    it's time to package it. In Node-RED, the flow editor itself is a **Node.js**
    app, and each node running on it is also a Node.js app. In other words, the packaging
    here is processed using npm.
  prefs: []
  type: TYPE_NORMAL
- en: 'We won''t go into detail about npm here. If you want to know more about it,
    please visit the npm official website or refer to various technical articles:
    [https://www.npmjs.com/](https://www.npmjs.com/).'
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, use the `npm` command to perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'npm initialization. Execute the following command in the same location as the
    directory where `node.js` and `node.html` were created:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: When you run `npm init`, you will be asked for various parameters interactively,
    so enter them according to how you want to proceed. These are the parameters that
    I used:![](img/Table_13.1_B16353.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'When you finish this step, the `npm init` command will generate a `package.json`
    file:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 13.4 – npm init'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_13.4_B16353.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 13.4 – npm init
  prefs: []
  type: TYPE_NORMAL
- en: 'Edit `package.json`. You will need to manually add Node-RED-specific settings
    to `package.json`. Open the `package.json` file with a text editor and add the
    new property at the same level as `"name"` and `"version"` in the JSON: `"node-red":
    {"nodes": "{" lower-case ":" node.js "} }`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'The following screenshot can be used as a reference, which will help you in
    adding this property:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 13.5 – Edit package.json'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_13.5_B16353.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 13.5 – Edit package.json
  prefs: []
  type: TYPE_NORMAL
- en: This completes the packaging of your own node. Let's actually use this node
    in the next part.
  prefs: []
  type: TYPE_NORMAL
- en: Testing your own node in a local environment
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You have already completed your own node. Let's add the nodes created so far
    to Node-RED in a local environment.
  prefs: []
  type: TYPE_NORMAL
- en: For your own nodes, it is very important to check their operation locally. Publishing
    a node on the internet without making sure it works in your environment is not
    good for many developers.
  prefs: []
  type: TYPE_NORMAL
- en: So, in this section, you'll be testing your own node in your local environment.
  prefs: []
  type: TYPE_NORMAL
- en: Node installation
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You can use the `npm link` command to test the node module locally. This allows
    you to develop nodes in your local directory and link them to your local Node-RED
    installation during development.
  prefs: []
  type: TYPE_NORMAL
- en: 'This is very simple. Follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Execute the following command on the CLI to add a node and start Node-RED:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: This will create the appropriate symbolic link to the directory and Node-RED
    will discover the node at boot time. Simply restart Node-RED to get the changes
    to the node's files.
  prefs: []
  type: TYPE_NORMAL
- en: Run the `node-red` command on the command line to start the local Node-RED.
    If it has already been started, restart it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'You should see that a node called **lower case** has been added to the **function**
    category of the palette after rebooting:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 13.6 – The lower case node has been added'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_13.6_B16353.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 13.6 – The lower case node has been added
  prefs: []
  type: TYPE_NORMAL
- en: Let's see if it can be used properly. Create a flow by sequentially connecting
    each node of **inject** **lower case** **debug**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: For the properties of the **inject** node, set it to the character string type
    and set it to output any character string in all uppercase letters, for example,
    **MY NAME IS TAIJI**:![Figure 13.7 – Make a flow
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_13.7_B16353.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 13.7 – Make a flow
  prefs: []
  type: TYPE_NORMAL
- en: 'When you deploy the created flow and execute the **inject** node, you can see
    that the all-uppercase string, as the parameter of this flow, is converted to
    an all-lowercase string and output to the **debug** tab:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 13.8 – Result of this flow'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_13.8_B16353.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 13.8 – Result of this flow
  prefs: []
  type: TYPE_NORMAL
- en: Next, let's see how to customize a node.
  prefs: []
  type: TYPE_NORMAL
- en: Node customization
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: I was able to confirm that the node I created can be used in the local environment.
    From here, we will customize that node. It is possible to edit the function and
    appearance of the node by modifying JavaScript and HTML. These changes will take
    effect when you restart Node-RED.
  prefs: []
  type: TYPE_NORMAL
- en: Changing the node name
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Currently, the node name of the created node is still a lower-case version
    of the sample program. Here, change this name to any name you like. Every node
    must have a unique name, so you should pick something that does not already exist.
    Follow these steps to change the name of the node:'
  prefs: []
  type: TYPE_NORMAL
- en: Change `lower-case` described in the `package.json` file to your own node name.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the example, the repository of the node is `node-red-contrib-taiponrock`,
    so change it to the `taiponrock` node.
  prefs: []
  type: TYPE_NORMAL
- en: 'This is how the `package.json` file looks before being modified:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 13.9 – Before modifying package.json'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_13.9_B16353.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 13.9 – Before modifying package.json
  prefs: []
  type: TYPE_NORMAL
- en: 'And this is how it looks after being modified:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 13.10 – After modifying package.json'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_13.10_B16353.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 13.10 – After modifying package.json
  prefs: []
  type: TYPE_NORMAL
- en: Change `lower-case` and `LowerCaseNode` described in the `node.js` file to your
    own node name.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: For example, change `lower-case` to `taiponrock` and `LowerCaseNode` to `TaiponrockNode`.
  prefs: []
  type: TYPE_NORMAL
- en: 'This is how the `node.js` file looks before being modified:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 13.11 – Before modifying node.js'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_13.11_B16353.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 13.11 – Before modifying node.js
  prefs: []
  type: TYPE_NORMAL
- en: 'This is how the `node.js` file looks like after being modified:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 13.12 – After modifying node.js'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_13.12_B16353.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 13.12 – After modifying node.js
  prefs: []
  type: TYPE_NORMAL
- en: Change `lower-case` described in the `node.html` file to your own node name.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: For example, change `lower-case` to `taiponrock`.
  prefs: []
  type: TYPE_NORMAL
- en: 'This is how the `node.html` file looks before being modified:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 13.13 – Before modifying node.html'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_13.13_B16353.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 13.13 – Before modifying node.html
  prefs: []
  type: TYPE_NORMAL
- en: 'This is how the `node.html` file looks after being modified:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 13.14 – After modifying node.html'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_13.14_B16353.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 13.14 – After modifying node.html
  prefs: []
  type: TYPE_NORMAL
- en: 'After restarting Node-RED, you can see that it has been renamed correctly:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 13.15 – Your node has been renamed'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_13.15_B16353.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 13.15 – Your node has been renamed
  prefs: []
  type: TYPE_NORMAL
- en: Next, we will see how we can change the code of a particular node.
  prefs: []
  type: TYPE_NORMAL
- en: Changing the node code
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The main parts that implement node processing are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Change the code. You can change the processing of the node by rewriting `msg.payload
    = msg.payload.toLowerCase ();` defined in this part of `node.js`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Here, to make the work easier to understand, let's change to a method that only
    returns the character string of your name or nickname.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s rewrite `node.js` as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Execute the flow.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now let's see if it has changed. Use the flow you created earlier. The **lower
    case** node in this flow has been changed to a node whose name and processing
    has been changed, but it needs to be redeployed and raised. To make it easier
    to understand, delete the node that was once the original **lower case** node
    and relocate it.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 13.16 – Replace the node you created with the renamed node and execute
    it'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_13.16_B16353.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 13.16 – Replace the node you created with the renamed node and execute
    it
  prefs: []
  type: TYPE_NORMAL
- en: Check the result. When you deploy the created flow and execute the **inject**
    node, you can see that the character string (name or nickname) that was set as
    a constant in this *Changing the node code* section is displayed in the **debug**
    tab.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 13.17 – Result of this flow'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_13.17_B16353.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 13.17 – Result of this flow
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, we will see some other node customizing options that we
    can use.
  prefs: []
  type: TYPE_NORMAL
- en: Other customizing options
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'In addition to the node name, you can customize your own node in a lot of different
    ways, such as node color, node icon, node category, node function, and so on.
    For details, please see this official document: [https://nodered.org/docs/creating-nodes/appearance](https://nodered.org/docs/creating-nodes/appearance).'
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have tested and customized the node in the local environment, let's
    publish the node in the Node-RED library.
  prefs: []
  type: TYPE_NORMAL
- en: Publishing your own node as a module in the Node-RED Library
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Here, we will publish the created node in the Node-RED library. To do that,
    some work is required. So far, you have created your own node and confirmed that
    it can be used only in your environment. However, since it is a unique node created
    by you, let''s publish it on the internet and have everyone in the world use it.
    To do this, you need to publish your own node to a location called the Node-RED
    library, which can be found here: [https://flows.nodered.org/](https://flows.nodered.org/).'
  prefs: []
  type: TYPE_NORMAL
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: The Node-RED library is a community-based place to publish nodes and flows.
    Therefore, you should avoid exposing incomplete or useless nodes. This is because
    the Node-RED users should be able to find the nodes that they want, and it is
    not desirable to have a mix of unwanted nodes.
  prefs: []
  type: TYPE_NORMAL
- en: So, although this chapter will explain how to publish nodes, please avoid exposing
    test nodes or sample node-level ones.
  prefs: []
  type: TYPE_NORMAL
- en: Publishing the node you created
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Follow these steps to publish your own node in the Node-RED library:'
  prefs: []
  type: TYPE_NORMAL
- en: Maintain a `README.md` file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We will write the node description in the `README.md` file. English is the best
    language to write in, considering that English is a universal language.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, it is desirable to describe the following contents:'
  prefs: []
  type: TYPE_NORMAL
- en: Overview explanation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to use the node
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Screenshot
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Sample flow using this node
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Prerequisite environment
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Change log
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'In this section, since it is a hands-on tutorial, only the outline and usage
    will be written in the `README.md` file. Please update `README.md` with the following
    contents:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Upload files – make sure you have five files: `node.js`, `node.html`, `package.json`,
    `README.md`, and `LICENSE` in the directory (it doesn''t matter if `package.lock.json`
    is included):![Figure 13.18 – Check these five files'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_13.18_B16353.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Publish your node (`npm publish`).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now let''s expose the node as a module. Upload the set of files using the `npm`
    command. Again, work in the cloned repository directory:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Register the created node from **Adding a node** of the Node-RED library.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In **Add your node to the Flow Library**, enter the name of the node you created
    and click the **add node** button:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 13.21 – Add your node to the Node-RED library'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_13.21_B16353.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 13.21 – Add your node to the Node-RED library
  prefs: []
  type: TYPE_NORMAL
- en: 'When the registration is complete, you can see that the created node has been
    added to the library:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 13.22 – Your node has been published in the Node-RED library'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_13.22_B16353.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 13.22 – Your node has been published in the Node-RED library
  prefs: []
  type: TYPE_NORMAL
- en: It takes about 15 minutes for the registration of a new node. Please note that
    the node you registered via the Node-RED flow editor cannot be found without complete
    registration on the Node-RED library.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you upgrade the version and publish it again, please refresh from your node''s
    page of the Node-RED Library and click **check for update** in the **Actions**
    panel on the right side of the node screen:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 13.23 – Check for the update of your node''s status'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_13.23_B16353.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 13.23 – Check for the update of your node's status
  prefs: []
  type: TYPE_NORMAL
- en: Next, let's see how to delete the node published by you.
  prefs: []
  type: TYPE_NORMAL
- en: Deleting the node you published
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Be careful when deleting published nodes. Currently (as of October 2020), according
    to npm's package unpublish policy, the unpublish deadline is within 24 to 72 hours
    of publication. In addition, it is possible to unpublish packages that have little
    effect on specific conditions, such as less than 300 downloads even for 72 hours
    or more.
  prefs: []
  type: TYPE_NORMAL
- en: 'This information is expected to be updated from time to time, so please refer
    to the npm official website for the latest information: [https://www.npmjs.com/policies/unpublish](https://www.npmjs.com/policies/unpublish).'
  prefs: []
  type: TYPE_NORMAL
- en: After unpublishing, please refresh from your node's page of the Node-RED library
    in the same way as when updating. Click the request refresh at the bottom of the
    **Actions** panel on the right side of the node screen.
  prefs: []
  type: TYPE_NORMAL
- en: 'To unpublish, execute the following command in the module directory (the directory
    of the cloned repository):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: If this command completes successfully, the module unpublishing is successful.
  prefs: []
  type: TYPE_NORMAL
- en: Installing the node you published
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: It is recommended that you wait at least 15 minutes after completing adding
    your node to the **Node-RED Library**.
  prefs: []
  type: TYPE_NORMAL
- en: In Node-RED of the local environment, I reflected the self-made node so that
    it can be used as it is. I also published it to npm for publication and registered
    the node in the Node-RED library. Anyone should now be able to use this node.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here, let''s try and check whether the node created this time can be installed
    and used without any problems from Node-RED of IBM Cloud. Please follow these
    steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Log into IBM Cloud, create a Node-RED service, and launch the Node-RED flow
    editor.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open **Manage Palettes** in the flow editor:![Figure 13.24 – Access ing Manage
    palette
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_13.24_B16353.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 13.24 – Access ing Manage palette
  prefs: []
  type: TYPE_NORMAL
- en: Select the **Install** tab and start typing the name of your node you created
    in the search field.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If the node you created is displayed in the search results, it means that it
    is open to the public and is the target of installation.
  prefs: []
  type: TYPE_NORMAL
- en: Click the **Install** button to install.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'If it is not displayed in the search results, you must have not waited for
    15 minutes after node registration. Please try again after 30 minutes or 1 hour.
    If you still do not find your node, there may be some other cause, so please review
    the procedure you have done so far and try again:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 13.25 – Search for and install your node'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_13.25_B16353.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 13.25 – Search for and install your node
  prefs: []
  type: TYPE_NORMAL
- en: Confirm that the node you created on the palette is installed, create a flow
    as shown in the following figure, and execute the **inject** node:![Figure 13.26
    – Make the flow
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_13.26_B16353.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 13.26 – Make the flow
  prefs: []
  type: TYPE_NORMAL
- en: In the example, the self-made node is inserted between the flows prepared by
    default when the Node-RED flow editor is started for the first time.
  prefs: []
  type: TYPE_NORMAL
- en: 'After running the **inject** node, verify that the results are displayed in
    the **debug** window:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 13.27 – Result of this flow'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_13.27_B16353.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 13.27 – Result of this flow
  prefs: []
  type: TYPE_NORMAL
- en: Great job! You now know how to make your own node and publish it.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Congrats! In this chapter, you learned how to create your own node, how to customize
    it, and how to set it from the Node-RED library or your local machine. Creating
    your own node wasn't as difficult as you might think. If you create the processing
    content and arrange the appearance based on this procedure, you can publish your
    own useful node that does not already exist and have developers all over the world
    use it!
  prefs: []
  type: TYPE_NORMAL
- en: Also, at the end of this book, I'll give you a brief introduction to the Node-RED
    user community, so be sure to check that out as well.
  prefs: []
  type: TYPE_NORMAL
