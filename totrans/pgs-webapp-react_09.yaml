- en: Making Our App Installable with a Manifest
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We’re now starting down the road to Progressive Web App land. From now on, our
    only focus will be on taking our existing application and making it faster, sleeker,
    and more user-friendly.
  prefs: []
  type: TYPE_NORMAL
- en: One of the big advantages of the Progressive Web App is bridging the gap between
    a web application (viewed in a browser) and a native app (launched as a separate
    application). The next few chapters, in particular, will focus on making our web
    app more native-like, without losing all the advantages of a web application.
  prefs: []
  type: TYPE_NORMAL
- en: The first major benefit of a web application over a native app is the lack of
    an install barrier. If you create a native app, you need to convince users to
    devote precious storage and bandwidth, before they even use your application.
    They must be willing to sit through the download and install process. Then they
    have to keep it around, even if they don't use it that often.
  prefs: []
  type: TYPE_NORMAL
- en: Web applications have no such barrier. You can use them almost instantly, and
    the most sophisticated web apps have functionality that rivals native apps. What's
    their disadvantage? Well, the user has to navigate to their browser, then to the
    web page, in order to use it. They don't have the nice tidy reminder of the app's
    existence staring at them from their phone's home screen.
  prefs: []
  type: TYPE_NORMAL
- en: What would the best of both worlds be? It would be an application that allows
    user to try it out before they commit to installing it to their device, but once
    it's installed, it acts exactly like a native application, with an icon on the
    device's home screen.
  prefs: []
  type: TYPE_NORMAL
- en: How can we achieve this? We can do so with a web app manifest.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we''ll cover the following:'
  prefs: []
  type: TYPE_NORMAL
- en: What is a web app manifest?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to make our app installable on Android
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to make our app installable on iOS
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using web app install banners
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What is an app manifest?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In [Chapter 2](part0048.html#1DOR00-7dd7c66301294003b85168009fe95fa4), *Getting
    Started with Webpack*, when we set up our Webpack build configuration, we ensured
    that our build process generated an asset manifest, with the filename `asset-manifest.json`.
  prefs: []
  type: TYPE_NORMAL
- en: This file contains a list of the JavaScript files our application uses. If we
    want to, we can configure it to also list the CSS and image files we use.
  prefs: []
  type: TYPE_NORMAL
- en: This asset manifest gives us an idea of what manifests are used for--describing
    some part of application. Our web app manifest is similar, but simply describes
    what our application is all about from a higher level, in a way that resembles
    an App Store description of a native app.
  prefs: []
  type: TYPE_NORMAL
- en: That's what it looks like, and we'll dive more into that soon as we build out
    our file, but the real magic of the web app manifest is what it does.
  prefs: []
  type: TYPE_NORMAL
- en: On some browsers (more on that later in the chapter), if your web application
    includes a proper web app manifest, the user can choose to save the web page to
    their home screen, where it will appear like a regular app, with its own launch
    icon. When they click on the icon, it will launch with a splash screen and (though
    it’s running from the browser) run in full screen mode, so it looks and feels
    like a regular app.
  prefs: []
  type: TYPE_NORMAL
- en: Browser support
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Here's the downside of the web app manifest--it’s a new technology. As such,
    few browsers actually support it. As of now, only newer versions of Android Webview
    and Chrome for Android have full support.
  prefs: []
  type: TYPE_NORMAL
- en: I'm predicting that support will come soon to all newer browsers, but where
    does that leave us for the moment?
  prefs: []
  type: TYPE_NORMAL
- en: In short, there are ways to activate similar functionality on older browsers.
    In this chapter, we'll cover using a web app manifest (for those of you on newer
    browsers, and to prepare you for the future) and a **polyfill** for iOS devices.
  prefs: []
  type: TYPE_NORMAL
- en: If you’re interested in covering other devices, there are polyfills available,
    such as **ManUp** ([https://github.com/boyofgreen/manUp.js/](https://github.com/boyofgreen/manUp.js/)).
    What these polyfills do is that they take the gamut of workarounds for different
    devices and compile them into one manifest file.
  prefs: []
  type: TYPE_NORMAL
- en: However, this book is about the future of web applications, so we'll show you
    everything you need to prepare for the world of web app manifests.
  prefs: []
  type: TYPE_NORMAL
- en: Making our app installable - Android
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Google is one of the biggest proponents of PWA's, so it makes sense that their
    Chrome browser and Android operating system are the most friendly to web app manifests.
  prefs: []
  type: TYPE_NORMAL
- en: Let's go through the process of creating a manifest in a way that makes it work
    with the latest version of Chrome. Later in this chapter, we'll go through the
    same process in a more manual way in order to support iOS.
  prefs: []
  type: TYPE_NORMAL
- en: Manifest properties
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let’s get to it! In your `public/` folder, create a file called `manifest.json`,
    and then add an empty object. Each of the following will be a key-value pair of
    that object. We''ll take a quick tour through each of the available properties:'
  prefs: []
  type: TYPE_NORMAL
- en: '`name`: Your application''s name. Simple!:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '`short_name`: A human readable version of your application''s name. This is
    for times when the full name won''t fit, like on your user''s home screen. If
    your app''s name is "Why PWAs Are Great For Everyone", you can shorten it to "PWAs
    R Great" or something here:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '`icons`: A list of icons for the user''s device to use. We will just use our
    current logo, which is conveniently the maximum size needed for an icon.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Google recommends the following set of icons:'
  prefs: []
  type: TYPE_NORMAL
- en: 128x128 as a base icon size
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 152x152 for Apple devices
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 144x144 for Microsoft devices
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 192x192 for Chrome
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 256x256, 384x384, and 512x512 for different device sizes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The last two are included in the asset bundle. We''ll need our designers to
    create the rest for our production build, but they''re not needed just yet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '`start_url`: The Start URL is used for analytics purposes so that you can see
    how many users are visiting your web application via an installed PWA. It''s optional,
    but doesn''t hurt:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '`background_color`: The background color is used for the color of the splash
    screen that displays when our application starts up. Here, we set it to a nice
    orange-red:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '`theme_color`: This is similar to `background_color`, but it styles the toolbar
    on Android when your app is active. A nice touch:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '`display`: As we said earlier, PWAs can be launched as if they were a native
    app, AKA the browser bar is hidden; that’s what this property activates. You can
    set it to "browser" if you think it’d be better for your users to be able to see
    the address bar:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Other properties
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'There are a few more properties you need to be aware of for our app:'
  prefs: []
  type: TYPE_NORMAL
- en: '`related_applications`: You can provide a list of native applications related
    to your web application, with a URL to download; pair it with `prefer_related_applications`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`prefer_related_applications`: A boolean that defaults to false. If true, the
    user will be notified about the related applications.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`scope`: A string, such as `/app`. If the user navigates to a page outside
    the scope, the app will return to the appearance of a regular web page in the
    browser.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`description`: A description of what your app does; not mandatory.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`dir`: The direction of the type.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`lang`: The language of the `short_name`. When paired with `dir`, can be used
    to ensure that right to left languages display correctly.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Linking our manifest
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'That''s it! At the end, your `manifest.json` should look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'You can then link it from your `index.html`, as shown:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Ensure that you also copy it into your `build` folder.
  prefs: []
  type: TYPE_NORMAL
- en: 'If all went well, and you have the latest version of Chrome, you can check
    whether it worked properly by going to the `Application` tab in Chrome Dev Tools.
    Ensure that you restart your server first. You should see the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../images/00058.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Now to test it! Let''s run our deploy process again with **`yarn deploy`**.
    When that''s done, navigate to the application on your Android device. In order
    to trigger the web app install banner, you need to visit the site twice, with
    five minutes between visits:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../images/00059.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: If you don't see the install banner, you can also install it by going to the
    options dropdown and selecting Add to Home Screen.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once you click on Add to Home Screen, you should see it appear:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../images/00060.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Then, when we launch, we get a beautiful splash screen:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../images/00061.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: It's lovely.
  prefs: []
  type: TYPE_NORMAL
- en: That’s the gist of making an installable PWA for Android. It's a nice and streamlined
    process, thanks to Google’s advocacy of PWAs, but many of our users will undoubtedly
    be using iPhones, so we have to ensure that we support them as well.
  prefs: []
  type: TYPE_NORMAL
- en: Making our app installable - iOS
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Apple hasn't come out in support of Progressive Web Apps, as of the time of
    writing. There's numerous theories as to why (their revenue-generating App Store
    ecosystem, competition with Google, lack of control), but it does mean that the
    process of making our app installable is much more manual.
  prefs: []
  type: TYPE_NORMAL
- en: Let's be clear--the optimal PWA experience, as of now, will be for a user on
    the latest version of Chrome, on an Android device.
  prefs: []
  type: TYPE_NORMAL
- en: However, PWAs are also all about progressive enhancement, a concept we'll cover
    in more depth in the later chapters. Progressive enhancement means we deliver
    the best possible experience for each user on their device; if they can support
    all the shiny new stuff, great, otherwise, we do our best with the tools they
    are using.
  prefs: []
  type: TYPE_NORMAL
- en: So, let's go through the process of making our UX delightful for an iPhone user
    who wants to save our app to their home screen.
  prefs: []
  type: TYPE_NORMAL
- en: 'We''ll use lots of `<meta>` tags to tell the browser that our app is installable.
    Let''s start with the icon:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Add the following to `public/index.html` (for the rest of this section, group
    all your `meta` tags above your `link` tags). This defines what the icon will
    be on the user’s home screen.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, we add a title to our page, which will be used as the name of the app
    on the home screen. Add this after your `link` tags:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, we need to let iOS know that this is a web app. You can do so with the
    following `meta` tag:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'As we did with `theme_color` in the Android section, we want to style the way
    the status bar appears. The default value is black, which looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../images/00062.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'The other option is black-translucent, which is not very black, and mainly
    translucent:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../images/00063.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Add this with the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: The last thing we want to do is style the splash screen; what appears as the
    app boots up.
  prefs: []
  type: TYPE_NORMAL
- en: The way to do this on iOS is a little manual--you provide a static image.
  prefs: []
  type: TYPE_NORMAL
- en: 'For full support, you need to provide a separate startup image for each iOS
    screen size, from iPads to the smallest iPhone. If you want to see a great example
    of multiple startup images and icons, check the gist at [https://gist.github.com/tfausak/2222823](https://gist.github.com/tfausak/2222823).
    Included here are the startup image links from that gist:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: You may note that these links do not include any iPhone later than the iPhone
    6 Plus. As of the time of writing, startup images have questionable support on
    iOS 9, and no support on iOS 10\. While this doesn't detract from the user experience
    of your app (splash screens should only be seen for a second, anyway) it's an
    indicator of Apple’s lack of full support for PWAs. Hopefully, this will change
    in the near future.
  prefs: []
  type: TYPE_NORMAL
- en: 'Overall, making your app an installable web app for iOS is not as fancy or
    intuitive as a `manifest.json`, but fairly straightforward. Redeploy your app
    with **`yarn deploy`**, and then open the web page with Safari on your iPhone.
    Then, hit share and Add to Home Screen:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../images/00064.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'It should appear on your home screen just like a regular app and, when launched,
    appear like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../images/00063.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: This is very slick.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here''s what the final `index.html` should look like:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: App install banners and you
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Being able to add to home screen is great functionality, but how will our user
    know that our application is installable, especially if they’ve never heard of
    PWAs?
  prefs: []
  type: TYPE_NORMAL
- en: 'Enter the **Web App Install Banner**. Previously, App Install Banners were
    a handy way to advertise your native app--see the following example from Flipboard:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../images/00065.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Now, however, Google is leading the charge on PWA install banners, prompting
    the user to add to home screen. See the following example from the Chrome Dev
    Summit site:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../images/00066.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: This banner has the advantages of making your users aware that your site is
    a PWA, and for those unfamiliar with installable web apps, providing an entry
    point into the world of PWAs.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here''s what it looks like on your home screen when you click on Add in the
    preceding screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../images/00067.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'However, like everything in this section, this is new technology. As of now,
    firm support only exists on Chrome on Android and Opera for Android. Furthermore,
    there are firm criteria for when the install banner will appear on both browsers:'
  prefs: []
  type: TYPE_NORMAL
- en: The app must have a web app manifest
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The app must be served over HTTPS
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The app must use a service worker
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The app must be visited twice, with at least five minutes between the visits
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We have covered the first three (Firebase apps are automatically deployed over
    HTTPS). The last criterion is to minimize annoyance on the part of the user.
  prefs: []
  type: TYPE_NORMAL
- en: Delaying the app install banner
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The following section is only applicable if you have an Android device to test
    on, with the latest version of Chrome or Opera for Android. You'll also need to
    set up Remote Debugging for your Android device, following the guide at [https://developers.google.com/web/tools/chrome-devtools/remote-debugging/](https://developers.google.com/web/tools/chrome-devtools/remote-debugging/).
  prefs: []
  type: TYPE_NORMAL
- en: One of the advantages of PWAs that we cited earlier is the fact that the user
    gets a chance to interact with your application before deciding whether to install.
    Web app install banners can possibly disrupt that process if they display too
    early (before the user has had a positive interaction with your application).
  prefs: []
  type: TYPE_NORMAL
- en: In this section, we'll find a way around that by delaying the web app install
    banner event until the user has a positive interaction with our application.
  prefs: []
  type: TYPE_NORMAL
- en: We will add an event listener to our `App.js`, to listen for when the banner
    display event is ready to fire. Then, we'll intercept that event, and save it
    for when the user sends a message.
  prefs: []
  type: TYPE_NORMAL
- en: Listening for the event
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Chrome emits the `beforeinstallprompt` event directly before it displays the
    web app install banner. That's the event we will listen to. Like our other Firebase
    event listeners, let's add this to our `App.js` `componentDidMount`.
  prefs: []
  type: TYPE_NORMAL
- en: 'We''ll create a method called `listenForInstallBanner`, and then call that
    method from within `componentDidMount`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'Within `listenForInstallBanner`, we will do two things:'
  prefs: []
  type: TYPE_NORMAL
- en: Register a listener for the event.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When that event fires, cancel it and store it for later.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Storing it for later means we trigger it whenever we please, AKA when the user
    sends their first message.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here''s what the code looks like:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'We''re storing our `deferredPrompt` on the `App` instance, so we can grab it
    later. Which we''ll do, instead our `handleSubmitMessage` method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: After we submit our message, we trigger our saved event. Then, we log out the
    user choice (whether or not they actually install the app, which we can also send
    to whatever analytics we choose to use in the future). Lastly, we delete the event.
  prefs: []
  type: TYPE_NORMAL
- en: Okay, let's test this!
  prefs: []
  type: TYPE_NORMAL
- en: Plug your Android device into your computer, and open up remote debugging on
    the DevTools. We'll have to deploy our app first, so hit `yarn deploy` and wait
    for it to finish. Then, open up the application on your device and type a message;
    you should see the app install banner pop up.
  prefs: []
  type: TYPE_NORMAL
- en: If it doesn’t appear, check your code, or go to the Application tab of DevTools
    and click on the Add to Home Screen button. This should trigger the `beforeinstallprompt`
    event.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Web app install banners are still a new technology, and the standards are in
    a state of flux. For the latest information, consult Google's page on web app
    install banners--[https://developers.google.com/web/fundamentals/engage-and-retain/app-install-banners/](https://developers.google.com/web/fundamentals/engage-and-retain/app-install-banners/).
    That said, I hope this chapter was helpful in illuminating the possibilities of
    the banners, and the current state of the technology.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we've made our app bigger and better, it's time to slim down, and focus
    purely on performance. See you in the next chapter!
  prefs: []
  type: TYPE_NORMAL
