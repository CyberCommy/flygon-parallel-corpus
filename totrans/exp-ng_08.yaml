- en: Template and Data Binding Syntax
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you will learn about Template Syntax and Data Binding provided
    by the Angular framework. Template Syntax and Data Binding mainly focus on the
    UI or view aspects of the application; hence, it is a very important and crucial
    functionality.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, you will learn about Template Syntax and the different ways
    to include a template in our components. You will also learn to create components,
    including child components, and use expressions and operators inside the view
    template. You will also focus on how to attach events, attributes, and implement
    directives inside the templates.
  prefs: []
  type: TYPE_NORMAL
- en: Data Binding is one of the key features of Angular and allows us to map data
    from the source to the view target and vice versa. You will learn about different
    ways of Data Binding.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, you will learn to include view template and define Data Bindings
    inside templates with the help of examples we will create while learning.
  prefs: []
  type: TYPE_NORMAL
- en: 'You will learn and implement the following in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Template Syntax
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Various ways to include Template Syntax
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Template expressions in Angular
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Data Binding syntax
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Angular Two-way Data Binding
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Property bindings in the template
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Attaching events to the view in templates
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Expressions and statements inside templates
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Directives inside templates
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Learning about Template Syntax
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The components view is defined using a template, which tells Angular how to
    render the look. Inside the template, we define how the data should appear and
    also attach events using Data Binding.
  prefs: []
  type: TYPE_NORMAL
- en: Most HTML tags can be used inside the Angular template. We can use and define
    user-defined custom directives.
  prefs: []
  type: TYPE_NORMAL
- en: 'The general syntax of defining a template for a component is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s analyze the preceding code snippet in detail:'
  prefs: []
  type: TYPE_NORMAL
- en: We defined a component, `MyTemplateComponent`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We defined the component view with `template`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Inside the template, we defined a `<h2>` tag.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We defined a `title` variable and assigned a value.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Using the `{{ }}` interpolation, we bound the variable to the template.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Run the app, and you should see the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/29e6ad6c-1d38-4d20-8513-c7682319f453.png)'
  prefs: []
  type: TYPE_IMG
- en: In the next section, you will learn in detail about the various ways to include
    templates and also about interpolation.
  prefs: []
  type: TYPE_NORMAL
- en: Various ways to include Template Syntax
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this section, you will learn about different ways to include templates in
    the component view. There are two ways to include Template Syntax in the component
    syntax:'
  prefs: []
  type: TYPE_NORMAL
- en: We can define the view template inside the `component` decorator. Using `template`,
    we can include the template inline in the component decorator.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We can also include the template using `templateURL`. Using `templateUrl`, we
    write the template elements in a separate file and provide the path of the template
    to the component.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`templateURL` is a much preferred way since it allows us to separate the code
    in a logical way to organize it more effectively.'
  prefs: []
  type: TYPE_NORMAL
- en: Using inline Template Syntax
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We discussed including templates in different ways in our component. Let's learn
    how to define our template inside the component.
  prefs: []
  type: TYPE_NORMAL
- en: 'The syntax for using templates inside the component decorator is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'The most important things to note in the preceding code snippet are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: We are defining the template inside the `@component` decorator.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The component `class` definition and template are defined in the same file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Using templateURL to include a template
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the preceding code snippet, we created the template and component class in
    the same file. However, when the complexity of the component class increases in
    both template elements and class definitions, it will be difficult to maintain
    it.
  prefs: []
  type: TYPE_NORMAL
- en: We need to separate the logical class and the view so that it's easy to maintain
    and understand. Now, let's take a look at another way of defining the view template
    for the component using `templateURL`.
  prefs: []
  type: TYPE_NORMAL
- en: 'The syntax of using `templateURL` for viewing is as follows; let''s create
    a file named `app-template.component.ts`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: There will be no visual difference if we use any of the aforementioned ways
    to use a template. It makes sense to create separate files for HTML, CSS, and
    the component class, as it allows us to organize the code better and ultimately
    helps to maintain the codebase when it increases.
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, you will learn features provided by the Angular framework
    for data and template binding.
  prefs: []
  type: TYPE_NORMAL
- en: Interpolation in templates
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Double curly braces `{{ }}` are an interpolation in Angular. They're a way to
    map the text between the braces to a component property. We have already used
    and implemented interpolation in various examples throughout the chapters.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the template we will write, the value is written inside double curly braces,
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s quickly create a simple example to understand the interpolation. In
    the `app.component.ts` file, let''s define a variable named `title`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, we need to display the value of `title` in the template. Update the `app.component.html`
    file, and add the following line of code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Now, try changing the value of `title` in the class; we will see the updated
    value reflecting in the template automatically. That's interpolation, one of the
    key features we love in Angular.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we know how to use interpolation, we will deal with how to add expressions
    inside the template in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Template expressions in Angular
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We can use expressions inside the template; expressions execute and result in
    a value.
  prefs: []
  type: TYPE_NORMAL
- en: Just like in JavaScript, we can use expression statements with the exception
    of using assignments, new and chaining operators.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s look at some examples of template expressions:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding code snippet we are doing arithmetic operations with the variable
    `tax`.
  prefs: []
  type: TYPE_NORMAL
- en: If you have used any programming languages, chances are that you will find this
    section a cake-walk. Just like in any other language, we can make use of arithmetic
    operators.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s quickly create an example. Update the **`app.component.html`** file,
    and add the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding code snippet, we used the expressions in the template. We added
    and did arithmetic operations with our `tax` variable.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the update `app.component.ts` file, add the following code snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: We are creating an `AppComponent` class and declaring two variables, `title`
    and `tax`. We are assigning initial values to `title` and `tax`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Run the application, and we should see the output of the preceding code snippet,
    as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/de8e8af2-e5a2-42cd-870e-c4f4a37cd48c.png)'
  prefs: []
  type: TYPE_IMG
- en: So far, you have learned about using templates in view, interpolations, and
    using expressions inside the template. Now, let's learn about attaching events
    and implementing directives inside the templates.
  prefs: []
  type: TYPE_NORMAL
- en: Attaching events to views in templates
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous sections, we covered how to define and include templates in
    our component along with interpolation and expressions inside the template.
  prefs: []
  type: TYPE_NORMAL
- en: In this section, you will learn to attach events to the elements in the template.
  prefs: []
  type: TYPE_NORMAL
- en: Events are regular JavaScript methods that are triggered based on user actions,
    such as `onclick` and `onmouseover`. Methods are a set of statements defined to
    execute a particular task.
  prefs: []
  type: TYPE_NORMAL
- en: 'The general syntax of attaching an event is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s analyze the preceding code in detail:'
  prefs: []
  type: TYPE_NORMAL
- en: We are creating a `button` in the template.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We are attaching a `click` event to the button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: With the `click` event, we are binding the `function_name()` method.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, let's update our `component` file with the preceding code and see it in
    action.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will first update our `app.component.html` file, and add the following code
    snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Some quick notes on the preceding code snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: We added `button` to our template.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We attached an event called `updateTax` to the button on the `click` event.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now, it''s time to update our `app.component.ts` file with the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s analyze the preceding code snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: We are defining and creating a component--`AppComponent`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We have already defined two variables, `title` and `tax`, and assigned some
    values to them.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We are defining and creating an `updateTax` method, which when called will update
    the `tax` variable.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The updated `tax` value will be displayed in the template.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now, run the app, and we should see the output as shown in the following screenshot;
    click on the Update Tax button, and you should see the data getting updated in
    the template:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/08491992-6727-4b69-ad4e-ab4913c1892f.png)'
  prefs: []
  type: TYPE_IMG
- en: Great! So, in this section, you learned to attach events in your template and
    also to define methods in our component class to update the properties of the
    component. In the next section, you will learn to implement directives inside
    templates.
  prefs: []
  type: TYPE_NORMAL
- en: Implementing directives inside templates
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We are making good progress in learning the Template Syntax. We discussed how
    to include Template Syntax, use interpolation in templates, and attach events.
  prefs: []
  type: TYPE_NORMAL
- en: Just like events, we can also implement directives and attributes inside the
    template. In this section, we will explain about implementing directives inside
    templates.
  prefs: []
  type: TYPE_NORMAL
- en: 'Take a look at the following code snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Does the preceding code look similar to the way used to define custom directives
    in an earlier version of Angular? That's correct. Custom directives are now called
    components in the Angular framework.
  prefs: []
  type: TYPE_NORMAL
- en: We can create and define custom directives or tags according to the requirements
    of our application.
  prefs: []
  type: TYPE_NORMAL
- en: There is no relationship between the directory structure and child component,
    but as a good practice always keep logical parent-child relationship components
    under one directory; this helps in better organizing the code.
  prefs: []
  type: TYPE_NORMAL
- en: We will use the component we created in the preceding section. We created a
    component--`data-binding.component.ts`. We will now create a new component, `list-products`,
    which we will be able to bind it to the `data-binding` component.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following code snippet to the `list-products.component.ts` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s analyze the preceding code:'
  prefs: []
  type: TYPE_NORMAL
- en: We have created a new component, that is, the `list-products` component.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the component definition, we mentioned `selector` as `list-products`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The `@Component` decorator provides the Angular metadata for the component.
    Using the CSS `selector`, we can display the output of the template or the view
    inside the `list-products` tags.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We can give and use any name for `selector`, but make sure that we use the same
    name in the parent component, calling it as well.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now that we have informed Angular that we need to place the output of the `list-products`
    component inside the custom tag `list-products`, we need to place the child component
    tag inside the parent component template.
  prefs: []
  type: TYPE_NORMAL
- en: 'We need to use the selector tag in order to identify the `list-products` component
    in the template `data-binding.component.html` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'We are all set. Now, run the app, and we should see the output of the preceding
    code and the child component being displayed along with the `data-binding.component.html`
    template view:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/75cb882e-f4ab-4b8d-a0af-24fd6299a8f5.png)'
  prefs: []
  type: TYPE_IMG
- en: Awesome! So, you now learned how to include child components in your templates.
    Any Angular application will rarely be complete without using any of these. We
    will continue to learn and build more examples in the next section, where you
    will learn how to use property binding inside templates.
  prefs: []
  type: TYPE_NORMAL
- en: Bindings in the template
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we will expand our example created in the preceding section.
    We will cover how to use property bindings in templates. Properties are attributes
    of the elements in the template, for example, class, ID, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: 'The general syntax of HTML attributes is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'The important points to note in the preceding code snippet are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: We are defining an `html` element using the `button` tag.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We are adding the `class` attribute to the `button` tag.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We are attaching an on `click` event calling a method, `updateTax` to the button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We have a `disabled` attribute; the button element will be displayed in the
    page and it will be `disabled` if the value of `state` is `texas`. if not, it
    will display an enabled button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Using property binding, we can dynamically change the attribute values of `disabled`;
    when the values are updated or changed in the component class, the view gets updated.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s update the `app.component.html` file and update it to add the attribute
    to the element in the template:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: Take a close look, and you will find that we have added the `disabled` attribute;
    based on the value of `state`, the button will either be enabled or disabled.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, in the `app.component.ts` file, let''s define a property variable named
    `state` and assign a value it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding code, we just defined a new variable named `state` and assigned
    a value to it. Based on the value of `state`--assigned or updated--the button
    will be either enabled or disabled.
  prefs: []
  type: TYPE_NORMAL
- en: 'Run the application, and we should see the output shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/212f0643-0885-4a3a-860d-ddbbdc314755.png)'
  prefs: []
  type: TYPE_IMG
- en: Amazing! You learned all about templates to be used in Angular components.
  prefs: []
  type: TYPE_NORMAL
- en: We discussed how to write Template Syntax, different ways to include Template
    Syntax, how to attach events, attach properties to the elements, and also how
    to implement directives in the templates.
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, you will learn about Data Binding--one of the most crucial
    and striking features of Angular, and one that is most commonly used with Template
    Syntax.
  prefs: []
  type: TYPE_NORMAL
- en: Angular Data Binding
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Angular provides a mechanism to share data between the same view and model easily.
    We can associate and assign a value in a class component and use it in the view.
    It provides many kinds of Data Binding. We will start by understanding the various
    Data Bindings available and then move on to create some examples.
  prefs: []
  type: TYPE_NORMAL
- en: 'Data Bindings can be grouped into three main categories:'
  prefs: []
  type: TYPE_NORMAL
- en: One-way Data Binding, that is, from data source to view.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: One-way Data Binding, that is, from view to data source.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Two-way Data Binding, that is, from view target to data source and from data
    source to view.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: One-way Data Binding - Data source to view
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, you will learn about One-way Data Binding from data source
    to view target. In the next section, you will learn about One-way Data Binding
    from template to data source.
  prefs: []
  type: TYPE_NORMAL
- en: One-way Data Binding in Angular refers to a data flow from data source to view.
    In other words, we can say that whenever values and data are updated, they reflects
    in the view target.
  prefs: []
  type: TYPE_NORMAL
- en: 'One-way Data Binding from data source to view target applies to the following
    HTML element attributes:'
  prefs: []
  type: TYPE_NORMAL
- en: '`interpolation`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`property`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`attribute`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`class`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`style`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Now that we know the attributes and elements that One-way Data Binding from
    data source to target applies to, let's learn how to use them in our code.
  prefs: []
  type: TYPE_NORMAL
- en: Let's take a look at general syntax to write One-way Data Binding from data
    source to view template.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s analyze the previously defined syntax in detail:'
  prefs: []
  type: TYPE_NORMAL
- en: '`interpolation` is a value written inside double curly braces as shown in the
    preceding code.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The text between the braces `{{ }}` is often the name of a component property.
    Angular replaces that name with the string value of the corresponding component
    property.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We can define One-way Data Binding for `attributes` and `properties` and by
    writing inside the square brackets `[]`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `value_to_display` and `expression` properties are defined in the component
    class.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Some developers also prefer to use canonical form by appending prefix to the
    attribute.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: Use the prefix bind with the property or attribute along with the element's
    definition.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now that we know the syntax for writing a One-way Data Binding, it''s time
    to write examples for this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s quickly analyze some of the key points in the preceding code snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: We are using interpolation--the value inside the double curly braces `{{ }}`--to
    display the value from the data source to the template. The property `title` will
    be set in the component model.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We are defining the `style` attribute `color` by binding the value dynamically
    to the variable defined in the component class `colorVal`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We are defining the `ngClass` attribute and, based on the condition, whichever
    property, `specialClass` or `specialClass2`, is set to true, the corresponding
    class will be assigned.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We are providing the image's `src` attribute value dynamically by binding the
    property `imageUrl` in the component class.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Let''s quickly define our variables in the component class `one-way.component.ts`
    file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding code snippet, we have defined our `colorVal`, `isStyleVisible`,
    and `imageUrl` variables.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, let''s run the preceding code, and you should see the output shown in
    the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/4fe82ab8-7a74-4de7-8d01-8c0127cb0912.png)'
  prefs: []
  type: TYPE_IMG
- en: If you note carefully, in all the preceding code snippets, we are binding the
    data only one-way, that is, from data source to view target only.
  prefs: []
  type: TYPE_NORMAL
- en: So, essentially, it's read-only data for your end user. In next section we will
    learn about One-way Data Binding from view template to the data source.
  prefs: []
  type: TYPE_NORMAL
- en: 'Consider the following hands-on exercise: Try creating more variables and mapping
    them into the views.'
  prefs: []
  type: TYPE_NORMAL
- en: One-way Data Binding - View template to data source
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In preceding section, we learnt about One-way Data Binding from data source
    to view template.
  prefs: []
  type: TYPE_NORMAL
- en: In this section we will learn about One-way Data Binding from view template
    to data source.
  prefs: []
  type: TYPE_NORMAL
- en: One-way Data Binding from view template to data source is implemented mainly
    for events.
  prefs: []
  type: TYPE_NORMAL
- en: 'The general syntax for creating a binding is given below:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: The binding from view to data source is mainly used for invoking methods or
    capturing event interactions.
  prefs: []
  type: TYPE_NORMAL
- en: Example of a one way binding from view template to data source is given below
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: We are attaching the `click` event and when the button is clicked, `updateTax`
    method will be called.
  prefs: []
  type: TYPE_NORMAL
- en: We learned about One-way Data Binding from data source to template as well as
    view template to data source.
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, you will learn about Two-way Data Binding, displaying the
    data properties as well as updating those properties when changes are made to
    the element's property.
  prefs: []
  type: TYPE_NORMAL
- en: Angular Two-way Data Binding
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Two-way Data Binding has to be one of the most important features in Angular.
    Two-way Data Binding helps express the input and output binding into a single
    notation using the `ngModel` directive.
  prefs: []
  type: TYPE_NORMAL
- en: Two-way Data Binding is a mechanism to map the data directly from model to view
    and vice versa. This mechanism allows us to keep data in sync between view and
    model, that is, from data source to view using `[]` and from view to data source
    using `()`.
  prefs: []
  type: TYPE_NORMAL
- en: In Angular, we achieve Two-way Data Binding using `ngModel`.
  prefs: []
  type: TYPE_NORMAL
- en: 'The general syntax of a Two-way Data Binding is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'In the preceding syntax, note the following:'
  prefs: []
  type: TYPE_NORMAL
- en: We are binding the element using `ngModel` written inside `[()]`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We have associated Two-way Data Binding for the `input` element
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Don't forget to import `FormsModule` from `@angular/forms` or else you will
    get errors. `ngModel` creates a `FormControl` instance from a domain model and
    binds it to a form control element.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, let''s create an example using `ngModel`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: We added a `div` element and, using Data Binding, we mapped the value of the
    input element using `ngModel`. Using `ngModel` helps track the value, user interaction,
    and validation status of the control and keeps the view synced with the model.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, when we start typing in the `input` element of type text, we see that
    what we type is copied to our `div` element as a `value`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/2f1461c0-df0c-41d9-8a42-bcc8262209d1.png)'
  prefs: []
  type: TYPE_IMG
- en: Great! We have made quite a bit of progress with respect to Data Binding and
    templates. With the all knowledge we have gained throughout this chapter, we can
    create beautifully elegant, yet fully powerful application interfaces.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Template Syntax and Data Binding are the skeleton and soul of Angular applications.
    We covered templates: how to include them in different ways and use expressions
    inside view templates. We then walked through templates by attaching events and
    attributes to them.'
  prefs: []
  type: TYPE_NORMAL
- en: We explored aspects of Data Binding in Angular applications and focused on how
    to implement Data Binding for values inside the template.
  prefs: []
  type: TYPE_NORMAL
- en: 'In Data Binding, we delved into its broad categories. We explored available
    ways of Data Bindings: One-way Data Binding and Two-way Data Binding.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Using Data Binding and templates together, we can almost create mock functional
    screens for our Angular applications: that''s the power of Data Binding and Template
    Syntax.'
  prefs: []
  type: TYPE_NORMAL
- en: So, go ahead and let your creativity fly! Good luck.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, you will learn about advanced forms in Angular, learn how
    to use and master reactive forms. We tackle the reactive part of reactive forms
    by emphasizing the relationship between your html models and your `NgModel` so
    every change on a given form is propagated to the model
  prefs: []
  type: TYPE_NORMAL
