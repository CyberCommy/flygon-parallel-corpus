- en: Implementing Advanced Topic Attacks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following recipes:'
  prefs: []
  type: TYPE_NORMAL
- en: Performing **XML External Entity** (**XXE**) attacks
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Working with **JSON Web Token** (**JWT**)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using Burp Collaborator to determine **Server-Side Request Forgery** (**SSRF**)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Testing **Cross-Origin Resource Sharing** (**CORS**)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Performing Java deserialization attacks
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter covers intermediate to advanced topics such as working with JWT,
    XXE, and Java deserialization attacks, and how to use Burp to assist with such
    assessments. With some advanced attacks, Burp plugins provide tremendous help
    in easing the task required by the tester.
  prefs: []
  type: TYPE_NORMAL
- en: Software tool requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In order to complete the recipes in this chapter, you will need the following:'
  prefs: []
  type: TYPE_NORMAL
- en: OWASP **Broken Web Applications** (**BWA**)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: OWASP Mutillidae link
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Burp Proxy Community or Professional ([https://portswigger.net/burp/](https://portswigger.net/burp/))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Performing XXE attacks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: XXE is a vulnerability that targets applications parsing XML. Attackers can
    manipulate the XML input with arbitrary commands and send those commands as external
    entity references within the XML structure. The XML is then executed by a weakly-configured
    parser, giving the attacker the requested resource.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Using the OWASP Mutillidae II XML validator page, determine whether the application
    is susceptible to XXE attacks.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Navigate to the XML External Entity Injection page, that is, through Others
    | XML External Entity Injection | XML Validator:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00375.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'While on the XML Validator page, perform the example XML that is provided on
    the page. Click on the Validate XML button:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00376.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Switch to Burp Proxy| HTTP history tab and look for the request you just submitted
    to validate the XML. Right-click and send the request to the repeater:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00377.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Note the value provided in the `xml` parameter:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00378.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Use Burp Proxy Interceptor to replace this XML parameter value with the following
    payload. This new payload will make a request to a file on the operating system
    that should be restricted from view, namely, the `/etc/passwd` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Since there are odd characters and spaces in the new XML message, let's type
    this payload into the Decoder section and URL-encode it before we paste it into
    the `xml` parameter.
  prefs: []
  type: TYPE_NORMAL
- en: 'Switch to the Decoder section, type or paste the new payload into the text
    area. Click the Encode as… button and select the URL option from the drop-down
    listing. Then, copy the URL-encoded payload using *Ctrl* + *C*. Make sure you
    copy all of the payload by scrolling to the right:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00379.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Switch to the Burp Proxy Intercept tab. Turn the interceptor on with the Intercept
    is on button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Return to the Firefox browser and reload the page. As the request is paused,
    replace the current value of the `xml` parameter with the new URL-encoded payload:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00380.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Click the Forward button. Turn interceptor off by toggling the button to Intercept
    is off.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Note that the returned XML now shows the contents of the `/etc/passwd` file!
    The XML parser granted us access to the `/etc/passwd` file on the operating system:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00381.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, the insecure XML parser receives the request within the XML
    for the `/etc/passwd` file residing on the server. Since there is no validation
    performed on the XML request due to a weakly-configured parser, the resource is
    freely provided to the attacker.
  prefs: []
  type: TYPE_NORMAL
- en: Working with JWT
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As more sites provide client API access, JWT are commonly used for authentication.
    These tokens hold identity and claims information tied to the resources the user
    is granted access to on the target site. Web-penetration testers need to read
    these tokens and determine their strength. Fortunately, there are some handy plugins
    that make working with JWT tokens inside of Burp much easier. We will learn about
    these plugins in this recipe.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we need to generate JWT tokens. Therefore, we will use the **OneLogin**
    software to assist with this task. In order to complete this recipe, browse to
    the OneLogin website: [https://www.onelogin.com/](https://www.onelogin.com/).
    Click the Developers link at the top and then click the GET A DEVELOPER ACCOUNT
    link ([https://www.onelogin.com/developer-signup](https://www.onelogin.com/developer-signup)).
  prefs: []
  type: TYPE_NORMAL
- en: After you sign up, you will be asked to verify your account and create a password.
    Please perform these account setup tasks prior to starting this recipe.
  prefs: []
  type: TYPE_NORMAL
- en: Using the OneLogin SSO account, we will use two Burp extensions to examine the
    JWT tokens assigned as authentication by the site.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Switch to Burp BApp Store and install two plugins—JSON Beautifier and JSON
    Web Tokens:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00382.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'In the Firefox browser, go to your OneLogin page. The URL will be specific
    to the developer account you created. Log in to the account using the credentials
    you established when you set up the account before beginning this recipe:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00383.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Switch to the Burp Proxy | HTTP history tab. Find the POST request with the
    URL `/access/auth`. Right-click and click the Send to Repeater option.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Your host value will be specific to the OneLogin account you set up:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00384.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Switch to the Repeater tab and notice that you have two additional tabs relating
    to the two extensions you installed:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00385.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Click the JSON Beautifier tab to view the JSON structure in a more readable
    manner:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00386.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Click the JSON Web Tokens tab to reveal a debugger very similar to the one
    available at [https://jwt.io.](https://jwt.io) This plugin allows you to read
    the claims content and manipulate the encryption algorithm for various brute-force
    tests. For example, in the following screenshot, notice how you can change the
    algorithm to **nOnE** in order to attempt to create a new JWT token to place into
    the request:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00387.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Two extensions, JSON Beautifier and JSON Web Tokens, help testers to work with
    JWT tokens in an easier way by providing debugger tools conveniently available
    with the Burp UI.
  prefs: []
  type: TYPE_NORMAL
- en: Using Burp Collaborator to determine SSRF
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: SSRF is a vulnerability that allows an attacker to force applications to make
    unauthorized requests on the attacker's behalf. These requests can be as simple
    as DNS queries or as maniacal as commands from an attacker-controlled server.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we will use Burp Collaborator to check open ports available
    for SSRF requests, and then use Intruder to determine whether  the application
    will perform DNS queries to the public Burp Collaborator server through an SSRF
    vulnerability.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Using the OWASP Mutillidae II DNS lookup page, let's determine whether the application
    has an SSRF vulnerability.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Switch to the Burp Project options | Misc tab. Note the Burp Collaborator Server
    section. You have options available for using a private Burp Collaborator server,
    which you would set up, or you may use the publicly internet-accessible one made
    available by PortSwigger. For this recipe, we will use the public one:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00388.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Check the box labeled Poll over unencrypted HTTP and click the Run health check…
    button:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00389.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: A pop-up box appears to test various protocols to see whether they will connect
    to the public Burp Collaborator server available on the internet.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Check the messages for each protocol to see which are successful. Click the
    Close  button when you are done:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00390.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'From the top-level menu, select Burp | Burp Collaborator client:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00391.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'A pop-up box appears. In the section labeled Generate Collaborator payloads,
    change the 1 to 10:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00392.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Click the Copy to clipboard button.  Leave all other defaults as they are. Do
    not close the Collaborator client window. If you close the window, you will lose
    the client session:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00393.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Return to the Firefox browser and navigate to OWASP 2013 | A1 – Injection (Other)
    | HTML Injection (HTMLi) | DNS Lookup:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00394.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'On the DNS Lookup page, type an IP address and click the Lookup DNS button:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00395.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Switch to the Burp Proxy | HTTP history tab and find the request you just created
    on the DNS Lookup page. Right-click and select the Send to Intruder option:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00396.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Switch to the Burp Intruder | Positions tab. Clear all suggested payload markers
    and highlight the IP address, click the *Add §* button to place payload markers
    around the IP address value of the `target_host` parameter:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00397.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Switch to the Burp Intruder | Payloads tab and paste the 10 payloads you copied
    to the clipboard from the Burp Collaborator client into the Payload Options [Simple
    list] textbox using the Paste button:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00398.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Make sure you uncheck the Payload Encoding checkbox.
  prefs: []
  type: TYPE_NORMAL
- en: 'Click the Start attack button. The attack results table will pop up as your
    payloads are processing. Allow the attacks to complete. Note the `burpcollaborator.net`
    URL is placed in the payload marker position of the `target_host` parameter:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00399.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Return to the Burp Collaborator client and click the Poll now button to see
    whether any SSRF attacks were successful over any of the protocols. If any requests
    leaked outside of the network, those requests will appear in this table along
    with the specific protocol used. If any requests are shown in this table, you
    will need to report the SSRF vulnerability as a finding. As you can see from the
    results shown here, numerous DNS queries were made by the application on behalf
    of the attacker-provided payloads:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00400.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Network leaks and overly-generous application parameters can allow an attacker
    to have an application make unauthorized calls via various protocols on the attacker's
    behalf. In the case of this recipe, the application allows DNS queries to leak
    outside of the local machine and connect to the internet.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: For more information on SSRF attacks, see this PortSwigger blog entry at [https://portswigger.net/blog/cracking-the-lens-targeting-https-hidden-attack-surface](https://portswigger.net/blog/cracking-the-lens-targeting-https-hidden-attack-surface).
  prefs: []
  type: TYPE_NORMAL
- en: Testing CORS
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: An application that implements HTML5 CORS means the application will share browser
    information with another domain that resides at a different origin. By design,
    browser protections prevent external scripts from accessing information in the
    browser. This protection is known as **Same-Origin Policy** (**SOP**). However,
    CORS is a means of bypassing SOP, permissively. If an application wants to share
    browser information with a completely different domain, it may do so with properly-configured
    CORS headers.
  prefs: []
  type: TYPE_NORMAL
- en: Web-penetration testers must ensure applications that handle AJAX calls (for
    example, HTML5) do not have misconfigured CORS headers. Let's see how Burp can
    help us identify such misconfigurations.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Using the OWASP Mutillidae II AJAX version of the Pen Test Tool Lookup page,
    determine whether the application contains misconfigured CORS headers.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Navigate to HTML5 | Asynchronous JavaScript and XML | Pen Test Tool Lookup
    (AJAX):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00401.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Select a tool from the listing and click the Lookup Tool button:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00402.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Switch to the Burp Proxy | HTTP history tab and find the request you just made
    from the AJAX Version Pen Test Tool Lookup page. Flip to the Response tab:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00403.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Let''s examine the headers more closely by selecting the Headers tab of the
    same Response tab. Though this is an AJAX request, the call is local to the application
    instead of being made to a cross-origin domain. Thus, no CORS headers are present
    since it is not required. However, if a call to an external domain were made (for
    example, Google APIs), then CORS headers would be required:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00404.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'In an AJAX request, there is a call out to an external URL (for example, a
    cross-domain). In order to permit the external domain to receive DOM information
    from the user''s browser session, CORS headers must be present, including `Access-Control-Allow-Origin:
    <name of cross domain>`.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the event the CORS header does not specify the name of the external domain
    and, instead, uses a wild card (`*`), this is a vulnerability. Web pentesters
    should include this in their report as a misconfigured CORS headers vulnerability.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Since the AJAX call used in this recipe originated from the same place, there
    is no need for CORS headers. However, in many cases, AJAX calls are made to external
    domains and require explicit permission through the HTTP response `Access-Control-Allow-Origin`
    header.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: For more information on misconfigured CORS headers, see this PortSwigger blog
    entry at [https://portswigger.net/blog/exploiting-cors-misconfigurations-for-bitcoins-and-bounties](https://portswigger.net/blog/exploiting-cors-misconfigurations-for-bitcoins-and-bounties).
  prefs: []
  type: TYPE_NORMAL
- en: Performing Java deserialization attacks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Serialization** is a mechanism provided in various languages that allows
    the saving of an object''s state in binary format. It is used for speed and obfuscation.
    The turning of an object back from binary into an object is deserialization. In
    cases where user input is used within an object and that object is later serialized,
    it creates an attack vector for arbitrary code-injection and possible remote code-execution.
    We will look at a Burp extension that will assist web-penetration testers in assessing
    applications for Java Deserialization vulnerabilities.'
  prefs: []
  type: TYPE_NORMAL
- en: Getting Ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Switch to Burp BApp Store and install the Java Serial Killer plugin:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00405.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: In order to create a scenario using a serialized object, we will take a standard
    request and add a serialized object to it for the purposes of demonstrating how
    you can use the extension to add attacker-controlled commands to serialized objects.
  prefs: []
  type: TYPE_NORMAL
- en: Note the new tab added to your Burp UI menu at the top dedicated to the newly-installed
    plugin.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Navigate to the Mutillidae homepage.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Switch to the Burp Proxy| HTTP history tab and look for the request you just
    created by browsing to the Mutillidae homepage:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00406.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Unfortunately, there aren't any serialized objects in Mutillidae so we will
    have to create one ourselves.
  prefs: []
  type: TYPE_NORMAL
- en: 'Switch to the Decoder tab and copy the following snippet of a serialized object:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Paste the hexadecimal numbers into the Decoder tab, click the Encode as...
    button, and select base 64:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00407.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Copy the base-64 encoded value from the Decoder tab and paste it into the bottom
    of the request you sent to the Java Serial Killer tab. Use *Ctrl* + *C* to copy
    out of Decoder and *Ctrl* + *V* to paste it anywhere in the white space area of
    the request:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00408.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Within the Java Serial Killer tab, pick a Java library from the drop-down list.
    For this recipe, we will use CommonsCollections1\. Check the Base64 Encode box.
    Add a command to embed into the serialized object. In this example, we will use
    the nslookup 127.0.0.1 command. Highlight the payload and click the Serialize
    button:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00409.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'After clicking the Serialize button, notice the payload has changed and now
    contains your arbitrary command and is base-64 encoded:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00410.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Click the Go button within the Java Serial Killer tab to execute the payload.
    Even though you may receive an error in the response, ideally, you would have
    a listener, such as `tcpdump`, listening for any DNS lookups on port `53`. From
    the listener, you would see the DNS query to the IP address you specified in the
    `nslookup` command.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In cases where application code receives user input directly into an object
    without performing sanitization on such input, an attacker has the opportunity
    to provide arbitrary commands. The input is then serialized and run on the operating
    system where the application resides, creating a possible attack vector for remote
    code execution.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Since this recipe scenario is a bit contrived, you may not receive a response
    on your network listener for the `nslookup` command. Try the recipe again after
    downloading a vulnerable version of an application with known Java deserialization
    vulnerabilities (that is, Jenkins, JBoss).  Reuse the same steps shown here, only
    change the target application.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'For more information about real-world Java deserialization attacks, check out
    these links:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Symantec**: [https://www.symantec.com/security_response/attacksignatures/detail.jsp?asid=30326](https://www.symantec.com/security_response/attacksignatures/detail.jsp?asid=30326)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Foxglove Security**: [https://foxglovesecurity.com/2015/11/06/what-do-weblogic-websphere-jboss-jenkins-opennms-and-your-application-have-in-common-this-vulnerability/](https://foxglovesecurity.com/2015/11/06/what-do-weblogic-websphere-jboss-jenkins-opennms-and-your-application-have-in-common-this-vulnerability/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: To read more about this Burp plugin, check out [https://blog.netspi.com/java-deserialization-attacks-burp/](https://blog.netspi.com/java-deserialization-attacks-burp/)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
