- en: Chapter 1.  Writing Styles for Rapidly Changing, Long-lived Projects
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This isn't actually a book about writing CSS, as in the stuff inside the curly
    braces. It's a book about the organising and architecture of CSS; the parts outside
    the braces. It's the considerations that can be happily ignored on smaller projects
    but actually become the most difficult part of writing CSS in larger projects.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
- en: Terms like *CSS at scale*, or *Large-scale CSS* can seem quite nebulous. I'll
    try and clarify.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
- en: 'When people talk about *large scale CSS* or *writing CSS at scale* there can
    be a few possible metrics that relate to the *large* or *big* part of the description:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
- en: It might be CSS that simply has a large file size. There's a lot of CSS output
    and so making changes to that codebase can be difficult, as there is so much of
    the code to consider.
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The CSS could be said to be *large* due to the complexity of the user interface
    that is being built with it. The overall file size may be smaller than the first
    situation but there may be a great many pieces of user interface that's codified
    in those styles. Considering how to effect changes across all of those visuals
    may be problematic.
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It might be *large CSS* simply due to the number of developers that have, are,
    and will be likely to touch and change the CSS codebase.
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Or, it can be all the above.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
- en: Defining the problem
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Enduring CSS was born from my own need to define a rational approach to writing
    CSS on large scale web applications.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
- en: The definition of what makes something a *web application* as opposed to merely
    a *web page* can be divisive so let's put that aside for now. Let's simply consider
    the scenario in which a new approach to writing CSS was needed.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
- en: Consider an interface that was, by necessity, densely populated with visual
    components; sliders, buttons, input fields etc.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
- en: In addition, consider that this interface was (and is) constantly evolving and
    needed to be changed rapidly. Furthermore, any changes might be made by any number
    of different style sheet authors.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
- en: Without a clearly defined CSS writing methodology, through the many iterations,
    the CSS was always out of hand. The style sheets were in a perpetual state of
    entropy as a result of mixed approaches, different levels of technical understanding
    between authors and code documentation that varied greatly in quality.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
- en: So the result was CSS that was difficult to iterate upon, hard to reason about
    and nobody was ever quite sure where redundancy lay. Worse still, style sheet
    authors lacked the confidence to remove code for fear of inadvertently effecting
    other parts of the application.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
- en: If you've ever inherited or worked in a team on a large CSS codebase, I'm sure
    some of what I'm describing will sound familiar.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
- en: 'Therefore, at the outset of my journey, I defined some basic needs. More simply,
    these were the problems that any new CSS authoring approach had to solve. Here
    is the list of those needs:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
- en: To allow the easy maintenance of a large CSS codebase over time
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: To allow portions of CSS code to be removed from the codebase without effecting
    the remaining styles
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: To make it possible to rapidly iterate on any new designs
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Changing the properties and values that applied to one visual element should
    not unintentionally effect others
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Any solution should require minimal tooling and workflow changes to implement
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Where possible, W3C standards such as ARIA should be used to communicate state
    change within the user interface
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In the next chapter we are going to look more specifically at these problems.
    However, first, an important cautionary note.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
- en: Solve your own problems
  id: totrans-24
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'I believe in *Pin Cing Do*, which translates roughly as the *The way of pragmatic
    coding* ([https://benfrain.com/be-better-front-end-developer-way-of-pragmatic-coding/](https://benfrain.com/be-better-front-end-developer-way-of-pragmatic-coding/)).
    This means solving the problems you actually have. Therefore, I''ll state something
    up front that may be obvious to some:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
- en: 'It may be that the problems I had were not the problems you have. As such,
    you should temper the advice and approach offered herein accordingly. Alternatively,
    consider that your needs may be better addressed by different approaches and methodologies.
    I''m not going to try and convince you that ECSS is necessarily the best solution
    in all situations. For example:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 也许我遇到的问题并不是你所面临的问题。因此，你应该相应地调整所提供的建议和方法。或者，考虑到你的需求可能更适合不同的方法和方法论。我不会试图说服你，ECSS在所有情况下都是最佳解决方案。例如：
- en: ECSS won't give you the smallest possible CSS footprint (consider *Atomic CSS*
    ([http://acss.io/](http://acss.io/)) for that).
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: ECSS不会给你最小可能的CSS占用空间（考虑*原子CSS*（[http://acss.io/](http://acss.io/)））。
- en: It isn't widely used and documented (consider *BEM* ([https://en.bem.info/](https://en.bem.info/))
    if ubiquity is a major concern).
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它并不被广泛使用和记录（如果普遍性是一个主要问题，考虑*BEM*（[https://en.bem.info/](https://en.bem.info/)））。
- en: ECSS does not abstract styles and allow styling of elements from a bunch of
    specific utility classes. You should look at OOCSS and read the writing of its
    many advocates for that.
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: ECSS不会抽象样式，允许使用一堆特定的实用类来为元素添加样式。你应该看看OOCSS，并阅读其许多倡导者的著作。
- en: 'OK, public service announcement out of the way. Let''s head on to the next
    chapter. This is where we''ll look at the principle problems of scaling and architecting
    CSS for large scale projects: specificity, the cascade, isolation and selectors
    tied to structural elements.'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，公共服务公告已经发布。让我们继续下一章。这是我们将研究大型项目的CSS扩展和架构的主要问题：特异性、级联、隔离和与结构元素相关的选择器。
