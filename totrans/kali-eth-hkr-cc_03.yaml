- en: Vulnerability Assessment
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following recipes:'
  prefs: []
  type: TYPE_NORMAL
- en: Using the infamous Burp
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Exploiting WSDLs with Wsdler
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using Intruder
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Web app pentest with Vega
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Exploring SearchSploit
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Exploiting routers with RouterSploit
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using Metasploit
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Automating Metasploit
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Writing a custom resource script
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Databases in Metasploit
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous chapters, we covered various recipes to collect information
    about our target. Now, once we have all that data, we need to start hunting for
    vulnerabilities. To become a good pentester, we need to make sure no small details
    are overlooked.
  prefs: []
  type: TYPE_NORMAL
- en: Using the infamous Burp
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Burp has been around for years now; it is a collection of multiple tools built
    in Java by PortSwigger web security. It has various products, such as Decoder,
    Proxy, Scanner, Intruder, Repeater, and so on. Burp features an Extender, which
    allows a user to load different extensions that can be used to make pentesting
    even more efficient! You will learn about some of them in the upcoming recipes.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s take a look at how we can use Burp effectively:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Kali already has a free version of Burp, but we will need a full version to
    fully use its features. So, we open up Burp:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/6bf67c4c-eb69-4f39-8bc5-333e104d5d5f.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Click on Start Burp and we will see the Burp load up:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/881391ce-4318-44cc-b771-bb20cb3a3b99.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Before we start hunting for bugs, we first install some extensions that may
    come in handy. Select BApp Store from the Extender menu:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/56de3da9-f7fd-426b-b191-3188d1cc0b62.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We will see a list of extensions. Some of the extensions we will have to install
    are as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: J2EEScan
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Wsdler
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Java Deserialization Scanner
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: HeartBleed
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Click on Install after selecting each of these extensions.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Once the extensions are all set, we prepare for scanning. We fire up a browser
    and go to its preferences:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/f088c533-6da8-4c7b-979f-28ad3e567ed3.png)'
  prefs: []
  type: TYPE_IMG
- en: 'In Network settings, we add our HTTP Proxy IP and Port:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/ad3ce255-442e-41c4-ac44-daee68e5ac46.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We can verify this with the Burp''s Options tab under the Proxy menu:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/0eadca98-90a7-4d1b-80e1-4a330497aad0.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Click on Intercept is on to start intercepting the requests:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/908cb3b6-f9b7-48d6-9dc6-c035a410a276.png)'
  prefs: []
  type: TYPE_IMG
- en: Now we browse the website we need to scan.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once all requests are captured, we can simply go to Target and select our domain.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'To perform a scan, we can select individual requests and send them for an active
    scan:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/4f18b48c-ab13-4ad2-924d-fd4a832c2a57.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Or, we can select the whole domain to send for an active scan:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/7b894203-9fc2-4916-a035-0b43f5533e88.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Once we have sent the requests to the Scanner, we will go to the Scanner tab
    and choose Options. Here, we can actually tell the scanner what exactly we want
    it to look for in our application:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/0c0c7984-3605-491a-99ad-2ef2e5461d70.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We can see the results of our scan in the Scan queue tab:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/3b2e1bd4-a5ca-466a-8641-92abb9e7983f.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The Scan queue tab can be seen in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/ea2ad651-5969-474e-b98e-b247da52af27.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The following screenshot shows the results of the Scan queue tab in more detail:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/a8c06bbe-5d51-40a3-b5f9-2f9bc4cff143.png)'
  prefs: []
  type: TYPE_IMG
- en: While we are using only a few extensions here, you can view the whole list and
    choose your own extensions too. Extensions are easy to set up.
  prefs: []
  type: TYPE_NORMAL
- en: Exploiting WSDLs with Wsdler
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Web Services Description Language** (**WSDL**) is an XML-based language used
    to describe the functionality offered by a web service. Often while executing
    a pentest project, we may find a WSDL file out in the open, unauthenticated. In
    this recipe, we will look at how we can benefit from WSDL.'
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We intercept the request of WSDL in Burp:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Right-click on the request and select Parse WSDL:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/7d94e544-5fd8-4c3b-b84f-d65e4537647b.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Switch to the Wsdler tab, and we will see all the service calls. We can see
    the complete request by clicking on any one of them:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/4f434c5f-9019-454b-afe9-9e6ed8e47d78.png)'
  prefs: []
  type: TYPE_IMG
- en: 'To be able to play around with it, we will need to send it to the Repeater:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/2dc82b0f-2bd7-452e-b24f-fd1f8d47d489.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We right-click and select Send to Repeater:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/de63411d-954c-4652-a657-0f657911650f.png)'
  prefs: []
  type: TYPE_IMG
- en: In our case, we can see that putting a single quote throws up an error. And
    voila! We have an SQL injection possibility!
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/b106fb9d-d181-431a-b43a-41bad8c5c726.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The following screenshot shows the SQL injection:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/4b62972b-ff6e-47b5-9118-94cbae4919d7.png)'
  prefs: []
  type: TYPE_IMG
- en: You will learn more about exploiting SQL in the later chapters of the book.
  prefs: []
  type: TYPE_NORMAL
- en: Using Intruder
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Intruder is a great tool which allows us to perform different types of attacks
    that can be used to find all kinds of vulnerabilities. Some of the most common
    attacks that can be performed with Intruder are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Bruteforce
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fuzzing
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Enumeration
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Application layer DoS
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We start off picking up a request from our captured requests:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Right-click on the request and select Send to Intruder:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/5408a3db-b6f0-42ab-a8fd-419cd4a25254.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Switch to the Intruder tab. We need to specify a payload position, and we can
    do that by selecting the place we want or selecting the payload and clicking on
    the Add § button:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/a5dd2684-8d7a-4065-8c23-9119be59390d.png)'
  prefs: []
  type: TYPE_IMG
- en: 'In our case, since we are performing a login brute force, we will use the attack
    type Pitchfork:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/3085617a-88a0-46ee-9733-a433c0a6f8c3.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Next, we switch to the Payloads tab. This is where we will enter our payloads:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/28531766-4ed7-4078-b317-c4a345c5d6dc.png)'
  prefs: []
  type: TYPE_IMG
- en: We choose set 1, and as we are bruteforcing, we can choose a simple list as
    the Payload type.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the Payload options, we specify the list of words we want the app to be
    tested against. We can either enter them manually, or we can choose a pre-built
    list:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/924c877b-729e-46d0-8292-c6b5a6d608c0.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now we choose set 2 and again specify a list of passwords we want the tool
    to try:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/c0a732d6-084b-4b88-85f3-203de8f3e2bb.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Burp allows us to customize the attack with the option of configuring stuff
    such as the Number of threads, choosing Redirections options, and even a Grep
    - Match in the Options tab:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/b2c713a0-b51e-4bbb-928c-8a7ac0832f43.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We click on Start attack:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/ac6e145b-78c9-474a-8eca-b7f95fa3352a.png)'
  prefs: []
  type: TYPE_IMG
- en: A new window will pop up, showing all the results of the attack performed.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Here, we have used only one type of attack mode (Pitchfork). More can be learned
    about the different types of attack modes for Intruder at [https://nitstorm.github.io/blog/burp-suite-intruder-attack-types/](https://nitstorm.github.io/blog/burp-suite-intruder-attack-types/).
  prefs: []
  type: TYPE_NORMAL
- en: Web app pentest with Vega
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Vega is an open source web app pentesting tool built in to Java. It has a JavaScript-based
    API, which makes it even more powerful and flexible. Vega is pretty easy to use
    in the following recipe, and you will learn how to perform a scan with it.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Some Kali versions do not come with Vega installed, but it can be installed
    using the command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Vega is inbuilt in Kali and can be started using this command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding command opens up the Vega tool:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/dd0ff0c4-1db1-4e5c-adf6-c57ca45dbf31.png)'
  prefs: []
  type: TYPE_IMG
- en: There are two ways to start a scan in Vega—by choosing either the scanner mode
    or the proxy mode. We look at the scanner mode here.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'We choose the Start New Scan options from the Scan menu:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/3efd37ca-7e6e-469a-b239-55630cc190f7.png)'
  prefs: []
  type: TYPE_IMG
- en: 'In the window, we enter the website URL and click on Next:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/ebd88c24-7d30-4b3a-969f-552b98a805ea.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Then, we can choose the modules we want to run:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/f9230493-ffa3-45f8-a5de-a2df2afbc070.png)'
  prefs: []
  type: TYPE_IMG
- en: 'In this step, we can enter the cookies:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/a47506c5-a4ab-44cc-bfca-9616bcf37933.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Next, we specify whether we want to exclude any parameters and then we click
    on Finish:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/c61afa2f-d25d-4de9-8008-50a7ebd4466f.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We can see the results and vulnerabilities in the left-hand side pane:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/5c6ae148-0784-4aa1-801e-1c2dcad3eec1.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Clicking on an alert shows us the details:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/19eb884e-162a-4216-bded-2ba3962e2b34.png)'
  prefs: []
  type: TYPE_IMG
- en: Similar to Burp, Vega also has proxy feature, where we can intercept and analyze
    the requests manually too!
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'We can edit and replay the requests to perform a manual check:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/315fef04-154f-49c8-b465-d349170c1841.png)'
  prefs: []
  type: TYPE_IMG
- en: Exploring SearchSploit
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: SearchSploit is a command-line tool that allows us to search and browse all
    the exploits available at `exploitdb`.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To view help, we type the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'The following screenshot shows the output of the preceding command:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/ca6b78a7-aa82-4b0d-bc64-d2c659baa498.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We can perform a search by simply entering the keyword, and if want to copy
    the exploit into our working directory, we use this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'The following screenshot is an example of the preceding command:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/aae516a3-7de5-42b4-ad58-64f0f165e9c2.png)'
  prefs: []
  type: TYPE_IMG
- en: Exploiting routers with RouterSploit
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'RouterSploit is a router exploitation framework that is designed especially
    for embedded devices. It consists of three main modules:'
  prefs: []
  type: TYPE_NORMAL
- en: '`exploits`: This contains a list of all the publically available exploits'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`creds`: This is used for testing logins for different devices'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`scanners`: This is used for checking a particular exploit against a particular
    device'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Before we begin, we will have to install RouterSploit in Kali; unfortunately,
    it does not come with the official installation of the OS. RouterSploit installation
    is very simple, just like we installed some tools in the beginning of the book.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We use the following command to clone the GitHub repository:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'We go to the directory using the `cd routersploit` command and run the file
    as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'The following screenshot shows the output of *step 1*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/3f7fefa3-8c45-4573-b70d-c251b6cca0ee.png)'
  prefs: []
  type: TYPE_IMG
- en: 'To run an exploit against a router, we simply type this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'The following screenshot shows an example of the preceding command:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/dc034ba9-22c5-46ff-811d-e8f167bd9838.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now we see the options that are available for the exploit we chose. We use
    the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'The following screenshot shows the output of the preceding command:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/ac6a4589-24be-407d-a1fb-a66a15d7f9e1.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We set the target with the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'The following screenshot shows the output of the preceding command:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/79807c37-6bc6-45a9-9f7f-e88b5b280159.png)'
  prefs: []
  type: TYPE_IMG
- en: 'To exploit, we simply type `exploit` or `run`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/4b14af80-182d-4e6c-b576-77cda8d9544b.png)'
  prefs: []
  type: TYPE_IMG
- en: Using the scanners command
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The following steps demonstrate the use of `scanners`:'
  prefs: []
  type: TYPE_NORMAL
- en: 'To scan a Cisco router, we use the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'We now check for other options:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'The following screenshot shows the output of the preceding command:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/d3d83d46-d35b-4783-a65b-68a4cffd3872.png)'
  prefs: []
  type: TYPE_IMG
- en: 'To run a scan against a target, we first set the target:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'The following screenshot shows the output of the preceding command:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/a4e40abe-76c7-4260-b735-d6ddf5212e13.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now we run it, and it will show all the exploits that the router is vulnerable
    to:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/7e46083b-be3e-4932-be13-71b3a3f05aa6.png)'
  prefs: []
  type: TYPE_IMG
- en: Using creds
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This can be used to test default password combinations on the services via
    the dictionary attack:'
  prefs: []
  type: TYPE_NORMAL
- en: 'We use the `creds` command to run the dictionary attack on various services:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'The following screenshot shows the output of the preceding command:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/fe7dc234-f3e6-42b5-afea-4cfb6953c4fb.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Next, we look at the options:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'The following screenshot shows the output of the preceding command:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/5cfd579c-e373-44be-a295-bbc829969bda.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now we set the target IP:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: We let it run, and it will show us any login it finds.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/88cc6d26-eb66-4748-a271-2e05757c2ed3.png)'
  prefs: []
  type: TYPE_IMG
- en: Using Metasploit
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Metasploit is the most widely used open source tool for pentesting. It was first
    developed by HD Moore in 2001 in Perl; later, it was completely rewritten in Ruby
    and then it was acquired by Rapid7.
  prefs: []
  type: TYPE_NORMAL
- en: Metasploit contains a collection of exploits, payloads, and encoders, which
    can be used to identify and exploit vulnerabilities during a pentest project.
    In this chapter, we will cover a few recipes that will enable the use of the **Metasploit
    Framework** (**MSF**) more efficiently.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The following steps demonstrate the use of MSF:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Start the MSF by typing the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'The following screenshot shows the output of the preceding command:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/5f9ac818-4f38-4c8d-b717-084f59b1e80e.png)'
  prefs: []
  type: TYPE_IMG
- en: 'To search for an exploit, we type this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'The following screenshot shows the output of the preceding command:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/f4b5869b-e3cb-40ff-bf45-f6c6b6def95e.png)'
  prefs: []
  type: TYPE_IMG
- en: 'To use an exploit, we type this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'The following screenshot shows the output of the preceding command:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/a470cc8f-a78a-45b8-a55c-673832a22eef.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Next, we look at the options by typing the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: Here, we will need to set the payload, target IP, localhost, and port we want
    for the back connection.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'We set the target using the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'We set the payload with this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, we set the `lhost` and `lport` in which we want the connection:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'Now we run the exploit command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'Once it''s successfully exploited, we will look at a `meterpreter` session:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/1d04530a-772f-4990-b211-bfaf55a3e5d7.png)'
  prefs: []
  type: TYPE_IMG
- en: Although we used only Windows `reverse_tcp` here, Metasploit has a lot of other
    payloads depending on the backend OS or web application used. A complete list
    of payloads can be found at [https://www.offensive-security.com/metasploit-unleashed/msfpayload/](https://www.offensive-security.com/metasploit-unleashed/msfpayload/).
  prefs: []
  type: TYPE_NORMAL
- en: Automating Metasploit
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Metasploit supports automation in different ways. One such way we will cover
    here is resource script.
  prefs: []
  type: TYPE_NORMAL
- en: 'A **resource script** is basically a set of commands that run automatically
    when a script is loaded. Metasploit already contains a set of prebuilt scripts
    that prove to be most useful in a corporate pentesting environment. The complete
    list of scripts available can be seen in the `/usr/share/metasploit-framework/scripts/resource`
    directory:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/e679e4ce-09df-4c2e-9d1f-8b10715d156f.png)'
  prefs: []
  type: TYPE_IMG
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The following steps demonstrate the automation of Metasploit:'
  prefs: []
  type: TYPE_NORMAL
- en: 'We start Metasploit using the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding command''s output is shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/7a93f94e-349d-4db7-8a4e-c8c15d21aa23.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Some scripts require `RHOSTS` to be set globally, so we set `RHOSTS` using
    the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding command''s output is shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/fb6463b9-936d-429a-8bad-06e8dbb4f965.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now we run the script using the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'This script will do a basic host discovery scan on the subnet provided:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/c1249d0f-a3d2-474f-bf38-51672ab1938a.png)'
  prefs: []
  type: TYPE_IMG
- en: Writing a custom resource script
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the following recipe, we will look at how to write a basic script.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Follow the given steps for writing a basic script:'
  prefs: []
  type: TYPE_NORMAL
- en: We open up any editor—`nano`, `leafpad`, and so on.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Here, we type all the commands we would want MSF to execute:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'We save the script with a `.rc` extension:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/e727ff55-006e-444e-b02a-0593fef1e1d6.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now we start `msfconsole` and type the command to automatically exploit the
    machine:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/af6731d6-1700-4a87-bb00-b9390cc6effd.png)'
  prefs: []
  type: TYPE_IMG
- en: A resource script is just one way of automating Metasploit; you can learn about
    other ways of automating Metasploit in this article at [https://community.rapid7.com/community/metasploit/blog/2011/12/08/six-ways-to-automate-metasploit](https://community.rapid7.com/community/metasploit/blog/2011/12/08/six-ways-to-automate-metasploit).
  prefs: []
  type: TYPE_NORMAL
- en: Databases in Metasploit
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In Kali Linux, we will have to set up a database before we use the database
    functionality.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The following steps demonstrate the setting up of a database:'
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we start the `postgresql` server using the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'The following screenshot shows the output of the preceding command:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/75cdedfd-4341-4541-b9ac-2938b9a7a2bf.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Then, we create the database and initialize it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'Once this is done, we load `msfconsole`. Now we can create and manage workspaces
    in Metasploit. A workspace can be considered a space where we can save all out
    Metasploit data with categorizations. To set up a new workspace, we use the following
    command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'The following screenshot shows the output of the preceding command:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/438548c2-354b-4659-ab1f-82fdc7c75ade.png)'
  prefs: []
  type: TYPE_IMG
- en: 'To see all the commands related to the workspace, we can execute this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: Now that we have our database and workspace set up, we can use various commands
    to interact with the database.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'To import an existing Nmap scan into our database, we use the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'The following screenshot shows the output of the preceding command:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/4478c309-75d2-4616-8dc6-fc6c63fd4abf.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Once the import is complete, we can view the hosts using the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'The following screenshot shows the output of the preceding command:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/266e7cd8-0819-4edc-a9a0-323bc2b6477c.png)'
  prefs: []
  type: TYPE_IMG
- en: 'To view only the IP address and OS type, we use the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'The following screenshot shows the output of the preceding command:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/f1ba6382-bac9-4b40-aa78-761d3cae2dd5.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now suppose we want to perform a TCP auxiliary scan. We can set all these hosts
    as `RHOSTS` for an auxiliary too. We do this using the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: 'The following screenshot shows the output of the preceding command:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/4020a77c-f88c-445e-b1f4-d640e1bb0926.png)'
  prefs: []
  type: TYPE_IMG
- en: As the `RHOSTS` have been set, they can be used across the Metasploit for any
    module required.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Let''s look at one more example where our imported Nmap scan already has all
    the data we need. We can use the following command to list all the services in
    the database:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: 'To see only those services that are up, we can use the `-u` switch:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/2932bf4e-58b5-4ada-9ad2-901cf81a9510.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We can even see the list by specific ports using the `-p` switch:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/3f610f40-b83d-4e50-a504-ecab8ea4bc89.png)'
  prefs: []
  type: TYPE_IMG
