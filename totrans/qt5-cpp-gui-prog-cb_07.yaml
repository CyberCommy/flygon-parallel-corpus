- en: Chapter 7. Conversion Library
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following recipes:'
  prefs: []
  type: TYPE_NORMAL
- en: Data conversion
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Image conversion
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Video conversion
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Currency conversion
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Data kept within our computer environment is encoded in a variety of ways. Sometimes
    it can be used directly for a certain purpose, other times it needs to be converted
    to another format in order to fit the context of the task. The process of converting
    the data from one format to another also varies, depending on the source format
    as well as the target format. Sometimes the process can be very complex, especially
    when dealing with data that is feature-rich and sensitive, such as image or video
    conversion. Even a small error during the conversion process may render the file
    unusable.
  prefs: []
  type: TYPE_NORMAL
- en: Data conversion
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Qt provides a set of classes and functions for easily converting between different
    types of data. This makes Qt more than just a GUI library; it is a complete platform
    for software development. The `QVariant` class, which we will be using in the
    following example, makes Qt even more flexible and powerful compared to similar
    conversion functionalities provided by the C++ standard library.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let''s learn how to convert various data types in Qt by following these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Open up Qt Creator and create a new **Qt Console Application** project by going
    to **File** | **New File or Project**:![How to do it…](img/B02820_07_01.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Next, open up `main.cpp` and add the following headers to it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, in the `main()` function, add the following code to convert a string
    to a number:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'After that, we''ll convert a number back to a string:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'We also learn how to round down a value by using `qFloor()`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, by using `qCeil()`, we are able to round a number to the smallest integral
    value not smaller than its initial value:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'After that, we will create a date time variable by converting from a string:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Subsequently, we can also convert the date time variable back to a string with
    our own custom format:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'We can call the `QString::toUpper()` function to convert a string variable
    to all capital letters:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'On the other hand, calling `QString::toLower()` will convert the string to
    all lowercase:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'The `QVariant` class provided by Qt is a very powerful data type that can be
    easily converted to other types without any effort by the programmer:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'This demonstrates how a single `QVariant` variable can be simultaneously converted
    to multiple data types without any effort by the programmer:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'The full source code in `main.cpp` will now look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it…](img/B02820_07_16.jpg)![How to do it…](img/B02820_07_19.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Compile and run the project now and you should see something like this:![How
    to do it…](img/B02820_07_02.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: All the data types provided by Qt, such as `QString`, `QDateTime`, `QVariant`,
    and so on, contain functions that make conversion to other types easy and straightforward.
  prefs: []
  type: TYPE_NORMAL
- en: Qt also provides its own object conversion function, `qobject_cast()`, which
    doesn't rely on the standard library. It is also more compatible with Qt and works
    well for converting between Qt's widget types and data types.
  prefs: []
  type: TYPE_NORMAL
- en: Qt also provides you with the `QtMath` class, which helps you to manipulate
    number variables, such as rounding up a floating point number or converting an
    angle from degrees to radians.
  prefs: []
  type: TYPE_NORMAL
- en: '`QVariant` is a special class that can be used to store data of all kinds of
    type. It can automatically determine the data type by examining the value stored
    in the variable. You can also easily convert the data to any of the types supported
    by the `QVariant` class by just calling a single function, such as `toFloat()`,
    `toInt()`, `toBool()`, `toChar()`, `toString()`, and so on.'
  prefs: []
  type: TYPE_NORMAL
- en: There's more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Be aware that each of these conversions takes computing power to make it happen.
    Even though modern computers are extremely fast at handling operations such as
    these, you should be careful not to overdo it with a large quantity at the same
    time. If you're converting a large set of variables for complex calculations,
    it might slow down your computer significantly, so therefore try to convert variables
    only whenever it's deemed necessary.
  prefs: []
  type: TYPE_NORMAL
- en: Image conversion
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we will learn how to build a simple image converter that converts
    an image from one format to another. Qt supports reading and writing different
    types of image formats, and this support comes in the form of external DLL files
    due to licensing issues. However, you don't have to worry about that because as
    long as you include those DLL files in your project, it will work seamlessly across
    different formats. There are certain formats that only support reading and not
    writing, and some that support both. You can check out the full details at [http://doc.qt.io/qt-5/qtimageformats-index.html](http://doc.qt.io/qt-5/qtimageformats-index.html).
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Qt''s built-in image libraries make image conversion really simple:'
  prefs: []
  type: TYPE_NORMAL
- en: First of all, open up Qt Creator and create a new **Qt Widgets Application**
    project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open up `mainwindow.ui` and add a line edit and push button to the canvas for
    selecting image files, a combo box for selecting the desired file format, and
    another push button for starting the conversion process:![How to do it…](img/B02820_07_03.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, double-click the combo box and a window will appear for editing the combo
    box. We will add three items to the combo box list by clicking the **+** button
    three times and renaming the items `PNG`, `JPEG`, and `BMP`:![How to do it…](img/B02820_07_04.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: After that, right-click on one of the push buttons and select **Go to slot…**,
    then click the **OK** button. A slot function will then be automatically added
    to your source files. Then, repeat this step for the other push button as well:![How
    to do it…](img/B02820_07_05.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Once you are done with the UI, let''s move over to the source code. Open up
    `mainwindow.h` and add in the following header:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, open up `mainwindow.cpp` and define what will happen when the **Browse**
    button is clicked, which in this case is opening the file dialog to select an
    image file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Finally, we also define what will happen when the **Convert** button is clicked:![How
    to do it…](img/B02820_07_17.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Build and run the program now and we should get a pretty simple image converter
    that looks like this:![How to do it…](img/B02820_07_06.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The previous example uses the native `QImage` class from Qt, which contains
    functions that can access pixel data and manipulate it. It is also used to load
    an image file and extract its data through different decompression methods, depending
    on the format of the image. Once the data is extracted, you can then do anything
    you want with it, such as displaying the image on screen, manipulating its color
    information, resizing the image, or compressing it with another format and saving
    it as a file.
  prefs: []
  type: TYPE_NORMAL
- en: We used `QFileInfo` to separate the filename from the extension so that we can
    amend the extension name with the new format selected by the user from the combo
    box. This way we can save the newly converted image in the same folder as the
    original image and automatically give it the same file name as well, except in
    a different format.
  prefs: []
  type: TYPE_NORMAL
- en: As long as you're trying to convert the image to a format supported by Qt, all
    you need to do is to call `QImage::save()`. Internally, Qt will figure out the
    rest for you and output the image to the chosen format. In the `QImage::save()`
    function, there is a parameter that sets the image quality and another for setting
    the format. In this example, we just set both as the default values, which saves
    the image at the highest quality and lets Qt figure out the format by checking
    the extension stated in the output file name.
  prefs: []
  type: TYPE_NORMAL
- en: There's more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Here are some tips. You can also convert an image to PDF by using the `QPdfWriter`
    class provided by Qt. Essentially, what you do is paint the selected image to
    the layout of a newly created PDF document and set its resolution accordingly.
    For more information about the `QPdfWriter` class, visit [http://doc.qt.io/qt-5/qpdfwriter.html](http://doc.qt.io/qt-5/qpdfwriter.html).
  prefs: []
  type: TYPE_NORMAL
- en: Video conversion
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will create a simple video converter using Qt and FFmpeg,
    a leading multimedia framework that is free and open source. Although Qt does
    support playing video files through its widget, it does not support video conversion
    at the moment. Fear not! You can actually still achieve the same goal by making
    your program cooperate with another standalone program through the `QProcess`
    class provided by Qt.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let''s make a simple video converter with the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Download FFmpeg (static package) from [http://ffmpeg.zeranoe.com/builds](http://ffmpeg.zeranoe.com/builds)
    and extract the contents to `C:/FFmpeg/`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Then, open up Qt Creator and create a new **Qt Widgets Application** project
    by going to **File** | **New File or Project…**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: After that, open up `mainwindow.ui` and we're going to work on the program's
    user interface. Its UI is very similar to the previous example, except we add
    an extra text edit widget to the canvas, just below the combo box:![How to do
    it…](img/B02820_07_07.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Double-click the combo box and a window will appear to edit the combo box. We
    will add three items to the combo box list by clicking the **+** button three
    times, and rename the items `AVI`, `MP4`, and `MOV`:![How to do it…](img/B02820_07_08.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: After that, right-click on one of the push buttons and select **Go to slot…**,
    then click the **OK** button. A slot function will then be automatically added
    to your source files. Then, repeat this step for the other push button as well.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'After that, open up `mainwindow.h` and add the following headers to the top:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, add the following pointers under the `public` keyword:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'Besides that, we also need to add three extra slot functions under the two
    functions that Qt created for us previously:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, open up `mainwindow.cpp` and add the following code to the class constructor:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'After that, we define what will happen when the **Browse** button is clicked,
    which in this case will open up the file dialog to choose the video file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: Then, we also define what will happen if the **Convert** button is clicked.
    What we are doing here is passing the filenames and arguments to FFmpeg and then
    the conversion process will be handled externally by FFmpeg:![How to do it…](img/B02820_07_18.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Once we are done with that, we will then tell our program what to do when the
    conversion process has started:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, we will write the slot function that gets called during the conversion
    process whenever FFmpeg returns an output to the program:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'Lastly, we define the slot function that gets called when the entire conversion
    process has been completed:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: Build and run the project now and you should get a simple yet workable video
    converter:![How to do it…](img/B02820_07_09.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `QProcess` class provided by Qt is used to start external programs and communicate
    with them. In this case, we started `ffmpeg.exe` located in `C:/FFmpeg/bin/` as
    a process and started communicating with it. We also sent it a set of arguments
    to tell it what to do when started. The arguments we used in this example are
    relatively basic; we only told FFmpeg the path to the source image and the output
    filename. For more information regarding the argument settings available in FFmpeg,
    check out [https://www.ffmpeg.org/ffmpeg.html](https://www.ffmpeg.org/ffmpeg.html).
  prefs: []
  type: TYPE_NORMAL
- en: FFmpeg does more than just converting video files. You can also use it to convert
    audio files and even images. For more information regarding all the formats supported
    by FFmpeg, check out [https://www.ffmpeg.org/general.html#File-Formats](https://www.ffmpeg.org/general.html#File-Formats).
  prefs: []
  type: TYPE_NORMAL
- en: Other than that, you can also play a video or audio file by running `ffplay.exe`,
    located in `C:/FFmpeg/bin`, or print out the information of the video or audio
    file in human-readable fashion by running `ffprobe.exe`. Check out FFmpeg's full
    documentation at [https://www.ffmpeg.org/about.html](https://www.ffmpeg.org/about.html).
  prefs: []
  type: TYPE_NORMAL
- en: There's more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: There are lots of things you can do using this method. It means that you're
    not limited to what Qt provides and you can break out of such limitations by carefully
    selecting a third-party program that provides what you need. One such example
    is making your own anti-virus GUI by utilizing the command-line-only anti-virus
    scanners available on the market, such as Avira ScanCL, Panda Antivirus Command
    Line Scanner, SAV32CLI, ClamavNet, and so on. You can build your own GUI using
    Qt and essentially send commands to the anti-virus process to tell it what to
    do.
  prefs: []
  type: TYPE_NORMAL
- en: Currency conversion
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this example, we will learn how to create a simple currency converter using
    Qt, with the help of an external service provider called `Fixer.io`.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Make yourself a currency converter with these simple steps:'
  prefs: []
  type: TYPE_NORMAL
- en: We start by opening Qt Creator and creating a new **Qt Widgets Application**
    project from **File** | **New File or Project**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Next, open up the project file (`.pro`) and add the network module to our project:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: After that, open up `mainwindow.ui` and remove the menu bar, tool bar, and status
    bar from the UI.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Then, add three horizontal layouts, a horizontal line, and a push button to
    the canvas. Once they're all placed, left-click on the canvas and follow by clicking
    the **Lay Out Vertically** button above the canvas. Then, set the label of the
    push button as **Convert**. The UI should now look something like this:![How to
    do it…](img/B02820_07_10.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: After that, add two labels to the top layout and set the text of the left one
    as **From:**, followed by the right one as **To:**. Right after that, add two
    line edit widgets to the second layout and set both their default values as `1`:![How
    to do it…](img/B02820_07_11.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Before we proceed to add the last batch of widgets to the last layout, let's
    select the line edit on the right and enable the `readOnly` checkbox located in
    the property pane:![How to do it…](img/B02820_07_12.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Other than that, we also must set its **cursor** property to **Forbidden** so
    that users know it's not editable when mousing over the widget:![How to do it…](img/B02820_07_13.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once you're done with that, let's add two combo boxes to the third layout located
    at the bottom. We will just leave them empty for now:![How to do it…](img/B02820_07_14.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: After that, right-click on the **Convert** button and select **Go to slot…**.
    A window will now pop up, asking you to select an appropriate signal. Let's keep
    the default `clicked()` signal as the selection and click **OK**. Qt Creator will
    now automatically add a slot function for you to both `mainwindow.h` and `mainwindow.cpp`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Next, open up `mainwindow.h` and make sure the following headers are being
    added to the top of the source file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, we need to add another slot function called `finished()`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'Besides that, we also need to add two variables under the `private` label:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'Once you''re done, let''s open up `mainwindow.cpp` this time. We will add several
    currency shortcodes to both the combo boxes in the class constructor. We also
    set a validator to the line edit widget on the left so that it can only accept
    inputs that are numbers. Lastly, we also initialize the network access manager
    and connect its `finished()` signal to our `finished()` slot function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'After that, we define what will happen if the **Convert** button is being clicked
    by the user:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'Lastly, define what will happen when the `finished()` signal is triggered:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: Compile and run the project now and you should be able to get a simple currency
    converter that looks like this:![How to do it…](img/B02820_07_15.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Similar to the previous example we saw, which uses an external program to achieve
    a specific task, this time we use an external service provider who provided us
    with an open **Application Programming Interface** (**API**) that is free for
    all and easy to use.
  prefs: []
  type: TYPE_NORMAL
- en: This way, we don't have to think about the method to retrieve the latest currency
    rate. Instead, the service provider has already done the job for us and we just
    have to send a polite request and ask for it. Then, we just wait for the response
    from their server and process the data according to our intended purposes.
  prefs: []
  type: TYPE_NORMAL
- en: There are quite a few different service providers you can choose from besides
    `Fixer.io` ([http://fixer.io](http://fixer.io)). Some are free but without any
    advanced features; some provide you with additional functionalities, although
    they come at a premium price. Some of these alternatives are Open Exchange Rate
    ([https://openexchangerates.org](https://openexchangerates.org)), Currencylayer
    ([https://currencylayer.com](https://currencylayer.com)), Currency API ([https://currency-api.appspot.com](https://currency-api.appspot.com)),
    XE Currency Data API ([http://www.xe.com/xecurrencydata](http://www.xe.com/xecurrencydata)),
    and Jsonrates ([http://jsonrates.com](http://jsonrates.com)).
  prefs: []
  type: TYPE_NORMAL
- en: There's more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Besides currency exchange rates, you can also use this method to do other more
    advanced tasks that are perhaps too complicated to do by yourself, or are simply
    impossible to access unless you use the services provided by specialists, for
    example, programmable **Short Message Service** (**SMS**) and voice services,
    web analytics and statistic generation, online payment gateways, and the list
    goes on. Most of these services are not free, but you can easily achieve those
    functions in minutes without even setting up the server infrastructure, backend
    system, and whatnot; it's definitely the cheapest and fastest way to get your
    product up and running without much hassle.
  prefs: []
  type: TYPE_NORMAL
