- en: Chapter 8. Turning Addresses into Points and Points into Addresses
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Plotting addresses or points of interest on a map is one of the most commonly
    used functions in web mapping applications. To plot an address as a point on a
    map, you'll first need to get the latitude and longitude coordinates. Geocoding
    is the process of converting physical addresses into geographic coordinates. In
    order for your addresses to be added to the map, they must go through a geocoding
    process that assigns coordinates to the address. Geocoding is accomplished in
    ArcGIS Server through the use of a Locator service and is executed through the
    ArcGIS Server JavaScript API with the `Locator` class, which accesses these services
    to provide address-matching capabilities as well as reverse geocoding. As with
    the other tasks provided by ArcGIS Server, geocoding requires various input parameters,
    including an `Address` object to match addresses or a `Point` object in the case
    of reverse geocoding. This information is then submitted to the geocoding service
    and an `AddressCandidate` object containing the address matches is returned and
    can then be plotted on the map.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
- en: Introducing geocoding
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Geocoding with a Locator service in the ArcGIS API for JavaScript
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The geocoding process
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The reverse geocoding process
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Time to practice with the Locator service
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introducing geocoding
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We''ll first take a look at a geocoding example to give you a better feel of
    the process. If you have an address located at 150 Main St, you must first geocode
    the address before it can be plotted as a point on a map. If 150 Main St lies
    on a street segment with an address range of 100 to 200 Main St, the geocoding
    process would interpolate the location of 150 Main St. to be exactly halfway along
    this street segment. The geocoding software would then assign 150 Main St. to
    the geographic location that corresponds to the halfway point between 100 and
    200 Main St. Now that you have the coordinates for the address, you can plot it
    on the map. This process is described in the following diagram:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
- en: '![Introducing geocoding](graphics/7965_08_01.jpg)'
  id: totrans-10
  prefs: []
  type: TYPE_IMG
- en: The most common geocoding level is the street segment geocode, which assigns
    latitude/longitude coordinates based on known geocodes at the intersection of
    the block or street segment containing an address. This method of geocoding uses
    an interpolation process as described earlier. This method is the most accurate
    in urban areas with regularly spaced addresses. However, it does have problems
    accurately geocoding irregularly spaced addresses and addresses located in a cul
    de sac. The coordinates of rural areas are also notoriously less complete and
    this results in lower geocoding rates in those areas.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
- en: Geocoding with a Locator service in the ArcGIS API for JavaScript
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: An ArcGIS Server `Locator` service can perform geocoding and reverse geocoding.
    Using the ArcGIS Server API for JavaScript, you can submit an address to the `Locator`
    service and retrieve geographic coordinates for the address, which can then be
    plotted on the map. The following figure illustrates this process. An address,
    defined by a JSON object in JavaScript, is an input to a `Locator` object, which
    geocodes the address and returns the results in an `AddressCandidate` object,
    which can then be displayed as a point on your map. This pattern is the same as
    the other tasks we saw in previous chapters, where an input object (the `Address`
    object) provides input parameters to the task (`Locator`), which submits the job
    to ArcGIS Server. A result object (`AddressCandidate`) is then returned to a callback
    function, which processes the returned data.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
- en: '![Geocoding with a Locator service in the ArcGIS API for JavaScript](graphics/7965_08_02.jpg)'
  id: totrans-14
  prefs: []
  type: TYPE_IMG
- en: Input parameter objects
  id: totrans-15
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The input parameter object for the `Locator` task will take the form of either
    a JSON address object for geocoding or a `Point` object for reverse geocoding.
    From a programmatic standpoint, the creation of these objects differs. We'll discuss
    each of the objects in the next section.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
- en: Input JSON address object
  id: totrans-17
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: A `Locator` service can accept either a `Point` (for reverse geocoding) or a
    `JSON` object that represents an address. The JSON object defines an address that
    is formatted in the form of an object, as seen in the following code example.
    The address is defined as a series of name/value pairs defined within brackets,
    which are defined within your JavaScript code. Individual name/value pairs are
    defined for the street, city, state, and zip code in this case, but the name/value
    pairs will vary depending upon the type of geocoding service you've defined in
    your locator.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Input Point object
  id: totrans-20
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: For reverse geocoding, the input to a `Locator` service takes the form of a
    `esri/geometry/Point` object, which is often defined through a user click on the
    map or perhaps through application logic. The `Point` object is returned through
    a `Map.click` event, which can be retrieved and used as the input object to the
    `Locator` service.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
- en: The Locator object
  id: totrans-22
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `Locator` class contains methods and events that can be used to execute
    a geocode or reverse geocode operation using the input `Point` or `Address` object.
    `Locator` needs a URL pointer to your geocoding service, as defined within ArcGIS
    Server. A code example showing how to create a new instance of a `Locator` object
    is presented as follows:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Once a new instance of a `Locator` class has been created, you can call the
    `addressToLocations()` method to geocode an address or the `locationToAddress()`
    method to perform a reverse geocode. These methods result in an event that is
    fired at the completion of the operation. In the case of an address geocode, the
    `address-to-locations-complete()` event fires, and the `on-location-to-address-complete()`
    event fires on the completion of a reverse geocode operation. In either case,
    an `AddressCandidate` object is then returned to the event.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
- en: The AddressCandidate object
  id: totrans-26
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: An `AddressCandidate` object is returned as a result of a `Locator` operation.
    Various properties are stored in this object, including the address, attributes,
    location, and score. The attributes property contains name/value pairs of field
    names and values. The location is, as the name would suggest, the x and y coordinate
    of the candidate address. The score property is a numeric value between 0 and
    100 that indicates the quality of the address returned with a higher score, representing
    a better match. Multiple addresses can be stored in this object as an array of
    candidates.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
- en: Now, we're going to take a closer look at the Locator methods used to submit
    addresses and points. The `Locator.addressToLocations()` method sends a request
    to geocode a single address. An input address object is created and used as a
    parameter in the `addressToLocations()` method found on a `Locator` object. The
    results of the geocoding operation are returned in an `AddressCandidate` object.
    The address can then be plotted on the map as a graphic.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
- en: Reverse geocoding can also be performed by a `Locator` object through the `locationToAddress()`
    method. A `Point` object, created either by an end user click on the map or through
    application logic, is created and passed as a parameter into the `locationToAddress()`
    method. A second parameter is also passed into the method, indicating a distance
    in meters from the point where a matching address should be found. As with the
    `addressToLocations()` method, an `AddressCandidate` object is returned from the
    locator and contains an address, if one was found.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
- en: The geocoding process
  id: totrans-30
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We can summarize the geocoding process with the ArcGIS API for JavaScript.
    A `Locator` object is created through a reference to a geocoding service on an
    ArcGIS Server instance. An input address in the form of a JSON object is then
    created and submitted to the `Locator` object using the `addressToLocations()`
    method. This returns one or more `AddressCandidate` objects, which can then be
    plotted on the map. Take a look at the following diagram:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
- en: '![The geocoding process](graphics/7965_08_03.jpg)'
  id: totrans-32
  prefs: []
  type: TYPE_IMG
- en: The reverse geocoding process
  id: totrans-33
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Let's review the reverse geocoding process as well. This process also uses a
    `Locator` object, which references a URL to a geocoding service. A `Point` geometry
    object is created as a result of either a location that has been clicked on the
    map or some other application-generated event. This `Point` object is then submitted
    to `Locator` through the `locationToAddress()` method, along with a distance value.
    The `distance` property, supplied in meters, determines the radius in which `Locator`
    will attempt to find an address.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
- en: 'If an address is found within the radius, an `AddressCandidate` object is created
    and can be decoded as an address. Take a look at the following diagram:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
- en: '![The reverse geocoding process](graphics/7965_08_04.jpg)'
  id: totrans-36
  prefs: []
  type: TYPE_IMG
- en: Time to practice with the Locator service
  id: totrans-37
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this exercise, you will learn how to use the `Locator` class to geocode
    addresses and overlay the results on top of a basemap provided by ArcGIS Online.
    Open the JavaScript Sandbox at [http://developers.arcgis.com/en/javascript/sandbox/sandbox.html](http://developers.arcgis.com/en/javascript/sandbox/sandbox.html)
    and perform the following steps:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
- en: In your `ArcGISJavaScriptAPI` folder, open the file called `geocode_begin.html`
    in a text editor. I use Notepad++, but you can use whatever text editor you are
    most comfortable with. Some of the code for this exercise has already been written
    for you so that you can focus on the geocoding functionality.
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Copy and paste the code in the file so that it completely replaces the code
    currently in Sandbox.
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following references for the objects that we''ll use in this exercise:'
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Now inside the `require()` function, we are going to initialize the `locator`
    variable and then register it to `Locator`.`address-to-locations-complete`. Add
    the following two lines of code just after the code block used to create the `Map`
    object:'
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The constructor for `Locator` must be a valid URL pointer to a locator service.
    In this case, we are using the World Geocoding Service. We've also registered
    the `Locator.address-to-locations-complete` event for the `Locator` object. This
    event fires when the geocoding has been completed and in this case, will call
    the `showResults()` function specified as a parameter to `on()`.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s also register the `click` event for the button that will trigger the
    geocoding by adding the following line of code just after the two lines that you
    just created. This will trigger the execution of a JavaScript function called
    `locate()`, which we''ll create in the next step:'
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'In this step, you''re going to create a `locate()` function, which will perform
    several tasks, including clearing any existing graphics, creating an `Address`
    JSON object from the input textbox on the web page, defining several options,
    and calling the `Locator.addressToLocations()` method. Add the code block just
    after the last line of code you entered, shown as follows:'
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: The first line of code in this function clears any existing graphics for the
    map. This is needed when the user is entering more than one address in a session.
    Next, we will create a variable called `address`, which is a JSON object that
    contains the address entered by the user. We then set the output spatial reference
    and create an `options` variable that contains the address and output fields as
    a JSON object. Finally, we call the `Locator.addressToLocations()` method and
    pass in the `options` variable.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
- en: 'The `showResults()` function will take the results returned by the `Locator`
    service and plot them on the map. In this case, we''re going to display only an
    address with a score of greater than 80 on a scale of 0 to 100\. Part of the `showResults()`
    function has already been written for you. Create a new variable to hold the `AddressCandidate`
    object by adding the highlighted line of code as follows:'
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`showResults()`函数将接收`Locator`服务返回的结果，并在地图上绘制它们。在这种情况下，我们将仅显示得分在0到100之间的地址大于80的地址。`showResults()`函数的一部分已经为您编写了。通过添加以下突出显示的代码行来创建一个新变量来保存`AddressCandidate`对象：'
- en: '[PRE6]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Just after the line of code that creates the `geom` variable, start a loop
    that will loop through each of the addresses that are returned from `Locator`:'
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在创建`geom`变量的代码行后，开始一个循环，该循环将遍历从`Locator`返回的每个地址：
- en: '[PRE7]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Start an `if` statement that checks the `AddressCandidate.score` property for
    a value greater than 80\. We only want to display addresses with a high match
    value:'
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 开始一个`if`语句，检查`AddressCandidate.score`属性是否大于80的值。我们只想显示匹配值高的地址：
- en: '[PRE8]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Inside the `if` block, create a JSON variable with new attributes, which contain
    the address, score, and field values from the `AddressCandidate` object. In addition
    to this, the `location` property will be saved to the `geom` variable:'
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`if`块内，创建一个包含地址、得分和`AddressCandidate`对象的字段值的新属性的JSON变量。除此之外，`location`属性将保存到`geom`变量中：
- en: '[PRE9]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Create a new `Graphic` object using the `geometry`, `symbol`, `attributes`,
    and `infoTemplate` variables that you either created earlier or were created for
    you and add them to the `GraphicsLayer`:'
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用您之前创建的或为您创建的`geometry`、`symbol`、`attributes`和`infoTemplate`变量创建一个新的`Graphic`对象，并将它们添加到`GraphicsLayer`：
- en: '[PRE10]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Add a text symbol for the location(s):'
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为位置添加文本符号：
- en: '[PRE11]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Break out of the loop after one address with a score of greater than 80 has
    been found. Many addresses will have more than one match, which can be confusing.
    Take a look at the following code snippet:'
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在找到一个得分大于80的地址后跳出循环。许多地址将有多个匹配项，这可能会令人困惑。看一下以下代码片段：
- en: '[PRE12]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: You may want to double check your code by examining the solution file `geocode_end.html`
    located in `your ArcGISJavaScriptAPI/solution` folder.
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您可能需要通过检查位于`your ArcGISJavaScriptAPI/solution`文件夹中的解决方案文件`geocode_end.html`来仔细检查您的代码。
- en: When you click on the **Run** button, you should see the following map. If not,
    you may need to recheck your code for accuracy.![Time to practice with the Locator
    service](graphics/7965_08_05.jpg)
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当您单击**运行**按钮时，您应该看到以下地图。如果没有，请检查您的代码是否准确。![Time to practice with the Locator
    service](graphics/7965_08_05.jpg)
- en: Enter an address or accept the default and click on **Locate**, as shown in
    the following screenshot:![Time to practice with the Locator service](graphics/7965_08_06.jpg)
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入一个地址或接受默认值，然后单击**定位**，如下面的屏幕截图所示：![Time to practice with the Locator service](graphics/7965_08_06.jpg)
- en: Summary
  id: totrans-68
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: An ArcGIS Server `Locator` service can perform geocoding and reverse geocoding.
    Using the ArcGIS API for JavaScript, you can submit an address to the `Locator`
    service and retrieve geographic coordinates for the address, which can then be
    plotted on a map. An address, defined by a JSON object in JavaScript, is an input
    to a `Locator` object, which geocodes the address and returns the results in an
    `AddressCandidate` object that can then be displayed as a point on your map. This
    pattern is the same as the other tasks we've seen in previous chapters, where
    an input object (the `Address` object) provides input parameters to the task (`Locator`),
    which submits the job to ArcGIS Server. A result object (`AddressCandidate`) is
    then returned to a callback function, which processes the returned data. In the
    next chapter, you will learn how to use various Network Analyst tasks.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: ArcGIS Server的`Locator`服务可以执行地理编码和反向地理编码。使用ArcGIS API for JavaScript，您可以将地址提交给`Locator`服务，并检索地址的地理坐标，然后可以在地图上绘制出来。地址由JavaScript中的JSON对象定义，是`Locator`对象的输入，`Locator`对象对地址进行地理编码，并将结果返回为`AddressCandidate`对象，然后可以将其显示为地图上的点。这种模式与我们在前几章中看到的其他任务相同，其中输入对象（`Address`对象）为任务（`Locator`）提供输入参数，任务将作业提交给ArcGIS
    Server。然后将结果对象（`AddressCandidate`）返回给回调函数，该函数处理返回的数据。在下一章中，您将学习如何使用各种网络分析任务。
