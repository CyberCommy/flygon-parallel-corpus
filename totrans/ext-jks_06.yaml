- en: Chapter 6. Developing Your Own Jenkins Plugin
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous chapter, we focused on the high-level concepts behind Jenkins
    plugins.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we will be hands-on as we work through the practical aspects
    of setting up our development environment, become familiar with the tools and
    conventions that we need to know about, and then create our first Jenkins plugin.
  prefs: []
  type: TYPE_NORMAL
- en: 'By the end of the chapter, you should be familiar with the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Using Maven for builds and dependency management
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The structure and layout used for plugin projects
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating your own Jenkins plugin project(s)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Making basic code changes to your plugin source code
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Compiling, packaging, and deploying your plugin to a remote Jenkins instance
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using an IDE to make changes and run Jenkins
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The basics of running and debugging Jenkins and your plugin code within an IDE
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We will begin by setting up our development environment; then, as is traditional,
    we will create a very simple `Hello World` Jenkins plugin project to illustrate
    the mechanics and get us started.
  prefs: []
  type: TYPE_NORMAL
- en: 'Most of this chapter is based on the topics covered in the Jenkins Plugin tutorial
    guide here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://wiki.jenkins-ci.org/display/JENKINS/Plugin+tutorial](https://wiki.jenkins-ci.org/display/JENKINS/Plugin+tutorial)'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This page has many useful references and should be your first port of call if
    you have any difficulty with any aspect of this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: We will focus initially on the tools, conventions, and frameworks and keep to
    the simplest plugin possible to provide a solid understanding of the process and
    tools used to develop plugins. We will look at extension points and more complex
    code changes in the next chapter.
  prefs: []
  type: TYPE_NORMAL
- en: We will also run through the setting up of an IDE for plugin development and
    introduce basic Jenkins debugging that can be done directly from within Eclipse.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: To start off, we are concentrating on using Java and Maven as they are currently
    the most common tool set that are used to build plugins, but we will also take
    a look at alternative approaches such as Groovy and Gradle in the next chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Let's start off by setting up your environment.
  prefs: []
  type: TYPE_NORMAL
- en: An introduction to Maven
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We will use Maven to build our plugin. If you are unfamiliar with Maven, don't
    worry—the main point of Maven is that you don't necessarily need to know a lot
    about Maven to use it and to get a lot from it!
  prefs: []
  type: TYPE_NORMAL
- en: 'For a build tool that''s quite unusual, you may well have expected yourself
    to be knee-deep in configuration files and code. However, Maven works quite well
    without these due to the core philosophy that is at its heart: it uses *convention
    over configuration*.'
  prefs: []
  type: TYPE_NORMAL
- en: Maven works on the assumption that you and your project are following a set
    of standard, sensible conventions. These are nothing too weird or onerous, so
    if you are following this path, then Maven should just know where everything is
    and what you would like to achieve and will help you get up and running very quickly
    and easily.
  prefs: []
  type: TYPE_NORMAL
- en: 'One of these core assumptions is related to your project structure; specifically,
    if you are using a directory layout like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Item | Default dir (relative to the project directory) |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| source code | `src/main/java` |'
  prefs: []
  type: TYPE_TB
- en: '| resources | `src/main/resources` |'
  prefs: []
  type: TYPE_TB
- en: '| tests | `src/test` |'
  prefs: []
  type: TYPE_TB
- en: '| complied code | `target` |'
  prefs: []
  type: TYPE_TB
- en: '| distributable JAR | `target/classes` |'
  prefs: []
  type: TYPE_TB
- en: Given a project that adheres to this convention, Maven will automatically know
    how to build your code, how to test it, and how to package it all up nicely for
    you with no other configuration or intervention required, providing a lot of benefit
    for a very small cost.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This is great as long as your project sticks to the path that Maven expects…
    if you stray, things can get messy very quickly! This makes Maven great for new
    and well-structured projects, but requires a bit more work when introducing legacy
    projects that have their own ideas about locations and naming conventions.
  prefs: []
  type: TYPE_NORMAL
- en: Installing Maven
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Maven is a Java tool, and therefore, we need to have Java installed to use
    it. You should have Java on your system already if you''re running Jenkins locally,
    but if not, you can download a JDK for your platform from the following link—version
    6.0 or later is required:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://www.oracle.com/technetwork/java/javase/downloads/index.html](http://www.oracle.com/technetwork/java/javase/downloads/index.html)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Once you''ve got the Java prerequisite sorted out, download Maven for your
    platform from the Apache site here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://maven.apache.org/download.cgi](https://maven.apache.org/download.cgi)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Then follow the installation steps for your operating system from this page:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://maven.apache.org/install.html](https://maven.apache.org/install.html)'
  prefs: []
  type: TYPE_NORMAL
- en: On all platforms, the main requirement is to ensure that you have a `JAVA_HOME`
    variable in `PATH`, and that `PATH` also contains the Maven `bin` directory from
    the download you extracted.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once you are set up, you should get something roughly comparable to the following
    when you run `java –version` and then `mvn –version`—I am also displaying the
    Java and Maven environment variables here for your information:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Installing Maven](../images/00037.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'We now need to tell Maven about Jenkins; where it is and how to build it. We
    do this by updating the `settings.xml` file in the m2 home directory with the
    XML provided in the **Setting up Environment** section of the Jenkins Plugin Tutorial
    page mentioned earlier:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://wiki.jenkins-ci.org/display/JENKINS/Plugin+tutorial](https://wiki.jenkins-ci.org/display/JENKINS/Plugin+tutorial)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Find your `settings.xml` file here for Linux or Mac: `~/.m2/settings.xml`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'For Windows, the file is available at: `%USERPROFILE%\.m2\`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following text within the `settings.xml` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'It''s a good idea to make a new directory for each project. This keeps things
    clean and simple, rather than having multiple projects coexist in one folder.
    To create a directory for this project, run `mkdir` and then `cd` to enter into
    the directory as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'After this, we can start the build, which will create a skeleton plugin project
    for us:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'If you have any issues at this point, check these three common causes first:'
  prefs: []
  type: TYPE_NORMAL
- en: Does `mvn` work in this directory? Check using `mvn -version`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Does Java work in this directory? Check using `java -version`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Do you have Internet connectivity? Check using `ping www.google.com`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If all goes well, you will be prompted to answer a couple of simple questions;
    Maven will want you to specify the `groupId` and the `artifactId` parameters of
    your plugin.
  prefs: []
  type: TYPE_NORMAL
- en: 'For `groupId`, the convention is to use your domain name in reverse followed
    by the project name, all in lower case and separated by dots. Given the `donaldsimpson.co.uk`
    domain name and the `jenkinspluginexample` project name, I would use this: `uk.co.donaldsimpson.jenkinspluginexample`.'
  prefs: []
  type: TYPE_NORMAL
- en: The value of `artifactId` should be your project name, that is, `jenkinspluginexample`.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you are going to have several components or services comprising the `jenkinspluginexample`
    project, you should append additional service names here, such as the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: The intention behind this approach is to ensure that when used in conjunction
    with the group ID, each part of your project will remain uniquely and readily
    identifiable.
  prefs: []
  type: TYPE_NORMAL
- en: '![Installing Maven](../images/00038.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: The preceding screenshot is the result of the previous input and states that
    a version 1.0 Snapshot build has been created using the skeleton plugin, which
    has produced a very basic and the first plugin for us to examine.
  prefs: []
  type: TYPE_NORMAL
- en: Now take a look inside the newly created subdirectory, whose name should match
    your `artifactId`.
  prefs: []
  type: TYPE_NORMAL
- en: 'On exploring this directory, we should now have the generated examples of everything
    that is required to create the most basic plugin. These include the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '`pom.xml`: A new Maven POM file for our project that contains the information
    required for Maven to build, package, and distribute our example plugin'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`src/main`: This directory contains both a Java directory and a resources directory'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`src/main/java`: This directory contains the `Hello World` builder class that
    we will update later'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`src/main/resources`: This folder contains configuration and help files'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Taking a good look around at the contents of these new folders that we just
    generated and mentioned will help you become familiar with the different files
    and structure used by Maven and Jenkins to develop, build, and distribute plugins.
    The layout follows the Maven conventions and is used for many other projects as
    well.
  prefs: []
  type: TYPE_NORMAL
- en: As you previously saw, our new project directory has its own `pom.xml` file,
    so we should be able to build it as a Maven project—let's take a look and try
    it out!
  prefs: []
  type: TYPE_NORMAL
- en: Change directory to the location of your new `pom.xml` file and have a look
    at it—you will see the various goals available in here, along with all of the
    details required to work with our project.
  prefs: []
  type: TYPE_NORMAL
- en: 'There is also a packaging declaration, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: This tells Maven that you would like this project to be packaged into an HPI
    file—this is the standard file format for Jenkins plugins. Other packaging instructions
    typically include ZIP, JAR, WAR, and EAR.
  prefs: []
  type: TYPE_NORMAL
- en: 'Maven also assumes that you will want to perform a standard set of tasks with
    your project—these will usually include functions, or **phases** such as the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '`validate`: This validates that the project is correct and all necessary information
    is available.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`compile`: This compiles the source code of the project.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`test`: This tests the compiled source code using a suitable unit testing framework.
    The tests should not require the code be packaged or deployed.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`package`: This takes the compiled code and packages it in its distributable
    format, such as a JAR.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`integration-test`: This processes and deploys the package, if necessary, into
    an environment where integration tests can be run.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`verify`: This runs checks to verify that the package is valid and meets quality
    criteria.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`install`: This installs the package into the local repository, for use as
    a dependency in other projects locally.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`deploy`: This is done in an integration or release environment. This function
    copies the final package to the remote repository to share the package with other
    developers and projects.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`clean`: This cleans up artifacts created by prior builds.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`site`: This generates site documentation for this project.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'This guide has more information on Maven phases and goals and how they are
    linked:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://maven.apache.org/guides/getting-started/maven-in-five-minutes.html](https://maven.apache.org/guides/getting-started/maven-in-five-minutes.html)'
  prefs: []
  type: TYPE_NORMAL
- en: 'If we run the `package` goal now, Maven should run through all of the prerequisite
    steps and then produce an HPI file, which we can deploy to Jenkins by running
    the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: This phase will download all the required dependencies using the information
    in the POM file. It will then compile the Java code and would also run tests (if
    any existed in the expected location—`src/test`).
  prefs: []
  type: TYPE_NORMAL
- en: Depending on your Internet connection, this may take some time, as Maven will
    perform an initial download for all the declared dependencies (and their dependencies!)
    that it doesn't already have locally. In subsequent runs, things should be much
    quicker, as Maven will retain the downloaded resources in the `.m2/repository`
    cache folder, which is in your home directory next to settings.xml that we updated
    earlier.
  prefs: []
  type: TYPE_NORMAL
- en: On completion, you should now have a distributable `.hpi` file!
  prefs: []
  type: TYPE_NORMAL
- en: '![Installing Maven](../images/00039.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: As you can see from the preceding image, the console output that is produced
    near the end explains that the code has been compiled into a Java Archive (`.jar`)
    file, the resources (the Jelly, configuration, and HTML files) have been included,
    and everything has, in my case, been packaged into a resultant archive named `jenkinspluginexample.hpi`,
    which now resides in the `target/` directory.
  prefs: []
  type: TYPE_NORMAL
- en: We haven't written a line of code yet, but we have just produced our first Jenkins
    plugin!
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s now deploy this to a standard Jenkins instance:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the home page for your Jenkins instance.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Navigate to Jenkins **Home** | **Manage Jenkins**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select **Manage Plugins**, and then **Advanced**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Scroll down to the **Upload Plugin** section and click on **Browse**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Navigate to the local folder where your new `.hpi` file is (in the target directory
    of your project):![Installing Maven](../images/00040.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'After clicking the **Submit** button, you should see that your plugin is uploaded
    and installed on your Jenkins instance:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Installing Maven](../images/00041.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: You will now have a `TODO` plugin in your list of installed plugins, along with
    the Snapshot build number and your name as the author.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you now click on **Configure** of any Freestyle job, there will be a new
    option to add a build step called **Say hello world**:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Installing Maven](../images/00042.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Selecting this will produce the following dialog, where you supply your name:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Installing Maven](../images/00043.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Not too surprisingly, for a `Hello World` project, this will be displayed as
    an additional build step in the console output the next time you run this job:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Installing Maven](../images/00044.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: It looks pretty cool to have our own plugin installed and running on a Jenkins
    instance, and doing this for the first time is good fun. However, when you are
    developing a plugin, running through a process like this every time you make a
    small change is a bit more of a hassle than you may want!
  prefs: []
  type: TYPE_NORMAL
- en: Let's now look at making our first code change and a smarter and more efficient
    way to package, deploy, and test our code.
  prefs: []
  type: TYPE_NORMAL
- en: 'To start off with, make a tiny change as follows to the `HelloWorldBuilder.java`
    file, which is in your `src/main/java` directory:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '![Installing Maven](../images/00045.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Initially, the line was this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'I have simply altered the preceding line to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Instead of going all the way through the previous process again—compiling,
    packaging, and deploying through the Jenkins web page and so on—just to check
    this minor update, we can perform all these steps with one simple Maven command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: This will compile the code (after picking up our modification), and then start
    up and run a local instance of Jenkins on your machine with our newly updated
    plugin already deployed to it—this makes the testing of your changes much easier,
    quicker, and safer too.
  prefs: []
  type: TYPE_NORMAL
- en: 'To do this on Windows, first export the following settings:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'On Unix and Mac, do the equivalent, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, regardless of platform, call the `hpi:run` goal, as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: After this, you will be able to see Maven download dependencies and then start
    up a local Jetty instance that runs Jenkins with your plugin installed on it!
  prefs: []
  type: TYPE_NORMAL
- en: 'Keep an eye on your console output, and you will see when everything is complete
    whenever the following text is displayed: **INFO: Jenkins is fully up and running**.'
  prefs: []
  type: TYPE_NORMAL
- en: 'After this point, you can safely connect to the Jenkins instance by pointing
    your browser to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '`http://127.0.0.1:8080/jenkins/`'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Do not try to connect to the `8000` port you have set in `MAVEN_OPTS`—this is
    used for debugging, which we will take a look at later. Use port `8080`, and note
    that the appended `/jenkins/` path is also required in order to connect.
  prefs: []
  type: TYPE_NORMAL
- en: Now, we can create and configure a new Freestyle job and add in the same build
    step as before by selecting to use our **Say hello world** job and adding our
    name to it.
  prefs: []
  type: TYPE_NORMAL
- en: 'Running this new job should produce the expected output, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Installing Maven](../images/00046.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: This proves that our code change has been picked up and demonstrates just how
    quickly and easily you can make, test, package, deploy, and verify your plugin
    changes—one small Maven command does most of the work for you! After the initial
    setup and downloading, it's a fairly quick process too.
  prefs: []
  type: TYPE_NORMAL
- en: To make life even easier, we can set up an IDE to help us develop Jenkins plugins.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The official Jenkins Plugin Tutorial page is at [https://wiki.jenkins-ci.org/display/JENKINS/Plugin+tutorial](https://wiki.jenkins-ci.org/display/JENKINS/Plugin+tutorial).
    This tutorial contains steps for NetBeans, IntelliJ IDEA, and Eclipse. The first
    two are very simple, so we'll cover the Eclipse setup in more detail here.
  prefs: []
  type: TYPE_NORMAL
- en: 'The plugin guide currently recommends using this command to generate a new
    Eclipse workspace for plugin development:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: You need to update `/path/to/workspace` to point to a suitable workspace location
    on your system—this can be anywhere you like, but ideally, next to your other
    Eclipse workspace(s).
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: I had issues running the suggested command and found that `eclipse:add-maven-repo`
    is deprecated, so I updated this to `eclipse:configure-workspace` instead.
  prefs: []
  type: TYPE_NORMAL
- en: 'For my project, the following worked:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Make sure you run this command from within the same directory that you have
    used to create the `Hello World` plugin, as it requires the `pom.xml` file and
    other resources from here.
  prefs: []
  type: TYPE_NORMAL
- en: On completion, this step should successfully populate a new Eclipse `.metadata`
    directory in your new workspace and have all the required settings and resources
    in your project directory.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, open Eclipse and switch to your chosen workspace, select **Import** (under
    the **File** menu), select **General** and then **Existing Projects into Workspace**,
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Installing Maven](../images/00047.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Direct this dialog to the directory where you created your `Hello World` plugin
    (where the `pom.xml` file is), and Eclipse should automatically load up the project
    for you:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Installing Maven](../images/00048.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'On completion, you should have an IDE that looks something like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Installing Maven](../images/00049.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Now you can edit the Java classes and the plugin resources from within Eclipse.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Remember that you can also enable the Mylyn plugin that we set up earlier to
    keep an eye on how your most important Jenkins builds are doing!
  prefs: []
  type: TYPE_NORMAL
- en: You can also manage your project's POM file and run the Maven build from here
    too—right-click on the `pom.xml` file and select **Run as** and **Maven Build**,
    and Jenkins should start up directly in your Eclipse console now, with your plugin
    already deployed with the latest version of your code.
  prefs: []
  type: TYPE_NORMAL
- en: To test this setup, try making another very simple change—in the preceding image,
    I updated the output message to **Hello again**, just to be different. Saving
    the `Hello World` builder class and then running the Maven target `hpi:run` through
    Eclipse will fire up Jenkins, and you can see the alteration made in Eclipse.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can also run Jenkins in the **Debug** mode and set a breakpoint by clicking
    on the desired line of your code in Eclipse, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Installing Maven](../images/00050.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Here, we can see the breakpoint being activated when the build is run via Jenkins.
    At this point, the focus will automatically switch from Jenkins in the browser
    to the Eclipse IDE, where we can inspect the current values of the existing variables
    at run time. We can then walk through the code step by step by debugging the values
    in real time and monitoring the console output at each step.
  prefs: []
  type: TYPE_NORMAL
- en: This is a very handy development feature, and setting up your Jenkins plugin
    development environment in this manner can make things much more productive—and
    your life a lot easier!
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we have built, packaged, and deployed our own "bare-bones"
    Jenkins plugin.
  prefs: []
  type: TYPE_NORMAL
- en: We have looked at the tools and conventions used to develop Jenkins plugins.
    We have set up Java, Maven, and Eclipse on our development host and learned how
    to build, package, test, deploy, and even debug our own plugin.
  prefs: []
  type: TYPE_NORMAL
- en: The main thing that we are still missing is what you decide to put in the middle!
    This is what we will concentrate on in the next chapter.
  prefs: []
  type: TYPE_NORMAL
