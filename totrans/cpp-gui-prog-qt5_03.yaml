- en: Database Connection
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous chapter, we learned how to create a login page from scratch.
    However, it is not functional yet, as the login page is not connected to a database.
    In this chapter, you will learn how to connect your Qt application to a MySQL
    (or MariaDB) database that validates login credentials.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Introducing the MySQL database system
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting up the MySQL database
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: SQL commands
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Database connection in Qt
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Functional login page
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We will walk through this chapter in a step-by-step approach to discover the
    powerful features that come with Qt and allow your application to connect directly
    to a database without any additional third-party dependencies. Database querying
    is a huge topic by itself, but we will be able to learn the most basic commands
    from scratch through examples and practical methods.
  prefs: []
  type: TYPE_NORMAL
- en: 'Qt supports multiple different types of database systems:'
  prefs: []
  type: TYPE_NORMAL
- en: MySQL (or MariaDB)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: SQLite (version 2 and 3)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: IBM DB2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Oracle
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ODBC
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: PostgreSQL
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Sybase Adaptive Server
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Two of the most popular ones are MySQL and SQLite. The SQLite database is usually
    used offline and it doesn't require any setup as it uses an on-disk file format
    for storing data. Therefore, in this chapter, we will learn how to set up a MySQL
    database system instead, and at the same time learn how to connect our Qt application
    to a MySQL database. The C++ code used to connect to the MySQL database can be
    reused for connecting to other database systems without many alterations.
  prefs: []
  type: TYPE_NORMAL
- en: Introducing the MySQL database system
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**MySQL** is an open source database management system based on the relational
    model, which is the most common method used by modern database systems to store
    information for various purposes.'
  prefs: []
  type: TYPE_NORMAL
- en: Unlike some other legacy models—such as an object database system or a hierarchical
    database system—the relational model has been proven to be more user friendly
    and performs well beyond the other models. That's the reason why most of the modern
    database systems we see today are mostly using this method.
  prefs: []
  type: TYPE_NORMAL
- en: MySQL was originally developed by a Swedish company called **MySQL AB**, and
    its name is the combination of *My*, the name of the daughter of the company's
    co-founder, and *SQL*, the abbreviation for **Structured Query Language**.
  prefs: []
  type: TYPE_NORMAL
- en: Similar to Qt, MySQL has also been owned by multiple different people throughout
    its history. The most notable acquisition happened in 2008, where **Sun Microsystems**
    bought MySQL AB for $1 billion. One year later in 2009, **Oracle Corporation**
    acquired Sun Microsystems, and so MySQL is owned by Oracle up to this day. Even
    though MySQL changed hands several times, it still remains as an open source software
    that allows users to change the code to suit their own purposes.
  prefs: []
  type: TYPE_NORMAL
- en: Due to its open source nature, there are also other database systems out there
    that were derived/forked from the MySQL project, such as **MariaDB**, **Percona
    Server**, and so on. However, these alternatives are not fully compatible with
    MySQL as they have modified it to suit their own needs, and therefore some of
    the commands may be varied among these systems.
  prefs: []
  type: TYPE_NORMAL
- en: 'According to a 2017 survey carried out by **Stack Overflow**, MySQL is the
    most widely used database system among web developers, as we can see in the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/ea013fb4-46cf-44fc-ac35-1968cc90e84f.png)'
  prefs: []
  type: TYPE_IMG
- en: The survey result indicates that what you learn in this chapter can be applied
    to not just Qt projects but also web, mobile app, and other types of applications.
  prefs: []
  type: TYPE_NORMAL
- en: Furthermore, MySQL and its variants are being used by big corporations and project
    groups such as Facebook, YouTube, Twitter, NASA, Wordpress, Drupal, Airbnb, Spotify,
    and so on and so forth. This means that you can easily get answers when encountering
    any technical issues during development.
  prefs: []
  type: TYPE_NORMAL
- en: 'For more information regarding MySQL, please visit:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://www.mysql.com](https://www.mysql.com)'
  prefs: []
  type: TYPE_NORMAL
- en: Setting up the MySQL database
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are many different ways to set up your MySQL database. It really depends
    on the type of platforms you are running, whether it is Windows, Linux, Mac, or
    any other type of operating system; it will also depend on the purpose of your
    database—whether it's for development and testing, or for a large-scale production
    server.
  prefs: []
  type: TYPE_NORMAL
- en: For large scale services (such as social media), the best way is to compile
    MySQL from the source, because such as project requires a ton of optimization,
    configuration, and sometimes customization in order to handle the large amount
    of users and traffic.
  prefs: []
  type: TYPE_NORMAL
- en: However, you can just download the pre-compiled binaries if you're going for
    normal use, as the default configuration is pretty sufficient for that. You can
    install a standalone MySQL installer from their official website or the download
    installation packages that come with several other pieces of software besides
    MySQL.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we will be using a software package called **XAMPP**, which
    is a web server stack package developed by a group called **Apache Friends**.
    This package comes with **Apache**, **MariaDB**, **PHP**, and other optional services
    that you can add on during the installation process. Previously, MySQL was part
    of the package, but it has since been replaced with **MariaDB** starting from
    version 5.5.30 and 5.6.14\. MariaDB works almost the same as MySQL, except those
    commands involving advanced features, which we will not be using in this book.
  prefs: []
  type: TYPE_NORMAL
- en: The reason why we use XAMPP is that it has a control panel that can easily start
    and stop the services without using Command Prompt, and provides easy access to
    the configuration files without you having to dig into the installation directory
    by yourself. It is very quick and efficient for application development that involves
    frequent testings. However, it is not recommended that you use XAMPP on a production
    server as some of the security features have been disabled by default.
  prefs: []
  type: TYPE_NORMAL
- en: Alternatively, you may also install MySQL through other similar software packages
    such as **AppServ**, **AMPPS**, **LAMP** (Linux only), **WAMP** (Windows only),
    **Zend****Server**, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, let''s learn how to install XAMPP:'
  prefs: []
  type: TYPE_NORMAL
- en: 'First, go to their website at [https://www.apachefriends.org](https://www.apachefriends.org)
    and click on one of the download buttons located at the bottom of your screen,
    which displays the icon of your current operating system:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/d5053fc7-76bd-47ad-bf75-a82f1f8758db.png)'
  prefs: []
  type: TYPE_IMG
- en: Once you click on the Download button, the download process should start automatically
    within a few seconds, and it should proceed to install the program once it's done.
    Make sure that Apache and MySQL/MariaDB are included before the installation process
    starts.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'After you have installed XAMPP, launch the control panel from the start menu
    or from the desktop shortcut. After that, you may notice that nothing has happened.
    This is because the XAMPP control panel is hidden within the taskbar by default.
    You may display the control panel window by right-clicking on it and selecting
    the Show / Hide option in the pop-up menu. The following screenshot shows you
    what this looks like on a Windows machine. For Linux, the menu may look slightly
    different, but overall it is very similar. For macOS, you must launch XAMPP from
    the launchpad or from the dock:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/2a3b8dac-a0be-4737-9347-82c56c7345a1.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Once you have clicked the Show / Hide option, you will finally see the control
    panel window displayed on your screen. If you click the Show / Hide option again,
    the window will be hidden away:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/4984acd2-2086-41b0-bbcd-962dc8e2a416.png)'
  prefs: []
  type: TYPE_IMG
- en: Their control panel is pretty much self-explanatory at first glance. On the
    left, you can see the names of the services that are available in XAMPP, and on
    the right, you will see the buttons that indicate Start, Config, Logs, and so
    on. For some reason, XAMPP is showing MySQL as the module name but it is in fact
    running MariaDB. Don't worry; both work pretty much the same since MariaDB is
    a fork of MySQL.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In this chapter, we''ll only need Apache and MySQL (MariaDB), so let''s click
    the Start buttons of these services. After a second or two, you''ll see that the
    Start buttons are now labeled as Stop, which means the services have been launched!:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/ac835466-9711-40f6-b924-8cecf413aeff.png)'
  prefs: []
  type: TYPE_IMG
- en: 'To verify this, let''s open up the browser and type `localhost` as the website
    address. If you see something like the following image, it means that the Apache
    web server has been successfully launched!:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/3b8247ee-f9db-4a17-a1a8-ccc18d7147e4.png)'
  prefs: []
  type: TYPE_IMG
- en: Apache is very important here as we'll be using it to configure the database
    using a web-based administrative tool called **phpMyAdmin**. phpMyAdmin is an
    administrative tool for MySQL written in PHP scripting language, hence its name.
    Even though it was originally designed for MySQL, it works pretty well for MariaDB
    as well.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'To access the phpMyAdmin control panel, type `localhost/phpmyadmin` on your
    browser. After that, you should see something like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/5b480b92-1af6-46ae-8bf8-e0a965c6b8a0.png)'
  prefs: []
  type: TYPE_IMG
- en: On the left-hand side of the page, you will see the navigation panel, which
    allows you access to the different databases available in your MariaDB database.
    On the right-hand side of the page are various tools that let you view table,
    edit table, run SQL command, export data to spreadsheet, set privileges, and so
    on.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: By default, you can only modify the General settings of the database on the
    setting panel located on the right. You must select a database from the navigation
    panel on the left before you are able to modify the settings of a particular database.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A database is like a cabinet that you can store log books within. Each log book
    is called a table and each table contains data, which is sorted like a spreadsheet.
    When you want to obtain a data from MariaDB, you must specify which cabinet (database)
    and log book (table) you would like to access before getting the data from it.
    Hopefully, this will make you better understand the concept behind MariaDB and
    other similar database systems.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now, let''s get started by creating our very first database! To do so, you
    can either click the New button located above the database names on the navigation
    panel or click the Databases button located at the top of the menu. Both buttons
    will bring you to the Databases page, and you should be able to see this located
    below the menu buttons:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/14b5f1e8-da81-4fc8-a2ab-32ea8391e601.png)'
  prefs: []
  type: TYPE_IMG
- en: 'After that, let''s create our very first database! Type in your desired database
    name and click the Create button. Once the database has been created, you will
    be redirected to the Structure page, which will list down all the tables contained
    in this database. By default, your newly created database doesn''t contain any
    tables, so you will see a line of text that says No tables found in database:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/e4aa4deb-6437-4a98-98f9-f8ea2582bf7c.png)'
  prefs: []
  type: TYPE_IMG
- en: Guess what we'll be doing next? Correct, we will create our first table! First,
    let's insert the name of the table you want to create. Since we'll be doing a
    login page later in this chapter, let's name our table `user`. We'll leave the
    default number of columns as it is and click Go.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: After that, you will be redirected to another page, which contains many columns
    of input fields for you to fill in. Each column represents a data structure which
    will be added to your table after it's been created.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The first thing you need to add to the table structure is an ID that will automatically
    increase upon each new data insertion. Then, add a timestamp column to indicate
    the date and time of the data insertion, which is good for debugging. Last but
    not least, we will add a username column and password column for login validation.
    If you''re unsure on how to do this, please refer to the following image. Make
    sure you follow the settings that are being circled in the image:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/75358cae-706a-4724-bf52-f7e4b844bfff.png)'
  prefs: []
  type: TYPE_IMG
- en: The type of the structure is very important and must be set according to its
    intended purpose. For example, the id column must be set as INT (integer number)
    as it must be a full number, while username and password must be set as either
    VARCHAR or other similar data types (CHAR, TEXT, and so on) in order for it to
    save the data correctly.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The timestamp, on the other hand, must be set to TIMESTAMP type, and must set
    the default value to CURRENT_TIMESTAMP, which notifies MariaDB to automatically
    generate the current timestamp upon data insertion.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Please note that the index setting for the ID column must be set to PRIMARY,
    and make sure that the A_I (auto increment) checkbox is ticked. When you check
    the A_I checkbox, an Add Index window will appear. You can keep the default settings
    as they are and then you can click the Go button to complete the steps and start
    creating the table:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/edd187b5-7f50-47b4-9f89-d5caee38de4c.png)'
  prefs: []
  type: TYPE_IMG
- en: 'After you have created the new table, you should be able to see something similar
    like the following image. You can still edit the structure settings anytime by
    clicking the Change button; you can also remove any of the columns by clicking
    on the Drop button located at the right-hand side of the column. Please note that
    deleting a column will also remove all the existing data belonging to that column,
    and this action cannot be undone:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/6342b9cf-6219-4036-92a8-e4ed95cf1a96.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Even though we''ll usually add data to the database through our programs or
    web pages, we can also add data directly on phpMyAdmin for testing purposes. To
    add data using phpMyAdmin, first, you must create a database and table, which
    we have done in the previous steps. Then, click the Insert button located at the
    top of the menu:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/bf34412c-d063-4f91-8f52-053dd8ee6768.png)'
  prefs: []
  type: TYPE_IMG
- en: 'After that, you''ll see that a form has appeared, which resembles the data
    structure that we created previously:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/480a40bc-f234-468d-9184-1e3e5b45e03c.png)'
  prefs: []
  type: TYPE_IMG
- en: You can simply ignore the ID and timestamp values as they will be automatically
    generated when you save the data. In this case, only username and password need
    to be filled in. For the sake of testing, let's put `test` as the username and
    `123456` as the password. Then, click the Go button to save the data.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Please note that you should not save your password in a human-readable format
    on your actual production server. You must encrypt the password with a **cryptographic
    hash** function such as SHA-512, RIPEEMD-512, BLAKE2b, and so on before passing
    it to the database. This will ensure that the password is not readable by hackers
    in case your database is being compromised. We will cover this topic at the end
    of this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have finished setting up our database and inserted our first test
    data, let's proceed to learn some of the SQL commands!
  prefs: []
  type: TYPE_NORMAL
- en: SQL commands
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Most of the popular relational database management systems, such as **MySQL**,
    **MariaDB**, **Oracle SQL**, **Microsoft SQL**, and so on, use a type of declarative
    language called **SQL** (**Structured Query Language**) to interact with the database.
    SQL was initially developed by IBM engineers in the 1970s, but later on, it was
    further enhanced by **Oracle Corporation** and other emerging tech companies of
    that era.
  prefs: []
  type: TYPE_NORMAL
- en: Today, SQL has become a standard of the **American National Standards Institute**
    (**ANSI**) and of the **International Organization for Standardization** (**ISO**).
    SQL language has since been adopted by many different database systems and has
    become one of the most popular database languages in the modern era.
  prefs: []
  type: TYPE_NORMAL
- en: In this section, we will learn what some of the basic SQL commands you can use
    to interact with your MariaDB database are, specifically for obtaining, saving,
    modifying, and deleting your data from/to the database. These basic commands can
    be used in other types of SQL-based database systems as well as under the ANSI
    and ISO standards. Only, some of the more advanced/customized features could be
    different across different systems, so make sure that you read the system manual
    before using these advanced features.
  prefs: []
  type: TYPE_NORMAL
- en: Alright, let's get started!
  prefs: []
  type: TYPE_NORMAL
- en: SELECT
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Most of the SQL statements are one-word short and self-explanatory. This statement,
    for example, is used to select one or more columns from a specific table and to
    obtain the data from the said columns. Let's check out some of the sample commands
    that use the `SELECT` statement.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following command retrieves all the data of all the columns from the `user`
    table:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'The following command retrieves only the `username` column from the user table:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'The following command retrieves the `username` and `password` columns from
    the `user` table with the condition that the `id` equals `1`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'You can try out these commands by yourself using phpMyAdmin. To do that, click
    the SQL button located at the top of the menu in phpMyAdmin. After that, you can
    type the command in the text field below and click Go to execute the query:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/7a345815-c3c1-45bb-93aa-affbbcaee5fa.png)'
  prefs: []
  type: TYPE_IMG
- en: 'To learn more about the `SELECT` statement, please refer to the following link:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://dev.mysql.com/doc/refman/5.7/en/select.html](https://dev.mysql.com/doc/refman/5.7/en/select.html)'
  prefs: []
  type: TYPE_NORMAL
- en: INSERT
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Next, the `INSERT` statement is used to save new data into a database table.
    For example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: The preceding SQL command inserts `username` and `password` data into the `user`
    table. There are some other statements that can be used together with `INSERT`,
    such as `LOW_PRIORITY`, `DELAYED`, `HIGH_PRIORITY`, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: 'Please refer to the following link to learn more about these options:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://dev.mysql.com/doc/refman/5.7/en/insert.html](https://dev.mysql.com/doc/refman/5.7/en/insert.html)'
  prefs: []
  type: TYPE_NORMAL
- en: UPDATE
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `UPDATE` statement modifies existing data in the database. You must specify
    a condition for the `UPDATE` command as otherwise, it will modify every single
    piece of data in a table, which is not our intended behavior. Try the following
    command, which will change the `username` and `password` of the first user:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'The command will fail, however, if the user with ID `1` does not exist. The
    command will also return the status `0 rows affected` if the `username` and `password`
    data you provided matches exactly with the one stored in the database (nothing
    to change). For more information regarding the `UPDATE` statement, please refer
    to the following link:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://dev.mysql.com/doc/refman/5.7/en/update.html](https://dev.mysql.com/doc/refman/5.7/en/update.html)'
  prefs: []
  type: TYPE_NORMAL
- en: DELETE
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `DELETE` statement deletes data from a specific table of a database. For
    example, the following command deletes a data from the `user` table that carries
    the ID `1`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Even though you can use this statement to delete unwanted data, it is not recommended
    to delete any data from your database because the action cannot be undone. It
    is better to add another column to your table called status and use that to indicate
    whether data should be shown or not. For example, if your user deletes data on
    the front end application, set the status of that data to (let''s say) `1` instead
    of `0`. Then, when you want to display data on the front end, display only the
    data that carries a status of `0`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/7858c675-a8f2-41dd-8112-e762d1c1b0a8.png)'
  prefs: []
  type: TYPE_IMG
- en: 'This way, any data that has been accidentally deleted can be recovered with
    ease. You can also use a BOOLEAN type for this if you only plan to use true or
    false. I usually use TINYINT just in case I need a third or fourth status in the
    future. For more information regarding the `DELETE` statement, you can refer to
    the following link:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://dev.mysql.com/doc/refman/5.7/en/delete.html](https://dev.mysql.com/doc/refman/5.7/en/delete.html)'
  prefs: []
  type: TYPE_NORMAL
- en: JOIN
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The advantage of using a relational database management system is that the data
    can be easily joined together from different tables and can be returned to the
    user in a single bulk. This greatly improves the productivity of the developers
    as it allows fluidity and flexibility when it comes to designing a complex database
    structure.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are many types of JOIN statements in MariaDB/MySQL—INNER JOIN, FULL OUTER
    JOIN, LEFT JOIN, and RIGHT JOIN. All of these different JOIN statements behave
    differently when executed, which you can see in the following image:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/12b3d2f1-150c-48c3-b1d5-07f2d459d007.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Most of the time, we''ll be using the INNER JOIN statement, as it only returns
    the data that has matching values in both tables, and thus only returns a small
    amount of the data that is needed. The JOIN command is much more complicated than
    the others as you need to design the tables to be join-able in the first place.
    Before we start testing the JOIN command, let''s create another table to make
    this possible. We will call this new table department:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/02429334-d381-4597-82cc-d533541239a6.png)'
  prefs: []
  type: TYPE_IMG
- en: 'After that, add two departments, like so:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/e22b95e9-823e-4da3-8983-435a77825095.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Then, go to the user table, and at the structure page, scroll all the way to
    the bottom and look for the form shown, then click the Go button:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/ca934b9d-4c81-40e2-8830-f1ee803de1a0.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Add a new column called deptID (which stands for department ID) and set its
    data type to `int` (integer number):'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/50b28f30-fb37-402b-9748-76115be1cd2c.png)'
  prefs: []
  type: TYPE_IMG
- en: 'After that, set up a few test users and put each of their deptID as either
    `1` or `2`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/fc9743b9-80f9-45b3-b8f5-3c2dc3db7af2.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Please notice that I have also added the status column here for checking whether
    the user has been deleted or not. Once you have done with that, let''s try to
    run a sample command!:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'That looks quite complicated at first glance, but it really isn''t if you separate
    it into a few parts. We''ll start from the command within the `()` bracket first,
    in which we asked MariaDB/MySQL to select all columns within the `user` table
    that carry `deptID =  1`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'After that, contain it within a `()` bracket and name this entire command as
    `my_user.` After that, you can start joining your user table (now called `my_user`)
    with the department table by using the `INNER JOIN` statement. Here, we also added
    some conditions for it to look up the data, such as the ID of the department table
    must match the `deptID` of `my_user`, and the status value of `my_user` must be
    `0`, indicating that the data is still valid and not tagged as removed:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Lastly, add the following code in front to complete the SQL command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Let's try the preceding command and see if the result is what you expected.
  prefs: []
  type: TYPE_NORMAL
- en: You can join infinite numbers of tables using this method as long as the tables
    are linked to each another through matching columns.
  prefs: []
  type: TYPE_NORMAL
- en: 'To find out more about the **JOIN** statement, please visit the following link:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://dev.mysql.com/doc/refman/5.7/en/join.html](https://dev.mysql.com/doc/refman/5.7/en/join.html)'
  prefs: []
  type: TYPE_NORMAL
- en: There are many other SQL statements that we have not covered in this chapter,
    but the ones that we have covered are pretty much all you need to get started.
  prefs: []
  type: TYPE_NORMAL
- en: 'One last thing before we move on to the next section—we must create a user
    account for the application to access to our MariaDB/MySQL database. First of
    all, go to your phpMyAdmin home page and click User accounts on the top menu:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/e7591330-3f91-4f6c-9fe3-7cee39a65a11.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Then, go to the bottom and look for this link called Add user account:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/bf188b4e-ac18-4800-b4a4-f484bef7e05c.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Once you''re in the Add user account page, type in the User name and Password
    information in the Login Information form. Make sure that the Host name is set
    to Local:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/ab7d52be-0aba-4723-b40c-a90718e74ce5.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Then, scroll down and set the Global privileges of the user. Enabling the options
    within the Data section is well enough, but do not enable the other options as
    it might give hackers the privilege to alter your database structure once your
    server has been compromised:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/d3803205-cff4-4c72-ae76-9da02eba99a0.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Once you have created the user account, follow the following steps to allow
    the newly-created user access to the database called test (or any other table
    name of your choice):'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/89c0aee6-4bd7-430d-b521-4abf695e9ba9.png)'
  prefs: []
  type: TYPE_IMG
- en: After you have clicked the Go button, you have now given the user account the
    privilege to access the database! In the next section, we'll be learning how to
    connect our Qt application to the database.
  prefs: []
  type: TYPE_NORMAL
- en: Database connection in Qt
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that we have learned how to set up a functional MySQL/MariaDB database system,
    let's move a step further and discover the database connection module in Qt!
  prefs: []
  type: TYPE_NORMAL
- en: 'Before we continue working on our login page from the previous chapter, let''s
    start off with a new Qt project first so that it''s easier to demonstrate the
    functionality solely related to database connection and so that we don''t get
    distracted by the other stuff. This time, we''ll go for the Terminal-style application
    called Qt Console Application, as we don''t really need any GUI for this demonstration:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/b62b379e-c4f9-4152-9670-799387f56f43.png)'
  prefs: []
  type: TYPE_IMG
- en: 'After you have created the new project, you should only see two files in the
    project, that is, [project_name].pro and main.cpp:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/f74bcfc6-d1f9-463d-8fc1-25c4a112d9a6.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The first thing you need to do is to open up your project file (`.pro`), which
    in my case is DatabaseConnection.pro, and add the `sql` keyword at the back of
    the first line, like so:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'As simple as that, we have successfully imported the `sql` module into our
    Qt project! Then, open up `main.cpp` and you should see a very simple script that
    contains only eight lines of code. This is basically all you need to create an
    empty console application:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'In order for us to connect to our database, we must first import the relevant
    headers to `main.cpp`, like so:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Without these header files, we won't be able to use the functions provided by
    Qt's `sql` module, which we have imported previously. Additionally, we also added
    the `QDebug` header so that we can easily print out any text on the console display
    (similar to the `std::cout` function provided by C++'s standard library).
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, we''ll add some code to the `main.cpp` file. Add the following highlighted
    code before `return a.exec()`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Do note that the database name, username, and password could be different from
    what you have set in your database, so please make sure they are correct before
    compiling the project.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once you are done with that, let''s click the Run button and see what happens!:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/61992a63-5c9a-4319-95a0-50e25a5ee0ad.png)'
  prefs: []
  type: TYPE_IMG
- en: 'If you see the following error, don''t worry:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/1b176a50-7762-48d9-8b8f-a1db1165c9b8.png)'
  prefs: []
  type: TYPE_IMG
- en: That is simply because you must install the MariaDB Connector (or MySQL Connector
    if you're running MySQL) to your computer and copy the DLL file over to your Qt
    installation path. Please make sure that the DLL file matches your server's database
    library. You can open up your phpMyAdmin home page and see which library it is
    currently using.
  prefs: []
  type: TYPE_NORMAL
- en: 'For some reason, even though I''m running XAMPP with MariaDB, the library name
    here shows libmysql instead of libmariadb, so I had to install MySQL Connector
    instead:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/3b99df22-27e4-4703-92fb-9982f7e896eb.png)'
  prefs: []
  type: TYPE_IMG
- en: 'If you''re using MariaDB, please download the MariaDB Connector at the following
    link:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://downloads.mariadb.org/connector-c](https://downloads.mariadb.org/connector-c)
    If you''re using MySQL instead (or are having the same issue as I did), please
    visit the other link and download MySQL Connector:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://dev.mysql.com/downloads/connector/cpp/](https://dev.mysql.com/downloads/connector/cpp/)'
  prefs: []
  type: TYPE_NORMAL
- en: 'After you have downloaded the MariaDB Connector, install it on your computer:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/3766d4f4-d470-4bc6-8d6f-239d81751bcf.png)'
  prefs: []
  type: TYPE_IMG
- en: The preceding screenshot shows the installation process for a Windows machine.
    If you're running Linux, you must download the right package for your Linux distribution.
    If you're running Debian, Ubuntu, or one of its variants, download the Debian
    and Ubuntu packages. If you're running Red Hat, Fedora, CentOS, or one of its
    variants, download the Red Hat, Fedora, and CentOS packages. The installation
    for these packages are automated, so you're good to go. However, if you're running
    neither of those, you'll have to download one of the gzipped tar files listed
    on the download page that fits your system requirement.
  prefs: []
  type: TYPE_NORMAL
- en: 'For more information about installing MariaDB binary tarballs on Linux, please
    refer to the following link:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://mariadb.com/kb/en/library/installing-mariadb-binary-tarballs/](https://mariadb.com/kb/en/library/installing-mariadb-binary-tarballs/)'
  prefs: []
  type: TYPE_NORMAL
- en: As for macOS, you need to use a package manager called **Homebrew** to install
    MariaDB server.
  prefs: []
  type: TYPE_NORMAL
- en: 'For more information, check out the following link:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://mariadb.com/kb/en/library/installing-mariadb-on-macos-using-homebrew/](https://mariadb.com/kb/en/library/installing-mariadb-on-macos-using-homebrew/)'
  prefs: []
  type: TYPE_NORMAL
- en: Once you have installed it, go to its installation directory and look for the
    DLL file (`libmariadb.dll` for MariaDB or `libmysql.dll` for MySQL). For Linux
    and macOS, it's `libmariadb.so` or `libmysql.so` instead of DLL.
  prefs: []
  type: TYPE_NORMAL
- en: 'Then, copy the file over to your application''s build directory (the same folder
    as your application''s executable file). After that, try and run your application
    again:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/b0d5c6d5-4a32-43f6-9050-27f519df0800.png)'
  prefs: []
  type: TYPE_IMG
- en: If you still getting `Failed to connect` but without the `QMYSQL driver not
    loaded` message, please check your XAMPP control panel and make sure that your
    database service is running; also make sure that the database name, username,
    and password that you put in the code is all the correct information.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, we can start playing around with SQL commands! Add the following code
    before `return a.exec()`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding code sends the command text to the database and synchronously
    waits for the result to return from the server. After that, use a `while` loop
    to go through every single result and convert it to a string format. Then, display
    the result on the console window. If everything went right, you should see something
    like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/1de75368-744f-4875-8829-37ac18d64e11.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Let''s try out something more complex:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'This time, we used **INNER JOIN** to combine two tables to select the `username`
    and `department` name. To avoid confusion regarding the variable called `name`,
    rename it to `deptname` using the `AS` statement. After that, display both the
    `username` and `department` name on the console window:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/8b7da1e9-561b-44b2-b239-72c4041f0ccd.png)'
  prefs: []
  type: TYPE_IMG
- en: We're done... for now. Let's move on to the next section, where we will learn
    how to make our login page functional!
  prefs: []
  type: TYPE_NORMAL
- en: Creating our functional login page
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Since we have learned how to connect our Qt application to the MariaDB/MySQL
    database system, it's time to continue working on the login page! In the previous
    chapter, we learned how to set up the GUI of our login page. However, it didn't
    have any functionality at all as a login page since it doesn't connect to the
    database and verify login credentials. Therefore, we will learn how to achieve
    that by empowering Qt's `sql` module.
  prefs: []
  type: TYPE_NORMAL
- en: 'Just to recap—this is what the login screen looks like:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/cb136c81-3dfb-4e7b-83f5-61bb09344f75.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The very first thing we need to do now is to name the widgets that are important
    in this login page, which are the Username input, Password input, and the Submit
    button. You can set these properties by selecting the widget and looking for the
    property in the property editor:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/b729735b-5cfb-437d-9b48-f45a85d46314.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Then, set the echoMode of the password input as Password. This setting will
    hide the password visually by replacing it with dots:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/5a5a484f-a746-4be7-8841-08707e28016e.png)'
  prefs: []
  type: TYPE_IMG
- en: 'After that, right-click on the Submit button and select Go to slot... A window
    will pop up and ask you which signal to use. Select clicked() and click OK:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/aaf55004-4f8c-47b6-ba33-6aa31b5480b3.png)'
  prefs: []
  type: TYPE_IMG
- en: A new function called `on_loginButton_clicked()` will be automatically added
    to the `MainWindow` class. This function will be triggered by Qt when the Submit
    button is pressed by the user, and thus you just need to write the code here to
    submit the `username` and `password` to the database for login verification. The
    signal and slots mechanism is a special feature provided by Qt which is used for
    communication between objects. When one widget is emitting a signal, another widget
    will be notified and will proceed to run a specific function that is designed
    to react to the particular signal.
  prefs: []
  type: TYPE_NORMAL
- en: Let's check out the code.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, add in the `sql` keyword at your project (.pro) file:'
  prefs: []
  type: TYPE_NORMAL
- en: '`QT += core gui`'
  prefs: []
  type: TYPE_NORMAL
- en: '**sql**'
  prefs: []
  type: TYPE_NORMAL
- en: 'Then, proceed and add the relevant headers to `mainwindow.cpp`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, go back to `mainwindow.cpp` and add the following code to the `on_loginButton_clicked()`
    function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: Now, click the Run button and wait for the application to start. Then, key in
    any random `username` and `password`, followed by clicking on the submit button.
    You should now see your `username` and `password` being displayed on the application
    output window in Qt Creator.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, we''ll copy the SQL integration code we have written previously into
    `mainwindow.cpp`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: Do note that I've used some random text for the database name, username, and
    password. Please make sure you enter the correct details here and that they match
    with what you've set in the database system.
  prefs: []
  type: TYPE_NORMAL
- en: 'One minor thing we have changed for the preceding code is that we only need
    to call `db = QSqlDatabase::addDatabase("QMYSQL")` in `mainwindow.cpp` without
    the class name as the declaration `QSqlDatabase db` has now been relocated to
    `mainwindow.h`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'Lastly, we add in the code that combines the `username` and `password` information
    with the SQL command, and send the whole thing to the database for execution.
    If there is a result that matches the login information, then it means that the
    login has been successful, otherwise, it means the login has failed:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'Click the Run button again and see what happens when you click the Submit button:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/a486dbd1-070a-42c9-9c64-9b6f274b0987.png)'
  prefs: []
  type: TYPE_IMG
- en: Hip hip hooray! The login page is now fully functional!
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we learned how to set up a database system and make our Qt
    application connect to it. In the next chapter, we will learn how to draw graphs
    and charts using the powerful Qt Framework.
  prefs: []
  type: TYPE_NORMAL
