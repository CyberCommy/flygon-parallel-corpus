- en: Gathering Intel and Planning Attack Strategies
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following recipes:'
  prefs: []
  type: TYPE_NORMAL
- en: Getting a list of subdomains
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using Shodan for fun and profit
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Shodan Honeyscore
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Shodan plugins
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using Nmap to find open ports
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bypassing firewalls with Nmap
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Searching for open directories
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Performing deep magic with DMitry
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Hunting for SSL flaws
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Exploring connections with intrace
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Digging deep with theharvester
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Finding technology behind web apps
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Scanning IPs with masscan
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Sniffing around with Kismet
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Testing routers with firewalk
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We learned in the previous chapter the basics of hunting subdomains. In this
    chapter, we dive a little deeper and look at other different tools available for
    gathering Intel on our target. We start by using the infamous tools of Kali Linux.
  prefs: []
  type: TYPE_NORMAL
- en: Gathering information is a very crucial stage of performing a penetration test,
    as every next step we take after this will totally be an outcome of all the information
    we gather during this stage. So it is very important that we gather as much information
    as possible before jumping into the exploitation stage.
  prefs: []
  type: TYPE_NORMAL
- en: Getting a list of subdomains
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We don't always we have a situation where a client has defined a full detailed
    scope of what needs to be pentested. So we will use the following mentioned recipes
    to gather as much information as we can to perform a pentest.
  prefs: []
  type: TYPE_NORMAL
- en: Fierce
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We start with jumping into Kali's Terminal and using the first and most widely
    used tool `fierce`.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The following steps demonstrate the use of `fierce`:'
  prefs: []
  type: TYPE_NORMAL
- en: 'To launch fierce, we type `fierce -h` to see the help menu:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/85300354-60d2-4ea1-8258-6d2082bf627c.png)'
  prefs: []
  type: TYPE_IMG
- en: 'To perform a subdomain scan we use the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'The following screenshot shows the output of the preceding command:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/0a76a4d2-5034-4360-abfe-506bb041d434.png)'
  prefs: []
  type: TYPE_IMG
- en: DNSdumpster
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This is a free project by Hacker Target to look up subdomains. It relies on
    [https://scans.io/](https://scans.io/) for its results. It can also be used to
    get the subdomains of a website. We should always prefer to use more than one
    tool for subdomain enumeration as we may get something from other tools that the
    first one failed to pick.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'It is pretty simple to use. We type the domain name we want the subdomains
    for and it will show us the results:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/b0462e37-cb98-46a9-a70f-e06481f49932.png)'
  prefs: []
  type: TYPE_IMG
- en: Using Shodan for fun and profit
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Shodan is the world's first search engine to search for devices connected to
    the internet. It was launched in 2009 by John Matherly. Shodan can be used to
    look up webcams, databases, industrial systems, video games, and so on. Shodan
    mostly collects data on the most popular web services running, such as HTTP, HTTPS,
    MongoDB, FTP, and many more.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To use Shodan we will need to create an account on Shodan.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To learn about Shodan, follow the given steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open your browser and visit [https://www.shodan.io](https://www.shodan.io):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/c37be7d1-dcc2-4486-9a00-c02619411c09.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We begin by performing a simple search for the FTP services running. To do
    this we can use the following Shodan dorks: `port:"21"`. The following screenshot
    shows the search results:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/4f081bfa-6d92-4c2e-871e-9efdfc746d11.png)'
  prefs: []
  type: TYPE_IMG
- en: 'This search can be made more specific by specifying a particular country/organization:
    `port:"21" country:"IN"`. The following screenshot shows the search results:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/c6ddb2e6-ec35-4d64-a5d8-00290198facf.png)'
  prefs: []
  type: TYPE_IMG
- en: We can now see all the FTP servers running in India; we can also see the servers
    that allow anonymous login and the version of the FTP server they are running.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Next, we try the organization filter. It can be done by typing `port:"21" country:"IN"
    org:"BSNL"` as shown in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/881d975d-6c73-41ef-95f3-1c52947ed82b.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Shodan has other tags as well that can be used to perform advanced searches,
    such as:'
  prefs: []
  type: TYPE_NORMAL
- en: '`net`: to scan IP ranges'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`city`: to filter by city'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: More details can be found at [https://www.shodan.io/explore](https://www.shodan.io/explore).
  prefs: []
  type: TYPE_NORMAL
- en: Shodan Honeyscore
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Shodan Honeyscore is another great project built in the Python. It helps us
    figure out whether an IP address we have is a honeypot or a real system.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The following steps demonstrate the use of Shodan Honeyscore:'
  prefs: []
  type: TYPE_NORMAL
- en: 'To use Shodan Honeyscore we visit [https://honeyscore.shodan.io/](https://honeyscore.shodan.io/):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/f054bc50-87df-4843-a3c1-47f533282dec.png)'
  prefs: []
  type: TYPE_IMG
- en: Enter the IP address we want to check, and that's it!
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/24c6629e-7f52-48ac-bf38-c52c7f164ab5.png)'
  prefs: []
  type: TYPE_IMG
- en: Shodan plugins
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To make our life even easier, Shodan has plugins for Chrome and Firefox that
    can be used to check open ports for websites we visit on the go!
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We download and install the plugin from [https://www.shodan.io/](https://www.shodan.io/).
    Browse any website and we will see that by clicking on the plugin we can see the
    open ports:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/ff4ac8fa-50e4-491a-8832-10ece78296e1.png)'
  prefs: []
  type: TYPE_IMG
- en: See also
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The *Dnscan* recipe from [Chapter 1](c9685838-403e-40ce-bf19-d04d72e06e05.xhtml),
    *Kali â€“ An Introduction*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Digging deep with theharvester* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using Nmap to find open ports
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Network Mapper** (**Nmap**) is a security scanner written by Gordon Lyon.
    It is used to find hosts and services in a network. It first came out in September
    1997\. Nmap has various features as well as scripts to perform various tests such
    as finding the OS, service version, brute force default logins, and so on.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Some of the most common types of scan are:'
  prefs: []
  type: TYPE_NORMAL
- en: TCP `connect()` scan
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: SYN stealth scan
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: UDP scan
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ping scan
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Idle scan
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The following is the recipe for using Nmap:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Nmap is already installed in Kali Linux. We can type the following command
    to start it and see all the options available:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'The following screenshot shows the output of the preceding command:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/045da05e-ce64-4018-b197-2c5c551809e6.png)'
  prefs: []
  type: TYPE_IMG
- en: 'To perform a basic scan we use the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'The following screenshot shows the output of the preceding command:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/3273298a-1a37-4b34-ac5f-a459ff060532.png)'
  prefs: []
  type: TYPE_IMG
- en: '`-Pn` implies that we do not check whether the host is up or not by performing
    a ping request first. The `-sV` parameter is to list all the running services
    on the found open ports.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Another flag we can use is `-A`, which automatically performs OS detection,
    version detection, script scanning, and traceroute. The command is:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'To scan an IP range or multiple IPs, we can use this command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Using scripts
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The **Nmap Scripting Engine** (**NSE**) allows users to create their own scripts
    to perform different tasks automatically. These scripts are executed side by side
    when a scan is run. They can be used to perform more effective version detection,
    exploitation of the vulnerability, and so on. The command for using a script is:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '![](img/f1f9be51-5d1e-4f38-8e4f-8c3503ef4d39.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The output of the preceding command is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/d1bb1b36-57bb-44bc-8829-a20af81df217.png)'
  prefs: []
  type: TYPE_IMG
- en: Here the script `dns-brute` tries to fetch the available subdomains by brute
    forcing it against a set of common subdomain names.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The *Using Shodan for fun and profit* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: More information on the scripts can be found in the official NSE documentation
    at [https://nmap.org/nsedoc/](https://nmap.org/nsedoc/)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bypassing firewalls with Nmap
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Most of the time during a pentest, we will come across systems protected by
    firewalls or **Intrusion Detection Systems** (**IDS**). The Nmap provides different
    ways to bypass these IDS/firewalls to perform port scans on a network. In this
    recipe, we will learn some of the ways we can bypass firewalls.
  prefs: []
  type: TYPE_NORMAL
- en: TCP ACK scan
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The ACK scan (`-sA`) sends acknowledgment packets instead of SYN packets, and
    the firewall does not create logs of ACK packets as it will treat ACK packets
    as responses to SYN packets. It is mostly used to map the type of firewall being
    used.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The ACK scan was made to show unfiltered and filtered ports instead of open
    ones.
  prefs: []
  type: TYPE_NORMAL
- en: 'The command for ACK scan is:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s look at the comparison of how a normal scan differs from an ACK scan:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/e3889456-d344-4c12-afb2-b07c936f04ac.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Here we see the difference between a normal scan and an ACK scan:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/956854a7-c95f-441e-a13d-dc6797d923e4.png)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The scan results of filtered and unfiltered ports depends on whether a firewall
    being used is stateful or stateless. A stateful firewall checks if an incoming
    ACK packet is part of an existing connection or not. It blocks it if the packets
    are not part of any requested connection. Hence, the port will show up as filtered
    during a scan.
  prefs: []
  type: TYPE_NORMAL
- en: Whereas, in the case of a stateless firewall, it will not block the ACK packets
    and the ports will show up as unfiltered.
  prefs: []
  type: TYPE_NORMAL
- en: TCP Window scan
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Window scan (`-sW`) is almost the same as an ACK scan except it shows open and
    closed ports.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s look at the difference between a normal scan and a TCP scan:'
  prefs: []
  type: TYPE_NORMAL
- en: 'The command to run is:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s look at the comparison of how a normal scan differs from a TCP Window
    scan:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/982d2593-087e-4c94-bffb-f45d19e06880.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We can see the difference between the two scans in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/4eb0f5a2-2bce-45f1-b274-fbd0dac7bc4f.png)'
  prefs: []
  type: TYPE_IMG
- en: Idle scan
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Idle scanning is an advanced technique where no packets sent to the target can
    be traced back to the attacker machine. It requires a zombie host to be specified.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The command to do an idle scan is:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Idle scan works on the basis of a predictable IPID or an IP fragmentation ID
    of the zombie host. First, the IPID of the zombie host is checked and then a connection
    request is spoofed from that host to the target host. If the port is open, an
    acknowledgment is sent back to the zombie host which **resets** (**RST**) the
    connection as it has no history of opening such a connection. Next, the attacker
    checks the IPID on the zombie again; if it has changed by one step it implies
    an RST was received from the target. But if the IPID has changed by two steps
    it means a packet was received by the zombie host from the target host and there
    was an RST on the zombie host, which implies that the port is open.
  prefs: []
  type: TYPE_NORMAL
- en: Searching for open directories
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous recipe, we discussed how to find open ports on a network IP
    or domain name. We often see developers running web servers on different ports.
    Sometimes developers may also leave directories misconfigured that may contain
    juicy information for us. We have already covered dirsearch in the previous chapter;
    here we will look at alternatives.
  prefs: []
  type: TYPE_NORMAL
- en: The dirb tool
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `dirb` tool is a well-known tool that can be used to brute force open directories.
    Although it is generally slow and does not support multi-threading, it is still
    a great way to find directories/subdirectories that may have been left open due
    to a misconfiguration.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Type the following command to fire up the tool:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'The following screenshot shows the output of the preceding command:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/7ccd6dfa-64a0-46df-9fae-d6d362685cba.png)'
  prefs: []
  type: TYPE_IMG
- en: There's more...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'There are other options in `dirb`, as well, that come in handy:'
  prefs: []
  type: TYPE_NORMAL
- en: '`-a`: to specify a user agent'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-c`: to specify a cookie'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-H`: to enter a custom header'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-X`: to specify the file extension'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The *Dirsearch* recipe from [Chapter 1](c9685838-403e-40ce-bf19-d04d72e06e05.xhtml),
    *Kali â€“ An Introduction*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Performing deep magic with DMitry
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The **Deepmagic Information Gathering Tool** (**DMitry**) is a command-line
    tool open source application coded in C. It has the capability of gathering subdomains,
    email addresses, whois info, and so on, about a target.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To learn about DMitry, follow the given steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'We use a simple command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'The following screenshot shows the output of the preceding command:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/b68c984a-5e1f-442e-bc74-d6c2ed7b9557.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Next, we try performing an email, whois, TCP port scan, and subdomain search
    by using the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'The following screenshot shows the output of the preceding command:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/1f5adc31-c102-414d-8bdc-06680348ad9d.png)'
  prefs: []
  type: TYPE_IMG
- en: Hunting for SSL flaws
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Most of the web applications today use SSL to communicate with the server. The
    `sslscan` is a great tool to check SSL for flaws or misconfigurations.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To learn about `sslscan` follow the given steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'We will look at the help manual to see the various options the tool has:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'The following screenshot shows the output of the preceding command:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/9fd70237-5231-4993-b00a-dd03dc3c11f6.png)'
  prefs: []
  type: TYPE_IMG
- en: 'To run the tool against a host we type the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'The following screenshot shows the output of the preceding command:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/6fbdb7d9-86b0-4d42-b21c-208a4571b701.png)'
  prefs: []
  type: TYPE_IMG
- en: See also
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The *A tale of a bleeding heart* recipe from [Chapter 5](2fbf988a-afe8-4d88-ac57-6555e93d66b7.xhtml),
    *Network Exploitation on Current Exploitation*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: TLSSLed is also an alternative we can use in Kali to perform checks on SSL.
  prefs: []
  type: TYPE_NORMAL
- en: Exploring connections with intrace
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `intrace` tool is a great tool to enumerate IP hops on existing TCP connections.
    It can be useful for firewall bypassing and gathering more information about a
    network.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'The following screenshot shows the output of the preceding command:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/57200668-142c-4ad4-9ff1-a94c334b426b.png)'
  prefs: []
  type: TYPE_IMG
- en: Digging deep with theharvester
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `theharvester` tool is a great tool for penetration testing as it helps
    us find a lot of information about a company. It can be used to find email accounts,
    subdomains, and so on. In this recipe, we will learn how to use it to discover
    data.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The command is pretty simple:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'The following screenshot shows the output of the preceding command:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/1ac2e24e-7172-47b0-a166-d86a9488910d.png)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the preceding recipe, `-d` is for the domain name or the keyword we want
    to search, `-l` is for limiting the number of search results, and `-b` is the
    source we want the tool to use while gathering information. The tool supports
    Google, Google CSE, Bing, Bing API, PGP, LinkedIn, Google Profiles, people123,
    Jigsaw, Twitter, and Google Plus sources.
  prefs: []
  type: TYPE_NORMAL
- en: Finding the technology behind web apps
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There is no point starting a pentest against a web application without knowing
    what the actual technology behind it is. For example, it would be absolutely useless
    to run dirsearch to look for files with the extension `.php` when the technology
    is actually ASP.NET. So, in this recipe, we will learn to use a simple tool `whatweb`
    to understand the technology behind a web app. It comes by default in Kali.
  prefs: []
  type: TYPE_NORMAL
- en: It can also be installed manually from the URL [https://github.com/urbanadventurer/WhatWeb](https://github.com/urbanadventurer/WhatWeb).
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The use of `whatweb` can be done as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: 'The tool can be launched by using the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'The following screenshot shows the output of the preceding command:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/d6b1c83b-831f-4eb9-b7b3-a2cdbaebc2af.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The domain name can be given as a parameter, or multiple domain names can be
    entered by using a `--input-file` argument:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'The following screenshot shows the output of the preceding command:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/18d6e528-5d9b-4915-9e3b-047de25bca62.png)'
  prefs: []
  type: TYPE_IMG
- en: Scanning IPs with masscan
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `masscan` tool is an amazing tool; it is the fastest port scan tool. It
    is supposed to scan the entire internet when it transmits at a speed of 10 million
    packets per second. It is a good alternative for Nmap when we know exactly what
    ports we are looking for in a network.
  prefs: []
  type: TYPE_NORMAL
- en: It is similar to Nmap, however, in that it does not support default port scanning
    all ports must be specified using `-p`.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `masscan` tool is simple to use. We can begin a scan of a network by using
    the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'The following screenshot shows the output of the preceding command:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/5d155374-61cb-4994-9e75-a48bab2f4dc7.png)'
  prefs: []
  type: TYPE_IMG
- en: We can also specify the packet rate by using `--max-rate`. By default, the rate
    is `100` packets per second. Using it is not recommended as it will put a lot
    of load on the network device.
  prefs: []
  type: TYPE_NORMAL
- en: Sniffing around with Kismet
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Kismet is a layer 2 wireless network detector. It comes in handy because while
    performing pentest in a corporate environment, we may need to look for wireless
    networks as well. Kismet can sniff 802.11a/b/g/n traffic. It works with any wireless
    card that supports raw monitoring modes.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we will learn how to use Kismet to monitor Wi-Fi networks.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To learn about Kismet follow the given steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'We use the following command to launch Kismet:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'The following screenshot shows the output of the preceding command:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/5493fe78-c8cd-4789-b7bf-4f6c61853ed1.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Once the GUI is up, it will ask us to start the server, and we choose `yes`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/0b4e0d63-8022-40c1-8f75-9a9a6a10a03e.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Next, we need to specify a source interface, in our case it is `wlan0`, so
    we type that. Make sure the interface is in monitor mode before initializing it
    in Kismet:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/a33dde97-bad0-4394-80be-7dea40cd82cc.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now we will see a list of all the wireless networks around us:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/4a7ae25d-38de-4399-a0cb-2ef87a6c7f6e.png)'
  prefs: []
  type: TYPE_IMG
- en: 'By default, Kismet listens on all the channels, so we can specify a particular
    channel by selecting the entry Config Channel... from the Kismet menu:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/27cf346f-24c0-4708-bdb5-b377881b88b6.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We can choose the channel number here:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/329dd92b-610f-4050-860a-647c9c7c7cfc.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Kismet also allows us to see the signal to noise ratio. We can see that by
    selecting Channel Details... in the Windows menu:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/8df58adf-44cd-4d50-946c-3da348446927.png)'
  prefs: []
  type: TYPE_IMG
- en: 'This signal to noise ratio is very helpful during times of wardriving:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/3d9a1ef3-a427-4159-9d88-0465df617b8d.png)'
  prefs: []
  type: TYPE_IMG
- en: Testing routers with firewalk
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `firewalk` tool is a network security reconnaissance tool that helps us
    figure out whether our routers are actually doing the job they are supposed to
    do. It attempts to find what protocols a router/firewall will allow and what it
    will block.
  prefs: []
  type: TYPE_NORMAL
- en: This tool is incredibly useful during pentesting to verify and validate firewall
    policies in a corporate environment.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The following is the recipe for using `firewalk`:'
  prefs: []
  type: TYPE_NORMAL
- en: 'If `firewalk` is not found, we can install it using:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'We can use the following command to run firewalk:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'The following screenshot shows the output of the preceding command:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/35de97da-2b06-47dc-9934-cd6ac24ea7b1.png)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the preceding command, `-i` is for specifying the network interface, `-S`
    is for specifying the port numbers we want to test, and the next two are the router's
    IP address and the host's IP address that we want to check against our router.
  prefs: []
  type: TYPE_NORMAL
- en: Nmap also includes a script to perform firewalk. More information can be found
    at [https://nmap.org/nsedoc/](https://nmap.org/nsedoc/).
  prefs: []
  type: TYPE_NORMAL
