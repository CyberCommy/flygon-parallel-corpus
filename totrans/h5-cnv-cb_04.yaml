- en: Chapter 4. Mastering Transformations
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover:'
  prefs: []
  type: TYPE_NORMAL
- en: Translating the canvas context
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Rotating the canvas context
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Scaling the canvas context
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a mirror transform
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating custom transforms
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Shearing the canvas context
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Handling multiple transforms with the state stack
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Transforming a circle into an oval
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Rotating an image
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Drawing a simple logo and randomizing its position, rotation, and scale
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter will reveal the power of canvas transformations, which can drastically
    simplify complex drawings and provide new functionality that we wouldn't have
    had otherwise. Until now, we've been positioning elements on the screen directly
    with x and y coordinates. This can quickly become a problem if you've worked out
    the coordinates for each point of a complex drawing, and then later decide that
    the entire drawing needs to be repositioned, rotated, or scaled. Canvas transforms
    solve this problem by enabling the developer to translate, rotate, and scale entire
    sections of the canvas without having to rework the coordinates of each point
    that make up a drawing. In addition, canvas transforms also enable the developer
    to rotate and scale images and text, which isn't possible without transforms.
    Let's get started!
  prefs: []
  type: TYPE_NORMAL
- en: Translating the canvas context
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we'll learn how to perform the most basic and commonly used
    transformation available with the HTML5 canvas API—translation. If you're unfamiliar
    with transformation terminologies, "translation" is just a fancy way of saying
    "move". In this case, we'll be moving the context to a new location on the canvas.
  prefs: []
  type: TYPE_NORMAL
- en: '![Translating the canvas context](img/1369_04_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Follow these steps to draw a translated rectangle moved to the center of the
    canvas:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Define the canvas context and the dimensions for the rectangle:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Translate the context to the center of the canvas:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Draw a rectangle whose center lies on the top-left corner of the translated
    canvas context:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Embed the canvas tag inside the body of the HTML document:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Here's how it works!
  prefs: []
  type: TYPE_NORMAL
- en: '![canvas contexttranslating, stepsHow it works...](img/1369_04_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The idea behind HTML5 canvas transformations is to transform the canvas context
    in some way and then draw onto the canvas. In this recipe, we''ve translated the
    canvas context such that the top-left corner of the context has moved to the center
    of the canvas:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '*The* `tx` parameter corresponds to the horizontal translation, and the `ty`
    parameter corresponds to the vertical translation. Once the context has been transformed,
    we can draw a rectangle centered on the top-left corner of the canvas context.
    The end result is a translated rectangle that''s been moved to the center of the
    canvas.'
  prefs: []
  type: TYPE_NORMAL
- en: Rotating the canvas context
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The next type of transformation available with the HTML5 canvas API, and quite
    arguably the handiest, is the rotation transform. In this recipe, we'll first
    position the canvas context with a translation transform, and then we'll rotate
    the context with `rotate()` method.
  prefs: []
  type: TYPE_NORMAL
- en: '![Rotating the canvas context](img/1369_04_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Follow these steps to draw a rotated rectangle:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Define the canvas context and the dimensions for the rectangle:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Translate the canvas context and then rotate it by 45 degrees:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Draw the rectangle:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Embed the canvas tag inside the body of the HTML document:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Here's how it works!
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works...](img/1369_04_11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'To position and rotate the rectangle, we can translate the canvas context to
    the center of the canvas as we did in the previous recipe, and then we can rotate
    the canvas context using the rotation transform, which rotates the context about
    the top-left corner of the context:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: The parameter `theta` is in radians, and the transform rotates the context clockwise.
    Once the context has been translated and rotated, we can then draw the rectangle
    centered on the top-left corner of the context. The end result is a rotated rectangle
    centered on the canvas.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Notice that we've achieved this result by chaining two different transforms,
    a translation and a rotation. Each of the three transformations provided by the
    HTML5 canvas API apply a transformation matrix to the current state. For example,
    if we applied three translations one after another that moved the canvas context
    10 pixels to the right, the net result would be a translation 30 pixels to the
    right.
  prefs: []
  type: TYPE_NORMAL
- en: If we had wanted to rotate the rectangle about a different point, say the bottom-right
    corner of the rectangle, we could simply draw the bottom-right corner of the rectangle
    at the origin of the canvas context.
  prefs: []
  type: TYPE_NORMAL
- en: Translations and rotations are the most common transformation chains used when
    creating complex HTML5 canvas drawings. As we'll see in the next chapter, rotations
    are exceptionally useful when animating shapes that spin about an axis.
  prefs: []
  type: TYPE_NORMAL
- en: See also...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '*Swinging a pendulum* in [Chapter 5](ch05.html "Chapter 5. Bringing the Canvas
    to Life with Animation")'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Animating mechanical gears* in [Chapter 5](ch05.html "Chapter 5. Bringing
    the Canvas to Life with Animation")'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Animating a clock* in [Chapter 5](ch05.html "Chapter 5. Bringing the Canvas
    to Life with Animation")'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Scaling the canvas context
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In addition to translations and rotations, the HTML5 canvas API also provides
    us with a means for scaling the canvas context. In this recipe, we'll scale down
    the height of the canvas context using the `scale()` method.
  prefs: []
  type: TYPE_NORMAL
- en: '![Scaling the canvas context](img/1369_04_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Follow these steps to draw a scaled rectangle:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Define the canvas context and the dimensions for the rectangle:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Translate the canvas context and then scale the canvas context height by 50%:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Draw a rectangle whose center lies on the top-left corner of the canvas context:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Embed the canvas tag inside the body of the HTML document:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To scale the canvas context, we can simply use the scale transform:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: In the context's default state, the `sx` and `sy` parameters are normalized
    to `1` and `1`. As you might expect, the `sx` parameter corresponds to the horizontal
    scale, and the `sy` parameter corresponds to the vertical scale.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we've shrunk the vertical context by 50% by setting the `sy`
    parameter to a value of `0.5`. If we assign `sy` to a value greater than `1`,
    on the other hand, the context will stretch vertically. As we will see in the
    next recipe, if we assign negative values to either the `sx` or `sy` values, we
    will end up inverting the canvas context either horizontally or vertically, creating
    a mirror transform.
  prefs: []
  type: TYPE_NORMAL
- en: See also...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '*Oscillating a bubble* in [Chapter 5](ch05.html "Chapter 5. Bringing the Canvas
    to Life with Animation")'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a mirror transform
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Another interesting use of the scale transformation is its ability to mirror
    the canvas context vertically or horizontally. In this recipe, we'll mirror the
    canvas context horizontally, and then write out some backwards text.
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating a mirror transform](img/1369_04_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Follow these steps to write text backwards:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Define the canvas context:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Translate the canvas context and then flip the context horizontally using a
    negative `x` value:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'Write "Hello World!":'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'Embed the canvas tag into the body of the HTML document:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To create a mirror transform using the HTML5 canvas API, we can assign a negative
    value to `sx` or `sy` when using the `scale` method of the canvas context:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: In this recipe, we've translated the canvas context to the center of the canvas,
    and then inverted the context horizontally by applying a `–sx` value with the
    `scale()` transform.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a custom transform
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If you're looking to perform a custom transformation other than a translation,
    scale, or rotation, the HTML5 canvas API also provides a method which allows us
    to define a custom transformation matrix that can be applied to the current context.
    In this recipe, we'll manually create a translational transform to demonstrate
    how the `transform()` method works.
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating a custom transform](img/1369_04_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Follow these steps to perform a custom transform:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Define the canvas context and the dimensions for our rectangle:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'Apply a custom transform by manually translating the canvas context:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'Draw the rectangle:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'Embed the canvas element into the body of the HTML document:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this recipe, we''ve created a custom translation transform by applying a
    custom translation transformation matrix to the context state. A transformation
    matrix is simply a 2-dimensional matrix that can be used to transform the current
    matrix into a new one. Custom transformations can be applied to the context state
    using the `transform()` method of the canvas context:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'Where the parameters `a`, `b`, `c`, `d`, `e`, and `f` correspond to the following
    components of a transformation matrix:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How itcustom transformperforming, steps works...](img/1369_04_15.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Here, *x''* and *y''* are the new matrix *x* and *y* components after applying
    the transformation. The transformation matrix for a translation transform looks
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How itcustom transformperforming, steps works...](img/1369_04_13.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Where *tx* is the horizontal translation, and *ty* is the vertical translation.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In addition to the `transform()` method, which *applies* a transformation matrix
    to the current context state, we can also *set* the transformation matrix using
    the `setTransform()` method of the canvas context:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: This method can be useful if you want to directly set the transformation matrix
    of the context with a formulated transformation matrix, instead of obtaining the
    same result through a series of transformations.
  prefs: []
  type: TYPE_NORMAL
- en: Shearing the canvas context
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we'll use what we've learned from the `transform()` method of
    the canvas context to create a custom shear transformation to skew the canvas
    context horizontally.
  prefs: []
  type: TYPE_NORMAL
- en: '![Shearing the canvas context](img/1369_04_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Follow these steps to draw a sheared rectangle:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Define the canvas context and the dimensions for the rectangle:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'Translate the canvas context and then apply a custom shear transform to the
    context:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'Draw the rectangle:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'Embed the canvas element inside the body of the HTML document:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To shear the canvas context, we can apply the following transformation matrix:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works...](img/1369_04_14.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'We can use the `transform()` method with the following parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: The more we increase the value of `sx`, the greater the context is sheared horizontally.
    The more we increase the value of `sy`, the greater the context is sheared vertically.
  prefs: []
  type: TYPE_NORMAL
- en: Handling multiple transforms with the state stack
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that we have a good handle on transformations with the HTML5 canvas API,
    we're now in a position to further explore the canvas state stack and see what
    it can do for us with respect to transformations. In [Chapter 2](ch02.html "Chapter 2. Shape
    Drawing and Composites"), *Shape Drawing and Composites*, we covered the state
    stack, a very powerful yet sometimes overlooked property of the canvas API. Although
    the canvas state stack can help with managing styling, it's most common usage
    is to save and restore transformation states. In this recipe, we'll perform multiple
    transformations while saving the canvas state between each transformation, and
    then draw a sequence of rectangles after restoring each state to see the effects.
  prefs: []
  type: TYPE_NORMAL
- en: '![Handling multiple transforms with the state stack](img/1369_04_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Follow these steps to construct a state stack with four different states and
    then draw a rectangle after popping each state:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Define the canvas context and the dimensions for our rectangle:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'Push the current transformation state, the default state, onto the state stack,
    and translate the context:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'Push the current transformation state, the translated state, onto the stack,
    and rotate the context:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'Push the current transformation state, the translated and rotated state, onto
    the stack, and scale the context:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: 'Draw a blue rectangle:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: 'Restore the previous state from the state stack by popping off the current
    state, and then draw a red rectangle:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: 'Restore the previous state from the state stack by popping off the current
    state, and then draw a yellow rectangle:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: 'Restore the previous state from the state stack by popping off the current
    state, and then draw a green rectangle:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: 'Embed the canvas tag into the body of the HTML document:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'This recipe performs a series of three transformations, a translation, a rotation,
    and a scale transform, while pushing each transformation state onto the state
    stack with the `save()` operation. When the blue rectangle is drawn, it''s centered,
    rotated, and scaled. At this point, the state stack has four states (from bottom
    to top):'
  prefs: []
  type: TYPE_NORMAL
- en: Default state
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Translated state
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Translated and rotated state
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Current state (translated, rotated, and scaled state)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: After the blue rectangle is drawn, we use the `restore()` method to pop off
    the top state in the state stack, and restore the canvas context to the third
    state, in which the canvas context is translated and rotated. The red rectangle
    is drawn, and you can see that it's been translated and rotated, but not scaled.
    Next, we use the `restore()` method once again to pop off the top state in the
    state stack, and restore the second state, in which the canvas context is merely
    translated. We then draw a yellow rectangle, which is indeed just translated.
    Finally, we call the `restore()` method one last time to pop off the top state
    in the state stack, and return us to the default state. When we draw the green
    rectangle, it appears at the origin, because no transformation has been applied.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Using the state stack, we can jump between transformation states so that we
    don't have to constantly reset the state back to its default state and then translate
    each element separately. In addition, we can also use save-restore combinations
    to encapsulate transformations for a small piece of code without affecting shapes
    drawn afterwards.
  prefs: []
  type: TYPE_NORMAL
- en: Transforming a circle into an oval
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: One of the most common applications of the scale transform is to stretch a circle
    horizontally or vertically to create an oval. In this recipe, we'll create an
    oval by translating the canvas context, stretching it horizontally, and then drawing
    a circle.
  prefs: []
  type: TYPE_NORMAL
- en: '![Transforming a circle into an oval](img/1369_04_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Follow these steps to draw an oval:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Define a canvas context:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: 'Push the current transformation state, which is the default state, onto the
    state stack:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: 'Define the dimensions of the circle:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: 'Translate the canvas context to the center of the canvas, and then scale the
    context width to stretch it outwards:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: 'Draw the circle:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: 'Restore the previous transformation state, which was the default state, and
    also pop off the current transformation state from the state stack:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: 'Apply styling to the oval:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: 'Embed the canvas tag into the body of the HTML document:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To draw an oval using the HTML5 canvas API, we can simply translate the context
    to its desired position with the `translate()` method, stretch the context either
    vertically or horizontally with the `scale()` method, and then draw the circle.
    In this recipe, we've stretched the canvas context horizontally to create an oval
    that's twice as wide as it is tall.
  prefs: []
  type: TYPE_NORMAL
- en: As we want to apply a stroke style to the oval, we can use a save-restore combination
    to encapsulate the transformations used to create the oval so that they don't
    affect the styling of the oval afterwards.
  prefs: []
  type: TYPE_NORMAL
- en: If you try this recipe out for yourself, and you remove the `save()` and `restore()`
    methods, you'll find that the thickness of the line at the top and bottom of the
    oval is 5 pixels, and the thickness of the line on the sides of the oval is 10
    pixels, because the stroke style has also been stretched horizontally along with
    the circle.
  prefs: []
  type: TYPE_NORMAL
- en: See also...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '*Oscillating a bubble* in [Chapter 5](ch05.html "Chapter 5. Bringing the Canvas
    to Life with Animation")'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Rotating an image
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we'll rotate an image by translating and rotating the canvas
    context, and then drawing an image on the transformed context.
  prefs: []
  type: TYPE_NORMAL
- en: '![Rotating an image](img/1369_04_16.jpg)'
  prefs: []
  type: TYPE_IMG
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Follow these steps to rotate an image:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Define a canvas context:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a new `image` object and set its `onload` property:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: 'When the image loads, translate the context to the center of the canvas, rotate
    the context by 45 degrees counter-clockwise, and then draw the image:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: 'Set the source of the image:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: 'Embed the canvas tag inside the body of the HTML document:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To rotate an image, we can simply position the canvas context with the `translate()`
    method, rotate the context with the `rotate()` method, and then draw the image
    with the `drawImage()` method.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: It's also worth noting that in addition to rotating an image, another common
    transform used with images is the mirror transform. To mirror an image, we could
    have translated the context to the desired position, inverted the context horizontally
    with `scale(-1,1)` or inverted the context vertically with `scale(1,-1)`, and
    then drawn the image using `drawImage()`.
  prefs: []
  type: TYPE_NORMAL
- en: See also...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '*Creating a mirror transform* recipe'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Drawing a simple logo and randomizing its position, rotation, and scale
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The purpose of this recipe is to demonstrate the practical use of transformations
    by transforming a complex shape. In this case, our complex shape will be a logo,
    which is just some text with a couple of wavy lines below it. Transformations
    are exceedingly useful when we want to translate, rotate, or scale complex shapes.
    It's very common for developers to create functions that draw something complicated
    at the origin, and then use transforms to move it somewhere on the screen. In
    this recipe, we'll draw five randomly positioned, rotated, and scaled logos on
    the screen.
  prefs: []
  type: TYPE_NORMAL
- en: '![Drawing a simple logo and randomizing its position, rotation, and scale](img/1369_04_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Follow these steps to draw five randomly positioned, rotated, and scaled logos:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Define the `drawLogo()` function which draws a simple logo by writing out text
    and drawing two waves below it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: 'Define the `getRandomX()` function that returns a random `X` value between
    0 and the canvas width:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: 'Define the `getRandomY()` function that returns a random `Y` value between
    0 and the canvas height:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: 'Define the `getRandomSize()` function that returns a random size between 0
    and 5:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: 'Define the `getRandomAngle()` function that returns a random angle between
    0 and 2π:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: 'Define the canvas context:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a loop that draws five randomly positioned, rotated, and scaled logos:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs: []
  type: TYPE_PRE
- en: 'Embed the canvas tag inside the body of the HTML document:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Firstly, to draw our simple logo, we can create a function called `drawLogo()`
    that writes out the text **Hello Logo!** at the origin and then draws two wavy
    lines using the `bezierCurveTo()` method for each wave.
  prefs: []
  type: TYPE_NORMAL
- en: Next, to draw five randomly positioned, rotated, and scaled logos, we can create
    a few utility functions that return random values for the position, rotation,
    and scale, and then create a `for` loop that uses a save-restore combination for
    each iteration to induce state scope, perform the three transformations, and then
    draw the logo with the `drawLogo()` method. If you try out this recipe for yourself,
    you'll see that each of the five logos are positioned, rotated, and scaled differently
    each time you refresh the screen.
  prefs: []
  type: TYPE_NORMAL
