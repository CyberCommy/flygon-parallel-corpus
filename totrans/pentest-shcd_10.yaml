- en: Real-World Scenarios – Part 2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we will practice exploit development but from a different approach,
    which is our vulnerable parameter that will be inside the HTTP header. We will
    look at how to intercept and see the actual content of the HTTP header.
  prefs: []
  type: TYPE_NORMAL
- en: 'The topics covered in this chapter are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Sync Breeze Enterprise
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fuzzing
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Controlling the instruction pointer
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Injecting shellcode
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Sync Breeze Enterprise
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Our scenario today will be Sync Breeze Enterprise V.10.0.28\. You can see the
    exploit at [https://www.exploit-db.com/exploits/42928/](https://www.exploit-db.com/exploits/42928/)
    and you can download the vulnerable version from it or [https://www.exploit-db.com/apps/959f770895133edc4cf65a4a02d12da8-syncbreezeent_setup_v10.0.28.exe](https://www.exploit-db.com/apps/959f770895133edc4cf65a4a02d12da8-syncbreezeent_setup_v10.0.28.exe).
  prefs: []
  type: TYPE_NORMAL
- en: 'Download and install it. Then open it and go to Tools | Advanced Options |
    Server. Make sure that Enable Web Server on Port: 80 is activated:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00355.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Save the changes. Then, from our attacking machine and via Firefox, let''s
    connect to this service using port `80`, which gives us this page:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00356.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Now, let''s try to perform some fuzzing on the login''s parameter:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00357.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Fuzzing
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now, let''s generate some `A` characters using Python:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00358.gif)'
  prefs: []
  type: TYPE_IMG
- en: 'Let''s copy this string and use it as input for this login form:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00359.gif)'
  prefs: []
  type: TYPE_IMG
- en: 'Then, let''s copy the actual input from this window and get the length of the
    actual input:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00360.gif)'
  prefs: []
  type: TYPE_IMG
- en: 'The actual length of the input is `64` and we injected `100`. There is something
    at the client side that prevents us from injecting more than `64` characters.
    Let''s confirm it just by right-clicking on the `username` text input and then
    navigating to Inspect | Elements:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00361.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: We can simply change the `maxlength="64"` value and continue with the fuzzing,
    but we need to build our exploit. Let's try to look inside the HTTP header, using
    any proxy application, such as Burp Suite or OWASP **Zed Attack Proxy** (**ZAP**).
    I'm going to use Burp Suite here and set up a proxy so that I can intercept this
    HTTP header.
  prefs: []
  type: TYPE_NORMAL
- en: 'Start Burp Suite, then go to Proxy | Options, and make sure that Burp Suite
    is listening on port `8080` on the loopback address `127.0.0.1`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00362.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Then, through your browser, set a proxy on the loopback address `127.0.0.1`
    using port `8080`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00363.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Make the login page ready and activate the intercept in Burp Suite by navigating
    to Proxy | Intercept:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00364.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Now, the intercept is ready. Let''s inject any number of characters in the
    login form and then click on Login and get back to Burp Suite:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00365.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Close Burp Suite. Set the proxy back to normal and let''s build our fuzzing
    code using this header and fuzzing the `username` parameter:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s start with `300`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, attach Sync Breeze to the Immunity Debugger (run the Immunity Debugger
    as an administrator):'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00366.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Make sure to attach it to the server (`syncbrs`), not the client (`syncbrc`),
    then hit the run program.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, start the exploit code on our attacking machine:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00367.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Nothing happened. Let''s increase the fuzzing value to `700`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, re-run the exploit:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00368.gif)'
  prefs: []
  type: TYPE_IMG
- en: 'Again nothing happened. Let''s increase the fuzzing value to `1000`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, re-run the exploit:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00369.gif)'
  prefs: []
  type: TYPE_IMG
- en: 'It worked! Let''s take a look at the registers too:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00370.gif)'
  prefs: []
  type: TYPE_IMG
- en: 'There are the `A` characters in the stack:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00371.gif)'
  prefs: []
  type: TYPE_IMG
- en: Controlling the instruction pointer
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Okay, perfect. Let''s create the pattern to get the offset of the EIP:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, reset the junk value to the new pattern:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Close the Immunity Debugger and go to Task Manager | Services | Services...;
    now, select Sync Breeze Enterprise and then select Start to start the service
    again:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00372.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Then, make sure that the program is running and connected:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00373.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Now, run the Immunity Debugger (as an administrator) again, attach `syncbrs`,
    and hit the run program.
  prefs: []
  type: TYPE_NORMAL
- en: 'Then, run the exploit from the attacking machine:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00374.gif)'
  prefs: []
  type: TYPE_IMG
- en: 'The EIP value now is `42306142`; let''s locate this exact offset of EIP:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'The output for the preceding command can be seen in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00375.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Also, we could use the `mona` plugin inside the Immunity Debugger:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'The output of the preceding command can be seen in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00376.gif)'
  prefs: []
  type: TYPE_IMG
- en: 'Let''s confirm:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Close the Immunity Debugger and start the Sync Breeze Enterprise service and
    make sure the program is running and connected. Then, start the Immunity Debugger
    (as an administrator), attach `syncbrs`, and hit the run program.
  prefs: []
  type: TYPE_NORMAL
- en: 'Then, re-run the exploit:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00377.gif)'
  prefs: []
  type: TYPE_IMG
- en: 'Now, we can control the instruction pointer:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00378.gif)'
  prefs: []
  type: TYPE_IMG
- en: Injecting shell code
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'So, our final injection should look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00379.gif)'
  prefs: []
  type: TYPE_IMG
- en: Close the Immunity Debugger and start the Sync Breeze Enterprise service and
    make sure the program is running and connected. Then start the Immunity Debugger,
    attach `syncbrs`, and hit the run program.
  prefs: []
  type: TYPE_NORMAL
- en: 'Okay, let''s find `JMP ESP`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00380.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Then, search for `JMP ESP`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00381.gif)'
  prefs: []
  type: TYPE_IMG
- en: 'We got a long list of them; let''s just pick one, `10090c83`:'
  prefs: []
  type: TYPE_NORMAL
- en: We selected this address because this location is persistent to the application
    (`libspp.dll`). If we selected an address related to the system (such as `SHELL32.dll`
    or `USER32.dll`), then that address would change every time the system reboots.
    As we saw in the previous chapter, it would only work in the runtime and would
    be useless when the system reboots.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s also set up the NOP sled:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, let''s generate a bind TCP shell code on port `4321`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'The output for the preceding command can be seen in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00382.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Our final exploit code should look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Ready! Let's close the Immunity Debugger and start the Sync Breeze Enterprise
    service; then, run the exploit.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, connect the victim machine using the `nc` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'The output for the preceding command can be seen in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00383.gif)'
  prefs: []
  type: TYPE_IMG
- en: It worked!
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we performed the same steps as we did in the previous chapter,
    but we added a small part related to the HTTP header. What I want you to do is
    to navigate in [www.exploit-db.com](http://www.exploit-db.com), try to find any
    buffer overflow, and make your own exploits as we did here. The more you practice,
    the more you will master this attack!
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will take a look at a complete practical example of **structured
    exception handling** (**SEH**).
  prefs: []
  type: TYPE_NORMAL
