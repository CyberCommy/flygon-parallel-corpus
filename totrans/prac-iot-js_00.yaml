- en: Preface
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We are part of a generation where people have already started adapting to IoT
    products. There is a lot of hype about IoT. This book will focus on building IoT-based
    applications that will help you to achieve a higher level of understanding when
    it comes to IoT. It will follow a project-based approach that will teach you to
    build standalone exciting, applications and will also teach you to extend your
    project to another level. We are going to use JavaScript as our programming language
    and Raspberry Pi 3 as our hardware to build interesting IoT solutions.
  prefs: []
  type: TYPE_NORMAL
- en: What this book covers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '[Chapter 1](part0024.html#MSDG0-ce91715363d04669bca1c1545beb57ee), *The World
    of IoT*, introduces you to the world of IoT. We will be looking at the history
    of IoT, identifying a few use cases, and getting a technical overview of what
    were are going to cover in this book.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 2](part0032.html#UGI00-ce91715363d04669bca1c1545beb57ee), *IoTFW.js
    - I*, walks you through how to build a reference framework for developing IoT
    solutions using JavaScript. In this chapter, we cover the high-level architecture
    and get started with installing the required software. We will start with downloading
    the base application and stitching the Raspberry Pi together with the MQTTS broker
    and API engine.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 3](part0072.html#24L8G0-ce91715363d04669bca1c1545beb57ee), *IoTFW.js
    - II*, continues from where we left off in the previous chapter and completes
    the implementation of the API engine, web app, desktop app, and mobile app. At
    the end of this chapter, we implement a simple example with an LED and a temperature
    sensor, where instructions from the apps will turn the LED on/off and the value
    of the temperature sensor updates in real time.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 4](part0083.html#2F4UM0-ce91715363d04669bca1c1545beb57ee), *Smart
    Agriculture*, talks about building a simple weather station using the reference
    architecture we have built. The weather station consists of four sensors, and
    using these we can monitor farm conditions. We will be making the required changes
    to the API engine, web app, desktop app, and mobile app.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 5](part0095.html#2QJ5E0-ce91715363d04669bca1c1545beb57ee), *Smart
    Agriculture and Voice AI*, shows how we can leverage the power of voice AI technology
    to build interesting IoT solutions. We are going to work with the smart weather
    station and add a one-channel mechanical relay to this setup. Then, using voice
    commands and Amazon Alexa, we are going to manage the weather station.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 6](part0111.html#39REE0-ce91715363d04669bca1c1545beb57ee), *Smart
    Wearable*, talks about an interesting use case in the healthcare sector, postoperation
    patient care. Using a smart wearable device equipped with a simple accelerometer,
    one can easily detect whether a patient has fallen down. In this chapter, we build
    the required setup comment to gather the accelerometer values from the sensor.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 7](part0111.html#39REE0-ce91715363d04669bca1c1545beb57ee), *Smart
    Wearable and IFTTT*, explains how the data collected from the accelerometer can
    be used to detect falls and at the same time notify the API engine. Using a popular
    concept named **If This Then That** (**IFTTT**)—we will be building our own rules
    engine, which will process predefined rules and take action accordingly. In our
    example, we are going to send an email to the patient''s carer if a fall is detected.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 8](part0129.html#3R0OI0-ce91715363d04669bca1c1545beb57ee), *Raspberry
    Pi Image Streaming*, shows how to take advantage of the Raspberry Pi camera module
    to build a real-time image streaming (MJPEG technology) solution to monitor your
    surroundings from anywhere in the world. We will also implement motion-based video
    capture to capture video when motion is detected.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 9](part0143.html#48C0E0-ce91715363d04669bca1c1545beb57ee), *Smart
    Surveillance*, walks you through the process of image recognition using Amazon''s
    Rekognition platform. We will be capturing an image when motion is detected using
    the Raspberry Pi 3 camera module. Then, we will send this image to Amazon Rekognition
    platform to detect whether the image we have taken is of an intruder or of someone
    we know.'
  prefs: []
  type: TYPE_NORMAL
- en: What you need for this book
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To start building IoT solutions using JavaScript, you need to have the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Medium to advanced knowledge of JavaScript – ES5 and ES6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Medium to advanced knowledge of MEAN stack application development
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Medium to advanced knowledge of Angular 4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Medium to advanced knowledge of Electron Framework
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Medium to advanced knowledge of Ionic Framework 3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Novice to medium knowledge of digital electronic circuits
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Novice to medium knowledge of Raspberry Pi
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Novice to medium knowledge on sensors and actuators
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Who this book is for
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: It is for readers who are already well versed with JavaScript and want to extend
    their JavaScript knowledge to building hardware solutions in the field of IoT.
    IoT enthusiasts interested in creating exciting projects will also find this book
    useful. This book is also useful for readers who are good at developing standalone
    solutions using Raspberry Pi; this book will help them add IoT capabilities to
    their existing projects using the world's most misunderstood programming language.
  prefs: []
  type: TYPE_NORMAL
- en: Conventions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this book, you will find a number of text styles that distinguish between
    different kinds of information. Here are some examples of these styles and an
    explanation of their meaning. Code words in text, database table names, folder
    names, filenames, file extensions, pathnames, dummy URLs, user input, and Twitter
    handles are shown as follows: "Now, inside the `broker` folder, create another
    folder named `certs` and `cd` into that folder." A block of code is set as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Any command-line input or output is written as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '**New terms** and **important words** are shown in bold. Words that you see
    on the screen, for example, in menus or dialog boxes, appear in the text like
    this: "Once logged in, click on the Create New button to create a new DB."'
  prefs: []
  type: TYPE_NORMAL
- en: Warnings or important notes appear like this.Tips and tricks appear like this.
  prefs: []
  type: TYPE_NORMAL
