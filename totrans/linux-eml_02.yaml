- en: Chapter 2. Setting up Postfix
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第二章。设置Postfix
- en: The **Mail Transfer Agent** (**MTA**) is perhaps the most important part of
    a mail system. It is responsible for receiving messages from the Internet or from
    your own users and doing what it can to make sure that the messages arrive at
    their destinations—other mail servers or mailboxes of your users.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: '**邮件传输代理**（**MTA**）可能是邮件系统中最重要的部分。它负责接收来自互联网或您自己用户的消息，并尽其所能确保消息到达其目的地——其他邮件服务器或您用户的邮箱。'
- en: Postfix has been chosen as the mail transfer agent to be covered in this book.
    Postfix has a large feature set, it has an excellent security track record, it
    is fast, easy to configure, and under active development.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: Postfix被选为本书涵盖的邮件传输代理。Postfix具有丰富的功能集，具有出色的安全记录，运行速度快，易于配置，并处于活跃的开发中。
- en: This book assumes that you are running Postfix 2.0 or later. Any feature or
    behavior of Postfix that is specific to releases later than 2.0 will be noted.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本书假设您正在运行Postfix 2.0或更高版本。将注意到Postfix的任何特定于2.0之后版本的功能或行为。
- en: Introduction to Postfix
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Postfix简介
- en: This first section gives a brief introduction to Postfix, how it works, and
    describes how its behavior can be controlled.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 本节首先简要介绍了Postfix的工作原理，并描述了如何控制其行为。
- en: What is Postfix
  id: totrans-6
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 什么是Postfix
- en: '**Postfix** is a modular mail transfer agent developed by IBM researcher Wietse
    Venema. It is free software and was released publicly for the first time in 1998
    under the name **VMailer**. It is written in **C** and currently consists of about
    105,000 lines of code (comments excluded), which makes it fairly small. It works
    on most non-historic variants of UNIX and Linux.'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '**Postfix**是由IBM研究员Wietse Venema开发的模块化邮件传输代理。它是免费软件，于1998年首次以**VMailer**的名称公开发布。它用**C**编写，目前包含约105,000行代码（不包括注释），因此相当小。它适用于大多数非历史性的UNIX和Linux变体。'
- en: As a pure mail transfer agent, Postfix does not provide any service for allowing
    users to collect their mail via the **POP or IMAP** protocols. That task must
    be carried out by some other piece of software. The software discussed in this
    book for facilitating retrieval of mail from the host is **Courier IMAP.**
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 作为纯邮件传输代理，Postfix不提供任何允许用户通过**POP或IMAP**协议收取邮件的服务。这项任务必须由其他软件完成。本书讨论的用于从主机检索邮件的软件是**Courier
    IMAP**。
- en: All official Postfix documentation, as well as the source code and links to
    third-party software and archives of the very active mailing list can be found
    at the Postfix website at [http://www.postfix.org/.](http://www.postfix.org/.)
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 所有官方的Postfix文档，以及源代码和第三方软件的链接以及非常活跃的邮件列表的存档，都可以在Postfix网站[http://www.postfix.org/.](http://www.postfix.org/.)找到。
- en: 'Postfix architecture: An overview'
  id: totrans-10
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Postfix架构：概述
- en: This section will describe the different parts of the Postfix mail transfer
    agent and explain what really goes on when you send a message through the system.
    Although this might not be the most exciting text you have ever read, understanding
    the basics of how Postfix works is essential if you wish to successfully manage
    a Postfix server.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 本节将描述Postfix邮件传输代理的不同部分，并解释当您通过系统发送消息时实际发生了什么。虽然这可能不是您读过的最激动人心的文本，但如果您希望成功管理Postfix服务器，了解Postfix工作原理的基础是必不可少的。
- en: Postfix is divided into a number of separate **daemons**, or background processes,
    that communicate with each other. The daemons have distinct areas of responsibility,
    may run in different security contexts, and may have different rules for the number
    of processes of their type that may be created. All daemon processes are created
    as needed and are supervised by a mother daemon, the `master`. Some daemons are
    rarely or never restarted, but most of them will commit suicide after having served
    a configurable number of requests or after they have been idle for a configurable
    duration of time. The following figure shows how messages flow through a Postfix
    system, and can be used to accompany the text that follows. The solid lines show
    the path of the message content while dotted lines show other forms of communication.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: Postfix分为多个独立的**守护程序**或后台进程，它们相互通信。这些守护程序有不同的责任领域，可能在不同的安全上下文中运行，并可能具有不同的规则，以限制其类型的进程数量。所有守护进程都是根据需要创建的，并由母守护进程`master`监督。一些守护程序很少或从不重新启动，但它们中的大多数在服务了可配置数量的请求或在可配置的空闲时间后会自杀。下图显示了消息如何在Postfix系统中流动，并可用于随后的文本。实线显示了消息内容的路径，而虚线显示了其他形式的通信。
- en: '![Postfix architecture: An overview](img/8648_02_01.jpg)'
  id: totrans-13
  prefs: []
  type: TYPE_IMG
  zh: '![Postfix架构：概述](img/8648_02_01.jpg)'
- en: Not all Postfix daemons will be described here, just the important ones. A complete
    rundown of all daemons can be found in the *Postfix Architecture Overview* document
    at [http://www.postfix.org/OVERVIEW.html](http://www.postfix.org/OVERVIEW.html).
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 这里不会描述所有Postfix守护程序，只会描述重要的守护程序。可以在[http://www.postfix.org/OVERVIEW.html](http://www.postfix.org/OVERVIEW.html)的*Postfix架构概述*文档中找到所有守护程序的完整介绍。
- en: New message arrival
  id: totrans-15
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 新消息到达
- en: New messages can arrive into the Postfix system in three ways. The most common
    way is, of course, via the **Simple Mail Transfer Protocol**(**SMTP**). The daemon
    responsible for receiving messages via SMTP is named `smtpd`. The uncommon **QMQP
    Submission Protocol**, introduced in Daniel J. Bernstein's MTA **qmail**, is also
    supported with the `qmqpd` daemon. However, this book will not discuss QMQP.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 新消息可以通过三种方式进入Postfix系统。最常见的方式当然是通过**简单邮件传输协议**（**SMTP**）。负责通过SMTP接收消息的守护程序被命名为`smtpd`。不常见的**QMQP提交协议**，由Daniel
    J. Bernstein的MTA **qmail**引入，也支持`qmqpd`守护程序。然而，本书不会讨论QMQP。
- en: The third way in which a message can arrive is via local submission with the
    `sendmail` program. This is the standard way to submit mail messages from programs
    and scripts running on a UNIX host. Postfix provides a `sendmail` program that
    in most regards is compatible with the `sendmail` program of the sendmail mail
    transfer agent ([http://www.sendmail.org/](http://www.sendmail.org/)). Many UNIX
    mail user agents such as Mail, Pine, and Mutt, as well as webmail software such
    as SquirrelMail and IMP use the `sendmail` interface to submit new messages, although
    some software offer the option to submit messages via SMTP instead.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 消息到达的第三种方式是通过 `sendmail` 程序进行本地提交。这是从在 UNIX 主机上运行的程序和脚本提交邮件消息的标准方式。Postfix 提供了一个
    `sendmail` 程序，它在大多数方面与 sendmail 邮件传输代理的 `sendmail` 程序兼容（[http://www.sendmail.org/](http://www.sendmail.org/)）。许多
    UNIX 邮件用户代理，如 Mail、Pine 和 Mutt，以及诸如 SquirrelMail 和 IMP 等的网络邮件软件，使用 `sendmail`
    接口提交新消息，尽管一些软件提供通过 SMTP 提交消息的选项。
- en: The `sendmail` program hands messages on to the **postdrop** program, which
    places message files in the `maildrop` directory within the Postfix `queue` directory.
    The `pickup` daemon waits for messages to arrive into the `maildrop` directory,
    and passes them on to the `cleanup` daemon. From there on, `sendmail-`submitted
    messages take the same road as messages submitted via SMTP or QMQP. Messages can
    be submitted via `sendmail` even if Postfix is not running on the machine at the
    moment. When Postfix starts the next time, `pickup` will discover the queued-up
    message files and process them.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '`sendmail` 程序将消息传递给 **postdrop** 程序，后者将消息文件放在 Postfix `queue` 目录中的 `maildrop`
    目录中。`pickup` 守护进程等待消息到达 `maildrop` 目录，并将其传递给 `cleanup` 守护进程。从那里开始，通过 `sendmail`
    提交的消息与通过 SMTP 或 QMQP 提交的消息走同样的路线。即使 Postfix 当时没有在机器上运行，也可以通过 `sendmail` 提交消息。当
    Postfix 下次启动时，`pickup` 将发现排队的消息文件并处理它们。'
- en: When `smtpd, qmqpd`, or `pickup` receives a new message, it hands it to the
    `cleanup` daemon. This daemon enforces restrictions on the message's size, acts
    on any content restrictions configured by the user, rewrites sender and/or recipient
    addresses as required by the configuration, adds any required headers that are
    missing, and does a few other things. The `cleanup` daemon uses the `trivial-rewrite`
    daemon for some address rewriting operations. When done with its business, `cleanup`
    puts the queue file in the incoming queue and notifies the queue manager.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 当 `smtpd, qmqpd` 或 `pickup` 接收到新消息时，它将其交给 `cleanup` 守护进程。该守护进程对消息的大小施加限制，执行用户配置的任何内容限制，根据配置需要重写发件人和/或收件人地址，添加任何缺失的必需标头，并执行其他一些操作。`cleanup`
    守护进程使用 `trivial-rewrite` 守护进程进行一些地址重写操作。完成其任务后，`cleanup` 将队列文件放入传入队列并通知队列管理器。
- en: Scheduling message deliveries
  id: totrans-20
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 调度消息交付
- en: The **queue manager**, `qmgr`, is responsible for scheduling the delivery of
    messages. To decide how a message should be delivered to each recipient (namely
    the delivery method and the next destination), `qmgr` gets help from `trivial-rewrite`.
    The queue manager requests delivery agent processes from the `master` daemon and
    collects the results of the deliveries.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '**队列管理器** `qmgr` 负责安排消息的交付。为了决定如何将消息交付给每个收件人（即交付方法和下一个目的地），`qmgr` 从 `trivial-rewrite`
    获取帮助。队列管理器从 `master` 守护进程请求交付代理进程，并收集交付结果。'
- en: The queue manager is responsible for all messages from the point when the `cleanup`
    daemon hands them over until they are removed from the queue. The removal can
    be either because they have been successfully delivered to all recipients or because
    they have been in the queue for so long that Postfix decides that they are undeliverable.
    By default, messages will remain in the queue for a maximum of five days. The
    queue manager calls upon the `bounce` daemon to send a `bounce` message to the
    sender.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 队列管理器负责从 `cleanup` 守护进程交接消息开始直到它们从队列中被移除。移除可能是因为它们已成功交付给所有收件人，也可能是因为它们在队列中停留的时间太长，Postfix
    决定它们无法交付。默认情况下，消息将在队列中最多保留五天。队列管理器调用 `bounce` 守护进程向发件人发送 `bounce` 消息。
- en: The queue manager uses a number of directories for different purposes. The incoming
    queue is monitored for new messages, and the next stop is the **active queue**.
    The active queue contains the messages that are ready for delivery and are waiting
    to be dispatched to a delivery agent. If a delivery attempt fails, the message
    is moved to the **deferred queue**. That queue will be scanned periodically and,
    if it is time to retry the delivery of a message, the queue file for the message
    will be moved back into the active queue. Whether a delivery of a message should
    be reattempted when the queue is scanned depends on two—factors how much time
    has passed since the message arrived and the two configuration parameters that
    set a minimum and maximum time interval between the reattempts.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 队列管理器用于不同目的的多个目录。传入队列会监视新消息，下一个目的地是**活动队列**。活动队列包含准备交付的消息，并等待被派发到交付代理。如果交付尝试失败，消息将被移动到**延迟队列**。该队列将定期扫描，如果是重新尝试消息交付的时间，消息的队列文件将被移回活动队列。当队列扫描时，消息的交付是否应该重新尝试取决于两个因素：消息到达以来经过了多长时间以及设置重新尝试之间的最小和最大时间间隔的两个配置参数。
- en: In addition to these queues, there is also a special-purpose queue named **hold**.
    This queue contains messages that have been put on hold by the system administrator
    using the `postsuper` command. Postfix will not touch these messages at all until
    they are taken off hold with the same command. The hold queue can be used to temporarily
    stall the delivery of certain messages, for example because they are large and
    need to be delivered during off-peak hours, or because they are deemed suspicious
    and need to be inspected before they are allowed to be delivered.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
- en: The different queues used by Postfix are described in detail in the *QSHAPE_README*
    document ([http://www.postfix.org/QSHAPE_README.html](http://www.postfix.org/QSHAPE_README.html)).
    This document also describes `qshape`, a script that ships with Postfix and analyzes
    the contents of the queues, and helps you identify bottlenecks.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
- en: Message delivery
  id: totrans-26
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Postfix comes with a number of delivery agents that are used to deliver messages
    using various means and protocols. The delivery agents are the last daemons that
    touch the messages before they leave your system.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
- en: The Postfix SMTP client, `smtp` (not to be confused with the SMTP server, `smtpd`),
    is used to deliver messages to other hosts via the SMTP protocol. It is very similar
    to the LMTP client, `lmtp`, which delivers messages via the **Local Mail Transfer
    Protocol** (**LMTP**). As a network protocol, LMTP is very similar to SMTP, but
    where SMTP is used to transport messages between MTAs, LMTP is used for the final
    delivery of messages to the mail store from which users can access the messages.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
- en: The local delivery agent, `local`, delivers messages to users with normal accounts
    on the system. It supports aliases for simple mailing lists or role addresses
    as well as `.forward` files so that users themselves can set up forwarding of
    their messages.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
- en: If you have virtual mailbox users—users that do not have real accounts (for
    example, shell accounts) on the system their messages are delivered with `virtual`
    Postfix daemon.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
- en: If Postfix's standard delivery agents do not suffice, you can write your own
    delivery agent and have Postfix invoke it for some (or all) messages. In that
    case, you can either use the `pipe` daemon to have the message bodies given to
    your delivery agent via the standard input stream, or you can use the `spawn`
    daemon if you want to write a delivery agent that accepts messages via some network
    protocol.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
- en: Supporting programs
  id: totrans-32
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Postfix contains a number of supporting programs that you can use to control,
    test, and debug your Postfix system. This list is not exhaustive and gives only
    a brief description of each program, but some of the programs will be used later
    in the chapter. It is a good idea to get acquainted with them so that you at least
    know what sort of problems they can help you solve.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
- en: '| Program | Description |'
  id: totrans-34
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  id: totrans-35
  prefs: []
  type: TYPE_TB
- en: '| `mailq` | Views the current contents of the Postfix queue. The output includes
    the size, time of arrival, sender address, and recipient address/addresses of
    each message. Internally `mailq` just invokes the `postqueue` command and exists
    only for backwards compatibility with the `sendmail` mail transfer agent. |'
  id: totrans-36
  prefs: []
  type: TYPE_TB
- en: '| `newaliases` | Uses the `postalias` command to rebuild all local alias files.
    Local aliases will be covered in the *Virtual alias domains and local aliases*
    section. |'
  id: totrans-37
  prefs: []
  type: TYPE_TB
- en: '| `postalias` | Rebuilds a single alias file or queries an alias lookup table.
    |'
  id: totrans-38
  prefs: []
  type: TYPE_TB
- en: '| `postcat` | Shows the contents of a binary queue file residing in the Postfix
    queue. |'
  id: totrans-39
  prefs: []
  type: TYPE_TB
- en: '| `postconf` | Shows the current or default values of Postfix''s configuration
    parameters. Can also modify the main configuration file, which can be useful in
    scripts. |'
  id: totrans-40
  prefs: []
  type: TYPE_TB
- en: '| `postfix` | Starts, stops, or restarts Postfix, or reloads its configuration.
    Can also be used to check the integrity of the queue directories and a few other
    seldom-used administrative tasks. |'
  id: totrans-41
  prefs: []
  type: TYPE_TB
- en: '| `postmap` | Rebuilds an indexed database file used for table lookups or queries
    any lookup table. The *Troubleshooting lookup tables with postmap* section discusses
    how this can be used to debug a Postfix setup. |'
  id: totrans-42
  prefs: []
  type: TYPE_TB
  zh: '| `postmap` | 重建用于表查找或查询任何查找表的索引数据库文件。*使用postmap调试Postfix设置的查找表故障*部分讨论了如何使用它来调试Postfix设置。
    |'
- en: '| `postqueue` | Apart from carrying out the work for the `mailq` program, `postqueue`
    can also be used to flush the queue. Flushing a queue means moving all messages
    in the deferred queue to the active queue. This can be useful to schedule immediate
    message delivery, but be careful. If your server is heavily loaded and performing
    badly, flushing the queue will only make matters worse. The `sendmail` program
    can also be used to flush the queue, again for compatibility reasons. |'
  id: totrans-43
  prefs: []
  type: TYPE_TB
  zh: '| `postqueue` | 除了执行`mailq`程序的工作外，`postqueue`还可以用于刷新队列。刷新队列意味着将延迟队列中的所有消息移动到活动队列中。这可以用于安排立即发送消息，但要小心。如果您的服务器负载过重且性能不佳，刷新队列只会使情况变得更糟。`sendmail`程序也可以用于刷新队列，出于兼容性原因。
    |'
- en: '| `postsuper` | Allows you to take actions on already queued messages, for
    example deleting or re-queuing them. It can also perform a structural check on
    the queue directories and fix problems such as queue files having the wrong names.
    Such a check is, for example, necessary if the whole queue directory has been
    moved or restored from a backup. |'
  id: totrans-44
  prefs: []
  type: TYPE_TB
  zh: '| `postsuper` | 允许您对已排队的消息采取行动，例如删除或重新排队。它还可以对队列目录进行结构检查，并修复诸如队列文件名称错误之类的问题。例如，如果整个队列目录已经移动或从备份中恢复，这样的检查是必要的。
    |'
- en: Installation and basic configuration
  id: totrans-45
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装和基本配置
- en: In this section, we will take a look at how to obtain and install Postfix as
    well as how to make basic configuration changes. By the end of this section, you
    will be able to use Postfix to send and receive e-mail messages.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将介绍如何获取和安装Postfix以及如何进行基本配置更改。在本节结束时，您将能够使用Postfix发送和接收电子邮件。
- en: Choosing the Postfix version
  id: totrans-47
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 选择Postfix版本
- en: There are two separate branches of Postfix development—the official release
    and the experimental release. The official release is sometimes referred to as
    the stable release, but that is somewhat misleading as it implies that the experimental
    release is unstable. That is not the case. The experimental release is used to
    introduce all new Postfix features. When the implementations of the features and
    their interfaces (for example, their configuration parameters) have stabilized
    sufficiently, they are brought into the official release. Normally, the only changes
    made to the official release are bug fixes and fixes for portability problems.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: Postfix开发有两个独立的分支——官方发布和实验发布。官方发布有时被称为稳定发布，但这有点误导，因为这意味着实验发布不稳定。事实并非如此。实验发布用于引入所有新的Postfix功能。当功能的实现和它们的接口（例如它们的配置参数）已经足够稳定时，它们将被引入官方发布。通常，官方发布只会进行错误修复和可移植性问题的修复。
- en: The experimental release is usable in production environments, but the code
    is of course less tested, and configuration parameters and their semantics may
    change between releases. If you run the experimental builds, you are more likely
    to run into bugs and other oddities that the stable release should not have. On
    the other hand, you get access to new features before those using stable builds.
    If you choose to use the experimental release, you should build and install Postfix
    from source code instead of using some package management system (say RPMs). This
    will allow you to easily apply any patches for newly discovered problems.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 实验发布可在生产环境中使用，但代码当然经过的测试较少，配置参数及其语义可能会在发布之间发生变化。如果您运行实验构建，您更有可能遇到稳定发布不应该有的错误和其他奇怪的问题。另一方面，您可以在使用稳定构建之前访问新功能。如果选择使用实验发布，您应该从源代码构建和安装Postfix，而不是使用某些软件包管理系统（例如RPM）。这将使您能够轻松应用任何新发现问题的补丁。
- en: The experimental release has a version number that indicates the number of the
    upcoming official release together with the release date of the experimental release
    in question. For example, at the time of writing the current official release
    was 2.6.3 and the current experimental release was 2.7-20090807.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 实验发布的版本号表示即将发布的官方版本的编号以及所讨论的实验发布的发布日期。例如，在撰写本文时，当前的官方发布版本是2.6.3，当前的实验发布版本是2.7-20090807。
- en: Installing from a package
  id: totrans-51
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 从软件包安装
- en: Most Linux distributions include Postfix as a package that can easily be installed.
    You are better off with the distribution's package unless you are comfortable
    building software from source and, if required, debugging any build problems that
    might occur. Most packages come prebuilt with some extra features that would otherwise
    require a more complicated build process.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数Linux发行版都将Postfix作为一个可以轻松安装的软件包。除非您习惯于从源代码构建软件并且必要时调试可能出现的任何构建问题，否则最好使用发行版的软件包。大多数软件包都预先构建了一些额外的功能，否则需要更复杂的构建过程。
- en: Because there are many different packaging systems, the actual process of installing
    the Postfix package(s) will not be covered in this book. Please consult the documentation
    of your package management system for details.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 由于存在许多不同的打包系统，本书不会涵盖安装Postfix软件包的实际过程。请查阅您的软件包管理系统的文档以获取详细信息。
- en: Tip
  id: totrans-54
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: 'A word of caution for users of distributions that allow multiple mail transfer
    agents to be installed at the same time: If you are installing Postfix to replace
    another mail transfer agent, you should make sure the previous software is properly
    removed from your system. As probably all mail transfer agents provide a `sendmail`
    program, this file is installed with a name such as `sendmail.postfix`, and a
    symbolic link points from `sendmail` to `sendmail.postfix` or whatever mail transfer
    agent''s `sendmail` program is chosen to be the main one. If that symbolic link
    does not point to Postfix''s `sendmail` program, you might get surprised when
    you attempt to send a message.'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 对于允许同时安装多个邮件传输代理的发行版的用户，需要注意一点：如果您安装Postfix以替换另一个邮件传输代理，您应该确保以前的软件已从系统中正确删除。因为几乎所有的邮件传输代理都提供`sendmail`程序，这个文件安装时的名称可能是`sendmail.postfix`，并且符号链接从`sendmail`指向`sendmail.postfix`或者选择为主要邮件传输代理的任何邮件传输代理的`sendmail`程序。如果该符号链接不指向Postfix的`sendmail`程序，当您尝试发送消息时可能会感到惊讶。
- en: Installing from source code
  id: totrans-56
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 从源代码安装
- en: Installing Postfix from the original source code is not very difficult and enables
    you to run any version you want and not just the version chosen by the package
    maintainer of your Linux distribution. The Postfix source code can be downloaded
    from a number of mirrors accessible from the main Postfix website [http://www.postfix.org/download.html](http://www.postfix.org/download.html).
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 从原始源代码安装Postfix并不是很困难，这样可以让您运行任何您想要的版本，而不仅仅是您的Linux发行版的软件包维护者选择的版本。Postfix源代码可以从主要Postfix网站[http://www.postfix.org/download.html](http://www.postfix.org/download.html)上访问的多个镜像中下载。
- en: Once you have downloaded and unpacked the archive in a suitable directory (for
    example)`/usr/local/src`, you will notice that the Postfix build system does not
    use GNU autotools and therefore does not have the `configure` script that one
    normally finds in the root directory of the unpacked source code archive. The
    Postfix build system will automatically take care of this step. Do not worry if
    you want to install Postfix in some non‑standard location, you will have an opportunity
    to set various installation directories later.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦您在一个合适的目录（例如`/usr/local/src`）中下载并解压了存档文件，您会注意到Postfix构建系统不使用GNU autotools，因此在解压后的源代码存档的根目录中通常找不到`configure`脚本。Postfix构建系统将自动处理此步骤。如果您想要在一些非标准位置安装Postfix，不用担心，您将有机会稍后设置各种安装目录。
- en: 'If you need to enable non-standard features such as support for MySQL or LDAP
    lookups, you must inform the build system about this and where to find the libraries
    and header files for each feature. For exact instructions and details about each
    non-standard feature, please review the `README` file for each and every one of
    them. For example, the MySQL instructions found in `README_FILES/MYSQL_README`
    tell you to run the following command to enable MySQL support when building Postfix:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您需要启用非标准功能，例如对MySQL或LDAP查找的支持，您必须通知构建系统，并告知每个功能的库和头文件的位置。有关每个非标准功能的确切说明和详细信息，请查看每个`README`文件。例如，在`README_FILES/MYSQL_README`中找到的MySQL说明告诉您在构建Postfix时运行以下命令以启用MySQL支持：
- en: '[PRE0]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Adjust the paths to where the MySQL header files and shared libraries are located
    on your system. You must have the development header files and libraries for MySQL
    installed. Depending on your Linux distribution these may have to be installed
    separately.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 调整路径，使其指向系统中的MySQL头文件和共享库所在的位置。您必须安装了MySQL的开发头文件和库。根据您的Linux发行版，这些可能需要单独安装。
- en: 'If you need more than one extra feature, you will have to combine the commands
    given in each of the `README` files. Pay close attention when doing this. All
    quotes, equal signs, and spaces need to go at precisely the right places. The
    `CCARGS` and `AUXLIBS` variables must be set only once, so the general form of
    combining several configuration commands is this:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您需要多个额外功能，您将不得不结合每个`README`文件中给出的命令。在这样做时要特别注意。所有引号、等号和空格都需要放在准确的位置。`CCARGS`和`AUXLIBS`变量只能设置一次，因此结合几个配置命令的一般形式是这样的：
- en: '[PRE1]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'After this, you are all set to build Postfix using the following command:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 完成后，您可以使用以下命令构建Postfix：
- en: '[PRE2]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: When the build is complete (hopefully without errors), it is time to create
    a user and some groups that Postfix can use for many of its daemons. Start by
    adding two groups— `postfix` and `postdrop`. For example, you can use the `groupadd`
    tool that probably is available in your Linux distribution.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 构建完成后（希望没有错误），是时候创建一个用户和一些组，供Postfix的许多守护程序使用。首先添加两个组——`postfix`和`postdrop`。例如，您可以使用您的Linux发行版中可能可用的`groupadd`工具。
- en: '[PRE3]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Verify this by checking the contents of `/etc/group`. It should by now contain
    lines similar to this:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 通过检查`/etc/group`的内容来验证。现在它应该包含类似于这样的行：
- en: '[PRE4]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'The next step is to create a user named `postfix`. This user requires neither
    shell access nor a valid home directory. The primary group of this new user should
    be the newly created `postfix` group. Here is how to do it using the `useradd`
    tool:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 下一步是创建一个名为`postfix`的用户。这个用户既不需要shell访问权限，也不需要有效的主目录。这个新用户的主要组应该是新创建的`postfix`组。以下是使用`useradd`工具执行此操作的方法：
- en: '[PRE5]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Again, verify by checking the contents of `/etc/passwd:`
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 再次通过检查`/etc/passwd`的内容来验证：
- en: '[PRE6]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'The next and final step is to install your newly built Postfix. If you are
    installing Postfix for the first time in this particular Linux installation, run
    the following command:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 下一步，也是最后一步，是安装您新构建的Postfix。如果您是在此特定的Linux安装中首次安装Postfix，请运行以下命令：
- en: '[PRE7]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: This command will guide you through an interactive installation procedure where
    you get to choose various installation directories and file locations.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 此命令将引导您完成交互式安装过程，在此过程中，您可以选择各种安装目录和文件位置。
- en: 'If you are upgrading Postfix from a previous release, run the following command
    instead:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您正在从以前的版本升级Postfix，请运行以下命令：
- en: '[PRE8]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: All right! Postfix is now installed on your system and you will soon be ready
    to use it.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 好了！Postfix现在已经安装在您的系统上，很快您就可以开始使用它了。
- en: To make sure that Postfix starts when your system boots, some extra measures
    are needed. Most Linux systems have a `SysV-style init`, so you need to construct
    an `init` script and make proper links in the runlevel directories.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 为了确保Postfix在系统启动时启动，需要采取一些额外措施。大多数Linux系统都有`SysV-style init`，因此您需要构建一个`init`脚本，并在运行级别目录中创建适当的链接。
- en: The Postfix configuration
  id: totrans-81
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Postfix配置
- en: Like most UNIX software, Postfix reads its configuration from text files stored
    in the `/etc` directory or a subdirectory thereof. Postfix configuration files
    are usually stored in `/etc/postfix`, but you can configure Postfix to use any
    other directory. Postfix uses two main configuration files, `master.cf` and `main.cf`,
    and any auxiliary files that you set up yourself.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 像大多数UNIX软件一样，Postfix从存储在`/etc`目录或其子目录中的文本文件中读取其配置。Postfix配置文件通常存储在`/etc/postfix`中，但您可以配置Postfix使用任何其他目录。Postfix使用两个主要配置文件，`master.cf`和`main.cf`，以及您自己设置的任何辅助文件。
- en: After a change to any of these files, Postfix must be reloaded. This can be
    done with the same program that started Postfix, either via the `init` scripts
    or via some other service management tool that your distribution provides.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 对这些文件的任何更改后，必须重新加载Postfix。可以使用启动Postfix的相同程序来执行此操作，可以通过`init`脚本或您的发行版提供的其他一些服务管理工具来执行。
- en: '[PRE9]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Note
  id: totrans-85
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: '**Postfix restart required after changing**'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: '**更改后需要重新启动Postfix**'
- en: If the `inet_interfaces` parameter is changed, a reload is not enough. Postfix
    must be stopped and restarted for the changes to take effect. This is also true
    for the `inet_protocols` parameter introduced in Postfix 2.2.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 如果更改`inet_interfaces`参数，则仅重新加载是不够的。必须停止并重新启动Postfix才能使更改生效。对于Postfix 2.2中引入的`inet_protocols`参数也是如此。
- en: main.cf
  id: totrans-88
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: main.cf
- en: 'The file you will be editing most frequently is `main.cf`. This file defines
    the parameters that control the behavior of Postfix''s daemon processes. Each
    line has the following form:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 您将经常编辑的文件是`main.cf`。该文件定义了控制Postfix守护进程行为的参数。每行的格式如下：
- en: '[PRE10]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'This simply means that the configuration parameter named `parameter` is assigned
    the contents `value`. A parameter may only be specified once in `main.cf`. If
    you mistakenly give the same parameter different contents at different places
    in `main.cf`, the last occurrence will be the one used by Postfix. Apart from
    this, the order in which parameters are listed in `main.cf` is insignificant.
    However, within the parameter contents the order of the keywords may matter. For
    example, the following two parameter settings are not necessarily equivalent:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 这只是意味着名为`parameter`的配置参数被赋予内容`value`。在`main.cf`中，一个参数只能被指定一次。如果您在`main.cf`的不同位置错误地给出相同参数不同的内容，Postfix将使用最后出现的内容。除此之外，在`main.cf`中列出参数的顺序是无关紧要的。但是，在参数内容中，关键字的顺序可能很重要。例如，以下两个参数设置不一定是等价的：
- en: '[PRE11]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: If the value of a parameter is not specified in `main.cf`, Postfix will use
    a default. The default for most parameters is hardwired in the source code, but
    some default values are determined at build time and a few of them at run time.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 如果在`main.cf`中未指定参数的值，Postfix将使用默认值。大多数参数的默认值在源代码中是硬编码的，但有些默认值是在构建时确定的，还有一些是在运行时确定的。
- en: Lines in `main.cf` can be marked as comments by starting them with `#`.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 在`main.cf`中以`#`开头的行可以标记为注释。
- en: '[PRE12]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'This short example also shows how the current value of another parameter can
    be inserted when setting a parameter value; simply type a dollar sign directly
    followed by the name of the parameter whose value you wish to obtain. The last
    line in the previous code snippet is equivalent to the following:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 这个简短的例子还展示了在设置参数值时如何插入另一个参数的当前值；只需直接输入一个美元符号，后面紧跟您希望获得其值的参数的名称。前面代码片段中的最后一行等同于以下内容：
- en: '[PRE13]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Sometimes it is not convenient to have everything on one line. By starting
    a line with whitespace, you tell Postfix that the line is a continuation of the
    previous line. For example, the following two are equivalent:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 有时将所有内容放在一行上并不方便。通过以空格开头的方式，您告诉Postfix该行是前一行的延续。例如，以下两种方式是等价的：
- en: '[PRE14]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Starting with Postfix 2.1, the format of the `main.cf` configuration file is
    documented in the `postconf(5)` manual page that also describes all available
    configuration parameters. The manual page is available online from [http://www.postfix.org/postconf.5.html](http://www.postfix.org/postconf.5.html).
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 从Postfix 2.1开始，`main.cf`配置文件的格式在`postconf(5)`手册页面中有详细说明，该页面还描述了所有可用的配置参数。该手册页面可从[http://www.postfix.org/postconf.5.html](http://www.postfix.org/postconf.5.html)在线获取。
- en: The `postconf` program is very useful for examining the current and default
    value of `main.cf` parameters. Start the program with one or more parameter names
    as options and it will report the values that Postfix would use. If you use the
    `-d` option, `postconf` will report the default value of the parameter(s) you
    list.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: '`postconf`程序非常有用，可以用来检查`main.cf`参数的当前值和默认值。使用一个或多个参数名称作为选项启动程序，它将报告Postfix将使用的值。如果使用`-d`选项，`postconf`将报告您列出的参数的默认值。'
- en: 'For example, here is how to compare the current value of `mydestination` with
    its default value:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，以下是如何比较`mydestination`的当前值与其默认值：
- en: '[PRE15]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Using this method is often quicker than looking in `main.cf` or wading through
    a huge manual page to find the default value. It also reveals the actual value
    that Postfix thinks a parameter has, making it easier to spot typing errors.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 使用这种方法通常比查看`main.cf`或浏览庞大的手册页面以找到默认值更快。它还揭示了Postfix认为参数具有的实际值，使得更容易发现打字错误。
- en: In addition to displaying `main.cf` configuration parameters, the `postconf`
    program can edit `main.cf` for you. This is especially useful if you want to automate
    configuration changes in scripts. This is done with the `-e` option that expects
    one or more parameter assignments to follow.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: master.cf
  id: totrans-107
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `master.cf` file configures the Postfix master daemon that was discussed
    earlier. For most simple Postfix setups, `master.cf` does not need to be touched
    at all.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
- en: Each line in `master.cf` defines a service that a certain program carries out.
    For example, the daemon that receives and processes SMTP connections, `smtpd`,
    is one service. The program that delivers messages to the local users, `local`,
    is another service. In addition to the 15 20 services that Postfix defines from
    the start, you can add your own services.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
- en: The fifth column in `master.cf` controls whether each service should be run
    in a `chroot` environment. `chroot` is a UNIX feature that changes the root of
    the file system, making it impossible to access a file outside the new root directory
    even if a running process is compromised by an evildoer with root privileges.
    The source distribution of Postfix disables `chroot` completely by default, but
    some Linux distributions have it enabled. Although `chroot` is a security feature
    that can be quite useful as an extra safety net, it makes Postfix more difficult
    to maintain and is more or less useless unless the rest of your system is tightly
    secured.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
- en: In Postfix 2.2 and later, the format of the `master.cf` configuration file is
    documented in the `master(5)` manual page. In earlier releases, most of that information
    can be found in comments in the `master.cf` file itself.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
- en: Lookup tables
  id: totrans-112
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Some information cannot be conveniently represented in `main.cf` or `master.cf`.
    Postfix's concept of lookup tables allows information to be stored in external
    files, relational databases, or LDAP directories.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
- en: To Postfix, a lookup table is an abstract entity that maps one string, the **lookup
    key**, to another string, the **lookup result**. Those who are mathematically
    inclined may look upon it as a function or as a collection of (key, value) tuples,
    and programmers may recognize it as a hash table. Basically, it functions like
    a phonebook; you look up a name and get a phone number or an address back.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
- en: Postfix supports many different kinds of lookup tables. Some of them are referred
    to as *indexed*, meaning that the `postmap` command is used to compile the input
    file written by the user to a binary format the Postfix reads. This is done for
    performance reasons and allows the tables to contain tens of thousands or even
    hundreds of thousands of entries without affecting performance. This means you
    need to remember to use `postmap` after editing the file.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
- en: 'The following table describes the most important lookup table types:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
- en: '| Type | Description |'
  id: totrans-117
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  id: totrans-118
  prefs: []
  type: TYPE_TB
- en: '| `cdb` | An indexed map type that uses the CDB library. Very fast for large
    number of entries. Supported by Postfix 2.2 and later versions. |'
  id: totrans-119
  prefs: []
  type: TYPE_TB
- en: '| `cidr` | Allows lookups of IP addresses using the CIDR notation. Supported
    by Postfix 2.1 and later versions. |'
  id: totrans-120
  prefs: []
  type: TYPE_TB
- en: '| `dbm` | DBM is a classic UNIX indexed database format that is available on
    Linux too, but its use is discouraged because it uses two files to represent the
    database. This increases the risk of inconsistencies as the two files cannot be
    updated atomically. Use hash or cdb instead. |'
  id: totrans-121
  prefs: []
  type: TYPE_TB
- en: '| `hash` | This indexed lookup table type is probably the most commonly used,
    and utilizes the Berkeley DB library. |'
  id: totrans-122
  prefs: []
  type: TYPE_TB
- en: '| `ldap` | LDAP directories are often used in corporate and university environments
    to store user databases. Microsoft''s Active Directory is also accessible through
    LDAP, simplifying the use of Postfix in a heterogeneous environment. |'
  id: totrans-123
  prefs: []
  type: TYPE_TB
- en: '| `mysql` | The well-known MySQL relational database engine is supported, allowing
    you to make almost any type of SQL query. |'
  id: totrans-124
  prefs: []
  type: TYPE_TB
- en: '| `pcre` | Allows matching the looked-up strings against a list of regular
    expressions where the first matching expression wins. Uses the widespread **Perl
    Compatible Regular Expressions** (**PCRE**) library. |'
  id: totrans-125
  prefs: []
  type: TYPE_TB
  zh: '| `pcre` | 允许将查找的字符串与一系列正则表达式进行匹配，第一个匹配的表达式获胜。使用广泛使用的**Perl兼容正则表达式**（**PCRE**）库。|'
- en: '| `pgsql` | The PostgreSQL relational database engine is also supported. |'
  id: totrans-126
  prefs: []
  type: TYPE_TB
  zh: '| `pgsql` | 也支持PostgreSQL关系数据库引擎。|'
- en: '| `proxy` | The proxy type is a special lookup table type that is used to wrap
    other lookup tables. This is useful for reducing the number of concurrent connections
    when lookup tables are being used from services with a high process count. For
    example, accessing LDAP directories from the SMTP server can cause the maximum
    number of connections in the LDAP server to hit the roof, but accessing the LDAP
    directory through the proxy lookup table will reduce the concurrency. |'
  id: totrans-127
  prefs: []
  type: TYPE_TB
  zh: '| `proxy` | 代理类型是一种特殊的查找表类型，用于包装其他查找表。这对于减少并发连接的数量很有用，当查找表从具有高进程计数的服务中使用时。例如，从SMTP服务器访问LDAP目录可能会导致LDAP服务器的最大连接数达到上限，但通过代理查找表访问LDAP目录将减少并发性。|'
- en: '| `regexp` | Works such as `pcre` but without the dependency to the PCRE library.
    The regular expression grammar supported is limited and the performance may be
    worse than with `pcre`. If possible, choose `pcre` rather than `regexp`. |'
  id: totrans-128
  prefs: []
  type: TYPE_TB
  zh: '| `regexp` | 类似于`pcre`，但不依赖于PCRE库。支持的正则表达式语法有限，性能可能不如`pcre`。如果可能的话，选择`pcre`而不是`regexp`。|'
- en: '| `static` | This type is a special-purpose one that always returns a given
    string regardless of what is being looked up. This can be used in cases where
    Postfix expects a lookup table reference instead of a fixed string, but you really
    want to specify a fixed string. |'
  id: totrans-129
  prefs: []
  type: TYPE_TB
  zh: '| `static` | 这种类型是一个特殊用途的类型，无论查找什么，它总是返回一个给定的字符串。这可以用在Postfix期望查找表引用而不是固定字符串的情况下，但您确实想要指定一个固定字符串时使用。|'
- en: You can use any type of lookup table for any purpose; Postfix does not impose
    any limitations except that security considerations require that some features
    of regular expression tables are disabled under some circumstances. That said,
    not all lookup table types make sense to use for each and every purpose.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以为任何目的使用任何类型的查找表；Postfix不会强加任何限制，除了安全考虑要求在某些情况下禁用正则表达式表的某些功能。也就是说，并非所有查找表类型都适合用于每个目的。
- en: Many of the lookup table types are always supported by Postfix, but some of
    them are optional and require support to be compiled into Postfix. Many Linux
    vendors provide additional packages that you can install to obtain, for example,
    LDAP support. To find out which lookup table types your Postfix installation supports,
    use the `postconf` command.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: Postfix始终支持许多查找表类型，但其中一些是可选的，并且需要支持才能编译到Postfix中。许多Linux供应商提供了额外的软件包，您可以安装以获取，例如，LDAP支持。要找出您的Postfix安装支持哪些查找表类型，请使用`postconf`命令。
- en: '[PRE17]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: In most cases, the simple indexed lookup table types will be the most convenient
    ones. An indexed lookup table is nothing more than a text file that you can edit
    using your favorite text editor. The first part of each line, up to the first
    space or tab, will be taken as a lookup key and the rest of the line will be taken
    as the corresponding value.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 在大多数情况下，简单的索引查找表类型将是最方便的。索引查找表只是一个文本文件，您可以使用您喜欢的文本编辑器进行编辑。每行的第一部分，直到第一个空格或制表符，将被视为查找键，而行的其余部分将被视为相应的值。
- en: '[PRE18]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: One possible drawback with indexed lookup table types is that you do have to
    remember to run `postmap` when you have updated the table. You do not have to
    reload or restart Postfix after updating an indexed file with `postmap`. Postfix
    will discover the updated file itself and restart its daemon processes as required.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 索引查找表类型的一个可能的缺点是，当您更新表时，您必须记得运行`postmap`。更新带有`postmap`的索引文件后，您不必重新加载或重新启动Postfix。Postfix将自行发现更新的文件，并根据需要重新启动其守护进程。
- en: The topic of lookup tables could fill a whole chapter by itself, so this section
    will just touch upon them. We will use lookup tables in a few places later in
    this chapter, for example, when we set up policies for spam control.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 查找表的主题本身就可以填满一整章，因此本节只是简单涉及。我们将在本章的后面的一些地方使用查找表，例如，当我们设置垃圾邮件控制策略时。
- en: For a more elaborated discussion of lookup tables and a list of all available
    lookup table types, see `DATABASE_README` ([http://www.postfix.org/DATABASE_README.html](http://www.postfix.org/DATABASE_README.html))
    and the manual pages that document the use of some of the more complex lookup
    table types.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 有关查找表的更详细讨论和所有可用查找表类型的列表，请参阅`DATABASE_README`（[http://www.postfix.org/DATABASE_README.html](http://www.postfix.org/DATABASE_README.html)）和记录一些更复杂的查找表类型使用的手册页面。
- en: Getting Postfix up and running
  id: totrans-138
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 启动Postfix。
- en: Now that you have installed Postfix, let's make some basic configuration changes,
    fire it up, and take it for a test drive. If you installed Postfix from a package
    you may already have answered some configuration questions and have had Postfix
    started for you.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 既然您已经安装了Postfix，让我们进行一些基本配置更改，启动它，并进行测试。如果您从软件包中安装了Postfix，您可能已经回答了一些配置问题，并已经启动了Postfix。
- en: Domains and hostnames
  id: totrans-140
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 域名和主机名
- en: 'Before starting Postfix, let''s review some fundamental settings in `main.cf`.
    The first ones concern the names of your domain and your mailhost. The `mydomain`
    parameter should be set to your main Internet domain. If you run Example Inc.
    having the domain`http://www.example.com/`, the following setting would be reasonable:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 在启动Postfix之前，让我们在`main.cf`中审查一些基本设置。首先是您的域名和邮件主机的名称。`mydomain`参数应设置为您的主要互联网域。如果您运行Example
    Inc.，拥有域`http://www.example.com/`，以下设置是合理的：
- en: '[PRE19]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: The value of `mydomain` will affect how Postfix transforms hostnames that are
    not fully qualified. This means that all bare hostnames encountered in places
    such as sender and recipient addresses will be qualified with this domain—a hostname
    such as `jeeves` will, in this case, be turned into `jeeves.example.com`. We will
    also refer to `mydomain` in other parameters using the `$parameter` notation described
    earlier. Note that the feature of appending `mydomain` can be disabled by setting
    the `append_dot_mydomain` parameter to `NO`, and some Linux distributions make
    this modification by default. In general, the value should be left as `YES`.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
- en: A related parameter is `myhostname` that incidentally tells Postfix the hostname
    of the machine. The hostname is among other things used as default when the Postfix
    SMTP server greets a client and when the SMTP client says HELLO to a server. Postfix
    is normally able to determine this by itself, but sometimes you want to override
    this. Use the `postconf` command to see if the current value looks good.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  id: totrans-145
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Yes, this looks fine. Note that this hostname is not fully qualified, so the
    actual hostname used in various places will include `mydomain`.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
- en: A parameter that is related to `mydomain` is `myorigin`. This parameter specifies
    the domain that should be used to qualify e-mail addresses that have no domain
    part at all. This may seem highly irregular, but it is actually pretty common.
    Messages submitted with the `sendmail` program will by default get the current
    username as the sender address and, because usernames do not have domains, the
    username will be qualified with `myorigin` before the message is delivered anywhere.
    By default, `myorigin` is set to the same value as `myhostname`.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  id: totrans-148
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: This should be fine, but you might want to set it to `mydomain` instead.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  id: totrans-150
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: The next parameter that we will give attention to is `mydestination`. This parameter
    is quite important because it tells Postfix which domains are considered local,
    that is, which domains should be delivered to UNIX accounts on this machine. Unlike
    `mydomain` and `myorigin, mydestination` may contain multiple domains separated
    by space or commas. By listing `example.com` here, Postfix will accept messages
    addressed to `joe@example.com` and deliver them to the UNIX user "joe".
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
- en: One important property of local domains is that they are all considered equal.
    If `example.com` and `example.net` are both listed in `mydestination, joe@example.com`
    will be equivalent to `joe@example.net`. If you need additional domains where
    the users are not equal, that is `joe@example.com` and `joe@example.net` should
    lead to different mailboxes, you need to implement virtual alias domains, described
    in the *Virtual alias domains* section.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
- en: 'Returning to Example Inc. you will want to have `example.com` listed in `mydestination`
    as it is your primary domain. The old domain, `example.net`, should also work
    for the time being so that one should be included too. Additionally, it is wise
    to list the value of `myhostname` in `mydestination` as well as make sure that
    mail addressed to `localhost` gets delivered properly. This yields the following
    complete list of local domains for Example Inc.:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  id: totrans-154
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: So why `localhost.$mydomain` instead of just `localhost` if we want messages
    to `root@localhost` to be delivered locally? Remember that `mydomain` is used
    to qualify all hostnames that are not already fully qualified (one may argue that
    `localhost` in fact already is a fully qualified hostname, but Postfix does not
    make a special case for that hostname). The address `root@localhost` will be rewritten
    to `root@localhost.example.com`, so `localhost.example.com` is what we want to
    list in `mydestination.`
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
- en: Two very important Postfix parameters, `mynetworks` and `mynetworks_style`,
    control which hosts are allowed to use your server as a relay. Setting these incorrectly
    may allow your server to be abused by spammers and the likes, so it is important
    that you get them right. By default, all hosts on the subnets that your server
    is directly connected to will be allowed access. This should be secure in most
    cases. These parameters and other methods of allowing relay access will be discussed
    in depth in [Chapter 5](ch05.html "Chapter 5. Securing Your Installation").
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
- en: Indirect mail delivery through your ISP
  id: totrans-157
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Some **Internet Service Providers** (**ISP**) do not allow their customers to
    directly access remote mail servers via the standard SMTP port (`25`). Instead
    they provide a relay server that all outbound messages must go through. This policy
    is common for residential cable or DSL connections, but some providers have the
    same policy for commercial-grade connections. If such is the case, you need to
    configure Postfix to deliver all outbound messages indirectly via your ISP's relay
    server.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
- en: 'This is done with the `relayhost` parameter that contains the hostname or IP
    address of the relay server to use. The following forms are allowed:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  id: totrans-160
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: The first form will cause Postfix to perform an MX lookup on the hostname, just
    as it would do for a normal message delivery. Enclosing the hostname in square
    brackets as in the second example suppresses the MX lookup. The square brackets
    are also required in the third case when an IP address is specified.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
- en: Optionally, the hostname or address can be followed by `:port` to specify an
    alternative TCP port. Note that you cannot specify multiple hostnames or addresses
    to achieve fallback or load balancing behavior. If you need fallback hosts when
    the normal relay server is unreachable, take a look at the `fallback_relay` parameter.
    Refer the *Other useful configuration parameters* section for additional information
    on other parameters.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
- en: Choosing network interfaces
  id: totrans-163
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `inet_interfaces` parameter decides the network interfaces that Postfix
    will use for both listening to new connections and sending out messages. If you
    have multiple network interfaces and you do not want Postfix to use all of them,
    you can adjust this parameter to list the addresses or hostnames of the interfaces
    you do want Postfix to use.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
- en: Some Linux distributions set `inet_interfaces` to `localhost` by default, which
    means that Postfix will listen only on the loopback interface. This makes at least
    some sense for workstations, but it is obviously completely unusable for servers
    that need to receive messages from foreign hosts. If the Postfix packaging of
    your Linux distribution has this feature, just delete or comment the `inet_interfaces`
    line from `main.cf` to disable it. Postfix will then use the default value of
    `all`, which of course means that all interfaces should be used.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
- en: Note
  id: totrans-166
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Changing `inet_interfaces` requires Postfix to be restarted. A reload is not
    enough.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
- en: Choosing mailbox format for local deliveries
  id: totrans-168
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: By default, Postfix delivers local messages (messages to domains listed in `mydestination`)
    into files in `mbox` format. The `mbox` format for mailboxes stores all messages
    of a mailbox in a single text file. These files are named after the user and go
    into the directory specified by `mail_spool_directory` (normally `/var/mail` or
    `/var/spool/mail`). If the user desires additional mailboxes to store messages,
    those files are stored somewhere in the user's home directory (often in `$HOME/mail`
    or `$HOME/Mail`).
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
- en: The `mbox` format has a few flaws that make it rather undesirable. The single-file
    format makes message deletion expensive as the whole file must be rewritten completely
    unless the message deleted is the last one, in which case the file can just be
    truncated. `mbox` also puts up hurdles when multiple processes need to access
    the same mailbox concurrently, which happens when a user uses a POP server to
    retrieve and delete messages while new mail is being delivered. This requires
    that some method of exclusive locking is used to avoid the concurrent access that
    might corrupt the files. Such locking is not a big problem if all software run
    on the same machine, access the same local file system, and agree on which locking
    method to use, but it is a royal pain if mailboxes need to be accessed over the
    network via network file systems such as NFS where reliable file locking can be
    a problem. Finally, `mbox` causes problems if used together with disk quotas.
    While the mailbox is being rewritten, it will use up to twice the original storage.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
- en: To avoid these problems, D. J. Bernstein, the author of software such as `qmail`
    and `djbdns`, designed the `maildir` format for mailboxes. As the name implies,
    `maildir` uses directories and one file per message. Deletion of messages is always
    very fast, but on the other hand it may take longer to scan a mailbox and produce
    a list of all messages as all message files have to be opened and read. `maildir`
    is safe to use with NFS. In the `maildir` delivery format, the inbox of a user
    is typically found in `$HOME/Maildir`.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
- en: 'To configure Postfix to deliver new messages to local users to `$HOME/Maildir`,
    set the `home_mailbox` parameter like this:'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  id: totrans-173
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: Note the slash at the end of the line; it is important! Postfix follows the
    convention used by many other programs that a mailbox location ending with a slash
    denotes `maildir`. If you omit the slash, Postfix will try to deliver messages
    to the `mbox` file `$HOME/Maildir`.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
- en: The `home_mailbox` parameter is only effective for local domains when Postfix
    performs the delivery itself. If delivery is made by some other delivery agent
    such as Procmail or Maildrop, you have to configure that software for `maildir`
    delivery.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
- en: The rest of this book assumes that you have chosen `maildir` delivery. The IMAP/POP
    server you will be introduced to later, Courier IMAP, does not support the `mbox`
    format at all. Converting mailboxes between `mbox` and `maildir` is not difficult,
    so if you want to switch formats later that would not be a problem.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
- en: Error reporting
  id: totrans-177
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The final step is to make sure that Postfix and real people around the world
    can notify you as a postmaster about error conditions. Internet standards require
    all domains to have a postmaster address, but you do not need to create an account
    with that name. Instead you can use the aliasing feature of Postfix to redirect
    messages addressed to the postmaster address to yourself and any other people
    that manage the mail system. Also, you should redirect messages to the root account.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
- en: 'Aliases will be discussed in more detail in the *Local Aliases* section, but
    this step should be done right now so we will take a quick look anyway. To make
    Postfix redirect root''s messages and accept messages addressed to postmaster
    even though no such user account exists, the local alias table must be modified.
    The configuration parameter `alias_maps` controls the location of the lookup tables
    that define such mappings:'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  id: totrans-180
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'On this particular system, the local aliases are stored in the file `/etc/aliases`.
    Edit that file so that it contains two lines similar to these:'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  id: totrans-182
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: This means that messages addressed to the postmaster will be sent to the root
    user, and messages to the root user will be redirected to the users, "jack" and
    "jill". Save the file and run the `newaliases` command so that Postfix will pick
    up the changes to the file.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
- en: Note
  id: totrans-184
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Note that alias lookups are recursive—Postfix does not stop when the `postmaster`
    lookup has succeeded, it continues to look up `root`, and finally `jack` and `jill.
    jack` and `jill` may not have alias entries, in which case Postfix stops the lookup
    recursion.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
- en: 'The type of problems that Postfix will report to the postmaster is configurable
    with the `notify_classes` parameter. By default, only resource issues such as
    out-of-disk-space problems and software problems will be reported, but you may
    configure Postfix to report more types of problems. For example, you might also
    want to know about SMTP protocol violations:'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  id: totrans-187
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: When Postfix reports a problem, a transcript of the SMTP session is included.
    This can be a valuable debugging aid.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
- en: Opt for more extensive error reporting rather than terse reporting. If you receive
    too many error reports, see if you can use the filtering features of your delivery
    agent or your mail client to remove the error reports that you are not interested
    in. Protocol violations by incoming spam mail generated by badly written spam
    software can typically be ignored, but if one of your own computers behaves badly
    you will want to know about it.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
- en: Other useful configuration parameters
  id: totrans-190
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In addition to the configuration parameters covered so far, a few others that
    can be useful to know about will be mentioned. You will most likely do fine using
    their default values. If you want more information about them, please consult
    the documentation that came with your version or Postfix or read the documentation
    online at [http://www.postfix.org/documentation.html](http://www.postfix.org/documentation.html).
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
- en: '| Parameter | Description |'
  id: totrans-192
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  id: totrans-193
  prefs: []
  type: TYPE_TB
- en: '| `always_bcc` | Sends a copy of each message to a specified recipient. This
    can be used for e-mail archiving. If you need more fine-grained control over which
    messages are copied, take a look at `sender_bcc_maps` and `recipient_bcc_maps`.
    The latter two parameters require Postfix 2.1 or later. |'
  id: totrans-194
  prefs: []
  type: TYPE_TB
- en: '| `defer_transports` | Contains names of transports (delivery agents, more
    or less) whose deliveries should be temporarily deferred. This allows you to suspend
    local message deliveries if the file system for the home directories is broken
    or unavailable but the rest of the system works fine. |'
  id: totrans-195
  prefs: []
  type: TYPE_TB
- en: '| `delay_warning_time` | By default, Postfix does not send a warning if a message
    cannot be delivered for some time. Setting this parameter to a particular duration,
    say `5h` for five hours, will cause Postfix to send a single warning message for
    each message that has been undeliverable for that period of time.A word of caution,
    though: Your users may not be able to interpret this warning message correctly.
    Even though Postfix clearly states that it is only a warning and that the message
    does not need to be resent, many users do not understand this and resend their
    delayed message anyway. |'
  id: totrans-196
  prefs: []
  type: TYPE_TB
- en: '| `mailbox_size_limit` | This parameter controls the maximum size of a local
    mailbox or maximum size of a message when using `maildir` mailboxes. Nowadays
    the default of 50 MB may be too low, especially if you are using the default `mbox`
    format for mailboxes. |'
  id: totrans-197
  prefs: []
  type: TYPE_TB
- en: '| `maximal_queue_lifetime` | Specifies how long Postfix will retry failed deliveries
    of messages before they are returned to the sender. The default of five days is
    reasonable and should not be changed without good reasons. From Postfix 2.1 onwards,
    there is also `bounce_queue_lifetime` that is the same thing, but for bounce messages
    with an empty sender address. |'
  id: totrans-198
  prefs: []
  type: TYPE_TB
- en: '| `message_size_limit` | This parameter controls the maximum size of a message.
    The default value of 10 MB is reasonable (mail is not the best transport method
    for large files), but may need to be adjusted. Remember that messages are sent
    using only 7 bits, so if you want to allow 20 MB binary files, you must add about
    35% to compensate for the overhead of the 7 bit encoding of the file. |'
  id: totrans-199
  prefs: []
  type: TYPE_TB
- en: '| `proxy_interfaces` | If your server is connected to the Internet via a proxy
    or NAT device so that Postfix cannot determine all network addresses that can
    be used to reach the server, add those addresses to this parameter. |'
  id: totrans-200
  prefs: []
  type: TYPE_TB
- en: Starting Postfix and sending the first message
  id: totrans-201
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'With these settings in place, it is time to start Postfix. Use the following
    Postfix command to do this:'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  id: totrans-203
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'To verify that Postfix is running, take a look in the log file. Postfix logs
    via the standard `syslog` interface, and the exact location of the log files depends
    on the `syslog` daemon configuration. The mail logs will typically be named `/var/log/maillog,
    /var/log/mail.info`, or something similar. The configuration of your `syslog`
    daemon, typically found in `/etc/syslog.conf`, contains the details. This is what
    you will find at the end of the mail log after you have started Postfix:'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  id: totrans-205
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: Postfix is now ready to receive and deliver messages. To try it out, use your
    favorite mail client and send a test mail to yourself. If your mail client uses
    SMTP, remember to reconfigure it to use your server.
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
- en: If you get an error message from your mail client when you try to send the test
    message, read your log again. Does it show any traces of a connection from the
    host on which you run your mail client? If so, is any error message logged? To
    get hints on how to debug Postfix problems, see the *Troubleshooting Postfix problems*
    section.
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
- en: Once you have sent the message successfully, you will also want to check that
    it is delivered properly. As you have not yet configured a POP or IMAP server,
    that road is not an option. But if you have installed a mail client on your server
    that reads mail directly from the file system (mail, Pine, Mutt, and many more)
    things should work fine as long as your mail client is configured to look for
    new messages in the same place as Postfix delivers them. If you have chosen `maildir`
    delivery, the default settings of your mail client probably won't do.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
- en: In any case, reading the mailbox directly from the file system is always an
    option. With normal `mbox` delivery, the mailbox file has the same name as the
    user and resides in the directory pointed to by the `mail_spool_directory` configuration
    parameter. With `maildir` delivery, the message will typically be found in a file
    of its own in the `$HOME/Maildir/new` directory.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
- en: If all has gone well, the message was delivered to the expected place. Whatever
    delivery method you choose, make sure you know where delivered messages end up.
    That knowledge will be valuable when you have to debug delivery problems.
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
- en: Stopping spam and other unwanted messages
  id: totrans-211
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This section will discuss the various methods Postfix provides to help stop
    unwanted messages. Spam, or unsolicited commercial e-mail, is perhaps the biggest
    problem that e-mail server administrators face, but there may also be other kinds
    of messages that one does not want to receive.
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
- en: Postfix by itself will not stop all spam, but it can catch many spam messages.
    For some people this may be adequate, but if you need to fight large volumes of
    spam you may need a tool such as SpamAssassin, described in [Chapter 8](ch08.html
    "Chapter 8. Busting Spam with SpamAssassin"). Even if you use SpamAssassin, Postfix's
    own lightweight methods can help reduce the load on the server by rejecting the
    messages before they even reach SpamAssassin.
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
- en: 'Postfix''s anti-spam methods: An overview'
  id: totrans-214
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'There is no silver bullet to stop all spam, but Postfix provides a number of
    methods that you can use to help the situation:'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
- en: '**SMTP restrictions:** SMTP restrictions let you define rules that control
    whether or not a message is accepted by Postfix. The rules cannot take into account
    the content of the message, just the envelope information. The SMTP restrictions
    are not merely a tool for stopping spam, but a general way of defining policies
    for the usage of the mail system.'
  id: totrans-216
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**DNS blocklists:** DNS blocklists are globally published blocklists containing
    IP addresses of known spammers and other likely sources of junk mail. Postfix
    lets you use this information to reject messages.'
  id: totrans-217
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Matching header expressions:** The header fields and message bodies can be
    matched against regular expressions, allowing you to reject certain types of e-mail.'
  id: totrans-218
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**After-queue content filtering:** After Postfix has accepted a message, it
    will not be delivered to the destination right away. Instead, it will be fed to
    a content filter that can do anything with the message—delete it, scan it for
    viruses, strip unwanted attachments, and so on. It is the responsibility of the
    content filter to resubmit messages back into Postfix which will then treat them
    as any other message.'
  id: totrans-219
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Before-queue content filtering:** The drawback with after-queue content filtering
    is that Postfix always accepts the message before the message is sent to the content
    filter. This means Postfix cannot reject a message based on the verdict of the
    content filter. Before-queue content filters receive the messages during the SMTP
    session and can choose to reject them. Because one before-queue content filter
    connection is required for each open SMTP session, this type of content filter
    is harder to scale for high-traffic sites and requires extra capacity to deal
    with traffic bursts. This feature requires Postfix 2.1 or later.'
  id: totrans-220
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Milters:** Starting with Postfix 2.3, the Milter plug-in protocol for e-mail
    content-inspection is supported. Milters were introduced in the `sendmail` mail
    transfer agent, and there are many available milters for spam protection, antivirus
    checks, message authenticity and signing in accordance with, for example, the
    DKIM standard. Third-party Milters can be downloaded from [http://www.milter.org/milters.](http://www.milter.org/milters.)'
  id: totrans-221
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Access policy delegation:** If the SMTP restrictions are not sufficiently
    expressive, you can construct your own access policy server that Postfix can contact
    during each SMTP session. Using this tool, you can enforce just about any specialized
    policy you want, as long as the policy can be enforced by looking at the message
    envelope. Access policy servers will not be supplied with any of the message contents.
    Postfix comes with a very simple policy daemon for use to implement greylisting,
    but several other policy daemons have been made by other people. Links to these
    daemons and other Postfix add-on software can be found at [http://www.postfix.org/addon.html](http://www.postfix.org/addon.html).'
  id: totrans-222
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Understanding SMTP restrictions
  id: totrans-223
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Postfix has a simple but still expressive notation for defining rules that will
    be applied to messages that arrive via SMTP. For example, you can express a policy
    to reject messages sent from certain networks, clients who say `HELO` with certain
    hostnames, or clients that have no reverse records in DNS unless they are one
    of your own clients.
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
- en: Postfix defines a number of configuration parameters, each of which can contain
    a list of restrictions. Each restriction list may contain zero or more restrictions,
    and each restriction may or may not return something when evaluated. As in a few
    other places in Postfix, the "first match wins" principle reigns here too. This
    means that the restrictions are evaluated in the order they are specified, and
    the first restriction that returns something terminates the evaluation of the
    current restriction list.
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
- en: 'The restriction lists get evaluated during the SMTP session. The following
    table contains the restriction lists that Postfix uses and shows at what stage
    in an SMTP session they are evaluated:'
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
- en: '| Parameter | Point of evaluation |'
  id: totrans-227
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  id: totrans-228
  prefs: []
  type: TYPE_TB
- en: '| `smtpd_client_restrictions` | Directly upon connection. |'
  id: totrans-229
  prefs: []
  type: TYPE_TB
- en: '| `smtpd_data_restrictions` | When the client has sent the `DATA` command.
    |'
  id: totrans-230
  prefs: []
  type: TYPE_TB
- en: '| `smtpd_end_of_data_restrictions` | When the client has sent the complete
    message. This restriction list is available in Postfix 2.2 and later versions.
    |'
  id: totrans-231
  prefs: []
  type: TYPE_TB
- en: '| `smtpd_etrn_restrictions` | When the client has sent the `ETRN` command.
    This command is not used in a normal SMTP session. |'
  id: totrans-232
  prefs: []
  type: TYPE_TB
- en: '| `smtpd_helo_restrictions` | When the client has sent its greeting with `HELO`
    or `EHLO.` |'
  id: totrans-233
  prefs: []
  type: TYPE_TB
- en: '| `smtpd_recipient_restrictions` | When the client has sent a recipient address
    with `RCPT TO`. |'
  id: totrans-234
  prefs: []
  type: TYPE_TB
- en: '| `smtpd_sender_restrictions` | When the client has sent the sender address
    with `MAIL FROM`. |'
  id: totrans-235
  prefs: []
  type: TYPE_TB
- en: The default value of the `smtpd_delay_reject` parameter is `yes`, which means
    that all rejections will be postponed until after `RCPT TO`. The reason for this
    is that some client software do not like being rejected before `RCPT TO`, so they
    will disconnect and try again. Another good reason is that a postponed rejection
    gives Postfix a chance to log more information. This makes it easier for the administrator
    to determine whether a message was rejected even though it should not have been.
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
- en: A common misunderstanding is that only restrictions on the recipient address
    can be placed in `smtpd_recipient_restrictions`, only restrictions on the sender
    address can be placed in `smtpd_sender_restrictions,and` so on, but because of
    the default value of `smtpd_delay_reject`, that is not true. The name of the restriction
    list only indicates at what stage in the SMTP session the listed restrictions
    will be applied.
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
- en: Let's explore what restrictions Postfix imposes by default. We can use the `postconf`
    command to inspect the default values of the most commonly used restriction lists.
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  id: totrans-239
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: This tells us that Postfix by default does not have any client, `HELO`, or sender
    restrictions. However, it does have two recipient restrictions. The first one,
    `permit_mynetworks`, permits the current recipient if the connecting client is
    within the networks specified by `mynetworks`. It is this restriction that gives
    your own clients relay access. If the connecting client is not within `mynetworks`,
    the next item in the restriction list will be evaluated. `reject_unauth_destination`
    will reject recipients whose domain is not one of the domains that Postfix will
    accept mail for. In other words, `reject_unauth_destination` rejects relay attempts.
    If no rejection takes place here, the end of the restriction list has been reached.
    If that happens, Postfix accepts the message.
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
- en: A `permit` result in one restriction list will not cause the message as a whole
    to be accepted. Only the remaining restrictions in the same list will be bypassed.
    This is not true for restrictions that return `reject`— that result is always
    terminal and stops the evaluation of all restriction lists.
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
- en: There are more than 50 standard SMTP restrictions to choose from, and there
    is no room to cover them all here. This table will present a little smorgasbord
    with useful restrictions. Additional restrictions will be covered later in this
    chapter.
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
- en: '| Restriction | Description |'
  id: totrans-243
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  id: totrans-244
  prefs: []
  type: TYPE_TB
- en: '| `permit_inet_interfaces` | Permit if the connecting client resides in one
    of the networks listed in `inet_interfaces`, which typically covers all network
    that the server running Postfix is connected to. |'
  id: totrans-245
  prefs: []
  type: TYPE_TB
- en: '| `permit_mynetworks` | Permit if the connecting client is listed in `mynetworks`.
    |'
  id: totrans-246
  prefs: []
  type: TYPE_TB
- en: '| `permit_sasl_authenticated` | Permit if connecting client has authenticated
    itself. (SMTP authentication is covered in [Chapter 5](ch05.html "Chapter 5. Securing
    Your Installation").) |'
  id: totrans-247
  prefs: []
  type: TYPE_TB
- en: '| `reject` | Reject the request, unconditionally. |'
  id: totrans-248
  prefs: []
  type: TYPE_TB
- en: '| `reject_invalid_hostname` | Reject if the syntax of the `HELO/EHLO` hostname
    given by the client is incorrect. |'
  id: totrans-249
  prefs: []
  type: TYPE_TB
- en: '| `reject_non_fqdn_hostname` | Reject if the `HELO/EHLO` hostname given by
    the client is not a fully qualified domain name. |'
  id: totrans-250
  prefs: []
  type: TYPE_TB
- en: '| `reject_non_fqdn_recipient` | Reject if the domain part of the recipient
    address is not a fully qualified domain name. |'
  id: totrans-251
  prefs: []
  type: TYPE_TB
- en: '| `reject_non_fqdn_sender` | Reject if the domain part of the sender address
    is not a fully qualified domain name. |'
  id: totrans-252
  prefs: []
  type: TYPE_TB
- en: '| `reject_unauth_destination` | Reject the request unless the recipient domain
    is one of the domains that the Postfix server hosts, or for some reason, will
    accept mail for. |'
  id: totrans-253
  prefs: []
  type: TYPE_TB
- en: '| `reject_unknown_client_hostname` | Reject if the connecting client''s hostname
    cannot be determined. This happens if either of the following conditions is true:a)
    The client''s IP address cannot be resolved to a hostname, that is the PTR lookup
    fails.b) The A record lookup of the resulting hostname(s) fails.c) None of the
    IP addresses obtained from the A record lookup matches the input IP address.Prior
    to Postfix 2.3, this restriction was named `reject_unknown_client`. |'
  id: totrans-254
  prefs: []
  type: TYPE_TB
- en: '| `reject_unknown_recipient_domain` | Reject if the domain part of the recipient
    address has no A or MX record in DNS. |'
  id: totrans-255
  prefs: []
  type: TYPE_TB
- en: '| `reject_unknown_reverse_client_hostname` | Reject if the connecting client''s
    IP address cannot be resolved to a hostname, that is the PTR lookup fails to return
    a result. This feature is available in Postfix 2.3 and later. |'
  id: totrans-256
  prefs: []
  type: TYPE_TB
- en: '| `reject_unknown_sender_domain` | Reject if the domain part of the sender
    address has no A or MX record in DNS. |'
  id: totrans-257
  prefs: []
  type: TYPE_TB
- en: '| `reject_unlisted_recipient` | Reject if the domain part of the recipient
    address is a domain hosted by Postfix and the complete address is not a valid
    recipient address. By default, this restriction is implicitly evaluated at the
    end of `smtpd_recipient_restrictions`. This behavior is controlled by the `smtpd_reject_unlisted_recipient`
    parameter. By using `reject_unlisted_recipient`, you can put the restriction into
    effect earlier on. This restriction is available in Postfix 2.1 and later. Previous
    versions of Postfix can use the `check_recipient_maps` parameter. |'
  id: totrans-258
  prefs: []
  type: TYPE_TB
- en: '| `reject_unlisted_sender` | Reject if the domain part of the sender address
    is a domain hosted by Postfix and the complete address would not be acceptable
    as a recipient address. The idea behind this feature is that there is no reason
    to accept messages with sender addresses known to be incorrect. This restriction
    is available in Postfix 2.1 and later. See also the `smtpd_reject_unlisted_sender`
    parameter. |'
  id: totrans-259
  prefs: []
  type: TYPE_TB
- en: Access maps
  id: totrans-260
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In addition to the restrictions already discussed, Postfix defines a number
    of restrictions that look up information in access maps. An **access map** is
    a lookup table with contents that affects whether a message will be accepted.
    The name of the restriction controls what information is used as the lookup key.
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
- en: For example, the `check_client_access` restriction looks up the client IP address
    and hostname in a lookup table, allowing you to, say, ban certain clients that
    are known to send spam. Together with the restriction name you also state the
    type and name of the lookup table.
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  id: totrans-263
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'Although not an exhaustive list, the following are the most important restrictions
    that use access maps:'
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
- en: '| Restriction name | Lookup key |'
  id: totrans-265
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  id: totrans-266
  prefs: []
  type: TYPE_TB
- en: '| `check_client_access` | Client IP address and hostname. |'
  id: totrans-267
  prefs: []
  type: TYPE_TB
- en: '| `check_sender_access` | The sender address. |'
  id: totrans-268
  prefs: []
  type: TYPE_TB
- en: '| `check_sender_mx_access` | The hostname(s) of the mail exchangers for the
    sender domain, that is the result of an MX lookup. This feature was added in Postfix
    2.1. |'
  id: totrans-269
  prefs: []
  type: TYPE_TB
- en: '| `check_sender_ns_access` | The hostname(s) of the name servers for the sender
    domain, that is the result of an NS lookup. This feature was added in Postfix
    2.1. |'
  id: totrans-270
  prefs: []
  type: TYPE_TB
- en: '| `check_recipient_access` | The recipient address. |'
  id: totrans-271
  prefs: []
  type: TYPE_TB
- en: '| `check_helo_access` | The `HELO/EHLO` hostname. |'
  id: totrans-272
  prefs: []
  type: TYPE_TB
- en: For all lookup table types except `regexp` and `pcre`, Postfix makes multiple
    lookups for each of these restrictions, slightly dependent on what type of data
    is being looked up (e-mail address or hostname, for example). This makes it possible
    to make inexact wildcard matches, for example matching all e-mail addresses in
    a domain.
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
- en: 'For `check_client_access`, Postfix makes separate lookups for the client IP
    address, the client hostname, and parts of the IP address, the latter making it
    possible to match whole A-, B-, or C-class networks (for better granularity and
    full CIDR notation use the `cidr` lookup table type). For a client with the address
    1.2.3.4 and the hostname `mail.example.com`, the following lookup keys are attempted,
    in the following order:'
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
- en: mail.example.com
  id: totrans-275
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: example.com
  id: totrans-276
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: com
  id: totrans-277
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 1.2.3.4
  id: totrans-278
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 1.2.3
  id: totrans-279
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '1.2'
  id: totrans-280
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '1'
  id: totrans-281
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Items 2 and 3 assume that the default value of the `parent_domain_matches_subdomains`
    parameter is used. The Postfix author has indicated that this behavior may change
    in the future.
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
- en: 'For restrictions where the lookup key is an e-mail address, such as `check_sender_access`,
    Postfix looks up the whole e-mail address, the domain part only, followed by the
    localpart and @. The full list of lookups for the e-mail address `user@example.com`
    then becomes:'
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
- en: '`user@example.com`'
  id: totrans-284
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`example.com`'
  id: totrans-285
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`com`'
  id: totrans-286
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`user@`'
  id: totrans-287
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Again, items 2 and 3 assume that default value of `parent_domain_matches_subdomains`.
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
- en: Lookups for IPv6 addresses and e-mail addresses containing recipient delimiters
    have been omitted from these lists for brevity reasons.
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
- en: The following results are recognized for a given lookup key (this is again not
    an exhaustive list).
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
- en: '| Result | Description |'
  id: totrans-291
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  id: totrans-292
  prefs: []
  type: TYPE_TB
- en: '| `OK` | Permit the request. |'
  id: totrans-293
  prefs: []
  type: TYPE_TB
- en: '| `REJECT [optional text]` | Reject the request with a permanent error code
    and either the specified error message or a generic message. |'
  id: totrans-294
  prefs: []
  type: TYPE_TB
- en: '| `DUNNO` | Pretend that the lookup key was not found, and do not continue
    with additional lookup keys. For example, if a lookup of `user@example.com` returns
    `DUNNO`, Postfix will not look up `example.com` or `user@` like it normally would.
    |'
  id: totrans-295
  prefs: []
  type: TYPE_TB
- en: '| `DISCARD [optional text]` | If the message eventually gets accepted, it will
    be discarded and not delivered. |'
  id: totrans-296
  prefs: []
  type: TYPE_TB
- en: '| `HOLD [optional text]` | Place the message in the hold queue. Messages that
    are held will not be delivered and can be inspected with the `postcat` program
    and subsequently released for delivery or deleted. This can be used as a simple
    way of quarantining messages that might be unwanted. |'
  id: totrans-297
  prefs: []
  type: TYPE_TB
- en: '| `REDIRECT email address` | Scrap all the current message recipient(s) and
    send the message to the specified address only. This feature was added in Postfix
    2.1. |'
  id: totrans-298
  prefs: []
  type: TYPE_TB
- en: '| `PREPEND header: text` | Add an additional header to the message. This feature
    was added in Postfix 2.1. |'
  id: totrans-299
  prefs: []
  type: TYPE_TB
- en: '| `WARN [optional text]` | Place a warning message in the log file. This feature
    was added in Postfix 2.1. |'
  id: totrans-300
  prefs: []
  type: TYPE_TB
- en: '| `restriction, restriction, …` | Apply one or more restrictions and use their
    result. Only simple restrictions that do not refer to any lookup tables are allowed
    here unless you use restriction classes. Those are not covered in this book, but
    you can read about them in the *RESTRICTION_CLASS_README* document available at
    [http://www.postfix.org/RESTRICTION_CLASS_README.html](http://www.postfix.org/RESTRICTION_CLASS_README.html).
    |'
  id: totrans-301
  prefs: []
  type: TYPE_TB
- en: Full documentation of the access map lookup keys and possible result values
    can be found in the `access(5)` manual page or at [http://www.postfix.org/access.5.html](http://www.postfix.org/access.5.html).
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
- en: Access map examples
  id: totrans-303
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Here are a series of examples with access maps to discuss how they can be used,
    both alone and along with other restrictions in order to form pretty expressive
    policies:'
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  id: totrans-305
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: In this first example, the lookups will be made against the `hash-type` lookup
    table `/etc/postfix/client_access`. This file is not created by Postfix and you
    may give it any name. From the *Lookup tables* section we recall that `hash-type`
    lookup tables are just text files from which binary files (in this case with the
    file extension `.db`) should be built with the `postmap` command whenever the
    source file changes.
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  id: totrans-307
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'Here is an example `client_access` file:'
  id: totrans-308
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  id: totrans-309
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: What does all this mean? The first two non-comment lines are used to reject
    clients that appear to connect from the networks `10.0.0.0/8` and `192.168.0.0/16`.
    These are not valid Internet addresses, so no legitimate client will connect from
    any of these addresses. The rejection will be made with the error message `RFC
    1918` **address not allowed here**. If your own clients have such RFC 1918 addresses
    you need to place a `permit_mynetworks` restriction before the `check_client_access`.
    Otherwise you will reject your own clients.
  id: totrans-310
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  id: totrans-311
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: Indexed access maps support network block matching on octet boundaries, but
    CIDR notation (as in `10.0.0.0/8)` is not supported. If you need to specify network
    blocks with CIDR notation, consider the `CIDR` lookup table type available in
    Postfix 2.1 and later. Earlier releases can use a script such as `cidr2access`
    by Rahul Dhesi ([http://www.rahul.net/dhesi/software/cidr2access](http://www.rahul.net/dhesi/software/cidr2access))
    that expands CIDR blocks to a notation that is acceptable for indexed access maps.
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
- en: Note how comments are used to explain why and when entries were added. This
    can be valuable if more than one person is maintaining the files.
  id: totrans-313
  prefs: []
  type: TYPE_NORMAL
- en: The last lines are used to match a couple of notorious spammers (fictional,
    of course) and demonstrate that both complete IP addresses and hostnames are acceptable
    here. These rejections will be made with a generic error message.
  id: totrans-314
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is another example:'
  id: totrans-315
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  id: totrans-316
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: Contents of `/etc/postfix/sender_access:`
  id: totrans-317
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  id: totrans-318
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: If someone attempts to send a message with a `hotmail.com` sender address, the
    client attempting to deliver the message will be subject to the `reject_unknown_client`
    restriction which, as you might recall, rejects client that do not have a valid
    mapping between IP address and hostname.
  id: totrans-319
  prefs: []
  type: TYPE_NORMAL
- en: The second line exemplifies a useful policy that allows clients only from your
    networks to use your domain in the sender address.
  id: totrans-320
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, if you only use Postfix internally within your network and have no
    need to allow anyone else to connect, the following two restrictions enforce this
    policy:'
  id: totrans-321
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  id: totrans-322
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: Implementing new policies
  id: totrans-323
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Be careful when you implement new policies. Some of Postfix's restrictions are
    far too strict for general use and may reject significant amounts of legitimate
    e-mail. For each new restriction you plan to implement, examine the conditions
    under which messages are rejected and try to come up with cases where legitimate
    messages fulfill these conditions. To help you determine whether a restriction
    is safe to use, the `warn_if_reject` restriction can be used. This restriction
    affects the restriction that immediately follows it in the restriction list and,
    if the following restriction should have resulted in a rejection, it will be converted
    to a rejection warning. A rejection warning places a line in the mail log, but
    does not reject the message.
  id: totrans-324
  prefs: []
  type: TYPE_NORMAL
- en: For example, you may want to evaluate the `reject_unknown_client` restriction
    because you have noticed that many spam messages are received from clients that
    do not have a reverse pointer in DNS, that is, there is no mapping from their
    IP address to a name that maps back to the IP address in question.
  id: totrans-325
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is one way of doing it:'
  id: totrans-326
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  id: totrans-327
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'This will result in log messages like this one:'
  id: totrans-328
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  id: totrans-329
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: This log messages contain all known information about the envelope of the message,
    and this should hopefully be enough for you to decide whether a message was legitimate
    or not. After a few days, inspect your mail logs and try to determine whether
    the ratio between would-be rejected unwanted messages and would-be rejected legitimate
    messages is acceptable.
  id: totrans-330
  prefs: []
  type: TYPE_NORMAL
- en: There are many spam countermeasures with good accuracy, some of which are covered
    in this book. Others will emerge in the future depending on how the spammers behave.
    Be very careful when inventing your own ways to identify spam—picking characteristics
    from a small number of spam messages and drawing the conclusion that those characteristics
    are good spam indicators is dangerous and is likely to lead to loss of legitimate
    e-mails. Choose wisely and avoid methods with low accuracy. Do not forget to examine
    legitimate e-mails to make sure they do not have the characteristics that you
    associate with spam.
  id: totrans-331
  prefs: []
  type: TYPE_NORMAL
- en: Using DNS blacklists
  id: totrans-332
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Since 1997, the **Domain Name System** (**DNS**) has been used to thwart spam.
    The method, **DNS-based Blackhole List** (**DNSBL**) or **Real-time Blackhole
    List** (**RBL**), also known as **blacklist** or **blocklist**, uses the DNS to
    publish information about certain clients or sender domains. When a mail server
    such as your own is contacted by a client, your server can combine the client's
    IP address or the given sender address with the domain of one or more DNSBLs and
    perform a DNS lookup. If the address is listed by the DNSBL, the lookup succeeds,
    and your server may choose to, for example, reject the client.
  id: totrans-333
  prefs: []
  type: TYPE_NORMAL
- en: For example, let's say that you have configured Postfix to use the widely used
    `zen.spamhaus.org` blacklist. If a client with the address 1.2.3.4 connects, Postfix
    will look in DNS for an A record for the address `4.3.2.1.zen.spamhaus.org`. If
    such a record exists, Postfix will not accept a message from the client.
  id: totrans-334
  prefs: []
  type: TYPE_NORMAL
- en: Postfix supports three types of DNSBL lookups—client host address, client hostname,
    and sender domain. Each lookup type has a restriction of its own, and they all
    require that you specify the name of the DNSBL domain after the restriction name.
  id: totrans-335
  prefs: []
  type: TYPE_NORMAL
- en: '| DNSBL type | Syntax | Description |'
  id: totrans-336
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  id: totrans-337
  prefs: []
  type: TYPE_TB
- en: '| Client host address | `reject_rbl_client rbl_domain` | The IP address of
    the connecting client is looked up. This is the original and by far most common
    DNSBL type. |'
  id: totrans-338
  prefs: []
  type: TYPE_TB
- en: '| Client hostname | `reject_rhsbl_client rbl_domain` | The hostname of the
    connecting client is looked up. |'
  id: totrans-339
  prefs: []
  type: TYPE_TB
- en: '| Sender address domain | `reject_rhsbl_sender rbl_domain` | The domain of
    the given sender address is looked up. |'
  id: totrans-340
  prefs: []
  type: TYPE_TB
- en: Feel free to list multiple DNSBL restrictions. Make sure you use the restriction
    that corresponds to the DNSBL type—using `reject_rbl_client` with a sender address
    domain DNSBL does not make sense.
  id: totrans-341
  prefs: []
  type: TYPE_NORMAL
- en: 'The following code shows one way of configuring Postfix to use the `zen.spamhaus.org`
    standard-type DNSBL and the `dsn.rfc-ignorant.org` sender domain-DNSBL:'
  id: totrans-342
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  id: totrans-343
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: Notice how these restrictions are listed after both `permit_mynetworks` and
    `reject_unauth_destination`. This is because DNSBL lookups are comparatively expensive,
    and there is no use in wasting time on such lookups for your own clients or for
    clients that might get rejected anyway. To avoid unnecessary delays, be sure to
    list the DNSBLs that block the most messages, first among your DNSBL restrictions.
  id: totrans-344
  prefs: []
  type: TYPE_NORMAL
- en: Choosing DNS blacklists
  id: totrans-345
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In the beginning, the DNSBLs listed only **open relays**, that is, SMTP servers
    that accept all messages from all clients to all destinations. Open relays once
    were the primary source of spam, but this has changed in recent years. Today,
    a lot of spam is sent from the hijacked home computers of innocent and unknowing
    people.
  id: totrans-346
  prefs: []
  type: TYPE_NORMAL
- en: Different blacklists have different policies for listing hosts and removing
    listed hosts. Naturally, the bigger the blacklist, the more legitimate messages
    you are likely to reject. Before starting to use a particular DNSBL to reject
    messages, you should examine these policies carefully and preferably also try
    them out for a while without actually rejecting any messages. The `warn_if_reject`
    restriction can help you with this.
  id: totrans-347
  prefs: []
  type: TYPE_NORMAL
- en: The blacklists that work great for some people and reject huge amounts of spam
    but no legitimate messages may have little value for other people and may actually
    reject more legitimate messages than spam. Take great care when choosing blacklists
    and avoid blindly copying allegedly good sets of DNSBLs from others. Another good
    reason for being cautious is that DNSBLs sometimes go out of service because they
    have been repeatedly attacked by spammers and forced to shut down. This happened
    to the well-known `relays.ordb.org` DNSBL in 2006\. Blacklists that are shut down
    may, after a while, be reconfigured to always indicate an IP address as listed
    in the blacklist, that is, you will reject all mail if configured to use that
    blacklist.
  id: totrans-348
  prefs: []
  type: TYPE_NORMAL
- en: The probably best general-purpose DNSBL out there for use with `reject_rbl_client
    is`, at the moment, `zen.spamhaus.org`. The false-positive rate, that is the share
    of incorrectly rejected genuine e-mail, can be expected to be extremely low while
    the accuracy of catching spam stays high. Unless you have special needs, this
    may be the only DNSBL that you need to use.
  id: totrans-349
  prefs: []
  type: TYPE_NORMAL
- en: Before implementing any DNSBL at all, make sure you know how to exempt certain
    clients or domains from rejections. Sooner or later, and no matter which DNSBL
    you choose to use, you will have cases of legitimate messages being blocked. When
    that happens, it is too late to start digging in the documentation trying to find
    out what you can do about it.
  id: totrans-350
  prefs: []
  type: TYPE_NORMAL
- en: The solution to the problem is to have whitelisting access maps before your
    DNSBL restrictions. Which type of access map you should use depends on the DNSBL
    type, but in most cases `check_client_access` will be suitable, although `check_sender_access`
    is more appropriate if you use `reject_rhsbl_sender`.
  id: totrans-351
  prefs: []
  type: TYPE_NORMAL
- en: 'Continuing the previous example, this is what you can do to exempt certain
    clients and sender addresses from rejection by any following restrictions:'
  id: totrans-352
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  id: totrans-353
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: In `/etc/postfix/rbl_client_exceptions:`
  id: totrans-354
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  id: totrans-355
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: In `/etc/postfix/rhsbl_client_exceptions:`
  id: totrans-356
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  id: totrans-357
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: Stopping messages based on content
  id: totrans-358
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Often, unwanted messages cannot be spotted without looking at their contents.
    Postfix provides some unsophisticated but still very useful tools for this purpose.
    The idea is that the lines in a message are matched against a set of regular expressions
    that you supply and, if there is a match, an action will be carried out. This
    is called **header checks** or **body checks**, depending on what part of the
    message is being inspected. Most often you use header and body checks to reject
    messages, but messages can also be discarded or redirected to another recipient.
    Header and body checks can help you solve the following problems, all of which
    will be discussed in the following sections:'
  id: totrans-359
  prefs: []
  type: TYPE_NORMAL
- en: Reacting to messages containing attachments with forbidden filenames
  id: totrans-360
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Quickly stopping big virus outbreaks
  id: totrans-361
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Custom logging of certain header fields
  id: totrans-362
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Removing certain message headers
  id: totrans-363
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An introduction to regular expressions is beyond the scope of this book. If
    you do not have that knowledge already, there are many regular expression resources
    and tutorials on the net, for example [http://gnosis.cx/publish/programming/regular_expressions.html](http://gnosis.cx/publish/programming/regular_expressions.html)
    and [http://www.codeproject.com/KB/dotnet/regextutorial.aspx](http://www.codeproject.com/KB/dotnet/regextutorial.aspx).
    If you are looking for a book on the topic, Jeffrey E. F. Friedl's *Mastering
    Regular Expressions* (O'Reilly, 2006) is quite comprehensive.
  id: totrans-364
  prefs: []
  type: TYPE_NORMAL
- en: Configuring header and body checks
  id: totrans-365
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The `main.cf` parameters for header and body checks `body_checks, header_checks,
    mime_header_checks`, and `nested_header_checks`—can contain one or more references
    to regular expression lookup tables (`regexp` or `pcre`), which will be considered
    when a message is being received. Technically you could use any other lookup table
    type for this, but only regular expression tables are really useful. The following
    parameters are used for different parts of the message:'
  id: totrans-366
  prefs: []
  type: TYPE_NORMAL
- en: '| Parameter | Part of message it applies to |'
  id: totrans-367
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  id: totrans-368
  prefs: []
  type: TYPE_TB
- en: '| `body_checks` | The body of each message part. |'
  id: totrans-369
  prefs: []
  type: TYPE_TB
- en: '| `header_checks` | All non-MIME top-level headers. |'
  id: totrans-370
  prefs: []
  type: TYPE_TB
- en: '| `mime_header_checks` | All MIME headers found in any message part. The following
    headers are considered to be MIME headers:'
  id: totrans-371
  prefs: []
  type: TYPE_NORMAL
- en: Content-Description
  id: totrans-372
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Content-Disposition
  id: totrans-373
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Content-ID
  id: totrans-374
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Content-Transfer-Encoding
  id: totrans-375
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Content-Type
  id: totrans-376
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: MIME-Version
  id: totrans-377
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '|'
  id: totrans-378
  prefs: []
  type: TYPE_NORMAL
- en: '| `nested_header_checks` | All non-MIME message headers in messages that are
    attached to the received message. |'
  id: totrans-379
  prefs: []
  type: TYPE_TB
- en: This means for each header line, a lookup will be made against the lookup tables
    specified in `header_checks`, each line in the message body will cause a lookup
    against the lookup tables in `body_checks`, and so on.
  id: totrans-380
  prefs: []
  type: TYPE_NORMAL
- en: The format of regular expression lookup tables is very similar to ordinary indexed
    ones. One big difference is that they are not indexed and should not be run through
    the `postmap` program. Postfix will read regular expression lookup tables again
    when the daemons are restarted, which is often enough in many cases. If you want
    an immediate update, you must reload Postfix.
  id: totrans-381
  prefs: []
  type: TYPE_NORMAL
- en: Regular expression lookup tables are not exclusively for header and body checks.
    They can be used wherever Postfix expects a lookup table.
  id: totrans-382
  prefs: []
  type: TYPE_NORMAL
- en: The right-hand side of lookup tables used for header and body checks can contain
    many of the previously described actions allowed in access maps, but one action,
    `IGNORE`, is available only here. The `IGNORE` action simply removes the matched
    line from the message.
  id: totrans-383
  prefs: []
  type: TYPE_NORMAL
- en: Message headers such as the ones in the following example that are wrapped to
    form multiple physical lines, will be joined together before being used as a lookup
    key.
  id: totrans-384
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  id: totrans-385
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: Header and body checks examples
  id: totrans-386
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Now, let's get concrete and take a look at how header and body checks can be
    used. Unless otherwise noted, all these examples work with both the `regexp` and
    the `pcre` lookup table type.
  id: totrans-387
  prefs: []
  type: TYPE_NORMAL
- en: Many computer viruses spread by e-mail, and most of them through programs or
    scripts attached to the messages. Although reacting to messages containing attachments
    with forbidden filenames is a blunt and inexact tool, it is a simple way to take
    care of these unwanted messages even before they reach any antivirus scanner.
    By avoiding large overhead scanning, your server can cope with much larger virus
    outbreaks. There is no complete list of the filenames that can be banned, but
    just blocking `.exe, .scr, .pif, .bat`, and a few more will probably suffice for
    most people. If your users have a need to send or receive files with these filename
    extensions, you may need to relax the policy somewhat. To implement this in Postfix,
    you need to recognize that the filename of an attachment is found in Content-Disposition
    or Content-Type headers. These are MIME headers, so the expression needs to go
    in `mime_header_checks`. In this example, the message is rejected with text that
    indicates the offending filename. If a legitimate mail is rejected, the sender
    will hopefully be able to interpret the error message and resend the message.
  id: totrans-388
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  id: totrans-389
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: Note the indentation on all but the first line. It is needed to have the lines
    be treated as a single line. Lookup tables work in the same way as the `main.cf`
    and `master.cf` configuration files in this respect. The `/x` modifier will cause
    all whitespace to be ignored. This expression, originally constructed by Russell
    Mosemann and further refined by Noel Jones, requires a `pcre` lookup table, but
    it is possible to rewrite the expression to use `regexp`.
  id: totrans-390
  prefs: []
  type: TYPE_NORMAL
- en: '`body_checks` can be a useful tool in quickly stopping big virus outbreaks.
    A number of the previous virus outbreaks have had messages with certain characteristics
    that made them pretty easy to block. If filename blocking is not an option, you
    can try to find lines that are unique to these messages and construct suitable
    expressions.'
  id: totrans-391
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  id: totrans-392
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: If you are unsure whether an expression will be too broad and catch legitimate
    messages, you can use `HOLD` or `WARN` instead of `REJECT. HOLD` will put the
    messages on hold, allowing you to examine them and either release the messages
    or delete them. `WARN` will accept the message but log the incident.
  id: totrans-393
  prefs: []
  type: TYPE_NORMAL
- en: This method of blocking viruses can also be useful when a new virus is just
    starting to spread and the antivirus software you are using has not yet been updated
    to catch it.
  id: totrans-394
  prefs: []
  type: TYPE_NORMAL
- en: The `WARN` action can also be used to get custom logging of certain header fields.
  id: totrans-395
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  id: totrans-396
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: 'Having this expression in `header_checks` will result in all subject headers
    being logged as a warning message similar to this:'
  id: totrans-397
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  id: totrans-398
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: 'Sometimes it can be useful to remove certain message headers. For example,
    some programming libraries that provide SMTP clients add an X-Library header to
    all messages sent. Apparently, many spammers use these libraries and therefore
    SpamAssassin gives a pretty high score for messages that contain this header.
    If you need to use such a library and you cannot or will not modify the source
    code to avoid having the header added in the first place, Postfix can help you
    remove it. This `header_checks` expression will remove all `X-Library` headers
    in messages passing through Postfix:'
  id: totrans-399
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE51]'
  id: totrans-400
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: Caveats
  id: totrans-401
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Header and body checks are simple and blunt tools for inspecting message contents.
    They are useful for a number of things, but do not attempt to overuse use them
    for general-purpose spam fighting. Many people try to use these tools incorrectly,
    and this book will try to dispel some common misconceptions.
  id: totrans-402
  prefs: []
  type: TYPE_NORMAL
- en: 'Header and body checks will inspect only one line at a time, and no state is
    kept between different lines. This means you cannot reject messages that contain
    one bad word on one line and another bad word elsewhere in the message. Do not
    be fooled by the `if...endif` construct allowed in regular expression lookup tables!
    You cannot use them in this way:'
  id: totrans-403
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE52]'
  id: totrans-404
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: Remember, lookups are made one line at a time. Obviously, a line that starts
    with `From` cannot possibly start with `Subject`.
  id: totrans-405
  prefs: []
  type: TYPE_NORMAL
- en: Many spam messages have the mail body in **Base64** encoding. Because of how
    Base64 works, a word has many possible Base64 representations. Postfix does not
    perform any decoding before the message content is fed to the header and body
    checks.
  id: totrans-406
  prefs: []
  type: TYPE_NORMAL
- en: This means that using `body_checks` to block messages containing bad words doesn't
    work universally. If `body_checks` is your only tool to fight spam, you will spend
    a couple of hours every day maintaining your regular expressions so they will
    catch the spam of the day, but you will still not have high accuracy.
  id: totrans-407
  prefs: []
  type: TYPE_NORMAL
- en: Header and body checks apply to all messages. You cannot whitelist a certain
    sender or a certain client. If you host multiple domains you have the option of
    using different header and body checks for your hosted domains by running multiple
    `cleanup` daemons and multiple `smtpd` daemons listening on different IP addresses,
    or you can run multiple instances of Postfix. The latter means that you have multiple
    queue directories and multiple copies of Postfix running at the same time. This
    is required for some complex setups, but can actually simplify setups that are
    possible with a single instance.
  id: totrans-408
  prefs: []
  type: TYPE_NORMAL
- en: You cannot use header and body checks to check for the nonexistence of something,
    so you cannot reject messages that have an empty body or messages that do not
    contain a secret password.
  id: totrans-409
  prefs: []
  type: TYPE_NORMAL
- en: Having a large number of regular expressions in `body_checks` is not only a
    maintenance nightmare but may also seriously degrades the performance of your
    server. A reasonable configuration should not need more than, say, 10 20 expressions.
    If you have too many expressions, Postfix's `cleanup` processes will use a lot
    of CPU time.
  id: totrans-410
  prefs: []
  type: TYPE_NORMAL
- en: Virtual alias domains and local aliases
  id: totrans-411
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, some of Postfix's features for address rewriting to allow hosting
    multiple domains and implementing group addresses (or distribution lists) will
    be discussed.
  id: totrans-412
  prefs: []
  type: TYPE_NORMAL
- en: Additionally, this section will take a look at how to find information in MySQL
    databases using Postfix. The goal of the exercise will be to use MySQL lookups
    for alias lookups, but the knowledge you can gain will be applicable for all other
    situations where you might want to use MySQL together with Postfix. It will be
    assumed that you have basic SQL knowledge and that you are able to set up and
    operate a MySQL server.
  id: totrans-413
  prefs: []
  type: TYPE_NORMAL
- en: Virtual alias domains
  id: totrans-414
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As was explained earlier, even though you can have several local domains (several
    domains listed in `mydestination`), they will always be equivalent—they share
    a single localpart namespace. In other words, `joe@localdomain1.com` is `joe@localdomain2.com`
    is `joe@localdomain3.com`. Obviously, this is not good enough. In order to host
    multiple domains with distinct localpart namespaces, you need virtual alias domains.
  id: totrans-415
  prefs: []
  type: TYPE_NORMAL
- en: Note
  id: totrans-416
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: A **virtual alias domain** is a domain where each valid address maps to one
    or more other e-mail addresses, possibly in other domains. Compare this to local
    domains where an address typically maps directly to a UNIX system account. `joe@virtualdomain1`
    and `joe@virtualdomain2` can lead to completely different mailboxes.
  id: totrans-417
  prefs: []
  type: TYPE_NORMAL
- en: Virtual alias domains are sometimes just called virtual domains, but to avoid
    confusion with virtual mailbox domains, which are also sometimes called virtual
    domains, the full term will be used.
  id: totrans-418
  prefs: []
  type: TYPE_NORMAL
- en: To show how virtual alias domains work in Postfix, let's return to our friends
    at Example Inc. for a couple of examples of how they can enhance their mail system
    by using virtual alias domains.
  id: totrans-419
  prefs: []
  type: TYPE_NORMAL
- en: Many virtual alias domains mapping to one local domain
  id: totrans-420
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The directors of Example Inc. have now expanded their business significantly
    and want to have subdomains for their branch offices to avoid name clashes when
    two people in different offices share the same name. For their offices in London,
    Paris, and Berlin they want the domains `gb.example.com, fr.example.com`, and
    `de.example.com` respectively. They have a single Postfix server that receives
    all messages.
  id: totrans-421
  prefs: []
  type: TYPE_NORMAL
- en: The solution to Example Inc's problem is to let `gb.example.com, fr.example.com`,
    and `de.example.com` all be virtual alias domains. The original `example.com`
    domain should remain a local domain. Postfix looks for virtual alias domains in
    the `virtual_alias_domains` parameter.
  id: totrans-422
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE53]'
  id: totrans-423
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: Make sure that you do not list any of these domains in `mydestination`. The
    next step is to tell Postfix which addresses in the virtual alias domains map
    to which addresses in the `example.com` domain. This is done by specifying one
    or more lookup tables in the `virtual_alias_maps` parameter. For starters, Example
    Inc. will just use a simple `hash` type lookup table. When things work as we expect
    them to, they will create an equivalent configuration that looks up data in a
    MySQL database.
  id: totrans-424
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE54]'
  id: totrans-425
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: Now, Postfix will use the virtual aliases they put in `/etc/postfix/virtual`.
    The format of a virtual alias lookup table is very simple; the recipient address
    is the lookup key and the address/addresses to which the recipient address should
    be rewritten is the result.
  id: totrans-426
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE55]'
  id: totrans-427
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: After editing the `/etc/postfix/virtual` file, `postmap` must be run in order
    to transform the file into `/etc/postfix/virtual.db`.
  id: totrans-428
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE56]'
  id: totrans-429
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: The format of virtual alias lookup tables is described in the `virtual(5)` manual
    page.
  id: totrans-430
  prefs: []
  type: TYPE_NORMAL
- en: In the above example, all messages to `joe@gb.example.com` will end up in the
    mailbox of the user "joe1", all messages to `joe@de.example.com` will end up in
    the mailbox of the user "joe2", and all messages to `jane@fr.example.com` will
    end up in the mailbox of the user "jane". Note that introducing virtual alias
    domains does not cause the original local domain to stop accepting messages.
  id: totrans-431
  prefs: []
  type: TYPE_NORMAL
- en: Jane and our two Joes will also receive messages addressed to their actual usernames
    at `example.com`. (joe1@example.com, `joe2@example.com`, and `jane@example.com`).
    If this is undesirable, you can use `smtpd_recipient_restrictions` and `check_recipient_access`
    to reject attempts to send messages to these recipients. Add the restriction to
    the `smtpd_recipient_restrictions` setting (if any) in `main.cf:`
  id: totrans-432
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE57]'
  id: totrans-433
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: 'Then put the following in `/etc/postfix/recipient_access` and run `postmap`
    on the file:'
  id: totrans-434
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE58]'
  id: totrans-435
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: One virtual alias domain mapping to many local domains
  id: totrans-436
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: After running the previous setup for a while, the staff at Example Inc. decide
    that they want to return to the old setup with a single domain for all employees.
    The name clashes can be resolved by including the users' last names in the address.
    They also want to have one mail server per branch office to avoid latency and
    network load when the users are accessing their mailboxes. All London users will
    have their accounts residing on the London server, Paris users on the Paris server,
    and Berlin users on the Berlin server. This problem is an opportunity to look
    at a different way of using virtual alias domains.
  id: totrans-437
  prefs: []
  type: TYPE_NORMAL
- en: The idea in this setup is that `example.com` will be the virtual domain and
    that each Postfix server will have a local domain of its own. The server at the
    London office will have `gb.example.com` listed as a local domain. Virtual aliasing
    will be used to map from the `example.com` addresses to the office-specific subdomains.
    This mapping can either be done exclusively on a master server or on the servers
    for each of the branch offices. Having a single master server introduces the problem
    of synchronizing the data between the servers, but that problem can be solved
    easily by storing the data in a relational database. How to use MySQL for alias
    lookups will be discussed in the *Introducing MySQL lookups* section later in
    the chapter.
  id: totrans-438
  prefs: []
  type: TYPE_NORMAL
- en: 'To implement this, start by removing `example.com` from `mydestination` and
    add it to `virtual_alias_domains` instead. This needs to be done on all servers.
    The branch office servers—one of which could easily be the master server—should
    have their own domain (`gb.example.com`, and so on) listed in `mydestination`.
    Do not forget to set up the DNS server so that messages to the branch office domains
    will be routed to the branch office servers. Finally, the virtual alias table
    should look like this:'
  id: totrans-439
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE59]'
  id: totrans-440
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: This problem illustrates an important point; the address/addresses in the right-hand
    side of a virtual alias table do not have to be local. Any domain can be put there.
    This is what happens when the master server receives a mail to `joe.smith@example.com:`
  id: totrans-441
  prefs: []
  type: TYPE_NORMAL
- en: Postfix looks in `virtual_alias_domains` to see if `example.com` is a virtual
    alias domain, and the result is positive.
  id: totrans-442
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, it looks up `joe.smith@example.com` in `virtual_alias_maps`. The lookup
    returns `joe1@gb.example.com`.
  id: totrans-443
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Postfix on the master server decides that `gb.example.com` is not a domain that
    it hosts, and uses DNS to resolve the destination of the message, and finally
    delivers it to the London branch office server.
  id: totrans-444
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Group addresses
  id: totrans-445
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This third and final virtual alias example will do little more than state that
    the right-hand side of virtual alias tables may contain several addresses, which
    can be the names of other aliases rather than actual account names.
  id: totrans-446
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE60]'
  id: totrans-447
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: In this example, a message sent to `all@example.com` will be sent to all in
    management and all in finance, which in turn means Joe Smith, Joe Schmidt, Jane
    Doe, and Jack Black.
  id: totrans-448
  prefs: []
  type: TYPE_NORMAL
- en: It may not be desirable to let anyone send messages to large distribution lists.
    Luckily, you can use Postfix's SMTP restrictions to restrict the access to the
    sensitive addresses. If you only want your own users (clients within `mynetworks`)
    to be allowed to send messages to an address, the solution is very simple. In
    `main.cf`, use the `check_recipient_access` restriction to disallow access to
    the address, but use `permit_mynetworks` to exempt your own clients.
  id: totrans-449
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE61]'
  id: totrans-450
  prefs: []
  type: TYPE_PRE
  zh: '[PRE61]'
- en: If you already use `smtpd_recipient_restrictions` in your `main.cf`, you will
    have to modify that parameter rather than just adding what is listed in the example
    above. The key feature is to list the `check_recipient_access` restriction after
    the `permit_mynetworks` restriction.
  id: totrans-451
  prefs: []
  type: TYPE_NORMAL
- en: Contents of `/etc/postfix/restricted_recipients:`
  id: totrans-452
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE62]'
  id: totrans-453
  prefs: []
  type: TYPE_PRE
  zh: '[PRE62]'
- en: In more complex scenarios, like when you want to disallow a recipient address
    for all but a few sender addresses or clients, you may need to use Postfix's restriction
    class feature. It is described in `RESTRICTION_CLASS_README` ([http://www.postfix.org/RESTRICTION_CLASS_README.html](http://www.postfix.org/RESTRICTION_CLASS_README.html))
    along with an example for this particular case.
  id: totrans-454
  prefs: []
  type: TYPE_NORMAL
- en: Introducing MySQL lookups
  id: totrans-455
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If your organization is large, maintaining a flat text file with aliases can
    be tedious. Storing the data in a real database comes with many advantages—many
    users can edit the data simultaneously, the users themselves can be allowed to
    perform some tasks via web interfaces, the data can be easily shared over the
    network, and so on.
  id: totrans-456
  prefs: []
  type: TYPE_NORMAL
- en: Postfix supports looking up data in a number of *complex* lookup table types.
    These include MySQL, PostgreSQL, and LDAP. It is *complex* not because it is very
    difficult to set up, but because there are inherently more things that can go
    wrong and, yes, simple indexed files (`hash, dbm, btree, cdb`) are easier to get
    right. If you want to solve a problem with a lookup table, always start with an
    indexed file. When you get things working and understand why and how they work,
    try to transform the same idea to the complex lookup table type.
  id: totrans-457
  prefs: []
  type: TYPE_NORMAL
- en: 'Postfix does not require you to conform to some specific database schema. For
    each lookup table where you use MySQL, you can use a separate configuration that
    given whatever schema you have chosen to use (more or less—the current version
    of Postfix does not quite allow arbitrary MySQL queries), returns the desired
    result. Each configuration is stored in a separate file that can have restrictive
    permissions as they contain database passwords. To use MySQL for looking up virtual
    aliases, the following setting in `main.cf` will do:'
  id: totrans-458
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE63]'
  id: totrans-459
  prefs: []
  type: TYPE_PRE
  zh: '[PRE63]'
- en: The configuration file follows the same format as `main.cf` and contains all
    information required to make a lookup—in this case, a virtual alias lookup. The
    following table describes the parameters that you can put in the configuration
    file. The parameters will be used to construct the `SELECT` query. In Postfix
    2.1 and later, the format of such configuration files can be found in the `mysql_table(5)`
    manual page.
  id: totrans-460
  prefs: []
  type: TYPE_NORMAL
- en: '| Parameter | Description |'
  id: totrans-461
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  id: totrans-462
  prefs: []
  type: TYPE_TB
- en: '| `hosts` | A list of the MySQL hosts that Postfix will contact to perform
    the query. Can contain either IP addresses, hostnames or, when prefixed with `unix:`,
    the path to a local UNIX domain socket. If you specify multiple hosts, they will
    be tried in random order. Any UNIX domain socket hosts will be tried first. |'
  id: totrans-463
  prefs: []
  type: TYPE_TB
- en: '| `user` | The username that should be used to log in to the MySQL server.
    |'
  id: totrans-464
  prefs: []
  type: TYPE_TB
- en: '| `password` | The password that should be used to log in to the MySQL server.
    |'
  id: totrans-465
  prefs: []
  type: TYPE_TB
- en: '| `dbname` | The name of the database to use. |'
  id: totrans-466
  prefs: []
  type: TYPE_TB
- en: '| `select_field` | The name of the column from which the lookup result will
    be taken. |'
  id: totrans-467
  prefs: []
  type: TYPE_TB
- en: '| `table` | The table that will be searched for the data. |'
  id: totrans-468
  prefs: []
  type: TYPE_TB
- en: '| `where_field` | The table column with which the lookup key will be compared.
    |'
  id: totrans-469
  prefs: []
  type: TYPE_TB
- en: '| `additional_conditions` | If you require some additional conditions to be
    tacked on at the end of the constructed query, you can put them here. |'
  id: totrans-470
  prefs: []
  type: TYPE_TB
- en: '| `query` | The SQL query to perform, with `%s` being a placeholder for the
    string being looked up. This parameter is mutually exclusive with `select_field,
    table, where_field`, and `additional_conditions`. This parameter was introduced
    in Postfix 2.2 and is the recommended way of configuring the MySQL query. |'
  id: totrans-471
  prefs: []
  type: TYPE_TB
- en: Let's start with a simple example. You have a table alias with two columns—
    `alias` and `address`. The `alias` column is the left-hand side of the virtual
    lookup table (the address with the virtual alias domain) and the `address` column
    is the right-hand side (the new address).
  id: totrans-472
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE64]'
  id: totrans-473
  prefs: []
  type: TYPE_PRE
  zh: '[PRE64]'
- en: 'The following simple SQL query is needed to find out whether an address in
    one of the virtual domains exists and should be rewritten to some other address:'
  id: totrans-474
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE65]'
  id: totrans-475
  prefs: []
  type: TYPE_PRE
  zh: '[PRE65]'
- en: 'Translating this into a Postfix MySQL lookup table configuration yields the
    following:'
  id: totrans-476
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE66]'
  id: totrans-477
  prefs: []
  type: TYPE_PRE
  zh: '[PRE66]'
- en: 'An alternative solution, using the `query` parameter of Postfix 2.2, would
    look like this:'
  id: totrans-478
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE67]'
  id: totrans-479
  prefs: []
  type: TYPE_PRE
  zh: '[PRE67]'
- en: For brevity, the `hosts, user, password`, and `dbname` parameters will hereon
    be omitted from the example configurations.
  id: totrans-480
  prefs: []
  type: TYPE_NORMAL
- en: Sometimes reality is a bit more complicated than this trivial example, so we
    will move on to something a bit more difficult.
  id: totrans-481
  prefs: []
  type: TYPE_NORMAL
- en: 'The `select_field, table, where_field`, and `additional_conditions` parameters
    are really just inserted directly into the following `SELECT` query template,
    together with the lookup string:'
  id: totrans-482
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE68]'
  id: totrans-483
  prefs: []
  type: TYPE_PRE
  zh: '[PRE68]'
- en: 'This means `select_field` does not have to be a single column; it could specify
    multiple columns combined into one value, and `table` could be multiple tables
    with the join conditions in `additional_conditions`. For example, consider this
    slightly more complex query:'
  id: totrans-484
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE69]'
  id: totrans-485
  prefs: []
  type: TYPE_PRE
  zh: '[PRE69]'
- en: 'The following lookup table configuration would be required to execute it:'
  id: totrans-486
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE70]'
  id: totrans-487
  prefs: []
  type: TYPE_PRE
  zh: '[PRE70]'
- en: 'Or, using the `query` parameter:'
  id: totrans-488
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE71]'
  id: totrans-489
  prefs: []
  type: TYPE_PRE
  zh: '[PRE71]'
- en: Before putting a new MySQL lookup table configuration to work, you should make
    sure that it returns the desired result for all lookup keys. This can be done
    with the `postmap` program, the procedure for which is described in the *Troubleshooting
    lookup tables with postmap* section.
  id: totrans-490
  prefs: []
  type: TYPE_NORMAL
- en: Local aliases
  id: totrans-491
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Local aliases are an alternative to virtual aliases. Local aliases pretty much
    work in the same way, but they apply only to local domains. Local alias tables
    also provide a couple of extra features. We took a brief look at local aliases
    even before we started Postfix the first time in the *Error reporting* section.
  id: totrans-492
  prefs: []
  type: TYPE_NORMAL
- en: Lookup tables for local aliases are specified in the `alias_maps` parameter.
    These lookup tables have a slightly different format than virtual aliases, and
    the reason is to stay compatible with the file format of the `sendmail` mail transfer
    agent. Because of this, you should not use the `postmap` command to rebuild the
    alias file but `postalias` instead. You may also find the `newaliases` command
    to be convenient.
  id: totrans-493
  prefs: []
  type: TYPE_NORMAL
- en: Many people are confused by the two similar parameters, `alias_maps` and `alias_database`.
    The difference between the two of them is that `alias_maps` contains the lookup
    tables that Postfix will use to do local alias rewriting, and `alias_database`
    contains the lookup tables that the `newaliases` command will rebuild when invoked.
    Only indexed lookup tables (`hash, btree, dbm, cdb`) need to be rebuilt, so it
    does not make sense to list MySQL lookup tables there.
  id: totrans-494
  prefs: []
  type: TYPE_NORMAL
- en: 'Often, you will want `alias_maps` and `alias_database` to refer to the same
    lookup table(s):'
  id: totrans-495
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE72]'
  id: totrans-496
  prefs: []
  type: TYPE_PRE
  zh: '[PRE72]'
- en: 'Compared to virtual alias tables, the lookup key in local alias tables does
    not include the domain part. That information would be useless as all local domains
    have the same localpart namespaces. When indexed files are used for local aliases,
    the lookup key must end with a colon, for example see the follwoing:'
  id: totrans-497
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE73]'
  id: totrans-498
  prefs: []
  type: TYPE_PRE
  zh: '[PRE73]'
- en: This will send messages addressed to the postmaster address in any local domain
    to the two users, `jack` and `jill`, assuming that the domain in `myorigin` is
    local. The next section explains why this assumption is important.
  id: totrans-499
  prefs: []
  type: TYPE_NORMAL
- en: The right-hand side of alias tables does not necessarily have to point to local
    users. In fact they may point to any valid address in any domain. The format of
    local alias tables is described in the `aliases(5)` manual page.
  id: totrans-500
  prefs: []
  type: TYPE_NORMAL
- en: Command deliveries
  id: totrans-501
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Up until now, everything that could have been done with a local alias could
    just as well have been done with a virtual alias. So, what is the point of local
    aliases? One big difference is that local aliases support delivering messages
    to commands. This is typically required by mailing list manager software. Postfix
    delivers messages to commands by passing the contents of the messages on the standard
    input stream.
  id: totrans-502
  prefs: []
  type: TYPE_NORMAL
- en: 'To run a command when a message is delivered, the following syntax is used:'
  id: totrans-503
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE74]'
  id: totrans-504
  prefs: []
  type: TYPE_PRE
  zh: '[PRE74]'
- en: The double quotes are necessary only if the command, as in this case, contains
    spaces.
  id: totrans-505
  prefs: []
  type: TYPE_NORMAL
- en: 'But what if you want to run a mailing list on a virtual domain? You will have
    to use virtual aliases to rewrite the addresses in the virtual domain to local
    aliases. Say you want messages sent to the address `mylist@virtual.example.com`
    to be posted to the `mylist` mailing list, which accepts messages via command
    delivery. To enable this you will need a virtual alias such as the following:'
  id: totrans-506
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE75]'
  id: totrans-507
  prefs: []
  type: TYPE_PRE
  zh: '[PRE75]'
- en: Pay attention to what user the programs will run as. Postfix normally uses the
    owner of the alias file, but not if the owner is the root user. In that case,
    the user in the `default_privs` parameter (typically "nobody") will be used to
    run the program.
  id: totrans-508
  prefs: []
  type: TYPE_NORMAL
- en: If you write your own program that you want Postfix to deliver messages to,
    make sure you return an appropriate exit status when errors occur. Postfix uses
    the error status constants in `sysexits.h` to determine what to do if the program
    exits with a non-zero exit status. Depending on the exit status, Postfix will
    either return the message to the sender or let it remain in the queue and retry
    delivery later.
  id: totrans-509
  prefs: []
  type: TYPE_NORMAL
- en: Common pitfalls
  id: totrans-510
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Virtual aliases not only apply to virtual alias domains but also to all messages
    that pass through Postfix. Not recognizing this may lead to surprises. For example,
    if you host many virtual alias domains that all should have some aliases in common—say,
    `root, postmaster`, and `abuse`—you might be tempted to use a regular expression
    lookup table (`regexp` or `PCRE`) to alias these addresses for all of your virtual
    alias domains to yourself.
  id: totrans-511
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE76]'
  id: totrans-512
  prefs: []
  type: TYPE_PRE
  zh: '[PRE76]'
- en: Do not do this! As virtual aliases apply to all messages, any messages that
    you or your users send to, for instance, `abuse@aol.com` or `abuse@mindspring.com`
    will be sent to you instead of the intended recipient.
  id: totrans-513
  prefs: []
  type: TYPE_NORMAL
- en: A very common pitfall is believing that a non-qualified address on the right-hand
    side implicitly refers to a local user. For example, `joe` would always mean the
    local user joe. This is equally untrue for both virtual aliases and local aliases.
    Recall from the beginning of this chapter when the `myorigin` parameter was discussed.
    Just as in all other places, Postfix will qualify bare usernames with `myorigin`.
    If your value of `myorigin` happens to be a local domain listed in `mydestination`,
    which it probably would be, `joe` will indeed refer to the local user joe. To
    avoid surprises, if you at some time set `myorigin` to a non-local domain, it
    is a good idea to always qualify the right-hand side addresses with a local domain.
    As `localhost.$mydomain` almost always is listed in `mydestination`, a good candidate
    might be `localhost`.
  id: totrans-514
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE77]'
  id: totrans-515
  prefs: []
  type: TYPE_PRE
  zh: '[PRE77]'
- en: Other address rewriting mechanisms
  id: totrans-516
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Virtual and local aliases are not the only mechanisms for address rewriting
    that Postfix provides. Most notably, canonical rewriting can be used to rewrite
    sender and/or recipient addresses in both the envelope and the headers. This type
    of rewriting is provided by the parameters `canonical_maps, sender_canonical_maps`,
    and `recipient_canonical_maps` and can among other things be useful to rewrite
    sender addresses such as `joe@example.com` to `Joe.User@example.com` if you do
    not want to expose the actual usernames of the users.
  id: totrans-517
  prefs: []
  type: TYPE_NORMAL
- en: How Postfix rewrites addresses and in what order rewriting happens is described
    in *ADDRESS_REWRITING_README* available at [http://www.postfix.org/ADDRESS_REWRITING_README.html](http://www.postfix.org/ADDRESS_REWRITING_README.html).
  id: totrans-518
  prefs: []
  type: TYPE_NORMAL
- en: Troubleshooting Postfix problems
  id: totrans-519
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Postfix provides many tools to simplify problem solving. While implementing
    new features in your Postfix mail system, do it step by step. The more unsure
    you are in what you are doing, the smaller should be the steps that you take.
    If you run into problems, you will discover them early and it will be easier to
    figure out what went wrong. This is especially true when implementing complex
    lookup tables using MySQL databases.
  id: totrans-520
  prefs: []
  type: TYPE_NORMAL
- en: Note
  id: totrans-521
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If you are even slightly uncomfortable with complex lookup tables, never introduce
    a new feature and a complex lookup table configuration at the same time. If something
    breaks, you will have much more trouble figuring out where to start.
  id: totrans-522
  prefs: []
  type: TYPE_NORMAL
- en: 'When trying out new configurations, it does not hurt to be on the cautious
    side until the configuration is fully tested. By setting the following feature
    all permanent errors will be turned into temporary errors:'
  id: totrans-523
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE78]'
  id: totrans-524
  prefs: []
  type: TYPE_PRE
  zh: '[PRE78]'
- en: This means the transmission of any messages rejected by your server will be
    retried, and that Postfix will retry sending any messages that get rejected by
    a remote server. With this setting in effect, closely monitor the logs and look
    for rejections that do not seem normal. Do not forget to turn this feature off
    when you have finished testing!
  id: totrans-525
  prefs: []
  type: TYPE_NORMAL
- en: Reading and interpreting the log files
  id: totrans-526
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'One key element in troubleshooting Postfix problems is being able to read and
    interpret the log messages that Postfix produces. Because they are plain text
    files with one log message per line, they do not require any special programs
    for inspection. Logs have been looked at a few times before, but this section
    will explain the messages and give examples of both successful mail deliveries
    and failures. When reading the examples, refer to the figure in the *Postfix architecture:
    An overview* section and note how the order of the log entries closely follows
    the path of the mail through Postfix.'
  id: totrans-527
  prefs: []
  type: TYPE_NORMAL
- en: Understanding Postfix's logging is also discussed in Kyle Dent's article *Troubleshooting
    with Postfix Logs* at [http://www.onlamp.com/pub/a/onlamp/2004/01/22/postfix.html](http://www.onlamp.com/pub/a/onlamp/2004/01/22/postfix.html).
  id: totrans-528
  prefs: []
  type: TYPE_NORMAL
- en: Message queue ID
  id: totrans-529
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: An important property of each message, received and processed, is the queue
    ID. The **queue ID** is a hexadecimal number of varying lengths that identifies
    a message. Log messages that have a message context will also log the queue ID.
    This makes it easy for you to find all log messages that pertain to a message
    if you have the queue ID (the path to the log file needs to be adjusted for your
    system).
  id: totrans-530
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE79]'
  id: totrans-531
  prefs: []
  type: TYPE_PRE
  zh: '[PRE79]'
- en: The queue ID is assigned when the `cleanup` daemon creates a queue file in one
    of the Postfix queue directories. The queue file remains in the system until all
    recipients have been delivered to or the message expires, after which the `qmgr`
    daemon removes the queue file. In recent releases of Postfix, this removal event
    is logged, as we will see in the examples.
  id: totrans-532
  prefs: []
  type: TYPE_NORMAL
- en: 'Sometimes you will find that there is no queue ID but instead the word `NOQUEUE`
    in the log, as in this example that we have seen before:'
  id: totrans-533
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE80]'
  id: totrans-534
  prefs: []
  type: TYPE_PRE
  zh: '[PRE80]'
- en: The reason is that this message has not yet been given a queue file and thus
    has not been assigned a queue ID. The queue file is created by the `cleanup` daemon
    when the first recipient has been accepted. This helps in performance optimization.
  id: totrans-535
  prefs: []
  type: TYPE_NORMAL
- en: Do not confuse the queue ID with the message ID. The latter is contained in
    the Message-ID header of each message and is normally added by the mail client
    before the message is handed over to Postfix. If no such header field is present,
    the `cleanup` daemon of Postfix will add one for you. The `cleanup` daemon will
    always log the message ID of received messages.
  id: totrans-536
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE81]'
  id: totrans-537
  prefs: []
  type: TYPE_PRE
  zh: '[PRE81]'
- en: The Message-ID header contains the hostname of the computer and typically the
    current date and time, and it will be unique for each message. Do not fall in
    the trap of thinking that the queue IDs also are unique. Queue IDs can and will
    be reused for different messages, theoretically as often as every second (but
    that would have to be on an incredibly busy system).
  id: totrans-538
  prefs: []
  type: TYPE_NORMAL
- en: SMTP submission and local delivery
  id: totrans-539
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Let's start by looking at two examples of successful mail transactions. The
    first one shows a message being received by SMTP and delivered to a local mailbox,
    and the second example will show a locally submitted message that is delivered
    to a foreign mailbox via SMTP.
  id: totrans-540
  prefs: []
  type: TYPE_NORMAL
- en: The first example shows what the logs contain after a message has been received
    via SMTP and delivered to a local user.
  id: totrans-541
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE82]'
  id: totrans-542
  prefs: []
  type: TYPE_PRE
  zh: '[PRE82]'
- en: The `smtpd` daemon has received a connection from a client.
  id: totrans-543
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE83]'
  id: totrans-544
  prefs: []
  type: TYPE_PRE
  zh: '[PRE83]'
- en: Postfix has now accepted the first recipient of this message and requested a
    queue file from the `cleanup` daemon. This is the first log entry for this message
    that contains the queue ID.
  id: totrans-545
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE84]'
  id: totrans-546
  prefs: []
  type: TYPE_PRE
  zh: '[PRE84]'
- en: The `cleanup` daemon has received the whole message from the `smtpd` daemon
    and logs the message ID.
  id: totrans-547
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE85]'
  id: totrans-548
  prefs: []
  type: TYPE_PRE
  zh: '[PRE85]'
- en: The client disconnected from the SMTP server.
  id: totrans-549
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE86]'
  id: totrans-550
  prefs: []
  type: TYPE_PRE
  zh: '[PRE86]'
- en: The message has entered the active queue and is thus eligible for delivery (unless
    the queue is congested, delivery will start more or less immediately). The queue
    manager logs the sender address, the message size in bytes, and the total number
    of recipients. The reported size will be slightly larger than the actual number
    of bytes in the message and the size of the message when stored on disk. This
    is because the reported size is the total size of the message content records
    in the queue file, and this gives a little overhead.
  id: totrans-551
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE87]'
  id: totrans-552
  prefs: []
  type: TYPE_PRE
  zh: '[PRE87]'
- en: The local delivery agent successfully delivered the message to the `maildir`
    of the local user "jack". The message was originally addressed to `postmaster@example.net`,
    but some address rewriting mechanism (typically a local or virtual alias) rewrote
    the recipient address. Finally, the message was delivered about one tenth of a
    second after it was received (the `delay` keyword).
  id: totrans-553
  prefs: []
  type: TYPE_NORMAL
- en: Note that this message is logged when the delivery is completed. If the delivery
    agent invokes another program during the delivery and that program logs messages
    of its own, these will end up in the log before this delivery completion message.
  id: totrans-554
  prefs: []
  type: TYPE_NORMAL
- en: 'Each recipient delivered to will emit a log message:'
  id: totrans-555
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE88]'
  id: totrans-556
  prefs: []
  type: TYPE_PRE
  zh: '[PRE88]'
- en: This final message signals that all recipients have been delivered to so that
    the queue file is removed.
  id: totrans-557
  prefs: []
  type: TYPE_NORMAL
- en: Local submission and SMTP delivery
  id: totrans-558
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Our next example is somewhat the opposite of the previous example. Here, a
    message submitted via the `sendmail` command is delivered to another host via
    SMTP:'
  id: totrans-559
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE89]'
  id: totrans-560
  prefs: []
  type: TYPE_PRE
  zh: '[PRE89]'
- en: The submitted message has been taken care of by the `pickup` daemon. The message
    was submitted by the user having user ID `100`, and the sender was the unqualified
    address `jack:`
  id: totrans-561
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE90]'
  id: totrans-562
  prefs: []
  type: TYPE_PRE
  zh: '[PRE90]'
- en: 'Again, the message has been read by the `cleanup` daemon and the message ID
    is logged:'
  id: totrans-563
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE91]'
  id: totrans-564
  prefs: []
  type: TYPE_PRE
  zh: '[PRE91]'
- en: Note how the previously unqualified sender address has now been rewritten to
    a fully qualified address, probably because the `myorigin` parameter is equal
    to `example.net`.
  id: totrans-565
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE92]'
  id: totrans-566
  prefs: []
  type: TYPE_PRE
  zh: '[PRE92]'
- en: 'The message was successfully delivered to the recipient `joe@example.com` via
    the `mail.example.com` SMTP relay. When accepting the message, the remote server
    said:'
  id: totrans-567
  prefs: []
  type: TYPE_NORMAL
- en: '**250 Ok: queued as DD8F02787**'
  id: totrans-568
  prefs: []
  type: TYPE_NORMAL
- en: 'So now we know the queue ID that our message got at the other end. This information
    may be useful if we need to contact the postmaster at `example.com` regarding
    this message:'
  id: totrans-569
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE93]'
  id: totrans-570
  prefs: []
  type: TYPE_PRE
  zh: '[PRE93]'
- en: Delivery completed, queue file removed.
  id: totrans-571
  prefs: []
  type: TYPE_NORMAL
- en: Hopefully you are starting to get a grip on the general format of the log entries
    emitted for a message, so the next example will show only log fragments.
  id: totrans-572
  prefs: []
  type: TYPE_NORMAL
- en: Connection problems upon SMTP delivery
  id: totrans-573
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The following example shows what happens when multiple hosts are set up in
    DNS to receive messages for a domain but some of the hosts are temporarily unreachable
    causing Postfix to try a few of them before the delivery can be made. We will
    only look at the logs of the delivery agent:'
  id: totrans-574
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE94]'
  id: totrans-575
  prefs: []
  type: TYPE_PRE
  zh: '[PRE94]'
- en: Clearly, three of the receiving mail hosts for `hotmail.com` were unreachable
    when Postfix attempted the delivery. Notice how the connection attempts are evenly
    spread out at 30-second intervals. This is not a coincidence; the default value
    of the `smtp_connect_timeout` parameter that controls how long Postfix will wait
    for a connection is indeed 30 seconds. These three 30-second timeouts also explain
    why the delivery delay logged by the last message is 92 seconds. Also do notice
    that the acceptance message that Hotmail gives us does not contain any queue ID
    but instead the message ID—the format of the text message following the 250 status
    code has not been standardized.
  id: totrans-576
  prefs: []
  type: TYPE_NORMAL
- en: Getting more detailed log messages
  id: totrans-577
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'In most cases, Postfix''s default logging is enough to resolve a problem but
    sometimes more details are needed. For those rare cases, you can ask Postfix''s
    daemon processes to log more detailed messages by making sure they are given at
    least one `-v` startup option. This is done by editing `master.cf`, and adding
    `-v` to the end of the line for the daemon from which you want to get more detailed
    logging. For example, to get verbose logging from the SMTP server, `smtpd`, change
    the line:'
  id: totrans-578
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE95]'
  id: totrans-579
  prefs: []
  type: TYPE_PRE
  zh: '[PRE95]'
- en: 'To this:'
  id: totrans-580
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE96]'
  id: totrans-581
  prefs: []
  type: TYPE_PRE
  zh: '[PRE96]'
- en: Depending on your configuration, the first line may look slightly different,
    but the important part is what is in the last column, the name of the daemon.
    In the case of the SMTP server, busy servers may produce insane amounts of logging
    with this setting. If such is the case, the `debug_peer_list` parameter can come
    in handy.
  id: totrans-582
  prefs: []
  type: TYPE_NORMAL
- en: This parameter accepts one or more hostnames or network addresses for which
    the level of logging will be increased. This makes sense only in contexts where
    there is a network peer such as in the SMTP server and SMTP client.
  id: totrans-583
  prefs: []
  type: TYPE_NORMAL
- en: 'If you are having problems sending messages to a particular remote server,
    say `mail.example.com`, you can set the following rule:'
  id: totrans-584
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE97]'
  id: totrans-585
  prefs: []
  type: TYPE_PRE
  zh: '[PRE97]'
- en: You can then watch the increased logging when Postfix connects to that particular
    host. When using `debug_peer_list`, there is no reason to touch `master.cf`.
  id: totrans-586
  prefs: []
  type: TYPE_NORMAL
- en: Troubleshooting lookup tables with Postmap
  id: totrans-587
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `postmap` command is not only useful for rebuilding indexed lookup tables,you
    can also use it to query lookup tables in order to check if the lookups work as
    you expect them to. This is especially useful for regular expression lookup tables
    and complex lookup table types such as MySQL, LDAP, and PostgreSQL. Before taking
    new lookup tables into use in Postfix, you should test them with `postmap` first.
    To perform lookups with `postmap`, use the `-q` option:'
  id: totrans-588
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE98]'
  id: totrans-589
  prefs: []
  type: TYPE_PRE
  zh: '[PRE98]'
- en: This will query the MySQL lookup table described by the configuration in `/etc/postfix/mysql-aliases.cf`
    for the string `postmaster@example.com`, simulating a virtual alias lookup by
    Postfix.
  id: totrans-590
  prefs: []
  type: TYPE_NORMAL
- en: You can also examine the exit status of the command to determine whether the
    lookup succeeded. As always, a zero exit status indicates success. The UNIX shell
    stores the exit status of the last process in the `$?` environment variable. You
    can use the echo shell command to view the contents of the `$?` variable after
    you have run `postmap:`
  id: totrans-591
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE99]'
  id: totrans-592
  prefs: []
  type: TYPE_PRE
  zh: '[PRE99]'
- en: If a lookup does not work as you expect, you can (just as with the Postfix daemons)
    use one or more `-v` startup options to increase the verbosity of the messages.
  id: totrans-593
  prefs: []
  type: TYPE_NORMAL
- en: 'Note that postmap performs *raw* queries. For example, if you want to know
    whether the IP address `1.2.3.4` is matched by the following access map line:'
  id: totrans-594
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE100]'
  id: totrans-595
  prefs: []
  type: TYPE_PRE
  zh: '[PRE100]'
- en: 'You cannot test it with the following command:'
  id: totrans-596
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE101]'
  id: totrans-597
  prefs: []
  type: TYPE_PRE
  zh: '[PRE101]'
- en: The `postmap` command does not know about Postfix's rules for how IP addresses
    are matched in access map context, and even if it did, it has no way of knowing
    that `1.2.3.4` is an IP address.
  id: totrans-598
  prefs: []
  type: TYPE_NORMAL
- en: Getting help from the Postfix mailing list
  id: totrans-599
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The mailing list for Postfix, called Postfix-users, is a very valuable resource
    when one is stuck with a Postfix problem. Links to the archives of the list as
    well as instructions for how to subscribe can found at [http://www.postfix.org/lists.html](http://www.postfix.org/lists.html).
  id: totrans-600
  prefs: []
  type: TYPE_NORMAL
- en: Although the people on the list are very helpful, they do expect you to do your
    homework before requesting help. This means that you should search the list archives
    to see if your question has been asked before, and most importantly, you should
    read the documentation first.
  id: totrans-601
  prefs: []
  type: TYPE_NORMAL
- en: When asking a question, do not forget to state the bigger goal you are trying
    to achieve. This is often forgotten, and the question is just too specific. Not
    only will an understanding of the bigger picture make it easier to help you, but
    it will also reveal if the solution method you have chosen is completely wrong.
    However, do not be too verbose in your description! After all, the people reading
    the Postfix-users list are humans too, and they do get bored with over-long posts.
  id: totrans-602
  prefs: []
  type: TYPE_NORMAL
- en: Because they are humans, they are also not psychic. Therefore, be sure to provide
    complete configuration and any log messages that may be relevant to your question.
    Obtain your configuration by running `postconf -n`. That command will print the
    values of all parameters that your have set in your `main.cf`. Do not post the
    complete contents of your `main.cf`, or the output of `postconf` (without the
    `-n`). The content of `master.cf` is rarely needed.
  id: totrans-603
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  id: totrans-604
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The time has come to summarize what has been learned in this chapter. We began
    with a quick look at how the Postfix mail transfer agent works and then looked
    at how to install the software and prepare the basic configuration.
  id: totrans-605
  prefs: []
  type: TYPE_NORMAL
- en: We then examined various methods to stop spam and other unwanted messages. We
    introduced virtual alias domains to fully enable your mail server to host many
    domains. Finally, we took a look at a few structured techniques to help you analyze
    and solve Postfix problems.
  id: totrans-606
  prefs: []
  type: TYPE_NORMAL
