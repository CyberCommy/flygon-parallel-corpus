- en: Chapter 2. Setting up Postfix
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The **Mail Transfer Agent** (**MTA**) is perhaps the most important part of
    a mail system. It is responsible for receiving messages from the Internet or from
    your own users and doing what it can to make sure that the messages arrive at
    their destinations—other mail servers or mailboxes of your users.
  prefs: []
  type: TYPE_NORMAL
- en: Postfix has been chosen as the mail transfer agent to be covered in this book.
    Postfix has a large feature set, it has an excellent security track record, it
    is fast, easy to configure, and under active development.
  prefs: []
  type: TYPE_NORMAL
- en: This book assumes that you are running Postfix 2.0 or later. Any feature or
    behavior of Postfix that is specific to releases later than 2.0 will be noted.
  prefs: []
  type: TYPE_NORMAL
- en: Introduction to Postfix
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This first section gives a brief introduction to Postfix, how it works, and
    describes how its behavior can be controlled.
  prefs: []
  type: TYPE_NORMAL
- en: What is Postfix
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Postfix** is a modular mail transfer agent developed by IBM researcher Wietse
    Venema. It is free software and was released publicly for the first time in 1998
    under the name **VMailer**. It is written in **C** and currently consists of about
    105,000 lines of code (comments excluded), which makes it fairly small. It works
    on most non-historic variants of UNIX and Linux.'
  prefs: []
  type: TYPE_NORMAL
- en: As a pure mail transfer agent, Postfix does not provide any service for allowing
    users to collect their mail via the **POP or IMAP** protocols. That task must
    be carried out by some other piece of software. The software discussed in this
    book for facilitating retrieval of mail from the host is **Courier IMAP.**
  prefs: []
  type: TYPE_NORMAL
- en: All official Postfix documentation, as well as the source code and links to
    third-party software and archives of the very active mailing list can be found
    at the Postfix website at [http://www.postfix.org/.](http://www.postfix.org/.)
  prefs: []
  type: TYPE_NORMAL
- en: 'Postfix architecture: An overview'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This section will describe the different parts of the Postfix mail transfer
    agent and explain what really goes on when you send a message through the system.
    Although this might not be the most exciting text you have ever read, understanding
    the basics of how Postfix works is essential if you wish to successfully manage
    a Postfix server.
  prefs: []
  type: TYPE_NORMAL
- en: Postfix is divided into a number of separate **daemons**, or background processes,
    that communicate with each other. The daemons have distinct areas of responsibility,
    may run in different security contexts, and may have different rules for the number
    of processes of their type that may be created. All daemon processes are created
    as needed and are supervised by a mother daemon, the `master`. Some daemons are
    rarely or never restarted, but most of them will commit suicide after having served
    a configurable number of requests or after they have been idle for a configurable
    duration of time. The following figure shows how messages flow through a Postfix
    system, and can be used to accompany the text that follows. The solid lines show
    the path of the message content while dotted lines show other forms of communication.
  prefs: []
  type: TYPE_NORMAL
- en: '![Postfix architecture: An overview](img/8648_02_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Not all Postfix daemons will be described here, just the important ones. A complete
    rundown of all daemons can be found in the *Postfix Architecture Overview* document
    at [http://www.postfix.org/OVERVIEW.html](http://www.postfix.org/OVERVIEW.html).
  prefs: []
  type: TYPE_NORMAL
- en: New message arrival
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: New messages can arrive into the Postfix system in three ways. The most common
    way is, of course, via the **Simple Mail Transfer Protocol**(**SMTP**). The daemon
    responsible for receiving messages via SMTP is named `smtpd`. The uncommon **QMQP
    Submission Protocol**, introduced in Daniel J. Bernstein's MTA **qmail**, is also
    supported with the `qmqpd` daemon. However, this book will not discuss QMQP.
  prefs: []
  type: TYPE_NORMAL
- en: The third way in which a message can arrive is via local submission with the
    `sendmail` program. This is the standard way to submit mail messages from programs
    and scripts running on a UNIX host. Postfix provides a `sendmail` program that
    in most regards is compatible with the `sendmail` program of the sendmail mail
    transfer agent ([http://www.sendmail.org/](http://www.sendmail.org/)). Many UNIX
    mail user agents such as Mail, Pine, and Mutt, as well as webmail software such
    as SquirrelMail and IMP use the `sendmail` interface to submit new messages, although
    some software offer the option to submit messages via SMTP instead.
  prefs: []
  type: TYPE_NORMAL
- en: The `sendmail` program hands messages on to the **postdrop** program, which
    places message files in the `maildrop` directory within the Postfix `queue` directory.
    The `pickup` daemon waits for messages to arrive into the `maildrop` directory,
    and passes them on to the `cleanup` daemon. From there on, `sendmail-`submitted
    messages take the same road as messages submitted via SMTP or QMQP. Messages can
    be submitted via `sendmail` even if Postfix is not running on the machine at the
    moment. When Postfix starts the next time, `pickup` will discover the queued-up
    message files and process them.
  prefs: []
  type: TYPE_NORMAL
- en: When `smtpd, qmqpd`, or `pickup` receives a new message, it hands it to the
    `cleanup` daemon. This daemon enforces restrictions on the message's size, acts
    on any content restrictions configured by the user, rewrites sender and/or recipient
    addresses as required by the configuration, adds any required headers that are
    missing, and does a few other things. The `cleanup` daemon uses the `trivial-rewrite`
    daemon for some address rewriting operations. When done with its business, `cleanup`
    puts the queue file in the incoming queue and notifies the queue manager.
  prefs: []
  type: TYPE_NORMAL
- en: Scheduling message deliveries
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The **queue manager**, `qmgr`, is responsible for scheduling the delivery of
    messages. To decide how a message should be delivered to each recipient (namely
    the delivery method and the next destination), `qmgr` gets help from `trivial-rewrite`.
    The queue manager requests delivery agent processes from the `master` daemon and
    collects the results of the deliveries.
  prefs: []
  type: TYPE_NORMAL
- en: The queue manager is responsible for all messages from the point when the `cleanup`
    daemon hands them over until they are removed from the queue. The removal can
    be either because they have been successfully delivered to all recipients or because
    they have been in the queue for so long that Postfix decides that they are undeliverable.
    By default, messages will remain in the queue for a maximum of five days. The
    queue manager calls upon the `bounce` daemon to send a `bounce` message to the
    sender.
  prefs: []
  type: TYPE_NORMAL
- en: The queue manager uses a number of directories for different purposes. The incoming
    queue is monitored for new messages, and the next stop is the **active queue**.
    The active queue contains the messages that are ready for delivery and are waiting
    to be dispatched to a delivery agent. If a delivery attempt fails, the message
    is moved to the **deferred queue**. That queue will be scanned periodically and,
    if it is time to retry the delivery of a message, the queue file for the message
    will be moved back into the active queue. Whether a delivery of a message should
    be reattempted when the queue is scanned depends on two—factors how much time
    has passed since the message arrived and the two configuration parameters that
    set a minimum and maximum time interval between the reattempts.
  prefs: []
  type: TYPE_NORMAL
- en: In addition to these queues, there is also a special-purpose queue named **hold**.
    This queue contains messages that have been put on hold by the system administrator
    using the `postsuper` command. Postfix will not touch these messages at all until
    they are taken off hold with the same command. The hold queue can be used to temporarily
    stall the delivery of certain messages, for example because they are large and
    need to be delivered during off-peak hours, or because they are deemed suspicious
    and need to be inspected before they are allowed to be delivered.
  prefs: []
  type: TYPE_NORMAL
- en: The different queues used by Postfix are described in detail in the *QSHAPE_README*
    document ([http://www.postfix.org/QSHAPE_README.html](http://www.postfix.org/QSHAPE_README.html)).
    This document also describes `qshape`, a script that ships with Postfix and analyzes
    the contents of the queues, and helps you identify bottlenecks.
  prefs: []
  type: TYPE_NORMAL
- en: Message delivery
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Postfix comes with a number of delivery agents that are used to deliver messages
    using various means and protocols. The delivery agents are the last daemons that
    touch the messages before they leave your system.
  prefs: []
  type: TYPE_NORMAL
- en: The Postfix SMTP client, `smtp` (not to be confused with the SMTP server, `smtpd`),
    is used to deliver messages to other hosts via the SMTP protocol. It is very similar
    to the LMTP client, `lmtp`, which delivers messages via the **Local Mail Transfer
    Protocol** (**LMTP**). As a network protocol, LMTP is very similar to SMTP, but
    where SMTP is used to transport messages between MTAs, LMTP is used for the final
    delivery of messages to the mail store from which users can access the messages.
  prefs: []
  type: TYPE_NORMAL
- en: The local delivery agent, `local`, delivers messages to users with normal accounts
    on the system. It supports aliases for simple mailing lists or role addresses
    as well as `.forward` files so that users themselves can set up forwarding of
    their messages.
  prefs: []
  type: TYPE_NORMAL
- en: If you have virtual mailbox users—users that do not have real accounts (for
    example, shell accounts) on the system their messages are delivered with `virtual`
    Postfix daemon.
  prefs: []
  type: TYPE_NORMAL
- en: If Postfix's standard delivery agents do not suffice, you can write your own
    delivery agent and have Postfix invoke it for some (or all) messages. In that
    case, you can either use the `pipe` daemon to have the message bodies given to
    your delivery agent via the standard input stream, or you can use the `spawn`
    daemon if you want to write a delivery agent that accepts messages via some network
    protocol.
  prefs: []
  type: TYPE_NORMAL
- en: Supporting programs
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Postfix contains a number of supporting programs that you can use to control,
    test, and debug your Postfix system. This list is not exhaustive and gives only
    a brief description of each program, but some of the programs will be used later
    in the chapter. It is a good idea to get acquainted with them so that you at least
    know what sort of problems they can help you solve.
  prefs: []
  type: TYPE_NORMAL
- en: '| Program | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `mailq` | Views the current contents of the Postfix queue. The output includes
    the size, time of arrival, sender address, and recipient address/addresses of
    each message. Internally `mailq` just invokes the `postqueue` command and exists
    only for backwards compatibility with the `sendmail` mail transfer agent. |'
  prefs: []
  type: TYPE_TB
- en: '| `newaliases` | Uses the `postalias` command to rebuild all local alias files.
    Local aliases will be covered in the *Virtual alias domains and local aliases*
    section. |'
  prefs: []
  type: TYPE_TB
- en: '| `postalias` | Rebuilds a single alias file or queries an alias lookup table.
    |'
  prefs: []
  type: TYPE_TB
- en: '| `postcat` | Shows the contents of a binary queue file residing in the Postfix
    queue. |'
  prefs: []
  type: TYPE_TB
- en: '| `postconf` | Shows the current or default values of Postfix''s configuration
    parameters. Can also modify the main configuration file, which can be useful in
    scripts. |'
  prefs: []
  type: TYPE_TB
- en: '| `postfix` | Starts, stops, or restarts Postfix, or reloads its configuration.
    Can also be used to check the integrity of the queue directories and a few other
    seldom-used administrative tasks. |'
  prefs: []
  type: TYPE_TB
- en: '| `postmap` | Rebuilds an indexed database file used for table lookups or queries
    any lookup table. The *Troubleshooting lookup tables with postmap* section discusses
    how this can be used to debug a Postfix setup. |'
  prefs: []
  type: TYPE_TB
- en: '| `postqueue` | Apart from carrying out the work for the `mailq` program, `postqueue`
    can also be used to flush the queue. Flushing a queue means moving all messages
    in the deferred queue to the active queue. This can be useful to schedule immediate
    message delivery, but be careful. If your server is heavily loaded and performing
    badly, flushing the queue will only make matters worse. The `sendmail` program
    can also be used to flush the queue, again for compatibility reasons. |'
  prefs: []
  type: TYPE_TB
- en: '| `postsuper` | Allows you to take actions on already queued messages, for
    example deleting or re-queuing them. It can also perform a structural check on
    the queue directories and fix problems such as queue files having the wrong names.
    Such a check is, for example, necessary if the whole queue directory has been
    moved or restored from a backup. |'
  prefs: []
  type: TYPE_TB
- en: Installation and basic configuration
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we will take a look at how to obtain and install Postfix as
    well as how to make basic configuration changes. By the end of this section, you
    will be able to use Postfix to send and receive e-mail messages.
  prefs: []
  type: TYPE_NORMAL
- en: Choosing the Postfix version
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: There are two separate branches of Postfix development—the official release
    and the experimental release. The official release is sometimes referred to as
    the stable release, but that is somewhat misleading as it implies that the experimental
    release is unstable. That is not the case. The experimental release is used to
    introduce all new Postfix features. When the implementations of the features and
    their interfaces (for example, their configuration parameters) have stabilized
    sufficiently, they are brought into the official release. Normally, the only changes
    made to the official release are bug fixes and fixes for portability problems.
  prefs: []
  type: TYPE_NORMAL
- en: The experimental release is usable in production environments, but the code
    is of course less tested, and configuration parameters and their semantics may
    change between releases. If you run the experimental builds, you are more likely
    to run into bugs and other oddities that the stable release should not have. On
    the other hand, you get access to new features before those using stable builds.
    If you choose to use the experimental release, you should build and install Postfix
    from source code instead of using some package management system (say RPMs). This
    will allow you to easily apply any patches for newly discovered problems.
  prefs: []
  type: TYPE_NORMAL
- en: The experimental release has a version number that indicates the number of the
    upcoming official release together with the release date of the experimental release
    in question. For example, at the time of writing the current official release
    was 2.6.3 and the current experimental release was 2.7-20090807.
  prefs: []
  type: TYPE_NORMAL
- en: Installing from a package
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Most Linux distributions include Postfix as a package that can easily be installed.
    You are better off with the distribution's package unless you are comfortable
    building software from source and, if required, debugging any build problems that
    might occur. Most packages come prebuilt with some extra features that would otherwise
    require a more complicated build process.
  prefs: []
  type: TYPE_NORMAL
- en: Because there are many different packaging systems, the actual process of installing
    the Postfix package(s) will not be covered in this book. Please consult the documentation
    of your package management system for details.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'A word of caution for users of distributions that allow multiple mail transfer
    agents to be installed at the same time: If you are installing Postfix to replace
    another mail transfer agent, you should make sure the previous software is properly
    removed from your system. As probably all mail transfer agents provide a `sendmail`
    program, this file is installed with a name such as `sendmail.postfix`, and a
    symbolic link points from `sendmail` to `sendmail.postfix` or whatever mail transfer
    agent''s `sendmail` program is chosen to be the main one. If that symbolic link
    does not point to Postfix''s `sendmail` program, you might get surprised when
    you attempt to send a message.'
  prefs: []
  type: TYPE_NORMAL
- en: Installing from source code
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Installing Postfix from the original source code is not very difficult and enables
    you to run any version you want and not just the version chosen by the package
    maintainer of your Linux distribution. The Postfix source code can be downloaded
    from a number of mirrors accessible from the main Postfix website [http://www.postfix.org/download.html](http://www.postfix.org/download.html).
  prefs: []
  type: TYPE_NORMAL
- en: Once you have downloaded and unpacked the archive in a suitable directory (for
    example)`/usr/local/src`, you will notice that the Postfix build system does not
    use GNU autotools and therefore does not have the `configure` script that one
    normally finds in the root directory of the unpacked source code archive. The
    Postfix build system will automatically take care of this step. Do not worry if
    you want to install Postfix in some non‑standard location, you will have an opportunity
    to set various installation directories later.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you need to enable non-standard features such as support for MySQL or LDAP
    lookups, you must inform the build system about this and where to find the libraries
    and header files for each feature. For exact instructions and details about each
    non-standard feature, please review the `README` file for each and every one of
    them. For example, the MySQL instructions found in `README_FILES/MYSQL_README`
    tell you to run the following command to enable MySQL support when building Postfix:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Adjust the paths to where the MySQL header files and shared libraries are located
    on your system. You must have the development header files and libraries for MySQL
    installed. Depending on your Linux distribution these may have to be installed
    separately.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you need more than one extra feature, you will have to combine the commands
    given in each of the `README` files. Pay close attention when doing this. All
    quotes, equal signs, and spaces need to go at precisely the right places. The
    `CCARGS` and `AUXLIBS` variables must be set only once, so the general form of
    combining several configuration commands is this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'After this, you are all set to build Postfix using the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: When the build is complete (hopefully without errors), it is time to create
    a user and some groups that Postfix can use for many of its daemons. Start by
    adding two groups— `postfix` and `postdrop`. For example, you can use the `groupadd`
    tool that probably is available in your Linux distribution.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Verify this by checking the contents of `/etc/group`. It should by now contain
    lines similar to this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'The next step is to create a user named `postfix`. This user requires neither
    shell access nor a valid home directory. The primary group of this new user should
    be the newly created `postfix` group. Here is how to do it using the `useradd`
    tool:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Again, verify by checking the contents of `/etc/passwd:`
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'The next and final step is to install your newly built Postfix. If you are
    installing Postfix for the first time in this particular Linux installation, run
    the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: This command will guide you through an interactive installation procedure where
    you get to choose various installation directories and file locations.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you are upgrading Postfix from a previous release, run the following command
    instead:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: All right! Postfix is now installed on your system and you will soon be ready
    to use it.
  prefs: []
  type: TYPE_NORMAL
- en: To make sure that Postfix starts when your system boots, some extra measures
    are needed. Most Linux systems have a `SysV-style init`, so you need to construct
    an `init` script and make proper links in the runlevel directories.
  prefs: []
  type: TYPE_NORMAL
- en: The Postfix configuration
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Like most UNIX software, Postfix reads its configuration from text files stored
    in the `/etc` directory or a subdirectory thereof. Postfix configuration files
    are usually stored in `/etc/postfix`, but you can configure Postfix to use any
    other directory. Postfix uses two main configuration files, `master.cf` and `main.cf`,
    and any auxiliary files that you set up yourself.
  prefs: []
  type: TYPE_NORMAL
- en: After a change to any of these files, Postfix must be reloaded. This can be
    done with the same program that started Postfix, either via the `init` scripts
    or via some other service management tool that your distribution provides.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Postfix restart required after changing**'
  prefs: []
  type: TYPE_NORMAL
- en: If the `inet_interfaces` parameter is changed, a reload is not enough. Postfix
    must be stopped and restarted for the changes to take effect. This is also true
    for the `inet_protocols` parameter introduced in Postfix 2.2.
  prefs: []
  type: TYPE_NORMAL
- en: main.cf
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The file you will be editing most frequently is `main.cf`. This file defines
    the parameters that control the behavior of Postfix''s daemon processes. Each
    line has the following form:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'This simply means that the configuration parameter named `parameter` is assigned
    the contents `value`. A parameter may only be specified once in `main.cf`. If
    you mistakenly give the same parameter different contents at different places
    in `main.cf`, the last occurrence will be the one used by Postfix. Apart from
    this, the order in which parameters are listed in `main.cf` is insignificant.
    However, within the parameter contents the order of the keywords may matter. For
    example, the following two parameter settings are not necessarily equivalent:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: If the value of a parameter is not specified in `main.cf`, Postfix will use
    a default. The default for most parameters is hardwired in the source code, but
    some default values are determined at build time and a few of them at run time.
  prefs: []
  type: TYPE_NORMAL
- en: Lines in `main.cf` can be marked as comments by starting them with `#`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'This short example also shows how the current value of another parameter can
    be inserted when setting a parameter value; simply type a dollar sign directly
    followed by the name of the parameter whose value you wish to obtain. The last
    line in the previous code snippet is equivalent to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Sometimes it is not convenient to have everything on one line. By starting
    a line with whitespace, you tell Postfix that the line is a continuation of the
    previous line. For example, the following two are equivalent:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Starting with Postfix 2.1, the format of the `main.cf` configuration file is
    documented in the `postconf(5)` manual page that also describes all available
    configuration parameters. The manual page is available online from [http://www.postfix.org/postconf.5.html](http://www.postfix.org/postconf.5.html).
  prefs: []
  type: TYPE_NORMAL
- en: The `postconf` program is very useful for examining the current and default
    value of `main.cf` parameters. Start the program with one or more parameter names
    as options and it will report the values that Postfix would use. If you use the
    `-d` option, `postconf` will report the default value of the parameter(s) you
    list.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, here is how to compare the current value of `mydestination` with
    its default value:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: Using this method is often quicker than looking in `main.cf` or wading through
    a huge manual page to find the default value. It also reveals the actual value
    that Postfix thinks a parameter has, making it easier to spot typing errors.
  prefs: []
  type: TYPE_NORMAL
- en: In addition to displaying `main.cf` configuration parameters, the `postconf`
    program can edit `main.cf` for you. This is especially useful if you want to automate
    configuration changes in scripts. This is done with the `-e` option that expects
    one or more parameter assignments to follow.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: master.cf
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `master.cf` file configures the Postfix master daemon that was discussed
    earlier. For most simple Postfix setups, `master.cf` does not need to be touched
    at all.
  prefs: []
  type: TYPE_NORMAL
- en: Each line in `master.cf` defines a service that a certain program carries out.
    For example, the daemon that receives and processes SMTP connections, `smtpd`,
    is one service. The program that delivers messages to the local users, `local`,
    is another service. In addition to the 15 20 services that Postfix defines from
    the start, you can add your own services.
  prefs: []
  type: TYPE_NORMAL
- en: The fifth column in `master.cf` controls whether each service should be run
    in a `chroot` environment. `chroot` is a UNIX feature that changes the root of
    the file system, making it impossible to access a file outside the new root directory
    even if a running process is compromised by an evildoer with root privileges.
    The source distribution of Postfix disables `chroot` completely by default, but
    some Linux distributions have it enabled. Although `chroot` is a security feature
    that can be quite useful as an extra safety net, it makes Postfix more difficult
    to maintain and is more or less useless unless the rest of your system is tightly
    secured.
  prefs: []
  type: TYPE_NORMAL
- en: In Postfix 2.2 and later, the format of the `master.cf` configuration file is
    documented in the `master(5)` manual page. In earlier releases, most of that information
    can be found in comments in the `master.cf` file itself.
  prefs: []
  type: TYPE_NORMAL
- en: Lookup tables
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Some information cannot be conveniently represented in `main.cf` or `master.cf`.
    Postfix's concept of lookup tables allows information to be stored in external
    files, relational databases, or LDAP directories.
  prefs: []
  type: TYPE_NORMAL
- en: To Postfix, a lookup table is an abstract entity that maps one string, the **lookup
    key**, to another string, the **lookup result**. Those who are mathematically
    inclined may look upon it as a function or as a collection of (key, value) tuples,
    and programmers may recognize it as a hash table. Basically, it functions like
    a phonebook; you look up a name and get a phone number or an address back.
  prefs: []
  type: TYPE_NORMAL
- en: Postfix supports many different kinds of lookup tables. Some of them are referred
    to as *indexed*, meaning that the `postmap` command is used to compile the input
    file written by the user to a binary format the Postfix reads. This is done for
    performance reasons and allows the tables to contain tens of thousands or even
    hundreds of thousands of entries without affecting performance. This means you
    need to remember to use `postmap` after editing the file.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following table describes the most important lookup table types:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Type | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `cdb` | An indexed map type that uses the CDB library. Very fast for large
    number of entries. Supported by Postfix 2.2 and later versions. |'
  prefs: []
  type: TYPE_TB
- en: '| `cidr` | Allows lookups of IP addresses using the CIDR notation. Supported
    by Postfix 2.1 and later versions. |'
  prefs: []
  type: TYPE_TB
- en: '| `dbm` | DBM is a classic UNIX indexed database format that is available on
    Linux too, but its use is discouraged because it uses two files to represent the
    database. This increases the risk of inconsistencies as the two files cannot be
    updated atomically. Use hash or cdb instead. |'
  prefs: []
  type: TYPE_TB
- en: '| `hash` | This indexed lookup table type is probably the most commonly used,
    and utilizes the Berkeley DB library. |'
  prefs: []
  type: TYPE_TB
- en: '| `ldap` | LDAP directories are often used in corporate and university environments
    to store user databases. Microsoft''s Active Directory is also accessible through
    LDAP, simplifying the use of Postfix in a heterogeneous environment. |'
  prefs: []
  type: TYPE_TB
- en: '| `mysql` | The well-known MySQL relational database engine is supported, allowing
    you to make almost any type of SQL query. |'
  prefs: []
  type: TYPE_TB
- en: '| `pcre` | Allows matching the looked-up strings against a list of regular
    expressions where the first matching expression wins. Uses the widespread **Perl
    Compatible Regular Expressions** (**PCRE**) library. |'
  prefs: []
  type: TYPE_TB
- en: '| `pgsql` | The PostgreSQL relational database engine is also supported. |'
  prefs: []
  type: TYPE_TB
- en: '| `proxy` | The proxy type is a special lookup table type that is used to wrap
    other lookup tables. This is useful for reducing the number of concurrent connections
    when lookup tables are being used from services with a high process count. For
    example, accessing LDAP directories from the SMTP server can cause the maximum
    number of connections in the LDAP server to hit the roof, but accessing the LDAP
    directory through the proxy lookup table will reduce the concurrency. |'
  prefs: []
  type: TYPE_TB
- en: '| `regexp` | Works such as `pcre` but without the dependency to the PCRE library.
    The regular expression grammar supported is limited and the performance may be
    worse than with `pcre`. If possible, choose `pcre` rather than `regexp`. |'
  prefs: []
  type: TYPE_TB
- en: '| `static` | This type is a special-purpose one that always returns a given
    string regardless of what is being looked up. This can be used in cases where
    Postfix expects a lookup table reference instead of a fixed string, but you really
    want to specify a fixed string. |'
  prefs: []
  type: TYPE_TB
- en: You can use any type of lookup table for any purpose; Postfix does not impose
    any limitations except that security considerations require that some features
    of regular expression tables are disabled under some circumstances. That said,
    not all lookup table types make sense to use for each and every purpose.
  prefs: []
  type: TYPE_NORMAL
- en: Many of the lookup table types are always supported by Postfix, but some of
    them are optional and require support to be compiled into Postfix. Many Linux
    vendors provide additional packages that you can install to obtain, for example,
    LDAP support. To find out which lookup table types your Postfix installation supports,
    use the `postconf` command.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: In most cases, the simple indexed lookup table types will be the most convenient
    ones. An indexed lookup table is nothing more than a text file that you can edit
    using your favorite text editor. The first part of each line, up to the first
    space or tab, will be taken as a lookup key and the rest of the line will be taken
    as the corresponding value.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: One possible drawback with indexed lookup table types is that you do have to
    remember to run `postmap` when you have updated the table. You do not have to
    reload or restart Postfix after updating an indexed file with `postmap`. Postfix
    will discover the updated file itself and restart its daemon processes as required.
  prefs: []
  type: TYPE_NORMAL
- en: The topic of lookup tables could fill a whole chapter by itself, so this section
    will just touch upon them. We will use lookup tables in a few places later in
    this chapter, for example, when we set up policies for spam control.
  prefs: []
  type: TYPE_NORMAL
- en: For a more elaborated discussion of lookup tables and a list of all available
    lookup table types, see `DATABASE_README` ([http://www.postfix.org/DATABASE_README.html](http://www.postfix.org/DATABASE_README.html))
    and the manual pages that document the use of some of the more complex lookup
    table types.
  prefs: []
  type: TYPE_NORMAL
- en: Getting Postfix up and running
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Now that you have installed Postfix, let's make some basic configuration changes,
    fire it up, and take it for a test drive. If you installed Postfix from a package
    you may already have answered some configuration questions and have had Postfix
    started for you.
  prefs: []
  type: TYPE_NORMAL
- en: Domains and hostnames
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Before starting Postfix, let''s review some fundamental settings in `main.cf`.
    The first ones concern the names of your domain and your mailhost. The `mydomain`
    parameter should be set to your main Internet domain. If you run Example Inc.
    having the domain`http://www.example.com/`, the following setting would be reasonable:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: The value of `mydomain` will affect how Postfix transforms hostnames that are
    not fully qualified. This means that all bare hostnames encountered in places
    such as sender and recipient addresses will be qualified with this domain—a hostname
    such as `jeeves` will, in this case, be turned into `jeeves.example.com`. We will
    also refer to `mydomain` in other parameters using the `$parameter` notation described
    earlier. Note that the feature of appending `mydomain` can be disabled by setting
    the `append_dot_mydomain` parameter to `NO`, and some Linux distributions make
    this modification by default. In general, the value should be left as `YES`.
  prefs: []
  type: TYPE_NORMAL
- en: A related parameter is `myhostname` that incidentally tells Postfix the hostname
    of the machine. The hostname is among other things used as default when the Postfix
    SMTP server greets a client and when the SMTP client says HELLO to a server. Postfix
    is normally able to determine this by itself, but sometimes you want to override
    this. Use the `postconf` command to see if the current value looks good.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: Yes, this looks fine. Note that this hostname is not fully qualified, so the
    actual hostname used in various places will include `mydomain`.
  prefs: []
  type: TYPE_NORMAL
- en: A parameter that is related to `mydomain` is `myorigin`. This parameter specifies
    the domain that should be used to qualify e-mail addresses that have no domain
    part at all. This may seem highly irregular, but it is actually pretty common.
    Messages submitted with the `sendmail` program will by default get the current
    username as the sender address and, because usernames do not have domains, the
    username will be qualified with `myorigin` before the message is delivered anywhere.
    By default, `myorigin` is set to the same value as `myhostname`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: This should be fine, but you might want to set it to `mydomain` instead.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: The next parameter that we will give attention to is `mydestination`. This parameter
    is quite important because it tells Postfix which domains are considered local,
    that is, which domains should be delivered to UNIX accounts on this machine. Unlike
    `mydomain` and `myorigin, mydestination` may contain multiple domains separated
    by space or commas. By listing `example.com` here, Postfix will accept messages
    addressed to `joe@example.com` and deliver them to the UNIX user "joe".
  prefs: []
  type: TYPE_NORMAL
- en: One important property of local domains is that they are all considered equal.
    If `example.com` and `example.net` are both listed in `mydestination, joe@example.com`
    will be equivalent to `joe@example.net`. If you need additional domains where
    the users are not equal, that is `joe@example.com` and `joe@example.net` should
    lead to different mailboxes, you need to implement virtual alias domains, described
    in the *Virtual alias domains* section.
  prefs: []
  type: TYPE_NORMAL
- en: 'Returning to Example Inc. you will want to have `example.com` listed in `mydestination`
    as it is your primary domain. The old domain, `example.net`, should also work
    for the time being so that one should be included too. Additionally, it is wise
    to list the value of `myhostname` in `mydestination` as well as make sure that
    mail addressed to `localhost` gets delivered properly. This yields the following
    complete list of local domains for Example Inc.:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: So why `localhost.$mydomain` instead of just `localhost` if we want messages
    to `root@localhost` to be delivered locally? Remember that `mydomain` is used
    to qualify all hostnames that are not already fully qualified (one may argue that
    `localhost` in fact already is a fully qualified hostname, but Postfix does not
    make a special case for that hostname). The address `root@localhost` will be rewritten
    to `root@localhost.example.com`, so `localhost.example.com` is what we want to
    list in `mydestination.`
  prefs: []
  type: TYPE_NORMAL
- en: Two very important Postfix parameters, `mynetworks` and `mynetworks_style`,
    control which hosts are allowed to use your server as a relay. Setting these incorrectly
    may allow your server to be abused by spammers and the likes, so it is important
    that you get them right. By default, all hosts on the subnets that your server
    is directly connected to will be allowed access. This should be secure in most
    cases. These parameters and other methods of allowing relay access will be discussed
    in depth in [Chapter 5](ch05.html "Chapter 5. Securing Your Installation").
  prefs: []
  type: TYPE_NORMAL
- en: Indirect mail delivery through your ISP
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Some **Internet Service Providers** (**ISP**) do not allow their customers to
    directly access remote mail servers via the standard SMTP port (`25`). Instead
    they provide a relay server that all outbound messages must go through. This policy
    is common for residential cable or DSL connections, but some providers have the
    same policy for commercial-grade connections. If such is the case, you need to
    configure Postfix to deliver all outbound messages indirectly via your ISP's relay
    server.
  prefs: []
  type: TYPE_NORMAL
- en: 'This is done with the `relayhost` parameter that contains the hostname or IP
    address of the relay server to use. The following forms are allowed:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: The first form will cause Postfix to perform an MX lookup on the hostname, just
    as it would do for a normal message delivery. Enclosing the hostname in square
    brackets as in the second example suppresses the MX lookup. The square brackets
    are also required in the third case when an IP address is specified.
  prefs: []
  type: TYPE_NORMAL
- en: Optionally, the hostname or address can be followed by `:port` to specify an
    alternative TCP port. Note that you cannot specify multiple hostnames or addresses
    to achieve fallback or load balancing behavior. If you need fallback hosts when
    the normal relay server is unreachable, take a look at the `fallback_relay` parameter.
    Refer the *Other useful configuration parameters* section for additional information
    on other parameters.
  prefs: []
  type: TYPE_NORMAL
- en: Choosing network interfaces
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `inet_interfaces` parameter decides the network interfaces that Postfix
    will use for both listening to new connections and sending out messages. If you
    have multiple network interfaces and you do not want Postfix to use all of them,
    you can adjust this parameter to list the addresses or hostnames of the interfaces
    you do want Postfix to use.
  prefs: []
  type: TYPE_NORMAL
- en: Some Linux distributions set `inet_interfaces` to `localhost` by default, which
    means that Postfix will listen only on the loopback interface. This makes at least
    some sense for workstations, but it is obviously completely unusable for servers
    that need to receive messages from foreign hosts. If the Postfix packaging of
    your Linux distribution has this feature, just delete or comment the `inet_interfaces`
    line from `main.cf` to disable it. Postfix will then use the default value of
    `all`, which of course means that all interfaces should be used.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Changing `inet_interfaces` requires Postfix to be restarted. A reload is not
    enough.
  prefs: []
  type: TYPE_NORMAL
- en: Choosing mailbox format for local deliveries
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: By default, Postfix delivers local messages (messages to domains listed in `mydestination`)
    into files in `mbox` format. The `mbox` format for mailboxes stores all messages
    of a mailbox in a single text file. These files are named after the user and go
    into the directory specified by `mail_spool_directory` (normally `/var/mail` or
    `/var/spool/mail`). If the user desires additional mailboxes to store messages,
    those files are stored somewhere in the user's home directory (often in `$HOME/mail`
    or `$HOME/Mail`).
  prefs: []
  type: TYPE_NORMAL
- en: The `mbox` format has a few flaws that make it rather undesirable. The single-file
    format makes message deletion expensive as the whole file must be rewritten completely
    unless the message deleted is the last one, in which case the file can just be
    truncated. `mbox` also puts up hurdles when multiple processes need to access
    the same mailbox concurrently, which happens when a user uses a POP server to
    retrieve and delete messages while new mail is being delivered. This requires
    that some method of exclusive locking is used to avoid the concurrent access that
    might corrupt the files. Such locking is not a big problem if all software run
    on the same machine, access the same local file system, and agree on which locking
    method to use, but it is a royal pain if mailboxes need to be accessed over the
    network via network file systems such as NFS where reliable file locking can be
    a problem. Finally, `mbox` causes problems if used together with disk quotas.
    While the mailbox is being rewritten, it will use up to twice the original storage.
  prefs: []
  type: TYPE_NORMAL
- en: To avoid these problems, D. J. Bernstein, the author of software such as `qmail`
    and `djbdns`, designed the `maildir` format for mailboxes. As the name implies,
    `maildir` uses directories and one file per message. Deletion of messages is always
    very fast, but on the other hand it may take longer to scan a mailbox and produce
    a list of all messages as all message files have to be opened and read. `maildir`
    is safe to use with NFS. In the `maildir` delivery format, the inbox of a user
    is typically found in `$HOME/Maildir`.
  prefs: []
  type: TYPE_NORMAL
- en: 'To configure Postfix to deliver new messages to local users to `$HOME/Maildir`,
    set the `home_mailbox` parameter like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: Note the slash at the end of the line; it is important! Postfix follows the
    convention used by many other programs that a mailbox location ending with a slash
    denotes `maildir`. If you omit the slash, Postfix will try to deliver messages
    to the `mbox` file `$HOME/Maildir`.
  prefs: []
  type: TYPE_NORMAL
- en: The `home_mailbox` parameter is only effective for local domains when Postfix
    performs the delivery itself. If delivery is made by some other delivery agent
    such as Procmail or Maildrop, you have to configure that software for `maildir`
    delivery.
  prefs: []
  type: TYPE_NORMAL
- en: The rest of this book assumes that you have chosen `maildir` delivery. The IMAP/POP
    server you will be introduced to later, Courier IMAP, does not support the `mbox`
    format at all. Converting mailboxes between `mbox` and `maildir` is not difficult,
    so if you want to switch formats later that would not be a problem.
  prefs: []
  type: TYPE_NORMAL
- en: Error reporting
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The final step is to make sure that Postfix and real people around the world
    can notify you as a postmaster about error conditions. Internet standards require
    all domains to have a postmaster address, but you do not need to create an account
    with that name. Instead you can use the aliasing feature of Postfix to redirect
    messages addressed to the postmaster address to yourself and any other people
    that manage the mail system. Also, you should redirect messages to the root account.
  prefs: []
  type: TYPE_NORMAL
- en: 'Aliases will be discussed in more detail in the *Local Aliases* section, but
    this step should be done right now so we will take a quick look anyway. To make
    Postfix redirect root''s messages and accept messages addressed to postmaster
    even though no such user account exists, the local alias table must be modified.
    The configuration parameter `alias_maps` controls the location of the lookup tables
    that define such mappings:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'On this particular system, the local aliases are stored in the file `/etc/aliases`.
    Edit that file so that it contains two lines similar to these:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: This means that messages addressed to the postmaster will be sent to the root
    user, and messages to the root user will be redirected to the users, "jack" and
    "jill". Save the file and run the `newaliases` command so that Postfix will pick
    up the changes to the file.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Note that alias lookups are recursive—Postfix does not stop when the `postmaster`
    lookup has succeeded, it continues to look up `root`, and finally `jack` and `jill.
    jack` and `jill` may not have alias entries, in which case Postfix stops the lookup
    recursion.
  prefs: []
  type: TYPE_NORMAL
- en: 'The type of problems that Postfix will report to the postmaster is configurable
    with the `notify_classes` parameter. By default, only resource issues such as
    out-of-disk-space problems and software problems will be reported, but you may
    configure Postfix to report more types of problems. For example, you might also
    want to know about SMTP protocol violations:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: When Postfix reports a problem, a transcript of the SMTP session is included.
    This can be a valuable debugging aid.
  prefs: []
  type: TYPE_NORMAL
- en: Opt for more extensive error reporting rather than terse reporting. If you receive
    too many error reports, see if you can use the filtering features of your delivery
    agent or your mail client to remove the error reports that you are not interested
    in. Protocol violations by incoming spam mail generated by badly written spam
    software can typically be ignored, but if one of your own computers behaves badly
    you will want to know about it.
  prefs: []
  type: TYPE_NORMAL
- en: Other useful configuration parameters
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In addition to the configuration parameters covered so far, a few others that
    can be useful to know about will be mentioned. You will most likely do fine using
    their default values. If you want more information about them, please consult
    the documentation that came with your version or Postfix or read the documentation
    online at [http://www.postfix.org/documentation.html](http://www.postfix.org/documentation.html).
  prefs: []
  type: TYPE_NORMAL
- en: '| Parameter | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `always_bcc` | Sends a copy of each message to a specified recipient. This
    can be used for e-mail archiving. If you need more fine-grained control over which
    messages are copied, take a look at `sender_bcc_maps` and `recipient_bcc_maps`.
    The latter two parameters require Postfix 2.1 or later. |'
  prefs: []
  type: TYPE_TB
- en: '| `defer_transports` | Contains names of transports (delivery agents, more
    or less) whose deliveries should be temporarily deferred. This allows you to suspend
    local message deliveries if the file system for the home directories is broken
    or unavailable but the rest of the system works fine. |'
  prefs: []
  type: TYPE_TB
- en: '| `delay_warning_time` | By default, Postfix does not send a warning if a message
    cannot be delivered for some time. Setting this parameter to a particular duration,
    say `5h` for five hours, will cause Postfix to send a single warning message for
    each message that has been undeliverable for that period of time.A word of caution,
    though: Your users may not be able to interpret this warning message correctly.
    Even though Postfix clearly states that it is only a warning and that the message
    does not need to be resent, many users do not understand this and resend their
    delayed message anyway. |'
  prefs: []
  type: TYPE_TB
- en: '| `mailbox_size_limit` | This parameter controls the maximum size of a local
    mailbox or maximum size of a message when using `maildir` mailboxes. Nowadays
    the default of 50 MB may be too low, especially if you are using the default `mbox`
    format for mailboxes. |'
  prefs: []
  type: TYPE_TB
- en: '| `maximal_queue_lifetime` | Specifies how long Postfix will retry failed deliveries
    of messages before they are returned to the sender. The default of five days is
    reasonable and should not be changed without good reasons. From Postfix 2.1 onwards,
    there is also `bounce_queue_lifetime` that is the same thing, but for bounce messages
    with an empty sender address. |'
  prefs: []
  type: TYPE_TB
- en: '| `message_size_limit` | This parameter controls the maximum size of a message.
    The default value of 10 MB is reasonable (mail is not the best transport method
    for large files), but may need to be adjusted. Remember that messages are sent
    using only 7 bits, so if you want to allow 20 MB binary files, you must add about
    35% to compensate for the overhead of the 7 bit encoding of the file. |'
  prefs: []
  type: TYPE_TB
- en: '| `proxy_interfaces` | If your server is connected to the Internet via a proxy
    or NAT device so that Postfix cannot determine all network addresses that can
    be used to reach the server, add those addresses to this parameter. |'
  prefs: []
  type: TYPE_TB
- en: Starting Postfix and sending the first message
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'With these settings in place, it is time to start Postfix. Use the following
    Postfix command to do this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'To verify that Postfix is running, take a look in the log file. Postfix logs
    via the standard `syslog` interface, and the exact location of the log files depends
    on the `syslog` daemon configuration. The mail logs will typically be named `/var/log/maillog,
    /var/log/mail.info`, or something similar. The configuration of your `syslog`
    daemon, typically found in `/etc/syslog.conf`, contains the details. This is what
    you will find at the end of the mail log after you have started Postfix:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: Postfix is now ready to receive and deliver messages. To try it out, use your
    favorite mail client and send a test mail to yourself. If your mail client uses
    SMTP, remember to reconfigure it to use your server.
  prefs: []
  type: TYPE_NORMAL
- en: If you get an error message from your mail client when you try to send the test
    message, read your log again. Does it show any traces of a connection from the
    host on which you run your mail client? If so, is any error message logged? To
    get hints on how to debug Postfix problems, see the *Troubleshooting Postfix problems*
    section.
  prefs: []
  type: TYPE_NORMAL
- en: Once you have sent the message successfully, you will also want to check that
    it is delivered properly. As you have not yet configured a POP or IMAP server,
    that road is not an option. But if you have installed a mail client on your server
    that reads mail directly from the file system (mail, Pine, Mutt, and many more)
    things should work fine as long as your mail client is configured to look for
    new messages in the same place as Postfix delivers them. If you have chosen `maildir`
    delivery, the default settings of your mail client probably won't do.
  prefs: []
  type: TYPE_NORMAL
- en: In any case, reading the mailbox directly from the file system is always an
    option. With normal `mbox` delivery, the mailbox file has the same name as the
    user and resides in the directory pointed to by the `mail_spool_directory` configuration
    parameter. With `maildir` delivery, the message will typically be found in a file
    of its own in the `$HOME/Maildir/new` directory.
  prefs: []
  type: TYPE_NORMAL
- en: If all has gone well, the message was delivered to the expected place. Whatever
    delivery method you choose, make sure you know where delivered messages end up.
    That knowledge will be valuable when you have to debug delivery problems.
  prefs: []
  type: TYPE_NORMAL
- en: Stopping spam and other unwanted messages
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This section will discuss the various methods Postfix provides to help stop
    unwanted messages. Spam, or unsolicited commercial e-mail, is perhaps the biggest
    problem that e-mail server administrators face, but there may also be other kinds
    of messages that one does not want to receive.
  prefs: []
  type: TYPE_NORMAL
- en: Postfix by itself will not stop all spam, but it can catch many spam messages.
    For some people this may be adequate, but if you need to fight large volumes of
    spam you may need a tool such as SpamAssassin, described in [Chapter 8](ch08.html
    "Chapter 8. Busting Spam with SpamAssassin"). Even if you use SpamAssassin, Postfix's
    own lightweight methods can help reduce the load on the server by rejecting the
    messages before they even reach SpamAssassin.
  prefs: []
  type: TYPE_NORMAL
- en: 'Postfix''s anti-spam methods: An overview'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'There is no silver bullet to stop all spam, but Postfix provides a number of
    methods that you can use to help the situation:'
  prefs: []
  type: TYPE_NORMAL
- en: '**SMTP restrictions:** SMTP restrictions let you define rules that control
    whether or not a message is accepted by Postfix. The rules cannot take into account
    the content of the message, just the envelope information. The SMTP restrictions
    are not merely a tool for stopping spam, but a general way of defining policies
    for the usage of the mail system.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**DNS blocklists:** DNS blocklists are globally published blocklists containing
    IP addresses of known spammers and other likely sources of junk mail. Postfix
    lets you use this information to reject messages.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Matching header expressions:** The header fields and message bodies can be
    matched against regular expressions, allowing you to reject certain types of e-mail.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**After-queue content filtering:** After Postfix has accepted a message, it
    will not be delivered to the destination right away. Instead, it will be fed to
    a content filter that can do anything with the message—delete it, scan it for
    viruses, strip unwanted attachments, and so on. It is the responsibility of the
    content filter to resubmit messages back into Postfix which will then treat them
    as any other message.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Before-queue content filtering:** The drawback with after-queue content filtering
    is that Postfix always accepts the message before the message is sent to the content
    filter. This means Postfix cannot reject a message based on the verdict of the
    content filter. Before-queue content filters receive the messages during the SMTP
    session and can choose to reject them. Because one before-queue content filter
    connection is required for each open SMTP session, this type of content filter
    is harder to scale for high-traffic sites and requires extra capacity to deal
    with traffic bursts. This feature requires Postfix 2.1 or later.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Milters:** Starting with Postfix 2.3, the Milter plug-in protocol for e-mail
    content-inspection is supported. Milters were introduced in the `sendmail` mail
    transfer agent, and there are many available milters for spam protection, antivirus
    checks, message authenticity and signing in accordance with, for example, the
    DKIM standard. Third-party Milters can be downloaded from [http://www.milter.org/milters.](http://www.milter.org/milters.)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Access policy delegation:** If the SMTP restrictions are not sufficiently
    expressive, you can construct your own access policy server that Postfix can contact
    during each SMTP session. Using this tool, you can enforce just about any specialized
    policy you want, as long as the policy can be enforced by looking at the message
    envelope. Access policy servers will not be supplied with any of the message contents.
    Postfix comes with a very simple policy daemon for use to implement greylisting,
    but several other policy daemons have been made by other people. Links to these
    daemons and other Postfix add-on software can be found at [http://www.postfix.org/addon.html](http://www.postfix.org/addon.html).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Understanding SMTP restrictions
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Postfix has a simple but still expressive notation for defining rules that will
    be applied to messages that arrive via SMTP. For example, you can express a policy
    to reject messages sent from certain networks, clients who say `HELO` with certain
    hostnames, or clients that have no reverse records in DNS unless they are one
    of your own clients.
  prefs: []
  type: TYPE_NORMAL
- en: Postfix defines a number of configuration parameters, each of which can contain
    a list of restrictions. Each restriction list may contain zero or more restrictions,
    and each restriction may or may not return something when evaluated. As in a few
    other places in Postfix, the "first match wins" principle reigns here too. This
    means that the restrictions are evaluated in the order they are specified, and
    the first restriction that returns something terminates the evaluation of the
    current restriction list.
  prefs: []
  type: TYPE_NORMAL
- en: 'The restriction lists get evaluated during the SMTP session. The following
    table contains the restriction lists that Postfix uses and shows at what stage
    in an SMTP session they are evaluated:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Parameter | Point of evaluation |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `smtpd_client_restrictions` | Directly upon connection. |'
  prefs: []
  type: TYPE_TB
- en: '| `smtpd_data_restrictions` | When the client has sent the `DATA` command.
    |'
  prefs: []
  type: TYPE_TB
- en: '| `smtpd_end_of_data_restrictions` | When the client has sent the complete
    message. This restriction list is available in Postfix 2.2 and later versions.
    |'
  prefs: []
  type: TYPE_TB
- en: '| `smtpd_etrn_restrictions` | When the client has sent the `ETRN` command.
    This command is not used in a normal SMTP session. |'
  prefs: []
  type: TYPE_TB
- en: '| `smtpd_helo_restrictions` | When the client has sent its greeting with `HELO`
    or `EHLO.` |'
  prefs: []
  type: TYPE_TB
- en: '| `smtpd_recipient_restrictions` | When the client has sent a recipient address
    with `RCPT TO`. |'
  prefs: []
  type: TYPE_TB
- en: '| `smtpd_sender_restrictions` | When the client has sent the sender address
    with `MAIL FROM`. |'
  prefs: []
  type: TYPE_TB
- en: The default value of the `smtpd_delay_reject` parameter is `yes`, which means
    that all rejections will be postponed until after `RCPT TO`. The reason for this
    is that some client software do not like being rejected before `RCPT TO`, so they
    will disconnect and try again. Another good reason is that a postponed rejection
    gives Postfix a chance to log more information. This makes it easier for the administrator
    to determine whether a message was rejected even though it should not have been.
  prefs: []
  type: TYPE_NORMAL
- en: A common misunderstanding is that only restrictions on the recipient address
    can be placed in `smtpd_recipient_restrictions`, only restrictions on the sender
    address can be placed in `smtpd_sender_restrictions,and` so on, but because of
    the default value of `smtpd_delay_reject`, that is not true. The name of the restriction
    list only indicates at what stage in the SMTP session the listed restrictions
    will be applied.
  prefs: []
  type: TYPE_NORMAL
- en: Let's explore what restrictions Postfix imposes by default. We can use the `postconf`
    command to inspect the default values of the most commonly used restriction lists.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: This tells us that Postfix by default does not have any client, `HELO`, or sender
    restrictions. However, it does have two recipient restrictions. The first one,
    `permit_mynetworks`, permits the current recipient if the connecting client is
    within the networks specified by `mynetworks`. It is this restriction that gives
    your own clients relay access. If the connecting client is not within `mynetworks`,
    the next item in the restriction list will be evaluated. `reject_unauth_destination`
    will reject recipients whose domain is not one of the domains that Postfix will
    accept mail for. In other words, `reject_unauth_destination` rejects relay attempts.
    If no rejection takes place here, the end of the restriction list has been reached.
    If that happens, Postfix accepts the message.
  prefs: []
  type: TYPE_NORMAL
- en: A `permit` result in one restriction list will not cause the message as a whole
    to be accepted. Only the remaining restrictions in the same list will be bypassed.
    This is not true for restrictions that return `reject`— that result is always
    terminal and stops the evaluation of all restriction lists.
  prefs: []
  type: TYPE_NORMAL
- en: There are more than 50 standard SMTP restrictions to choose from, and there
    is no room to cover them all here. This table will present a little smorgasbord
    with useful restrictions. Additional restrictions will be covered later in this
    chapter.
  prefs: []
  type: TYPE_NORMAL
- en: '| Restriction | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `permit_inet_interfaces` | Permit if the connecting client resides in one
    of the networks listed in `inet_interfaces`, which typically covers all network
    that the server running Postfix is connected to. |'
  prefs: []
  type: TYPE_TB
- en: '| `permit_mynetworks` | Permit if the connecting client is listed in `mynetworks`.
    |'
  prefs: []
  type: TYPE_TB
- en: '| `permit_sasl_authenticated` | Permit if connecting client has authenticated
    itself. (SMTP authentication is covered in [Chapter 5](ch05.html "Chapter 5. Securing
    Your Installation").) |'
  prefs: []
  type: TYPE_TB
- en: '| `reject` | Reject the request, unconditionally. |'
  prefs: []
  type: TYPE_TB
- en: '| `reject_invalid_hostname` | Reject if the syntax of the `HELO/EHLO` hostname
    given by the client is incorrect. |'
  prefs: []
  type: TYPE_TB
- en: '| `reject_non_fqdn_hostname` | Reject if the `HELO/EHLO` hostname given by
    the client is not a fully qualified domain name. |'
  prefs: []
  type: TYPE_TB
- en: '| `reject_non_fqdn_recipient` | Reject if the domain part of the recipient
    address is not a fully qualified domain name. |'
  prefs: []
  type: TYPE_TB
- en: '| `reject_non_fqdn_sender` | Reject if the domain part of the sender address
    is not a fully qualified domain name. |'
  prefs: []
  type: TYPE_TB
- en: '| `reject_unauth_destination` | Reject the request unless the recipient domain
    is one of the domains that the Postfix server hosts, or for some reason, will
    accept mail for. |'
  prefs: []
  type: TYPE_TB
- en: '| `reject_unknown_client_hostname` | Reject if the connecting client''s hostname
    cannot be determined. This happens if either of the following conditions is true:a)
    The client''s IP address cannot be resolved to a hostname, that is the PTR lookup
    fails.b) The A record lookup of the resulting hostname(s) fails.c) None of the
    IP addresses obtained from the A record lookup matches the input IP address.Prior
    to Postfix 2.3, this restriction was named `reject_unknown_client`. |'
  prefs: []
  type: TYPE_TB
- en: '| `reject_unknown_recipient_domain` | Reject if the domain part of the recipient
    address has no A or MX record in DNS. |'
  prefs: []
  type: TYPE_TB
- en: '| `reject_unknown_reverse_client_hostname` | Reject if the connecting client''s
    IP address cannot be resolved to a hostname, that is the PTR lookup fails to return
    a result. This feature is available in Postfix 2.3 and later. |'
  prefs: []
  type: TYPE_TB
- en: '| `reject_unknown_sender_domain` | Reject if the domain part of the sender
    address has no A or MX record in DNS. |'
  prefs: []
  type: TYPE_TB
- en: '| `reject_unlisted_recipient` | Reject if the domain part of the recipient
    address is a domain hosted by Postfix and the complete address is not a valid
    recipient address. By default, this restriction is implicitly evaluated at the
    end of `smtpd_recipient_restrictions`. This behavior is controlled by the `smtpd_reject_unlisted_recipient`
    parameter. By using `reject_unlisted_recipient`, you can put the restriction into
    effect earlier on. This restriction is available in Postfix 2.1 and later. Previous
    versions of Postfix can use the `check_recipient_maps` parameter. |'
  prefs: []
  type: TYPE_TB
- en: '| `reject_unlisted_sender` | Reject if the domain part of the sender address
    is a domain hosted by Postfix and the complete address would not be acceptable
    as a recipient address. The idea behind this feature is that there is no reason
    to accept messages with sender addresses known to be incorrect. This restriction
    is available in Postfix 2.1 and later. See also the `smtpd_reject_unlisted_sender`
    parameter. |'
  prefs: []
  type: TYPE_TB
- en: Access maps
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In addition to the restrictions already discussed, Postfix defines a number
    of restrictions that look up information in access maps. An **access map** is
    a lookup table with contents that affects whether a message will be accepted.
    The name of the restriction controls what information is used as the lookup key.
  prefs: []
  type: TYPE_NORMAL
- en: For example, the `check_client_access` restriction looks up the client IP address
    and hostname in a lookup table, allowing you to, say, ban certain clients that
    are known to send spam. Together with the restriction name you also state the
    type and name of the lookup table.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'Although not an exhaustive list, the following are the most important restrictions
    that use access maps:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Restriction name | Lookup key |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `check_client_access` | Client IP address and hostname. |'
  prefs: []
  type: TYPE_TB
- en: '| `check_sender_access` | The sender address. |'
  prefs: []
  type: TYPE_TB
- en: '| `check_sender_mx_access` | The hostname(s) of the mail exchangers for the
    sender domain, that is the result of an MX lookup. This feature was added in Postfix
    2.1. |'
  prefs: []
  type: TYPE_TB
- en: '| `check_sender_ns_access` | The hostname(s) of the name servers for the sender
    domain, that is the result of an NS lookup. This feature was added in Postfix
    2.1. |'
  prefs: []
  type: TYPE_TB
- en: '| `check_recipient_access` | The recipient address. |'
  prefs: []
  type: TYPE_TB
- en: '| `check_helo_access` | The `HELO/EHLO` hostname. |'
  prefs: []
  type: TYPE_TB
- en: For all lookup table types except `regexp` and `pcre`, Postfix makes multiple
    lookups for each of these restrictions, slightly dependent on what type of data
    is being looked up (e-mail address or hostname, for example). This makes it possible
    to make inexact wildcard matches, for example matching all e-mail addresses in
    a domain.
  prefs: []
  type: TYPE_NORMAL
- en: 'For `check_client_access`, Postfix makes separate lookups for the client IP
    address, the client hostname, and parts of the IP address, the latter making it
    possible to match whole A-, B-, or C-class networks (for better granularity and
    full CIDR notation use the `cidr` lookup table type). For a client with the address
    1.2.3.4 and the hostname `mail.example.com`, the following lookup keys are attempted,
    in the following order:'
  prefs: []
  type: TYPE_NORMAL
- en: mail.example.com
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: example.com
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: com
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 1.2.3.4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 1.2.3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '1.2'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '1'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Items 2 and 3 assume that the default value of the `parent_domain_matches_subdomains`
    parameter is used. The Postfix author has indicated that this behavior may change
    in the future.
  prefs: []
  type: TYPE_NORMAL
- en: 'For restrictions where the lookup key is an e-mail address, such as `check_sender_access`,
    Postfix looks up the whole e-mail address, the domain part only, followed by the
    localpart and @. The full list of lookups for the e-mail address `user@example.com`
    then becomes:'
  prefs: []
  type: TYPE_NORMAL
- en: '`user@example.com`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`example.com`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`com`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`user@`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Again, items 2 and 3 assume that default value of `parent_domain_matches_subdomains`.
  prefs: []
  type: TYPE_NORMAL
- en: Lookups for IPv6 addresses and e-mail addresses containing recipient delimiters
    have been omitted from these lists for brevity reasons.
  prefs: []
  type: TYPE_NORMAL
- en: The following results are recognized for a given lookup key (this is again not
    an exhaustive list).
  prefs: []
  type: TYPE_NORMAL
- en: '| Result | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `OK` | Permit the request. |'
  prefs: []
  type: TYPE_TB
- en: '| `REJECT [optional text]` | Reject the request with a permanent error code
    and either the specified error message or a generic message. |'
  prefs: []
  type: TYPE_TB
- en: '| `DUNNO` | Pretend that the lookup key was not found, and do not continue
    with additional lookup keys. For example, if a lookup of `user@example.com` returns
    `DUNNO`, Postfix will not look up `example.com` or `user@` like it normally would.
    |'
  prefs: []
  type: TYPE_TB
- en: '| `DISCARD [optional text]` | If the message eventually gets accepted, it will
    be discarded and not delivered. |'
  prefs: []
  type: TYPE_TB
- en: '| `HOLD [optional text]` | Place the message in the hold queue. Messages that
    are held will not be delivered and can be inspected with the `postcat` program
    and subsequently released for delivery or deleted. This can be used as a simple
    way of quarantining messages that might be unwanted. |'
  prefs: []
  type: TYPE_TB
- en: '| `REDIRECT email address` | Scrap all the current message recipient(s) and
    send the message to the specified address only. This feature was added in Postfix
    2.1. |'
  prefs: []
  type: TYPE_TB
- en: '| `PREPEND header: text` | Add an additional header to the message. This feature
    was added in Postfix 2.1. |'
  prefs: []
  type: TYPE_TB
- en: '| `WARN [optional text]` | Place a warning message in the log file. This feature
    was added in Postfix 2.1. |'
  prefs: []
  type: TYPE_TB
- en: '| `restriction, restriction, …` | Apply one or more restrictions and use their
    result. Only simple restrictions that do not refer to any lookup tables are allowed
    here unless you use restriction classes. Those are not covered in this book, but
    you can read about them in the *RESTRICTION_CLASS_README* document available at
    [http://www.postfix.org/RESTRICTION_CLASS_README.html](http://www.postfix.org/RESTRICTION_CLASS_README.html).
    |'
  prefs: []
  type: TYPE_TB
- en: Full documentation of the access map lookup keys and possible result values
    can be found in the `access(5)` manual page or at [http://www.postfix.org/access.5.html](http://www.postfix.org/access.5.html).
  prefs: []
  type: TYPE_NORMAL
- en: Access map examples
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Here are a series of examples with access maps to discuss how they can be used,
    both alone and along with other restrictions in order to form pretty expressive
    policies:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: In this first example, the lookups will be made against the `hash-type` lookup
    table `/etc/postfix/client_access`. This file is not created by Postfix and you
    may give it any name. From the *Lookup tables* section we recall that `hash-type`
    lookup tables are just text files from which binary files (in this case with the
    file extension `.db`) should be built with the `postmap` command whenever the
    source file changes.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: 'Here is an example `client_access` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: What does all this mean? The first two non-comment lines are used to reject
    clients that appear to connect from the networks `10.0.0.0/8` and `192.168.0.0/16`.
    These are not valid Internet addresses, so no legitimate client will connect from
    any of these addresses. The rejection will be made with the error message `RFC
    1918` **address not allowed here**. If your own clients have such RFC 1918 addresses
    you need to place a `permit_mynetworks` restriction before the `check_client_access`.
    Otherwise you will reject your own clients.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: Indexed access maps support network block matching on octet boundaries, but
    CIDR notation (as in `10.0.0.0/8)` is not supported. If you need to specify network
    blocks with CIDR notation, consider the `CIDR` lookup table type available in
    Postfix 2.1 and later. Earlier releases can use a script such as `cidr2access`
    by Rahul Dhesi ([http://www.rahul.net/dhesi/software/cidr2access](http://www.rahul.net/dhesi/software/cidr2access))
    that expands CIDR blocks to a notation that is acceptable for indexed access maps.
  prefs: []
  type: TYPE_NORMAL
- en: Note how comments are used to explain why and when entries were added. This
    can be valuable if more than one person is maintaining the files.
  prefs: []
  type: TYPE_NORMAL
- en: The last lines are used to match a couple of notorious spammers (fictional,
    of course) and demonstrate that both complete IP addresses and hostnames are acceptable
    here. These rejections will be made with a generic error message.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is another example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: Contents of `/etc/postfix/sender_access:`
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: If someone attempts to send a message with a `hotmail.com` sender address, the
    client attempting to deliver the message will be subject to the `reject_unknown_client`
    restriction which, as you might recall, rejects client that do not have a valid
    mapping between IP address and hostname.
  prefs: []
  type: TYPE_NORMAL
- en: The second line exemplifies a useful policy that allows clients only from your
    networks to use your domain in the sender address.
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, if you only use Postfix internally within your network and have no
    need to allow anyone else to connect, the following two restrictions enforce this
    policy:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: Implementing new policies
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Be careful when you implement new policies. Some of Postfix's restrictions are
    far too strict for general use and may reject significant amounts of legitimate
    e-mail. For each new restriction you plan to implement, examine the conditions
    under which messages are rejected and try to come up with cases where legitimate
    messages fulfill these conditions. To help you determine whether a restriction
    is safe to use, the `warn_if_reject` restriction can be used. This restriction
    affects the restriction that immediately follows it in the restriction list and,
    if the following restriction should have resulted in a rejection, it will be converted
    to a rejection warning. A rejection warning places a line in the mail log, but
    does not reject the message.
  prefs: []
  type: TYPE_NORMAL
- en: For example, you may want to evaluate the `reject_unknown_client` restriction
    because you have noticed that many spam messages are received from clients that
    do not have a reverse pointer in DNS, that is, there is no mapping from their
    IP address to a name that maps back to the IP address in question.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is one way of doing it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: 'This will result in log messages like this one:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: This log messages contain all known information about the envelope of the message,
    and this should hopefully be enough for you to decide whether a message was legitimate
    or not. After a few days, inspect your mail logs and try to determine whether
    the ratio between would-be rejected unwanted messages and would-be rejected legitimate
    messages is acceptable.
  prefs: []
  type: TYPE_NORMAL
- en: There are many spam countermeasures with good accuracy, some of which are covered
    in this book. Others will emerge in the future depending on how the spammers behave.
    Be very careful when inventing your own ways to identify spam—picking characteristics
    from a small number of spam messages and drawing the conclusion that those characteristics
    are good spam indicators is dangerous and is likely to lead to loss of legitimate
    e-mails. Choose wisely and avoid methods with low accuracy. Do not forget to examine
    legitimate e-mails to make sure they do not have the characteristics that you
    associate with spam.
  prefs: []
  type: TYPE_NORMAL
- en: Using DNS blacklists
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Since 1997, the **Domain Name System** (**DNS**) has been used to thwart spam.
    The method, **DNS-based Blackhole List** (**DNSBL**) or **Real-time Blackhole
    List** (**RBL**), also known as **blacklist** or **blocklist**, uses the DNS to
    publish information about certain clients or sender domains. When a mail server
    such as your own is contacted by a client, your server can combine the client's
    IP address or the given sender address with the domain of one or more DNSBLs and
    perform a DNS lookup. If the address is listed by the DNSBL, the lookup succeeds,
    and your server may choose to, for example, reject the client.
  prefs: []
  type: TYPE_NORMAL
- en: For example, let's say that you have configured Postfix to use the widely used
    `zen.spamhaus.org` blacklist. If a client with the address 1.2.3.4 connects, Postfix
    will look in DNS for an A record for the address `4.3.2.1.zen.spamhaus.org`. If
    such a record exists, Postfix will not accept a message from the client.
  prefs: []
  type: TYPE_NORMAL
- en: Postfix supports three types of DNSBL lookups—client host address, client hostname,
    and sender domain. Each lookup type has a restriction of its own, and they all
    require that you specify the name of the DNSBL domain after the restriction name.
  prefs: []
  type: TYPE_NORMAL
- en: '| DNSBL type | Syntax | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| Client host address | `reject_rbl_client rbl_domain` | The IP address of
    the connecting client is looked up. This is the original and by far most common
    DNSBL type. |'
  prefs: []
  type: TYPE_TB
- en: '| Client hostname | `reject_rhsbl_client rbl_domain` | The hostname of the
    connecting client is looked up. |'
  prefs: []
  type: TYPE_TB
- en: '| Sender address domain | `reject_rhsbl_sender rbl_domain` | The domain of
    the given sender address is looked up. |'
  prefs: []
  type: TYPE_TB
- en: Feel free to list multiple DNSBL restrictions. Make sure you use the restriction
    that corresponds to the DNSBL type—using `reject_rbl_client` with a sender address
    domain DNSBL does not make sense.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following code shows one way of configuring Postfix to use the `zen.spamhaus.org`
    standard-type DNSBL and the `dsn.rfc-ignorant.org` sender domain-DNSBL:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: Notice how these restrictions are listed after both `permit_mynetworks` and
    `reject_unauth_destination`. This is because DNSBL lookups are comparatively expensive,
    and there is no use in wasting time on such lookups for your own clients or for
    clients that might get rejected anyway. To avoid unnecessary delays, be sure to
    list the DNSBLs that block the most messages, first among your DNSBL restrictions.
  prefs: []
  type: TYPE_NORMAL
- en: Choosing DNS blacklists
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In the beginning, the DNSBLs listed only **open relays**, that is, SMTP servers
    that accept all messages from all clients to all destinations. Open relays once
    were the primary source of spam, but this has changed in recent years. Today,
    a lot of spam is sent from the hijacked home computers of innocent and unknowing
    people.
  prefs: []
  type: TYPE_NORMAL
- en: Different blacklists have different policies for listing hosts and removing
    listed hosts. Naturally, the bigger the blacklist, the more legitimate messages
    you are likely to reject. Before starting to use a particular DNSBL to reject
    messages, you should examine these policies carefully and preferably also try
    them out for a while without actually rejecting any messages. The `warn_if_reject`
    restriction can help you with this.
  prefs: []
  type: TYPE_NORMAL
- en: The blacklists that work great for some people and reject huge amounts of spam
    but no legitimate messages may have little value for other people and may actually
    reject more legitimate messages than spam. Take great care when choosing blacklists
    and avoid blindly copying allegedly good sets of DNSBLs from others. Another good
    reason for being cautious is that DNSBLs sometimes go out of service because they
    have been repeatedly attacked by spammers and forced to shut down. This happened
    to the well-known `relays.ordb.org` DNSBL in 2006\. Blacklists that are shut down
    may, after a while, be reconfigured to always indicate an IP address as listed
    in the blacklist, that is, you will reject all mail if configured to use that
    blacklist.
  prefs: []
  type: TYPE_NORMAL
- en: The probably best general-purpose DNSBL out there for use with `reject_rbl_client
    is`, at the moment, `zen.spamhaus.org`. The false-positive rate, that is the share
    of incorrectly rejected genuine e-mail, can be expected to be extremely low while
    the accuracy of catching spam stays high. Unless you have special needs, this
    may be the only DNSBL that you need to use.
  prefs: []
  type: TYPE_NORMAL
- en: Before implementing any DNSBL at all, make sure you know how to exempt certain
    clients or domains from rejections. Sooner or later, and no matter which DNSBL
    you choose to use, you will have cases of legitimate messages being blocked. When
    that happens, it is too late to start digging in the documentation trying to find
    out what you can do about it.
  prefs: []
  type: TYPE_NORMAL
- en: The solution to the problem is to have whitelisting access maps before your
    DNSBL restrictions. Which type of access map you should use depends on the DNSBL
    type, but in most cases `check_client_access` will be suitable, although `check_sender_access`
    is more appropriate if you use `reject_rhsbl_sender`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Continuing the previous example, this is what you can do to exempt certain
    clients and sender addresses from rejection by any following restrictions:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: In `/etc/postfix/rbl_client_exceptions:`
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: In `/etc/postfix/rhsbl_client_exceptions:`
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: Stopping messages based on content
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Often, unwanted messages cannot be spotted without looking at their contents.
    Postfix provides some unsophisticated but still very useful tools for this purpose.
    The idea is that the lines in a message are matched against a set of regular expressions
    that you supply and, if there is a match, an action will be carried out. This
    is called **header checks** or **body checks**, depending on what part of the
    message is being inspected. Most often you use header and body checks to reject
    messages, but messages can also be discarded or redirected to another recipient.
    Header and body checks can help you solve the following problems, all of which
    will be discussed in the following sections:'
  prefs: []
  type: TYPE_NORMAL
- en: Reacting to messages containing attachments with forbidden filenames
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Quickly stopping big virus outbreaks
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Custom logging of certain header fields
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Removing certain message headers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An introduction to regular expressions is beyond the scope of this book. If
    you do not have that knowledge already, there are many regular expression resources
    and tutorials on the net, for example [http://gnosis.cx/publish/programming/regular_expressions.html](http://gnosis.cx/publish/programming/regular_expressions.html)
    and [http://www.codeproject.com/KB/dotnet/regextutorial.aspx](http://www.codeproject.com/KB/dotnet/regextutorial.aspx).
    If you are looking for a book on the topic, Jeffrey E. F. Friedl's *Mastering
    Regular Expressions* (O'Reilly, 2006) is quite comprehensive.
  prefs: []
  type: TYPE_NORMAL
- en: Configuring header and body checks
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The `main.cf` parameters for header and body checks `body_checks, header_checks,
    mime_header_checks`, and `nested_header_checks`—can contain one or more references
    to regular expression lookup tables (`regexp` or `pcre`), which will be considered
    when a message is being received. Technically you could use any other lookup table
    type for this, but only regular expression tables are really useful. The following
    parameters are used for different parts of the message:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Parameter | Part of message it applies to |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `body_checks` | The body of each message part. |'
  prefs: []
  type: TYPE_TB
- en: '| `header_checks` | All non-MIME top-level headers. |'
  prefs: []
  type: TYPE_TB
- en: '| `mime_header_checks` | All MIME headers found in any message part. The following
    headers are considered to be MIME headers:'
  prefs: []
  type: TYPE_NORMAL
- en: Content-Description
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Content-Disposition
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Content-ID
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Content-Transfer-Encoding
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Content-Type
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: MIME-Version
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| `nested_header_checks` | All non-MIME message headers in messages that are
    attached to the received message. |'
  prefs: []
  type: TYPE_TB
- en: This means for each header line, a lookup will be made against the lookup tables
    specified in `header_checks`, each line in the message body will cause a lookup
    against the lookup tables in `body_checks`, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: The format of regular expression lookup tables is very similar to ordinary indexed
    ones. One big difference is that they are not indexed and should not be run through
    the `postmap` program. Postfix will read regular expression lookup tables again
    when the daemons are restarted, which is often enough in many cases. If you want
    an immediate update, you must reload Postfix.
  prefs: []
  type: TYPE_NORMAL
- en: Regular expression lookup tables are not exclusively for header and body checks.
    They can be used wherever Postfix expects a lookup table.
  prefs: []
  type: TYPE_NORMAL
- en: The right-hand side of lookup tables used for header and body checks can contain
    many of the previously described actions allowed in access maps, but one action,
    `IGNORE`, is available only here. The `IGNORE` action simply removes the matched
    line from the message.
  prefs: []
  type: TYPE_NORMAL
- en: Message headers such as the ones in the following example that are wrapped to
    form multiple physical lines, will be joined together before being used as a lookup
    key.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: Header and body checks examples
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Now, let's get concrete and take a look at how header and body checks can be
    used. Unless otherwise noted, all these examples work with both the `regexp` and
    the `pcre` lookup table type.
  prefs: []
  type: TYPE_NORMAL
- en: Many computer viruses spread by e-mail, and most of them through programs or
    scripts attached to the messages. Although reacting to messages containing attachments
    with forbidden filenames is a blunt and inexact tool, it is a simple way to take
    care of these unwanted messages even before they reach any antivirus scanner.
    By avoiding large overhead scanning, your server can cope with much larger virus
    outbreaks. There is no complete list of the filenames that can be banned, but
    just blocking `.exe, .scr, .pif, .bat`, and a few more will probably suffice for
    most people. If your users have a need to send or receive files with these filename
    extensions, you may need to relax the policy somewhat. To implement this in Postfix,
    you need to recognize that the filename of an attachment is found in Content-Disposition
    or Content-Type headers. These are MIME headers, so the expression needs to go
    in `mime_header_checks`. In this example, the message is rejected with text that
    indicates the offending filename. If a legitimate mail is rejected, the sender
    will hopefully be able to interpret the error message and resend the message.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: Note the indentation on all but the first line. It is needed to have the lines
    be treated as a single line. Lookup tables work in the same way as the `main.cf`
    and `master.cf` configuration files in this respect. The `/x` modifier will cause
    all whitespace to be ignored. This expression, originally constructed by Russell
    Mosemann and further refined by Noel Jones, requires a `pcre` lookup table, but
    it is possible to rewrite the expression to use `regexp`.
  prefs: []
  type: TYPE_NORMAL
- en: '`body_checks` can be a useful tool in quickly stopping big virus outbreaks.
    A number of the previous virus outbreaks have had messages with certain characteristics
    that made them pretty easy to block. If filename blocking is not an option, you
    can try to find lines that are unique to these messages and construct suitable
    expressions.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: If you are unsure whether an expression will be too broad and catch legitimate
    messages, you can use `HOLD` or `WARN` instead of `REJECT. HOLD` will put the
    messages on hold, allowing you to examine them and either release the messages
    or delete them. `WARN` will accept the message but log the incident.
  prefs: []
  type: TYPE_NORMAL
- en: This method of blocking viruses can also be useful when a new virus is just
    starting to spread and the antivirus software you are using has not yet been updated
    to catch it.
  prefs: []
  type: TYPE_NORMAL
- en: The `WARN` action can also be used to get custom logging of certain header fields.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: 'Having this expression in `header_checks` will result in all subject headers
    being logged as a warning message similar to this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: 'Sometimes it can be useful to remove certain message headers. For example,
    some programming libraries that provide SMTP clients add an X-Library header to
    all messages sent. Apparently, many spammers use these libraries and therefore
    SpamAssassin gives a pretty high score for messages that contain this header.
    If you need to use such a library and you cannot or will not modify the source
    code to avoid having the header added in the first place, Postfix can help you
    remove it. This `header_checks` expression will remove all `X-Library` headers
    in messages passing through Postfix:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: Caveats
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Header and body checks are simple and blunt tools for inspecting message contents.
    They are useful for a number of things, but do not attempt to overuse use them
    for general-purpose spam fighting. Many people try to use these tools incorrectly,
    and this book will try to dispel some common misconceptions.
  prefs: []
  type: TYPE_NORMAL
- en: 'Header and body checks will inspect only one line at a time, and no state is
    kept between different lines. This means you cannot reject messages that contain
    one bad word on one line and another bad word elsewhere in the message. Do not
    be fooled by the `if...endif` construct allowed in regular expression lookup tables!
    You cannot use them in this way:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: Remember, lookups are made one line at a time. Obviously, a line that starts
    with `From` cannot possibly start with `Subject`.
  prefs: []
  type: TYPE_NORMAL
- en: Many spam messages have the mail body in **Base64** encoding. Because of how
    Base64 works, a word has many possible Base64 representations. Postfix does not
    perform any decoding before the message content is fed to the header and body
    checks.
  prefs: []
  type: TYPE_NORMAL
- en: This means that using `body_checks` to block messages containing bad words doesn't
    work universally. If `body_checks` is your only tool to fight spam, you will spend
    a couple of hours every day maintaining your regular expressions so they will
    catch the spam of the day, but you will still not have high accuracy.
  prefs: []
  type: TYPE_NORMAL
- en: Header and body checks apply to all messages. You cannot whitelist a certain
    sender or a certain client. If you host multiple domains you have the option of
    using different header and body checks for your hosted domains by running multiple
    `cleanup` daemons and multiple `smtpd` daemons listening on different IP addresses,
    or you can run multiple instances of Postfix. The latter means that you have multiple
    queue directories and multiple copies of Postfix running at the same time. This
    is required for some complex setups, but can actually simplify setups that are
    possible with a single instance.
  prefs: []
  type: TYPE_NORMAL
- en: You cannot use header and body checks to check for the nonexistence of something,
    so you cannot reject messages that have an empty body or messages that do not
    contain a secret password.
  prefs: []
  type: TYPE_NORMAL
- en: Having a large number of regular expressions in `body_checks` is not only a
    maintenance nightmare but may also seriously degrades the performance of your
    server. A reasonable configuration should not need more than, say, 10 20 expressions.
    If you have too many expressions, Postfix's `cleanup` processes will use a lot
    of CPU time.
  prefs: []
  type: TYPE_NORMAL
- en: Virtual alias domains and local aliases
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, some of Postfix's features for address rewriting to allow hosting
    multiple domains and implementing group addresses (or distribution lists) will
    be discussed.
  prefs: []
  type: TYPE_NORMAL
- en: Additionally, this section will take a look at how to find information in MySQL
    databases using Postfix. The goal of the exercise will be to use MySQL lookups
    for alias lookups, but the knowledge you can gain will be applicable for all other
    situations where you might want to use MySQL together with Postfix. It will be
    assumed that you have basic SQL knowledge and that you are able to set up and
    operate a MySQL server.
  prefs: []
  type: TYPE_NORMAL
- en: Virtual alias domains
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As was explained earlier, even though you can have several local domains (several
    domains listed in `mydestination`), they will always be equivalent—they share
    a single localpart namespace. In other words, `joe@localdomain1.com` is `joe@localdomain2.com`
    is `joe@localdomain3.com`. Obviously, this is not good enough. In order to host
    multiple domains with distinct localpart namespaces, you need virtual alias domains.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: A **virtual alias domain** is a domain where each valid address maps to one
    or more other e-mail addresses, possibly in other domains. Compare this to local
    domains where an address typically maps directly to a UNIX system account. `joe@virtualdomain1`
    and `joe@virtualdomain2` can lead to completely different mailboxes.
  prefs: []
  type: TYPE_NORMAL
- en: Virtual alias domains are sometimes just called virtual domains, but to avoid
    confusion with virtual mailbox domains, which are also sometimes called virtual
    domains, the full term will be used.
  prefs: []
  type: TYPE_NORMAL
- en: To show how virtual alias domains work in Postfix, let's return to our friends
    at Example Inc. for a couple of examples of how they can enhance their mail system
    by using virtual alias domains.
  prefs: []
  type: TYPE_NORMAL
- en: Many virtual alias domains mapping to one local domain
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The directors of Example Inc. have now expanded their business significantly
    and want to have subdomains for their branch offices to avoid name clashes when
    two people in different offices share the same name. For their offices in London,
    Paris, and Berlin they want the domains `gb.example.com, fr.example.com`, and
    `de.example.com` respectively. They have a single Postfix server that receives
    all messages.
  prefs: []
  type: TYPE_NORMAL
- en: The solution to Example Inc's problem is to let `gb.example.com, fr.example.com`,
    and `de.example.com` all be virtual alias domains. The original `example.com`
    domain should remain a local domain. Postfix looks for virtual alias domains in
    the `virtual_alias_domains` parameter.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: Make sure that you do not list any of these domains in `mydestination`. The
    next step is to tell Postfix which addresses in the virtual alias domains map
    to which addresses in the `example.com` domain. This is done by specifying one
    or more lookup tables in the `virtual_alias_maps` parameter. For starters, Example
    Inc. will just use a simple `hash` type lookup table. When things work as we expect
    them to, they will create an equivalent configuration that looks up data in a
    MySQL database.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: Now, Postfix will use the virtual aliases they put in `/etc/postfix/virtual`.
    The format of a virtual alias lookup table is very simple; the recipient address
    is the lookup key and the address/addresses to which the recipient address should
    be rewritten is the result.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: After editing the `/etc/postfix/virtual` file, `postmap` must be run in order
    to transform the file into `/etc/postfix/virtual.db`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: The format of virtual alias lookup tables is described in the `virtual(5)` manual
    page.
  prefs: []
  type: TYPE_NORMAL
- en: In the above example, all messages to `joe@gb.example.com` will end up in the
    mailbox of the user "joe1", all messages to `joe@de.example.com` will end up in
    the mailbox of the user "joe2", and all messages to `jane@fr.example.com` will
    end up in the mailbox of the user "jane". Note that introducing virtual alias
    domains does not cause the original local domain to stop accepting messages.
  prefs: []
  type: TYPE_NORMAL
- en: Jane and our two Joes will also receive messages addressed to their actual usernames
    at `example.com`. (joe1@example.com, `joe2@example.com`, and `jane@example.com`).
    If this is undesirable, you can use `smtpd_recipient_restrictions` and `check_recipient_access`
    to reject attempts to send messages to these recipients. Add the restriction to
    the `smtpd_recipient_restrictions` setting (if any) in `main.cf:`
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: 'Then put the following in `/etc/postfix/recipient_access` and run `postmap`
    on the file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs: []
  type: TYPE_PRE
- en: One virtual alias domain mapping to many local domains
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: After running the previous setup for a while, the staff at Example Inc. decide
    that they want to return to the old setup with a single domain for all employees.
    The name clashes can be resolved by including the users' last names in the address.
    They also want to have one mail server per branch office to avoid latency and
    network load when the users are accessing their mailboxes. All London users will
    have their accounts residing on the London server, Paris users on the Paris server,
    and Berlin users on the Berlin server. This problem is an opportunity to look
    at a different way of using virtual alias domains.
  prefs: []
  type: TYPE_NORMAL
- en: The idea in this setup is that `example.com` will be the virtual domain and
    that each Postfix server will have a local domain of its own. The server at the
    London office will have `gb.example.com` listed as a local domain. Virtual aliasing
    will be used to map from the `example.com` addresses to the office-specific subdomains.
    This mapping can either be done exclusively on a master server or on the servers
    for each of the branch offices. Having a single master server introduces the problem
    of synchronizing the data between the servers, but that problem can be solved
    easily by storing the data in a relational database. How to use MySQL for alias
    lookups will be discussed in the *Introducing MySQL lookups* section later in
    the chapter.
  prefs: []
  type: TYPE_NORMAL
- en: 'To implement this, start by removing `example.com` from `mydestination` and
    add it to `virtual_alias_domains` instead. This needs to be done on all servers.
    The branch office servers—one of which could easily be the master server—should
    have their own domain (`gb.example.com`, and so on) listed in `mydestination`.
    Do not forget to set up the DNS server so that messages to the branch office domains
    will be routed to the branch office servers. Finally, the virtual alias table
    should look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs: []
  type: TYPE_PRE
- en: This problem illustrates an important point; the address/addresses in the right-hand
    side of a virtual alias table do not have to be local. Any domain can be put there.
    This is what happens when the master server receives a mail to `joe.smith@example.com:`
  prefs: []
  type: TYPE_NORMAL
- en: Postfix looks in `virtual_alias_domains` to see if `example.com` is a virtual
    alias domain, and the result is positive.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, it looks up `joe.smith@example.com` in `virtual_alias_maps`. The lookup
    returns `joe1@gb.example.com`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Postfix on the master server decides that `gb.example.com` is not a domain that
    it hosts, and uses DNS to resolve the destination of the message, and finally
    delivers it to the London branch office server.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Group addresses
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This third and final virtual alias example will do little more than state that
    the right-hand side of virtual alias tables may contain several addresses, which
    can be the names of other aliases rather than actual account names.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs: []
  type: TYPE_PRE
- en: In this example, a message sent to `all@example.com` will be sent to all in
    management and all in finance, which in turn means Joe Smith, Joe Schmidt, Jane
    Doe, and Jack Black.
  prefs: []
  type: TYPE_NORMAL
- en: It may not be desirable to let anyone send messages to large distribution lists.
    Luckily, you can use Postfix's SMTP restrictions to restrict the access to the
    sensitive addresses. If you only want your own users (clients within `mynetworks`)
    to be allowed to send messages to an address, the solution is very simple. In
    `main.cf`, use the `check_recipient_access` restriction to disallow access to
    the address, but use `permit_mynetworks` to exempt your own clients.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs: []
  type: TYPE_PRE
- en: If you already use `smtpd_recipient_restrictions` in your `main.cf`, you will
    have to modify that parameter rather than just adding what is listed in the example
    above. The key feature is to list the `check_recipient_access` restriction after
    the `permit_mynetworks` restriction.
  prefs: []
  type: TYPE_NORMAL
- en: Contents of `/etc/postfix/restricted_recipients:`
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs: []
  type: TYPE_PRE
- en: In more complex scenarios, like when you want to disallow a recipient address
    for all but a few sender addresses or clients, you may need to use Postfix's restriction
    class feature. It is described in `RESTRICTION_CLASS_README` ([http://www.postfix.org/RESTRICTION_CLASS_README.html](http://www.postfix.org/RESTRICTION_CLASS_README.html))
    along with an example for this particular case.
  prefs: []
  type: TYPE_NORMAL
- en: Introducing MySQL lookups
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If your organization is large, maintaining a flat text file with aliases can
    be tedious. Storing the data in a real database comes with many advantages—many
    users can edit the data simultaneously, the users themselves can be allowed to
    perform some tasks via web interfaces, the data can be easily shared over the
    network, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: Postfix supports looking up data in a number of *complex* lookup table types.
    These include MySQL, PostgreSQL, and LDAP. It is *complex* not because it is very
    difficult to set up, but because there are inherently more things that can go
    wrong and, yes, simple indexed files (`hash, dbm, btree, cdb`) are easier to get
    right. If you want to solve a problem with a lookup table, always start with an
    indexed file. When you get things working and understand why and how they work,
    try to transform the same idea to the complex lookup table type.
  prefs: []
  type: TYPE_NORMAL
- en: 'Postfix does not require you to conform to some specific database schema. For
    each lookup table where you use MySQL, you can use a separate configuration that
    given whatever schema you have chosen to use (more or less—the current version
    of Postfix does not quite allow arbitrary MySQL queries), returns the desired
    result. Each configuration is stored in a separate file that can have restrictive
    permissions as they contain database passwords. To use MySQL for looking up virtual
    aliases, the following setting in `main.cf` will do:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE63]'
  prefs: []
  type: TYPE_PRE
- en: The configuration file follows the same format as `main.cf` and contains all
    information required to make a lookup—in this case, a virtual alias lookup. The
    following table describes the parameters that you can put in the configuration
    file. The parameters will be used to construct the `SELECT` query. In Postfix
    2.1 and later, the format of such configuration files can be found in the `mysql_table(5)`
    manual page.
  prefs: []
  type: TYPE_NORMAL
- en: '| Parameter | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `hosts` | A list of the MySQL hosts that Postfix will contact to perform
    the query. Can contain either IP addresses, hostnames or, when prefixed with `unix:`,
    the path to a local UNIX domain socket. If you specify multiple hosts, they will
    be tried in random order. Any UNIX domain socket hosts will be tried first. |'
  prefs: []
  type: TYPE_TB
- en: '| `user` | The username that should be used to log in to the MySQL server.
    |'
  prefs: []
  type: TYPE_TB
- en: '| `password` | The password that should be used to log in to the MySQL server.
    |'
  prefs: []
  type: TYPE_TB
- en: '| `dbname` | The name of the database to use. |'
  prefs: []
  type: TYPE_TB
- en: '| `select_field` | The name of the column from which the lookup result will
    be taken. |'
  prefs: []
  type: TYPE_TB
- en: '| `table` | The table that will be searched for the data. |'
  prefs: []
  type: TYPE_TB
- en: '| `where_field` | The table column with which the lookup key will be compared.
    |'
  prefs: []
  type: TYPE_TB
- en: '| `additional_conditions` | If you require some additional conditions to be
    tacked on at the end of the constructed query, you can put them here. |'
  prefs: []
  type: TYPE_TB
- en: '| `query` | The SQL query to perform, with `%s` being a placeholder for the
    string being looked up. This parameter is mutually exclusive with `select_field,
    table, where_field`, and `additional_conditions`. This parameter was introduced
    in Postfix 2.2 and is the recommended way of configuring the MySQL query. |'
  prefs: []
  type: TYPE_TB
- en: Let's start with a simple example. You have a table alias with two columns—
    `alias` and `address`. The `alias` column is the left-hand side of the virtual
    lookup table (the address with the virtual alias domain) and the `address` column
    is the right-hand side (the new address).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE64]'
  prefs: []
  type: TYPE_PRE
- en: 'The following simple SQL query is needed to find out whether an address in
    one of the virtual domains exists and should be rewritten to some other address:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE65]'
  prefs: []
  type: TYPE_PRE
- en: 'Translating this into a Postfix MySQL lookup table configuration yields the
    following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE66]'
  prefs: []
  type: TYPE_PRE
- en: 'An alternative solution, using the `query` parameter of Postfix 2.2, would
    look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE67]'
  prefs: []
  type: TYPE_PRE
- en: For brevity, the `hosts, user, password`, and `dbname` parameters will hereon
    be omitted from the example configurations.
  prefs: []
  type: TYPE_NORMAL
- en: Sometimes reality is a bit more complicated than this trivial example, so we
    will move on to something a bit more difficult.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `select_field, table, where_field`, and `additional_conditions` parameters
    are really just inserted directly into the following `SELECT` query template,
    together with the lookup string:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE68]'
  prefs: []
  type: TYPE_PRE
- en: 'This means `select_field` does not have to be a single column; it could specify
    multiple columns combined into one value, and `table` could be multiple tables
    with the join conditions in `additional_conditions`. For example, consider this
    slightly more complex query:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE69]'
  prefs: []
  type: TYPE_PRE
- en: 'The following lookup table configuration would be required to execute it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE70]'
  prefs: []
  type: TYPE_PRE
- en: 'Or, using the `query` parameter:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE71]'
  prefs: []
  type: TYPE_PRE
- en: Before putting a new MySQL lookup table configuration to work, you should make
    sure that it returns the desired result for all lookup keys. This can be done
    with the `postmap` program, the procedure for which is described in the *Troubleshooting
    lookup tables with postmap* section.
  prefs: []
  type: TYPE_NORMAL
- en: Local aliases
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Local aliases are an alternative to virtual aliases. Local aliases pretty much
    work in the same way, but they apply only to local domains. Local alias tables
    also provide a couple of extra features. We took a brief look at local aliases
    even before we started Postfix the first time in the *Error reporting* section.
  prefs: []
  type: TYPE_NORMAL
- en: Lookup tables for local aliases are specified in the `alias_maps` parameter.
    These lookup tables have a slightly different format than virtual aliases, and
    the reason is to stay compatible with the file format of the `sendmail` mail transfer
    agent. Because of this, you should not use the `postmap` command to rebuild the
    alias file but `postalias` instead. You may also find the `newaliases` command
    to be convenient.
  prefs: []
  type: TYPE_NORMAL
- en: Many people are confused by the two similar parameters, `alias_maps` and `alias_database`.
    The difference between the two of them is that `alias_maps` contains the lookup
    tables that Postfix will use to do local alias rewriting, and `alias_database`
    contains the lookup tables that the `newaliases` command will rebuild when invoked.
    Only indexed lookup tables (`hash, btree, dbm, cdb`) need to be rebuilt, so it
    does not make sense to list MySQL lookup tables there.
  prefs: []
  type: TYPE_NORMAL
- en: 'Often, you will want `alias_maps` and `alias_database` to refer to the same
    lookup table(s):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE72]'
  prefs: []
  type: TYPE_PRE
- en: 'Compared to virtual alias tables, the lookup key in local alias tables does
    not include the domain part. That information would be useless as all local domains
    have the same localpart namespaces. When indexed files are used for local aliases,
    the lookup key must end with a colon, for example see the follwoing:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE73]'
  prefs: []
  type: TYPE_PRE
- en: This will send messages addressed to the postmaster address in any local domain
    to the two users, `jack` and `jill`, assuming that the domain in `myorigin` is
    local. The next section explains why this assumption is important.
  prefs: []
  type: TYPE_NORMAL
- en: The right-hand side of alias tables does not necessarily have to point to local
    users. In fact they may point to any valid address in any domain. The format of
    local alias tables is described in the `aliases(5)` manual page.
  prefs: []
  type: TYPE_NORMAL
- en: Command deliveries
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Up until now, everything that could have been done with a local alias could
    just as well have been done with a virtual alias. So, what is the point of local
    aliases? One big difference is that local aliases support delivering messages
    to commands. This is typically required by mailing list manager software. Postfix
    delivers messages to commands by passing the contents of the messages on the standard
    input stream.
  prefs: []
  type: TYPE_NORMAL
- en: 'To run a command when a message is delivered, the following syntax is used:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE74]'
  prefs: []
  type: TYPE_PRE
- en: The double quotes are necessary only if the command, as in this case, contains
    spaces.
  prefs: []
  type: TYPE_NORMAL
- en: 'But what if you want to run a mailing list on a virtual domain? You will have
    to use virtual aliases to rewrite the addresses in the virtual domain to local
    aliases. Say you want messages sent to the address `mylist@virtual.example.com`
    to be posted to the `mylist` mailing list, which accepts messages via command
    delivery. To enable this you will need a virtual alias such as the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE75]'
  prefs: []
  type: TYPE_PRE
- en: Pay attention to what user the programs will run as. Postfix normally uses the
    owner of the alias file, but not if the owner is the root user. In that case,
    the user in the `default_privs` parameter (typically "nobody") will be used to
    run the program.
  prefs: []
  type: TYPE_NORMAL
- en: If you write your own program that you want Postfix to deliver messages to,
    make sure you return an appropriate exit status when errors occur. Postfix uses
    the error status constants in `sysexits.h` to determine what to do if the program
    exits with a non-zero exit status. Depending on the exit status, Postfix will
    either return the message to the sender or let it remain in the queue and retry
    delivery later.
  prefs: []
  type: TYPE_NORMAL
- en: Common pitfalls
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Virtual aliases not only apply to virtual alias domains but also to all messages
    that pass through Postfix. Not recognizing this may lead to surprises. For example,
    if you host many virtual alias domains that all should have some aliases in common—say,
    `root, postmaster`, and `abuse`—you might be tempted to use a regular expression
    lookup table (`regexp` or `PCRE`) to alias these addresses for all of your virtual
    alias domains to yourself.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE76]'
  prefs: []
  type: TYPE_PRE
- en: Do not do this! As virtual aliases apply to all messages, any messages that
    you or your users send to, for instance, `abuse@aol.com` or `abuse@mindspring.com`
    will be sent to you instead of the intended recipient.
  prefs: []
  type: TYPE_NORMAL
- en: A very common pitfall is believing that a non-qualified address on the right-hand
    side implicitly refers to a local user. For example, `joe` would always mean the
    local user joe. This is equally untrue for both virtual aliases and local aliases.
    Recall from the beginning of this chapter when the `myorigin` parameter was discussed.
    Just as in all other places, Postfix will qualify bare usernames with `myorigin`.
    If your value of `myorigin` happens to be a local domain listed in `mydestination`,
    which it probably would be, `joe` will indeed refer to the local user joe. To
    avoid surprises, if you at some time set `myorigin` to a non-local domain, it
    is a good idea to always qualify the right-hand side addresses with a local domain.
    As `localhost.$mydomain` almost always is listed in `mydestination`, a good candidate
    might be `localhost`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE77]'
  prefs: []
  type: TYPE_PRE
- en: Other address rewriting mechanisms
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Virtual and local aliases are not the only mechanisms for address rewriting
    that Postfix provides. Most notably, canonical rewriting can be used to rewrite
    sender and/or recipient addresses in both the envelope and the headers. This type
    of rewriting is provided by the parameters `canonical_maps, sender_canonical_maps`,
    and `recipient_canonical_maps` and can among other things be useful to rewrite
    sender addresses such as `joe@example.com` to `Joe.User@example.com` if you do
    not want to expose the actual usernames of the users.
  prefs: []
  type: TYPE_NORMAL
- en: How Postfix rewrites addresses and in what order rewriting happens is described
    in *ADDRESS_REWRITING_README* available at [http://www.postfix.org/ADDRESS_REWRITING_README.html](http://www.postfix.org/ADDRESS_REWRITING_README.html).
  prefs: []
  type: TYPE_NORMAL
- en: Troubleshooting Postfix problems
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Postfix provides many tools to simplify problem solving. While implementing
    new features in your Postfix mail system, do it step by step. The more unsure
    you are in what you are doing, the smaller should be the steps that you take.
    If you run into problems, you will discover them early and it will be easier to
    figure out what went wrong. This is especially true when implementing complex
    lookup tables using MySQL databases.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If you are even slightly uncomfortable with complex lookup tables, never introduce
    a new feature and a complex lookup table configuration at the same time. If something
    breaks, you will have much more trouble figuring out where to start.
  prefs: []
  type: TYPE_NORMAL
- en: 'When trying out new configurations, it does not hurt to be on the cautious
    side until the configuration is fully tested. By setting the following feature
    all permanent errors will be turned into temporary errors:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE78]'
  prefs: []
  type: TYPE_PRE
- en: This means the transmission of any messages rejected by your server will be
    retried, and that Postfix will retry sending any messages that get rejected by
    a remote server. With this setting in effect, closely monitor the logs and look
    for rejections that do not seem normal. Do not forget to turn this feature off
    when you have finished testing!
  prefs: []
  type: TYPE_NORMAL
- en: Reading and interpreting the log files
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'One key element in troubleshooting Postfix problems is being able to read and
    interpret the log messages that Postfix produces. Because they are plain text
    files with one log message per line, they do not require any special programs
    for inspection. Logs have been looked at a few times before, but this section
    will explain the messages and give examples of both successful mail deliveries
    and failures. When reading the examples, refer to the figure in the *Postfix architecture:
    An overview* section and note how the order of the log entries closely follows
    the path of the mail through Postfix.'
  prefs: []
  type: TYPE_NORMAL
- en: Understanding Postfix's logging is also discussed in Kyle Dent's article *Troubleshooting
    with Postfix Logs* at [http://www.onlamp.com/pub/a/onlamp/2004/01/22/postfix.html](http://www.onlamp.com/pub/a/onlamp/2004/01/22/postfix.html).
  prefs: []
  type: TYPE_NORMAL
- en: Message queue ID
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: An important property of each message, received and processed, is the queue
    ID. The **queue ID** is a hexadecimal number of varying lengths that identifies
    a message. Log messages that have a message context will also log the queue ID.
    This makes it easy for you to find all log messages that pertain to a message
    if you have the queue ID (the path to the log file needs to be adjusted for your
    system).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE79]'
  prefs: []
  type: TYPE_PRE
- en: The queue ID is assigned when the `cleanup` daemon creates a queue file in one
    of the Postfix queue directories. The queue file remains in the system until all
    recipients have been delivered to or the message expires, after which the `qmgr`
    daemon removes the queue file. In recent releases of Postfix, this removal event
    is logged, as we will see in the examples.
  prefs: []
  type: TYPE_NORMAL
- en: 'Sometimes you will find that there is no queue ID but instead the word `NOQUEUE`
    in the log, as in this example that we have seen before:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE80]'
  prefs: []
  type: TYPE_PRE
- en: The reason is that this message has not yet been given a queue file and thus
    has not been assigned a queue ID. The queue file is created by the `cleanup` daemon
    when the first recipient has been accepted. This helps in performance optimization.
  prefs: []
  type: TYPE_NORMAL
- en: Do not confuse the queue ID with the message ID. The latter is contained in
    the Message-ID header of each message and is normally added by the mail client
    before the message is handed over to Postfix. If no such header field is present,
    the `cleanup` daemon of Postfix will add one for you. The `cleanup` daemon will
    always log the message ID of received messages.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE81]'
  prefs: []
  type: TYPE_PRE
- en: The Message-ID header contains the hostname of the computer and typically the
    current date and time, and it will be unique for each message. Do not fall in
    the trap of thinking that the queue IDs also are unique. Queue IDs can and will
    be reused for different messages, theoretically as often as every second (but
    that would have to be on an incredibly busy system).
  prefs: []
  type: TYPE_NORMAL
- en: SMTP submission and local delivery
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Let's start by looking at two examples of successful mail transactions. The
    first one shows a message being received by SMTP and delivered to a local mailbox,
    and the second example will show a locally submitted message that is delivered
    to a foreign mailbox via SMTP.
  prefs: []
  type: TYPE_NORMAL
- en: The first example shows what the logs contain after a message has been received
    via SMTP and delivered to a local user.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE82]'
  prefs: []
  type: TYPE_PRE
- en: The `smtpd` daemon has received a connection from a client.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE83]'
  prefs: []
  type: TYPE_PRE
- en: Postfix has now accepted the first recipient of this message and requested a
    queue file from the `cleanup` daemon. This is the first log entry for this message
    that contains the queue ID.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE84]'
  prefs: []
  type: TYPE_PRE
- en: The `cleanup` daemon has received the whole message from the `smtpd` daemon
    and logs the message ID.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE85]'
  prefs: []
  type: TYPE_PRE
- en: The client disconnected from the SMTP server.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE86]'
  prefs: []
  type: TYPE_PRE
- en: The message has entered the active queue and is thus eligible for delivery (unless
    the queue is congested, delivery will start more or less immediately). The queue
    manager logs the sender address, the message size in bytes, and the total number
    of recipients. The reported size will be slightly larger than the actual number
    of bytes in the message and the size of the message when stored on disk. This
    is because the reported size is the total size of the message content records
    in the queue file, and this gives a little overhead.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE87]'
  prefs: []
  type: TYPE_PRE
- en: The local delivery agent successfully delivered the message to the `maildir`
    of the local user "jack". The message was originally addressed to `postmaster@example.net`,
    but some address rewriting mechanism (typically a local or virtual alias) rewrote
    the recipient address. Finally, the message was delivered about one tenth of a
    second after it was received (the `delay` keyword).
  prefs: []
  type: TYPE_NORMAL
- en: Note that this message is logged when the delivery is completed. If the delivery
    agent invokes another program during the delivery and that program logs messages
    of its own, these will end up in the log before this delivery completion message.
  prefs: []
  type: TYPE_NORMAL
- en: 'Each recipient delivered to will emit a log message:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE88]'
  prefs: []
  type: TYPE_PRE
- en: This final message signals that all recipients have been delivered to so that
    the queue file is removed.
  prefs: []
  type: TYPE_NORMAL
- en: Local submission and SMTP delivery
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Our next example is somewhat the opposite of the previous example. Here, a
    message submitted via the `sendmail` command is delivered to another host via
    SMTP:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE89]'
  prefs: []
  type: TYPE_PRE
- en: The submitted message has been taken care of by the `pickup` daemon. The message
    was submitted by the user having user ID `100`, and the sender was the unqualified
    address `jack:`
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE90]'
  prefs: []
  type: TYPE_PRE
- en: 'Again, the message has been read by the `cleanup` daemon and the message ID
    is logged:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE91]'
  prefs: []
  type: TYPE_PRE
- en: Note how the previously unqualified sender address has now been rewritten to
    a fully qualified address, probably because the `myorigin` parameter is equal
    to `example.net`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE92]'
  prefs: []
  type: TYPE_PRE
- en: 'The message was successfully delivered to the recipient `joe@example.com` via
    the `mail.example.com` SMTP relay. When accepting the message, the remote server
    said:'
  prefs: []
  type: TYPE_NORMAL
- en: '**250 Ok: queued as DD8F02787**'
  prefs: []
  type: TYPE_NORMAL
- en: 'So now we know the queue ID that our message got at the other end. This information
    may be useful if we need to contact the postmaster at `example.com` regarding
    this message:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE93]'
  prefs: []
  type: TYPE_PRE
- en: Delivery completed, queue file removed.
  prefs: []
  type: TYPE_NORMAL
- en: Hopefully you are starting to get a grip on the general format of the log entries
    emitted for a message, so the next example will show only log fragments.
  prefs: []
  type: TYPE_NORMAL
- en: Connection problems upon SMTP delivery
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The following example shows what happens when multiple hosts are set up in
    DNS to receive messages for a domain but some of the hosts are temporarily unreachable
    causing Postfix to try a few of them before the delivery can be made. We will
    only look at the logs of the delivery agent:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE94]'
  prefs: []
  type: TYPE_PRE
- en: Clearly, three of the receiving mail hosts for `hotmail.com` were unreachable
    when Postfix attempted the delivery. Notice how the connection attempts are evenly
    spread out at 30-second intervals. This is not a coincidence; the default value
    of the `smtp_connect_timeout` parameter that controls how long Postfix will wait
    for a connection is indeed 30 seconds. These three 30-second timeouts also explain
    why the delivery delay logged by the last message is 92 seconds. Also do notice
    that the acceptance message that Hotmail gives us does not contain any queue ID
    but instead the message ID—the format of the text message following the 250 status
    code has not been standardized.
  prefs: []
  type: TYPE_NORMAL
- en: Getting more detailed log messages
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'In most cases, Postfix''s default logging is enough to resolve a problem but
    sometimes more details are needed. For those rare cases, you can ask Postfix''s
    daemon processes to log more detailed messages by making sure they are given at
    least one `-v` startup option. This is done by editing `master.cf`, and adding
    `-v` to the end of the line for the daemon from which you want to get more detailed
    logging. For example, to get verbose logging from the SMTP server, `smtpd`, change
    the line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE95]'
  prefs: []
  type: TYPE_PRE
- en: 'To this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE96]'
  prefs: []
  type: TYPE_PRE
- en: Depending on your configuration, the first line may look slightly different,
    but the important part is what is in the last column, the name of the daemon.
    In the case of the SMTP server, busy servers may produce insane amounts of logging
    with this setting. If such is the case, the `debug_peer_list` parameter can come
    in handy.
  prefs: []
  type: TYPE_NORMAL
- en: This parameter accepts one or more hostnames or network addresses for which
    the level of logging will be increased. This makes sense only in contexts where
    there is a network peer such as in the SMTP server and SMTP client.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you are having problems sending messages to a particular remote server,
    say `mail.example.com`, you can set the following rule:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE97]'
  prefs: []
  type: TYPE_PRE
- en: You can then watch the increased logging when Postfix connects to that particular
    host. When using `debug_peer_list`, there is no reason to touch `master.cf`.
  prefs: []
  type: TYPE_NORMAL
- en: Troubleshooting lookup tables with Postmap
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `postmap` command is not only useful for rebuilding indexed lookup tables,you
    can also use it to query lookup tables in order to check if the lookups work as
    you expect them to. This is especially useful for regular expression lookup tables
    and complex lookup table types such as MySQL, LDAP, and PostgreSQL. Before taking
    new lookup tables into use in Postfix, you should test them with `postmap` first.
    To perform lookups with `postmap`, use the `-q` option:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE98]'
  prefs: []
  type: TYPE_PRE
- en: This will query the MySQL lookup table described by the configuration in `/etc/postfix/mysql-aliases.cf`
    for the string `postmaster@example.com`, simulating a virtual alias lookup by
    Postfix.
  prefs: []
  type: TYPE_NORMAL
- en: You can also examine the exit status of the command to determine whether the
    lookup succeeded. As always, a zero exit status indicates success. The UNIX shell
    stores the exit status of the last process in the `$?` environment variable. You
    can use the echo shell command to view the contents of the `$?` variable after
    you have run `postmap:`
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE99]'
  prefs: []
  type: TYPE_PRE
- en: If a lookup does not work as you expect, you can (just as with the Postfix daemons)
    use one or more `-v` startup options to increase the verbosity of the messages.
  prefs: []
  type: TYPE_NORMAL
- en: 'Note that postmap performs *raw* queries. For example, if you want to know
    whether the IP address `1.2.3.4` is matched by the following access map line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE100]'
  prefs: []
  type: TYPE_PRE
- en: 'You cannot test it with the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE101]'
  prefs: []
  type: TYPE_PRE
- en: The `postmap` command does not know about Postfix's rules for how IP addresses
    are matched in access map context, and even if it did, it has no way of knowing
    that `1.2.3.4` is an IP address.
  prefs: []
  type: TYPE_NORMAL
- en: Getting help from the Postfix mailing list
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The mailing list for Postfix, called Postfix-users, is a very valuable resource
    when one is stuck with a Postfix problem. Links to the archives of the list as
    well as instructions for how to subscribe can found at [http://www.postfix.org/lists.html](http://www.postfix.org/lists.html).
  prefs: []
  type: TYPE_NORMAL
- en: Although the people on the list are very helpful, they do expect you to do your
    homework before requesting help. This means that you should search the list archives
    to see if your question has been asked before, and most importantly, you should
    read the documentation first.
  prefs: []
  type: TYPE_NORMAL
- en: When asking a question, do not forget to state the bigger goal you are trying
    to achieve. This is often forgotten, and the question is just too specific. Not
    only will an understanding of the bigger picture make it easier to help you, but
    it will also reveal if the solution method you have chosen is completely wrong.
    However, do not be too verbose in your description! After all, the people reading
    the Postfix-users list are humans too, and they do get bored with over-long posts.
  prefs: []
  type: TYPE_NORMAL
- en: Because they are humans, they are also not psychic. Therefore, be sure to provide
    complete configuration and any log messages that may be relevant to your question.
    Obtain your configuration by running `postconf -n`. That command will print the
    values of all parameters that your have set in your `main.cf`. Do not post the
    complete contents of your `main.cf`, or the output of `postconf` (without the
    `-n`). The content of `master.cf` is rarely needed.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The time has come to summarize what has been learned in this chapter. We began
    with a quick look at how the Postfix mail transfer agent works and then looked
    at how to install the software and prepare the basic configuration.
  prefs: []
  type: TYPE_NORMAL
- en: We then examined various methods to stop spam and other unwanted messages. We
    introduced virtual alias domains to fully enable your mail server to host many
    domains. Finally, we took a look at a few structured techniques to help you analyze
    and solve Postfix problems.
  prefs: []
  type: TYPE_NORMAL
