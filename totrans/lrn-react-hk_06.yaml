- en: Using the Reducer and Effect Hooks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'After developing our own blog application using the State Hook, we are now
    going to learn about two other very important Hooks that are provided by React:
    the **Reducer** and **Effect** Hooks. We are first going to learn when we should
    use a Reducer Hook instead of a State Hook. Then, we learn how to turn an existing
    State Hook into a Reducer Hook in order to get a grasp on the concept in practice.
    Next, we are going to learn about Effect Hooks and what they are used for. Finally,
    we are going to implement them in our blog application.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The following topics will be covered in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Learning about the differences between Reducer Hooks and State Hooks
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Implementing Reducer Hooks in our blog app
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using Effect Hooks in our blog app
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A fairly recent version of Node.js should already be installed (v11.12.0 or
    higher). The `npm` package manager for Node.js also needs to be installed.
  prefs: []
  type: TYPE_NORMAL
- en: 'The code for this chapter can be found on the GitHub repository: [https://github.com/PacktPublishing/Learn-React-Hooks/tree/master/Chapter04](https://github.com/PacktPublishing/Learn-React-Hooks/tree/master/Chapter04)[.](https://github.com/PacktPublishing/Learn-React-Hooks/tree/master/Chapter04)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Check out the following video to see the code in action:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://bit.ly/2Mm9yoC](http://bit.ly/2Mm9yoC)'
  prefs: []
  type: TYPE_NORMAL
- en: Please note that it is highly recommended that you write the code on your own.
    Do not simply run the code examples that have been provided. It is important that
    you write the code yourself in order for you to be able to learn and understand
    properly. However, if you run into any issues, you can always refer to the code
    example.
  prefs: []
  type: TYPE_NORMAL
- en: Now, let's get started with the chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Reducer Hooks versus State Hooks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous chapter, we learned about dealing with local and global states.
    We used State Hooks for both cases, which is fine for simple state changes. However,
    when our state logic becomes more complicated, we are going to need to ensure
    that we keep the state consistent. In order to do so, we should use a Reducer
    Hook instead of multiple State Hooks, because it is harder to maintain synchronicity
    between multiple State Hooks that depend on each other. As an alternative, we
    could keep all state in one State Hook, but then we have to make sure that we
    do not accidentally overwrite parts of our state.
  prefs: []
  type: TYPE_NORMAL
- en: Problems with the State Hook
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The State Hook already supports passing complex objects and arrays to it, and
    it can handle their state changes perfectly well. However, we are always going
    to have to change the state directly, which means that we need to use a lot of
    spread syntax, in order to make sure that we are not overwriting other parts of
    the state. For example, imagine that we have a state object like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, we want to change the filter:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'If we simply ran the preceding code, we would be removing the `expandPosts`
    part of our state! So, we need to do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, if we wanted to change the `fromDate` filter to a different date, we would
    need to use spread syntax twice, to avoid removing the `byAuthor` filter:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'But, what happens if we do this when the `filter` state is still a string?
    We are going to get the following result:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: What? Why are there suddenly three new keys—`0`, `1`, and `2`? This is because
    spread syntax also works on strings, which are spread in such a way that each
    letter gets a key, based on its index in the string.
  prefs: []
  type: TYPE_NORMAL
- en: As you can imagine, using spread syntax and changing the state object directly
    can become very tedious for larger state objects. Furthermore, we always need
    to make sure that we do not introduce any bugs, and we need to check for bugs
    in multiple places all across our app.
  prefs: []
  type: TYPE_NORMAL
- en: Actions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Instead of changing the state directly, we could make a function that deals
    with state changes. Such a function would only allow state changes via certain
    actions, such as a `CHANGE_FILTER` or a `TOGGLE_EXPAND` action.
  prefs: []
  type: TYPE_NORMAL
- en: Actions are simply objects that have a `type` key, telling us which action we
    are dealing with, and additional keys more closely describing the action.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `TOGGLE_EXPAND` action is quite simple. It is simply an object with the
    action `type` defined:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'The `CHANGE_FILTER` action could deal with the complex state changes that we
    had problems with earlier, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'The second, third, and fourth actions would change the `filter` state from
    a string to an object, and then set the respective key. If the object already
    exists, we would simply adjust the keys that were defined in the action. After
    each action, the state would change as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`{ expandPosts: true, filter: ''all'' }`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`{ expandPosts: true, filter: **{** fromDate: ''2019-04-29'' **}** }`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`{ expandPosts: true, filter: { fromDate: ''2019-04-29'', byAuthor: ''Daniel
    Bugl'' } }`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`{ expandPosts: true, filter: { fromDate: ''2019-04-30'', byAuthor: ''Daniel
    Bugl'' } }`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Now, take a look at the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: If we dispatched another action, as in the preceding code, then the state would
    go back to being the `all` string, as it was in the initial state.
  prefs: []
  type: TYPE_NORMAL
- en: Reducers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now, we still need to define the function that handles these state changes.
    Such a function is known as a reducer function. It takes the current `state` and
    `action` as arguments, and returns a new state.
  prefs: []
  type: TYPE_NORMAL
- en: If you are aware of the Redux library, you will already be very familiar with
    the concept of state, actions, and reducers.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, we are going to define our `reducer` function:'
  prefs: []
  type: TYPE_NORMAL
- en: 'We start with the function definition of our `reducer`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, we check for `action.type` using a `switch` statement:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, we are going to handle the `TOGGLE_EXPAND` action, where we simply toggle
    the current `expandPosts` state:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, we are going to handle the `CHANGE_FILTER` action. Here, we first need
    to check if `all` is set to `true`, and, in that case, simply set our `filter`
    to the `''all''` string:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, we have to handle the other `filter` options. First, we check if the `filter` variable
    is already an `object`. If not, we create a new one. Otherwise, we use the existing
    object:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, we define the handlers for the various filters, allowing for multiple
    filters to be set at once, by not immediately returning the new `state`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, we return the new `state`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'For the `default` case, we throw an error, because this is an unknown action:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: Throwing an error in the default case is different to what is best practice
    with Redux reducers, where we would simply return the current state in the default
    case. Because React Reducer Hooks do not store all state in one object, we are
    only going to handle certain actions for certain state objects, so we can throw
    an error for unknown actions.
  prefs: []
  type: TYPE_NORMAL
- en: Now, our `reducer` function has been defined, and we can move on to defining
    the Reducer Hook.
  prefs: []
  type: TYPE_NORMAL
- en: The Reducer Hook
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now that we have defined actions and the `reducer` function, we can create
    a Reducer Hook from the `reducer`. The signature for the `useReducer` Hook is
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'The only thing that we still need to define is the `initialState`; then we
    can define a Reducer Hook:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, we can access the state by using the `state` object that was returned
    from the Reducer Hook, and dispatch actions via the `dispatch` function, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'If we want to add additional options to the action, we simply add them to the
    action object:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: As we can see, dealing with state changes using actions and reducers is much
    easier than having to adjust the state object directly.
  prefs: []
  type: TYPE_NORMAL
- en: Implementing Reducer Hooks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: After learning about actions, reducers, and the Reducer Hook, we are going to
    implement them in our blog app. Any existing State Hook can be turned into a Reducer
    Hook, when the state object or state changes become too complex.
  prefs: []
  type: TYPE_NORMAL
- en: If there are multiple `setState` functions that are always called at the same
    time, it is a good hint that they should be grouped together in a single Reducer
    Hook.
  prefs: []
  type: TYPE_NORMAL
- en: Global state is usually a good candidate for using a Reducer Hook, rather than
    a State Hook, because global-state changes can happen anywhere in the app. Then,
    it is much easier to deal with actions, and update the state-changing logic only
    in one place. Having all the state-changing logic in one place makes it easier
    to maintain and fix bugs, without introducing new ones by forgetting to update
    the logic everywhere.
  prefs: []
  type: TYPE_NORMAL
- en: We are now going to turn some of the existing State Hooks in our blog app into
    Reducer Hooks.
  prefs: []
  type: TYPE_NORMAL
- en: Turning a State Hook into a Reducer Hook
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In our blog app, we have two global State Hooks, which we are going to replace
    with Reducer Hooks:'
  prefs: []
  type: TYPE_NORMAL
- en: '`user` state'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`posts` state'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We start by replacing the `user` State Hook.
  prefs: []
  type: TYPE_NORMAL
- en: Replacing the user State Hook
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We are going to start with the `user` State Hook, because it is simpler than
    the `posts` State Hook. Later on, the `user` state will contain complex state
    changes, so it makes sense to use a Reducer Hook here.
  prefs: []
  type: TYPE_NORMAL
- en: First, we are going to define our actions, then we are going to define the reducer
    function. Finally, we are going to replace the State Hook with a Reducer Hook.
  prefs: []
  type: TYPE_NORMAL
- en: Defining actions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We start by defining our actions, as these will be important when defining the
    reducer function.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s define the actions now:'
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we are going to need an action to allow a user to log in, by providing
    a `username` value and a `password` value:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, we are also going to need a `REGISTER` action, which, in our case, is
    going to be similar to the `LOGIN` action, because we did not implement any registration
    logic yet:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, we are going to need a `LOGOUT` action, which is simply going to log
    out the currently logged-in user:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: Now, we have defined all the required user-related actions and we can move on
    to defining the reducer function.
  prefs: []
  type: TYPE_NORMAL
- en: Defining the reducer
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Next, we define a reducer function for the `user` state. For now, we are going
    to place our reducers in the `src/App.js` file.
  prefs: []
  type: TYPE_NORMAL
- en: Later on, it might make sense to create a separate `src/reducers.js` file, or
    even a separate `src/reducers/` directory, with separate files for each reducer
    function.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s start defining the `userReducer` function:'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the `src/App.js` file, before the `App` function definition, create a `userReducer`
    function for the `user` state:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'Again, we use a `switch` statement for the `action` type:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, we handle the `LOGIN` and `REGISTER` actions, where we set the `user`
    state to the given `username` value. In our case, we simply return the `username` value
    from the `action` object for now:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, we handle the `LOGOUT` action, where we set the state to an empty string:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, we throw an error when we encounter an unhandled action:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: Now, the `userReducer` function is defined, and we can move on to defining the
    Reducer Hook.
  prefs: []
  type: TYPE_NORMAL
- en: Defining the Reducer Hook
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: After defining the actions and the reducer function, we are going to define
    the Reducer Hook, and pass its state and the dispatch function to the components
    that need it.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s start implementing the Reducer Hook:'
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we have to import the `useReducer` Hook, by adjusting the following
    `import` statement in `src/App.js`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'Edit `src/App.js`, and remove the following State Hook:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'Replace the preceding State Hook with a Reducer Hook—the initial state is an
    empty string, as we had it before:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, pass the `user` state and the `dispatchUser` function to the `UserBar`
    component, as a `dispatch` prop:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: We do not need to modify the `CreatePost` component, as we are only passing
    the `user` state to it, and that part did not change.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Next, we edit the `UserBar` component in `src/user/UserBar.js`, and replace
    the `setUser` prop with the `dispatch` function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, we can edit the `Login` component in `src/user/Login.js`, and replace
    the `setUser` function with the `dispatch` function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, we replace the call to `setUser` with a call to the `dispatch` function,
    dispatching a `LOGIN` action:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: We could also make functions that return actions—so-called action creators.
    Instead of manually creating the action object every time, we could simply call
    `loginAction('username')` instead, which returns the corresponding `LOGIN` action
    object.
  prefs: []
  type: TYPE_NORMAL
- en: 'We repeat the same process for the `Register` component in `src/user/Register.js`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, we also repeat the same process for the `Logout` component in `src/user/Logout.js`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: Now, our app should work the same way as before, but it uses the Reducer Hook
    instead of a simple State Hook!
  prefs: []
  type: TYPE_NORMAL
- en: Replacing the posts State Hook
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: It also makes sense to use a Reducer Hook for the `posts` state, because, later
    on, we are going to have features that can be used to delete and edit posts, so
    it makes a lot of sense to keep these complex state changes contained. Let's now
    get started replacing the posts State Hook with a Reducer Hook.
  prefs: []
  type: TYPE_NORMAL
- en: Defining actions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Again, we start by defining actions. At the moment, we are only going to consider
    a `CREATE_POST` action:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: That is the only action we are going to need for posts, at the moment.
  prefs: []
  type: TYPE_NORMAL
- en: Defining the reducer
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Next, we are going to define the reducer function in a similar way that we
    did for the `user` state:'
  prefs: []
  type: TYPE_NORMAL
- en: 'We start by editing `src/App.js`, and defining the reducer function there.
    The following code defines the `postsReducer` function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: 'In this function, we are going to handle the `CREATE_POST` action. We first
    create a `newPost` object, and then we insert it at the beginning of the current
    `posts` state by using spread syntax, in a similar way to how we did it in the
    `src/post/CreatePost.js` component earlier:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: 'For now, this will be the only action that we handle in this reducer, so we
    can now define the `default` statement:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: Now, the `postsReducer` function is defined, and we can move on to creating
    the Reducer Hook.
  prefs: []
  type: TYPE_NORMAL
- en: Defining the Reducer Hook
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Finally, we are going to define and use the Reducer Hook for the `posts` state:'
  prefs: []
  type: TYPE_NORMAL
- en: 'We start by removing the following State Hook in `src/App.js`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: 'We replace it with the following Reducer Hook:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, we pass the `dispatchPosts` function to the `CreatePost` component, as
    a `dispatch` prop:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, we edit the `CreatePost` component in `src/post/CreatePost.js`, and replace
    the `setPosts` function with the `dispatch` function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, we use the `dispatch` function in the `handleCreate` function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: Now, the `posts` state also uses a Reducer Hook instead of a State Hook, and
    it works in the same way as before! However, if we want to add more logic for
    managing posts, such as searching, filtering, deleting, and editing, later on,
    it will be much easier to do so.
  prefs: []
  type: TYPE_NORMAL
- en: Example code
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The example code for using Reducer Hooks in our blog app can be found in the
    `Chapter04/chapter4_1` folder.
  prefs: []
  type: TYPE_NORMAL
- en: Just run `npm install` in order to install all dependencies and `npm start` to
    start the application; then visit `http://localhost:3000` in your browser (if
    it did not open automatically).
  prefs: []
  type: TYPE_NORMAL
- en: Merging Reducer Hooks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Currently, we have two different dispatch functions: one for the `user` state,
    and one for the `posts` state. In our case, it makes sense to combine the two
    reducers into one, which then calls further reducers, in order to deal with the
    sub-state.'
  prefs: []
  type: TYPE_NORMAL
- en: This pattern is similar to the way in which reducers work in Redux, where we
    only have one object containing the whole state tree of the application, which
    in the case of the global state, makes sense. However, for complex local state
    changes, it might make more sense to keep the reducers separate.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s start merging our reducer functions into one reducer function. While
    we are at it, let''s refactor all the reducers into a `src/reducers.js` file,
    in order to keep the `src/App.js` file more readable:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a new `src/reducers.js` file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Cut the following code from the `src/App.js` file, and paste it into the `src/reducers.js`
    file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: 'Edit `src/reducers.js`, and define a new reducer function below the existing
    reducer functions, called `appReducer`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: 'In this `appReducer` function, we are going to call the other two reducer functions,
    and return the full state tree:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: 'Edit `src/App.js`, and import the `appReducer` there:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, we remove the following two Reducer Hook definitions:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: 'We replace the preceding Reducer Hook definitions with a single Reducer Hook
    definition for the `appReducer`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, we extract the `user` and `posts` values from our `state` object, using
    destructuring:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, we still need to replace the `dispatchUser` and `dispatchPosts` functions
    that we passed to the other components with the `dispatch` function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: As we can see, now there is only one `dispatch` function, and a single state
    object.
  prefs: []
  type: TYPE_NORMAL
- en: Ignoring unhandled actions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'However, if we try logging in now, we are going to see an error from the `postsReducer`.
    This is because we are still throwing an error on unhandled actions. In order
    to avoid this, we have to instead ignore unhandled actions, and simply return
    the current state:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Edit the `userReducer` and `postsReducer` functions in `src/reducers.js`, and
    remove the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: 'Replace the preceding code with a `return` statement that returns the current
    `state`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: As we can see, now our app still works in exactly the same way as before, but
    we are using a single reducer for our whole app state!
  prefs: []
  type: TYPE_NORMAL
- en: Example code
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The example code for using a single Reducer Hook in our blog app can be found
    in the `Chapter04/chapter4_2` folder.
  prefs: []
  type: TYPE_NORMAL
- en: Just run `npm install` in order to install all dependencies, and `npm start` to
    start the application, and then visit `http://localhost:3000` in your browser
    (if it did not open automatically).
  prefs: []
  type: TYPE_NORMAL
- en: Using Effect Hooks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The last essential Hook that we are going to be using frequently is the Effect
    Hook. Using the Effect Hook, we can perform side effects from our components,
    such as fetching data when the component mounts or updates.
  prefs: []
  type: TYPE_NORMAL
- en: In the case of our blog, we are going to implement a feature that updates the
    title of our web page when we log in, so that it contains the username of the
    currently logged-in user.
  prefs: []
  type: TYPE_NORMAL
- en: Remember componentDidMount and componentDidUpdate?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'If you have worked with React before, you have probably used the `componentDidMount`
    and `componentDidUpdate` life cycle methods. For example, we can set the document
    `title` to a given prop as follows, using a React class component. In the following
    code section, the life cycle method is highlighted in bold:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: 'This works fine. However, when the `title` prop updates, the change does not
    get reflected in the title of our web page. To solve this problem, we need to
    define the `componentDidUpdate` life cycle method (new code in bold), as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: 'You might have noticed that we are writing almost the same code twice; therefore,
    we could create a new method to deal with updates to `title`, and then call it
    from both life cycle methods. In the following code section, the updated code
    is highlighted in bold:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs: []
  type: TYPE_PRE
- en: However, we still need to call `this.updateTitle()` twice. When we update the
    code later on, and, for example, pass an argument to `this.updateTitle()`, we
    always need to remember to pass it in both calls to the method. If we forget to
    update one of the life cycle methods, we might introduce bugs. Furthermore, we
    need to add an `if` condition to `componentDidUpdate`, in order to avoid calling
    `this.updateTitle()` when the `title` prop did not change.
  prefs: []
  type: TYPE_NORMAL
- en: Using an Effect Hook
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the world of Hooks, the `componentDidMount` and `componentDidUpdate` life
    cycle methods are combined in the `useEffect` Hook, which—when not specifying
    a dependency array—triggers whenever any props in the component change.
  prefs: []
  type: TYPE_NORMAL
- en: 'So, instead of using a class component, we can now define a function component
    with an Effect Hook, which does the same thing as before. The function passed
    to the Effect Hook is called "effect function":'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs: []
  type: TYPE_PRE
- en: And that's all we need to do! The Hook that we have defined will call our effect
    function every time any props change.
  prefs: []
  type: TYPE_NORMAL
- en: Trigger effect only when certain props change
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'If we want to make sure that our effect function only gets called when the
    `title` prop changes, for example, for performance reasons, we can specify which
    values should trigger the changes, as a second argument to the `useEffect` Hook:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs: []
  type: TYPE_PRE
- en: 'And this is not just restricted to props, we can use any value here, even values
    from other Hooks, such as a State Hook or a Reducer Hook:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs: []
  type: TYPE_PRE
- en: As we can see, using an Effect Hook is much more straightforward than using
    life cycle methods when dealing with changing values.
  prefs: []
  type: TYPE_NORMAL
- en: Trigger effect only on mount
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'If we want to replicate the behavior of only adding a `componentDidMount` life
    cycle method, without triggering when the props change, we can do this by passing
    an empty array as the second argument to the `useEffect` Hook:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs: []
  type: TYPE_PRE
- en: Passing an empty array means that our effect function will only trigger once
    when the component mounts, and it will not trigger when props change. However,
    instead of thinking about the mounting of components, with Hooks, we should think
    about the dependencies of effects. In this case, the effect does not have any
    dependencies, which means it will only trigger once. If an effect has dependencies
    specified, it will trigger again when any of the dependencies change.
  prefs: []
  type: TYPE_NORMAL
- en: Cleaning up effects
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Sometimes effects need to be cleaned up when the component unmounts. To do
    so, we can return a function from the effect function of the Effect Hook. This
    returned function works similarly to the `componentWillUnmount` life cycle method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE63]'
  prefs: []
  type: TYPE_PRE
- en: The code marked in bold above is called the cleanup function. The cleanup function
    will be called when the component unmounts and before running the effect again.
    This avoids bugs when, for example, the `updateTime` prop changes. In that case,
    the previous effect will be cleaned up and a new interval with the updated `updateTime` value
    will be defined.
  prefs: []
  type: TYPE_NORMAL
- en: Implementing an Effect Hook in our blog app
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that we have learned how the Effect Hook works, we are going to use it in
    our blog app, to implement the title changing when we log in/log out (when the
    `user` state changes).
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s get started implementing an Effect Hook in our blog app:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Edit `src/App.js`, and import the `useEffect` Hook:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE64]'
  prefs: []
  type: TYPE_PRE
- en: 'After defining our `useReducer` Hook and the state destructuring, define a
    `useEffect` Hook that adjusts the `document.title` variable, based on the `username` value:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE65]'
  prefs: []
  type: TYPE_PRE
- en: If the user is logged in, we set the `document.title` to `<username> - React
    Hooks Blog`. We use template strings for this, which allow us to include variables,
    or JavaScript expressions, in a string via the `${ }` syntax. Template strings
    are defined using [PRE66]
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: if (user) {
  prefs: []
  type: TYPE_NORMAL
- en: document.title = `${user} - React Hooks Blog`
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE67]'
  prefs: []
  type: TYPE_PRE
- en: '} else {'
  prefs: []
  type: TYPE_NORMAL
- en: document.title = 'React Hooks Blog'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE68]'
  prefs: []
  type: TYPE_PRE
- en: '}, [user])'
  prefs: []
  type: TYPE_NORMAL
- en: '```'
  prefs: []
  type: TYPE_NORMAL
- en: 'If we start our app now, we can see that the `document.title` gets set to `React
    Hooks Blog`, because the Effect Hook triggers when the `App` component mounts,
    and the `user` value is not defined yet:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/7e34bb73-64d7-4c65-8d7e-6d6f6628f317.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The effect of our Effect Hook: changing the web page title'
  prefs: []
  type: TYPE_NORMAL
- en: 'After logging in with `Test User`, we can see that the `document.title` changes
    to `Test User - React Hooks Blog`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/7cb775dc-c5c3-4469-a41f-acb25f83e14f.png)'
  prefs: []
  type: TYPE_IMG
- en: The effect of our Effect Hook re-triggering, after the user value changes
  prefs: []
  type: TYPE_NORMAL
- en: As we can see, our Effect Hook re-triggers successfully after the `user` value
    changes!
  prefs: []
  type: TYPE_NORMAL
- en: Example code
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The example code for implementing Effect Hooks in our blog app can be found
    in the `Chapter04/chapter4_3` folder.
  prefs: []
  type: TYPE_NORMAL
- en: Just run `npm install` in order to install all dependencies, and `npm start` to
    start the application, and then visit `http://localhost:3000` in your browser
    (if it did not open automatically).
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we first learned about actions, reducers, and Reducer Hooks.
    We also learned when we should use Reducer Hooks instead of State Hooks. Then,
    we replaced our existing global State Hooks for the `user` and `posts` states,
    with two Reducer Hooks. Next, we merged the two Reducer Hooks into a single app
    Reducer Hook. Finally, we learned about Effect Hooks, and how they can be used
    instead of `componentDidMount` and `componentDidUpdate`.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we are going to learn about React context, and how to use
    it with Hooks. Then, we are going to add Context Hooks to our app, in order to
    avoid having to pass down props over multiple layers of components.
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In order to recap what we have learned in this chapter, try to answer the following
    questions:'
  prefs: []
  type: TYPE_NORMAL
- en: What are the common problems with State Hooks?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What are actions?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What are reducers?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When should we use a Reducer Hook instead of a State Hook?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Which steps are needed in order to turn a State Hook into a Reducer Hook?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How can we create actions more easily?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When should we merge Reducer Hooks?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What do we need to watch out for when merging Reducer Hooks?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What is the equivalent of an Effect Hook in class components?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What are the advantages of using an Effect Hook, versus class components?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'If you are interested in more information about the concepts that we have explored
    in this chapter, take a look at the following reading material:'
  prefs: []
  type: TYPE_NORMAL
- en: Official docs regarding the Reducer Hook: [https://reactjs.org/docs/hooks-reference.html#usereducer](https://reactjs.org/docs/hooks-reference.html#usereducer)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Official docs and tips for using Effect Hooks: [https://reactjs.org/docs/hooks-effect.html](https://reactjs.org/docs/hooks-effect.html)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Learning Redux* published by *Pa**ckt* for more in-depth information about
    actions, reducers, and managing the app state:[https://www.packtpub.com/web-development/learning-redux](https://www.packtpub.com/web-development/learning-redux)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
