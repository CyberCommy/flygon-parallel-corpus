- en: Chapter 7.  Building a Real–Time Chat Application with Socket.io
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Some time ago, when Node.js applications emerged, we had a boom of new possibilities,
    using the Node.js resources and things such as  Socket.io to build real-time applications
    (as the site says, Socket.io enables event-based bi-directional real-time communication.
    It works on every platform, device, or browser, focusing equally on reliability
    and speed).
  prefs: []
  type: TYPE_NORMAL
- en: Socket.io allows us to emit events between the client and server, and other
    possibilities.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Installing Socket.io
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The fundamentals of Socket.io events
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating an Express chat application
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Dealing with jQuery on the client side
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to use Gulp.js and the LiveReload plugin on development
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What we are building
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will build a real-time chat application with Node.js, Socket.io,
    and jQuery:'
  prefs: []
  type: TYPE_NORMAL
- en: '![What we are building](img/image_07_001.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Screenshot of the home screen
  prefs: []
  type: TYPE_NORMAL
- en: Starting with a package.json file
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter we have adopted a different way to start our application; as
    we have seen in a previous chapter, let's build a Node.js application step by
    step without the command line.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s create the package.json file with application dependencies:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a folder called chapter-07.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a file called package.json within chapter-07 and add the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Note that we are using the same recommended modules dependencies from the Express
    framework. Also, we add the task runner known as Gulp.js. Later in this chapter,
    we will explain more about **Gulp**.
  prefs: []
  type: TYPE_NORMAL
- en: 'Open terminal/shell and type the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Create a folder called public.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a folder called routes.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a folder called views.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'At this stage your folder must have the following structure:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Adding configuration files
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Dot files are very common in all web applications; these files are responsible
    for various tasks, including configuration of version control and text editor
    configuration, among many other tasks.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s add our first configuration file for **Bower package manager** (for
    more information: [http://bower.io/](http://bower.io/)):'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a file called .bowerrc and add the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: This file tells Bower to install all the application components at the public/components;
    otherwise, they will be installed at the root application folder.
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a file called .editorconfig and add the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: This file standardizes the type of indentation of code for the entire application.
    There are many editors that support this file and apply their definitions for
    every application.
  prefs: []
  type: TYPE_NORMAL
- en: The next configuration file is gitignore. As its own name indicates, it serves
    to tell the version control which application files should be ignored.
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a file called .gitignore and add the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Adding task manager files
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Task managers serves specific tasks in our application. In [Chapter 9](ch09.html
    "Chapter 9.  Building a Frontend Process with Node.js and NPM"), *Building a Frontend
    Process with Node.js and NPM,* we will explore in depth their utilization in Node.js
    applications, but for now we focus on the file itself:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a file called bower.json and add the following lines of code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: it's pretty simple code, but this file has the same importance as package.json
    for the server side. Bower will be the frontend task manager. Later in the chapter
    we will see how to use it. The next one is the Gulp file.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'You can find more information about Gulp file at the official website: [http://gulpjs.com/](http://gulpjs.com/)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a file called gulpfile.js and add the following code (the code is fully
    commented and it is self-explanatory):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: The last file is the README.md file. Usually, this file is used by GitHub, Bitbucket,
    and NPM to store important information regarding the project, such as the installation
    process, dependencies, and code examples, among other things.
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a file called README.md and add the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Pretty simple but very useful file. This Markdown file will be rendered as a
    HTML file with a h1 tag with this string as a title.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'You can read more about Markdown files at this link: [https://daringfireball.net/projects/markdown/](https://daringfireball.net/projects/markdown/)'
  prefs: []
  type: TYPE_NORMAL
- en: Creating the app.js file
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As we have already seen in previous chapters, the basis of all Node.js applications
    is the file where we set up all the dependencies and instantiate the application.
    In this case, we use the app.js file, but you can use any name.
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a file called app.js and add the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: The previous code is fully commented. All the information you need to understand
    what is happening with the preceding code is in the comment lines; here, we have
    almost the same configuration as in the previous examples.
  prefs: []
  type: TYPE_NORMAL
- en: Creating the route file
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now let's create the route file.
  prefs: []
  type: TYPE_NORMAL
- en: 'Inside the routes folder, create a new file called index.js and add the following
    code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: As we are building a simple chat application, we will have just one route.
  prefs: []
  type: TYPE_NORMAL
- en: Creating the application views
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Our next step is to build the application views files, so we will create new
    files within the views directory using the .ejs extension.
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a new file called error.ejs and add the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a file called footer.ejs and add the following lines of code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Note that we already included the Socket.io client file from a **Content Delivery
    Network** (**CDN**). Don't worry about the main.js file at the end of footer.ejs;
    we will create this file in the next lines.
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a file called header.ejs and add the following lines of code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a file called index.ejs and add the following lines of code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'Note that we are using the HTML markup from one of the examples about **Bootstrap
    4**. You can see more examples here: [http://v4-alpha.getbootstrap.com/examples/](http://v4-alpha.getbootstrap.com/examples/).'
  prefs: []
  type: TYPE_NORMAL
- en: Installing frontend components with Bower
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'As we can see in the previous examples, we use a CDN to serve the CSS file
    and some JavaScript files for the example application. In this step, we will introduce
    a widely-used tool for dependencies management, known as **Bower,** for dealing
    with frontend frameworks such as the Twitter Bootstrap:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open your terminal/shell and type the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: The previous command installs Bower globally on your machine.
  prefs: []
  type: TYPE_NORMAL
- en: 'Inside the root project folder, type the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'The previous command will install Bootstrap inside the public/components folder,
    as we can see in the following image:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Installing frontend components with Bower](img/image_07_002.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Screenshot of the components folder
  prefs: []
  type: TYPE_NORMAL
- en: 'Note that the previous command adds the jQuery too, because Bootstrap depends
    on the jQuery library. Let''s add the links to header.ejs and footer.ejs:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open views/header.ejs and add the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'Open footer.ejs and add the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: Adding some CSS
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Now let''s insert a few lines of CSS to stylize our example page:'
  prefs: []
  type: TYPE_NORMAL
- en: Inside the public/css create a new file called style.css.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following code to style.css:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: We made some alterations in the stylesheet to get the result we wanted for the
    book example.
  prefs: []
  type: TYPE_NORMAL
- en: At this stage, we have the home screen.
  prefs: []
  type: TYPE_NORMAL
- en: 'Open your terminal/shell and type the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: Go to http://localhost:3000/, and you will see the following result:![Adding
    some CSS](img/image_07_003.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Screenshot of home screen
  prefs: []
  type: TYPE_NORMAL
- en: Adding live reload plugin
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'As mentioned earlier, we will use the plugin livereload. This plugin is responsible
    for updating the browser every time we change an application file. Let''s see
    now how to implement it in our example:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Remember that we created the gulpfile.js file at the beginning of the chapter,
    so we already have livereload task configured according to the following lines:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'You can read more about the gulp-livereload plugin here: [https://github.com/vohof/gulp-livereload](https://github.com/vohof/gulp-livereload).'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open views/header.ejs and add the following code right after the stylesheet
    link:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: These lines of code tell the application to inject the livereload plugin when
    we are using the development environment.
  prefs: []
  type: TYPE_NORMAL
- en: Now every time we change a file, we can see the following message on the terminal:![Adding
    live reload plugin](img/image_07_004.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Screenshot from Terminal with a livereload message
  prefs: []
  type: TYPE_NORMAL
- en: 'But remember that we configured the livereload task to map only .js and .ejs
    files, as we can see in the following highlighted lines of code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: To map other file formats, you must add the file extension to that line.
  prefs: []
  type: TYPE_NORMAL
- en: Checking the application folder structure
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'With everything in place, we now need to check the directories structure of
    the application. This time, your application should look like the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Checking the application folder structure](img/image_07_005.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Screenshot of the application's structure
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Remember that you can download the book's sample code on the Packt Publishing
    website ([www.packtpub.com](http://www.packtpub.com)) and also on the official
    book's repository on GitHub.
  prefs: []
  type: TYPE_NORMAL
- en: Creating the Socket.io events
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now is the time to create the socket.io event issues in our server. The socket.io
    allows you to send and receive events with any type of data:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open app.js from the root folder and add the following lines of code at the
    end of the file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: Adding socket.io behavior on the client side
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'As mentioned earlier, socket.io works with events in the previous code where
    we configured our server to send and receive events. Now we set our client to
    receive and send events. In this step, we will use the jQuery library to assist
    in this task, since we are already using the library in our project:'
  prefs: []
  type: TYPE_NORMAL
- en: Inside the public/js folder, create a new file called main.js.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Place the following code in the main.js file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: Let's run the application to check what happens on the terminal.
  prefs: []
  type: TYPE_NORMAL
- en: 'Open terminal/shell on the root project and type the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'The output on your terminal will be the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Adding socket.io behavior on the client side](img/image_07_006.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Screenshot of the output terminal with application running
  prefs: []
  type: TYPE_NORMAL
- en: Here, we can see that we had only one connection. But if we open http://localhost:3000/
    in a new browser window, or even in another browser, we can see two connections,
    and so on.
  prefs: []
  type: TYPE_NORMAL
- en: Starting the chat application
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now we use our application in two windows simultaneously:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open your terminal/shell and type the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: Go to http://localhost:3000/, insert the name **John Doe**, and you will see
    the following result:![Starting the chat application](img/image_07_007.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Screenshot of the John Doe user
  prefs: []
  type: TYPE_NORMAL
- en: We can see that's just one user, so now let's open another connection with the
    same socket. Use a new window or another browser.
  prefs: []
  type: TYPE_NORMAL
- en: Go to http://localhost:3000/ and insert the name, **Max Smith**. You should
    see the following result on the right-hand panel:![Starting the chat application](img/image_07_008.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Screenshot of the users panel
  prefs: []
  type: TYPE_NORMAL
- en: Now we have two users. Let's start talking...
  prefs: []
  type: TYPE_NORMAL
- en: 'On the **John Doe** screen, type this message: **Any Body there?**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Check the **Max Smith** screen and you will see the message from **John** appear,
    as shown in the following image:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Starting the chat application](img/image_07_009.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Screenshot from Max Smith screen chat
  prefs: []
  type: TYPE_NORMAL
- en: Go back to the John Doe screen and check the message and answer it, as we did
    in the following image:![Starting the chat application](img/image_07_010.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Screenshot of the John Doe screen chat
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we discussed some very important concepts of Node.js real-time
    applications with Node.js and Socket.io.
  prefs: []
  type: TYPE_NORMAL
- en: We have seen how to exchange messages between users in real time using a few
    lines of jQuery. Also, we addressed some very important topics in the development
    of modern web applications as frontend dependencies with Bower and the Gulp task
    manager using the livereload plugin.
  prefs: []
  type: TYPE_NORMAL
- en: Remember that all these tools are available in the Node.js ecosystem through
    your Node Package Manager (NPM).
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will see how to use a Content Management System (CMS)
    built entirely with Node.js to build a blog application.
  prefs: []
  type: TYPE_NORMAL
