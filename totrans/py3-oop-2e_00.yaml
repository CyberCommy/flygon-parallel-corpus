- en: Preface
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This book introduces the terminology of the object-oriented paradigm. It focuses
    on object-oriented design with step-by-step examples. It guides us from simple
    inheritance, one of the most useful tools in the object-oriented programmer's
    toolbox through exception handling to design patterns, an object-oriented way
    of looking at object-oriented concepts.
  prefs: []
  type: TYPE_NORMAL
- en: Along the way, we'll learn to integrate the object-oriented and not-so-object-oriented
    aspects of the Python programming language. We will learn the complexities of
    string and file manipulation, emphasizing (as Python 3 does) the difference between
    binary and textual data.
  prefs: []
  type: TYPE_NORMAL
- en: We'll then cover the joys of unit testing, using not one, but two unit testing
    frameworks. Finally, we'll explore, through Python's various concurrency paradigms,
    how to make objects work well together at the same time.
  prefs: []
  type: TYPE_NORMAL
- en: What this book covers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This book is loosely divided into four major parts. In the first four chapters,
    we will dive into the formal principles of object-oriented programming and how
    Python leverages them. In chapters 5 through 8, we will cover some of Python's
    idiosyncratic applications of these principles by learning how they are applied
    to a variety of Python's built-in functions. Chapters 9 through 11 cover design
    patterns, and the final two chapters discuss two bonus topics related to Python
    programming that may be of interest.
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 1](ch01.html "Chapter 1. Object-oriented Design"), *Object-oriented
    Design*, covers important object-oriented concepts. It deals mainly with terminology
    such as abstraction, classes, encapsulation, and inheritance. We also briefly
    look at UML to model our classes and objects.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 2](ch02.html "Chapter 2. Objects in Python"), *Objects in Python*,
    discusses classes and objects and how they are used in Python. We will learn about
    attributes and behaviors on Python objects, and also the organization of classes
    into packages and modules. Lastly, we will see how to protect our data.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 3](ch03.html "Chapter 3. When Objects Are Alike"), *When Objects Are
    Alike*, gives us a more in-depth look into inheritance. It covers multiple inheritance
    and shows us how to extend built-ins. This chapter also covers how polymorphism
    and duck typing work in Python.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 4](ch04.html "Chapter 4. Expecting the Unexpected"), *Expecting the
    Unexpected*, looks into exceptions and exception handling. We will learn how to
    create our own exceptions and how to use exceptions for program flow control.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 5](ch05.html "Chapter 5. When to Use Object-oriented Programming"),
    *When to Use Object-oriented Programming*, deals with creating and using objects.
    We will see how to wrap data using properties and restrict data access. This chapter
    also discusses the DRY principle and how not to repeat code.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 6](ch06.html "Chapter 6. Python Data Structures"), *Python Data Structures*,
    covers the object-oriented features of Python''s built-in classes. We''ll cover
    tuples, dictionaries, lists, and sets, as well as a few more advanced collections.
    We''ll also see how to extend these standard objects.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 7](ch07.html "Chapter 7. Python Object-oriented Shortcuts"), *Python
    Object-oriented Shortcuts*, as the name suggests, deals with time-savers in Python.
    We will look at many useful built-in functions such as method overloading using
    default arguments. We''ll also see that functions themselves are objects and how
    this is useful.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 8](ch08.html "Chapter 8. Strings and Serialization"), *Strings and
    Serialization*, looks at strings, files, and formatting. We''ll discuss the difference
    between strings, bytes, and bytearrays, as well as various ways to serialize textual,
    object, and binary data to several canonical representations.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 9](ch09.html "Chapter 9. The Iterator Pattern"), *The Iterator Pattern*,
    introduces us to the concept of design patterns and covers Python''s iconic implementation
    of the iterator pattern. We''ll learn about list, set, and dictionary comprehensions.
    We''ll also demystify generators and coroutines.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 10](ch10.html "Chapter 10. Python Design Patterns I"), *Python Design
    Patterns I*, covers several design patterns, including the decorator, observer,
    strategy, state, singleton, and template patterns. Each pattern is discussed with
    suitable examples and programs implemented in Python.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 11](ch11.html "Chapter 11. Python Design Patterns II"), *Python Design
    Patterns II*, wraps up our discussion of design patterns with coverage of the
    adapter, facade, flyweight, command, abstract, and composite patterns. More examples
    of how idiomatic Python code differs from canonical implementations are provided.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 12](ch12.html "Chapter 12. Testing Object-oriented Programs"), *Testing
    Object-oriented Programs*, opens with why testing is so important in Python applications.
    It emphasizes test-driven development and introduces two different testing suites:
    unittest and py.test. Finally, it discusses mocking test objects and code coverage.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 13](ch13.html "Chapter 13. Concurrency"), *Concurrency*, is a whirlwind
    tour of Python''s support (and lack thereof) of concurrency patterns. It discusses
    threads, multiprocessing, futures, and the new AsyncIO library.'
  prefs: []
  type: TYPE_NORMAL
- en: Each chapter includes relevant examples and a case study that collects the chapter's
    contents into a working (if not complete) program.
  prefs: []
  type: TYPE_NORMAL
- en: What you need for this book
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: All the examples in this book rely on the Python 3 interpreter. Make sure you
    are not using Python 2.7 or earlier. At the time of writing, Python 3.4 was the
    latest release of Python. Most examples will work on earlier revisions of Python
    3, but you are encouraged to use the latest version to minimize frustration.
  prefs: []
  type: TYPE_NORMAL
- en: All of the examples should run on any operating system supported by Python.
    If this is not the case, please report it as a bug.
  prefs: []
  type: TYPE_NORMAL
- en: Some of the examples need a working Internet connection. You'll probably want
    to have one of these for extracurricular research and debugging anyway!
  prefs: []
  type: TYPE_NORMAL
- en: 'In addition, some of the examples in this book rely on third-party libraries
    that do not ship with Python. These are introduced within the book at the time
    they are used, so you do not need to install them in advance. However, for completeness,
    here is a list:'
  prefs: []
  type: TYPE_NORMAL
- en: pip
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: requests
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: pillow
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: bitarray
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Who this book is for
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This book specifically targets people who are new to object-oriented programming.
    It assumes you have basic Python skills. You'll learn object-oriented principles
    in depth. It is particularly useful for system administrator types who have used
    Python as a "glue" language and would like to improve their programming skills.
  prefs: []
  type: TYPE_NORMAL
- en: If you are familiar with object-oriented programming in other languages, then
    this book will help you understand the idiomatic ways to apply your knowledge
    in the Python ecosystem.
  prefs: []
  type: TYPE_NORMAL
- en: Conventions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This book uses a variety of text styles to distinguish between different kinds
    of information. Here are some examples of these styles, and an explanation of
    their meaning.
  prefs: []
  type: TYPE_NORMAL
- en: 'Code words in text, database table names, folder names, filenames, file extensions,
    pathnames, dummy URLs, user input, and Twitter handles are shown as follows: "We
    look up the class in the dictionary and store it in a variable named `PropertyClass`."'
  prefs: []
  type: TYPE_NORMAL
- en: 'A block of code is set as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'When we wish to draw your attention to a particular part of a code block, the
    relevant lines or items are set in bold:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Any command-line input or output is written as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '**New terms** and **important words** are shown in bold. Words that you see
    on the screen, in menus or dialog boxes for example, appear in the text like this:
    "It will fail with a **not enough arguments** error similar to the one we received
    earlier when we forgot the `self` argument."'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Warnings or important notes appear in a box like this.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Tips and tricks appear like this.
  prefs: []
  type: TYPE_NORMAL
