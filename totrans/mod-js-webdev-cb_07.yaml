- en: Enhancing Your Application
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we''ll move forward and consider several tools that make for
    a better application. The recipes we''ll be seeing include the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Adding SASS for separate styling
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating StyledComponents for inline styling
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Making your application responsive to screen sizes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Making your application adaptive for enhanced usability
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Making a global application with internationalization and localization
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting up for accessibility
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous chapter, we started developing applications with `React`, and
    saw the basics of how to use it, how to create an application, and how to develop
    components.
  prefs: []
  type: TYPE_NORMAL
- en: We'll also be taking advantage of `Storybook`, which we used in the previous
    chapter, so we can demonstrate each tool separately, and so we don't have to waste
    time focusing on anything else.
  prefs: []
  type: TYPE_NORMAL
- en: Adding SASS for separate styling
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Just about the very first thing we should add is some way to handle styling
    for our application. If you wish, you need learn nothing new, nor install anything
    extra, for you could go with plain old-fashioned CSS—as we already did! We used
    some CSS in the previous chapter (look for the `src/components/general.css` file),
    but we don''t even need to go there. When we created our project then, an `App.js`
    file was created with the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: By including the `import "./App.css"` line, you are getting the styles that
    were defined in the `App.css` file, and you can then use them everywhere, as shown
    in the code.
  prefs: []
  type: TYPE_NORMAL
- en: This usage of `import` to deal with styling is not a JS thing, but rather is
    due to `Webpack`, which is used by `create-react-app` to generate the output code
    for your application.
  prefs: []
  type: TYPE_NORMAL
- en: So, if you wanted to get by with just CSS, you need to do but little, and you
    are set! However, there are many tools that can help you with styling, adding
    features that really come in handy, and in this section we will consider how to
    use `SASS`, one of the best-known CSS extension languages.
  prefs: []
  type: TYPE_NORMAL
- en: If you want to fully learn `SASS`, I'd recommend browsing to [http://sass-lang.com/](http://sass-lang.com/)
    and particularly check out the LEARNING SASS and DOCUMENTATION areas, at  [http://sass-lang.com/guide](http://sass-lang.com/guide)
    and [http://sass-lang.com/documentation/file.SASS_REFERENCE.html](http://sass-lang.com/documentation/file.SASS_REFERENCE.html),
    respectively.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '`SASS` is a preprocessor that works with `.scss` (*Sassy CSS*) files and produces
    standard CSS files that browsers can work with. The preprocessing step is the
    key to using features that aren''t (at least yet) available in CSS, such as variables,
    nested structures, inheritance, mixins, and many others. You can install and use
    `SASS` as a separate tool, but that isn''t really too appealing; we''ll aim to
    instead include it in the project, so all needed preprocessing will be done automatically.
    Let''s see how to do that.'
  prefs: []
  type: TYPE_NORMAL
- en: '`SASS` has two possible syntaxes: an older, indented one, plainly known as
    *the indented syntax*, and the newer SCSS. While the former is more concise, the
    latter has the advantage of being an extension of CSS, which means that any valid
    CSS file you might already have is automatically a valid SCSS file with the very
    same meaning. This is a very good help if you are migrating from CSS to `SASS`,
    so we''ll only use SCSS in the text.'
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we need to install a tool. The developers of `create-react-app` didn''t
    want to include a fixed CSS preprocessor, so you can really add whichever you
    want. There are several `SASS` tools, but the following one is recommended:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Second, we''ll also have to add an extra line to the `.flowconfig` file, so
    `.scss` files will be properly recognized. The changed section would become as
    follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, we''ll have to modify some scripts. `SASS` preprocessing will run
    in parallel to npm start, and for that we need a package that lets you run several
    commands in parallel:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Now the changed scripts will be the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s see what our new and updated processes do:'
  prefs: []
  type: TYPE_NORMAL
- en: '`build-scss` converts `.scss` files in `src/` to `.css` files; we''ll be using
    the latter ones'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`watch-scss` does an initial conversion of SASS files, and then runs the conversion
    in *watch* mode, running whenever there are new or changed files to process'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`start-js`, `build-js`, and `storybook-js` are our old `start`, `build`, and
    `storybook` processes, which we won''t be using directly'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`start` now runs both `watch-scss` and `start-js`, in parallel (because of
    the `-p` option)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`build` now runs `build-scss` followed by `build-js`, so all SCSS will have
    been converted before building the application'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`storybook` runs both `watch-scss` and `storybook-js`, also in parallel'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You are set! From now on, `.scss` files will be properly processed, and converted
    to `.css` files; let's see how we can make this work for us now.
  prefs: []
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let's create and style a basic component, a colored button, trying to take advantage
    of as many `SASS` features as possible. This will be an extreme example, because
    it's not very likely you'll have such a complex way of creating simple code, but
    we want to highlight `SASS` here.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, the code for the button itself, which we will call `SassButton`. It
    has three props: `normal` (if true, will show *normal* colors; if false, *alert*
    ones); `buttonText`, which will be displayed by the button; and `onSelect`, a
    callback for clicks. I highlighted the CSS-related lines in the following code
    snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Even if working with `SASS` and `.scss` files, you'll be importing the preprocessed
    `.css` output files, not the `.scss` original ones. Be careful not to import a
    `.scss` file by mistake.
  prefs: []
  type: TYPE_NORMAL
- en: 'We assume that CSS classes `.normalButton` and `.alertButton` do exist; let''s
    now get to creating them. First, let''s define a *partial* SCSS file, `_constants.scss`,
    which will define some variables with colors. The filenames of partial files always
    start with an underscore, and they won''t be converted into CSS; rather, they
    are assumed to be an `@import` from other SCSS files:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Variables' names start with a dollar sign, and are a very good way to set standard
    definitions, such as for fonts or colors. If I were to decide that I want to change
    my normal color to be blue, I would have to change it in just a single place,
    and it would be replaced everywhere. Note that I could use `$normalColor` in many
    places, for backgrounds, texts, and more, and all would be updated with a single
    edit.
  prefs: []
  type: TYPE_NORMAL
- en: Let's now define some *mixins* that can be used to include CSS code, even working
    with parameters. Our `darkenBackground()` mixin will produce code to set the `background-color`
    to a value, and to change the `:hover` attribute of whatever element it's used
    in to a 25% darker version. Note the ampersand in `&:hover`, which stands for
    the parent element, and also the `darken()` function, which is just one of many
    functions that SASS provides, for working with colors, sizes, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: 'See [http://sass-lang.com/documentation/file.SASS_REFERENCE.html#operations](http://sass-lang.com/documentation/file.SASS_REFERENCE.html#operations)
    for more on this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, we can build our styles in a `styles.scss` file. First, we import
    our partials:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, to show off other `SASS` features, let''s define a basic placeholder
    class, `%baseButton`, that will be extended. The initial `%` character (similar
    to class or ID initial characters) means that this code is not meant to be directly
    used:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Now let''s extend this base class to create our buttons: we''ll use `@extend`
    for that, and also `@include` to add the output of our mixins to the resulting
    code. We also included some `/* ... */` comments, but you can also use `//` for
    single-line comments:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'If you are wondering what eventually comes out of all that, the produced `styles.css`
    file is as follows: check it out carefully, and you''ll see the translated mixins
    and constants, and also how extended styles are defined, how `:hover` is used,
    and so on:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'All we need now is to write a story and check out our buttons in `Storybook`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: When a prop is meant to be `true` or `false`, just including its name makes
    it true. See how in the first story we can just write `normal` instead of `normal={true}`;
    both are equivalent.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can see the normal button in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/c2374a15-638f-4fae-827d-d85937d27148.png)'
  prefs: []
  type: TYPE_IMG
- en: Our normal button, shown in Storybook
  prefs: []
  type: TYPE_NORMAL
- en: 'The alert button, with a hovering cursor, is seen in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/c7e4c158-b2ac-4d13-bf52-822ce982f2ef.png)'
  prefs: []
  type: TYPE_IMG
- en: Our alert button, with hovering colors
  prefs: []
  type: TYPE_NORMAL
- en: 'So, here we have seen a common solution: using `SASS` to create CSS. In the
    next section, let''s get into a more original way of working, by having the CSS
    code right within our JS code rather than separated from it!'
  prefs: []
  type: TYPE_NORMAL
- en: Creating StyledComponents for inline styling
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: CSS-in-JS is a sometimes controversial topic. Before `React`, it was almost
    mandatory that you'd have a trio of sets of JS, HTML, and CSS separate files.
    When `React` introduced JSX, that was a shot against the trio, because we started
    placing HTML in the JS code. CSS-in-JS is the natural extension of that idea,
    because now we want to also include styling within the same JS files.
  prefs: []
  type: TYPE_NORMAL
- en: 'A first reaction to this is: *Isn''t that just going back to inline styles?*
    This is a valid question, but inline styles aren''t just powerful enough. While
    you can manage lots of styling by inlining styles, the fact is that there are
    several features that aren''t accessible in this way: keyframes animation, media
    queries, pseudo selectors, and more.'
  prefs: []
  type: TYPE_NORMAL
- en: The idea of going with CSS-in-JS is writing styles by using JS, but then injecting
    those styles in a `<style>` tag within the DOM, so you'll have the full power
    of CSS for your code. Furthermore, this is also well-aligned with component-based
    approaches such as React's, because you manage to pack everything you need together
    in a properly encapsulated way instead of depending on global style files and
    having to deal with CSS's single namespace.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are many packages that promote this way of styling, and out of those,
    we are going to pick `styled-components`, which is one of the best-regarded packages
    for CSS-in-JS styling. Its philosophy is interesting: instead of adding styles
    to components, you create components that incorporate those styles and use them
    everywhere. Let''s start by seeing how to add this package to our code, and then
    move on to using it.'
  prefs: []
  type: TYPE_NORMAL
- en: For the original talk on CSS-in-JS, by Christopher *vjeux* Chedeau, in which
    he gives the reasons for working with styling done in JS, see [https://speakerdeck.com/vjeux/react-css-in-js](https://speakerdeck.com/vjeux/react-css-in-js).
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Installing `styled-components` is quite simple—and note this is not a development
    dependency, because you''ll be actually using the package in your production code,
    not as a separate preprocessing step or anything like that:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: We will be using tagged template literals (which we earlier saw in the *Working
    with* *strings* section of [Chapter 2](2948d1ab-ac85-4b3a-90f1-f240b7688216.xhtml),
    *Using Modern JavaScript features*), so you may want to refresh that part of the
    book.
  prefs: []
  type: TYPE_NORMAL
- en: Working with `Flow` won't be a problem, because `styled-components` is well
    supported by it, so we won't have to do anything in particular. Finally, for VSC
    you might want to use the `vscode-styled-components` extension to add syntax highlighting.
  prefs: []
  type: TYPE_NORMAL
- en: Read the full documentation for `styled-components` at [https://www.styled-components.com/docs](https://www.styled-components.com/docs).
  prefs: []
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s try to recreate the button we build with `SASS`, but through using our
    new tool. We won''t try to mimic the `SASS` code, but we''ll try to apply some
    of the same concepts like defining constants in a separate file, having functions
    work as mixins, and extending a class as we did earlier. We have a problem, because
    `styled-components` doesn''t provide color functions as `SASS` does, so we''ll
    add a new library to take care of that, `color`:'
  prefs: []
  type: TYPE_NORMAL
- en: This package provides you with lots of methods to create and manipulate colors,
    so you'll do well by taking a look at its documentation, at [https://github.com/qix-/color](https://github.com/qix-/color).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, we are set. First, we''ll have some basic color constants, in file `constants.js`,
    that could be used everywhere:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: There's an alternative way of sharing global style data, by means of theming;
    if you are interested, check it out at [https://www.sty](https://www.styled-components.com/docs/advanced#theming)[led-components.com/docs/advanced#theming](https://www.styled-components.com/docs/advanced#theming).
  prefs: []
  type: TYPE_NORMAL
- en: 'Now we''ll directly get to defining our component, since all styling will also
    be there. First, we''ll need some imports:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'Given this, we can get to the main code. We''ll have a `makeSpan()` function
    that will work as a mixin; we''ll get to use it very shortly, and we''ll see what
    `props` means:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, we''ll define a `BasicStyledDiv` component, with some basic styling,
    that will do as a base class for our button. (Remember, we are working in this
    unneedlessly complex way, just to highlight several features you may want to use
    in problems that really need it!) This component will roughly be the equivalent
    of our `%baseButton` declaration in `SASS`, from the previous section:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'After, we can create a `StyledDiv` component by extending the previous one.
    Since `styled-component` lets us use functions and expressions, we won''t have
    to create two distinct styles, as we did with `SASS` when we built `.normalButton`
    and `.alertButton`. Also, note that we can use `&` here, meaning a reference to
    the class, just as in `SASS`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: What is this `props` parameter we see? When creating a style, the component's
    props will be passed to our code, so we can tweak our style. In this case, if
    the component's `this.props.normal` value is `true`, `NORMAL_COLOR` will be used;
    otherwise, `ALERT_COLOR` will apply. This simplifies our code a lot, because we
    won't have to create styles in a fixed fashion; we can make them adjust to whatever
    we want.
  prefs: []
  type: TYPE_NORMAL
- en: 'After all of this, the code for our button itself is very simple:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'Writing a story to check this is actually trivial, because we only need to
    copy the previous one we wrote for the `SASS` style button and substitute `StyledButton`
    for `SassButton`; no need for anything else. (OK, I also changed some strings
    for clarity, but those edits are trivial.) If we launch `Storybook`, we can quickly
    verify that our new button works in the same way as our previous one; see following
    screenshot for evidence of that:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/50e77145-b3bd-4c02-9c69-e91a0659affe.png)'
  prefs: []
  type: TYPE_IMG
- en: Using `styled-components` is as successful as SASS, and more "JavaScripty"
  prefs: []
  type: TYPE_NORMAL
- en: If you want to get some specific tips, and learn some new tricks, check out [https://github.com/styled-components/styled-components/blob/master/docs/tips-and-tricks.md](https://github.com/styled-components/styled-components/blob/master/docs/tips-and-tricks.md).
  prefs: []
  type: TYPE_NORMAL
- en: Making your application responsive to screen sizes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Creating a web application means that you cannot assume any given display size.
    In fact, the user may change the browser's window size, and your application should
    somehow respond to that, rearranging whatever is shown on screen to better work
    with the current screen dimensions. If your web application is capable of this
    reorganization, it's said to be *responsive*. Today, given the extreme range of
    devices with browsers (ranging from small phone handsets to very large flat screens),
    doing responsive design is really a must, so in this section we'll see how to
    work with this. I'll assume you are already aware of CSS concepts such as grids
    and columnar designs; please read up on them if not.
  prefs: []
  type: TYPE_NORMAL
- en: 'To allay a common, fairly obvious question, if you are aware of current trends
    in CSS, you may ask why aren''t we using Flexbox or CSS Grids, both of which easily
    allow responsive designs. The answer lies in availability: if you check places
    such as[ https://www.caniuse.com/](https://www.caniuse.com/), you''ll find out
    that both those features are only recently available, and thus users may not yet
    have access to them. To sum it up, note the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Internet Explorer has partial support of both features, with many bugs
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Edge supports them only since version 17, dated April 2018
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: FireFox supports them since version 60, dated May 2018
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Safari supports them since version 11.1, dated March 2018
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Chrome supported FlexBox since version 49, from March 2016, but CSS Grid only
    since version 66, dated April 2018
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: As you can see, if you want to use these features, as of today (December 2018),
    only a few of your users may have access to them, and for the vast majority, scrambled
    up displays would be the result. So, even if it means working with a larger library
    than need be, we'll go with a current-day standard, as we'll see in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: One of the most popular frontend libraries for the design of websites and web
    applications, is `Bootstrap`, which has been available since August 2011; it's
    about seven years old. It has included responsive design handling since version
    2\. *Mobile First Design* (so you should first get your design to work in smaller
    devices, and only afterwards worry about adding handling for larger screens) was
    included in version 3, and `SASS` support appeared in version 4\. Apart from responsive
    design support, `Bootstrap` also offers other features, such as components, typography,
    and more utilities, so you should probably not miss checking the whole documentation
    at [https://getbootstrap.com/docs/4.1/getting-started/introduction/](https://getbootstrap.com/docs/4.1/getting-started/introduction/).
  prefs: []
  type: TYPE_NORMAL
- en: '`Bootstrap` is currently GitHub''s second most starred project, following FreeCodeCamp''s
    first place. And if you wonder, `React` is practically tied at third place with
    another framework, `Vue`, and with EBook''s Foundation set of free programming
    books. You can check the results by yourself at [https://github.com/search?o=desc&q=stars%3A%3E1&s=stars&type=Repositories](https://github.com/search?o=desc&q=stars%3A%3E1&s=stars&type=Repositories).'
  prefs: []
  type: TYPE_NORMAL
- en: 'To install `Bootstrap`, we just need the usual `npm` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: You can save your work by downloading pre-build images, both for CSS and JS;
    see [https://getbootstrap.com/docs/4.1/getting-started/download/](https://getbootstrap.com/docs/4.1/getting-started/download/)
    for those options. Alternatively, there exists a `React` package at [https://react-bootstrap.github.io/](https://react-bootstrap.github.io/), `react-bootstrap`,
    which today only supports `Bootstrap` version 3, but promises forthcoming full
    support for `Bootstrap` version 4\. Yet another possible option you may want to
    look into is `reactstrap`, at [https://reactstrap.github.io/](https://reactstrap.github.io/).
  prefs: []
  type: TYPE_NORMAL
- en: '`Bootstrap` provides lots of features, including:'
  prefs: []
  type: TYPE_NORMAL
- en: '*Components*, such as alerts, buttons, dropdowns, navigation bars, and much
    more; see [https://getbootstrap.com/docs/4.1/components](https://getbootstrap.com/docs/4.1/components)
    for a complete list'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Tables*, a common third-party component, with many configuration possibilities;
    see [https://getbootstrap.com/docs/4.1/content/tables](https://getbootstrap.com/docs/4.1/content/tables)
    for more'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Typography-related elements*, dealing with the many fonts you''ll use in your
    design; check out [https://getbootstrap.com/docs/4.1/content/typography/S](https://getbootstrap.com/docs/4.1/content/typography/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Styling details*, such as borders, colors, shadows, sizing, and more; read [https://getbootstrap.com/docs/4.1/utilities/](https://getbootstrap.com/docs/4.1/utilities/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In any case, we won't be specifically dealing with the preceding list, since
    it's basically just a matter of styling, and we've already done that. We are going
    to focus, instead, on positioning elements, changing their sizes, and even hiding
    or showing them according to the current screen size; let's move on to that now.
  prefs: []
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '`Bootstrap` uses a grid system, based on 12 columns, with breakpoints for several
    device sizes, based on media queries:'
  prefs: []
  type: TYPE_NORMAL
- en: '`xs`: very small, such as portrait phones, less than 576 pixels wide'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`sm`: small, like landscape phones, up to 768 pixels'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`md`: medium, like tablets, up to 992 pixels'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`lg`: large, like desktops, up to 1200 pixels'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`xl`: extra large, over 1200 pixels'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: These limits aren't hardcoded, and may be changed. Other common values are 1024
    and 1440, instead of 992 and 1200\. Yet another possibility is considering HD
    devices (1920x1080) and 4K devices, with a resolution of 2560x1600.
  prefs: []
  type: TYPE_NORMAL
- en: Whenever you place elements, you specify their width in terms of columns, and
    positions will be arranged depending on the available row space, moving to new
    rows if need be. You can also allow for different sizing and ordering of elements
    depending on screen dimensions, and even hide or show components (in full, or
    partially) depending on available space.
  prefs: []
  type: TYPE_NORMAL
- en: Resizing elements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'By using `col-xx-yy` classes (such as `col-sm-3` or `col-md-5`) you can decide
    the size of elements depending on the current screen width. The following code
    example shows that—and notice I avoided a separate style sheet, just to simplify:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'We can see how rendering changes with screen size; see following image:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/6e9d98ed-0160-4e54-b181-991a0da3ec35.png)'
  prefs: []
  type: TYPE_IMG
- en: The same elements, rendered at different screen widths
  prefs: []
  type: TYPE_NORMAL
- en: At the smallest screen size, all elements are rendered at the same size vertically;
    this would suit, logically, a very small device. As we enlarge the window size,
    the 7/3 element now takes up 7 columns, while the 2/6, 1/5, and 1/3 elements are
    narrow. When we increase the window width even more, note the 7/3 element takes
    only three columns, and the 3 other elements become wide.
  prefs: []
  type: TYPE_NORMAL
- en: Of course, it's highly unlikely you'd ever come up with this weird design, with
    so many different widths and such peculiar resizing rules, but the point here
    is that by using the `Bootstrap` grid, elements can vary in size and gracefully
    flow to different rows, without having to do anything special.
  prefs: []
  type: TYPE_NORMAL
- en: Reordering elements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In the previous example, we saw how components resized themselves, and flowed
    across lines. However, there are other requirements: for instance, you could want
    a component to appear at a different position for a given screen size. Fortunately,
    `Bootstrap` also allows for that. Let''s have an element that will change its
    place among the rest:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'For small devices, our special component should be the first, and for medium
    ones, it should move to the end. For very small devices (for which we haven''t
    provided any special rules) it should appear at its normal place. See the following
    images:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/18416619-a6ae-4049-9837-2cdb861a6a2f.png)'
  prefs: []
  type: TYPE_IMG
- en: Components can also change their relative positions.
  prefs: []
  type: TYPE_NORMAL
- en: This takes care of a common second set of requirements, letting you vary at
    will the sequence in which components appear on screen. We only have one more
    case, which we'll see in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Hiding or showing elements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Our final type of design rule is that some components (or parts of them) should
    possibly not be displayed at given screen sizes. For instance, if you were providing
    information about a movie, in large screens you could include a still from a scene,
    plus pictures of the main actors, in addition to the movie title and a full description,
    but in small screens you could make do with just the movie title and basic information.
    Let''s show this kind of requirement with a couple of components: one will be
    fully hidden, while the other will just hide part of its contents:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'To see this in action, check out the following image:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/f9bd9667-d8dd-4d4f-9cdc-964df4ab102c.png)'
  prefs: []
  type: TYPE_IMG
- en: A component fully disappears in small screens, while others show different contents
  prefs: []
  type: TYPE_NORMAL
- en: The 0/4 component is set to be shown only at small screens and more, so in the
    left side screenshot it just disappears. The other component shows two lines in
    the smaller screen, but fuller contents (OK, three lines instead of two) in bigger
    screens.
  prefs: []
  type: TYPE_NORMAL
- en: Making your application adaptive for enhanced usability
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'By using grids and all the styles we saw in the previous section, in many cases
    you won''t need anything extra in order to build a responsive website. However,
    in some cases moving components around, resizing them, or even hiding part or
    all of them, isn''t enough. For example, you may actually want to show totally
    different components for small and large screens—say, a screen with three tabs
    for a phone, showing only one tab at a time, but a three-column display for a
    desktop, showing everything simultaneously. Changes could be even more drastic:
    you might decide that some functionality isn''t going to be available on mobile
    devices, but only included in large screens. So, instead of doing responsive design,
    you are delving into adaptive design, meaning that the actual design and functions
    of the screen will change, and then we need to be able to handle internal changes
    in code.'
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If you wanted to do adaptive design on your own, you could certainly set things
    up to listen for screen size or orientation changes, and then produce some components
    or other. While there's nothing wrong with this approach, it can be made far simpler
    by installing `react-responsive`, a package that takes care of all that—you just
    specify the conditions under which some components will be rendered, and whenever
    they are satisfied, those components will be rendered. On any size or orientation
    change, the package will take care of whatever re-rendering is needed.
  prefs: []
  type: TYPE_NORMAL
- en: 'Installation requires the usual `npm` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: The key component in this package is called `<MediaQuery>`, and lets you work
    with either media queries, or by using props, in a fashion more like `React`;
    I prefer the latter, but check out the documentation if you are interested about
    the more CSS-y option. Let's now see how it is used.
  prefs: []
  type: TYPE_NORMAL
- en: Read more about `react-responsive` at [https://github.com/contra/react-responsive](https://github.com/contra/react-responsive).
    There are many more features than I'll be showing in this text.
  prefs: []
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Basically, all you have to do in order to detect any size changes is to produce
    one or more `<MediaQuery>` components when rendering, and those whose requirements
    are met will actually be rendered, and the rest won't appear on the page.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s write a very basic example with plenty of media queries, to see the
    coding style you''ll be using. The following is an example given in the react-responsive
    GitHub page; we''ll just try to detect some aspects of the current device and
    window:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: I defined the four size constants (`XS`, `SM`, `MD`, and `LG`) to match the
    values used by `Bootstrap`, but you could certainly work with other sizes.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can also modify the values in `Bootstrap`, so it will work with different
    breakpoints: see [https://getbootstrap.com/docs/4.1/layout/grid/#grid-tiers](https://getbootstrap.com/docs/4.1/layout/grid/#grid-tiers)
    for more on this.'
  prefs: []
  type: TYPE_NORMAL
- en: Whenever our `App` component is rendered, the media queries are executed, and
    depending on their result, components will or won't be rendered. In our case,
    we are just producing some `<div>` instances with text, but it should be obvious
    that you could actually produce any other kind of components.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can run this application in Chrome, and see how it produces different contents
    as we resize the window: see the following image :'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/2fe187d5-6c91-45dd-a97f-28ef0c285530.png)'
  prefs: []
  type: TYPE_IMG
- en: Our component automatically reacts to any screen size changes, and produces
    different components, even if our example lacks variety!
  prefs: []
  type: TYPE_NORMAL
- en: 'Alternatively, you could use the device toggle in the toolbar, and then you''d
    be also able to see your application as it would look in a phone or tablet; take
    a look at the following screenshot for a sample of this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/fe218775-5aee-48e5-a7c0-783ce0bae171.png)'
  prefs: []
  type: TYPE_IMG
- en: Chrome's Developer Tools include a device toggle that lets you simulate multiple
    kinds of devices, including phones and tablets as well
  prefs: []
  type: TYPE_NORMAL
- en: 'Working with `Bootstrap` for simple adjustments, and `react-responsive` for
    more complex work, you can ensure your application will fit whatever device it''s
    run on. Let''s now move on to a different kind of situation: running in different
    countries or regions!'
  prefs: []
  type: TYPE_NORMAL
- en: Making a global application with internationalization and localization
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'With the growing globalization levels, it''s most likely that any website you
    write may be required to be in two or more languages. In Canada, English and French
    would be mandatory; in Switzerland, four languages could be asked for; and even
    in a (supposedly single-language) country like the United States, a Spanish version
    of the site could well be added to the English one. Of course, translation isn''t
    enough: dates and currency amounts also require different formatting depending
    on the country, so we''ll have to take care of that too.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Some definitions, now: being able to adapt your software to different languages
    is called *internationalization*, usually abbreviated as *i18n*—the 18 stands
    for the 18 letters between the initial *i* and the final *n*. Then, the specific
    process of configuring the system for a specific area is called *localization*,
    abbreviated as *l10n* for similar reasons as in i18n. Finally, if you really are
    into these *numeronyms*, the combination of internationalization and localization
    is also known as *globalization*, shortened to *g11n*.'
  prefs: []
  type: TYPE_NORMAL
- en: This pair of definitions is based upon a document by the W3C, at [https://www.w3.org/International/questions/qa-i18n](https://www.w3.org/International/questions/qa-i18n).
    There, they define that "Internationalization is the design and development [...]
    that enables easy localization for target audiences that vary in culture, region,
    or language" and "Localization refers to the adaptation [...] to meet the language,
    cultural and other requirements of a specific target market (a locale)."
  prefs: []
  type: TYPE_NORMAL
- en: Fortunately, handling these aspects is simple in `React`, and only requires
    some planning ahead, as we'll see in this recipe.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'A good package for handling all i18n concerns is `i18next`. We can install
    it, together with a package for detecting the browser language, with the following
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'You''ll also have to decide on a fallback language (probably `"en"`, for English),
    and provide translations for all strings used in your application. To get a taste
    of this, for a fictitious data entry form (in a really very small application;
    usually, you''d have hundreds of translations!) you could have the following `translations.en.json`
    file for English:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'If you decided to also provide Spanish (`"es"`) translations, you''d add another
    file, `translations.es.json`. (Note: you can name your files in any way you wish,
    and you don''t have to follow my examples.) This new JSON file has the very same
    keys, but translated into Spanish:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: The idea is that, whenever you want to display some text, you'll refer to it
    by its key (such as `"details"` or `"number"`), eventually providing extra parameters
    (as in `"summary"`), and the translation package will pick the correct string
    to display; let's see how it works by completing an example.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `i18next` package can also deal with plurals and specific formatting rules.
    You''ll first have to initialize it, as follows; we are creating a `i18n` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'Some details about the code should be noted:'
  prefs: []
  type: TYPE_NORMAL
- en: The `use(...)` method tells `i18next` to use the browser language detector package.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In the `resources` attribute, you have to provide the set of translations for
    each language, which we imported from our JSON files.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`fallbackLng` specifies that English (`"en"`) will be the default language.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ns` and `defaultNS` define the namespace for translations, usually just *translations*
    as we used in the `resources` attribute.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`debug` is a good tool, for it will log to the console any keys you want to
    translate, but that haven''t been defined in the resources.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`interpolation.escapeValue` gives you the option to escape all values: you
    could use it to display unchecked user-entered values, but we don''t need it here.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`interpolation.format` lets you define a special formatting function that should
    produce whatever output you desire for a given value, in a specific format, for
    a given language. In our case, we used it with the `summary` and `summary_plural`
    keys to format dates in the proper style: month/day/year for English, day/month/year
    for Spanish. You could also use this function to format numbers as currency, for
    example.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You can check the full documentation for `i18next` at [https://www.i18next.com/](https://www.i18next.com/).
  prefs: []
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Imagine we are defining an input form that lets you order some things, picking
    their color and deciding a top date for delivery. Our `<I18nForm>` component could
    be coded as follows—and note that we are just focusing on the input form, paying
    no attention to actually *doing* anything with the user data! Also, pay no attention
    to the poor UI design; once again, we care about translation here, so I wanted
    as little extra JSX code as possible:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'Some details about the code should be noted:'
  prefs: []
  type: TYPE_NORMAL
- en: Passing extra parameters for interpolation (as with the `"summary"` key) is
    done via an object, with the desired parameters
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'If you want to have distinct lines for singular and plural versions, you have
    to define two keys as we did here: `summary` for singular, and `summary_plural`
    for plural, and then `i18next` will decide which to used based on the value of
    the `count` parameter'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'How can we deal with dynamic language changes? We provided two buttons to call
    `i18n.changeLanguage(...)`, but how do we re-render components? There are (at
    least) three ways of doing so:'
  prefs: []
  type: TYPE_NORMAL
- en: You can listen to the `"languageChanged"` event and force an update, which was
    what we did here. (We use `.on(...)` to set our component to listen, and `.off(...)`
    to stop it later, when unmounting.)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Another solution would be to include the currently selected language in the
    application state (we'll be looking into this in the next chapter) and you could
    supply it to components via props, so `React` will re-render everything on a language
    change.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: And, finally, you could use the `react-i18next` framework package at [https://github.com/i18next/react-i18next](https://github.com/i18next/react-i18next)
    to provide an even more seamless integration.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'We can test our translations with a very simple story:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'When the story is loaded, it looks as seen in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/802ede23-becc-4276-b0dd-98a456f2fb6b.png)'
  prefs: []
  type: TYPE_IMG
- en: Our input form, with initial values, displayed in English
  prefs: []
  type: TYPE_NORMAL
- en: 'If you change the quantity, the text at the bottom will be updated accordingly;
    see the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/32777800-580b-4b49-9ae1-c24fdfd486fc.png)'
  prefs: []
  type: TYPE_IMG
- en: If we order more than one thing, the plural translation is used
  prefs: []
  type: TYPE_NORMAL
- en: 'And, if you change the language to Spanish, all texts will be automatically
    translated; take a look at the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/50b14774-fe5e-481d-842f-aec97602e0f4.png)'
  prefs: []
  type: TYPE_IMG
- en: By listening to the language change event, we can force the component to re-render
    itself and show translations for the newly chosen language
  prefs: []
  type: TYPE_NORMAL
- en: 'A small detail: whenever you use a date `<input>` element, dates are formatted
    according to your computer''s locale, so the displayed value doesn''t change for
    Spanish. However, the element''s value is always the same, in ISO format: in our
    case, `2018-09-22`. You can solve this by using a special handcrafted component,
    but we won''t be doing that, since what we cared about was showing how translations
    work.'
  prefs: []
  type: TYPE_NORMAL
- en: As we saw, preparing an application for international usage isn't really a very
    hard problem. Even if you don't plan on doing it at the beginning, it will pay
    to work in this way; having to retrofit translations in existing code can be harder.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up for accessibility (a11y)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'When designing a web page, the term "accessibility" refers to providing support
    so everyone, including people with disabilities, can use your page. There are
    then many needs that have to be considered, including, for instance, the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '*Vision limitations*, varying from poor eyesight, through color vision problems,
    all the way up to total blindness'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Hearing limitations*, which require some fallback method for hearing impaired
    users'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Mobility limitations*, which may imply difficulty or impossibility of using
    the hands or controlling a mouse'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Cognitive limitations*, which may complicate understanding the information
    shown on screen'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'There are many tools that can assist disabled users, such as screen zooming,
    speech recognition, screen readers, braille terminals, closed captioning, and
    more, but even those tools need some extra information in order to work properly.
    The **Web Content Accessibility Guidelines** (**WCAG**) are a set of guidelines,
    published by the **Web Accessibility Initiative** (**WAI**) of the **World Wide
    Web Consortium** (**W3C**). The current version, 2.1, available online at [https://www.w3.org/TR/WCAG21/](https://www.w3.org/TR/WCAG21/),
    is based on four principles, known as POUR as an acronym:'
  prefs: []
  type: TYPE_NORMAL
- en: '*Perceivable***:** Information and user interface components must be presentable
    to users in ways they can perceive'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Operable*: User interface components and navigation must be operable'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Understandable*: Information and the operation of user interface must be understandable'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Robust*: Content must be robust enough that it can be interpreted by by a
    wide variety of user agents, including assistive technologies'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'These principles, quoted from the cited page, include *guidelines* for use
    of color, working with a keyboard, providing information for screen readers, having
    enough contrast, displaying errors, and more; *sufficient and advisory techniques*,
    that can help follow the guidelines; and *success criteria*, meaning testable
    conditions to be used for conformance testing. The latter criteria are also used
    to define three levels of conformance: *A*, the minimum; *AA*, medium, including
    all of *A* and *AA* success criteria, and *AAA*, the hardest to attain, fulfilling
    all existing criteria—but it is acknowledged that it may be impossible to achieve
    for some sites.'
  prefs: []
  type: TYPE_NORMAL
- en: Trying to make sure that your web application follows all guidelines and applies
    all techniques is not easy, so we'll see how we can add some tools to `React`
    in order to make your task a bit easier.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In order to check our work for accessibility, we''ll install a couple of packages,
    so let''s follow the procedure mentioned: one for static checks when writing code,
    using `ESLint`, and another for dynamic checks when running our application. And,
    if you ask yourself *Why two tools instead of only one?*, the answer is that a
    static tool cannot check everything: for example, if you assign a variable''s
    value to a title, will that value not be empty at run time? On the other hand,
    since all your code is linted, you got a chance to detect some things that could
    be missed during normal tests, so by using two tools you are not doing redundant
    work, but rather increasing the odds of finding accessibility problems.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Installing the `ESLint` module is quite simple. First, we''ll use `npm` to
    add the package:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, we''ll have to modify our `.eslintrc` file a bit, adding the new plugin,
    and specifying what rules we want to enforce:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: 'If you don''t want to use all rules (as we did here) you can specify the rules
    you care for in the `"rules"` part of the file: see [https://github.com/evcohen/eslint-plugin-jsx-a11y](https://github.com/evcohen/eslint-plugin-jsx-a11y)
    for details on this, and inspect the complete set of available rules at [https://github.com/evcohen/eslint-plugin-jsx-a11y/tree/master/docs/rules](https://github.com/evcohen/eslint-plugin-jsx-a11y/tree/master/docs/rules).'
  prefs: []
  type: TYPE_NORMAL
- en: 'The second addition we want is `react-a11y`, a package that modifies React
    rendering functions internally, so accessibility problems can be detected at runtime.
    Installation is simple:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, at the start of your application, you''ll have to initialize the `a11y`
    module, along with the rules you want to check. The format of the rules is the
    same as `ESLint` uses. Check [https://github.com/reactjs/react-a11y/tree/master/docs/rules](https://github.com/reactjs/react-a11y/tree/master/docs/rules)
    for the complete list, because new rules may be added. (You''ll also have to see
    that list in order to learn which rules, if any, have special options.) By default,
    all rules are `"off"`, so you must explicitly turn them on to `"warn"` or `"error"`. A
    full configuration would be as follows, as of December 2018:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: You might want to not enable `a11y` in production, to avoid a needless slowdown.
  prefs: []
  type: TYPE_NORMAL
- en: We have everything set up; let's now see how all of this comes together.
  prefs: []
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: First, let's see what happens with the errors that are detected via `ESLint`,
    and then we'll move to the runtime problems.
  prefs: []
  type: TYPE_NORMAL
- en: Solving static problems
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Our first *victim* of bad `a11y` coding is our SASS button; see the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/a92fd389-cd58-4d49-b707-ad21dcec233d.png)'
  prefs: []
  type: TYPE_IMG
- en: Our SASS button has (at least) two accessibility-related problems
  prefs: []
  type: TYPE_NORMAL
- en: 'One `a11y` rule is that you should be able to use the application with only
    the keyboard, so we need to be able to tab our way to the button (this requires
    using a `tabIndex`) and providing a keyboard listener (`onKeyPress` or `onKeyDown`).
    Furthermore, the role of our element (which works as a button) must be specified.
    The corrected JSX code would be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: 'The new method, `.keyDownAsClick()`, would check if the user pressed the spacebar
    (ASCII code 32) or the *ENTER* key (ASCII code 13), and if so, call the same logic
    as the `onClick` handler:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: 'Our input form also has a problem, albeit a simpler one. See the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/89ec6a2d-daa2-47cc-bfe7-3cefca04daea.png)'
  prefs: []
  type: TYPE_IMG
- en: Our things ordering form only has a small a11y problem
  prefs: []
  type: TYPE_NORMAL
- en: 'The problem and its solution are clear: instead of using `onChange`, the suggestion
    is to substitute `onBlur`, which effectively has no consequences for users. We
    won''t show the edited code, given how small the required change is, and just
    edit the file to replace the method.'
  prefs: []
  type: TYPE_NORMAL
- en: 'We could try adding an image to our form, just for the sake of getting another,
    different warning. Try adding a Packt logo to the form, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: 'In this case, we''d get a warning about the need for an `alt` attribute (adding
    `alt="Packt logo"` to the `img` tag would do) to describe the image; take a look
    at the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/cd7cd930-222a-4f49-a07b-c807d72d98ac.png)'
  prefs: []
  type: TYPE_IMG
- en: Another a11y rule requires images to have an alt attribute to describe them
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, let''s see a case in which our tool fails! The button we created with
    `styled-components` has basically the same problems as our `SASS` button, but
    nothing is reported; why? The reason is simple: if you examine the code (see the
    *Adding SASS for separate styling* section earlier in this chapter) we aren''t
    using `<div>` or `<button>` instances or any other recognizable HTML tags, but
    rather `<StyledDiv>` and `<StyledButton>`, which our `a11y eslint` plugin doesn''t
    understand. So far, the only workaround for this is to manually change our styled
    components back to their original tags, solve whatever problems may pop up, and
    then go back to the styled version not a very good solution, admittedly!'
  prefs: []
  type: TYPE_NORMAL
- en: Solving runtime problems
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'If we now try our fixed components in `Storybook`, `react-a11y` won''t say
    anything about them, but it will report some problems with the `styled-components`
    one, which we couldn''t solve beforehand; see the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/064f8058-9ac5-4ec0-971e-aaa551d57723.png)'
  prefs: []
  type: TYPE_IMG
- en: The react-a11y runtime tests show some problems in our component
  prefs: []
  type: TYPE_NORMAL
- en: 'Of course, given that we build our component to match the previous `SASS` one,
    it won''t be a surprise that the solution to the accessibility problems are the
    same: adding `onKeyDown`, `tabIndex`, `role`, and a key-handling method. The relevant
    parts of the corrected code would be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: Of course, we have just seen the tip of the iceberg as to all the problems that
    can appear, and their solutions—but what really matters is that you have some
    tools to help you with the development of `a11y`-enabled applications, as we have
    shown.
  prefs: []
  type: TYPE_NORMAL
- en: There is more
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'What can we do to ensure a fully compliant `a11y` application? Unfortunately,
    you won''t be able to manage it with just some tools. For instance, none of the
    tools we selected pointed out that we should add a name to the input fields, as
    pointed out by an ARIA rule (see [https://w3c.github.io/using-aria/#fifth](https://w3c.github.io/using-aria/#fifth)
    for more on it). Also, there are some conditions that cannot be tested in code.
    For example, guidelines say that error or mandatory fields should not be highlighted
    just with color (because of color blindness) but should have some external text
    or mark; how would you test for that in an automated way? take a look at the following
    screenshot for an example, taken from [https://govuk-elements.herokuapp.com/errors/example-form-validation-multiple-questions](https://govuk-elements.herokuapp.com/errors/example-form-validation-multiple-questions),
    with enhanced visibility for errors:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/f020f612-b251-45d5-9e94-d7fc9ee2aeab.png)'
  prefs: []
  type: TYPE_IMG
- en: A sample input form from a UK government site that shows good a11y practices
    for errors
  prefs: []
  type: TYPE_NORMAL
- en: 'It''s not possible to get an A, AA, or AAA level without an audit, but you
    can add more tools to help out with that:'
  prefs: []
  type: TYPE_NORMAL
- en: The W3C Web Accessibility Initiative provides an extensive list of tools (113,
    as of today!) at [https://www.w3.org/WAI/ER/tools/](https://www.w3.org/WAI/ER/tools/)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The A11Y Project provides a community effort to simplify web accessibility,
    showing several useful techniques, at [https://a11yproject.com/](https://a11yproject.com/)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: MDN has a full overview of ARIA, a spec from the W3C geared to providing extra
    information for screen readers by way of the usage of HTML attributes, at [https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/ARIA_Techniques](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/ARIA_Techniques)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The W3C also provides many suggestions for using ARIA, including samples of
    code, at [https://w3c.github.io/using-aria/](https://w3c.github.io/using-aria/)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There are several accessibility checkers, for all main browsers, which can diagnose
    a page *on the go*, so just search for them; some work as browser extensions,
    while others are code meant to be added to your website, to detect and report
    possible problems
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Even if no single tool or set of tools can ensure `a11y` compliance, you will
    be able to build yourself a good starting lot of tools; experiment a bit!
  prefs: []
  type: TYPE_NORMAL
