- en: Statistics Gathering and Reporting
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you will learn about the advanced Python libraries used in
    statistics for scientific calculations. You are going to learn about the NumPY,
    Pandas, Matplotlib, and Plotly modules of Python. You will learn about the data
    visualization techniques and also how to plot the gathered data.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: NumPY module
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Pandas module
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Data visualization
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: NumPY module
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: NumPY is a Python module that provides efficient operations on arrays. NumPY
    is the fundamental package for scientific computing with Python. This package
    is commonly used for Python data analysis. A NumPY array is a grid of multiple
    values.
  prefs: []
  type: TYPE_NORMAL
- en: 'Install NumPY by running the following command in your Terminal:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'We are going to use this `numpy` library to do operations on a `numpy` array.
    Now we are going to see how to create `numpy` arrays. For that, create a script
    called `simple_array.py` and write following code in it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the script and you will get the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'The output is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding example, we have imported the `numpy` library as `np` to use
    `numpy` functionality. Then we created a simple list, which we converted into
    an array and for that we used the **`np.array()`** function**.** Finally, we printed
    the `numpy` array with type to easily understand a normal array and a `numpy`
    array .
  prefs: []
  type: TYPE_NORMAL
- en: 'The previous example was of a single dimensional array. Now we are going to
    look at an example of a multi-dimensional array. For that, we that we have to
    create another list. Let''s  look at another example. Create a script called `mult_dim_array.py`
    and write the following content in it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the script and you will get the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'The output is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'In the preceding example, we imported the `numpy` module. After that, we created
    two lists: `my_list1` and `my_list2`. Then we made another list of lists (`my_list1`
    and `my_list2`) and applied the `np.array()` function on the list (`my_lists`)
    and stored it in an object called `my_array`. Finally, we printed the `numpy`
    array.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, we are going to look at more operations that can be done with an array.
    We are going to study how to know the size as well as the data type of our created
    array; that is, `my_array`. For that, we just have to apply the `shape()` function
    and we will get the `size` of the array and `dtype()` function to know the `data
    type` of the array on our created array. Let''s look at an example of this. Create
    a script called `size_and_dtype.py` and write the following in it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the script and you will get the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'The output is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding example, we applied the shape function as `my_array.shape`
    to get the size of our array. The output was `(2, 4)`. Then we applied the `dtype`
    function as `my_array.dtype` on the array and the output was `int64`**.**
  prefs: []
  type: TYPE_NORMAL
- en: Now, we are going to look at some examples of special case arrays.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we will make an array with all zeros using the `np.zeros()` function,
    as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'After making the array with all zeros, we are going to make the array with
    all 1''s using the `np.ones()` function of `numpy`, as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: '`np.ones((5,5))` creates an array of `5*5` with all values being `1`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, we are going to make an empty array using the `np.empty()` function of
    `numpy`, as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: '`np.empty()` does not set the array values to zero, like the `np.zeros()` function
    does. Therefore, it may be faster. Besides, it requires the user to enter all
    the values manually in the array and should therefore be used with caution.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, let''s see how to make an identity array using the `np.eye()` function,
    which results in the array with its diagonal value `1`, as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, we are going to see the `range` function, which is used to create an array
    using the `np.arange()` function of `numpy`, as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: '`The np.arange(10)` function creates the array of range `0-9`. We defined the
    range value `10`, and because of that, the array index value starts with `0`.'
  prefs: []
  type: TYPE_NORMAL
- en: Using arrays and scalars
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this section, we are going to look at various arithmetic operations on arrays
    using `numpy`. For that, first we will create a multidimensional array, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: Here, we imported the `numpy` module to use the `numpy` functionality, and then
    we imported the `__future__` module that will take care of floats. After that,
    we created a two dimensional array, `arr`, to perform various operations on it.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, let''s look at some arithmetic operations on arrays. First, we will study
    the multiplication of arrays, as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding multiplication operation**,** we multiplied the `arr` array
    twice to get a multiplied array. You can also multiply two different arrays.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, we are going to look at a subtraction operation on an array, as shown
    here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: As shown in the preceding example, we just use the  `**-**` operator to do the
    subtraction of two arrays. After the subtraction of the arrays, we got the resultant
    array, as shown in the preceding code.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now we are going to look at arithmetic operations on arrays with scalars. Let''s
    look at some operations:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding example, we divided `1` by our array and got the output. Remember,
    we imported the `__future__` module, which is actually useful for such operations,
    to take care of float values in the array.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now we will look at the exponential operation on the `numpy` array, as shown
    here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding example, we took a cube of our array and it gave the output
    as the cube of each value in the array.
  prefs: []
  type: TYPE_NORMAL
- en: Array indexing
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The indexing of arrays is done using an array as an index. With an index array,
    a copy of the original array is returned. `numpy` arrays can be indexed using
    any other sequence or by using any other array, excluding tuples. The last element
    in the array can be indexed by `-1` and the second last element can be indexed
    by `-2`, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: 'So, to perform indexing operations on the  array, first we create a new `numpy`
    array and for that we are going to use the `range()` function to create the array,
    as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding example, we created the array `arr` with the range `16`; that
    is, `0-15`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, we are going to perform a different indexing operation on array `arr`.
    First, let''s get the value in the array at a particular index:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding example, we accessed the array by its index value and after
    passing the index number to the array `arr`, the array returned the value `7`,
    which is the particular indexed number that we pass.
  prefs: []
  type: TYPE_NORMAL
- en: 'After getting the value at a particular index, we are going to get values in
    a range. Let''s look at the following example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding example, first we accessed the array and got values in a range
    of (`2-10`). As a result, it shows the output as `array([2, 3, 4, 5, 6, 7, 8,
    9])`. In the second term, `arr[2:10:2]`, it actually states that access array
    in the range of `2-10` in the interval of two step. The syntax of this kind of
    indexing is `arr[_start_value_:_stop_value_:_steps_]`. So, as the output of second
    term, we get `array([2, 4, 6, 8])`.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can also get values in the array from the index until the end, as show in
    the following example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: As we seen in the preceding example, we accessed the values in the array from
    the 5th index value until the end. As a result, we got the output as `array([
    5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15])`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now we are going to look at slicing of the `numpy` array. In slicing, we actually
    take some part of our original array and store it in a specified array name. Let''s
    look at an example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'In the preceding example, we take slice of the original array. As a result,
    we got a slice of the array with values `0,1,2,…..,7`. We can also give updated
    values to the slice of the array. Let''s look at an an example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: In the the preceding example, we set all values in the array slice to `29,`.
    But the important thing while assigning values to the array slice is that the
    value assigned to the slice will also get assigned to the original set of the
    array.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s see the result after giving values to the slice of the array and the
    effect on our original array:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, we are going to look at another operation; that is, copying the array.
    The difference between slicing and copying of arrays is that when we do the slicing
    of the array, the changes made are going to be applied on the original array.
    When we get a copy of the array, it gives an explicit copy of the original array.
    Therefore, the changes applied onto the copy of the array do not affect the original
    array. So let''s look at an example of copying an array:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding example, we just take a copy of the original array. For that,
    we use the `array_name.copy()` function and the output is the copy the original
    array.
  prefs: []
  type: TYPE_NORMAL
- en: Indexing a 2D array
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A 2D array is an array of arrays. In this, the position of the data element
    normally refers to two indices instead of one and it represents the table with
    rows and columns of data. Now we are going to do indexing of such a type of arrays.
  prefs: []
  type: TYPE_NORMAL
- en: 'So, let''s look at an example of a 2D array:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'In the preceding example, we created a 2D array named `td_array`. After creating
    an array, we printed `td_array`. Now we are also going to fetch the values in
    `td_array` through indexing. Let''s look at an example to access values through
    indexing:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'In the preceding example, we accessed the first index value of the array and
    we got the output. In such a type of indexing, when we access the value, we get
    the whole array. Instead of getting the whole array, we can also get access to
    particular value. Let''s look at an example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding example, we accessed `td_array` by passing two values for the
    row and column. As seen in the output, we got the value `8`.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can also set up the two-dimensional array in a different way. First, set
    our 2D array with increased length. Let''s set the length to `10`. So, for that,
    we create a sample array with all zeros in it and, after that, we are going to
    put values in it. Let''s look at an example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding example, we created one two-dimensional array with the length
    `10` by `10`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now let''s do some fancy indexing on it, as shown in the following example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding example, we fetch particular index values. So, in the result,
    we got the output.
  prefs: []
  type: TYPE_NORMAL
- en: Universal array functions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Universal functions perform the operations on all the elements in a `numpy`
    array. Now, we are going to look at an example to perform multiple universal functions
    on an array. First, we are going to take the square root of the array. Create
    a script called `sqrt_array.py` and write the following content in it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the script and you will get the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: 'The output is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: 'In the preceding example, we created one simple array using range as a function
    of `numpy`. Then we applied the `sqrt()` function on the generated array to get
    the square root of the array. After taking the square root of the array, we are
    going to apply another universal function on the array, which is the exponential
    `exp()` function. Let''s look at an example. Create a script called `expo_array.py`
    and write the following content in it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the script and you will get the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: 'The output is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding example, we created one simple array using the `range` function
    of `numpy`. Then we applied the  `exp()` function on the generated array to get
    the exponential of the array.
  prefs: []
  type: TYPE_NORMAL
- en: Pandas module
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we are going to learn about the pandas module. The pandas module
    provides fast and flexible data structures that are designed for working with
    structured and time series data. The pandas module is used for data analysis.
    The pandas module is built on packages such as NumPY and Matplotlib and gives
    us a place to do most of our analysis and visualization work in. To use the functionality
    of this module, you must import it first.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, install the following packages that we need in our examples by running
    the following commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: 'Here, we are going to look at some examples of using the pandas module. We
    will learn about two data structures: Series and DataFrames. We are also going
    to see how we can read the data from a `csv` file using pandas.'
  prefs: []
  type: TYPE_NORMAL
- en: Series
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The pandas series is a one-dimensional array. It can hold any data type. The
    labels are referred to as the index. Now, we are going to look at an example of
    series without declaring an index and series with declaring an index. First, we
    will look at an example of series without declaring an index. For that, create
    a script called  `series_without_index.py` and write the following content in
    it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the script and you will get the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: 'The output is as follows :'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: 'In the preceding example, we learned about series without declaring an index.
    First, we imported two modules: pandas and `numpy`. Next, we created the `s_data`
    object that will store the series data. In that series, we created a list and
    instead of declaring an index, we provided the name attribute, which will give
    a name to the list, and then we printed the data. In the output, the left column
    is your index for the data. Even if we never provide the index, pandas will give
    it implicitly. The index will always start from `0`. Underneath the columns is
    the name of our series and the data type of the values.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, we are going to look at an example of a series when declaring an index.
    Here we are also going to perform indexing and slicing operations. For that, create
    a script called `series_with_index.py` and write the following content in it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the script and you will get the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding example, we provided an index value for our data in the `index`
    attribute. In the output, the left column is the index values that we provided.
  prefs: []
  type: TYPE_NORMAL
- en: DataFrames
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we are going to learn about pandas DataFrames. DataFrames are
    two-dimensional labeled data structures that have columns and may be of different
    data types. DataFrames are similar to SQL tables or a spreadsheet. They are the
    most common object when working with pandas.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, we are going to look at an example of reading data from a `csv` file into
    a DataFrame. For that, you must have a `csv` file present in your system. If you
    don''t have a `csv` file in your system, create a file named `employee.csv`, as
    follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, we are going to read this `csv` file into a DataFrame. For that, create
    a script called `read_csv_dataframe.py` and write the following content in it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the script and you will get the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding example, we first created a `csv` file called `employee.csv`.
    We are using the pandas module to create data frames. The goal is to read that
    `csv` file into the DataFrame. Next, we created a `df` object and we are reading
    the contents of a `csv` file into it. Next we are printing a DataFrame. Here,
    we used the `head()` and `tail()` methods to get the particular number of lines
    of data. We specified `head(3)`, which means we are printing the first three lines
    of data. We also specified `tail(1)`, which means we are printing the last line
    of data.
  prefs: []
  type: TYPE_NORMAL
- en: Data visualization
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Data visualization is the term that describes the efforts in understanding
    the significance of data, placing it in a visual manner. In this section, we are
    going to look at the following data visualization techniques:'
  prefs: []
  type: TYPE_NORMAL
- en: Matplotlib
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Plotly
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Matplotlib
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Matplotlib is the data visualization library in Python and it allows us to generate
    plots, histograms, power spectra, bar charts, error charts, scatter plots, and
    so on, using a few lines of code. Matplotlib usually make things easier and the
    hardest things possible.
  prefs: []
  type: TYPE_NORMAL
- en: To use `matplotlib` in your Python program, first we have to install `matplotlib`.
    Run the following command in your Terminal to install `matplotlib:`
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, you have to install one more package, `tkinter`, for graphical representations.
    Install it using the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: 'Now that `matplotlib` is installed in your system, we will look at some examples.
    While plotting, there are two important components: figures and axes. The figure
    is the container that acts as the window on which everything is drawn. It can
    have various types of independent figures. The axis is the area where you can
    plot your data and any labels associated with it. Axes consist of an `x` axis
    and a `y` axis.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, we are going to look at some examples of `matplotlib`. Let''s start with
    a simple example. Create a script called `simple_plot.py` and write the following
    content in it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the script and you will get the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: 'The output is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/8d8b8572-e237-441f-8089-399fd0396d31.jpg)'
  prefs: []
  type: TYPE_IMG
- en: In the preceding example, we imported two modules, `matplotlib` and `numpy`, to
    visualize the data as well as to create the arrays *x* and *y*, respectively.
    After this, we plotted two arrays as `plt.plot(x,y)`. Then we added a title and
    labels to the plot using the `xlabel()`, `ylabel()`, and `title()` functions,
    and to display this plotting, we used the `plt.show()` function. Because we are
    using Matplotlib within a Python script, don't forget to add `plt.show()` at the
    end line to display your plot.
  prefs: []
  type: TYPE_NORMAL
- en: Now we are going to create two arrays to display two lines of curves in the
    plot and we are going to apply style to both the curves. In the following example,
    we will use the `ggplot` style to plot the graph. `ggplot` is a system used for
    creating graphics declaratively, and is based on the grammar of graphics. To plot
    `ghraph`, we just provide the data and then tell `ggplot` how to map variables
    and what graphical primitives to use, and it takes care of the details. In most
    cases, we start with the `ggplot()` style.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, create a script called `simple_plot2.py` and write the following content
    in it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the script and you will get the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: 'The output is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/09c2cf1c-e276-414d-a383-6a884b35eb22.jpg)'
  prefs: []
  type: TYPE_IMG
- en: In the preceding example, first we imported the required module, and then we
    used the `ggplot` style to plot the graph.  We created two sets of array; that
    is,  `x1`, `y1` and `x2`, `y2`. Then we used the subplot function, `plt.subplot()`,
    because it allows us to plot different things within the same canvas. You can
    also use the `plt.figure()` function instead of `plt.subplot(),` if you want to
    display these two plots on a different canvas.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, we are going to see how to plot the arrays using the `plt.figure()` function
    and save our generated figure using Matplotlib. You can save them in different
    formats, such as `png`, `jpg`, `pdf`, and so on, by using the `savefig()` method.
    We''ll save the preceding figure in a file named `my_sample_plot.jpg`. Now, we
    will look at an example. For that, create a script called `simple_plot3.py` and
    write the following content in it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the script and you will get the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: 'The output is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/a92750b5-5c24-45f9-a017-f463bba4d645.jpg)![](assets/8b8221ae-82a7-4746-a89c-5364f14e95d2.jpg)'
  prefs: []
  type: TYPE_IMG
- en: In the preceding example, we used the `plt.figure()` function to plot the things
    on a different canvas.  After that, we used the `plt.plot()` function. This function
    has different arguments, which are useful to plot the graph. In the preceding
    example, we used some of arguments; that is `x1`, `x2`, `y1`,and `y2`. These are
    the respective axis points used to plot.
  prefs: []
  type: TYPE_NORMAL
- en: Then we  used the `color` argument to provide a particular color to the graph
    line and, in the third argument, we used `linewidth`, which decides the width
    of the graph line. After that, we also used the `savefig()` method to save our
    figure in a particular image format. You can check them in your current directory
    (if you did not mention the path) where you run your Python script.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can open those images by directly accessing that directory or you can also
    use following method to open those generated images using `matplotlib`. Now, we
    will look at an example to open saved figures. For that, create a script called `open_image.py`
    and write the following content in it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the script and you will get the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: 'The output is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/5f61279d-d859-4627-9969-958d6ba9cd1a.jpg)'
  prefs: []
  type: TYPE_IMG
- en: In the preceding example, we used the `imshow()` function of Matplotlib to open
    the saved image of the figure.
  prefs: []
  type: TYPE_NORMAL
- en: Now, we will look at different types of plots. Matplotlib allows us to create
    different types of plots to deal with data in arrays, such as histograms, scatter
    plots, bar charts, and so on. The use of different kinds of plots depends on the
    purpose of the data visualization. Let's look at some of these plots.
  prefs: []
  type: TYPE_NORMAL
- en: Histograms
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This type of plot helps us to examine the distribution of  numerical data in
    such a way that you are unable to make do with mean or median alone. We are going
    to use the `hist()` method to create a simple histogram. Let''s look at an example
    to create a simple histogram. For that, create a script called `histogram_example.py`
    and write the following content in it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the script and you will get the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs: []
  type: TYPE_PRE
- en: 'The output is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/eb702ea3-c0ab-469d-8aa9-07e1dd69fd78.jpg)'
  prefs: []
  type: TYPE_IMG
- en: In the preceding example, we created an array of random numbers using `numpy`.
    Then we plotted that numerical data using the `plt.hist()` method.
  prefs: []
  type: TYPE_NORMAL
- en: Scatter plots
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This type of plot shows us the data as a collection of points. It offers a
    convenient way to visualize how numeric values are related. It also helps us to
    understand the relationships between multiple variables. We are going to use the `scatter()`
    method to plot the data in a scatter plot. In a scatter plot, the position of
    points depends on its `x` and `y` axis values; that is, two-dimensional values,
    so each value in a dataset is a position in either the horizontal or the vertical
    dimension. Let''s look at an example of a scatter plot. Create a script called `scatterplot_example.py`
    and write the following content in it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the script and you will get the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs: []
  type: TYPE_PRE
- en: 'The output is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/985d2b20-6987-46b5-a513-fcd962fd61de.jpg)'
  prefs: []
  type: TYPE_IMG
- en: In the preceding example, we got values of `x` and `y`. Then we plotted those
    values using the `plt.scatter()` method to get a scatter plot for the `x` and
    `y` values.
  prefs: []
  type: TYPE_NORMAL
- en: Bar charts
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'A bar chart is a chart that represents your data in rectangular bars. You can
    plot them vertically or horizontally. Create a script called  `bar_chart.py` and
    write the following content in it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the script and you will get the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE63]'
  prefs: []
  type: TYPE_PRE
- en: 'The output is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/692d75ea-6b6f-4e8b-8290-2f3c9c654f2b.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'In the preceding example, we have two sets of values: `x1`, `y1` and `x2`,
    `y2`. After getting the numerical data, we used the `plt.bar()` method to plot
    the bar chart for the present data.'
  prefs: []
  type: TYPE_NORMAL
- en: There are multiple techniques available to plot the data. Among them, there
    are a few techniques or methods of data visualization using `matplotlib`, which
    we have seen. We can also perform such operations using another tool of data visualization: `plotly`.
  prefs: []
  type: TYPE_NORMAL
- en: Plotly
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Plotly is an interactive, open source graphing library in Python. It is a charting
    library that provides over 30 chart types, such as scientific charts, 3D graphs,
    statistical charts, financial charts, and more.
  prefs: []
  type: TYPE_NORMAL
- en: 'To use `plotly` in Python, first we have to install it in our system. To install
    `plotly`, run the following command in your Terminal:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE64]'
  prefs: []
  type: TYPE_PRE
- en: 'We can use `plotly` online as well as offline. For online usage, you need to
    have a `plotly` account and after that you need to set up your credentials in
    Python:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE65]'
  prefs: []
  type: TYPE_PRE
- en: To use `plotly` offline, we need to use the `plotly` function:  `plotly.offline.plot()`
  prefs: []
  type: TYPE_NORMAL
- en: 'In this section, we are going to use plotly offline. Now, we are going to look
    at a simple example. For that, create a script called `sample_plotly.py` and write
    the following content in it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE66]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the preceding script as `sample_plotly.py`. You will get the following
    output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE67]'
  prefs: []
  type: TYPE_PRE
- en: 'The output is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/d639864a-5006-48d1-bbc5-9772566cc3b5.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'In the preceding example, we imported the `plotly` module and then we set `plotly`
    for offline use. We put arguments in it, which are useful to plot a graph. In
    the example, we used some of arguments: `data` and `layout`. In the `data` argument,
    we define the scatter function with `x` and `y` arrays, which have values to plot
    over the `x` and `y` axes, respectively. Then we use the `layout` argument, in
    which we define the layout function to provide the title for the graph. The output
    of the preceding program is saved as an HTML file and gets opened in your default
    browser. This HTML file is in the same directory as your script.'
  prefs: []
  type: TYPE_NORMAL
- en: Now let's look at some different types of charts for visualizing the data. So,
    first, we are going to start with the scatter plot.
  prefs: []
  type: TYPE_NORMAL
- en: Scatter plots
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Create a script called `scatter_plot_plotly.py` and write the following content
    in it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE68]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the script and you will get the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE69]'
  prefs: []
  type: TYPE_PRE
- en: 'The output is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/728d2983-9f6e-4a22-8a99-1ce9a9e585bd.jpg)'
  prefs: []
  type: TYPE_IMG
- en: In the preceding example, we imported `plotly` and then created random data
    by using `numpy` and, for that, import the `numpy` module in your script. After
    generating the dataset, we created one object named `trace` and inserted our numerical
    data in it to be scattered. Then, finally, we place the data in the `trace` object
    into the `plotly.offline.plot()` function to get the scatter plot of data. Like
    our first sample graph, the output of this example is also saved in HTML format
    and displayed in your default web browser.
  prefs: []
  type: TYPE_NORMAL
- en: Line scatter plots
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We can also create some more informative plots, such as a line scatter plot.
    Let''s look at an example. Create a script called `line_scatter_plot.py` and write
    the following content in it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE70]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the script and you will get the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE71]'
  prefs: []
  type: TYPE_PRE
- en: 'The output is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/61d2fa81-8592-4c5a-95ad-d68670ca8126.jpg)'
  prefs: []
  type: TYPE_IMG
- en: In the preceding example, we imported `plotly`, as well as the `numpy` module.
    Then we generated some random values for the  x-axis and also for three different
    y-axes. After that, we put that data in the created `trace` object and, finally,
    put that dataset in plotly's offline function. Then we get the output in the format
    of scatter as well as line. The output file of this example is saved with the
    name `line_scatter_plot.html` in your current directory.
  prefs: []
  type: TYPE_NORMAL
- en: Box plots
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The box plot is usually informative and also helpful, especially when you have
    too much to show with very less data. Let''s look at an example. Create a script
    called `plotly_box_plot.py` and write the following content in it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE72]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the script and you will get the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE73]'
  prefs: []
  type: TYPE_PRE
- en: 'The output is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/976d4c5a-f03e-4eb3-93d3-39456e5e1a92.jpg)'
  prefs: []
  type: TYPE_IMG
- en: In the preceding example, we imported `plotly`, as well as the `numpy` module.
    Then we declared N as the total number boxes in the box plot and generated an
    array of rainbow colors by fixing the saturation and lightness of the HSL representation
    of color and marching around the hue. Each box is represented by a dictionary
    that contains the data, the type, and the color. We use list comprehension to
    describe N boxes, each with a different color and with different randomly generated
    data. After that, we format the layout of the output and plot the data through
    the offline `plotly` function.
  prefs: []
  type: TYPE_NORMAL
- en: Contour plots
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The contour plot is most commonly used as a scientific plot and used a lot
    while showing heat map data. Let''s look at an example of a contour plot. Create
    a script called `contour_plotly.py` and write the following content in it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE74]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the script and you will get the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE75]'
  prefs: []
  type: TYPE_PRE
- en: 'The output is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/5ddc9f4d-947e-426e-ad4a-a6fa45c5a213.jpg)'
  prefs: []
  type: TYPE_IMG
- en: In the preceding example, we took a dataset and applied the `contour()` function
    on it. Then we appended that contour data in `data_set` and, finally, applied
    the `plotly` function on the data to get the output. These are some techniques
    from plotly to plot data in a visual manner.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we learned about the NumPY and Pandas modules, as well as
    data visualization techniques. In the NumPY module section, we learned about indexing
    and slicing the array and the universal array function. In the pandas module section,
    we learned about Series and DataFrames. We also learned how to read a `csv` file
    into a DataFrame. In data visualization, we learned about the  libraries in Python,
    which are used for data visualization: `matplotlib` and `plotly`.'
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, you will learn about MySQL and SQLite database administrations.
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: What is a NumPy array?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What is the output of the following code snippet?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE76]'
  prefs: []
  type: TYPE_PRE
- en: How do you sum a small array faster than `np.sum`?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How do you delete indices, rows, or columns from a Pandas DataFrame?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How do you write a Pandas DataFrame to a file?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What is NaN in pandas ?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How do you remove duplicates from a pandas DataFrame ?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How do you change the size of figures drawn with Matplotlib?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What are the alternatives available for plotting graphs using Python ?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 10 minutes to pandas documentation: [https://pandas.pydata.org/pandas-docs/stable/](https://pandas.pydata.org/pandas-docs/stable/)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: NumPy tutorial: [https://docs.scipy.org/doc/numpy/user/quickstart.html](https://docs.scipy.org/doc/numpy/user/quickstart.html)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Graph plotting using plotly: [https://plot.ly/d3-js-for-python-and-pandas-charts/](https://plot.ly/d3-js-for-python-and-pandas-charts/)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
