- en: Setting Up Our Chat App - AWS Amplify Environment and GraphQL
  prefs: 
  - PREF_H1
  type: TYPE_NORMAL
- en: Since Facebook presented GraphQL in 2012, it has taken over the web like a hurricane.
    Huge companies started to adopt it, while small and medium companies have seen
    the potential of this query-based API.
  prefs: []
  type: TYPE_NORMAL
- en: It looks strange at first, but as you start to read and experience more of it,
    you don't want to use REST APIs anymore. The simplicity and data fetching capabilities
    made the lives of frontend developers easier, because they can fetch only what
    they want, and are not tied to an endpoint that delivers only a piece of single
    information.
  prefs: []
  type: TYPE_NORMAL
- en: This is the beginning of a long recipe, where all the recipes are bound to form
    a complete chat app, but you can learn about GraphQL and AWS Amplify in the recipes
    without needing to code the whole chapter.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we will learn more about the AWS Amplify environment and GraphQL,
    and how we can add it to our application and make it available as a communication
    driver.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we''ll cover the following recipes:'
  prefs: []
  type: TYPE_NORMAL
- en: Creating your AWS Amplify environment
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating your first GraphQL API
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding the GraphQL client to your application
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating the AWS Amplify driver for your application
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we will be using **Node.js**, **AWS Amplify**,and **Quasar
    Framework**.
  prefs: []
  type: TYPE_NORMAL
- en: 'Attention, Windows users! You need to install an NPM package called `windows-build-tools`
    to be able to install the required packages. To do it, open PowerShell as an administrator
    and execute the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '`> npm install -g windows-build-tools`'
  prefs: []
  type: TYPE_NORMAL
- en: 'To install **Quasar Framework**, you need to open the Terminal (macOS or Linux)
    or the Command Prompt/PowerShell (Windows) and execute the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'To install **AWS Amplify**, you need to open the Terminal (macOS or Linux)
    or the Command Prompt/PowerShell (Windows) and execute the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Creating your AWS Amplify environment
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: With the help of AWS Amplify, we can create a backend environment that is ready
    in minutes, with a NoSQL database, GraphQL resolvers, and an online bucket for
    us to deploy our application to after the development.
  prefs: []
  type: TYPE_NORMAL
- en: To create the Vue application, we will be using the Quasar Framework. It's a
    Vue-based framework that provides all the tools, structures, and components needed
    to develop the application.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we will learn how to create our AWS account, configure the AWS
    Amplify environment locally, and create our initial project with Quasar Framework.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The prerequisite for this recipe is Node.js 12+.
  prefs: []
  type: TYPE_NORMAL
- en: 'The Node.js global objects that are required are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`@aws-amplify/cli`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`@quasar/cli`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We will split our tasks in this recipe into four parts: creating an AWS account,
    configuring AWS Amplify, creating your Quasar project, and initializing the AWS
    Amplify project.'
  prefs: []
  type: TYPE_NORMAL
- en: Creating an AWS account
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Here we will learn how to create an account on the AWS portal, so we can get
    access to the AWS console:'
  prefs: []
  type: TYPE_NORMAL
- en: Go to [https://aws.amazon.com](https://aws.amazon.com).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: On the website, click on the Create an AWS Account button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Choose to create a Professional account or a Personal account (as we are going
    to be exploring the platform and developing example applications for ourselves,
    it's better to go with the Personal account).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now Amazon will ask for payment information in case your usage exceeds the Free
    Tier limits.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: It's time to confirm your identity – you need to provide a valid phone number
    that Amazon will use to send you a PIN code that you need to input.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: After you have received the PIN code, you will see a success screen and a Continue button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now you need to select a plan for your account; you can choose the Basic Plan option
    for this recipe.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now you are done, and you can log in to your Amazon AWS account console.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Configuring AWS Amplify
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Let''s configure our local AWS Amplify environment to prepare us to start the
    development of our chat application:'
  prefs: []
  type: TYPE_NORMAL
- en: 'To set up AWS Amplify, you need to open the Terminal (macOS or Linux) or the Command
    Prompt/PowerShell (Windows) and execute the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: The browser will open, and you will need to log in to your AWS Console account.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: After you have logged in, go back to the Terminal and press *Enter*. The CLI
    will ask you to select the server region where you want your application to be
    executed. It's recommended to run on `us-east-1`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: After selecting the region, the CLI will ask you to define a username for **Identity
    and Access Management** (**IAM**). You can use the default one by pressing *Enter* or
    type the one that you want (however, it must be unique).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now the browser will open to define the user details on the user that you have
    designated. Click on the Next: Permissions button to go to the next screen.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Click on the *Next: Tags* button to go to the AWS tags screen. On this screen,
    click on the Next: Review button to review the settings you defined.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now you can click on the Create user button to create the user and go to the
    **Access Key** screen.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Finally, on this screen, wait for the access key ID and secret access key to
    be available. Copy the access key ID on the browser, paste it into the Terminal,
    and press *Enter*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: After pasting the access key ID, you must go back to the browser, click on the Show link
    on the secret access key, copy the value, paste it into the Terminal, and press *Enter*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Finally, you will need to define the AWS profile name (you can use the default
    by pressing *Enter*).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You have now set up the AWS Amplify environment on your machine.
  prefs: []
  type: TYPE_NORMAL
- en: Creating your Quasar project
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Now we will create the Quasar Framework project that will be our chat application:'
  prefs: []
  type: TYPE_NORMAL
- en: 'To create your Quasar Framework application, you need to open the Terminal (macOS
    or Linux) or the Command Prompt/PowerShell (Windows) and execute the following
    command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'The Quasar CLI will ask for the project name; it needs to be a valid npm package
    name:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'The CLI will ask for the product name (commonly used for **Progressive Web
    Applications** (**PWAs**), hybrid mobile apps, and Electron applications):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'After that, the CLI will ask for the project description, and this will be
    used in the hybrid app and PWA:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Now the CLI will ask for the author of the project. Usually, it''s the one
    that your npm or Git has configured:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Now you can choose a CSS preprocessor. We will choose `Stylus`(you can select
    the one that fits you the best):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Quasar has two ways of importing the components, directives, and plugins into
    the build system. You can do it manually by declaring it in `quasar.conf.js`,
    or automatically by importing the components, directives, and plugins you used
    on your code. We will use the auto-import method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Now we have to choose the default features that will be added to the project;
    we will select `ESLint`, `Vuex`, `Axios`, and `Vue-i18n`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Now you can select the `ESLint` preset that you want to use on your project;
    in this case, we will select `AirBnB`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'You will need to define a Cordova/Capacitor ID (even if you are not building
    a hybrid app, you can go with the default):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, you can pick the package manager you want to run, and install the
    packages that you need to run your code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Initializing the AWS Amplify project
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'To initialize your AWS Amplify project, implement the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the Terminal (macOS or Linux) or the Command Prompt/PowerShell (Windows),
    enter the project folder, and execute the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'The Amplify CLI will ask for the project name:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, you will need to define an environment for the current project that you
    are running on your machine:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'Now you can choose the default editor that you''ll use on your projects:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'You have to decide what type of project will be hosted by AWS Amplify. In our
    case, this will be a JavaScript app:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'For the framework, as we are going to use Quasar Framework as the base, we
    need to choose `none` from the list of the presented frameworks:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'You will have to define the source path of the application; you can leave the
    Source Directory Path as the default value, `src`. Then press *Enter *to continue:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'For the distribution directory, as Quasar uses a different kind of path organization,
    we will need to define it as `dist/spa`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'For the build command that AWS Amplify will use to run before deployment, we
    will define it as `quasar build`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'For the start command, we need to use Quasar''s built-in `quasar dev` command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'For Windows users, because of Amplify and WSL incompatibilities, you may need
    to define the start command as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'Now the CLI will ask if we want to use a local AWS profile for this configuration:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'We will choose the default profile that we created earlier:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'After the CLI has finished the initialization process, we will need to add
    hosting to the project. To do this, you need to open the Terminal (macOS or Linux)
    or the Command Prompt/PowerShell (Windows), enter the project folder, and execute the
    following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'The CLI will ask you for the hosting process of your application. Choose the
    `Hosting with Amplify Console`, and press *Enter* to continue:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'Then the CLI will ask you how the deployment process will occur; choose `Manual
    deployment`, and press *Enter* to continue:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'When you have done everything, to finish this process you will need to publish
    it. Open the Terminal (macOS or Linux) or the Command Prompt/PowerShell (Windows), enter
    the project folder, and execute the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'You will be asked if you want to continue with publishing, which you can accept.
    After everything is done, the browser will open with the default Quasar Framework
    home page:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/bb0ed845-562a-45b8-bb24-0ced0a643194.png)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: AWS Amplify is an all-in-one solution for web developers that offers a whole
    set of tools, from hosting the application to the backend development.
  prefs: []
  type: TYPE_NORMAL
- en: We were capable of building an application and putting it online quickly and
    effortlessly, encountering no problems with infrastructure at all.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we manage to create our AWS account and create our first AWS
    Amplify environment for development locally and ready for deployment on the web.
    Also, we were able to create our Quasar Framework project that will be used as
    the chat application and deploy it to the web in the AWS infrastructure to prepare
    for future releases of the application.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You can find more information about AWS Amplify at [https://aws.amazon.com/amplify/](https://aws.amazon.com/amplify/).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You can find more information about the AWS Amplify framework at [https://docs.amplify.aws/](https://docs.amplify.aws/).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You can find more information about Quasar Framework at [https://quasar.dev/](https://quasar.dev/).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating your first GraphQL API
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: AWS Amplify provides the possibility to have a GraphQL API out of the box with
    simple steps and lots of additional options including authentication, deployments,
    and environments. This provides us with the ability to develop an API fast with
    just a GraphQL SDL schema, and AWS Amplify will build the API, DynamoDB instance,
    and the proxy server for the connection.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we will learn how to create a GraphQL API using AWS Amplify
    and add AWS Cognito functionality for authentication.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The prerequisites for this recipe are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: The previous recipe's project
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Node.js 12+
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Node.js global object that is required is `@aws-amplify/cli`.
  prefs: []
  type: TYPE_NORMAL
- en: 'To install AWS Amplify, you need to open the Terminal (macOS or Linux) or the Command
    Prompt/PowerShell (Windows) and execute the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: In this recipe, we will use the project from the *Creating your AWS Amplify
    Environment* recipe. Please complete the instructions in that recipe first.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To start our GraphQL API, we will continue with the project that was created
    in the *Creating your AWS Amplify environment* recipe.
  prefs: []
  type: TYPE_NORMAL
- en: 'This recipe will be divided into two parts: the creation of AWS Cognito and
    the creation of the GraphQL API.'
  prefs: []
  type: TYPE_NORMAL
- en: Creating the AWS Cognito authentication
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'To add a layer of security to our API and application, we will use the AWS
    Cognito service. This will provide control over the users and authentication as
    a service:'
  prefs: []
  type: TYPE_NORMAL
- en: 'To initialize your AWS Cognito configuration, you need to open the Terminal (macOS
    or Linux) or the Command Prompt/PowerShell (Windows), enter the project folder,
    and execute the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'Now the CLI will ask you to choose the type of configuration for the creation
    of the Cognito service. These are a selection of pre-made rules and configurations
    for the service. We will choose `Default configuration`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'After that, you need to select how the users will be able to sign in; as we
    are building a chat app, we will choose `Email`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: 'There is no need to choose more advanced settings for AWS Cognito. We can skip
    this step by selecting `No, I am done.`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, we need to push this configuration to the cloud. To do so, you need to
    open the Terminal (macOS or Linux) or the Command Prompt/PowerShell (Windows),
    enter the project folder, and execute the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: 'You will be asked if you want to continue – type `y`, and the CLI will publish
    the configurations to the AWS Cognito cloud:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: Creating the GraphQL API
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In this part, we will divide the instructions into two parts, first creating
    the GraphQL SDL schema and then creating the GraphQL API.
  prefs: []
  type: TYPE_NORMAL
- en: Creating the GraphQL SDL schema
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'To create a GraphQL API with AWS Amplify, first, we need to create a GraphQL
    SDL schema. AWS Amplify will use the schema to generate the database and the resolvers
    for the API:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a new file called `chatApi.graphql` in the `src` folder, and open it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create our basic `S3Object` schema type, a simple model for managing the storage
    of files placed in AWS S3 buckets:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: 'Then we will create our `type User`. This is like a database model, but with
    more rules attached. This `type` will have an `@auth` rule that only allows the
    owner, in this case, the `User`, to perform the `create`, `update`, and `delete` operations.
    After that, we will declare the `User` fields:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: 'Our `User` will have a conversation with another user. We will create a `type
    Conversation`, and to secure this conversation, we will add an `@auth` rule to
    ensure that only the members of this conversation can see the messages exchanged
    between users. In the `messages` field, we will create a `@connection` with `type
    Message`, and in the associated field we will create a `@connection` with `type
    ConversationLink`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: 'For the `type Message`, we need to add an `@auth` decorator rule that allows
    only the owner to command it. We need to create a `@connection` decorator of the `author` field
    to `type User`, and a `@connection` decorator of the `conversation` field to `type
    Conversation`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: 'Now we are linking the conversations together with `type ConversationLink`.
    This `type` requires the `user` field to have a `@connection` decorator to the ` User` and
    the `@connection` conversation to `type Conversation`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, we need to create a `type Subscription` to have an event handler inside
    the GraphQL API. The `Subscription` type listens for and handles changes on specific
    mutations, `createConversationLink`, and `createMessage`, and both will trigger
    an event inside the database:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: Creating the GraphQL API with AWS Amplify
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Here we will create our GraphQL API using the GraphQL schema that was created
    in the previous recipe, using the AWS Amplify API:'
  prefs: []
  type: TYPE_NORMAL
- en: 'To initialize your AWS Amplify API configuration, you need to open the Terminal (macOS
    or Linux) or the Command Prompt/PowerShell (Windows), enter the project folder,
    and execute the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: 'Here the CLI will ask what type of API you want to create. We will choose `GraphQL`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: 'Now the CLI will ask for the API name (which you can choose):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: 'Here we will select the authentication method that the API will use. As we
    will be using AWS Cognito, we need to select the `Amazon Cognito User Pool` option:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: 'Then the CLI will ask if you want to configure more settings on the API; we
    will choose the `No, I am done.`option:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: 'Now we will be asked if we have an annotated GraphQL schema; as we have written
    one before, we need to type `y`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: 'Here we need to type the path to the file we have just created, `./src/chatApi.graphql`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: 'After this is done, we need to push the configuration to AWS Amplify. To do
    this you need to open the Terminal (macOS or Linux) or the Command Prompt/PowerShell (Windows),
    enter the project folder, and execute the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: 'When asked if you want to continue, type `y`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: 'The CLI will ask if you''re going to generate the code for the newly created
    GraphQL API; type `y` again:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: 'Here you can choose in which language you want the CLI to create the communication
    files for use in the project. We will select `javascript`, but you can choose
    the one that fits your needs the most:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: 'The CLI will ask where to place the files that will be generated, and we will
    go with the default values:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: 'Now the CLI will ask about the generation of the GraphQL operations. As we
    are creating our first GraphQL API, we will choose `y` so the CLI will create
    all the files for us:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, we can define the maximum depth of the schema in the files, and we
    will go with the default value, `2`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: 'When you have everything done, we need to publish the configuration to AWS
    Amplify. To do this you need to open the Terminal (macOS or Linux) or the Command
    Prompt/PowerShell (Windows), enter the project folder, and execute the following
    command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In the process of creating a GraphQL API with AWS Amplify, we needed a pre-built
    schema that was used to generate the database and the endpoints. This schema is
    based on the GraphQL SDL language. Amplify has added more decorators to the SDL
    so we could have a broader range of possibilities in the development of the API.
  prefs: []
  type: TYPE_NORMAL
- en: In the meantime, we needed to create an AWS Cognito user pool, to hold the users
    that will be registered on the application. This is done to manage and maintain
    the authentication layer outside of our application and is used as a service,
    giving the possibility to have many more features including two-factor authentication,
    required fields, and recovery modes.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, after everything is done, we had our API published on AWS Amplify and
    ready for development, with a URL that can be used as a development environment.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You can find more information about GraphQL SDL at [https://graphql.org/learn/schema/](https://graphql.org/learn/schema/).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You can find more information about the AWS Amplify API at [https://docs.amplify.aws/lib/graphqlapi/getting-started/q/platform/js](https://docs.amplify.aws/lib/graphqlapi/getting-started/q/platform/js).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You can find more information about AWS Amplify authentication at [https://docs.amplify.aws/lib/auth/getting-started/q/platform/js](https://docs.amplify.aws/lib/auth/getting-started/q/platform/js).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding the GraphQL client to your application
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Apollo Client is currently the best GraphQL client implementation in the JavaScript
    ecosystem. It has a large community behind it and has a big company supporting
    it.
  prefs: []
  type: TYPE_NORMAL
- en: Our implementation of the AWS Amplify GraphQL API uses Apollo Server on the
    backend, so the usage of Apollo Client will be a perfect match. AWS AppSync uses
    their implementation of Apollo as the client also, so we will still be using Apollo
    as a client as well, but not directly.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we will learn how to add the GraphQL client to our application,
    along with how to connect to the AWS Amplify GraphQL server to execute queries.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The prerequisite for this recipe is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: The previous recipe's project
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Node.js 12+
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The Node.js global objects that are required are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`@aws-amplify/cli`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`@quasar/cli`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In this recipe, we will use the project from the *Creating your first GraphQL
    API* recipe. Before following this recipe, please follow the steps in that previous
    recipe.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We will add the GraphQL client to our application using the Amplify client.
    Follow these steps to create the GraphQL driver:'
  prefs: []
  type: TYPE_NORMAL
- en: 'To install the packages needed to use the GraphQL client, you need to open
    the Terminal (macOS or Linux) or the Command Prompt/PowerShell (Windows) and execute the
    following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs: []
  type: TYPE_PRE
- en: Create a new file called `amplify.js` in the `boot` folder, and open it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In this file, we will import the `aws-amplify` package and the `aws-exports.js` file
    that the AWS Amplify CLI created for us in the configuration process. We will
    configure Amplify with the configurations we have. In order for the Quasar boot
    file to work, we need to export a `default` empty function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs: []
  type: TYPE_PRE
- en: 'In the `quasar.conf.js` file in the `root` folder, we need to add new rules
    to the `webpack` bundler. To do it, locate the `extendWebpack` function. After
    the first line of the function creates two new rules to the bundler, the first
    rule will add the `graphql-loader` webpack loader and a second rule will allow
    the bundler to understand `.mjs` files:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs: []
  type: TYPE_PRE
- en: Now, create a new file called `graphql.js` in the `src/driver` folder, and open
    it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In this file, we need to import the `AWSAppSyncClient` from the `aws-appsync` package, `Auth` from
    the `aws-amplify` package, and `AwsExports` from the `aws-exports.js` file located
    in the `src` folder. Then we need to instantiate `AWSAppSyncClient` with the configurations
    of `aws-exports`, and export this instantiation of the client:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs: []
  type: TYPE_PRE
- en: 'In the `quasar.conf.js` file in the `root` folder, we need to add the newly
    created `amplify.js` file, located in the `boot` folder, to the boot sequence.
    To do it, locate the `boot` array, and add on the end the direction of the file
    inside of the `boot` folder as a string, without the extension. In our case, this
    will be `''amplify''`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE63]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We added the `aws-amplify` package to our application in the global scope and
    made it available for use through an exported entry in the new `graphql.js` file.
    This made it possible to use `AWSAmplifyAppSync` in the application.
  prefs: []
  type: TYPE_NORMAL
- en: Using the Quasar Framework boot process, we were able to instantiate Amplify
    before the Vue application started rendering on screen.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You can find more information about AWS Amplify AppSync at [https://docs.amplify.aws/lib/graphqlapi/getting-started/q/platform/js](https://docs.amplify.aws/lib/graphqlapi/getting-started/q/platform/js).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You can find more information about Quasar Framework boot files at [https://quasar.dev/quasar-cli/developing-ssr/writing-universal-code#Boot-Files](https://quasar.dev/quasar-cli/developing-ssr/writing-universal-code#Boot-Files).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating the AWS Amplify driver for your application
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To communicate with AWS Amplify services, we will need to use their SDKs. This
    process is repetitive and can be merged into a driver for each of the Amplify
    services we will be using.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we will learn how to create communications drivers, and how
    to do it with AWS Amplify.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The prerequisites for this recipe are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: The previous recipe's project
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Node.js 12+
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The Node.js global objects that are required are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`@aws-amplify/cli`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`@quasar/cli`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In this recipe, we will use the project from the *Adding the GraphQL Client
    to your application* recipe. Please complete the instructions in that recipe first.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this recipe, we will split it into three parts: the first will be for the
    AWS Storage driver, the second part will be for the Amplify Auth driver, and finally,
    we''ll see the creation of the Amplify AppSync instance.'
  prefs: []
  type: TYPE_NORMAL
- en: Creating the AWS Amplify Storage driver
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: To create the AWS Amplify Storage driver, we will need first to create the AWS
    Amplify Storage infrastructure and have it set up in our environment, after which
    we need to create the communication driver between the AWS Amplify Storage SDK
    and our application.
  prefs: []
  type: TYPE_NORMAL
- en: Adding AWS Amplify Storage
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'In this part, we will add AWS S3 functionality to our Amplify services list.
    This is needed so we can save files on the AWS S3 cloud infrastructure:'
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we need to add AWS Storage to the project. To do so, you need to open
    the Terminal (macOS or Linux) or the Command Prompt/PowerShell (Windows), enter
    the project folder and execute the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE64]'
  prefs: []
  type: TYPE_PRE
- en: 'Now we need to select what content will be uploaded. We need to choose `Content
    (Images, audio, video, etc.)`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE65]'
  prefs: []
  type: TYPE_PRE
- en: 'We need to add a name for the resource. We will call it `bucket`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE66]'
  prefs: []
  type: TYPE_PRE
- en: 'Now we need to provide an AWS S3 bucket name. We will call it `chatappbucket`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE67]'
  prefs: []
  type: TYPE_PRE
- en: 'Then we need to select who can manipulate the bucket files. As the application
    is going to be based on authorization only, we need to choose `Auth users only`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE68]'
  prefs: []
  type: TYPE_PRE
- en: 'Now you need to select the level of access the user has in the bucket:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE69]'
  prefs: []
  type: TYPE_PRE
- en: 'When asked about creating custom Lambda Triggers, choose `n`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE70]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, we need to push the changes to the cloud. To do so you need to open
    the Terminal (macOS or Linux) or the Command Prompt/PowerShell (Windows), enter
    the project folder, and execute the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE71]'
  prefs: []
  type: TYPE_PRE
- en: 'When you have everything done, we need to publish the configuration to AWS
    Amplify. To do so you need to open the Terminal (macOS or Linux) or the Command
    Prompt/PowerShell (Windows), enter the project folder, and execute the following
    command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE72]'
  prefs: []
  type: TYPE_PRE
- en: Creating the Amplify Storage driver
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'In this part, we will create the driver to communicate with Amplify Storage.
    This driver will handle file uploads in our application:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a new file called `bucket.js` in the `src/driver` folder and open it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Import the `Storage` class from the `aws-amplify` package, the `uid` function
    from `quasar`, and `AwsExports`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE73]'
  prefs: []
  type: TYPE_PRE
- en: 'Create an asynchronous function called `uploadFile`, which receives three arguments: `file`, `name`,
    and `type`. The `name` argument has a default value of `uid()` and the `type` argument
    has a default value of `''image/png''`. In this function, we will call the `Storage.put` function,
    passing `name` and `file` as parameters, and as the third parameter we will pass
    a JavaScript object with the `contentType` property defined as the received `type`,
    and an `accept` property defined as `''**/**''`. After the upload is completed,
    we will return a JavaScript object with the properties of `bucket`, `region`,
    and `uploadedFile` destructed:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE74]'
  prefs: []
  type: TYPE_PRE
- en: 'Create an asynchronous function called `getFile` that receives the argument
    of `name` with the default value of an empty string. Inside of the function, we
    will return `Storage.get`, passing the `name` parameter and the option set to
    the `public` level:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE75]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, export a default JavaScript object and add the created functions,
    `uploadFile` and `getFile`, as the properties:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE76]'
  prefs: []
  type: TYPE_PRE
- en: Creating the Amplify Auth driver
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Now we will create the authentication driver. This driver is responsible for
    handling all the authentication requests on our application and fetching the users''
    information:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a new file called `auth.js` in the `src/driver` folder and open it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the newly created file, import the `Auth` class from the `aws-amplify` package:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE77]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a new asynchronous function called `signIn`. It will receive `email` and `password` as
    arguments, and the function will return the `Auth.signIn` function, passing `email` and `password` as
    parameters:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE78]'
  prefs: []
  type: TYPE_PRE
- en: Create a new asynchronous function called `signUp`, which will receive `email` and `password` as
    arguments. The function will return the `Auth.signUp` function, passing as a parameter
    a JavaScript object with these properties: `username`, `password`, `attributes`,
    and `validationData`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The `username` property will be the `email` value that it received as an argument.
  prefs: []
  type: TYPE_NORMAL
- en: The `password` property will be the `password` value that it received as an
    argument.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `attributes` property will be a JavaScript object with the `email` property,
    which will be the one received as the argument:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE79]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a new asynchronous function called `validateUser`, which will receive `username` and `code` as
    arguments. The function waits for the response of the `Auth.confirmSignUp` function,
    passing `username` and `code` to that function as parameters, and returning `true` when
    it''s finished:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE80]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a new asynchronous function called `resendValidationCode`, which will
    receive `username` as an argument. The function returns the `Auth.resendSignUp` function,
    passing `username` as a parameter:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE81]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a new asynchronous function called `signOut`, which returns the `Auth.signOut` function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE82]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a new asynchronous function called `changePassword`, which will receive `oldPassword` and `newPassword` as
    arguments. The function waits to fetch the currently authenticated user, and returns
    the `Auth.changePassword` function, passing as parameters the fetched `user`, `oldPassword`,
    and `newPassword`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE83]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a new asynchronous function called `getCurrentAuthUser`; the function
    will fetch the currently authenticated user and returns a JavaScript object with
    the properties of `id`, `email`, and  `username`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE84]'
  prefs: []
  type: TYPE_PRE
- en: Creating the Amplify AppSync instance
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'To communicate with the AWS Amplify API while authenticated, we need to create
    a new instance of the AWS Amplify AppSync API that has the user authentication
    information:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a new file called `appsync.js` in the `src/driver` folder and open it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the newly created file, import `Auth` and `API` from the `aws-amplify` package,
    the `GRAPHQL_AUTH_MODE` enum from the `@aws-amplify/api` package, and the AWS
    configurations:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE85]'
  prefs: []
  type: TYPE_PRE
- en: Configure the API from the `aws-amplify` package by executing the `API.configure` function,
    passing as a parameter a JavaScript object, with the properties of `url`, `region`,
    and `auth`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the `url` property, pass the configuration for the GraphQL endpoint URL.
  prefs: []
  type: TYPE_NORMAL
- en: In the `region` property, pass the configuration for the AWS region that is
    currently in use.
  prefs: []
  type: TYPE_NORMAL
- en: In the `auth` property, we need to pass a JavaScript object with two properties, `type` and `jwtToken`.
  prefs: []
  type: TYPE_NORMAL
- en: We need to set the `type` property as `GRAPHQL_AUTH_MODE.AMAZON_COGNITO_USER_POOLS`.
  prefs: []
  type: TYPE_NORMAL
- en: 'In `jwtToken`, we will pass an asynchronous function that will return the token
    for the currently logged-in user:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE86]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, we will export the `API` as a constant named `AuthAPI`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE87]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this recipe, we learned how to separate the responsibilities of your application
    into drivers that can be reused in multiple areas without needing to rewrite the
    entire code. With this process, we were able to create a driver for Amplify Storage
    that could send files asynchronously, and those files were saved in our bucket
    on the AWS S3 servers.
  prefs: []
  type: TYPE_NORMAL
- en: In our work on the Auth driver, we were able to create a driver that could manage
    the Amplify Authentication SDK and provide the information when needed and wrapped
    special functions to make it easier to execute tasks in our application.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, in the Amplify AppSync API, we managed to instantiate the API connector
    with all the authentication headers that are needed so the application can be
    executed without any problem, and the user can have access to all the information
    when requested.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Find more information about AWS Amplify Storage at [https://docs.amplify.aws/lib/storage/getting-started/q/platform/js](https://docs.amplify.aws/lib/storage/getting-started/q/platform/js).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Find more information about AWS Amplify Auth at [https://docs.amplify.aws/lib/auth/getting-started/q/platform/js](https://docs.amplify.aws/lib/auth/getting-started/q/platform/js).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Find more information about AWS Amplify AppSync at[ https://docs.amplify.aws/lib/graphqlapi/getting-started/q/platform/js](https://docs.amplify.aws/lib/graphqlapi/getting-started/q/platform/js).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
