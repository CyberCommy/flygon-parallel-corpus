- en: Preface
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Go programming language was developed at Google to solve the problems they
    faced while developing software for their infrastructure. They needed a language
    that was statically typed without slowing down the developer, would compile and
    execute instantaneously, take advantage of multicore processors, and make working
    across distributed systems, effortless.
  prefs: []
  type: TYPE_NORMAL
- en: The mission of **Distributed computing with Go** is to make reasoning about
    concurrency and parallelism, effortless and provide the reader with the confidence
    to design and implement such programs in Go. We will start by digging into the
    core concepts behind goroutines and channels, the two fundamental concepts in
    Go around which the language is built. Next, we will design and build a distributed
    search engine using Go and Go's standard library.
  prefs: []
  type: TYPE_NORMAL
- en: Who this book is for
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This book is for developers who are familiar with the Golang syntax and have
    a good idea of how basic Go development works. It would be advantageous if you
    have been through a web application product cycle, although it's not necessary.
  prefs: []
  type: TYPE_NORMAL
- en: What this book covers
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[Chapter 1](../Text/Ch01.xhtml), *Developer Environment for Go*, covers a list
    of topics and concepts required to start working with Go and rest of the book.
    Some of these topics include Docker and testing in Go.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 2](../Text/Ch02.xhtml), *Understanding Goroutines*, introduces the
    topic of concurrency and parallelism and then dives deep into the implementation
    details of goroutines, Go''s runtime scheduler, and many more.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 3](../Text/Ch03.xhtml), *Channels and Messages*, begins by explaining
    the complexity of controlling parallelism before introducing strategies to control
    parallelism, using different types of channels.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 4](../Text/Ch04.xhtml), *The RESTful Web*, provides all the context
    and knowledge required to start designing and building REST APIs in Go. We will
    also discuss the interaction with a REST API server using different available
    approaches.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 5](../Text/Ch05.xhtml), *Introducing Goophr*, opens the discussion
    on what is meant by a distributed search engine, using OpenAPI specification to
    describe REST APIs and describing the responsibilities of the components of a
    search engine, using OpenAPI. Finally, we''ll describe the project structure.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 6](../Text/Ch06.xhtml), *Goophr Concierge*, dives deep into the first
    component of Goophr by describing in detail how the component is supposed to work.
    These concepts are further driven home with the help of architectural and logical
    flow diagrams. Finally, we''ll look at how to implement and test the component.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 7](../Text/Ch07.xhtml), *Goophr Librarian*, is a detailed look at
    the component that is responsible for maintaining the index for the search terms.
    We also look at how to search for given terms and how to order our search results
    and many more. Finally, we''ll look at how to implement and test the component.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 8](../Text/Ch08.xhtml), *Deploying Goophr*, brings together everything
    we have implemented in the previous three chapters and start the application on
    the local system. We will then test our design by adding a few documents and searching
    against them via the REST API.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 9](../Text/Ch09.xhtml), *Foundations of Web Scale Architecture*, is
    an introduction to the vast and complex topic on how to design and scale a system
    to meet with the demands at web scale. We will start with a single instance of
    a monolith running on a single server and scale it up to span across multiple
    region, have redundancy safeguards to ensure that the service is never down and
    many more.'
  prefs: []
  type: TYPE_NORMAL
- en: To get the most out of this book
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The material in the book is designed to enable a hands-on approach. Throughout
    the book, a conscious effort has been made to provide all the relevant information
    to the reader beforehand so that, if the reader chooses, they can try to solve
    the problem on their own and then refer to the solution provided in the book.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The code in the book does not have any Go dependencies beyond the standard library.
    This is done in order to ensure that the code examples provided in the book never
    change, and this also allows us to explore the standard library.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The source code in the book should be placed at `$GOPATH/src/distributed-go`.
    The source code for examples given will be located inside the `$GOPATH/src/distributed-go/chapterX`
    folder, where `X` stands for the chapter number.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Download and install Go from [https://golang.org/](https://golang.org/) and
    Docker from [https://www.docker.com/community-edition](https://www.docker.com/community-edition) website
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Download the example code files
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You can download the example code files for this book from your account at [http://www.packtpub.com](http://www.packtpub.com/).
    If you purchased this book elsewhere, you can visit [http://www.packtpub.com/support](http://www.packtpub.com/support)
    and register to have the files emailed directly to you.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can download the code files by following these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Log in or register at [http://www.packtpub.com](http://www.packtpub.com/support).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the SUPPORT tab.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on Code Downloads & Errata.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter the name of the book in the Search box and follow the on-screen instructions.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Once the file is downloaded, please make sure that you unzip or extract the
    folder using the latest version of:'
  prefs: []
  type: TYPE_NORMAL
- en: WinRAR / 7-Zip for Windows
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Zipeg / iZip / UnRarX for Mac
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 7-Zip / PeaZip for Linux
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The code bundle for the book is also hosted on GitHub at [https://github.com/PacktPublishing/Distributed-Computing-with-Go](https://github.com/PacktPublishing/Distributed-Computing-with-Go).
    In case there's an update to the code, it will be updated on the existing GitHub
    repository.
  prefs: []
  type: TYPE_NORMAL
- en: We also have other code bundles from our rich catalog of books and videos available
    at [https://github.com/PacktPublishing/](https://github.com/PacktPublishing/).
    Check them out!
  prefs: []
  type: TYPE_NORMAL
- en: Download the color images
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'We also provide a PDF file that has color images of the screenshots/diagrams
    used in this book. You can download it here: [https://www.packtpub.com/sites/default/files/downloads/DistributedComputingwithGo_ColorImages.pdf](https://www.packtpub.com/sites/default/files/downloads/DistributedComputingwithGo_ColorImages.pdf).'
  prefs: []
  type: TYPE_NORMAL
- en: Conventions used
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: There are a number of text conventions used throughout this book.
  prefs: []
  type: TYPE_NORMAL
- en: '`CodeInText`: Indicates code words in text, database table names, folder names,
    filenames, file extensions, pathnames, dummy URLs, user input, and Twitter handles.
    For example, "Now that we have all the code in place, let''s build the Docker
    image using the `Dockerfile` file."'
  prefs: []
  type: TYPE_NORMAL
- en: 'A block of code is set as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'When we wish to draw your attention to a particular part of a code block, the
    relevant lines or items are set in bold:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Any command-line input or output is written as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '**Bold**: Indicates a new term, an important word, or words that you see on
    the screen, for example, in menus or dialog boxes, also appear in the text like
    this. For example, "Select **System info** from the **Administration** panel."'
  prefs: []
  type: TYPE_NORMAL
- en: Warnings or important notes appear like this.
  prefs: []
  type: TYPE_NORMAL
- en: Tips and tricks appear like this.
  prefs: []
  type: TYPE_NORMAL
