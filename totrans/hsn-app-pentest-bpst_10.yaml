- en: Writing Burp Suite Extensions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Other HTTP proxies offer good performance, but, Burp Suite is indisputably the
    best tool due to its extension capability. As we have seen in the previous chapters,
    extensions add a lot of functions, and so they can be focused on one particular
    problem.
  prefs: []
  type: TYPE_NORMAL
- en: The ability to create extensions provides great help to the user in automating testing
    activities. Burp Suite supports Java, Python, and Ruby to develop extensions,
    so it is flexible in providing easy access for developers.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we will review the development process of a new extension and
    provide some tricks and tips for doing so on our Burp Suite installation.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will cover the following topics in the chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Setting up the development environment
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Writing a Burp Suite extension
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Executing the extension
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting up the development environment
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To develop your own extensions, you can use open source **integrated development
    environments** (**IDEs**), such as NetBeans or Eclipse. Choose the most comfortable
    IDE for yourself. In this case, we will use NetBeans:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Go to the NetBeans website ([https://netbeans.org/](https://netbeans.org/))
    and download the latest version. Installation is not needed since NetBeans is
    developed in Java and distributed as a JAR file; just unzip the download file
    and click on the netbeans-bin icon, as demonstrated in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/18960f26-1eda-4543-82e8-4e5ca45ced02.png)'
  prefs: []
  type: TYPE_IMG
- en: Before starting to work with NetBeans, go to [https://www.oracle.com/technetwork/java/javase/downloads/](https://www.oracle.com/technetwork/java/javase/downloads/)
    and ...
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Writing a Burp Suite extension
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The basic class structure for any Burp Suite extension is in the following
    code, which is provided by PortSwigger:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: This is basically the class definition that is used to create all of Burp Suite's
    extensions. Now, let's start to modify the code.
  prefs: []
  type: TYPE_NORMAL
- en: Burp Suite's API
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Keeping in mind that all extensions are developed by taking the PortSwigger-provided
    structure (which was previously shown) as the code base, the entry point for your
    extension is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'If you want to call your own extension, you will need to use the following
    method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'The following code shows the byte utilities. They are useful for managing strings,
    searching substrings, encoding, decoding, and more:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Modifying the user-agent using an extension
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let's now analyze the code of an extension to modify the user-agent in the HTTP
    request, using the basic structure provided by PortSwigger.
  prefs: []
  type: TYPE_NORMAL
- en: Creating the user-agents (strings)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The first thing we need to modify a user-agent is with substitute user-agents.
    In the next part of the code, we create a list of default user-agents to be used
    in the extension; the extension also provides the option to use an XML file with
    the strings, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Creating the GUI
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: PortSwigger simplified the way to integrate extensions with Burp Suite to create
    a new Burp Suite tab, and the elements just need a few lines of code.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we need to define a new tab for our extension in Burp Suite''s window,
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'We also need to create a box for putting in all our options, along with the
    labels for each one, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Additionally, we need to add that there is no application or extension without
    default values to present to the user when it is open, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: The operation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The previous blocks of code showed all of the extension content and the graphical
    interface, but the following lines show the operation of the extension itself:'
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we set up the initial variables and components, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Discovering authentication weaknesses
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: After services, ports, and technology detection, the next step is to navigate
    and understand the application's flow. Here, we will focus on the authentication
    section.
  prefs: []
  type: TYPE_NORMAL
- en: So, open Burp Suite, and after configuring the web browser, go to [https://www.mercadolibre.com.mx/](https://www.mercadolibre.com.mx/).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: As we mentioned before, Mercado Libre is a big online retailer, which is an
    intermediate party between sellers and buyers offering package services and financial
    services.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter valid credentials in the login section in order to understand how works.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'A resume about the authentication flow is given here:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The user enters an email address or username and a password
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The user is logged in
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If the user closes the session, the next time they enter the login section,
    they just need to enter their password, as their username is already taken
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Let''s check the login request:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s also, the response to this login request:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Using the preceding blocks of code, we can detect the following things:'
  prefs: []
  type: TYPE_NORMAL
- en: The application is using a load balancer or an anti-DDoS service. We can see
    in the response how the request is redirected to a determinate server.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The application uses a token to track requests; it may not be possible to exploit
    vulnerabilities such as CSRF.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The application has XSS protection, which avoids the extraction of information.
    For example, extracting the user's session using JavaScript.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The application includes a SAMEORIGIN policy. In this book, we have not covered
    this. This control is used to avoid execute actions from external entities.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: User credentials are sent in the request's body.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The application uses the XML format. This means that the application is using
    an internal API.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Now, we have some information about the authentication flow. In a real assessment,
    you would need to map the whole application, and the complete application flow.
  prefs: []
  type: TYPE_NORMAL
- en: Now, we are going to review issues related to authentication.
  prefs: []
  type: TYPE_NORMAL
- en: Executing the extension
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: After you finish writing the extension, launch the Burp Suite application and
    then click on Run | Run Project. The application will be launched with our extension
    running into it.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/efaae54f-63b4-4347-990e-5ea069a60fb0.png)'
  prefs: []
  type: TYPE_IMG
- en: 'For this extension, you need to create a session handling and configure the
    options in the User-Agent tab, as demonstrated in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/b44c15c5-2c28-487b-9a4b-0542cd7963e8.png)'
  prefs: []
  type: TYPE_IMG
- en: 'As you can see in the following screenshot, the application ran without errors:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/f3c97148-1ff9-4b05-98d4-f5159f0f97aa.png)'
  prefs: []
  type: TYPE_IMG
- en: If you want ...
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we analyzed how to create our own extension and the different
    functions and methods provided by PortSwigger, which not only helped us to create
    a new extension but also showed us how to modify existing extensions that needed
    to be adapted to our requirements.
  prefs: []
  type: TYPE_NORMAL
- en: The next chapter looks at a real-world case of how a large online retailer was
    compromised by having its authentication implementation broken.
  prefs: []
  type: TYPE_NORMAL
