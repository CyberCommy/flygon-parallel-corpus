- en: Connecting a Chart Control to SQL Server
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you will learn about how to drag charts into the page and then
    make them work with some simple tables inside SQL Server through C# as the language
    that connects the page and the database.
  prefs: []
  type: TYPE_NORMAL
- en: Placing a chart into the HTML page
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Crank up a project and what we will do first is to place a chart in the <html>
    page. Go to Toolbox (*Ctrl* + *Alt* + *X*), enter `char...` in the Search field,
    and drag and drop it below the line that begins with `<form id=...`.
  prefs: []
  type: TYPE_NORMAL
- en: 'As you can see on your screen, this generates all of the following markup.
    You can leave it as is. It''s sufficient for our purposes:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: You can delete the two `<div...` lines and the `<asp:Label ID...` line. We don't
    need them.
  prefs: []
  type: TYPE_NORMAL
- en: Adding a button to the HTML page
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Next, you need to place a button below the `</asp:Chart>` line. So again, go
    to Toolbox, grab a `Button` control, and drag it in there. Change the text on
    the button to say Load Data. Here, `Load Data` means loading and displaying it
    in the chart.
  prefs: []
  type: TYPE_NORMAL
- en: 'Notice that, when you drag in a chart, the page adds the entire block shown
    as follows, at the top of `System.Web.UI.DataVisualization.Charting`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Adding a new table to the People database
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now, for the next stage, click on View in the menu bar, and select SQL Server
    Object Explorer. You have to add a new table, so in the `People` database, right-click
    on the Tables folder and select Add New Table... . Your screen should look like
    the one shown in *Figure 20.5.1*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/e4839e3b-46f3-4c0b-99d8-8182a069e907.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 20.5.1: A blank new table'
  prefs: []
  type: TYPE_NORMAL
- en: Next, type `XValues` in the `Id` field, and then click in the Data Type field.
    Start to type `decimal`, and notice that `decimal(18,0)` shows up automatically.
    Now change this to `(18,3)`. This simply means a field that is 18 wide and has
    3 decimal places; that is, it's a total of 18 wide with 3 to the right and 15
    to the left for a total of 18 altogether. The Allow Nulls box should be checked
    for this field. It's the same thing for `YValues`. Imagine that we've done an
    experiment, and we've measured some quantities. So, enter `YValues` in the `Id`
    field, `decimal(18,3)` in the data type field, and leave the Allow Nulls box checked
    for this field.
  prefs: []
  type: TYPE_NORMAL
- en: Next, right-click on Id and select Set Primary Key.
  prefs: []
  type: TYPE_NORMAL
- en: Enabling auto-incrementation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Next, you want to enable auto-incrementation, so specifically that means the
    following:'
  prefs: []
  type: TYPE_NORMAL
- en: 'First, rename the table to `ExperimentValues`, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'After `PRIMARY KEY`, put `identity(1,1)`, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Here, `identity(1,1)`, as you learned previously, means that this field will
    grow by 1, beginning from 1, every time you add a new record. So, this is the
    structure of our table, as shown in *Figure 20.5.2*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/636d8841-b783-413f-a010-3581bca71771.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 20.5.2: The structure of our table for this chapter'
  prefs: []
  type: TYPE_NORMAL
- en: Adding values to the new table
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Next, click on the Update button. Click on Update Database in the dialog box
    that appears.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, you have `ExperimentValues`. Right-click on it, select View Data, and
    let''s add some values, as shown in *Figure 20.5.3*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/8330810b-5aab-4cf0-a771-e3392b57c3d9.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 20.5.3: Values added to the ExperimentValues table'
  prefs: []
  type: TYPE_NORMAL
- en: Now, we've got some values in a table. Notice again that the Id field is auto
    incrementedâ€”it begins at 1 and grows by 1 every time you add a new record. Close
    the table windows and go back into `Default.aspx.cs`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, double-click on the Design button, and a little chart appears, as shown
    in *Figure 20.5.4*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/dfdf6394-7e3a-48ee-b807-a09ed41bd675.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 20.5.4: Theoretical preview of the data in the ExperimentValues table'
  prefs: []
  type: TYPE_NORMAL
- en: Coding the project
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This chart does not represent the real data yet. It is just a theoretical preview.
    So, double-click on the Load Data button, which brings up the event handler in
    `Default.aspx.cs`. Delete the `Page_Load` stub. We''ll start with the code shown
    in *Figure 20.5.5* for this project:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/7c6ccd51-4e62-4eb7-a71b-640dc8d7ddf2.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 20.5.5: The starting code for this project'
  prefs: []
  type: TYPE_NORMAL
- en: Adding a namespace
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The first thing is you have to add a namespace. So, go to the top of the file,
    and under `using System`, enter the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: This line is used for connections and commands.
  prefs: []
  type: TYPE_NORMAL
- en: Building the connection string
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In the next stage, you need the connection string. So, on the following line
    you start by entering `string connString =`, followed by the `@` symbol to make
    it a verbatim string, and then you put the `""` symbols. Now, to get the connection
    string, do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Click on View in the menu bar, and select SQL Server Object Explorer.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Right-click on the People database, and select Properties.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the Properties pane, double-click on Connection String to select it with
    its long description.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Then, right-click on the long description and copy it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Paste the description between the set of `""` symbols.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The connection string line should then look like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: This is the connection string specific to your computer. You can now close the
    SQL Server Object Explorer and Properties panes.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, enter the following beneath this line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Writing a SQL query
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Next, you''ll make the `commandText` variable. So, between a set of curly braces,
    enter the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: To define the text, you have to write the actual SQL query, so you type `select
    XValues, YValues from dbo.ExperimentValues`. This will select `XValues` and `YValues`
    from those two column names in the `ExperimentValues` table.
  prefs: []
  type: TYPE_NORMAL
- en: Making the command object
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now, you need to make the command object, so enter the following next:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Here you pass in the two relevant quantities, the two arguments, so specifically,
    `(commandText, conn)`.
  prefs: []
  type: TYPE_NORMAL
- en: Opening the connection and making a SQL data reader
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In the next stage, you will open a connection, so enter the following below
    the preceding line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Then you''ll make a SQL data reader, so enter the following next:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: This line will get the data that we need.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now that you''ve done all of that, type the following below the preceding line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Note that we include the name of the column, `XValues`, which is to serve as
    the labeling for the *x*-axis. So, the *x*-axis is the horizontal axis.
  prefs: []
  type: TYPE_NORMAL
- en: Running the program
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This is the heart of the application. Crank it up in your browser, and click
    on the Load Data button.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/b0f361cf-fdc3-4f97-b051-84ee1beb07ee.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 20.5.6: Display of The actual data from the ExperimentValues table'
  prefs: []
  type: TYPE_NORMAL
- en: Here's the data, as shown in *Figure 20.5.6*. It has the values along the horizontal
    and vertical axes.
  prefs: []
  type: TYPE_NORMAL
- en: Modifying the program to display the Y values
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'If you wanted to, just to show you how easy it is, you could change the following
    line to the Y values. In other words, you can flip them around:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, crank it up in your browser, and click on the Load Data button once again.
    The results are shown in *Figure 20.5.7*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/112b2f60-6943-4960-bde5-6d5d6a9416f0.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 20.5.7: Chart of the Values from the ExperimentValues table'
  prefs: []
  type: TYPE_NORMAL
- en: Now you see that it looks very different. So that's how you can make simple
    charts. Now save this. This is the whole application.
  prefs: []
  type: TYPE_NORMAL
- en: Chapter review
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s review what we did: you built the connection string and finished making
    the connection inside the `using (SqlConnection conn...` line so that the connection
    could be properly disposed of. Then, you wrote the query string, made the command
    object, opened a connection, and executed the reader. Finally, you used `DataBind`
    to bind the database table to the charts so that you could display the results.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The complete version of the `Default.aspx.cs` file for this chapter, including
    comments, is shown in the following code block:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you learned about dragging charts into the page and then making
    them work with some simple tables inside SQL Server through C# as the language
    that connects the page and the database. You placed a chart into the HTML page,
    added a new table to the `People` database, enabled auto-incrementation, added
    values to the new table, added a namespace, built a connection string, wrote a
    SQL query, opened the connection and made a SQL data reader, ran the program,
    and finally modified it to display the Y values.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, you will learn how to use LINQ together with SQL and SQL
    Server.
  prefs: []
  type: TYPE_NORMAL
