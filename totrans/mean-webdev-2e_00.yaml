- en: Preface
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Back in the spring of 1995, web browsers were very different from present day
    browsers. It had been 4 years since the release of the WorldWideWeb (the first
    Internet browser written by Tim Berners-Lee, later renamed Nexus), 2 years since
    the initial release of Mosaic, and Internet Explorer 1.0 was a few months away
    from release. The World Wide Web began to show signs of popularity, and though
    some of the big companies showed interest in the field, the main disruptor back
    then was a small company named Netscape.
  prefs: []
  type: TYPE_NORMAL
- en: Netscape's already popular browser, Netscape Navigator, was in the works for
    its second version, when the client engineering team and co-founder Marc Anderseen
    decided that Navigator 2.0 should embed a programming language. The task was assigned
    to a software engineer named Branden Eich, who completed it in ten days between
    May 6 and May 15, 1995, naming the language Mocha, then LiveScript, and eventually
    JavaScript.
  prefs: []
  type: TYPE_NORMAL
- en: Netscape Navigator 2.0 was released in September 1995 and transformed the way
    we perceived the web browser. By August 1996, Internet Explorer 3.0 introduced
    its own implementation of JavaScript, and in November of that year, Netscape had
    announced that they had submitted JavaScript to ECMA for standardization. In June
    1997, the ECMA-262 specification was published, making JavaScript the de facto
    standard programming language for the Web.
  prefs: []
  type: TYPE_NORMAL
- en: For years, JavaScript was denigrated by many as the programming language for
    amateurs. JavaScript's architecture, fragmented implementation, and original "amateur"
    audience made professional programmers dismiss it. But then AJAX was introduced,
    and when Google released their Gmail and Google Maps applications in the mid-2000s,
    it suddenly became clear that AJAX technology could transform websites into web
    applications. This inspired the new generation of web developers to take JavaScript
    development to the next level.
  prefs: []
  type: TYPE_NORMAL
- en: What began with the first generation of utility libraries, such as jQuery and
    Prototype, soon got boosted by Google's next great contribution, the Chrome browser
    and its V8 JavaScript engine, released at the end of 2008\. The V8 engine, with
    its JIT compiling capabilities, greatly enhanced JavaScript performance. This
    led to a new era in JavaScript development. 2009 was JavaScript's annus mirabilis;
    suddenly, platforms such as Node.js enabled developers to run JavaScript on the
    server, databases such as MongoDB popularized and simplified the use of JSON storage,
    and frameworks such as Angular and React are simplifying the creation of complex
    frontend applications. More than 20 years after its original debut, JavaScript
    is now everywhere. What used to be an "amateur" programming language, capable
    of executing small scripts, is now one of the most popular programming languages
    in the world. The rise of open source collaboration tools, along with the devoted
    involvement of talented engineers, created one of the richest communities in the
    world, and the seeds planted by many contributors are now flourishing in a burst
    of sheer creativity.
  prefs: []
  type: TYPE_NORMAL
- en: The practical implications are enormous. What was once a fragmented team of
    developers, each an expert in their own domain, can now become a homogeneous team
    capable of developing leaner, more agile software together using a single language
    across all layers.
  prefs: []
  type: TYPE_NORMAL
- en: There are many full-stack JavaScript frameworks out there, some built by great
    teams, some that address important issues, but none of them are as open and modular
    as the MEAN stack. The idea is simple, we'll take MongoDB as the database, Express
    as the web framework, Angular as the frontend framework, and Node.js as the platform,
    and combine them in a modular approach that will ensure the flexibility needed
    in modern software development. MEAN's approach relies on the communities around
    each of the open source modules keeping it updated and stable, ensuring that if
    one of the modules becomes useless, we can just seamlessly replace it with a better-suited
    one.
  prefs: []
  type: TYPE_NORMAL
- en: I would like to welcome you to the JavaScript revolution and assure you I will
    do my best to help you become a full-stack JavaScript developer.
  prefs: []
  type: TYPE_NORMAL
- en: In this book, we'll help you set up your environment and explain how to connect
    the different MEAN components together using the best modules. You'll be introduced
    to the best practices of maintaining your code clear and simple and be shown how
    to avoid common pitfalls. We'll walk through building your authentication layer
    and adding your first entity. You'll learn how to leverage JavaScript non-blocking
    architecture in building real-time communication between your server and client
    applications. Finally, we'll show you how to cover your code with the proper tests,
    and we'll show you what tools to use to automate your development process.
  prefs: []
  type: TYPE_NORMAL
- en: What this book covers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '[Chapter 1](ch01.html "Chapter 1. Introduction to MEAN"), *Introduction to
    MEAN*, introduces you to the MEAN stack and shows you how to install the different
    prerequisites on each OS.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 2](ch02.html "Chapter 2. Getting Started with Node.js"), *Getting
    Started with Node.js*, explains explain the basics of Node.js and how it is used
    in web application development.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 3](ch03.html "Chapter 3. Building an Express Web Application"), *Building
    an Express Web Application*, explains how to create and structure an Express application
    by implementing the MVC pattern.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 4](ch04.html "Chapter 4. Introduction to MongoDB"), *Introduction
    to MongoDB*, explains the basics of MongoDB and how it can be used to store your
    applications'' data.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 5](ch05.html "Chapter 5. Introduction to Mongoose"), *Introduction
    to Mongoose*, shows how to use a Mongoose to connect an Express application with
    a MongoDB database.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 6](ch06.html "Chapter 6. Managing User Authentication Using Passport"),
    *Managing User Authentication Using Passport*, explains how to manage your users''
    authentication and offer them diverse login options.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 7](ch07.html "Chapter 7. Introduction to Angular"), *Introduction
    to Angular*, explains how to implement an Angular application in conjunction with
    your Express application.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 8](ch08.html "Chapter 8. Creating a MEAN CRUD Module"), *Creating
    a MEAN CRUD Module*, explains how to write and use your MEAN application''s entities.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 9](ch09.html "Chapter 9. Adding Real-time Functionality Using Socket.io"),
    *Adding Real-time Functionality Using Socket.io*, shows you how to create and
    use real-time communication between your client and server.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 10](ch10.html "Chapter 10. Testing MEAN Applications"), *Testing MEAN
    Applications*, explains how to automatically test the different parts of your
    MEAN application.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 11](ch11.html "Chapter 11. Automating and Debugging MEAN Applications"),
    *Automating and Debugging MEAN Applications*, explains how to develop your MEAN
    application more efficiently.'
  prefs: []
  type: TYPE_NORMAL
- en: What you need for this book
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This book is suitable for beginner and intermediate web developers with basic
    knowledge of HTML, CSS, and modern JavaScript development.
  prefs: []
  type: TYPE_NORMAL
- en: Who this book is for
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This book is aimed at web developers interested in learning how to build modern
    web applications using MongoDB, Express, Angular, and Node.js.
  prefs: []
  type: TYPE_NORMAL
- en: Conventions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this book, you will find a number of text styles that distinguish between
    different kinds of information. Here are some examples of these styles and an
    explanation of their meaning.
  prefs: []
  type: TYPE_NORMAL
- en: 'Code words in text, database table names, folder names, filenames, file extensions,
    pathnames, dummy URLs, user input, and Twitter handles are shown as follows: "To
    test your static middleware, add an image named `logo.png` to the `public/img`
    folder."'
  prefs: []
  type: TYPE_NORMAL
- en: 'A block of code is set as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'When we wish to draw your attention to a particular part of a code block, the
    relevant lines or items are set in bold:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Any command-line input or output is written as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '**New terms** and **important words** are shown in bold. Words that you see
    on the screen, for example, in menus or dialog boxes, appear in the text like
    this: "Once you click on the **Next** button, the installation should begin."'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Warnings or important notes appear in a box like this.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Tips and tricks appear like this.
  prefs: []
  type: TYPE_NORMAL
