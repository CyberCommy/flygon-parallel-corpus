- en: Preface
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: C++ is a general-purpose programming language that combines different paradigms
    such as object-oriented, imperative, generic, and functional programming. C++
    is designed for efficiency and is the primary choice in applications where performance
    is key. Over the last few decades, C++ has been one of the most widely used programming
    languages in industry, academia, and elsewhere. The language is standardized by
    the International Organization for Standardization (ISO), which is currently working
    on the next version of the standard, called C++20, due to be completed in 2020.
  prefs: []
  type: TYPE_NORMAL
- en: With the standard covering almost 1500 pages, C++ is not the simplest language
    to learn and master. Skills are not acquired only by reading about them or watching
    others exercising them, but by practicing them again and again. Programming is
    no different; we developers do not learn new languages or technologies just by
    reading books, articles, or watching video tutorials. Instead, we need practice
    to sediment and develop the new things we learn so that we can eventually master
    them. Many a times, however, finding good exercises to put our knowledge to test
    is a difficult task. Although there are many websites that feature problems for
    different programming languages, most of these are mathematical problems, algorithms,
    or problems for student competitions. These kinds of problems do not help you
    exercise a large variety of a programming language functionalities. That is where
    this book steps in.
  prefs: []
  type: TYPE_NORMAL
- en: This book is a collection of 100 real-world problems designed for you to practice
    a large variety of the C++ language and standard library features as well as many
    third-party, cross-platform libraries. Yet, a few of these problems are C++ specific
    and, in general, can be solved in many programming languages. Of course, the intention
    is to help you master C++ and therefore you are expected to solve them in C++.
    All the solutions provided in the book are in C++. However, you can use the book
    as a reference for its collection of proposed problems when you learn other programming
    languages, although in this case, you will not benefit from the solutions.
  prefs: []
  type: TYPE_NORMAL
- en: The problems in this book are grouped into 12 chapters. Each chapter contains
    problems on similar or related topics. The problems have different levels of difficulty;
    some of them are easy, some are moderate, and some are difficult. The book has
    a relatively equal number of problems for each difficulty level. Each chapter
    starts with the description of the proposed problems. The solutions to these problems
    ensue with recommendations, explanations, and source code. Although you can find
    the solutions in the book, it is recommended that you try to implement them by
    yourself first, and only afterward—or if you have difficulties completing them—look
    at the proposed solutions. There is only one thing that is missing in the source
    code presented in the book—the headers you have to include. This was left out
    on purpose so that you figure those out by yourself. On the other hand, the source
    code provided with the book is complete, and you can find all the required headers
    there.
  prefs: []
  type: TYPE_NORMAL
- en: At the time of writing this book, the C++20 version of the standard is in progress
    and will continue for the next couple of years. However, some features have already
    been voted in, and one of these features is the extension to the `chrono` library
    with calendars and time zones. There are several problems in the fifth chapter
    on this topic, and although no compiler supports these yet, you can solve them
    using the `date` library, based on which the new standard additions have been
    designed. Many other libraries are used for solving problems in the book. The
    list includes Asio, Crypto++, Curl, NLohmann/json, PDF-Writer, PNGWriter, pugixml,
    SQLite, and ZipLib. Also, as an alternative to the `std::optional` and the `filesystem`
    libraries used throughout the book, you can use Boost with compilers where these
    are not available. All these libraries are open source and cross-platform. They
    were chosen for reasons that include performance, good documentation, and wide
    use within the community. However, you are free to use any other libraries you
    would like to solve the problems.
  prefs: []
  type: TYPE_NORMAL
- en: Who this book is for
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Are you trying to learn C++ and are looking for challenges to practice what
    you're learning? If so, this book is for you. The book is intended for people
    learning C++, regardless of their experience with other programming languages,
    as a valuable resource of practical exercises and real-world problems. This book
    does not teach you the features of the language or the standard library. You are
    expected to learn that from other resources, such as books, articles, or video
    tutorials. This book is a learning companion and challenges you to solve tasks
    of various difficulties, utilizing the skills you have previously learned from
    other resources. Nevertheless, many of the problems proposed in this book are
    language agnostic, and you can use them when learning other programming languages;
    however, in this case, you won't be benefiting from the solutions provided here.
  prefs: []
  type: TYPE_NORMAL
- en: To get the most out of this book
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As previously mentioned, you need a basic familiarity with the C++ language
    and the standard library in order to be able to utilize this book, or you can
    learn that along the way. In any case, this book will teach you how to solve problems,
    but it will not teach you about the language and features utilized in the solutions.
    You will need a compiler with C++17 support; a complete list of required libraries
    as well as possible compilers you can use can be found in the *Software Hardware
    List* available in the code bundle. In the following sections, you will find detailed
    instructions for downloading and building the code from this book.
  prefs: []
  type: TYPE_NORMAL
- en: Download the example code files
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You can download the code files with the solutions to the problems in this book
    from your account at [www.packtpub.com](http://www.packtpub.com). If you purchased
    this book elsewhere, you can visit [www.packtpub.com/support](http://www.packtpub.com/support)
    and register to have the files emailed directly to you.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can download the code files by following these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Log in or register at [www.packtpub.com](http://www.packtpub.com/support).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the SUPPORT tab.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on Code Downloads & Errata.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter the name of the book in the Search box and follow the onscreen instructions.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Once the file is downloaded, please make sure that you unzip or extract the
    folder using the latest version of:'
  prefs: []
  type: TYPE_NORMAL
- en: WinRAR/7-Zip for Windows
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Zipeg/iZip/UnRarX for Mac
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 7-Zip/PeaZip for Linux
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The code bundle for the book is also hosted on GitHub at [https://github.com/PacktPublishing/The-Modern-Cpp-Challenge](https://github.com/PacktPublishing/The-Modern-Cpp-Challenge).
    We also have other code bundles from our rich catalog of books and videos available
    at **[https://github.com/PacktPublishing/](https://github.com/PacktPublishing/)**.
    Check them out!
  prefs: []
  type: TYPE_NORMAL
- en: Building the code
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Although a large number of 3rd party libraries are used throughout the book,
    all these libraries, as well as all the solutions provided in the book are cross-platform
    and run on all platforms. However, the code has been developed and tested with
    Visual Studio 2017 v15.6/7 on Windows 10 and Xcode 9.3 on Mac OS 10.13.x.
  prefs: []
  type: TYPE_NORMAL
- en: If you are using Xcode on a Mac, there are two features used in the book that
    are not available with the LLVM toolset included in Xcode; these are the `filesystem`
    library and `std::optional`. However, these have been designed based on the `Boost.Filesystem`
    and `Boost.Optional` libraries and the use of the mentioned standard libraries
    in the proposed solutions is easily interchangeable with the Boost libraries.
    In fact, the accompanying code is written so that it works with either of the
    two; controlling which one to use is done with several macros. Instructions for
    building either with one or another are provided below, although the same information
    is also available in the source archive.
  prefs: []
  type: TYPE_NORMAL
- en: In order to support most of the development environments and build systems you
    could use on various platforms, the code is provided with CMake scripts. These
    are used to generate projects or build scripts for your preferred toolset. If
    you do not have CMake installed on your machine, you can get it from [https://cmake.org/](https://cmake.org/).
    Below, you can find instructions for using CMake to generate Visual Studio and
    Xcode scripts. For other tools, please refer to the CMake documentation, if necessary.
  prefs: []
  type: TYPE_NORMAL
- en: How to generate projects for Visual Studio 2017
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Do the following in order to generate Visual Studio 2017 projects to target
    the x86 platform:'
  prefs: []
  type: TYPE_NORMAL
- en: Open a command prompt and go to the `build` directory in the source code root
    folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Execute the following CMake command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '``cmake -G "Visual Studio 15 2017" .. -DCMAKE_USE_WINSSL=ON -DCURL_WINDOWS_SSPI=ON
    -DCURL_LIBRARY=libcurl -DCURL_INCLUDE_DIR=..\libs\curl\include -DBUILD_TESTING=OFF
    -DBUILD_CURL_EXE=OFF -DUSE_MANUAL=OFF``'
  prefs: []
  type: TYPE_NORMAL
- en: After completion, the Visual Studio solution can be found at `build/cppchallenger.sln`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'If you want to target the x64 platform instead, use the generator called `"Visual
    Studio 15 2017 Win64"`. Visual Studio 2017 15.4 supports both `filesystem` (as
    an experimental library) and `std::optional`. If you use a previous version, or
    just want to use the Boost libraries instead, you can generate the projects using
    the following command, after you properly install Boost:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Make sure that the paths to the headers and static library files do not include
    trailing backslashes (i.e. `\`).
  prefs: []
  type: TYPE_NORMAL
- en: How to generate projects for Xcode
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Several solutions in the last chapter utilize the `libcurl` library. For SSL
    support, this library needs to be linked with the `OpenSSL` library. Do the following
    to install OpenSSL:'
  prefs: []
  type: TYPE_NORMAL
- en: Download the library from [https://www.openssl.org/](https://www.openssl.org/).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Unzip the archive and, in a terminal, go to its root directory.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Build and install the library with the following commands (executed in this
    order):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`./Configure darwin64-x86_64-cc shared enable-ec_nistp_64_gcc_128 no-ssl2 no-ssl3
    no-comp --openssldir=/usr/local/ssl/macos-x86_64`'
  prefs: []
  type: TYPE_NORMAL
- en: '`make depend`'
  prefs: []
  type: TYPE_NORMAL
- en: '`sudo make install`'
  prefs: []
  type: TYPE_NORMAL
- en: 'Until `std::optional` and the `filesystem` library will be available with Xcode''s
    Clang, you need to use Boost. Do the following to install and build the Boost
    libraries:'
  prefs: []
  type: TYPE_NORMAL
- en: Install Homebrew from [https://brew.sh/](https://brew.sh/).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Run the following command to download and install Boost automatically.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`brew install boost`'
  prefs: []
  type: TYPE_NORMAL
- en: After installation, the Boost library will be available at `/usr/local/Cellar/boost/1.65.0`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In order to generate projects for Xcode from the sources you have to:'
  prefs: []
  type: TYPE_NORMAL
- en: Open a terminal and go to the `build` directory in the source code root directory.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Execute the following CMake command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`cmake -G Xcode .. -DOPENSSL_ROOT_DIR=/usr/local/bin -DOPENSSL_INCLUDE_DIR=/usr/local/include/
    -DBUILD_TESTING=OFF -DBUILD_CURL_EXE=OFF -DUSE_MANUAL=OFF -DBOOST_FILESYSTEM=ON
    -DBOOST_OPTIONAL=ON -DBOOST_INCLUDE_DIR=/usr/local/Cellar/boost/1.65.0 -DBOOST_LIB_DIR=/usr/local/Cellar/boost/1.65.0/lib`'
  prefs: []
  type: TYPE_NORMAL
- en: After completion, the Xcode project can be found at `build/cppchallenger.xcodeproj`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Conventions used
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are a number of text conventions used throughout this book.
  prefs: []
  type: TYPE_NORMAL
- en: '`CodeInText`: Indicates code words in the text, database table names, folder
    names, filenames, file extensions, pathnames, dummy URLs, user input, and Twitter
    handles. Here is an example: "Mount the downloaded `WebStorm-10*.dmg` disk image
    file as another disk in your system."'
  prefs: []
  type: TYPE_NORMAL
- en: 'A block of code is set as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'When we wish to draw your attention to a particular part of a code block, the
    relevant lines or items are set in bold:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Any command-line input or output is written as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '**Bold**: Indicates a new term, an important word, or words that you see onscreen.
    For example, words in menus or dialog boxes appear in the text like this. Here
    is an example: "Select System info from the Administration panel."'
  prefs: []
  type: TYPE_NORMAL
- en: Warnings or important notes appear like this.
  prefs: []
  type: TYPE_NORMAL
- en: Tips and tricks appear like this.
  prefs: []
  type: TYPE_NORMAL
- en: Get in touch
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Feedback from our readers is always welcome.
  prefs: []
  type: TYPE_NORMAL
- en: '**General feedback**: Email `feedback@packtpub.com` and mention the book title
    in the subject of your message. If you have questions about any aspect of this
    book, please email us at `questions@packtpub.com`.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Errata**: Although we have taken every care to ensure the accuracy of our
    content, mistakes do happen. If you have found a mistake in this book, we would
    be grateful if you would report this to us. Please visit [www.packtpub.com/submit-errata](http://www.packtpub.com/submit-errata),
    selecting your book, clicking on the Errata Submission Form link, and entering
    the details.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Piracy**: If you come across any illegal copies of our works in any form
    on the Internet, we would be grateful if you would provide us with the location
    address or website name. Please contact us at `copyright@packtpub.com` with a
    link to the material.'
  prefs: []
  type: TYPE_NORMAL
- en: '**If you are interested in becoming an author**: If there is a topic that you
    have expertise in and you are interested in either writing or contributing to
    a book, please visit [authors.packtpub.com](http://authors.packtpub.com/).'
  prefs: []
  type: TYPE_NORMAL
- en: Reviews
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Please leave a review. Once you have read and used this book, why not leave
    a review on the site that you purchased it from? Potential readers can then see
    and use your unbiased opinion to make purchase decisions, we at Packt can understand
    what you think about our products, and our authors can see your feedback on their
    book. Thank you!
  prefs: []
  type: TYPE_NORMAL
- en: For more information about Packt, please visit [packtpub.com](https://www.packtpub.com/).
  prefs: []
  type: TYPE_NORMAL
