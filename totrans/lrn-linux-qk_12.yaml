- en: You Got a Package
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, you will learn how to manage software applications on your
    Linux system. You will learn how to use the Debian package manager to download,
    install, remove, search, and update software packages.
  prefs: []
  type: TYPE_NORMAL
- en: What is a package?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In Linux, a package is a compressed archive file that contains all the necessary
    files for a particular software application to run. For example, a web browser
    like Firefox comes in a package that has all the files needed for Firefox to run.
  prefs: []
  type: TYPE_NORMAL
- en: The role of a package manager
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Package managers are programs that we use in Linux to manage packages; that
    is, to download, install, remove, search, and update packages. Keep in mind that
    different Linux distributions have different package managers. For example, `dpkg`,
    which stands for Debian package manager, is the package manager for Ubuntu and
    other Debian-based Linux distributions. On the other hand, RedHat-based Linux
    distributions like Fedora and CentOS use `rpm`, which stands for RedHat Package
    Manager. Other Linux distributions like SUSE use `zypper` as the package manager
    and so on.
  prefs: []
  type: TYPE_NORMAL
- en: Where do packages come from?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Very rarely will you find experienced Linux users going to a website to download
    a software package as Windows or macOS users do. Instead, each Linux distribution
    has its list of sources from where it gets the majority of its software packages.
    These sources are also referred to as **repositories**. The following figure illustrates
    the process of downloading packages on your Linux system:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/db4d532e-24a0-4944-ab21-aa59b9014390.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 1: Packages live in repositories. Notice that the packages are stored
    across multiple repositories'
  prefs: []
  type: TYPE_NORMAL
- en: How to download packages
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'On Ubuntu and other Debian Linux distributions, you can use the command-line
    utility `apt-get` to manage packages. Behind the scenes, `apt-get` makes use of
    the package manager `dpkg`. To download a package, you can run the command `apt-get
    download` followed by the package name:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'As the `root` user, change to the `/tmp` directory:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'To download the `cmatrix` package, you can run the command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'The `cmatrix` package will be downloaded in `/tmp`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Notice the `.deb` extension in the package name, which signals that it''s a
    Debian package. On RedHat distributions, package names end with the `.rpm` extension.
    You can list the files inside the `cmatrix` package by running the command `dpkg
    -c` as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Notice that we only downloaded the package, but we didn’t install it yet. Nothing
    will happen if you run the `cmatrix` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: How to install packages
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'You can use the `-i` option with the `dpkg` command to install a downloaded
    package:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'And that''s it! Now run the `cmatrix` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'You will see the matrix running on your terminal like in the following image:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/18aeaee2-1d00-49f9-817d-e4a6f47959d6.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 2: cmatrix'
  prefs: []
  type: TYPE_NORMAL
- en: 'We have taken the long way to install the `cmatrix` package. We first downloaded
    the package, and then we installed it. You can install a package right away (without
    downloading it) by running the command `apt-get install` followed by the package
    name:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'For example, you can install the **GNOME Chess** game by running the command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Now you can start the game by running the `gnome-chess` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: '![](img/8f33af2e-d60f-4ac0-a46d-e659edb64dcc.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 3: GNOME Chess'
  prefs: []
  type: TYPE_NORMAL
- en: How to remove packages
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'You can easily remove a package by running the command `apt-get remove` followed
    by the package name:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'For example, if you are tired of the matrix lifestyle and have decided to remove
    the `cmatrix` package, you can run:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, if you run the `cmatrix` command, you will get an error:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: The `apt-get remove` command removes (uninstalls) a package, but it doesn’t
    remove the package configuration files. You can use the `apt-get purge` command
    to remove a package along with its configuration files.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, if you want to remove the `gnome-chess` package along with its
    configuration files, you can run:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: You can even see in the last line in the output it says `Purging configuration
    files for gnome-chess (1:3.28.1-1) ...`, which means that the configuration files
    for `gnome-chess` are being removed as well.
  prefs: []
  type: TYPE_NORMAL
- en: How to search for packages
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Sometimes you are unsure of a package name. Then, in this case, you can’t install
    it until you look it up. You can search for a package by using the command `apt-cache
    search` followed by your search term or keyword:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'For example, let’s say that you want to install the `wireshark` package, but
    you can only remember that the package name has the word `shark` in it. In this
    case, you can run the command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'And you are bombarded with a massive output that lists all the package names
    that have the word `shark` in their package description. I bet you can spot the
    package `wireshark` in the middle of the output. We can get a much shorter and
    a refined output by using the `-n` option:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'This will only list the packages that have the word `shark` in their package
    names. Now, you can install `wireshark` by running the command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: How to show package information
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To view package information, you can use the command `apt-cache show` followed
    by the package name:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'For example, to display the `cmatrix` package information, you can run:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: You can see a lot of useful information in the output, including the package
    description and the contact information of the maintainer of the package, which
    is useful if you find a bug and want to report it. You will also find out if the
    package depends on (requires) other packages.
  prefs: []
  type: TYPE_NORMAL
- en: '**Package dependency** can turn into a nightmare, and so I highly recommend
    that you use the `apt-get install` command to install a package whenever possible
    as it checks and resolves package dependency while installing a package. On the
    other hand, the `dpkg -i` command doesn’t check for package dependency. Keep that
    in mind!'
  prefs: []
  type: TYPE_NORMAL
- en: 'You can use the `apt-cache depends` command to list package dependencies:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'For example, to view the list of packages that are needed to be installed for
    `cmatrix` to work properly, you can run the command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'As you can see, the `cmatrix` package depends on three packages:'
  prefs: []
  type: TYPE_NORMAL
- en: '`libc6`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`libncurses5`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`libtinfo5`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Those three packages have to be installed on the system in order for `cmatrix`
    to run properly.
  prefs: []
  type: TYPE_NORMAL
- en: Listing all packages
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'You can use the `dpkg -l` command to list all the packages that are installed
    on your system:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'You can also use the `apt-cache pkgnames` command to list all the packages
    that are available for you to install:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'You can pipe the output to the `wc -l` command to get the total number of available
    packages:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: Wow! That’s a massive number; over 64,000 available packages on my system.
  prefs: []
  type: TYPE_NORMAL
- en: 'You may also be interested to know which repositories (sources) your system
    used to obtain all these packages. These repositories are included in the file
    `/etc/ap- t/sources.list` and in any file with the suffix `.list` under the directory
    `/etc/apt/- sources.list.d/`. You can check the `man` page:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: To learn how you can add a repository to your system.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can also use the `apt-cache policy` command to list all the enabled repositories
    on your system:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'If you are eager to know which repository provides a specific package, you
    can use the `apt-cache policy` command followed by the package name:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'For example, to know which repository provides the `cmatrix` package, you can
    run:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: From the output, you can see that the `cmatrix` package comes from the bionic/universe repository
    at [http://ca.archive.ubuntu.com/ubuntu](http://ca.archive.ubuntu.com/ubuntu).
  prefs: []
  type: TYPE_NORMAL
- en: Patching your system
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'If a newer release for a package is available, then you can upgrade it using
    the `apt-get install --only-upgrade` command followed by the package name:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'For example, you can upgrade the `nano` package by running the command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'You can also upgrade all the installed packages on your system by running the
    commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '`apt-get update`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`apt-get upgrade`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The first command `apt-get update` will update the list of available packages
    and their versions, but it doesn’t do any installation or upgrade:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'The second command `apt-get upgrade` will upgrade all the installed packages
    on your system:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: Remember that order matters; that is, you need to run the `apt-get update` command
    before you run the `apt-get upgrade` command.
  prefs: []
  type: TYPE_NORMAL
- en: In Linux lingo, the process of upgrading all the installed packages on your
    system is called **patching the system**.
  prefs: []
  type: TYPE_NORMAL
- en: Knowledge check
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'For the following exercises, open up your Terminal and try to solve the following
    tasks:'
  prefs: []
  type: TYPE_NORMAL
- en: Install the `tmux` package on your system.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: List all the dependencies of the `vim` package.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Install the `cowsay` package on your system.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Remove the `cowsay` package along with all its configuration files.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Upgrade all the packages on your system (patch your system).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
