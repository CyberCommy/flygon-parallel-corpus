- en: Building an E-Commerce Store – Adding a Checkout
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 构建电子商务商店 - 添加结账功能
- en: Over the last couple of chapters, we have been creating an e-commerce store.
    So far, we have created a product page that allows us to view the images and product
    variations, which may be size or style. We have also created a category page with
    filters and pagination—including a homepage category page that features specific,
    selected products.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在过去的几章中，我们一直在创建一个电子商务商店。到目前为止，我们已经创建了一个产品页面，可以查看图片和产品变体，可能是尺寸或样式。我们还创建了一个带有过滤器和分页功能的类别页面
    - 包括一个主页类别页面，其中包含特定的选定产品。
- en: 'Our users can browse and filter products and view more information about a
    specific product. We are now going to:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的用户可以浏览和筛选产品，并查看有关特定产品的更多信息。现在我们要做的是：
- en: Build the functionality to allow the user to add and remove products to their
    basket
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 构建功能，允许用户将产品添加到购物篮中或从购物篮中删除产品
- en: Allow a user to Checkout
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 允许用户结账
- en: Add an Order Confirmation page
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加一个订单确认页面
- en: As a reminder—we won't be taking any billing details but we will make an Order
    Confirmation screen.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 作为提醒 - 我们不会收集任何账单信息，但我们会创建一个订单确认页面。
- en: Creating the basket array placeholder
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建购物篮数组占位符
- en: To help us persist the products in the basket throughout the app, we are going
    to be storing the user's selected products in the Vuex store. This will be in
    the form of an array of objects. Each object will contain several key pieces of
    information that will allow us to display the products in the basket without having
    to query the Vuex store each time. It also allows us to store details about the
    current state of the product page—remembering the image updates when a variant
    is selected.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 为了帮助我们在整个应用程序中持久保存购物篮中的产品，我们将把用户选择的产品存储在Vuex store中。这将以对象数组的形式存在。每个对象将包含几个关键信息，这些信息将允许我们在不必每次查询Vuex
    store时都能显示购物篮中的产品。它还允许我们存储有关产品页面当前状态的详细信息 - 当选择变体时，记住图片更新。
- en: 'The details we''re going to store for each product added to the basket are
    as follows:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 我们要为每个添加到购物篮中的产品存储以下详细信息：
- en: Product title
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 产品标题
- en: Product handle, so we can link back to the product
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 产品句柄，以便我们可以链接回产品页面
- en: Selected variation title (as it appears in the select box)
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 选择的变体标题（在选择框中显示）
- en: Currently selected image, so we can show an appropriate image in the Checkout
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当前选择的图片，以便我们可以在结账时显示适当的图片
- en: Variation details, this contains price and weight along with other details
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 变体详情，包括价格、重量和其他细节
- en: Variation SKU, this will help us identify whether the product has already been
    added
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 变体SKU，这将帮助我们确定产品是否已经添加
- en: Quantity, how many items the user has added to their basket
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数量，用户已添加到购物篮中的物品数量
- en: 'As we will be storing all this information within an object, contained in an
    array, we need to create a placeholder array within the store. Add a new key to
    the `state` object within the store titled `basket` and make it a blank array:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们将把所有这些信息存储在一个对象中，该对象包含在一个数组中，我们需要在商店中创建一个占位数组。在商店的`state`对象中添加一个名为`basket`的新键，并将其设置为空数组：
- en: '[PRE0]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Adding product information to the store
  id: totrans-19
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将产品信息添加到商店中
- en: With our `basket` array ready to receive data, we can now create a mutation
    to add the product object. Open the `ProductPage.js` file and update the `addToBasket`
    method to call a `$store` commit function, instead of the `alert` we put in place.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 准备好接收数据的`basket`数组后，我们现在可以创建一个mutation来添加产品对象。打开`ProductPage.js`文件，并更新`addToBasket`方法，调用`$store`的commit函数，而不是我们之前放置的`alert`。
- en: All of the information we require for products to be added to the basket is
    stored on the `ProductPage` component—so we can pass the component instance through
    to the `commit()` function using the `this` keyword.  This will become clear when
    we build the mutation.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the function call to the `ProductPage` method:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Creating the store mutation to add products to the basket
  id: totrans-24
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Navigate to the Vuex store and create a new mutation titled `addToBasket`.
    This will accept the `state` as the first parameter and the component instance
    as the second. Passing the instance through allows us to access the variables,
    methods, and computed values on the component:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: We can now proceed with adding the products to the `basket` array. The first
    step is to add the product object with the mentioned properties. As it's an array,
    we can use the `push()` function to add the object.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, add an object to the array, using the `item` and its properties to build
    the object. With access to the `ProductPage` component, we can construct the variant
    title as it appears in the select box, using the `variantTitle` method. Set the
    quantity to `1` by default:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: This now adds the product to the `basket` array. An issue appears, however,
    when you add two of the same item to the basket. Rather than increasing the `quantity`,
    it simply adds a second product.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
- en: This can be remedied by checking if the `sku` exists within the array already.
    If it does, we can increment the quantity on that item, if not we can add a new
    item to the `basket` array. The `sku` is unique for each variation of each product.
    Alternatively, we could use the barcode property.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
- en: 'Using the native `find` JavaScript function, we can identify any products that
    have an SKU matching that of the one being passed in:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'If it matches, we can increment the quantity by one on that object, using the
    `++` notation in JavaScript. If not, we can add the new object to the `basket`
    array. When using the `find` function, we can return the product if it exists.
    If not, we can add a new item:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: We now have a basket being populated as the item is added to the basket, and
    incrementing when it exists already.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
- en: To improve the usability of the app, we should give the user some feedback when
    they have added an item to the basket. This can be done by updating the "Add to
    Basket" button briefly and showing a product count with a link to the basket in
    the header of the site.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
- en: Updating the Add to basket button when adding an item
  id: totrans-38
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As a usability improvement to our shop, we are going to update the Add to basket
    button when a user clicks it. This will change to Added to your basket and apply
    a class for a set period of time, for example, two seconds, before returning to
    its previous state. The CSS class will allow you to style the button differently—for
    example, changing the background to green or transforming it slightly.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
- en: This will be achieved by using a data property on the component—setting it to
    `true` and `false` as the item gets added. The CSS class and text will use this
    property to determine what to show and a `setTimeout` JavaScript function will
    change the state of the property.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the `ProductPage` component and add a new key to the data object titled
    `addedToBasket`. Set this to `false` by default:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Update the button text to allow for this variation. As there is already a ternary
    `if` within this, we are going to nest them with another one. This could be abstracted
    into a method if desired.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
- en: 'Replace the `Add to basket` condition in your button with an additional ternary
    operator, dependent on whether the `addedToBasket` variable is true. We can also
    add a conditional class based on this property:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Refresh the app and navigate to a product to ensure the correct text is being
    shown. Update the `addedToBasket` variable to `true` to make sure everything is
    displaying as it should. Set it back to `false`.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, within the `addToBasket()` method, set the property to true. This should
    update the text when the item is added to the basket:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'When you click the button, the text will now update, however it will never
    reset. Add a `setTimeout` JavaScript function afterward, which sets it back to
    `false` after a certain period of time:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: The timing for `setTimeout` is in milliseconds, so `2000` is equal to two seconds.
    Feel free to tweak and play with this figure as much as you see fit.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
- en: 'One last addition would be to reset this value back to `false` if the variation
    is updated or the product is changed. Add the statement to both `watch` functions:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Showing the product count in the header of the app
  id: totrans-54
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: It's common practice for a shop to show a link to the cart in the site's header—along
    with the number of items in the cart next to it. To achieve this, we'll use a
    Vuex getter to calculate and return the number of items in the basket.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the `index.html` file and add a `<header>` element to the app HTML and
    insert a placeholder, `span`—we''ll convert this to a link once we''ve set up
    the routes. Within the span, output a `cartQuantity` variable:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Navigate to your `Vue` instance and create a `computed` object containing a
    `cartQuantity` function:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: If our header were to feature more items than our cart link, it would be advisable
    to abstract it out into a separate component to keep the methods, layout, and
    functions contained. However, as it is only going to feature this one link in
    our example app, adding the function to the `Vue` instance will suffice.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a new getter in the store titled `cartQuantity`.  As a placeholder,
    return `1`. The `state` will be required to calculate the quantity, so ensure
    that is passed into the function for now:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Head back to your `Vue` instance and return the result of the getter. Ideally,
    we want to show the count of the `basket` in brackets, but we only want to show
    the brackets if there are items. Within the computed function, check the result
    of this getter and output the result with brackets if the result exists:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Changing the result within the Vuex getter should reveal either the number in
    brackets or nothing at all.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
- en: Calculating the basket quantity
  id: totrans-66
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: With the display logic in place, we can now proceed with calculating how many
    items are in the basket. We could count the number of items in the `basket` array,
    however, this will only tell us how many different products are there now and
    not if the same product was added many times.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
- en: 'Instead, we need to loop through each product in the basket and add the quantities
    together. Create a variable called `quantity` and set it to `0`. Loop through
    the basket items and add the `item.quantity` variable to the `quantity` variable.
    Lastly, return our variable with the right sum:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Navigate to the app and add some items to your basket to verify the basket count
    is being calculated correctly.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
- en: Finalizing the Shop Vue-router URLs
  id: totrans-71
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We''re now at a stage where we can finalize the URLs for our shop - including
    creating the redirects and Checkout links. Referring back to [Chapter 8](part0135.html#40NRU0-985bf4ae118d4f62b18ae64204cb251c),
    *Introducing Vue-Router and Loading URL-Based Components*, we can see which ones
    we are missing. These are:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
- en: '`/category` -redirect to `/`'
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`/product` - redirect to `/`'
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`/basket` - load `OrderBasket` component'
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`/checkout`- load `OrderCheckout` component'
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`/complete`- load `OrderConfirmation` component'
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Create the redirects in the appropriate places within the routes array. At
    the bottom of the routes array, create three new routes for the `Order` components:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'We can now update the placeholder `<span>` in the header of our app with a
    `router-link`:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Building the Order process and ListProducts component
  id: totrans-82
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'For the three steps of the Checkout, we are going to be utilizing the same
    component in all three: the `ListProducts` component. In the `OrderCheckout`, and
    `OrderConfirmation` components, it will be in a fixed, uneditable state, whereas
    when it is in the `OrderBasket` component, the user needs to be able to update
    quantities and remove items if desired.'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
- en: As we're going to be working at the Checkout, we need products to exist in the
    `basket` array. To save us having to find products and add them to the basket
    every time we refresh the app, we can ensure there are some products in the `basket`
    array by hardcoding an array in the store.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
- en: 'To achieve this, navigate to a few products and add them to your basket. Ensure
    there is a good selection of products and quantities for testing. Next, open your
    JavaScript console in the browser and enter the following command:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'This will output a string of your products array. Copy this and paste it into
    your store—replacing the `basket` array:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: On page load, your Cart count in the header should update to be the correct
    number of items you added.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
- en: We can now proceed with building our Checkout process. The product display in
    the basket is more complicated than the Checkout and Order Confirmation screens
    so, unusually, we'll work backward. Starting with the Order Confirmation page
    and moving to the Checkout page, adding more complexity before we head to the
    basket, adding the ability to exit the products.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
- en: Order Confirmation screen
  id: totrans-91
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Order Confirmation screen is one that is shown once the order is complete.
    This confirms the items purchased and may include the expected delivery date.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a template within the `OrderConfirmation.js` file with a `<h1>` and
    some relevant content relating to the order being complete:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Open up the application in your browser, add a product to your basket and complete
    an order to confirm it''s working. The next step is to include the `ListProducts`
    component. First, ensure the `ListProducts` component is correctly initialized
    and features an initial template:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Add the `components` object to the `OrderConfirmation` component and include
    the `ListProducts` component. Next, include it in the template:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Open the `ListPurchases` component once more to start displaying the products.
    The default state of this component will be to list the products in the basket,
    along with the variation selected. The price for each product will be displayed,
    along with the price if the quantity is more than one. Lastly, a grand total will
    be shown.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
- en: 'The first step is to get the basket list into our component. Create a `computed`
    object with a `products` function. This should return the basket products:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'With the products in the basket now available to us, we can loop through them
    in the table displaying the information required. This includes a thumbnail image,
    the product and variation title, price, quantity, and the total price of the item.
    Add a header row to the table too, so the user knows what the column is:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: Note that the price for each row is simply the unit price multiplied by the
    quantity. We now have a standard product list of the items the user has purchased.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
- en: Using Vue filters to format the price
  id: totrans-105
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The price is currently an integer, as that it is in the data. On the product
    page, we just prepended a `$` sign to represent a price, however, this is now
    the perfect opportunity to utilize Vue filters. Filters allow you to manipulate
    the data in the template without using a method. Filters can be chained and are
    used to carry out, generally, a single modification—for example converting a string
    to lowercase or formatting a number to be a currency.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
- en: 'Filters are used with the pipe (`|`) operator. If, for example, we had a filter
    to lowercase text, it would be used like the following:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: Filters are declared within a `filters` object on the component and accept a
    single parameter of the output preceding it.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a `filters` object within the `ListPurchases` component and create a
    function inside titled `currency()`. This function accepts a single parameter
    of `val` and should return the variable inside:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'We can now use this function to manipulate the price integers. Add the filter
    to both the unit and total price within the template:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'You won''t notice anything in the browser, as we have yet to manipulate the
    value. Update the function to ensure the number is fixed to two decimal places
    and has a `$` preceding it:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: Our prices are now nicely formatted and displaying correctly.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
- en: Calculating a total price
  id: totrans-117
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The next addition to our purchase list is a total value of the basket. This
    will need to be calculated in a similar way to the basket count we did earlier.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a new `computed` function title: `totalPrice`. This function should
    loop through the products and add the price up, taking into consideration any
    multiple quantities:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'We can now update our template to include the total price—ensuring we pass
    it through the `currency` filter:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: Creating an Order Checkout page
  id: totrans-123
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Our `OrderCheckout` page will have a similar makeup to the `OrderConfirmation`
    page - however, in a real shop, this would be the page before payment. This page
    would allow the user to fill in their billing and delivery details before navigating
    to the payment page. Copy the `OrderConfirmation` page and update the title and
    info text:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'Below the `<list-purchases />` component, create a form with several fields
    so we can collect the billing and delivery name and addresses. For this example,
    just collect the name, first line of the address, and ZIP code:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'We now need to create a data object and bind each field to a key. To help group
    each set, create an object for both `delivery` and `billing` and create the fields
    inside with the correct names:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'Add a `v-model` to each input, linking it to the appropriate data key:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'The next step is to create a `submit` method and collate the data to be able
    to pass it on to the next screen. Create a new method titled `submitForm()`. As
    we are not handling payment in this example, we can route to the confirmation
    page in the method:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: We can now bind a `submit` event to the form and add a submit button. Like the
    `v-bind:click` attribute (or `@click`), Vue allows you to bind a `submit` event
    to a method using a `@submit=""` attribute.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the declaration to the `<form>` element and create a submit button in your
    form:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: On submitting your form, the app should redirect you to our Confirmation page.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
- en: Copying details between addresses
  id: totrans-138
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'One feature that several shops have is the ability to mark the delivery address
    to be the same as the billing address. There are several ways we could approach
    this, and how you choose to do it is up to you. The immediate options are:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
- en: Have a "copy details" button—this copies the details from billing to delivery
    but does not keep them in sync
  id: totrans-140
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Have a checkbox that keeps the two in sync—checking the box disables the delivery
    box fields but populates them with the billing details
  id: totrans-141
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For this example, we are going to code the second option.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a checkbox between the two fieldsets that is bound to a property in
    the data object via `v-model` called `sameAddress`:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'Create a new key in the data object and set it to `false` by default:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  id: totrans-146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'The next step is to disable the delivery fields if the checkbox is checked.
    This can be done by activating the  `disabled` HTML attribute based on the checkbox
    result. In a similar way to how we disabled the "Add to cart" button on the product
    page, bind the disabled attribute on the delivery fields to the `sameAddress`
    variable:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  id: totrans-148
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: Checking the box will now deactivate the fields - making the user unable to
    enter any data. The next step is to replicate the data across the two sections.
    As our data objects are the same structure, we can create a `watch` function to
    set the `delivery` object to the same as the `billing` object when the checkbox
    is checked.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a new `watch` object and function for the `sameAddress` variable. If
    it is `true`, set the delivery object to the same as the billing one:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  id: totrans-151
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: With the `watch` function added, we can enter data into the billing address,
    check the box, and the delivery address gets populated. The best thing about this
    is that they now stay in sync, so if you update the billing address, the delivery
    address updates on the fly. The problem arises when you uncheck the box and edit
    the billing address—the delivery address still updates. This is because we have
    bound the objects together.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
- en: 'Add an `else` statement to make a *copy* of the billing address when the box
    is unchecked:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  id: totrans-154
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: We now have a functioning Order Confirmation page, which collects billing and
    delivery details.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
- en: Creating an editable basket
  id: totrans-156
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We now need to create our basket. This needs to show the products in a similar
    fashion to the Checkout and Confirmation, but it needs to give the user the ability
    to edit the basket contents—either to delete an item or update the quantity.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
- en: 'As a starting point, open `OrderBasket.js` and include the `list-purchases`
    component, as we did on the confirmation page:'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  id: totrans-159
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'The next thing we need to do is edit the `list-purchases` component. To ensure
    we can differentiate between the views, we are going to add an `editable` prop.
    This will be set to `false` by default and `true` in the basket. Add the `prop` to
    the component in the basket:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  id: totrans-161
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'We now need to tell the `ListPurchases` component to accept this parameter
    so we can do something with it within the component:'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  id: totrans-163
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: Creating editable fields
  id: totrans-164
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We now have a prop determining if our basket should be editable or not. This
    allows us to show the delete links and make the quantity an editable box.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a new table cell next to the quantity one in the `ListPurchases` component
    and make it visible only when the purchases are visible. Make the static quantity
    hidden in this state too. In the new cell, add an input box with the value set
    to the quantity. We are also going to bind a `blur` event to the box. The `blur`
    event is a native JavaScript event that triggers when the input is unfocused.
    On blur, trigger an `updateQuantity` method. This method should accept two arguments;
    the event, which will contain the new quantity, and the SKU for that particular
    product:'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  id: totrans-167
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: Create the new method on the component. This method should loop through the
    products, locating the one with a matching SKU and updating the quantity to an
    integer. We also need to update the store with the result - so that the quantity
    can be updated at the top of the page. We'll create a general mutation that accepts
    the full `basket` array back with new values to allow the same one to be used
    for the product deletion.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
- en: 'Create the mutation that updates the quantity and commits a mutation titled `updatePurchases`:'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  id: totrans-170
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: 'In the store, create the mutation that sets the `state.basket` equal to the
    payload:'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  id: totrans-172
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: Updating the quantity should now update the total price of the item and the
    basket count at the top of the page.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
- en: Removing items from your cart
  id: totrans-174
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The next step is to give the user the ability to remove items from their cart.
    Create a button in the `ListPurchases` component with a click binding. This button
    can go anywhere you want - our example shows it as an extra cell at the end of
    the row. Bind the click action to a method titled `removeItem`. This just needs
    to accept a single parameter of the SKU. Add the following to the `ListPurchases`
    component:'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  id: totrans-176
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: 'Create the `removeItem` method. This method should filter the `basket` array,
    only returning the objects that *don''t* match the SKU passed in. Once the result
    is filtered, pass the result to the same mutation we used in the `updateQuantity()`
    method:'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  id: totrans-178
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: 'One last enhancement we can make is to trigger the `removeItem` method if the
    quantity is set to 0\. Within the `updateQuantity` method, check the value before
    looping through the products. If it is `0`, or doesn''t exist, run the `removeItem`
    method - passing the SKU through:'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  id: totrans-180
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: Completing the shop SPA
  id: totrans-181
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The last step is to add a link from the `OrderBasket` component to the `OrderCheckout`
    page. This can be done by linking to the `Checkout` route. With that, your checkout
    is complete, along with your shop! Add the following link to the basket:'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE51]'
  id: totrans-183
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: Summary
  id: totrans-184
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Well done! You have created a full shop single-page application using `Vue.js`.
    You have learned how to list products and their variations, along with adding
    specific variations to the basket. You've learned how to create shop filters and
    category links, along with creating an editable shopping basket.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
- en: As with everything, there are always improvements to be made. Why don't you
    give some of these ideas a go?
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
- en: Persisting the basket using `localStorage`—so products added to the basket are
    retained between visits and the user pressing refresh
  id: totrans-187
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Calculating shipping based on the weight attribute of the products in the basket—use
    a switch statement to create bands
  id: totrans-188
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Allowing products without variations to be added to the basket from the category
    listing page
  id: totrans-189
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Indicating which products have items out of stock when filtered on that variation
    on the category page
  id: totrans-190
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Any ideas of your own!
  id: totrans-191
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
