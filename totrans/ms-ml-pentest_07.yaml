- en: Detecting Advanced Persistent Threats
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Modern organizations face cyber threats on a daily basis. Black hat hackers
    do not show any indication that they are going to stop. New hacking techniques
    appear regularly. Detecting **advanced persistent threats** (**APTs**) is a hard
    mission, since the goals of these attacks are to stay undetected for a long period
    of time, and to steal data, rather than cause damage to systems.
  prefs: []
  type: TYPE_NORMAL
- en: According to multiple information security reports, the number of APT attacks
    is increasing in a notable way, targeting national defenses, manufacturing, and
    the financial industry. Thus, classic protection techniques are, in many cases,
    useless. Deploying suitable platforms and solutions can help organizations and
    companies defend against cyber attacks, especially APTs.
  prefs: []
  type: TYPE_NORMAL
- en: This chapter will give you step-by-step guidance to teach you how to build a
    threat-hunting platform, using a stack of well known open-source projects to protect
    your clients' data. You will learn how to create a machine learning module to
    enhance your platform and automate anomaly detection, so that you can focus on
    other concerns within your team.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover:'
  prefs: []
  type: TYPE_NORMAL
- en: The advanced threat landscape
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Threat-hunting methodologies
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The hunting maturity model
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The cyber kill chain
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The diamond model of intrusion detection
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Threat hunting using machine learning, with the **Elasticsearch**, **Logstash**,
    and **Kibana** (**ELK**) stack
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will use the same Python libraries that we used in the
    previous chapters. It is recommended that you have the following:'
  prefs: []
  type: TYPE_NORMAL
- en: 4 GB RAM
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 2 GB CPU
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Threats and risk analysis
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Threats are potential dangers to the assets of your organization. According
    to the **European Union Agency for Network and Information Security** (**ENISA**)
    Threat Landscape Report, 2017, modern organizations face millions of cyber threats,
    including: malware, web-based attacks, phishing, ransomware, botnets, and so on.
    For security professionals, and especially for risk managers, threats play a huge
    role in analyzing risks. Risks are a combination of threats and vulnerabilities,
    and they can be mathematically represented as *Risk = Threats x Vulnerability*.'
  prefs: []
  type: TYPE_NORMAL
- en: Threat-hunting methodology
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Threat hunting is an approach for search out, identifying, and understanding
    APTs. Threat hunting, like any methodological information security mission, is
    not about tools and utilities. It is a combination of processes, people, and technology.
  prefs: []
  type: TYPE_NORMAL
- en: 'Threat hunting involves the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Creating hypotheses
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Investigating by using tools and techniques
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Uncovering new patterns
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Informing and enriching analytics
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following steps form the** threat-hunting loop**:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00147.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'You can evaluate the maturity of your threat-hunting program by selecting a
    level from the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Level 1**: Initial (little or no data collection, relying on automated alerts)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Level 2**: Minimal (high level of data collection)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Level 3**: Procedural (high level of data collection, following data analysis
    procedures)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Level 4**: Innovative (high level of data collection, following new data
    analysis procedures)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Level 5**: Leading (high level of data collection, automating the successful
    data analysis procedures)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The following two sections include the most important terminologies in threat
    hunting.
  prefs: []
  type: TYPE_NORMAL
- en: The cyber kill chain
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Like many aspects of information security, the cyber kill chain is a military-inspired
    model to describe the steps used in a cyber attack.
  prefs: []
  type: TYPE_NORMAL
- en: 'The seven steps of the cyber kill chain are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Reconnaissance**: Harvesting information, such as email addresses'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Weaponization**: Coupling exploits with backdoors into a deliverable payload—in
    other words, building a deliverable payload using an exploit and a backdoor'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Delivery**: Delivering a weaponized bundle to the victim via different means,
    such as an email or USB'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Exploitation**: Exploiting a vulnerability to execute code on the targeted
    machine'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Installation**: Installing a malware'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Command and control (C2)**: Command channel for remote manipulation of the
    victim'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Actions and objectives**: Accomplishing the original goal'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The diamond model of intrusion analysis
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The diamond model of intrusion analysis is a methodology that was developed
    to verify cyber threats. Every incident can be represented as a diamond. This
    cognitive model is used by many information security analysts to characterize
    organized threats consistently and track them as they evolve.
  prefs: []
  type: TYPE_NORMAL
- en: 'The four nodes of the diamond are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Adversary (bad guy persona)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Infrastructure (such as IP addresses, domain names, and email addresses)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Capabilities (such as malware, exploits, and stolen certs)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Victims (such as people and network assets)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Threat hunting with the ELK Stack
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You have now seen a clear overview of the most important terminologies in threat
    hunting. So, let's build our threat-hunting platform. In the following sections,
    we will learn how to build a threat-hunting system by using open-source projects.
    In our hands-on guide, we will use one of the most promising solutions available—the
    ELK Stack. It includes three open-source projects, and is one of the most downloaded
    log management platforms nowadays.
  prefs: []
  type: TYPE_NORMAL
- en: 'The ELK Stack is widely used in many fields, including:'
  prefs: []
  type: TYPE_NORMAL
- en: Business intelligence
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Web analytics
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Information security
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Compliance
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The ELK Stack is composed of the following components:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Elasticsearch**: To search and analyze data'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Logstash**: To collect and transform data'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Kibana**: To visualize data'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following diagram illustrates the major components in the ELK Stack:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00148.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'So, according to the main architecture, in order to build a threat-hunting
    platform, we need to: collect logs, analyze and search for suitable data, and
    manage a visualization of our findings. Let''s look at how we can prepare the
    ELK Stack environment.'
  prefs: []
  type: TYPE_NORMAL
- en: Elasticsearch
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Elasticsearch is an amazing open-source project. It is a RESTful, distributed,
    and JSON-based search engine. In other words, you can look at it as a NoSQL search
    server. You can see its official website at [https://www.elastic.co/](https://www.elastic.co/):'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00149.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'To download it, go to [https://www.elastic.co/downloads/elasticsearch](https://www.elastic.co/downloads/elasticsearch):'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00150.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Select a suitable package. In my case, I am going to install it on an Ubuntu
    14.04 machine. Thus, I am going to select the `.deb` version. It is recommended
    that you have the following:'
  prefs: []
  type: TYPE_NORMAL
- en: 4GB RAM
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 2GB CPU
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Elasticsearch is written in Java. So, we need to make sure that it is installed
    in our environment (we should download it if it is not). Add Java to the `apt` as
    follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Now Java source is added into the `list.sources` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00151.gif)'
  prefs: []
  type: TYPE_IMG
- en: 'Update the `list.sources` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00152.gif)'
  prefs: []
  type: TYPE_IMG
- en: 'Now, install the Java `installer`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '![](img/00153.gif)'
  prefs: []
  type: TYPE_IMG
- en: 'Then, configure it:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00154.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Voilà! We have installed it successfully. Check it by typing the `java -version` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00155.gif)'
  prefs: []
  type: TYPE_IMG
- en: 'Let''s install Elasticsearch. Import the `elasticsearch` public key as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '![](img/00156.gif)'
  prefs: []
  type: TYPE_IMG
- en: 'Add Elasticsearch to the source list:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '![](img/00157.gif)'
  prefs: []
  type: TYPE_IMG
- en: 'Update the source list by using `apt-get update` and `install elasticsearch`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '![](img/00158.gif)'
  prefs: []
  type: TYPE_IMG
- en: 'To configure Elasticsearch, edit `/etc/elasticsearch/elasticsearch.yml` by
    using a text editor:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '![](img/00159.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'After configuring the file, restart the Elasticsearch service:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Kibana
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: After installing and configuring Elasticsearch, it is time to install Kibana,
    to visualize data in a well-designed dashboard. Kibana is a web interface with
    different types of charts. You can see it as the visualization layer of our stack.
  prefs: []
  type: TYPE_NORMAL
- en: 'Install Kibana by using the `apt-get install` command, as usual:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'It won''t take so long to install it:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00160.gif)'
  prefs: []
  type: TYPE_IMG
- en: 'After installing it, we can configure it by using a text editor to modify the
    `/opt/kibana/config/kibana.yml` configuration file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Enable the Kibana service by using the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: '![](img/00161.gif)'
  prefs: []
  type: TYPE_IMG
- en: 'Start the service by using the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: '![](img/00162.gif)'
  prefs: []
  type: TYPE_IMG
- en: If you want to access the dashboard from outside using a public IP address,
    you can use a reverse proxy. For example, **Nginx** would be great in this case.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can find the Kibana folders at `/usr/share/kibana`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00163.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'To check the dashboard, type `<Address>: 5601` and enter your credentials:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00164.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Logstash
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'At this point, we have installed Elasticsearch and Kibana; now we need to install
    Logstash to collect and transform data. The Logstash pipeline contains three components:'
  prefs: []
  type: TYPE_NORMAL
- en: Input
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Filters
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Output
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/00165.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Let''s add Logstash to the sources list, and then update it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: '![](img/00166.gif)'
  prefs: []
  type: TYPE_IMG
- en: 'Install Logstash as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: '![](img/00167.gif)'
  prefs: []
  type: TYPE_IMG
- en: 'Once you have installed Logstash, you can edit its configuration file, `<Parent_Directory>/logstash/conf/logstash.conf`.
    As you will notice, the configuration file contains two sections - `input` and
    `output`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00168.gif)'
  prefs: []
  type: TYPE_IMG
- en: 'Wait! I bet you are wondering why we only have two sections, even though Logstash
    contains three sections, as we discussed before. You are totally right. We need
    to add a customized section, called `filters`. Logstash provides good capabilities,
    including the ability to create personalized filters. For example, to create a
    filter, you can use the following format (we will use it later, in our guide):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: The `gork` filter is used to parse unstructured log data into something structured
    and queryable. According to the official section on filter plugins ([https://www.elastic.co/guide/en/logstash/current/plugins-filters-grok.html](https://www.elastic.co/guide/en/logstash/current/plugins-filters-grok.html)),
    Logstash delivers more than 120 patterns, by default.
  prefs: []
  type: TYPE_NORMAL
- en: Machine learning with the ELK Stack using the X-Pack plugin
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We have now installed the three main components of an ELK Stack. If you want
    an efficient way to deploy an ELK Stack, especially for testing purposes, I recommend
    that you use a cloud-based stack. For example, in the following demonstrations,
    I am going to use a predefined cloud ELK Stack by Bitnami.
  prefs: []
  type: TYPE_NORMAL
- en: 'The Bitnami ELK Stack ships with the following software versions:'
  prefs: []
  type: TYPE_NORMAL
- en: Apache 2.4.29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Elasticsearch 6.2.2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Logstash 6.2.2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Kibana 6.2.2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'In a few moments, your stack will be ready to use. The following screenshot
    shows the ELK Stack files:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00169.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'To get the password for your Bitnami environment, go to the Boot diagnostics
    section in your Azure portal, and check the log file; you will find the password
    at the bottom of the file:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00170.gif)'
  prefs: []
  type: TYPE_IMG
- en: 'Before adding the machine learning plugin, let''s configure our ELK Stack. Load
    the ELK environment and log in to the ELK server using the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: '![](img/00171.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Let's stop Logstash by typing `sudo /opt/bitnami/ctlscript.sh stop logstash`
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00172.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Create a configuration file, `/opt/bitnami/logstash/conf/access-log.conf`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: '![](img/00173.gif)'
  prefs: []
  type: TYPE_IMG
- en: 'Check the configuration of `/opt/bitnami/logstash/bin/logstash -f /opt/bitnami/logstash/conf/
    --config.test_and_exit`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00174.gif)'
  prefs: []
  type: TYPE_IMG
- en: 'Start Logstash as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: '![](img/00175.gif)'
  prefs: []
  type: TYPE_IMG
- en: 'Check if Elasticsearch is working well:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00176.gif)'
  prefs: []
  type: TYPE_IMG
- en: 'Now, let''s go to Kibana. As you may have noticed, we don''t have an index
    pattern yet:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00177.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'After configuring Logstash, we can create a new index pattern:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00178.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Type `*` and click Next step:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00179.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Select @timestamp and click the Create Index pattern button. You can now view
    the new index pattern page in Kibana:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00180.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'When you hit the Discover option, you can check the logs:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00181.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Now, let''s customize a visualization to add to the main dashboard later. Click
    Visualize on the side list, and create a new visualization:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00182.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'For our demonstration, we are going to use the Vertical Bar. You can choose
    from a range of charts and visualization tools:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00183.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'For the X-Axis, select Date Histogram as the Aggregation and @timestamp as
    the Field:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00184.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'You will then see a visualization of your chart, as the following screenshot
    illustrates:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00185.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'After creating the visualization, let''s add to our dashboard. Click on the
    Dashboard link and create a new dashboard. Then, add your visualizations:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00186.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Save the dashboard. Now, you can check any indicator:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00187.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: The ELK Stack threat platform is ready to help you hunt a number of advanced
    threats. Let's take our project up a notch and add an intelligent touch to it
    by using the power of machine learning to automate hunting operations. The ELK
    Stack gives you the power to add a plugin called X-Pack to your hunting platform,
    which will help you to detect anomalies in your artifacts and logs.
  prefs: []
  type: TYPE_NORMAL
- en: 'To get the X-Pack plugin, we need to install it on every layer of the stack,
    as this official illustration shows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00188.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'To install the plugin on Elasticsearch, go to the `binaries` folder and type
    in the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'The same action applies to Kibana:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'It also applies to Logstash:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'Restart all of the services and go to the Kibana dashboard; you will notice
    a new option, called Machine Learning:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00189.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Finally, you can add a time series anomaly detection capability, thanks to X-Pack.
    In the previous chapter we discussed anomaly detection in a detailed way. We dived
    deep into anomaly detection fundamentals and how to use machine learning to detect
    those anomalies. X-Pack is using the same techniques to spot anomalies.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00190.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In previous chapters, we saw how to build anomaly detection systems from scratch
    by using different machine learning algorithms and Python libraries. This chapter
    included a step-by-step guide to help you build a fully functioning threat-hunting
    platform, using three amazing open source projects. We also implemented a machine
    learning plugin to optimize and enhance the threat-hunting platform's power. By
    now, you have learned how to build many defensive systems using the power of machine
    learning. The next chapter is a must-read if you want to learn how to bypass machine
    learning safeguards.
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Which of the following is not a step in the cyber kill chain?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: (a) Scanning
  prefs: []
  type: TYPE_NORMAL
- en: (b) Control and command
  prefs: []
  type: TYPE_NORMAL
- en: (c) Discover and spread
  prefs: []
  type: TYPE_NORMAL
- en: Which of the following options is not a node of the diamond model of intrusion
    analysis?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: (a) Victims
  prefs: []
  type: TYPE_NORMAL
- en: (b) Infrastructure
  prefs: []
  type: TYPE_NORMAL
- en: (c) Procedures
  prefs: []
  type: TYPE_NORMAL
- en: How many parts are needed in a Logstash configuration file?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: (a) 2
  prefs: []
  type: TYPE_NORMAL
- en: (b) 3
  prefs: []
  type: TYPE_NORMAL
- en: (c) 4
  prefs: []
  type: TYPE_NORMAL
- en: In ElasticSearch, what is indexing?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: (a) The process of storing data in an index
  prefs: []
  type: TYPE_NORMAL
- en: (b) The process of identifying data
  prefs: []
  type: TYPE_NORMAL
- en: (c) None of the above
  prefs: []
  type: TYPE_NORMAL
- en: In Elasticsearch, what is a node?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: (a) An Elasticsearch module
  prefs: []
  type: TYPE_NORMAL
- en: (b) An instance of Elasticsearch
  prefs: []
  type: TYPE_NORMAL
- en: (c) None of the above
  prefs: []
  type: TYPE_NORMAL
- en: In Elasticsearch, what is a shard?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: (a) Shared files
  prefs: []
  type: TYPE_NORMAL
- en: (b) Shared data
  prefs: []
  type: TYPE_NORMAL
- en: (c) Shared resources (RAM, vCPU, and so on)
  prefs: []
  type: TYPE_NORMAL
- en: Does Elasticsearch have a schema? (Yes | No)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
