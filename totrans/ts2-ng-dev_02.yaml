- en: Getting Started with TypeScript
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous chapter, we discussed the challenges we may encounter because
    of the loose-type nature of the JavaScript language. We also saw various attempts
    of mitigating these challenges, none of which felt natural at all. We also introduced
    TypeScript as a tool that could help; how TypeScript can help is what we will
    discuss in this chapter.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
- en: The building blocks of TypeScript and its core concepts are matters of the heart,
    and we need to treat them as such. Therefore, backed with hands-on examples, we
    will discuss these building blocks, how they work together, and how you can integrate
    them into your workflow as a JavaScript developer. But first, we need to learn
    how to set up TypeScript.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
- en: Creating a TypeScript environment
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Building working examples with TypeScript
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Type Annotation
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ES6 and TypeScript
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting up TypeScript
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The TypeScript setup depends on the context where it will be used. This is because
    you can integrate it in any JavaScript tools, libraries, and frameworks as long
    as it's properly configured for the environment. For now, we will focus on the
    simplest and the most basic setup.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
- en: A basic knowledge of Node and its package manager npm is required to get going
    with TypeScript. It's also required that you install both from the Node website
    ([https://nodejs.org/en/](https://nodejs.org/en/)).
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
- en: 'With Node and npm installed, you can install TypeScript globally using `npm`
    via the command line tool:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'If you get a permission warning while trying to install, you can use the `sudo`
    command:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'You will see the following output if the installation goes well:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/b6a24256-5cc2-4a09-802d-3fe013419191.png)'
  id: totrans-16
  prefs: []
  type: TYPE_IMG
- en: 'To confirm whether the TypeScript installation was successful, you can check
    the installed version. If a version is shown, then you have a successful installation:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Therefore, a TypeScript instance on your machine will work as shown ahead:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/6be1f19f-0633-4e2e-8ba6-65321d3488d9.png)'
  id: totrans-20
  prefs: []
  type: TYPE_IMG
- en: Hello World
  id: totrans-21
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: TypeScript files have a `.ts` extension. The extension supports both JavaScript
    and TypeScript. This means that it is correct to write JavaScript code in a `.ts`
    file without TypeScript. Let's see an example.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
- en: 'First, make an `index.html` file with the following minimal bootstrap markup:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Notice that the JavaScript file added before the closing tag is *not* a `.ts`
    file; rather, it''s a familiar JavaScript file with a `.js` extension. This doesn''t
    mean that our logic will be written in JavaScript; in fact, it''s a TypeScript
    file named `2.1.ts`:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Does anything look weird? No, I don't think so. We're still talking pure JavaScript
    but just that it lives in a TypeScript file. This shows how TypeScript supports
    pure JavaScript.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
- en: 'Remember that we are importing `2.1.js` in the `index.html` file and not `2.1.ts`.
    Therefore, it''s time to generate an output that the browser can understand. This
    is where the TypeScript compiler that we installed via `npm` comes in handy. To
    compile, enter `cd` into your working directory and run the following command
    in your command line:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '*Ignore the warning about the value property. We will fix that soon.*'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
- en: 'This will generate a compiled `2.1.js` file. As you may have guessed, looking
    at both shows no syntax difference:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/77a5c5c6-a454-4377-9a43-630acc14f68c.png)'
  id: totrans-32
  prefs: []
  type: TYPE_IMG
- en: 'You can then serve your web page with the generated assets using a web server.
    There are lots of options to help you complete this, but `serve` is quite popular
    and stable ([https://github.com/zeit/serve](https://github.com/zeit/serve)). To
    install `serve`, run the following command:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Now you can serve directly hosting your `index` file with the following:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'With `npm` scripts, you can run both the commands concurrently. First, initialize
    `package.json`:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Now, add the following scripts to the JSON:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: We passed in the watched option (`-w`), so TypeScript can recompile whenever
    a change is detected in the `.ts` file.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
- en: 'This is what our example looks like:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/b6fd864a-d2cc-4cce-8012-66d931cb0814.png)'
  id: totrans-43
  prefs: []
  type: TYPE_IMG
- en: Type annotation in TypeScript
  id: totrans-44
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: It's worth mentioning again that nothing looks different in the `Hello World`
    example we just saw. Let's employ some TypeScript specific features, one of which
    is Types. Types are the reason TypeScript exists, and every other feature apart
    from Types is just syntactic sugar.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
- en: 'We are not going into details with Types because [Chapter 3](fb2f2b0b-b55a-42c6-b7bc-6c1a275f064a.xhtml),
    *Typescript Native Types and Accessors*, covers that. What we can discuss is Type
    annotation, which is a mechanism that TypeScript uses to apply strict types to
    a member. Annotation is achieved by following the member initialization with a
    colon (`:`) and the type (for example, `string`) as follows:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Let''s have a look at some annotated examples:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Not just primitives but objects, arrays, and functions can be typed as well.
    We will see how shortly.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
- en: What we can do is rewrite our previous `Hello World` example in order to annotate
    the variables and functions with types.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
- en: 'Take a look at this image again:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/ce477b33-7933-4a1b-b184-65e3607fc256.png)'
  id: totrans-53
  prefs: []
  type: TYPE_IMG
- en: On the TypeScript section (right),  `value`seems not to be identified by the
    editor as a property of the DOM and, hence, the error line. But wait, it is the
    same old JavaScript you have been writing your entire life. What's wrong here?
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
- en: TypeScript comes with defined types for the DOM. This means that it will throw
    an error when we try to access a property that is not defined in the respective
    DOM interface (more on interfaces later). By nature, the DOM query method, `querySelector`,
    alongside the other query methods return an `Element` type (which is inferred
    if not annotated). The `Element` type is basic and is comprised of generic information
    about the DOM, which means that properties and methods specific to what is derived
    from `Element` will not be seen.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
- en: 'This makes sense not just in TypeScript but also in other OOP languages:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Back to our example, let''s see how we can use annotation and casting to fix
    this:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'There are no behavioral changes, just productivity improvements. Let''s discuss
    what''s going on:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
- en: The button element is of type `Element`. Nothing special here because TypeScript
    already infers that internally.
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The input element is of the `HTMLInputElement`type. Because TypeScript infers
    the returned value as `Element`, we had to cast to the correct type, that is, `HTMLInputElement`.
    This is done by prefixing the returned value with `<>` and passing the interface
    that we want to cast it to.
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The messenger element is of the `HTMLElement`type. We still had to cast here
    using the same reason as seen in *Step 2* but with a different supported syntax
    (`as`). `HTMLElement` is a subtype for `Element` and includes more specific DOM
    properties/methods (such as`innerText`).
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Rather than passing the callback, we wrap it in a function, so we can receive
    parameters.
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Let''s take a look at the method passed to `addEventListener`:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'We added a lot of validation logic just to make sure that we are getting the
    right type from the parameters. We can simplify this by using TypeScript annotation:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: This is much better, right? The unnecessary checks are taken care of with Types.
    In fact, before this gets to the browser, if your editor (for example, VS Code)
    supports TypeScript, you will get syntax errors when the method is called with
    invalid types.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
- en: Type annotation helps us write less verbose, more comprehensible, and bug-free
    applications. TypeScript makes annotation flexible; hence, you do not have to
    strictly provide types for every member in your logic. You're free to annotate
    what you feel is necessary, ranging from nothing to all; just keep in mind that
    the more strict your annotations are, the less debugging you will have to do in
    the browser.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
- en: ES6 and beyond
  id: totrans-71
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In addition to Type annotation, TypeScript supports EcamaScript 6 (ES6/ES2015)
    alongside other helpful features, such as enums, decorators, accessibility level
    (private, public, and protected), interfaces, generics, and so on
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
- en: We will take a deep look into a few of the features in the next chapter. Before
    that, let's get our feet wet and our hands a little bit dirty by trying another
    example, which comprises some of these ES6 and TypeScript-specific features. We
    will build a counter app. This is just an attempt to get you excited about these
    features, and you get to see how TypeScript brings the features you always wished
    existed in JavaScript.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s get started with a basic HTML template:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: User story
  id: totrans-76
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '*The user is expected to increment or decrement a counter from the click of
    a button,* basically, a counter that''s initialized to `0`, an increment button
    to increment by `1`, and a decrement button to decrement by `1`.'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
- en: 'Rather than littering our code with DOM manipulations and event logic, we can
    organize them into classes. After all, that''s why classes exist:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'This is JavaScript looking like a structured language. Let''s take some time
    to explain what is going on:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
- en: First, we create a class and declare some private properties to hold the temporary
    state of the HTML DOM elements. Visibility features such as `private` are specific
    to TypeScript only but classes have been around in ES6.
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The constructor uses this `_getDOMElement` private utility method to query the
    DOM and initialize the values of the private properties.
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `incBtn` and `decBtn` getters are used to make the values of these private
    properties public. This is a common pattern in OOP. Getters are categorized under
    accessors and available in ES6.
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The counter accessors are used to set and retrieve the values of the counter
    text by converting them to integer and string, respectively.
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Your first attempt to run this should throw an error, as shown in the following
    image:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/96f14b4a-7ccc-4e40-a464-f13f7b922968.png)'
  id: totrans-86
  prefs: []
  type: TYPE_IMG
- en: 'This is expected because TypeScript compiles to ES3 by default, but getters
    and setters (accessors) are not available in ES3\. To get rid of this error, you
    can tell the TypeScript compiler that you prefer ES5 rather than ES3:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: The `-t` flag, alias for `--target`, tells TypeScript which version to compile
    to.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
- en: 'The `DOMEvent` class is a lot simpler--just a single method to register all
    kinds of events when called:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'The method takes the following:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
- en: An element to listen for events on
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The type of event (for example, `click`, `mouseover`, and `dblclick`) as string
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A callback method that returns nothing (`void`) but is passed to the event payload
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The method then uses `addEventListener` to register the event.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, we need an entry point for the example. This will be in the form of
    a class as well and the class will depend on an instance of `DOM` and `DOMEvent`
    classes:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Let''s discuss how the preceding snippet works:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
- en: The constructor, which is called when the class is initialized, attempts to
    set up events using the `setupEvents` method.
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `setupEvents`method iterates over the list of buttons that we have on the
    DOM and calls the `DOMEvents register` method on each of them
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The register method is passed to the button as `HTMLElement`, `click`as the
    type of event, and `handleClicks` as the event handler. The handler is bound with
    the right contextual `this`. This is always a confusion in JavaScript; Yehuda
    Katz has explained how it works in a simple manner at [http://yehudakatz.com/2011/08/11/understanding-javascript-function-invocation-and-this/](http://yehudakatz.com/2011/08/11/understanding-javascript-function-invocation-and-this/).
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The callback method invokes `incrementCounter` or `decrementCounter` depending
    on the ID of the button that is clicked. These methods add or subtract `1` from
    the counter, respectively.
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'You can initialize the app by creating an instance of `App`:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'The image shows our newly built slick counter app:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/e90ced32-94ab-4ba2-885a-f55901e53335.png)'
  id: totrans-107
  prefs: []
  type: TYPE_IMG
- en: Final notes
  id: totrans-108
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'It''s important to point out the cool features we used in these examples once
    more:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
- en: Classes
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Accessors
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Visibility
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Arrow functions (callbacks):'
  id: totrans-113
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE22]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: The `const` keyword for variable declarations instead of `var`
  id: totrans-115
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Destructuring :'
  id: totrans-116
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 解构：
- en: '[PRE23]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: Summary
  id: totrans-118
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: Some of these features are available natively in the JavaScript environment;
    TypeScript builds on them to give you a better experience as a developer. This
    is why it is called a JavaScript superset.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 其中一些功能在JavaScript环境中是原生可用的；TypeScript在此基础上进行了扩展，为开发人员提供更好的体验。这就是为什么它被称为JavaScript的超集。
- en: In the next chapter, we will sit back to review and describe these features
    with more examples to make you get used to the workflow.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将回顾和描述这些功能，并举更多例子让你熟悉工作流程。
