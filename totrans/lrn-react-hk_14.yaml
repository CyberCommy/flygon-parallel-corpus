- en: Migrating from React Class Components
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous chapter we learned how to build our own Hooks by extracting
    custom Hooks from existing code. Then, we used our own Hooks in the blog app and
    learned about local Hooks and the interactions between Hooks. Finally, we learned
    how to write tests for Hooks using the React Hooks Testing Library, and implemented
    tests for our custom Hooks.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we are going to start by implementing a ToDo app using React
    class components. In the next step, we are going to learn how to migrate an existing
    React class component application to Hooks. Seeing the differences between function
    components using Hooks and class components in practice will deepen our understanding
    about the trade-offs of using either solution. Furthermore, by the end of this
    chapter we will be able to migrate existing React applications to Hooks.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following topics will be covered in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Handling state with class components
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Migrating an app from class components to Hooks
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Learning about the trade-offs of class components versus Hooks
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A fairly recent version of Node.js should already be installed (v11.12.0 or
    higher). The `npm` package manager for Node.js also needs to be installed.
  prefs: []
  type: TYPE_NORMAL
- en: The code for this chapter can be found on the GitHub repository: [https://github.com/PacktPublishing/Learn-React-Hooks/tree/master/Chapter11](https://github.com/PacktPublishing/Learn-React-Hooks/tree/master/Chapter11).
  prefs: []
  type: TYPE_NORMAL
- en: 'Check out the following video to see the code in action:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://bit.ly/2Mm9yoC](http://bit.ly/2Mm9yoC)'
  prefs: []
  type: TYPE_NORMAL
- en: Please note that it is highly recommended that you write the code on your own.
    Do not simply run the code examples that have been provided. It is important that
    you write the code yourself in order to be able to learn and understand properly.
    However, if you run into any issues, you can always refer to the code example.
  prefs: []
  type: TYPE_NORMAL
- en: Now, let's get started with the chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Handling state with class components
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Before we start migrating from class components to Hooks, we are going to create
    a small ToDo list app using React class components. In the next section, we are
    going to turn these class components into function components using Hooks. Finally,
    we are going to compare the two solutions.
  prefs: []
  type: TYPE_NORMAL
- en: Designing the app structure
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'As we did before with the blog app, we are going to start by thinking about
    the basic structure of our app. For this app, we are going to need the following
    features:'
  prefs: []
  type: TYPE_NORMAL
- en: A header
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A way to add new todo items
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A way to show all todo items in a list
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A filter for the todo items
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'It is always a good idea to start with a mock-up. So, let''s begin:'
  prefs: []
  type: TYPE_NORMAL
- en: 'We start by drawing a mock-up of an interface for our ToDo app:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/cb6fb71f-d7d3-49d9-aa60-9f8a1f4908bd.png)'
  prefs: []
  type: TYPE_IMG
- en: Mock-up of our ToDo app
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, we define the fundamental components, in a similar way to how we did
    it with the blog app:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/d6cb7c71-175a-45ca-a341-a92bd7d43a81.png)'
  prefs: []
  type: TYPE_IMG
- en: Defining fundamental components in our app mock-up
  prefs: []
  type: TYPE_NORMAL
- en: 'Now we can define the container components:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/c3499ce0-7f78-450f-9eca-e257c62eeef5.png)'
  prefs: []
  type: TYPE_IMG
- en: Defining container components in our app mock-up
  prefs: []
  type: TYPE_NORMAL
- en: 'As we can see, we are going to need the following components:'
  prefs: []
  type: TYPE_NORMAL
- en: '`App`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Header`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`AddTodo`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`TodoList`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`TodoItem`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`TodoFilter (+ TodoFilterItem)`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `TodoList` component makes use of a `TodoItem` component, which is used
    to show an item, with a checkbox to complete and a button to remove it. The `TodoFilter`
    component internally uses a `TodoFilterItem` component to show the various filters.
  prefs: []
  type: TYPE_NORMAL
- en: Initializing the project
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We are going to use `create-react-app` in order to create a new project. Let''s
    initialize the project now:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Run the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Then, remove `src/App.css`, as we are not going to need it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Next, edit `src/index.css`, and adjust the margin as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Finally, remove the current `src/App.js` file, as we are going to create a new
    one in the next step.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, our project has been initialized, and we can start defining the app structure.
  prefs: []
  type: TYPE_NORMAL
- en: Defining the app structure
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We already know what the basic structure of our app is going to be like from
    the mock-up, so let''s start by defining the `App` component:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a new `src/App.js` file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Import `React` and the `Header`, `AddTodo`, `TodoList`, and `TodoFilter` components:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Now define the `App` component as a class component. For now, we are only going
    to define the `render` method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: The `App` component defines the basic structure of our app. It will consist
    of a header, a way to add new todo items, a list of todo items, and a filter.
  prefs: []
  type: TYPE_NORMAL
- en: Defining the components
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now, we are going to define the components as static components. Later in this
    chapter, we are going to implement dynamic functionality to them. For now, we
    are going to implement the following static components:'
  prefs: []
  type: TYPE_NORMAL
- en: '`Header`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`AddTodo`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`TodoList`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`TodoItem`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`TodoFilter`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let's get started implementing the components now.
  prefs: []
  type: TYPE_NORMAL
- en: Defining the Header component
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We are going to start with the `Header` component, as it is the most simple
    out of all the components:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a new `src/Header.js` file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Import `React` and define the class component with a `render` method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Now, the `Header` component for our app is defined.
  prefs: []
  type: TYPE_NORMAL
- en: Defining the AddTodo component
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Next, we are going to define the `AddTodo` component, which renders an `input`
    field and a button.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s implement the `AddTodo` component now:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a new `src/AddTodo.js` file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Import `React` and define the class component and a `render` method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'In the `render` method, we return a `form` that contains an `input` field and
    an add button:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: As we can see, the `AddTodo` component consists of an `input` field and a button.
  prefs: []
  type: TYPE_NORMAL
- en: Defining the TodoList component
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now, we define the `TodoList` component, which is going to make use of the `TodoItem`
    component. For now, we are going to statically define two todo items in this component.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s start defining the `TodoList` component:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a new `src/TodoList.js` file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Import `React` and the `TodoItem` component:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, define the class component and a `render` method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'In this `render` method, we statically define two todo items:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, we are going to render the items using the `map` function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: As we can see, the `TodoList` component renders a list of `TodoItem` components.
  prefs: []
  type: TYPE_NORMAL
- en: Defining the TodoItem component
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: After defining the `TodoList` component, we are now going to define the `TodoItem`
    component, in order to render single items.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s start defining the `TodoItem` component:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a new `src/TodoItem.js` component.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Import `React`, and define the component, as well as the `render` method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, we are going to use destructuring in order to get the `title` and `completed`
    props:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, we are going to render a `div` element containing a `checkbox`, a `title`,
    and a `button` to delete the item:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: The `TodoItem` component consists of a checkbox, a `title`, and a `button` to
    delete the item.
  prefs: []
  type: TYPE_NORMAL
- en: Defining the TodoFilter component
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Finally, we are going to define the `TodoFilter` component. In the same file,
    we are going to define another component for the `TodoFilterItem`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s start defining the `TodoFilterItem` and `TodoFilter` components:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a new `src/TodoFilter.js` file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Define a class component for the `TodoFilterItem`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'In this `render` method, we use destructuring in order to get the `name` prop:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, we are going to define an object for the `style`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, we return a `span` element with the `name` value of the filter, and use
    the defined `style` object:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, we can define the actual `TodoFilter` component, which is going to
    render three `TodoFilterItem` components, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, we have a component that lists the three different filter possibilities:
    `all`, `active`, and `completed`.'
  prefs: []
  type: TYPE_NORMAL
- en: Implementing dynamic code
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that we have defined all of the static components, our app should look just
    like the mock-up. The next step is to implement dynamic code using React state,
    life cycle, and handler methods.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this section, we are going to do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Define a mock API
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Define a `StateContext`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Make the `App` component dynamic
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Make the `AddTodo` component dynamic
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Make the `TodoList` component dynamic
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Make the `TodoItem` component dynamic
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Make the `TodoFilter` component dynamic
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let's get started.
  prefs: []
  type: TYPE_NORMAL
- en: Defining the API code
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: First of all, we are going to define an API that will fetch todo items. In our
    case, we are simply going to return an array of todo items, after a short delay.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s start implementing the mock API:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a new `src/api.js` file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'We are going to define a function that will generate a random ID for our todo
    items based on the **Universally Unique Identifier** (**UUID**) function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, we define the `fetchAPITodos` function, which returns a `Promise`, which
    resolves after a short delay:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: Now, we have a function that simulates fetching todo items from an API, by returning
    an array after a delay of `100` ms.
  prefs: []
  type: TYPE_NORMAL
- en: Defining the StateContext
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Next, we are going to define a context that will keep our current list of todo
    items. We are going to call this context `StateContext`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s start implementing the `StateContext` now:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a new `src/StateContext.js` file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Import `React`, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, define the `StateContext` and set an empty array as the fallback value:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, export the `StateContext`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: Now, we have a context where we can store our array of todo items.
  prefs: []
  type: TYPE_NORMAL
- en: Making the App component dynamic
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We are now going to make the `App` component dynamic by adding functionality
    to fetch, add, toggle, filter, and remove todo items. Furthermore, we are going
    to define a `StateContext` provider.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s start making the `App` component dynamic:'
  prefs: []
  type: TYPE_NORMAL
- en: 'In `src/App.js`, import the `StateContext`, after the other import statements:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, import the `fetchAPITodos` and `generateID` functions from the `src/api.js`
    file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, we are going to modify our `App` class code, implementing a `constructor`,
    which will set the initial state:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'In this `constructor`, we need to first call `super`, to make sure that the
    parent class (`React.Component`) constructor gets called, and the component gets
    initialized properly:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, we can set the initial state by setting `this.state`. Initially, there
    will be no todo items, and the `filter` value will be set to `''all''`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, we define the `componentDidMount` life cycle method, which is going to
    fetch todo items when the component first renders:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, we are going to define the actual `fetchTodos` method, which in our case,
    is simply going to set the state, because we are not going to connect this simple
    app to a backend. We are also going to call `this.filterTodos()` in order to update
    the `filteredTodos` array after fetching todos:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, we define the `addTodo` method, which creates a new item, and adds it
    to the state array, similar to what we did in our blog app using Hooks:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, we define the `toggleTodo` method, which uses the `map` function to find
    and modify a certain todo item:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, we define the `removeTodo` method, which uses the `filter` function to
    find and remove a certain todo item:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, we define a method to apply a certain `filter` to our todo items:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, we can define the `filterTodos` method, which is going to call the `applyFilter`
    method, and update the `filteredTodos` array and the `filter` value:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: We are using `filterTodos` in order to re-filter todos after adding/removing
    items, as well as changing the filter. To allow both functionalities to work correctly,
    we need to check whether the `filter` argument, `filterArg`, was passed. If not,
    we fall back to the current `filter` argument from the `state`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Then, we adjust the `render` method in order to use state to provide a value
    for the `StateContext`, and we pass certain methods to the components:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, we need to re-bind `this` to the class, so that we can pass the methods
    to our components without the `this` context changing. Adjust the `constructor`
    as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: Now, our `App` component can dynamically fetch, add, toggle, remove, and filter
    todo items. As we can see, when we use class components, we need to re-bind the
    `this` context of the handler functions to the class.
  prefs: []
  type: TYPE_NORMAL
- en: Making the AddTodo component dynamic
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: After making our `App` component dynamic, it is time to make all of our other
    components dynamic as well. We are going to start from the top, with the `AddTodo`
    component.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s make the `AddTodo` component dynamic now:'
  prefs: []
  type: TYPE_NORMAL
- en: 'In `src/AddTodo.js`, we first define a `constructor`, which sets the initial
    `state` for the `input` field:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, we define a method for handling changes in the `input` field:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, we are going to define a method that can handle a new todo item being
    added:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, we can assign the state value and handler methods to the `input` field
    and button:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, we need to adjust the `constructor` in order to re-bind the `this`
    context for all of the handler methods:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: Now, our `AddTodo` component will show a disabled button as long as no text
    is entered. When activated, clicking the button will trigger the `handleAdd` function
    that has been passed down from the `App` component.
  prefs: []
  type: TYPE_NORMAL
- en: Making the TodoList component dynamic
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The next component in our ToDo app is the `TodoList` component. Here, we just
    need to get the todo items from the `StateContext`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s make the `TodoList` component dynamic now:'
  prefs: []
  type: TYPE_NORMAL
- en: 'In `src/TodoList.js`, we first import the `StateContext`, below the `TodoItem`
    import statement:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, we set the `contextType` to the `StateContext`, which will allow us to
    access the context via `this.context`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: 'With class components, if we want to use multiple contexts, we have to use
    the `StateContext.Consumer` component, as follows: `<StateContext.Consumer>{value
    => <div>State is: {value}</div>}</StateContext.Consumer>`.'
  prefs: []
  type: TYPE_NORMAL
- en: As you can imagine, using multiple contexts like this, will result in a very
    deep component tree (wrapper hell), and our code will be hard to read and refactor.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, we can get the items from `this.context` instead of statically defining
    them:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, we pass all props to the `TodoItem` component so that we can use the
    `removeTodo` and `toggleTodo` methods there:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: Now, our `TodoList` component gets the items from the `StateContext` instead
    of statically defining them.
  prefs: []
  type: TYPE_NORMAL
- en: Making the TodoItem component dynamic
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that we have passed on the `removeTodo` and `toggleTodo` methods as props
    to the `TodoItem` component, we can implement these features there.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s make the `TodoItem` component dynamic now:'
  prefs: []
  type: TYPE_NORMAL
- en: 'In `src/TodoItem.js`, we start by defining the handler methods for the `toggleTodo`
    and `removeTodo` functions:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, we assign the handler methods to the `checkbox` and `button`, respectively:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, we need to re-bind the `this` context for the handler methods. Create
    a new `constructor`, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: Now, the `TodoItem` component triggers the toggle and remove handler functions.
  prefs: []
  type: TYPE_NORMAL
- en: Making the TodoFilter component dynamic
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Lastly, we are going to use the `filterTodos` method to dynamically filter our
    todo item list.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s start making the `TodoFilter` component dynamic:'
  prefs: []
  type: TYPE_NORMAL
- en: 'In `src/TodoFilter.js`, in the `TodoFilter` class, we pass all props down to
    the `TodoFilterItem` components:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: 'In `src/TodoFilter.js`, in the `TodoFilterItem` class, we first define a handler
    method for setting the filter:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: 'We then get the `filter` prop from `TodoFilter`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, we use the `filter` prop to display the currently selected filter in `bold`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, we bind the handler method—via `onClick`—to the filter item:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, we create a new `constructor` for the `TodoFilterItem` class, and
    re-bind the `this` context of the handler method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: Now, our `TodoFilter` component triggers the `handleFilter` method in order
    to change the filter. Our whole app is dynamic now, and we can use all of its
    functionalities.
  prefs: []
  type: TYPE_NORMAL
- en: Example code
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The example code can be found in the `Chapter11/chapter11_1` folder.
  prefs: []
  type: TYPE_NORMAL
- en: Just run `npm install` in order to install all dependencies, and `npm start` to
    start the application, then visit `http://localhost:3000` in your browser (if
    it did not open automatically).
  prefs: []
  type: TYPE_NORMAL
- en: Migrating from React class components
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: After setting up our example project with React class components, we are now
    going to migrate this project to React Hooks. We are going to show how to migrate
    side effects, such as fetching todos when the component mounts, as well as state
    management, which we used for the inputs.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this section, we are going to migrate the following components:'
  prefs: []
  type: TYPE_NORMAL
- en: '`TodoItem`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`TodoList`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`TodoFilterItem`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '``TodoFilter``'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`AddTodo`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`App`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Migrating the TodoItem component
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: One of the simplest components to migrate is the `TodoItem` component. It does
    not use any state or side effects so we can simply convert it to a function component.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s start migrating the `TodoItem` component:'
  prefs: []
  type: TYPE_NORMAL
- en: Edit `src/TodoItem.js` and remove the class component code. We are going to
    define a function component instead now.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'We start by defining the function, which accepts five props—the `title` value,
    the `completed` boolean, the `id` value, the `toggleTodo` function, and the `removeTodo`
    function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, we define our two handler functions:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, we return JSX code in order to render our component:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs: []
  type: TYPE_PRE
- en: Try to keep your function components small, and combine them by creating new
    function components that wrap them. It is always a good idea to have many small
    components, rather than one large component. They are much easier to maintain,
    reuse, and refactor.
  prefs: []
  type: TYPE_NORMAL
- en: As we can see, function components do not require us to re-bind `this`, or to
    define constructors at all. Furthermore, we do not need to destructure from `this.props`
    multiple times. We can simply define all props in the header of our function.
  prefs: []
  type: TYPE_NORMAL
- en: Migrating the TodoList component
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Next, we are going to migrate the `TodoList` component, which wraps the `TodoItem`
    component. Here, we use a context, which means that we can now use a Context Hook.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s migrate the `TodoList` component now:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Edit `src/TodoList.js` and import the `useContext` Hook from React:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs: []
  type: TYPE_PRE
- en: Remove the class component code. We are going to define a function component
    instead now.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'We start by defining the header of our function. In this case, we do not destructure
    props, but simply store them in a `props` object:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs: []
  type: TYPE_PRE
- en: 'Now we define the Context Hook:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, we return the list of rendered `items`, passing the `item` and `props`
    objects to it using destructuring:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs: []
  type: TYPE_PRE
- en: We define the `key` prop last, in order to avoid overwriting it with the destructuring
    of the `item` and `props` objects.
  prefs: []
  type: TYPE_NORMAL
- en: As we can see, using contexts with Hooks is much more straightforward. We can
    simply call a function, and use the return value. No magical assignment of `this.context` or
    wrapper hell when using multiple contexts!
  prefs: []
  type: TYPE_NORMAL
- en: Furthermore, we can see that we can gradually migrate components to React Hooks,
    and our app will still work. There is no need to migrate all components to Hooks
    at once. React class components can work well together with function React components
    that use Hooks. The only limitation is that we cannot use Hooks in class components.
    Therefore, we need to migrate a whole component at a time.
  prefs: []
  type: TYPE_NORMAL
- en: Migrating the TodoFilter component
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Next up is the `TodoFilter` component, which is not going to use any Hooks.
    However, we are going to replace the `TodoFilterItem` and `TodoFilter` components
    with two function components: one for the `TodoFilterItem`, and one for the `TodoFilter`
    component.'
  prefs: []
  type: TYPE_NORMAL
- en: Migrating TodoFilterItem
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'First of all, we are going to migrate the `TodoFilterItem` component. Let''s
    start migrating the component now:'
  prefs: []
  type: TYPE_NORMAL
- en: Edit `src/TodoFilter.js` and remove the class component code. We are going to
    define a function component instead now.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Define a function for the `TodoFilterItem` component, which is going to accept
    three props—the `name` value, the `filterTodos` function, and the `filter` value:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE63]'
  prefs: []
  type: TYPE_PRE
- en: 'In this function, we define a handler function for changing the filter:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE64]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, we define a `style` object for our `span` element:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE65]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, we return and render the `span` element:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE66]'
  prefs: []
  type: TYPE_PRE
- en: As we can see, a function component requires much less boilerplate code than
    the corresponding class component.
  prefs: []
  type: TYPE_NORMAL
- en: Migrating TodoFilter
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now that we have migrated the `TodoFilterItem` component, we can migrate the
    `TodoFilter` component. Let''s migrate it now:'
  prefs: []
  type: TYPE_NORMAL
- en: Edit `src/TodoFilter.js` and remove the class component code. We are going to
    define a function component instead now.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Define a function for the `TodoFilter` component. We are not going to use destructuring
    on the props here:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE67]'
  prefs: []
  type: TYPE_PRE
- en: 'In this component, we only return and render three `TodoFilterItem` components—passing
    the `props` down to them:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE68]'
  prefs: []
  type: TYPE_PRE
- en: Now, our `TodoFilter` component has been successfully migrated.
  prefs: []
  type: TYPE_NORMAL
- en: Migrating the AddTodo component
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Next, we are going to migrate the `AddTodo` component. Here, we are going to
    use a State Hook to handle the `input` field state.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s migrate the `AddTodo` component now:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Edit `src/AddTodo.js` and adjust the import statement to import the `useState` Hook
    from React:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE69]'
  prefs: []
  type: TYPE_PRE
- en: Remove the class component code. We are going to define a function component
    instead now.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'First, we define the function, which accepts only one prop—the `addTodo` function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE70]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, we define a State Hook for the `input` field state:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE71]'
  prefs: []
  type: TYPE_PRE
- en: 'Now we can define the handler functions for the `input` field and the add button:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE72]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, we return and render the `input` field and the add button:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE73]'
  prefs: []
  type: TYPE_PRE
- en: As we can see, using the State Hook makes state management much simpler. We
    can define a separate value and setter function for each state value, instead
    of having to deal with a state object. Furthermore, we do not need to destructure
    from `this.state` all the time. As a result, our code is much more clean and concise.
  prefs: []
  type: TYPE_NORMAL
- en: Migrating the App component
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Lastly, all that is left to do is migrating the `App` component. Then, our whole
    ToDo app will have been migrated to React Hooks. Here, we are going to use a Reducer
    Hook to manage the state, an Effect Hook to fetch todos when the component mounts,
    and a Memo Hook to store the filtered todos list.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this section, we are going to do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Define the actions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Define the reducers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Migrate the `App` component
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Defining the actions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Our app is going to accept five actions:'
  prefs: []
  type: TYPE_NORMAL
- en: '`FETCH_TODOS`: To fetch a new list of todo items—`{ type: ''FETCH_TODOS'',
    todos: [] }`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ADD_TODO`: To insert a new todo item—`{ type: ''ADD_TODO'', title: ''Test
    ToDo app'' }`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`TOGGLE_TODO`: To toggle the `completed` value of a todo item—`{ type: ''TOGGLE_TODO'',
    id: ''xxx'' }`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`REMOVE_TODO`: To remove a todo item—`{ type: ''REMOVE_TODO'', id: ''xxx''
    }`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`FILTER_TODOS`: To filter todo items—`{ type: ''FILTER_TODOS'', filter: ''completed''
    }`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: After defining the actions, we can move on to defining the reducers.
  prefs: []
  type: TYPE_NORMAL
- en: Defining the reducers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We are now going to define the reducers for our state. We are going to need
    one app reducer and two sub-reducers: one for the todos and one for the filter.'
  prefs: []
  type: TYPE_NORMAL
- en: The filtered todos list is going to be computed on the fly by the `App` component.
    We can later use a Memo Hook to cache the result and avoid unnecessary re-computation
    of the filtered todos list.
  prefs: []
  type: TYPE_NORMAL
- en: Defining the filter reducer
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We are going to start by defining the reducer for the `filter` value. Let''s
    define the filter reducer now:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a new `src/reducers.js` file and import the `generateID` function from
    the `src/api.js` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE74]'
  prefs: []
  type: TYPE_PRE
- en: 'In the `src/reducers.js` file, define a new function, which is going to handle
    the `FILTER_TODOS` action, and set the value accordingly:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE75]'
  prefs: []
  type: TYPE_PRE
- en: Now, the `filterReducer`  function is defined, and we can handle the `FILTER_TODOS`
    action properly.
  prefs: []
  type: TYPE_NORMAL
- en: Defining the todos reducer
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Next, we are going to define a function for the todo items. Here, we are going
    to handle the `FETCH_TODOS`, `ADD_TODO`, `TOGGLE_TODO` and `REMOVE_TODO` actions.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s define the `todosReducer` function now:'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the `src/reducers.js` file, define a new function, which is going to handle
    these actions:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE76]'
  prefs: []
  type: TYPE_PRE
- en: 'For the `FETCH_TODOS` action, we simply replace the current state with the
    new `todos` array:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE77]'
  prefs: []
  type: TYPE_PRE
- en: 'For the `ADD_TODO` action, we are going to insert a new item at the beginning
    of the current state array:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE78]'
  prefs: []
  type: TYPE_PRE
- en: 'For the `TOGGLE_TODO` action, we are going to use the `map` function to update
    a single todo item:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE79]'
  prefs: []
  type: TYPE_PRE
- en: 'For the `REMOVE_TODO` action, we are going to use the `filter` function to
    remove a single todo item:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE80]'
  prefs: []
  type: TYPE_PRE
- en: 'By default (for all other actions), we simply return the current `state`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE81]'
  prefs: []
  type: TYPE_PRE
- en: Now, the todos reducer is defined, and we can handle the `FETCH_TODOS`, `ADD_TODO`,
    `TOGGLE_TODO` and `REMOVE_TODO` actions.
  prefs: []
  type: TYPE_NORMAL
- en: Defining the app reducer
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Finally, we need to combine our other reducers into a single reducer for our
    app state. Let''s define the `appReducer` function now:'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the `src/reducers.js` file, define a new function for the `appReducer`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE82]'
  prefs: []
  type: TYPE_PRE
- en: 'In this function, we return an object with the values from the other reducers.
    We simply pass the sub-state and action down to the other reducers:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE83]'
  prefs: []
  type: TYPE_PRE
- en: Now, our reducers are grouped together. So, we only have one `state` object
    and one `dispatch` function.
  prefs: []
  type: TYPE_NORMAL
- en: Migrating the component
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now that we have defined our reducers, we can start migrating the `App` component.
    Let''s migrate it now:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Edit `src/App.js` and adjust the import statement to import `useReducer`, `useEffect`,
    and `useMemo` from `React`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE84]'
  prefs: []
  type: TYPE_PRE
- en: 'Import the `appReducer` function from `src/reducers.js`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE85]'
  prefs: []
  type: TYPE_PRE
- en: Remove the class component code. We are going to define a function component
    instead now.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'First, we define the function, which is not going to accept any props:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE86]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, we define a Reducer Hook using the `appReducer` function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE87]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, we define an Effect Hook, which is going to fetch `todos` via the API
    function, and then a `FETCH_TODOS` action will be dispatched:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE88]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, we implement the filter mechanism using a Memo Hook, in order to optimize
    performance and avoid re-computing the filtered todos list when nothing changes:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE89]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, we define various functions that are going to dispatch actions and change
    the state:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE90]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, we return and render all the components that are needed for our ToDo
    app:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE91]'
  prefs: []
  type: TYPE_PRE
- en: As we can see, using a reducer to handle complex state changes makes our code
    much more concise and easier to maintain. Our app is now fully migrated to Hooks!
  prefs: []
  type: TYPE_NORMAL
- en: Example code
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The example code can be found in the `Chapter11/chapter11_2` folder.
  prefs: []
  type: TYPE_NORMAL
- en: Just run `npm install` in order to install all dependencies and run `npm start` to
    start the application, then visit `http://localhost:3000` in your browser (if
    it did not open automatically).
  prefs: []
  type: TYPE_NORMAL
- en: Trade-offs of class components
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that we have finished our migration from class components to Hooks, let's
    revise and sum up what we have learned.
  prefs: []
  type: TYPE_NORMAL
- en: Counting the lines of code, we can see that with 392 total lines of JavaScript
    code, function components with Hooks are more concise than class components, which
    required 430 total lines of JavaScript code. Additionally, the function components
    with Hooks are easier to understand and test since they simply use JavaScript
    functions instead of complex React constructs. Furthermore, we were able to refactor
    all of the state-changing logic into a separate `reducers.js` file, thus decoupling
    it from the `App` component and making it easier to refactor and test. This reduced
    the file size of `App.js` from 109 lines to 64 lines, with an additional 50 lines
    in the `reducers.js` file.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can see the reduced lines of code in the following table:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Comparison: lines of JavaScript code** |'
  prefs: []
  type: TYPE_TB
- en: '| **Class components** | **Function components with Hooks** |'
  prefs: []
  type: TYPE_TB
- en: '| `36  ./TodoFilter.js` `15  ./TodoList.js`'
  prefs: []
  type: TYPE_NORMAL
- en: '`59  ./AddTodo.js`'
  prefs: []
  type: TYPE_NORMAL
- en: '`12  ./index.js`'
  prefs: []
  type: TYPE_NORMAL
- en: '`7   ./Header.js`'
  prefs: []
  type: TYPE_NORMAL
- en: '`5   ./StateContext.js`'
  prefs: []
  type: TYPE_NORMAL
- en: '`9   ./App.test.js`'
  prefs: []
  type: TYPE_NORMAL
- en: '`135 ./serviceWorker.js`'
  prefs: []
  type: TYPE_NORMAL
- en: '`12  ./api.js`'
  prefs: []
  type: TYPE_NORMAL
- en: '`109 ./App.js`'
  prefs: []
  type: TYPE_NORMAL
- en: '`31  ./TodoItem.js` | `25  ./TodoFilter.js` `12  ./TodoList.js`'
  prefs: []
  type: TYPE_NORMAL
- en: '`42  ./AddTodo.js`'
  prefs: []
  type: TYPE_NORMAL
- en: '`12  ./index.js`'
  prefs: []
  type: TYPE_NORMAL
- en: '`7   ./Header.js`'
  prefs: []
  type: TYPE_NORMAL
- en: '`50  ./reducers.js`'
  prefs: []
  type: TYPE_NORMAL
- en: '`5   ./StateContext.js`'
  prefs: []
  type: TYPE_NORMAL
- en: '`9   ./App.test.js`'
  prefs: []
  type: TYPE_NORMAL
- en: '`135 ./serviceWorker.js`'
  prefs: []
  type: TYPE_NORMAL
- en: '`12  ./api.js`'
  prefs: []
  type: TYPE_NORMAL
- en: '`64  ./App.js`'
  prefs: []
  type: TYPE_NORMAL
- en: '`19  ./TodoItem.js` |'
  prefs: []
  type: TYPE_NORMAL
- en: '| `430 total` | `392 total` |'
  prefs: []
  type: TYPE_TB
- en: 'With function components and Hooks, the following points do not need to be
    taken into consideration:'
  prefs: []
  type: TYPE_NORMAL
- en: No need to deal with constructors
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: No confusing `this` context (`this` re-binding)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: No need to destructure the same values over and over again
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: No magic when dealing with contexts, props, and state
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: No need to define `componentDidMount` and `componentDidUpdate` if we want to
    re-fetch data when the props change
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Furthermore, function components have the following advantages:'
  prefs: []
  type: TYPE_NORMAL
- en: Encourage making small and simple components
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Are easier to refactor
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Are easier to test
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Require less code
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Are easier to understand for beginners
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Are more declarative
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'However, class components can be fine in the following situations:'
  prefs: []
  type: TYPE_NORMAL
- en: When sticking to certain conventions.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: When using the latest JavaScript features to avoid `this` re-binding.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Are possibly easier to understand for the team because of existing knowledge.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Many projects still use classes. For libraries, this is not such a problem,
    because they can work well together with function components. At work, you might
    need to use classes, though.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Are not going to be removed from React anytime soon (according to the React
    team).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In the end, it is a matter of preference, but Hooks do have many advantages
    over classes! If you are starting a new project, definitely go for Hooks. If you
    are working on an existing project, consider whether it might make sense to refactor
    certain components to Hook-based components in order to make them simpler. However,
    you should not immediately port all your projects to Hooks, as refactoring can
    always introduce new bugs. The best way to adopt Hooks is to slowly but surely
    replace old class components with Hook-based function components when appropriate.
    For example, if you are already refactoring a component, you can refactor it to
    use Hooks!
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we first built a ToDo app using React class components. We
    started by designing the app structure, then implemented static components, and
    finally, we made them dynamic. In the next section, we learned how to migrate
    an existing project using class components, to function components using Hooks.
    Finally, we learned about the trade-offs of class components, when class components
    or Hooks should be used, and how one should go about migrating an existing project
    to Hooks.
  prefs: []
  type: TYPE_NORMAL
- en: We have now seen in practice how React class components differ to function components
    with Hooks. Hooks make our code much more concise and easier to read and maintain.
    We have also learned that we should gradually migrate our components from class
    components to function components with Hooks—there is no need to immediately migrate
    the whole application.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we are going to learn about handling state with Redux,
    the trade-offs of using Redux versus just function components with Hooks, how
    to use Redux with Hooks, and how to migrate an existing Redux application to a
    Hook-based setup.
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In order to recap what we have learned in this chapter, try to answer the following
    questions:'
  prefs: []
  type: TYPE_NORMAL
- en: How are React class components defined?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What do we need to call when using a `constructor` with class components? Why?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How do we set the initial state with class components?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How do we change the state with class components?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Why do we need to re-bind the `this` context with class component methods?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How can we re-bind the `this` context?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How can we use React context with class components?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What can we replace state management with when migrating to Hooks?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What are the trade-offs of using Hooks versus class components?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When and how should an existing project be migrated to Hooks?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'If you are interested in more information about the concepts that we have learned
    in this chapter, take a look at the following reading material:'
  prefs: []
  type: TYPE_NORMAL
- en: ES6 classes: [https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Classes](https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Classes)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: React class components: [https://www.robinwieruch.de/react-component-types/#react-class-components](https://www.robinwieruch.de/react-component-types/#react-class-components)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
