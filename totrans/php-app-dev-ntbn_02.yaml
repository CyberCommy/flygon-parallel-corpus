- en: Chapter 2. Boosting Your Coding Productivity with the PHP Editor
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we shall discuss how to increase our coding productivity using
    the editor, and how to get the most out of the NetBeans Editor.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'We shall focus on the following:'
  prefs: []
  type: TYPE_NORMAL
- en: The base IDE features
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The editor for PHP
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Rename refactoring and instant rename
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Code completion
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Code generators
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: So let's get on with it...
  prefs: []
  type: TYPE_NORMAL
- en: Familiarizing yourself with the base IDE features
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'As an IDE, NetBeans supports a wide range of features to boost your daily PHP
    development. It includes the editor, debugger, profiler, version control, and
    other collaborative features. The base IDE provides the following interesting
    features:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Quick search:** NetBeans provides you with a searching facility throughout
    the IDE, such as search within files, types, symbols, menu actions, options, help
    and open projects, Press *Ctrl+I* to focus on the search box. In the search results
    list, you will find the typed search term highlighted among the resultant items:![Familiarizing
    yourself with the base IDE features](graphics/5801_02_01.jpg)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Plugin manager:** From **Tools | Plugins**, you will have the plugin manager
    from where you can add, remove, or update features. Also, many interesting third-party
    plugins are available from the plugin portal. Note that from the installed plugin''s
    list, you can deactivate or uninstall plugins (CVS, Mercurial, and so on), which
    are not of your concern right now, but you may do that to free some resources,
    and add back those plugins whenever you want:![Familiarizing yourself with the
    base IDE features](graphics/5801_02_02.jpg)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Project manager:** From **Window | Projects** or by pressing *Ctrl+1*, you
    can fix the **Project Manager** pane of the IDE to perform operations on each
    of the available projects. Project operations, such as run, debug, test, generate
    documentation, check local history, set configuration, and set project properties
    can all be done at the project manager window:![Familiarizing yourself with the
    base IDE features](graphics/5801_02_03.jpg)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**File manager:** From **Window | Files** or by pressing *Ctrl+2*, you can
    fix the **File Manager** pane of the IDE to browse project files or to manipulate
    general file operations on the files available to the IDE:![Familiarizing yourself
    with the base IDE features](graphics/5801_02_04.jpg)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Services manager:** From **Window | Services** or by pressing *Ctrl+5*, you
    can fix the **Services Manager** pane of the IDE to use the pre-registered **Software
    as a Service** (**SaaS**) web-service components. Drag the item from the **Services**
    tab, drop the item in the resource class, and you will have the necessary code
    generated to access the service. Also, the **Services** pane gives you access
    to all your connected databases:![Familiarizing yourself with the base IDE features](graphics/5801_02_05.jpg)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Task manager:** From **Window | Tasks** or by pressing *Ctrl+6*, you can
    fix the **Tasks Manager** or Action Items pane of the IDE. NetBeans IDE automatically
    scans your code and lists the commented lines containing words, such as `TODO`
    or `FIXME`, and lines with compile errors, quick fixes, and style warnings. Connect
    to a bug database—**Bugzilla**, and list issue reports for your project right
    in the IDE. Note that double-clicking on a task will take you straight to where
    it has been declared:![Familiarizing yourself with the base IDE features](graphics/5801_02_06.jpg)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Navigate:** From the **Navigate** menu, the IDE provides navigation to a
    file, type, symbol, line, bookmark, and so on. Such features are used for a quick
    jump over the desired location in the project, or outside of it:![Familiarizing
    yourself with the base IDE features](graphics/5801_02_07.jpg)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'As shown in the previous screenshot, as soon as we type in the filename, the
    IDE shows a dynamic list of matched file names in the **Matching Files** box,
    so that you can quickly open that file:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Familiarizing yourself with the base IDE features](graphics/5801_02_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Press *Alt+Shift+O* to open **Go to file**, *Ctrl+O* to open **Go to type**,
    *Ctrl+B* to open **Go to declaration**, *Ctrl+G* to open **Go to line**, and so
    on.
  prefs: []
  type: TYPE_NORMAL
- en: '**Templates and sample applications:** You can start a similar new project
    with the given sample applications in the IDE. To do this, start a new project
    by pressing *Ctrl+Shift+N* and choose **Samples | PHP** from **Project Categories**.
    Also, you may use templates, such as the templates of PHP files, and web pages
    from **Tools | Templates:**![Familiarizing yourself with the base IDE features](graphics/5801_02_09.jpg)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Customizable workspace and windows:** The entire IDE workspace is fully customizable,
    so that you can drag, slide, resize, and place toolbars & panes to your desired
    place. Also, you can dock or undock panes at your workspace, to make it fully
    comfortable for access and use:![Familiarizing yourself with the base IDE features](graphics/5801_02_10.jpg)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You can manage windows in your workspace easily; double-click on an editor tab
    to expand it. *Ctrl+Tab* shows the opened file's list, and pressing it again will
    cause it to switch between the editor tabs. *Ctrl+Pageup/Down* switches among
    the opened files. Press *Ctrl+W* to close the current file window.
  prefs: []
  type: TYPE_NORMAL
- en: '**Multiple monitors:** You can undock any editor tab and drag it outside the
    IDE, so that it can act like an independent window, and you can easily move it
    to a second screen. Also, you can reverse the procedure to dock it back again
    in the previous screen. Note that all of the shortcuts will remain the same in
    the second screen; for example, drag out the **Files** tab and click anywhere
    else in the IDE, and then press *CTRL+2* to regain focus on the files window.![Familiarizing
    yourself with the base IDE features](graphics/5801_02_11.jpg)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Local history:** Local history is similar to a classic versioning system
    in which it stores multiple versions of files. However, the storage is only local
    to your NetBeans installation. Local history enables you to examine the content
    within files and folders on time, lets you **diff** them, and most importantly,
    lets you roll back your sources to some previous state, or revert already deleted
    files or folders.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Spellchecker:** Spellcheck the text in the editor.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: See the Appendix for NetBeans IDE keyboard shortcuts.
  prefs: []
  type: TYPE_NORMAL
- en: Pop quiz — familiarizing yourself with basic IDE features
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Which is not an IDE feature?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Source code editor
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Debugger
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Plugin manager
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Source code optimizer
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Under which menu can all the IDE windows be enabled or focused?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: File menu
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Tools menu
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Navigate menu
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Windows menu
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Which is the correct command to open the **Go to a File** window?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: CTRL+F
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: CTRL+SHIFT+O
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: ALT+SHIFT+O
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: CTRL+G
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Why is the keyboard shortcut *CTRL+SHIFT+N* used?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: To open a new template file
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: To open a new PHP file
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: To open a new PHP project
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: To open the Project window
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What is the keyboard shortcut to fix the **File manager** pane?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: CTRL+1
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: CTRL+2
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: CTRL+3
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: CTRL+5
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Exploring the editor for PHP
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this section, we will learn how to get the most out of the editor for PHP
    in NetBeans. The editor provides very handy code-authoring features, and we shall
    learn those important features by testing them in our editor. Once we are familiar
    with the following features, we will rule the editor. All you have to do is just
    practice the commands mentioned for the following features. Here we go:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Syntax highlighting:** This editor enables the highlighting of syntax elements,
    such as PHP keywords, variables, constants, HTML tags, and input form attributes.
    In the editor, the current line is marked with a light blue background, and the
    line where any error occurred is displayed with a red underline, as shown in the
    following screenshot:![Exploring the editor for PHP](graphics/5801_02_12.jpg)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Double-click to select a syntax element. Press *Ctrl+F* for syntax searching
    to highlight all the occurrences of the syntax element.
  prefs: []
  type: TYPE_NORMAL
- en: '**Go To Declaration:** The **Go To Declaration** feature provides an instant
    jump to the line where a variable or method has been declared from its occurrence:![Exploring
    the editor for PHP](graphics/5801_02_13.jpg)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In order to use this feature, place the cursor on a desired variable or method,
    and press *Ctrl+B*, or click on the context menu that appeared on the right-hand
    side of the screen, choose **Navigate | Go to Declaration** to have your cursor
    placed at the start of the line where it was declared. Pressing *Ctrl+left-click*
    will also direct you to the declaration, along with all the occurrences that are
    highlighted.
  prefs: []
  type: TYPE_NORMAL
- en: '**Code navigator:** The **Code navigator** pane dynamically lists the in-file
    PHP structure, HTML tags in hierarchical order; simply, it lists the namespaces,
    functions, methods, classes, variables, class properties, HTML tags, and so on
    within the file. Double-click on any item on the list to go to that declaration:![Exploring
    the editor for PHP](graphics/5801_02_14.jpg)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: From **Window | Navigating | Navigator** or by pressing *Ctrl+7*, you can focus
    on the code navigator pane. The listed items are iconized according to relevant
    item properties.
  prefs: []
  type: TYPE_NORMAL
- en: '**Code folding:** The editor provides you with the code block fold/unfold feature
    for classes, methods, comment blocks, HTML tags, CSS style classes, and so on.
    You can fold/unfold large code blocks using such features, right beside the left
    margin of the editor, as shown in the following screenshot:![Exploring the editor
    for PHP](graphics/5801_02_15.jpg)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Click on the " " or "+" button from the left side of the screen to fold and
    unfold code blocks.
  prefs: []
  type: TYPE_NORMAL
- en: '**Smart indent:** The editor provides an automatic indentation before the code,
    while typing and hitting on new lines:![Exploring the editor for PHP](graphics/5801_02_16.jpg)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Type an `if` or `for` statement line, and press *Enter* to see the next line
    indented.
  prefs: []
  type: TYPE_NORMAL
- en: '**Formatting:** To make the code more understandable, the editor provides you
    with a formatting facility, which maintains appropriate statement hierarchy and
    applies line breaks, spaces, indents, and so on within the code file:![Exploring
    the editor for PHP](graphics/5801_02_17.jpg)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Select the code block you want to format. Right-click on the context menu, choose
    **Format**, or press *Alt+Shift+F*. To format the entire code file, choose **Source
    | Format**, or press *Ctrl+A* and *Alt+Shift+F*.
  prefs: []
  type: TYPE_NORMAL
- en: '**Bracket completion:** The consecutive second character of the paired characters
    item such as single quotes (''''), double quotes (""), braces (()), and brackets
    ([]) are automatically added with the first character type, and the paired consecutive
    character is removed with the first one deleted again. Also, the pair of curly
    brackets ({}) is completed when the first character is typed, and *Enter* is pressed.
    A pair of braces, curly braces, and brackets are highlighted with the yellow color
    when any of the characters from matching pairs are pointed at with the cursor,
    as follows:![Exploring the editor for PHP](graphics/5801_02_18.jpg)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Parameter hints:** The editor prompts you to choose the formal parameters
    of a PHP default or custom function just as soon as you start typing that function
    name. The automatic suggestion list with the function names and parameters will
    show at the bottom of the cursor, and the description of that selected function
    will show at the top of the cursor:![Exploring the editor for PHP](graphics/5801_02_19.jpg)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'In the previous auto-suggestion list, you may traverse using the `Up/Down`
    arrow keys. You can hit *Enter* to insert the desired function name with the placeholders,
    to insert the parameters within the brackets:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Exploring the editor for PHP](graphics/5801_02_20.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '**Defining a variable type in comments:** You can define a variable and its
    type in comments, in the format `/* @var $variable type */`. The `var` tag will
    be in bold font, if the comment was written correctly:![Exploring the editor for
    PHP](graphics/5801_02_21.jpg)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In the previous screenshots, you can see how the comment for variable name and
    type dominates the auto suggestion. In the previous example, you can see that
    method names have been picked from the corresponding class name, mentioned as
    a variable type in the comment.
  prefs: []
  type: TYPE_NORMAL
- en: 'Type `vdoc`, and press `Tab` to use the code template for the variable documentation.
    A comment will be generated, which defines a variable. Once the variable name
    is selected, change it, and press `Tab` again, to change the type:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Exploring the editor for PHP](graphics/5801_02_22.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The code template automatically generates a variable name and type in the context
    of a comment position; that is, if you use the template just before the variable
    was used, then it will suggest that variable name and type.
  prefs: []
  type: TYPE_NORMAL
- en: '**Error messages:** The editor parses your PHP code while typing, marks the
    syntax errors with a red underline, places a red error bullet in the left margin,
    and a red error scroll position in the right margin.![Exploring the editor for
    PHP](graphics/5801_02_23.jpg)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You can see the error details in a tool tip, by hovering over the erroneous
    line or by clicking on the red error bullet on the left side of the screen. Press
    *Alt+Enter* to show error hints.
  prefs: []
  type: TYPE_NORMAL
- en: See the Appendix for NetBeans IDE keyboard shortcuts.
  prefs: []
  type: TYPE_NORMAL
- en: Pop quiz — exploring the editor for PHP
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Which functionality is not an editor feature?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Source code formatting
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Code auto completion
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Syntax highlighting
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Debugging
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How do you format a code block?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the code block by right-clicking on the context menu, and choose **Format**
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the code block and press *ALT+SHIFT+F*
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the code block and choose **Source | Format**
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: All of the above
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What is the syntax-searching keyboard command?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '*CTRL+W*'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '*CTRL+F*'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '*CTRL+ALT+F*'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '*CTRL+SHIFT+S*'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How to go to the declaration of a method?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Place the cursor on the method and press *CTRL+B*
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Right-click on the method name, and choose **Navigate | Go to Declaration**
    from the context menu
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Press *CTRL+left-click* on the method name
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: All of the above
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Exploring more with the editor
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We have learned about the editor and practiced the shortcuts given as tips.
    In the next two sections, we will learn to use the rename refactoring, code completion,
    and code generator features of the editor, which are really helpful to boost coding.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the next section, we will discuss and practice the following important editor
    features:'
  prefs: []
  type: TYPE_NORMAL
- en: Rename refactoring and instant rename
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Code completion
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Code generators
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using rename refactoring and instant rename
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You can rename an element, such as a class name, across all files in a project.
    This feature enables you to preview the possible changes in every location for
    that desired rename, and you can exclude individual occurrences from being renamed.
  prefs: []
  type: TYPE_NORMAL
- en: 'Instant rename lets you rename an element within a file. For instant rename,
    place the cursor on the name you want to rename, and press *Ctrl+R*; if instant
    rename is applicable to that variable, then all the instances of that variable
    are highlighted as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Using rename refactoring and instant rename](graphics/5801_02_24.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'A change in even one instance of that name will rename all other instances
    in the file simultaneously:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Using rename refactoring and instant rename](graphics/5801_02_25.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'To use rename refactoring, select the element to rename, then right-click,
    and select **Refactor | Rename**. A dialog box opens for you to rename the element,
    as shown in the next screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Using rename refactoring and instant rename](graphics/5801_02_26.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'In this screenshot, provide a new name for the element and click on **Preview**.
    The refactoring window opens with all the instances of the element listed within
    the project:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Using rename refactoring and instant rename](graphics/5801_02_27.jpg)'
  prefs: []
  type: TYPE_IMG
- en: From this screenshot, you can exclude the instances and apply **Do Refactoring**
    to the selected instances.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: See the Appendix for NetBeans IDE keyboard shortcuts.
  prefs: []
  type: TYPE_NORMAL
- en: Pop quiz — using rename refactoring and instant rename
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: How do you refactor a variable name throughout the project?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the variable, then right-click and select **Refactor | Rename**
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Place the cursor on the variable name, and press *CTRL+SHIFT+R*
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the variable, and select **Source | Rename**
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: None of the above
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Which is the shortcut on a variable for instant rename?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '*SHIFT+ALT+R*'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '*CTRL+R*'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '*CTRL+ALT+R*'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '*CTRL+SPACE+R*'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Using code completion
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The code completion feature enables us to complete the desired syntax, methods,
    or code with some minimal keystrokes, or just with a keyboard command.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You can enable/disable automatic code completion from **Tools | Options | Editor
    | Code Completion**. By default, you will have checkboxes for all languages. Choose
    PHP from the **Language** drop-down list to have more PHP-specific code completion
    options.
  prefs: []
  type: TYPE_NORMAL
- en: '![Using code completion](graphics/5801_02_28.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Following are the code completion features provided by the editor:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Snippets:** This automatically generates code snippets for various elements.![Using
    code completion](graphics/5801_02_29.jpg)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Select **Tools | Pallete | PHP** Code Clips, and **Pallete Manager** will open.
    Drag the relevant item icon from **Pallete Content**, and drop it to the relevant
    position in your code. A dialog box will appear for specifying the parameters
    of the corresponding code item. Fill in the parameters, and have the code generated
    in that place.
  prefs: []
  type: TYPE_NORMAL
- en: '**Context-sensitive proposals:** The editor provides context-sensitive proposals
    for any number of starting symbols for:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A PHP keyword, including `if, else, elseif, while, switch, function` and so
    on.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A PHP built-in function.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A pre-defined or user-defined variable.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Type the starting characters of a keyword or a function name, and press *Ctrl+Space*
    bar. A drop-down list will show all the applicable proposals for that context.
    Each proposal is supplied with a description and parameter hints:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Using code completion](graphics/5801_02_30.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'To generate a list of PHP keywords, which is applicable in the current context,
    press *Ctrl+Space* bar without typing anything:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Using code completion](graphics/5801_02_31.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'To obtain a hint on a variable, type the dollar (`$`) symbol. A list of currently-available
    local and global variables will be displayed:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Using code completion](graphics/5801_02_32.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '**Code templates and abbreviations:** This obtains the expanded code template
    by using defined abbreviations of that template, such as `cls` for a class template,
    and is the most interesting code-completion feature. To use this functionality,
    type the abbreviation and press *Tab:*![Using code completion](graphics/5801_02_33.jpg)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'You can see that the abbreviation is replaced with the corresponding PHP keyword,
    and the code template for that keyword has been provided by the editor, as per
    the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Using code completion](graphics/5801_02_34.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'To view the list of code templates with their associated abbreviations, Select
    **Tools | Options | Editor | Code** Templates. You can add/remove or edit your
    PHP code templates as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Using code completion](graphics/5801_02_35.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Note that coding methods change over time. So, it is recommended to have a look
    into your templates every few months, and update them to comply with any new changes.
  prefs: []
  type: TYPE_NORMAL
- en: '**Code completion in constructors:** After the `new` keyword, code completion
    is displayed along with the list of constructors and parameters for all the classes
    available in the current project:![Using code completion](graphics/5801_02_36.jpg)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**SQL code completion:** When a string begins with SQL keywords such as `select`
    and `insert`, pressing *Ctrl+Space* after that keyword enables the SQL code-completion
    feature inside the editor. You can select the database connection in the first
    step, as shown in the following screenshot:![Using code completion](graphics/5801_02_37.jpg)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Along with being selected, all the database connections registered with the
    IDE will be displayed as follows:![Using code completion](graphics/5801_02_38.jpg)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: After selecting the database connection, the SQL code completion feature offers
    all the tables associated with that connection:![Using code completion](graphics/5801_02_39.jpg)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Also, the list of columns (if any) will be displayed from that table. SQL code
    completion also works with table aliases.
  prefs: []
  type: TYPE_NORMAL
- en: '**PHP 5.3 namespaces:** Code completion supports PHP 5.3 namespaces.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Overridden and implemented methods:** Code completion between class members
    offers to override or implement methods.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Press *Ctrl+Space* bar wherever you wish to use code completion.
  prefs: []
  type: TYPE_NORMAL
- en: See the Appendix for NetBeans IDE keyboard shortcuts.
  prefs: []
  type: TYPE_NORMAL
- en: Pop quiz — using code completion
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Why is the code completion feature used?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: To refactor a variable
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: To write a new PHP class
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: To complete the desired syntax, methods, or code
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: To complete a PHP project
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Which PHP language feature does the code completion feature not support?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Namespace
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Class declaration
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Override methods
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: None of the above
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What is the shortcut to enable the context-sensitive proposal?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Ctrl+Shift+Space
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Ctrl+Space
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Ctrl+S
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Ctrl+Alt+Space
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Using the code generator
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The editor provides context-sensitive code generators, so as to generate a database
    connection, constructors, getters or setters, and so on. A specific code generator
    will appear in the context of cursor location. For example, inside a class, it
    will display for generating constructors, getters, setters, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: 'As an example, press *Alt+Insert* inside a class to open all possible code
    generators, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Using the code generator](graphics/5801_02_40.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'We will discuss the following code generators:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Constructors:** Inside a PHP class (but not inside any method''s body), you
    can open the constructor generator by pressing *Alt+Insert*. Select **Generate
    Constructor**, and a dialog box similar to the following screenshot will appear:![Using
    the code generator](graphics/5801_02_41.jpg)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The window comes with a list of available fields that you can initialize in
    the constructor. Field names are used as parameters of the constructor. You can
    decide not to select any fields; an empty constructor will be generated in such
    a case.
  prefs: []
  type: TYPE_NORMAL
- en: '**Getters and setters:** By pressing the code generator command inside a PHP
    class, you can choose **Getters..., Setters...**, or **Getters and Setters** to
    view the possible functions. If you already have setters, then you will only view
    the getter methods:![Using the code generator](graphics/5801_02_42.jpg)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: After selecting **getters/setters** the previous screenshot appears; you can
    specify for which property you want to generate a **getter** or a **setter** method,
    with a flexibility of choosing the naming convention for the method.
  prefs: []
  type: TYPE_NORMAL
- en: '**Overridden and implemented methods:** You can open the code generator for
    overridden and implemented methods when there are multiple methods inside the
    class. A dialog box opens, showing the methods you can insert, and indicates whether
    they are overridden or implemented:![Using the code generator](graphics/5801_02_43.jpg)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: See the *Appendix* for NetBeans IDE keyboard shortcuts.
  prefs: []
  type: TYPE_NORMAL
- en: Pop quiz — using code generators
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: What is the shortcut to open the code generator inside a PHP class?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Alt+Insert
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Shift+Alt+Insert
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Ctrl+ Alt+Insert
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Ctrl+Insert
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What cannot be generated using code generator?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Constructors
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Getters and setters
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Overridden methods
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Strings
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we have discovered useful features of the PHP editor, and practiced
    the tips to apply while code writing. Familiarization with the editor shortcuts
    we have looked at will help you to write the code faster and correctly.
  prefs: []
  type: TYPE_NORMAL
- en: 'We have especially focused on:'
  prefs: []
  type: TYPE_NORMAL
- en: The PHP editor features and shortcuts
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Rename refactoring and instant rename
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Usage of code completion
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Usage of code generators
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: So, up to now, we have our PHP development environment ready. We have installed
    the IDE, and learned how to use those cool editor features when required. In the
    next chapter, we will dive straight into real-life PHP coding, and will develop
    a PHP project to have a grip over web application development using NetBeans.
  prefs: []
  type: TYPE_NORMAL
