- en: '*Chapter 5*: Importing and Integrating Assets'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous chapter, we created the prototype of our level. Now, let's suppose
    that we have coded the game and tested it, validating the idea. With that, it's
    time to change the prototype art to the real finished art. Actually, we are going
    to code the game in Part 3, but for learning purposes, let's just skip that part
    for now. In order to use final assets, we need to learn how to get them (images,
    3D models, and so on), how to import them into Unity, and how to use them in our
    scene.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will examine the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Importing assets
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Integrating assets
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Configuring assets
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Importing assets
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We have different sources of assets we can use in our project. We can simply
    get a file from our artist, download them from different free and paid assets
    sites, or we can use the Asset Store, Unity's official virtual asset store, where
    we can get free and paid assets ready to use with Unity. We will use a mix of
    downloading an asset from the internet and from the Asset Store, just to get all
    possible resources.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this section, we will cover the following concepts related to importing
    assets:'
  prefs: []
  type: TYPE_NORMAL
- en: Importing assets from the internet
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Importing assets from the Asset Store
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Downloading and importing assets into our project from the internet
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Importing assets from the internet
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In terms of getting art assets for our project, let''s start with our terrain
    textures. Remember that we have our terrain painted with a grid pattern, so the
    idea is to replace that with grass, mud, rock, and other kinds of textures. To
    do that, we must get images. In this case, these kinds of images are usually top-down
    views of different terrain patterns, and they have the requirement of being "tileable."
    You can see an example of this in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.1 – Left: grass patch; right: the same grass patch separated to
    highlight the texture tiling'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_5.01_B14199(Merged).jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 5.1 – Left: grass patch; right: the same grass patch separated to highlight
    the texture tiling'
  prefs: []
  type: TYPE_NORMAL
- en: The grass on the left seems to be one single big image, but if you pay attention,
    you should be able to see some patterns repeating themselves. In this case, this
    grass is just a single image repeated four times in a grid, like the one on the
    right. This way, you can cover large areas by repeating a single small image,
    saving lots on RAM on your computer.
  prefs: []
  type: TYPE_NORMAL
- en: 'The idea is to get these kinds of images to paint our terrain. You can get
    them from several places, but the easiest way is to use Google Images or any Image
    Search Engine. To do this, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Open your browser (Chrome, Safari, Edge, and so on).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Go to your preferred search engine. In this case, I will use Google.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Use the keywords `PATTERN tileable texture`, replacing `PATTERN` with the kind
    of terrain you are looking for, such as `grass tileable texture` or `mud tileable
    texture`. In this case, I am going to type `grass tileable texture` and then press
    *Enter* to search.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Switch to image search mode:![Figure 5.2 – Google Search for images
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_5.02_B14199.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 5.2 – Google Search for images
  prefs: []
  type: TYPE_NORMAL
- en: Find any texture you find suitable for the kind of grass you need and click
    it. Remember that the texture must be a top-down view of the grass and must repeat.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Important Note
  prefs: []
  type: TYPE_NORMAL
- en: Try to check the image's resolution before picking it. Try to select squared
    images that have a resolution less than 1024 x 1024 for now.
  prefs: []
  type: TYPE_NORMAL
- en: Right-click the opened image and select **Save image as…**:![Figure 5.3 – Save
    image as… option
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_5.03_B14199.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 5.3 – Save image as… option
  prefs: []
  type: TYPE_NORMAL
- en: Save the image in any folder you will remember.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now that you have downloaded the image, you can add it to your project in several
    ways. The simplest one would be doing the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Locate your image using **File Explorer** (**Finder** in Mac).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Locate or create the `Textures` folder in the Project window in Unity.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Put both File Explorer and Unity Project Window next to each other.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Drag the file from File Explorer to the `Textures` folder in the Unity Project
    Window:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 5.4 – Texture being dragged from File Explorer to Unity´s Project
    View'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_5.04_B14199.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 5.4 – Texture being dragged from File Explorer to Unity´s Project View
  prefs: []
  type: TYPE_NORMAL
- en: For simple textures like these ones, any search engine can be helpful, but if
    you want to replace the Player´s Base geometry with detailed walls and doors or
    place enemies in your scene, you need to get 3D models. If you search for those
    in any search engine using keywords such as "free zombie 3D model," you will find
    endless free and paid 3D models sites such as TurboSquid and Mixamo, but those
    sites can be problematic because those meshes are usually not prepared for being
    used in Unity, or even in games. You will find models with very high polygon counts,
    incorrect sizes or orientations, unoptimized textures, and so on. To prevent those
    problems, we'll want to use a better source, and in this case, we will use Unity´s
    Asset Store, so let's explore it.
  prefs: []
  type: TYPE_NORMAL
- en: Importing assets from the Asset Store
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The Asset Store is Unity's official asset marketplace where you can find lots
    of models, textures, sounds, and even entire Unity plugins to extend the capabilities
    of the engine. In this case, we will limit ourselves to downloading 3D models
    to replace the Player´s Base prototype. You will want to get 3D models with a
    modular design, meaning that you will get several pieces such as walls, floors,
    corners, and so on. You can connect them to create any kind of scenario.
  prefs: []
  type: TYPE_NORMAL
- en: 'In order to do that, you must follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Click on **Window | Asset Store** in Unity, which will open a new window saying
    the Asset Store has moved. In previous versions of Unity, you could see the Asset
    Store directly inside the editor, but now it is recommended to open it in a regular
    web browser, so just click the **Search online** button:![Figure 5.5 – Asset Store
    moved message
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_5.05_B14199.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 5.5 – Asset Store moved message
  prefs: []
  type: TYPE_NORMAL
- en: Your browser will open showing a site similar to the one in the following screenshot:![Figure
    5.6 – Asset Store home page
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_5.06_B14199.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 5.6 – Asset Store home page
  prefs: []
  type: TYPE_NORMAL
- en: In the right panel, open the 3D category by clicking the arrow to its right.
    Then, open **Environments** and check the **Sci-Fi** mark. As you can see, there
    are several categories for finding different types of assets, and you can pick
    another one if you want to. In **Environments**, you will find 3D models that
    can be used to generate the scenery for your game.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If you need to, you can pay for an asset, but let's hide the paid ones for now.
    You can do that by searching through the **Pricing** section on the sidebar, opening
    it using the plus (**+**) symbol on its right, and then checking the **Free Assets**
    checkbox:![Figure 5.7 – Free Assets option
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_5.07_B14199.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 5.7 – Free Assets option
  prefs: []
  type: TYPE_NORMAL
- en: In the search area, find any asset that seems to have the aesthetic you are
    looking for and click it. Remember to look out for outdoors assets, because most
    environment packs are usually interiors only. In my case, I have picked one called
    **Sci-Fi Styled Modular Pack** that serves for both interiors and exteriors. Take
    into account that that package might not exist by the time you are reading this,
    so you might need to choose another one. If you don't find a suitable package,
    you can download the asset files we used in the GitHub repository. Please refer
    to the preface instructions of how to access the it.![Figure 5.8 – Preview of
    Asset Store searched packages
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_5.08_B14199.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 5.8 – Preview of Asset Store searched packages
  prefs: []
  type: TYPE_NORMAL
- en: Important Note
  prefs: []
  type: TYPE_NORMAL
- en: At the time of writing this book, Unity is releasing the "Snaps" packages, which
    are a set of official Unity 3D models that can be used for the modular design
    of different kinds of environments. Some of them are paid, while others are free
    – I recommend that you try them out.
  prefs: []
  type: TYPE_NORMAL
- en: Now, you will see the package details in the Asset Store window. Here, you can
    find information regarding the package's description, videos/images, the package's
    contents, and the most important part, the reviews, where you can check whether
    the package is worth buying if it's a paid one:![Figure 5.9 – Asset Store package
    details
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_5.09_B14199.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 5.9 – Asset Store package details
  prefs: []
  type: TYPE_NORMAL
- en: If you are OK with this package, click the **Add To My Assets** button, log
    in to Unity if requested and then click **Open In Unity** button. You might be
    prompted to accept a switch of apps to Unity – just accept:![Figure 5.10 – Switching
    apps
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_5.10_B14199.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 5.10 – Switching apps
  prefs: []
  type: TYPE_NORMAL
- en: This will open the **Package Manger** again, but this time in **My Assets**
    mode, showing a list of all the assets you have ever downloaded from the Asset
    Store, and the one you just selected highlighted in the list. You might need to
    log again in Unity clicking the Sign In button if you are not logged in Unity
    Hub.![Figure 5.11 – Package Manager showing assets
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_5.11_B14199.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 5.11 – Package Manager showing assets
  prefs: []
  type: TYPE_NORMAL
- en: Click on **Download** at the bottom-right part of the window and wait for it
    to end. Then hit **Import.** Double check that you have the proper asset package
    selected from the list.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: After a while, the **Package Contents** Window will show up, allowing you to
    select exactly which assets of the package you want in your project. For now,
    leave it as-is and click **Import**:![Figure 5.12 – Assets to import
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_5.12_B14199.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 5.12 – Assets to import
  prefs: []
  type: TYPE_NORMAL
- en: After some importing time, you will see all the package files in your Project
    Window.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Take into account that importing lots of full packages will increase your project''s
    size considerably, and that, later, you will probably want to remove the assets
    that you didn''t use. Also, if you import assets that generate errors that prevent
    you from playing the scene, just delete all the `.cs` files that come with the
    package. They are usually in folders called `Scripts`. Those are code files that
    might not be compatible with your Unity version. In *Part 3*, we will learn how
    to make our own so that those are not necessary:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.13 – Code error warning when hitting play'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_5.13_B14199.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 5.13 – Code error warning when hitting play
  prefs: []
  type: TYPE_NORMAL
- en: Important Note
  prefs: []
  type: TYPE_NORMAL
- en: The Asset Store is prone to changes, even if you are using the same Unity version
    I am using, so the previous steps may be changed by Unity without notice. Also,
    its contents change often, and you may not find the same packages used in this
    book. In such case, you can find another similar package, or take the files i
    used from the GitHub repo (links and instructions in the Preface).
  prefs: []
  type: TYPE_NORMAL
- en: Before you continue with this chapter, try to download an enemy character using
    the Asset Store, following the previous steps. In order to solve this exercise,
    you must complete the same steps as before but look in the **3D | Characters |
    Humanoid** category of the Asset Store.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have imported lots of art assets, let's learn how to use them in
    our scene.
  prefs: []
  type: TYPE_NORMAL
- en: Integrating assets
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We have just imported lots of files that can be used in several ways, so the
    idea of this section is to see how Unity integrates those assets with the GameObjects
    and components that need them.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this section, we will cover the following concepts related to importing
    assets:'
  prefs: []
  type: TYPE_NORMAL
- en: Integrating terrain textures
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Integrating meshes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Integrating materials
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let's start using tileable textures to cover the terrain.
  prefs: []
  type: TYPE_NORMAL
- en: Integrating terrain textures
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In order to apply textures to our terrain, do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Select the **Terrain** object.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the **Inspector**, click the brush icon of the **Terrain** component (second
    button).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: From the drop-down menu, select **Paint Texture**:![Figure 5.14 – The Paint
    Texture option
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_5.14_B14199.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 5.14 – The Paint Texture option
  prefs: []
  type: TYPE_NORMAL
- en: Click the **Edit Terrain Layers… | Create Layer** option.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Look for the terrain texture you downloaded previously in the texture picker
    window that appears:![Figure 5.15 – Texture picker
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_5.15_B14199.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 5.15 – Texture picker
  prefs: []
  type: TYPE_NORMAL
- en: You will see how the texture will be immediately applied to the whole terrain.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Repeat *steps 4* and *5* to add other textures. This time, you will see that
    that texture is not immediately applied.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the **Terrain Layers** section, select the new texture you have created to
    start painting with that. I used a mud texture in my case.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Like when you edited the terrain, in the **Brushes** section, you can select
    and configure a brush to paint the terrain.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the Scene view, paint the areas you want to have that texture applied to.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If your texture patterns are too obvious, select your texture in the Terrains
    Layer box and then, open the **NewLayer N** where N is a number that depends on
    the layers you have created.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Important Note
  prefs: []
  type: TYPE_NORMAL
- en: Each time you add a texture to the terrain, you will see that a new asset called
    "NewLayer N" is created in the Project view. It holds data of the terrain layer
    you have created, and you can use that one in other terrains if you need to. You
    can also rename that asset to give it a meaningful name. Also, you can reorganize
    those assets in their own folder.
  prefs: []
  type: TYPE_NORMAL
- en: Open the section using the triangle to its left and increase the **Size** property
    in the **Tiling Settings** section until you find a suitable size where the pattern
    is not that obvious:![Figure 5.16 – Painting texture options
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_5.16_B14199.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 5.16 – Painting texture options
  prefs: []
  type: TYPE_NORMAL
- en: 'Repeat steps *4* to *12* until you have applied all the textures you wanted
    to add to your terrain. In my case, I applied the mud texture to the river basin
    and used a rock texture for the hills. For the texture of the rocks, I reduced
    the **Opacity** property of the brush to blend it better with the grass in the
    mountains. You can try to add a layer of snow at the top just for fun:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 5.17 – Results of painting our terrain with three different textures'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_5.17_B14199.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 5.17 – Results of painting our terrain with three different textures
  prefs: []
  type: TYPE_NORMAL
- en: Of course, we can improve this a lot using lots of the advanced tools of the
    system, but let's keep things simple for now. Now, let's see how we can integrate
    the 3D models.
  prefs: []
  type: TYPE_NORMAL
- en: Integrating meshes
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'If you select one of the 3D assets we have configured previously and click
    the arrow to its right, one or more sub-assets will appear in the Project Window.
    This means that FBX is not a 3D model, but a container of assets that defines
    the 3D model:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.18 – Mesh picker'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_5.18_B14199.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 5.18 – Mesh picker
  prefs: []
  type: TYPE_NORMAL
- en: Some of those sub-assets are meshes, which is a collection of triangles that
    defines the geometry of your model. You can find at least one of those inside
    the file, but you can also find several, and that can happen if your model is
    composed of lots of pieces. For example, a car can be a single rigid mesh, but
    that won't allow you to rotate its wheels or open its doors; it will be just a
    static car, and that can be enough if the car is just a prop in the scene, but
    if the player will be able to control it, you will probably need to modify it.
    The idea is that all the pieces of your car are different GameObjects parented
    with one another, in such a way that if you move one, all of them will move, but
    you can still rotate the pieces independently.
  prefs: []
  type: TYPE_NORMAL
- en: 'When you drag the 3D model file to the scene, Unity will automatically create
    all the objects for each piece and its proper parenting based on how the artist
    created them. You can select the object in the **Hierarchy** and explore all its
    children to see this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.19 – Sub-object selection'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_5.19_B14199.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 5.19 – Sub-object selection
  prefs: []
  type: TYPE_NORMAL
- en: 'Also, you will find that each of those objects will have their own `MeshFilter`
    and `MeshRenderer` components, each one rendering just that piece of the car.
    Remember that the mesh filter is a component that has a reference to the mesh
    asset to render, so the Mesh Filter is the one using those mesh Sub-Assets we
    talked about previously:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.20 – Mesh Filter current mesh selection'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_5.20_B14199.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 5.20 – Mesh Filter current mesh selection
  prefs: []
  type: TYPE_NORMAL
- en: Now, if you drag the 3D model file into the scene, you will get a similar result
    as if the model were a Prefab and you were instancing it. But 3D model files are
    more limited than Prefabs, because you can't apply changes to the model, so after
    you've dragged the object onto the scene and edited it to have the behavior you
    want, I suggest that you create a Prefab to get all the benefits we discussed
    in [*Chapter 3*](B14199_03_Final_SK_ePub.xhtml#_idTextAnchor052), *Working with
    Scenes and GameObjects*, such as applying changes to all the instances of the
    Prefab and so on. Never create lots of instances of a model from its model file
    – always create them from the Prefab you created based on that file.
  prefs: []
  type: TYPE_NORMAL
- en: That's the basic usage of 3D meshes. Now, let's explore the texture integration
    process, which will make our 3D models have more detail.
  prefs: []
  type: TYPE_NORMAL
- en: Integrating textures
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Maybe your model already has a texture applied, or maybe it has magenta applied
    to it. In the latter case, that means the asset wasn''t prepared to work with
    the URP template you selected when creating the project. Some assets in the Asset
    Store are meant to be used in older versions of Unity:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.21 – Mesh being rendered with erroneous or no material at all'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_5.21_B14199.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 5.21 – Mesh being rendered with erroneous or no material at all
  prefs: []
  type: TYPE_NORMAL
- en: 'One option to fix that is using **Edit | Render Pipeline | Universal Render
    Pipeline | Upgrade Project Materials to UniversalRP Materials**. This will try
    to upgrade all your materials to the current version of Unity:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.22 – Upgrading materials to URP'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_5.22_B14199.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 5.22 – Upgrading materials to URP
  prefs: []
  type: TYPE_NORMAL
- en: The con of this method is that, sometimes, it won't upgrade the materials properly.
    Luckily, we can fix this by reapplying the textures of the objects in this new
    way. Even if your assets work just fine, I suggest that you reapply your textures
    anyway, just to learn more about the concept of materials.
  prefs: []
  type: TYPE_NORMAL
- en: A texture is applied directly to an object. That's because the texture is just
    one single configuration of all the ones that control the aspect of your model.
    In order to change the appearance of a model, you must create a material. A material
    is a separate asset that contains lots of settings about how Unity should render
    your object. You can apply that asset to several objects that share the same graphics
    settings, and if you change the settings of the material, it will affect all the
    objects that are using it. It works like a graphics profile.
  prefs: []
  type: TYPE_NORMAL
- en: 'In order to create a material to apply the textures of your object, you need
    to follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: In the Project Window, click the plus (**+**) button at the top-left part of
    the window.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Find the **Material** option in that menu and click it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Name your material. This is usually the name of the asset you are creating (for
    example, Car, Ship, Character, and so on).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Drag this material asset you created to the model instance on your scene. At
    the moment, if you move the mouse with the dragged asset over the object, you
    will be able to see a preview of how it will look with that material. You can
    confirm this by releasing the mouse.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Maybe your object has several parts. In that case, you will need to drag the
    material to each part of the object.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Important Note
  prefs: []
  type: TYPE_NORMAL
- en: Dragging the material will just change the materials property of the `MeshRenderer`
    component of the object you have dragged.
  prefs: []
  type: TYPE_NORMAL
- en: Select the material and click the circle to the left of the **Base Map** property.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the **Texture Selector**, click on the texture of your model. It can be
    complicated to locate the texture. Usually, the name of the texture will match
    the model name. If not, you will need to try different textures until you see
    one that fits your object. Also, you may find several textures with the same name
    as your model. Just pick the one that seems to have the proper colors instead
    of the ones that look black and white or light blue; we will use those later:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 5.23 – Base Map property of URP materials'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_5.23_B14199.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 5.23 – Base Map property of URP materials
  prefs: []
  type: TYPE_NORMAL
- en: With this, you have successfully applied the texture to the object through a
    material. For each object that uses the same texture, just drag the same material.
    Now that we have a basic understanding of how to apply the model textures, let's
    learn how to properly configure the import settings before spreading models all
    over the scene.
  prefs: []
  type: TYPE_NORMAL
- en: Configuring assets
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As we mentioned earlier, artists are used to creating art assets outside Unity,
    and that can cause differences between how the asset is seen from that tool and
    how Unity will import it. As an example, 3D Studio can work in centimetres, inches,
    and so on, while Unity works in meters. We have just downloaded and used lots
    of assets, but we have skipped the configuration step to solve those discrepancies,
    so let's take a look at this now.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this section, we will cover the following concepts related to importing
    assets:'
  prefs: []
  type: TYPE_NORMAL
- en: Configuring meshes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Configuring textures
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let's start discussing how to configure 3D meshes.
  prefs: []
  type: TYPE_NORMAL
- en: Configuring meshes
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In order to change the model''s import settings, you need to locate the model
    file you have downloaded. There are several file extensions that contain 3D models,
    with the most common one being the `.fbx` file, but you can encounter others such
    as `.obj`,`.3ds`, `.blender`, `.mb`, and so on. You can identify whether the file
    is a 3D mesh via its extension:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.24 – Selected asset path extension'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_5.24_B14199.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 5.24 – Selected asset path extension
  prefs: []
  type: TYPE_NORMAL
- en: 'Also, you can click the **Asset** and check in the Inspector for the tabs you
    can see in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.25 – Mesh materials settings'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_5.25_B14199.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 5.25 – Mesh materials settings
  prefs: []
  type: TYPE_NORMAL
- en: Now that you have located the 3D mesh files, you can configure them properly.
    Right now, the only thing we should take into account is the proper scale of the
    model. Artists are used to working with different software with different setups;
    maybe one artist created the model using meters as its metric unit, while other
    artists used inches, feet, and so on. When importing assets that have been created
    in different units, they will probably be unproportioned, which means we will
    get results such as humans being bigger than buildings and so on.
  prefs: []
  type: TYPE_NORMAL
- en: 'The best solution is to just ask the artist to fix that. If all the assets
    were authored in your company, or if you used an external asset, you can ask the
    artist to fix it to the way your company works, but right now, you are probably
    a single developer learning Unity by yourself. Luckily, Unity has a setting that
    allows you to rescale the original asset before using it in Unity. In order to
    change the scale factor of an object, you must do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Locate the 3D mesh in your Project Window.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Drag it to the scene. You will see that an object will appear in your scene.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a capsule using the **GameObject | 3D Object | Capsule** option.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Put the capsule next to the model you dragged into the Editor. See whether the
    scale makes sense. The idea is that the capsule is representing a human being
    (2 meters tall) so that you have a reference for the scale:![Figure 5.26 – Unproportioned
    asset
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_5.26_B14199.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 5.26 – Unproportioned asset
  prefs: []
  type: TYPE_NORMAL
- en: If the model is bigger or smaller than expected, select the mesh again in the
    Project Window (not the GameObject instance you dragged to the Editor) and you
    will see some import settings in the Inspector.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Look for the **Scale Factor** property and modify it, increasing it if your
    model is smaller than expected or reducing it in the opposite case:![Figure 5.27
    –  Model mesh options
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_5.27_B14199.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 5.27 – Model mesh options
  prefs: []
  type: TYPE_NORMAL
- en: Click the **Apply** button at the bottom of the Inspector.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Repeat *steps 6* and *7* until you get the desired result.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: There are plenty of other options to configure, but let's stop here for now.
    Now, let's discuss how to properly configure the textures of our models.
  prefs: []
  type: TYPE_NORMAL
- en: Configuring textures
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Again, there are several settings to configure here, but let''s focus on the
    texture size for now. The idea is to use the size that best fits the usage of
    that texture, and that depends on lots of factors. The first factor to take into
    account is the distance from which the object will be seen. If you are creating
    a first person game, you will probably see lots of objects near enough to justify
    a big texture, but maybe you have lots of distant objects, such as billboards
    at the top of buildings, that you will never be near enough to see the details
    of, so you can use smaller textures for that. Another thing to take into account
    is the importance of the object. If you are creating a racing game, you will probably
    have lots of 3D models that will be on-screen for a few seconds and the player
    will never focus on them; they will be paying attention to the road and other
    cars. In this case, an object such as a trash can on the street can have a little
    texture and a low-polygon model and the user will never notice that (unless they
    stop to appreciate the scenery, but that''s acceptable). Finally, you can have
    a game with a top-down view that will never zoom in on the scene, so the same
    object that has a big texture in first person games would have a less detailed
    texture here. In the next figure, you can see that the smaller ship could use
    a smaller texture:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.28 – The same model being seen at different distances'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_5.28_B14199(Merged).jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 5.28 – The same model being seen at different distances
  prefs: []
  type: TYPE_NORMAL
- en: 'The ideal size of the texture is relative. The usual way to find it is by changing
    its size until you find the smallest possible size with a decent quality when
    the object is seen from the nearest position possible in the game. This is a trial
    and error method. In order to do that, you can do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Locate the 3D model and put it into the scene.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Put the Scene view camera in a position that shows the object at its biggest
    possible in-game size. As an example, in an FPS game, it would be almost right
    next to the object, while in a top-down game, it would be a few meters above the
    object. Again, that depends on your game.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Find and select the texture that the object is using in the folders that were
    imported with the package or from the material you created previously. They usually
    have the `.png`, `.jpg`, or `.tif` extensions.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the Inspector, look at the **Max Size** property and reduce it, trying the
    next smallest value. For example, if the texture is at 2,048, try 1,024.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click **Apply** and check the Scene view to see whether the quality has decreased
    dramatically or if the change isn't noticeable. You will be surprised.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Repeat *steps 4* to *5* until you get a bad-quality result. In that case, just
    increase the previous resolution to get an acceptable quality. Of course, if you
    are targeting PC games, you can expect higher resolutions than mobile games.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now that you have imported, integrated, and configured your objects, let's just
    create our Player's Base with those assets.
  prefs: []
  type: TYPE_NORMAL
- en: Assembling the scene
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let''s start replacing our prototype base using the environment pack we have
    downloaded. To do that, you must do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: In the `corner` keyword:![Figure 5.29 – Mesh picker
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_5.29_B14199.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 5.29 – Mesh picker
  prefs: []
  type: TYPE_NORMAL
- en: In my specific case, I have the outer and inner side of the corner as separate
    models, so I need to put them together.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Position it in the same position as any corner of your prototype base:![Figure
    5.30 – Positioning the mesh on a placeholder for replacement
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_5.30_B14199.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 5.30 – Positioning the mesh on a placeholder for replacement
  prefs: []
  type: TYPE_NORMAL
- en: Find the proper model that will connect with that corner to create walls. Again,
    you can try searching for the `wall` keyword in the Project Window.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Instance it and position it so that it's connected to the corner. Don't worry
    if it doesn't fit perfectly; you will go over the scene when necessary later.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Important Note
  prefs: []
  type: TYPE_NORMAL
- en: 'You can select an object and press the *V* key to select a vertex of the selected
    object to drag it to a vertex of another object. This is called vertex snapping.
    It allows you to connect two pieces of a scene exactly as you intend:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.31 – Connecting two modules'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_5.31_B14199.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 5.31 – Connecting two modules
  prefs: []
  type: TYPE_NORMAL
- en: Repeat the walls until you reach the other end of the Player Base and position
    another corner. You might get a wall that's a little bit larger or smaller than
    the original prototype, but that's fine:![Figure 5.32 – Chain of connected modules
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_5.32_B14199.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 5.32 – Chain of connected modules
  prefs: []
  type: TYPE_NORMAL
- en: Important Note
  prefs: []
  type: TYPE_NORMAL
- en: Remember that you can move an object while pressing the *Ctrl* key (*Control*
    on Mac) to snap the object´s position so that the clones of the wall can be easily
    located right next to the others.
  prefs: []
  type: TYPE_NORMAL
- en: Complete the rest of the walls and destroy the prototype. Remember that this
    process is slow and you will need to be patient.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add floors by looking for floor tiles and repeating them all over the surface:![Figure
    5.33 – Floor modules with a hole for the pit
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_5.33_B14199.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 5.33 – Floor modules with a hole for the pit
  prefs: []
  type: TYPE_NORMAL
- en: Add whatever details you want to add with other modular pieces in the package.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Put all those pieces in a container object called `Base`. Remember to create
    an empty object and drag the base pieces into it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 5.34 – Mesh Sub-Assets'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_5.34_B14199.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 5.34 – Mesh Sub-Assets
  prefs: []
  type: TYPE_NORMAL
- en: After a lot of practice doing this, you will slowly gain experience with the
    common pitfalls and good practices of modular scene design. All the packages have
    different modular designs in mind, so you will need to adapt to them.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we learned how to import models and textures and integrate
    them into our scene. We discussed how to apply textures to the terrain, how to
    replace our prototype mesh with modular models, how to apply textures to those,
    and how to properly configure the assets, all while taking several criteria into
    account according to the usage of the object.
  prefs: []
  type: TYPE_NORMAL
- en: With this, we have finished Part 1 of this book and have discussed several basic
    Unity concepts. In Part 2, we will start to deep dive into several Unity systems
    that allow us to improve the graphics and sound quality of our game. We will start
    to learn how to create custom material types to create interesting visual effects
    and animations.
  prefs: []
  type: TYPE_NORMAL
