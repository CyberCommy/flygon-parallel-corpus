- en: Antivirus Evasion and Anti-Forensics
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous two chapters, you learned how to leverage the Metasploit Framework
    to generate custom payloads and launch advanced client-side attacks. However,
    the payloads that we generate will be of no use if they get detected and blocked
    by antivirus programs. In this chapter, we'll explore the various techniques in
    order to make our payloads as undetectable as possible. You will also get familiar
    with various techniques to cover our tracks after a successful compromise.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
- en: Using encoders to avoid AV detection
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using binary encryption and packaging techniques
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Testing payloads for detection and sandboxing concepts
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using Metasploit anti-forensic techniques, such as TimeStomp and clearev
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using encoders to avoid AV detection
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In Chapter 6, *Client-side Attacks with Metasploit*, we have already seen how
    to use the `msfvenom` utility to generate various payloads. However, these payloads
    if used as-is are most likely to be detected by antivirus programs. In order to
    avoid antivirus detection of our payload, we need to use encoders offered by the
    `msfvenom` utility.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
- en: 'To get started, we''ll generate a simple payload in the `.exe` format using
    the `shikata_ga_nai` encoder, as shown in the following screenshot:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/7856da75-05bd-465a-ac10-953e294e84c3.jpg)'
  id: totrans-10
  prefs: []
  type: TYPE_IMG
- en: Once the payload has been generated, we upload it to the site [http://www.virustotal.com](http://www.virustotal.com)
    for analysis. As the analysis is completed, we can see that our file `apache-update.exe` (containing
    a payload) was detected by 46 out of the 60 antivirus programs that were used.
    This is quite a high detection rate for our payload. Sending this payload as-is
    to our victim is less likely to succeed due to its detection rate. Now, we'll
    have to work on making it undetectable from as many antivirus programs as we can.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
- en: The site [http://www.virustotal.com](http://www.virustotal.com) runs multiple
    antivirus programs from across various vendors and scans the uploaded file with
    all the available antivirus programs.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/ba9c2e20-50ab-463f-8ac0-4f8732a822b0.jpg)'
  id: totrans-13
  prefs: []
  type: TYPE_IMG
- en: 'Simply encoding our payload with the `shikata_ga_nai` encoder once didn''t
    work quite well. The `msfvenom` utility also has an option to iterate the encoding
    process multiple times. Passing our payload through multiple iterations of an
    encoder might make it more stealthy. Now, we''ll try to generate the same payload;
    however, this time we''ll run the encoder 10 times in an attempt to make it stealthy,
    as shown in the following screenshot:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/5a1a20b2-5715-4436-84e7-e6935405cfa1.png)'
  id: totrans-15
  prefs: []
  type: TYPE_IMG
- en: 'Now that the payload has been generated, we again submit it for analysis on
    [http://www.virustotal.com](http://www.virustotal.com). As shown in the following
    screenshot, the analysis results show that this time our payload was detected
    by 45 antivirus programs out of the 60\. So, it''s slightly better than our previous
    attempts, however, it''s still not good enough:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/456213ec-abd7-496a-9647-79e9af960d20.jpg)'
  id: totrans-17
  prefs: []
  type: TYPE_IMG
- en: 'Now, to further try and make our payload undetectable, this time we''ll try
    changing the encoder from `shikata_ga_nai` (as used earlier) to a new encoder
    named `opt_sub`, as shown in the following screenshot. We''ll run the encoder
    on our payload for five iterations:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/2a1c1e92-11d9-4206-b308-7dda60e66e93.jpg)'
  id: totrans-19
  prefs: []
  type: TYPE_IMG
- en: 'Once the payload has been generated, we will submit it to [http://www.virustotal.com](http://www.virustotal.com)
    for analysis. This time, the results look much better! Only 25 antivirus programs
    out of the 60 were able to detect our payload as compared to 45 out of the 60
    earlier, as shown in the following screenshot. This is certainly a significant
    improvement:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/3ced90e2-30e6-464d-b828-36a2965d2e03.png)'
  id: totrans-21
  prefs: []
  type: TYPE_IMG
- en: You have probably worked out that there is no single secret recipe that could
    make our payload completely undetectable.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
- en: The process of making payload undetectable involves a lot of trial and error
    methods using various permutations, combinations, and iterations of different
    encoders. You have to simply keep trying until the payload detection rate goes
    down to an acceptable level.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 使载荷不可检测的过程涉及使用各种排列组合和不同编码器的各种试验和错误方法。您必须不断尝试，直到载荷的检测率降到可接受的水平。
- en: However, it's also very important to note that at times running multiple iterations
    of an encoder on a payload may even damage the original payload code. Hence, it's
    advisable to actually verify the payload by executing it on a test instance before
    it's sent to the target system.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，非常重要的一点是，有时在载荷上运行多次编码器的迭代甚至可能损坏原始载荷代码。因此，最好在将其发送到目标系统之前，确实通过在测试实例上执行来验证载荷。
- en: Using packagers and encrypters
  id: totrans-25
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用打包程序和加密程序
- en: In the previous section, we have seen how to make use of various encoders in
    order to make our payload undetectable from antivirus programs. However, even
    after using different encoders and iterations, our payload was still detected
    by a few antivirus programs. In order to make our payload completely stealthy,
    we can make use of a called `encrypted self extracting archive` feature offered
    by a compression utility called `7-Zip`.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的部分中，我们已经看到如何利用各种编码器来使我们的载荷免受杀毒程序的检测。然而，即使使用不同的编码器和迭代，我们的载荷仍然被一些杀毒程序检测到。为了使我们的载荷完全隐蔽，我们可以利用一个叫做`加密自解压缩存档`的功能，这是由一个叫做`7-Zip`的压缩实用程序提供的。
- en: 'To begin, we''ll first upload a malicious PDF file (containing a payload) to
    the site [http://www.virustotal.com](http://www.virustotal.com), as shown in the
    following screenshot. The analysis shows that our PDF file was detected by 32
    antivirus programs out of the 56 available, as seen in the following screenshot:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们将把一个恶意的PDF文件（包含一个载荷）上传到网站[http://www.virustotal.com](http://www.virustotal.com)，如下面的截图所示。分析显示，我们的PDF文件被56个可用的杀毒程序中的32个检测到，如下面的截图所示：
- en: '![](img/903b0055-40c3-4878-a1bd-af6f99047f95.jpg)'
  id: totrans-28
  prefs: []
  type: TYPE_IMG
  zh: '![](img/903b0055-40c3-4878-a1bd-af6f99047f95.jpg)'
- en: 'Now using the 7-Zip utility, as shown in the following screenshot, we convert
    our malicious PDF file into a self-extracting archive:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，使用7-Zip实用程序，如下面的截图所示，我们将我们的恶意PDF文件转换成一个自解压缩存档：
- en: '![](img/9b06f716-a34a-4de7-ab06-ce6aad8e81a7.jpg)'
  id: totrans-30
  prefs: []
  type: TYPE_IMG
  zh: '![](img/9b06f716-a34a-4de7-ab06-ce6aad8e81a7.jpg)'
- en: 'The analysis results, as shown in the following screenshot, show that the PDF
    file that was converted into a self-extracting archive got detected by 21 antivirus
    programs out of the 59 available. This is much better than our previous attempt
    (32/56):'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 分析结果，如下面的截图所示，显示了被转换成自解压缩存档的PDF文件被59个可用的杀毒程序中的21个检测到。这比我们之前的尝试（32/56）要好得多：
- en: '![](img/fea868f8-3ef4-4c4a-97aa-41d046ea7cf5.jpg)'
  id: totrans-32
  prefs: []
  type: TYPE_IMG
  zh: '![](img/fea868f8-3ef4-4c4a-97aa-41d046ea7cf5.jpg)'
- en: 'Now to make the payload even more stealthy, we will convert our payload into
    a password-protected self-extracting archive. This can be done with the help of
    the 7-Zip utility, as shown in the following screenshot:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，为了使载荷更加隐蔽，我们将把我们的载荷转换成一个受密码保护的自解压缩存档。这可以通过7-Zip实用程序来完成，如下面的截图所示：
- en: '![](img/579dedf9-2a23-4ec9-a360-6ca72eb4af06.jpg)'
  id: totrans-34
  prefs: []
  type: TYPE_IMG
  zh: '![](img/579dedf9-2a23-4ec9-a360-6ca72eb4af06.jpg)'
- en: 'Now, we''ll upload the password encrypted payload to the site [http://www.virustotal.com](http://www.virustotal.com)
    and check the result, as shown in the following screenshot. Interestingly, this
    time none of the antivirus programs were able to detect our payload. Now, our
    payload will go undetected throughout its transit journey until it reaches its
    target. However, the password protection adds another barrier for the end user
    (victim) executing the payload:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将把密码加密的载荷上传到网站[http://www.virustotal.com](http://www.virustotal.com)并检查结果，如下面的截图所示。有趣的是，这一次没有一个杀毒程序能够检测到我们的载荷。现在，我们的载荷将在整个传输过程中不被检测到，直到它到达目标。然而，密码保护为最终用户（受害者）执行载荷增加了另一个障碍：
- en: '![](img/35fc08ae-23b0-4b5b-a73f-33c6fcdc50af.jpg)'
  id: totrans-36
  prefs: []
  type: TYPE_IMG
  zh: '![](img/35fc08ae-23b0-4b5b-a73f-33c6fcdc50af.jpg)'
- en: What is a sandbox?
  id: totrans-37
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 什么是沙箱？
- en: 'Whenever we execute an application, be it legitimate or malicious, some of
    the events that occur are as follows:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 无论我们执行一个应用程序，无论是合法的还是恶意的，都会发生以下事件：
- en: Application directly interacts with the host operating system
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 应用程序直接与主机操作系统交互
- en: System calls are made
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 系统调用被执行
- en: Network connections are established
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 建立网络连接
- en: Registry entries are modified
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 注册表条目被修改
- en: Event logs are written out
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 事件日志被写出
- en: Temporary files are created or deleted
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 临时文件被创建或删除
- en: New processes are spawned
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 新的进程被生成
- en: Configuration files are updated
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 配置文件被更新
- en: All the above events are persistent in nature and change the state of the target
    system. Now, there might be a scenario wherein we have to test a malicious program
    in a controlled manner such that the state of the test system remains unchanged.
    This is exactly where a sandbox can play an important role.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 所有上述事件都是持久性的，并改变了目标系统的状态。现在，可能会有一种情况，我们必须以受控的方式测试一个恶意程序，以便测试系统的状态保持不变。这正是沙箱可以发挥重要作用的地方。
- en: Imagine that a sandbox is an isolated container or compartment. Anything that
    is executed within a sandbox stays within the sandbox and does not impact the
    outside world. Running a payload sample within a sandbox will help you analyze
    its behavior without impacting the host operating system.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 想象一下，沙箱是一个隔离的容器或隔间。在沙箱内执行的任何东西都会留在沙箱内，不会影响外部世界。在沙箱内运行一个载荷样本将帮助您分析其行为，而不会影响主机操作系统。
- en: 'There are a couple of open source and free sandbox frameworks available as
    follows:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 有几个开源和免费的沙箱框架可用，如下所示：
- en: 'Sandboxie: [https://www.sandboxie.com](https://www.sandboxie.com)'
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Sandboxie：[https://www.sandboxie.com](https://www.sandboxie.com)
- en: 'Cuckoo Sandbox: [https://cuckoosandbox.org/](https://cuckoosandbox.org/)'
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Cuckoo沙箱：[https://cuckoosandbox.org/](https://cuckoosandbox.org/)
- en: Exploring capabilities of these sandboxes is beyond the scope of this book;
    however, it's worth trying out these sandboxes for malicious payload analysis.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
- en: Anti-forensics
  id: totrans-53
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Over the past decade or so, there have been substantial improvements and advancements
    in digital forensic technologies. The forensic tools and techniques are well developed
    and matured to search, analyze, and preserve any digital evidence in case of a
    breach/fraud or an incident.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
- en: We have seen throughout this book how Metasploit can be used to compromise a
    remote system. The meterpreter works using an in-memory `dll` injection and ensures
    that nothing is written onto the disk unless explicitly required. However, during
    a compromise, we often require to perform certain actions that modify, add, or
    delete files on the remote filesystem. This implies that our actions will be traced
    back if at all a forensic investigation is made on the compromised system.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
- en: Making a successful compromise of our target system is one part while making
    sure that our compromise remains unnoticed and undetected even from a forensic
    perspective is the other essential part. Fortunately, the Metasploit Framework
    offers tools and utilities that help us clear our tracks and ensure that least
    or no evidence of our compromise is left back on the system.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
- en: Timestomp
  id: totrans-57
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Each and every file and folder located on the filesystem, irrespective of the
    type of operating system, has metadata associated with it. Metadata is nothing
    but properties of a particular file or folder that contain information such as
    time and date when it was created, accessed, and modified, its size on the disk,
    its ownership information, and some other attributes such as whether it's marked
    as read-only or hidden. In case of any fraud or incident, this metadata can reveal
    a lot of useful information that can trace back the attack.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
- en: Apart from the metadata concern, there are also certain security programs known
    as `File Integrity Monitors` that keeps on monitoring files for any changes. Now,
    when we compromise a system and get a meterpreter shell on it, we might be required
    to access existing files on this system, create new files, or modify existing
    files. When we do such changes, it will obviously reflect in the metadata in the
    form of changed timestamps. This could certainly raise an alarm or give away a
    lead during incident investigation. To avoid leaving our traces through metadata,
    we would want to overwrite the metadata information (especially timestamps) for
    each file and folder that we accessed or created during our compromise.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
- en: Meterpreter offers a very useful utility called `timestomp` with which you can
    overwrite the timestamp values of any file or folder with the one of your choices.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
- en: 'The following screenshot shows the help menu of the `timestomp` utility once
    we have got the meterpreter shell on the compromised system:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/1277aee3-a8b9-4fd1-9e19-557e58534c6f.jpg)'
  id: totrans-62
  prefs: []
  type: TYPE_IMG
- en: 'The following screenshot shows the timestamps for the file `Confidential.txt` before
    using `timestomp`:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/e1561309-9c50-4474-95fa-c9de6e7d58f6.jpg)'
  id: totrans-64
  prefs: []
  type: TYPE_IMG
- en: 'Now, we will compromise our target system using the SMB `MS08_67_netapi` vulnerability
    and then use the `timestomp` utility to modify timestamps of the file `Confidential.txt`,
    as shown in the following screenshot:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/fe7cf3dd-69c5-4220-bca4-a5e310e66579.jpg)'
  id: totrans-66
  prefs: []
  type: TYPE_IMG
- en: 'After using the `timestomp` utility to modify the file timestamps, we can see
    the changed timestamp values for the file `Confidential.txt`, as shown in the
    following screenshot:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/b6c9b58c-6938-4fc4-a591-d439b6d014d3.jpg)'
  id: totrans-68
  prefs: []
  type: TYPE_IMG
- en: clearev
  id: totrans-69
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Whenever we interact with a Windows system, all the actions get recorded in
    the form of event logs. The event logs are classified into three categories, namely
    application logs, security logs, and system logs. In case of a system failure
    or security compromise, event logs are most likely to be seen first by the investigator/administrator.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
- en: Let's consider a scenario wherein we compromised a Windows host using some vulnerability.
    Then, we used meterpreter to upload new files to the compromised system. We also
    escalated privileges and tried to add a new user. Now, these actions would get
    captured in the event logs. After all the efforts we put into the compromise,
    we would certainly not want our actions to get detected. This is when we can use
    a meterpreter script known as `clearev` to wipe out all the logs and clear our
    activity trails.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们通过某些漏洞入侵了Windows主机。然后，我们使用meterpreter上传新文件到被入侵的系统。我们还提升了权限并尝试添加新用户。现在，这些操作将被记录在事件日志中。在我们付出所有努力进行入侵之后，我们肯定不希望我们的行动被发现。这时，我们可以使用一个名为“clearev”的meterpreter脚本来清除所有日志并清除我们的活动痕迹。
- en: 'The following screenshot shows the`Windows Event Viewer` application which
    stores and displays all event logs:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了存储和显示所有事件日志的“Windows事件查看器”应用程序：
- en: '![](img/683e1425-ed41-41a5-aabd-0553064da81a.jpg)'
  id: totrans-73
  prefs: []
  type: TYPE_IMG
  zh: '![](img/683e1425-ed41-41a5-aabd-0553064da81a.jpg)'
- en: 'Now, we compromise our target Windows system using the SMB `MS08_67_netapi`
    vulnerability and get a meterpreter access. We type in the `clearev` command on
    the meterpreter shell (as shown in the following screenshot), and it simply wipes
    out all the even logs on the compromised system:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们使用SMB“MS08_67_netapi”漏洞来入侵目标Windows系统，并获得了meterpreter访问。我们在meterpreter
    shell中输入“clearev”命令（如下截图所示），它简单地清除了被入侵系统上的所有日志：
- en: '![](img/80ff4eaf-1fc3-4524-9203-ac7340b76f04.jpg)'
  id: totrans-75
  prefs: []
  type: TYPE_IMG
  zh: '![](img/80ff4eaf-1fc3-4524-9203-ac7340b76f04.jpg)'
- en: 'Back on our compromised Windows system, we check the `Event Viewer` and find
    that all logs have been cleared out, as seen in the following screenshot:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 回到我们被入侵的Windows系统，我们检查了“事件查看器”，发现所有日志都已清除，如下截图所示：
- en: '![](img/2ead8953-20dd-406f-8abb-dbf4ccf9d95a.jpg)'
  id: totrans-77
  prefs: []
  type: TYPE_IMG
  zh: '![](img/2ead8953-20dd-406f-8abb-dbf4ccf9d95a.jpg)'
- en: Summary
  id: totrans-78
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, you explored the various techniques to make payloads undetectable
    and were briefed about the various capabilities of the Metasploit Framework related
    to anti-forensics. Moving ahead to the next chapter, we'll deep dive into a cyber
    attack management tool called Armitage, which uses Metasploit at the backend and
    eases more complex penetration testing tasks.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您探索了使有效载荷不可检测的各种技术，并了解了与反取证相关的Metasploit Framework的各种能力。在前往下一章之前，我们将深入研究一种名为Armitage的网络攻击管理工具，该工具在后台使用Metasploit，并简化了更复杂的渗透测试任务。
- en: Exercises
  id: totrans-80
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 练习
- en: 'You can try the following exercises:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以尝试以下练习：
- en: Use the `msfvenom` utility to generate payload, and then try using various encoders
    to make it least detectable on the site [https://www.virustotal.com](https://www.virustotal.com)
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用“msfvenom”实用程序生成有效载荷，然后尝试使用各种编码器使其在[https://www.virustotal.com](https://www.virustotal.com)上最不可检测
- en: Explore a tool called `Hyperion` for making the payload undetectable
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 探索一个名为“Hyperion”的工具，使有效载荷不可检测
- en: Try using any of the sandbox applications to analyze the behavior of the payload
    generated using the `msfvenom` utility
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 尝试使用任何沙箱应用程序来分析使用“msfvenom”实用程序生成的有效载荷的行为
