- en: Antivirus Evasion and Anti-Forensics
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous two chapters, you learned how to leverage the Metasploit Framework
    to generate custom payloads and launch advanced client-side attacks. However,
    the payloads that we generate will be of no use if they get detected and blocked
    by antivirus programs. In this chapter, we'll explore the various techniques in
    order to make our payloads as undetectable as possible. You will also get familiar
    with various techniques to cover our tracks after a successful compromise.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Using encoders to avoid AV detection
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using binary encryption and packaging techniques
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Testing payloads for detection and sandboxing concepts
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using Metasploit anti-forensic techniques, such as TimeStomp and clearev
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using encoders to avoid AV detection
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In Chapter 6, *Client-side Attacks with Metasploit*, we have already seen how
    to use the `msfvenom` utility to generate various payloads. However, these payloads
    if used as-is are most likely to be detected by antivirus programs. In order to
    avoid antivirus detection of our payload, we need to use encoders offered by the
    `msfvenom` utility.
  prefs: []
  type: TYPE_NORMAL
- en: 'To get started, we''ll generate a simple payload in the `.exe` format using
    the `shikata_ga_nai` encoder, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/7856da75-05bd-465a-ac10-953e294e84c3.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Once the payload has been generated, we upload it to the site [http://www.virustotal.com](http://www.virustotal.com)
    for analysis. As the analysis is completed, we can see that our file `apache-update.exe` (containing
    a payload) was detected by 46 out of the 60 antivirus programs that were used.
    This is quite a high detection rate for our payload. Sending this payload as-is
    to our victim is less likely to succeed due to its detection rate. Now, we'll
    have to work on making it undetectable from as many antivirus programs as we can.
  prefs: []
  type: TYPE_NORMAL
- en: The site [http://www.virustotal.com](http://www.virustotal.com) runs multiple
    antivirus programs from across various vendors and scans the uploaded file with
    all the available antivirus programs.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/ba9c2e20-50ab-463f-8ac0-4f8732a822b0.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Simply encoding our payload with the `shikata_ga_nai` encoder once didn''t
    work quite well. The `msfvenom` utility also has an option to iterate the encoding
    process multiple times. Passing our payload through multiple iterations of an
    encoder might make it more stealthy. Now, we''ll try to generate the same payload;
    however, this time we''ll run the encoder 10 times in an attempt to make it stealthy,
    as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/5a1a20b2-5715-4436-84e7-e6935405cfa1.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now that the payload has been generated, we again submit it for analysis on
    [http://www.virustotal.com](http://www.virustotal.com). As shown in the following
    screenshot, the analysis results show that this time our payload was detected
    by 45 antivirus programs out of the 60\. So, it''s slightly better than our previous
    attempts, however, it''s still not good enough:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/456213ec-abd7-496a-9647-79e9af960d20.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Now, to further try and make our payload undetectable, this time we''ll try
    changing the encoder from `shikata_ga_nai` (as used earlier) to a new encoder
    named `opt_sub`, as shown in the following screenshot. We''ll run the encoder
    on our payload for five iterations:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/2a1c1e92-11d9-4206-b308-7dda60e66e93.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Once the payload has been generated, we will submit it to [http://www.virustotal.com](http://www.virustotal.com)
    for analysis. This time, the results look much better! Only 25 antivirus programs
    out of the 60 were able to detect our payload as compared to 45 out of the 60
    earlier, as shown in the following screenshot. This is certainly a significant
    improvement:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/3ced90e2-30e6-464d-b828-36a2965d2e03.png)'
  prefs: []
  type: TYPE_IMG
- en: You have probably worked out that there is no single secret recipe that could
    make our payload completely undetectable.
  prefs: []
  type: TYPE_NORMAL
- en: The process of making payload undetectable involves a lot of trial and error
    methods using various permutations, combinations, and iterations of different
    encoders. You have to simply keep trying until the payload detection rate goes
    down to an acceptable level.
  prefs: []
  type: TYPE_NORMAL
- en: However, it's also very important to note that at times running multiple iterations
    of an encoder on a payload may even damage the original payload code. Hence, it's
    advisable to actually verify the payload by executing it on a test instance before
    it's sent to the target system.
  prefs: []
  type: TYPE_NORMAL
- en: Using packagers and encrypters
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous section, we have seen how to make use of various encoders in
    order to make our payload undetectable from antivirus programs. However, even
    after using different encoders and iterations, our payload was still detected
    by a few antivirus programs. In order to make our payload completely stealthy,
    we can make use of a called `encrypted self extracting archive` feature offered
    by a compression utility called `7-Zip`.
  prefs: []
  type: TYPE_NORMAL
- en: 'To begin, we''ll first upload a malicious PDF file (containing a payload) to
    the site [http://www.virustotal.com](http://www.virustotal.com), as shown in the
    following screenshot. The analysis shows that our PDF file was detected by 32
    antivirus programs out of the 56 available, as seen in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/903b0055-40c3-4878-a1bd-af6f99047f95.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Now using the 7-Zip utility, as shown in the following screenshot, we convert
    our malicious PDF file into a self-extracting archive:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/9b06f716-a34a-4de7-ab06-ce6aad8e81a7.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The analysis results, as shown in the following screenshot, show that the PDF
    file that was converted into a self-extracting archive got detected by 21 antivirus
    programs out of the 59 available. This is much better than our previous attempt
    (32/56):'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/fea868f8-3ef4-4c4a-97aa-41d046ea7cf5.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Now to make the payload even more stealthy, we will convert our payload into
    a password-protected self-extracting archive. This can be done with the help of
    the 7-Zip utility, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/579dedf9-2a23-4ec9-a360-6ca72eb4af06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Now, we''ll upload the password encrypted payload to the site [http://www.virustotal.com](http://www.virustotal.com)
    and check the result, as shown in the following screenshot. Interestingly, this
    time none of the antivirus programs were able to detect our payload. Now, our
    payload will go undetected throughout its transit journey until it reaches its
    target. However, the password protection adds another barrier for the end user
    (victim) executing the payload:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/35fc08ae-23b0-4b5b-a73f-33c6fcdc50af.jpg)'
  prefs: []
  type: TYPE_IMG
- en: What is a sandbox?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Whenever we execute an application, be it legitimate or malicious, some of
    the events that occur are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Application directly interacts with the host operating system
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: System calls are made
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Network connections are established
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Registry entries are modified
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Event logs are written out
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Temporary files are created or deleted
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: New processes are spawned
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Configuration files are updated
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: All the above events are persistent in nature and change the state of the target
    system. Now, there might be a scenario wherein we have to test a malicious program
    in a controlled manner such that the state of the test system remains unchanged.
    This is exactly where a sandbox can play an important role.
  prefs: []
  type: TYPE_NORMAL
- en: Imagine that a sandbox is an isolated container or compartment. Anything that
    is executed within a sandbox stays within the sandbox and does not impact the
    outside world. Running a payload sample within a sandbox will help you analyze
    its behavior without impacting the host operating system.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are a couple of open source and free sandbox frameworks available as
    follows:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Sandboxie: [https://www.sandboxie.com](https://www.sandboxie.com)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Cuckoo Sandbox: [https://cuckoosandbox.org/](https://cuckoosandbox.org/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Exploring capabilities of these sandboxes is beyond the scope of this book;
    however, it's worth trying out these sandboxes for malicious payload analysis.
  prefs: []
  type: TYPE_NORMAL
- en: Anti-forensics
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Over the past decade or so, there have been substantial improvements and advancements
    in digital forensic technologies. The forensic tools and techniques are well developed
    and matured to search, analyze, and preserve any digital evidence in case of a
    breach/fraud or an incident.
  prefs: []
  type: TYPE_NORMAL
- en: We have seen throughout this book how Metasploit can be used to compromise a
    remote system. The meterpreter works using an in-memory `dll` injection and ensures
    that nothing is written onto the disk unless explicitly required. However, during
    a compromise, we often require to perform certain actions that modify, add, or
    delete files on the remote filesystem. This implies that our actions will be traced
    back if at all a forensic investigation is made on the compromised system.
  prefs: []
  type: TYPE_NORMAL
- en: Making a successful compromise of our target system is one part while making
    sure that our compromise remains unnoticed and undetected even from a forensic
    perspective is the other essential part. Fortunately, the Metasploit Framework
    offers tools and utilities that help us clear our tracks and ensure that least
    or no evidence of our compromise is left back on the system.
  prefs: []
  type: TYPE_NORMAL
- en: Timestomp
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Each and every file and folder located on the filesystem, irrespective of the
    type of operating system, has metadata associated with it. Metadata is nothing
    but properties of a particular file or folder that contain information such as
    time and date when it was created, accessed, and modified, its size on the disk,
    its ownership information, and some other attributes such as whether it's marked
    as read-only or hidden. In case of any fraud or incident, this metadata can reveal
    a lot of useful information that can trace back the attack.
  prefs: []
  type: TYPE_NORMAL
- en: Apart from the metadata concern, there are also certain security programs known
    as `File Integrity Monitors` that keeps on monitoring files for any changes. Now,
    when we compromise a system and get a meterpreter shell on it, we might be required
    to access existing files on this system, create new files, or modify existing
    files. When we do such changes, it will obviously reflect in the metadata in the
    form of changed timestamps. This could certainly raise an alarm or give away a
    lead during incident investigation. To avoid leaving our traces through metadata,
    we would want to overwrite the metadata information (especially timestamps) for
    each file and folder that we accessed or created during our compromise.
  prefs: []
  type: TYPE_NORMAL
- en: Meterpreter offers a very useful utility called `timestomp` with which you can
    overwrite the timestamp values of any file or folder with the one of your choices.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following screenshot shows the help menu of the `timestomp` utility once
    we have got the meterpreter shell on the compromised system:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/1277aee3-a8b9-4fd1-9e19-557e58534c6f.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The following screenshot shows the timestamps for the file `Confidential.txt` before
    using `timestomp`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/e1561309-9c50-4474-95fa-c9de6e7d58f6.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Now, we will compromise our target system using the SMB `MS08_67_netapi` vulnerability
    and then use the `timestomp` utility to modify timestamps of the file `Confidential.txt`,
    as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/fe7cf3dd-69c5-4220-bca4-a5e310e66579.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'After using the `timestomp` utility to modify the file timestamps, we can see
    the changed timestamp values for the file `Confidential.txt`, as shown in the
    following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/b6c9b58c-6938-4fc4-a591-d439b6d014d3.jpg)'
  prefs: []
  type: TYPE_IMG
- en: clearev
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Whenever we interact with a Windows system, all the actions get recorded in
    the form of event logs. The event logs are classified into three categories, namely
    application logs, security logs, and system logs. In case of a system failure
    or security compromise, event logs are most likely to be seen first by the investigator/administrator.
  prefs: []
  type: TYPE_NORMAL
- en: Let's consider a scenario wherein we compromised a Windows host using some vulnerability.
    Then, we used meterpreter to upload new files to the compromised system. We also
    escalated privileges and tried to add a new user. Now, these actions would get
    captured in the event logs. After all the efforts we put into the compromise,
    we would certainly not want our actions to get detected. This is when we can use
    a meterpreter script known as `clearev` to wipe out all the logs and clear our
    activity trails.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following screenshot shows the`Windows Event Viewer` application which
    stores and displays all event logs:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/683e1425-ed41-41a5-aabd-0553064da81a.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Now, we compromise our target Windows system using the SMB `MS08_67_netapi`
    vulnerability and get a meterpreter access. We type in the `clearev` command on
    the meterpreter shell (as shown in the following screenshot), and it simply wipes
    out all the even logs on the compromised system:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/80ff4eaf-1fc3-4524-9203-ac7340b76f04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Back on our compromised Windows system, we check the `Event Viewer` and find
    that all logs have been cleared out, as seen in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/2ead8953-20dd-406f-8abb-dbf4ccf9d95a.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you explored the various techniques to make payloads undetectable
    and were briefed about the various capabilities of the Metasploit Framework related
    to anti-forensics. Moving ahead to the next chapter, we'll deep dive into a cyber
    attack management tool called Armitage, which uses Metasploit at the backend and
    eases more complex penetration testing tasks.
  prefs: []
  type: TYPE_NORMAL
- en: Exercises
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'You can try the following exercises:'
  prefs: []
  type: TYPE_NORMAL
- en: Use the `msfvenom` utility to generate payload, and then try using various encoders
    to make it least detectable on the site [https://www.virustotal.com](https://www.virustotal.com)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Explore a tool called `Hyperion` for making the payload undetectable
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Try using any of the sandbox applications to analyze the behavior of the payload
    generated using the `msfvenom` utility
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
