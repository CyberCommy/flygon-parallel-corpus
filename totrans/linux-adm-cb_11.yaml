- en: Web Servers, Databases, and Mail Servers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will examine the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Installing and understanding a web server
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Basic Apache configuration
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Basic Nginx configuration
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: SSL, TLS, and LetsEncrypt
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Basic MySQL or MariaDB installation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Basic PostgreSQL installation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Local MTA usage and configuration (Postfix)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Local MTA usage and configuration (Exim)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: NoSQL documents (MongoDB example)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: NoSQL KV (Redis example)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Messaging brokers and queues (RabbitMQ example)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There's a good chance that you'll come across websites at some point in your
    career as a system administrator or developer.
  prefs: []
  type: TYPE_NORMAL
- en: Websites are these things that exist on the internet, where people go to find
    stuff (technical description). Most of the web runs on Linux, with segmented and
    darker corners for Windows et al.
  prefs: []
  type: TYPE_NORMAL
- en: It's typical for a lot of people to start their Linux careers working for either
    an ISP or a web host of some sort, meaning that a lot of newcomers to the field
    get thrown into the deep end of having to manage very public websites immediately. This
    isn't a bad thing, as you tend to learn quickly in environments with a variety
    of issues, and when you're surrounded by a host of other people who are all experiencing
    the same frustration day in, day out, it can be quite the learning experience.
  prefs: []
  type: TYPE_NORMAL
- en: That's not to say that everyone goes the route of a web host or ISP. I started
    working with Linux properly when I joined a small telecoms company, meaning my
    exposure to web technologies was minimal, and my exposure to **private branch
    exchange** (**PBX**) phone systems was considerably greater.
  prefs: []
  type: TYPE_NORMAL
- en: Needless to say, if you do go into the route of managing websites or maintaining
    them for other people, you will be in good company. Most engineers you meet at
    various levels will have done their time in the trenches, manning the phones,
    and dealing with developers across the globe at all hours of the morning.
  prefs: []
  type: TYPE_NORMAL
- en: I wouldn't go so far as to say working with websites is fun, but constantly
    refreshing a broken web page while troubleshooting, only to have it eventually
    spring into life as though it'd never left, is a hell of a cathartic experience,
    even if it is three in the morning.
  prefs: []
  type: TYPE_NORMAL
- en: There are many different components to the web, and though the heyday of static
    HTML sites has been and gone (though it's looking at a bit of a resurgence recently
    thanks to auto-generated websites hosted in places such as Amazon's S3), there
    are many interesting technologies to get your teeth into.
  prefs: []
  type: TYPE_NORMAL
- en: Starting at the easiest, we're going to look at actual web servers (that serve
    web content), databases (that hold web content), and TLSs (that encrypt web content
    in transit).
  prefs: []
  type: TYPE_NORMAL
- en: 'We''re also going to look at some other pieces of technology that you''ll probably
    come across at some point (again, definitely if you work for a hosting provider).
    These are:'
  prefs: []
  type: TYPE_NORMAL
- en: (e)mail transfer agents (such as Postfix and Exim)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: NoSQL databases (such as MongoDB)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: fast **key value (KV) **stores (such as Redis)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: message brokers (such as RabbitMQ)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Don't let any of these scare you—they've just words on a page.
  prefs: []
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we're going to be using both CentOS and Debian. This is because
    while software in the Linux world is fairly universal, some distributions choose
    specific defaults for things such as their web and mail servers.
  prefs: []
  type: TYPE_NORMAL
- en: 'Feel free to use the following `Vagrantfile` for this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Installing and understanding a web server
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A web server is the component you're interacting with directly when you go to
    a website. It traditionally listens on port  `80` (for **Hypertext Transfer Protocol**
    (**HTTP**)) or ** `443` **(for **Hypertext Transfer Protocol Secure** (**HTTPS**)).
  prefs: []
  type: TYPE_NORMAL
- en: When you type a URL into your browser, these ports are generally hidden unless
    explicitly defined; for example, hitting [https://duckduckgo.com](https://duckduckgo.com)
    in Chrome or Firefox will load the website, but it won't tell you that it's connecting
    on port `443`. In a similar fashion, if you go to[ https://duckduckgo.com:443](https://duckduckgo.com:443),
    the exact same page should load.
  prefs: []
  type: TYPE_NORMAL
- en: 'Also, if you try to go to port `80` using HTTPS (`https://duckduckgo.com:80/`),
    you will generally get an error saying the site can''t provide a secure connection:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/574d2dc8-72bf-40b2-9c43-1dae98bc0184.png)'
  prefs: []
  type: TYPE_IMG
- en: This is because you tried to talk to an insecure port (`80`) using a secure
    protocol (HTTPS).
  prefs: []
  type: TYPE_NORMAL
- en: Web servers literally serve the web, but they're usually just the frontend to
    other technology. Blog posts on a Wordpress install, for example, might be stored
    in a database behind the scenes, while they're presented to the end-user by the
    web server frontend.
  prefs: []
  type: TYPE_NORMAL
- en: It's the job of the web server to determine how to display the content of a
    page to the requesting client.
  prefs: []
  type: TYPE_NORMAL
- en: 'Different clients send different "user agents," which tell the web server what
    type of pages it''ll be able to display to you. Think of it in terms of a desktop
    and phone internet browser: if sites are coded to understand the different user
    agents of your devices, the exact same website can look completely different on
    different devices.'
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We''re going to use both our VMs and set up a web server on each:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Starting with our CentOS box, we're going to install the default web server
    that's provided in the official repositories.
  prefs: []
  type: TYPE_NORMAL
- en: Installing httpd (Apache) on CentOS
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As the title suggests, CentOS re-badges the Apache HTTP Server as `httpd`, I
    suspect to genericise the product for ease of understanding (though I've met a
    fair amount of system administrators who dislike this re-badge, including me).
  prefs: []
  type: TYPE_NORMAL
- en: 'Install `httpd` like so:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Now let''s start it, since this is CentOS:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'As we forwarded ports when we logged into our Vagrant boxes, we should now
    be able to navigate to our forwarded address and port (`http://127.0.0.1:8080`)
    in our local browser:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/2b8e128b-6908-405e-8ef5-b3c64775ab9a.png)'
  prefs: []
  type: TYPE_IMG
- en: This is the default `splash` page for Apache on CentOS, configured out of the
    box.
  prefs: []
  type: TYPE_NORMAL
- en: Installing Nginx on Debian
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now, on our Debian box, let''s install Nginx instead:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Once installed, as it''s Debian, the service will probably start automatically:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'As we''ve forwarded a different port (`http://127.0.0.1:8181`) to our Debian
    machine, we should be able to visit this in our browser, too:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/374712e8-1ae9-442a-b680-3d3eeb67da55.png)'
  prefs: []
  type: TYPE_IMG
- en: Well, that's a lot less swish out of the box...
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: What we've done here is install two different web servers, though they accomplish
    the same thing.
  prefs: []
  type: TYPE_NORMAL
- en: Arguably, there's no better and simultaneously worse place for standards compliance
    than the web, which means that, regardless of the web server you choose to use
    (Apache, Nginx), you should still be able to serve content in a consistent fashion.
  prefs: []
  type: TYPE_NORMAL
- en: Standards compliance is the term we use to refer to the agreed standards for
    computer systems. A **Request for Comments** (**RFC**) might dictate anything
    from which IP ranges are to be used for private use, to how two systems wishing
    to securely communicate over HTTPS go about doing that. The **Internet Engineering
    Task Force** (**IETF**) is one of the bodies that manages RFCs.
  prefs: []
  type: TYPE_NORMAL
- en: The first server we installed was Apache, which for years was the "go to" web
    server and the one that is still considered "battle hardened" by a lot of the
    more traditional administrators out there. It's obviously the default on CentOS
    installations, meaning that the install base is still very large.
  prefs: []
  type: TYPE_NORMAL
- en: At the time of writing, Apache is still seen as the bigger player, but Nginx has
    been rising to fame in recent years, and looks set to take over (more on this
    later).
  prefs: []
  type: TYPE_NORMAL
- en: We then installed Nginx on our Debian box (though Apache is available too).
    Debian's claim to fame of having thousands of packages available comes to the
    fore here, as it also has a slew of different web servers you might like to try
    (I only chose Apache and Nginx as the two biggest).
  prefs: []
  type: TYPE_NORMAL
- en: Regardless of which one you install, both of these systems are now more than
    capable of serving static HTTP content to the internet (or at least your little
    slice of your network, as it's not publicly accessible).
  prefs: []
  type: TYPE_NORMAL
- en: 'If we look at the `ss` output on our Debian box, we see the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: We can see port `80`, listening on all available IPs, and we can see the established
    communication, which is actually coming from our forwarded web connection and
    Firefox. It's the exact same story on the CentOS box.
  prefs: []
  type: TYPE_NORMAL
- en: All of this is great, and it means that when our client (Firefox in this example)
    requests content from the web server (Apache), that server is able to deliver
    the requested content in a fashion and style that the client can understand.
  prefs: []
  type: TYPE_NORMAL
- en: Firefox can then display the content to the end user in a way they will understand,
    as pictures of cats, or whatever other information they might be searching on
    the internet (though it should always be cats).
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: I mentioned other web servers, and it's true that there's quite a few.
  prefs: []
  type: TYPE_NORMAL
- en: In OpenBSD land, you'll probably find yourself installing `httpd`, which isn't
    a re-badged Apache (as is the case on CentOS), but is actually completely different
    software, that just happens to share the same name, and perform similar functions...
  prefs: []
  type: TYPE_NORMAL
- en: Or, you might like the idea of Tomcat, which is less of a traditional web server,
    as it acts as a frontend to Java servlets (usually some sort of web application).
  prefs: []
  type: TYPE_NORMAL
- en: There's `lighttpd` too, which is (as the name might suggest) supposed to be
    a lightweight web server, without the many bells and whistles of functionality
    that Nginx or Apache provide.
  prefs: []
  type: TYPE_NORMAL
- en: In the Windows world (a horrible place that I don't like to visit), you get
    IIS, which is more of a suite of internet services that's available on a Windows
    server.
  prefs: []
  type: TYPE_NORMAL
- en: Basic Apache configuration
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We've installed `httpd` on our CentOS machine, meaning that we've got a web
    server running on port `80` and we're able to hit it from our Firefox installation
    on our host machine.
  prefs: []
  type: TYPE_NORMAL
- en: In this section, we're going to take a look at how our server knows what to
    display and what we can do to set up a site of our own so that people aren't greeted
    by the default Apache page when they visit our IP.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: For this section, we're going to use the `Vagrantfile` from the previous section.
    If you haven't already installed Apache on the CentOS VM, do so at this point.
  prefs: []
  type: TYPE_NORMAL
- en: 'Connect to your CentOS box:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'First, we should have a quick look at where the default configuration is being
    loaded from. On the default page, we can see the following section:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/bdbc51d2-a871-4335-97e0-1d846a0ceba6.png)'
  prefs: []
  type: TYPE_IMG
- en: It turns out that we are, in fact, the administrator. With that in mind, let's
    take a look at what we can do.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we can `ls` the directory listed in this message to see what''s there
    already:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: There's nothing... odd.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s put a basic `index.html` page in this directory, just to see what happens:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Now let''s visit our website once more:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/57a6abff-98b9-4fb5-aa07-fe1265af11e9.png)'
  prefs: []
  type: TYPE_IMG
- en: It's changed!
  prefs: []
  type: TYPE_NORMAL
- en: OK, so clearly this directory is being used for something, but it doesn't explain
    where the configuration on what to display lives.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s cat the suggested `welcome` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'The important takeaway is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '"This configuration file enables the default "Welcome" page if there is no
    default index page present for the root URL."'
  prefs: []
  type: TYPE_NORMAL
- en: OK, so let's not worry about this for now, and instead focus on our own file.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, because you can have a large amount of different websites on one web
    server (virtual hosts), let''s create a small amount of segregation within our
    folder structure to keep different website files separate:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: At this point, our web server will go back to showing the default Apache page,
    as we've moved our only `index.html` file.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, add the configuration that''s required for this directory to be read:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, we need to reload the configuration:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, head back to our Firefox window and try to visit `http://127.0.0.1:8080/`.
    You should see your message again:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/20b57421-2868-4e98-835e-f3309c46d30a.png)'
  prefs: []
  type: TYPE_IMG
- en: With this in place, while nothing on the surface has changed, it means that
    you can add more websites and more quotes from beloved science fiction franchises
    in the future.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The reason we were able to drop a file into `/var/www/html/` and view it in
    our browser was because of the `DocumentRoot` setting within the main Apache configuration
    file, which can be seen here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'The reason we used `index.html` as the filename, aside from it being convention,
    was because of the following line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: This dictates which file to load when a directory is requested.
  prefs: []
  type: TYPE_NORMAL
- en: While the `/etc/httpd/conf/httpd.conf` file is the default configuration file,
    we're also able to add additional configuration for websites under the `/etc/httpd/conf.d/`
    directory, as we did in this case.
  prefs: []
  type: TYPE_NORMAL
- en: 'We used a very specific stanza for our own configuration, as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: This stanza meant that while we could continue to host the same content as we
    did previously on our site, we're also able to host other content too, with different
    `DocumentRoots`.
  prefs: []
  type: TYPE_NORMAL
- en: When we visited our site a second time, instead of being directed to `/var/www/html`
    as the `DocumentRoot`, we were instead pointed to `/var/www/god-to-marvin` because
    the preceding configuration dictated as such.
  prefs: []
  type: TYPE_NORMAL
- en: We also have a `ServerName` and a `ServerAlias` directive, though in this case
    the Alias does nothing.
  prefs: []
  type: TYPE_NORMAL
- en: '`ServerName` is the domain or IP address that the end user typed into their
    browser. The alias can be others associated with that name.'
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, you could have the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: All of these would hit the same `DocumentRoot`.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Virtual hosts only really come into their own when you have multiple domain
    names pointing at a server. In practice, you can have hundreds of different domain
    names pointing to one box, but because Apache is aware of the domain you're using
    to connect, it will only serve the exact site you've requested.
  prefs: []
  type: TYPE_NORMAL
- en: In multi-tenant situations, it's not uncommon for multiple clients to coexist
    on one server, only manipulating and updating their own files, oblivious to the
    fact they're sharing a box with other companies and users.
  prefs: []
  type: TYPE_NORMAL
- en: If it costs a hosting company a few pounds a month to set up a web server and
    they can charge customers of theirs to host sites with them, the company could
    make their money back in no time.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In testing environments, you tend to see multiple websites on one box at once,
    because they're usually lightweight and several can run in parallel. This presents
    a problem for testing domain name resolution though, as it can get costly and
    time-consuming to use public domain name services for test and temporary websites.
  prefs: []
  type: TYPE_NORMAL
- en: One solution to this problem is to use the `/etc/hosts` file (on Linux and Unix
    systems) instead.
  prefs: []
  type: TYPE_NORMAL
- en: 'A default `/etc/hosts` file might look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'You could add an additional line to this file, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: Now when you go to `mysupersite.com` in your browser, the name will be resolved
    to the IP address you specified, instead of going out to an external DNS server
    for name resolution.
  prefs: []
  type: TYPE_NORMAL
- en: In this way, you can have multiple "virtual hosts" on your Apache web server,
    and because your browser is requesting named sites (even if they're all on the
    same IP address), you will get different content depending on the name you connected
    with.
  prefs: []
  type: TYPE_NORMAL
- en: The only issue with people mucking around with their `/etc/hosts` file is when
    they forget to change them back and get confused when they can't connect to the
    "real" site anymore.
  prefs: []
  type: TYPE_NORMAL
- en: Basic Nginx configuration
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Heading on to our Debian server now, we're going to have a look at the default
    Nginx page that we can see when we visit `http://127.0.0.1:8181/`, and we're going
    to replace this text with our own message.
  prefs: []
  type: TYPE_NORMAL
- en: Nginx, as we stated previously, is growing in popularity. It has become the
    go-to web server because of its ease-of-use and flexibility when required—not
    that this is a marketing pitch; they're both open source and free.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: For this section, we're going to use the `Vagrantfile` from the first section.
    If you haven't already installed Nginx on the Debian VM, do so at this point.
  prefs: []
  type: TYPE_NORMAL
- en: 'Connect to your Debian box:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Our default Nginx page doesn't have any pointers on where to look for configuration
    changes, only pointing you to the official documentation (which is well worth
    a peruse) and a commercial support offering.
  prefs: []
  type: TYPE_NORMAL
- en: 'This default page actually lives in a very similar location to the one we''ve
    just been examining on CentOS:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: Note that this file is called `index.nginx-debian.html` and that it's the only
    file in `/var/www/html` to begin with.
  prefs: []
  type: TYPE_NORMAL
- en: Like Apache, Nginx has a concept of virtual hosts, which we're going to configure
    in `/etc/nginx/conf.d/`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s start by creating some content:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'Now we can add to our chosen virtual hosts directory:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, we need to load Nginx:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'Now we should be able to see our question in our browser when pointing to the
    forwarded port we set up:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/f209f3e9-6460-4ea9-8e6e-774c67f0a3fb.png)'
  prefs: []
  type: TYPE_IMG
- en: Cool!
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Our default Nginx configuration file is located at `/etc/nginx/nginx.conf`
    and it sets things like the process ID location, along with the user that Nginx
    will run as ( `www-data` here), on this Debian installation:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'Within this file, there also exists the following block of configuration:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: Note that the top directory is the one we chose to use for our configuration.
  prefs: []
  type: TYPE_NORMAL
- en: When we placed the `fenchurch.conf` configuration in the `/etc/nginx/conf.d/`
    directory, we were instructing Nginx to load this configuration, along with everything
    else it loads at launch.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s look at our configuration:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: The `listen` directives are fairly straightforward, but if you had multiple
    IP addresses on a box, they might be expanded to include a specific entry.
  prefs: []
  type: TYPE_NORMAL
- en: Next, our `root` entry is the root location of website files. Here, it's set
    to the one we chose to create for our great question.
  prefs: []
  type: TYPE_NORMAL
- en: '`index` is the name of the file to load when Nginx enters the directory. The
    standard `index.html` is used here.'
  prefs: []
  type: TYPE_NORMAL
- en: 'And, like Apache, `server_name` is the domain name or IP address that the end
    user is hoping to receive content for. It could be a string of names, as seen
    elsewhere:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: Lastly, the `try_files` line within the `location` block means that files of
    a given link will be searched for, and if they're not found, a `404` will be given
    instead.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can test this by trying to go to a non-existent file in your browser, for
    example, `http://127.0.0.1:8181/prefect`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/4a496d98-0ae6-4b81-af14-cc6d6361a9ee.png)'
  prefs: []
  type: TYPE_IMG
- en: 'However, we could change the `404` to a `403` and reload the Nginx config:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'If we do this, we get a `403 Forbidden` instead:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/0c35b3a2-6221-4e1e-b58b-1373342dd2fc.png)'
  prefs: []
  type: TYPE_IMG
- en: '`404` is perhaps the most common code that web servers return, but you should
    be aware that there are more, and they do actually mean different things (provided
    they''ve been configured to return correctly). `200` is OK, `401` means unauthorized,
    and so on.'
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You might be wondering about using `systemctl reload`, and why I chose to use
    that instead of `restart`.
  prefs: []
  type: TYPE_NORMAL
- en: 'The answer should become clearer when we `cat` the systemd unit file for Nginx:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: There's a specific `ExecReload` line that runs with the `-s reload` flag.
  prefs: []
  type: TYPE_NORMAL
- en: This sends the `reload` signal to Nginx (`SIGHUP`); that is, it's less disruptive
    to the running process.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In Debian and Debian-like distributions, the concept of a `sites-enabled` and
    `sites-available` directory has become commonplace.
  prefs: []
  type: TYPE_NORMAL
- en: Theoretically, any sites you have on your box could go in the `sites-available`
    directory, and once you're happy with them, you create a symlink to the `sites-enabled`
    directory.
  prefs: []
  type: TYPE_NORMAL
- en: Personally, I find this setup a bit confusing and somewhat outdated for an automated
    world, but if that's your jam, then maybe the Debian way of doing things is for
    you. I won't judge.
  prefs: []
  type: TYPE_NORMAL
- en: SSL, TLS, and LetsEncrypt
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We haven't talked about the "S" part of the HTTP equation yet. Specifically,
    the S stands for security, unlike Superman's, which apparently isn't an S, and
    is actually the crest of the House of El.
  prefs: []
  type: TYPE_NORMAL
- en: Unlike Superman, web servers could be lying to you.
  prefs: []
  type: TYPE_NORMAL
- en: When you visit a website, you like to know that the website you're hitting is
    legitimately owned and operated by the company you believe it to be. If you go
    to Amazon, Apple, or PayPal, you want to know that they are who they say they
    are before you hand over your digital cash.
  prefs: []
  type: TYPE_NORMAL
- en: However, you also want the website to be able to take your credit card information
    in a secure fashion so that those digits and secrets don't get spread over the
    internet in plain text format for anyone to read.
  prefs: []
  type: TYPE_NORMAL
- en: 'Look out for the padlock:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/c46c495d-10e3-4b82-80ab-54d45287107e.png)'
  prefs: []
  type: TYPE_IMG
- en: Most browsers (if not all) should show a little padlock when you visit a secure
    site, and as long as the site isn't fraudulent, you shouldn't get a warning about
    potential problems.
  prefs: []
  type: TYPE_NORMAL
- en: HTTPS is absolutely not perfect, as has been displayed previously by security
    researchers. It's possible to get legitimate certificates for companies you've
    set up that just happen to have the same or similar name to existing brands. Be
    absolutely sure that who you're sending your credit card information to is the
    real deal.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can click on this padlock and get information about the `Certificate` that
    the site is using to communicate with you, detailing things such as the owner
    of the cert, the website in question, and the internet body that verified it:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/5ef2be1a-cca1-4043-bf61-12064a2ecf5a.png)'
  prefs: []
  type: TYPE_IMG
- en: In this section, we're going to set up our site to listen for HTTPS connections
    instead of HTTP, and we're going to discuss a body known as `Let's Encrypt`.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we're going to use our Debian VM.
  prefs: []
  type: TYPE_NORMAL
- en: If you haven't already, it would be a good idea to set up Nginx as described
    in the previous sections, including your virtual hosts entry.
  prefs: []
  type: TYPE_NORMAL
- en: If you've not done already, set up your virtual host on your Debian VM using
    Nginx.
  prefs: []
  type: TYPE_NORMAL
- en: Everything we do in this section is also possible in Apache, though with a different
    configuration.
  prefs: []
  type: TYPE_NORMAL
- en: 'Ensure that you''re forwarding your connection to your VM, this time using
    a new port:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Assuming your site is currently up and running on port `80`, inside your VM,
    you should be able to make the following changes to your files to enable HTTPS
    communication:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'Ensure that your file looks similar to the following by using `cat`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'Now ensure that the `snake oil` certificates are available by installing the
    `ssl-cert` package:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, reload our configuration:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: 'You should now be able to visit the `https://127.0.0.1:8484` address in your
    browser, and hopefully see a warning such as the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/1a774ac2-01c3-4754-a0af-b8f3da9f9d4d.png)'
  prefs: []
  type: TYPE_IMG
- en: 'This means that while the server is configured to listen on HTTPS and you can
    connect to it, the browser doesn''t think the certificate is legitimate (because
    it isn''t) and as a result it will warn you before you try to go any further:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/c1ba3410-c6c0-4362-bfb3-c094650b3772.png)'
  prefs: []
  type: TYPE_IMG
- en: At this point, you could press Add Exception... and trust the self-signed certificate,
    enabling you to visit the website. However, unless you're absolutely sure that
    you should be seeing the warning, and you're OK with it (because you're testing),
    it's not a good habit to get into.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The following is a BIG SUPER WARNING:'
  prefs: []
  type: TYPE_NORMAL
- en: The certificates used here are for example only, hence the name "snake oil".
    They should **NEVER** be used in production, by anyone, even for a joke. You should
    only use legitimate certificates for any servers you set up (outside of testing
    and development, which shouldn't be public facing anyway).
  prefs: []
  type: TYPE_NORMAL
- en: 'Now that that''s out of the way, let''s look at what we''ve got here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: We used a couple of `sed` commands to change this file, but we could have just
    copied the contents into the file instead if we wanted.
  prefs: []
  type: TYPE_NORMAL
- en: 'We changed the `listen` port to `443` (from `80`) and added an `ssl` directive.
    We also included a snippet example file, in this case, `snakeoil.conf`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: So, our little virtual host has access to an SSL certificate and a certificate
    key.
  prefs: []
  type: TYPE_NORMAL
- en: Reloading our configuration meant that these settings were applied and that
    we could then hit our site on `443`, inside Firefox.
  prefs: []
  type: TYPE_NORMAL
- en: We then got the scary message about the cert being bogus, but we expected that
    to happen.
  prefs: []
  type: TYPE_NORMAL
- en: We also use the terms SSL and TLS interchangeably quite a bit in this profession
    (even I'm guilty of it), and that's technically incorrect (the worst kind of incorrect).
  prefs: []
  type: TYPE_NORMAL
- en: '**Secure Sockets Layer** (**SSL**) is a long deprecated protocol that''s been
    replaced by **Transport Layer Security** (**TLS**), which is now the standard
    and usually default for providing security of data in transit.'
  prefs: []
  type: TYPE_NORMAL
- en: 'There''s been several versions of both protocols:'
  prefs: []
  type: TYPE_NORMAL
- en: 'SSL 1.0: Never Published'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'SSL 2.0: 1995'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'SSL 3.0: 1996'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'TLS 1.0: 1999'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'TLS 1.1: 2006'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'TLS 1.2: 2008'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'TLS 1.3: 2018'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Realistically, you should be using only TLS 1.2 these days, and when 1.3 becomes
    ubiquitous, I'd recommend flipping to that too.
  prefs: []
  type: TYPE_NORMAL
- en: There's entire articles about the various attacks that can be used against some
    of these protocols, and I would always advise reading up on the recommendations
    of the day when you're setting up a web server.
  prefs: []
  type: TYPE_NORMAL
- en: Heartbleed is usually a good place to start reading up on SSL/TLS vulnerabilities.
  prefs: []
  type: TYPE_NORMAL
- en: Some older operating systems don't support newer protocols, meaning that you
    sometimes get websites using long-dead and insecure protocols just to appease
    the XP users of the world. If your boss demands you use SSL (any version) or a
    TLS earlier than 1.2, I would suggest a nice sit-down over a cup of tea so that
    you can explain why that would be a bad idea.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are a couple of other things, just to make sure you've got a good jumping-off
    point.
  prefs: []
  type: TYPE_NORMAL
- en: Let's Encrypt
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If you don't want to use your own CA, you might consider using Let's Encrypt,
    a certificate authority that provides free certificates.
  prefs: []
  type: TYPE_NORMAL
- en: Usually, certificates cost money—a lot of money in some cases (such as Extended
    Validation certificates)—so it's nice to be able to secure your sites using a
    free offering.
  prefs: []
  type: TYPE_NORMAL
- en: The certificates are only valid for 90 days, which is something of a drawback,
    but it's perfectly possible to implement auto-renewal to combat this perceived
    problem.
  prefs: []
  type: TYPE_NORMAL
- en: Deployment and renewal can be accomplished by various tools that are available
    in a lot of distributions. On Debian boxes, you might consider installing the
    `certbot` package and having a go at configuring a web server of your own.
  prefs: []
  type: TYPE_NORMAL
- en: Work environment certificates
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: It's worth noting that the only thing that makes a certificate "trusted" in
    the traditional sense is that you know who signed it. Some browsers and most operating
    systems come with a list of "trusted" **certificate authorities** (**CAs**) that
    verify that a certificate is legitimate.
  prefs: []
  type: TYPE_NORMAL
- en: 'The same is true for workplaces: What you tend to see (especially in bigger
    companies) are in-house certificate authorities whose integrity-checking certificate
    is installed on every laptop and desktop the company owns. The net result of this
    is that it''s much easier for a company to sign certificates for internal use,
    but they''ll still show a warning if any of those systems are accessed from outside
    (as the outside device won''t have the company CA installed).'
  prefs: []
  type: TYPE_NORMAL
- en: You may find that your own employer has a CA on your company laptop, installed
    alongside the bigwigs from America, China, and a few governments, too.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: It's nice to talk about security in the abstract, but the simple fact of the
    matter is that it's actually quite a confusing topic, and one that the general
    public isn't that well versed in.
  prefs: []
  type: TYPE_NORMAL
- en: You'd like to think that when an end user is presented with a big, scary banner
    telling them that the site they're trying to hit isn't legitimate and that they'd
    click away as fast as they can... but this doesn't happen in a lot of cases.
  prefs: []
  type: TYPE_NORMAL
- en: In reality, an unhealthy number of end users just get annoyed at having to click
    through a few warning, before they reach the site they want (or the site pretending
    to be the site they want).
  prefs: []
  type: TYPE_NORMAL
- en: Recent years have seen various attempts at damage limitation when it comes to
    users blindly accepting fake certificates, such as browsers making it mildly more
    annoying to add exceptions for websites, but still it happens.
  prefs: []
  type: TYPE_NORMAL
- en: This highlights a problem you will come across time and time again as a sysadmin,
    that of user-education, and making sure your users have a basic understanding
    of website security.
  prefs: []
  type: TYPE_NORMAL
- en: Basic MySQL or MariaDB Installation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Databases are great—they keep **Database Administrators** (**DBAs**) in jobs,
    and they provide a convenient way of storing data on a system that isn't a series
    of randomly sized flat files in a directory.
  prefs: []
  type: TYPE_NORMAL
- en: Traditionally, databases have been a great place to store ordered data of specific
    type and size, meaning that you get databases backing all sorts of things, from
    bank transaction records to website inventory numbers.
  prefs: []
  type: TYPE_NORMAL
- en: SQL databases are what people are most familiar with (more on NoSQL databases
    later), and one of the most common is MariaDB, which is a fork of MySQL.
  prefs: []
  type: TYPE_NORMAL
- en: MariaDB was forked from MySQL after the acquisition of the latter by Oracle.
    This is perhaps an understandable concern, as a lot of people in the open source
    space view Oracle as evil, though naturally I have no strong feelings one way
    or the other.
  prefs: []
  type: TYPE_NORMAL
- en: If you run a Wordpress site, you may have already come across MariaDB or MySQL
    because they're the databases of choice for most people when setting up that particular
    blogging platform.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we're going to be using our CentOS VM.
  prefs: []
  type: TYPE_NORMAL
- en: We're leaving web servers for now, meaning that you don't have to worry about
    having completed the previous sections to proceed.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s hop on to our CentOS VM:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'It''s considered a good practice to install software before you try to interact
    with it. Bearing this in mind, `install mariadb-server`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, ensure that it''s started and configured to start at boot (this can take
    a few seconds):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: 'Before we go any further, run the `mysql_secure_installation` script:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: 'This will present you with a series of prompts. Answer them as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Enter current password for root (enter for none): `<BLANK, HIT ENTER>`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Set root password? `Y`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'New password: `examplerootpassword`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Remove anonymous users? `Y`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Disallow root login remotely? `Y`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Remove test database and access to it? `Y`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Reload privilege tables now? `Y`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Remember: these are just examples for this book. There may be reasons why you
    need some of these settings, and you should always set a secure root password
    in the real world.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, log in to your database:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: We gave the password directly on the command line here, for display purposes,
    however you can omit the actual password entirely, and instead have MariaDB prompt
    you for the password (this way it won't show up in your Bash history).
  prefs: []
  type: TYPE_NORMAL
- en: Listing, creating, and selecting databases and tables
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'From inside your new prompt, you''re now able to list the databases within
    `MariaDB` (confusing I know, but the database server (`MariaDB`) can have multiple
    databases that it manages):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: 'We want to take a look at the built-in `mysql` database, so let''s flip to
    that:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: 'Once we''re using this database, we can list the tables inside it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: 'Now we can get information about specific tables. Here, we''re getting the
    `Host`, `User`, and `Password` from the `user` table:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: On top of this, we can create our own database and tables, too.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s create `exampledb` as a database:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: 'We can then `use` this database and add a table:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s `describe` the table we just created, looking at our fields:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, populate it with some data:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: 'Now we can see what we''ve just put into our table by `selecting` the contents:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: 'To exit your database, type `exit` (or hit *CTRL* + *D*):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We installed MariaDB on our system and started it. As a result of that, we
    created several databases and associated data in the `/var/lib/mysql` directory:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: 'After running through the `secure setup` script, we then entered our database
    using the password we''d just set:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: This dropped us into a completely different shell, one within the `MariaDB`
    program, which enabled us to manipulate the databases that `MariaDB` controls.
  prefs: []
  type: TYPE_NORMAL
- en: 'We created a database and a table inside it after a bit of poking around:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: 'The table we specifically created had the name `exampletable`. We gave it two
    fields: a `food` field and a `goodbad` field.'
  prefs: []
  type: TYPE_NORMAL
- en: 'We then inserted some data into the database:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: 'As it happens, because we set the `food` field to be a varchar of `10`, the
    strawberries entry was too long, leading it to be cut off:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: This highlights one of the good things about traditional SQL databases, where
    you can be very granular about the type of data that's stored in each field and
    how much data you can store there.
  prefs: []
  type: TYPE_NORMAL
- en: 'This database now exists on our filesystem, as seen when we listed the `mysql`
    directory previously:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs: []
  type: TYPE_PRE
- en: When you reboot your system, the changes you made to the database will continue
    to exist.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As hinted at in the opening blurb, MariaDB is a fork of MySQL, which is the
    reason that while we installed `MariaDB` here, we also used the `mysql` series
    of commands for interacting with it. This was to ensure backwards compatibility.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are also database permissions, which we haven't covered, and which are
    just as crucial as regular filesystem permissions. You don't want two Wordpress
    installations on the same host to be able to read the database of each other,
    so you would create a dedicated user for each and give them their own DB within
    Maria.
  prefs: []
  type: TYPE_NORMAL
- en: Basic PostgreSQL installation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There's another popular SQL database out there, and I'm not talking about MSSQL
    (which is OK, and it even works on Linux these days!).
  prefs: []
  type: TYPE_NORMAL
- en: PostgreSQL (pronounce it however you want; everyone else does) has been around
    since 1996, and a lot of people swear by it as a vastly superior product to MySQL
    or MariaDB.
  prefs: []
  type: TYPE_NORMAL
- en: Personally, I don't get all that excited about databases, so these sort of conversations
    usually pass me by in a haze of wondering-where-my-next-coffee-is-going-to-come-from.
  prefs: []
  type: TYPE_NORMAL
- en: Like MySQL and MariaDB, Postgres is available in a lot of default repositories,
    and a lot of popular software will give you the option of using Postgres as a
    backend instead of MariaDB.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we're going to use our CentOS machine once more.
  prefs: []
  type: TYPE_NORMAL
- en: 'Hop on to our CentOS VM (or stay on it if you''re there already):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs: []
  type: TYPE_PRE
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Like Maria, we actually have to install the software first:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs: []
  type: TYPE_PRE
- en: 'Unlike Maria, we have to set Postgres up before we can use it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs: []
  type: TYPE_PRE
- en: 'However, once that''s done, you can start and enable the server:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, log into your database (in a slightly different fashion than Maria):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE63]'
  prefs: []
  type: TYPE_PRE
- en: Listing, creating, and selecting databases and tables
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Some people find it easier to remember Postgres commands and syntax compared
    to MariaDB and MySQL. Personally, I always have to look them up, which results
    in liberal use of `\?`, which drops you into the `help` menu.
  prefs: []
  type: TYPE_NORMAL
- en: 'Starting at the basics, use `\l` to list all databases that Postgres manages:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE64]'
  prefs: []
  type: TYPE_PRE
- en: 'To create a database, we''re going to copy one of the two templates available
    to us:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE65]'
  prefs: []
  type: TYPE_PRE
- en: 'To change to our new database, use `\c`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE66]'
  prefs: []
  type: TYPE_PRE
- en: You might think that to list tables we would use `\t`, or perhaps `\lt`, but
    you'd be incorrect.
  prefs: []
  type: TYPE_NORMAL
- en: 'To list tables in the current database, use `\dt`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE67]'
  prefs: []
  type: TYPE_PRE
- en: 'There''s none in this DB, so let''s create one:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE68]'
  prefs: []
  type: TYPE_PRE
- en: 'We also need to populate it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE69]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, we need to describe it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE70]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, we need to select from it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE71]'
  prefs: []
  type: TYPE_PRE
- en: 'Exit Postgres with `\q` or *CTRL* + *D*:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE72]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'After installing Postgres, we end up with data in `/var/lib/pgsql`, like so:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE73]'
  prefs: []
  type: TYPE_PRE
- en: 'We then logged into our database, using the user that was created for us during
    installation:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE74]'
  prefs: []
  type: TYPE_PRE
- en: 'Once inside, we proceeded to create a database of our own, using `template1`
    as a template:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE75]'
  prefs: []
  type: TYPE_PRE
- en: '`template1` can be modified so that you can have a consistent starting point
    for new systems, though, again, I find that this is easier to store in `infrastructure
    as code` repositories nowadays.'
  prefs: []
  type: TYPE_NORMAL
- en: 'We created a table inside our database (after changing to it):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE76]'
  prefs: []
  type: TYPE_PRE
- en: Note that again we're defining specific fields, with types that are associated
    (`varchar` is a very flexible data type, but it's not a good idea to use it for
    everything. Using proper types for the sort of data you want to associate with
    a field is better for performance).
  prefs: []
  type: TYPE_NORMAL
- en: 'We populated our table with content, described, and selected from it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE77]'
  prefs: []
  type: TYPE_PRE
- en: Hopefully, you've noted that a lot of the syntax we used in this section is
    the exact same as the syntax that was used in the MariaDB installation. There's
    a reason for this, and it's because of the name `SQL` that both of these databases
    carry.
  prefs: []
  type: TYPE_NORMAL
- en: Structured Query Language is reasonably consistent, but it's not the case that
    a command used in one SQL DB will be copy-and-pastable into another DB. Sadly,
    that's a pipe dream for the most part.
  prefs: []
  type: TYPE_NORMAL
- en: Outside of the table and database manipulation commands (`\l`, `\dt`, and so
    on), you'd be forgiven for confusing Postgres and Maria syntax, but it's sometimes
    just different enough to be annoying.
  prefs: []
  type: TYPE_NORMAL
- en: We've also not added MSSQL into the mix.
  prefs: []
  type: TYPE_NORMAL
- en: If you ever hear someone refer to SQL as seeqwel, instead of S.Q.L., there's
    a good chance they've picked up the name from a Windows DBA, or someone old enough
    to remember SQL was originally the "Structured English Query Language". It no
    longer has an "e" in the name, but some people insist on creating this ephemeral
    "e" when they pronounce the acronym.
  prefs: []
  type: TYPE_NORMAL
- en: Holy wars...
  prefs: []
  type: TYPE_NORMAL
- en: Local MTA usage and configuration (Postfix)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Email still exists, and while this is a travesty in itself, it also offers us
    the opportunity to look at why you might find yourself interacting with a mail
    server in your day-to-day job.
  prefs: []
  type: TYPE_NORMAL
- en: Traditionally, servers sometimes ran a series of checks on a nightly or weekly
    basis before compiling the results into a document and firing it off to the sysadmin,
    who could then peruse the report and pick up on anomalies or unexpected behavior.
    Mostly, this is a forgotten art, and very few people ever bother to configure
    the default mailing location on their system to be anything other than `root@localhost`.
  prefs: []
  type: TYPE_NORMAL
- en: It's for this reason that you occasionally see `you have new mail` or a similar
    notification when you log into a console. The mail in there is usually something
    that you don't care too much about, from a program that informed you it was broken
    in a different way five days before.
  prefs: []
  type: TYPE_NORMAL
- en: That's not to say that mail isn't important—it's still actively used by monitoring
    systems as a first "alert" method, and, as surprising as it sounds, some people
    really do still run their own mail servers (though, these days, you're more likely
    to find a company using an off-the-shelf solution such as ProtonMail, configured
    with their own domain records).
  prefs: []
  type: TYPE_NORMAL
- en: Email has issues, even when used as an alerting method in a monitoring system.
    I've lost count of the number of places I've been who've had a Nagios, Icinga2,
    or Zabbix set up, configured to email out when there's a problem, but also when
    the problem goes away, or when there might possibly be a problem that someone
    should look at. An alert email can mount up fast, resulting in alert fatigue when
    engineers simply pipe their email to a `junk` folder and never check it (except
    when it gets too full and they occasionally empty it out). Text messages are a
    much more annoying method of alerting—try those.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we're going to use our CentOS VM, mostly because Postfix is
    installed by default on CentOS boxes.
  prefs: []
  type: TYPE_NORMAL
- en: 'Log on to your CentOS box and make sure that Postfix is running:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE78]'
  prefs: []
  type: TYPE_PRE
- en: 'If it''s not installed and not running, you can simply install the `postfix`
    package:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE79]'
  prefs: []
  type: TYPE_PRE
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Mostly, you'll find that Postfix is already installed and configured, so let's
    trawl through what we've got out of the box and look at some common utilities.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, let''s check which MTA your system is configured to use by using the
    `alternatives` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE80]'
  prefs: []
  type: TYPE_PRE
- en: This tells us that the system is utilizing Postfix to send mail.
  prefs: []
  type: TYPE_NORMAL
- en: 'Try sending some mail to an example address. For this, we first need to install
    a small command line, that is, `mailx`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE81]'
  prefs: []
  type: TYPE_PRE
- en: 'You can now run the following mail command, writing whatever you want into
    the newlines (and ending the email with a single `.` on the last line):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE82]'
  prefs: []
  type: TYPE_PRE
- en: 'If we now type `mail` again, we get dropped into the mail shell:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE83]'
  prefs: []
  type: TYPE_PRE
- en: Note what we're informed that we have one message, one of which is unread, and
    below that we get the emboldened line, with the subject in quotes.
  prefs: []
  type: TYPE_NORMAL
- en: 'To open the message, type in the number corresponding to the message in question:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/0f6609d1-30b9-40b0-97de-f17a22a38e87.png)'
  prefs: []
  type: TYPE_IMG
- en: You're dropped into a pager, which allows you to scroll through your message.
  prefs: []
  type: TYPE_NORMAL
- en: You can see a few important things in this message, the first of which being
    that the responding system is `MAILER-DAEMON@centos1.localdomain` (mail delivery
    system), which suggests that our message didn't get very far.
  prefs: []
  type: TYPE_NORMAL
- en: The email then suggests some things you can do to help alleviate your issue,
    the first of which is contact `the postmaster`, who, like the pagemaster from
    the film of the same name, tends to have a certain ethereal quality.
  prefs: []
  type: TYPE_NORMAL
- en: At the bottom, you get a snippet of your email.
  prefs: []
  type: TYPE_NORMAL
- en: What does this tell us? Well, first and foremost, it tells us that your mail
    server can't send the message you just attempted to email.
  prefs: []
  type: TYPE_NORMAL
- en: Next, it tells us that Postfix is functioning enough to process mail, because
    a bounce is still mail.
  prefs: []
  type: TYPE_NORMAL
- en: main.cf
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Postfix uses a primary configuration file at `/etc/postfix/main.cf`.
  prefs: []
  type: TYPE_NORMAL
- en: This file contains a lot of configuration options, but out of the box, it's
    not configured to do much of anything (it won't accept incoming mail from another
    system, for example).
  prefs: []
  type: TYPE_NORMAL
- en: /etc/aliases
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This is the database, or map, of accounts that receive certain mail.
  prefs: []
  type: TYPE_NORMAL
- en: 'Generally, the only configuration change made in this file is the destination
    for the root''s mail. On a local system, you could map this to your user:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE84]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, you run `newaliases` to apply this change:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE85]'
  prefs: []
  type: TYPE_PRE
- en: Again, it's not done frequently, but some people still like to grab emails that
    are intended for root just to make sure that random programs aren't dying and
    screaming into the void as they're claimed by the reaper.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'For more detailed output on what''s going on when your message fails to send,
    you can usually check `/var/log/maillog`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE86]'
  prefs: []
  type: TYPE_PRE
- en: Here, we get a bit of detail around what happened, and if we find the message
    we want, we can follow the `message-id` through the thread of the message.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we can see the message being picked up by Postfix:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE87]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, the daemon processes the message before passing it to the mail queue:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE88]'
  prefs: []
  type: TYPE_PRE
- en: 'We learn that the message is on the queue, waiting to be sent:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE89]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally (for this message), SMTP tries to process the mail:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE90]'
  prefs: []
  type: TYPE_PRE
- en: It immediately fails because the domain isn't real.
  prefs: []
  type: TYPE_NORMAL
- en: 'A bounce message is created, that is, `A88F7206B118`, and processed (while
    the original message, `8E9A1206B117`, is removed):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE91]'
  prefs: []
  type: TYPE_PRE
- en: 'This is done before being sent to the local user, who initiated the mail attempt
    in the first place:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE92]'
  prefs: []
  type: TYPE_PRE
- en: 'It lands in `/var/spool/mail/vagrant`, as denoted by this friendly message:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE93]'
  prefs: []
  type: TYPE_PRE
- en: Each of the steps here is done by Postfix, with one master daemon being responsible
    for a lot of little daemons, each of which has a specific job.
  prefs: []
  type: TYPE_NORMAL
- en: 'If we run `ps` and look for the `postfix` daemon, you''ll find something such
    as this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE94]'
  prefs: []
  type: TYPE_PRE
- en: '`qmgr`, as the name suggests, is the queue manager, and pickup is for local
    mail pickup.'
  prefs: []
  type: TYPE_NORMAL
- en: 'To view the queue, you can use the `postqueue` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE95]'
  prefs: []
  type: TYPE_PRE
- en: Here, you can see a message I sent to `contact@nasa.com`. This doesn't work
    because our connection attempt gets refused.
  prefs: []
  type: TYPE_NORMAL
- en: Also, note port `25`, a traditional mail-receiving port.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you wanted to empty the queue, you''d use `postsuper`, like so:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE96]'
  prefs: []
  type: TYPE_PRE
- en: You can also `flush` mail queues, which attempts redelivery of the mail in them.
    Generally, though, unless you've fixed the problem that caused undeliverable mail
    in the first place, you've just caused the mail to fail again. What's more, you've
    probably ground your server to a halt in the process.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Postfix is a **Mail Transport Agent** (**MTA**).
  prefs: []
  type: TYPE_NORMAL
- en: Sadly, this isn't a book on configuring mail servers, because there are many,
    many books on this subject already. All you need to be aware of is how to interact
    with a default Postfix installation, should you ever come across one in the wild.
  prefs: []
  type: TYPE_NORMAL
- en: If you want to know more about Postfix, or want to run your own mail server,
    I would advise against it. However, if you came back and said you really, really
    wanted to run your own mail server, I would suggest sitting down with Postfix
    for a weekend, reading up on best practices (don't create an open-relay, for example),
    and trying not to give up immediately. All power to you.
  prefs: []
  type: TYPE_NORMAL
- en: Really, though, most companies these days either use some form of Exchange server,
    or they're just using Google, ProtonMail, FastMail, and so on instead.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: It's worth reading up on email because there actually is a good chance that
    you'll find yourself opening an email one day to look at the headers. Understanding
    why email works in the way it does (that is, handing off a message to the next
    mail server in a chain, until it eventually gets to the end user) can be very
    valuable in this context.
  prefs: []
  type: TYPE_NORMAL
- en: I may expand this section in the future, if the notion of running your own email
    server sees some miraculous resurgence.
  prefs: []
  type: TYPE_NORMAL
- en: Local MTA usage and configuration (Exim)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Like Postfix, we have Exim, which is another MTA.
  prefs: []
  type: TYPE_NORMAL
- en: Where Postfix is powerful and has its focus on security, Exim is known for being
    extremely customizable, and with a pedigree that goes all the way back to 1995
    (inching out Postfix by three years). It's been the favorite of the Debian project
    for years, and, as a result, a lot of the documentation on setting up a mail server
    references Exim.
  prefs: []
  type: TYPE_NORMAL
- en: Also, like Postfix, this won't be a long section on fully configuring Exim,
    as that would require something much longer than a section, chapter, or realistically
    a book when done right. Instead, we're going to look at some configuration, the
    Exim log file, and what happens when you try to send a message from your local
    system.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we're going to use our Debian machine.
  prefs: []
  type: TYPE_NORMAL
- en: 'To ensure that Exim is installed on your system, run the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE97]'
  prefs: []
  type: TYPE_PRE
- en: There's quite a few packages in the Exim suite, and it can take some time to
    run through them all.
  prefs: []
  type: TYPE_NORMAL
- en: 'Check it''s running with `systemctl status`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE98]'
  prefs: []
  type: TYPE_PRE
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Post-installation, let's quickly test what the mail server looks like out of
    the box.
  prefs: []
  type: TYPE_NORMAL
- en: 'Starting by sending an example mail:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE99]'
  prefs: []
  type: TYPE_PRE
- en: 'If we now run `mail` again, we''ll see our bounced message:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE100]'
  prefs: []
  type: TYPE_PRE
- en: 'Again, hitting `1` and *Enter* will load the first message:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/04855435-4d86-411b-8732-5c892f134641.png)'
  prefs: []
  type: TYPE_IMG
- en: Here, we actually get the helpful message `Mailing to remote domains not supported`
    as the server in question is incapable of doing so.
  prefs: []
  type: TYPE_NORMAL
- en: 'With Exim, you can also test how it might route mail to a given address with
    the `address testing mode`. When given the preceding address, it prints a familiar
    message:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE101]'
  prefs: []
  type: TYPE_PRE
- en: 'It even tells you it''s non-local, whereas if we give the same command, replacing
    the fake email with a local user, we get the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE102]'
  prefs: []
  type: TYPE_PRE
- en: The transport used is the local `mail_spool`, and there's no messages about
    mail being undeliverable.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can also use `ss` to confirm that our mail server is only listening on port
    `25` locally (`127.0.0.1 & ::1`):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE103]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Exim configuration is found in the `/etc/exim4` folder on our Debian host.
    Listing this file looks as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE104]'
  prefs: []
  type: TYPE_PRE
- en: The configuration file that's being actively used is the `update-exim4.conf.conf`
    file (yes, that's `.conf` twice).
  prefs: []
  type: TYPE_NORMAL
- en: 'This file looks as follows out of the box:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE105]'
  prefs: []
  type: TYPE_PRE
- en: 'It can, however, be amended, as the file suggests, by using `sudo dpkg-reconfigure
    exim4-config`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE106]'
  prefs: []
  type: TYPE_PRE
- en: 'This will drop you into a TUI, which looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/ab2b9dcd-4a4f-4ae3-a584-717ccb099dda.png)'
  prefs: []
  type: TYPE_IMG
- en: Here, you can reconfigure your mail server to your liking, including setting
    it up as an internet mail server.
  prefs: []
  type: TYPE_NORMAL
- en: Once done to your liking, you will find that the configuration file has been
    updated to reflect those settings.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you want to know whether certain configuration settings have taken effect,
    you can use the `exiwhat` command, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE107]'
  prefs: []
  type: TYPE_PRE
- en: 'Exim, like Postfix, also supplies a helpful `maillog`, though in the case of
    Exim, it''s called the `mainlog` and it''s generally in a specific `exim` directory:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE108]'
  prefs: []
  type: TYPE_PRE
- en: 'The contents is relatively familiar:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE109]'
  prefs: []
  type: TYPE_PRE
- en: 'We can see some fairly obvious lines in here that we can expand on, too:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE110]'
  prefs: []
  type: TYPE_PRE
- en: 'The following message has arrived `from vagrant@debian1` (`<=`):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE111]'
  prefs: []
  type: TYPE_PRE
- en: 'The delivery of the message failed, as the address bounced (`**`):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE112]'
  prefs: []
  type: TYPE_PRE
- en: 'A new message has been received from Debian-exim:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE113]'
  prefs: []
  type: TYPE_PRE
- en: 'The original message''s journey has come to an end:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE114]'
  prefs: []
  type: TYPE_PRE
- en: 'The new message has gone out to the vagrant user (`=>`):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE115]'
  prefs: []
  type: TYPE_PRE
- en: The new message's journey has now ended too.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: I've got to give a shout out here to an indispensable site for Exim troubleshooting: [http://bradthemad.org/tech/notes/exim_cheatsheet.php](http://bradthemad.org/tech/notes/exim_cheatsheet.php).
  prefs: []
  type: TYPE_NORMAL
- en: If you ever find yourself stuck on that one thing you know Exim can do, or you're
    certain there's a specific query for the information you're trying to glean, check
    out Brad's Exim Cheatsheet—you won't be the first.
  prefs: []
  type: TYPE_NORMAL
- en: Thanks Brad, for helping administrators everywhere.
  prefs: []
  type: TYPE_NORMAL
- en: NoSQL documents (MongoDB example)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We took a look at **Structured Query Language** (**SQL**) services earlier,
    in the form of MariaDB and PostgreSQL. Now we're going to look at the "newer"
    way of storing data in a database, in a NoSQL fashion.
  prefs: []
  type: TYPE_NORMAL
- en: Unlike the table-based relationships of more traditional databases, NoSQL databases
    store data in other ways (such as key-value stores, tuple stores, or document
    stores). They've come to prominence in recent years due to the sudden and abrupt
    influx of big data products to the market, which rely on such databases for storage
    a lot of the time.
  prefs: []
  type: TYPE_NORMAL
- en: NoSQL databases can take a few different forms, as hinted at previously, and
    we'll be taking a look at an example of one in the next section (Redis).
  prefs: []
  type: TYPE_NORMAL
- en: When thinking about why you might use a NoSQL database in place of a traditional
    one, you might consider aspects such as scalability, flexibility, and speed, all
    of which can be features of good NoSQL setups.
  prefs: []
  type: TYPE_NORMAL
- en: The term **database** is perhaps more loosely and accurately applied to NoSQL
    setups, which can be a base for data, but that might not require the use of structured
    storage for the data they contain.
  prefs: []
  type: TYPE_NORMAL
- en: We're going to install MongoDB in this section, and take a look at the way data
    is stored in its databases.
  prefs: []
  type: TYPE_NORMAL
- en: 'LARGE DISCLAIMER:'
  prefs: []
  type: TYPE_NORMAL
- en: 'MongoDB is perhaps infamous for being a target for unscrupulous members of
    hacking society. This is because MongoDB can be installed with default settings
    that let it listen on the internet, on an open port, without any sort of access
    requirements enabled. THIS IS BAD, and you should always consider the security
    implications of what you''re doing, prior to doing them. As with any application,
    security is primarily the responsibility of the administrator doing the installation
    and management. I go on and on about security in certain sections of this book,
    but it''s important to hammer the point home. Too often, I''ve seen lackadaisical
    approaches to deploying servers (of all kinds) that result in a great big hole
    in your network. When given free reign, I''ve seen some very intelligent people
    do very silly things without thinking about it (such as leaving default admin
    credentials set on a public-facing build server), and Hanlon''s razor always applies:'
  prefs: []
  type: TYPE_NORMAL
- en: '"Never attribute to malice that is adequately explained by stupidity."'
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this section, we''re going to be using our CentOS machine, SSH to it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE116]'
  prefs: []
  type: TYPE_PRE
- en: 'Install the EPEL repository, and then MongoDB:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE117]'
  prefs: []
  type: TYPE_PRE
- en: We're using the EPEL repository for convenience here, but there are more ways
    to install MongoDB. Specifically, using the official repositories is the recommended
    approach for production systems.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Once installed, you can start and enable MongoDB with the `mongod` daemon:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE118]'
  prefs: []
  type: TYPE_PRE
- en: 'By default, MongoDB will start on localhost port 27017, but confirm this using
    `ss` or other tools:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE119]'
  prefs: []
  type: TYPE_PRE
- en: 'Once started, you can connect to your database using the `mongo` command-line
    tool:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE120]'
  prefs: []
  type: TYPE_PRE
- en: 'The output of the preceding command is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/f758a9d2-40e5-4b76-b3f2-de17647abac0.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Note that we connected to `test` by default. We can confirm what DB we''re
    connected to (if we missed the notification) with the `db` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE121]'
  prefs: []
  type: TYPE_PRE
- en: 'We can change databases easily (and in familiar fashion) by using `use`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE122]'
  prefs: []
  type: TYPE_PRE
- en: 'Within our current database, we can see the collections. Because we''ve switched
    to `local`, these look as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE123]'
  prefs: []
  type: TYPE_PRE
- en: 'The syntax for working with collections is `db.<collection name>.<blah>`, so
    if we wanted to query everything within the `startup_log` collection, we could
    do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE124]'
  prefs: []
  type: TYPE_PRE
- en: 'Obviously, this is a bit messy, so we can use `.pretty()` to make it nicer
    to read:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE125]'
  prefs: []
  type: TYPE_PRE
- en: You should already be seeing similarities with SQL databases, though the syntax
    is wildly different in a lot of cases.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s flip back to our `test` database and create a collection of our own:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE126]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, by performing a find on this collection, we should see the data we just
    shoved in:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE127]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s add another line, this time with some more fields:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE128]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s perform our find again:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE129]'
  prefs: []
  type: TYPE_PRE
- en: Note that while our insert was fine, the `2.0` from the `first_version` field
    has been simplified to an integer.
  prefs: []
  type: TYPE_NORMAL
- en: 'If we wanted to narrow down our search, we could specifically search for entries
    with the `name` of Ubuntu:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE130]'
  prefs: []
  type: TYPE_PRE
- en: 'Alternatively, if we wanted to print specific values only (just the names here),
    we could use the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE131]'
  prefs: []
  type: TYPE_PRE
- en: Note the odd structure of this query, where we've specified `1` to include the
    name, but `0` to omit the `_id`, which is included by default.
  prefs: []
  type: TYPE_NORMAL
- en: 'There''s plenty of other things you can do, including searching by a specific
    query (in this case, looking for all entries with an `initial_year` greater than
    `2004`):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE132]'
  prefs: []
  type: TYPE_PRE
- en: Specifically, though, we're interested in differences between this method of
    storing data and a traditional method.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Since we're working with `documents` and things are being created on the fly
    (rather than having tables that are populated with a strict dataset), our preceding
    commands can seem a lot more ad hoc than traditional databases would perform.
  prefs: []
  type: TYPE_NORMAL
- en: 'When we created our collection, we didn''t have to define anything. We simply
    started writing data inside our test database:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE133]'
  prefs: []
  type: TYPE_PRE
- en: From there, we were able to add more data, only to then start querying what
    we'd just written.
  prefs: []
  type: TYPE_NORMAL
- en: The data we added subsequently didn't really matter, and while there were correlations
    in the documents we wrote, such as the name, developer, and `initial_year` fields,
    there were some fields that were unique to our second insert. The database didn't
    care.
  prefs: []
  type: TYPE_NORMAL
- en: Because of this method of storing data in a database, NoSQL systems can be seen
    as a lot more flexible in terms of input.
  prefs: []
  type: TYPE_NORMAL
- en: This data is now stored within MongoDB, ready to be accessed quickly and easily
    by any program that wants to query it (commonly something such as a Node.js application).
  prefs: []
  type: TYPE_NORMAL
- en: 'We can see exactly where the `dbPath` value is using another query:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE134]'
  prefs: []
  type: TYPE_PRE
- en: 'This means that we can also view it on our host system:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE135]'
  prefs: []
  type: TYPE_PRE
- en: There's more...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: I suggested the EPEL version of MongoDB is old. At the time of writing this
    is true, so it's a good idea to try the most recent version from the upstream
    repositories, if you'd like to use MongoDB for your own systems.
  prefs: []
  type: TYPE_NORMAL
- en: Again, I would hammer the point home that enabling some sort of security on
    your system is also a must if you plan on using it in production.
  prefs: []
  type: TYPE_NORMAL
- en: Also, if you're still trying to think of a situation where NoSQL databases could
    be more useful than traditional PostgreSQL or MySQL setups, think of something
    such as logging.
  prefs: []
  type: TYPE_NORMAL
- en: You would hope that a log file is consistent, with the same fields, and the
    same type of data in each. However, log files might change, their order could
    be different, the types could suddenly change, and the number of fields could
    increase.
  prefs: []
  type: TYPE_NORMAL
- en: If you're using a traditional database as the backend for these logs (perfectly
    possible), you would have to add new tables in the best case, or use a different
    database entirely in the worst case.
  prefs: []
  type: TYPE_NORMAL
- en: Piping these same logs into a NoSQL system, one specifically designed to deal
    with documents, shouldn't impact the running of the system at all, as the collection
    will simply adapt to the new information you've provided.
  prefs: []
  type: TYPE_NORMAL
- en: NoSQL KV (Redis example)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We've had a look at one type of NoSQL database already, in the form of MongoDB
    (a document-specific instance). Now we're going to look at a different type of
    NoSQL database, specifically Redis, which is a **key-value** (**KV**) offering.
  prefs: []
  type: TYPE_NORMAL
- en: Its unique selling point is the fact it's an entirely in-memory database (with
    some writing out to disk periodically, if desired). This means that Redis is not
    only a great cache for storing the data you're manipulating or using, but it's
    also extremely fast.
  prefs: []
  type: TYPE_NORMAL
- en: Because of Redis's design, it is a commonly seen component in web stack setups,
    where speed is important for processing requests efficiently.
  prefs: []
  type: TYPE_NORMAL
- en: Of note is one criticism of NoSQL databases that is used in regard to Redis
    and others, where data can be lost easily under specific scenarios. Because Redis
    stores its data primarily in memory, writing out to disk occasionally, there is
    a chance that the catastrophic failure of a node can result in loss of data, even
    if it is only a few seconds worth.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we're going to use our CentOS VM again.
  prefs: []
  type: TYPE_NORMAL
- en: 'SSH to your CentOS machine:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE136]'
  prefs: []
  type: TYPE_PRE
- en: 'Install the EPEL repository, and then MongoDB:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE137]'
  prefs: []
  type: TYPE_PRE
- en: Again, we're using EPEL for convenience, but more up-to-date offerings are out
    there, and one of the most preferred ways of running Redis is in Docker containers.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Out of the box, systemd will start the redis-server binary by using the `/etc/redis.conf`
    configuration file. Let''s go ahead and do that now:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE138]'
  prefs: []
  type: TYPE_PRE
- en: 'The default port being used is `6379`, which we can again check using `ss`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE139]'
  prefs: []
  type: TYPE_PRE
- en: 'Here, we''re listening on localhost, port `6379`:'
  prefs: []
  type: TYPE_NORMAL
- en: 'The same warning as ever applies: If you start opening any of your installed
    services, make sure they''re secure and aren''t about to let bad actors steal
    your data.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Connecting to an instance is achieved using `redis-cli` from the command line,
    and simply invoking it should land you inside the Redis shell:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE140]'
  prefs: []
  type: TYPE_PRE
- en: 'Redis recommends using `ping` to see whether Redis is responding properly:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE141]'
  prefs: []
  type: TYPE_PRE
- en: 'Because Redis is a KV store, the syntax for interacting with it can be incredibly
    simple. The following example creates a key with a string value:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE142]'
  prefs: []
  type: TYPE_PRE
- en: 'To retrieve that data, we use `get`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE143]'
  prefs: []
  type: TYPE_PRE
- en: 'If we wanted to set an integer value, we simply specify it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE144]'
  prefs: []
  type: TYPE_PRE
- en: 'We could then increment it whenever a new Linux distribution is created:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE145]'
  prefs: []
  type: TYPE_PRE
- en: 'You''re not limited to one get at a time either with `mget`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE146]'
  prefs: []
  type: TYPE_PRE
- en: You might be wondering what utility this could have. I mean, sure, it's quick,
    but is it really so good that it becomes an indispensable part of any decent web
    stack?
  prefs: []
  type: TYPE_NORMAL
- en: Redis can do a lot more, including storing binary data (such as images) as the
    value to a key; it can create keys with a short time to live, meaning it could
    be used for temporary caching; and it can be clustered.
  prefs: []
  type: TYPE_NORMAL
- en: How it's used is generally up to the programmer of an application, and not up
    to the admin who's tasked with setting it up. However, that doesn't mean you can't
    suggest it if your developers are all sat around a table scratching their heads,
    trying to think of an in-memory key-value store that they can use as a cache for
    website data.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We started Redis as a service, using `/etc/redis.conf` as the configuration
    file (the default).
  prefs: []
  type: TYPE_NORMAL
- en: 'The default settings shipped with the EPEL version, at the time of writing,
    mean that when it starts, it''s on the localhost address (`127.0.0.1`) and port
    `6379`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE147]'
  prefs: []
  type: TYPE_PRE
- en: 'The settings in here also set the mode (protected by default) that dictates
    how Redis can start when listening on other ports:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE148]'
  prefs: []
  type: TYPE_PRE
- en: Sensible!
  prefs: []
  type: TYPE_NORMAL
- en: We know Redis is in-memory, but there's also that fact about it writing out
    to disk occasionally.
  prefs: []
  type: TYPE_NORMAL
- en: 'This DB dump is viewable in the given directory from the config file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE149]'
  prefs: []
  type: TYPE_PRE
- en: Unless the `appendonly` value is set, this database file lags a little behind
    the running instance, meaning that if Redis or the server crash, you can lose
    a few seconds of data.
  prefs: []
  type: TYPE_NORMAL
- en: How robust you want your data to be is generally up to the application developers.
    If they don't mind the possibility that you might lose a second or two of data,
    meaning a value might not be cached or similar, then you might want to not take
    the performance impact of writing everything to disk as fast as you can.
  prefs: []
  type: TYPE_NORMAL
- en: Messaging brokers and queues (RabbitMQ example)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Moving on from databases of all shapes and sizes, in this section, we're going
    to look at something very different, in the form of a messaging software called
    RabbitMQ.
  prefs: []
  type: TYPE_NORMAL
- en: Like Redis, RabbitMQ is a staple of a lot of modern web applications, because
    of its open source and wel-documented nature.
  prefs: []
  type: TYPE_NORMAL
- en: '"*But what is a messaging queue?*"'
  prefs: []
  type: TYPE_NORMAL
- en: I knew you'd ask that, unless you already know, in which case this section might
    be a bit useless to you.
  prefs: []
  type: TYPE_NORMAL
- en: A **messaging queue**, usually utilizing the **Advanced Message Queuing Protocol**
    (**AMQP**), is part of a message broker, which is software that's used to send
    and receive messages as part of an application stack.
  prefs: []
  type: TYPE_NORMAL
- en: These messages are usually sent from different components that can talk and
    listen in different ways. The messaging broker is there to facilitate the conversation
    between these components.
  prefs: []
  type: TYPE_NORMAL
- en: You'll commonly find that messaging brokers and queues start to come into conversations
    about "decoupling", which is a fancy way of suggesting different elements of an
    application stack shouldn't be so reliant on one another.
  prefs: []
  type: TYPE_NORMAL
- en: Think of a web server, talking to a processing application for data. In the
    old world, the web server would talk to the processing application directly, firing
    messages backward and forward while waiting for responses. This can be good in
    a flat design, but you run the risk of things such as the frontend website locking
    up, while the backend-processing application gets stuck on a tricky task.
  prefs: []
  type: TYPE_NORMAL
- en: Instead of this direct communication, message brokers can be used, and while
    it does rely on the web developers writing code that doesn't rely on a direct
    or immediate response from the backend, it effectively decouples the hard dependency
    of the backend application working (or being there at all).
  prefs: []
  type: TYPE_NORMAL
- en: In theory. you could rip out a database from a queue, replace it, and the frontend
    website would be none the wiser.
  prefs: []
  type: TYPE_NORMAL
- en: You also tend to see RabbitMQ (and others) in designs for distributed and redundant
    setups, instead of one website talking to one processing the backend, several
    frontends, and several backends just talk to the queue, taking and processing
    messages as they see fit.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we're going to use our Debian box... just for a change.
  prefs: []
  type: TYPE_NORMAL
- en: 'Connect to `debian1`, like so:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE150]'
  prefs: []
  type: TYPE_PRE
- en: Note the forwarded ports for accessing the management interface later.
  prefs: []
  type: TYPE_NORMAL
- en: 'A word of warning: RabbitMQ starts on all interfaces by default in this setup,
    so you should ensure that you have a firewall keeping those ports inaccessible
    from the outside. If you''re just working on the Vagrant test VM for this, then
    it should only be set up for a local network anyway.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Install `rabbitmq-server` from the default repositories:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE151]'
  prefs: []
  type: TYPE_PRE
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Once installed, Rabbit should start up automatically (ah, Debian). This means
    that we can immediately see what''s running with `ps` (and the default user it
    runs as, `rabbitmq`):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE152]'
  prefs: []
  type: TYPE_PRE
- en: From this, we can immediately see that RabbitMQ uses Erlang, and that the `/usr/lib/rabbitmq/bin/rabbitmq-server` script
    is used to start the server.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, let''s set up the RabbitMQ management interface:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE153]'
  prefs: []
  type: TYPE_PRE
- en: Now, you should be able to hit this interface on your local machine.
  prefs: []
  type: TYPE_NORMAL
- en: 'Navigate to `http://127.0.0.1:15672` and you should see something such as the
    following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/37c2bcb0-4b83-4b26-a031-781ac6aaa53f.png)'
  prefs: []
  type: TYPE_IMG
- en: The default username and password are `guest`/`guest`.
  prefs: []
  type: TYPE_NORMAL
- en: Going back to my security point from earlier, this highlights the need to set
    up and configure software in a secure testing environment, with absolutely no
    production data, prior to going anywhere near a live environment.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once logged in, you should see this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/35e8c3a8-5a34-497f-a19f-5b5c79edb94c.png)'
  prefs: []
  type: TYPE_IMG
- en: RabbitMQ overview page
  prefs: []
  type: TYPE_NORMAL
- en: Usually, I would suggest starting with the CLI, but it just so happens that
    this is a great way to visualize what Rabbit is, and what it's doing.
  prefs: []
  type: TYPE_NORMAL
- en: At the top of this screen, we have our Totals, which are a breakdown of the
    messages that Rabbit is currently aware of (it's idle right now).
  prefs: []
  type: TYPE_NORMAL
- en: In the Nodes section, we can see straight away that we have a single node, called
    `rabbit@debian1`, and that we have a breakdown of its usage at the moment.
  prefs: []
  type: TYPE_NORMAL
- en: We also have a list of the relevant Paths that Rabbit looks for, including the
    configuration file (currently not there) and the actual database directory. There's
    also information on the various log files.
  prefs: []
  type: TYPE_NORMAL
- en: Have a click around this interface (though you may find it a bit sparse).
  prefs: []
  type: TYPE_NORMAL
- en: Back on the command line, let's take a look at how you might query information
    on a remote server that doesn't have a web interface enabled.
  prefs: []
  type: TYPE_NORMAL
- en: 'Start by listing the queues:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE154]'
  prefs: []
  type: TYPE_PRE
- en: This is empty, as we saw on the GUI (if you clicked on the Queues tab).
  prefs: []
  type: TYPE_NORMAL
- en: 'By default, we have one `vhost`, which is a way to segment RabbitMQ (like vhosts
    in Apache and Nginx):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE155]'
  prefs: []
  type: TYPE_PRE
- en: 'We can take a look at the configured users:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE156]'
  prefs: []
  type: TYPE_PRE
- en: 'We can also create users:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE157]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s create a `vhost` to go along with that:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE158]'
  prefs: []
  type: TYPE_PRE
- en: 'Now let''s give our user access to said `vhost`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE159]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Most of what we did should be self-explanatory, with the exception of the permissions
    line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE160]'
  prefs: []
  type: TYPE_PRE
- en: Here, we're specifically granting access to `configure`, `write`, and `read`
    to our user, `exampleUser`. This means that within the `exampleVhost vhost`, our
    user will have complete access to do as they please.
  prefs: []
  type: TYPE_NORMAL
- en: Access is granted here by way of Regex, meaning that you can have more fine-grained
    control over what a user can and can't access within a `vhost`.
  prefs: []
  type: TYPE_NORMAL
- en: Like Redis, RabbitMQ really doesn't do much without setup and without applications
    talking to it.
  prefs: []
  type: TYPE_NORMAL
- en: Various languages have ways of interfacing with RabbitMQ. It's generally up
    to the developers of your company to decide how they're going to write to the
    queues, which queues they're going to write to, how they're going to read from
    those queues once done, and what language they're going to use.
  prefs: []
  type: TYPE_NORMAL
- en: Sadly, from an administrator's point of view, you'll very rarely have anything
    to do with the actual requests and actions of RabbitMQ. Most of your job is going
    to centre around making sure security is in place (TLS, user authentication, and
    so on) and ensuring clusters remain consistent.
  prefs: []
  type: TYPE_NORMAL
- en: I would highly recommend going through the Rabbit documentation and having a
    go at some of their quickstart guides for interacting with Rabbit. If you have
    a developer mindset, or you just like hacking around with Python scripts, it could
    be a good way to gain a deep understanding of this messaging broker, and messaging
    brokers in general.
  prefs: []
  type: TYPE_NORMAL
- en: Roundup - web servers, databases, and mail servers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, I deliberately tried to talk about some of the most popular
    technology on the market at the moment, including programs that I know for a fact
    have large minds and market share. Some of this software has been around for ages,
    near decades, but more of it has joined the scene recently, owed in large part
    to the explosion of cloud computing in the latter half of the 2010s.
  prefs: []
  type: TYPE_NORMAL
- en: When we talk about web servers, mail servers, and databases, they come in all
    shapes and sizes, meaning that it's hard to suggest sensible defaults that will
    fit absolutely all use cases. The only advice that I can give, and which is universal,
    is to not compromise security for simplicity. (You've probably read enough about
    leaks and security breaches in recent months and years that you want to make sure
    your name isn't tied to something catastrophic such as that.)
  prefs: []
  type: TYPE_NORMAL
- en: That's not to say this stuff can't be fun. The weird and wonderful things people
    are doing with NoSQL databases, messaging brokers, and even mail servers are extremely
    interesting to a lot of people, one of whom might be you!
  prefs: []
  type: TYPE_NORMAL
- en: I also don't want to really take you away from the notion of running any of
    this stuff yourself, especially now that most of this stuff is available "as a
    service" from various cloud providers and third parties. It can be a great learning
    experience and teach you the good and bad of certain programs when you install
    and configure this stuff yourself.
  prefs: []
  type: TYPE_NORMAL
- en: One other thing to note, and this is just like, my opinion, man.
  prefs: []
  type: TYPE_NORMAL
- en: I don't like mixing similar technologies in the same infrastructure. If you
    need an SQL database, and you've never used one in your infrastructure before,
    it's fine to think about it for a while before deciding on either MariaDB or PostgreSQL.
    Most modern software just wants some sort of SQL backend, and it doesn't care
    what software provides it.
  prefs: []
  type: TYPE_NORMAL
- en: That GitLab server you're installing? Maybe you've decided to use PostgreSQL.
  prefs: []
  type: TYPE_NORMAL
- en: Now you've got a WordPress instance to set up? Go with PostgreSQL again.
  prefs: []
  type: TYPE_NORMAL
- en: You need something to connect Icinga2 to? Try PostgreSQL.
  prefs: []
  type: TYPE_NORMAL
- en: Imagine how much of a headache you might get into if you decide to use MariaDB
    for one thing, MySQL for another, and PostgreSQL for a third. Unless there's an
    extremely good reason to use one over the other, I'm a big fan of keeping your
    infrastructure as simple as you can. That way, when you have to learn a bit of
    SQL to properly manage your databases, you only have to worry about the intricacies
    of a certain SQL provider, rather than three different ones.
  prefs: []
  type: TYPE_NORMAL
- en: This is across the board, too—if you've got to set up a mail server for something,
    I would always favor setting up Postfix on both Debian and CentOS machines, just
    so I know where to look in terms of logs and configuration directives, regardless
    of the OS I'm on.
  prefs: []
  type: TYPE_NORMAL
- en: In fact, scratch that! Take it one step further and choose a single OS to deploy,
    scrapping any notion of a mixed Debian, CentOS, and Ubuntu deployment.
  prefs: []
  type: TYPE_NORMAL
- en: Logically, this doesn't only save your sanity when it comes to managing components,
    but it drastically cuts down on the infrastructure as code you'd have to maintain,
    the repositories you'd have to mirror, and the security mailing lists you have
    to subscribe to.
  prefs: []
  type: TYPE_NORMAL
- en: But in your own time? Meh, that's up to you—go nuts, play, learn.
  prefs: []
  type: TYPE_NORMAL
- en: Super personal preference time!
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'If you tied me to a chair, and said I absolutely had to choose which software
    I prefer, I''d say the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Postfix > Exim
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Nginx > Apache
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: MariaDB > PostgreSQL
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Note: This is tongue-in-cheek; don''t take these to heart.'
  prefs: []
  type: TYPE_NORMAL
