- en: Chapter 10. Testing and Debugging Your App
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
- en: Setting up and configuring PHPUnit
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Writing and running a test case
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using Mockery to test controllers
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Writing acceptance tests using Codeception
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Debugging and profiling your app
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As web applications grow more complex, we need to make sure that any changes
    or updates we make to the existing code won't negatively affect other parts of
    code. One way to check for this is to create unit tests. Laravel provides very
    helpful ways for us to include unit tests with our app.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
- en: Setting up and configuring PHPUnit
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this recipe, we''ll see how to install and setup the popular PHPUnit testing
    package: PHPUnit.'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  id: totrans-11
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For this recipe, we need a working installation of Laravel 4\. We'll also need
    the Composer dependency tool installed from [http://getcomposer.org](http://getcomposer.org).
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  id: totrans-13
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To complete this recipe, follow the given steps:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
- en: 'In the root directory of the application, add the following line to the `composer.json`
    file:'
  id: totrans-15
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Open the command line window, navigate to the root directory, and run an update
    on the Composer tool with the following line:'
  id: totrans-17
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'After it is installed, run a quick test in the command line window with the
    command:'
  id: totrans-19
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: How it works...
  id: totrans-21
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Our `composer.json` file tells the Composer tool which packages it should install.
    So our first task is to add the `phpunit` package as a requirement. After saving
    that file, we'll run an `update` command and `phpunit` will be added to our `vendor`
    directory.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
- en: After it's installed, we can run the command to test out `phpunit` and make
    sure it was installed correctly. Laravel comes with an example test case in the
    `app/tests` directory, and it should pass all tests.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
- en: Writing and running a test case
  id: totrans-24
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, if we already have the PHPUnit installed and working, we can
    write a test case and use PHPUnit to check if it is valid or not.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  id: totrans-26
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To run a test case, we'll need a working installation of Laravel. We'll also
    need to have installed PHPUnit from the previous recipe, *Setting up and configuring
    PHPUnit*.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  id: totrans-28
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To complete this recipe, follow the given steps:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
- en: 'In the `app/tests` directory, create a file named `MyAppTest.php` with the
    following code:'
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Run the tests in the command line window, and we should get failing tests on
    entering the following command:'
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'In our `routes.php` file, add a new route with the following code:'
  id: totrans-34
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Run the test again to get a passing unit test
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: How it works...
  id: totrans-38
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When we run our PHPUnit tests, Laravel will automatically look in the `app/tests`
    directory. We begin by creating a new file in that directory to hold the test
    named as `MyAppTest` and extend `TestCase`.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
- en: For this simple test, we use the `call` method and do a `GET` request on the
    `myapp` route. The first thing we check for is that we receive an `Ok` or a 200
    status code, and then that the content returned is the string `This is my app`.
    At this point, when we run the test, it will fail because we haven't created the
    route yet.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
- en: Next, we create our `myapp` route and return the string `This is my app`. Finally,
    we re-run the test and we should get a successful result.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
- en: See also
  id: totrans-42
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Setting up and configuring PHPUnit* recipe
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using Mockery to test controllers
  id: totrans-44
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Sometimes, we need to test the code that uses our database. The commonly accepted
    practice is that we shouldn't actually do live queries on the database while running
    a unit test. To get around this, we can use the Mockery package to fake our data.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  id: totrans-46
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For this recipe, we need to have Laravel installed and working, as well as PHPUnit
    from the *Setting up and configuring PHPUnit* recipe.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  id: totrans-48
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To complete this recipe, follow the given steps:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
- en: 'Open up our `composer.json` file, and make sure the following code is included:'
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Open the command line terminal and run the Composer update with the following
    command:'
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'After the update, in the `app/controllers` directory, create the `ShipsController.php`
    file using the following code:'
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'In `routes.php` file, add a route to this controller using the following command
    line:'
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'In the `app/tests` directory, create a file named as `SpaceshipTest.php` as
    shown in the following code:'
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Back in the command line window, run our tests with the following command:'
  id: totrans-60
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'At this point, we will get a failing test that displays the following message:'
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Since the `Spaceship` class is going to be our model, we''ll use Mockery to
    mock it. Update the `SpaceshipTest` class with the following code:'
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Now, back in the command line window, run the test again and it should pass.
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  id: totrans-67
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We begin by installing the Mockery package using the Composer. This will allow
    us to use it throughout our application. Next, we create a controller with one
    method that will display the name of a single ship. In the controller's constructor,
    we pass in the model we want to use, and in this case it's going to be named `Spaceship`
    and use Laravel's Eloquent ORM.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
- en: In the `showShipName` method, we'll get the first record from the ORM, then
    do a simple return of the record's name. We then need to make a route that points
    to the controller and the showShipName method.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
- en: When we first create the test, we simply make a `GET` request and see if it
    sends back an OK response. At this point, since we haven't made out the `Spaceship`
    model yet, it will display an error when we run the test. We could add the needed
    tables to the database and create the model, and the test would pass. However,
    when testing controllers, we don't want to worry about the database and should
    only be testing whether the controller code is working. For that, we can now use
    Mockery.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
- en: When we call the `first` method on the `Spaceship` class, it will give us an
    object holding all the returned fields, so we first create a generic object and
    assign it to the `$ship` controller. Then, we create our `mock` object for the
    `Spaceship` class and, when our controller asks for the `first` method, the `mock`
    object will return our previously created generic object.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
- en: Next, we need to tell Laravel that whenever the `Spaceship` instance is requested,
    it should use our `mock` object instead. And finally, call `GET` on our ship route
    and make sure it returns an OK response.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
- en: See also
  id: totrans-73
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Setting up and configuring PHPUnit* recipe
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Writing acceptance tests using Codeception
  id: totrans-75
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Acceptance testing is a useful way to test that your application is outputting
    the correct information to the browser. Using a package such as Codeception, we
    can automate these tests.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  id: totrans-77
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For this recipe, we'll need a working copy of Laravel installed.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  id: totrans-79
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To complete this recipe, follow the given steps:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the `composer.json` file, and add the following line to our `require-dev`
    section:'
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Open the command line window, and update the app with the following command:'
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'After it is installed, we need to run the `bootstrap` command in the terminal,
    as shown in the following command:'
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'In the `app/tests/acceptance` directory, create a file named as `AviatorCept.php`
    using the following code:'
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'In our main `routes.php` file, update the default route using the following
    code:'
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Open the command line window and run the acceptance test with the following
    command:'
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'At this point, we should see it failing. To make it pass, update the default
    route once more by entering the following code:'
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'In the command line window, run the test again using the following command:'
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: This time, it should pass.
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  id: totrans-98
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We start by installing the Codeception package through the Composer. Once it's
    downloaded, we run the `bootstrap` command that will create all the needed files
    and directories. Codeception automatically adds the files and folders to a `tests`
    directory; thus, to make sure they are added into Laravel's test directory, we
    add the `app` directory to the end of the `bootstrap` command.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
- en: Next, we create the file to hold our test in the `acceptance` directory. We
    start by creating a new `WebGuy` object, which is Codeceptions class to run acceptance
    tests. The next line is describing what we want to do, which in this case is to
    see all the blueprints. The next line tells the test which page we need to be
    on, which will correspond to our routes. For our purposes, we're just checking
    the default route. Finally, we tell the test what we want to `see` on the page.
    Any text we put here should be displayed somewhere on the page.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
- en: Our first pass at the default route will display `Way of the future`; thus,
    when the Codeception test is run, it will fail. To run the tests, we use the `run`
    command and make sure we use the `–c` flag and specify the `app` as the path to
    the tests, since we installed the bootstrap files inside the `app/tests` directory.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
- en: Then, we can update the route to display the text `All The Blueprints` and re-run
    the test. This time, it will pass.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  id: totrans-103
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Codeception is a very powerful testing suite with many different options. To
    fully understand everything it can do, go to [http://codeception.com/](http://codeception.com/).
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
- en: Debugging and profiling your app
  id: totrans-105
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If we want to know how our application is working behind the scenes, we'll need
    to profile it. This recipe will show how to add in a profiler to our Laravel app.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  id: totrans-107
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For this recipe, we'll need a working copy of Laravel with a MySQL database
    properly configured.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  id: totrans-109
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To complete this recipe, follow the given steps:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
- en: 'Open up the command line window and use the `artisan` command to create our
    migrations as given in the following code:'
  id: totrans-111
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: In the `app/database/migrations` folder, open the file whose name begins with
    the date and ends with `create_spaceships_table.php`, and use this for our database
    table
  id: totrans-113
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'In the `app/database/seeds` folder, create a file named `SpaceshipSeeder.php`
    as shown in the following code:'
  id: totrans-115
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'In the same directory, open the `DatabaseSeeder.php` file and make sure the
    `run()` method looks like the following snippet:'
  id: totrans-117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Back in the command line window, install the migration and run the seeder with
    the following code:'
  id: totrans-119
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'In the `app/models` directory, create a file named as `Spaceship.php` as shown
    in the following snippet:'
  id: totrans-121
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: In the `app/controllers` directory, create a file named as `ShipsController.php`
  id: totrans-123
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'In the `routes.php` file, register the route as shown in the following command:'
  id: totrans-125
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'In the `app/views` directory, create a view named as `ships.blade.php` as shown
    in the following code:'
  id: totrans-127
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'At this point, if we go to the `http://{your-dev-url}/public/ship`, we''ll
    see the list of ships. Next we need to open the `composer.json` file and add the
    following line in the `require-dev` section:'
  id: totrans-129
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'Then in the command line window, update the Composer using the following command:'
  id: totrans-131
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'After everything is downloaded, in the `app/config` folder, open the `app.php`
    file. In the `providers` array, add the following line to the end of the code:'
  id: totrans-133
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE34]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'In the same file, in the `aliases` array, add the following line:'
  id: totrans-135
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE35]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: At the top of this file, make sure `debug` is set to true, then go back to `http://{your-dev-url}/public/ship`
    in your browser. The `profiler` will show up at the bottom of the browser window.
  id: totrans-137
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  id: totrans-138
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Our first step is to create the page we want to profile. We start with using
    the `artisan` command to create a `migrations` file, and then add in the Schema
    builder code to make our spaceships table. When that's done, we can add some information
    to the table using the seeder file.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
- en: With that complete, we can now run the migration and the seeder, and our table
    will be created with all the information already populated.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
- en: Next we create a simple model and a controller for our data. In the controller,
    we'll simply get all of the ships and pass the variable to our ships view. We'll
    also add a logging event in the middle of the code. This will allow us to debug
    the code later, if we need to.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
- en: Once that's done, we can see the list of ships we created.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
- en: Then, we need to install the profiler package, which is based on a previous
    version of Laravel's profiler. After updating our Composer file, we then register
    the profiler so our app knows of its existence; we also register the Façade if
    we want to do more with it later.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们需要安装基于 Laravel 早期版本的性能分析器包。更新了我们的 Composer 文件后，我们注册性能分析器，这样我们的应用程序就知道它的存在；如果以后想要更多地使用它，我们还可以注册
    Façade。
- en: In our config file, if we have `debug` set to `TRUE`, the profiler will display
    on every page we access. We can disable the profiler by simply setting `debug`
    to `FALSE`.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的配置文件中，如果我们将`debug`设置为`TRUE`，那么性能分析器将在我们访问的每个页面上显示。我们可以通过简单地将`debug`设置为`FALSE`来禁用性能分析器。
- en: There's more...
  id: totrans-145
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: 'We could also add timers to our app using the startTimer and endTimer methods
    as shown in the following snippet:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以使用以下代码段中显示的 startTimer 和 endTimer 方法向我们的应用程序添加定时器：
- en: '[PRE36]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
