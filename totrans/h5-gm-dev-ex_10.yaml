- en: Appendix A. Pop Quiz Answers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Chapter 2: Getting Started with DOM-based Game Development'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Running our code after the page is ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '| 1 | d |'
  prefs: []
  type: TYPE_TB
- en: Understanding the behavior of absolution position
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '| 1 | c |'
  prefs: []
  type: TYPE_TB
- en: 'Chapter 3: Building Memory Match Game in CSS3'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Storing internal custom data with HTML5 custom data attribute
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '| 1 | c or d |'
  prefs: []
  type: TYPE_TB
- en: Accessing custom data attribute with jQuery
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '| 1 | a and d |'
  prefs: []
  type: TYPE_TB
- en: 'Chapter 4: Building Untangle Game with Canvas and Drawing API'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Using startAngle and endAngle
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '| 1 | c |'
  prefs: []
  type: TYPE_TB
- en: Using closePath with fill command only
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '| 1 | b |'
  prefs: []
  type: TYPE_TB
- en: Accessing shapes in canvas
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '| 1 | b |'
  prefs: []
  type: TYPE_TB
- en: '| 2 | d |'
  prefs: []
  type: TYPE_TB
- en: Clearing drawn shapes in canvas
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '| 1 | a |'
  prefs: []
  type: TYPE_TB
- en: '| 2 | b |'
  prefs: []
  type: TYPE_TB
- en: 'Chapter 5: Building Canvas Games Masterclass'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Drawing text in canvas
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '| 1 | c |'
  prefs: []
  type: TYPE_TB
- en: '| 2 | b |'
  prefs: []
  type: TYPE_TB
- en: Styling canvas background
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '| 1 | b |'
  prefs: []
  type: TYPE_TB
- en: 'Chapter 6: Adding Sound Effects to your Games'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Using the audio tag
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '| 1 | b |'
  prefs: []
  type: TYPE_TB
- en: '| 2 | Please the fallback content between <canvas> and </canvas> |'
  prefs: []
  type: TYPE_TB
- en: 'Chapter 7: Using Local Storage to Store Game Data'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Using local storage
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '| 1 | False |'
  prefs: []
  type: TYPE_TB
- en: '| 2 | True |'
  prefs: []
  type: TYPE_TB
- en: '| 3 | True |'
  prefs: []
  type: TYPE_TB
- en: 'Chapter 8: Building Multiplayer Draw-and-Guess Game with WebSockets'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '| 1 | Referring to the content related to Web Sockets sectionIn the WebSockets
    approach, the amount of requests is much less than the polling approach. It is
    because the connection between the client and server is persistence. Once the
    connection is established, a request from either client-side or server-side is
    only sent when there is any update. For instance, a client sends a message to
    server when it wants to update something to server. The server also sends messages
    to clients only when it needs to notify the clients for data update. No other
    useless requests are sent during the connection. Therefore much less bandwidth
    is used. The following graph shows the WebSockets approach. |'
  prefs: []
  type: TYPE_TB
