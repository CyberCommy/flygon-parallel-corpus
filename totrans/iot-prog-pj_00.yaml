- en: Preface
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The **Internet of Things** (**IoT**) promises to unlock the real world the way
    that the internet unlocked millions of computers just a few decades ago. First
    released in 2012, the Raspberry Pi computer has taken the world by storm. Originally
    designed to give newer generations the same excitement to programming that personal
    computers from the 1980s did, the Raspberry Pi has gone on to be a staple of millions
    of makers everywhere.
  prefs: []
  type: TYPE_NORMAL
- en: In 1991, Guido van Rossum introduced the world to the Python programming language.
    Python is a terse language and was designed for code readability. Python programs
    tend to require fewer lines of code than other programming languages. Python is
    a scalable language that can be used for anything from the simplest programs to
    massive large-scale projects.
  prefs: []
  type: TYPE_NORMAL
- en: In this book, we will unleash the power of Raspberry Pi and Python to create
    exciting IoT projects.
  prefs: []
  type: TYPE_NORMAL
- en: The first part of the book introduces the reader to the amazing Raspberry Pi.
    We will learn how to set it up and jump right into Python programming. We will
    start our foray into real-world computing by creating the "Hello World" app for
    physical computing, the flashing LED.
  prefs: []
  type: TYPE_NORMAL
- en: Our first project takes us back to an age when analog needle meters ruled the
    world of data display. Think back to those old analog multimeters and endless
    old sci-fi movies where information was controlled and displayed with buttons
    and big flashing lights. In our project, we will retrieve weather data from a
    web service and display it on an analog needle meter. We will accomplish this
    using a servo motor connected to our Raspberry Pi through the GPIO.
  prefs: []
  type: TYPE_NORMAL
- en: Home security systems are pretty much ubiquitous in modern life. Entire industries
    and careers are based on the installation and monitoring of them. Did you know
    that you could easily create your own home security system? In our second project,
    we do just that, as we build a home security system using Raspberry Pi as a web
    server to display it.
  prefs: []
  type: TYPE_NORMAL
- en: The humble doorbell has been with us since 1831\. In our third project, we will
    give it a 21st century twist and have our Raspberry Pi send a signal to a web
    service that will text us when someone is at the door.
  prefs: []
  type: TYPE_NORMAL
- en: In our final project, we take what we've learned from our previous two projects
    and create an IoT robot car we call T.A.R.A.S (This Amazing Raspberry-Pi Automated
    Security Agent).
  prefs: []
  type: TYPE_NORMAL
- en: In years to come, driverless cars will become the rule instead of the exception,
    and ways of controlling these cars will be needed. This final project gives the
    reader insight and knowledge into how someone would go about controlling cars
    devoid of a human driver.
  prefs: []
  type: TYPE_NORMAL
- en: Who this book is for
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This book is geared toward those who have had some sort of exposure to programming
    and are interested in learning about the IoT. Knowledge of the Python programming
    language would be a definite asset. An understanding of, or a keen interest in,
    object-oriented programming will serve the reader well with the coding examples
    used in the book.
  prefs: []
  type: TYPE_NORMAL
- en: What this book covers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '[Chapter 1](0a0d7c2b-0d5e-4f44-a7fb-33452b1f1abf.xhtml), *Installing Raspbian
    on the Raspberry Pi*, sets us off on our Raspberry Pi IoT journey by installing
    the Raspbian OS on our Raspberry Pi. We will then take a look at some of the programs
    that come pre-installed with Raspbian.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 2](f310884c-55e6-48a4-8329-05ff04e48e19.xhtml), *Writing Python Programs
    Using Raspberry Pi*, covers how Windows, macOS, and Linux are operating systems
    that are familiar to developers. Many a book on developing the Raspberry Pi involves
    using one of these operating systems and accessing the Raspberry Pi remotely.
    We will take a different approach in this book. We will use our Raspberry Pi as
    a development machine. In this chapter, we will get our feet wet with using the
    Raspberry Pi as a development machine.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 3](c4822610-2d5b-4b3a-8b29-5789ae0e7665.xhtml), *Using the GPIO to
    Connect to the Outside World*, explains how, if the Raspberry Pi was just a $35
    computer, that would be enough for many of us. However, the real power behind
    the Raspberry Pi is the ability of the developer to access the outside world through
    the use of the **General Purpose Input Output** (**GPIO**) pins. In this chapter,
    we will delve into the GPIO and start to connect the Raspberry Pi to the real
    world. We will create a Morse code generator for our project using an outside
    LED and then use this generator to blink out simulated weather information.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 4](626664bb-0130-46d1-b431-682994472fc1.xhtml), *Subscribing to Web
    Services*,explores a few web services offered by some of the biggest companies
    in the world. Our project will use the virtual version of the Raspberry Pi Sense
    HAT as a ticker to display current weather information from the Yahoo! Weather
    web service.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 5](a180e8ce-8d3b-4158-b260-981ee3697af4.xhtml), *Controlling a Servo
    with Python*,introduces the concept of creating an analog meter needle using a
    servo motor connected to the Raspberry Pi.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 6](f9133d23-c79a-4bf6-98f3-5405b8f0f5cf.xhtml), *Working with the
    Servo Control Code to Control an Analog Device*, continues the theme of working
    with servo motors as we build our first real IoT device, a weather dashboard.
    Not only will this weather dashboard feature an analog needle; it will use the
    needle to point to a picture of a suggested wardrobe based on the weather conditions.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 7](4c4cf44d-ff8a-4cb4-9d8c-85530b0d873b.xhtml), *Setting Up a Raspberry
    Pi Web Server,* goes into how to install and configure the web framework CherryPy.
    We will conclude the chapter by building a local website that displays weather
    information.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 8](049458f1-d6ac-433a-93ab-f55501ff9523.xhtml), *Reading Raspberry
    Pi GPIO Sensor Data Using Python*,covers how to read the state of a button before
    moving on to a PIR sensor and distance sensor. We will conclude the chapter by
    building simple alarm systems.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 9](1a50006e-75d3-4dc1-96db-82114b437795.xhtml), *Building a Home Security
    Dashboard*, explains how to build a home security dashboard using the Raspberry
    Pi as a web server serving up HTML content containing sensory data collected from
    the GPIO.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 10](6c15e05d-c6f4-48b4-9279-704320035b8a.xhtml), *Publishing to Web
    Services*, goes into how to measure room temperature and humidity and publish
    these values to the web through the use of an IoT dashboard. We will also set
    up and run a text messaging alert using the service Twilio.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 11](1668a45a-408f-4732-8643-623297983690.xhtml), *Creating a Doorbell
    Button Using Bluetooth*, turns our focus to using Bluetooth in this chapter. Bluetooth
    is a wireless technology that allows for transmission of data over short distances.
    For our project we will explore the BlueDot app from the Android Play Store. We
    will use this app to build a simple Bluetooth connected doorbell.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 12](83535d5b-9fec-4d63-a0d2-ba03d1e69d56.xhtml), *Enhancing Our IoT
    Doorbell*, will take the simple doorbell we created in [Chapter 11](1668a45a-408f-4732-8643-623297983690.xhtml), *Creating
    a Doorbell Button Using Bluetooth*, and turn it into an IoT doorbell using the
    knowledge we learned in [Chapter 10](6c15e05d-c6f4-48b4-9279-704320035b8a.xhtml),
    *Publishing to Web Services*.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 13](2289f7f6-874d-4a13-8e08-02fde93e6b18.xhtml), *Introducing the
    Raspberry Pi Robot Car,* starts us off on our journey into the IoT robot car by
    introducing This Amazing Raspberry-Pi Automated Security Agent (T.A.R.A.S). This
    chapter will begin by outlining the components we need to build T.A.R.A.S and
    then we will proceed to putting it all together.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 14](eff0f7cb-f99b-45d5-8781-42c841bd2fd9.xhtml), *Controlling the
    Robot Car Using Python,* goes into how to write Python code for our robot car.
    We will utilize the GPIO Zero library to make the car wheels move forward, move
    the servo motors holding the camera, and light up the LEDs at the back of the
    robot car.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 15](cb36b5d6-f521-440c-8eb5-74eeddc87914.xhtml), *Connecting Sensory
    Inputs from the Robot Car to the Web*, helps us understand that in order to turn
    our robot car into a true IoT device we have to connect it to the internet. In
    this chapter we will connect the distance sensor from our robot car to the internet.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 16](78ca846a-9f4b-47f7-b404-bb04366a9d9a.xhtml), *Controlling the
    Robot Car with Web Service Calls*, continues to turn our robot car into an Internet
    of Things device by taking a deeper look at the internet dashboard we created
    for the robot car.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 17](b44cb570-263b-4f0b-9c3f-8efd9ace1e8a.xhtml), *Building the JavaScript
    Client*,moves our attention away from Python, switching our focus to JavaScript
    instead. We will use JavaScript to build a web-based client that communicates
    over the internet using the MQTT protocol.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 18](74462726-806d-4214-8818-17f4627477c3.xhtml), *Putting It All Together*,
    covers how we will connect our robot car, T.A.R.A.S, to a JavaScript client, and
    control it over the internet using the MQTT protocol.'
  prefs: []
  type: TYPE_NORMAL
- en: To get the most out of this book
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To get the most out of this book, I will assume the following:'
  prefs: []
  type: TYPE_NORMAL
- en: You have purchased, or will purchase, a Raspberry Pi Computer, preferably a
    2015 model or newer.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You have had some exposure to the Python programming language, or are eager
    to learn it.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You have a basic familiarity with electronic components and how to use a breadboard.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You have purchased, or are willing to purchase, basic electronic components.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'In terms of hardware requirements, you will need at least the following:'
  prefs: []
  type: TYPE_NORMAL
- en: A Raspberry Pi Model 3 (2015 model or newer)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A USB power supply
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A computer monitor
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A USB keyboard
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A USB mouse
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A microSD RAM card
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A breadboard and breadboard jumpers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Additional pieces of hardware will be introduced at the beginning of every chapter.
  prefs: []
  type: TYPE_NORMAL
- en: In terms of software requirements, you will require the Raspberry Pi NOOBS image
    ([https://www.raspberrypi.org/downloads/noobs/](https://www.raspberrypi.org/downloads/noobs/)).
    Additional software, accounts, and Python packages will be presented along the
    way. Any piece of software, web service, or Python package we use in this book
    is free of charge.
  prefs: []
  type: TYPE_NORMAL
- en: Download the example code files
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You can download the example code files for this book from your account at [www.packt.com](http://www.packt.com).
    If you purchased this book elsewhere, you can visit [www.packt.com/support](http://www.packt.com/support) and
    register to have the files emailed directly to you.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can download the code files by following these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Log in or register at [www.packt.com](http://www.packt.com).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the SUPPORT tab.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on Code Downloads & Errata.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter the name of the book in the Search box and follow the onscreen instructions.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Once the file is downloaded, please make sure that you unzip or extract the
    folder using the latest version of:'
  prefs: []
  type: TYPE_NORMAL
- en: WinRAR/7-Zip for Windows
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Zipeg/iZip/UnRarX for Mac
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 7-Zip/PeaZip for Linux
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The code bundle for the book is also hosted on GitHub at [https://github.com/PacktPublishing/Internet-of-Things-Programming-Projects](https://github.com/PacktPublishing/Internet-of-Things-Programming-Projects). In
    case there's an update to the code, it will be updated on the existing GitHub
    repository.
  prefs: []
  type: TYPE_NORMAL
- en: We also have other code bundles from our rich catalog of books and videos available
    at **[https://github.com/PacktPublishing/](https://github.com/PacktPublishing/)**.
    Check them out!
  prefs: []
  type: TYPE_NORMAL
- en: Download the color images
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We also provide a PDF file that has color images of the screenshots/diagrams
    used in this book. You can download it here: [https://www.packtpub.com/sites/default/files/downloads/9781789134803_ColorImages.pdf](https://www.packtpub.com/sites/default/files/downloads/9781789134803_ColorImages.pdf).
  prefs: []
  type: TYPE_NORMAL
- en: Conventions used
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are a number of text conventions used throughout this book.
  prefs: []
  type: TYPE_NORMAL
- en: '`CodeInText`: Indicates code words in text, database table names, folder names,
    filenames, file extensions, pathnames, dummy URLs, user input, and Twitter handles. Here
    is an example: "In order to access Python 3, we type the  `python3` command in
    a Terminal window."'
  prefs: []
  type: TYPE_NORMAL
- en: 'A block of code is set as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Any command-line input or output is written as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '**Bold**: Indicates a new term, an important word, or words that you see on
    screen. For example, words in menus or dialog boxes appear in the text like this.
    Here is an example: "From the View menu, select Object inspector and Variables."'
  prefs: []
  type: TYPE_NORMAL
- en: Warnings or important notes appear like this.Tips and tricks appear like this.
  prefs: []
  type: TYPE_NORMAL
