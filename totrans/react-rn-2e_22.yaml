- en: Controlling Image Display
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: So far, the examples in this book haven't rendered any images on mobile screens.
    This doesn't reflect the reality of mobile applications. Web applications display
    lots of images. If anything, native mobile applications rely on images even more
    than web applications because images are a powerful tool when you have a limited
    amount of space.
  prefs: []
  type: TYPE_NORMAL
- en: You'll learn how to use the React Native `Image` component in this chapter,
    starting with loading images from different sources. Then, you'll see how you
    can use the `Image` component to resize images, and how you can set placeholders
    for lazily loaded images. Finally, you'll learn how to implement icons using the
    `react-native-vector-icons` package.
  prefs: []
  type: TYPE_NORMAL
- en: Loading images
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s get things started by figuring out how to load images. You can render
    the `<Image>` component and pass it properties just like any other React component.
    But this particular component needs image blob data to be of any use. Let''s look
    at some code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: There are two ways to load the blob data into an `<Image>` component. The first
    approach loads the image data from the network. This is done by passing an object
    with a `uri` property to `source`. The second `<Image>` component in this example
    is using a local image file, by calling `require()` and passing the result to
    `source`.
  prefs: []
  type: TYPE_NORMAL
- en: Take a look at the `sourceProp` property type validator. This gives you an idea
    of what can be passed to the `source` property. It's either an object with a `uri`
    string property or a number. It expects a number because `require()` returns a
    number.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, let''s see what the rendered result looks like as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/91c9947b-0c8f-4e97-be62-ea2a1317bf82.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Here''s the style that was used with these images:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Note that without `width` and `height` style properties, images will not render.
    In the next section, you'll learn how image resizing works when `width` and `height`
    values are set.
  prefs: []
  type: TYPE_NORMAL
- en: Resizing images
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `width` and `height` style properties of `Image` components determine the
    size of what's rendered on the screen. For example, you'll probably have to work
    with images at some point that have a larger resolution than you want displayed
    in your React Native application. Simply setting the `width` and `height` style
    properties on the `Image` is enough to properly scale the image.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s look at some code that lets you dynamically adjust the dimensions of
    an image using a control as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Here''s what the image looks like if you''re using the default 100 x 100 dimensions:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/b40ab7d7-8519-454a-a44d-8edff602c351.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Here''s a scaled-down version of the image:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/801928a3-1a5b-425a-b415-11b2c971d59d.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Lastly, here''s a scaled-up version of the image:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/53427742-e4ed-4b55-9369-fdd00facd101.png)There''s a `resizeMode`
    property that you can pass to `Image` components. This determines how the scaled
    image fits within the dimensions of the actual component. You''ll see this property
    in action in the final section of this chapter.'
  prefs: []
  type: TYPE_NORMAL
- en: Lazy image loading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Sometimes, you don't necessarily want an image to load at the exact moment that
    it's rendered. For example, you might be rendering something that's not yet visible
    on the screen. Most of the time, it's perfectly fine to fetch the image source
    from the network before it's actually visible. But if you're fine-tuning your
    application and discover that loading lots of images over the network causes performance
    issues, you can lazily—load the source.
  prefs: []
  type: TYPE_NORMAL
- en: I think the more common use case in a mobile context is handling a scenario
    where you've rendered one or more images where they're visible, but the network
    is slow to respond. In this case, you will probably want to render a placeholder
    image so that the user sees something right away, rather than empty space.
  prefs: []
  type: TYPE_NORMAL
- en: 'To do this, you can implement an abstraction that wraps the actual image that
    you want to show once it''s loaded. Here''s the code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: This component renders a `View` with two `Image` components inside. It also
    has a `loaded` state, which is initially false. When `loaded` is false, the placeholder
    image is rendered. The `loaded` state is set to true when the `onLoad()` handler
    is called. This means that the placeholder image is removed, and the main image
    is displayed.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now let''s use the `LazyImage` component that you''ve just implemented. You''ll
    render the image without a source, and the placeholder image should be displayed.
    Let''s add a button that gives the lazy image a source, and when it loads, the
    placeholder image should be replaced. Here''s what the main app module looks like:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'This is what the screen looks like initially:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/1121ca04-d35f-4b1a-8400-9cc5ae289db0.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Then, if you click the Load Remote button, you''ll eventually see the image
    that we actually want:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/1d6dbeaa-95cf-4594-b1c6-145df85e3d84.png)'
  prefs: []
  type: TYPE_IMG
- en: You might notice that, depending on your network speed, the placeholder image
    remains visible even after you click the Load Remote button. This is by design,
    because you don't want to remove the placeholder image until you know for sure
    that the actual image is ready to be displayed.
  prefs: []
  type: TYPE_NORMAL
- en: Rendering icons
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the final section of this chapter, you'll learn how to render icons in React
    Native components. Using icons to indicate meaning makes web applications more
    usable. So, why should native mobile applications be any different?
  prefs: []
  type: TYPE_NORMAL
- en: 'You''ll want to use the `react-native-vector-icons` package to pull in various
    vector font packages into your React Native project:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Now you can import the `Icon` component and render them. Let''s implement an
    example that renders several `FontAwesome` icons based on a selected icon category:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'When you run the example, you should see something that looks like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/be6fc32f-96f8-416d-b798-42da75a7de63.png)'
  prefs: []
  type: TYPE_IMG
- en: The color of each icon is specified in the same way you would specify the color
    of text, via styles.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you learned about handling images in your React Native applications.
    Images in a native application are just as important in a native mobile context
    as they are in a web context—they improve the user experience.
  prefs: []
  type: TYPE_NORMAL
- en: You learned the different approaches to loading images, and then how to resize
    them. You also learned how to implement a lazy image that uses a placeholder image
    to display while the actual image is loading. Finally, you learned how to use
    icons in a React Native app.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, you'll learn about local storage in React Native, which
    is handy when your app goes offline.
  prefs: []
  type: TYPE_NORMAL
- en: Test your knowledge
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: What types of values does the `source` property of the `Image` component accept?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`Image` components accept paths to local files.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`Image` components accept remote image URLs.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`Image` components accept paths to local files and remote image URLs.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What should you use as a placeholder while images load?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You should use a placeholder image that makes sense for the context where the
    image is used.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You should use an `ActivityIndicator` component for any images on the screen
    that haven't loaded yet.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The `Image` component automatically handles placeholders for you.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How can you scale an image using the `Image` component?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You have to make sure that only scaled images are used in the Image component.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: By setting the `width` and the `height` property, the `Image` component will
    automatically handle scaling the image for you.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Scaling images in a mobile app is CPU intensive and should be avoided.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Is it worth installing the `react-native-vector-icons` package for your app?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Yes, this package makes thousands of icons available to your app and icons are
    an important tool for communicating intent to users.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: No, it's a lot of overhead and icons aren't helpful in mobile apps.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Check out the following links for more information:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://facebook.github.io/react-native/docs/image](https://facebook.github.io/react-native/docs/image)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://github.com/oblador/react-native-vector-icons](https://github.com/oblador/react-native-vector-icons)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
