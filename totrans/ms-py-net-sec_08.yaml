- en: Working with Nmap Scanners
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter covers how network scanning is done with python-nmap to gather
    information on a network, host, and the services that are running on the hosts.
    Some of the tools that allow a port scanner and automate the detection of services
    and open ports, we can find in Python, among which we can highlight python-nmap.
    Nmap is a powerful port scanner that allows you to identify open, closed, or filtered
    ports. It also allows the programming of routines and scripts to find possible
    vulnerabilities in a given host.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following topics will be covered in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Learning and understanding the Nmap protocol as a port scanner to identify services
    running on a host
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Learning and understanding the `python-nmap` module that uses Nmap at a low
    level and is a very useful tool to optimize tasks related to port scanning
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Learning and understanding synchronous and asynchronous scanning with the `python-nmap
    module`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Learning and understanding Nmap scripts to detect vulnerabilities in a network
    or a specific host
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Examples and source code for this chapter are available in the GitHub repository
    in the `chapter8` folder:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://github.com/PacktPublishing/Mastering-Python-for-Networking-and-Security](https://github.com/PacktPublishing/Mastering-Python-for-Networking-and-Security).'
  prefs: []
  type: TYPE_NORMAL
- en: 'You will need to install a Python distribution in your local machine with at
    least 4 GB of memory. In this chapter, we will use a **virtual machine** with
    which some tests related to port analysis and vulnerability detection will be
    carried out. It can be downloaded from the `sourceforge` page:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://sourceforge.net/projects/metasploitable/files/Metasploitable2](https://sourceforge.net/projects/metasploitable/files/Metasploitable2)'
  prefs: []
  type: TYPE_NORMAL
- en: 'To log in, you must use the username, `msfadmin`, and the password, `msfadmin`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/a762810d-c72e-4099-a79a-7b232836446a.png)'
  prefs: []
  type: TYPE_IMG
- en: 'If we execute the `ifconfig` command, we can see the configuration of the network
    and the IP address that we can use to perform our tests. In this case, the IP
    address for our local network is **192.168.56.101**:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/ae16ef46-b2ea-4c49-b9ef-88ce95a6e9cc.png)'
  prefs: []
  type: TYPE_IMG
- en: 'If we perform a port scan with the `nmap` command , we can see the ports that
    are open in the virtual machine:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/c573f22c-7a09-47bf-b71f-5994d039b4db.png)'
  prefs: []
  type: TYPE_IMG
- en: Basically,  a Metasploitable virtual machine (vm) is a vulnerable version of
    Ubuntu Linux designed for testing security tools and demonstrating common vulnerabilities.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can find more information about this virtual machine in the following guide:
    [https://metasploit.help.rapid7.com/docs/metasploitable-2-exploitability-guide.](https://metasploit.help.rapid7.com/docs/metasploitable-2-exploitability-guide)'
  prefs: []
  type: TYPE_NORMAL
- en: Introducing port scanning with Nmap
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we  review the Nmap tool for port scanning and the main scanning
    types that it supports. We will learn about Nmap as a port scanner that allows
    us to analyze the ports and services that run on a machine.
  prefs: []
  type: TYPE_NORMAL
- en: Introducing to port scanning
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Once I have identified endpoints within our network, the next step is to perform
    a port scan. Computers that support communication protocols utilize ports in order
    to make connections. In order to support different conversations with multiple
    applications, ports are used to distinguish various communications in the same
    machine or server. For example, web servers can use the **Hypertext Transfer Protocol**
    (**HTTP**) to provide access to a web page which utilizes TCP port number `80`
    by default. The **Simple Mail Transfer Protocol** or **SMTP** uses port `25` to
    send or transmit mail messages. For each unique IP address, a protocol port number
    is identified by a 16-bit number, commonly known as the port number `0-65,535`.
    The combination of a port number and IP address provides a complete address for
    communication. Depending on the direction of the communication, both a source
    and destination address (IP address and port combination) are required.
  prefs: []
  type: TYPE_NORMAL
- en: Scanning types with Nmap
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Network Mapper** (**Nmap**) is a free and open source tool used for network
    discovery and security auditing. It runs on all major computer operating systems,
    and official binary packages are available for Linux, Windows, and Mac OS X. The
    python-nmap library helps to manipulate the scanned results of Nmap programmatically to
    automate port-scanning tasks.'
  prefs: []
  type: TYPE_NORMAL
- en: The Nmap tool is mainly used for the recognition and scanning of ports in a
    certain network segment. From the site, [https://nmap.org](https://nmap.org),
    we can download the latest version available, depending on the operating system
    on which we want to install it.
  prefs: []
  type: TYPE_NORMAL
- en: 'If we run the Nmap tool from the console, we get this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/c3307890-497e-4407-b904-5f7d0890ea6b.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We can see that we have the following **types of scanning**:'
  prefs: []
  type: TYPE_NORMAL
- en: '**sT (TCP Connect Scan): **This is the option that is usually used to detect
    if a port is open or closed, but it is also usually the most audited mechanism
    and most monitored by intrusion detection systems. With this option, a port is
    open if the server responds with a packet containing the ACK flag when sending
    a packet with the SYN flag.'
  prefs: []
  type: TYPE_NORMAL
- en: '**sS (TCP Stealth Scan):** This is a type of scan based on the TCP Connect
    Scan with the difference that the connection on the indicated port is not done
    completely. It consists of checking the response packet of the target before it
    checks a packet with the SYN flag enabled. If the target responds with a packet
    that has the RST flag, then you can check if the port is open or closed.'
  prefs: []
  type: TYPE_NORMAL
- en: '**u (UDP Scan):** This is a type of scan based on the UDP protocol where a
    connection process is not carried out, but simply a UDP packet is sent to determine
    if the port is open. If the answer is another UDP packet, it means that the port
    is open. If the answer returns, the port is not open, and an **Internet Control
    Message Protocol** (**ICMP**) packet of type 3 (destination unreachable) will
    be received.'
  prefs: []
  type: TYPE_NORMAL
- en: '**sA (TCP ACK Scan):** This type of scan lets us know if our target machine
    has any type of firewall running. What this scan does is send a packet with the
    ACK flag activated to the target machine. If the remote machine responds with
    a packet that has the RST flag activated, it can be determined that the port is
    not filtered by any firewall. In the event returns, if the remote does not respond,
    or does so with an ICMP packet of the type, it can be determined that there is
    a firewall filtering the packets sent to the indicated port.'
  prefs: []
  type: TYPE_NORMAL
- en: '**sN (TCP NULL Scan):** This is a type of scan that sends a TCP packet to the
    target machine without any flag. If the remote machine does not issue a response,
    it can be determined that the port is open. Otherwise, if the remote machine returns
    an RST flag, we can say that the port is closed.'
  prefs: []
  type: TYPE_NORMAL
- en: '**sF (TCP FIN Scan):** This is a type of scan that sends a TCP packet to the
    target machine with the FIN flag. If the remote machine does not issue a response,
    it can be determined that the port is open. If the remote machine returns an RST
    flag, we can say that the port is closed.'
  prefs: []
  type: TYPE_NORMAL
- en: '**sX (TCP XMAS Scan):** This is a type of scan that sends a TCP packet to the
    target machine with the flags PSH, FIN, or URG. If the remote machine does not
    issue a response, it can be determined that the port is open. If the remote machine
    returns an RST flag, we can say that the port is closed. If, in the response package,
    we obtain one of the ICMP type 3 responses, then the port is filtered.'
  prefs: []
  type: TYPE_NORMAL
- en: The type of default scan may vary depending on the user that is running it,
    because of the permissions allowed to send packets during the scan. The difference
    between scanning types is the "noise" generated by each one, and its ability to
    avoid being detected by security systems, such as firewalls or intrusion detection
    systems.
  prefs: []
  type: TYPE_NORMAL
- en: If we want to create a port scanner, we would have to create a thread for each
    socket that opens a connection in a port and manage the shared use of the screen
    through a traffic light. With this approach we would have a long code and in addition
    we would only do a simple TCP scan, but not ACK, SYN-ACK, RST, or FIN provided
    by the Nmap toolkit.
  prefs: []
  type: TYPE_NORMAL
- en: Since the Nmap response format is XML, it would not be difficult to write a
    module in Python that allows the parsing of this response format, providing full
    integration with Nmap and being able to run more types of scans. In this way,
    the `python-nmap` module emerged as the main module for performing these types
    of tasks.
  prefs: []
  type: TYPE_NORMAL
- en: Port scanning with python-nmap
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section we review the `python-nmap` module for port scanning in Python. We
    will learn how the `python-nmap` module uses Nmap and how it is a very useful
    tool for optimizing tasks regarding discovery services in a specific target (domain,
    network, or IP address).
  prefs: []
  type: TYPE_NORMAL
- en: Introduction to python-nmap
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In Python we can make use of Nmap through the python-nmap library, which allows
    us to manipulate the results of a scan easily. In addition, it can be a perfect
    tool for system administrators or computer security consultants when it comes
    to automating penetration-testing processes.
  prefs: []
  type: TYPE_NORMAL
- en: python-nmap is a tool that is used within the scope of security audits or intrusion
    tests and its main functionality is to discover what ports or services a specific
    host has open for listening. In addition, it has the advantage that it is compatible
    with versions 2.x and 3.x.
  prefs: []
  type: TYPE_NORMAL
- en: 'You could get the source for python-nmap from the Bitbucket repository:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://bitbucket.org/xael/python-nmap](https://bitbucket.org/xael/python-nmap)'
  prefs: []
  type: TYPE_NORMAL
- en: 'The latest version of python-nmap can be downloaded from the following websites:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://xael.org/pages/python-nmap-en.html](http://xael.org/pages/python-nmap-en.html)'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://xael.org/norman/python/python-nmap](https://xael.org/norman/python/python-nmap/)'
  prefs: []
  type: TYPE_NORMAL
- en: Installing python-nmap
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To proceed with the installation, unzip the downloaded package, jump to the
    new directory, and execute the installation command.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this example, we are installing Version 0.5 from the source package:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/9bd17528-a2bf-482d-99f8-022e05defafe.png)'
  prefs: []
  type: TYPE_IMG
- en: 'It is also possible to install the module with the `pip install` tool, since
    it is in the official repository. To install the module, it is necessary to execute
    the command with administrator permissions or use the system superuser (`sudo`):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Using python-nmap
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now, you can import the python-nmap module that we can invoke from our scripts,
    or from the interactive terminal, for example:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/a1a8c4c9-d51c-404b-9639-4d9f6096f9b0.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Once we have verified the module installation, we can start to perform scans
    on a specific host. For this, we must do an instantiation of the `PortScanner()`
    class, so we can access the most important method: `scan()`. A good practice to
    understand how a function, method, or object works is to use the `**help()**`
    or `dir()` functions to find out the methods available in a module:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/cf3f783d-4fc0-46e8-9f07-7d2461a46018.png)'
  prefs: []
  type: TYPE_IMG
- en: If we execute a `help (port_scan.scan)` command, we see that the `scan` method
    of the `PortScanner` class receives three arguments, the host(s), the ports, and
    the arguments, and at the end it adds the parameters (all must be string).
  prefs: []
  type: TYPE_NORMAL
- en: 'With the `help` command, we can see that information:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/4862ae4b-1d55-43a2-bfd5-8221da7839e6.png)'
  prefs: []
  type: TYPE_IMG
- en: The first thing we have to do is import the Nmap library and create our object
    to start interacting with `PortScanner()`.
  prefs: []
  type: TYPE_NORMAL
- en: 'We launch our first scan with the `scan (''ip'', ''ports'')` method, where
    the first parameter is the IP address, the second is a port list, and the third
    parameter is optional. If we do not define it, perform a standard Nmap scan:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: In this example, a scan is performed on the virtual machine with the IP address
    `192.168.56.101` on ports in the `1-80` range. With the `**argument -sV**`, we
    are telling you to detect the versions when invoke scanning.
  prefs: []
  type: TYPE_NORMAL
- en: The result of the scan is a dictionary that contains the same information that
    would return a scan made with Nmap directly. We can also return to the object
    we instantiated with the `PortScanner()` class and test its methods. We can see
    the `nmap` command that has been executed in the following screenshot, with the
    `command_line()` method.
  prefs: []
  type: TYPE_NORMAL
- en: To obtain more information about the server that is running on a certain port,
    we can do so using the `tcp()` method.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this example, we can see how to obtain information about a specific port
    with the `tcp` method:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/209c0f9e-bbaa-4c09-b95f-8dbe80527859.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We can also see if a host is up or not with the `state()` function that returns
    the state property we can see in the previous screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'We also have the `all_hosts()` method for scanning all the hosts, with which
    we can see which hosts are up and which are not:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'We can also see the services that have given some type of response in the scanning
    process, as well as the `scanning` method used:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'We also scan all protocols:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: The following script tries to perform a scan with python-nmap with the following
    conditions in the form of arguments.
  prefs: []
  type: TYPE_NORMAL
- en: 'Ports to scan: `21,22,23,80,8080`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: -n option to not execute a DNS resolution.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Once the scan data has been obtained, save them in a `scan.txt` file.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'You can find the following code in the filename: `Nmap_port_scanner.py`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '`Nmap_port_scanner.py` execution:'
  prefs: []
  type: TYPE_NORMAL
- en: 'In this screenshot we can see the state of the ports passed as parameters in
    the Metasploitable vm with the specified IP address:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/76bd821e-7d69-4d1c-a42b-7b16caa161b4.png)'
  prefs: []
  type: TYPE_IMG
- en: Scan modes with python-nmap
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this section we review the scan modes supported in the `python-nmap` module. `python-nmap`
    allows for the automation of port scanner tasks and reports in two modes: synchronous
    and asynchronous. With the asynchronous mode, we can define a `callback` function
    that will execute when a scan is finished in a specific port and, in this function,
    we can make additional treatments if the port is opened, such as launching an
    Nmap script for a specific service (HTTP, FTP, MySQL).'
  prefs: []
  type: TYPE_NORMAL
- en: Synchronous scanning
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this example, we implemented a class that allows us to scan an IP address
    and a list of ports that are passed to the script as a parameter.
  prefs: []
  type: TYPE_NORMAL
- en: In the main program, we add the necessary configuration for the treatment of
    the input parameters. We perform a loop that processes each port sent by parameter,
    and call the `nmapScan (ip, port)` method of the `NmapScanner` class.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can find the following code in the filename: `NmapScanner.py`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'We can execute the previous script in the command line to show the options:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'With the `-h` parameter, we can see the script options:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/3a18d316-58bb-4571-87f6-1c07f4a8e128.png)'
  prefs: []
  type: TYPE_IMG
- en: 'This is the output, if we execute the script with the previous parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/1e37e36d-73fd-4d0d-9f45-1e948e29b36e.png)'
  prefs: []
  type: TYPE_IMG
- en: In addition to performing port scanning and returning the result by console,
    we could generate a JSON document to store the result with the ports open for
    a given host. In this case, we use the `csv()` function that returns the result
    of the scan in an easy format to collect the information we need. At the end of
    the script, we see how the call is made to the defined method, passing the IP
    and the list of ports through parameters.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can find the following code in the filename:`NmapScannerJSONGenerate.py`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'In this screenshot, we can see output of the execution of the `NmapScannerJSONGenerate`
    script:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/151f4d1e-e673-4c60-a8c9-6a21495607f6.png)'
  prefs: []
  type: TYPE_IMG
- en: Asynchronous scanning
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We can perform asynchronous scans using the `PortScannerAsync()` class. In
    this case, when performing the scan we can indicate an additional callback parameter
    where we define the `return` function, which would be executed at the end of the
    scan:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: In this way, we can define a `callback` function that is executed whenever Nmap
    has a result for the machine we are analyzing.
  prefs: []
  type: TYPE_NORMAL
- en: The following script allows us to perform a scan with Nmap asynchronously so
    that the target and port are requested by input parameters. What the script has
    to do is perform a scan in the `MySQL port (3306)` asynchronously and execute
    the Nmap scripts available for the MySQL service.
  prefs: []
  type: TYPE_NORMAL
- en: To test it, we can run it on the virtual machine, **Metasploitable2**, for which
    port `3306` is open, in addition to being able to execute Nmap scripts and obtain
    additional information about the MySQL service that is running on that vm.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can find the following code in the filename: `NmapScannerAsync.py`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'This is the method that checks the port passed as a parameter and launches
    Nmap scripts related with MySQL in an asynchronous way:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'This is our main program for requesting targets and ports as parameters, and
    calling the `nmapScan(ip,port)` function for each port:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Now we are going to execute **NmapScannerAsync** with target and ports parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/51b57cc9-9cee-40c0-be75-1d1b5ac14250.png)'
  prefs: []
  type: TYPE_IMG
- en: Vulnerabilities with Nmap scripts
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section we review scan modes supported in the `python-nmap` module.
    We will learn how to detect the open ports of a system or network segment, as
    well as perform advanced operations to collect information about its target and
    detect vulnerabilities in the FTP service.
  prefs: []
  type: TYPE_NORMAL
- en: Executing Nmap scripts to detect vulnerabilities
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: One of the most interesting features that Nmap has is the ability to execute
    scripts that follow the **Nmap Scripting Engine **(**NSE**) specification. Nmap
    enables you to perform vulnerability assessments and exploitations as well, thanks
    to its powerful Lua script engine. In this way, we can also execute more complex
    routines that allow us to filter information about a specific target.
  prefs: []
  type: TYPE_NORMAL
- en: 'It currently incorporates the use of scripts to check some of the most well-known
    vulnerabilities:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Auth:** executes all your available scripts for authentication'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Default:** executes the basic scripts by default of the tool'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Discovery:** retrieves information from the target or victim'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**External:** script to use external resources'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Intrusive:** uses scripts that are considered intrusive to the victim or
    target'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Malware:** checks if there are connections opened by malicious codes or backdoors'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Safe:** executes scripts that are not intrusive'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Vuln**: discovers the most well-known vulnerabilities'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**All:** executes absolutely all scripts with the NSE extension available'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: To detect possible vulnerabilities in the port services that are open, we can
    make use of the Nmap scripts that are available when the module is installed.
    In the case of **UNIX** machines, the scripts are in the path: `/usr/share/nmap/scripts.`
  prefs: []
  type: TYPE_NORMAL
- en: In the case of **Windows** machines, the scripts are in the path: **C:\Program
    Files (x86)\Nmap\scripts**.
  prefs: []
  type: TYPE_NORMAL
- en: 'The scripts allow the programming of routines to find possible vulnerabilities
    in a given host. The scripts can be found in the URL:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://nmap.org/nsedoc/scripts](https://nmap.org/nsedoc/scripts)'
  prefs: []
  type: TYPE_NORMAL
- en: There are a lot of scripts for each type of service we want to know more about.
    There are even some that allow for dictionary or brute-force attacks and that
    exploit certain vulnerabilities in some of the services and ports that the machines
    expose.
  prefs: []
  type: TYPE_NORMAL
- en: To execute these scripts, it is necessary to pass the **--script option** within
    the `nmap` command.
  prefs: []
  type: TYPE_NORMAL
- en: In this example, we execute Nmap with the script for authentications (`auth`),
    which will check if there are users with empty passwords or the existence of users
    and passwords by default.
  prefs: []
  type: TYPE_NORMAL
- en: 'With this command, it finds users and passwords in the services of MySQL and
    the web server, tomcat:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'In this example, it is shown that **mysql port 3306** allows connection with
    the root account with an empty password. It also shows information collected from
    port `80`, such as the computer name and operating system version (Metasploitable2
    - Linux):'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/90b57a41-d3b0-4a84-8c3e-267f25a4e12d.png)'
  prefs: []
  type: TYPE_IMG
- en: Another of the interesting scripts that Nmap incorporates is **discovery**,
    which allows us to know more information about the services that are running on
    the vm that we are analyzing.
  prefs: []
  type: TYPE_NORMAL
- en: 'With the `discovery` option, we can obtain information about services and routes
    related with the applications that are running on the vm:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/d9b6cec9-5f46-46d0-8c3d-3efff85a14f7.png)'
  prefs: []
  type: TYPE_IMG
- en: Detecting vulnerabilities in FTP service
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'If we run the **ftp-anon script** on our target machine on port `21 `, we can
    know if the FTP service allows authentication anonymously without having to enter
    a username and password. In this case, we see how such authentication is possible
    on the FTP server:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/38c765d5-5135-4478-b027-4ff95611be2d.png)'
  prefs: []
  type: TYPE_IMG
- en: In the following script, we execute the scan asynchronously so that we can execute
    it on a certain port and launch parallel scripts, so that when one of the scripts
    is finalized, the `defined` function is executed. In this case, we execute the
    scripts defined for the FTP service and each time a response is obtained from
    a script, the **`callbackFTP`** function is executed, which will give us more
    information about that service.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can find the following code in the filename: `NmapScannerAsync_FTP.py`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'This is the method that checks the port passed as parameter and launch Nmap
    scripts related with FTP in an asynchronous way:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'This is our main program for requesting target and ports as parameters and
    for calling the `nmapScanAsync(ip,port)` function for each port:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: Now, we are going to execute **NmapScannerAsync_fFTP** with target and ports
    parameters.
  prefs: []
  type: TYPE_NORMAL
- en: In this case, we perform a scan on the FTP port (`21`) and we can see that it
    executes each one of the scripts defined for this port, and it returns us more
    information that we can use for a later attack or exploiting process.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can obtain information about FTP vulnerable services with the execution
    of the previous script:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: '![](assets/134612ea-bb70-4217-a4ef-9127fddd1f81.png)'
  prefs: []
  type: TYPE_IMG
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: One of the objectives of this topic has been to find out about the modules that
    allow a port scanner to be performed on a specific domain or server. One of the
    best tools to perform port scouting in Python is python-nmap, which is a module
    that serves as a wrapper to the `nmap` command. There are alternatives, such as
    Scrapy, that also work quite well for these types of tasks and also allow us to
    look at a level lower into how these types of tools work.
  prefs: []
  type: TYPE_NORMAL
- en: In the next [chapter](0125c9f4-5653-47c1-9097-375f4891a926.xhtml), we will explore
    more about programming packages and Python modules for interacting with the Metasploit
    framework for exploiting vulnerabilities.
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Which method allows us to see the machines that have been targeted for scanning?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What is the way to invoke the `scan` function if we want to perform an asynchronous
    scan and also execute a script at the end of that scan?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Which method can we use to obtain the result of the scan in dictionary format?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What kind of `Nmap` module is used to perform scans asynchronously?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What kind of `Nmap` module is used to perform scans synchronously?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How can we launch a synchronous scan on a given host on a given port if we initialize
    the object with the instruction `self.nmsync = nmap.PortScanner ()`?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Which method can we use to check if a host is up or not in a specific network?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What function is necessary to define when we perform asynchronous scans using
    the `PortScannerAsync()` class ?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Which script do we need to run on port `21` if we need to  know if the FTP service
    allows authentication anonymously without having to enter a username and password?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Which script do we need to run on port `3306` if we need to  know if the MySQL
    service allows authentication anonymously without having to enter a username and
    password?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In these links you will find more information about the previously-mentioned
    tools, as well as official documentation for the Metasploitable virtual machine
    that we have used for the scripts execution.
  prefs: []
  type: TYPE_NORMAL
- en: '[http://xael.org/pages/python-nmap-en.html](http://xael.org/pages/python-nmap-en.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://nmap.org/nsedoc/scripts](https://nmap.org/nsedoc/scripts)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://metasploit.help.rapid7.com/docs/metasploitable-2-exploitability-guide](https://metasploit.help.rapid7.com/docs/metasploitable-2-exploitability-guide)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://information.rapid7.com/download-metasploitable-2017.html](https://information.rapid7.com/download-metasploitable-2017.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://media.blackhat.com/bh-us-10/whitepapers/Vaskovitch/BlackHat-USA-2010-Fyodor-Fifield-NMAP-Scripting-Engine-wp.pdf](https://media.blackhat.com/bh-us-10/whitepapers/Vaskovitch/BlackHat-USA-2010-Fyodor-Fifield-NMAP-Scripting-Engine-wp.pdf)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'SPARTA port scanning: [https://sparta.secforce.com](https://sparta.secforce.com)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: SPARTA is a tool developed in Python that allows port scanning, pen testing,
    and security detecting for services that are opened, and it is integrated with
    the Nmap tool for port scanning. SPARTA will ask you to specify a range of IP
    addresses to scan. Once the scan is complete, SPARTA will identify any machines,
    as well as any open ports or running services.
  prefs: []
  type: TYPE_NORMAL
