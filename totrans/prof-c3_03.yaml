- en: Chapter 3. Mastering of Pseudoelements and Pseudoclasses
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Adding simple interactions on websites using CSS is known since pseudoclasses
    are available. Knowledge about how this feature can be used on websites is very
    important. Pseudoelements can be used in browsers such as Internet Explorer 8/9
    + and can help with some repeatable elements on web pages that were in most cases
    added with empty `spans` and `divs`, for example, graphical details such as arrows
    in buttons, triangles, and so on. With pseudoelements, you can add these elements
    without creating DOM elements.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
- en: Drawing primitives is a very important skill, especially when you link them
    with pseudoelements into which you can add them. Adding triangles or some other
    specific elements can be a very important feature as you don't have to cut these
    graphical elements as a background or `img` element.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
- en: This chapter will master pseudoelements, pseudoclasses, and the drawing of primitives
    in CSS code. Finally, in each section, you can combine these elements into practical
    and reusable code.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
- en: Learn the use of pseudoclasses
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Learn the use of pseudoelements
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Learn how to draw primitives
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Create a lot of reusable mixins in SASS
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Pseudoclasses
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Pseudoclasses are used in CSS to describe elements, behavior after specific
    actions. Actions supported by pseudoclasses are as follows:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
- en: Mouse hover
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Mouse click/touch
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Input focus
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Another use of pseudoclasses is matching elements in a specific container described
    by the order in this container:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
- en: First child, last child
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Any child
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Any child of type
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The most important feature of pseudoclasses you can see on links (`<a>` elements
    with `href` attribute).
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
- en: How can we check :active, :hover state?
  id: totrans-19
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Hover state can be checked whenever you move your mouse pointer over the link.
    The easiest use of this property can be checked with the following code:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
- en: 'HTML:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'SASS:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Generated CSS code:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: With the preceding code, whenever you hover the mouse over the link, the color
    and background of the link will be changed.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
- en: Usage – multilevel menu
  id: totrans-28
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'A multilevel menu is the most use of action of hover state. Drop-down menus
    can be developed with simple HTML and CSS. You can see it on almost every website.
    Understanding how to build it can be the foundation for more complex solutions.
    Let''s build a multilevel navigation and base it on the following:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
- en: 'HTML code:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'SASS code:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Compiled CSS:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'The effect without hover on any element can be seen in the following screenshot:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
- en: '![Usage – multilevel menu](img/00032.jpeg)'
  id: totrans-37
  prefs: []
  type: TYPE_IMG
- en: 'After hovering on the second element:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
- en: '![Usage – multilevel menu](img/00033.jpeg)'
  id: totrans-39
  prefs: []
  type: TYPE_IMG
- en: Usage – CSS hover rows
  id: totrans-40
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In short HTML tables, it''s easy to read all the content. But in cases where
    you have a lot of data (especially on financial websites) allocated in a lot of
    rows and columns, it''s easy to make the table unreadable. There are a few methods
    to simplify the reading process. The easiest way is to add a hover action for
    all rows. Every time you point to a row, it will change the background color.
    Let''s use the following HTML code:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Let''s assume that the count of rows (`tr` elements in `tbody`) is almost infinite.
    This can bring us a really long table. For ease of readability, we can add a hover
    action for each row as follows:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
- en: 'SASS:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Compiled CSS:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Every time you hover over each row, you can see the effect as shown in the
    following screenshot (the gray row is hovered over):'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
- en: '![Usage – CSS hover rows](img/00034.jpeg)'
  id: totrans-49
  prefs: []
  type: TYPE_IMG
- en: Usage of pseudoclasses
  id: totrans-50
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: New pseudoclasses are opening new horizons for CSS/HTML coders. Most of the
    features like `first-child`, `last-child`, and `nth-child`, were added with JavaScript
    code. For example, using jQuery code, you could get a list element and add specific
    classes to the first/last/nth element, and then to properly create a selector,
    you could add a CSS code.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
- en: But when it is natively supported by a browser, it is better to use CSS. Let's
    gather basic knowledge about this feature.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
- en: How to use :first-child, :last-child, :nth-child()
  id: totrans-53
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'A short introduction to these pseudoelements is as follows:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
- en: '`:first-child`: This points to the element that is the first child of its parent'
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`:last-child`: This points to the element that is the last child of its parent'
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`:nth-child()`: This points to the element that matches the pattern wrapped
    in `()`'
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The easiest way to check how it works is to create an unordered list with new
    elements:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Let''s assume that we need to stylize elements of the list. The first style
    we need to add is only related to the first element of the list. The easiest way
    to do that is to add a specific class to this element as follows:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Then add a specific CSS/SASS code for it:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
- en: 'SASS code:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Compiled CSS:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'With usage of new pseudoclasses:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Or:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Compiled to:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'The second style we need to append is to make the blue text color for the last
    element. Easiest way is to change the HTML code:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'And then add a specific CSS/SASS code for it:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Compiled to:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'With the use of new pseudoclasses:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Compiled to:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: In this case, we don't care about the count of the elements in the list. The
    last element of the list will always have the preceding CSS code.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
- en: 'Add a styling for the eighth element as follows:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Compiled:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: In this case, we care about the count elements. The eighth element of the list
    will always have the preceding CSS code.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s assume that we want to make the fifth element orange. The easiest way
    to do that is to change the HTML code:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'And then append the CSS code:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'With pseudoclasses, we can draw SASS like this:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Code in browser:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
- en: '![How to use :first-child, :last-child, :nth-child()](img/00035.jpeg)'
  id: totrans-96
  prefs: []
  type: TYPE_IMG
- en: Usage – styling table
  id: totrans-97
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Practical examples are best for learning. The most repeatable case where we
    can use all properties of pseudoclasses is tables. Let''s get the following HTML
    code:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Let''s make zebra styling for the table; this makes reading a table easier:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Compiled CSS:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'This style will add a gray background to every second element in the table,
    as shown in the following screenshot:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
- en: '![Usage – styling table](img/00036.jpeg)'
  id: totrans-105
  prefs: []
  type: TYPE_IMG
- en: Exploring :nth-child parameters
  id: totrans-106
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'As a parameter of the `:nth-child` based selector, you can use any of the following:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
- en: '**Even**: This will match all even elements'
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Odd**: This will match all odd elements'
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Additionally, you can use an *an+b* parameter, for example:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
- en: '**3n+1**: This will match elements with indexes (counting from 1): 1, 4, 7,
    10,…'
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**–n+5**: This will match elements from 1 to 5'
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**2n+4**: This will match elements: 4, 6, 8, 10, 12, …'
  id: totrans-113
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to use :nth-last-child
  id: totrans-114
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'This pseudoclass works similar to `nth-child`. The difference is that `nth-child`
    is getting the start of its work at the beginning of the list and `nth-last-child`
    is starting at the end of the list:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
- en: '**Even**: This will match all even elements starting at the last element'
  id: totrans-116
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Odd**: This will match all odd elements starting at the last element'
  id: totrans-117
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'You can use an *an+b* parameter, as we used in `nth-child`:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
- en: '**3n+1**: This will match elements with indexes (counting from last element):
    1, 4, 7, 10, …'
  id: totrans-119
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**–n+5**: This will match the last five elements'
  id: totrans-120
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**2n+4**: This will match elements: 4, 6, 8, 10, 12, … (counting from the last
    element)'
  id: totrans-121
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to use :first-of-type, :last-of-type, :nth-of-type, and :nth-last-of-type
  id: totrans-122
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'These pseudoclasses are related to elements in the container in which are gathered
    a few elements. It works similar to the nth-child mechanism. For better understanding,
    let''s begin with the following HTML code:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'SASS code:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'Compiled to CSS:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'Let''s bring some explanation:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
- en: '**.parent span:first-of-type**: This will match the first element in `.parent
    div (<div class="parent">)`, which is `span`'
  id: totrans-130
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**.parent span:last-of-type**: This will match the last element in `.parent`,
    which is `span`'
  id: totrans-131
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**.parent strong:nth-of-type(2)**: This will match the second element, which
    is `strong`'
  id: totrans-132
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**.parent strong:nth-last-of-type(2)**: This will match the second element
    counting from the last element, *which is strong* as shown in the following screenshot:![How
    to use :first-of-type, :last-of-type, :nth-of-type, and :nth-last-of-type](img/00037.jpeg)'
  id: totrans-133
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Empty elements with the :empty pseudoclass
  id: totrans-134
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Sometimes you will need to deal with lists in which you need to treat empty
    elements with one CSS block of code and elements with content with another block
    of code. The easiest way is to add an *empty* class to its elements and you can
    do it without interference in the HTML code. Let''s get the HTML code:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'And SASS code:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'Compiled to CSS:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'This will show us the following view in the browser:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
- en: '![Empty elements with the :empty pseudoclass](img/00038.jpeg)'
  id: totrans-142
  prefs: []
  type: TYPE_IMG
- en: It's easily to analyze the preceding code. All empty elements (which have no
    child) have a black background. All elements with children have a white background
    and black text.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
- en: Supporting forms styling with pseudoclasses
  id: totrans-144
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You can support the validation and simple interaction of forms with CSS code.
    In the following sections, you will see how to use CSS selectors for simple validation
    and simple interactions of inputs. With proper CSS code, you can also check if
    any element is required or disabled. Let's see how this is done.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
- en: Validation with :valid and :invalid
  id: totrans-146
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Earlier validation was done with JavaScript code. With proper CSS code, you
    can do it only with good selectors. Let''s check it with the HTML and CSS code:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
- en: 'HTML code:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  id: totrans-149
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'SASS code:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  id: totrans-151
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'Compiled CSS:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  id: totrans-153
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: In the preceding example, you can check how valid and invalid pseudoclasses
    work. Every time you input e-mail into e-mail string, which is not e-mail address,
    the input will have a red border and the background of the form will change its
    color to light red (`lightcoral`). It's the same in the case of an input with
    number, which needs to be in the range from 5 to 10\. Additionally, to input with
    type text, there is added attribute required. If there is no input, it has an
    `:invalid` pseudoclass.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
- en: Adding input statuses :focus, :checked, :disabled
  id: totrans-155
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Focus pseudoclasses are related to inputs that currently receive focus. Remember
    that this can be done by the user with a mouse pointer and a keyboard with the
    *Tab* key. Pseudoclass checked is related to inputs type checkbox and radio and
    matches the elements which state is changed to checked. To show how it exactly
    works, let''s modify the HTML code we used in the previous section:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
- en: 'HTML code:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  id: totrans-158
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'SASS code:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  id: totrans-160
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'Compiled CSS:'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  id: totrans-162
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: The preceding example adds more interactivity to the form. The first new feature
    is the changing color of the focused element to red and its background/border
    to orange. The second feature is the interaction related to the checkbox. After
    changing its status to checked, it changes the `:before` element (this will be
    better described in the next section). At init, the `:before` element is set to
    `"Not"`. With HTML code gives fully `"Not checked"`. After the checkbox is checked,
    the `before` element is changed to `"Is"` and shows the full string equal to `"Is
    checked"`.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s check how it will look in the browser. The following screenshot appears
    at the start of the page:'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
- en: '![Adding input statuses :focus, :checked, :disabled](img/00039.jpeg)'
  id: totrans-165
  prefs: []
  type: TYPE_IMG
- en: 'The following one will appear when the checkbox is checked:'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
- en: '![Adding input statuses :focus, :checked, :disabled](img/00040.jpeg)'
  id: totrans-167
  prefs: []
  type: TYPE_IMG
- en: 'There is a visible change of the label''s before element, as shown in the following
    screenshot, which also shows the focus of input:'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
- en: '![Adding input statuses :focus, :checked, :disabled](img/00041.jpeg)'
  id: totrans-169
  prefs: []
  type: TYPE_IMG
- en: 'The validated form is as follows:'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
- en: '![Adding input statuses :focus, :checked, :disabled](img/00042.jpeg)'
  id: totrans-171
  prefs: []
  type: TYPE_IMG
- en: Additional aspect – colorize the placeholder
  id: totrans-172
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Yes, of course! You will need to stylize the placeholder. You can do it but
    this property is additionally prefixed:'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
- en: 'For Internet Explorer:'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  id: totrans-175
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'For Firefox:'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  id: totrans-177
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'For WebKit browsers:'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  id: totrans-179
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: Drawing primitives with CSS
  id: totrans-180
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Drawing primitives is the easiest and main case in graphic fundamentals. In
    CSS, it can be used in common cases such as adding details to buttons or any other
    DOM elements. Let's learn the basics of drawing primitives in CSS.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
- en: How to draw a rectangle/square
  id: totrans-182
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The easiest primitive to draw in CSS is a rectangle. Let''s draw a simple rectangle
    using the following code:'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
- en: 'HTML code:'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  id: totrans-185
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'SASS code:'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  id: totrans-187
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'Compiled CSS:'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  id: totrans-189
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: 'This will draw a rectangle in the browser as follows:'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
- en: '![How to draw a rectangle/square](img/00043.jpeg)'
  id: totrans-191
  prefs: []
  type: TYPE_IMG
- en: 'To draw a square, we need to create the following code:'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
- en: 'HTML code:'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  id: totrans-194
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: 'SASS code:'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  id: totrans-196
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: 'Compiled CSS:'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  id: totrans-198
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: 'Reusable mixins for square and rectangle:'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  id: totrans-200
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: How to draw a circle
  id: totrans-201
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Drawing a circle is pretty simple. The method is based on the border radius
    and a simple rectangle, which is shown in the following example:'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
- en: 'HTML code:'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE51]'
  id: totrans-204
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: 'SASS code:'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE52]'
  id: totrans-206
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: 'Compiled CSS:'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE53]'
  id: totrans-208
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: 'In the browser, you will see the following:'
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
- en: '![How to draw a circle](img/00044.jpeg)'
  id: totrans-210
  prefs: []
  type: TYPE_IMG
- en: 'SASS mixin:'
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE54]'
  id: totrans-212
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: How to draw a ring
  id: totrans-213
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Drawing a ring is very similar to drawing a circle. The pattern is the same,
    but with a proper border. Let''s start with the initial ring markup:'
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
- en: 'HTML code:'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE55]'
  id: totrans-216
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: 'SASS code:'
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE56]'
  id: totrans-218
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: 'Compiled CSS:'
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE57]'
  id: totrans-220
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: 'In the browser, you will see the following:'
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
- en: '![How to draw a ring](img/00045.jpeg)'
  id: totrans-222
  prefs: []
  type: TYPE_IMG
- en: 'SASS mixin:'
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE58]'
  id: totrans-224
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: How to draw a triangle with CSS
  id: totrans-225
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Drawing a triangle is based on a trick with borders:'
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
- en: 'HTML code:'
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE59]'
  id: totrans-228
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: The `br` elements are used only for displaying all elements in different lines.
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
- en: 'SASS code:'
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE60]'
  id: totrans-231
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: 'Compiled CSS:'
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE61]'
  id: totrans-233
  prefs: []
  type: TYPE_PRE
  zh: '[PRE61]'
- en: 'In the browser, you will see the following:'
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
- en: '![How to draw a triangle with CSS](img/00046.jpeg)'
  id: totrans-235
  prefs: []
  type: TYPE_IMG
- en: 'SASS mixins:'
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE62]'
  id: totrans-237
  prefs: []
  type: TYPE_PRE
  zh: '[PRE62]'
- en: Pseudoelements
  id: totrans-238
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Using pseudoelements is really important to omit repeatable code elements that
    need specific HTML code. The main purpose of pseudoelements is to reduce DOM elements
    in the HTML code.
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
- en: What is :before and :after?
  id: totrans-240
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '`:before` and `:after` are pseudoelements that you can add to an HTML element.
    An element is added as an inline element into a selected element. To get the foundation
    of `before` and `after` pseudoelements, you can draw the HTML code as follows:'
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE63]'
  id: totrans-242
  prefs: []
  type: TYPE_PRE
  zh: '[PRE63]'
- en: 'And append the SASS code as follows:'
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE64]'
  id: totrans-244
  prefs: []
  type: TYPE_PRE
  zh: '[PRE64]'
- en: 'Compiled CSS:'
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE65]'
  id: totrans-246
  prefs: []
  type: TYPE_PRE
  zh: '[PRE65]'
- en: 'The output of the preceding code is as follows:'
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
- en: '![What is :before and :after?](img/00047.jpeg)'
  id: totrans-248
  prefs: []
  type: TYPE_IMG
- en: Where can we use :before and :after?
  id: totrans-249
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let''s assume a task where we need to apply to every element in a list some
    text at the end of the text. For example, we have a list like the following:'
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE66]'
  id: totrans-251
  prefs: []
  type: TYPE_PRE
  zh: '[PRE66]'
- en: 'We need to add that each one is a frontend developer:'
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE67]'
  id: totrans-253
  prefs: []
  type: TYPE_PRE
  zh: '[PRE67]'
- en: 'Compiled CSS:'
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE68]'
  id: totrans-255
  prefs: []
  type: TYPE_PRE
  zh: '[PRE68]'
- en: 'In the browser, you will see the following:'
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
- en: '![Where can we use :before and :after?](img/00048.jpeg)'
  id: totrans-257
  prefs: []
  type: TYPE_IMG
- en: 'Let''s make our previous code reusable and let''s create a button with an arrow
    at the right. The HTML code will look like the following:'
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE69]'
  id: totrans-259
  prefs: []
  type: TYPE_PRE
  zh: '[PRE69]'
- en: 'Let''s reuse our previously created mixin for triangle creation into the CSS
    code in the last line of the following SASS code:'
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE70]'
  id: totrans-261
  prefs: []
  type: TYPE_PRE
  zh: '[PRE70]'
- en: 'Compiled CSS:'
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE71]'
  id: totrans-263
  prefs: []
  type: TYPE_PRE
  zh: '[PRE71]'
- en: 'It will give us the following result in the browser:'
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
- en: '![Where can we use :before and :after?](img/00049.jpeg)'
  id: totrans-265
  prefs: []
  type: TYPE_IMG
- en: First letter and first line – simple text manipulation
  id: totrans-266
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'On webpages, in some cases, you will need to add a style to the first line
    of the text and the first letter of the text. With CSS, you have to use the proper
    selector to do that. Let''s use the following HTML code:'
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE72]'
  id: totrans-268
  prefs: []
  type: TYPE_PRE
  zh: '[PRE72]'
- en: 'In SASS file:'
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE73]'
  id: totrans-270
  prefs: []
  type: TYPE_PRE
  zh: '[PRE73]'
- en: 'Compiled CSS:'
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE74]'
  id: totrans-272
  prefs: []
  type: TYPE_PRE
  zh: '[PRE74]'
- en: The preceding code will change the color of the first line of the text to pink.
    The first letter will be changed to `orange` color, `bold`, and `20px` size.
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
- en: How to change selection color? Usage of ::selection
  id: totrans-274
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Companies have their own color palette. Sometimes you will need to customize
    the color of selection on the page. This is possible with the `:selection` pseudoelement:'
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
- en: 'SASS code:'
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE75]'
  id: totrans-277
  prefs: []
  type: TYPE_PRE
  zh: '[PRE75]'
- en: 'Compiled CSS:'
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE76]'
  id: totrans-279
  prefs: []
  type: TYPE_PRE
  zh: '[PRE76]'
- en: With the preceding code, every time you select something on the page, the selection
    will change its color to `red` and font color to `white`.
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  id: totrans-281
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you learned the basics of pseudoclasses, pseudoelements, and
    the drawing of primitives in CSS code. As a front end developer, you will use
    these CSS elements very often. Pseudoclasses give you the basic interactivity
    (hover, active) and expand the possibilities of selectors (`:nth-child`, `:first-child`,
    `:last-child`). With pseudoelements, you can expand the possibilities of HTML
    with CSS code (`:before`, `:after`, `:first-letter`, `:first-line`) and you can
    set styles to selection.
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您学习了CSS代码中伪类、伪元素和基本图形的绘制基础。作为前端开发人员，您将经常使用这些CSS元素。伪类为您提供基本的交互性（悬停、激活），并扩展了选择器的可能性（`:nth-child`、`:first-child`、`:last-child`）。通过伪元素，您可以用CSS代码扩展HTML的可能性（`:before`、`:after`、`:first-letter`、`:first-line`），并且可以为选择设置样式。
- en: In the next chapter, you will get basic knowledge about media queries, which
    are the foundation for responsive websites.
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，您将获得有关媒体查询的基本知识，这是响应式网站的基础。
