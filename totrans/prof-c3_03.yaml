- en: Chapter 3. Mastering of Pseudoelements and Pseudoclasses
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Adding simple interactions on websites using CSS is known since pseudoclasses
    are available. Knowledge about how this feature can be used on websites is very
    important. Pseudoelements can be used in browsers such as Internet Explorer 8/9
    + and can help with some repeatable elements on web pages that were in most cases
    added with empty `spans` and `divs`, for example, graphical details such as arrows
    in buttons, triangles, and so on. With pseudoelements, you can add these elements
    without creating DOM elements.
  prefs: []
  type: TYPE_NORMAL
- en: Drawing primitives is a very important skill, especially when you link them
    with pseudoelements into which you can add them. Adding triangles or some other
    specific elements can be a very important feature as you don't have to cut these
    graphical elements as a background or `img` element.
  prefs: []
  type: TYPE_NORMAL
- en: This chapter will master pseudoelements, pseudoclasses, and the drawing of primitives
    in CSS code. Finally, in each section, you can combine these elements into practical
    and reusable code.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will:'
  prefs: []
  type: TYPE_NORMAL
- en: Learn the use of pseudoclasses
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Learn the use of pseudoelements
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Learn how to draw primitives
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Create a lot of reusable mixins in SASS
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Pseudoclasses
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Pseudoclasses are used in CSS to describe elements, behavior after specific
    actions. Actions supported by pseudoclasses are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Mouse hover
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Mouse click/touch
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Input focus
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Another use of pseudoclasses is matching elements in a specific container described
    by the order in this container:'
  prefs: []
  type: TYPE_NORMAL
- en: First child, last child
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Any child
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Any child of type
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The most important feature of pseudoclasses you can see on links (`<a>` elements
    with `href` attribute).
  prefs: []
  type: TYPE_NORMAL
- en: How can we check :active, :hover state?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Hover state can be checked whenever you move your mouse pointer over the link.
    The easiest use of this property can be checked with the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: 'HTML:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'SASS:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Generated CSS code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: With the preceding code, whenever you hover the mouse over the link, the color
    and background of the link will be changed.
  prefs: []
  type: TYPE_NORMAL
- en: Usage – multilevel menu
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'A multilevel menu is the most use of action of hover state. Drop-down menus
    can be developed with simple HTML and CSS. You can see it on almost every website.
    Understanding how to build it can be the foundation for more complex solutions.
    Let''s build a multilevel navigation and base it on the following:'
  prefs: []
  type: TYPE_NORMAL
- en: 'HTML code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'SASS code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Compiled CSS:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'The effect without hover on any element can be seen in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Usage – multilevel menu](img/00032.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'After hovering on the second element:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Usage – multilevel menu](img/00033.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Usage – CSS hover rows
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In short HTML tables, it''s easy to read all the content. But in cases where
    you have a lot of data (especially on financial websites) allocated in a lot of
    rows and columns, it''s easy to make the table unreadable. There are a few methods
    to simplify the reading process. The easiest way is to add a hover action for
    all rows. Every time you point to a row, it will change the background color.
    Let''s use the following HTML code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s assume that the count of rows (`tr` elements in `tbody`) is almost infinite.
    This can bring us a really long table. For ease of readability, we can add a hover
    action for each row as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: 'SASS:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Compiled CSS:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Every time you hover over each row, you can see the effect as shown in the
    following screenshot (the gray row is hovered over):'
  prefs: []
  type: TYPE_NORMAL
- en: '![Usage – CSS hover rows](img/00034.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Usage of pseudoclasses
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: New pseudoclasses are opening new horizons for CSS/HTML coders. Most of the
    features like `first-child`, `last-child`, and `nth-child`, were added with JavaScript
    code. For example, using jQuery code, you could get a list element and add specific
    classes to the first/last/nth element, and then to properly create a selector,
    you could add a CSS code.
  prefs: []
  type: TYPE_NORMAL
- en: But when it is natively supported by a browser, it is better to use CSS. Let's
    gather basic knowledge about this feature.
  prefs: []
  type: TYPE_NORMAL
- en: How to use :first-child, :last-child, :nth-child()
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'A short introduction to these pseudoelements is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`:first-child`: This points to the element that is the first child of its parent'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`:last-child`: This points to the element that is the last child of its parent'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`:nth-child()`: This points to the element that matches the pattern wrapped
    in `()`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The easiest way to check how it works is to create an unordered list with new
    elements:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s assume that we need to stylize elements of the list. The first style
    we need to add is only related to the first element of the list. The easiest way
    to do that is to add a specific class to this element as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Then add a specific CSS/SASS code for it:'
  prefs: []
  type: TYPE_NORMAL
- en: 'SASS code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Compiled CSS:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'With usage of new pseudoclasses:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Or:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'Compiled to:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'The second style we need to append is to make the blue text color for the last
    element. Easiest way is to change the HTML code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'And then add a specific CSS/SASS code for it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'Compiled to:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'With the use of new pseudoclasses:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'Compiled to:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: In this case, we don't care about the count of the elements in the list. The
    last element of the list will always have the preceding CSS code.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add a styling for the eighth element as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'Compiled:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: In this case, we care about the count elements. The eighth element of the list
    will always have the preceding CSS code.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s assume that we want to make the fifth element orange. The easiest way
    to do that is to change the HTML code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'And then append the CSS code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'With pseudoclasses, we can draw SASS like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'Code in browser:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to use :first-child, :last-child, :nth-child()](img/00035.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Usage – styling table
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Practical examples are best for learning. The most repeatable case where we
    can use all properties of pseudoclasses is tables. Let''s get the following HTML
    code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s make zebra styling for the table; this makes reading a table easier:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'Compiled CSS:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'This style will add a gray background to every second element in the table,
    as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Usage – styling table](img/00036.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Exploring :nth-child parameters
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'As a parameter of the `:nth-child` based selector, you can use any of the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Even**: This will match all even elements'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Odd**: This will match all odd elements'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Additionally, you can use an *an+b* parameter, for example:'
  prefs: []
  type: TYPE_NORMAL
- en: '**3n+1**: This will match elements with indexes (counting from 1): 1, 4, 7,
    10,…'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**–n+5**: This will match elements from 1 to 5'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**2n+4**: This will match elements: 4, 6, 8, 10, 12, …'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to use :nth-last-child
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'This pseudoclass works similar to `nth-child`. The difference is that `nth-child`
    is getting the start of its work at the beginning of the list and `nth-last-child`
    is starting at the end of the list:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Even**: This will match all even elements starting at the last element'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Odd**: This will match all odd elements starting at the last element'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'You can use an *an+b* parameter, as we used in `nth-child`:'
  prefs: []
  type: TYPE_NORMAL
- en: '**3n+1**: This will match elements with indexes (counting from last element):
    1, 4, 7, 10, …'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**–n+5**: This will match the last five elements'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**2n+4**: This will match elements: 4, 6, 8, 10, 12, … (counting from the last
    element)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to use :first-of-type, :last-of-type, :nth-of-type, and :nth-last-of-type
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'These pseudoclasses are related to elements in the container in which are gathered
    a few elements. It works similar to the nth-child mechanism. For better understanding,
    let''s begin with the following HTML code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'SASS code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'Compiled to CSS:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s bring some explanation:'
  prefs: []
  type: TYPE_NORMAL
- en: '**.parent span:first-of-type**: This will match the first element in `.parent
    div (<div class="parent">)`, which is `span`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**.parent span:last-of-type**: This will match the last element in `.parent`,
    which is `span`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**.parent strong:nth-of-type(2)**: This will match the second element, which
    is `strong`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**.parent strong:nth-last-of-type(2)**: This will match the second element
    counting from the last element, *which is strong* as shown in the following screenshot:![How
    to use :first-of-type, :last-of-type, :nth-of-type, and :nth-last-of-type](img/00037.jpeg)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Empty elements with the :empty pseudoclass
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Sometimes you will need to deal with lists in which you need to treat empty
    elements with one CSS block of code and elements with content with another block
    of code. The easiest way is to add an *empty* class to its elements and you can
    do it without interference in the HTML code. Let''s get the HTML code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'And SASS code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'Compiled to CSS:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: 'This will show us the following view in the browser:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Empty elements with the :empty pseudoclass](img/00038.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: It's easily to analyze the preceding code. All empty elements (which have no
    child) have a black background. All elements with children have a white background
    and black text.
  prefs: []
  type: TYPE_NORMAL
- en: Supporting forms styling with pseudoclasses
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You can support the validation and simple interaction of forms with CSS code.
    In the following sections, you will see how to use CSS selectors for simple validation
    and simple interactions of inputs. With proper CSS code, you can also check if
    any element is required or disabled. Let's see how this is done.
  prefs: []
  type: TYPE_NORMAL
- en: Validation with :valid and :invalid
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Earlier validation was done with JavaScript code. With proper CSS code, you
    can do it only with good selectors. Let''s check it with the HTML and CSS code:'
  prefs: []
  type: TYPE_NORMAL
- en: 'HTML code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: 'SASS code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: 'Compiled CSS:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding example, you can check how valid and invalid pseudoclasses
    work. Every time you input e-mail into e-mail string, which is not e-mail address,
    the input will have a red border and the background of the form will change its
    color to light red (`lightcoral`). It's the same in the case of an input with
    number, which needs to be in the range from 5 to 10\. Additionally, to input with
    type text, there is added attribute required. If there is no input, it has an
    `:invalid` pseudoclass.
  prefs: []
  type: TYPE_NORMAL
- en: Adding input statuses :focus, :checked, :disabled
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Focus pseudoclasses are related to inputs that currently receive focus. Remember
    that this can be done by the user with a mouse pointer and a keyboard with the
    *Tab* key. Pseudoclass checked is related to inputs type checkbox and radio and
    matches the elements which state is changed to checked. To show how it exactly
    works, let''s modify the HTML code we used in the previous section:'
  prefs: []
  type: TYPE_NORMAL
- en: 'HTML code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: 'SASS code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: 'Compiled CSS:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: The preceding example adds more interactivity to the form. The first new feature
    is the changing color of the focused element to red and its background/border
    to orange. The second feature is the interaction related to the checkbox. After
    changing its status to checked, it changes the `:before` element (this will be
    better described in the next section). At init, the `:before` element is set to
    `"Not"`. With HTML code gives fully `"Not checked"`. After the checkbox is checked,
    the `before` element is changed to `"Is"` and shows the full string equal to `"Is
    checked"`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s check how it will look in the browser. The following screenshot appears
    at the start of the page:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Adding input statuses :focus, :checked, :disabled](img/00039.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'The following one will appear when the checkbox is checked:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Adding input statuses :focus, :checked, :disabled](img/00040.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'There is a visible change of the label''s before element, as shown in the following
    screenshot, which also shows the focus of input:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Adding input statuses :focus, :checked, :disabled](img/00041.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'The validated form is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Adding input statuses :focus, :checked, :disabled](img/00042.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Additional aspect – colorize the placeholder
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Yes, of course! You will need to stylize the placeholder. You can do it but
    this property is additionally prefixed:'
  prefs: []
  type: TYPE_NORMAL
- en: 'For Internet Explorer:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: 'For Firefox:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: 'For WebKit browsers:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: Drawing primitives with CSS
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Drawing primitives is the easiest and main case in graphic fundamentals. In
    CSS, it can be used in common cases such as adding details to buttons or any other
    DOM elements. Let's learn the basics of drawing primitives in CSS.
  prefs: []
  type: TYPE_NORMAL
- en: How to draw a rectangle/square
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The easiest primitive to draw in CSS is a rectangle. Let''s draw a simple rectangle
    using the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: 'HTML code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: 'SASS code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: 'Compiled CSS:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: 'This will draw a rectangle in the browser as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to draw a rectangle/square](img/00043.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'To draw a square, we need to create the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: 'HTML code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: 'SASS code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: 'Compiled CSS:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: 'Reusable mixins for square and rectangle:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: How to draw a circle
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Drawing a circle is pretty simple. The method is based on the border radius
    and a simple rectangle, which is shown in the following example:'
  prefs: []
  type: TYPE_NORMAL
- en: 'HTML code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: 'SASS code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: 'Compiled CSS:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: 'In the browser, you will see the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to draw a circle](img/00044.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'SASS mixin:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: How to draw a ring
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Drawing a ring is very similar to drawing a circle. The pattern is the same,
    but with a proper border. Let''s start with the initial ring markup:'
  prefs: []
  type: TYPE_NORMAL
- en: 'HTML code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: 'SASS code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: 'Compiled CSS:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: 'In the browser, you will see the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to draw a ring](img/00045.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'SASS mixin:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs: []
  type: TYPE_PRE
- en: How to draw a triangle with CSS
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Drawing a triangle is based on a trick with borders:'
  prefs: []
  type: TYPE_NORMAL
- en: 'HTML code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs: []
  type: TYPE_PRE
- en: The `br` elements are used only for displaying all elements in different lines.
  prefs: []
  type: TYPE_NORMAL
- en: 'SASS code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs: []
  type: TYPE_PRE
- en: 'Compiled CSS:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs: []
  type: TYPE_PRE
- en: 'In the browser, you will see the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to draw a triangle with CSS](img/00046.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'SASS mixins:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs: []
  type: TYPE_PRE
- en: Pseudoelements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Using pseudoelements is really important to omit repeatable code elements that
    need specific HTML code. The main purpose of pseudoelements is to reduce DOM elements
    in the HTML code.
  prefs: []
  type: TYPE_NORMAL
- en: What is :before and :after?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '`:before` and `:after` are pseudoelements that you can add to an HTML element.
    An element is added as an inline element into a selected element. To get the foundation
    of `before` and `after` pseudoelements, you can draw the HTML code as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE63]'
  prefs: []
  type: TYPE_PRE
- en: 'And append the SASS code as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE64]'
  prefs: []
  type: TYPE_PRE
- en: 'Compiled CSS:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE65]'
  prefs: []
  type: TYPE_PRE
- en: 'The output of the preceding code is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![What is :before and :after?](img/00047.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Where can we use :before and :after?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let''s assume a task where we need to apply to every element in a list some
    text at the end of the text. For example, we have a list like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE66]'
  prefs: []
  type: TYPE_PRE
- en: 'We need to add that each one is a frontend developer:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE67]'
  prefs: []
  type: TYPE_PRE
- en: 'Compiled CSS:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE68]'
  prefs: []
  type: TYPE_PRE
- en: 'In the browser, you will see the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Where can we use :before and :after?](img/00048.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Let''s make our previous code reusable and let''s create a button with an arrow
    at the right. The HTML code will look like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE69]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s reuse our previously created mixin for triangle creation into the CSS
    code in the last line of the following SASS code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE70]'
  prefs: []
  type: TYPE_PRE
- en: 'Compiled CSS:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE71]'
  prefs: []
  type: TYPE_PRE
- en: 'It will give us the following result in the browser:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Where can we use :before and :after?](img/00049.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: First letter and first line – simple text manipulation
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'On webpages, in some cases, you will need to add a style to the first line
    of the text and the first letter of the text. With CSS, you have to use the proper
    selector to do that. Let''s use the following HTML code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE72]'
  prefs: []
  type: TYPE_PRE
- en: 'In SASS file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE73]'
  prefs: []
  type: TYPE_PRE
- en: 'Compiled CSS:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE74]'
  prefs: []
  type: TYPE_PRE
- en: The preceding code will change the color of the first line of the text to pink.
    The first letter will be changed to `orange` color, `bold`, and `20px` size.
  prefs: []
  type: TYPE_NORMAL
- en: How to change selection color? Usage of ::selection
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Companies have their own color palette. Sometimes you will need to customize
    the color of selection on the page. This is possible with the `:selection` pseudoelement:'
  prefs: []
  type: TYPE_NORMAL
- en: 'SASS code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE75]'
  prefs: []
  type: TYPE_PRE
- en: 'Compiled CSS:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE76]'
  prefs: []
  type: TYPE_PRE
- en: With the preceding code, every time you select something on the page, the selection
    will change its color to `red` and font color to `white`.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you learned the basics of pseudoclasses, pseudoelements, and
    the drawing of primitives in CSS code. As a front end developer, you will use
    these CSS elements very often. Pseudoclasses give you the basic interactivity
    (hover, active) and expand the possibilities of selectors (`:nth-child`, `:first-child`,
    `:last-child`). With pseudoelements, you can expand the possibilities of HTML
    with CSS code (`:before`, `:after`, `:first-letter`, `:first-line`) and you can
    set styles to selection.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, you will get basic knowledge about media queries, which
    are the foundation for responsive websites.
  prefs: []
  type: TYPE_NORMAL
