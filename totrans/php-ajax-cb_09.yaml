- en: Chapter 09. iPhone and Ajax
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover:'
  prefs: []
  type: TYPE_NORMAL
- en: Building a touch version of a website (with jQTouch)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Leveraging HTML5 features in iPhone Ajax
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Building native apps with PhoneGap
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Speeding up a PhoneGap project
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Building a currency conversion hybrid app
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: iPhone was launched in 2007 by Apple Inc. It redefined the smartphone arena
    with its unique design, touch screen, and refreshing user interface. Apart from
    telephonic features and support, it bridged the Internet experience gap prevalent
    in other smartphones. It is loaded with the Safari web browser, an e-mail client,
    and an iPod, for a complete web experience.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following screenshot shows the Home screen of iPhone 4 with the default
    built-in apps:'
  prefs: []
  type: TYPE_NORMAL
- en: '![iPhone and Ajax](graphics/3081_09_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Like a PC, iPhone has some useful utilities called "apps". All the apps can
    be accessed from the Home screen. We have two ways to program apps:'
  prefs: []
  type: TYPE_NORMAL
- en: Native apps
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Web apps
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The interface is consistent with menu bars on top, and also at the bottom, when
    necessary.
  prefs: []
  type: TYPE_NORMAL
- en: Building a touch version of a website (with jQTouch)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A touch site or touch version actually refers to web apps. **Web apps** are
    web pages designed to be best viewed on an iPhone and are programmed in HTML and
    JavaScript. The HTML and JavaScript have a few extensions referred to as Safari
    HTML and Safari JavaScript for getting device-related effects or support. Unlike
    normal web pages, web apps will follow iPhone's consistent user interface and
    touch-friendly layout, such as menu bars, sliding select options, and so on. Sometimes,
    they're also referred to as "web clips". The following image shows `touch.facebook.com`,
    the touch version of Facebook, viewed on an iPhone.
  prefs: []
  type: TYPE_NORMAL
- en: '![Building a touch version of a website (with jQTouch)](graphics/3081_09_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: To create a web app UI/style quickly, there are some frameworks and toolkits
    available, such as, IUI, jQTouch, jQuery Mobile, Sencha Touch, and so on. jQTouch
    and jQuery Mobile are jQuery-based libraries. We'll see how to build a web app/touch
    version using jQTouch.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We'll require Safari web browser to test the web apps. Generally, all web apps
    can be roughly viewed in any graded browsers. We'll also require jQTouch, available
    at [http://jqtouch.com/](http://jqtouch.com/), along with jQuery core.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Development of web apps for iPhone can be divided into:'
  prefs: []
  type: TYPE_NORMAL
- en: Understanding the `meta` and `link` tags that have significance over the interface.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Tuning the interface/navigation/use of elements with appropriate HTML, CSS and
    JavaScript usage. These are usually taken care of by frameworks, such as IUI,
    jQTouch, jQuery Mobile, and so on.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Understanding `meta` and `link` tags
  prefs: []
  type: TYPE_NORMAL
- en: 'When web apps are bookmarked on the Home screen, the following declaration
    helps us to specify which icon is to be used:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Generally, iPhone adds rounded corners, drop shadows, and reflective shine
    to the image. Here is a sample, 57x57 custom icon created with the Packt logo:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](graphics/3081_09_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'When we have a a pre-composed icon already in hand, to avoid double effects,
    we need to rename the `custom_icon.png` as `apple-touch-icon-precomposed.png`,
    in the following manner:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'The default size of the icon is 57x57\. To specify different icons for different
    resolutions, we may use the `sizes` attribute:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'The following screenshot shows the startup or splash image of the native Skype
    app. The startup image will be shown for a few seconds while launching the app.
    Its dimension must be 320x460 and can be specified thus:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '![How to do it...](graphics/3081_09_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'We may also want to hide the Safari browser''s controls to get a native app''s
    look and feel. We will achieve that with the following code that will hide the
    address bar:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'To change the color of the status bar, we may use the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'iPhone''s viewport is adjusted for a 980px width. Therefore, if a webpage/web
    app has 980px width, it will correctly fit in an iPhone. If the page has only
    one table or image with a width of 200px, the image will be skewed to the left
    corner when viewed in iPhone. For this case, we have an option to specify viewport
    width programmatically, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding code will fix the viewport width and the 200px image will be
    viewed in full width. When targeting both the iPhone and the iPad, it would be
    wiser to use the device constant `device-width` to specify width, thus:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'To disable user scaling and to set the viewport, use:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Tune the interface/navigation/use of elements with appropriate HTML, CSS and
    JavaScript usage.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: iPhone web apps have similar UIs—with sliding links to choose options, quick
    navigations in the header, and so on. It is wiser to start with the framework's
    base HTML code. This will help us to quickly insert our elements wherever necessary.
  prefs: []
  type: TYPE_NORMAL
- en: Starting with the framework's base HTML code has another advantage too. It gives
    us hints on how the link is to be placed, how and where the back button has to
    be placed, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let''s look at the following jQTouch HTML 5 code for a discount calculator:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: As mentioned, we have created the code from jQTouch's base HTML code. This lets
    us quickly insert our discount calculator logic and the calculator form interface.
    The `$.jQTouch()` call creates all necessary meta and link elements. Theming is
    done through CSS and image sprites.
  prefs: []
  type: TYPE_NORMAL
- en: 'jQTouch applies effects through class names, as in the following code, for
    example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: A flip effect is beeing applied and a button appearance is given.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We may use online icon generation tools to quickly create app icons. Apple's
    own developer guide is another extensive resource on the topic.
  prefs: []
  type: TYPE_NORMAL
- en: Online iPhone icon generator
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: To create an iPhone icon, we have a third-party website [http://www.flavorstudios.com/iphone-icon-generator](http://www.flavorstudios.com/iphone-icon-generator).
    It helps us to quickly create icons, in case we're not very comfortable with PhotoShop.
  prefs: []
  type: TYPE_NORMAL
- en: Apple provides a free guide available at [http://developer.apple.com/library/safari/documentation/appleapplications/reference/safariwebcontent/Introduction/Introduction.html](http://developer.apple.com/library/safari/documentation/appleapplications/reference/safariwebcontent/Introduction/Introduction.html).
  prefs: []
  type: TYPE_NORMAL
- en: Leveraging HTML5 features in iPhone Ajax
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'HTML5 is the recent revision of the HTML standard that is being adopted by
    modern web browsers. HTML5 got more attention when Apple blocked Flash access
    on the iPhone and pushed HTML5 as the alternative open solution. Notably, in April
    2010, Steve Jobs, co-founder of Apple Inc. attacked Adobe in an open letter "Thoughts
    on Flash" and strongly explained the reason for supporting HTML5 in iPhone and
    iPad. The summary of the open letter is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Flash isn't "open", like advertised
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: H.264 video format is widely supported and that doesn't require Flash
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Flash is prone to security and performance problems
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Software decoding of video affects battery life
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Flash belongs to the old PC era and isn't compatible with touch
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Relying on Adobe as third-party development tool provider will affect the growth
    of Apple's platform
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Hence, HTML5 is natively supported in iPhone and usage is popular on the ecosystem.
    The HTML5 logo, introduced by W3C on January 18, 2011, is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Leveraging HTML5 features in iPhone Ajax](graphics/3081_09_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We'll require an iPhone simulator on Mac. Though not all options are available,
    we may also use a WebKit-based web browser, such as Google Chrome or Safari, for
    preview purposes.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Among other new APIs such as canvas, HTML5''s following features are of particular
    interest for web apps and handheld devices:'
  prefs: []
  type: TYPE_NORMAL
- en: '`audio` element:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In HTML5, the audio playing is part of browser functionality. Prior to that,
    it was a common practice to rely on audio players written in Flash to play .mp3
    files. An example native HTML5 audio usage looks like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: '`video` element'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The video element was considered as a Flash "killer" and gained momentum. Here
    is the HTML5 code to display a YouTube video:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'The attributes can be explained as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`poster` represents the image that has to be shown, to give an idea to the
    user about the video, usually the first non-blank frame image.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`controls` decides if the player will have video controls.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`preload` lets part of the video download, even before the play option is triggered.
    This lets the user have the video play as soon as play is triggered/clicked. The
    downside of this is that video will always get downloaded even when the user isn''t
    willing to play it.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Geolocation API
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Geolocation** is the ability to determine the physical location of the user''s
    browser. In handheld devices, geolocation is possible through GPS, which gives
    the latitude and longitude of the device. For some iPhone apps, the physical location
    might be required to provide necessary features. For example, for an app that
    shows deals around the area, it would be helpful if the user''s location is automatically
    identified, without needing the user to enter an address. The following snippet
    displays the user''s latitude and longitude:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: In real iPhone web apps, the latitude and longitude information can be passed
    to the server script to get localized data.
  prefs: []
  type: TYPE_NORMAL
- en: Offline version
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: One other important factor distinguishing native apps from web apps is the ability
    to load all or part of the UI from iPhones instantly, without needing to have
    any internet connection—so that the user will feel a quick response. The discount
    calculator web app that we've designed in the previous recipe is static in nature—we
    haven't updated any content from the server. Hence, if we make it to work offline,
    we may get the feel of a native app.
  prefs: []
  type: TYPE_NORMAL
- en: 'HTML5 has a cache manifest feature that helps the developers to cache necessary
    files, so that the web app will work even when there''s no network:'
  prefs: []
  type: TYPE_NORMAL
- en: The MIME type of the cache manifest is `text/cache-manifest`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The cache manifest file can take any name but must be specified with the `html`
    element, thus:`<html manifest="/cache.manifest">`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'It''s a plain text file:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The implicit syntax to specify files that are to be cached:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: To specify files that are to be cached, we have implicit and explicit syntaxes.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Using explicit syntax with headers `CACHE, NETWORK` and `FALLBACK:`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: Web storage
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Another nifty feature of HTML5 is the ability to store data on the client machine.
    Unlike cookies, items are not sent to the server in HTTP headers. Web storage
    has two storage areas:'
  prefs: []
  type: TYPE_NORMAL
- en: '`localStorage:` Like a cookie, its scope is for the entire domain and persists
    even when the browser is closed.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`sessionStorage:` Its scope is per page per window and is available only till
    the window is closed. This helps the data to be restricted only for the window,
    which is not possible with cookies and local storage.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'localStorage and sessionStorage have similar syntax to store values; for example,
    the syntax to set, get, and delete the key name to Packt in localStorage is as
    follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'When the key name doesn''t have any space, we can also use this alternative
    syntax:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Accessing session storage has similar syntax, but through the `sessionStorage`
    object.
  prefs: []
  type: TYPE_NORMAL
- en: 'Client-side SQL database:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Accessing client-side databases through JavaScript API with SQL command is
    another useful feature of HTML5\. The new API offers openDatabase, transaction,
    and executeSql methods. Here''s a sample call to make use of these:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Since iPhone natively supports HTML5, it's easy to make use of these features
    when building web apps. The audio and video elements play natively in iPhone without
    any additional requirements of Flash-based players.
  prefs: []
  type: TYPE_NORMAL
- en: Geolocation makes it easy to find the user's location and provide localized
    data for the user. The cache manifest feature enables a web app to be saved on
    the iPhone for offline access. Storing local data on an iPhone is possible with
    `localStorage, sessionStorage`, or a client-side SQL database. These HTML5 features
    help us to build web apps with native-app look and feel.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: When we want to continuously improve the app, a web app may be the preferred
    option, as a native app has to go through Apple's approval process. Gmail and
    Yahoo! Mail make use of HTML5 features for a better app feel on the iPhone.
  prefs: []
  type: TYPE_NORMAL
- en: HTML5 demos
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '[http://html5demos.com/](http://html5demos.com/) offers a quick set of HTML5
    demos. It is helpful to understand browser compatibilities and usage examples.'
  prefs: []
  type: TYPE_NORMAL
- en: Persist JS
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Persist JS a abstraction library that helps data storage on the client browser
    through alternative means, if the browser doesn't support HTML5 features natively.
    It's available at [http://pablotron.org/software/persist-js/](http://pablotron.org/software/persist-js/).
  prefs: []
  type: TYPE_NORMAL
- en: Building native apps with PhoneGap
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Even though we can bring offline access, startup images, client-side data storage,
    and other nifty features to web apps, web apps still can't use device hardware
    features. Accelerometer, sound, vibration, and iPhone's inbuilt geolocation features
    are hardware-oriented and they're available only with native apps. Native iPhone
    apps were usually built with Objective C on Mac machines till PhoneGap. **PhoneGap**
    is an alternative development tool that allows us to build native iPhone apps
    in HTML, CSS, and JavaScript. It acts as a bridge between web applications and
    mobile devices; hence, it allows us to convert our web apps to other mobile targets
    quickly. Apart from the iPhone, it also supports other smartphones like Android
    and BlackBerry. It is a very cost-effective solution as it allows us to reuse
    the same codebase for many purposes—website building, web app building, and native
    app building. Another positive side is that it is open source. In this recipe,
    we'll build a native version of the discount calculator.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Building a native app requires:'
  prefs: []
  type: TYPE_NORMAL
- en: A Mac machine with Xcode installed. Xcode is free for those who have subscribed
    to the iOS developer program. It's available at [http://developer.apple.com/xcode/](http://developer.apple.com/xcode/).
    Xcode 4 consists of Xcode IDE, Instruments, iOS Simulator, and the latest Mac
    OS X and iOS SDKs.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: PhoneGap, which is available through an easy installer from [http://www.phonegap.com/download/](http://www.phonegap.com/download/).
    Note that the ZIP file contains folders for all supporting platforms. When we
    switch to the `iOS` folder, we can find the installer, `PhoneGapInstaller.pkg`.
    It installs PhoneGapLib, the PhoneGap framework and the PhoneGap Xcode templates.
    This makes it easy for us to quickly create PhoneGap projects from Xcode.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A paid subscription for the iOS developer program [http://developer.apple.com/programs/ios/](http://developer.apple.com/programs/ios/)
    to submit our app to the App Store and be able to run it on our iPhone. Without
    iOS developer access, we can only preview apps on a simulator.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Building a native iPhone app with PhoneGap can be divided into the following
    steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Building a web app:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: As we have seen in the first recipe, first we have to build a web app.
  prefs: []
  type: TYPE_NORMAL
- en: 'Creating a PhoneGap project in Xcode 4:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In this step, we have to link our web app with PhoneGap by creating a PhoneGap
    project in Xcode:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](graphics/3081_09_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: When PhoneGapLib is installed, Xcode will be set with the necessary templates.
    Thus, creating a new PhoneGap project is simpler.
  prefs: []
  type: TYPE_NORMAL
- en: Launch Xcode and select **New Project** from the **File** menu.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In the **Choose a template for your new project** window, choose **PhoneGap-based
    Application**, as shown in the preceding screenshot. Note that this will be available
    only when we install `PhoneGapInstaller.pkg`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'In the screen **Choose options for your new project**, enter the following
    product details:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Product Name:**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Company Identifier:**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Entering these will auto-populate **Bundle Identifier** as `com.packt.DiscCalculator`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Choose the project location in the next step.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Run the project to create a `www` folder.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Add a folder reference to `www` in the project.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The last two steps are necessary, due to the bug in Xcode 4 Template.
  prefs: []
  type: TYPE_NORMAL
- en: Nitobi provides free web service to quickly create a PhoneGap project at [https://build.phonegap.com/generate](http://https://build.phonegap.com/generate).
  prefs: []
  type: TYPE_NORMAL
- en: 'These steps will create a default PhoneGap sample project. Essentially, the
    code present in the sample needs some attention:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'Here, we can clearly note that these PhoneGap-specific functions are not available
    in our web app code. So, we have to merge these logics into our web app code.
    The easier options here are:'
  prefs: []
  type: TYPE_NORMAL
- en: Remove `startup.png` and `icon.png` from the `www` folder; startup images and
    icons are found outside of the `www` folder with filenames `Default.png` (320x480),
    `Default-Landscape.png` (1004x768), `Default-Portrait.png` (768x1024), `icon-72.png`
    (72x72) and `icon.png` (57x57). Different resolution files are required when we
    target other devices.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Modify the `head` section of our web app with the relevant PhoneGap code.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Then, replace the entire `www` folder content with it.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Add hardware-specific features.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'So far we haven''t added any hardware-specific features. PhoneGap API allows
    us to access hardware-specific features via the navigator.notification object
    in JavaScript:'
  prefs: []
  type: TYPE_NORMAL
- en: '`navigator.notification.alert(message, alertCallback, [title], [buttonName])`
    allows us to have a native alert window with more features.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`navigator.notification.confirm(message, confirmCallback, [title], [buttonLabels])`
    allows us to have a native confirm dialog with more features.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`navigator.notification.beep(times)` allows us to cause beeps.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`navigator.notification.vibrate(milliseconds)` allows us to make the phone
    vibrate.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Hence, let''s modify the code a little more to have native a beep, vibrate,
    and alert dialog. For the Disc Calculator app, the final code will in the www
    folder will be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'Previewing in iPhone Simulator:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Previewing in an iPhone Simulator is easy with the **Build and Run** option
    in Xcode with the Active Executable chosen. The following screenshot shows our
    **DiscCalculator** project in Xcode:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](graphics/3081_09_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'As shown in the following screenshot, we can choose the **Active Executable**
    from the overview dropdown so that we can execute it in an iPhone Simulator:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](graphics/3081_09_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Finally, we get our app run in iPhone Simulator as shown on the console as
    follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](graphics/3081_09_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Previewing in an iPhone:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In order to preview or submit our app to the App Store, we'd need to create
    Provisioning Profile and that in turn would require paid subscription for the
    iOS developer program. A Provisioning Profile is a collection that ties together
    apps, developers, and devices (iPhone) so that installing it on devices would
    authorize them for testing.
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](graphics/3081_09_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The process is easy with the Provisioning Assistant found in the Provisioning
    Portal of iOS developer webpage:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](graphics/3081_09_11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Though launching Provisioning Assistant as shown in the preceding screenshot
    will guide you through every step, here''s the summary:'
  prefs: []
  type: TYPE_NORMAL
- en: Generate a CSR in the Keychain Access application and upload it to the provisioning
    portal. Then, download the generated certificate and install it in Keychain Access.
    Here, the certification creation should be for "Development".
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Enter **APP ID** (in our case, `com.packt)` details in the provisioning portal
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Add development devices' **UDID** (Unique Device Identifier) in the provisioning
    portal.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Now, development provisioning profile will be ready. Download and drop it in
    the Xcode project. Once the iPhone is connected with the Mac machine, launching
    the app on the device would load the app in an iPhone.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'For finding an iPhone''s UDID, we may:'
  prefs: []
  type: TYPE_NORMAL
- en: Use the UDIDit app at [http://itunes.apple.com/app/udidit/id326123820](http://itunes.apple.com/app/udidit/id326123820)
    on iPhone.
  prefs: []
  type: TYPE_NORMAL
- en: OR
  prefs: []
  type: TYPE_NORMAL
- en: Use iTunes after connecting the iPhone.
  prefs: []
  type: TYPE_NORMAL
- en: 'Submitting to App Store:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: For previewing in iPhone, we have to create a "Development" Provisioning Profile
    (this is also referred as "ad hoc") and for submitting to App Store, we have to
    create a "Distribution" Provisioning Profile. The steps to create a Provisioning
    Profile are similar, but in the certificates option, we have to create it for
    Distribution.
  prefs: []
  type: TYPE_NORMAL
- en: The next step is to submit the app through iTunes Connect at [https://itunesconnect.apple.com/](http://https://itunesconnect.apple.com/)
    For this, we have to add new application in iTunes Connect website and enter the
    necessary details. In the final step, we have to upload the app file binary via
    the Application Loader application that acts as an uploader. Once uploaded and
    submitted, the app will be reviewed by Apple staff. When the app meets their criteria,
    it will be approved.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: PhoneGap is actually a collection of WebView wrappers targeting different platforms.
    So, it displays a web app inside a browser control, giving a native feel. The
    wrappers expose the native code functions to JavaScript API. PhoneGap thus brings
    a native feel and HTML/CSS theming for any app.
  prefs: []
  type: TYPE_NORMAL
- en: Creation of a Provisioning Profile decides authorized devices for ad hoc development
    testing. Through iTunes Connect website, apps are submitted and managed for further
    revisions.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We have learned about PhoneGap on the iOS platform. But, we may have to build
    apps for other platforms.
  prefs: []
  type: TYPE_NORMAL
- en: Getting Started Guide/Help Wizard
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: PhoneGap offers a good starter guide for all platforms at [http://www.phonegap.com/start](http://www.phonegap.com/start).
    By choosing the target platform, we can get step-by-step video tutorials or screen
    walkthroughs.
  prefs: []
  type: TYPE_NORMAL
- en: Speeding up a PhoneGap project
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the last recipes, we have seen how to build a web app with jQTouch and convert
    it into a native app through PhoneGap. In this recipe, we'll see how to reduce
    the steps involved and see an alternative solution for jQTouch.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We'll require access to PhoneGap Build at [https://build.phonegap.com/](http://https://build.phonegap.com/).
    At the time of writing, this feature is in private beta and would require jQuery
    Mobile from [http://jquerymobile.com/](http://jquerymobile.com/) along with jQuery
    core.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To speed up the development, we have to reduce the steps and improve our programming
    approaches:'
  prefs: []
  type: TYPE_NORMAL
- en: 'PhoneGap Build service:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Nitobi, the company that developed PhoneGap has an online build service as shown
    in the following screenshot. This means, we don't need to follow any build steps
    in our machine.
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](graphics/3081_09_12.jpg)'
  prefs: []
  type: TYPE_IMG
- en: It would be enough to upload the source files in HTML/CSS/JavaScript and then
    build over the cloud. The cloud build service lets the source files be built for
    other platforms too, such as Android, Palm, Symbion, and Blackberry. This will
    be a good timesaver as well as a good option for those who're using Windows machines.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'jQuery Mobile:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: jQuery Mobile is a newer framework as compared to jQTouch. It offers similar
    theming and programming ability through HTML, CSS, and JavaScript. It is an official
    jQuery library for mobile development.
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](graphics/3081_09_13.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '**jQTouch** primarily targets WebKit browsers and thus support is good only
    in iPhone. But, if we target more devices, jQTouch may not work smoothly as it''s
    not meant to be cross-platform and cross-device. jQuery Mobile on the other hand
    supports multiple platform and devices. The preceding chart shows jQuery Mobile''s
    support on various platforms.'
  prefs: []
  type: TYPE_NORMAL
- en: As shown, this is a timesaver when we build apps for multiple platform and devices.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As PhoneGap Build service works over the cloud, we don't need to have any development
    environment requirement. It builds apps for multiple devices.
  prefs: []
  type: TYPE_NORMAL
- en: jQuery Mobile targets multiple devices and platforms. This is similar to jQTouch
    in terms of handling theme through CSS and easier JavaScript API. As its major
    focus is in cross-platform and cross-device support, it would save our time in
    porting the app in other devices. The support chart clearly shows the level of
    support that this framework offers on a particular device.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Apart from PhoneGap, there are other native app development tools available:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Rhomobile Rhodes**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Rhomobile Rhodes found at [http://rhomobile.com/](http://rhomobile.com/) is
    another development solution for native apps. Unlike PhoneGap, Rhodes builds a
    true native application. Its language is Ruby. Similar to PhoneGap Build service,
    it offers RhoHub [http://www.rhohub.com/](http://www.rhohub.com/) , browser-based
    build solution. When we know Ruby and want to build a real native app, this would
    be a good solution.
  prefs: []
  type: TYPE_NORMAL
- en: '**Appcelerator Titanium/**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Appcelerator Titanium found at[http://www.appcelerator.com/products/titanium-cross-platform-application-development/](http://www.appcelerator.com/products/titanium-cross-platform-application-development/)
    previously mimicked the native app feel through Web View/browser control. Of late,
    it produces true native code. Unlike Rhodes, it uses JavaScript. When we want
    to develop a true native app with web technologies, this may be a good solution.
  prefs: []
  type: TYPE_NORMAL
- en: Building a currency conversion hybrid app
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The term **hybrid app** loosely means an app built through WebView wrappers
    that displays remote data in it. The web browser component inside the native app
    wrapper is primarily used to display the UI and data that has been fetched in
    JSON format to update the content. PhoneGap is one such technology. And so, native
    app development with PhoneGap along with the ability to update UI from remote
    data can also be referred to as a hybrid app. In this recipe, we'll see how to
    build a currency conversion app.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We''ll require:'
  prefs: []
  type: TYPE_NORMAL
- en: A Mac machine with Xcode installed
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: PhoneGapLib installed in Xcode
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: jQTouch available from [http://jqtouch.com/](http://jqtouch.com/) along with
    jQuery core
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`money.js`, a JavaScript currency conversion library available from [http://josscrowcroft.github.com/money.js/](http://josscrowcroft.github.com/money.js/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Open source Exchange Rates API available at [http://openexchangerates.org/latest.php](http://openexchangerates.org/latest.php)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Open source exchange rates API offers over 120 conversion rates with USD as
    a base currency. Its sister library for currency conversion—money.js can convert
    to different currencies when fed with exchange rates data; note that it's enough
    to have one base currency and converting across other currencies is done through
    mathematic calculation. Say, for example, if we have USD to AUD and USD to INR
    exchange rates, we can easily calculate INR to AUD using `money.js`. Hence, when
    we have `money.js` and that's fed with open source exchange rates data, we can
    have live currency conversion done.
  prefs: []
  type: TYPE_NORMAL
- en: 'With the API and currency conversion library, we can build an app, as shown
    in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](graphics/3081_09_14.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Here is the code from the HTML file that is part of the Xcode PhoneGap project.
    We have only created the HTML file. The rest of the files are derived from the
    PhoneGap Xcode template:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: To compile or preview the app in an iPhone Simulator, refer to the *Building
    native apps with PhoneGap* recipe in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We have used the `money.js` library and open source exchange rates API for
    the conversion process. During the application load, it fetches the exchange data
    in the JSON format in a synchronous manner. We set the `async` flag to `false`
    in the `$.ajax()` method so that the function calls will be serial. The exchange
    data from the API looks like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: The data is fed to the `money.js` library through `fx.rates` when it's loaded,
    otherwise set in the global `fxSetup` variable for the library to use once loaded.
  prefs: []
  type: TYPE_NORMAL
- en: The `fx.rates` object has currency codes in its index; they're iterated through
    the `$.each()` method for populating the source currency dropdown and initial
    exchange rates listing for the value of `1 USD`. Note that for good performance,
    we have reduced access to DOM by populating HTML content first and injecting it
    through a single `html()` call.
  prefs: []
  type: TYPE_NORMAL
- en: 'As per requirement, when either amount or source currency is changed, the whole
    exchange rates listing is to be repainted. It''s achieved by hooking a `change`
    event and using the `fx.convert()` method. `money.js` supports different syntaxes
    including jQuery-like chaining support:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'We have used the following syntax that is easier to iterate and has less overhead
    than chained syntax:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: Note that PhoneGap-based apps were earlier rejected by Apple citing that they're
    just web clips (not completely native).
  prefs: []
  type: TYPE_NORMAL
- en: 'It is advised that the template/view logic done in HTML is always available
    locally and the data is received from server in JSON format. This way, the app
    won''t lose its look/feel even without data. In other words, pulling HTML content
    from the server is not encouraged and such HTML content may cause gaps, leaving
    a broken appearance. When the App Store audit team reviews the app, if the app''s
    design/feel is changed through remote HTML content, the app may be rejected. App
    review is an important process in submission and it''s advisable to check the
    following:'
  prefs: []
  type: TYPE_NORMAL
- en: 'App Store Review Guidelines and Mac App Store Review Guidelines: [http://developer.apple.com/appstore/guidelines.html](http://developer.apple.com/appstore/guidelines.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'App Store Review Guidelines: [https://developer.apple.com/appstore/resources/approval/guidelines.html](http://https://developer.apple.com/appstore/resources/approval/guidelines.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As the apps would usually fetch data from remote server in JSON format, it's
    wise to use a client-side template solution.
  prefs: []
  type: TYPE_NORMAL
- en: Mustache
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Mustache is a popular logic-less templating solution found at [http://mustache.github.com/](http://mustache.github.com/).
    It is available in many programming languages—including JavaScript. Here is some
    sample usage:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding code will give the output: **Alice should pay 12000**.'
  prefs: []
  type: TYPE_NORMAL
- en: drink, jQuery micro template
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'This jQuery micro template library is available at [http://plugins.jquery.com/project/micro_template](http://plugins.jquery.com/project/micro_template).
    It''s based on jQuery author John Resig''s JavaScript Micro-Templating article
    [http://ejohn.org/blog/javascript-micro-templating/](http://ejohn.org/blog/javascript-micro-templating/)
    on developing a lightweight script. This plugin has improved the template selection
    and variables can be plain HTML with template markup; the data is pushed to the
    template. This is an ideal template library for mobile platforms due to its small
    code size. Here''s some sample usage:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
