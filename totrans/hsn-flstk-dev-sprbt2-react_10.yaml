- en: Adding CRUD Functionalities
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter describes how to implement CRUD functionalities to our frontend.
    We are going to use the components that we learned about in [Chapter 8](1b371269-6ec8-4246-9b64-8703e17e9479.xhtml),
    *Useful Third-Party Components for React*. We will fetch data from our backend
    and present the data in a table. Then, we will implement delete, edit, and add
    functionalities. In the final part, we will add features to export data to a CSV
    file.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will look at the following:'
  prefs: []
  type: TYPE_NORMAL
- en: How to fetch data from the backend and present it in the frontend
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to delete, add, and update data using the REST API
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to show toast messages to the user
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to export data to the CSV file from the React app
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Spring Boot application that we created in [Chapter 4](936ad378-25d8-43c4-9e7f-b1cb9bc373cf.xhtml),
    *Securing and Testing Your Backend* is needed with the modification from the previous
    chapter (the unsecured backend).
  prefs: []
  type: TYPE_NORMAL
- en: We also need the React app that we created in the previous chapter (*carfront*).
  prefs: []
  type: TYPE_NORMAL
- en: Creating the list page
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the first phase, we will create the list page to show cars with paging, filtering,
    and sorting features. Run your Spring Boot backend, the cars can be fetched by
    sending the `GET` request to the `http://localhost:8080/api/cars` URL, as shown
    in [Chapter 3](5aefd828-dd47-4314-83d6-d2b3333840d6.xhtml), *Creating a RESTful
    Web Service with Spring Boot*.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s inspect the JSON data from the response. The array of cars can be found
    in the `_embedded.cars` node of the JSON response data:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/27d377c2-2c0b-455c-9b8d-fbef6d11dc77.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now, once we know how to fetch cars from the backend, we are ready to implement
    the list page to show the cars. The following steps describe this in practice:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the *carfront* React app with the VS Code (the React app created in the
    previous chapter).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'When the app has multiple components, it is recommended to create a folder
    for them. Create a new folder, called `components`, in the `src` folder. With
    the VS Code, you can create a folder by right-clicking the folder in the sidebar
    file explorer and selecting New Folder from the menu:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/4220c9db-f9b3-4913-85ad-4e4be3c236c8.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Create a new file, called `Carlist.js`, in the `components` folder and now
    your project structure should look like the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/e8c93710-5edb-4ec9-9382-b511dfa8eebd.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Open the `Carlist.js` file in the editor view and write the base code of the
    component, shown as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'We need a state for the `cars` that are fetched from the REST API, therefore,
    we have to add the constructor and define one array-type state value:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Execute `fetch` in the `componentDidMount()` life cycle method. The cars from
    the JSON response data will be saved to the state, called `cars`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Use the map function to transform `car` objects into table rows in the `render()`
    method and add the table element:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, if you start the React app with the `npm start` command, you should see
    the following list page:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/d7177ba7-c83d-4e98-8b66-166f71de7a2c.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The URL server can repeat multiple times when we create more CRUD functionalities,
    and it will change when the backend is deployed to a server other than the localhost.
    Therefore, it is better to define it as a constant. Then, when the URL value changes,
    we have to modify it only in one place. Let''s create a new file, called `constants.js`,
    in the root folder of our app. Open the file in the editor and add the following
    line into the file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, we will import it to our `Carlist.js` file and use it in the `fetch`
    method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, your `Carlist.js` file source code should look like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Now we will use React Table to get the paging, filtering, and sorting features
    out of the box. Stop the development server by pressing *Ctrl* + *C* in the terminal,
    and type the following command to install React Table. After the installation,
    restart the app:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Import `react-table` and the style sheet to your `Carlist.js` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Then remove `table` and `tableRows` from the `render()` method. The `data`
    prop of React Table is `this.state.cars`, which contains fetched cars. We also
    have to define the `columns` of the table, where `accessor` is the field of the
    `car` object and `header` is the text of the header. To enable filtering, we set
    the `filterable` prop of the table to `true`. See the source code of the following
    `render()` method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'With the React Table component, we acquired all the necessary features to our
    table with a small amount of coding. Now the list page looks like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/5927d0cc-a2d0-4d90-8dda-f203e09642bd.png)'
  prefs: []
  type: TYPE_IMG
- en: The delete functionality
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Items can be deleted from the database by sending the `DELETE` method request
    to the `http://localhost:8080/api/cars/[carid]` endpoint. If we look at the JSON
    response data, we can see that each car contains a link to itself and it can be
    accessed from the `_links.self.href` node, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/aef91708-ffd8-47d3-823e-4dbd5f442a13.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The following steps show how to implement delete functionality:'
  prefs: []
  type: TYPE_NORMAL
- en: 'We will create a button for each row in the table and the accessor of the button
    will be `_links.self.href`, which we can use to call the delete function that
    we will create soon. But first, add a new column to the table using `Cell` to
    render the button. See the following source code. We don''t want to enable sorting
    and filtering for the button column, therefore these props are set to be `false`.
    The button invokes the `onDelClick` function when pressed and sends a link to
    the car as an argument:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Implement the `onDelClick` function. But first, let''s take the `fetchCars`
    function out from the `componentDidMount()` method. That is needed because we
    want to call the `fetchCars` function also after the car has been deleted to show
    an updated list of the cars to the user. Create a new function, called `fetchCars()`,
    and copy the code from the `componentDidMount()` method into a new function. Then
    call the `fetchCars()` function from the `componentDidMount()` function to fetch
    cars initially:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Implement the `onDelClick` function. We send the `DELETE` request to a car
    link, and when the delete succeeds, we refresh the list page by calling the `fetchCars()`
    function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'When you start your app, the frontend should look like the following screenshot,
    and the car disappears from the list when the Delete button is pressed:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/51abe6e2-ba35-493e-8bcf-17b84d6affc1.png)'
  prefs: []
  type: TYPE_IMG
- en: 'It would be nice to show the user some feedback upon successful deletion or
    if there are any errors. Let''s implement a toast message to show the status of
    deletion. For that, we are going to use the `react-toastify` component ([https://github.com/fkhadra/react-toastify](https://github.com/fkhadra/react-toastify)).
    Install the component by typing the following command into the terminal you are
    using:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'After the installation is complete, start your app and open the `Carlist.js`
    file in the editor. We have to import `ToastContainer`, `toast`, and the style
    sheet to start using `react-toastify`. Add the following import statements to
    your `Carlist.js` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: '`ToastContainer` is the container component for showing toast messages, and
    it should be inside the `render()` method. In `ToastContainer`, you can define
    the duration of the toast message in milliseconds using the `autoClose` prop.
    Add the `ToastContainer` component inside the return statement in the `render()`
    method, just after `ReactTable`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, we will call the toast method in the `onDelClick()` function to show
    the toast message. You can define the type and position of the message. The success
    message is shown when deletion succeeds, and the error message is shown in the
    case of an error:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'Now you will see the toast message when the car has been deleted, as shown
    in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/b87b9982-af5f-4dd7-a391-1e57928865c1.png)'
  prefs: []
  type: TYPE_IMG
- en: 'To avoid accidental deletion of the car, it would be nice to have a confirmation
    dialog after the delete button has been pressed. We will implement this using
    the `react-confirm-alert` component ([https://github.com/GA-MO/react-confirm-alert](https://github.com/GA-MO/react-confirm-alert)).
    If your app is running, stop the development server by pressing *Ctrl* + *C* in
    the terminal and type the following command to install `react-confirm-alert`.
    After installation, restart the app:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'Import `confirmAlert` and the CSS file to the `Carlist` component:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a new function, called `confirmDelete`, that opens the confirmation
    dialog. If the Yes button of the dialog is pressed, the `onDelClick` function
    is called and the car will be deleted:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, change the function in the Delete button''s `onClick` event to `confirmDelete`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'If you now press the Delete button, the confirmation dialog will be opened
    and the car will be deleted only if you press the Yes button:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/bd642b3c-6dea-4b0e-9036-33c540bf8ca2.png)'
  prefs: []
  type: TYPE_IMG
- en: The add functionality
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The next step is to create an add functionality for the frontend. We will implement
    that using the React Skylight modal component. We already went through the usage
    of React Skylight in [Chapter 8](1b371269-6ec8-4246-9b64-8703e17e9479.xhtml),
    *Useful Third-Party React Components for React*. We will add the New Car button
    to the user interface, which opens the modal form when it is pressed. The modal
    form contains all the fields that are required to save the car as well as the
    button for saving and canceling.
  prefs: []
  type: TYPE_NORMAL
- en: 'Stop the development server by pressing *Ctrl* + *C* in the terminal, and type
    the following command to install React Skylight. After installation, restart the
    app:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'The following steps show how to create add functionality using the modal form
    component:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a new file, called `AddCar.js`, in the `components` folder and write
    a component-class base code to the file, as shown here. Add the import for the
    `react-skylight` component:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'Introduce a state that contains all car fields:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'Add a form inside the `render()` method. The form contains the `ReactSkylight`
    modal form component with buttons and the input fields that are needed to collect
    the car data. The button that opens the modal window, and will be shown in the
    carlist page, must be outside `ReactSkylight`. All input fields should have the
    `name` attribute with a value that is the same as the name of the state the value
    will be saved to. Input fields also have the `onChange` handler, which saves the
    value to state by invoking the `handleChange` function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'Insert the `AddCar` component to the `Carlist` component to see whether that
    form can be opened. Open the `Carlist.js` file to editor view and import the `AddCar`
    component:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'Implement the `addCar` function to the `Carlist.js` file that will send the
    `POST` request to the backend `api/cars` endpoint. The request will include the
    new `car` object inside the body and the `''Content-Type'': ''application/json''`
    header. The header is needed because the `car` object is converted to JSON format
    using the `JSON.stringify()` method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'Add the `AddCar` component to the `render()` method and pass the `addCar` and
    `fetchCars` functions as props to the `AddCar` component that allows us to call
    these functions from the `AddCar` component. Now the return statement of the `CarList.js`
    file should look like the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'If you start the frontend app, it should now look like the following, and if
    you press the New Car button, it should open the modal form:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/7eb5802d-b483-43b6-adc5-a62f49c003d1.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Implement the `handleSubmit` and `cancelSubmit` functions to the `AddCar.js`
    file. The `handleSubmit` function creates a new `car` object and calls the `addCar`
    function, which can be accessed using props. The `cancelSubmit` function just
    closes the modal form:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, you can open the modal form by pressing the New Car button. Then you can
    fill the form with data, and press the Save button. So far, the form does not
    look nice, but we are going to style it in the next chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/316305a5-dd82-412d-99e8-991957c8b459.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The list page is refreshed, and the new car can be seen in the list:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/cfea3c1b-a3a4-42c1-b8d2-14f9c89889aa.png)'
  prefs: []
  type: TYPE_IMG
- en: The edit functionality
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We will implement the edit functionality by changing the table to editable
    and adding the save button to each row. The save button will invoke the function
    that sends the `PUT` request to the backend for saving the changes to the database:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the cell renderer, which changes the table cells to editable. Open the
    `Carlist.js` file and create a new function called `renderEditable`. See the source
    code for the following function. The cell will be the `div` element and the `contentEditable`
    attribute makes it editable. `suppressContentEditableWarning` suppresses the warning
    that comes when the element with the child is marked to be editable. The function
    in `onBlur` is executed when the user leaves the table cell, and this is where
    we will update the state:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'Define the table columns that are going to be editable. This is done using
    the `Cell` attribute of the column in React Table, which defines how the cell
    of the column will be rendered:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, if you open the app in your browser, you can see that the table cells
    are editable:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/a540c56d-dfc3-4c54-bc82-4e80f5f45246.png)'
  prefs: []
  type: TYPE_IMG
- en: 'To update car data, we have to send the `PUT` request to the `http://localhost:8080/api/cars/[carid]`
    URL. The link will be the same as with the delete functionality. The request contains
    the updated `car` object inside the body, and the `''Content-Type'': ''application/json''`
    header that we had in the add functionality. Create a new function, called `updateCar`,
    and the source code of the function is shown in the following code snippet. The
    function gets two arguments, the updated `car` object and the request URL. After
    the successful update, we will show a toast message to the user:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'Add the Save button to the table rows. When the user presses the button, it
    calls the `updateCar` function and passes two arguments. The first argument is
    `row`, which is all values in the row as an `object (=car object)`. The second
    argument is `value`, which is set to be `_links.href.self`, which will be the
    URL of the car that we need in the request:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'If you now edit the values in the table and press the `Save` button, you should
    see the toast message and the updated values are saved to the database:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/f3fd10be-4fa4-4e48-a9bd-f23e909a5933.png)'
  prefs: []
  type: TYPE_IMG
- en: Other functionalities
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: One feature that we will also implement is a CSV export of the data. There is
    package, called `react-csv` ([https://github.com/abdennour/react-csv](https://github.com/abdennour/react-csv)),
    that can be used to export an array of data to the CSV file.
  prefs: []
  type: TYPE_NORMAL
- en: 'If your app is started, stop the development server by pressing *Ctrl* + *C*
    in the terminal, and type the following command to install `react-csv`. After
    installation, restart the app:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'The `react-csv` package contains two components—`CSVLink` and `CSVDownload`.
    We will use the first one in our app, so add the following import to the `Carlist.js`
    file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: 'The `CSVLink` component takes the `data` prop, which contains the data array
    that will be exported to the CSV file. You can also define the data separator
    using the `separator` prop (the default separator is a comma). Add the `CSVLink`
    component inside the `return` statement in the `render()` method. The value of
    the `data` prop will now be `this.state.cars`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: 'Open the app in your browser and you should see the Export CSV link in our
    app. The styling is not nice, but we will handle that in the next chapter. If
    you press the link, you will get the data in the CSV file:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/ad3ffe91-b9e5-4b5d-b7d3-6634a2ecce7c.png)'
  prefs: []
  type: TYPE_IMG
- en: Now all the functionalities have been implemented.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we implemented all the functionalities for our app. We started
    with fetching the cars from the backend and showing these in React Table, which
    provides paging, sorting, and filtering features. Then we implemented the delete
    functionality and used the toast component to give feedback to the user. The add
    functionality was implemented using the React Skylight modal-form component. In
    the edit functionality, we utilized the React Table feature that makes tables
    editable. Finally, we implemented the ability to export data to a CSV file. In
    the next chapter, we will start to polish our user interface using the Material
    UI component library. In the next chapter, we are styling our frontend using React
    Material-UI component library.
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: How should you fetch and present data using the REST API with React?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How should you delete data using the REST API with React?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How should you add data using the REST API with React?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How should you update data using the REST API with React?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How should you show toast messages with React?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How should you export data to a CSV file with React?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Packt has other great resources for learning about React:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://www.packtpub.com/web-development/getting-started-react](https://www.packtpub.com/web-development/getting-started-react)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://www.packtpub.com/web-development/react-16-essentials-second-edition](https://www.packtpub.com/web-development/react-16-essentials-second-edition)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
