- en: '*Chapter 23*: Supporting Different Versions of Android, Sound Effects, and
    Spinner Widget'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we will learn how we can detect and handle different versions
    of Android. We will then be able to study the `SoundPool` class and the different
    ways we use it depending on the Android version of the device the app is running
    on. At this point, we can then put everything we have learned into producing a
    cool sound demo app, which will also introduce us to a new UI widget, **Spinner**.
  prefs: []
  type: TYPE_NORMAL
- en: 'In summary, in this chapter we will cover the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Learning how to handle different versions of Android
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Learning how to use the Android `SoundPool` class
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Coding a sound-based app also using the `SpinnerView` widget
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let's get started.
  prefs: []
  type: TYPE_NORMAL
- en: Handling different versions of Android
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Most of the time throughout this book, we haven't paid any attention to supporting
    older Android devices, the main reason being that all the up-to-date parts of
    the API we have been using work on such a high percentage of devices (in excess
    of 99%) that it has not seemed worthwhile. Unless you intend on carving out a
    niche in apps for ancient Android relics, this seems like a sensible approach.
    Regarding playing sounds, however, there have been some relatively recent modifications
    to the Android API.
  prefs: []
  type: TYPE_NORMAL
- en: Actually, this isn't immediately a big deal because devices newer than this
    can still use the old parts of the API. But it is good practice to specifically
    handle these differences in compatibility, because eventually, one day, the older
    parts might not work on newer versions of Android.
  prefs: []
  type: TYPE_NORMAL
- en: The main reason for discussing this here and now is that the slight differences
    in pre- and post-Android Lollipop sound handling give us a good excuse to see
    how we can deal with things like this in our code.
  prefs: []
  type: TYPE_NORMAL
- en: We will see how we can make our app compatible with the very latest devices
    and pre-Lollipop devices as well.
  prefs: []
  type: TYPE_NORMAL
- en: The class we will be using to make some noise is the `SoundPool` class. First,
    let's look at some simple code for detecting the current Android version.
  prefs: []
  type: TYPE_NORMAL
- en: Detecting the current Android version
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We can determine the current version of Android using the static variables
    of the `Build.Version` class and we can determine whether it is newer than a specific
    version by comparing it to that version''s appropriate `Build.VERSION_CODES` variable.
    If that explanation was a bit of a mouthful, just look at how we determine whether
    the current version is equal to or newer (greater) than Lollipop:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Now let's see how to make some noise with Android devices newer, and then older,
    than Lollipop.
  prefs: []
  type: TYPE_NORMAL
- en: The SoundPool class
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `SoundPool` class allows us to hold and manipulate a collection of sound
    effects â€“ literally, a pool of sounds. The class handles everything from decompressing
    a sound file such as a `.wav` or a `.ogg` to keeping an identifying reference
    to it via an integer ID, and, of course, playing the sound. When the sound is
    played, it is done so in a non-blocking manner (using a thread behind the scenes)
    that does not interfere with the smooth running of our app or our users' interaction
    with it.
  prefs: []
  type: TYPE_NORMAL
- en: The first thing we need to do is add the sound effects to a folder called `assets`
    in the `main` folder of the game project. We will do this for real shortly.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, in our Java code, declare an object of the `SoundPool` type and an `int`
    to use as an ID for each sound effect we intend to use. We also declare another
    `int` called `nowPlaying`, which we can use to track which sound is currently
    playing, and we will see how we do this shortly:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Now we will look at the two different ways we initialize a `SoundPool` depending
    upon the version of Android the device is using. This is the perfect opportunity
    to use our method of writing different code for different versions of Android.
  prefs: []
  type: TYPE_NORMAL
- en: Initializing SoundPool the new way
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The new way involves us using an `AudioAttributes` object to set the attributes
    of the pool of sound we want.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the first block of code we use chaining and call four separate methods on
    one object that initialize our `AudioAttributes` object (`audioAttributes`):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: In the code, we use chaining and the `Builder` method of this class to initialize
    an `AudioAttributes` object to let it know that it will be used for UI interaction
    with `USAGE_ASSISTANCE_SONIFICATION`.
  prefs: []
  type: TYPE_NORMAL
- en: We also use the `CONTENT_TYPE_SONIFICATION` value, which lets the class know
    it is for responsive sounds, for example, a user button click, a collision, or
    similar.
  prefs: []
  type: TYPE_NORMAL
- en: Now we can initialize the `SoundPool` (`sp`) itself by passing in the `AudioAttributes`
    object (`audioAttributes`) and the maximum number of simultaneous sounds we are
    likely to want to play.
  prefs: []
  type: TYPE_NORMAL
- en: The second block of code chains another four methods to initialize `sp`, including
    a call to `setAudioAttributes` that uses the `audioAttributes` object that we
    initialized in the earlier block of chained methods.
  prefs: []
  type: TYPE_NORMAL
- en: Now we can write an `else` block of code that will, of course, have the code
    for the old way of doing things.
  prefs: []
  type: TYPE_NORMAL
- en: Initializing SoundPool the old way
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'No need for an `AudioAttributes` object; simply initialize the `SoundPool`
    (`sp`) by passing in the number of simultaneous sounds. The final parameter is
    for sound quality and passing `0` is all we need to do. This is much simpler than
    the new way but also less flexible regarding the choices we can make:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: We could use the old way and the newer versions of Android would handle it.
    However, we'd get a warning about using deprecated methods. That is what the official
    documentation says about it.
  prefs: []
  type: TYPE_NORMAL
- en: Furthermore, the new way gives access to more features, as we saw. And anyway,
    it's a good excuse to look at some simple code to handle different versions of
    Android.
  prefs: []
  type: TYPE_NORMAL
- en: Now we can go ahead and load up (decompress) the sound files into our `SoundPool`.
  prefs: []
  type: TYPE_NORMAL
- en: Loading sound files into memory
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: As with our thread control, we are required to wrap our code in `try`-`catch`
    blocks. This makes sense because reading a file can fail for reasons beyond our
    control, but also we are forced to because the method that we use throws an exception
    and the code we write will not compile otherwise.
  prefs: []
  type: TYPE_NORMAL
- en: Inside the `try` block, we declare and initialize an object of the `AssetManager`
    and `AssetFileDescriptor` types.
  prefs: []
  type: TYPE_NORMAL
- en: The `AssetFileDescriptor` instance is initialized by using the `openFd` method
    of the `AssetManager` object, which actually decompresses the sound file. We then
    initialize our ID (`idFX1`) at the same time as we load the contents of `AssetFileDescriptor`
    into our `SoundPool`.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `catch` block just outputs a message to the console to let us know if something
    has gone wrong. Note that this code is the same regardless of the Android version:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: We are ready to make some noise.
  prefs: []
  type: TYPE_NORMAL
- en: Playing a sound
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: At this point, there is a sound effect in our `SoundPool` instance and we have
    an ID by which we can refer to it.
  prefs: []
  type: TYPE_NORMAL
- en: This code is the same regardless of how we built the `SoundPool` object and
    this is how we play the sound. Notice in the next line of code that we initialize
    the `nowPlaying` variable with the return value from the same method that plays
    the sound.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following code, therefore, simultaneously plays a sound and loads the value
    of the ID that is being played into `nowPlaying`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: It is not necessary to store the ID in `nowPlaying` to play a sound, but it
    has its uses as we will now see.
  prefs: []
  type: TYPE_NORMAL
- en: 'The parameters of the `play` method are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: The ID of the sound effect
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The left speaker volume and the right speaker volume
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The priority over other sounds
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The number of times to repeat the sound
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The rate/speed it is played (1 is the normal rate)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Just one more thing before we make the sound demo app.
  prefs: []
  type: TYPE_NORMAL
- en: Stopping a sound
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'It is also very trivial to stop a sound while it is still playing with the
    `stop` method. Note that there might be more than one sound effect playing at
    any given time, so the `stop` method needs the ID of the sound effect to stop:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'When you call `play`, you only need to store the ID of the currently playing
    sound if you want to track it so you can interact with it at a later time. As
    we will see soon, the code to play a sound in the Pong game will look more like
    this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: The previous line of code would simply play the chosen sound (`mBeepID`) at
    full volume, with the lowest priority, until it ends with no repeats at the normal
    speed.
  prefs: []
  type: TYPE_NORMAL
- en: Now we can make the sound demo app.
  prefs: []
  type: TYPE_NORMAL
- en: Sound demo app introducing the Spinner widget
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Of course, with all this talk of sound effects, we need some actual sound files.
    You can make your own with Bfxr (explained next) or use the ones supplied. The
    sound effects for this app are in the download bundle in the `assets` folder of
    the [*Chapter 23*](B16773_23_ePub_RK.xhtml#_idTextAnchor400)`/Sound Demo` folder.
    But you might like to make your own.
  prefs: []
  type: TYPE_NORMAL
- en: Making sound effects
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: There is an open source app called Bfxr that allows us to make our own sound
    effects. Here is a very fast guide to making your own sound effects using Bfxr.
    Grab a free copy from [www.bfxr.net](http://www.bfxr.net).
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: Note that the sound effects for the sound demo app are supplied to you in the
    [*Chapter 23*](B16773_23_ePub_RK.xhtml#_idTextAnchor400)`/assets` folder. You
    don't have to create your own sound effects unless you want to. It is still worth
    getting this free software and learning how to use it.
  prefs: []
  type: TYPE_NORMAL
- en: 'Follow the simple instructions on the website to set it up. Try out a few of
    these things to make cool sound effects:'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: This is a seriously condensed tutorial. You can do so much more with Bfxr. To
    learn more, read the tips on the website at the previous URL. If you have any
    trouble downloading Bfxr, you can use the website to create all your sound effects
    or just use the examples provided.
  prefs: []
  type: TYPE_NORMAL
- en: Run Bfxr:![Figure 23.1 â€“ Bfxr page
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_23.01_B16773.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 23.1 â€“ Bfxr page
  prefs: []
  type: TYPE_NORMAL
- en: Try out all the preset types that generate a random sound of that type. When
    you have a sound that is close to what you want, move on to the next step:![Figure
    23.2 â€“ Different effects
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_23.02_B16773.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 23.2 â€“ Different effects
  prefs: []
  type: TYPE_NORMAL
- en: Use the sliders to fine-tune the pitch, duration, and other aspects of your
    new sound:![Figure 23.3 â€“ Fine-tune your sound
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_23.03_B16773.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 23.3 â€“ Fine-tune your sound
  prefs: []
  type: TYPE_NORMAL
- en: Save your sound by clicking the `.wav` too:![Figure 23.4 â€“ The Export Wav button
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_23.04_B16773.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 23.4 â€“ The Export Wav button
  prefs: []
  type: TYPE_NORMAL
- en: Android works very well with sounds in the OGG format, so when asked to name
    your file, use the `.ogg` extension at the end of the filename.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Repeat *steps 2* to *5* to create three cool sound effects. Name them `fx1.ogg`,
    `fx2.ogg`, and `fx3.ogg`. We use the `.ogg` file format as it is more compressed
    than formats such as WAV.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once you have your sound files ready, we can proceed with the app.
  prefs: []
  type: TYPE_NORMAL
- en: Laying out the sound demo
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: I will describe the parts of the project we are getting used to a little more
    concisely than in previous projects. Every time there is a new concept, however,
    I will be sure to explain it in full. I guess by now you will be fine with dragging
    a few widgets onto a `ConstraintLayout` and changing their `text` properties.
  prefs: []
  type: TYPE_NORMAL
- en: 'Complete the following steps. If you have any problems at all, you can copy
    or view the code in the [*Chapter 23*](B16773_23_ePub_RK.xhtml#_idTextAnchor400)
    folder of the download bundle:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a new project, call it `Sound Demo`, choose the `TextView` from the `activity_main.xml`
    file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now we will build a layout in the `activity_main.xml` file, so be sure to be
    in design view. In this order, from top to bottom then left to right, drag a `text`
    properties as shown in the next screenshot:![](img/Figure_23.05_B16773.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Figure 23.5 â€“ Building a layout in the activity_main.xml file
  prefs: []
  type: TYPE_NORMAL
- en: Click the **Infer Constraints** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Use the following table to set their properties:![](img/Table_23.1.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Next, add the following highlighted code to the `strings.xml` file in the `values`
    folder. We used this array of string resources that is named `spinner_options`
    for the `options` property in the previous step. It will represent the options
    that can be chosen from our `Spinner` widget:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the app now and you will not initially see anything that we haven''t seen
    before. If you click on the spinner, however, you will see the options from our
    string array called `spinner_options`. We can use the spinner to control the number
    of times a sound effect repeats when played:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 23.6 â€“ spinner_options'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_23.06_B16773.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 23.6 â€“ spinner_options
  prefs: []
  type: TYPE_NORMAL
- en: Let's write the Java code to make this app work, including how we interact with
    our spinner.
  prefs: []
  type: TYPE_NORMAL
- en: Using your operating system's file browser, go to the `app\src\main` folder
    of the project and add a new folder called `assets`.
  prefs: []
  type: TYPE_NORMAL
- en: There are three sound files ready-made for you in the [*Chapter 23*](B16773_23_ePub_RK.xhtml#_idTextAnchor400)`/assets`
    folder of the download bundle. Place these three files into the assets directory
    you just created or use the ones you created yourself. The important thing is
    that their filenames are `fx1.ogg`, `fx2.ogg`, and `fx3.ogg`.
  prefs: []
  type: TYPE_NORMAL
- en: Coding the sound demo
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'First, we will change the class declaration so we can handle interaction with
    all our widgets efficiently. Edit the declaration to implement `View.OnClickListener`
    as highlighted next:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: We will add the required `onClick` method shortly.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, we add some member variables for our `SoundPool`, sound effect IDs, `nowPlaying
    int` as previously discussed, and we will also add a `float` to hold a value for
    volume between `0` (silent) and `1` (full volume relative to the current volume
    of the device). We''ll also add an `int` called `repeats` that unsurprisingly
    holds the value of the number of times we will repeat a given sound effect:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, in the `onCreate` method, we can get a reference and set a click listener
    for our buttons in the usual way. Add the following code to the project:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Still in `onCreate`, we can initialize our `SoundPool` (`sp`) based on the
    version of Android that the device is using. Add the following code to the project:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following `import` statements for the previous code using your preferred
    method:'
  prefs: []
  type: TYPE_NORMAL
- en: '`import android.media.AudioAttributes;`'
  prefs: []
  type: TYPE_NORMAL
- en: '`import android.media.AudioManager;`'
  prefs: []
  type: TYPE_NORMAL
- en: '`import android.media.SoundPool;`'
  prefs: []
  type: TYPE_NORMAL
- en: '`import android.os.Build;`'
  prefs: []
  type: TYPE_NORMAL
- en: '`import android.view.View;`'
  prefs: []
  type: TYPE_NORMAL
- en: '`import android.widget.Button;`'
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, we load each of our sound effects in turn and initialize our IDs with
    a value that points to the related sound effect that we load into the `SoundPool`.
    The whole thing is wrapped in a `try`-`catch` block as required. Add the following
    code to the project:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following `import` statements for the previous code using your preferred
    method:'
  prefs: []
  type: TYPE_NORMAL
- en: '`import android.content.res.AssetFileDescriptor;`'
  prefs: []
  type: TYPE_NORMAL
- en: '`import android.content.res.AssetManager;`'
  prefs: []
  type: TYPE_NORMAL
- en: '`import android.util.Log;`'
  prefs: []
  type: TYPE_NORMAL
- en: '`import java.io.IOException;`'
  prefs: []
  type: TYPE_NORMAL
- en: Then we see how we are going to handle the `SeekBar` widget. As you probably
    have come to expect, we will use an anonymous class. We use the `OnSeekBarChangeListener`
    class and override the `onProgressChanged`, `onStartTrackingTouch`, and `onStopTrackingTouch`
    methods.
  prefs: []
  type: TYPE_NORMAL
- en: 'We only need to add code to the `onProgressChanged` method. Within this method,
    we simply change the value of our volume variable and then use the `setVolume`
    method on our `SoundPool` object, passing in the currently playing sound effect
    and the volume of the left and right channels of sound. Add the following code
    to the project:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following `import` statement for the previous code using your preferred
    method:'
  prefs: []
  type: TYPE_NORMAL
- en: '`import android.widget.SeekBar;`'
  prefs: []
  type: TYPE_NORMAL
- en: After the `SeekBar` code comes the `Spinner` code and another anonymous class
    to handle user interaction. We use `AdapterView.OnItemSelectedListener` to override
    the `onItemSelected` and `onNothingSelected` methods.
  prefs: []
  type: TYPE_NORMAL
- en: 'All our code goes in the `onItemSelected` method, which creates a temporary
    string named `temp` and then uses the `Integer.ValueOf` method to convert the
    string into an `int`, which we can use to initialize the `repeats` variable. Add
    the following code to the project:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following `import` statements for the previous code using your preferred
    method:'
  prefs: []
  type: TYPE_NORMAL
- en: '`import android.widget.AdapterView;`'
  prefs: []
  type: TYPE_NORMAL
- en: '`import android.widget.Spinner;`'
  prefs: []
  type: TYPE_NORMAL
- en: That's everything from `onCreate`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now implement the `onClick` method, which is required because this class implements
    the `View.OnClickListener` interface. Quite simply, there is a `case` statement
    for each button. There is a `case` statement to play each of our three sound effects,
    set the volume, and set the number of times to repeat. Notice that the return
    value for each call to `play` is stored in `nowPlaying`. When the user presses
    the `stop` with the current value of `nowPlaying`, causing the most recently started
    sound effect to stop. Add the following code to the project:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: We can now run the app. Make sure the volume on your device is turned up if
    you can't hear anything.
  prefs: []
  type: TYPE_NORMAL
- en: Click the appropriate button for the sound effect you want to play. Change the
    volume and the number of times it is repeated and, of course, try stopping it
    with the **STOP** button.
  prefs: []
  type: TYPE_NORMAL
- en: Also note you can repeatedly tap multiple play buttons when a sound effect is
    already playing, and the sounds will be played simultaneously up to the maximum
    number of streams (`5`) that we set.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we looked closely at the `SoundPool` class, including how we
    can detect which version of Android the user has and vary our code accordingly.
    Then, we used all this knowledge to complete the sound demo app.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will learn how to make our apps work with multiple different
    layouts.
  prefs: []
  type: TYPE_NORMAL
