- en: Building and Deploying a Full Web Application
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that we have seen both the server-side and the client-side code for JavaScript,
    we need to focus on another matter entirely; that is, building our code for deployment
    and deploying that code to a server.
  prefs: []
  type: TYPE_NORMAL
- en: While we have run our servers locally, we have never actually run them in a
    remote environment such as Amazon's AWS or Microsoft's Azure. Deploying today
    is not like it used to be 5 years ago. Before, we could move our application onto
    a server through the **File Transfer Protocol** (**FTP**). Now, even for small
    applications, we use a system of Continuous Deployment.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will explore the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Understanding Rollup
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Integrating into CircleCI
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: These topics will allow us to develop almost any application and get it deployed
    in a typical development environment. By the end of this chapter, we will be able
    to implement a typical build-and-deploy environment for a web application.
  prefs: []
  type: TYPE_NORMAL
- en: Let's get started.
  prefs: []
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'For this chapter, you''ll need the following:'
  prefs: []
  type: TYPE_NORMAL
- en: A machine that can run Node.js
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A text editor or IDE, preferably VS Code
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A web browser
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A user account for GitHub
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This chapter's code, which can be found at [https://github.com/PacktPublishing/Hands-On-High-Performance-Web-Development-with-JavaScript/tree/master/Chapter12](https://github.com/PacktPublishing/Hands-On-High-Performance-Web-Development-with-JavaScript/tree/master/Chapter12).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Understanding Rollup
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: RollupJS is a build tool that allows us to prepare our applications in different
    ways, depending on the environment. There have been many tools before it (Grunt,
    Gulp), many that are competing with it (Webpack, Parcel), and many that will be
    built in the future. We will focus on RollupJS for our specific use case (getting
    our static server application built in [Chapter 9](59d1466a-ef4d-42f8-bc88-f3d364c3d23e.xhtml),
    *Practical Example – Building a Static Server*), but just note that most build
    tools are similar in terms of their architecture.
  prefs: []
  type: TYPE_NORMAL
- en: 'What RollupJS gives us is a way to have *hooks* into different parts of the
    build life cycle. Most applications have the following states during a build process:'
  prefs: []
  type: TYPE_NORMAL
- en: Build start
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Dependency injection
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Compilation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Post compilation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Build end
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Each of these states may go by different names in different build systems, and
    some may even have more than just these (as we will see, RollupJS does), but this
    is the typical build system.
  prefs: []
  type: TYPE_NORMAL
- en: 'In most cases, we will need to do the following things for our JavaScript applications:'
  prefs: []
  type: TYPE_NORMAL
- en: Bring in any dependencies that our Node/browser side needs
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Compile our JavaScript to a single file (if targeting HTTP/1) or compile it
    to an earlier version (if we are targeting wider browser support)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Compile CSS to a single file, move images around, and so on
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'In the case of our application, we will make this quite easy. Here, we will
    learn how to do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Build our Node.js code into a single distributable
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Prepare our static assets, such as CSS/images
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Add Rollup to our npm build process
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Building our static server into a single distributable
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To start off, we will need to create a folder that we''re ready to work with.
    To do this, either work in the folder that we worked in [Chapter 9](59d1466a-ef4d-42f8-bc88-f3d364c3d23e.xhtml),
    *Practical Example – Building a Static Server*, or pull down the code from this
    book''s GitHub repository. With this, run the `npm install -g rollup` command.
    This will put the rollup system into our global path so that we can utilize the
    command line if we want to by running the `rollup` command. Next, we are going
    to create a configuration file. To do this, we will add a `rollup.config.js` file
    to the base of our directory (the exact same location as our `package.json` file)
    and add the following code to it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: We have told Rollup that the starting point of our application is in the `main.js`
    file. Rollup will follow this starting point and run through it to see what it
    depends on. Whatever it depends on, it will try to put it into a single file and
    remove any unwanted dependencies along the way (this is called tree-shaking).
    Once it's done, it will put the file in `dist/build.js`.
  prefs: []
  type: TYPE_NORMAL
- en: 'If we try to run this, we will run into a problem. Here, we are utilizing private
    variables for classes, and Rollup does not support this, along with other features
    of ESNext that we are utilizing. We will also need to change anywhere that had
    member variables set outside of a function. This means we will need to change
    `cache.js` to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: We will also need to replace all of the constructors in `template.js`, just
    like we did with `LRUCache`.
  prefs: []
  type: TYPE_NORMAL
- en: 'After making the preceding changes, we should see that `rollup` is happy with
    us and is now compiling. If we go into the `dist/build.js` file, we will see that
    it put all of the files together. Let''s go ahead and put another option in our
    configuration file. Follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Run the following command to add the minifier and code uglifier plugin to Rollup
    as a dev dependency:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'With this installed, add the following lines to our `config.js` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Now, if we take a look at our `dist/build.js` file, we will see a file that
    is barely noticeable. This is all we need for the Rollup configuration for our
    application, but there are many more configuration options and plugins that can
    help with the compilation process. Next, we will take a look at some options that
    can help us put our CSS files into a smaller format, and also look at what would
    happen if we used Sass and how we could compile that with Rollup.
  prefs: []
  type: TYPE_NORMAL
- en: Adding other file types to our distribution
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Currently, we are only bundling up our JavaScript files, but most application
    developers know that any frontend work also needs to be bundled up. Take Sass
    ([https://sass-lang.com/](https://sass-lang.com/)), for example. It allows us
    to write CSS in a way that allows maximum reusability.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s go ahead and turn the CSS that we had for this project into a Sass file.
    Follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a new folder called `stylesheets` and add `main.scss` to it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following code to our Sass file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'The previous code showcases two features of Sass that make it easier to use:'
  prefs: []
  type: TYPE_NORMAL
- en: It allows us to nest styling. Instead of having to have a separate `footer`
    and `h2` section, we can just nest them.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It allows the use of variables (yes, we have them in CSS).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: With HTTP/2, some standards for bundling files have gone by the wayside. Items
    such as sprite sheets are no longer advisable since the HTTP/2 standard added
    the concept of TCP multiplexing. It can actually be faster to download multiple
    smaller files than one large file. For those of you who are interested, the following
    link explains these concepts in more detail: [https://css-tricks.com/musings-on-http2-and-bundling/](https://css-tricks.com/musings-on-http2-and-bundling/).
  prefs: []
  type: TYPE_NORMAL
- en: There is quite a bit more to Sass that what can be found on their website, such
    as mixins, but here, we want to focus on converting these files into the CSS that
    we know we can use on the frontend.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, we need to convert this into CSS and put it in our original folder. To
    do that, we will add `rollup-plugin-sass` to our configuration. We can do that
    by running `npm install -D rollup-plugin-sass`. With that added, we will add a
    new rollup configuration called `rollup.sass.config.js` and add the following
    code to it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Once we have made our rollup file, we will need to create the `main-sass.js`
    file that we have currently. Let''s go ahead and do just that. Add the following
    code to that file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, let''s run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: By doing this, we will see that the `css` directory inside of our template folder
    has been populated. By doing this, we can see how we can bundle everything up,
    not just our JavaScript files. Now that we've integrated Rollup's build system
    into our development pipeline, we will take a look at integrating Rollup into
    NPM's build pipeline.
  prefs: []
  type: TYPE_NORMAL
- en: Bringing rollup into Node.js commands
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now, we could just leave everything alone and run our rollup commands through
    the command line, but this may make things a bit harder when we bring continuous
    integration into our process (up next). Also, we may have other developers working
    on the same system and instead of having them run multiple commands, they can
    run a single `npm` command. Instead, we want to integrate rollup into various
    Node.js scripts.
  prefs: []
  type: TYPE_NORMAL
- en: We looked at this in [Chapter 9](59d1466a-ef4d-42f8-bc88-f3d364c3d23e.xhtml), *Practical
    Example – Building a Static Server*, with the `microserve` package and the `start`
    command. But now, we want to integrate two new commands called `build` and `watch`.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we want the `build` command to run our rollup configurations. Follow
    these steps to make this happen:'
  prefs: []
  type: TYPE_NORMAL
- en: Let's clean up our main directory and move our rollup configurations to a build
    directory.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'With both of those moved, we will add the following line to our `package.json`
    file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: With this move, we can run `npm run build` and see everything built for us in
    a single command.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Second, we want to add a watch command. This will allow rollup to watch for
    changes and instantly run that script for us. We can easily add this into our
    `package.json` by adding the following line to our `scripts` section:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Now, if we type `npm run watch`, it will start rollup in watch mode. With that,
    as we make changes to our JavaScript files, we can see that rollup is automatically
    rebuilding our distribution file.
  prefs: []
  type: TYPE_NORMAL
- en: 'One final change that we need to make before we move onto continuous integration
    is to point our main entry point to our distribution file. To do this, we will
    change the start section in the `package.json` file so that it points to `dist/build.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'With that, let''s go ahead and check to make sure that everything is still
    working correctly by running `npm run start`. We will see that some of our files
    aren''t pointing to the correct location. Let''s go ahead and fix this by making
    some changes to the `package.json` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: With this, we should be good to go! There are plenty of options with Rollup
    and there are even more when we want to integrate into the Node script system,
    but this should get us ready for the next section of this chapter, which is integrating
    into a CI/CD pipeline. Our system of choice is CircleCI.
  prefs: []
  type: TYPE_NORMAL
- en: Integrating into CircleCI
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As we mentioned previously, development in the real world has dramatically shifted
    in the past couple of decades. From building everything locally and deploying
    from our development machines to complicated orchestration and dependency deployment
    trees, we have seen a rise in tools that help us rapidly develop and deploy.
  prefs: []
  type: TYPE_NORMAL
- en: One example of this is the CI/CD tools that we have available to us, such as
    Jenkins, Travis, Bamboo, and CircleCI. These tools pick up on various hooks, such
    as pushing code to a remote repository and instantly running a *build*. We will
    be utilizing CircleCI as our tool of choice. It is easy to set up and an easy-to-use
    development tool that has a nice free tier for developers.
  prefs: []
  type: TYPE_NORMAL
- en: 'In our case, this build is going to be doing the following three things:'
  prefs: []
  type: TYPE_NORMAL
- en: Pulling in all of our project dependencies
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Running our Node.js build script
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Deploying those resources to our server, where we will be running the application
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Getting all of this set up can be quite a frustrating experience, but it is
    well worth the payoff once our application is hooked up. We will be utilizing
    the following technologies to help us with this process:'
  prefs: []
  type: TYPE_NORMAL
- en: CircleCI
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: GitHub
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: With this in mind, our first step will be to go to GitHub and create a profile,
    if we haven't done so already. This is as simple as going to [https://github.com/](https://github.com/)
    and looking toward the top-right corner for the signup option. Once we have done
    this, we can start creating/forking repositories.
  prefs: []
  type: TYPE_NORMAL
- en: Since all of the code for this book is on GitHub, most of you should already
    have a GitHub account and know the basics of utilizing Git.
  prefs: []
  type: TYPE_NORMAL
- en: 'For those of you who are struggling with Git or haven''t utilized a version
    control system, the following resource may help: [https://try.github.io/](https://try.github.io/).'
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, we need to fork the repository that all of the code is in into our own
    repository. To do this, run through the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Go to this book's GitHub repository at [https://github.com/PacktPublishing/Hands-On-High-Performance-Web-Development-with-JavaScript](https://github.com/PacktPublishing/Hands-On-High-Performance-Web-Development-with-JavaScript)
    and click the top-right option to fork the entire repository.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If we do not want to do that, we can clone the repository to our local computer.
    (This may be the better option since we only want the contents of the `Chapter12`
    directory.)
  prefs: []
  type: TYPE_NORMAL
- en: Whichever of the two options we choose, go ahead and move the `Chapter12` directory
    into another location on our local computer and change the folder name to something
    like `microserve`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Go back into GitHub and create a new repository. Make this a private repository.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Finally, go back to our local machine and remove the `.git` file that is already
    there with the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'For those of you who are on Windows, you can run these commands if you have
    the Windows 10 Linux subsystem. Alternatively, you can download the Cmder tool:
    [https://cmder.net/](https://cmder.net/).'
  prefs: []
  type: TYPE_NORMAL
- en: 'Run the following commands to hook the local system up to the remote GitHub
    repository:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: The command line will ask for some credentials. Use the ones that we set up
    our profile with.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Our local files should be hooked into GitHub. Now all we need to do is set up
    this system with CircleCI. To do this, we will need to create an account on CircleCI's
    website.
  prefs: []
  type: TYPE_NORMAL
- en: Go to [https://circleci.com/](https://circleci.com/) and click on Sign Up and
    then Sign up with GitHub.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Once our account is hooked up, we can log in. We should see the following screen:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/16773d81-f2e9-4221-98b0-5371f74af673.png)'
  prefs: []
  type: TYPE_IMG
- en: Click Set Up Project for the repository we just set up.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'It should detect that we have a CircleCI file already in our repository, but
    we can always start from scratch if we want to. The directions that follow are
    going to be for setting CircleCI up from scratch. To do this, we can utilize the
    Node.js template that they have. However, the main thing we will need to do is
    create the `.circleci` directory and the `config.yml` file in that directory.
    We should have something basic that looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'The CircleCI configuration file executes in the following way:'
  prefs: []
  type: TYPE_NORMAL
- en: We state that we want to utilize the `circleci/node:12.13` image from Docker
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'We won''t be discussing Docker here, but it is yet another technology that
    many companies use to deploy and host applications. More information on this technology
    can be found here: [https://docs.docker.com/](https://docs.docker.com/).'
  prefs: []
  type: TYPE_NORMAL
- en: We want to run all of our commands in `~/repo`. This will be the case for almost
    all the basic projects we create.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, we check the repository into that `~/repo`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, we need to set up a cache for this repository, if we don't have one already.
    This will make sure that we only pull down the repository when we need to.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We need to run the `npm install` command to pull in all of our dependencies.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Finally, we save the cache.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: This process is known as continuous integration because it will constantly run
    builds for us when we push code. We can add different settings inside our CircleCI
    profile if we want, but that is beyond the scope of this book. We will also get
    notifications via email when a build is complete. We can tune this if we want
    at the following location: [https://circleci.com/gh/organizations/<your_user>/settings](https://circleci.com/gh/organizations/%3cyour_user%3e/settings).
  prefs: []
  type: TYPE_NORMAL
- en: With this, we have created a basic CircleCI file! Now, if we go to our dashboard,
    it should run a build once we push this CircleCI configuration. It should also
    show all the steps that we laid out previously. This is great! Now, let's hook
    in our build process so that we can actually do something with our CI system.
  prefs: []
  type: TYPE_NORMAL
- en: Adding our build steps
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'With our CircleCI configuration, we can add many steps to the process and even
    add things called orbs. Orbs are essentially predefined packages and commands
    that can enhance our build process. In this section, we will be adding an orb
    that was published by Snyk: [https://snyk.io/](https://snyk.io/). This scans and
    looks for bad packages that are currently in the npm ecosystem. We will add this
    after we have set up our build.'
  prefs: []
  type: TYPE_NORMAL
- en: 'To get our build running and packaged into something that we can deploy, we
    will add the following to our CircleCI configuration:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'With this, we will have our system building just as if we were running locally.
    Let''s go ahead and try it out. Follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Add our configuration file to our `git` commit:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'Commit this to our local repository:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'Push this to our GitHub repository:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: As soon as we do that, CircleCI will start up a build. If we go to the project
    directory in CircleCI, we will see it building. If we click on the job, we will
    see it running all of our steps – we will even see it running through the steps
    we laid out in our file. Here, we will see our build failed!
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/92977eda-b298-4d1d-a1a0-1e23093d7fb9.png)'
  prefs: []
  type: TYPE_IMG
- en: 'This has happened because when we installed Rollup, we installed it as a global
    item. In this case, we need to add it as a dev dependency in our `package.json` file.
    If we add it to our `package.json` file, we should have a `devDependency` section
    that looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: Now, if we commit and push these files to our GitHub repository, we will see
    that our build passes!
  prefs: []
  type: TYPE_NORMAL
- en: 'With a passing build, we should add the Snyk orb to our configuration. If we
    head to [https://circleci.com/orbs/registry/orb/snyk/snyk](https://circleci.com/orbs/registry/orb/snyk/snyk),
    we will see all of the commands and the configuration that we need to set up.
    Let''s go ahead and change our `config.yml` file in order to bring the Snyk orb
    in. We will check our repository after we have built it. This should look like
    this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: With the preceding configuration, we can go ahead and commit/push to our GitHub
    repository and see the new run of our build. It should fail because it will not
    allow us to run third-party orbs unless we explicitly state that we want to run
    them. We can do this by heading to our settings and going to the Security section.
    Once there, go ahead and state that we want to use third-party orbs. With this
    checked, we can do another build and we will see that we fail again!
  prefs: []
  type: TYPE_NORMAL
- en: We will need to sign up with Snyk to use their orb. Go ahead and head to snyk.io
    and sign up with a GitHub account. Then, go to the Account settings section. From
    there, grab the API token and head to the Settings and contexts section.
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a new context and add the following environment variable:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'To utilize contexts, we will need to change up our `config.yml` file a bit.
    We will need to add in a workflows section and tell it to run our build job with
    that context. The file should look something like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: With that change, we can go ahead and push it to the remote repository. We will
    see that the build passes with Snyk security scanning our packages!
  prefs: []
  type: TYPE_NORMAL
- en: The idea of contexts is to hide API keys and secrets from the configuration
    file. We don't want to put those in our configuration files since anyone would
    be able to see them. Instead, we put them in something such as a context, where
    the administrators of a project will be able to see them. Every CI/CD system should
    have a concept like this, and this should be used whenever there are items like
    this.
  prefs: []
  type: TYPE_NORMAL
- en: With our project building and being scanned, all we need to do is deploy our
    application to a machine!
  prefs: []
  type: TYPE_NORMAL
- en: Deploying our build
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To deploy our application, we will need to deploy to our own computers. There
    are many services out there, such as AWS, Azure, Netlify, and so on, which will
    have their own ways of deploying. In our case, we are going to deploy out to Heroku.
  prefs: []
  type: TYPE_NORMAL
- en: 'Follow these steps to do so:'
  prefs: []
  type: TYPE_NORMAL
- en: We will need to get a Heroku account if we don't have one already. Head over
    to [https://id.heroku.com/login](https://id.heroku.com/login) and choose Sign
    Up at the bottom of the form.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Log in to the new account and click on the top-right button that states New.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the dropdown, click Create new app.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We can call the app anything we want. Type in an application name.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Head back to our CircleCI dashboard and go back into the settings. Create a
    new context called deploy.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add a new variable called `HEROKU_APP_NAME`. This is the app name that we set
    up in *step 3*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Head back to Heroku and click on the user profile icon in the top right. From
    the dropdown, click on Account Settings.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You should see a section called API Key. Click the Reveal button and copy the
    key shown.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Head back to our CircleCI dashboard and create a new variable called `HEROKU_API_KEY`.
    The value should be the key we got in *step 8*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add a new job to our `config.yml` file. Our job should look something like
    the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: What we've done here is add a new job to our workflow, which is the `deploy`
    job. Here, the first step is to add the official Heroku orb to our workflow. Next,
    we created a job called `deploy` and we went through the steps set out by the
    Heroku orb. These can be found at [https://circleci.com/orbs/registry/orb/circleci/heroku](https://circleci.com/orbs/registry/orb/circleci/heroku).
  prefs: []
  type: TYPE_NORMAL
- en: We need to deploy our build back to GitHub for Heroku to pick up the changes.
    To do this, we need to create a deploy key. Run the `ssh-keygen -m PEM -t rsa
    -C "<your_email>"` command in the command prompt. Make sure that you don't enter
    a password.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Copy the key that was just generated and head into the GitHub repository's Settings.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on Deploy Keys in the left navbar.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click Add a deploy key.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add a title and then paste the key that we copied in *step 12*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Check the box that states Allow write access.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Head back into CircleCI and click on the project settings in the left-hand navbar.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on SSH Permissions and then Add SSH Key.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add the private key we created in *step 11*. Make sure to add `github.com` in
    the Hostname section.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'With this added, add the following lines to the `config.yml` file for our build
    job:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'At the end of our build, add the following step:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: One issue that we will have is that our application wants to work over HTTPS,
    but Heroku requires a pro license for this. Either opt in for this (this is a
    paid service) or change our application so that it only works with HTTP.
  prefs: []
  type: TYPE_NORMAL
- en: By doing this, we have successfully set up a CI/CD pipeline that can be utilized
    almost anywhere. We also added an additional security check to make sure that
    we are deploying safe code. With all of this under our belt, we are able to build
    and deploy web applications written in JavaScript!
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we learned how applications can be built while utilizing build
    environments such as RollupJS. On top of this, we looked at how to add CI and
    CD through CircleCI.
  prefs: []
  type: TYPE_NORMAL
- en: The next chapter, and the final chapter of this book, will take a look at an
    advanced concept called WebAssembly. While the code will not be JavaScript, it
    will help us understand how we can take our web applications to the next level.
  prefs: []
  type: TYPE_NORMAL
