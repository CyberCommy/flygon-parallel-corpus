- en: Chapter 6. Modeling Users
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Believe it or not, we've already done quite a bit to make our interactions with
    CouchDB a simple process. In this chapter, we'll get right into the meat of CouchDB
    and start to model our user documents.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'To be more specific we will:'
  prefs: []
  type: TYPE_NORMAL
- en: Install Bootstrap, a toolkit from Twitter that will handle the heavy lifting
    of CSS, forms, buttons, and more
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Take a close look at how CouchDB stores user documents by default and how we
    can add fields to them
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Add basic functionality for users so they can sign up, log in, and log out of
    our application
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Learn how to handle exceptions and errors
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This is going to be our most rewarding chapter yet; you'll love offloading some
    of the standard authentication and security to CouchDB. Buckle up. It's going
    to be a fun ride!
  prefs: []
  type: TYPE_NORMAL
- en: Before we get started
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We've played around with a lot of files to test Bones and Sag, but you'll notice
    that our application is still looking pretty barren. So, let's spruce up the design
    a bit. Since designing and implementing UIs isn't the purpose of this book, we'll
    use a toolkit called **Bootstrap** to do the heavy lifting for us. Bootstrap ([http://twitter.github.com/bootstrap/](http://twitter.github.com/bootstrap/))
    was created by Twitter to kickstart the development of web applications and sites.
    It will allow us to breeze past front-end development without too much work. Let's
    get Bootstrap up and running and then do some housekeeping on our layout.
  prefs: []
  type: TYPE_NORMAL
- en: Cleaning up our interface by installing Bootstrap
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Setting up Bootstrap is incredibly easy. We could reference the CSS on their
    remote servers, but we'll download and call the CSS locally since it's best practice
    to reduce the amount of external calls.
  prefs: []
  type: TYPE_NORMAL
- en: Time for action — installing Bootstrap locally
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Installing Bootstrap is a breeze; we'll cover the basics of getting it installed
    in this section.
  prefs: []
  type: TYPE_NORMAL
- en: Open your browser, and go to [http://twitter.github.com/bootstrap/](http://twitter.github.com/bootstrap/).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on **Download Bootstrap**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A `.zip` file will be downloaded into your `downloads` folder; unzip it by double-clicking
    on it or by using your favorite unzip tool.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You will find three directories inside the `bootstrap` folder, namely `css,
    img`, and `js`, each containing a number of files.![Time for action — installing
    Bootstrap locally](graphics/3586_06_002.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Copy all of the files in each of these folders into the respective folders
    in your `verge` project: `/public/css, public/img`, and `public/js`. Your `verge`
    directory should look similar to the following screenshot when you''re done:![Time
    for action — installing Bootstrap locally](graphics/3586_06_003.jpg)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What just happened?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We just installed Twitter's Bootstrap into our project by downloading a `.zip`
    file containing all of the assets and by placing them in the correct folders on
    our local machine.
  prefs: []
  type: TYPE_NORMAL
- en: Just by looking at the new files that we have in our project, you might notice
    that each file appears to show up twice, one with `min` inside of the filename
    and one without. These two files are identical, except for the fact that the one
    that contains `min` in the file name has been minified. **Minified** means that
    all of the non-essential characters are removed from the code to decrease the
    file size. The removed characters include things such as white-spaces, new-line
    characters, comments, and much more. Because these files are loaded on demand
    from the website, it's important that they are as small as possible to speed your
    application up. If you tried to open a minified file, it's usually pretty hard
    to tell what's going on, which is fine because we don't want to make any changes
    in these files to begin with.
  prefs: []
  type: TYPE_NORMAL
- en: It might be clear what all of these files do－the `css` files are defining some
    of the global styles of Bootstrap. The `img` files are used to help us use icons
    around our site if we want to, and the `js` files are used to help us add interaction,
    transitions, and effects to our site. But, inside of the `css` folder, there are
    both `bootstrap` and `bootstrap-responsive` css files, which can be confusing.
    **Responsive design** is something that has really exploded over the past few
    years, and in itself, has many books written about it. In short `bootstrap` includes
    styles in the `bootstrap-responsive` file to help our site work on different resolutions
    and devices. Out of the box, our website therefore should work on both web and
    modern mobile devices (for the most part).
  prefs: []
  type: TYPE_NORMAL
- en: Now, you can probably tell why I chose to use Bootstrap; we just gained a whole
    lot of functionality just by copying files into our project. But, everything isn't
    hooked up quite yet; we need to tell our `layout.php` file where to look so that
    it can use these new files.
  prefs: []
  type: TYPE_NORMAL
- en: Time for action — including Bootstrap and adjusting our layout to work with
    it
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Because the Bootstrap framework is just a series of files, it'll be a breeze
    for us to include it in our project, just as we did with our `master.css` file
    in [Chapter 4](ch04.html "Chapter 4. Starting your Application"),
  prefs: []
  type: TYPE_NORMAL
- en: 'Start by adding a link to `bootstrap.min.css` and `bootstrap-responsive.min.css`
    before `master.css` in the `layout.php` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, let''s make sure that Bootstrap works well in older versions of Internet
    Explorer and mobile browsers by adding the following little bit of code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s make a clean and simple wrapper for our application by replacing the
    contents of the `views/layout.php` file with the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Remove the contents of the `master.css` file, and replace them with the following
    to make a few small adjustments to our layout:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: What just happened?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We included Bootstrap in our `layout.php` file and made sure that the versions
    of Internet Explorer would work okay by adding an HTML5 shim that a lot of developers
    use. If you want to find out more about how this works, feel free to visit [http://html5shim.googlecode.com/](http://html5shim.googlecode.com/).
  prefs: []
  type: TYPE_NORMAL
- en: Next, we added some HTML to conform to the CSS definitions defined in Bootstrap.
    It's not too important for you to understand why the HTML is set up like it is,
    but if you're curious, you can refer to the main page of Bootstrap to learn more
    ([http://twitter.github.com/bootstrap/](http://twitter.github.com/bootstrap/)).
    We then added a few rules to our `main.css` file that added additional styles
    on top of Bootstrap. I did this to create a little bit of space in our application,
    so things weren't cluttered.
  prefs: []
  type: TYPE_NORMAL
- en: If you were to go to the home page now by going to [http://localhost/verge/](http://localhost/verge/),
    the header definitely looks cool, but the home page needs some love. Let's quickly
    clean up the home page.
  prefs: []
  type: TYPE_NORMAL
- en: Time for action — sprucing up the home page
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Bootstrap is going to save us some real time again; we just need a little bit
    of HTML markup for our application to look pretty nice! Replace the contents of
    `views/home.php` with the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: What just happened?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We just added a nice clean layout for our home page with a button to prompt
    people to sign up when they come to our site. Notice that we removed`<? php echo
    $message; ?>` from the file, when we originally added that to display simple messages
    to our users, but we're going to explore a cleaner way of doing that later in
    this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Ready to see some magic? Open your browser, and go to [http://localhost/verge/](http://localhost/verge/).
  prefs: []
  type: TYPE_NORMAL
- en: '![What just happened?](graphics/3586_06_005.jpg)'
  prefs: []
  type: TYPE_IMG
- en: We've barely had to spend any time on the design, but we already have a much
    friendlier application. This new design is going to come in handy later, when
    we get deeper into handling users.
  prefs: []
  type: TYPE_NORMAL
- en: Ready to see something cool? Try making your browser window smaller, and see
    what happens.
  prefs: []
  type: TYPE_NORMAL
- en: '![What just happened?](graphics/3586_06_007.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Notice how the content adjusts to the screen size; this means that on a mobile
    device, your application will adjust so that it's easy to view. Bootstrap's responsive
    boilerplate code is just the beginning. You could choose to show and hide content,
    depending on the size of the browser.
  prefs: []
  type: TYPE_NORMAL
- en: With the browser window smaller, you'll notice that the navigation bar has also
    been condensed, and instead of seeing your links, you see a button with three
    bars on it. Try clicking on it...nothing happens!
  prefs: []
  type: TYPE_NORMAL
- en: This component requires Bootstrap's JavaScript file, as well as a JavaScript
    library called **jQuery**. It's not crucial for us to have this all working yet,
    so let's come back to it in the next chapter!
  prefs: []
  type: TYPE_NORMAL
- en: Moving all user files into the user folder
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Our application is going to start growing quite a bit in this section. Our views
    are going to get pretty messy if we keep throwing our files around as we currently
    are. Let's perform a little housekeeping and add some structure to our `views`
    directory.
  prefs: []
  type: TYPE_NORMAL
- en: Time for action — organizing our user views
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As we continue to create views for our application, it will be smart for us
    to have some organization to make sure that we keep things nice and straightforward.
  prefs: []
  type: TYPE_NORMAL
- en: Create a folder called `user` inside the `views` directory.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Move the existing `signup.php` view into this folder. The resulting directory
    structure will look similar to the following screenshot:![Time for action — organizing
    our user views](graphics/3586_06_010.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'We need to update `index.php` and let it know where to find the signup view
    that we just moved:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: What just happened?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We cleaned up our `views` folder structure by creating a `user` folder, into
    which we will put all of the views that relate to users. We then moved our existing
    `signup.php` file into the `user` folder and told our `index.php` file where to
    find the `user/signup.php` file. Notice that the route for the signup page, `/signup`,
    hasn't changed at all.
  prefs: []
  type: TYPE_NORMAL
- en: Designing our user documents
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We've seen in [Chapter 3](ch03.html "Chapter 3. Getting Started with CouchDB
    and Futon"), *Getting Started with CouchDB and Futon*, how CouchDB looks at user
    documents. In this chapter, we are going to learn how to leverage existing CouchDB
    functionality and add some additional fields on top of it.
  prefs: []
  type: TYPE_NORMAL
- en: How CouchDB looks at basic user documents
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'CouchDB already has a mechanism for storing user documents, which we''ve already
    seen and used. We are going to use this same structure for the users of our application:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'These seven fields are required by CouchDB for users to operate correctly in
    CouchDB:'
  prefs: []
  type: TYPE_NORMAL
- en: '`_id` is the unique identifier of the user. It needs to start with `org.couchdb.user:`
    and end with the same value of the `name` attribute. These roles are enforced
    by the `_auth` design document. We haven''t talked too much about design documents
    yet. But, at this point, it''s good for you to know that design documents are
    code that run directly inside the database. They can be used to enforce validation
    and business roles.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`_rev` is the revision identifier of the document. We quickly touched on revisions
    in [Chapter 3](ch03.html "Chapter 3. Getting Started with CouchDB and Futon").'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`name` is the username of the user. This field is required by the `_auth` design
    document, and it also needs to match the value of the `_id` of the document after
    the `:` character.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`password_sha` is the SHA-1 encrypted value of the password after it has been
    combined with the `salt`. We''ll cover SHA-1 encryption in just a bit.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`password_sha` is the SHA-1 encrypted value of the password after it has been
    combined with the `salt`. We''ll cover SHA-1 encryption in just a bit.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`roles` is an array of privileges that a user might have. By having a value
    of `[]`, we know that this user has no special privileges.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`salt` is the unique `salt` of the user. The `salt` is combined with the plaintext
    value of the password and is passed through SHA-1 encryption to result in the
    value of `password_sha`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`type` is the identifier that CouchDB uses to identify the document type. Remember
    that CouchDB is a flat document store. This `type` field identifies the classification
    of a document.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: These user documents are unique in that they have a small amount of structure
    that is required, but we can always add additional fields to these. Let's do that
    next!
  prefs: []
  type: TYPE_NORMAL
- en: Adding more fields to the user document
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Let's talk about a few extra fields that we know we'll want to collect information
    from the users of Verge. Keep in mind that you can always add more fields if your
    application needs it.
  prefs: []
  type: TYPE_NORMAL
- en: '**Username:** We know that we''ll want to be able to store a unique username,
    so that our users will have a unique URL, such as `/user/johndoe`. Luckily, this
    functionality is already handled by CouchDB''s `name` field. With that in mind,
    there''s nothing to do here. We''ll just use the existing `name` instead!'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Full name:** The full name of the user, so we can display the name of the
    user as `John Doe`. This will be a user-friendly name that we can use to display
    to visiting users, we''ll need to add a field to the documents to support this.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**E-mail:** An e-mail address, so that we can communicate with the user, such
    as for notification e-mails: `<[john@example.com](mailto:john@example.com)>`.
    We''re actually already saving the e-mails in our current class, so we can ignore
    this as well.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Sounds easy enough; we just need to add one field! Any time you add new fields
    to a document, you should think about how you need to format it. Let's talk about
    the different approaches that we could take with CouchDB.
  prefs: []
  type: TYPE_NORMAL
- en: Discussing options for adding these fields
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'There are a variety of ways that we might use to add fields on top of CouchDB''s
    basic user documents:'
  prefs: []
  type: TYPE_NORMAL
- en: We could create a new type of document and call it `verge_user`. This document
    would contain any additional user attributes that we need in our application and
    then would have a reference back to the user document.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We could create an array inside our user document with the application-specific
    attributes and add all of our user attributes there.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Or we could just add the two new fields inside our user documents.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: I think, for now, we can all agree that by adding one field, we can just go
    with the last option mentioned.
  prefs: []
  type: TYPE_NORMAL
- en: 'With that in mind, our final document will look similar to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'It might be strange for you to see variations of the user''s name in so many
    places: `_id, name`, and `full_name`. But remember that CouchDB has a good reason
    for doing this. By storing the username in the `_id`, CouchDB will automatically
    check to make sure that each username is unique.'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Keep in mind that we might want to get more creative if we want to start storing
    fields such as `website, biography`, or `location`. We'll talk more about this
    later on in the book.
  prefs: []
  type: TYPE_NORMAL
- en: Adding support for the additional fields
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In order for us to add these fields to our user documents, we don't have to
    change much in our code; we just need to add a few more variables into our `user.php`
    class.
  prefs: []
  type: TYPE_NORMAL
- en: Time for action — adding the fields to support the user documents
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We already have the basic structure of user documents set up in the `classes/user.php`
    file, but let's go through and add a few more fields.
  prefs: []
  type: TYPE_NORMAL
- en: We currently aren't setting `_id` in any of our projects, but we'll need to
    do that for our user documents. Let's open up `classes/base.php`, and add `_id`
    so that we have the option of setting `_id` on any document.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'We need to add all of the user fields that we just discussed into the `classes/user.php`
    file, and a few others. Add the following code to `classes/user.php` so that it
    looks as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: What just happened?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We added all the fields that we'll need to be able to save user documents into
    our system. We added `_id` to the `base.php` class, because we know that every
    CouchDB document requires this field. We have been able to live without `_id`
    because CouchDB has automatically set one for us so far. However, in this chapter,
    we'll need to be able to set and retrieve `_id` for our user documents. We then
    added `full_name` and a few other fields that might throw you off a bit. `$salt`
    and `$password_sha` are used to safely store passwords. This process is easier
    to explain with an example, so we'll go over this in detail in our signup process.
    Lastly, we added roles, which will be empty in this book but can be useful for
    you to develop a role-based system, allowing certain users to be able to see certain
    parts of your application, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have the user structure defined, we need to walk through the signup
    process, which is a bit more complex than the CouchDB document creation we've
    done so far.
  prefs: []
  type: TYPE_NORMAL
- en: The signup process
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now that we have support for all of the fields in the user class, let''s add
    support for users to sign up for Verge. Signing up is a bit of a complicated process,
    but we''ll try to break it down by going step-by-step. In this section we will:'
  prefs: []
  type: TYPE_NORMAL
- en: Define our database admin user and password so that we can create new user documents
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a new signup interface to support all the fields we've added
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add a Bootstrap helper to make creating form inputs much easier
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Develop a quick and dirty implementation of the signup process
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Dig deeper into using SHA-1 encryption for our passwords
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Refactor our signup process so that it is a bit more structured
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A little administrator setup
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In [Chapter 3](ch03.html "Chapter 3. Getting Started with CouchDB and Futon"),
    we locked down `our _users` database, so we could secure our user data, meaning
    that any time we deal with the `_users` database, we need to provide the administrator
    login. For this, we'll add PHP constants for the user and the password at the
    top of the `index.php` file, so that we can reference it any time we need to perform
    an administrator function. Don't worry if this seems messy; we'll clean this up
    later in the book.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Updating the interface
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'If you were to open your browser and look at the signup page now by going to:
    `http://localhost/verge/signup`, you''d notice that it''s out of date with our
    new Bootstrap changes. In fact, you probably can''t even see all of the input
    boxes! Let''s use Bootstrap to help clean up our signup interface so that it looks
    correct.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Replace all of the contents of the `views/user/signup.php` page with the following
    HTML code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Refresh the signup page, and you'll see our awesome form now!![Updating the
    interface](graphics/3586_06_015.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Our form looks nice and clean. But, let''s be honest, adding the code for the
    input fields will start to become a pain as we add more fields. Let''s create
    a little helper class to help us create an HTML markup that can play nicely with
    Bootstrap:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Create a new file in the `lib` directory called `bootstrap.php`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Make a reference to `lib/bootstrap.php` in `bones.php`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Open up `lib/bootstrap.php`, and create a basic class.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'We''re going to create a function called `make_input` that will accept four
    arguments: `$id, $label, $type`, and `$value`.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Go back to `views/user/signup.php`, and simplify the code to use the new `make_input`
    function.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Now that we have `lib/bootstrap.php` to make our life easier, let''s ask our
    users for two more fields: `username` and `password`.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: Refresh your browser, and you'll see a dramatically improved signup form. If
    it doesn't look like the following screenshot, check to make sure your code matches
    mine.![Updating the interface](graphics/3586_06_017.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Our form looks great! Unfortunately, it doesn't actually sign up a user yet
    when you click on **Sign Up!**. Let's change that in this next section.
  prefs: []
  type: TYPE_NORMAL
- en: Quick and dirty signup
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For now, we will write the user signup code directly into `index.php`. We'll
    refactor this code a few times, and by the end of the chapter, we will move the
    bulk of the signup functionality into the `classes/user.php` file.
  prefs: []
  type: TYPE_NORMAL
- en: Time for action — handling simple user signup
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let's go through the signup process step-by-step, in which we'll rebuild the
    code in our signup `POST` route from scratch. I'll explain each piece of code
    on the way, and then, we will do a full recap at the end of this section.
  prefs: []
  type: TYPE_NORMAL
- en: 'Open `index.php`, and start by collecting the simple fields: `full_name, email`,
    and `roles`. The fields `full_name` and `email` will come directly from the form
    submission, and `roles` we will set to an empty array because this user has no
    special permissions.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: Next, we'll want to capture the username that the user submitted, but we'll
    want to safeguard against weird characters or spaces, so we'll use a regular expression
    to convert the posted username to a lowercase string without any special characters.
    The end result will serve as our `name` field and also as a part of the ID. Remember
    that user documents require that `_id` starts with `org.couchdb.user` and ends
    with the `name` of the user.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: In order to encrypt the plain-text value of the password that the user entered,
    we'll temporarily set a string as the value of `salt`. We'll then pass the plain-text
    password into a SHA-1 function, and save it in `password_sha`. We'll go deeper
    into how SHA-1 works in just a few moments.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: In order to save the user document, we need to set the database to `_users`,
    and log in as the admin user that we set with our PHP constants. Then, we will
    `put` the user to CouchDB using Sag.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: Finally, let's close the user signup function and render the home page.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: What just happened?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We just added code to set all of the values for our CouchDB user documents.
    Collecting the values of `full_name, email`, and `roles` was pretty straightforward;
    we just performed a simple call to grab the values from the posted form. Setting
    `name` got more complex with us transforming the posted value of username to a
    lowercase string, from which we used a **Regular Expression (Regex)** function
    to change any special characters to blank characters. With a clean name, we appended
    it to `org.couchdb.user` and saved it to the document's `_id`. Whew! That was
    a mouthful.
  prefs: []
  type: TYPE_NORMAL
- en: Stepping quickly into the world of encryption, we set a static (and very unsafe)
    `salt`. Combining the `salt`, along with the plain-text password in a SHA-1 function,
    resulted in an encrypted password that was saved to our object's `password_sha`
    field. Next, we set the database of Sag by using `setDatabase`, so that we could
    talk to CouchDB's `_users` database. In order for us to communicate with the users,
    we needed to have administrator credentials. So, we used the `ADMIN_USER` and
    `ADMIN_PASSWORD` constants to log in to CouchDB. Finally, we used the HTTP verb
    `PUT` to create the document in CouchDB and rendered the home page for the user.
  prefs: []
  type: TYPE_NORMAL
- en: Let's test this all out and see what happens when we submit the signup form.
  prefs: []
  type: TYPE_NORMAL
- en: Open up the signup page by going to `http://localhost/verge/signup` in your
    browser.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Fill in the form, with **Full Name** set as `John Doe`, **Email** set as `<[john@example.com](mailto:john@example.com)>`
    , **Username** set as `johndoe`, and **Password** set as `temp123`. When you're
    finished, click on **Sign Up!**![What just happened?](graphics/3586_06_020.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Your user has been created! Let's go to Futon by going to `http://localhost:5984/_utils`,
    and look at the `_users` database for the new document.![What just happened?](graphics/3586_06_025.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Perfect, everything should have saved correctly! When you are finished looking
    at this, delete the user by clicking on **Delete Document**. If you are not currently
    logged in as an admin user, you'll need to log in first before CouchDB will allow
    you to delete the document.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: I had you delete the user because our password might as well be in plain-text
    if every user has a `salt` equal to `secret_salt`. In order for you to understand
    why this is so, let's take a step back and look at what SHA-1 does.
  prefs: []
  type: TYPE_NORMAL
- en: SHA-1
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Storing plain-text passwords is one of the biggest no-no's when it comes to
    security. Because of that, we are using SHA-1 ([http://en.wikipedia.org/wiki/SHA-1](http://en.wikipedia.org/wiki/SHA-1))
    to create a cryptographic hash. SHA-1 is a cryptographic hash function created
    by the **National Security Agency (NSA)**. The basic principle behind SHA-1 is
    that we combine a password with a **salt** to make our password indistinguishable.
    **Salt** is a string of random bits that we combine with our password to make
    our password encrypted in a unique fashion.
  prefs: []
  type: TYPE_NORMAL
- en: In the signup code we just wrote, we skipped over something pretty important.
    Our `salt` was being set to `secret_salt` every time. What we really need to do
    is create a random `salt` for each password.
  prefs: []
  type: TYPE_NORMAL
- en: In order to create the random salt, we can use CouchDB's RESTful JSON API. Couch
    provides a resource at `http://localhost:5984/_uuids` that, when called, will
    return a unique `UUID` for us to use. Each `UUID` is a long and random string,
    which is exactly what a salt needs! Sag makes getting a UUID super easy with the
    help of a function called `generateIDs`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s update our signup code to reflect what we just talked about. Open `index.php`,
    and change the setting of the `salt` value to match the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: Testing the signup process again
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Now that we've fixed the insecurities of our salt, let's go back and try the
    signup process again.
  prefs: []
  type: TYPE_NORMAL
- en: Open up the signup page by going to `http://localhost/verge/signup` in your
    browser.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Fill in the form, with **Full Name** being `John Doe`, **Email** being `<[john@example.com](mailto:john@example.com)>`
    , **Username** being `johndoe`, and **Password** being `temp123`. When you're
    finished, click on **Sign Up!**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Your user has been created! Let's go to Futon by going to `http://localhost:5984/_utils`,
    and look for our new document in the `_users` database. This time our `salt` is
    random and unique!![Testing the signup process again](graphics/3586_06_027.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Refactoring the signup process
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As I mentioned earlier, we are going to refactor this code into clean functions
    inside our user class, instead of it sitting directly in `index.php`. We want
    to reserve using `index.php` for handling routes, passing values, and rendering
    views.
  prefs: []
  type: TYPE_NORMAL
- en: Time for action — cleaning up the signup process
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let's clean up our signup code by creating a public function, called `signup`,
    inside the `User` class.
  prefs: []
  type: TYPE_NORMAL
- en: Open `classes/user.php`, and create a `public` function for signup.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: Enter the code to match the code below. It's almost identical to the code that
    we entered in the last section, except that instead of referencing `$user`, we
    are referencing `$this`. You'll also notice that `full_name` and `email` aren't
    located in this function; you'll see them in just a second.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'Open up `index.php`, and clean up the signup route so that it matches the following
    code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: What just happened?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We created a public function, called `signup`, that will house all of the signup
    code needed for our users to sign up. We then copied much of the code from the
    `index.php` signup route. You'll notice that there are some new things in there
    that we didn't see before. For instance, all references to `$user` have been changed
    to `$this`, because all of the variables we are using are attached to the current
    user object. You'll also notice that, at the beginning, we created a new `Bones`
    object so that we could use it. We also created Sag, which we've connected to
    Bones, which we were able to initialize without causing any overheard, because
    we are using the singleton pattern. Remember that the singleton pattern allows
    us to call the same object that we are using elsewhere on this request without
    creating a new one. Finally, we went back to the `index.php` file and simplified
    our signup code route so that we are only dealing with values that are coming
    directly from the forms. We then passed the untouched username and password through
    the signup function, so we could process them and execute the signup code.
  prefs: []
  type: TYPE_NORMAL
- en: Our signup code is now clean and operating on the class level and out of our
    application's hair. But, if you were to test our form a bit, you would realize
    that it's not foolproof yet.
  prefs: []
  type: TYPE_NORMAL
- en: Exception handling and resolving errors
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'If you were to try to go back to your signup form and save another document
    with the name `John Doe`, you would see a pretty unfriendly error page that looks
    something similar to the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Exception handling and resolving errors](graphics/3586_06_030.jpg)'
  prefs: []
  type: TYPE_IMG
- en: If you are using a browser other than Chrome, you probably received a different
    message, but the result is still the same. Something bad happened that we didn't
    expect, and even worse, we aren't capturing these exceptions.
  prefs: []
  type: TYPE_NORMAL
- en: 'What happens when something goes wrong? How will we figure out what broke?
    The answer is: we look at the logs.'
  prefs: []
  type: TYPE_NORMAL
- en: Deciphering error logs
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When PHP and Apache are working together, they produce a lot of logs for us
    to look at. Some are access-level logs, and others are error-level. So let's see
    if we can investigate what's happening here by looking at the Apache error log.
  prefs: []
  type: TYPE_NORMAL
- en: Time for action — examining Apache's log
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let's start by finding Apache's error log.
  prefs: []
  type: TYPE_NORMAL
- en: Open Terminal.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Run the following command to ask Apache''s `config` file where it''s saving
    the logs to:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'Terminal will return something similar to the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'Retrieve the last few lines of the log by running the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: The log will show you a bunch of things, but the most important message is this
    one, that says PHP `Fatal error`. Yours might be slightly different, but the overall
    message is the same.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: What just happened?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We asked Apache where it was storing the logs, once we found out where the log
    file was being saved. We used a `tail` command to return the last few lines of
    the Apache log.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: There are a variety of ways to read logs that we won't go deep into, but do
    what makes you feel comfortable. You can research more on `tail` by searching
    the Internet, or you can open logs in the console application that comes pre-installed
    on your Mac OSX machine.
  prefs: []
  type: TYPE_NORMAL
- en: 'Looking at the PHP Fatal error that we received is pretty confusing. If you
    start looking deeper into this, you''ll see that it''s a CouchDB error. To be
    more specific, the main line in this error is:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: This message means that CouchDB isn't happy with what we are passing to it,
    and we aren't handling the exception that Sag is throwing to us in the form of
    `SagCouchException. SagCouchException` is a class that will help us decipher exceptions
    thrown by CouchDB, but in order to do that, we'll need to know what status code
    is being passed back by CouchDB.
  prefs: []
  type: TYPE_NORMAL
- en: In order to get the status code, we'll need to look at our CouchDB logs.
  prefs: []
  type: TYPE_NORMAL
- en: 'Time for action : Examine CouchDB''s log'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Since we all installed CouchDB the same way with Homebrew, we can be sure that
    our CouchDB logs all live in the same location. With that in mind, let's look
    at our CouchDB log.
  prefs: []
  type: TYPE_NORMAL
- en: Open Terminal.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Retrieve the last few lines of the log by running the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'Terminal will return something similar to the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: What just happened?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We used a `tail` command to return the last few lines of the CouchDB log.
  prefs: []
  type: TYPE_NORMAL
- en: The first record you'll notice is `/uuids?count=1`, which is us grabbing the
    UUIDs for `salt` in our `signup` function. Notice that it returned a `200` status,
    which means that it executed successfully.
  prefs: []
  type: TYPE_NORMAL
- en: The next line says`'PUT' /_users/org.couchdb.user:johndoe`, and it returned
    a `409` response. The `409` response means that there was an update conflict,
    which is due to the fact that the name we are passing to the user is the same
    as the one that already exists. This should be easy enough for us to fix, but
    we first need to talk about catching errors.
  prefs: []
  type: TYPE_NORMAL
- en: Catching errors
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Luckily, catching errors is relatively easy with the help of our friendly `try...catch`
    statements. `try...catch` statements allow you to test a block of code for errors.
    The `try` block contains code that you are attempting to run, and if a problem
    occurs, the `catch` block is executed.
  prefs: []
  type: TYPE_NORMAL
- en: 'The syntax of a `try...catch` statement looks similar to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: As I mentioned before, Sag includes an exception class called `SagCouchException`.
    This class gives us the ability to see how CouchDB responded and then we can take
    action accordingly.
  prefs: []
  type: TYPE_NORMAL
- en: Time for action — handling document update conflicts using SagCouchException
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We determined in the last section that our code is breaking due to a `409` response.
    So, let's adjust the signup function in our `classes/user.php` file to handle
    the exception using `SagCouchException`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: What just happened?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We used a `try...catch` statement to resolve the duplicate document update conflict
    that was triggered. By casting it with `(SagCouchException $e)`, we are telling
    it to only catch `SagCouchExceptions` for now that come through. Once this exception
    is caught, we are checking to see what code was returned. If it's a code of `409`,
    we are setting an `error` variable with an error message. Then we need to re-display
    the user/signup form, so that the user has an opportunity to try the sign up process
    again. To make sure that no more code is executed after this error, we used the
    `exit` command so that the application stops right where it is.
  prefs: []
  type: TYPE_NORMAL
- en: We just set an `error` variable. Let's talk about how we can display this variable.
  prefs: []
  type: TYPE_NORMAL
- en: Showing alerts
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In our application, we will display standard notifications in response to user
    interaction, which we'll call alerts. We just set an error variable to be used
    in an error alert, but we also would like to be able to show a success message.
  prefs: []
  type: TYPE_NORMAL
- en: Time for action — showing alerts
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we'll use our existing variables in bones to allow us to show
    alert messages to our users.
  prefs: []
  type: TYPE_NORMAL
- en: Open `lib/bones.php` and create a new function called `display_alert()`. This
    function will be called to see if the `alert` variable is set. If the `alert`
    variable is set, we will echo some HTML to show the alert box on the layout.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: Add code to `layout.php`, right inside of the container `div` to display the
    Flash call the `display_flash` function.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: Now that we've added these Flash messages, let's go back to our signup `POST`
    route in `index.php` and add back in a Flash message that thanks the user for
    signing up.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: What just happened?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We created a function called `display_alert` that checked to see if a variable
    with the passed variable was set. If it was set, then we displayed the contents
    of the variable in an alert box with help from Bootstrap. We then added two lines
    of code to `layout.php`, so we can display Flash messages for errors and success.
    Finally, we added a success Flash message to our signup process.
  prefs: []
  type: TYPE_NORMAL
- en: Let's test this all out.
  prefs: []
  type: TYPE_NORMAL
- en: Go back and try to sign up for a user with the username of `johndoe` again.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'You''ll see this friendly error message, informing you of a problem:'
  prefs: []
  type: TYPE_NORMAL
- en: '![What just happened?](graphics/3586_06_032.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Now, let's test the success alert message. Change the username to `johndoe2`.
    Click on **Sign Up!**, and you'll retrieve a nice and green alert.![What just
    happened?](graphics/3586_06_035.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Even with these simple alerts, our signup form isn't perfect. Random exceptions
    and errors could occur, and we wouldn't be able to handle them. Even more concerning
    is that we aren't requiring fields in the form to be filled out. These items need
    to be on our radar, but we're not going to be able to cover all of that in this
    book.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let's move on to talk about user authentication.
  prefs: []
  type: TYPE_NORMAL
- en: User authentication
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now that we''ve created users, we definitely need to find a way for them to
    log in to our system. Luckily, CouchDB and Sag will really do a lot of the heavy
    lifting for us in this area. In this section we will:'
  prefs: []
  type: TYPE_NORMAL
- en: Set up a login form
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Learn about sessions, cookies, and how CouchDB and Sag handle authentication
    for us
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Add support for users to log out
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Handle the UI differently for logged in and not logged in users
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting up for the login form
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Let's create some login forms so that our users can log in to our website and
    use their newly created accounts.
  prefs: []
  type: TYPE_NORMAL
- en: Have a go hero — setting up the routes and forms for login
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We've gone through the process of creating pages, setting up routes, and creating
    forms a few times before. So, let's see if you can give it a shot by yourself
    this time. I won't leave you completely without help. I'll first tell you what
    you need to try to do, and then when you are finished, we'll review and make sure
    our code matches up.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here''s what you need to do:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a new page called `user/login.php`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create new `GET` and `POST` routes for the login page in the `index.php` file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Tell the `GET` route of the login page to render the `user/login` view.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a form with the `username` and `password` fields using `user/signup.php`
    as a guide.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add fields called `username` and `password` using the Bootstrap helper and a
    `submit` button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: While you are doing that, I'm going to watch some TV. Turn over to the next
    page when you're ready, and we'll see how it went!
  prefs: []
  type: TYPE_NORMAL
- en: Good job! I hope you were able to do that without needing too much help. If
    you needed to go back and look at the old code for help, don't worry, as that's
    what a lot of developers end up doing when they are stuck. Let's go through and
    see how your code matches up to what I have.
  prefs: []
  type: TYPE_NORMAL
- en: 'The addition to this, your `index.php` file, should look similar to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: 'Your `views/user/login.php` page should look similar to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: Make sure to update your code to what I have if it's different, so our code
    matches up down the road.
  prefs: []
  type: TYPE_NORMAL
- en: Logging in and logging out
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Now that we have the forms ready to go, let's talk about what we need to do
    to make the form actually work. Let's quickly talk about what we are trying to
    accomplish in the login process.
  prefs: []
  type: TYPE_NORMAL
- en: Sag will connect to the CouchDB `_users` database.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Sag will pass the login information from our PHP directly to CouchDB.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If the login is successful, CouchDB will pass back a cookie that says you are
    authenticated.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We'll then query CouchDB to grab the currently logged-in username and save it
    to a session variable for later use.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If you've been developing with other databases for a while, you'll immediately
    see what's so cool about the login process. CouchDB is handling most of the authentication
    problems that we usually have to handle ourselves!
  prefs: []
  type: TYPE_NORMAL
- en: Let's go through the login functionality. Luckily, it's much easier than the
    signup process.
  prefs: []
  type: TYPE_NORMAL
- en: Time for action — adding functionality for users to log in
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We're going to go through this slowly, but I think you're going to love how
    quickly we're able to add this functionality with all of the code we've written
    so far.
  prefs: []
  type: TYPE_NORMAL
- en: Open `classes/user.php`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a `public` function called `login` to which we can pass our plain-text
    `$password` as a parameter.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: Create a `try...catch` statement for our login code to live in. In the `catch`
    block, we are going to catch the error code `401`. If it is triggered, we want
    to tell the user that their login was incorrect.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: Add code to start the session, and then to pass the username and password into
    CouchDB through Sag. When the user is successfully logged in, grab the current
    user's username from CouchDB.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: What just happened?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We created a `public` function called `login` in our `user` class that will
    allow users to log in. We then created a new reference to Bones so that we can
    access Sag. In order to handle invalid login credentials, we created a `try...catch`
    block and moved onto handling the `catch` block first. This time, we are checking
    against an error code of `401`. If the error code matched up, we set the `error`
    variable to display an error message, rendered the login page, and finally exited
    the current code.
  prefs: []
  type: TYPE_NORMAL
- en: Next, we worked on the login code by passing the username and the plain-text
    password to the login method of Sag, along with the setting `Sag::$AUTH_COOKIE`.
    This parameter is telling us to use CouchDB's cookie authentication. By using
    cookie authentication, we can handle authentication without having to pass the
    username and password each time.
  prefs: []
  type: TYPE_NORMAL
- en: Behind the scenes, what's happening is that our username and password are being
    posted to the `/_session` URL. If the login was a success, it will return a cookie
    that we can use for each request from here on, in place of the username and password.
    Luckily, Sag handles all of that for us!
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, we initialized a session with the `session_start` function, which allows
    us to set session variables that persist as long as our session exists. We then
    set a session variable for the username equal to the username of the currently
    logged in user. We did this by using Sag to grab the session information using
    `$bones->couch->getSession().We` then grabbed the body of the response with `->body()`
    and finally grabbed the current user with `userCtx` and, one step further, to
    grab the `username` attribute. This all resulted in one line of code as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: Finally, we used `session_write_close` to write the session variable and close
    down the session. This will increase the speed and decrease the chances of locking.
    Don't worry; by calling `session_start()` again, we can retrieve our `session`
    variables again.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, we need to add the login function to our `post` route in `index.php`.
    Let's do that quickly together.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: We could go and test this right now, but let's finish out a few more things
    so that we can fully test what's going on here.
  prefs: []
  type: TYPE_NORMAL
- en: Time for action – adding functionality for users to log out
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: I bet you thought the login script was pretty easy. Wait until you see how easy
    it is for us to allow users to log out.
  prefs: []
  type: TYPE_NORMAL
- en: Open `classes/user.php`, and create a `public static` function called `logout.`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: Add a route into the `index.php` file, and have it call the `logout` function.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: Notice that we are calling a new feature inside of Bones `a `redirect` function.
    In order for this to work, let's add a quick new function at the bottom of our
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE47]`'
  prefs: []
  type: TYPE_NORMAL
- en: '`What just happened?`'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '`We added a `public static` function called `logout`. The reason we made it
    `public static` is that it really doesn''t matter to us which user is currently
    logged in. We just need to perform some simple session-level operations. First,
    we created a `$bones` instantiation as usual, but then, the next part is pretty
    interesting, so we set `$bones->couch->login(null, null)`. By doing this, we are
    making the current user an anonymous user, effectively logging them out. Then,
    we called `session_start` and `session_destroy.` Remember that with `session_start`,
    we are making our session accessible, then we are destroying it, which removes
    all the data associated with the current session.`'
  prefs: []
  type: TYPE_NORMAL
- en: '`After we were done with the `login` function, we opened up `index.php` and
    made a call to our `public static` function using `User::logout().``'
  prefs: []
  type: TYPE_NORMAL
- en: '`Finally, we used a redirect function that we added into the `index.php` file.
    So, we quickly added a function to Bones, which would allow us to redirect a user
    to a route by using `make_route.``'
  prefs: []
  type: TYPE_NORMAL
- en: '`Handling the current user`'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '`We''ll really want to be able to determine if a user is logged in or not and
    change thenavigation accordingly. Luckily, we can accomplish this in just a few
    lines of code.`'
  prefs: []
  type: TYPE_NORMAL
- en: '`# Time for action – handling the current user'
  prefs: []
  type: TYPE_NORMAL
- en: With most of the pieces of the puzzle in place, let's go through the process
    of changing the layout for users, depending on if they are logged in or not.
  prefs: []
  type: TYPE_NORMAL
- en: Let's add a function called `current_user` in `classes/user.php`, so that we
    can retrieve the current user's username from the session.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: Add a public static function called `is_authenticated` into `classes/user.php`
    so we can see if the user is authenticated or not.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: Now that we have our authentication in order, let's tighten up the navigation
    in `layout.php`, so that different navigation items are displayed depending on
    if the user is logged in or not.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: What just happened?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We started by creating a `public static` function called `current_user` that
    will retrieve the username that is stored inside the session. We then created
    another `public static` function called `is_authenticated`. This function checks
    `current_user` for a username, and, if it's available, the user is logged in.
    If it's not, the user is not currently logged in.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, we quickly went into our layout so that we could show links to home
    and log out if a user is logged in, and links to home, signup, login if the user
    is not currently logged in.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s test this out:'
  prefs: []
  type: TYPE_NORMAL
- en: Open your browser to the login page by going to `http://localhost/verge/` login.
    Notice that the header is displaying **Home, Signup**, and **Login** for you because
    you aren't currently logged in.![What just happened?](graphics/3586_06_040.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Log in with the credentials of one of your user accounts. You'll receive a nice
    alert message, and the header changes to display **Home** and **Logout.**![What
    just happened?](graphics/3586_06_045.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: I hope you're blown away by how much we've been able to accomplish in this chapter.
    Our application is really starting to come together.
  prefs: []
  type: TYPE_NORMAL
- en: 'Specifically, we covered:'
  prefs: []
  type: TYPE_NORMAL
- en: How to dramatically improve the interface by using Bootstrap from Twitter
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to create additional fields on top of existing CouchDB user documents
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to handle errors and debug issues with logs
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to completely build out the ability, so that users can sign up, log in,
    and log out of our application with the help of Sag and CouchDB
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This is just the beginning of our application. We still have a lot to do. In
    the next chapter, we will start to work on a user profile and work on the creation
    of new documents in CouchDB. These documents will be our users' posts.`
  prefs: []
  type: TYPE_NORMAL
