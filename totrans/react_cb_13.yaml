- en: Deploying to Production
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, the following recipes will be covered:'
  prefs: []
  type: TYPE_NORMAL
- en: Deploying to production on Digital Ocean
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Configuring Nginx, PM2, and a domain in our Droplet
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Implementing Jenkins (continuous integration)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'If you are reading this chapter, it''s probably because you have completed
    your React Application (congratulations!). Now it''s time to deploy it to production
    and show it to the world. In this chapter, we will learn how to deploy our React
    Application using one of the best cloud services: Digital Ocean.'
  prefs: []
  type: TYPE_NORMAL
- en: At this point, you will need to invest some money in renting the servers you
    will need. I will show you the cheapest way to do this, and then, if you want
    to increase the power of your servers, you will be able to do it without re-doing
    the configurations.
  prefs: []
  type: TYPE_NORMAL
- en: Deploying to production on Digital Ocean
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Digital Ocean is my favorite cloud-computing platform for using virtual servers
    (droplets) because it is effortless to create, configure, and delete droplets,
    and the price is low (you can get a droplet for $5 per month—that means $0.007
    per hour). Another reason why I think Digital Ocean is fantastic is that they
    have all the documentation up to date and customer service is quick to solve any
    problem you may have.
  prefs: []
  type: TYPE_NORMAL
- en: For this recipe, we are going to use Ubuntu 18.04, so you will need to know
    some basic Linux commands to be able to configure your droplet. If you are entirely
    new to Linux, don't worry, I'll try to explain each step in a straightforward
    way.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'First, you need to create your Digital Ocean account, go to [https://www.digitalocean.com](https://www.digitalocean.com).
    You can sign up with your Google account; this is the recommended way. Once you
    click on the register link with Google, you will see the Billing Info view:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/8f8fae15-2381-4f91-94ab-7f7d0a46cf88.png)'
  prefs: []
  type: TYPE_IMG
- en: 'You can register your Credit/Debit Card, or you can pay with PayPal. Once you''ve
    configured your payment information, you are ready to create your first Droplet:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/b4c53373-cdae-4b83-8142-c0dbefd1d8d3.png)'
  prefs: []
  type: TYPE_IMG
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s create our first Droplet:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Choose your Linux distribution; as I mentioned before, we are going to use
    Ubuntu 18.04:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/1c1ba873-4484-48ec-bc49-083128a57b58.png)'
  prefs: []
  type: TYPE_IMG
- en: 'One-click apps are preconfigured Droplets, but I prefer to set my Droplet from
    scratch to have the control and be able to optimize my configuration. After this
    recipe, if you want to take a look at these options if you need to configure something
    quickly, that''s fine:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/824561cf-fc0a-4eb7-a845-1f62c5013887.png)'
  prefs: []
  type: TYPE_IMG
- en: Choose the size of your Droplet. I prefer to use the 2 GB RAM Memory Droplet,
    which costs *$10 per month*. You might be wondering why I don't choose the cheapest
    version of 1 GB *RAM*; this is because I've tried to use this version, but I noticed
    that *1GB RAM* is not enough to handle NPM when you install the packages. Most
    of the time, this will hang up your Droplet—I know sounds ridiculous, but NPM
    consumes a lot of RAM.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'If you choose the $10 Droplet, you don''t have to pay that money right away.
    One of the best things about Digital Ocean is that they only charge you for the
    time you used your Droplet. That means that if after your complete this recipe
    (let''s say you take 2 hours to complete it), you shut down (power off) your Droplet,
    you will only be charged for the 2 hours, which is *$0.030*. If you keep your
    Droplet on for the full month (30 days), you will be charged $10, so don''t worry:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/e497ef00-ce89-42a0-8f8b-2e23c4aaf03c.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Choose the datacenter region; this will depend on your location. If you''re
    in the US, you will need to pick New York or San Francisco. You need to choose
    the datacenter closest to your location:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/2fa45903-37ae-4830-857f-3442ef6c4e15.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Name your Droplet. If you need more than one Droplet, you can select the amount
    here:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/afe71907-6d57-4cbe-864b-d3a9044da95b.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Once you click on the Create button, it will take 30-45 seconds to create your
    Droplet. Once it''s completed, you will see your Droplet:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/9a33a693-4dd4-45ce-a9db-33f5c7d1a017.png)'
  prefs: []
  type: TYPE_IMG
- en: 'At this point, you should get an email with your server credentials:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/613317ad-ef62-4ac4-bcc4-21caadd6f037.png)'
  prefs: []
  type: TYPE_IMG
- en: 'In your Terminal, you can access your Droplet with the `ssh root@YOUR_DROPLET_IP` command.
    When you access it for the first time, you will get a message to add this IP to
    your known hosts after you have to put in the Droplet password:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/222f41e9-aa44-457b-b655-8d4d1e1a40de.png)'
  prefs: []
  type: TYPE_IMG
- en: 'If everything works fine, you will be asked to change your UNIX password. You
    need to paste the current password and after you have to write the new password
    you want and retype it after you will be connected to the Droplet:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/77529c96-f24a-4630-8329-fb4393c3d839.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Let''s start configuring our Droplet. Install Node.js. For this, we will install
    the latest version of Node using a PPA. Right now, the current release of Node
    is 10.x. If when you are reading this recipe, Node has a new version, change the
    version in the command (setup_**10.x**):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Once we get the `nodesource_setup.sh` file, run the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'To install Node, run the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'If you want to verify the version of Node and NPM you just installed, run:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Using some of the recipes we performed in [Chapter 11](1daa68c4-442d-479f-b1b6-3efa80592901.xhtml),
    *Implementing Server-Side Rendering*, I created a new GitHub repository with that
    code to push it to production. You can see this repository at [https://github.com/csantany/production](https://github.com/csantany/production).
  prefs: []
  type: TYPE_NORMAL
- en: 'In our Droplet, we will clone this git repo (if you already have your application
    ready, use your repository). The production repository is public, but if you use
    a private repository, you need to add the SSH Key of your Droplet in your GitHub
    account. For this, you need to run the `ssh-keygen` command in your Droplet, and
    then press *Enter* three times without writing any passphrase:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/7fafb0c4-915a-44c5-b855-09d9f774f20c.png)If your terminal was inactive
    for more than five minutes, it''s possible your connection will be closed, and
    you will have to connect again.'
  prefs: []
  type: TYPE_NORMAL
- en: 'After you create your SSH Key, you can see it by doing: `vi /root/.ssh/id_rsa.pub`.
    You need to copy the SSH Key and go to your GitHub Account | Settings | SSH and
    GPG Keys ([https://github.com/settings/ssh/new](https://github.com/settings/ssh/new)).
    And then paste your key in the textarea and put some title to the key. When you
    click the Add SSH Key button, GitHub will ask for your password to confirm:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/6e77806f-e1e7-458d-b631-54cdc21f5fea.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now we can clone our repository using `git clone git@github.com:csantany/production.git`,
    or your repository:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/8f5aa495-a4c3-4fb7-8620-9a4e30075111.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Then go to the production folder and install the NPM packages:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'To test our application, let''s run our npm run start-production script:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'If you want to verify that it works, go to your browser and open the IP of
    your droplet, and then add port 3000—in my case will be `http://178.128.177.84:3000` if
    everything works fine, you should see your application (in our case we are going
    to open our /todo section):'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/5f8932eb-4163-4242-90d8-a41ae0f6406d.png)'
  prefs: []
  type: TYPE_IMG
- en: There's more...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'If you want to turn off your Droplet, you can go to the Power section, or you
    can use the ON/OFF switch:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/08a46a15-3719-4104-8840-a481e8ff6aeb.png)'
  prefs: []
  type: TYPE_IMG
- en: 'When you click it, you will get this modal:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/920bcbcf-98ca-440b-a62d-68efe72a3eb2.png)'
  prefs: []
  type: TYPE_IMG
- en: Configuring Nginx, PM2, and a domain in our Droplet
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: At this point, our first Droplet is ready to use, but we can see our React Application
    using port 3000\. In this recipe, we are going to learn how to configure Nginx
    in our server and how to implement a proxy to redirect the traffic from port 80
    to 3000\. This means that we won't need to specify our port directly anymore.
    PM2 (Node Production Process Manager) will help us to run our Node server in production
    securely. Generally, if we run Node directly with the `node` or `babel-node` command
    and there is an error in our app, this will crash and will stop working; PM2 restarts
    the Node server if an error occurs.
  prefs: []
  type: TYPE_NORMAL
- en: Getting Ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'For this recipe, we need to install PM2 globally:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Also, we need to install Nginx:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s begin with the configuration:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Adjust the firewall to allow the traffic just in port 80\. To list the available
    application configurations, we run the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: '`Nginx Full` means that we will allow the traffic from ports 80 (HTTP) and
    443 (HTTPS). At this point, we haven''t configured any domain with SSL, so we
    should restrict the traffic to pass just through port 80 (HTTP):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'If we try to access our IP, we should see our Nginx working:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/96aeb8a7-c9df-4a2e-a032-a14d3c119f78.png)'
  prefs: []
  type: TYPE_IMG
- en: 'If you want to administrate the process of Nginx, you can use these commands:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Start server**: `sudo systemctl start nginx`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Stop server**: `sudo systemctl stop nginx`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Restart server**: `sudo systemctl restart nginx`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Reload server**: `sudo systemctl reload nginx`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Disable server**: `sudo systemctl disable nginx`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Set up Nginx as a Reverse Proxy Server, for this we need to open our Nginx
    config file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'In the `location /` block, we need to replace it with:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Once you''ve saved and closed the file, we need to verify whether we have any
    syntax errors. Use the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'If everything is OK, you should see:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/e92ff470-bb57-4054-bb8d-c8d12206ca11.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Finally, we restart our Nginx server:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Now we can access our IP without the port, and the React application will work
    fine:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/ee2dd4f9-4647-4f69-81c7-5cf1c5feb01d.png)'
  prefs: []
  type: TYPE_IMG
- en: There's more...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'If you want to use a domain with your Droplet, it''s really easy; you need
    to change the Nameservers of your domain to point to Digital Ocean ones. For example,
    I have a domain, called educnow.com, which I''m going to use for my Droplet. I
    registered this domain with Godaddy, so I have to go to the domain management
    and select it. You can go directly to the `https://dcc.godaddy.com/manage/YOURDOMAIN.COM/dns`
    URL. Then go to Nameservers:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/c9b73e93-bbbe-43aa-8dd0-664b590a2f99.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We have to click on the Change button, select Custom, specify the Digital Ocean
    Nameservers, and click on Save:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/a4d29c53-0eaf-4b98-86e1-220386dd5b76.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Once you''ve modified your Nameservers, you need to go to your Droplet dashboard
    and choose the Add a domain option:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/fffc047b-5401-4739-b348-c98aff746683.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Then introduce the domain you want to link to your Droplet and click on Add
    Domain:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/e7161d4b-11cd-4a5e-ad54-9cc9b5ac4dab.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now you need to create a new record for CNAME. Select the CNAME tab, in the
    hostname write `www`, in the alias field write `@`, and by default the TTL is
    `43200`—this is to be able to access your domain using the `www.yourdomain.com`
    prefix:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/9e417d23-e513-40c0-bbfa-a6c4cc12beb8.png)'
  prefs: []
  type: TYPE_IMG
- en: If you did everything correctly, you should be able to access your domain and
    see your React Application working; this process can take from 30 minutes to 24
    hours depending on the DNS propagation speed.
  prefs: []
  type: TYPE_NORMAL
- en: Implementing Jenkins (continuous integration)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Jenkins is one of the most popular software for continuous integration, it's
    based on Java and is open source.
  prefs: []
  type: TYPE_NORMAL
- en: Getting Ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'There are some prerequisites to run Jenkins:'
  prefs: []
  type: TYPE_NORMAL
- en: You need a droplet (server) with Ubuntu 18.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You need to install Java 8.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'If you don''t have Java 8 installed, you can install it with this command:'
  prefs: []
  type: TYPE_NORMAL
- en: '**sudo apt  install openjdk-8-jre-headless**'
  prefs: []
  type: TYPE_NORMAL
- en: 'If you want to check which version of Java you have installed, you can use
    the `java -version` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/95f04dff-edfc-48c0-899a-a61b80e88001.png)'
  prefs: []
  type: TYPE_IMG
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now let''s install and configure Jenkins:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the repository key to the system:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'Append the Debian package address to `sources.list`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Update the apt packages:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'Install Jenkins:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'If you get an error when you install Jenkins, you can uninstall it with:'
  prefs: []
  type: TYPE_NORMAL
- en: '**sudo apt-get remove --purge** jenkins'
  prefs: []
  type: TYPE_NORMAL
- en: 'Start the Jenkins service:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'If you want to see the Jenkins status, use this command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: '![](assets/69f18ccf-68ff-4f58-93c9-e38b13fb3bf4.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Jenkins runs on port 8080 by default, and we need to open the Firewall to allow
    the traffic to that port:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'If you want to verify the firewall status, do the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'If you see Status: inactive, you will need to run these commands to enable
    the firewall:'
  prefs: []
  type: TYPE_NORMAL
- en: '**sudo ufw allow OpenSSH**'
  prefs: []
  type: TYPE_NORMAL
- en: '**sudo ufw enable**![](assets/5fabecf9-a272-4600-9e22-63c91f688307.png)'
  prefs: []
  type: TYPE_NORMAL
- en: 'It''s time to run our Jenkins for the first time and configure it. For this,
    you need to visit `http://<the_ip_or_domain_of_your_droplet>:8080`. In my case,
    it''s `http://142.93.28.244:8080`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/67584010-d8f9-49d9-8792-bee9c0b9590f.png)'
  prefs: []
  type: TYPE_IMG
- en: 'To see the first password, you need to run:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: '![](assets/a8c88760-d80d-4c1f-95e3-ed10c859a8b1.png)'
  prefs: []
  type: TYPE_IMG
- en: 'You will see the Welcome to Jenkins page. You have to select the "Install suggested
    plugins" option:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/a28bf925-13bb-4449-a388-dcce812e15d7.png)'
  prefs: []
  type: TYPE_IMG
- en: 'You will see the installation process:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/ef348693-d084-43cd-be6e-4c43ea7f06b1.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Once the installation is complete, you need to create your first admin user:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/450336d6-a3ed-4426-be31-528e8930cc5b.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Confirm the Jenkins URL if you don''t want to change it. Click Save and Finish:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/67f5dcc1-99f8-44b6-abbf-e33585f16c4b.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Jenkins is ready:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/7b53bde8-416c-42aa-8a12-aabe46c244a5.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The first view you will see in Jenkins is this one:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/ea8373a4-57bb-43ea-a183-b8702e06d8e8.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Go to Manage Jenkins > Manage Plugins to install the GitHub plugin:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/4acca626-b933-4331-bab3-bf6fe79ff541.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Select the Available tab and then search for GitHub Integration. Now select
    the checkbox option and click on the Download now and install after restart button:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/7e644e93-7b21-4f33-b7bd-1683f5bb8a13.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Select the Restart Jenkins when installation is complete, and no jobs are running option:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/b679bd1e-c7ea-4cc4-8d46-42a6208719db.png)'
  prefs: []
  type: TYPE_IMG
- en: 'You will see this message:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/907880ac-a25e-4a96-8ea5-41d971742a9a.png)'
  prefs: []
  type: TYPE_IMG
- en: Wait one minute and then refresh the page. You may need to log in again.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Go back to Manage **Plugins**; now you need to install the **Post build task
    plugin**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'We can create our first Job by clicking on create new jobs on the homepage:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/666ea3f7-cb57-48ed-b6e1-fc91453d3a0f.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Write the name of your job, select the Freestyle project option, and click
    on the OK button:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/3064e63b-656d-4224-8576-9bc1ba74e473.png)'
  prefs: []
  type: TYPE_IMG
- en: 'In the General configuration, go to the Source Code Management section, select
    the Git option, and then write your GitHub project HTTPS URL (if you select your
    SSH URL, you will need to add new SSH keys for Jenkins in your GitHub):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/84650f9d-e6be-41c1-986d-09270726558c.png)'
  prefs: []
  type: TYPE_IMG
- en: 'If your repository is private, you need to click on the Add button to specify
    your GitHub credentials (username and password):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/fa606801-d577-4aa7-bdf0-6523a10b516f.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Select your credentials and make sure the `master` branch is selected as your
    main branch (it''s recommended to use the master instead of others branches):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/2fd8c743-7f10-4686-91cb-04276161c890.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Select the Post build task option on the Post-build Actions:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/d6803c1b-e91b-4058-95ba-34f638811ca4.png)'
  prefs: []
  type: TYPE_IMG
- en: 'In the textarea script, add `npm install && npm run start-production`. Click
    on Apply and then on the Save button:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/93173b99-a56f-4164-b1a8-de7c0631bd04.png)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We've configured our Jenkins job, now let's test it. I'm going to modify a simple
    file to be sure the Jenkins works properly.
  prefs: []
  type: TYPE_NORMAL
- en: At this point (if you followed the first recipe), you must stop the PM2 server
    with the command "**npm run stop**" and then remove the production directory that
    we cloned before, to avoid problems with the Jenkins job.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s modify our Home component; I''ll add an extra text **(Jenkins)**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'File: src/client/home/index.jsx'
  prefs: []
  type: TYPE_NORMAL
- en: 'After that, you need to commit and push to master. Now go to Jenkins, select
    your job, and click on `Build Now`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/4cee1644-935c-4e1d-9011-28768649a40f.png)'
  prefs: []
  type: TYPE_IMG
- en: 'After that, click on the latest build (in my case it''s #5 because I did some
    tests before, but for you, it will be #1):'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/fbc52eb4-7bc8-495d-96c1-90149b6a8160.png)'
  prefs: []
  type: TYPE_IMG
- en: 'In the build, you will see who (user) started the build and which is the revision
    (last commit of master) that is building. If you want to see the Console Output,
    you can click on that option on the left menu:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/5710a5c8-b283-4954-8bc2-d75b2b3f2d57.png)'
  prefs: []
  type: TYPE_IMG
- en: 'If you look at the Console Output, you will see tons of commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/f271e88e-6e1d-455d-b663-b963aacf2109.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Every time we run a new build, Jenkins will fetch the latest changes of the
    repository:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'Then will get the last commit of the master:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'And finally, it will execute the commands we specified on the Post build task:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'If everything works fine, you should see Finished: SUCCESS at the end of the
    output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/6bfadaed-70c9-42f4-b96a-2ac414cce03a.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now wait 30 seconds or 1 minute and then visit your production site (in my
    case `http://142.93.28.244/`) – you will see the new changes:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/9b5b1bed-835a-4774-bfd8-5f53ac5e0963.png)'
  prefs: []
  type: TYPE_IMG
- en: If you're wondering where the files are stored, you can see them at `/var/lib/jenkins/workspace/<your_jenkins_job_name>`.
  prefs: []
  type: TYPE_NORMAL
