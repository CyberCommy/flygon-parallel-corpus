- en: Chapter 8. Extending Foundation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '*After constructing the website page markup in the previous chapter, we now
    start giving the website a look, feel, and colors. This time we will use **Sassy
    CSS** (**SCSS**), which also happens to be the underlying syntax of the Foundation
    default styles.*'
  prefs: []
  type: TYPE_NORMAL
- en: '*SCSS is a syntax variation of a CSS preprocessor named Sass. The Sass original
    syntax uses indentation formatting that makes the codes look neat. SCSS, on the
    other hand, uses curly braces and semicolons just like regular CSS. The similarity
    helps everyone to quickly grasp the syntax, in particular those who are new to
    Sass.*'
  prefs: []
  type: TYPE_NORMAL
- en: '*Since we are going to employ SCSS, we will start off this chapter by walking
    you through a couple of Sass features and its utilities. You will learn to define
    variables and functions, perform operations, and comply with other directives,
    which allows us to compose the website style rules more efficiently.*'
  prefs: []
  type: TYPE_NORMAL
- en: '*This might sound challenging. And if you like a challenge, we can just get
    started right away.*'
  prefs: []
  type: TYPE_NORMAL
- en: 'This chapter will revolve around the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Exploring Sass features and learning the syntax
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Looking into Bourbon, a Sass mixins library
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Organizing the style sheet structure and using the Import directive to include
    partial style sheets
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting up Koala to compile SCSS into CSS
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Customizing Foundation's default styles through variables
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Composing the website custom styles
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Optimizing the website layout for various viewport sizes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Turning the website live by compiling the JavaScripts
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Syntactically Awesome Style Sheets
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Sass ([http://sass-lang.com/](http://sass-lang.com/)) is a CSS preprocessor
    created by Hampton Catlin, Natalie Weizenbaum, and Chris Eppstein, which is the
    same team that also created Haml ([http://haml.info/](http://haml.info/)). Foundation,
    as mentioned at the beginning of this chapter, uses Sass to generate its CSS,
    and so will we. So, before we get our hands dirty, first we will delve into several
    Sass features, such as nesting, variables, mixins, functions, and others, that
    will allow us to write style rules more efficiently.
  prefs: []
  type: TYPE_NORMAL
- en: Nesting rules
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Sass allows us to nest style rules into one another. This feature eventually
    allows us to write style rules that resemble the HTML structure of the web page.
    That way, the style rules can be more concise and more easy to scan through. Say,
    we added the header markup of our website, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'With Sass, we can construct the style rules, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'It''s worth noticing that even though Sass allows you to nest style rules,
    you should not abuse this facility. So, don''t do something like the following
    code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Consider it before nesting style rules. The main objective of this feature is
    to make the style rules look simpler, more concise, easier to scan through, and
    not to make it unnecessarily look more complex.
  prefs: []
  type: TYPE_NORMAL
- en: Storing a value with a variable
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A variable is one useful piece in programming language that allows us to define
    a value once within a specified name. Each language has a slightly different way
    to declare a variable. For example, JavaScript uses the keyword `var`, LESS uses
    `@`, and Sass in this case uses the `$` sign.
  prefs: []
  type: TYPE_NORMAL
- en: 'One of the perfectly-suited implementations of a variable is to define the
    website colors, for example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'So, instead of declaring the color value every time we need it, we can simply
    declare the representative variables. In the following example, we declare `$primary`
    as the body text color and `$secondary` as the background color:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'When compiled to regular CSS, these variables are replaced with the defined
    value, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Using a variable with a proper name (of course), you will find it easier to
    write the variable rather than remembering the Hex or the RGB number; well, it
    is practically easier to write `$primary` than `#bdc3c7`, isn't it?
  prefs: []
  type: TYPE_NORMAL
- en: 'The Sass variable isn''t exclusively aimed to define colors. We can also use
    a variable to define a string or plain text, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'We can use a variable to store a number or a length:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'We can use a variable to inherit the value of another variable:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'We can use a variable to define the output of a function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Foundation centralized the declaration of its primary variables within a file
    named `_settings.scss`. We will look more into this matter later when we compose
    the website style rules.
  prefs: []
  type: TYPE_NORMAL
- en: Variable interpolation
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'There are certain circumstances when a variable is not applicable, such as
    when it is inserted within a string (plain text), as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'When compiled, the `$var` declaration within `$newVar` won''t be replaced with
    the value of `"Hello"`. This is because Sass interprets `$var` as a string or
    plain text. Thus, the output of the following example will simply be:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Another example where a variable won''t work is when a declaration is begun
    with an `@` rule or a directive, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: This example simply returns an error to the Sass compiler because `@media` is
    supposed to be followed by either the `print` or `screen` keyword.
  prefs: []
  type: TYPE_NORMAL
- en: There are a few cases where we have to use interpolation to declare a variable.
    Variable interpolation happens to other programming languages, such as PHP, Ruby,
    and Swift. But I'm not going into the details of the technicalities of its workings,
    as I don't exactly know either. Simply put, interpolation allows us to embed a
    variable in a situation where it does not allow the variable to work—especially
    where it is a string that is actually expected.
  prefs: []
  type: TYPE_NORMAL
- en: 'Each programming language has its notation to enable interpolation. In this
    case, Sass uses `#{}`. Given one of the previous examples, we can write the variable
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'And the result will be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Follow Hugo Giraudel posts ([https://webdesign.tutsplus.com/tutorials/all-you-ever-need-to-know-about-sass-interpolation--cms-21375](https://webdesign.tutsplus.com/tutorials/all-you-ever-need-to-know-about-sass-interpolation--cms-21375))
    for further assistance about variable interpolation in Sass.
  prefs: []
  type: TYPE_NORMAL
- en: Reusable code block with mixins
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Now, we are going to look into Sass mixins. If you followed and accomplished
    the second project, you should know about LESS mixins. Mixins, both in Sass and
    LESS, have similar purposes; they allow developers to reuse code blocks and style
    rules within the entire style sheet and thus comply with the DRY principle ([http://programmer.97things.oreilly.com/wiki/index.php/Don''t_Repeat_Yourself](http://programmer.97things.oreilly.com/wiki/index.php/Don''t_Repeat_Yourself)).
    However, it is slightly different in terms of how we declare and reuse the mixins.
    This is how we declare a mixin in LESS:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'In Sass, we use the `@mixins` directive to create a mixin, for example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'Sass uses the `@include` directive to reuse the preceding code block within
    style rules. Given the preceding example, we can write:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'The following is the output when the preceding example is compiled to CSS:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: That is a basic example of the application of Sass mixins.
  prefs: []
  type: TYPE_NORMAL
- en: A brief on the Sass mixin library
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Some CSS3 syntaxes are so complex that writing them can be really tedious work.
    And this is where mixins can be particularly useful. Fortunately, with Sass being
    so popular and supported by so many generous developers, we don't have to port
    all CSS3 syntax into Sass mixins on our own. Instead, we can simply employ Sass's
    mixin library that makes our work as a web developer more enjoyable.
  prefs: []
  type: TYPE_NORMAL
- en: The Sass library comes with a collection of useful mixins and functions (we
    will talk about functions shortly) that we can use right away out-of-the-box.
    There are dozens of popular libraries available, and one that we are going to
    use herein is called Bourbon ([http://bourbon.io/](http://bourbon.io/)).
  prefs: []
  type: TYPE_NORMAL
- en: Bourbon compiles a number of mixins in a library that simplifies the way we
    declare CSS3 syntax, including syntax that is still marked as experimental, such
    as `image-rendering`, `filter`, and the CSS3 `calc` function. Now, which do you
    think is easier and faster to write when it comes to specifying the Hi-DPI Media
    Query?
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Hi-DPI Media Query is used to measure the device pixel density, for which we
    can use it to deliver higher-resolution graphics on web pages, specifically on
    devices with hi-definition screens. The following are some references for further
    information on the subject.
  prefs: []
  type: TYPE_NORMAL
- en: High DPI Images for Variable Pixel Densities by Boris Smus ([http://www.html5rocks.com/en/mobile/high-dpi/](http://www.html5rocks.com/en/mobile/high-dpi/)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Towards A Retina Web by Reda Lemeden ([http://www.smashingmagazine.com/2012/08/20/towards-retina-web/](http://www.smashingmagazine.com/2012/08/20/towards-retina-web/)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Is the following standard syntax?
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'Or, will it be the following one with the Bourbon mixin?:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: Without spending years researching, we can commonly agree that using the mixin
    should be a lot easier to write, as well as easier to remember.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: As mentioned, in addition to CSS3 mixins, Bourbon also ships with a couple of
    Sass functions, such as Triangle, which allows us to create CSS-based triangles.
    However, I'm not going to mention all the bits that are there in the Bourbon library.
    Since the library collection will most likely be updated or revised along with
    the introduction of new CSS specifications, it is better to refer to the list
    on the official documentation page ([http://bourbon.io/docs/](http://bourbon.io/docs/)).
  prefs: []
  type: TYPE_NORMAL
- en: Creating and using a Sass function
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'A function is one piece of a feature that makes creating style rules more dynamic.
    A function in Sass is declared using the `@function` directive, which is then
    followed by the function name, a parameter with preferably its default value.
    In its simplest form, a Sass function may look as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'This function, however, won''t output anything yet. To generate a result of
    this function, we need to add a `@return` value. Given the preceding example,
    we want to output the default value parameter, which says `"hello"`. To do so,
    we write the `@return` value, which is then followed by `$parameter`, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'Use this function within a selector, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'Compile it, and you get the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'Customize the output by specifying a new value out of the default one, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'We will get a new output, as shown in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This example merely shows the basic functionality of a function. There are a
    lot more examples on how we can utilize it in real cases to build reusable code
    series. So, I recommend you head over to the following references for further
    advanced discussion and find more examples.
  prefs: []
  type: TYPE_NORMAL
- en: Using pure Sass functions to make reusable logic more useful ([http://thesassway.com/advanced/pure-sass-functions](http://thesassway.com/advanced/pure-sass-functions)).
  prefs: []
  type: TYPE_NORMAL
- en: A couple of Sass functions ([http://hugogiraudel.com/2013/08/12/sass-functions/](http://hugogiraudel.com/2013/08/12/sass-functions/)).
  prefs: []
  type: TYPE_NORMAL
- en: Manipulating color with Sass functions
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'One thing that I love about using CSS preprocessors such as Sass, is how easy
    it is to determine and alter colors. Sass, in this case, provides a bunch of built-in
    functions to manipulate colors seamlessly. The following is a list of a few Sass
    color functions for your reference, which may be useful to manipulate colors in
    the website later on:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Functions | Description | Example |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `lighten($color, $amount)` | Turns a color lighter by the specified amount.
    | `$black: #000000``lighten($black, 10%);`In this example, we lighten `$black`
    by 10 percent. The output is `#1a1a1a`. |'
  prefs: []
  type: TYPE_TB
- en: '| `darken($color, $amount)` | Turns a color darker than the specified amount.
    | `$white: #ffffff;``darken($white, 10%)`In this example, we darken `$white` by
    10 percent. The output will be `#e6e6e6`. |'
  prefs: []
  type: TYPE_TB
- en: '| `fade-out($color, $amount)` | Turns the color to be more transparent than
    the specified amount. | `$black: #000000;``fade-out($black, .5);`In this example,
    we change the `$black` color to be compiled into RGB format and set the transparency
    to 50 percent. The output is `rgba(0, 0, 0, 0.5)`. |'
  prefs: []
  type: TYPE_TB
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Please follow the Sass official documentation ([http://sass-lang.com/documentation/Sass/Script/Functions.html](http://sass-lang.com/documentation/Sass/Script/Functions.html))
    to find out the full list of the color functions available.
  prefs: []
  type: TYPE_NORMAL
- en: Useful Foundation's own function
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The Foundation framework comes with an array of its own functions. Foundation
    uses these functions to build its own default styles, and we can also use them
    to build our own. One such useful function therein is `rem-calc()`, which allows
    us to calculate the `rem` unit with less hassle.
  prefs: []
  type: TYPE_NORMAL
- en: Em and Rem
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The `rem` unit is a relative value that inherited concepts similar to `em`.
    Here is what Ian Yates expounded about the origin of `em` in his post ([https://webdesign.tutsplus.com/articles/taking-the-erm-out-of-ems--webdesign-12321](https://webdesign.tutsplus.com/articles/taking-the-erm-out-of-ems--webdesign-12321)):'
  prefs: []
  type: TYPE_NORMAL
- en: '*"Ems get their name from printing. Precisely when the term was first used
    is unclear, but as the uppercase M (pronounced emm) most closely represents the
    square printing block on which printing letters were placed, it came to lend its
    name to the measurement. Whatever the point size of the font in question, the
    block of the uppercase M would define the Em."*'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'But the problem with the `em` unit, as Jonathan Snook described in his post
    ([http://snook.ca/archives/html_and_css/font-size-with-rem](http://snook.ca/archives/html_and_css/font-size-with-rem)),
    is its compounding nature. Since the size is relative to its closest parent, in
    my experience the size output can be unpredictably frustrating at best; the size
    will be varying depending on where it is specified. Examine the following example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: This is where the `rem` unit comes in. The `rem` unit measures the calculation
    directly against the font size of `<html>`, the root element of an HTML document—thus,
    it is also dubbed as root `em`. Regardless of where the unit is specified, the
    result will be precise, consistent, and more importantly, easy to figure out (it's
    like the `px` unit, but it's relative).
  prefs: []
  type: TYPE_NORMAL
- en: 'The `rem-calc` function accepts both integer and length. Hence, the following
    code examples work:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'In this case, they will turn out to be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: Have a go hero – diving into Sass
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'There is a lot more about Sass than we are able to cover in this book, such
    as placeholder, conditional statement, and operators, just to name a few. Thankfully,
    there are enough good references and books that have covered Sass, as well as
    its supporting utilities in greater depth, into which you can dig into on your
    own. The following are some of my best recommendations:'
  prefs: []
  type: TYPE_NORMAL
- en: '*Sass and Compass for Designers*, *Ben Frain*, *Packt Publishing* ([https://www.packtpub.com/web-development/sass-and-compass-designers](https://www.packtpub.com/web-development/sass-and-compass-designers))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Sass for Web Designers*, *Dan Cederholm*, *A Book Apart* ([http://www.abookapart.com/products/sass-for-web-designers](http://www.abookapart.com/products/sass-for-web-designers))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Sass Way—tutorials and tips on using Sass ([http://thesassway.com/](http://thesassway.com/))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A dedicated category on web design tutorials and for covering anything related
    to Sass ([https://webdesign.tutsplus.com/categories/sass](https://webdesign.tutsplus.com/categories/sass))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Before we resume the work, let's end this section with a couple of quizzes,
    shall we?
  prefs: []
  type: TYPE_NORMAL
- en: Pop quiz – multiple parameters in Sass function
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In the preceding section, we discussed about Sass function, as well as showed
    you the simplest example out of it. In the example, we created a function with
    only one parameter. The fact is that we can add multiple parameters within a single
    Sass function.
  prefs: []
  type: TYPE_NORMAL
- en: Q1\. So, which among the following examples is the correct way to create a function
    with multiple parameters?
  prefs: []
  type: TYPE_NORMAL
- en: Each parameter is separated with a semicolon.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: Each parameter is separated with an addition operator.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: Each parameter is separated with a comma.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: Pop quiz – Sass color manipulation
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Q1\. There are lots of Sass functions built-in. In this section, we named three,
    `lighten()`, `darken()`, and `fade-out()`, which I think are sufficient to help
    us to decorate the website of this project. The `fade-out()` function has an alias
    that also gives us the same result. So, which of the following is the name alias
    for the fade-out() function?
  prefs: []
  type: TYPE_NORMAL
- en: '`transparentize($color, $amount)`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`transparency($color, $amount)`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`transparent($color, $amount)`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Project recap
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In [Chapter 7](part0068.xhtml#aid-20R681 "Chapter 7. A Responsive Website for
    Business with Foundation"), *A Responsive Website for Business with Foundation*,
    we installed Foundation and Foundation Icons, along with their dependencies (jQuery,
    Fastclick, Modernizr, and so on) through Bower ([http://bower.io/](http://bower.io/)).
    We also prepared the website assets, namely, the images, image icons, and the
    website logo. In the last section of the chapter, we created `index.html` for
    the website home page, and we also constructed the markup using a couple of new
    HTML5 tags. So, the files and folders that are currently in the working directory
    are shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Project recap](img/image00363.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Style sheet organizations
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Files that are still missing from our working directories are the style sheets
    to compose our customized styles for the website, and the Bourbon library that
    we briefly mentioned in the preceding section to provide us with some ready-to-use
    mixins and functions. This is what we are going to do in this section. We are
    going to create style sheets and organize them in a way to make them easily maintainable
    in the future.
  prefs: []
  type: TYPE_NORMAL
- en: Well, let's resume the work.
  prefs: []
  type: TYPE_NORMAL
- en: Time for action – organizing and compiling style sheets
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Perform the following steps right to the end to properly organize the style
    sheets and compile them into CSS.
  prefs: []
  type: TYPE_NORMAL
- en: 'We need to install Bourbon. Launch a terminal or the command prompt, and type
    the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: This command installs the Bourbon package through the Bower registry and registers
    it within the `bower.json` file of the project.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: I've discussed the `bower.json` file exclusively in this post ([https://webdesign.tutsplus.com/tutorials/quick-tip-what-to-do-when-you-encounter-a-bower-file--cms-21162](https://webdesign.tutsplus.com/tutorials/quick-tip-what-to-do-when-you-encounter-a-bower-file--cms-21162)),
    check it out!
  prefs: []
  type: TYPE_NORMAL
- en: Create new style sheets named `main.scss`, `responsive.scss`, and `styles.scss`
    in the `scss` folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The `_main.scss` style sheet is the one where we will put all our own style
    rules. We will use the `_responsive.scss` file to exclusively put in the media
    queries of the website. And the `styles.scss` file is where we will compile those
    style sheets together.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The underscore `_` that began the file name is a special notation that tells
    the Sass compiler not to directly compile the file.
  prefs: []
  type: TYPE_NORMAL
- en: Still within the `scss` folder, create two more style sheets. This time, name
    them `_config.scss` and `foundation.scss`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The `_config.scss` will contain a copy of all the variables used in Foundation,
    while `foundation.scss` will contain imported partials of Foundation style sheets.
    These copies will prevent us from directly modifying the original files, which
    will eventually be overridden when we update to the newest version.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, copy the whole content of the Foundation `_settings.scss` file to the
    `_config.scss` file that we recently created. In our case, the `_settings.scss`
    file is located in the `/components/foundation/scss/foundation/` directory.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Also, copy the whole content of Foundation's own `foundation.scss` and paste
    it to our own `foundation.scss` that we also recently created.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Then, we need to correct the path of the imported partials in our `foundation.scss`
    file. At this stage, all paths are pointing to the `foundation` folder, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: 'This certainly is incorrect because we don''t have a folder named `foundation`
    in the `scss` folder. Herein, we need to direct the path to the `components` folder
    instead, where the partials actually reside. So, change the path to be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: A comprehensive snippet of Foundation partial references can be found in the
    Gist ([http://git.io/ldITag](http://git.io/ldITag)).
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In Sass, we don't have to specify the `.scss` or `.sass` extension when it comes
    to importing external files. The Sass compiler is clever enough to determine the
    extension on its own. And this is also because a plain CSS is also a valid Sass.
  prefs: []
  type: TYPE_NORMAL
- en: Another path that we have to correct is the path referring to the Foundation,
    `_functions.scss`, which contains the `rem-calc()` function. Open the `_config.scss`
    file, and change the line `@import "foundation/functions";` to `@import "../../components/foundation/scss/foundation/functions";`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We are going to compile these style sheets into CSS using Koala. Launch Koala
    and add the working directory:![Time for action – organizing and compiling style
    sheets](img/image00364.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Within the style list in Koala, you won't find the SCSS style sheets with the
    underscore prefix. Koala, by default, ignores this file since it eventually won't
    be compiled into CSS.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: However, you should find the two primary style sheets of the project listed
    therein, namely, `styles.scss` and `foundation.scss`. Be sure that this output
    is set to the `css` folder, as shown in the following screenshot:![Time for action
    – organizing and compiling style sheets](img/image00365.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Then, make sure that the option of `Auto Compile` is checked so that they will
    be automatically compiled into CSS, as we've made changes. Also, check the `Source
    Map` option to make debugging the style sheet easier. Have a look at the following
    screenshot:![Time for action – organizing and compiling style sheets](img/image00366.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the **Compile** button of `styles.scss` and `foundation.scss` to compile
    them into CSS.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Open `index.html` and link both the compiled CSSs within the `<head>` tag,
    as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: '*What just happened?*'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We just installed Bourbon and put together several new style sheets to style
    the website. Then, we compiled them into CSS, and then linked them to `index.html`.
    Hence, as you can see in the following screenshot, the website is now starting
    to take place—with the Foundation default styles:'
  prefs: []
  type: TYPE_NORMAL
- en: '![What just happened?](img/image00367.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: The website's look and feel
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: With the style sheets organized and compiled, now comes the time to customize
    the website's styles. As it happens, we don't have to write every bit of the style
    rules on our own. In this case, since we are using a framework (Foundation), sometimes
    customizing the website styles can be as easy as changing the default value in
    a variable.
  prefs: []
  type: TYPE_NORMAL
- en: Without further ado, let's move on.
  prefs: []
  type: TYPE_NORMAL
- en: Time for action – build on the website
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Styling the website will involve multiple style sheets. Hence, follow the following
    steps carefully:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Import the following style sheets in `foundation.scss`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: That way, the variables, as well as the changes within `_config.scss`, will
    affect other component style sheets through Foundation. The `normalize` variable
    will standardize basic element styles, `social_foundicons.scss`; as you can guess,
    this allows us to apply Foundation's social icons.
  prefs: []
  type: TYPE_NORMAL
- en: 'Open `styles.scss` and import Bourbon, `_config.scss`, `main.scss`, and `responsive.scss`,
    as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: Then, I want to apply a custom font from Google Font simply because the custom
    fonts look better than the average font system, such as Arial or Times. Herein,
    I picked a font named Varela Round ([https://www.google.com/fonts/specimen/Varela+Round](https://www.google.com/fonts/specimen/Varela+Round)).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Open `index.html`, and add the font style sheet within the `<head>` tag, as
    follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: Now, we will change the `font-family` stack, which is currently specified as
    the Foundation default font, to use Varela Round.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'To do so, open `_config.scss`, uncomment the variable named `$body-font-family`,
    and insert `"Varela Round"`, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Sass commenting**'
  prefs: []
  type: TYPE_NORMAL
- en: Typically, commenting will cause the code compiler or the engine to ignore the
    code—like a browser. However, it is also often used as an inline document, explaining
    what the code does.
  prefs: []
  type: TYPE_NORMAL
- en: 'Every programming language has its own way to comment on code. In CSS, it will
    be this way:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: 'In Sass, we can either use the CSS way, as shown previously, or add `//`, as
    follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: When `//` is added at the beginning of the line, the compiler will completely
    ignore the line, and thus won't compile it.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will style each of the website sections. To begin with, we will focus on
    the website header, and then, subsequently down to the footer. Let''s start off
    by adding an image background. Open `_main.scss` and then add the following lines:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**CSS3 Background Size**'
  prefs: []
  type: TYPE_NORMAL
- en: 'Background size is a special CSS3 property that controls the background stretch.
    The value of the cover that we used in the preceding snippets will proportionally
    stretch the background image to entirely cover the container. Head to the following
    references for further assistance on the CSS3 Background Size:'
  prefs: []
  type: TYPE_NORMAL
- en: CSS Backgrounds and Borders Module Level 3 ([http://www.w3.org/TR/css3-background/#the-background-size](http://www.w3.org/TR/css3-background/#the-background-size))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Perfect Full Page Background Image* by Chris Coyier ([http://css-tricks.com/perfect-full-page-background-image/](http://css-tricks.com/perfect-full-page-background-image/))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Can I Use CSS3 Background Size? ([http://caniuse.com/#feat=background-img-opts](http://caniuse.com/#feat=background-img-opts))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The image, however, is currently hidden at the back of the background color
    that applies to the top bar and a section in which Foundation named it Panel ([http://foundation.zurb.com/docs/components/panels.html](http://foundation.zurb.com/docs/components/panels.html)),
    as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Time for action – build on the website](img/image00368.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Remove these background colors so that we can see through the background image.
    To do so, open the `_config.scss` file and uncomment the following lines:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: Change the value of the `$topbar-bg-color` variable from `#333` to `transparent`
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: 'Uncomment this following line, which specifies the panel''s background color:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, change the value to `transparent` as well:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, we can see the background image, which is shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Time for action – build on the website](img/image00369.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: From the preceding screenshot, it is evident that the top bar and the panel
    background color have been removed, but some of the menu items still have it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Let''s remove these background colors. In `_config.scss`, uncomment the following
    line:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: 'And change the value to use the value of the `$topbar-bg` variable, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: Save it and let a few seconds pass for the files to be compiled, and you should
    see now that the background color of those menu items are removed, as shown in
    the following screenshot:![Time for action – build on the website](img/image00370.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add `padding-top` to give more distance between the top bar and the upper boundary
    of the browser viewport:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: 'And now, as you can see, there is more breadth therein:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Time for action – build on the website](img/image00371.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: The left-half of the image is before we add the padding-top, and the right-half
    definitely is after we add the padding-top.
  prefs: []
  type: TYPE_NORMAL
- en: 'Give more padding at the top and bottom of the panel section; hence, we can
    view more of the background image. Nest the style rules under the `.startup-header`,
    as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: 'Add the logo image, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: 'Now we have the logo added, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Time for action – build on the website](img/image00372.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Hover over the menu links in the top bar, and you will find it with a dark background
    color, as follows:![Time for action – build on the website](img/image00373.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'This background color is not quite right when it comes to the website''s aesthetic
    as a whole, so let''s remove that. In `_config.scss`, uncomment the following
    lines:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, change the value to transparent by inheriting the value of the `$topbar-bg`
    variable, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: 'Turn the menu links to uppercase so that it looks slightly bigger. Set the
    variable named `$topbar-link-text-transform` in `_config.scss` from none to `uppercase`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: 'The next thing we will do is change the styles of the two buttons: `Login`
    and `Sign Up`. We will make it just a little bit more fashionable, and the following
    are all the new styles for these buttons; nest these lines under the `.startup-header`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, the buttons should look as shown in the following screenshot. Hover over
    the button, and you will see nice little transition effects that we added through
    the `transition()` mixin of Bourbon:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Time for action – build on the website](img/image00374.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: However, it's worth noticing that I consider this merely as decoration. It's
    up to you to customize the button styles.
  prefs: []
  type: TYPE_NORMAL
- en: 'With buttons on a transparent background, let''s make three menu link items
    on the left-hand side, namely, **PRICES**, **PRICING**, and **BLOG**, slightly
    transparent as well. To do so, uncomment and change the variable named `$topbar-link-color`
    in `_config.scss` to `fade-out(#fff, 0.3)`, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, let''s give the links a transition effect. Add the following lines in
    `_main.scss`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs: []
  type: TYPE_PRE
- en: Next, we will add a dark transparent layer on the header. By adding this dark
    layer, the text in the header can be more distinct over the background image.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following lines in `_main.scss`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs: []
  type: TYPE_PRE
- en: 'Add the following lines as our last touch for the header section:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, we have a nice header for the website, as you can see in the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Time for action – build on the website](img/image00375.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'With the website styled, we will move to the next section. Below the header,
    we have the feature section that contains a number of key features of our products
    and services. And these are all the styles for the feature section:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs: []
  type: TYPE_PRE
- en: 'In the preceding snippet, we remove the margin from the figure element that
    wraps the image icon. This will give the image icons figure more room to span,
    as you can see in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Time for action – build on the website](img/image00376.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Other than that, `margin-bottom`, as well as the padding we added in conjunction
    with it, simply gives this section more whitespace.
  prefs: []
  type: TYPE_NORMAL
- en: 'Below the feature section, we have the section that shows happy customers speaking.
    We call it the testimonial section. Add the following style rules to build on
    it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs: []
  type: TYPE_PRE
- en: 'Also, remove the `blockquote` element''s left-hand side border by changing
    the value of `$blockquote-border` in `_config.scss`, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE63]'
  prefs: []
  type: TYPE_PRE
- en: 'Note that the preceding styles are merely decoration. At this stage, this is
    how the testimonial section looks:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Time for action – build on the website](img/image00377.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Don't freak out, it's not broken. The remaining styles will be added through
    the Orbit Slider plugin once it is enabled. We will take a look at the steps for
    this shortly.
  prefs: []
  type: TYPE_NORMAL
- en: Next, we will style the price and plan tables. These are all the styles for
    the table price, and their main purpose is to give each table a distinct color.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE64]'
  prefs: []
  type: TYPE_PRE
- en: 'The footer section is bare and straightforward. There''s nothing prominent.
    There is just a bunch of style rules to make the footer look nicer, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE65]'
  prefs: []
  type: TYPE_PRE
- en: '*What just happened?*'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this section, we focused on the website''s appearance. We just added styles
    that eventually make the website look a lot nicer from the header and down to
    the footer. However, a few things are not workable at this stage, such as Orbit,
    and we have yet to test how the website looks in the smaller viewport size. So,
    that is exactly what we are going to address in the next section. This is how
    the website should now look at this stage:'
  prefs: []
  type: TYPE_NORMAL
- en: '![What just happened?](img/image00378.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Have a go hero – colors and creativities
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: I realize that good, bad, nice, and not nice are highly subjective. It all depends
    on individual preference and their degree of taste. So, if the website decoration,
    such as colors, fonts, and sizes, that we specified in the preceding steps are
    not up your alley, you can freely change them and add your own creativity.
  prefs: []
  type: TYPE_NORMAL
- en: Pop quiz – importing an external Sass style sheet
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Q1\. Hopefully, you followed the preceding steps fully through and paid attention
    to some of the minute details. We have imported a number of style sheets to compile
    them into a single style sheet. How do we make the Sass compiler ignore these
    imported style sheets so that the compiler won't compile them into a CSS file
    on its own?
  prefs: []
  type: TYPE_NORMAL
- en: Remove the extension file's extension in the import declaration.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add an underscore as a prefix in the import declaration.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add an underscore as a prefix in the file name.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Fine-tuning the website
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As mentioned, there are a couple of things we need to do before we call the
    website done. First, we are going to enable Orbit and the toggle function of the
    top bar, and optimize the website styles, such as the positioning and the sizing,
    for smaller viewport size. It's time for action again.
  prefs: []
  type: TYPE_NORMAL
- en: Time for action – compiling JavaScript and styling the website with media queries
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Perform the following steps to compile the JavaScript files and optimize the
    website for a small viewport size:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a new JavaScript file in the `assets/js` directory named `foundation.js`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In `foundation.js`, import the following JavaScript files:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE66]'
  prefs: []
  type: TYPE_PRE
- en: Via Koala, compile `foundation.js`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Then, open `index.html` and add the following lines right before `</body>`
    to enable the Orbit Slider functionalities:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE67]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, we will refine the website layout for smaller viewport viewing with media
    queries. To do so, we need to uncomment the variables that define the media query
    ranges used in Foundation, so that we can use them in our style sheets as well:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE68]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'We can utilize these variables within our own style sheets, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`@media #{$small-up} {`'
  prefs: []
  type: TYPE_NORMAL
- en: '`}`'
  prefs: []
  type: TYPE_NORMAL
- en: Now, we will define a couple of style rules through these media queries to adjust
    the website's styles, particularly the sizing, positioning, and whitespace.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: And these are all the style rules to add in `_responsive.scss`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE69]'
  prefs: []
  type: TYPE_PRE
- en: '*What just happened?*'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We just compiled the JavaScript to enable the Orbit Slider and the toggle function
    of the top bar. And we also refined the website layout for a smaller viewport
    size. And the following screenshot shows how the website looks in a small viewport:'
  prefs: []
  type: TYPE_NORMAL
- en: '![What just happened?](img/image00379.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: It is nice, isn't it?
  prefs: []
  type: TYPE_NORMAL
- en: Have a go hero – remove unnecessary Foundation components
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We include all the Foundation components, even ones we are not using in the
    website. Hence, it is better to remove all the styles which do not give an advantage
    to the website. Open `_foundation.scss`, and comment the `@import` components
    that we do not need (at least at this moment) and recompile the style sheets.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We just finished working on the third project by building a responsive website
    for a new start-up company with Foundation. There are a lot of things we learned
    along the way to the end of this project, particularly about Sass. Sass is a powerful
    CSS preprocessor that allows us to compose styles in a more efficient and flexible
    form. We have learned to use variables, interpolation, mixins, and a couple of
    other Sass features.
  prefs: []
  type: TYPE_NORMAL
- en: Honestly speaking, the websites, including ones that we built in the previous
    chapters, are easy to build. Our work herein mostly involves making up the website
    appearance, such as the coloring and the sizing. Everything that matters most
    to make the website responsive, such as the Grid for example, has been covered
    by the frameworks we are using (Foundation, Bootstrap, and Responsive.gs).
  prefs: []
  type: TYPE_NORMAL
- en: To conclude, we hope the projects that we present in this book are a great start
    for you to build responsive websites on your own.
  prefs: []
  type: TYPE_NORMAL
