- en: Setting Up Your Development Environment
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let's start with questioning the premise of this entire book, Angular itself.
    Why learn Angular, but not React, Vue, or some other framework? First, I won't
    be making an argument against learning any new tool. I believe that every tool
    has its place and purpose. Becoming somewhat proficient in React or Vue can only
    help further your understanding of Angular. **Single Page Application** (**SPA**)
    frameworks such as Backbone or Angular have grabbed my full attention since 2012,
    when I realized server-side rendered templates are impossible to maintain and
    cause very expensive rewrites of software systems. If you're intent on creating
    maintainable software, decoupling of APIs and business logic from the **user interface**
    (**UI**) is the prime directive you must abide by.
  prefs: []
  type: TYPE_NORMAL
- en: The question is, why get good at Angular? I have found that Angular neatly fits
    the Pareto principal. It has become a mature and evolving platform, allowing you
    to achieve 80% of tasks with 20% of the effort. Furthermore, starting with version
    4, in **Long Term Support** (**LTS**) until October 2018, every major release
    is supported for 18 months, creating a continuum of learning, staying up-to-date
    and deprecating old features. From the perspective of a full-stack developer,
    this continuum is invaluable, since your skills and training will remain useful
    and fresh for many years to come.
  prefs: []
  type: TYPE_NORMAL
- en: This first chapter will help you and your team members create a consistent development
    environment. It can be tough for beginners to create the correct development environment,
    which is essential for a frustration-free development experience. For seasoned
    developers and teams, achieving a consistent and minimal development environment
    remains a challenge. Once achieved, such a development environment helps avoid
    many IT-related issues, including ongoing maintenance, licensing, and upgrade
    costs.
  prefs: []
  type: TYPE_NORMAL
- en: Instructions on installing GitHub Desktop, Node.js, Angular CLI, and Docker
    will be a good reference from absolute beginners all the way to seasoned teams,
    along with strategies to automate and ensure the correct and consistent configuration
    of your development environment.
  prefs: []
  type: TYPE_NORMAL
- en: Feel free to skip this chapter if you already have a robust development environment
    setup; however, beware that some of the environmental assumptions declared in
    this chapter may result in some instructions not working for you in later chapters.
    Come back to this chapter as a reference if you run into issues or need to help
    a colleague, pupil, or friend set up their development environment.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, you will learn the following:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Working with CLI package managers to install and update software:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Chocolatey on Windows 10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Homebrew on macOS X
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Using scripting to automate installation using:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Powershell on Windows 10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bash on macOS X
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Achieving a consistent and cross-platform development environment
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'You should be familiar with these:'
  prefs: []
  type: TYPE_NORMAL
- en: JavaScript ES2015+
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Frontend development basics
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: RESTful APIs
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The supported operating system are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Windows 10 Pro v1703+ with PowerShell v5.1+
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: macOS Sierra v10.12.6+ with Terminal (Bash or Oh My Zsh)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Most of the suggested software also works on Linux systems, but your experience
    may vary
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The suggested cross-platform software is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Node 8.10+ (except non-LTS versions)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: npm 5.7.1+
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: GitHub Desktop 1.0.0+
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Visual Studio Code v1.16.0+
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Google Chrome 64+
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: CLI package managers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Installing software through a **Graphical User Interface** (**GUI**) is slow
    and difficult to automate. As a full-stack developer, whether you're a Windows
    or a Mac user, you must rely on **Command-Line Interface** (**CLI**) package managers
    to efficiently install and configure the software you will be depending on. Remember,
    anything that can be expressed as a CLI command can also be automated.
  prefs: []
  type: TYPE_NORMAL
- en: Install Chocolatey for Windows
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Chocolatey is a CLI-based package manager for Windows, which can be used for
    automated software installation. To install Chocolatey on Windows, you will need
    to run an elevated command shell:'
  prefs: []
  type: TYPE_NORMAL
- en: Launch the Start menu
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Start typing in `PowerShell`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You should see Windows PowerShell Desktop App as a search result
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Right-click on Windows PowerShell and select Run as Administrator
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: This will trigger a User Account Control (UAC) warning; select Yes to continue
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Execute the following command in PowerShell to install the Chocolatey package
    manager:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Verify your Chocolatey installation by executing `choco`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'You should see a similar output, as shown in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](Images/4ce21c0f-3f85-4441-bf36-adfef32776ab.png)Successful installation
    of ChocolateyAll subsequent Chocolatey commands must also be executed from an
    elevated command shell. Alternatively, it is possible to install Chocolatey in
    a non-administrator setting that doesn''t require an elevated command shell. However,
    this will result in a non-standard and less secure development environment, and
    certain applications installed through the tool may still require elevation.'
  prefs: []
  type: TYPE_NORMAL
- en: 'For more information, refer to: [https://chocolatey.org/install](https://chocolatey.org/install).'
  prefs: []
  type: TYPE_NORMAL
- en: Installing Homebrew for macOS
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Homebrew is a CLI-based package manager for macOS, which can be used for automated
    software installation. To install Homebrew on macOS, you will need to run a command
    shell.
  prefs: []
  type: TYPE_NORMAL
- en: Launch Spotlight Search with ⌘ + Space
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Type in `terminal`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Execute the following command in the Terminal to install the Homebrew package
    manager:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Verify your Homebrew installation by executing `brew`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'You should see a similar output, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](Images/3e8bd1f9-2ac6-4f22-9df8-4407185798e9.png)Successful installation
    of Homebrew'
  prefs: []
  type: TYPE_NORMAL
- en: 'To enable access to additional software, execute the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'For more information, check out: [https://brew.sh/](https://brew.sh/).'
  prefs: []
  type: TYPE_NORMAL
- en: Git and GitHub Desktop
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This section aims to establish a best practice Git configuration that''s suitable
    for the widest audience possible. In order to make the best use of this section
    and subsequent chapters of this book, it is presumed that you, the reader, have
    the following prerequisites fulfilled:'
  prefs: []
  type: TYPE_NORMAL
- en: An understanding of what Source Code Management and Git are
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Create a free account on [GitHub.com](https://github.com/)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Why use GitHub?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If you are a Git user, chances are that you also use an online repository, such
    as GitHub, Bitbucket, or GitLab. Each repository has a free-tier for open source
    projects, coupled with robust websites with varying feature sets, including on-premise
    Enterprise options that you can pay for. GitHub, with 38+ million repositories
    hosted in 2016, is by far the most popular online repository. GitHub is widely
    considered a baseline utility that will never go offline by the community.
  prefs: []
  type: TYPE_NORMAL
- en: Over time, GitHub has added many rich features that have transformed it from
    a mere repository to an online platform. Throughout this book, I’ll be referencing
    GitHub features and functionalities, so you can leverage its capabilities to transform
    the way you develop, maintain, and release software.
  prefs: []
  type: TYPE_NORMAL
- en: Why use GitHub Desktop?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: It is true that the Git CLI tool is powerful, and you will be just fine if you
    stick to it. However, we, full-stack developers, are worried about a variety of
    concerns. In your rush to complete the task at hand, you can easily ruin your
    and sometimes your team's day, by following bad or incomplete advice.
  prefs: []
  type: TYPE_NORMAL
- en: 'See the following screenshot of such advice from StackOverflow ([http://stackoverflow.com/questions/1125968/force-git-to-overwrite-local-files-on-pull](http://stackoverflow.com/questions/1125968/force-git-to-overwrite-local-files-on-pull)):'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/ecd0f401-456e-472a-9729-fe20f4479c30.png)'
  prefs: []
  type: TYPE_IMG
- en: If you execute the preceding command, be prepared to lose uncommitted local
    changes. Unfortunately, novice users have a tendency to follow the simplest and
    most direct instructions, potentially leading to lost work. If you think your
    past commits are safe, think twice! When it comes to Git, if you can imagine it,
    it can be done through the CLI.
  prefs: []
  type: TYPE_NORMAL
- en: Thankfully, with GitHub, you can protect branches and implement the GitHub workflow,
    which entails branching, committing, merging, updating, and submitting pull requests.
    The protections and the workflow help prevent harmful Git commands from making
    irreversible changes and enable a level of quality control so that your team remains
    productive. Performing all of these actions through the CLI, especially when there
    are merge conflicts, can get complicated and tedious.
  prefs: []
  type: TYPE_NORMAL
- en: 'For a more in-depth understanding of the benefits and pitfalls of Git and GitHub,
    you can read my 2016 article on the topic at: [Bit.ly/InDepthGitHub](http://bit.ly/InDepthGitHub).'
  prefs: []
  type: TYPE_NORMAL
- en: Installing Git and GitHub Desktop
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: GitHub Desktop provides an easy-to-use GUI to execute the GitHub workflow, in
    a manner that is consistent across Windows and macOS. Consistency is highly valuable
    when on-boarding new or junior team members or if you're not a frequent contributor
    to the code base.
  prefs: []
  type: TYPE_NORMAL
- en: 'Execute the installation command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'For Windows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'For macOS:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Verify your Git installation by executing `git --version` and observe the version
    number returned
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You will need to restart your Terminal after the installation of a new CLI tool.
    However, you can avoid relaunching your Terminal and save some time by refreshing
    or sourcing your environment variables. On Windows, execute `refreshenv`; on macOS,
    execute `source ~/.bashrc` or `source ~/.zshrc`.
  prefs: []
  type: TYPE_NORMAL
- en: Verify your GitHub Desktop installation by launching the application
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Sign in to [https://github.com/](https://github.com/) on GitHub Desktop
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Once you have created a repository, you can launch the application from your
    Terminal by executing this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'If you are already on the correct folder, you can type in the following command
    instead:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'For Windows, on GitHub Desktop launch, if you get stuck on the Sign in screen,
    close the application, relaunch it as an administrator, complete the setup, and
    then you will be able to use it normally, without having to launch it as an administrator
    again. For more information, refer to: [https://desktop.github.com/](https://desktop.github.com/).'
  prefs: []
  type: TYPE_NORMAL
- en: Node.js
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This section aims to establish a best practice JavaScript development environment.
    To make the best use of this book, it is presumed that you have the following
    prerequisites fulfilled:'
  prefs: []
  type: TYPE_NORMAL
- en: Awareness of the modern JavaScript ecosystem and tools
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'NodeJS''s site: [https://nodejs.org](https://nodejs.org)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Npm''s site: [https://www.npmjs.com](https://www.npmjs.com)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Angular''s site: [https://angular.io](https://angular.io)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Legacy AngularJS''s site: [https://angularjs.org/](https://angularjs.org/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Yarn''s site: [https://yarnpkg.com](https://yarnpkg.com)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'React''s site: [https://facebook.github.io/react](https://facebook.github.io/react)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Node.js is JavaScript that runs anywhere. It's an open source project that aimed
    to run JavaScript on the server, built on Google Chrome's V8 JavaScript engine.
    In late 2015, Node.js stabilized and announced enterprise-friendly 18 month LTS
    cycles that brought predictability and stability to the platform, paired with
    a more frequently updated, but more experimental, Latest branch. Node also ships
    bundled with npm, the Node package manager, and as of 2018, npm is the largest
    repository of JavaScript packages in the world.
  prefs: []
  type: TYPE_NORMAL
- en: 'For a more detailed look into Node''s history, read my two-part article on
    Node at: [Bit.ly/NodeJSHistory](http://bit.ly/NodeJSHistory).'
  prefs: []
  type: TYPE_NORMAL
- en: You may have heard of yarn and how it's faster or better than npm. As of npm
    5, which ships bundled with Node 8, npm is more feature rich, easier to use and
    on par with yarn in terms of performance. Yarn is published by Facebook, which
    also created the React JavaScript UI library. It must be noted that yarn relies
    on the npm repository, so whichever tool you use, you get access to the same library
    of packages.
  prefs: []
  type: TYPE_NORMAL
- en: Existing Node.js Installation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If you installed Node.js before, when installing a new version of Node using
    choco or brew, ensure that you read the command outputs carefully. Your package
    manager may return caveats or additional instructions to follow, so you can successfully
    complete the installation.
  prefs: []
  type: TYPE_NORMAL
- en: It is also highly likely that your system or folder permissions have been edited
    manually in the past, which may interfere with a frustration-free operation of
    Node. If the following commands do not resolve your issues, use the GUI installer
    from Node's site as a last resort.
  prefs: []
  type: TYPE_NORMAL
- en: Regardless, you must take care to uninstall all global tools that were installed
    using `npm -g` previously. With every major Node version, there's a chance that
    native bindings between your tool and Node have been invalidated. Further, global
    tools rapidly fall out of date and project-specific tools quick go out of sync.
    As a result, installing tools globally is now an anti-pattern that has been replaced
    with better techniques, which are covered in the next section and under the Angular
    CLI section in [Chapter 2](312e0dbe-54ac-45c6-97c7-f41c98723919.xhtml),* Create
    a Local Weather Web Application*.
  prefs: []
  type: TYPE_NORMAL
- en: To see a list of your globally install packages, execute `npm list -g --depth
    0`. To uninstall a global package, execute `npm uninstall -g package-name`. I
    would recommend that you uninstall all globally installed packages and restart
    from scratch with the suggestions provided in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Installing Node.js
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This book will presume that you're using Node 8.4 or a later version. Odd numbered
    versions of Node are not meant to be long lived. 6.x.x, 8.x.x, 10.x.x, and so
    on are okay, but avoid 7.x.x, 9.x.x, and so on, at all costs.
  prefs: []
  type: TYPE_NORMAL
- en: 'Execute the installation command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'For Windows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'For macOS:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Verify installation of Node by executing `node -v`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Verify npm by executing `npm -v`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note that you should never upgrade your npm version using `npm install -g npm`
    on Windows, as highlighted in [Chapter 4](374c123d-2621-42e2-b301-ed67c9c7d708.xhtml), *Staying
    Up to Date with Angular Updates*. It is highly recommended that you use the `npm-windows-upgrade` npm
    package.
  prefs: []
  type: TYPE_NORMAL
- en: 'The npm repository contains numerous useful and mature CLI commands that are
    often cross-platform. Listed here are the ones I rely on frequently and choose
    to install globally for performance reasons:'
  prefs: []
  type: TYPE_NORMAL
- en: '`npx`: Executes CLI tools by downloading the latest version on demand or project-specific
    local `node_modules `folder. It ships with npm 5 and will allow you to run code
    generators that frequently update without a global install.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`rimraf`: The Unix command `rm -rf`, but works on Windows as well. Very useful
    in deleting the `node_modules` folder, especially when Windows is unable to do
    so due to the nested folder structure.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`npm-update`: Analyzes your project folder and reports on which package have
    newer versions or not, with the option to be able to update all of them, if you
    so wish.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`n`: Dead easy to tool to switch between versions of Node quickly, without
    having to remember the specific version number. Unfortunately, it only works on
    macOS/Linux.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`http-server`: Simple, zero-configuration command-line HTTP server, which is
    a great way to locally test static HTML/CSS pages or even the dist folder of your
    Angular or React project.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`npm-windows-upgrade`: Necessary to upgrade npm on Windows.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Visual Studio Code
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Visual Studio Code** (**VS Code**) is one of the best code editors/IDEs out
    there. It''s free and it''s cross-platform. The remarkable thing is that VS Code
    has the lightning fast performance of a code editor, think NotePad++ or Sublime
    Text, but the feature set and conveniences of costly IDEs, think Visual Studio
    or WebStorm. For JavaScript development, this speed is essential and is a tremendous
    quality-of-life improvement for a developer, who frequently switches back and
    forth between different projects. VS Code brings together an integrated terminal,
    easy-to-use extension system, transparent settings, excellent search and replace
    functionalities, and, in my opinion, the best Node.js debugger that exists.'
  prefs: []
  type: TYPE_NORMAL
- en: Installing Visual Studio Code
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: For Angular development, this book will be leveraging VS Code. It is highly
    recommended that you also use VS Code.
  prefs: []
  type: TYPE_NORMAL
- en: 'Execute the installation command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'For Windows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'For macOS:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: One of the best features of Visual Studio Code is that you can also launch it
    from the CLI. If you're in a folder that you'd like to be editing, simply execute
    `code .` or a particular file by executing `code ~/.bashrc` or `code readme.md`.
  prefs: []
  type: TYPE_NORMAL
- en: Verify install by launching Visual Studio Code
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Navigate to a folder and execute `code .`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: This will open up a new VS Code window with the Explorer displaying the contents
    of the current folder
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: For more information, refer to [https://code.visualstudio.com](https://code.visualstudio.com).
  prefs: []
  type: TYPE_NORMAL
- en: Automation for Windows and macOS
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'At the beginning of the chapter, I proclaimed a*nything that can be expressed
    as a CLI command can also be automated.* Throughout the setup process, we have
    ensured that every tool being used was set up and their functionality verifiable
    through a CLI command. This means we can easily create a PowerShell or bash script
    to string these commands together and ease the task of setting up and verifying
    new environments. In fact, I have created a rudimentary implementation of these
    scripts, which you may download from the `Chapter 1` folder of the GitHub Repository
    for this book:'
  prefs: []
  type: TYPE_NORMAL
- en: Navigate to [https://github.com/duluca/web-dev-environment-setup](https://github.com/duluca/web-dev-environment-setup) to
    find the scripts
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Execute `install-windows-deps.ps1` in PowerShell to install and verify dependencies
    on Windows
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Execute `install-mac-deps.sh` in Terminal to install and verify dependencies
    on macOS
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The harsh reality is that these scripts do not represent a very capable or resilient
    solution. Scripts can't be executed or managed remotely, and they can't easily
    recover from errors or survive machine boot cycles. In addition, your IT requirements
    may be above and beyond what is covered here.
  prefs: []
  type: TYPE_NORMAL
- en: If you deal with large teams and frequent turnover, an automation tool will
    pay dividends handsomely, whereas if you're on your own or part of a smaller,
    stable team, it will be vastly overkill. I encourage you to explore tools such
    as Puppet, Chef, Ansible, and Vagrant to help you decide which one may best fit
    your needs or if a simple script is just good enough.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you mastered the use of CLI-based package managers for both
    Windows and macOS to speed up and automate the set up of development environments
    for you and your colleagues. By reducing variance from one developer's environment
    to the next, your team can overcome any individual configuration issue more easily
    and remain focused on the execution of the task at hand more often. With a collective
    understanding of a common environment, no single individual on the team will carry
    the burden of having to help troubleshoot everyone else's issues. As a result,
    your team will be more productive. By leveraging more sophisticated and resilient
    tools, mid-to-large sized organizations will be able to achieve great savings
    in their IT budgets.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, you will become familiar with the new Angular platform,
    optimize your web development environment, leverage Kanban using Waffle and GitHub
    issues, learn Angular fundamentals to build a simple web app with a full-stack
    architecture in mind, and get introduced to reactive programming with RxJS.
  prefs: []
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The article on Automating the Setup of the Local Developer Machine by Vishwas
    Parameshwarappa is a great place to start for using Vagrant. You can find the
    article at [Red-gate.com/simple-talk/sysadmin/general/automating-setup-local-developer-machine](https://www.red-gate.com/simple-talk/sysadmin/general/automating-setup-local-developer-machine).
  prefs: []
  type: TYPE_NORMAL
