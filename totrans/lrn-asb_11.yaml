- en: Building Out a VMware Deployment
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that we know how to launch networking and services in AWS, we will now discuss
    deploying a similar setup in a VMware environment and also talk through the core
    VMware modules.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will:'
  prefs: []
  type: TYPE_NORMAL
- en: Quickly introduce VMware
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Review the Ansible VMware modules
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Work through an example playbook that launches several virtual machines
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we are going to be discussing various components of the VMware
    family of products and how you can interact with them using Ansible. While there
    is an example playbook in this chapter, it may not be easily transferable to your
    installation. Because of this, it is not recommended that you use any of the examples
    in this chapter without first updating them.
  prefs: []
  type: TYPE_NORMAL
- en: An introduction to VMware
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: VMware has a nearly 20-year history, from a stealth start-up to being owned
    by Dell and acquired by EMC, with a revenue of $7.92 billion. There are around
    30 products currently available in the VMware product portfolio; the most commonly
    known ones are its hypervisors, of which there are two different types.
  prefs: []
  type: TYPE_NORMAL
- en: The first hypervisor, VMware ESXi, is a type 1 that runs directly on hardware
    using the instruction sets found in most modern 64-bit Intel and AMD CPUs. Its
    original type 2 hypervisor does not require virtualization instructions to be
    present within the CPU like they need to be in type 1\. It was formally known
    as GSX; this hypervisor pre-dates the type 1 hypervisor, meaning that it can support
    much older CPUs.
  prefs: []
  type: TYPE_NORMAL
- en: VMware is extremely commonplace in most enterprises; it allows administrators
    to quickly deploy virtual machines across numerous standard x86-based hardware
    configurations and types.
  prefs: []
  type: TYPE_NORMAL
- en: The VMware modules
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As already mentioned, there are around 30 products in the VMware range; these
    cover everything from hypervisors to virtual switches, virtual storage, and several
    interfaces for interacting with your VMware-based hosts and virtual machines.
    In this section, we will cover the core modules that ship with Ansible to manage
    all aspects of your VMware estate.
  prefs: []
  type: TYPE_NORMAL
- en: I have tried to split them into logical groups and, for each of the groups,
    will give a brief explanation of the product the modules are targeting.
  prefs: []
  type: TYPE_NORMAL
- en: Requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The modules all have one thing in common: they all require a Python module
    called `PyVmomi` to be installed. To install this, run the following `pip` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: This module contains the VMware vSphere API Python bindings, and without it,
    the modules we are going to cover in this chapter will not be able to interact
    with your VMware installation.
  prefs: []
  type: TYPE_NORMAL
- en: While the modules in this chapter have been tested with vSphere 5.5 to 6.5,
    you may find that some of the older modules have some problems with newer versions
    of vSphere.
  prefs: []
  type: TYPE_NORMAL
- en: vCloud Air
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: vCloud Air was VMware's **Infrastructure as a Service** (**IaaS**) offering,
    I say *was* because the vCloud Air business unit and the team responsible for
    the service was acquired by French hosting and cloud company OVH from VMware in
    mid-2017\. There are three Ansible modules which offer direct support for vCloud
    Air, as well as **VMware vCloud Hybrid Service** (**vCHS**) and **VMware vCloud
    Director** (**vCD**).
  prefs: []
  type: TYPE_NORMAL
- en: The vca_fw module
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This module enables you to add and remove firewall rules from a vCloud Air
    gateway. The following example shows you how to add a rule allowing SSH traffic:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Notice how we are passing a `service_type`; this could be `vca`, `vcd`, or `vchs`.
  prefs: []
  type: TYPE_NORMAL
- en: The vca_nat module
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This module allows you to manage the **network address translation** (**NAT**)
    rules. In the following example, we are asking all traffic that hits port `2222`
    on the public IP address of `123.123.123.123` to be forwarded to port `22` on
    the virtual machine with an IP address of `192.0.10.20`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'This means that to access SSH on the virtual machine `192.0.10.20` from our
    external network, we would need to run something like the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Assuming we had the correct firewall rules in place, we should be routed through
    the `192.0.10.20` virtual machine.
  prefs: []
  type: TYPE_NORMAL
- en: The vca_vapp module
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This module is used to both create and manage vApps. A vApp is one or more
    virtual machines which is combined to offer an application:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: The previous example is a really basic example of how you would use the `vca_vapp`
    module to ensure that there is a vApp called `Example` present and powered on.
  prefs: []
  type: TYPE_NORMAL
- en: VMware vSphere
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: VMware vSphere is a suite of software from VMware which is made up of several
    VMware components. This is where VMware can get a little confusing as VMware vSphere
    is made up of VMware vCentre and VMware ESXi, each of which has their own Ansible
    modules as well, and on the face of it, they appear to accomplish similar tasks.
  prefs: []
  type: TYPE_NORMAL
- en: The vmware_cluster module
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This module allows you to manage your VMware vSphere cluster. A VMware vSphere
    cluster is a collection of hosts, which when clustered together share resources,
    allowing you to add **high availability** (**HA**) and also launch a **Distributed
    Resource Scheduler** (**DRS**) which manages the placement of workloads within
    your cluster:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: The preceding code would loop through a list of hosts, usernames, and passwords
    to create a cluster.
  prefs: []
  type: TYPE_NORMAL
- en: The vmware_datacenter module
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'A VMware vSphere data center is the name given to the collection of physical
    resources, hosts, storage, and networking which power your cluster:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: The previous example adds the hosts listed in `vsphere_hosts` to the `my_datacenter`
    VMware vSphere data center.
  prefs: []
  type: TYPE_NORMAL
- en: The vmware_vm_facts module
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This module can be used to gather facts on either virtual machines or templates
    which are running in your VMware vSphere cluster:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: The previous example gathers information on just the virtual machines that have
    been created with our cluster and registers the results as the `vm_facts` variable.
    If we wanted to find information on just the templates, we could update `vm_type`
    to template, or we could list all virtual machines and templates by updating `vm_type`
    to all.
  prefs: []
  type: TYPE_NORMAL
- en: The vmware_vm_shell module
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This module can be used to connect to a virtual machine using VMware and to
    run a shell command. At no point does Ansible need to connect to the virtual machine
    using a network-based service such as SSH, making it useful for configuring VMs
    before they are on the network:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'The previous example connects to a VM called `example_vm`, which is stored
    in the `my_vms` folder at the root of the `my_datacenter` data center. Once connected
    using the username and password we provide, it runs the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: In the `/tmp` folder on the VM, the output of running the command is then registered
    as `shell_results` so that we can use it later.
  prefs: []
  type: TYPE_NORMAL
- en: The vmware_vm_vm_drs_rule module
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'With this module, you can configure VMware DRS Affinity rules. These allow
    you to control the placement of virtual machines within your cluster:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: In the previous example, we are creating a rule that will result in the VMs
    `example_vm` and `another_example_vm` never running on the same physical host.
  prefs: []
  type: TYPE_NORMAL
- en: The vmware_vm_vss_dvs_migrate module
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This module migrates the named virtual machine from standard vSwitches, which
    are tied to a single host, to a distributed vSwitch that''s available across your
    cluster:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: As you can see, we are moving the `example_vm` from the standard vSwitch to
    the distributed vSwitch called `example_portgroup`.
  prefs: []
  type: TYPE_NORMAL
- en: The vsphere_copy module
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This module has a single purpose—to copy a local file to a remote data store:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: As you can see, we are copying the file from `/path/to/local/file` to `path/to/remove/file`
    in the `my_datastore` data store which is hosted in the `my_datacenter` data center.
  prefs: []
  type: TYPE_NORMAL
- en: The vsphere_guest module
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This module has been deprecated and will be removed in Ansible 2.9; it is recommended
    you use the `vmware_guest` module instead.
  prefs: []
  type: TYPE_NORMAL
- en: VMware vCentre
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: VMware vCentre is an important component of the VMware vSphere suite; it enables
    the clustering of features such as vMotion, the VMware Distributed Resource Scheduler,
    and VMware High Availability.
  prefs: []
  type: TYPE_NORMAL
- en: The vcenter_folder module
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This module enables vCenter folder management. For example, the following sample
    creates a folder for your virtual machines:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'Here is an example of creating a folder for your hosts:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: The vcenter_license module
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This module lets you add and remove VMware vCenter licenses:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: The vmware_guest module
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This module allows you to launch and manage virtual machines within your VMware
    cluster; the following example shows how you would launch a VM using a template:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: As you can see, we have quite a lot of control over the VM and how it is configured.
    There are separate sections for the hardware, network, and storage configuration;
    we will look at this module in a little more detail at the end of this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: The vmware_guest_facts module
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This module gathers information on already created VMs:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: The previous example gathers lots of information on the machine we defined in
    the previous section and registers the information as a variable so that we can
    use it elsewhere in our playbook run.
  prefs: []
  type: TYPE_NORMAL
- en: The vmware_guest_file_operation module
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This module was introduced in Ansible 2.5; it allows you to add and fetch files
    from a VM without the need for the VM to be on a network. It also allows you to
    create folders within the VM. The following example creates a directory within
    the VM:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'The following example copies a file called `config.zip` from our Ansible host
    to the directory created previously:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: The vmware_guest_find module
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We know the name of the folder in which the VM has been running. If we didn''t,
    or if it changed for any reason, we could use the `vmware_guest_find` module to
    dynamically discover the location:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: The name of the folder will be registered as `vm_folder`.
  prefs: []
  type: TYPE_NORMAL
- en: The vmware_guest_powerstate module
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This module is self-explanatory; it is used to manage the power stage of your
    VM. The following example power cycles a VM:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'You can also schedule changes to the power state. The following example powers
    down the VM at 9 a.m. on the 1st April 2019:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: Not that I would ever do something like that!
  prefs: []
  type: TYPE_NORMAL
- en: The vmware_guest_snapshot module
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This module allows you to manage your VM snapshots; for example, the following
    creates a snapshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'As you can see from the previous example, this snapshot is being taken because
    we are about to patch the VM. If the patching goes as expected, then we can run
    the following task:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'If nothing goes as planned and the patching breaks our VM, then not to worry,
    we have a snapshot we can revert to:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: Fingers crossed that you never have to revert to a snapshot (unless it is planned).
  prefs: []
  type: TYPE_NORMAL
- en: The vmware_guest_tools_wait module
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The final module of this section is another self-explanatory one; it simply
    waits for VMware tools to become available and then gathers facts on the machine:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: VMware tools is an application that runs inside the VM. Once it starts, it allows
    VMware to interact with the VM, allowing modules such as `vmware_guest_file_operation`
    and `vmware_vm_shell` to function.
  prefs: []
  type: TYPE_NORMAL
- en: VMware ESXi
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: At the heart of most VMware installations is a number of VMware ESXi hosts.
    VMware ESXi is the type 1 hypervisor that enables VMs to run. Ansible provides
    several modules that allow you to configure and interact with your VMware ESXi
    hosts.
  prefs: []
  type: TYPE_NORMAL
- en: The vmware_dns_config module
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This module lets you manage the DNS aspects of your ESXi host; it lets you
    set the hostname, domain, and the DNS resolvers:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: In the previous example, we are setting the FQDN of the host to be `esxi-host-01.my-domain.com`
    and also configuring the host to use Google public DNS resolvers.
  prefs: []
  type: TYPE_NORMAL
- en: The vmware_host_dns_facts module
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'A simple module that gathers facts on the DNS configuration of your VMware
    ESXi hosts follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: The vmware_host module
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'You can use this module to attach your ESXi host to a vCenter:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'You can also use the module to reattach a host to your vCenter cluster:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'You can also remove a host from your vCenter cluster:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: The vmware_host_facts module
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'As you may have guessed, this module gathers facts about the VMware ESXi hosts
    within your vSphere or vCenter cluster:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: The vmware_host_acceptance module
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'With this module, you can manage the acceptance level of your VMware ESXi host.
    There are four acceptance levels supported by VMware, and these are:'
  prefs: []
  type: TYPE_NORMAL
- en: VMwareCertified
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: VMwareAccepted
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: PartnerSupported
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: CommunitySupported
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'These levels control the VIBs which can be installed on the ESXi host; a VIB
    is an ESXi software package. This typically dictates the level of support you
    will receive from either VMware or a VMware partner. The following task will set
    the acceptance level to CommunitySupported for all of the ESXi hosts in the named
    cluster:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: The vmware_host_config_manager module
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Using this module, you can set configuration options on your individual VMware
    ESXi hosts, for example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: Ansible maps the advanced configurations options from your VMware host, so for
    more information on the available options, please consult your documentation.
  prefs: []
  type: TYPE_NORMAL
- en: The vmware_host_datastore module
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This module gives you the power to mount and dismount datastores on your VMware
    ESXi hosts; in the following example, we are mounting three datastores on all
    of the VMware ESXi hosts within our inventory:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: The vmware_host_firewall_manager module
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This module lets you configure the firewall rules on your VMware ESXi hosts:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: The previous example enables `vvold` and disables `CIMHttpServer` on each of
    the VMware ESXi hosts in the host inventory.
  prefs: []
  type: TYPE_NORMAL
- en: The vmware_host_firewall_facts module
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'As you will have already guessed, this module, like the other facts modules,
    is used to gather facts on the firewall configuration of all of the hosts within
    our cluster:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: 'It can also gather for just a single host:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: The vmware_host_lockdown module
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This module comes with a warning which reads: This module is destructive as
    administrator permission are managed using APIs used, please read options carefully
    and proceed..'
  prefs: []
  type: TYPE_NORMAL
- en: 'You can lock down a host with the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: 'You can take a host out of lockdown using:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: 'As mentioned previously, this module may have some unexpected side effects,
    so you may want to do this on a per-host basis, rather than using the following
    option, which will put all hosts in the named cluster into lockdown:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: The vmware_host_ntp module
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'With this module, you can manage the NTP settings for each of the VMware ESXi
    hosts. The following example configures all of the hosts to use the same set of
    NTP servers:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: The vmware_host_package_facts module
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This module can be used to gather facts on all of the VMware ESXi hosts within
    your cluster:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: 'Like the rest of the facts modules, it can also gather for just a single host:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: The vmware_host_service_manager module
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This module lets you manage ESXi servers on either all of your cluster members
    or individual hosts:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: In this example, we are starting the NTP service (`service_name`) on all hosts
    within the cluster; as we have the `service_policy` defined as `automatic`, the
    service will only start if the services corresponding to the firewall rule have
    been configured. If we wanted the service to start regardless of the firewall
    rule, then we could set `service_policy` to `on` or if wanted to the service to
    be stopped, then `service_policy` should be set to `off`.
  prefs: []
  type: TYPE_NORMAL
- en: The vmware_host_service_facts module
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'With this module, you can find out facts on the services configured on each
    of the VMware ESXi hosts within the cluster:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: The vmware_datastore_facts module
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This is one of the old-style facts modules which can be used to gather information
    on the data stores configured in the data center:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: You may notice that there is a little bit of a difference in the syntax between
    this and the previous facts modules.
  prefs: []
  type: TYPE_NORMAL
- en: The vmware_host_vmnic_facts module
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'From an old-style fact module back to a new one, this module can be used to
    gather information on the physical network interfaces on your VMware ESXi hosts:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: 'For a single ESXi host, we could use the following task:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: The vmware_local_role_manager module
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Using this module, you can configure roles on your cluster; these roles can
    be used to assign privileges. In the following example, we are assigning a few
    privileges to the `vmware_qa` role:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: The vmware_local_user_manager module
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'With this module, you can manage local users by adding users and setting their
    passwords:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: The vmware_cfg_backup module
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Using this module, you can create a backup of a VMware ESXi host configuration:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: Please note that this module will automatically put the host into maintenance
    and then save the configuration too. In the preceding example, from `/tmp`, you
    can use the information registered to grab a copy of the backup using the `fetch`
    module.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can also use this module to restore a configuration:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, you can also reset a host configuration back to its default settings
    by running the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: The vmware_vmkernel module
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This module allows you to add VMkernel interfaces, which are also known as
    Virtual NICs on a host:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: 'In the previous example, we added a management interface; there are also the
    following options:'
  prefs: []
  type: TYPE_NORMAL
- en: '`enable_ft`: Enables an interface for fault tolerance traffic'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`enable_mgmt`: Enables an interface for management traffic'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`enable_vmotion`: Enables an interface for VMotion traffic'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`enable_vsan`: Enables an interface for VSAN traffic'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The vmware_vmkernel_facts module
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Yet another facts module, this is a a new-style module; you have probably already
    guessed what the task will look like:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs: []
  type: TYPE_PRE
- en: The vmware_target_canonical_facts module
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Using this module, you can find out the canonical name of an SCSI target; all
    you need to know is the ID of the target device:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs: []
  type: TYPE_PRE
- en: The vmware_vmotion module
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'You can use this module to perform a vMotion of a virtual machine from one
    VMware ESXi host to another:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs: []
  type: TYPE_PRE
- en: The vmware_vsan_cluster module
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You can use this module to register a VSAN cluster; this module works slightly
    differently to the other modules in this chapter in that you first need to generate
    a cluster UUID on a single host before deploying the VSAN on the remaining hosts
    using the UUIDs generated.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following tasks assume you have a host group called `esxi_hosts`, which
    contains more than one host. The first task assigns the VSAN to the first host
    in the group, then registers the results:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs: []
  type: TYPE_PRE
- en: 'The results, registered as `vsan_cluster`, contain the VSAN cluster UUID which
    we will need for the rest of the hosts in the group. The following code configures
    the cluster on the remaining hosts, skipping the original host:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs: []
  type: TYPE_PRE
- en: The vmware_vswitch module
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Using this module, you can add or remove a **VMware Standard Switch** (**vSwitch**)
    to an ESXi host:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE63]'
  prefs: []
  type: TYPE_PRE
- en: In this example, we have added a vSwitch that's attached to multiple vmnics.
  prefs: []
  type: TYPE_NORMAL
- en: The vmware_drs_rule_facts module
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'You can use this module to gather facts on the DRS configured in your entire
    cluster or single data center:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE64]'
  prefs: []
  type: TYPE_PRE
- en: The vmware_dvswitch module
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This module allows you to create and remove distributed vSwitches:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE65]'
  prefs: []
  type: TYPE_PRE
- en: The vmware_dvs_host module
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Using this module, you can add or remove a host from the distributed virtual
    switch:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE66]'
  prefs: []
  type: TYPE_PRE
- en: The vmware_dvs_portgroup module
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'With this module, you can manage your DVS port groups:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE67]'
  prefs: []
  type: TYPE_PRE
- en: The vmware_maintenancemode module
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Using this module, you can place a host into maintenance mode. The following
    example shows you how to put a host into maintenance while maintaining object
    availability on the VSAN:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE68]'
  prefs: []
  type: TYPE_PRE
- en: The vmware_portgroup module
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This module lets you create a VMware port group on the hosts in a given cluster:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE69]'
  prefs: []
  type: TYPE_PRE
- en: The vmware_resource_pool module
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'With this, the final module we are going to look at, you can create a resource
    pool. An example of how to do this follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE70]'
  prefs: []
  type: TYPE_PRE
- en: An example playbook
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Before we complete this chapter, I am going to share an example playbook I
    wrote for deploying a small number of virtual machines in a VMware cluster. The
    idea with the project was to launch seven virtual machines into a customer''s
    network which are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: One Linux jump host
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: One NTP server
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: One load balancer
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Two web servers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Two database servers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The VMs all had to be built from an existing template; unfortunately, this template
    was built with a hardcoded gateway IP address of `192.168.1.254` in the `/etc/sysconfig/network`
    file. This meant that for these machines to correctly appear on the network, I
    had to make changes to each of the virtual machines once they had been launched.
  prefs: []
  type: TYPE_NORMAL
- en: 'I started off by setting up a file called `vmware.yml` in my `group_vars` folder;
    this contained the information needed to connect to my VMware installation and
    also the default credentials for the VMs:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE71]'
  prefs: []
  type: TYPE_PRE
- en: 'I will be using the variables defined in both of the roles I will be running.
    Next up, there is the `group_vars/vms.yml` file; this contains all of the information
    needed to launch the virtual machines in my VMware environment:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE72]'
  prefs: []
  type: TYPE_PRE
- en: As you can see, I am defining the specs, networks, and storage for all seven
    VMs; where possible, I am thin provisioning storage and also making sure that
    where there is more than one virtual machine in a role I am using different storage
    pools.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now that I have all of the details needed for my virtual machines, I can create
    the roles. First of all, there is `roles/vmware/tasks/main.yml`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE73]'
  prefs: []
  type: TYPE_PRE
- en: As you can see, this task loops through the items in the `vm` variable; once
    the virtual machine has been launched, it will wait for the IP address I have
    assigned to be available within VMware. This makes sure that the virtual machine
    is correctly launched before proceeding with either launching the next virtual
    machine or moving on to the next role.
  prefs: []
  type: TYPE_NORMAL
- en: 'The next role resolves the problem of `192.168.1.254` being hardcoded as the
    gateway in the virtual machine template; it can be found in `roles/fix/tasks/main.yml`.
    There are two tasks in the role; the first one updates the gateway to the correct
    one for the network the virtual machine has been launched in:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE74]'
  prefs: []
  type: TYPE_PRE
- en: 'As you can see, this loops through the list of virtual machines defined as
    `vm` and executes the `sed` command we defined in the `group_vars/vmware.yml`
    file. Once this task has run, we need to run one more task. This one restarts
    networking on all of the virtual machines so that the changes to the gateway are
    picked up:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE75]'
  prefs: []
  type: TYPE_PRE
- en: When I ran the playbook, it took about 30 minutes to run, but at the end of
    it I had the seven virtual machines launched and available to work, so I was then
    able to run the set of playbooks which bootstrapped the environment ready so that
    I could hand them over to the customer for them to deploy their application.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As you have seen from the very long list of modules, you can do pretty much
    most of the common tasks you would be doing as a VMware administrator using Ansible.
    Add to this the modules we looked at in [Chapter 7](ea3a1a37-b99d-4837-b458-d8a24c6cc39c.xhtml),
    *The Core Network Modules*, for managing network equipment, and also modules such
    as the ones that support NetApp storage devices, and you can build some quite
    complex playbooks which span the physical devices, VMware elements, and even the
    virtual machines running within your virtualized infrastructure.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will see how to build our Windows servers locally using
    Vagrant and then take our playbooks to the public cloud.
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Which Python module do you need to install on your Ansible controller to be
    able to interact with vSphere?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'True or false: `vmware_dns_config` only allows you to set the DNS resolvers
    on your ESXi hosts.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Name two of the modules we have covered that can be used to launch virtual machines;
    there are three, but one is deprecated.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Which of the modules we have looked at would you use to ensure that a virtual
    machine is fully available before progressing to a task that interacts with the
    VM via VMware?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'True or false: It is possible to schedule the change of a power state using
    Ansible.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'For a good overview of VMware vSphere, I would recommend the following video:
    [https://www.youtube.com/watch?v=3OvrKZYnzjM](https://www.youtube.com/watch?v=3OvrKZYnzjM).'
  prefs: []
  type: TYPE_NORMAL
