- en: Bringing in the Real Live World
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As you learned in the last [Chapter 9](08f23d64-9bb7-4910-b0d9-86190ac5cc8b.xhtml), *Do
    it Yourself – Native Modules and Three.js*, we can include native code and JavaScript
    code into our world. Aside from breathing life into our world by making it more
    interesting visually, we can also bring the outside world in.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, you will learn how to use React and JavaScript to bring the
    web into the VR world. You will learn how to use your existing high-performance
    code in VR.
  prefs: []
  type: TYPE_NORMAL
- en: First, we will need a VR world to start in. This time, we're going to Mars!
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, you will learn the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Doing JSON/Web API calls
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `Fetch` statement
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Cross-Origin Resource Sharing** (**CORS**)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Networking tab for diagnostics
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `Cylindrical Pano` statement
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Justified text, similar to a flexbox (part of React Native)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Conditional rendering
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Style sheets
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Going to Mars (the initial world creation)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You would think there is no weather in space, but actually there is, and we
    have weather stations there. We will go to Mars to get our weather. This will
    be a real-time program that will obtain weather data from the Mars Science Laboratory,
    or its rover called **Curiosity**.
  prefs: []
  type: TYPE_NORMAL
- en: Curiosity is an SUV-sized robotic rover that was sent to Mars on November 26,
    2011 and landed on August 6, 2012\. If you drove your SUV there, even if you could
    buy gas, you would take about 670 years to get there. The Mars rover was designed
    for a two year mission, but its mission was extended, which is fortunate for us.
  prefs: []
  type: TYPE_NORMAL
- en: Driving that SUV to Mars to get the weather report would have been a hassle.
    I don't even know where the gas stations are.
  prefs: []
  type: TYPE_NORMAL
- en: Creating the initial world
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'First, as we''ve done before, go to your directory where you''re storing your
    worlds and create one, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Then, download the assets from [https://github.com/jgwinner/ReactVRBook/tree/master/Chapter10/MarsInfo](https://github.com/jgwinner/ReactVRBook/tree/master/Chapter10/MarsInfo).
  prefs: []
  type: TYPE_NORMAL
- en: Although I uploaded all of the files to make this work, not just the static
    assets, you really should try to code this yourself. You don't really learn anything
    from downloading files and running them.
  prefs: []
  type: TYPE_NORMAL
- en: Making mistakes is what builds character. I uploaded the files and will maintain
    them just in case there is *too much* character.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have an initial world, we'll start setting up the web services to
    obtain data.
  prefs: []
  type: TYPE_NORMAL
- en: Jason and JSON
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'When you hear people talk about JSON, hopefully, you aren''t thinking of this
    guy:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/96fa4baa-8e01-4ee7-97ab-1a1193891460.jpg)'
  prefs: []
  type: TYPE_IMG
- en: I found the image on the web, marked creative commons; it's a Jason Voorhees
    costume (cosplay) from the Montreal Comic-Con. The photo is from Pikawil from
    Laval, Canada.
  prefs: []
  type: TYPE_NORMAL
- en: On a serious note, JSON is the most common way to bring in the outside world
    through web services; however, as we've seen ways to include native code and JavaScript,
    you could integrate your system in a variety of ways.
  prefs: []
  type: TYPE_NORMAL
- en: The other huge advantage of React VR is that it is based on React, so things
    that you can commonly do with React, you can do in React VR, with some important
    differences.
  prefs: []
  type: TYPE_NORMAL
- en: Why JSON has nothing to do with React
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: At first, you might be thinking, *"How do I do AJAX requests in React VR?"*
  prefs: []
  type: TYPE_NORMAL
- en: You don't, not really. React VR and React Native do not have any allegiance
    to any particular way of fetching data. In fact, as far as React is concerned,
    it doesn't even know there's a *server* in the picture at all.
  prefs: []
  type: TYPE_NORMAL
- en: 'React simply renders components using data from only two places: props and
    state.'
  prefs: []
  type: TYPE_NORMAL
- en: 'That is the academic answer. The real answer is a bit more broad. You can get
    data any way you feel like it. After having said that, usually most React programmers
    will use one of these APIs and/or frameworks:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Fetch**: Nearly a standard, it is built-in to React, as it is usually already
    included; refer to [http://bit.ly/FetchAPI](http://bit.ly/FetchAPI) for usage
    notes and examples'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Axios**: Axios revolves around promises (asynchronous completion APIs), although
    it can be used in a simpler way as well for singlethreaded apps; refer to [http://bit.ly/AxiosReadme](http://bit.ly/AxiosReadme)
    for more details'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Superagent**: If you don''t like promises, but like callbacks; refer to [http://bit.ly/SuperagentAPI](http://bit.ly/SuperagentAPI)
    for more info'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In these examples, we will show fetch, as there is no need to install different
    modules and set up callbacks. After having said this, you may want to build a
    slightly more responsive app that uses some type of callback of asynchronous completion
    so that your app can do something while it waits for data externally. Fetch does
    do asynchronous completion through promises, so we'll be doing conditional rendering
    to take advantage of this and maintain a responsive VR app.
  prefs: []
  type: TYPE_NORMAL
- en: You may already have a lot of this code written. React VR, as discussed earlier,
    is a rendering system for your VR objects, so you can use a variety of external
    JavaScript systems.
  prefs: []
  type: TYPE_NORMAL
- en: Finding the API -- All the way from Mars
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now, we'll get the weather data all the way from Mars. No, I'm not really joking.
    Refer to [http://bit.ly/MarsWeatherAPI](http://bit.ly/MarsWeatherAPI), which describes
    the API and gives a little science background, if you are interested. This API
    is set up to consume XML data from, and return it in, a JSON or JSONP format.
    The following is the resulting data, which you can also get by referring to: [http://marsweather.ingenology.com/v1/latest/](http://marsweather.ingenology.com/v1/latest/).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'We can fairly easily turn this into our JSON object. First, let''s test the
    connectivity and make a sanity check to the actual JSON text returned. We tested
    the preceding JSON data in a browser, but we need to test the code to make sure
    that it works. To do this, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'In `index.vr.js` find the MarsInfo `Component {`  declaration to add the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Paste this in and run it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Open the console in the browser (*Ctrl*+*Shift*+*K* in Firefox Nightly). Although
    the code we just showed is really reasonable, and runs fine in the browser, when
    we run this, we will get an error:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](Images/43f4c4e3-5168-4392-9908-550e7b62b00f.png)'
  prefs: []
  type: TYPE_IMG
- en: What is the problem? It's CORS. This is a mechanism to make Cross-Origin or
    web content that doesn't come from the same server safe and secure. Essentially,
    it is a way for web servers to say, "I'm OK to be embedded in another web page."
    Your bank, for example, would not want to have your banking details embedded inside
    some other site's web page; your checking account could be compromised easily
    that way, and you'd think you were logging into your real bank—and you would be.
  prefs: []
  type: TYPE_NORMAL
- en: Note that I could have used an API that did not give these errors, but you may
    well run into the same problem with your own content, so we will discuss how to
    spot a CORS problem and how to fix it.
  prefs: []
  type: TYPE_NORMAL
- en: 'To find out why we got this error, we need to look at the protocol headers;
    open the Network tab by clicking on Tools ->Web Developer ->Network:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](Images/737cb7a4-23ee-4587-8a4d-a0b584397150.png)'
  prefs: []
  type: TYPE_IMG
- en: This window is very valuable for figuring out native JSON request issues and
    website integrations.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once you bring up the console, you''ll see the different HTTP actions; click
    on the one that didn''t complete:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](Images/21eea88e-d6be-4bd8-a82e-7b69caf419a4.png)'
  prefs: []
  type: TYPE_IMG
- en: We will then take a look at the data that is returned.
  prefs: []
  type: TYPE_NORMAL
- en: 'Look at the right-hand side of the following screenshot; here, you can click
    on a response and headers to check the data. We can see that the website does
    return the data; however, our browser (Firefox) has blocked it from showing by
    generating the CORS error:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](Images/9d3e593d-284b-40f8-9807-bfa13a15937d.png)'
  prefs: []
  type: TYPE_IMG
- en: The code was correct, but the website does not include the important CORS headers,
    so per CORS security rules, the website blocks it. You can read more about CORS
    at: [http://bit.ly/HTTPCORS](http://bit.ly/HTTPCORS).
  prefs: []
  type: TYPE_NORMAL
- en: 'If you get this error, there may be a solution by adding headers to the request.
    To add headers, you need to modify the `fetch` request; the `fetch` request also
    allows a mode of `''cors''`. However, for whatever reason, for this particular
    website, the `''cors''` option didn''t seem to work for me; for other websites,
    it might work better. The syntax for this is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'To have more control over exactly what we are requesting, create a header object
    and pass it into the `fetch` command. This can also be used for what is called
    a **preflight check**, which is simply two requests: one to find out whether CORS
    is supported, and the second request will include values from the first request.'
  prefs: []
  type: TYPE_NORMAL
- en: 'To construct a request or preflight request, set the headers as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: The header value `'Access-Control-Request-Headers'` can be set to custom header
    options that the server will return (if it supports CORS) to validate to the client
    code that this is a valid CORS request. As of 2016, the spec was modified to include
    wild cards, but not all servers will be updated. You may need to experiment and
    use the Network tab to see what's going on if you get a CORS error.
  prefs: []
  type: TYPE_NORMAL
- en: In this case, we will need to use options for a "preflight" check—but even after
    making a modification to the React VR networking code, this didn't work with [marsweather.ingenology.com](http://marsweather.ingenology.com) so,
    it's quite likely that their server has not been upgraded to modern web security
    standards.
  prefs: []
  type: TYPE_NORMAL
- en: This can happen! In our case, there really is no general fix. I did find a Firefox
    plugin that will allow you to bypass CORS restrictions (remember, the problem
    isn't from the server, it's the browser that shuts down your code when seeing
    the payload the server *already* sent), but this would require people to download
    plugins and fiddle with them.
  prefs: []
  type: TYPE_NORMAL
- en: 'We need to find a better API. NASA has a fantastic catalog of web APIs, and
    we will use their Mars rover camera API. You can fetch any of the hundreds of
    thousands of photos all for free. Once we use a different web API, we will get
    the proper CORS headers we''ve been looking for, and it all works just fine. Once
    we ask a server that has modern security standards, we will note that it automatically
    includes the access-control-allow-origin that Firefox needs (here wildcarded),
    as seen in the following image, taken from the Network tab:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/5d3aadc5-181d-42fc-a1c2-8cc58ed417f0.png)'
  prefs: []
  type: TYPE_IMG
- en: So, instead of seeing the weather on Mars, we'll look at actual pictures.
  prefs: []
  type: TYPE_NORMAL
- en: A better API from NASA
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To take a look at some great web APIs, you can go to: [http://bit.ly/NasaWebAPI ](http://bit.ly/NasaWebAPI)and
    see the list of APIs that you can use, or better yet, use some web APIs you've
    already written. React VR makes it very easy to integrate these through the power
    of React and React Native. We will use the Mars photo API. To enable it, you will
    probably need a Developer key. When you make the requests, you can add your API
    key to the URL or use `DEMO_KEY`. This becomes part of the API call, for example, [https://api.nasa.gov/mars-photos/api/v1/rovers/curiosity/photos?sol=1000&api_key=DEMO_KEY](https://api.nasa.gov/mars-photos/api/v1/rovers/curiosity/photos?sol=1000&api_key=DEMO_KEY).
    Note that there is no period on the end of the URL.
  prefs: []
  type: TYPE_NORMAL
- en: If you start getting errors while developing your code, you might be using the
    `DEMO_KEY` a little too much; it is very quick and easy to get your own Developer
    API; instructions for that can be found at the website I mentioned at: [http://bit.ly/NasaWebAPI](http://bit.ly/NasaWebAPI).
  prefs: []
  type: TYPE_NORMAL
- en: 'To fetch the data from NASA, all we have to do is change the `fetch` command
    slightly, as follows; we won''t need the custom headers, as it turns out:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Change `index.vr.js` to the following, up to the `render()` statement:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'This is all we have to do to obtain the data from Mars, via NASA and put it
    in a collection. Amazing! The following are a few notes on what we did:'
  prefs: []
  type: TYPE_NORMAL
- en: The `photoCollection` object is initialized to be an empty array (collection).
    This is so that we can use similar code before and after we get data.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You should still check for failures, however.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `currentPhoto` value we initialize to `2` as sort of a "cheat." The reason
    this is cheating is that when I was writing this book, if you let `currentPhoto`
    default to the first image, your first view of Mars was pretty boring. The first
    couple of images were test images and fairly plain, so I'll have you change `currentPhoto`
    to `2`, so we can see something interesting. You might do the same thing if you
    have an API that returns specific data you want to show someone.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This code just obtains data; it doesn't render it. For that, we will develop
    a separate object to keep our code modular.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'For debugging purposes, we''ll also add a line in the `render()` thread to
    see exactly what data we have. Insert the following `console.log` statement:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'This can be very handy for working out the rendering code and understanding
    the current state and how it changes. Run this code, and we can see the object
    that is returned in the console.  First, we get a line from the `render()` thread
    that shows us an empty `photo collection`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/207bd55f-cb86-4cdf-b080-9be5d5110377.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Note that the `photo collection` is empty; this makes sense as we initialized
    it that way. After a few seconds delay—during which you *can view the virtual
    world*—you will see another `render()` update and changed data:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/f4110a61-08cd-4deb-a3b1-8ca1530e8bc9.png)'
  prefs: []
  type: TYPE_IMG
- en: In this particular case (day 1,1197), there were a *lot* of images. JSON handles
    this very well, slicing (ouch, bad pun) and dicing the data, all while we look
    around in our VR world.
  prefs: []
  type: TYPE_NORMAL
- en: Another thing to note is that the `render()` loop is called just twice. If you
    are used to a game development paradigm, this may seem weird since, as we discussed,
    to build a sense of immersion, we will need more than 60 frames per second. How
    can we do that if we rendered just twice?
  prefs: []
  type: TYPE_NORMAL
- en: React VR doesn't do the actual image generation, three.js does. When React VR
    "renders," it just takes the React VR syntax and applies any props or state changes
    and calls `render()` for those objects that have changed once.
  prefs: []
  type: TYPE_NORMAL
- en: To display the data we've retrieved, we'll build a new object.
  prefs: []
  type: TYPE_NORMAL
- en: Create a new file, called `CameraData`, and make it a separate component. We'll
    also change the `render()` method in `index.vr.js`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Everyone needs a style(sheet)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Styles aren't just for your hair; in this case, it will help to use a style
    sheet to make our code simpler, cleaner, and easier to maintain. Style reuse is
    very easy. Styles aren't a separate language; they are JavaScript like everything
    else in React. All of the core objects in React VR accept a prop named `styles`.
    We will define this style in our file and reuse it.
  prefs: []
  type: TYPE_NORMAL
- en: 'Create the following style definitions so that we can use them for the `CameraData.js`
    component (note that you can put this anywhere in the file):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: If you omit the `width` style, objects will transform and move completely differently.
    I'm not sure yet if this is a bug or is a different type of layout style, but
    note that if your `transform` statements are not moving a text or view object,
    it might be because you don't have a `width:` prop for your text style.
  prefs: []
  type: TYPE_NORMAL
- en: Building the image and status UI
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Next, we will need to render the camera data in two different ways. The first,
    when we have no `CameraData`, yet, in other words, right when the app starts up,
    or if we don't have an internet connectivity; and the second, when we obtain the
    data and need to display it. We also want to keep these routines fairly modular
    so that when a state change is initiated we can easily redraw the objects that
    need it.
  prefs: []
  type: TYPE_NORMAL
- en: Note that a lot of this is done automagically by React VR. If an object's props
    or state do not change, it is not told to render itself. In this case, our main
    thread already has the JSON handling to modify the change, so nothing in the main
    loop has to be created to re-render the camera data.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Note that we aren't finished with the component, so don't type the final `};`
    yet. Let's discuss what we added. The previous main `render()` loop essentially
    checks what values are valid and calls one of two routines to actually do the
    rendering, either `renderPhoto(photo)` or `renderLoadingView()`. We can assume
    that if we don't have a photo, we are in the process of loading it. The nice thing
    about the preceding code is that we are checking our props and making sure that
    they are valid before using them.
  prefs: []
  type: TYPE_NORMAL
- en: Many computer courses and self-help books strip out error handling to *"concentrate
    on the important things"*.
  prefs: []
  type: TYPE_NORMAL
- en: Error handling is the *most* important thing in your app.In this case, it's
    particularly important as while we are retrieving data, we don't have the photographs
    loaded yet, so we have nothing to display. We'll get an error if we don't handle
    this. What I have stripped out are `console.log` statements; if you download the
    source code for the book, you will find more extensive comments and trace statements.
  prefs: []
  type: TYPE_NORMAL
- en: Now, let's move on to the actual rendering. This looks deceptively simple, mostly
    as all of the hardwork to serialize, fetch, and selectively render has already
    been done. This is what programming should strive to be—clean, robust, easy to
    understand, and maintain.
  prefs: []
  type: TYPE_NORMAL
- en: Some of these code samples are getting long, so I'm putting closing braces and
    tags at the end of the object they are closing. I would recommend that you buy
    a large desktop screen and code in a more expansive way; when you spend an hour
    tracking down a missing or out of place `/>`, you will appreciate a large format
    display device. It just helps productivity.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'If you''ve typed in all of the code so far, when the world loads, you will
    see a green dialog box that informs you that it''s receiving data. After a few
    seconds, that will be replaced by photo 2 and detailed meta-info about the data
    that came to you from Mars, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/acd7e7e7-b883-4ad2-94ea-dfab4bf0a77a.jpg)'
  prefs: []
  type: TYPE_IMG
- en: If you want to open two virtual words at the same time, for example, to check
    on some imports without incurring the round trip web hits that we're in the middle
    of programming, you can do it by going to your second world that's set up, instead
    of `npm start`, using the `react-native start --port 9091` command.
  prefs: []
  type: TYPE_NORMAL
- en: I mentioned this briefly earlier, but it's important to note how multithreaded
    React really is; the elements change their rendering when their props or state
    change, without being told to. It's multithreaded without a change of code. This
    allows you to move the camera around and look while the world fills in its data.
  prefs: []
  type: TYPE_NORMAL
- en: This makes the virtual world seem more "real"; it responds to input just as
    if it was reality. It is—we created a Virtual Reality.
  prefs: []
  type: TYPE_NORMAL
- en: How (not to) to make people sick
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You may have noted that we put the user interface for this—the icons and the
    screens—a little far out; so far, we've put everything at least five meters out.
    Why is that?
  prefs: []
  type: TYPE_NORMAL
- en: It's because of accommodation-vergence conflict.
  prefs: []
  type: TYPE_NORMAL
- en: When your eyes 'point' at something, like we discussed in Chapter 1, *What is
    Virtual Reality, Really?*, and if that something is really close to your face,
    your eyes will attempt to focus on it. However, your HMD is a fixed focus device,
    and always shows things in focus, no matter how close or far away they are. In
    the real world, something that is, say, closer than 3 to 4 feet will require your
    eyes to focus more than something say 10 feet away.
  prefs: []
  type: TYPE_NORMAL
- en: So, your eyes will converge on an image that you should have to focus more on,
    but what you are looking at is already in focus (as everything is), so there is
    a difference between what you expect to see in the real world and what you see
    in the HMD.
  prefs: []
  type: TYPE_NORMAL
- en: This doesn't cause any actual vision issues—everything is sharp and in focus.
  prefs: []
  type: TYPE_NORMAL
- en: What you can get would be eye strain and a vague feeling of discomfort, which
    is worse the longer you use the HMD.
  prefs: []
  type: TYPE_NORMAL
- en: The way to avoid this is to try to always put UI elements at least as far away
    as we have in this example. Don't put floating screens where a pair of glasses
    would be, for example. If you do, people will look at them, and their eyes will
    expect to have to focus on something say six inches away, but from a focus standpoint,
    the item is more than arms-length away. This will strain your users.
  prefs: []
  type: TYPE_NORMAL
- en: This is why most VR has you looking at large screens that are far away to make
    a selection. About the closest you would want to make a UI element might be on
    a wrist, and even that is a little risky.
  prefs: []
  type: TYPE_NORMAL
- en: I do feel that the more people use VR, the more their eyes and focusing will
    retrain, however, I do not know of any medical studies that show this effect.
    I only mention it because I have a nearsighted eye and a farsighted eye; when
    I put glasses on, my focusing changes. What is funny is that if I put on glasses
    *without any glass*, my focusing still changes. I feel the human brain is infinitely
    adaptable and that we can overcome the accommodation-vergance conflict.
  prefs: []
  type: TYPE_NORMAL
- en: Your user's mileage may vary, however, so don't make them tired by putting things
    at a close distance (less than a meter) to their face.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you learned quite a few things. We've taken our worlds and
    made them truly interactive by building web service calls that consume JSON APIs.
    We've seen a few ways to obtain data and used the more or less built-in `fetch`
    statement. These API calls are now asynchronous, so we can look around our world
    and admire Mars while the camera data we're asking for is loading.
  prefs: []
  type: TYPE_NORMAL
- en: We've seen how to build secure worlds by handling cross-site scripting issues.
    We've created justified text and built conditional rendering. We've also discussed
    error handling.
  prefs: []
  type: TYPE_NORMAL
- en: Doing all of this takes some time, and we've had a few times where during development
    we spent hours trying to line up objects. I got shut down a few times because
    I was exceeding the `DEMO_KEY` number of retrievals during one hour. That's why
    I recommend that you get your own API key, then you can request a lot more images.
  prefs: []
  type: TYPE_NORMAL
- en: This chapter has been fairly long, and the world, while retrieving real-world
    data, is not totally interactive yet. In the next chapter, you will learn how
    to make your worlds interact to our input. This is why I built in the + and -
    arrows in the preceding view. Check out the next chapter to find how to hook them
    up to a page through our Mars data. I'll show a different world, but show ways
    to make the buttons interactive. It'll be your exercise to come up with and make
    simple prop changes to make the plus and minus buttons real.
  prefs: []
  type: TYPE_NORMAL
