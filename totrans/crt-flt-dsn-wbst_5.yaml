- en: Chapter 5. Developing Your Site
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we'll be developing the flat website we designed in [Chapter
    4](ch04.html "Chapter 4. Designing Your Own Flat Website"), *Designing Your Own
    Flat Website*. We will use the Designmodo Flat UI for this, which was created
    on top of Twitter Bootstrap, a frontend framework that has predeveloped components
    that allow a quicker development. We will also cover the usage of jQuery to build
    our navigation animation.
  prefs: []
  type: TYPE_NORMAL
- en: Creating our folder tree
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Properly organizing your files, as well as creating a comprehensive file structure,
    is very important when working in big projects. In smaller projects, you might
    not realize the importance of this, but it's a habit you should build from the
    beginning, so that when you work on bigger projects, you implement good practices
    from the beginning.
  prefs: []
  type: TYPE_NORMAL
- en: 'This is extremely easy to do, and it''s also something you can adapt to your
    personal taste. I like to keep my files organized in categories. When I begin
    a development project, one of the first things I like to do is create three folders:
    `css`, where I obviously keep my CSS style files; `img`, where I save the images
    used to build the website, and `js`, where I keep all my JavaScript files. In
    the root of your main folder, you should have your HTML files in a way that you
    can easily load the rest of your files by using relative paths.'
  prefs: []
  type: TYPE_NORMAL
- en: This is a very simple task, but it helps you organize all your files in a way
    that lets you use relative paths, work locally, and export everything to your
    server more easily by the end of the project.
  prefs: []
  type: TYPE_NORMAL
- en: 'A typical folder tree for a web development project will look similar to what
    is shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating our folder tree](img/0048OS_05_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Now that we covered how we're going to start our project, let's get down to
    business. But before we start the development of our project, we need to get our
    images ready.
  prefs: []
  type: TYPE_NORMAL
- en: Prepping our images
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The first step of our development project is based in Photoshop. We need to
    go back to our website design file and export the images we need for our page.
  prefs: []
  type: TYPE_NORMAL
- en: Since we designed such a minimal page, most of the elements in our page are
    made by HTML elements, not by images. We still have a couple of images though,
    such as our avatar and work thumbnails, so let's export them to use them in our
    page.
  prefs: []
  type: TYPE_NORMAL
- en: 'Regarding the avatar, there are two ways that we can go about doing this; the
    easy way and the proper way. The easy way is to just export our circle avatar
    and its border as a `.png` file with a transparent background. The following screenshot
    shows the `Avatar.png` file with a transparent background:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Prepping our images](img/0048OS_05_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: By exporting a transparent `.png` file, we can easily use the image in the web
    page with any background color, which will work and is probably good enough. But
    this is not the best way to go about doing this. What if you want to change your
    avatar after the website is done? Or what if you want to update the website colors
    and change your stroke color? You will then need to go back to Photoshop and export
    this image all over again, and that is just a pain.
  prefs: []
  type: TYPE_NORMAL
- en: 'But luckily enough, we can make most of the effects in HTML, so that you can
    use just a regular-squared image for the avatar, and let the rest be done by code.
    This way, you will be able to update your avatar by just changing the regular
    avatar image or a couple of lines of CSS. Also, if you are doing this project
    for a client or a company, you are simplifying the updates in the future by making
    the updates independent of designer work. We will visit the code for this a bit
    further on in the book; for now, just make sure you export your avatar as a 128
    x 128 px square image. This should look similar to what is shown in the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Prepping our images](img/0048OS_05_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Now, let's export our thumbnails. This part is pretty easy; just make sure you
    export all the thumbnails with the same size to keep it consistent as well as
    easier to update in the future. There are several ways of doing this. I like to
    create a new document with the image dimension (225 x 141 px), copy and paste
    all my layers there, and save them individually. Then, I save that document as
    a template for any future usage. This way, I know that every time I need to create
    a thumbnail, I'll just use that same document.
  prefs: []
  type: TYPE_NORMAL
- en: 'However, you can use other methods for this. You can use slices and create
    slices (keyboard shortcut *C*) for each one of your images in the document, and
    export the sliced images directly (on the **Save for Web & Devices** menu, you
    can select the type of slices you''d like to export). You can also use the new
    feature in Photoshop called **Generate image assets**, available since 2013 in
    Photoshop CC, which allows you to easily rename a layer or folder to a filename
    (such as `background.png`), and then just choose to automatically generate an
    image file from that layer. This is a good way of creating several assets for
    a big project, and it''s very easy to update because the assets are generated
    automatically with any file saving option. If you''re interested in knowing more
    about image assets generator, I definitely recommend that you should refer to
    the Adobe Help link: [http://helpx.adobe.com/photoshop/using/generate-assets-layers.html](http://helpx.adobe.com/photoshop/using/generate-assets-layers.html).'
  prefs: []
  type: TYPE_NORMAL
- en: Anyway, you can go on doing this if you want, but make sure that you maintain
    consistency on your image size and that you export them with 100 percent opacity,
    because if you're thinking of possibly using any kind of rollover effect, we can
    and will do it with CSS later on.
  prefs: []
  type: TYPE_NORMAL
- en: The only other two images we're missing are the Twitter and Facebook icons.
    For these, we'll save them as 32 x 32 px square transparent `.png`, so that we
    can still use them if we ever wish to change the background of the footer.
  prefs: []
  type: TYPE_NORMAL
- en: We are now done with our image prepping!
  prefs: []
  type: TYPE_NORMAL
- en: Developing our page
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that we have our images ready, let's start creating our page. Just like
    with the design, we'll create from top to bottom, starting in the header and developing
    the layout down to the footer.
  prefs: []
  type: TYPE_NORMAL
- en: We are going to be using Designmodo Flat UI Free for this, so the first thing
    we need to do is to import the files we're going to use. If you haven't done it
    already, download this from [http://designmodo.com/flat-free/](http://designmodo.com/flat-free/).
    Visit the page and click on **Download HTML**. This will get you a ZIP file with
    the Designmodo Flat UI Free pack, Twitter Bootstrap 3, and some example files.
  prefs: []
  type: TYPE_NORMAL
- en: 'So, just as we covered earlier, let''s start by creating our folder tree. Create
    the following folders: `css`, `js`, and `img`. We will also need extra resources,
    so create two extra folders: `fonts`, where we will save the custom fonts used
    and `bootstrap`, where we will save the bootstrap files we''re going to be using.'
  prefs: []
  type: TYPE_NORMAL
- en: Designmodo Flat UI Free pack is built on top of Twitter Bootstrap, so we will
    effectively be using Twitter Bootstrap to build this page. Twitter Bootstrap is
    a frontend framework that comes with a variety of predeveloped elements and styles,
    which makes it easier and quicker for a developer to create simple pages. I am
    a firm believer of optimizing work, and there's no need to be continuously reinventing
    the wheel. Most of the things we're going to use have been done hundreds or millions
    of times, so let's make use of the common effort to make our own lives easier.
    Here's when Twitter Bootstrap comes really handy. If you want to learn more about
    Twitter Bootstrap and see all the examples and guides, you can do so online at
    [http://getbootstrap.com/](http://getbootstrap.com/).
  prefs: []
  type: TYPE_NORMAL
- en: 'Now that we have our file structure created, let''s populate it with the needed
    files. First up, let''s upload the images we previously exported from Photoshop
    into the `img` folder. In our `css` folder, we''ll paste the `flat-ui.css` file
    from the Designmodo pack. We won''t be using any JavaScript for now, so we don''t
    need to copy the JavaScript files provided in the pack. Copy the content of the
    Designmodo pack''s `fonts` folder into your own `fonts` folder, and copy the `bootsrap`
    folder as well and paste it in your `root` folder. This includes all the styles
    and resources used by Bootstrap. By now, your main folder should look similar
    to what is shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Developing our page](img/0048OS_05_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: This includes all the required files to start creating our page, and with these
    in place, we can finally start the HTML.
  prefs: []
  type: TYPE_NORMAL
- en: Open your HTML editor and create a new file called `index.html`. This will be
    our website. The Designmodo pack has a file called `template.html`, which is a
    clean starter page with the basic HTML structure already initialized, which is
    a good foundation to work on. So open the file, copy its content, and paste it
    into your `index.html` file.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following screenshot shows what you should have on your index file:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Developing our page](img/0048OS_05_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: We can delete some content from here. The favicon part, `<link rel="shortcut
    icon" href="images/favicon.ico">`, can be deleted as we didn't design a favicon
    for this page, as well as for all the scripts being loaded after `<!-- Load JS
    here for greater good =============================-->`. We will be using JavaScript,
    but we will be loading the files as we need them to avoid having unnecessary files
    occupying space.
  prefs: []
  type: TYPE_NORMAL
- en: We won't be creating any CSS file for now; we will only focus on creating the
    HTML file and getting the document with the content ready to style it afterwards.
    As we are using Twitter Bootstrap, we'll try to replicate our design as best as
    possible just by using existing features and styles from Bootstrap, and only after
    that can we create our own styles to customize the page to our needs.
  prefs: []
  type: TYPE_NORMAL
- en: 'So, to create our header, we will need a `<div>` element that will fill the
    whole browser in width to create that visual effect we designed. To do this, we
    will be using a class called `jumbotron` that Bootstrap already provides. You
    can see the example Bootstrap file online at [http://getbootstrap.com/examples/jumbotron/](http://getbootstrap.com/examples/jumbotron/).
    Essentially, this is a `div` class, the width of which is defined as 100 percent
    and stretches to fill the browser with a different background color. The structure
    for this `div` is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Insert this code right after the `<body>` tag. If you save and refresh your
    file in the browser, you''ll be able to see the effect of the layer filling the
    browser in the `Jumbotron` div. Now, we just need to insert our content inside
    the `div` container, as shown in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'As you can see, we''re using `class="text-center"` in some of our elements.
    This is a Bootstrap class responsible to set the text alignment to be centered,
    and it will center our elements, making this look a bit like our design header.
    Granted, there are some things changes to be made, but we will make these changes
    afterwards in CSS. The following screenshot shows how our HTML file looks when
    we open it in the browser:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Developing our page](img/0048OS_05_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Pretty close to what we're looking to do, right?
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, for our `About` section, we will need to create a title, two blocks of
    text, and a button. Luckily enough, this is also mostly done by using Bootstrap
    styles. For the title, we will use an `<h2>` tag; for the blocks, we will use
    a paragraph with a specific block class, which will look like this: `<div class="col-md-6">`.
    Twitter Bootstrap comes with a responsive grid system implemented, which is composed
    of 12 columns. So in this case, we want to create two blocks that will occupy
    each half of the screen. So, every block will have six columns, hence the class
    `col-md-6` is used. As I said, this is a responsive grid, which means that the
    website will adapt to tablets and smartphones by dynamically resizing the columns''
    sizes to fit the devices used.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Our button is also easily implemented by using Bootstrap tags; in this case,
    it is the flat style, due to the Designmodo Flat UI pack. Our button will look
    like this: `<p class="text-center"><button class="btn btn-hg btn-primary">Download
    Resume</button></p>`. The button element has the `btn` class, which is the main
    class responsible for giving the button its look; the others are to set color
    and behavior. We will change this afterwards to use our color and font options.
    So, the HTML code for this section is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Just replace the text of our bigger block of text to adapt it to the column;
    our **About Me** section should look like the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Developing our page](img/0048OS_05_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Next, we will create our `Work` section. Since this will also have a blue wide
    background, we will be using the `jumbotron div` element again for our main container.
    We have a grid of 2 x 4 thumbnails in our design, and since rows and columns compose
    the Bootstrap grid, we will need to create two rows, one for each line of four
    thumbnails. Thinking about the way that the 12-column grid works in Bootstrap,
    we will need to use *12/4 = 3* columns for each thumbnail, of which we have four.
    The following is our final code for the work section:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'So, here you can see that we created a `jumbotron div` element for the background,
    two row `div` elements for our lines, and each row has four divisions with an
    image inside, which is our thumbnail. It is important to check the classes we
    used for this `div` element because they are used for grids. The div used, `<div
    class="text-center col-sm-6 col-md-3">`, has three different classes. The `text-center`
    class is used to center our image in the block; it''s responsive, it will change
    size depending on the screen size, and we don''t want the image to be larger than
    the original file size, as that will create pixilation and ruin the image quality.
    The class `col-md-3` is responsible to align the positioning of the images in
    the grid in desktop devices, meaning that each will occupy three columns. The
    class `col-sm-6` refers to tablet devices, and it means that in tablet widths,
    it will show two thumbnails per line. This creates a better adaptive experience
    as it will show four thumbnails per line on desktops, two on tablets, and only
    one on smartphones, the smallest of them all, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Developing our page](img/0048OS_05_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: With only the Bootsrap code, we were able to create a responsive grid of thumbnails
    that we can use for our `Work` section, quickly and easily.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `Contact` section is probably the easiest of them all, as we just need
    to create three lines of content. We will use a `<h2>` element for the title again,
    and then two `<p>` elements for each line of content, as shown in the following
    code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: The code is fairly simple as well. We're just using the `text-center` tag to
    center the text in the page, and then we're creating a link in the e-mail, so
    that the visitor can click directly to send any mail. By using `href=mailto:designer@portfolio.com`,
    we're allowing the browser to open a mail program to create a new e-mail with
    the `e-mail` field already filled with this information, making it easier to send
    a message. This behavior might not be good in every case, because sometimes the
    default e-mail program might not be configured, or the user might use a webmail
    client that won't be able to open this kind of link, so use this only if you believe
    it makes sense to.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following screenshot shows how our simple contact section looks:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Developing our page](img/0048OS_05_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The last element to create is the footer, and we'll again use the `jumbotron
    div` element for this. We will need to make some more adjustments to make sure
    that the footer sticks to the bottom of the page, but we'll do that in a minute
    when we work in our page styles.
  prefs: []
  type: TYPE_NORMAL
- en: 'So, for the footer, we''ll create the `jumbotron div` element, a paragraph
    with our copyright text, and two hyperlinks with the social network icons. This
    won''t look at all like what we''re trying to achieve, but our content is there
    as we need it, and now it''s only down to the styles to change the look of it.
    The following is the final piece of code for our footer:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: With this last piece of code, our basic HTML page is done, ready for some styling
    work with CSS.
  prefs: []
  type: TYPE_NORMAL
- en: Styling our page with CSS
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let's start by creating a new file called `main.css` in the `css` folder. This
    will be where we will place our own styles to customize the look of the page to
    our design. With our file in place, we now need to link our CSS file in our HTML
    page. Go to your `index.html` file and add `<link href="css/main.css" rel="stylesheet">`
    to the `<head>` tag, and make sure you add it after `bootsrap.css` and `flat-ui.css`;
    otherwise, our styles might be overridden and won't work.
  prefs: []
  type: TYPE_NORMAL
- en: 'The first change we''ll be making is the text color. As we want it to be the
    color we set in our design, let''s set the text color to `#222222` for every element
    in the `<body>` tag. We do this by using the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, let''s start with the header, let''s make its background blue. The color
    code we will choose for this is `#3498db`, and since we want to change this for
    every `jumbotron div` element, we''ll target the `jumbotron` class, as shown in
    the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Save the file and refresh it in the browser, and you'll notice that it will
    immediately look a lot more like your design with the blue background sections.
    For the avatar, I told you before that we could do the circle avatar in CSS. We're
    able to do this because of CSS3, which allows us to easily create rounded corners
    in borders and border-radius. By setting that border at 50 percent, it will create
    such a radius in every corner that leads to a perfect circle. So, keep in mind
    that this won't work in every browser, as not all browsers support CSS3, but you
    should always use the latest technologies and techniques available to make good
    use of them, while always keeping in mind a graceful degradation of older versions.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this case, the only problem is that the avatar will be a square rather than
    a circle in older browsers. This is not a major problem because it''s just a visual
    difference and it doesn''t influence the business or usability at all. But going
    back to our avatar, we want it as a circle and with a white border, so we need
    to target our avatar in our CSS selectors. Since our avatar is just an `<img>`
    tag, we need to go back to the HTML file and change our tag to include a class,
    such as `<img class="avatar" src="img/avatar.jpg"/>`. Now, we can target `.avatar`
    in our CSS, and the following is the code we will use for the effects:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'This will do the trick and our avatar will now look exactly like in our original
    design. However, you might run into some problems with Safari and other browsers,
    as each browser has slightly different ways of rendering these elements. So, you
    can make a small change and it will still work. Instead of having the image in
    your HTML file, you can define it as background image from the CSS, and this will
    solve the problem. In your HTML file, change the line to `<p class="text-center"><span
    class="avatar"></span></p>`; in the CSS file, add the following parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, it should work in Safari as well, but every time you try some new technology,
    make sure to check where it works and breaks, because there''s always some way
    to adapt your code to make it work. The following screenshot shows how your avatar
    works in live HTML pages:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Styling our page with CSS](img/0048OS_05_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'For the menu, the following is the code we''re going to use:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Remember, always indent your code, be it HTML, CSS, JavaScript, or any other
    language. It makes it easier for you and others to read and to quickly visualize
    and analyze a bigger chunk of code.
  prefs: []
  type: TYPE_NORMAL
- en: As you can see, we're using new IDs in this CSS. The `#header` class is the
    ID that we've set in the HTML for the whole header `<div>`, and `#menu` is the
    ID set for the `<p>` element where we have our menu links. As we start to do more
    and more styling, we will need to set classes and IDs to be able to select specific
    elements in the HTML file. Here, we're making sure that our links are uppercase
    by using `text-transform` and changing the color to white. Also, we're changing
    the font weight to a heavier weight in order to adapt to our design.
  prefs: []
  type: TYPE_NORMAL
- en: 'For the `About` section, we need to change some things, such as the title size,
    font size of the text, as well as line height. Finally, we''ll use margin and
    padding to make the spacing between elements exactly as we had designed. A really
    important part of this CSS is the `text-align: justify` property that makes the
    block of text have the same text alignment as that of our design, shaping the
    text to fit the block and helping to visually define the layout.'
  prefs: []
  type: TYPE_NORMAL
- en: 'We also want to change the color of the button to match our color palette,
    so we do that by defining the background color of the `.btn` element. This way
    we override the color previously used. We will also change the color on mouse
    rollover, so we will use the selector `.btn:hover` to change the style of the
    element when the mouse is over it. You will notice that there''s a small fade
    when you rollover the button, and this comes from `css-transitions` being used
    in the Designmodo Flat UI pack''s CSS files, which set this as an effect applied
    to every link and button. Let''s use the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'The following screenshot is how our `About` section looks after setting the
    CSS:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Styling our page with CSS](img/0048OS_05_11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Our `Work` section doesn''t require a lot of changes on the CSS file, as it''s
    already pretty similar to what we''re looking to do. So, we''ll just change the
    background color of the `jumbotron div` element, and leave some margin between
    the elements to make them equally spaced, as shown in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'For our `Contacts` section, our content is composed by an `<h2>` tag, a link,
    and text for the phone number. This is fairly easy to stylize as well, and it''s
    mostly just color and text size changes, along with a margin setting to adapt
    to this part. Use the following code for the `Contacts` section:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'At last, let''s work on our footer. This currently doesn''t resemble much of
    our design, so we need to make it smaller by defining its height, making the text
    smaller, and aligning our icons to the right. To align our icons, we''ll be using
    `float: right`; we''ll use `margin` to create some spacing between the icons.
    The following is the CSS part of code created for this bit:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: We had to set the class icon for the element `<a href="#" class="icon"><img
    src="img/fb-icon.png"></a>`, so that we could effectively target just these icons
    and align them to the right in the same line. This concludes the CSS work for
    our layout page.
  prefs: []
  type: TYPE_NORMAL
- en: 'By just using some simple CSS lines to align elements and change some colors,
    this looks extremely similar to our design. Let''s take a look at how our page
    appears now. It should look similar to what is shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Styling our page with CSS](img/0048OS_05_12.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Using jQuery for navigation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'As we said before, we can use a slide to the `section` code to create our single
    page website navigation, so that when the user clicks in the menu, the page scrolls
    to the beginning of that section. To accomplish that effect, we will be using
    a jQuery plugin called `PageScroller`, available at [http://pagescroller.com/](http://pagescroller.com/).
    There are two versions: Pro and Lite. For this exercise, the Lite version will
    be enough, as we only need the minimum functionality. The way we''re going to
    implement this is extremely easy as well, but if you''re looking for more options,
    you can check the plugin `readme` file and the website.'
  prefs: []
  type: TYPE_NORMAL
- en: 'First of all, we''ll need to load the JavaScript files needed for this. After
    unpacking the plugin, copy and paste the `jquery.pagescroller.lite.js` file into
    your `js` folder. We will also need jQuery for this, but we will load it from
    the **Content Delivery Network** (**CDN**) from an external path. So, include
    these two lines in your `<head>` element, ideally before the `</head>` tag, as
    shown in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: This will load the JavaScript files to your page, but you will now need to initialize
    the plugin.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can do this by simply calling the function `pageScroller()` inside a `document.ready`
    JavaScript function, which means that it will only be started after our document
    is loaded. Take a look at the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'With the script loaded and initialized, everything is ready to go. So, the
    way that the plugin works is listening to clicks on the element specific when
    initialized, that in this case we defined as our `#menu div` element in `navigation:
    ''#menu''`. Now, it will look for the `class` section to scroll to it, so we need
    to add this class to our titles.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Ideally, we want to add this to either the beginning of our container or our
    `<h2>` title for the section. The following code shows how we have defined the
    sections in our HTML document:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: This way, we're targeting the beginning of our sections each time by adding
    the class section to it, and when clicking in the menu, it will scroll the page
    to the corresponding section. Try it out, and you'll see that it scrolls directly
    to the section clicked in the menu.
  prefs: []
  type: TYPE_NORMAL
- en: This kind of navigation works even better with bigger sections, but it's a quick
    and easy way to add a cool and easy navigation to our single-page website.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This is it for our development! In this chapter, we developed our single-page
    website by using the Designmodo Flat UI pack to simplify the workflow. We put
    organization of files, image exporting, and project phases in practice, and we
    learned how to approach a project and what you should have in mind in bigger projects.
    We also had our first interaction with Twitter Bootstrap, which is the foundation
    of the Flat UI pack. We managed to create a very similar look to our layout by
    just using HTML, predefined Bootstrap classes, and custom CSS styles to create
    the exact design we've done before. We also used `PageScroller` to create our
    single-page scroll navigation.
  prefs: []
  type: TYPE_NORMAL
- en: Next, let's see how we can create our own Flat UI kit by creating our own components.
  prefs: []
  type: TYPE_NORMAL
