- en: Patching and Security Hardening
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter is about understanding various aspects of patching and security
    hardening. You will understand the importance of patching, along with the practical
    techniques of enumerating patch levels on target systems, and you'll develop secure
    configuration guidelines for hardening the security of the infrastructure.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will learn about the following topics in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Defining patching
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Patch enumeration on Windows and Linux
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction to security hardening and secure configuration reviews
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Utilizing **Center for Internet Security** (**CIS**) benchmarks for hardening
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Defining patching?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Typically, a piece of software gets developed after going through the entire
    SDLC and then gets publicly released. We commonly assume that it will meet all
    the functional requirements and be secure against potential threats. However,
    it might be that some functionality in the software is mistakenly broken, allowing
    attackers to exploit a potential vulnerability. Now, once the exact problem is
    known, the vendor works on patching the affected software component as quickly
    as possible.
  prefs: []
  type: TYPE_NORMAL
- en: Once the patch is ready, it is distributed to all the customers through an official
    channel. However, customers need to ensure that the right and latest patch is
    applied on their systems. Failing to do so will leave the systems vulnerable to
    severe threats. This creates a need for a systematic approach to managing patches.
  prefs: []
  type: TYPE_NORMAL
- en: The most commonly found vulnerabilities are a result of missing patches in various
    software components. So, if we proactively manage patches on our systems, then
    the most common vulnerabilities will be addressed.
  prefs: []
  type: TYPE_NORMAL
- en: Patch management is the well-defined and organized process that helps identify,
    test, and apply various patches on existing systems.
  prefs: []
  type: TYPE_NORMAL
- en: Patch enumeration
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In order to know what patches need to be applied to any given system, it is
    first important to know what version of software is currently running on that
    system and what its current patch level is. Patch enumeration is a process of
    assessing the current patch level for any given system. Once the current patch
    level is known, then further patch updates can be planned and applied.
  prefs: []
  type: TYPE_NORMAL
- en: Windows patch enumeration
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'With tons of popular and widely used products, Microsoft releases frequent
    patch updates to its customers. Microsoft usually releases patches on every second
    Tuesday of the month. The following screenshot shows the Microsoft patch update
    site with information on the latest patch releases:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/9c28e15e-22c1-4fcb-98b6-d33cef2284be.png)'
  prefs: []
  type: TYPE_IMG
- en: In the absence of a centralized patch management system, one can individually
    download and apply Microsoft patches from the portal shown in the preceding screenshot.
  prefs: []
  type: TYPE_NORMAL
- en: It is essential to know the current state of patches on the system before we
    plan for an update. To make this task easier, Microsoft provides a utility called
    **Microsoft Baseline Security Analyzer** (**MBSA**). This utility can be downloaded
    from [https://www.microsoft.com/en-in/download/details.aspx?id=7558](https://www.microsoft.com/en-in/download/details.aspx?id=7558).
  prefs: []
  type: TYPE_NORMAL
- en: 'The following screenshot shows the startup screen of MBSA:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/2c946b8b-2e3d-4e2f-8421-0124feca92f5.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We can select the Scan a computer option and proceed to the next screen, as
    shown in the following screenshot. We can then either scan the local system or
    the remote system by specifying the remote IP address. We also have the choice
    to select what should be included as part of our assessment:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/614cb88b-1c1a-4217-a9b9-60de6731d972.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Upon clicking Start Scan, the MBSA starts running the assessment on a predefined
    target, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/f965e1cc-79c4-40c4-babb-62ceac6b09e9.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Once the scan is complete, the MBSA presents us with a detailed findings report,
    as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/93ac11da-bd9b-41ac-9211-6f8f52765ac0.png)'
  prefs: []
  type: TYPE_IMG
- en: Based on the findings in the report, we can then decide to work on mitigations
    by applying missing patches and settings.
  prefs: []
  type: TYPE_NORMAL
- en: Linux patch enumeration
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous section, we saw how MBSA can be used to assess the security
    and patch level on any Microsoft system. We can do a similar assessment on a Linux
    system as well. In order to perform security and patch enumeration on a Linux
    system, we can use a tool called **Lynis**, available at [https://cisofy.com/lynis/](https://cisofy.com/lynis/).
  prefs: []
  type: TYPE_NORMAL
- en: 'Lynis is a comprehensive tool which can be effectively used for security auditing,
    compliance testing, vulnerability detection, and system hardening. It runs on
    almost all UNIX-based systems. While it comes preinstalled in certain Linux distributions,
    such as Kali Linux, you might have to install it separately on other Linux versions;
    note the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/4e697252-6f24-42d7-a6e1-6f6c63465baf.png)'
  prefs: []
  type: TYPE_IMG
- en: Once Lynis finishes running all tests, a detailed report is generated at the
    location `/var/log/lynis.log`. The report contains all the information on the
    security health check of the system that was assessed.
  prefs: []
  type: TYPE_NORMAL
- en: Security hardening and secure configuration reviews
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When we see an application running in our web browser, it is just the tip of
    the iceberg. There is lot of underlying infrastructure that is supporting the
    application, which typically includes a web server, database server, operating
    system, and so on. So, even if the end application is made very secure, it might
    be possible that the underlying infrastructure components have vulnerabilities,
    allowing attackers to compromise the system. This is where security hardening
    comes into picture.
  prefs: []
  type: TYPE_NORMAL
- en: In order to secure the complete application ecosystem, which includes the underlying
    infrastructure, it is essential to perform secure configuration reviews for all
    the participating components and harden the security accordingly. A simple way
    to achieve this could be going through configuration files for each component
    and then configuring items that are relevant to security. Another better approach
    could be using industry standard benchmarks for secure configuration. The **Center
    for Internet Security** (**CIS**) provides security benchmarks for various platforms.
    These benchmarks are well researched and tested.
  prefs: []
  type: TYPE_NORMAL
- en: Using CIS benchmarks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'CIS provides security benchmarks for various platforms such as servers, operating
    systems, mobile devices, browsers, and so on. There are two ways one can use CIS
    benchmarks:'
  prefs: []
  type: TYPE_NORMAL
- en: Individually download the benchmark for the required platform from [https://www.cisecurity.org/cis-benchmarks/](https://www.cisecurity.org/cis-benchmarks/)
    and then manually verify the configuration as per the benchmark.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use an automated tool for assessing the target platform against the CIS benchmark,
    such as the CIS CAT tool. The CIS CAT tool can be obtained from [https://learn.cisecurity.org/cis-cat-landing-page](https://learn.cisecurity.org/cis-cat-landing-page).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The free version of the CIS CAT tool supports the assessment of only a limited
    number of benchmarks, while the professional version allows assessment of all
    available CIS benchmarks.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following screenshot shows the startup screen of the CIS CAT tool:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/79b8a668-da60-4c7b-befe-ea97acfd8998.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We select the CIS Google Chrome Benchmark for our assessment. We then need
    to select Profiles that we need to include in our assessment, as shown in the
    following screenshot. Level 1 profiles usually have the most important and bare
    minimum checks that need to be assessed while Level 2 profiles have checks that
    can be optional as per the context:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/8276cee4-2b38-4cb3-ae80-fcb95b86f753.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now we select the output format and the location where we want our report to
    be generated, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/e923d4bb-f427-4aca-ad5a-1c9d3e85ce10.png)'
  prefs: []
  type: TYPE_IMG
- en: We can now view the summary of our assessment as and then initiate the scan
    as shown in the image below.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/6d10142e-184d-4cea-9b68-b50115a965c9.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Once we start the assessment, the CIS CAT tool runs all predefined checks related
    to Chrome on the target Chrome installation, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/8edb0489-a765-47f4-8170-45a3284f3ebb.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Once the assessment is complete, the CIS CAT tool shows us which checks passed
    and which failed, as shown in the following screenshot. Also, a detailed report
    in HTML format is generated in the preconfigured directory:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/3b27147f-6fbd-41f7-8c42-41431c9d627c.png)'
  prefs: []
  type: TYPE_IMG
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we learned about the relevance of patching and how secure configuration
    can be useful in securing the application ecosystem. In the next chapter we would
    learn various aspects of reporting along with the importance of security metrics.
  prefs: []
  type: TYPE_NORMAL
