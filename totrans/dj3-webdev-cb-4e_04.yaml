- en: Templates and JavaScript
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Arranging the base.html template
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using Django Sekizai
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Exposing settings in JavaScript
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using HTML5 data attributes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Providing responsive images(env)$ python manage.py migrate ideas zero
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Implementing a continuous scrolling
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Opening object details in a modal dialog
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Implementing the Like widget
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Uploading images via Ajax
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Static websites are useful for static content, such as traditional documentation,
    online books, and tutorials; however, today, most interactive web apps and platforms
    must have dynamic components if they want to stand out and give visitors the best
    user experience. In this chapter, you will learn how to use JavaScript and CSS
    together with Django templates. We will use the Bootstrap 4 frontend framework
    for responsive layouts and the jQuery JavaScript framework for productive scripting.
  prefs: []
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As before, to work with the code of this chapter, you will need the latest stable
    version of Python, MySQL, or PostgreSQL database and a Django project with a virtual
    environment. Some recipes will require specific Python dependencies. Some of them
    will require additional JavaScript libraries. You will see the requirements of
    each recipe later in the chapter.
  prefs: []
  type: TYPE_NORMAL
- en: You can find all the code for this chapter at the `ch04` directory of the GitHub
    repository at [https://github.com/PacktPublishing/Django-3-Web-Development-Cookbook-Fourth-Edition](https://github.com/PacktPublishing/Django-3-Web-Development-Cookbook-Fourth-Edition).
  prefs: []
  type: TYPE_NORMAL
- en: Arranging the base.html template
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When you start working on templates, one of the first things to do is create
    the `base.html` boilerplate, which will be extended by most of the page templates
    in your project. In this recipe, we will demonstrate how to create such a template
    for multilingual HTML5 websites, with responsiveness in mind.
  prefs: []
  type: TYPE_NORMAL
- en: Responsive websites are those that provide the same base content to all devices,
    styled appropriately to the viewport, whether the visitor uses desktop browsers,
    tablets, or phones. This differs from adaptive websites, where the server attempts
    to determine the device type based on the user agent, then provides entirely different
    content, markup, and even functionality depending on how that user agent is categorized.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Create the `templates` directory in your project and set the template directories
    in the settings to include it, as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Go through the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the root directory of your templates, create a `base.html` file with the
    following content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Under `misc/includes`, create a template including all the versions of the
    favicon:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: A favicon is a small image that we usually see in the browser tabs, tiles of
    recently visited websites, and shortcuts on the desktop. You can use one of the
    online generators to generate different versions of the favicon from a logo for
    different use cases, browsers, and platforms. Our favorite favicon generators
    are [https://favicomatic.com/](https://favicomatic.com/) and [https://realfavicongenerator.net/](https://realfavicongenerator.net/).
  prefs: []
  type: TYPE_NORMAL
- en: Create the templates `misc/includes/header.html` and `misc/includes/footer.html`
    with your website's header and footer. For now, you can just create empty files
    there.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The base template contains the `<head>` and `<body>` sections of the HTML document,
    with all the details that are reused on each page of the website. Depending on
    the web design requirements, you can have additional base templates for different
    layouts. For example, we can add the `base_simple.html` file, which has the same
    HTML `<head>` section and a very minimalistic `<body>` section, and this can be
    used for the login screen, password reset, or other simple pages. You can have
    separate base templates for other layouts as well, such as single-column, two-column,
    and three-column layouts, where each extends `base.html` and overwrites the blocks
    as needed.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s look into the details of the `base.html` template that we defined earlier.
    Here are the details for the `<head>` section:'
  prefs: []
  type: TYPE_NORMAL
- en: We define UTF-8 as the default encoding to support multilingual content.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Then, we have the viewport definition that will scale the website in the browser
    to use the full width. This is necessary for small-screen devices that will get
    specific screen layouts created with the Bootstrap frontend framework.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Of course, there's a customizable website title that is used in the browser
    tabs and search results of search engines.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Then we have a block for meta tags, that can be used for **search engine optimization**
    (**SEO**), Open Graph, and Twitter Cards.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Then we include favicons of different formats and sizes.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We include the default Bootstrap and custom website styles. We load the Bootstrap
    CSS, as we want to have responsive layouts, and this will also normalize the basic
    styling for all elements for consistency across browsers.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: And lastly, we have extensible blocks for meta tags, style sheets, and whatever
    else might be necessary for the `<head>` section.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Here are the details for the `<body>` section:'
  prefs: []
  type: TYPE_NORMAL
- en: Firstly, we include the header of the website. That's where you can put your
    logo,  website title, and main navigation.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Then, we have the main container containing a content block placeholder, which
    is to be filled by extending the templates.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Inside the container, there is the `content` block, which contains the `sidebar`
    and `main` blocks. In child templates, when we need a layout with a sidebar. We
    will overwrite the `sidebar` and `main` blocks, but, when we need the full-width
    content, we will overwrite the `content` block.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Then, we include the footer of the website. That's where you can have copyright
    information and links to important meta pages, such as privacy policy, terms of
    use, contact form, and others.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We then load the jQuery and Bootstrap scripts. Extensible JavaScript blocks
    are included here at the end of the `<body>` following the best practices for
    page-load performance, much like those for the style sheets included in the `<head>`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Lastly, we have blocks for additional JavaScript and extra HTML, such as HTML
    templates for JavaScript or hidden modal dialogs, which we will explore later
    in this chapter.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The base template that we created is, by no means, a static unchangeable template.
    You can modify the markup structure, or add the elements you need to it—for example,
    a template block for body attributes, a snippet for Google Analytics code, common
    JavaScript files, the Apple touch icon for iPhone bookmarks, Open Graph meta tags,
    Twitter Card tags, schema.org attributes, and so on. You may also want to define
    other blocks, depending on the requirements of your project, and maybe even wrap
    the whole content of the body so that you can overwrite it in a child template.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The *Using Django Sekizai* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Exposing settings in JavaScript* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using Django Sekizai
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In Django templates, normally you would use template inheritance to overwrite
    blocks from parent templates to include styles or scripts to the HTML document.
    This means that every main template of each view should be aware of all content
    that is inside; however, sometimes it is much more convenient to let the included
    templates decide what styles and scripts to load. It is possible to do this with
    Django Sekizai, which we will use in this recipe.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Before we begin with the recipe, follow these steps to get ready:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Install `django-classy-tags` and `django-sekizai` to your virtual environment
    (and add them to the `requirements/_base.txt`):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Then add `sekizai` to the installed apps in the settings:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, add the `sekizai` context processor to the template configuration in
    the settings:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Go through the following steps to complete the recipe:'
  prefs: []
  type: TYPE_NORMAL
- en: 'At the beginning of the `base.html` template, load the `sekizai_tags` library:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'In the same file, at the end of the `<head>` section, add the template tag
    `{% render_block "css" %}` as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, at the end of the `<body>` section, add the template tag `{% render_block
    "js" %}` as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, in any included template, when you want to add some styling or JavaScript,
    use the `{% addtoblock %}` template tags as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Django Sekizai works with the templates included by the `{% include %}` template
    tag, custom template tags that are rendered with templates, or templates for form
    widgets. The `{% addtoblock  %}` template tags define the Sekizai block that we
    want to add HTML content to.
  prefs: []
  type: TYPE_NORMAL
- en: When you add something to a Sekizai block, `django-sekizai` takes care of including
    it there only once. This means that you can have multiple included widgets of
    the same type, but their CSS and JavaScript will only be loaded and executed once.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The *Implementing the Like widget* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Uploading images via Ajax* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Exposing settings in JavaScript
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Django projects have their configuration set in the settings files, such as
    `myproject/settings/dev.py` for the development environment; we described this
    in the *Configuring settings for development, testing, staging, and production
    environments* recipe in [Chapter 1](87d1a2a0-31bb-4c77-ab38-98b738f55fa1.xhtml)*,
    Getting Started with Django 3.0*. Some of these configuration values may also
    be useful for functionality in the browser, and so they will also need to be set
    in JavaScript. We want a single location to define our project settings, so, in
    this recipe, we will see how we can pass some configuration values from the Django
    server to the browser.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Make sure that you have the `request` context processor included in the `TEMPLATES[''OPTIONS''][''context_processors'']`
    setting, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'You should also create the `core` app, if you haven''t done so already, and
    place it under `INSTALLED_APPS` in the settings:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Follow these steps to create and include the JavaScript settings:'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the `views.py` of your `core` app, create a `js_settings()` view that returns
    a response of the JavaScript content type, as shown in the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Plug in this view into the URL configuration:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Load the JavaScript-based view in the frontend by adding it at the end of the
    `base.html` template:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'Now we can access the specified settings in any JavaScript file as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the `js_settings` view, we built a dictionary of settings that we want to
    pass to the browser, converted the dictionary to JSON, and rendered a template
    for a JavaScript file that parses the JSON and assigns the result to the `window.settings`
    variable. By converting a dictionary to a JSON string and parsing it in the JavaScript
    file, we can be sure that we won't have any problems with trailing commas after
    the last element—that's allowed in Python, but invalid in JavaScript.
  prefs: []
  type: TYPE_NORMAL
- en: 'The rendered JavaScript file will look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The *Configuring settings for development, testing, staging, and production
    environments* recipe in [Chapter 1](87d1a2a0-31bb-4c77-ab38-98b738f55fa1.xhtml)*,
    Getting Started with Django 3.0*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Arranging the base.html template* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Using HTML5 data attributes* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using HTML5 data attributes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'HTML5 introduces `data-*` attributes for passing data about a specific HTML
    element from the webserver to JavaScript and CSS. In this recipe, we will see
    a way to attach data efficiently from Django to custom HTML5 data attributes and
    then describe how to read the data from JavaScript with a practical example: we
    will render a Google Map with a marker at a specified geographical position; when
    we click on the marker, we will display the address in an information window.'
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To get ready, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Use a PostgreSQL database with a PostGIS extension for this and the following
    chapters. To see how to install the PostGIS extension, look at the official documentation
    at [https://docs.djangoproject.com/en/2.2/ref/contrib/gis/install/postgis/](https://docs.djangoproject.com/en/2.2/ref/contrib/gis/install/postgis/).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Make sure that you use the `postgis` database backend for the Django project:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a `locations` app with a `Location` model. It will contain a UUID primary
    key, character fields for the name, street address, city, country, and postal
    code, a PostGIS-related `Geoposition` field, and the `Description` text field:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'Overwrite the `save()` method to generate a unique UUID field value when creating
    a location:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'Create methods to get the full address of the location in one string:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'Create functions to get or set the geoposition by `latitude` and `longitude`—in
    the database, `geoposition` is saved as a `Point` field. We can use these functions
    in the Django shell, forms, management commands, data migrations, and elsewhere:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: Remember to make and run migrations for the app after updating the model.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a model administration to add and change locations. Instead of the standard
    `ModelAdmin`, we will be using `OSMGeoAdmin` from the `gis` app. It will render
    a map to set `geoposition` using `OpenStreetMap`, which can be found at [https://www.openstreetmap.org](https://www.openstreetmap.org):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: Add some locations in the administration for further usage.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We will use and evolve this `locations` app in further recipes too.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Go through the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Register for the Google Maps API key. You can learn how and where to do this
    at the Google developers' documentation at [https://developers.google.com/maps/documentation/javascript/get-api-key](https://developers.google.com/maps/documentation/javascript/get-api-key).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the Google Maps API key to the secrets and then read it out in the settings:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'At the core app, create a context processor to expose `GOOGLE_MAPS_API_KEY`
    to the templates:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'Refer to this context processor in the template settings:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'Create the list and detail views for the locations:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'Create the URL configuration for the `locations` app:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'Include the URLs of the locations in the project''s URL configuration:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: It is time to create the template for the location list and location detail
    views. The location list will be as simple as possible for now; we only need it
    to be able to browse the locations and get to the location detail views.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, let''s create a template for the location details by extending the `base.html`
    and overwriting the `content` block:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'Also in the same template, overwrite the `js` block:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'As well as the templates, we need the JavaScript file that will read out the
    HTML5 data attributes and use them to render a map with a marker on it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'For the map to be displayed nicely, we need to set some CSS, as shown in the
    following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'If you run a local development server and browse to the detail view for a location,
    you will navigate to a page with a map and a marker. When you click on the marker,
    a popup will open with address information. This will look as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/8c20674c-8864-4fbe-9e23-28ea295e8901.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Since scrolling in maps on mobile devices can be problematic because of scroll-within-scroll
    issues, we have opted to hide the map on small screens (less than or equal to
    480 px width) so that when we resize the screen down, the map eventually becomes
    invisible, as in the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/863af8c7-471c-4d13-969e-b99f8da8ef1c.png)'
  prefs: []
  type: TYPE_IMG
- en: Let's take a look at the code. In the first few steps, we added the Google Maps
    API key and exposed it to all the templates. Then we created views to browse locations
    and plugged them into the URL configuration. Then we created the list and detail
    templates.
  prefs: []
  type: TYPE_NORMAL
- en: The `template_name` default for a `DetailView` comes from the lowercase version
    of the model's name, plus `detail`; hence; our template was named `location_detail.html`.
    If we wanted to use a different template, we could specify a `template_name` property
    for the view. In the same way, the `template_name` default for a `ListView` comes
    from the lowercase version of the model's name, plus `list`, so it is named `location_list.html`.
  prefs: []
  type: TYPE_NORMAL
- en: In the detail template, we had the location title and description followed by
    a `<div>` element with the `id="map"`, as well as the `data-latitude`, `data-longitude`,
    and `data-address` custom attributes. These made up the `content` block elements.
    Two `<script>` tags were added to the `js` block that came at the end of the `<body>`—one
    being the `location_detail.js` described next and the other being the Google Maps
    API script, to which we have passed our Maps API key and the name of the callback
    to invoke when the API loads.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the JavaScript file, we created a `Location` class using a prototype function.
    This function has a static `init()` method, which was given as the callback to
    the Google Maps API. When `init()` is called, the constructor is invoked to create
    a new singleton `Location` instance. In the constructor function, a series of
    steps are taken to set up the map and its features:'
  prefs: []
  type: TYPE_NORMAL
- en: First, the map case (container) is found by its ID. Only if that element is
    found, do we continue.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, we find the geographic coordinates using the `data-latitude` and `data-longitude`
    attributes, storing them in a dictionary as the location's `coords`. This object
    is in the form understood by the Google Maps API and will be used later.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The `data-address` is read next and stored directly as the address property
    of the location.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: From here, we start building things out, beginning with the map. To ensure that
    the location will be visible, we set the center using the `coords` pulled from
    data attributes earlier.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A marker makes the location obvious on the map, positioned using the same `coords`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Finally, we build up an information window, which is a type of pop-up bubble
    that can be displayed directly on the map using the API. In addition to the address
    that we retrieved earlier, we look for the location title based on the `.map-title`
    class that it was given in the template. This is added as an `<h1>` heading to
    the window, followed by the address as a `<p>` paragraph. To allow the window
    to be displayed, we add a click event listener to the marker that will open the
    window.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The *Exposing settings in JavaScript* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Arranging the base.html template* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Providing responsive images* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Opening object details in a modal dialog* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Inserting a map into a change form* recipe in [Chapter 6](8b8138c4-c364-4616-8a81-b2f369cf870b.xhtml)*,
    Model Administration*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Providing responsive images
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As responsive websites became the norm, many performance issues have arisen
    when it comes to providing identical content to both mobile devices and desktop
    computers. One very easy way to reduce the load time of a responsive site on small
    devices is to provide smaller images. This is where the `srcset` and `sizes` attributes,
    key components of responsive images, come into play.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let's start with the `locations` app that was used in the previous recipe.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Go through the following steps to add the responsive images:'
  prefs: []
  type: TYPE_NORMAL
- en: 'First of all, let''s install `django-imagekit` into your virtual environment
    and add it to the `requirements/_base.txt`. We''ll be using it to resize original
    images to specific sizes:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: 'Put the `"imagekit"` into the `INSTALLED_APPS` in the settings:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: 'In the beginning of the `models.py` file, let''s import some libraries that
    are used for image versions and define a function responsible for the directory
    and the filenames of picture files:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: 'Now let''s add a `picture` field to the `Location` model in the same file together
    with image version definitions:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, overwrite the `delete()` method for the `Location` model to delete the
    generated versions when the model instance is deleted:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: Make and run migrations to add the new `picture` field to the database schema.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Update the location detail template to include the image:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: Finally, add some images for locations in the administration.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Responsive images are powerful and, at their base, are concerned with providing
    different images based on media rules that indicate the features of the displays
    upon which each image will be shown. The first thing we did here was to add the
    `django-imagekit` app, which makes it possible to generate the different images
    that are needed on the fly.
  prefs: []
  type: TYPE_NORMAL
- en: 'Obviously, we also will need the original image source, so in our `Location`
    model, we added an image field called `picture`. In the `upload_to()` function,
    we built the upload path and filename out of the current year and month, the UUID
    of the location, and the same file extension as the uploaded file. We also defined
    the image version specifications there as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`picture_desktop` will have the dimensions of 1,200 x 600 and will be used
    for the desktop layout'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`picture_tablet` will have the dimensions of 768 x 384 and will be used for
    tablet'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`picture_mobile` will have the dimensions of 640 x 320 and will be used for
    smartphones'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In the `delete()` method of the location, we check whether the `picture` field
    has any value and then try to delete it and its image versions before deleting
    the location itself. We use the `contextlib.suppress(FileNotFoundError)` to silently
    ignore any errors if a file was not found on the disk.
  prefs: []
  type: TYPE_NORMAL
- en: 'The most interesting work happens in the template. When a location picture
    exists, we construct our `<picture>` element. On the surface, this is basically
    a container. In fact, it could have nothing inside of it besides the default `<img>`
    tag that appears at the end in our template, though that would not be very useful.
    In addition to the default image, we generate thumbnails for other widths—480
    px and 768 px—and these are then used to build additional `<source>` elements.
    Each `<source>` element has the `media` rule with the conditions under which to
    select an image from the `srcset` attribute value. In our case, we only provide
    one image for each `<source>`. The location detail page will now include the image
    above the map and should look something like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/b78c4a95-aa79-4d68-b022-2eddd6273330.png)'
  prefs: []
  type: TYPE_IMG
- en: 'When the browser loads this markup, it follows a series of steps to determine
    which image to load:'
  prefs: []
  type: TYPE_NORMAL
- en: The `media` rules for each `<source>` are inspected in turn, checking to see
    whether any one of them matches the current viewport
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: When a rule matches, the `srcset` is read and the appropriate image URL is loaded
    and displayed
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If no rules match, then the `src` of the final, default image is loaded
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'As a result, smaller images will be loaded on smaller viewports. For example,
    here we can see that the smallest image was loaded for a viewport only 375 px
    wide:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/e8c6084d-1ec5-48d5-8a9a-45514e86db60.png)'
  prefs: []
  type: TYPE_IMG
- en: For browsers that cannot understand the `<picture>` and `<source>` tags at all,
    the default image can still be loaded, as it is nothing more than a normal `<img>`
    tag.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You can use responsive images not only to provide targeted image sizes, but
    also to differentiate pixel density, and to provide images that are curated explicitly
    for the design at any given viewport size. This is known as art direction. If
    you are interested in learning more, the **Mozilla Developer Network** (**MDN**)
    has a thorough article on the topic, available at [https://developer.mozilla.org/en-US/docs/Learn/HTML/Multimedia_and_embedding/Responsive_images](https://developer.mozilla.org/en-US/docs/Learn/HTML/Multimedia_and_embedding/Responsive_images).
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The *Arranging the base.html template* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Using HTML5 data attributes* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Opening object details in a modal dialog* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Inserting a map into a change form* recipe in [Chapter 6](8b8138c4-c364-4616-8a81-b2f369cf870b.xhtml)*,
    Model Administration*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Implementing a continuous scrolling
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Social websites often have a feature called continuous scrolling, which is also
    known as infinite scrolling, as an alternative to pagination. Rather than having
    links to see additional sets of items separately, there are long lists of items,
    and, as you scroll down the page, new items are loaded and attached to the bottom
    automatically. In this recipe, we will see how to achieve such an effect with
    Django and the jScroll jQuery plugin.
  prefs: []
  type: TYPE_NORMAL
- en: You can download the jScroll script and also find extensive documentation about
    the plugin from [https://jscroll.com/](https://jscroll.com/).
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We'll be reusing the `locations` app that we created in the previous recipes.
  prefs: []
  type: TYPE_NORMAL
- en: 'To have some more interesting data to show in the list view, let''s add the
    `ratings` field to the `Location` model as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: The `get_rating_percentage()` method will be necessary to return the rating
    as a percentage for the representation.
  prefs: []
  type: TYPE_NORMAL
- en: Don't forget to make and run migrations and then add some ratings for locations
    in the administration.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Go through the following steps to create a continuously scrolling page:'
  prefs: []
  type: TYPE_NORMAL
- en: First, add enough locations in the administration. As you can see from the *Using
    HTML5 data attributes* recipe, we will be paginating the `LocationList` view by
    10 items per page, so we will need at least 11 locations to see whether the continuous
    scroll works as expected.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Modify the template for the location list view as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: 'In the same template, overwrite the `css` and `js` blocks with the following
    markup:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: 'As a final step with this template, overwrite the `extra_body` block with the
    JavaScript template for the loading indicator:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: Create the page's navigation at `locations/includes/navigation.html`. For now,
    you can just create an empty file there.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The next step is to add JavaScript with the initialization of the continuous
    scroll widget:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, we''ll add some CSS so that ratings can be displayed using user-friendly
    stars instead of just numbers:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: 'In the main file for the main website style, add a style for the loading indicator:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'When you open the location list view in a browser, the predefined number of
    items set to `paginate_by` in the view (that is, 10) is shown on the page. As
    you scroll down, an additional page''s worth of items and the next pagination
    link are loaded automatically and appended to the item container. The pagination
    link uses the `{% modify_query %}` custom template tag from the *Creating a template
    tag to modify request query parameters* recipe in [Chapter 5](c4fd2c24-3a56-4d2d-9ef3-c455e8a626ef.xhtml)*,
    Custom Template Filters and Tags* to generate an adjusted URL based on the current
    one, but pointing to the correct next page number. If you have a slower connection
    speed, then when you scroll to the bottom of the page, you will see a page like
    the following until the items of the next page are loaded and attached to the
    list:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/2948e1d7-aa80-4abb-be32-84570b629cda.png)'
  prefs: []
  type: TYPE_IMG
- en: Scrolling down further, the second, third, and later pages of the items are
    loaded and attached at the bottom. This continues until there are no more pages
    left to load, which is signified by the lack of any further loaded pagination
    links in the final group.
  prefs: []
  type: TYPE_NORMAL
- en: We use the Cloudflare CDN URL to load the jScroll plugin here, but, if you opt
    to download a copy locally as a static file, then use a `{% static %}` lookup
    to add the script to the template.
  prefs: []
  type: TYPE_NORMAL
- en: Upon the initial page load, the element with the `item-list` CSS class, which
    contains the items and pagination links, will become a jScroll object through
    the code in the `list.js`. In fact, this implementation is generic enough that
    it could be used to enable continuous scrolling for any list display following
    a similar markup structure.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following options are given to define its features:'
  prefs: []
  type: TYPE_NORMAL
- en: '`loadingHtml`: This sets the markup that jScroll will inject at the end of
    the list while loading a new page of items. In our case, it is an animated loading
    indicator, and it is drawn from the HTML contained in a `<script type="text/template"
    />` tag directly in the markup. By giving this `type` attribute, the browser will
    not try to execute it as it would a normal JavaScript, and the content inside
    remains invisible to the user.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`padding`: When the scroll position of the page is within this distance of
    the end of the scrolling area, a new page should be loaded. Here, we''ve set it
    at 100 pixels.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`pagingSelector`: A CSS selector that indicates which HTML elements in the `object_list`
    are pagination links. These will be hidden in browsers where the jScroll plugin
    activates so that the continuous scroll can take over the loading of additional
    pages, but users in other browsers will still be able to navigate by clicking
    on the pagination normally.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`nextSelector`: This CSS selector finds the HTML element(s) from which to read
    the URL of the next page.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`contentSelector`: Another CSS selector. This specifies which HTML elements
    should be extracted from the Ajax-loaded content and added to the container.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `rating.css` inserts Unicode star characters and overlaps the outlines with
    filled-in versions to create the rating effect. Using a width equivalent to the
    rating value's percentage of the maximum (5, in this case), the filled-in stars
    cover the right amount of space on top of the hollow ones, allowing for decimal
    ratings. In the markup, there is an `aria-label` attribute with the rating information
    for people using screen readers.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, the CSS in the `style.css` file uses CSS animations to create a rotating
    loading indicator.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We have a placeholder for navigation in the sidebar. Note that, with continuous
    scrolling, all the secondary navigation that you have after the list of items,
    should be positioned in the sidebar, rather than in the footer, because the visitor
    might never reach the end of the page.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The *Filtering object lists* recipe in [Chapter 3](ac26c6a6-3fd1-4b28-8b01-5b3cda40f4f9.xhtml)*,
    Forms and Views*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Managing paginated lists* recipe in [Chapter 3](ac26c6a6-3fd1-4b28-8b01-5b3cda40f4f9.xhtml)*,
    Forms and Views*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Composing class-based views* recipe in [Chapter 3](ac26c6a6-3fd1-4b28-8b01-5b3cda40f4f9.xhtml)*,
    Forms and Views*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Exposing settings in JavaScript* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Creating a template tag to modify request query parameters* recipe in [Chapter
    5](c4fd2c24-3a56-4d2d-9ef3-c455e8a626ef.xhtml)*, Customizing Template Filters
    and Tags*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Opening object details in a modal dialog
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this recipe, we will create a list of links to the locations, which, when
    clicked, open a Bootstrap modal dialog with some information about the location
    and the Learn more… link, leading to the location detail page:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/f93ba181-3a7d-4d41-a8b3-e783ff344a42.png)'
  prefs: []
  type: TYPE_IMG
- en: The content for the dialog will be loaded by Ajax. For visitors without JavaScript,
    the detail page will open immediately, without this intermediate step.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let's start with the `locations` app that we created in the previous recipes.
  prefs: []
  type: TYPE_NORMAL
- en: Make sure that you have views, URL configuration, and templates for location
    listings and location details, just like we defined previously.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Execute these steps one by one to add the modal dialog as an intermediate step
    between the list view and the detail view:'
  prefs: []
  type: TYPE_NORMAL
- en: 'First, in the URL configuration of the `locations` app, add a rule for the
    response of the modal dialog:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a template for the modal dialog:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: 'In the template for the location list, update the links to the location details
    by adding custom data attributes:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: 'In the same file, overwrite the `extra_body` content with the markup for the
    modal dialog:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, modify the `list.js` file by adding a script to handle the opening
    and closing of the modal dialog:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'If we go to the location''s list view in a browser and click on one of the
    locations, we will see a modal dialog similar to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/c4b70236-157e-481e-8fbd-af5d0b87ca88.png)'
  prefs: []
  type: TYPE_IMG
- en: Let's examine how this all came together. The URL path named `location_detail_modal` points
    to the same location detail view, but uses a different template. The mentioned
    template just has a responsive image and a modal dialog footer with the link Learn
    more… leading to the normal detail page of the location. In the list view, we
    changed the link of a list item to include `data-modal-title` and `data-modal-url`
    attributes that will later be referred to by JavaScript. The first attribute stipulates
    that the full address should be used as the title. The second attribute stipulates
    the location from which the HTML for the body of the modal dialog should be taken.
    At the end of the list view, we have the markup for the Bootstrap 4 modal dialog. The
    dialog contains a header with the Close button and title, plus a content area
    for the main details. JavaScript should have been added via the `js` block.
  prefs: []
  type: TYPE_NORMAL
- en: In the JavaScript file, we used the jQuery framework to take advantage of shorter
    syntax and unified cross-browser functionality. When the page is loaded, we assign
    an event handler `on('click')` for the `.item-list` element. When any `a.item`
    is clicked, that event is delegated to this handler, which reads and stores the
    custom data attributes as the `url` and `title`. When these are extracted successfully,
    we prevent the original click action (navigation to the full detail page) and
    then set up the modal for display. We set the new title for the hidden dialog
    box and load the modal dialog's content to the `.modal-body` element over Ajax.
    Finally, the modal is shown to the visitor using the Bootstrap 4 `modal()` jQuery
    plugin.
  prefs: []
  type: TYPE_NORMAL
- en: If the JavaScript file were unable to process the URL of the modal dialog from
    the custom attribute, or, even worse, if the JavaScript in `list.js` failed to
    load or execute entirely, clicking on the location link would take the user to
    the detail page as usual. We have implemented our modal as a progressive enhancement
    so that the user experience is right, even in the face of failure.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The *Using HTML5 data attributes* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Providing responsive images* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Implementing a continuous scroll* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Implementing the Like widget* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Implementing the Like widget
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Websites in general, and most commonly those with a social component, often
    have integrated Facebook, Twitter, and Google+ widgets to like and share content.
    In this recipe, we will guide you through the building of a similar Django functionality
    that will save information in your database whenever a user likes something. You
    will be able to create specific views based on the things that people liked on
    your website. We will similarly create a Like widget with a two-state button and
    badge showing the number of total likes.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following screenshot shows the inactive state, where you can click on a
    button to activate it:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/23f86171-835d-4e79-9cf7-bed1d813c640.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The following screenshot shows the active state, where you can click on a button
    to deactivate it:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/8250c25a-a30f-45ad-910e-0d70add86524.png)'
  prefs: []
  type: TYPE_IMG
- en: Changes in the state of the widget will be handled by Ajax calls.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'First, create a `likes` app and add it to your `INSTALLED_APPS`. Then, set
    up a `Like` model, which has a foreign-key relation to the user who is liking
    something and a generic relationship to any object in the database. We will use
    `object_relation_base_factory`, which we defined in the *Creating a model mixin
    to handle generic relations* recipe in [Chapter 2](4d961db0-e9dd-4449-b140-41ea147bccb5.xhtml)*,
    Models and Database Structure*. If you don''t want to use the mixin, you can also
    define a generic relation in the following model yourself:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: 'Also make sure that the `request` context processor is set in the settings.
    We also need authentication middleware in the settings for the currently logged-in
    user to be attached to the request:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: Remember to create and run a migration to set up the database accordingly for
    the new `Like` model.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Execute the following steps one by one:'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the `likes` app, create a `templatetags` directory with an empty `__init__.py`
    file to make it a Python module. Then, add the `likes_tags.py` file, where we''ll
    define the `{% like_widget %}` template tag as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: 'We''ll also add filters in the same file to get the Like status for a user
    and the total number of Likes for a specified object:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: 'In the URL rules, we need a rule for a view that will handle the liking and
    unliking using Ajax:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: 'Make sure that you map the URLs to the project as well:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: 'Then we need to define the view, as shown in the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs: []
  type: TYPE_PRE
- en: 'In the template for the list or detail view of any object, we can add the template
    tag for the widget. Let''s add the widget to the location detail that we created
    in the previous recipes, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, we need a template for the widget, as shown in the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, we create JavaScript to handle the liking and unliking action in the
    browser, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You can now use the `{% like_widget for object %}` template tag for any object
    in your website. It generates a widget that will show the Like state based on
    whether and how the current logged-in user has responded to the object.
  prefs: []
  type: TYPE_NORMAL
- en: 'The Like button has three custom HTML5 data attributes:'
  prefs: []
  type: TYPE_NORMAL
- en: '`data-href` supplies a unique, object-specific URL to change the current state
    of the widget'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`data-add-text` is the translated text to be displayed when the `Like` association
    has been added (`Unlike`)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`data-remove-text` is similarly the translated text for when the `Like` association
    has been removed (`Like`)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using `django-sekizai`, we add the `<script src="img/widget.js' %}"></script>`
    to the page. Note that, if there were more than one `Like` widget on the page,
    we would just include the JavaScript once. And, if there were no `Like` widgets
    on the page, then the JavaScript wasn't included on the page at all.
  prefs: []
  type: TYPE_NORMAL
- en: In the JavaScript file, `Like` buttons are recognized by the `like-button` CSS
    class. An event listener, attached to the document, watches for click events from
    any such button found in the page, and then posts an Ajax call to the URL specified
    by the `data-href` attribute.
  prefs: []
  type: TYPE_NORMAL
- en: 'The specified view `json_set_like` accepts two parameters: the content type
    ID and the primary key of the liked object. The view checks whether a `Like` exists
    for the specified object, and if it does, the view removes it; otherwise, the
    `Like` object is added. As a result, the view returns a JSON response with the
    `success` status, the action that was taken for the `Like` object (add or remove),
    and the total count of Likes for the object across all users. Depending on the
    action that is returned, JavaScript will show an appropriate state for the button.'
  prefs: []
  type: TYPE_NORMAL
- en: 'You can debug the Ajax responses in the browser''s developer tools, generally
    in the Network tab. If any server errors occur while you are developing, and you
    have `DEBUG` turned on in your settings, you will see the error traceback in the
    preview of the response; otherwise, you will see the returned JSON, as shown in
    the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/a24ff8e1-66e3-4bb5-9af1-6d170f573366.png)'
  prefs: []
  type: TYPE_IMG
- en: See also
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The *Using Django Sekizai* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Opening object details in a modal dialog* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Implementing a continuous scroll* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Uploading images by Ajax* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Creating a model mixin to handle generic relations* recipe in [Chapter
    2](4d961db0-e9dd-4449-b140-41ea147bccb5.xhtml)*,*  *Models and Database Structure*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Chapter 5](c4fd2c24-3a56-4d2d-9ef3-c455e8a626ef.xhtml)*, Customizing Template
    Filters and Tags*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Uploading images via Ajax
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'With the default file input fields, it quickly becomes obvious that there is
    a lot we could do to improve the user experience:'
  prefs: []
  type: TYPE_NORMAL
- en: First, only the path to the selected file is displayed within the field, whereas
    people want to see what they have chosen right after selecting the file.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Second, the file input itself is generally too narrow to show much of the path
    selected and reads from the left end. As a result, the filename is rarely visible
    within the field.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Finally, if the form has validation errors, nobody wants to select the files
    again; the file should still be selected in the form with validation errors.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In this recipe, we will see how the file uploads could be improved.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let's start with the `locations` app that we created in the previous recipes.
  prefs: []
  type: TYPE_NORMAL
- en: Our own JavaScript file will rely upon an external library–jQuery File Upload. You
    can download and extract the files from [https://github.com/blueimp/jQuery-File-Upload/tree/v10.2.0](https://github.com/blueimp/jQuery-File-Upload/tree/v10.2.0) and
    place them in `site_static/site/vendor/jQuery-File-Upload-10.2.0`. This utility
    also requires the `jquery.ui.widget.js` in turn, which is made available in a
    `vendor/` subdirectory alongside the other files. With that, we're ready to begin.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s define the form for the locations so that it can support Ajax uploads
    using the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s create a model form for the locations with the nonrequired `picture`
    field, a hidden `picture_path` field, and `latitude` and `longitude` fields for
    `geoposition`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs: []
  type: TYPE_PRE
- en: 'In the `__init__()` method of this form, we will read out the geoposition from
    the model instance, and then define the `django-crispy-forms` layout for the form:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE63]'
  prefs: []
  type: TYPE_PRE
- en: 'Then we need to add the validation for the `picture` and `picture_path` fields
    to the same form:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE64]'
  prefs: []
  type: TYPE_PRE
- en: 'Lastly, we add the saving method to this form, which will take care of the
    saving of the image and geoposition:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE65]'
  prefs: []
  type: TYPE_PRE
- en: 'In addition to the previously defined views in the `locations` app, we''ll
    add an `add_or_change_location` view, as shown in the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE66]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s add this view to the URL configuration:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE67]'
  prefs: []
  type: TYPE_PRE
- en: 'In the views of the `core` app, we will add a generic `upload_file` function to
    upload pictures that can be reused by other apps with a `picture` field:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE68]'
  prefs: []
  type: TYPE_PRE
- en: 'We set the URL rules for the new upload view as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE69]'
  prefs: []
  type: TYPE_PRE
- en: 'Now let''s create a template for the location form as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE70]'
  prefs: []
  type: TYPE_PRE
- en: 'We need a couple more templates. Create a custom template for the file upload
    field that will include the necessary CSS and JavaScript:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE71]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, let''s create a template for the picture preview:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE72]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, let''s add the JavaScript that will handle picture uploads and previews:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE73]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'If the JavaScript fails to execute, then the form remains completely usable,
    but when the JavaScript runs properly, we get an enhanced form with the file field
    replaced by a simple button, as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/67897e34-1f8c-4314-a211-2401de47de4b.png)'
  prefs: []
  type: TYPE_IMG
- en: 'When an image is selected by clicking on the Upload File… button, the result
    in the browser will look similar to the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/7a2b2812-3d9e-4d80-bfc3-a27f59553baf.png)'
  prefs: []
  type: TYPE_IMG
- en: Clicking on the Upload File… the button triggers a file dialog that asks you
    to select a file, and, upon selection, it immediately starts the Ajax upload process.
    Then we see a preview of the image that has been attached. The preview picture
    is uploaded to a temporary directory and its filename is saved at the `picture_path`
    hidden field. When you submit the form, the form either saves the picture from
    this temporary location or from the `picture` field. The `picture` field will
    have a value if the form was submitted without JavaScript or if it failed to load
    the JavaScript. If there are any validation errors for the other fields after
    the page reload, then the preview image loaded is based on the `picture_path`.
  prefs: []
  type: TYPE_NORMAL
- en: Let's run through the steps to dig deeper into the process and see how it works.
  prefs: []
  type: TYPE_NORMAL
- en: In our model form for the `Location` model, we made the `picture` field nonrequired,
    although it is required at the model level. In addition, we added the `picture_path`
    field there, and then we expect either of those fields to be submitted to the
    form. In the `crispy-forms` layout, we defined a custom template for the `picture`
    field, `file_upload_field.html`. There, we set a preview image, upload progress
    bar, and custom help text with the allowed file formats and minimal dimensions.
    In the same template, we also attached the CSS and JavaScript files from the jQuery
    File Upload library and a custom script, `picture_upload.js`. The CSS files rendered
    the file upload field as a nice button. The JavaScript files are responsible for
    the Ajax-based file upload.
  prefs: []
  type: TYPE_NORMAL
- en: The `picture_upload.js` sent the selected file to the `upload_file` view. This
    view checked whether the file is of an image type and then tries to save it under
    the `temporary-uploads/` directory under the project's `MEDIA_ROOT`. The view
    returned a JSON with the details about a successful or unsuccessful file upload.
  prefs: []
  type: TYPE_NORMAL
- en: After a picture has been selected and uploaded and the form submitted, the `save()`
    method of `LocationForm` will be called. If the `picture_path` field value exists,
    a file will be taken from the temporary directory and copied to the `picture`
    field of the `Location` model. Then the picture at the temporary directory gets
    deleted and the `Location` instance is saved.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We exclude the `geoposition` field from the model form and instead render the `latitude`
    and `longitude` fields for the geoposition data. The default geoposition's `PointField` is
    rendered as a `Leaflet.js` map with no possibilities to customize it. With the
    two `latitude` and `longitude` fields, we are flexible and can make use of the
    Google Maps API, Bing Maps API, or `Leaflet.js` to show them in a map, enter manually,
    or geocode them from the filled-in location address.
  prefs: []
  type: TYPE_NORMAL
- en: For convenience, we use two helper methods, `get_geoposition()` and `set_geoposition()`,
    which we defined earlier in the *Using HTML5 data attributes* recipe.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The *Using HTML5 data attributes* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Uploading images* recipe in [Chapter 3](ac26c6a6-3fd1-4b28-8b01-5b3cda40f4f9.xhtml)*,
    Forms and Views*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Opening object details in a modal dialog* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Implementing a continuous scroll* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Implementing the Like widget* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Making forms secure from cross-site request forgery (CSRF)* recipe in [Chapter
    7](0d629161-25ac-4edc-a361-aff632f37b33.xhtml)*, Security and Performance*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
