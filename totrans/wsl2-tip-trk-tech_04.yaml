- en: '*Chapter 3*: Getting Started with Windows Terminal'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Microsoft has announced support for GUI applications in an upcoming release
    of Windows Subsystem for Linux, but at the time of writing this is not available
    even in early preview form. In this book, we opted to focus on the stable, released
    features of WSL so it covers the current, command line centric view of WSL. As
    a result, it makes sense to equip yourself with a good terminal experience. The
    default Console experience in Windows (used by `cmd.exe`) is lacking in many areas
    and the new Windows Terminal offers lots of benefits. In this chapter, we'll take
    a look at some of these benefits, as well as how to install and get started with
    Windows Terminal.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we''re going to cover the following main topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Introducing Windows Terminal
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installing Windows Terminal
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using Windows Terminal
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Configuring Windows Terminal
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introducing Windows Terminal
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Windows Terminal is a replacement terminal experience for Windows. If you''re
    used to running command-line applications on Windows, you are likely to be familiar
    with the previous Windows Console experience that you see when you run PowerShell
    or `cmd.exe` (shown in the following figure):'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.1 – A screenshot showing the cmd.exe user experience'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_3.1_B16412.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 3.1 – A screenshot showing the cmd.exe user experience
  prefs: []
  type: TYPE_NORMAL
- en: Windows Console has a long history spanning back through the Windows NT and
    Windows 2000 era, and back to Windows 3.x and 95/98! During this period, many,
    many Windows users have created scripts and tools that depend on the behavior
    of the Windows Console. The Windows Console team managed to make some good improvements
    to the experience (for example, *Ctrl* + mouse wheel scrolling to zoom the text,
    and improved handling of ANSI/VT control sequences emitted by many Linux and UNIX
    command-line apps and shells) but were ultimately limited in what they could achieve
    without breaking backward compatibility.
  prefs: []
  type: TYPE_NORMAL
- en: The Windows Console team have spent time refactoring the Console's code to enable
    other terminal experiences (such as the new Windows Terminal) to be built on top
    of it.
  prefs: []
  type: TYPE_NORMAL
- en: 'The new Windows Terminal offers numerous improvements that make it a great
    terminal experience for both Windows console-based applications and Linux shell
    applications. With Windows Terminal, you get richer support for customizing the
    look and feel of the terminal and control over how key bindings are configured.
    You also get the ability to have multiple tabs in the terminal just as you would
    have multiple tabs in your web browser, as shown in the following figure:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.2 – A screenshot showing multiple tabs in Windows Terminal'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_3.2_B16412.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 3.2 – A screenshot showing multiple tabs in Windows Terminal
  prefs: []
  type: TYPE_NORMAL
- en: 'As well as multiple tabs per window, Windows Terminal also supports splitting
    a tab into multiple panes. Unlike tabs, where only a single tab is visible at
    a time, with panes you can subdivide a tab into multiple parts. *Figure 3.3* shows
    Windows Terminal with multiple panes, mixing Bash running in WSL2 and PowerShell
    running in Windows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.3 – A screenshot showing multiple panes in Windows Terminal'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_3.3_B16412.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 3.3 – A screenshot showing multiple panes in Windows Terminal
  prefs: []
  type: TYPE_NORMAL
- en: As you can see from the preceding screenshot, the Windows Terminal experience
    has improved considerably compared to the default console experience.
  prefs: []
  type: TYPE_NORMAL
- en: You'll learn how to take advantage of its richer features such as panes in [*Chapter
    6*](B16412_06_Final_JC_ePub.xhtml#_idTextAnchor069), *Getting More from Windows
    Terminal*, but now that you've got a flavor of what Windows Terminal is, let's
    get it installed!
  prefs: []
  type: TYPE_NORMAL
- en: Installing Windows Terminal
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Windows Terminal is (at the time of writing) still being actively worked on,
    and it lives on GitHub at [https://github.com/microsoft/terminal](https://github.com/microsoft/terminal).
    If you want to run the absolute latest code (or are interested in contributing
    features), then the docs on GitHub will take you through the steps needed to build
    the code. (The GitHub repo is also a great place to raise issues and feature requests.)
  prefs: []
  type: TYPE_NORMAL
- en: 'The more common way to install Windows Terminal is via the Windows Store, which
    will install the application and give you an easy way to keep it updated. You
    can either search for `Windows Terminal` in the Store app (as shown in the following
    figure) or use the quick link at [https://aka.ms/terminal](https://aka.ms/terminal):'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.4 – A screenshot of the Windows Store app showing Windows Terminal'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_3.4_B16412.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 3.4 – A screenshot of the Windows Store app showing Windows Terminal
  prefs: []
  type: TYPE_NORMAL
- en: If you are interested in testing out features early (and don't mind the potential
    occasional instability), then you might be interested in Windows Terminal Preview.
    This is also available in the Store app (you may have noticed it was shown in
    the previous figure) or via the quick link [https://aka.ms/terminal-preview](https://aka.ms/terminal-preview).
    The preview version and the main version can be installed and run side by side.
    If you are interested in the roadmap for Windows Terminal, that can be found in
    the docs on GitHub at [https://github.com/microsoft/terminal/blob/master/doc/terminal-v2-roadmap.md](https://github.com/microsoft/terminal/blob/master/doc/terminal-v2-roadmap.md).
  prefs: []
  type: TYPE_NORMAL
- en: Now that you have Windows Terminal installed, let's take a tour through some
    of the features.
  prefs: []
  type: TYPE_NORMAL
- en: Using Windows Terminal
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'When you run Windows Terminal, it will launch your default profile. Profiles
    are a way of specifying what shell should be run in an instance of the terminal,
    for example, PowerShell or Bash. Click on the **+** in the title bar to create
    a new tab with another instance of your default profile, or you can click the
    down arrow to choose which profile you want to run, as shown in the following
    figure:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.5 – A screenshot showing the profile dropdown for creating a new
    tab'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_3.5_B16412.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 3.5 – A screenshot showing the profile dropdown for creating a new tab
  prefs: []
  type: TYPE_NORMAL
- en: The previous figure shows a range of options for launching a new terminal tab,
    and each of these options is referred to as a profile. The profiles shown were
    automatically generated by Windows Terminal – it detected what was installed on
    my machine and created the list of dynamic profiles. Better still, if I install
    a new WSL distro after Windows Terminal is installed, it will be automatically
    added to your list of available profiles! We'll take a quick look at configuring
    your profiles later in this chapter, but first, let's look at some handy keyboard
    shortcuts for Windows Terminal.
  prefs: []
  type: TYPE_NORMAL
- en: Learning handy keyboard shortcuts
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Whether you are a keyboard shortcut fan or primarily a mouse user, it doesn't
    hurt to know a couple of keyboard shortcuts, especially for common scenarios in
    Windows Terminal, so this section lists the most common keyboard shortcuts.
  prefs: []
  type: TYPE_NORMAL
- en: 'You just saw how you can use the **+** and the down arrow in the Windows Terminal
    title bar to start a new tab with the default profile or to pick the profile to
    launch. With the keyboard, *Ctrl* + *Shift* + *T* can be used to start a new instance
    of the default profile. To show the profile picker, you can use *Ctrl* + *Shift*
    + spacebar, but if you look at the screenshot in *Figure 3.5*, you can see that
    the first nine profiles actually get their own shortcut keys: *Ctrl* + *Shift*
    + *1* launches the first profile, *Ctrl* + *Shift* + *2* launches the second,
    and so on.'
  prefs: []
  type: TYPE_NORMAL
- en: When you have multiple tabs open in Windows Terminal, you can use *Ctrl* + *Tab*
    to navigate forward through the tabs and *Ctrl* + *Shift* + *Tab* to navigate
    backward (this is the same as most tabbed browsers). If you want to navigate to
    a specific tab, you can use *Ctrl* + *Alt* + *<n>*, where *<n>* is the position
    of the tab you want to navigate to, for example, *Ctrl* + *Alt* + *3* to navigate
    to the third tab. Finally, you can use *Ctrl* + *Shift* + *W* to close a tab.
  prefs: []
  type: TYPE_NORMAL
- en: Using the keyboard can be a quick way to manage tabs in Windows Terminal. If
    Windows Terminal detects a lot of profiles, you might want to control their order
    to put the ones you use most frequently at the top for easy access (and to make
    sure they grab the shortcut keys). We'll look at this, and some other configuration
    options, in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Configuring Windows Terminal
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The settings for Windows Terminal are all stored in a `JSON` file tucked away
    in your Windows profile. To access the settings, you can click on the down arrow
    to select a profile to launch and then choose `settings.json` in the default editor
    for `JSON` files for your system.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `settings` file is broken down into a few sections:'
  prefs: []
  type: TYPE_NORMAL
- en: '`JSON` file'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Per-profile settings** that define and configure each profile independently'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Schemes** that specify color schemes that profiles can use'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Key bindings** that let you customize the keyboard shortcuts for performing
    tasks in Windows Terminal'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There are a lot of options that can be tweaked in the settings for Windows Terminal
    and as it is continually being updated, new options appear over time! A full description
    of all of the settings is left to the documentation ([https://docs.microsoft.com/en-us/windows/terminal/customize-settings/global-settings](https://docs.microsoft.com/en-us/windows/terminal/customize-settings/global-settings))
    and we will instead focus on some of the customizations you might want to make
    and how to achieve them using the `settings` file.
  prefs: []
  type: TYPE_NORMAL
- en: Let's get started by looking at some customizations you might want to make to
    your profiles in Windows Terminal.
  prefs: []
  type: TYPE_NORMAL
- en: Customizing profiles
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `profiles` section of the `settings` file controls what profiles Windows
    Terminal will display when you click the new tab dropdown as well as allowing
    you to configure various display options for the profile. You can also choose
    which profile is launched by default, as you will see next.
  prefs: []
  type: TYPE_NORMAL
- en: Changing the default profile
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: One of the first changes you might wish to make is to control which profile
    is launched by default when you start Windows Terminal so that the profile you
    use most frequently is the one launched automatically.
  prefs: []
  type: TYPE_NORMAL
- en: 'The setting for this is the `defaultProfile` value in the global settings as
    shown in the following example (the global settings are the values at the top
    level of the `settings` file):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: The value for the `defaultProfile` setting allows you to use the `name` (or
    the associated `guid`) property for the profile you wish to set as the default
    profile. Be sure to enter the name exactly as specified in the `profiles` section.
  prefs: []
  type: TYPE_NORMAL
- en: Next, you will look at changing the order of the Windows Terminal profiles.
  prefs: []
  type: TYPE_NORMAL
- en: Changing the order of the profiles
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Another productivity change you may wish you make is to order the profiles
    so that the most commonly used ones are at the top for easy access. If you use
    the keyboard shortcuts to launch new tabs, then the order determines what the
    shortcut key is, so order has an extra importance here. The following figure shows
    the initial order on my machine as shown in the settings in the previous section:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.6 – A screenshot showing the initial profile order'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_3.6_B16412.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 3.6 – A screenshot showing the initial profile order
  prefs: []
  type: TYPE_NORMAL
- en: In the screenshot, you can see that PowerShell is the first listed profile (you
    may also notice that PowerShell is in bold, indicating that it is the default
    profile).
  prefs: []
  type: TYPE_NORMAL
- en: 'To change the order of the profiles in the UI, we can change the order of the
    entries in the `list` under `profiles` in the `settings` file. The following snippet
    shows the update to the settings from the last section updated to make **Ubuntu-20.04**
    the first item in the list:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Once you save the `settings` file, you can return to the dropdown in Windows
    Terminal to see the change in order:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.7 – A screenshot showing the updated profile order'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_3.7_B16412.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 3.7 – A screenshot showing the updated profile order
  prefs: []
  type: TYPE_NORMAL
- en: In the preceding screenshot, notice that **Ubuntu-20.04** is at the top of the
    list and now has the **Ctrl+Shift+1** shortcut key. It's also worth noting that
    **PowerShell** is still in bold, indicating that it is still the default profile
    even though it is no longer first in the list.
  prefs: []
  type: TYPE_NORMAL
- en: 'One important thing to note is that each item in the list needs to be separated
    with a comma and there must not be a comma after the last list item. If you are
    changing the item at the end of the list, this can easily trip you up. Windows
    Terminal might display a warning, however (as shown in the following figure):'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.8 – A screenshot showing an example error loading the settings'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_3.8_B16412.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 3.8 – A screenshot showing an example error loading the settings
  prefs: []
  type: TYPE_NORMAL
- en: If you see the error in the preceding screenshot, don't worry. When Windows
    Terminal is running, it reloads the settings whenever the file is changed. The
    error points out which part has the error in the `settings` file. Windows Terminal
    will still reload your settings when you dismiss the error.
  prefs: []
  type: TYPE_NORMAL
- en: As well as controlling the order in which profiles appear in the list, you can
    change how they appear in the list, as you will see now.
  prefs: []
  type: TYPE_NORMAL
- en: Renaming profiles and changing icons
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Windows Terminal does a good job of pre-populating profiles, but you may wish
    to rename the profiles. To do this, change the value of the `name` property for
    the relevant profile as shown in the following snippet. As before, once the file
    is saved, Windows Terminal will reload it and apply the changes:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'You can even take this a step further with the Windows emoji support. When
    you are changing the name for a profile, press *Win* + *.* to bring up the emoji
    picker and then continue typing to filter the emoji list. For example, the following
    figure shows filtering to cats:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.9 – A screenshot showing the use of the emoji picker'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_3.9_B16412.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 3.9 – A screenshot showing the use of the emoji picker
  prefs: []
  type: TYPE_NORMAL
- en: 'Selecting an emoji from the list will insert it into the editor as shown in
    the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.10 – A screenshot showing the completed PowerShell profile'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_3.10_B16412.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 3.10 – A screenshot showing the completed PowerShell profile
  prefs: []
  type: TYPE_NORMAL
- en: In this screenshot, you can see the use of an emoji in the `name` property.
    As well as changing the name, the settings allow you to customize the icon shown
    next to a profile in the list. This is done by adding an icon property to a profile
    that gives the path to the icon you wish to use, as shown in the previous screenshot.
    This icon can be a `PNG`, `JPG`, `ICO`, or other file type – I tend to prefer
    `PNG` as it is easy to work with in a range of editors and allows transparent
    sections of the image.
  prefs: []
  type: TYPE_NORMAL
- en: It is worth noting that the path needs to have backslashes (`\`) escaped as
    double-backslashes (`\\`). Conveniently, you can also use environment variables
    in the path. This allows you to put your icons in OneDrive (or other file syncing
    platforms) and share them across multiple machines (or simply back them up for
    the future). To use environment variables, enclose them in percent signs as shown
    with `%OneDrive%` in the preceding snippet.
  prefs: []
  type: TYPE_NORMAL
- en: 'The result of these customizations (icons and text) is shown in the following
    figure:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.11 – A screenshot showing customized icons and text (including emoji!)'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_3.11_B16412.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 3.11 – A screenshot showing customized icons and text (including emoji!)
  prefs: []
  type: TYPE_NORMAL
- en: At this point, you've seen how to control the items in the profile list and
    how they are displayed. The final thing to look at is how to remove items from
    the list.
  prefs: []
  type: TYPE_NORMAL
- en: Removing profiles
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'If you''ve read the preceding sections, you might think that removing a profile
    is a simple matter of deleting the entry from the list. However, if the profile
    is one that is dynamically generated, then Windows Terminal will add the profile
    back in (at the bottom of the list) when it next loads the settings! Whilst this
    may seem a little odd, it is a side-effect of having Windows Terminal automatically
    detect new profiles such as new WSL Distros even if you install them after installing
    Windows Terminal. Instead, to prevent a profile showing in the list, you can set
    the hidden property as shown in the following snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Now that we've explored how to control the profiles in Windows Terminal, let's
    take a look at how to customize its appearance.
  prefs: []
  type: TYPE_NORMAL
- en: Changing the appearance of Windows Terminal
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Windows Terminal gives you a number of ways to customize its appearance and
    your motivation for applying these may be purely aesthetic or may be to make the
    terminal easier to use by increasing the font size, increasing the contrast, or
    using a specific font to make the content easier to read (for example, with the
    **OpenDyslexic** font available at [https://www.opendyslexic.org/](https://www.opendyslexic.org/)).
  prefs: []
  type: TYPE_NORMAL
- en: Changing fonts
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The default font for Windows Terminal is a new font face called `!=` are combined
    when rendered as `≠`. If you prefer not to have ligatures, **Cascadia Mono** is
    the same font but with ligatures removed.
  prefs: []
  type: TYPE_NORMAL
- en: 'The font for each profile can be changed independently by setting the `fontFace`
    and `fontSize` properties in the profile as shown in the following example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'If you want to customize the font settings for all profiles, you can add the
    `fontFace` and `fontSize` properties in the `defaults` section, as shown in the
    following snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Settings specified in the `defaults` section apply to all profiles, unless the
    profile overrides it. Now that we've seen how to change the fonts, let's look
    at how to control the color schemes.
  prefs: []
  type: TYPE_NORMAL
- en: Changing colors
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Windows Terminal allows you to customize the color scheme for profiles in a
    couple of ways.
  prefs: []
  type: TYPE_NORMAL
- en: 'The simplest customization is using the `foreground`, `background`, and `cursorColor`
    properties in a profile. These values are specified as RGB values in the form
    of `#rgb` or `##rrggbb` (for example, `#FF0000` for bright red). An example of
    this is shown in the following snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'For more fine-grained control over colors, you can create a color scheme under
    the `schemes` section in the `settings` file. Details on this can be found at
    [https://docs.microsoft.com/en-us/windows/terminal/customize-settings/color-schemes](https://docs.microsoft.com/en-us/windows/terminal/customize-settings/color-schemes),
    including a list of the built-in color schemes. As you can see in the following
    example, a scheme has a name and a set of color specifications in `#rgb` or `#rrggbb`
    form:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Once you have defined your color scheme, you need to update the profile settings
    to use it. You can specify this using the `colorScheme` property and either apply
    this at the individual profile level or apply it to all profiles using the `default`
    section as you saw earlier in the chapter. An example of applying this to an individual
    profile is shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Once you save these changes, Windows Terminal will apply the color scheme you
    have defined to any tabs using that profile.
  prefs: []
  type: TYPE_NORMAL
- en: With the options you have seen here, you can customize which profile is launched
    by default as well as in what order (and how) the profiles are displayed in the
    profile list. You've seen various options that allow you to customize how a profile
    displays when it is running, and this understanding will make it easy for you
    to apply other settings such as setting a background image or changing the transparency
    for a terminal profile. Full details can be found in the Windows Terminal documentation
    at [https://docs.microsoft.com/en-us/windows/terminal/customize-settings/profile-settings](https://docs.microsoft.com/en-us/windows/terminal/customize-settings/profile-settings).
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you have learned about Windows Terminal and how it improves
    the previous terminal experience with greater control over the display and features
    such as support for multiple tabs. When working with WSL, having a terminal that
    automatically detects new Linux distros that you install is a nice benefit, too!
  prefs: []
  type: TYPE_NORMAL
- en: You've seen how to install and use Windows Terminal, as well as how to customize
    it to fit your preferences so that you can easily read the text, and define color
    schemes to easily know which terminal profiles are running. By customizing the
    default profile and the profile orders, you can ensure that you have easy access
    to the profiles you use most, helping you stay productive. In the next chapter,
    we will start using Windows Terminal as we explore how to interact with a Linux
    distro from Windows.
  prefs: []
  type: TYPE_NORMAL
