- en: Working with Packages
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Modern PHP applications tend to be comprised of a large number of files. Take
    the Magento 2 eCommerce platform as an example. Once installed, its `vendor` directory contains
    over thirty thousand of the PHP class files. The sheer size of it is enough to
    stunt anyone. Why so many files, one might wonder? Nowadays, it is popular, if
    not mandatory, to make use of preexisting libraries and packages other developers
    have written before us. It would not make much sense to *reinvent the wheel* all
    the time. This is why package managers such as Composer are ever so popular among
    the PHP developers. Making use of these package managers usually means pulling
    in a diverse set of third-party packages into our project. While this usually
    hints increased application size, it also allows us to jump-start our application
    development. The added benefit being the quality and continuous maintenance of
    these packages by third parties, which we then merely update into our application.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will look into Composer, the most popular PHP package manager:'
  prefs: []
  type: TYPE_NORMAL
- en: Understanding Composer
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Understanding Packagist
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using third-party packages
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating your own package
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Distributing your package
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Throughout the previous chapters, we already had certain touching points with
    Composer, as we used some of its packages. The following sections are to add some
    extra clarity on top of that, as well as showcase how we can create our own packages.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding Composer
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Composer is a *per-project* package manager for PHP. Originally released in
    2011, it quickly caught up and became a favorite package manager among PHP developers.
    Just by looking at its GitHub statistics, we can see the project is being actively
    developed by the community:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/e14d7ade-f249-4709-80cf-7a592d78176f.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Nowadays, it is an integral part of almost every popular PHP project. Installing
    Composer is a pretty straightforward task. Assuming we are using the fresh Ubuntu
    16.10 (Yakkety Yak) installation, the following command outlines how we can install
    Composer:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Running `composer -v` after the installation should show the output similar
    to the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/cad1b44a-b5ed-49bd-aa8e-6a2db623e449.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now that we have it installed, using Composer is quite simple. Assuming we
    have an existing project to which we would like to add the Twig library, we can
    do so just by running the following command within our project root directory:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '![](assets/b1e995de-1231-4e0e-9e21-c040d510ad87.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Upon execution, two files and a directory are created/modified: `composer.json`,
    `composer.lock`, and `vendor`. The `vendor` directory is the physical location
    where Composer places the packages we choose to install. We could have easily
    started off by manually creating the same `composer.json` file with the content
    as follows, and then running the `composer install` command within the project
    directory:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Check out [https://getcomposer.org/doc/04-schema.md](https://getcomposer.org/doc/04-schema.md)
    for full information on possible `composer.json` content.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now we could easily modify `index.php` or any other entry-point file to our
    root project directory and include all of the installed composer packages by adding
    the following entry to it as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'The `vendor/autoload.php` file is created by the composer tool, which handles
    the autoloading of all the packages we pulled in through composer, the content
    of which looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: This file is not something we should really concern ourselves with, aside from
    knowing where it is.
  prefs: []
  type: TYPE_NORMAL
- en: Both PSR-4 and PSR-0 autoloading are supported, although PSR-4 is the recommended
    way as it offers a greater ease of use.
  prefs: []
  type: TYPE_NORMAL
- en: As soon as we include `/vendor/autoload.php` into our script, all of the pulled
    in packages become available to our application. Whether it is a new or existing
    project, Composer makes it quite easy to add packages to it.
  prefs: []
  type: TYPE_NORMAL
- en: Learning about Composer in full is out of the scope of this section. Consult
    the original documentation ([https://getcomposer.org/](https://getcomposer.org/))
    for more details on Composer.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding Packagist
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Much like the Git and GitHub relationship, we have the Composer and Packagist
    relationship. While **Composer** itself is the actual tool, **Packagist** is the
    default repository service that provides packages for Composer. Service is easy
    enough to let us find packages we would like to use for our project. Without getting
    into the internals, it is suffice to say that the composer tool understands where
    to get the code for each of the packages hosted on Packagist.
  prefs: []
  type: TYPE_NORMAL
- en: 'The Packagist repository service is hosted at [https://packagist.org](https://packagist.org):'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/06ab76e9-13ac-498e-9612-0c429beb57ab.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The popularity of Composer over time can be easily observed through the [https://packagist.org/statistics](https://packagist.org/statistics)
    page, which shows the rapidly increasing number of packages in the Packagist repository
    over the course of few years:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/e496c0dd-e78a-408c-a8c9-730d7d9f968a.png)'
  prefs: []
  type: TYPE_IMG
- en: Using third-party packages
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We already saw how easy it is to install the composer package via one of the
    following two options:'
  prefs: []
  type: TYPE_NORMAL
- en: Executing a command such as `require vendor/package:2.* vendor/package2:dev-master`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding a package link information under `composer.json` `require`, and executing
    `composer install` on console
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Without knowing which package exactly we might need, we could use the [https://packagist.org](https://packagist.org)
    search tool to find it. Let''s consider, for example, we are looking for a package
    with an e-mail sending functionality. This is where the sheer size of the Packagist
    repository might take us some time to find the right package. Luckily, we can
    use Sort by downloads or Sort by favorites to help ourselves out:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/857cc6de-49c9-441c-b7b8-5f67c1c7e198.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Once we click on the individual package, we get to see the available versions
    we can install:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/e5a96eb1-a05f-4c45-a099-3a39c6647999.png)'
  prefs: []
  type: TYPE_IMG
- en: Running `composer require swiftmailer/swiftmailer` in this case would give us
    the latest stable version 5.4.6.
  prefs: []
  type: TYPE_NORMAL
- en: Once installed, packages can later be updated to possible new stable versions
    simply by running the `composer update` command within the project root.
  prefs: []
  type: TYPE_NORMAL
- en: Creating your own package
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Using the `composer init` command, we can kick off the interactive `composer.json` generator
    that we will use later on to distribute our package. The interactive generator
    raises several questions, as per the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/ed12ecb8-3bdb-4ff8-afd7-0335ec6bb960.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We used `foggyline` as our vendor name here, whereas `mp7` (short for Mastering
    PHP 7) was used for the package name. Upon completion, the `composer.json` file
    is generated with the following content:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, let''s go ahead and create the `src/Foggyline/MP7/Greeting/Goodbye.php`
    file, relative to the project root directory, with the following content:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'This is our dummy library class that we will soon distribute as the composer
    package. Before we do so, we need to amend `composer.json` by adding the top-level `autoload` entry
    to it, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'To test if `autoload` is set right, we run the `composer dump-autoload --optimize`
    console command and create the `index.php` file with the following content. We
    deliberately use the full path to the `MP7` directory, as this will be our individual
    library, that is, package:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: If all went well, running this script should give us a Welcome John output.
    Now that we have `composer.json` describing our project, and `src/Foggyline/MP7/`
    containing our library code, we can go ahead and distribute this.
  prefs: []
  type: TYPE_NORMAL
- en: Distributing your package
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We first need to push `composer.json` and our library code from within `src/Foggyline/MP7/`,
    into the GitHub repository. Assuming we have an empty GitHub repository, such
    as `git@github.com:ajzele/foggyline_mp7.git`, waiting for us, we can easily do
    so through the following few commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'This should show up in GitHub, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/14d542f0-2be1-44b5-b8a8-b146219792b7.png)'
  prefs: []
  type: TYPE_IMG
- en: 'With the files in the GitHub repository, we can now visit the [https://packagist.org](https://packagist.org) page
    and Submit our package:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/d39ee193-dbf3-4ca5-89d4-b45086c5ff40.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Once the Check is done, we should be able to see a screen similar to the following
    one:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/9d66c52e-1665-4599-9939-859311798b0f.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Once we hit the Submit button, we should be able to see a screen similar to
    the following one:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/f27f0f7d-a6b2-48e9-b585-64c8897a249d.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We should now be able to use the `foggyline/mp7` package within any project
    just by running the following console command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Notice the `dev-master` suffix here. Our package is flagged as `dev-master` only.
    This is because our [https://github.com/ajzele/foggyline_mp7](https://github.com/ajzele/foggyline_mp7)
    repository has no tags defined on it.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s go ahead and add a `v1.5` tag to our repository. We will do so by running
    the following console commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Since we are adding a tag to an already made commit, we use the commit ID `648e31cc4a`
    to attach the tag to it. Once the tag is pushed to the GitHub repository, we can
    go back to Packagist and hit the Update button on the package edit screen. This
    should instantly update the package versions list to show `v1.5`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/85531944-605f-43c7-ab7f-39865a1256e9.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Assuming we have some project directory with merely an `index.php` file within
    it, we should be able to use the `foggyline/mp7` package by running the following
    console command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'This should result in a directory structure, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/9a7b2a1d-4f9b-4334-9749-21b572c0d470.png)'
  prefs: []
  type: TYPE_IMG
- en: The `index.php` script can then start using our MP7 library just by including
    `/vendor/autoload.php`.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Throughout this chapter, we took a look at PHP's most popular package manager--Composer.
    We saw how easy it is to add third-party packages to our application, as well
    as distribute our own packages using the Packagist repository. A great deal of
    modern PHP applications rely on Composer, which is why understanding how to make
    the best of it is crucial to our day-to-day development efforts.
  prefs: []
  type: TYPE_NORMAL
- en: Moving forward, we will take a look at the types of testing applicable to PHP
    applications.
  prefs: []
  type: TYPE_NORMAL
