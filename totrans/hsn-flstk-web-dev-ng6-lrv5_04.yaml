- en: Building the Baseline Backend Application
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now, we will start building the baseline of our application. In this chapter,
    we are going to create a Laravel application using the RESTful architecture. As
    we saw in the previous chapter, Laravel will provide us with the necessary infrastructure
    to build a solid and scalable application.
  prefs: []
  type: TYPE_NORMAL
- en: We will take a closer look at some points that we mentioned briefly in [Chapter
    1](74a39699-781f-4a6e-a6ab-b696bac7a0f3.xhtml), *Understanding the Core Concepts
    of Laravel 5*, such as using Docker containers to configure our environment, and
    also how to keep our database always populated, even by using the MySQL Docker
    container.
  prefs: []
  type: TYPE_NORMAL
- en: As we mentioned before, it is entirely possible to use a different configuration
    for your development environment, and we mentioned some ways in [Chapter 1](74a39699-781f-4a6e-a6ab-b696bac7a0f3.xhtml), *Understanding
    the Core Concepts of Laravel 5.* However, we strongly recommend that you use Docker.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Additional notes about Laravel with Docker
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using PHP Composer to scaffold a Laravel application
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting up a MySQL database
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Migrations and database seed
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: API documentation with the Swagger framework
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Additional notes about Laravel with Docker
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we will use the same infrastructure we created in [Chapter
    1](74a39699-781f-4a6e-a6ab-b696bac7a0f3.xhtml), *Understanding the Core Concepts
    of Laravel 5*. Using the `PHPDocker.io` generator, we will customize it in order
    to understand a little more about what is happening inside the Docker container.
  prefs: []
  type: TYPE_NORMAL
- en: So, let's go into a more detailed explanation, and there's nothing better than
    getting our hands dirty.
  prefs: []
  type: TYPE_NORMAL
- en: Creating the Docker Compose foundation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: First, we are going to create the foundation (`Dockerfile`, `docker-compose`)
    files for the application, different from the way we did in the first chapter.
    Instead, we will create the files manually, but based on the files we used in
    [Chapter 1](74a39699-781f-4a6e-a6ab-b696bac7a0f3.xhtml), *Understanding the Core
    Concepts of Laravel 5*.
  prefs: []
  type: TYPE_NORMAL
- en: Follow these steps*:*
  prefs: []
  type: TYPE_NORMAL
- en: Create a folder called `chapter-04`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Inside the `chapter-04` folder, create a folder called `phpdocker`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Inside the `phpdocker` folder, add two folders, one called `nginx`, and another
    called `php-fpm`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Configuring nginx
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now, it's time to create the configuration files for the `nginx` and `php-fpm`
    servers, so we will be using the nginx reverse proxy to serve our PHP files to
    the web.
  prefs: []
  type: TYPE_NORMAL
- en: 'Inside the `nginx` folder, create a new file called `nginx.conf` and add the
    following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: The previous file set port `80` as the default port for our web server and set
    port `9000` to `php-fpm`, which means that our containers in nginx will communicate
    with `php-fpm` through port `9000`, and, for communicating with the web, will
    use the public view through port `80`. Later on, in `docker-compose.yml`, we will
    configure the internal Docker container ports to the outside world, which, in
    this case, is our host machine.
  prefs: []
  type: TYPE_NORMAL
- en: Configuring php-fpm
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In order to configure `php-fpm`, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Inside the `php-fpm` folder, create a file called `Dockerfile` and add the
    following lines:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Now, it is time to create our override `php.ini` file, which is the `PHP.ini`
    where we can manually override PHP settings that run on the server.
  prefs: []
  type: TYPE_NORMAL
- en: In the case of Apache servers, it only runs once when the server is started,
    in our case, as we use nginx with php-fpm. In regards to this, we are using a
    `fastCgi` environment, and this file is read with every server invocation.
  prefs: []
  type: TYPE_NORMAL
- en: 'Some advantages to using `fastCgi` environment rather than the traditional
    Apache evironment are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Adaptive process growth
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Basic statistics (similar to Apache `mod_status`)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Advanced process management with graceful start/stop
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The ability to start workers with different `uid`, `gid`, `chroot`, `environment`,
    and `php.ini` (replaces `safe_mode`)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It creates logs for `stdout` and `stderr`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Emergency restart in case of accidental code destruction (cache)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Supports accelerated upload
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Several improvements to your facet FastCGI
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Other ways to use PHP on servers are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Apache module (`mod_php`)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: CGI
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: FastCGI
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: PHP – **FastCGI Process Manager** (**FPM** )
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Command lines** (**CLI**)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Inside the `php-fpm` folder, create a new file called `php-ini-overrides.ini`
    and add the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Note that we are only setting up Xdebug here, which is a PHP extension to debug
    PHP applications.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a docker-compose configuration file
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now, it''s time to configure our compose file and mount all the containers
    that we will use in our application. We will build this file step by step, so
    the first thing to do is create the file:'
  prefs: []
  type: TYPE_NORMAL
- en: Inside the root, the `chapter-04` folder creates a file called `docker-compose.yml`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Inside `docker-compose.yml`, add the following piece of code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: The first block of code here is to configure the MySQL server. We are using
    the official MySQL image from Docker. We are setting the environment variables
    and ports, but note that on the host machine, we are accessing MySQL using port
    `8083` and, inside the container, we are using the `3306` default port. Later
    on in this chapter, we will see how to connect a MySQL client to our MySQL container.
  prefs: []
  type: TYPE_NORMAL
- en: You can find out more information from the official Docker website from at [https://hub.docker.com/explore/](https://hub.docker.com/explore/)
    and at [https://store.docker.com/](https://store.docker.com/).
  prefs: []
  type: TYPE_NORMAL
- en: Note that we are using a pretty simple password just for the example. In the
    production environment, we will use global environment variables.
  prefs: []
  type: TYPE_NORMAL
- en: Let's add a new block of code.
  prefs: []
  type: TYPE_NORMAL
- en: 'Still on the `docker-compose.yml` file, add the following code right after
    the first block:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: In the previous code, configure our `nginx` container using the internal port
    80 as we saw earlier and port `8081` on our host machine. We will also set `nginx.conf`
    inside the container. Here, we are using the `nginx/alpine` Docker image.
  prefs: []
  type: TYPE_NORMAL
- en: You can read more about the alpine image here, at the following Docker website: [https://store.docker.com/images/alpine](https://store.docker.com/images/alpine).
  prefs: []
  type: TYPE_NORMAL
- en: 'Last but not least, let''s configure `php-fpm`. Add the following block of
    code right after the web server configuration block:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Here, we just set up `php-ini-overrides.ini` from our machine in the `php-fpm`
    configuration directory inside the Docker container.
  prefs: []
  type: TYPE_NORMAL
- en: Building the application container
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now, it's time to check whether everything is working as we planned. Let's create
    the containers that we will use in our application. In [Chapter 1](74a39699-781f-4a6e-a6ab-b696bac7a0f3.xhtml), 
    *Understanding the Core Concepts of Laravel 5*, we already saw some very useful
    Docker commands, and now we are going to use them again. Let's see.
  prefs: []
  type: TYPE_NORMAL
- en: First, we will stop any container that is still running from the previous chapter,
    or on your machine.
  prefs: []
  type: TYPE_NORMAL
- en: Don't forget that you need to have your Docker Daemon up and running on your
    local machine.
  prefs: []
  type: TYPE_NORMAL
- en: 'Open your Terminal window and type the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'If you are using Docker for the first time on your machine, you will see something
    similar to the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/b93b5cce-b45b-4c23-a00f-846b529b3db5.png)Listed Docker containers'
  prefs: []
  type: TYPE_NORMAL
- en: But, if you've used Docker on your machine before, the previous command will
    list all Docker containers on your machine. In this case, be careful with *step
    2*, because the command will stop and delete all the containers on your machine.
  prefs: []
  type: TYPE_NORMAL
- en: 'So, if you want to keep your previous container, we recommend that you just
    stop and delete the containers created by this book''s tutorial using the following
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'You can also use the following command instead of the commands that were executed
    in *steps 2* and* 3*:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Type the following command to stop all containers:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s delete all the containers by typing the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Well done! Now, we can create the image that we need to run our application.
    Let's test the settings we established in the previous session.
  prefs: []
  type: TYPE_NORMAL
- en: 'Inside the `chapter-04` folder, type the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'At the end of the Terminal window, we will see an output similar to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: The previous output tells us that we created a new Docker image called `chapter-04_php-fpm:latest`,
    so now, let's create the application container.
  prefs: []
  type: TYPE_NORMAL
- en: 'Inside the `chapter-04` folder, on your Terminal, type the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'The output of the previous command will give us the status of all three Docker
    containers that we set up before, similar to the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, we can check the new container that''s been created with the following
    command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'The output on the Terminal will be very similar to the following message:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/53b558d6-2199-482f-991c-ee718a71c16d.png)Docker containers running'
  prefs: []
  type: TYPE_NORMAL
- en: Note that we don't have any application code inside the `chapter-04` folder
    yet, so if we try to access the server using the `http://localhost:8081/` address,
    we will see a File Not Found message. This is perfectly expected because we don't
    really have any applications running on our servers yet.
  prefs: []
  type: TYPE_NORMAL
- en: Using PHP Composer to scaffold a Laravel application
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We have created a solid base on our servers. The PHP image we used already has
    all the dependencies that Laravel needs to run the application, including Composer.
  prefs: []
  type: TYPE_NORMAL
- en: Therefore, we will use the Composer that we have inside the `php-fpm` containers
    instead of using what we installed globally onto our machine.
  prefs: []
  type: TYPE_NORMAL
- en: 'This is the safest way to avoid conflicts between versions. Let''s check what
    we have inside the `php-fpm` container:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open your Terminal window and type the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'Now that we are inside the `php-fpm` bash/terminal, let''s check the composer
    version with the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'We will see the following output on the Terminal:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: Congratulations! We have been able to configure all of our environment and we
    are ready to start building our application.
  prefs: []
  type: TYPE_NORMAL
- en: Creating the application scaffold
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In order to maintain the consistency between this book's application and the
    moment in when you will use the example code, we will fix the Laravel version
    that will be installed in your environment.
  prefs: []
  type: TYPE_NORMAL
- en: 'So, let''s continue with the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open your Terminal window and type the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: At the time of writing this book, we have installed version 5.6.12 of Laravel.
    Although we should have no problem installing a more current version, we strongly
    recommend that you keep the version in 5.6\. *.
  prefs: []
  type: TYPE_NORMAL
- en: 'After using the previous command, you will see the following message on your
    Terminal window:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: This means that everything went well.
  prefs: []
  type: TYPE_NORMAL
- en: 'Note that we create the Laravel application inside a directory called `project`.
    This way, we will have the following application structure:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/5b225857-3596-422e-a801-5b2cdb59856c.png)Application folder structure'
  prefs: []
  type: TYPE_NORMAL
- en: Notice that we have separated the content of the Laravel application from the
    Docker configuration folder. This practice is highly recommended since we can
    make any kind of changes within the project folder without damaging any Docker
    or `docker-compose` files accidentally.
  prefs: []
  type: TYPE_NORMAL
- en: But with this minor change, we need to adjust the `docker-compose.yml` file
    in order to fit the new path that's been created.
  prefs: []
  type: TYPE_NORMAL
- en: 'Open `docker-compose.yml` and let''s adjust the `php-fpm` volumes tag with
    the new path, as in the following block of code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: Running the application
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'For the change we just made to take effect, we need to stop and restart our
    containers:'
  prefs: []
  type: TYPE_NORMAL
- en: On your Terminal, type `exit` to exit the `php-fpm` bash.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now, at the root of the `chapter-04` folder, still in the Terminal, type the
    following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'You will see the following output message:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'On your Terminal, type the following command to run the containers again:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, we can see that the `php-fpm` container was recreated and will reflect
    our changes:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: It is highly recommended that you repeat this procedure whenever you make any
    changes to the `nginx` or `php-fpm` servers.
  prefs: []
  type: TYPE_NORMAL
- en: Now, let's check the Laravel installation and configuration. Open your default
    browser and go to the link `http://localhost:8081/`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'We will see the welcome screen from the Laravel framework, as shown in the
    following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/2323abf2-890e-4555-9e7b-6d74ac8d1f89.png)Laravel welcome screen'
  prefs: []
  type: TYPE_NORMAL
- en: Setting up a MySQL database
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: So far, we have come a long way and built a solid foundation for our RESTful
    application, though we must take a few more steps to finally be able to begin
    with development.
  prefs: []
  type: TYPE_NORMAL
- en: In this step, we will configure our MySQL database for our application and perform
    some alterations in our Docker MySQL container in order to make the data of our
    application persist in our database, even when we disconnect or stop our MySQL
    container.
  prefs: []
  type: TYPE_NORMAL
- en: Adding a storage folder
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A local folder to store MySQL data is very important since our `docker-compose.yml`
    file does not contain any volume that's been configured to store the data created
    in our database yet.
  prefs: []
  type: TYPE_NORMAL
- en: Remember, we are using Docker, and our MySQL container is based on an image
    of a database. This way, every time we finish the container process, our database
    is erased and the next time we start it, our database will be empty.
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the `docker-compose.yml` file and add `- ./storage-db:/var/lib/mysql`
    right after the application volumes on the MySQL configuration block, as shown
    in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: The previous code sets the `storage-db` folder on our project/machine to store
    all the MySQL data from the MySQL container. Later in this section, we will see
    the result of these changes, but for now, let's configure our database.
  prefs: []
  type: TYPE_NORMAL
- en: Configuring the .env file
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Open the `.env` file at the root of the `project` folder and replace the database
    configuration with the following lines:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: Let's check the connection.
  prefs: []
  type: TYPE_NORMAL
- en: 'Inside the Terminal window, type the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'Inside the `php-fpm` bash, type the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, type the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'You will see something similar to the following output:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: This means that everything has gone well. Congratulations! We have a database.
    Now, it is time to generate our local database folder called `storage-db`.
  prefs: []
  type: TYPE_NORMAL
- en: If you are still inside the `php-fpm` bash, type the `exit` command to get out
    of it and return to the Terminal.
  prefs: []
  type: TYPE_NORMAL
- en: 'On your Terminal window, type the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s remove the MySQL container that we created previously:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'And now, let''s recreate the container so that it has the changes up and running.
    Type the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: 'You will see the following output on your Terminal:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: 'Note that the MySQL container has been created with the `storage-db` folder
    properly configured. Our project will have the following structure:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/35dcc3a3-aa15-4d9b-9d80-e11e5fb92baa.png)Project folder structure'
  prefs: []
  type: TYPE_NORMAL
- en: Using a MySQL external client
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Managing a database entirely using the command line may not be an easy task,
    and, visually speaking, it is not. To assist us in this process, all databases
    have a tool for this task, and MySQL is no different.
  prefs: []
  type: TYPE_NORMAL
- en: There are several open source and multi-platform tools that help us in this
    process, and MySQL has its own tool called **Workbench**.
  prefs: []
  type: TYPE_NORMAL
- en: You can read more about the Workbench at the official MySQL documentation at [https://www.mysql.com/products/workbench/](https://www.mysql.com/products/workbench/).
  prefs: []
  type: TYPE_NORMAL
- en: In this session, we will see how to use a tool with the graphical interface
    to access our database that is inside the Docker container.
  prefs: []
  type: TYPE_NORMAL
- en: Go to [https://dev.mysql.com/downloads/workbench/](https://dev.mysql.com/downloads/workbench/),
    choose your platform, and follow the installation steps.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open Workbench, click on the Database top menu, and click on Connect to Database.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'You will see the following screen:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/c6d5387b-1f7e-421a-9a46-512826846884.png)Workbench connection screen'
  prefs: []
  type: TYPE_NORMAL
- en: 'Remember that the Workbench is running on the host machine and not inside the
    MySQL Docker container. Add the following information to it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Hostname: `127.0.0.1` Port: `8083` Username: `chapter-04` Password: `123456`'
  prefs: []
  type: TYPE_NORMAL
- en: Note that we are using the same configuration that we used on the Laravel `.env`
    file.
  prefs: []
  type: TYPE_NORMAL
- en: 'Click the OK button. Now, we are connected to the MySQL database running inside
    the Docker container. You will see something similar to the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/a5bd455d-4c37-4235-806a-1b41ab66026f.png)Workbench welcome screen'
  prefs: []
  type: TYPE_NORMAL
- en: 'Notice the left Schema panel. We already have our database created by Docker
    container and we are ready to use it. At this moment, it is still empty, as can
    be seen in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/844b4bbe-5541-4a97-bac1-9b86e7692d30.png)Schema left panel'
  prefs: []
  type: TYPE_NORMAL
- en: Migrations and database seed
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now, let's exercise some commands that we briefly saw in the first chapter and
    create our migrations and seeds in a different way.
  prefs: []
  type: TYPE_NORMAL
- en: 'Open your Terminal window on the `chapter-04` folder and type the following
    command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: 'Inside the container root bash, type the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: 'Note that we are using the `-m` flag to create the migration file together
    with the creation of Bike Model. So now, we have two new files in our application:'
  prefs: []
  type: TYPE_NORMAL
- en: '`project/app/Bike.php`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`project/database/migrations/XXXX_XX_XX_XXXXXX_create_bikes_table.php`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating the migration boilerplate
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As we saw previously, the new files only have the boilerplate code that's been
    created by the Laravel engine. Let's add some content to the **Bike** model and
    migration file.
  prefs: []
  type: TYPE_NORMAL
- en: 'Open `project/app/Bike.php` and add the following code inside the Bike model
    function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, we need to add the same properties to the migration file we created previously.
    Open `project/database/migrations/XXXX_XX_XX_XXXXXX_create_bikes_table.php` and
    add the following code inside the `up()` function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: Congratulations! You have created our first migration file, and it is time to
    execute the following command to feed our database.
  prefs: []
  type: TYPE_NORMAL
- en: 'Open your Terminal window and type the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: 'The output of the previous command will be similar to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, on the Workbench schema, we can see our new table filled by the `migrate`
    command, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/320bbbf1-563c-4125-ba7c-b38f5924bf6b.png)Workbench schema panel'
  prefs: []
  type: TYPE_NORMAL
- en: Creating our first database seed
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous steps, we basically followed the same procedure as in [Chapter
    1](74a39699-781f-4a6e-a6ab-b696bac7a0f3.xhtml), *Understanding the Core Concepts
    of Laravel 5*, so now we are not going to use the Faker library to create our
    data. Faker is a very useful tool as it's easy to use and quick to create data
    during the development of applications with Laravel.
  prefs: []
  type: TYPE_NORMAL
- en: In this example, we want to keep the data we have created more consistent with
    the application we are creating, so we will use an external JSON file with the
    data we want to insert into our database.
  prefs: []
  type: TYPE_NORMAL
- en: Inside the `project/database` folder, create a new folder called `data-sample`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Inside the `project/database/data-sample` folder, create a new file called `bikes.json`
    and add the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: Notice that we keep some placeholder text and an image path. Don't worry about
    this for now; later on in this book, we will replace all of this data using our
    frontend application.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, it''s time to create our seed file. On your Terminal window, type the
    following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: The previous command added a new file called `BikesTableSeeder.php` inside the `project/database/seeds`
    folder.
  prefs: []
  type: TYPE_NORMAL
- en: 'Open `project/database/seeds/BikesTableSeeder.php` and replace the code inside
    it with the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: Note that in the first line, we are using the Eloquent ORM shortcut function
    (`DB::table()`) to delete the bike tables and are using the `Bike::create()` function
    to create our records. In the next chapter, we will look deeper at Eloquent ORM,
    but for now, let's focus on creating our first seed.
  prefs: []
  type: TYPE_NORMAL
- en: 'Open `project/database/seeds/DatabaseSeeder.php` and add the following line
    of code, right after the `UsersTableSeeder` comment:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: Now, it is time to run our seed and fill the database. We can do this in two
    ways. We can either run the `BikeSeeder` command `php artisan db:seed --class=BikesTableSeeder`
    individually, or use the `php artisan db:seed` command, which will run all of
    the seeds in our application.
  prefs: []
  type: TYPE_NORMAL
- en: As we are at the beginning of our development, we will execute the command to
    load all the seeds.
  prefs: []
  type: TYPE_NORMAL
- en: 'Open your Terminal window and type the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: 'At the end of the previous command, we will see a success message, `Seeding:
    BikesTableSeeder`, on our Terminal. Bravo! Now, we have our first records on the `chapter-04`
    database.'
  prefs: []
  type: TYPE_NORMAL
- en: Exploring the Workbench table view
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now, we will use the visual interface of the Workbench to visualize the data
    that we have just placed inside our database. To do this, open the Workbench and
    perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: On the right-hand schema panel, click on the Tables menu item.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Right click on bikes and click Select Rows – Limit 1000.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'We will see a new panel on the right-hand side, as in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/30b1edef-d9fa-4b6d-948f-0a8e21f76edf.png)Bike tables on the Workbench
    interface'
  prefs: []
  type: TYPE_NORMAL
- en: Note that we now have five records on our database inside the bike table, which
    is the same data that we created in the `bike.json` file.
  prefs: []
  type: TYPE_NORMAL
- en: API documentation with the Swagger framework
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s take a break and tackle an extremely important topic in the development
    of RESTful applications: documentation on how to use the API endpoints.'
  prefs: []
  type: TYPE_NORMAL
- en: Although we have not created any controller or route to be able to view the
    data of our API in the browser, we will introduce a new tool that will help us
    develop our frontend application, called the Swagger framework.
  prefs: []
  type: TYPE_NORMAL
- en: Swagger is an open source language-agnostic framework for describing, documenting,
    consuming, and visualizing REST APIs.
  prefs: []
  type: TYPE_NORMAL
- en: It is very common today to use public and private APIs for creating frontend
    web applications, and we are familiar with several APIs, such as Twitter, LinkedIn,
    and many others.
  prefs: []
  type: TYPE_NORMAL
- en: Documenting your application is an important part of the development process.
    Every API needs to be documented in order to make it easier to use and test, either
    by your in-house team or by a third-party developer.
  prefs: []
  type: TYPE_NORMAL
- en: The easiest way to do this is at the beginning of the development process.
  prefs: []
  type: TYPE_NORMAL
- en: You can read more about the Swagger framework at the official website: [https://swagger.io/](https://swagger.io/).
  prefs: []
  type: TYPE_NORMAL
- en: Installing the L5-Swagger library
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this section, we are going to use the L5-Swagger project. A wrapper for
    Swagger-PHP and Swagger-UI are going to be used with the Laravel 5 framework:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Still on your Terminal window, type the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: You can read more about L5-Swagger at the official GitHub repository at [https://github.com/DarkaOnLine/L5-Swagger](https://github.com/DarkaOnLine/L5-Swagger).
  prefs: []
  type: TYPE_NORMAL
- en: 'At the end of the command line, we will see the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/ff990243-0aa9-4450-bba0-7eee97748df2.png)Composer L5-Swagger installation
    process'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the `project/config/app.php` file and add the following code at the end
    of package the `ServiceProvider` comment:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: 'Type the following command to publish the package:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: 'The output of the previous command will create some new files on our application,
    as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/a39dabeb-6a38-490d-94b5-0fff5d7d8a1a.png)L5-Swagger UI'
  prefs: []
  type: TYPE_NORMAL
- en: Creating the application API controller
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: By way of good practice, we will create a new controller in our application
    just to serve as the basis for the API documentation and hold some basic API information
    with a Swagger annotation.
  prefs: []
  type: TYPE_NORMAL
- en: 'On your Terminal window, type the following command to create a new controller:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: 'Open `project/app/Http/Controllers/ApiController.php` and replace `Class ApiController
    comments` with the following comments:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: Generating and publishing the API documentation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now, it is time to publish our documentation and access it through a web browser.
    So, let's do so in the following steps.
  prefs: []
  type: TYPE_NORMAL
- en: 'Still on your Terminal window, type the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: Well done! Now, we have our API documentation ready to be implemented.
  prefs: []
  type: TYPE_NORMAL
- en: 'Go to `http://localhost:8081/api/documentation` and you will see a result similar
    to the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/8f4d6a6d-c304-4849-9ff3-5a50d84c0b9c.png)Swagger UI'
  prefs: []
  type: TYPE_NORMAL
- en: The Swagger framework is up and running on our local machine.
  prefs: []
  type: TYPE_NORMAL
- en: Adding Swagger definitions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Swagger generates the documentation for our notations that use API, a kind of
    self-writing of the framework itself, where, through tags, we can define what
    each element does. Let's start building our API documentation.
  prefs: []
  type: TYPE_NORMAL
- en: The first step is to add some definitions to the `Bike` model we just created
    in the previous steps.
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the `project/app/Bike.php` model file and replace the code with the following
    lines:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: The previous annotation is pretty self-explanatory; we just describe each model
    field and set the data type with a useful example on how to use it.
  prefs: []
  type: TYPE_NORMAL
- en: 'Go back to your Terminal window and type the following command to generate
    the documentation:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, let''s check our documentation URL and see what happens. Go to `http://localhost:8081/api/documentation`
    and we will see that our first model has been documented, as shown in the following
    screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/7596980f-2bde-4fba-a143-c42923c5db9a.png)Swagger UI'
  prefs: []
  type: TYPE_NORMAL
- en: 'Note that we have all the model properties explained inside an object, each
    one with a data type, description, and an example. This was possible due to the `Swagger
    @SWG\Property` definition:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: As our application grows, we will add all the documentation we need to use our
    APIs.
  prefs: []
  type: TYPE_NORMAL
- en: You can find out more information about Swagger's visual interface at the following
    link [https://swagger.io/swagger-ui/](https://swagger.io/swagger-ui/).
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We have come to the end of another chapter. We put in a lot of hard work here
    and did a lot of things, such as configuring Docker to maintain the data we are
    going to create in our MySQL database. We also created a large application and
    configured the database, and learned how to use the Workbench to view the data
    loaded by the application.
  prefs: []
  type: TYPE_NORMAL
- en: We created our first model and its migration file, and we also created a seed
    to perform an initial data load in our database. Finally, we built a solid foundation
    to scale our RESTful API.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will go into more depth in terms of how to create controllers,
    routes, and relationships between tables using the Eloquent ORM, among other things.
  prefs: []
  type: TYPE_NORMAL
