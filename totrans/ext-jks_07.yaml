- en: Chapter 7. Extending Jenkins Plugins
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'For Jenkins plugin development so far, we have looked at the following:'
  prefs: []
  type: TYPE_NORMAL
- en: The approach to take—reuse where possible, avoiding unnecessary duplication
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Collaborating—how both the process and the community work
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Design methodologies and Java patterns used
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting up the development environment and build tools
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Developing the first simple plugin
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Deploying and testing our plugins locally and remotely
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We will now take a look at the ways to help you sort out that missing middle
    part from the previous chapter and implement the code that enables your plugin
    to do what it does… whatever that may be!
  prefs: []
  type: TYPE_NORMAL
- en: The intention here is to walk you through the development of your own plugin
    and demonstrate the ways in which you can (and should) approach the (re)use of
    the resources that are already out there.
  prefs: []
  type: TYPE_NORMAL
- en: This means that when you come up with an idea for your own plugin and want to
    develop it, you will be able to do so as quickly and easily as possible by following
    best practices and by avoiding the addition of unnecessary duplication to the
    Jenkins and plugin code base.
  prefs: []
  type: TYPE_NORMAL
- en: While doing this, we will also explore some of the additional frameworks and
    technologies used by and available to Jenkins plugins. These include Jelly, Stapler,
    localization, and internationalization; when used together, these tools and practices
    enable plugin developers to reuse the Jenkins built-in functionality in order
    to make their plugins look like they "belong" to Jenkins, rather than something
    that has been simply added on, by maintaining the same look and feel as the rest
    of the user interface.
  prefs: []
  type: TYPE_NORMAL
- en: Following this approach of getting yourself started and knowing how to use these
    frameworks will save you a lot of time and frustration. Once you know how to go
    about researching and reusing the code and functionality that's already provided
    by the existing plugins and Jenkins, you will save yourself a lot of development
    work as well.
  prefs: []
  type: TYPE_NORMAL
- en: While working on the `Hello World` plugin, we covered quite a lot of new information
    and introduced some new concepts. This was all done at a pretty high level and
    with minimum coding and configuration so that we could maintain focus on the overall
    process and learn how things work. The actual code was about as simple as you
    can get for a plugin; all it did was write a message to the console log every
    time the build was run.
  prefs: []
  type: TYPE_NORMAL
- en: As you're no doubt aware, Jenkins plugins have been created to perform all kinds
    of tasks, and they do so in a wide variety of ways—some of them integrate seamlessly
    with the Jenkins user interface, while others work away mostly unseen in the background.
    Some extend existing functionalities and others add entirely new functions. Plugins
    seem to be cohesive—they all have roughly the same look and feel, rather than
    appear to have been developed by different people, who had their own ideas about
    color schemes, navigation, dialogs, and so on. They are even able to respond to
    locale changes to provide dialogs in different languages depending on user-specified
    preferences. While much of Jenkins functionality comes from a large number of
    plugins, many of which have been assimilated into the core of Jenkins, the impression
    and user experience is that of a quite slick and cohesive whole, rather than a
    collection of fragmented and disparate additions.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we will take a look at the other elements that go into Jenkins
    plugins, and expand the ways in which you can flesh out your own plugin. We will
    also look at how to go about finding and reusing existing code/plugins to get
    you started quickly, and we will walk through the contents of a plugin that offers
    features similar to a hypothetical new plugin that we would like to start developing.
  prefs: []
  type: TYPE_NORMAL
- en: Where to start?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: So, after checking the Jenkins site and the community, we have decided to write
    a new plugin, as nothing out there (or currently in the works) will do whatever
    it is we want; where do we start?
  prefs: []
  type: TYPE_NORMAL
- en: We could start off with a new blank Eclipse project and write everything ourselves
    if we really wanted to, but that would take ages.
  prefs: []
  type: TYPE_NORMAL
- en: We could use the skeleton `Hello World` project, delete what is in there, and
    start adding our code to that, but this doesn't sound like the sort of approach
    we'd expect to follow, given all the code reuse and avoidance of duplication we've
    been talking about for a while now.
  prefs: []
  type: TYPE_NORMAL
- en: Even if you have a completely novel idea for a plugin, there is bound to be
    something roughly related to it out there already; even if this doesn't provide
    the functionality that we want, it may work in a similar way or use many of the
    same extension points that we have identified as being of interest to us, so it's
    worth checking this out.
  prefs: []
  type: TYPE_NORMAL
- en: Looking at the list of existing plugins
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Usually, the first place to look at is the list of available plugins. If your
    Jenkins instance is up to date, you can browse through the currently available
    options in your Jenkins **Available plugins** page.
  prefs: []
  type: TYPE_NORMAL
- en: Go to **Manage Jenkins**, then select **Manage Plugins**, and select the **Available**
    tab for an ever-growing list of plugins to choose from.
  prefs: []
  type: TYPE_NORMAL
- en: Note that this screen allows you to filter by specific words and provides a
    brief description of each plugin.
  prefs: []
  type: TYPE_NORMAL
- en: 'Alternatively, the Jenkins **Plugins** page provides an easier-to-browse and
    slightly more detailed listing:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://wiki.jenkins-ci.org/display/JENKINS/Plugins](https://wiki.jenkins-ci.org/display/JENKINS/Plugins)'
  prefs: []
  type: TYPE_NORMAL
- en: This lists the plugins grouped by their general category or function and also
    hosts links to the corresponding Jenkins home page for each plugin. In turn, the
    home page provides further information that includes links to the source code
    for that plugin on GitHub, which you can browse online or download locally.
  prefs: []
  type: TYPE_NORMAL
- en: If you are able to find something similar to your plugin here, then going through
    the source code on GitHub will enable you to see how each plugin works in detail.
    You will also be able to find out what extension points this plugin uses.
  prefs: []
  type: TYPE_NORMAL
- en: 'Another option to consider is going straight to the **Extension points** index
    page here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://wiki.jenkins-ci.org/display/JENKINS/Extension+points](https://wiki.jenkins-ci.org/display/JENKINS/Extension+points)'
  prefs: []
  type: TYPE_NORMAL
- en: 'This list is automatically generated and maintained by the **Extension Indexer**
    program, which is available at:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://github.com/jenkinsci/backend-extension-indexer](https://github.com/jenkinsci/backend-extension-indexer)'
  prefs: []
  type: TYPE_NORMAL
- en: This program parses the current code base for all the declared extension points
    and then lists them on the **Extension points** page that it generates, along
    with further details such as the project home page and a list of the plugins that
    use them.
  prefs: []
  type: TYPE_NORMAL
- en: Whichever starting point works for you, the list of plugins or the list of extension
    points, you should hopefully end up at the same place—with an idea of something
    roughly similar to what you want to end up with, which should be a good place
    to get you started.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, if my plugin was connected to Docker, I could start searching
    through the list of existing plugins from here on my local Jenkins:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Looking at the list of existing plugins](../images/00051.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Alternatively, I could go to [https://wiki.jenkins-ci.org/display/JENKINS/Extension+points](https://wiki.jenkins-ci.org/display/JENKINS/Extension+points),
    and search for Docker references here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Looking at the list of existing plugins](../images/00052.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Both of these routes eventually lead to the home page of the plugin in question,
    for example:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Looking at the list of existing plugins](../images/00053.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: This tells you everything that you need to know about the plugin and includes
    a link to the source code and configuration files for this plugin that are hosted
    on GitHub.
  prefs: []
  type: TYPE_NORMAL
- en: To illustrate the rest of the process and introduce the other frameworks and
    files that you may want to use, we will think of a new plugin that we'd like to
    start developing. We will try to find something that already exists, use it to
    get us started, and then look at the code, configuration files, and extension
    points that will be used to get us to the point where we can start adding our
    own code.
  prefs: []
  type: TYPE_NORMAL
- en: A new build type required
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: For this hypothetical example, I'm going to start off by creating a new build
    step for Docker builds. This would allow the user to create a build of this type,
    add in some information, and then eventually do something with it along the lines
    of a Docker build.
  prefs: []
  type: TYPE_NORMAL
- en: 'Where you normally have options to add build steps of these types (with the
    addition of our **Say hello world** example):'
  prefs: []
  type: TYPE_NORMAL
- en: '![A new build type required](../images/00054.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: This amazing new plugin-to-be will add an additional entry to kick off a Docker
    Build.
  prefs: []
  type: TYPE_NORMAL
- en: By looking through similar projects that add additional build steps and from
    the `Hello World` example, I can guess that my new plugin will also want to extend
    the `Builder`, `BuildStep`, and `AbstractProject` classes.
  prefs: []
  type: TYPE_NORMAL
- en: 'After looking through the links and resources previously listed, I can see
    that there is an existing Graven Plugin project that performs very similar steps
    to what we are after and also just happens to include all of the new resources
    that we wanted to examine in this chapter. Plus, it''s got some handy documentation
    here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://wiki.jenkins-ci.org/display/JENKINS/Create+a+new+Plugin+with+a+custom+build+Step](https://wiki.jenkins-ci.org/display/JENKINS/Create+a+new+Plugin+with+a+custom+build+Step)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s take a look at it. The source code can be downloaded from GitHub here
    and then extracted to a local directory:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://github.com/jenkinsci/graven-plugin](https://github.com/jenkinsci/graven-plugin)'
  prefs: []
  type: TYPE_NORMAL
- en: This gives us everything we need to get started on our own plugin, which should
    make things much easier than starting from scratch—we can examine and reuse the
    extension points used here to see how the plugin goes about creating a new build
    type, and adjusts the properties files and other resources, as they perform the
    same steps that we want to do.
  prefs: []
  type: TYPE_NORMAL
- en: Loading and building our starting point
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s import this project in to Eclipse. Again, the process is quite simple;
    as we did in the previous chapter, we will make a directory for our Eclipse Project,
    use `cd` to enter into the directory containing our project''s POM file, and then
    run the `eclipse:configure-workspace` goal again, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: This should download all the dependencies and allow you to import the project
    to your IDE (navigate to **File** | **Import** | **General** | **Existing Projects
    in to Workspace**), in the same way as we did in the previous chapter.
  prefs: []
  type: TYPE_NORMAL
- en: 'You should now have all the resources and source code, which constitutes this
    plugin, loaded in to your IDE, and it should look roughly like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Loading and building our starting point](../images/00055.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: We will now take a quick look through these files and file types, explain their
    functions, and explore the additional plugin components and options they provide
    for this plugin, and could potentially bring to our new plugin.
  prefs: []
  type: TYPE_NORMAL
- en: The Builder class and Stapler
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The first class is `GravenBuilder.java`. The class declares that it extends
    the `Builder` class:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: As we can see in the JavaDoc at [http://javadoc.jenkins-ci.org/hudson/tasks/Builder.html](http://javadoc.jenkins-ci.org/hudson/tasks/Builder.html),
    extending the `Builder` class will register this class with Jenkins as a **custom
    builder**, which is what we are after.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This extension declaration is how the **Extension point** page is updated—the
    program that builds the index will find this reference in the code and automatically
    create the association for us.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `GravenBuilder` class also contains this simple method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Through the use of the `@DataBoundConstructor` annotation, this method will
    register the selection of this task/build type when the user decides to create
    this new build type. This is done automatically via the Stapler framework, which
    Jenkins uses to serialize and convert Java objects. You can find out more about
    Stapler, how it works, and how to make use of it in your plugins here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://stapler.kohsuke.org/what-is.html](http://stapler.kohsuke.org/what-is.html)'
  prefs: []
  type: TYPE_NORMAL
- en: Also, in the `GravenBuilder` class, there is an inner class named `Descriptor`.
    This extends `BuildStepDescriptor`, and its function is to provide a way for Jenkins
    to manage instances of `GravenBuilder` and their lifecycles.
  prefs: []
  type: TYPE_NORMAL
- en: The `GravenInstallation` class contains all the required installation and registration
    settings; this sets the tool tips and defines the display name to be used for
    this plugin, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: Jelly and Jenkins
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `config.jelly` configuration file is a simple Jelly template. You can find
    out more about Jelly in Jenkins in the following link:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://wiki.jenkins-ci.org/display/JENKINS/Basic+guide+to+Jelly+usage+in+Jenkins](https://wiki.jenkins-ci.org/display/JENKINS/Basic+guide+to+Jelly+usage+in+Jenkins)'
  prefs: []
  type: TYPE_NORMAL
- en: 'You can read more about Jelly, in general, here at [http://commons.apache.org/proper/commons-jelly/](http://commons.apache.org/proper/commons-jelly/).
    This article states the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '*Jelly is a Java and XML based scripting and processing engine.*'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: The main purpose of Jelly in this context is to provide developers with a highly
    flexible tag library through which they can quickly and easily create and handle
    UI view changes.
  prefs: []
  type: TYPE_NORMAL
- en: From a developer point of view, Jelly files interact with Java code to get and
    set declared values at runtime and presents them to the user via the UI.
  prefs: []
  type: TYPE_NORMAL
- en: Help
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `help*.html` files provide context-sensitive help messages to the user.
    These messages are simply defined within the `<div>` tags and will be displayed
    as standard-looking tooltips within the Jenkins user interface. This approach
    allows you to guide your user, advise them on what they can and can't do, and
    explain what your plugin does and requires.
  prefs: []
  type: TYPE_NORMAL
- en: The `index.jelly` file provides the user with a general high-level description
    of what this plugin does—we will see this text being displayed as the plugin description
    in Jenkins when we look at the plugin in action later on.
  prefs: []
  type: TYPE_NORMAL
- en: Properties files and Messages
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `Messages.properties` and `config_fr.properties` files are there to provide
    users with i18n internationalization, as described here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://wiki.jenkins-ci.org/display/JENKINS/Internationalization](https://wiki.jenkins-ci.org/display/JENKINS/Internationalization)'
  prefs: []
  type: TYPE_NORMAL
- en: 'There is some more detail on localization and internationalization at this
    link:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://www.w3.org/International/questions/qa-i18n](http://www.w3.org/International/questions/qa-i18n)'
  prefs: []
  type: TYPE_NORMAL
- en: In Jenkins plugin development, all we really need to do is provide `config_LOCALE.properties`
    files to cater to each language. For example, if the user's `LOCALE` variable
    is set to `fr`, the messages in the `config_fr.properties` file will be used—other
    `LOCALE` files can be added as desired to support other languages.
  prefs: []
  type: TYPE_NORMAL
- en: 'Your plugin code is able to use and refer to the properties at runtime, as
    follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: The `Messages.java` class in the target directory is generated at build time,
    based on these properties files.
  prefs: []
  type: TYPE_NORMAL
- en: The POM file
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The last remaining file, `pom.xml`, is the Maven settings file that we have
    looked at before. This one is particular to the plugin we are using here and contains
    the group, artifact, and version information that will be used to build, run,
    and package the project, which we will do now.
  prefs: []
  type: TYPE_NORMAL
- en: Right-clicking on the `pom.xml` file and selecting **Run as** and then **Maven
    Build…** allows you to specify the `hpi:run` goal again, which should start up
    a new local instance of Jenkins with this plugin compiled and deployed to this
    new instance, along with all of the resources and localization settings the plugin
    contains.
  prefs: []
  type: TYPE_NORMAL
- en: When the instance starts up, we can connect via a browser and see the various
    settings and code that we have reviewed in theory being used in practice.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can check and see that the plugin is listed as installed, along with the
    message text, which is picked up from `index.jelly`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The POM file](../images/00056.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'When we create a new Freestyle job and take a look at the available **Build**
    steps that we could add, this plugin will be displayed as a new option—**execute
    GRaveN task**, which has been picked up from **Messages.properties**:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The POM file](../images/00057.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'When we select this option, we will be presented with the dialogs, localized
    tool tips, and input boxes that were defined in the configuration and code we
    just reviewed:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The POM file](../images/00058.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: This example plugin looks like a good starting point for our hypothetical one.
    It may not do everything that we want to do, but we can adjust and reuse the settings
    files and some of the code and extension points it uses to get us started, and
    we can have the basics of our own plugin up and running very quickly.
  prefs: []
  type: TYPE_NORMAL
- en: The implementation of this hypothetical plugin, or your own plugin, may well
    have different needs when you get down to the details, but hopefully, this will
    illustrate the approaches and routes you could follow to get your plugin up and
    running quickly.
  prefs: []
  type: TYPE_NORMAL
- en: If you ever want to find out how a plugin works, or how to change a plugin,
    or fix a bug in a plugin, knowing your way around the various resource files and
    how to load and run any locally based plugin by starting off with its source code
    is a very useful skill.
  prefs: []
  type: TYPE_NORMAL
- en: Plugin progress
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We searched and identified something that did roughly what we wanted to do,
    at least to start off with. We have identified extension points that provide some
    of the functionalities that we are after, and we have the beginnings of a pretty
    fully-featured plugin that will look and feel like a normal part of Jenkins. It
    will provide the user with inbuilt help and will even speak the user's preferred
    language… so long as we add the corresponding config files.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The next steps for this plugin would be to implement more of our own code, to
    perform the Docker build, or whatever functions we want to perform. Again, this
    functionality could take further advantage of the available extension points,
    or if there are none available that will do what we want, we should consider declaring
    their interfaces and sharing them with the community after coding our own implementation.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will explore the tools, options, and resources available
    for testing our plugins. We will also look further into debugging as we explore
    how to approach, resolve, and avoid issues with plugins.
  prefs: []
  type: TYPE_NORMAL
