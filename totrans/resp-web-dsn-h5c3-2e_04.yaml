- en: Chapter 4. HTML5 for Responsive Web Designs
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If you are looking for guidance on using the HTML5 **application programming
    interfaces** (**APIs**), I'm going to paraphrase a line from a great Western movie
    and say, "I'm not your Huckleberry".
  prefs: []
  type: TYPE_NORMAL
- en: What I would like to look at with you is the 'vocabulary' part of HTML5; its
    semantics. More succinctly, the way we can use the new elements of HTML5 to describe
    the content we place in markup. The majority of content in this chapter is not
    specific to a responsive web design. However, HTML is the very foundation upon
    which all web-based designs and applications are built. Who doesn't want to build
    upon the strongest possible foundation?
  prefs: []
  type: TYPE_NORMAL
- en: You might be wondering 'what is HTML5 anyway?' In which case I would tell you
    that HTML5 is simply the description given to the latest version of HTML, the
    language of tags we use to build web pages. HTML itself is a constantly evolving
    standard, with the prior major version being 4.01.
  prefs: []
  type: TYPE_NORMAL
- en: For a little more background on the versions and timeline of HTML's evolution,
    you can read the Wikipedia entry at [http://en.wikipedia.org/wiki/HTML#HTML_versions_timeline](http://en.wikipedia.org/wiki/HTML#HTML_versions_timeline).
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: HTML5 is now a recommendation from the W3C. You can read the specification at
    [http://www.w3.org/TR/html5/](http://www.w3.org/TR/html5/).
  prefs: []
  type: TYPE_NORMAL
- en: 'The topics we will cover in this chapter are:'
  prefs: []
  type: TYPE_NORMAL
- en: How well supported is HTML5?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Starting an HTML5 page the right way
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Easy-going HTML5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: New semantic elements
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Text-level semantics
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Obsolete features
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Putting the new elements to use
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Web Content Accessibility Guidelines** (**WCAG**) accessibility conformance
    and **Web Accessibility Initiative-Accessible Rich Internet Applications** (**WAI-ARIA**)
    for more accessible web applications'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Embedding media
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Responsive video and iFrames
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A note about 'offline first'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: HTML5 also provides specific tools for handling forms and user input. This set
    of features takes much of the burden away from more resource heavy technologies
    like JavaScript for things like form validation. However, we're going to look
    at HTML5 forms separately in [Chapter 9](ch09.html "Chapter 9. Conquer Forms with
    HTML5 and CSS3"), *Conquer Forms with HTML5 and CSS3*.
  prefs: []
  type: TYPE_NORMAL
- en: HTML5 markup – understood by all modern browsers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Nowadays, the majority of websites I see (and all of those I make myself) are
    written using HTML5, rather than the older HTML 4.01 standard.
  prefs: []
  type: TYPE_NORMAL
- en: All modern browsers understand the new semantic elements of HTML5 (the new structural
    elements, video, and audio tags) and even older versions of Internet Explorer
    (versions before Internet Explorer 9) can be served a tiny 'polyfill' to allow
    it to render these new elements.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**What is a polyfill?**'
  prefs: []
  type: TYPE_NORMAL
- en: The term **polyfill** was originated by Remy Sharp as an allusion to filling
    the cracks in older browsers with Polyfilla (known as **Spackling Paste** in the
    US). Therefore, a polyfill is a JavaScript 'shim' to effectively replicate newer
    features in older browsers. However, it's important to be aware that polyfills
    add extra flab to your code. Therefore, even if you could add 15 polyfill scripts
    to make Internet Explorer 6 render a site identically to every other browser,
    it doesn't mean you necessarily should.
  prefs: []
  type: TYPE_NORMAL
- en: If you need to enable HTML5 structural elements, I'd look at Remy Sharp's original
    script ([http://remysharp.com/2009/01/07/html5-enabling-script/](http://remysharp.com/2009/01/07/html5-enabling-script/))
    or create a custom build of Modernizr ([http://modernizr.com](http://modernizr.com)).
    If Modernizr is a tool you've not come across or used, there is a whole section
    on it in the next chapter.
  prefs: []
  type: TYPE_NORMAL
- en: With that in mind, let's consider the start of an HTML5 page. Let's get a handle
    on all the opening tags and what they do.
  prefs: []
  type: TYPE_NORMAL
- en: Starting an HTML5 page the right way
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s start right at the beginning of an HTML5 document. Screw this part up
    and you could spend a long time wondering why your page doesn''t behave as it
    should. The first few lines should look something like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Let's go through these tags one by one. Generally, they will be the same every
    time you create a web page but trust me, it's worth understanding what they do.
  prefs: []
  type: TYPE_NORMAL
- en: The doctype
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `doctype` is a means of communicating to the browser the type of document
    we have. Otherwise, it wouldn't necessarily know how to use the content within
    it.
  prefs: []
  type: TYPE_NORMAL
- en: 'We opened our document with the HTML5 `doctype` declaration:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: If you're a fan of lowercase, then `<!doctype html>` is just as good. It makes
    no difference.
  prefs: []
  type: TYPE_NORMAL
- en: 'This is a welcome change from HTML 4.01 pages. They used to start something
    like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: What an enormous pain in the pimply rear! No wonder I used to copy and paste
    it!
  prefs: []
  type: TYPE_NORMAL
- en: 'The HTML5 `doctype` on the other hand is nice and short, just `<!DOCTYPE html>`.
    Interesting fact (to me anyway): it actually ended up this way as it was determined
    that this was the shortest method of telling a browser to render the page in "standards
    mode".'
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Want a history lesson in what ''quirks'' and ''standards'' mode were? Wikipedia
    has you covered: [http://en.wikipedia.org/wiki/Quirks_mode](http://en.wikipedia.org/wiki/Quirks_mode)'
  prefs: []
  type: TYPE_NORMAL
- en: The HTML tag and lang attribute
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'After the `doctype` declaration, we open the `html` tag; the root tag for our
    document. We also use the `lang` attribute to specify the language for the document,
    and then we open the `<head>` section:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Specifying alternate languages
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: According to the W3C specifications ([http://www.w3.org/TR/html5/dom.html#the-lang-and-xml:lang-attributes](http://www.w3.org/TR/html5/dom.html#the-lang-and-xml:lang-attributes)),
    the `lang` attribute specifies the primary language for the element's contents
    and for any of the element's attributes that contain text. If you're not writing
    pages in English, you'd best specify the correct language code. For example, for
    Japanese, the HTML tag would be `<html lang="ja">`. For a full list of languages
    take a look at [http://www.iana.org/assignments/language-subtag-registry](http://www.iana.org/assignments/language-subtag-registry).
  prefs: []
  type: TYPE_NORMAL
- en: Character encoding
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Finally, we specify the character encoding. As it''s a void element (cannot
    contain anything) it doesn''t require a closing tag:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Unless you have a good reason to specify otherwise, the value for the charset
    is almost always `utf-8`. For the curious, more information on the subject can
    be found at [http://www.w3.org/International/questions/qa-html-encoding-declarations#html5charset](http://www.w3.org/International/questions/qa-html-encoding-declarations#html5charset).
  prefs: []
  type: TYPE_NORMAL
- en: Easy-going HTML5
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: I remember, back in school, every so often our super-mean (but actually very
    good) math teacher would be away. The class would breathe a collective sigh of
    relief as, rather than "Mr. Mean" (names have been changed to protect the innocent),
    the replacement teacher was usually an easy-going and amiable man. He sat quietly
    and left us to get on without shouting or constant needling. He didn't insist
    on silence whilst we worked, he didn't much care if we adhered to the way he worked
    out problems, all that mattered was the answers and that we could articulate how
    we came to them. If HTML5 were a math teacher, it would be that easy-going supply
    teacher. I'll now qualify this bizarre analogy.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you pay attention to how you write code, you''ll typically use lower-case
    for the most part, wrap attribute values in quotation marks, and declare a "type"
    for scripts and style sheets. For example, perhaps you link to a style sheet like
    this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'HTML5 doesn''t require such precision, it''s just as happy to see this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Did you notice that? There's no end tag/slash, there are no quotation marks
    around the attribute values, and there is no type declaration. However, easy going
    HTML5 doesn't care. The second example is just as valid as the first.
  prefs: []
  type: TYPE_NORMAL
- en: 'This more lax syntax applies across the whole document, not just linked assets.
    For example, specify a div like this if you like:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'That''s perfectly valid HTML5\. The same goes for inserting an image:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: That's also valid HTML5\. No end tag/slash, no quotes, and a mix of capitalization
    and lower case characters. You can even omit things such as the opening `<head>`
    tag and the page still validates. What would XHTML 1.0 say about this?
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Want a short-cut to great HTML5 code? Consider the HTML5 Boilerplate ([http://html5boilerplate.com/](http://html5boilerplate.com/)).
    It's a pre-made "best practice" HTML5 file, including essential styles, polyfills,
    and optional tools such as Modernizr. You can pick up lots of great tips just
    by viewing the code and it's also possible to custom build the template to match
    your specific needs. Highly recommended!
  prefs: []
  type: TYPE_NORMAL
- en: A sensible approach to HTML5 markup
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Personally, I like writing my markup 'XHTML' style. That means closing tags,
    quoting attribute values, and adhering to a consistent letter case. One could
    argue that ditching some of these practices would save a few bytes of data but
    that's what tools are for (any needless characters/data could be stripped if needed).
    I want my markup to be as legible as possible and I would encourage others to
    do the same. I'm of the opinion that clarity in code should trump brevity.
  prefs: []
  type: TYPE_NORMAL
- en: 'When writing HTML5 documents therefore, I think you can write clean and legible
    code while still embracing the economies afforded by HTML5\. To exemplify, for
    a CSS link, I''d go with the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: I've kept the closing tag and the quotation marks but omitted the `type` attribute.
    The point to make here is that you can find a level you're happy with yourself.
    HTML5 won't be shouting at you, flagging up your markup in front of the class
    and standing you in a corner with a dunces hat on for not validating (was it just
    my school that did that?). However you want to write your markup is just fine.
  prefs: []
  type: TYPE_NORMAL
- en: Who am I kidding? I want you to know right now that if you're writing your code
    without quoting attribute values and closing your tags, I am silently judging
    you.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Despite HTML5''s looser syntax, it''s always worth checking whether your markup
    is valid. Valid markup is more accessible markup. The W3C validator was created
    for just this reason: [http://validator.w3.org/](http://validator.w3.org/)'
  prefs: []
  type: TYPE_NORMAL
- en: Enough of me berating writers of 'hipster' style markup. Let's look at some
    more benefits of HTML5.
  prefs: []
  type: TYPE_NORMAL
- en: All hail the mighty <a> tag
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'A huge economy in HTML5 is that we can now wrap multiple elements in an `<a>`
    tag (woohoo! About time, right?). Previously, if you wanted your markup to validate,
    it was necessary to wrap each element in its own `<a>` tag. For example, look
    at the following HTML 4.01 code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'With HTML5, we can ditch all the individual `<a>` tags and instead wrap the
    group with one:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: The only limitations to keep in mind are that, understandably, you can't wrap
    one `<a>` tag within another `<a>` tag (because, like, duh) or another interactive
    element such as a `button` (because like, double duh!) and you can't wrap a form
    in an `<a>` tag either (because like, oh, you get the idea).
  prefs: []
  type: TYPE_NORMAL
- en: New semantic elements in HTML5
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'If I check the definition of the word ''semantics'' in the dictionary of OS
    X, it is defined as:'
  prefs: []
  type: TYPE_NORMAL
- en: '*"the branch of linguistics and logic concerned with meaning".*'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: For our purposes, semantics is the process of giving our markup meaning. Why
    is this important? Glad you asked.
  prefs: []
  type: TYPE_NORMAL
- en: Most websites follow fairly standard structural conventions; typical areas include
    a header, a footer, a sidebar, a navigation bar, and so on. As web authors we
    will often name the divs we use to more clearly designate these areas (for example,
    `class="Header"`). However, as far as the code itself goes, any user agent (web
    browser, screen reader, search engine crawler, and so on) looking at it couldn't
    say for sure what the purpose of each of these `div` elements is. Users of assistive
    technology would also find it difficult to differentiate one `div` from another.
    HTML5 aims to solve that problem with new semantic elements.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: For the full list of HTML5 elements, get yourself (very) comfy and point your
    browser at [http://www.w3.org/TR/html5/semantics.html#semantics](http://www.w3.org/TR/html5/semantics.html#semantics).
  prefs: []
  type: TYPE_NORMAL
- en: We won't cover every one of the new elements here, merely those I feel are the
    most beneficial or interesting in day-to-day responsive web design use. Let's
    dig in.
  prefs: []
  type: TYPE_NORMAL
- en: The <main> element
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For a long time, HTML5 had no element to demarcate the main content of a page.
    Within the body of a web page, this would be the element that contains the main
    block of content.
  prefs: []
  type: TYPE_NORMAL
- en: At first, it was argued that the content that wasn't inside one of the other
    new semantic HTML5 elements would, by negation, be the main content. Thankfully,
    the spec changed and we now have a more declarative way to group the main content;
    the aptly named `<main>` tag.
  prefs: []
  type: TYPE_NORMAL
- en: 'Whether you''re wrapping the main content of a page or the main section of
    a web-based application, the `main` element is what you should be grouping it
    all with. Here''s a particularly useful line from the specification:'
  prefs: []
  type: TYPE_NORMAL
- en: '*"The main content area of a document includes content that is unique to that
    document and excludes content that is repeated across a set of documents such
    as site navigation links, copyright information, site logos and banners and search
    forms (unless the document or applications main function is that of a search form)."*'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: It's also worth noting that there shouldn't be more than one main on each page
    (after all, you can't have two main pieces of content) and it shouldn't be used
    as a descendent as some of the other semantic HTML5 elements such as `article`,
    `aside`, `header`, `footer`, `nav`, or `header`. They can live within a main element
    however.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Read the official line on the main element at: [http://www.w3.org/TR/html5/grouping-content.html#the-main-element](http://www.w3.org/TR/html5/grouping-content.html#the-main-element)'
  prefs: []
  type: TYPE_NORMAL
- en: The <section> element
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `<section>` element is used to define a generic section of a document or
    application. For example, you may choose to create sections round your content;
    one section for contact information, another section for news feeds, and so on.
    It's important to understand that it isn't intended for styling purposes. If you
    need to wrap an element merely to style it, you should continue to use a `div`
    as you would have before.
  prefs: []
  type: TYPE_NORMAL
- en: When working on web-based applications I tend to use `section` as the wrapping
    element for visual components. It provides a simple way to see the beginning and
    end of components in the markup.
  prefs: []
  type: TYPE_NORMAL
- en: You can also qualify for yourself whether you should be using a section based
    upon whether the content you are sectioning has a natural heading within it (for
    example an `h1`). If it doesn't, it's likely you'd be better off opting for a
    `div`.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'To find out what the W3C HTML5 specification says about `<section>` go to the
    following URL:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://www.w3.org/TR/html5/sections.html#the-section-element](http://www.w3.org/TR/html5/sections.html#the-section-element)'
  prefs: []
  type: TYPE_NORMAL
- en: The <nav> element
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `<nav>` element is used to wrap major navigational links to other pages
    or parts within the same page. It isn't strictly intended for use in footers (although
    it can be) and the like, where groups of links to other pages are common.
  prefs: []
  type: TYPE_NORMAL
- en: If you usually markup your navigational elements with an un-ordered list (`<ul>`)
    and a bunch of list tags (`li`), you may be better served with a `nav` and a number
    of nested `a` tags instead.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'To find out what the W3C HTML5 specification says about `<nav>` go to the following
    URL:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://www.w3.org/TR/html5/sections.html#the-nav-element](http://www.w3.org/TR/html5/sections.html#the-nav-element)'
  prefs: []
  type: TYPE_NORMAL
- en: The <article> element
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `<article>` element, alongside `<section>` can easily lead to confusion.
    I certainly had to read and re-read the specifications of each before it sank
    in. Here's my re-iteration of the specification. The `<article>` element is used
    to wrap a self-contained piece of content. When structuring a page, ask whether
    the content you're intending to use within a `<article>` tag could be taken as
    a whole lump and pasted onto a different site and still make complete sense? Another
    way to think about it is, would the content that you are considering wrapping
    in an `<article>` actually constitute a separate article in a RSS feed? Obvious
    examples of content that should be wrapped with an `<article>` element would be
    blog posts or news stories. Be aware that if nesting `<article>` elements, it
    is presumed that the nested `<article>` elements are principally related to the
    outer article.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: To see what the W3C HTML5 specification says about `<article>` visit [http://www.w3.org/TR/html5/sections.html#the-article-element](http://www.w3.org/TR/html5/sections.html#the-article-element).
  prefs: []
  type: TYPE_NORMAL
- en: The <aside> element
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `<aside>` element is used for content that is tangentially related to the
    content around it. In practical terms, I often use it for sidebars (when it contains
    suitable content). It's also considered suitable for pull quotes, advertising,
    and groups of navigation elements. Basically anything not directly related to
    the main content would work well in an aside. If it was an e-commerce site, I'd
    consider areas like 'customers who bought this also bought' as prime candidates
    for an `<aside>`.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: For more on what the W3C HTML5 specification says about `<aside>` visit [http://www.w3.org/TR/html5/sections.html#the-aside-element](http://www.w3.org/TR/html5/sections.html#the-aside-element).
  prefs: []
  type: TYPE_NORMAL
- en: The <figure> and <figcaption> elements
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The specification relates that the figure element:'
  prefs: []
  type: TYPE_NORMAL
- en: '*"...can thus be used to annotate illustrations, diagrams, photos, code listings,
    etc."*'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Here''s how we could use it to revise a portion of markup from the first chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: You can see that the `<figure>` element is used to wrap this little self-contained
    block. Inside, the `<figcaption>` is used to provide a caption for the parent
    `<figure>` element.
  prefs: []
  type: TYPE_NORMAL
- en: It's perfect when images or code need a little caption alongside (that wouldn't
    be suitable in the main text of the content).
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The specification for the `figure` element can be found at [http://www.w3.org/TR/html5/grouping-content.html#the-figure-element](http://www.w3.org/TR/html5/grouping-content.html#the-figure-element).
  prefs: []
  type: TYPE_NORMAL
- en: The specification for the `figcaption` is at [http://www.w3.org/TR/html5/grouping-content.html#the-figcaption-element](http://www.w3.org/TR/html5/grouping-content.html#the-figcaption-element).
  prefs: []
  type: TYPE_NORMAL
- en: The <details> and <summary> elements
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'How many times have you wanted to create a simple open and close ''widget''
    on your page? A piece of summary text that when clicked, opens a panel with additional
    information. HTML5 facilitates this pattern with the `details` and `summary` elements.
    Consider this markup (you can open `example3.html` from this chapter''s code to
    play with it for yourself):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Opening this in Chrome, with no added styling, shows only the summary text
    by default:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The <details> and <summary> elements](img/B03777_04_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Clicking anywhere on the summary text opens the panel. Clicking it again toggles
    it shut. If you want the panel open by default you can add the `open` attribute
    to the `details` element:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: '![The <details> and <summary> elements](img/B03777_04_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Supporting browsers typically add some default styling to indicate the panel
    can be opened. Here in Chrome (and also Safari) that''s a dark disclosure triangle.
    To disable this, you need to use a WebKit specific proprietary pseudo selector:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: You can of course use that same selector to style the marker differently.
  prefs: []
  type: TYPE_NORMAL
- en: 'Currently, there is no way of animating the open and close. Neither is there
    a (non JavaScript) way of toggling other details panels closed (at the same level)
    when a different one is open. I''m not sure either of these desires will (or should)
    ever be addressed. You should think of it more as a way to facilitate what you
    would have done with a `display: none;` toggle with the help of JavaScript.'
  prefs: []
  type: TYPE_NORMAL
- en: Sadly, as I write this (mid 2015), there is no support for this element in Firefox
    or Internet Explorer (they just render the two elements as inline elements). Polyfills
    exist ([https://mathiasbynens.be/notes/html5-details-jquery](https://mathiasbynens.be/notes/html5-details-jquery))
    and hopefully will be fully implemented soon.
  prefs: []
  type: TYPE_NORMAL
- en: The <header> element
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Practically, the `<header>` element can be used for the "masthead" area of a
    site's header. It can also be used as an introduction to other content such as
    a section within an `<article>` element. You can use it as many times on the same
    page as needed (you could have a `<header>` inside every `<section>` on your page
    for example).
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'This is what the W3C HTML5 specification says about `<header>`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://www.w3.org/TR/html5/sections.html#the-header-element](http://www.w3.org/TR/html5/sections.html#the-header-element)'
  prefs: []
  type: TYPE_NORMAL
- en: The <footer> element
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `<footer>` element should be used to contain information about the section
    it sits within. It might contain links to other documents or copyright information
    for example. Like the `<header>` it can be used multiple times withina page if
    needed. For example, it could be used for the footer of a blog but also a `footer`
    section within a blog post article. However, the specification explains that contact
    information for the author of a blog post should instead be wrapped by an `<address>`
    element.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'See what the W3C HTML5 specification says about `<footer>`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://www.w3.org/TR/html5/sections.html#the-footer-element](http://www.w3.org/TR/html5/sections.html#the-footer-element)'
  prefs: []
  type: TYPE_NORMAL
- en: The <address> element
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `<address>` element is to be used explicitly for marking up contact information
    for its nearest `<article>` or `<body>` ancestor. To confuse matters, keep in
    mind that it isn't to be used for postal addresses and the like (unless they are
    indeed the contact addresses for the content in question). Instead postal addresses
    and other arbitrary contact information should be wrapped in good ol' `<p>` tags.
  prefs: []
  type: TYPE_NORMAL
- en: I'm not a fan of the `<address>` element as in my experience it would be far
    more useful to markup a physical address in its own element, but that's a personal
    gripe. Hopefully it makes more sense to you.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'For more on what the W3C HTML5 specification says about `<address>` check out:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://www.w3.org/TR/html5/sections.html#the-address-element](http://www.w3.org/TR/html5/sections.html#the-address-element)'
  prefs: []
  type: TYPE_NORMAL
- en: A note on h1-h6 elements
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Something that I hadn''t realized until very recently is that using `h1`-`h6`
    tags to markup headings and sub-headings is discouraged. I''m talking about this
    kind of thing:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'Here''s a quote from the HTML5 specification:'
  prefs: []
  type: TYPE_NORMAL
- en: h1–h6 elements must not be used to markup subheadings, subtitles, alternative
    titles and taglines unless intended to be the heading for a new section or subsection.
  prefs: []
  type: TYPE_NORMAL
- en: That's certainly one of the less ambiguous sentences in the specification! Ooops!
  prefs: []
  type: TYPE_NORMAL
- en: 'So, how should we author such eventualities? The specification actually has
    a whole section, ([http://www.w3.org/TR/html5/common-idioms.html#common-idioms](http://www.w3.org/TR/html5/common-idioms.html#common-idioms))
    dedicated to this. Personally, I preferred the old `<hgroup>` element but sadly
    that ship has sailed (more information in the *Obsolete HTML features* section).
    So, to follow the advice of the specification, our prior example could be rewritten
    as:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: HTML5 text-level semantics
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Besides the structural and grouping elements we've looked at, HTML5 also revises
    a few tags that used to be referred to as inline elements. The HTML5 specification
    now refers to these tags as text-level semantics ([http://www.w3.org/TR/html5/text-level-semantics.html#text-level-semantics](http://www.w3.org/TR/html5/text-level-semantics.html#text-level-semantics)).
    Let's take a look at a few common examples.
  prefs: []
  type: TYPE_NORMAL
- en: The <b> element
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Historically, the `<b>` element meant "make this bold" ([http://www.w3.org/TR/html4/present/graphics.html#edef-B](http://www.w3.org/TR/html4/present/graphics.html#edef-B)).
    This was from back in the day when stylistic choices were part of the markup.
    However, you can now officially use it merely as a styling hook in CSS as the
    HTML5 specification now declares that `<b>` is:'
  prefs: []
  type: TYPE_NORMAL
- en: '*"The b element represents a span of text to which attention is being drawn
    for utilitarian purposes without conveying any extra importance and with no implication
    of an alternate voice or mood, such as key words in a document abstract, product
    names in a review, actionable words in interactive text-driven software, or an
    article lede."*'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Although no specific meaning is now attached to it, as it's text level, it's
    not intended to be used to surround large groups of markup, use a `div` for that.
    You should also be aware that because it was historically used to bold text, you'll
    typically have to reset the font-weight in CSS if you want content within a `<b>`
    tag to not appear bold.
  prefs: []
  type: TYPE_NORMAL
- en: The <em> element
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'OK, hands up, I''ve often used `<em>` merely as a styling hook too. I need
    to mend my ways, as in HTML5:'
  prefs: []
  type: TYPE_NORMAL
- en: The `em` element represents stress emphasis of its contents.
  prefs: []
  type: TYPE_NORMAL
- en: Therefore, unless you actually want the enclosed contents to be emphasized,
    consider using a `<b>` tag or, where relevant, an `<i>` tag instead.
  prefs: []
  type: TYPE_NORMAL
- en: The <i> element
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The HTML5 specification describes the `<i>` as:'
  prefs: []
  type: TYPE_NORMAL
- en: '*"...a span of text in an alternate voice or mood, or otherwise offset from
    the normal prose in a manner indicating a different quality of text."*'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Suffice it to say, it''s not to be used to merely italicize something. For
    example, we could use it to markup the odd name in this line of text:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'There are plenty of other text-level semantic tags in HTML5\. For the full
    run down, take a look at the relevant section of the specification at the following
    URL:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://www.w3.org/TR/html5/text-level-semantics.html#text-level-semantics](http://www.w3.org/TR/html5/text-level-semantics.html#text-level-semantics)'
  prefs: []
  type: TYPE_NORMAL
- en: Obsolete HTML features
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Besides things such as the language attributes in script links, there are some
    further parts of HTML you may be used to using that are now considered "obsolete"
    in HTML5\. It's important to be aware that there are two camps of obsolete features
    in HTML5—conforming and non-conforming. Conforming features will still work but
    will generate warnings in validators. Realistically, avoid them if you can but
    they aren't going to make the sky fall down if you do use them. Non-conforming
    features might still render in certain browsers but if you use them, you are considered
    very, very naughty and you might not get a treat at the weekend!
  prefs: []
  type: TYPE_NORMAL
- en: In terms of obsolete and non-conforming features, there is quite a raft. I'll
    confess that many I have never used (some I've never even seen!). It's possible
    you may experience a similar reaction. However, if you're curious, you can find
    the full list of obsolete and non-conforming features at [http://www.w3.org/TR/html5/obsolete.html](http://www.w3.org/TR/html5/obsolete.html).
    Notable obsolete and non-conforming features are `strike`, `center`, `font`, `acronym`,
    `frame`, and `frameset`.
  prefs: []
  type: TYPE_NORMAL
- en: There are also features that were present in earlier drafts of HTML5 which have
    now been dropped. `hgroup` is one such example. The tag was originally proposed
    to wrap groups of headings; an `h1` for a title and a `h2` for a sub-title might
    have been wrapped in a `hgroup` element. However, discussion on the `hgroup` element
    is now frustraneous as it's now gone the way of the Raphus cucullatus (go on,
    Google it, you know you want to).
  prefs: []
  type: TYPE_NORMAL
- en: Putting HTML5 elements to use
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: It's time to practice using some of the elements we have just looked at. Let's
    revisit the example from [Chapter 1](ch01.html "Chapter 1. The Essentials of Responsive
    Web Design"), *The Essentials of Responsive Web Design*. If we compare the markup
    below to the original markup in [Chapter 1](ch01.html "Chapter 1. The Essentials
    of Responsive Web Design"), *The Essentials of Responsive Web Design*, (remember,
    you can download all the examples from the [http://rwd.education](http://rwd.education)
    website, or from the GitHub repo) you can see where the new elements we've looked
    at have been employed below.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: Applying common sense to your element selection
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: I've removed a good portion of the inner content so we can concentrate on the
    structure. Hopefully you will agree that it's easy to discern different sections
    of markup from one another. However, at this point I'd also like to offer some
    pragmatic advice; it isn't the end of the world if you don't always pick the correct
    element for every single given situation. For example, whether or not I used a
    `<section>` or `<div>` in the preceding example is of little real consequence.
    If we use an `<em>` when we should actually be using an `<i>`, I certainly don't
    feel it's a crime against humanity; the folks at the W3C won't hunt you down and
    feather and tar you for making the wrong choice. Just apply a little common sense.
    That said, if you can use elements like the `<header>` and `<footer>` when relevant,
    there are inherent accessibility benefits in doing so.
  prefs: []
  type: TYPE_NORMAL
- en: WCAG and WAI-ARIA for more accessible web applications
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Even since writing the first edition of this book from 2011 to 2012, the W3C
    has made strides in making it easier for authors to write more accessible web
    pages.
  prefs: []
  type: TYPE_NORMAL
- en: WCAG
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The WCAG exists to provide:'
  prefs: []
  type: TYPE_NORMAL
- en: '*"a single shared standard for web content accessibility that meets the needs
    of individuals, organizations, and governments internationally."*'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'When it comes to more pedestrian web pages (as opposed to single page web applications
    and the like) it makes sense to concentrate on the WCAG guidelines. They offer
    a number of (mostly common sense) guidelines for how to ensure your web content
    is accessible. Each recommendation is rated as a conformance level: A, AA, or
    AAA. For more on these conformance levels look at [http://www.w3.org/TR/UNDERSTANDING-WCAG20/conformance.html#uc-levels-head](http://www.w3.org/TR/UNDERSTANDING-WCAG20/conformance.html#uc-levels-head).'
  prefs: []
  type: TYPE_NORMAL
- en: You'll probably find that you are already adhering to many of the guidelines,
    like providing alternative text for images for example. However, you can get a
    brief run-down of the guidelines at [http://www.w3.org/WAI/WCAG20/glance/Overview.html](http://www.w3.org/WAI/WCAG20/glance/Overview.html)
    and then build your own custom quick reference list of checks at [http://www.w3.org/WAI/WCAG20/quickref/](http://www.w3.org/WAI/WCAG20/quickref/).
  prefs: []
  type: TYPE_NORMAL
- en: I'd encourage everyone to spend an hour or two looking down the list. Many of
    the guidelines are simple to implement and offer real benefits to users.
  prefs: []
  type: TYPE_NORMAL
- en: WAI-ARIA
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The aim of WAI-ARIA is principally to solve the problem of making dynamic content
    on a web page accessible. It provides a means of describing roles, states, and
    properties for custom widgets (dynamic sections in web applications) so that they
    are recognizable and usable by assistive technology users.
  prefs: []
  type: TYPE_NORMAL
- en: For example, if an on-screen widget displays a constantly updating stock price,
    how would a blind user accessing the page know that? WAI-ARIA attempts to solve
    these very problems.
  prefs: []
  type: TYPE_NORMAL
- en: Don't use roles for semantic elements
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'It used to be advisable to add ''landmark'' roles to headers and footers like
    this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'However, this is now considered surplus to requirements. If you look at the
    specifications for any of the elements listed earlier there is a dedicated *Allowed
    ARIA role attributes* section. Here is the relevant explanation from the section
    element as an example:'
  prefs: []
  type: TYPE_NORMAL
- en: '*"Allowed ARIA role attribute values:*'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '>'
  prefs: []
  type: TYPE_NORMAL
- en: '*region role (default - do not set), alert, alertdialog, application, contentinfo,
    dialog, document, log, main, marquee, presentation, search or status."*'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'The key part there being ''role (default - do not set)''. This means that explicitly
    adding an ARIA role to the element is pointless as it is implied by the element
    itself. A note in the specification now makes this clear:'
  prefs: []
  type: TYPE_NORMAL
- en: '*"In the majority of cases setting an ARIA role and/or aria-* attribute that
    matches the default implicit ARIA semantics is unnecessary and not recommended
    as these properties are already set by the browser."*'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: If you only remember one thing
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The easiest thing you can do to aid assistive technologies is to use the correct
    elements where possible. A `header` element is going to be far more useful than
    `div class="Header"`. Similarly, if you have a button on your page, use the `<button>`
    element (rather than a `span` or other element styled to look like a `button`).
    I accept that the `button` element doesn''t always allow exact styling (it doesn''t
    like being set to `display: table-cell` or `display: flex` for example) and in
    those instances at least choose the next best thing; usually an `<a>` tag.'
  prefs: []
  type: TYPE_NORMAL
- en: Taking ARIA further
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: ARIA isn't limited to landmark roles only. To take things further, a full list
    of the roles and a succinct description of their usage suitability is available
    at [http://www.w3.org/TR/wai-aria/roles](http://www.w3.org/TR/wai-aria/roles).
  prefs: []
  type: TYPE_NORMAL
- en: 'For a lighter take on the subject, I''d also recommend Heydon Pickering''s
    book, *Apps For All: Coding Accessible Web Applications* (available at [https://shop.smashingmagazine.com/products/apps-for-all-coding-accessible-web-applications](https://shop.smashingmagazine.com/products/apps-for-all-coding-accessible-web-applications)).'
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Test your designs for free with non-visual desktop access (NVDA)**'
  prefs: []
  type: TYPE_NORMAL
- en: 'If you develop on the Windows platform and you''d like to test your ARIA enhanced
    designs on a screen reader, you can do so for free with NVDA. You can get it at
    the following URL:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://www.nvda-project.org/](http://www.nvda-project.org/)'
  prefs: []
  type: TYPE_NORMAL
- en: Google now also ships the free 'Accessibility Developer Tools' for the Chrome
    browser (available cross-platform); well worth checking out.
  prefs: []
  type: TYPE_NORMAL
- en: There's also a growing number of tools that help quickly test your own designs
    against things like color blindness. For example, [https://michelf.ca/projects/sim-daltonism/](https://michelf.ca/projects/sim-daltonism/)
    is a Mac app that lets you switch color blindness types and see a preview in a
    floating palette.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, OS X also includes VoiceOver utility for testing your web pages.
  prefs: []
  type: TYPE_NORMAL
- en: Hopefully, this brief introduction to WAI-ARIA and WCAG has given you enough
    information to think a little more about how to approach supporting assistive
    technologies. Perhaps adding assistive technology support to your next HTML5 project
    will be easier than you think.
  prefs: []
  type: TYPE_NORMAL
- en: As a final resource for all things accessibility, there are handy links and
    advice galore on the A11Y project home page at [http://a11yproject.com/](http://a11yproject.com/).
  prefs: []
  type: TYPE_NORMAL
- en: Embedding media in HTML5
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: For many, HTML5 first entered their vocabulary when Apple refused to add support
    for Flash in their iOS devices. Flash had gained market dominance (some would
    argue market stranglehold) as the plugin of choice to serve up video through a
    web browser. However, rather than using Adobe's proprietary technology, Apple
    decided to rely on HTML5 instead to handle rich media rendering. While HTML5 was
    making good headway in this area anyway, Apple's public support of HTML5 gave
    it a major leg up and helped its media tools gain greater traction in the wider
    community.
  prefs: []
  type: TYPE_NORMAL
- en: As you might imagine, Internet Explorer 8 and lower versions don't support HTML5
    video and audio. Most other modern browsers (Firefox 3.5+, Chrome 4+, Safari 4,
    Opera 10.5+, Internet Explorer 9+, iOS 3.2+, Opera Mobile 11+, Android 2.3+) handle
    it just fine.
  prefs: []
  type: TYPE_NORMAL
- en: Adding video and audio the HTML5 way
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Video and audio in HTML5 is easy. The only real difficulty with HTML5 media
    used to be listing out alternate source formats for media (as different browsers
    supported different file formats). Nowadays, MP4 is ubiquitous across desktop
    and mobile platforms, making the inclusion of media in your web pages via HTML5
    a breeze. Here''s a ''simple as can be'' example of how to link to a video file
    in your page:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'HTML5 allows a single `<video></video>` tag (or `<audio></audio>` for audio)
    to do all the heavy lifting. It''s also possible to insert text between the opening
    and closing tag to inform users when there is a problem. There are also additional
    attributes you''d ordinarily want to add, such as the `height` and `width`. Let''s
    add these in:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, if we add the preceding code snippet into our page and look at it in Safari,
    it will appear but there will be no controls for playback. To get the default
    playback controls we need to add the `controls` attribute. We could also add the
    `autoplay` attribute (not recommended—it''s common knowledge that everyone hates
    videos that auto-play). This is demonstrated in the following code snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'The result of the preceding code snippet is shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Adding video and audio the HTML5 way](img/B03777_04_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Further attributes include `preload` to control pre-loading of media (early
    HTML5 adopters should note that preload replaces autobuffer), `loop` to repeat
    the video, and `poster` to define a poster frame for the video. This is useful
    if there''s likely to be a delay in the video playing (or buffering is likely
    to take some time). To use an attribute, simply add it to the tag. Here''s an
    example including all these attributes:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: Fallback capability for older browsers
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The `<source>` tag enables us to provide fallbacks, as needed. For example,
    alongside providing an MP4 version of the video, if we wanted to ensure a suitable
    fallback for Internet Explorer 8 and lower versions, we could add a Flash fallback.
    Further still, if the user didn''t have any suitable playback technology in the
    browser, we could provide download links to the files themselves. Here''s an example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: That code example and the sample video file (me appearing in the UK soap Coronation
    Street, back when I had hair and hopes of staring alongside DeNiro) in MP4 format
    are in `example2.html` of the chapter code.
  prefs: []
  type: TYPE_NORMAL
- en: Audio and video tags work almost identically
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `<audio>` tag works on the same principles with the same attributes (excluding
    `width`, `height`, and `poster`). The main difference between the two being the
    fact that `<audio>` has no playback area for visible content.
  prefs: []
  type: TYPE_NORMAL
- en: Responsive HTML5 video and iFrames
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We have seen that, as ever, supporting older browsers leads to code bloat. What
    began with the `<video>` tag being one or two lines ended up being 10 or more
    lines (and an extra Flash file) just to make older versions of Internet Explorer
    happy! For my own part, I'm usually happy to forego the Flash fallback in pursuit
    of a smaller code footprint but each use-case differs.
  prefs: []
  type: TYPE_NORMAL
- en: Now, the only problem with our lovely HTML5 video implementation is it's not
    responsive. That's right, an example in a responsive web design with HTML5 and
    CSS3 book that doesn't 'respond'.
  prefs: []
  type: TYPE_NORMAL
- en: 'Thankfully, for HTML5 embedded video, the fix is easy. Simply remove any height
    and width attributes in the markup (for example, remove `width="640" height="480"`)
    and add the following in the CSS:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'However, while that works fine for files that we might be hosting locally,
    it doesn''t solve the problem of videos embedded within an iFrame (take a bow
    YouTube, Vimeo, and others). The following code will add a film trailer for Midnight
    Run from YouTube:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: However, if you add that to a page as is, even if adding that earlier CSS rule,
    if the viewport is less than 960px wide, things will start to get clipped.
  prefs: []
  type: TYPE_NORMAL
- en: The easiest way to solve this problem is with a little CSS trick pioneered by
    Gallic CSS maestro Thierry Koblentz; essentially creating a box of the correct
    aspect ratio for the video it contains. I won't spoil the magician's own explanation,
    go take a read at [http://alistapart.com/article/creating-intrinsic-ratios-for-video](http://alistapart.com/article/creating-intrinsic-ratios-for-video).
  prefs: []
  type: TYPE_NORMAL
- en: 'If you''re feeling lazy, you don''t even need to work out the aspect ratio
    and plug it in yourself, there''s an online service that can do it for you. Just
    head to [http://embedresponsively.com/](http://embedresponsively.com/) and paste
    your iFrame URL in. It will spit you out a simple chunk of code you can paste
    into your page. For example, our Midnight Run trailer results in this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'That''s all there is to it, simply add to your page and you''re done: we now
    have a fully responsive YouTube video (note: kids, don''t pay any attention to
    Mr. DeNiro; smoking is bad)!'
  prefs: []
  type: TYPE_NORMAL
- en: A note about 'offline first'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: I believe that the ideal way to build responsive web pages and web-based applications
    is 'offline first'. This approach means that websites and applications will continue
    to work and load, even without an Internet connection.
  prefs: []
  type: TYPE_NORMAL
- en: HTML5 offline web applications ([http://www.w3.org/TR/2011/WD-html5-20110525/offline.html](http://www.w3.org/TR/2011/WD-html5-20110525/offline.html))
    were specified to meet this aim.
  prefs: []
  type: TYPE_NORMAL
- en: Although support for offline web applications is good ([http://caniuse.com/#feat=offline-apps](http://caniuse.com/#feat=offline-apps)),
    sadly, it's an imperfect solution. Although it's relatively simple to set up,
    there are a number of limitations and pitfalls. Documenting them all here is beyond
    the scope of this book. Instead I would recommend reading the humorous and thorough
    post by Jake Archibald on the subject at [http://alistapart.com/article/application-cache-is-a-douchebag](http://alistapart.com/article/application-cache-is-a-douchebag).
  prefs: []
  type: TYPE_NORMAL
- en: I'm therefore of the opinion that while it's possible to achieve offline first
    experiences using offline web applications (a good tutorial of how to do so is
    at [http://diveintohtml5.info/offline.html](http://diveintohtml5.info/offline.html))
    and LocalStorage (or some combination of the two), a better solution will be with
    us before too long. I'm pinning my hopes on 'Service Workers' ([http://www.w3.org/TR/service-workers/](http://www.w3.org/TR/service-workers/)).
  prefs: []
  type: TYPE_NORMAL
- en: 'At the time of writing, Service Workers is still a relatively new specification
    but for a good overview I''d encourage you to watch this 15-minute introduction:
    [https://www.youtube.com/watch?v=4uQMl7mFB6g](https://www.youtube.com/watch?v=4uQMl7mFB6g).
    Read this introduction [http://www.html5rocks.com/en/tutorials/service-worker/introduction/](http://www.html5rocks.com/en/tutorials/service-worker/introduction/)
    and check for support at [https://jakearchibald.github.io/isserviceworkerready/](https://jakearchibald.github.io/isserviceworkerready/)'
  prefs: []
  type: TYPE_NORMAL
- en: I'm hopeful that if and when I come to write a third edition of this book, we
    will be able to consider a full overview and implementation of this technique.
    Fingers crossed.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We've covered a lot in this chapter. Everything from the basics of creating
    a page that validates as HTML5, through to embedding rich media (video) into our
    markup and ensuring it behaves responsively.
  prefs: []
  type: TYPE_NORMAL
- en: Although not specific to responsive designs, we've also covered how we can write
    semantically rich and meaningful code and considered how we might ensure pages
    are meaningful and usable for users that are relying on assistive technology.
  prefs: []
  type: TYPE_NORMAL
- en: By necessity, it's been a very markup heavy chapter so let's change tack now.
    In the next couple of chapters we're going to embrace the power and flexibility
    of CSS. First up, let's look at the power of CSS level 3 and 4 selectors, new
    viewport relative CSS units, and capabilities such as calc and HSL color. They
    will all enable us to create faster, more capable, and maintainable responsive
    designs.
  prefs: []
  type: TYPE_NORMAL
