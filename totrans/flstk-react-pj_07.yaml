- en: Extending the Marketplace for Orders and Payments
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Processing payments from customers when they place orders and allowing sellers
    to manage these orders are key aspects of e-commerce applications. In this chapter,
    we''ll extend the online marketplace built in the previous chapter by introducing
    the following capabilities:'
  prefs: []
  type: TYPE_NORMAL
- en: Shopping cart
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Payment processing with Stripe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Order management
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The MERN Marketplace with a cart, payments, and orders
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The MERN Marketplace application developed in [Chapter 6](aadad9b8-c30c-4e0a-8ebd-2ea6635d43bb.xhtml), *Exercising
    New MERN Skills with an Online Marketplace* will be extended to include a shopping
    cart feature, Stripe integration for processing credit card payments, and a basic
    order-management flow. The implementations that follow are kept simple to serve
    as starting points for developing more complex versions of these features.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following component-tree diagram shows all the custom components that make
    up the MERN Marketplace frontend. The features discussed in this chapter modify
    some of the existing components, such as `Profile`, `MyShops`, `Products`, and
    `Suggestions`, and also add new components, such as `AddToCart`, `MyOrders`, `Cart`,
    and `ShopOrders`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/2c82bf96-7c16-481d-8ab8-4b86c7dc266c.jpg)The code for the complete
    MERN Marketplace application is available on GitHub [github.com/shamahoque/mern-marketplace](https://github.com/shamahoque/mern-marketplace).
    You can clone this code and run the application as you go through the code explanations
    in the rest of this chapter. To get the code for Stripe payments working, you
    will need to create your own Stripe account and update the `config/config.js`
    file with your testing values for the Stripe API key, secret key, and Stripe Connect
    client ID.'
  prefs: []
  type: TYPE_NORMAL
- en: Shopping cart
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Visitors to the MERN Marketplace can add products they wish to buy to a shopping
    cart by clicking the `add to cart` button on each product. A cart icon in the
    menu will indicate the number of products already added to their cart as the user
    continues to browse through the marketplace. They can also update the cart contents
    and begin the checkout by opening the cart view. But to complete checkout and
    place an order, users will be required to sign in.
  prefs: []
  type: TYPE_NORMAL
- en: The shopping cart is mainly a frontend feature, so the cart details will be
    stored locally on the client side until the user places the order at checkout.
    To implement the shopping cart features, we will set up helper methods in `client/cart/cart-helper.js`
    to help manipulate the cart details with relevant React components.
  prefs: []
  type: TYPE_NORMAL
- en: Adding to cart
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `AddToCart` component in `client/Cart/AddToCart.js` takes a `product` object
    and a CSS styles object as props from the parent component it is added to. For
    example, in MERN Marketplace, it is added to a Product view as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'The `AddToCart` component itself displays a cart icon button depending on whether
    the passed item is in stock or not:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/068f6b31-5b72-4764-b4e7-3ed9e6e2a194.png)'
  prefs: []
  type: TYPE_IMG
- en: For example, if the item quantity is more than `0`, the `AddCartIcon` is displayed,
    otherwise the `DisabledCartIcon` is rendered.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-marketplace/client/cart/AddToCart.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: The `AddCartIcon` button calls an `addToCart` method when clicked.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-marketplace/client/cart/AddToCart.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: The `addItem` helper method defined in `cart-helper.js`, takes the `product`
    item and the state-updating `callback` function as parameters, then stores the
    updated cart details in `localStorage` and executes the callback passed.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-marketplace/client/cart/cart-helper.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: The cart data stored in `localStorage` contains an array of cart item objects,
    each containing product details, the quantity of the product added to cart (which
    is set to `1` by default), and the ID of the shop the product belongs to.
  prefs: []
  type: TYPE_NORMAL
- en: Cart icon on the menu
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In the menu, we will add a link to the Cart view, and also add a badge that
    displays the length of the cart array stored in `localStorage`, in order to visually
    inform the user of how many items are currently in their cart:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/6785911f-d5df-4b43-b833-8b329fd4f2d8.png)'
  prefs: []
  type: TYPE_IMG
- en: The link for the cart will be similar to the other links in the Menu, with the
    exception of the Material-UI `Badge` component that displays the cart length.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-marketplace/client/core/Menu.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: The cart length is returned by the `itemTotal` helper method in `cart-helper.js`,
    which reads the cart array stored in `localStorage` and returns the length of
    the array.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-marketplace/client/cart/cart-helper.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Cart view
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Cart view will contain the cart items and checkout details, but initially
    only the cart details will be displayed until the user is ready to check out.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-marketplace/client/cart/Cart.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: The `CartItems` component is passed a `checkout` Boolean value, and a state
    update method for this checkout value, so that the `Checkout` component and options
    can be rendered based on user interaction.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-marketplace/client/cart/Cart.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: The `Cart` component will be accessed at the `/cart` route, so we need to add
    a `Route` to the `MainRouter` component as follows.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-marketplace/client/MainRouter.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: The CartItems component
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `CartItems` component will allow the user to view and update the items
    currently in their cart. It will also give them the option to start the checkout
    process if they are signed in:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/1a9d8699-72ed-420e-9358-b4a009b4d2b2.png)'
  prefs: []
  type: TYPE_IMG
- en: If the cart contains items, the `CartItems` component iterates over the items
    and renders the products in the cart. It there are no items added, the cart view
    just displays a message that the cart is empty.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-marketplace/client/cart/CartItems.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Each product item shows the details of the product and an editable quantity
    text field, along with a remove item option. Finally, it shows the total price
    of the items in the cart and the option to start checkout.
  prefs: []
  type: TYPE_NORMAL
- en: Retrieving cart details
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `getCart` helper method in `cart-helper.js` retrieves and returns the cart
    details from `localStorage`.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-marketplace/client/cart/cart-helper.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: In the `CartItems` component, we will retrieve the cart items using the `getCart`
    helper method in `componentDidMount` and set it to state.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-marketplace/client/cart/CartItems.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Then the `cartItems` array retrieved from `localStorage` is iterated over using
    the `map` function to render the details of each item.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-marketplace/client/cart/CartItems.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Modifying quantity
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The editable quantity `TextField` rendered for each cart item allows the user
    to update the quantity for each product they are buying, and sets a minimum allowed
    value of `1`.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-marketplace/client/cart/CartItems.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: When the user updates this value, the `handleChange` method is called to enforce
    the minimum value validation, update the `cartItems` in state, and update the
    cart in `localStorage` using the helper method.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-marketplace/client/cart/CartItems.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: The `updateCart` helper method takes the index of the product being updated
    in the cart array and the new quantity value as parameters, and updates the details
    stored in `localStorage`.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-marketplace/client/cart/cart-helper.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: Removing item
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The remove item option rendered for each item in the cart is a button, which,
    when clicked, passes the array index of the item to the `removeItem` method so
    that it can be removed from the array.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-marketplace/client/cart/CartItems.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: The `removeItem` click handler method uses the `removeItem` helper method to
    remove the item from the cart in `localStorage`, then updates the `cartItems`
    in state. This method also checks whether the cart has been emptied, so checkout
    can be hidden by using the `setCheckout` function passed as a prop from the `Cart`
    component.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-marketplace/client/cart/CartItems.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: The `removeItem` helper method in `cart-helper.js` takes the index of the product
    to be removed from the array, then splices it out, and updates the `localStorage`
    before returning the updated `cart` array.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-marketplace/client/cart/cart-helper.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: Showing total price
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: At the bottom of the `CartItems` component, we will display the total price
    of the items in the cart.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-marketplace/client/cart/CartItems.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: The `getTotal` method will calculate the total price taking into consideration
    the unit price and quantity of each item in the `cartItems` array.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-marketplace/client/cart/CartItems.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: Option to check out
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The user will see the option to perform the checkout depending on whether they
    are signed in and whether the checkout has already been opened.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-marketplace/client/cart/CartItems.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'When the checkout button is clicked, the `openCheckout` method will use the
    `setCheckout` method passed as a prop to set the checkout value to `true` in the
    `Cart` component:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: Once the checkout value is set to `true` in the Cart view, the `Checkout` component
    will be rendered to allow the user to enter the checkout details and place an
    order.
  prefs: []
  type: TYPE_NORMAL
- en: Using Stripe for payments
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Payment processing is required across implementations of the checkout, order
    creation, and order management processes. It also involves updates to both the
    buyer's and seller's user data. Before we delve into the implementations of the
    checkout and order features, we will briefly discuss payment processing options
    and considerations using Stripe, and see how it is to be integrated in MERN Marketplace.
  prefs: []
  type: TYPE_NORMAL
- en: Stripe
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Stripe provides an extensive set of tools necessary to integrate payments in
    any web application. These tools can be selected and used in different ways depending
    on the specific type of the application and the payment use case being implemented.
  prefs: []
  type: TYPE_NORMAL
- en: In case of the MERN Marketplace setup, the application itself will have a platform
    on Stripe and will expect sellers to have connected Stripe accounts on the platform,
    so the application can charge users who enter their credit card details at checkout
    on behalf of the sellers. In MERN Marketplace, a user can add products from different
    shops to their shopping cart, so charges on their cards will only be created by
    the application for the specific product ordered when it is processed by the seller.
    Additionally, sellers will have complete control over the charges created on their
    behalf from their own Stripe dashboards. We will demonstrate how to use the tools
    provided by Stripe to get this payment setup working.
  prefs: []
  type: TYPE_NORMAL
- en: Stripe provides a complete set of documentations and guidelines for each tool,
    and also exposes testing data for accounts and platforms set up on Stripe. For
    the purpose of implementing payments in MERN Marketplace, we will be using testing
    keys and leave it up to you to extend the implementation for live payments.
  prefs: []
  type: TYPE_NORMAL
- en: Stripe-connected account for each seller
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In order to create charges on behalf of sellers, the application will let a
    user, who is a seller, connect their Stripe account to their MERN Marketplace
    user account.
  prefs: []
  type: TYPE_NORMAL
- en: Updating user model
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To store the Stripe OAuth credentials after a user's Stripe account is successfully
    connected, we will update the user model with the following field.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-marketplace/server/models/user.model.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: The `stripe_seller` field will store the seller's Stripe account credential,
    and this will be used when a charge needs to be processed via Stripe for a product
    they sold from their shop.
  prefs: []
  type: TYPE_NORMAL
- en: Button to connect with Stripe
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In the user profile page of a seller, if the user has not connected their Stripe
    account yet, we will show a button that will take the user to Stripe to authenticate
    and connect their Stripe account:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/c26a53b2-2032-4685-ad5f-b14fd59ef2ad.png)'
  prefs: []
  type: TYPE_IMG
- en: 'If the user has successfully connected their Stripe account already, we will
    show a disabled STRIPE CONNECTED button instead:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/1618ca16-5f33-4815-8829-a2816ba2e80c.png)'
  prefs: []
  type: TYPE_IMG
- en: The code added to the `Profile` component will first check whether the user
    is a seller before rendering any `STRIPE CONNECTED` button. Then, a second check
    will confirm whether Stripe credentials already exist in the `stripe_seller` field
    for the given user. If Stripe credentials already exist for the user, then the
    disabled `STRIPE CONNECTED` button is shown, otherwise a link to connect to Stripe
    using their OAuth link is displayed instead.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-marketplace/client/user/Profile.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: The OAuth link takes the platform's client ID, which we will set in a `config`
    variable, and other option values as query parameters. This link takes the user
    to Stripe and allows the user to connect an existing Stripe account or create
    a new one. Then once Stripe's auth process completes, it returns to our application
    using a Redirect URL set in the Platform's Connect settings in the dashboard on
    Stripe. Stripe attaches either an auth code or error message as query parameters
    to the Redirect URL.
  prefs: []
  type: TYPE_NORMAL
- en: The MERN Marketplace redirect URI is set at `/seller/stripe/connect`, which
    will render the `StripeConnect` component.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-marketplace/client/MainRouter.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: The StripeConnect component
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `StripeConnect` component will basically complete the remaining auth process
    steps with Stripe, and render relevant messages based on whether the Stripe connection
    was successful:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/c0f9a30b-0a63-4f36-80f3-6ef632bbf11e.png)'
  prefs: []
  type: TYPE_IMG
- en: When the `StripeConnect` component loads, in `componentDidMount`, we will first
    parse the query parameters attached to the URL from the Stripe redirect. For parsing,
    we use the same `query-string` npm module that we used previously for the product
    search. Then, if the URL `query` parameter contains an auth code, we make an API
    call necessary to complete the Stripe OAuth from our server.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-marketplace/client/user/StripeConnect.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: The `stripeUpdate` fetch method is defined in `api-user.js`, and it passes the
    auth code retrieved from Stripe to an API we will set up in our server at `'/api/stripe_auth/:userId'`.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-marketplace/client/user/api-user.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: Stripe auth update API
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Once the Stripe account connection is successful, in order to complete the OAuth
    process, we need to use the retrieved auth code to make a POST API call to Stripe
    OAuth from our server and retrieve the credentials to be stored in the seller's
    user account for processing charges. The Stripe auth update API receives a request
    at `/api/stripe_auth/:userId` and initiates the POST API call to retrieve the
    credentials from Stripe.
  prefs: []
  type: TYPE_NORMAL
- en: The route for this Stripe auth update API will be declared on the server in
    user routes as follows.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-marketplace/server/routes/user.routes.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: A request to this route uses the `stripe_auth` controller method to retrieve
    the credentials from Stripe and passes it to the existing user update method to
    be stored in the database.
  prefs: []
  type: TYPE_NORMAL
- en: 'In order to make a POST request to the Stripe API from our server, we will
    use the `request` npm module:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: The `stripe_auth` controller method in the user controller will be as follows.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-marketplace/server/controllers/user.controller.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: The POST API call to Stripe takes the platform's secret key and the retrieved
    auth code to complete the authorization and returns the credentials for the connected
    account, which is then appended to the request body so the user can be updated
    in the `next()` method.
  prefs: []
  type: TYPE_NORMAL
- en: With these credentials, the application can create charges on customer credit
    cards on behalf of the seller.
  prefs: []
  type: TYPE_NORMAL
- en: Stripe Card Elements for checkout
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'During checkout, to collect credit card details from the user, we will use
    Stripe''s `Card` `Elements` to add the credit card field in the checkout form.
    To integrate the `Card` `Elements` with our React interface, we will utilize the
    `react-stripe-elements` npm module:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'We will also need to inject the `Stripe.js` code in `template.js` to access
    Stripe in the frontend code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: For MERN Marketplace, Stripe will only be required in the Cart view, where the
    `Checkout` component needs it to render the `Card` `Elements` and process card
    detail input. Hence, we will initialize the Stripe instance with the application's
    Stripe API key, after the `Cart` component mounts, in its `componentDidMount`.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-marketplace/client/cart/Cart.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: The `Checkout` component added in `Cart.js` should be wrapped with the `StripeProvider`
    component from `react-stripe-elements`, so the `Elements` in `Checkout` have access
    to the Stripe instance.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-marketplace/client/cart/Cart.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: Then, within the `Checkout` component, we will use Stripe's `Elements` components.
    Using Stripe's `Card Elements` will enable the application to collect the user's
    credit card details and use the Stripe instance to tokenize card information rather
    than handling it on our own servers. Implementation for this part of collecting
    the card details and generating the card token during the checkout process will
    be discussed in the *Checkout* and *Creating new order* sections.
  prefs: []
  type: TYPE_NORMAL
- en: Stripe Customer to record card details
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When an order is being placed at the end of the checkout process, the generated
    card token will be used to create or update a Stripe Customer ([https://stripe.com/docs/api#customers](https://stripe.com/docs/api#customers))
    representing our user, which is a good way to store credit card information ([https://stripe.com/docs/saving-cards](https://stripe.com/docs/saving-cards))
    with Stripe for further usage, such as creating charges for specific products
    in the cart only when a seller processes the ordered product from their shop.
    This eliminates the complications of having to store user credit card details
    securely on your own server.
  prefs: []
  type: TYPE_NORMAL
- en: Updating user model
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To keep track of the corresponding Stripe `Customer` information for a user
    in our database, we will update the user model with the following field:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: Updating user controller
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We will create a new, or update an existing, Stripe Customer when the user places
    an order after entering their credit card details. To implement this, we will
    update the user controllers with a `stripeCustomer` method that will be called
    before the order is created when our server receives a request to the create order
    API (discussed in the *Creating new order* section).
  prefs: []
  type: TYPE_NORMAL
- en: 'In the `stripeCustomer` controller method, we will need to use the `stripe`
    npm module:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: After installing the `stripe` module, it needs to be imported into the user
    controller file and the `stripe` instance initialized with the application's Stripe
    secret key.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-marketplace/server/controllers/user.controller.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: The `stripeCustomer` controller method will first check whether the current
    user already has a corresponding Stripe Customer stored in the database, and then
    use the card token received from the frontend to either create a new Stripe Customer
    or update the existing one.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a new Stripe Customer
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If the current user does not have a corresponding Stripe `Customer`, in other
    words, a value is not stored for the `stripe_customer` field, we will use the
    create a Customer API ([https://stripe.com/docs/api#create_customer](https://stripe.com/docs/api#create_customer))
    from Stripe.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-marketplace/server/controllers/user.controller.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: If the Stripe Customer is successfully created, we will update the current user's
    data by storing the Stripe Customer ID reference in the `stripe_customer` field.
    We will also add this Customer ID to the order being placed, so it is simpler
    to create a charge related to the order.
  prefs: []
  type: TYPE_NORMAL
- en: Updating an existing Stripe Customer
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: For an existing Stripe Customer, in other words, the current user has a value
    stored for the `stripe_customer` field, we will use the Stripe API to update a
    Stripe Customer.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-marketplace/server/controllers/user.controller.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: Once the Stripe Customer is successfully updated, we will add the Customer ID
    to the order being created in the `next()` call.
  prefs: []
  type: TYPE_NORMAL
- en: Though not covered here, the Stripe Customer feature can be used further to
    allow users to store and update their credit card information from the application.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a charge for each product processed
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When a seller updates an order by processing the product ordered in their shop,
    the application will create a charge on behalf of the seller on the Customer's
    credit card for the cost of the product ordered. To implement this, we will update
    the `user.controller.js` file, with a `createCharge` controller method that will
    use Stripe's create a charge API, and need the seller's Stripe account ID along
    with the buyer's Stripe Customer ID.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-marketplace/server/controllers/user.controller.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: If the seller has not connected their Stripe account yet, the `createCharge`
    method will return a 400 error response to indicate that a connected Stripe account
    is required.
  prefs: []
  type: TYPE_NORMAL
- en: To be able to charge the Stripe Customer on behalf of the seller's Stripe account,
    we first need to generate a Stripe token with the Customer ID and the seller's
    Stripe account ID, and then use that token to create a charge.
  prefs: []
  type: TYPE_NORMAL
- en: The `createCharge` controller method will be called when the server receives
    a request to update an order with a product status change to **Processing** (the
    API implementation for this order update request will be discussed in the *Orders
    by shop* section).
  prefs: []
  type: TYPE_NORMAL
- en: This covers all the Stripe-related concepts relevant to the implementation of
    payments processing for the specific use cases of MERN Marketplace. Now we will
    move on to allowing a user to complete checkout and place their order.
  prefs: []
  type: TYPE_NORMAL
- en: Checkout
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Users who are signed in and have added items to the cart will be able to start
    the checkout process. The Checkout form will collect customer details, delivery
    address information, and credit card information:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/82230cf9-ee29-41e7-835e-b9c00f4f5a63.png)'
  prefs: []
  type: TYPE_IMG
- en: Initializing checkout details
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the `Checkout` component, we will initialize the `checkoutDetails` object
    in state before collecting the details from the form.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-marketplace/client/cart/Checkout.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: After the component mounts, we will prepopulate the customer details based on
    the current user's details and also add the current cart items to `checkoutDetails`.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-marketplace/client/cart/Checkout.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: Customer information
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the checkout form, we will add text fields to collect the customer name and
    email.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-marketplace/client/cart/Checkout.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: 'When the user updates the values, the `handleCustomerChange` method will update
    the relevant details in the state:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: Delivery address
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To collect the delivery address from the user, we will add the following text
    fields to the checkout form to collect street address, city, zip code, state,
    and country.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-marketplace/client/cart/Checkout.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: When the user updates these address fields, the `handleAddressChange` method
    will update the relevant details in the state.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-marketplace/client/cart/Checkout.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: The PlaceOrder component
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The credit card field will be added to the checkout form using Stripe's `CardElement`
    component from `react-stripe-elements`.
  prefs: []
  type: TYPE_NORMAL
- en: The `CardElement` component must be part of a payment form component that is
    built with the `injectStripe` **higher-order component** (**HOC**) and wrapped
    with the `Elements` component. So we will create a component called `PlaceOrder`
    with `injectStripe`, and it will contain Stripe's `CardElement` and the `PlaceOrder`
    button.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-marketplace/client/cart/PlaceOrder.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: Then we will add this `PlaceOrder` component in the Checkout form, pass it the
    `checkoutDetails` object as a prop, and wrap it with the `Elements` component
    from `react-stripe-elements`.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-marketplace/client/cart/Checkout.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: The `injectStripe` HOC provides the `this.props.stripe` property that manages
    the `Elements` groups. This will allow us to call `this.props.stripe.createToken`
    within `PlaceOrder` to submit card details to Stripe and get back the card token.
  prefs: []
  type: TYPE_NORMAL
- en: Stripe CardElement component
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Stripe's `CardElement` is self-contained, so we can just add it to the `PlaceOrder`
    component, then add styles as desired, and the card detail input is taken care
    of.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-marketplace/client/cart/PlaceOrder.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: Placing an order
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Place Order button is also placed in the `PlaceOrder` component after the
    `CardElement`.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-marketplace/client/cart/PlaceOrder.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: Clicking on the Place Order button will call the `placeOrder` method, which
    will attempt to tokenize the card details using `stripe.createToken`. If unsuccessful,
    the user will be informed of the error, but if successful, then the checkout details
    and generated card token will be sent to our server's create order API (covered
    in the next section).
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-marketplace/client/cart/PlaceOrder.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: The `create` fetch method that makes a POST request to the create order API
    in the backend is defined in `client/order/api-order.js`. It takes the checkout
    details, the card token, and user credentials as parameters and sends it to the
    API at `/api/orders/:userId`.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-marketplace/client/order/api-order.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: Empty cart
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If the create order API is successful, we will empty the cart using an `emptyCart`
    helper method in `cart-helper.js`.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-marketplace/client/cart/cart-helper.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: The `emptyCart` method removes the cart object from `localStorage`, and updates
    the state of the view by executing the callback passed.
  prefs: []
  type: TYPE_NORMAL
- en: Redirecting to Order view
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: With the order placed and the cart emptied, the user is redirected to the order
    view that will show them the details of the order just placed.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-marketplace/client/cart/PlaceOrder.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: This will indicate that the checkout process has been completed with a successful
    call to the create order API that we will set up in the server to create and store
    orders in the database.
  prefs: []
  type: TYPE_NORMAL
- en: Creating new order
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When a user places an order, the details of the order confirmed at checkout
    will be used to create a new order record in the database, update or create a
    Stripe Customer for the user, and decrease the stock quantities of products ordered.
  prefs: []
  type: TYPE_NORMAL
- en: Order model
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To store the orders, we will define a Mongoose Schema for the order model that
    will record the customer details along with user account reference, delivery address
    information, payment reference, created and updated-at timestamps, and an array
    of ordered products where the structure of each product will be defined in a separate
    subschema called `CartItemSchema`.
  prefs: []
  type: TYPE_NORMAL
- en: Ordered by and for customer
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To record the details of the customer who the order is meant for, we will add
    `customer_name` and `customer_email` fields to the `Order` schema.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-marketplace/server/models/order.model.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: To reference the signed-in user who placed the order, we will add an `ordered_by`
    field.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-marketplace/server/models/order.model.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: Delivery address
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The delivery address information for the order will be stored in the delivery
    address subdocument with `street`, `city`, `state`, `zipcode`, and `country` fields.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-marketplace/server/models/order.model.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: Payment reference
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The payment information will be relevant when the order is updated and a charge
    needs to be created after an ordered product is processed by the seller. We will
    record the Stripe Customer ID relevant to the credit card details in a `payment_id`
    field in the `Order` schema.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-marketplace/server/models/order.model.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs: []
  type: TYPE_PRE
- en: Products ordered
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The main content of the order will be the list of products ordered along with
    details, such as quantity of each. We will record this list in a field called
    `products` in the `Order` schema. The structure of each product will be defined
    separately in `CartItemSchema`.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-marketplace/server/models/order.model.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs: []
  type: TYPE_PRE
- en: The CartItem schema
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `CartItem` schema will represent each product ordered. It will contain a
    reference to the product, the quantity of the product ordered by the user, a reference
    to the shop the product belongs to, and a status.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-marketplace/server/models/order.model.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs: []
  type: TYPE_PRE
- en: The `status` of the product can only have the values as defined in the enums,
    representing the current state of the product ordered as updated by the seller.
  prefs: []
  type: TYPE_NORMAL
- en: The `Order` schema defined here will record details required for the customer
    and seller to complete the purchase steps for the ordered products.
  prefs: []
  type: TYPE_NORMAL
- en: Create order API
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The create order API route is declared in `server/routes/order.routes.js`. The order
    routes will be very similar to the user routes. To load the order routes in the
    Express app, we need to mount the routes in `express.js`, like we did for the
    auth and user routes.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-marketplace/server/express.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs: []
  type: TYPE_PRE
- en: 'A number of actions, in the following sequence, take place when the create
    order API receives a POST request at `/api/orders/:userId`:'
  prefs: []
  type: TYPE_NORMAL
- en: It is ensured that the user is signed in
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A Stripe `Customer` is either created or updated using the `stripeCustomer`
    user controller method discussed earlier
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The stock quantities are updated for all the ordered products using the `decreaseQuanity`
    product controller method
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The order is created in the Order collection with the `create` order controller
    method
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The route will be defined as follows.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-marketplace/server/routes/order.routes.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs: []
  type: TYPE_PRE
- en: To retrieve the user associated with the `:userId` parameter in the route, we
    will use the `userByID` user controller method, which gets the user from the User
    collection and attaches it to the request object to be accessed by the next methods.
    We will add it with the order routes as follows.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-marketplace/server/routes/order.routes.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE63]'
  prefs: []
  type: TYPE_PRE
- en: Decrease product stock quantity
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We will update the product controller file to add the `decreaseQuantity` controller
    method, which will update the stock quantities of all the products purchased in
    the new order.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-marketplace/server/controllers/product.controller.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE64]'
  prefs: []
  type: TYPE_PRE
- en: Since the update operation in this case involves a bulk update of multiple products
    in the collection after matching with an array of products ordered, we will use
    the `bulkWrite` method in MongoDB to send multiple `updateOne` operations to the
    MongoDB server with one command. The multiple `updateOne` operations required
    are first listed in `bulkOps` using the `map` function. This will be faster than
    sending multiple independent save or update operations because with `bulkWrite()`
    there is only one round trip to MongoDB.
  prefs: []
  type: TYPE_NORMAL
- en: Create order controller method
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `create` controller method, defined in order controllers, takes the order
    details, creates a new order, and saves it to the Order collection in MongoDB.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-marketplace/server/controllers/order.controller.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE65]'
  prefs: []
  type: TYPE_PRE
- en: With this implemented, orders can be created and stored in the backend by any
    signed-in user on the MERN Marketplace. Now we can set up APIs to fetch lists
    of orders by user, orders by shop, or read an individual order and display the
    fetched data to views in the frontend.
  prefs: []
  type: TYPE_NORMAL
- en: Orders by shop
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: An important feature of the marketplace is allowing sellers to see and update
    the status of orders they've received for products in their shops. To implement
    this, we will first set up APIs to list orders by shop, and then update an order
    as a seller changes the status of a purchased product.
  prefs: []
  type: TYPE_NORMAL
- en: List by shop API
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We will implement an API to get orders for a specific shop, so authenticated
    sellers can view orders for each of their shops. The request for this API will
    be received at `'/api/orders/shop/:shopId`, with the route defined in `order.routes.js`
    as follows.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-marketplace/server/routes/order.routes.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE66]'
  prefs: []
  type: TYPE_PRE
- en: To retrieve the shop associated with the `:shopId` parameter in the route, we
    will use the `shopByID` shop controller method, which gets the shop from the Shop
    collection and attaches it to the request object to be accessed by the next methods.
  prefs: []
  type: TYPE_NORMAL
- en: The `listByShop` controller method will retrieve the orders that have products
    purchased with the matching shop ID, then populate the ID, name, and price fields
    for each product, with orders sorted by date from most recent to oldest.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-marketplace/server/controllers/order.controller.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE67]'
  prefs: []
  type: TYPE_PRE
- en: To fetch this API in the frontend, we will add a corresponding `listByShop`
    method in `api-order.js`, to be used in the `ShopOrders` component to show the
    orders for each shop.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-marketplace/client/order/api-order.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE68]'
  prefs: []
  type: TYPE_PRE
- en: The ShopOrders component
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Sellers will view their list of orders in the `ShopOrders` component, with
    each order showing only the purchased products relevant to the shop, and allowing
    the seller to change the status of the product with a dropdown of possible status
    values:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/76b773d7-1bb1-429b-b10b-20933f551b19.png)'
  prefs: []
  type: TYPE_IMG
- en: We will update `MainRouter` with a `PrivateRoute`, to load the `ShopOrders`
    component at the `/seller/orders/:shop/:shopId` route.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-marketplace/client/MainRouter.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE69]'
  prefs: []
  type: TYPE_PRE
- en: List orders
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When the `ShopOrders` component mounts, we will load the relevant orders by
    using the `listByShop` fetch method and set the retrieved orders to state.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-marketplace/client/order/ShopOrders.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE70]'
  prefs: []
  type: TYPE_PRE
- en: In the view, we will iterate through the list of orders and render each order
    in a collapsible list from `Material-UI`, which will expand on click.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-marketplace/client/order/ShopOrders.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE71]'
  prefs: []
  type: TYPE_PRE
- en: Each expanded order will show the order details and the `ProductOrderEdit` component.
    The `ProductOrderEdit` component will display the purchased products and allow
    the seller to edit the status of each product. The `updateOrders` method is passed
    as a prop to the `ProductOrderEdit` component so the status can be updated when
    a product status is changed.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-marketplace/client/order/ShopOrders.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE72]'
  prefs: []
  type: TYPE_PRE
- en: The ProductOrderEdit component
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `ProductOrderEdit` component takes an order object as a prop, and iterates
    through the order's products array to display only the products purchased from
    the current shop, along with a dropdown to change the status value of each product.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-marketplace/client/order/ProductOrderEdit.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE73]'
  prefs: []
  type: TYPE_PRE
- en: The possible list of status values is fetched from the server when the `ProductOrderEdit`
    component loads and set to state in `statusValues` to be rendered in the dropdown
    as a `MenuItem`.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-marketplace/client/order/ProductOrderEdit.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE74]'
  prefs: []
  type: TYPE_PRE
- en: When an option is selected from the possible status values, the `handleStatusChange`
    method is called to update the orders in state, and also to send a request to
    the appropriate backend API based on the value of the status selected.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-marketplace/client/order/ProductOrderEdit.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE75]'
  prefs: []
  type: TYPE_PRE
- en: The `cancelProduct`, `processCharge`, and `update` fetch methods are defined
    in `api-order.js` to call corresponding APIs in the backend to update a cancelled
    product's stock quantity, to create a charge on the customer's credit card when
    a product is processing, and to update the order with the product status change.
  prefs: []
  type: TYPE_NORMAL
- en: APIs for products ordered
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Allowing sellers to update the status of a product will require the setup of
    four different APIs, including an API to retrieve possible status values. Then
    actual status updates will need APIs to handle updates to the order itself as
    the status is changed, to initiate related actions such as increasing stock quantity
    of a cancelled product, and to create a charge on the customer's credit card when
    a product is being processed.
  prefs: []
  type: TYPE_NORMAL
- en: Get status values
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The possible status values of an ordered product are set as enums in the `CartItem`
    schema, and to show these values as options in the dropdown view, we will set
    up a GET API route at `/api/order/status_values` that retrieves these values.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-marketplace/server/routes/order.routes.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE76]'
  prefs: []
  type: TYPE_PRE
- en: The `getStatusValues` controller method will return the enum values for the
    `status` field from the `CartItem` schema.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-marketplace/server/controllers/order.controller.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE77]'
  prefs: []
  type: TYPE_PRE
- en: We will also set up a `fetch` method in `api-order.js`, this is used in the
    view to make a request to the API route.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-marketplace/client/order/api-order.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE78]'
  prefs: []
  type: TYPE_PRE
- en: Update order status
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When a product's status is changed to any value other than **Processing** and
    **Cancelled**, a PUT request to `'/api/order/status/:shopId'` will directly update
    the order in the database given the current user is the verified owner of the
    shop with the ordered product.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-marketplace/server/routes/order.routes.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE79]'
  prefs: []
  type: TYPE_PRE
- en: The `update` controller method will query the Order collection and find the
    order with the `CartItem` object that matches the updated product, and set the
    `status` value of this matched `CartItem` in the `products` array of the order.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-marketplace/server/controllers/order.controller.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE80]'
  prefs: []
  type: TYPE_PRE
- en: In `api-order.js`, we will add an `update` fetch method to make a call to this
    update API with the required parameters passed from the view.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-marketplace/client/order/api-order.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE81]'
  prefs: []
  type: TYPE_PRE
- en: Cancel product order
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When a seller decides to cancel the order for a product, a PUT request will
    be sent to `/api/order/:shopId/cancel/:productId` so the product stock quantity
    can be increased, and the order updated in the database.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-marketplace/server/routes/order.routes.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE82]'
  prefs: []
  type: TYPE_PRE
- en: To retrieve the product associated with the `productId` parameter in the route,
    we will use the `productByID` product controller method.
  prefs: []
  type: TYPE_NORMAL
- en: The `increaseQuantity` controller method is added to `product.controller.js`.
    It finds the product by the matching ID in the Product collection and increases
    the quantity value by the quantity that was ordered by the customer, now that
    the order for this product has been cancelled.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-marketplace/server/controllers/product.controller.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE83]'
  prefs: []
  type: TYPE_PRE
- en: From the view, we will use a corresponding fetch method, added in `api-order.js`,
    to call the cancel product order API.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-marketplace/client/order/api-order.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE84]'
  prefs: []
  type: TYPE_PRE
- en: Process charge for product
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When a seller changes the status of a product to **Processing**, we will set
    up a backend API to not only update the order but to also create a charge on the
    customer's credit card for the price of the product multiplied by the quantity
    ordered.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-marketplace/server/routes/order.routes.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE85]'
  prefs: []
  type: TYPE_PRE
- en: To retrieve the order associated with the `orderId` parameter in the route,
    we will use the `orderByID` order controller method, which gets the order from
    the Order collection and attaches it to the request object to be accessed by the
    `next` methods, shown as follows.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-marketplace/server/controllers/order.controller.js:`'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE86]'
  prefs: []
  type: TYPE_PRE
- en: This process charge API will receive a PUT request at `/api/order/:orderId/charge/:userId/:shopId`,
    and after successfully authenticating the user will create the charge by calling
    the `createCharge` user controller as discussed earlier in the *Using Stripe for
    payments* section, and then finally update the order with the `update` method.
  prefs: []
  type: TYPE_NORMAL
- en: From the view, we will use the `processCharge` fetch method in `api-order.js`,
    and provide the required route parameter values, credentials, and product details,
    including the amount to charge.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-marketplace/client/order/api-order.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE87]'
  prefs: []
  type: TYPE_PRE
- en: Sellers can view orders received for their products in each of their shops,
    and they can easily update the status of each product ordered, while the application
    takes care of additional tasks, such as updating stock quantity and initiating
    payment. This covers the basic order management features for the MERN Marketplace
    application, which can be extended further as required.
  prefs: []
  type: TYPE_NORMAL
- en: View order details
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'With Order collection and the database access all set up, moving forward it
    is easy to add the features of listing orders for each user, and showing details
    of a single order in a separate view where the user can track the status of each
    ordered product:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/4af78ad1-eb61-4c8b-a32b-a56d7ba0b649.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Following the steps repeated throughout this book, for setting up backend APIs
    to retrieve data and using it in the frontend to construct frontend views, you
    can develop order-related views as desired, taking inspiration from the snapshots
    of these sample views in the MERN Marketplace application code:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/c1282af6-a2af-41c2-8909-5f176615778d.png)'
  prefs: []
  type: TYPE_IMG
- en: The MERN Marketplace application developed in this and [Chapter 6](aadad9b8-c30c-4e0a-8ebd-2ea6635d43bb.xhtml), *Exercising
    New MERN Skills with an Online Marketplace*, by building on the MERN skeleton
    application, covered the crucial features for a standard online marketplace application.
    This, in turn, demonstrated how the MERN stack can be extended to incorporate
    complex features.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we extended the MERN Marketplace application, and explored
    how to add a shopping cart for buyers, a checkout process with credit card payments,
    and order management for the sellers in an online marketplace application.
  prefs: []
  type: TYPE_NORMAL
- en: We discovered how the MERN stack technologies can work well with third-party
    integrations, as we implemented the cart checkout flow, and processed credit card
    charges on ordered products using the tools provided by Stripe for managing online
    payments.
  prefs: []
  type: TYPE_NORMAL
- en: We also unlocked more of what is possible with MERN, such as optimized bulk
    write operations in MongoDB for updating multiple documents in response to a single
    API call. This allowed us to decrease the stock quantities of multiple products
    in one go, such as when a user placed an order for multiple products from different
    stores.
  prefs: []
  type: TYPE_NORMAL
- en: The marketplace features developed in the MERN Marketplace application revealed
    how this stack and structure can be utilized to design and build growing applications
    by adding features that may be simple or more complex in nature.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will take the lessons learned so far in this book, and
    explore more advanced possibilities with MERN as we build a media streaming application
    by extending the MERN skeleton.
  prefs: []
  type: TYPE_NORMAL
