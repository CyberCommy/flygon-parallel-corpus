- en: Preface
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This book came about by circuitous means. In 2013, when we incorporated our
    Norway-based software consultancy and training business *Sixty North*, we were
    courted by *Pluralsight*, a publisher of online video training material, to produce
    Python training videos for the rapidly growing MOOC market. At the time, we had
    no experience of producing video training material, but we were sure we wanted
    to carefully structure our introductory Python content to respect certain constraints.
    For example, we wanted an absolute minimum of forward references since those would
    be very inconvenient for our viewers. We’re both men of words who live by Turing
    Award winner Leslie Lamport’s maxim *“If you’re thinking without writing you only
    think you’re thinking”*, so it was natural for us to attack video course production
    by first writing a script.
  prefs: []
  type: TYPE_NORMAL
- en: In short order our online video course was written, recorded, and published
    by *Pluralsight* as [Python Fundamentals](https://www.pluralsight.com/courses/python-fundamentals),
    to a hugely positive reception which has sustained for several years now. From
    the earliest days we had in mind that the script could form the basis of a book,
    although it’s fair to say we underestimated the effort required to transform the
    content from a good script into a better book.
  prefs: []
  type: TYPE_NORMAL
- en: '*The Python Apprentice* is the result of that transformation. It can be used
    either as a standalone Python tutorial, or as the companion volume to our video
    course, depending on which style of learning suits you best. *The Python Apprentice*
    is the first in a trilogy of three books, comprising in addition [*The Python
    Journeyman*](https://leanpub.com/python-journeyman) and [*The Python Master*](https://leanpub.com/python-master).
    The two later books correspond to our subsequent *Pluralsight* courses [*Python
    - Beyond the Basics*](https://app.pluralsight.com/library/courses/python-beyond-basics/)
    and [*Advanced Python*](https://app.pluralsight.com/library/courses/advanced-python/).'
  prefs: []
  type: TYPE_NORMAL
- en: Errata and Suggestions
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: All the material in this book has been thoroughly reviewed and tested; nevertheless,
    it’s inevitable that some mistakes have crept in. If you do spot a mistake, we’d
    really appreciate it if you’d let us know via the *Leanpub* [Python Apprentice
    Discussion](https://leanpub.com/python-apprentice/feedback) page so we can make
    amends and deploy a new version.
  prefs: []
  type: TYPE_NORMAL
- en: Conventions Used in This Book
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Code examples in this book are shown in a fixed-width text which is colored
    with syntax highlighting:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Some of our examples show code saved in files, and others — such as the one
    above — are from interactive Python sessions. In such interactive cases, we include
    the prompts from the Python session such as the triple-arrow (`>>>`) and triple-dot
    (`...`) prompts. You don’t need to type these arrows or dots. Similarly, for operating
    system shell-commands we will use a dollar prompt (`$`) for Linux, macOS and other
    Unixes, or where the particular operating system is unimportant for the task at
    hand:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: In this case, you don’t need to type the `$` character.
  prefs: []
  type: TYPE_NORMAL
- en: 'For Windows-specific commands we will use a leading greater-than prompt:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Again, there’s no need to type the `>` character.
  prefs: []
  type: TYPE_NORMAL
- en: 'For code blocks which need to be placed in a file, rather than entered interactively,
    we show code without any leading prompts:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: We’ve worked hard to make sure that our lines of code are short enough so that
    each single logical line of code corresponds to a single physical line of code
    in your book. However, the vagaries of publishing e-books to different devices
    and the very genuine need for occasional long lines of code mean we can’t guarantee
    that lines don’t wrap. What we can guarantee, however, is that where a line does
    wrap, the publisher has inserted a backslash character `\` in the final column.
    You need to use your judgement to determine whether this character is legitimate
    part of the code or has been added by the e-book platform.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: If you see a backslash at the end of the line within the above quoted string,
    it is *not* part of the code, and should not be entered.
  prefs: []
  type: TYPE_NORMAL
- en: 'Occasionally, we’ll number lines of code so we can refer to them easily from
    the narrative next. These line numbers should not be entered as part of the code.
    Numbered code blocks look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Sometimes we need to present code snippets which are incomplete. Usually this
    is for brevity where we are adding code to an existing block, and where we want
    to be clear about the block structure without repeating all existing contents
    of the block. In such cases we use a Python comment containing three dots `# ...`
    to indicate the elided code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Here it is implied that some other code already exists within the `Flight` class
    block before the `make_boarding_cards()` function.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, within the text of the book, when we are referring to an identifier
    which is also a function we will use the identifier with empty parentheses, just
    as we did with `make_boarding_cards()` in the preceding paragraph.
  prefs: []
  type: TYPE_NORMAL
