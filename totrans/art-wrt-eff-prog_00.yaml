- en: Preface
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The art of high-performance programming is making a comeback. I started programming
    in the days when the programmer had to know where every bit of data went (sometimes
    quite literally – with switches on the front panel). Now, computers have more
    than enough power for everyday tasks. Sure, there have always been domains where
    there is never enough computing power. But most programmers could get away with
    writing inefficient code. This is not a bad thing, by the way: free from performance
    constraints, the programmer could focus on making the code better in other ways.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The very first thing this book explains, then, is why more and more programmers
    are forced to pay attention to performance and efficiency again. This will set
    the tone for the entire book because it defines the methodology we will be using
    in subsequent chapters: knowledge about performance must ultimately come from
    measurements, and every performance-related claim must be supported by data.'
  prefs: []
  type: TYPE_NORMAL
- en: 'There are five components, five elements that together determine the performance
    of a program. First, we delve into the details and explore the low-level foundation
    of all things performance: our computing hardware (no switches – promise, those
    days are gone). From the individual components – processors and memory – we work
    our way up to multiprocessor computing systems. Along the way, we learn about
    the memory model, the cost of data sharing, and even lock-free programming.'
  prefs: []
  type: TYPE_NORMAL
- en: The second component of high-performance programming is an efficient use of
    the programming language. It is at this point that the book becomes much more
    C++-specific (other languages have their own *favorite* inefficiencies). Following
    closely is the third element, the skill to help the compiler improve the performance
    of your programs.
  prefs: []
  type: TYPE_NORMAL
- en: 'The fourth component is the design. Arguably, it should be the first one: if
    the design is not done with performance as one of its explicit goals, it is almost
    impossible to add good performance later as an afterthought. We study designing
    for performance last, however, since this is a high-level concept and it brings
    together all the knowledge we will have acquired earlier.'
  prefs: []
  type: TYPE_NORMAL
- en: The final, fifth element of high-performance programming is you, the reader.
    Your knowledge and skill will ultimately determine the result. To help you learn,
    the book includes many examples that can be used for hands-on exploration and
    self-study. The learning does not have to stop after you turn over the last page.
  prefs: []
  type: TYPE_NORMAL
- en: Who is this book for?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This book is for experienced developers and programmers who work on performance-critical
    projects and want to learn different techniques to improve the performance of
    their code. Programmers who belong to computer modeling, algorithmic trading,
    gaming, bioinformatics, physics-based simulations, computer-aided design, computational
    genomics, or computational fluid dynamics communities can learn various techniques
    from this book and apply them in their domain of work.
  prefs: []
  type: TYPE_NORMAL
- en: Although this book uses the C++ language, the concepts demonstrated in the book
    can be easily transferred or applied to other compiled languages such as C, C#,
    Java, Rust, Go, and more.
  prefs: []
  type: TYPE_NORMAL
- en: What this book covers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '[*Chapter 1*](B16229_01_Epub_AM.xhtml#_idTextAnchor014), *Introduction to Performance
    and Concurrency*, talks about the reasons we care about the performance of programs,
    specifically about the reasons why good performance doesn''t *just happen*. We
    learn why, in order to achieve the best performance, or, sometimes, even adequate
    performance, it is important to understand the different factors affecting performance
    and the reasons for a particular behavior of the program, be it fast or slow execution.'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 2*](B16229_02_Epub_AM.xhtml#_idTextAnchor026), *Performance Measurements*,
    is all about measurements. Performance is often non-intuitive, and all decisions
    involving efficiency, from design choices to optimizations, should be guided by
    reliable data. The chapter describes different types of performance measurements,
    explains how they differ and when they should be used, and teaches how to properly
    measure performance in different situations.'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 3*](B16229_03_Epub_AM.xhtml#_idTextAnchor047), *CPU Architecture,
    Resources, and Performance Implications*, helps us begin the study of the hardware
    and how to use it efficiently in order to achieve optimum performance. This chapter
    is dedicated to learning about CPU resources and capabilities, the optimal ways
    to use them, the more common reasons for not making the best use of CPU resources,
    and how to resolve them.'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 4*](B16229_04_Epub_AM.xhtml#_idTextAnchor064), *Memory Architecture
    and Performance*, helps us learn about modern memory architectures, their inherent
    weaknesses, and the ways to counter or at least hide these weaknesses. For many
    programs, the performance is entirely dependent on whether the programmer takes
    advantage of the hardware features designed to improve memory performance, and
    this chapter teaches the necessary skills to do so.'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 5*](B16229_05_Epub_AM.xhtml#_idTextAnchor084), *Threads, Memory,
    and Concurrency*, helps us continue our study of the memory system and its effects
    on performance, but now we extend our study to the domain of multi-core systems
    and multithreaded programs. It turns out that the memory, which was already the
    "long pole" of performance, is even more of a problem when we add concurrency.
    While the fundamental limits imposed by the hardware cannot be overcome, most
    programs aren''t performing even close to these limits, and there is a lot of
    room for a skillful programmer to improve the efficiency of their code; this chapter
    gives the reader the necessary knowledge and tools to do so.'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 6*](B16229_06_Epub_AM.xhtml#_idTextAnchor103), *Concurrency and Performance*,
    helps you learn about developing high-performance concurrent algorithms and data
    structures for thread-safe programs. On the one hand, to take full advantage of
    concurrency, we must take a high-level view of the problem and the solution strategy:
    data organization, work partitioning, and sometimes even the definition of what
    constitutes a solution are the choices that critically affect the performance
    of the program. On the other hand, as we have seen in the last chapter, performance
    is greatly impacted by low-level factors such as the arrangement of the data in
    the cache, and even the best design can be ruined by poor implementation.'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 7*](B16229_07_Epub_AM.xhtml#_idTextAnchor117), *Data Structures for
    Concurrency*, explains the nature of data structures in concurrent programs and
    how the familiar definitions of data structures such as "stack" and "queue" mean
    something else when the data structure is used in a multithreaded context.'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 8*](B16229_08_Epub_AM.xhtml#_idTextAnchor138), *Concurrency in C++*,
    describes the features for concurrent programming that were added to the language
    recently in the C++17 and C++20 standards. While it is too early to talk about
    the best practices when using these features for optimum performance, we can describe
    what they do, as well as the current state of compiler support.'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 9*](B16229_09_Epub_AM.xhtml#_idTextAnchor149), *High-Performance
    C++*, switches our focus from the optimal use of the hardware resources to the
    optimal application of a particular programming language. While everything we
    have learned so far can be applied, usually quite straightforwardly, to any program
    in any language, this chapter deals with C++ features and idiosyncrasies. The
    reader will learn which features of the C++ language are likely to cause performance
    problems and how to avoid them. The chapter will also cover the very important
    matter of compiler optimizations and how the programmer can help the compiler
    to generate more efficient code.'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 10*](B16229_10_Epub_AM.xhtml#_idTextAnchor167), *Compiler Optimizations
    in C++*, covers compiler optimizations and how the programmer can help the compiler
    to generate more efficient code.'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 11*](B16229_11_Epub_AM.xhtml#_idTextAnchor176), *Undefined Behavior
    and Performance*, has a dual focus. On the one hand, it explains the dangers of
    the kinds of undefined behavior that programmers often ignore when attempting
    to squeeze the most performance from their code. On the other hand, it explains
    how we can take advantage of undefined behavior to improve performance and how
    to properly specify and document such situations. Overall, the chapter offers
    a somewhat usual but more relevant way to understand the issue of undefined behavior
    compared to the usual "anything can happen."'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 12*](B16229_12_Epub_AM.xhtml#_idTextAnchor184), *Design for Performance*,
    reviews all the performance-related factors and features we have learned in this
    book and explores the subject of how the knowledge and understanding we have gained
    should influence the design decisions we make when developing a new software system
    or rearchitecting an existing one.'
  prefs: []
  type: TYPE_NORMAL
- en: To get the most out of this book
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The book, except the chapters specific to C++ efficiency, does not rely on any
    esoteric C++ knowledge. All examples are in C++, but the lessons on hardware performance,
    efficient data structures, and design for performance apply to any programming
    language. To follow the examples, you will need at least an intermediate knowledge
    of C++.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B16229_Preface_Table.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Each chapter mentions the additional software you need to compile and execute
    the examples, if any. For the most part, any modern C++ compiler can be used with
    the examples, except for [*Chapter 8*](B16229_08_Epub_AM.xhtml#_idTextAnchor138),
    *Concurrency in C++*, which requires the latest versions to work through the section
    on coroutines.
  prefs: []
  type: TYPE_NORMAL
- en: '**If you are using the digital version of this book, we advise you to type
    the code yourself or access the code from the book''s GitHub repository (a link
    is available in the next section). Doing so will help you avoid any potential
    errors related to the copying and pasting of code.**'
  prefs: []
  type: TYPE_NORMAL
- en: Download the example code files
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You can download the example code files for this book from GitHub at [https://github.com/PacktPublishing/The-Art-of-Writing-Efficient-Programs](https://github.com/PacktPublishing/The-Art-of-Writing-Efficient-Programs).
    If there's an update to the code, it will be updated in the GitHub repository.
  prefs: []
  type: TYPE_NORMAL
- en: We have other code bundles from our rich catalog of books and videos available
    at [https://github.com/PacktPublishing/](https://github.com/PacktPublishing/).
    Check them out!
  prefs: []
  type: TYPE_NORMAL
- en: Download the color images
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We also provide a PDF file that has color images of the screenshots and diagrams
    used in this book. You can download it here: [https://static.packt-cdn.com/downloads/9781800208117_ColorImages.pdf](_ColorImages.pdf).'
  prefs: []
  type: TYPE_NORMAL
- en: Conventions used
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are a number of text conventions used throughout this book.
  prefs: []
  type: TYPE_NORMAL
- en: '`Code in text`: Indicates code words in the text, database table names, folder
    names, filenames, file extensions, pathnames, dummy URLs, user input, and Twitter
    handles. Here is an example: "Of note is a new feature that allows to portably
    determine the cache line size for the L1 cache, `std::hardware_destructive_interference_size`
    and `std::hardware_constructive_interference_size`."'
  prefs: []
  type: TYPE_NORMAL
- en: 'A block of code is set as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Any command-line input or output is written as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '**Bold**: Indicates a new term, an important word, or words that you see onscreen.
    For instance, words in menus or dialog boxes appear in **bold**. Here is an example:
    "When **CPU1** sees the result of the atomic write operation executed by **CPU0**
    with the release memory order, it is guaranteed that the state of the memory,
    as seen by **CPU1**, already reflects all operations executed by **CPU0** before
    this atomic operation."'
  prefs: []
  type: TYPE_NORMAL
- en: Tips or important notes
  prefs: []
  type: TYPE_NORMAL
- en: Appear like this.
  prefs: []
  type: TYPE_NORMAL
- en: Get in touch
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Feedback from our readers is always welcome.
  prefs: []
  type: TYPE_NORMAL
- en: '`customercare@packtpub.com` and mention the book title in the subject of your
    message.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Errata**: Although we have taken every care to ensure the accuracy of our
    content, mistakes do happen. If you have found a mistake in this book, we would
    be grateful if you would report this to us. Please visit [www.packtpub.com/support/errata](http://www.packtpub.com/support/errata)
    and fill in the form.'
  prefs: []
  type: TYPE_NORMAL
- en: '`copyright@packt.com` with a link to the material.'
  prefs: []
  type: TYPE_NORMAL
- en: '**If you are interested in becoming an author**: If there is a topic that you
    have expertise in and you are interested in either writing or contributing to
    a book, please visit [authors.packtpub.com](http://authors.packtpub.com).'
  prefs: []
  type: TYPE_NORMAL
- en: Share Your Thoughts
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Once you've read *The Art of Writing Efficient Programs*, we'd love to hear
    your thoughts! Please click here to go straight to the Amazon review page for
    this book and share your feedback.
  prefs: []
  type: TYPE_NORMAL
- en: Your review is important to us and the tech community and will help us make
    sure we're delivering excellent quality content.
  prefs: []
  type: TYPE_NORMAL
