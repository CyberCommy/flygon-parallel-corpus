- en: Notes
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '##'
  prefs: []
  type: TYPE_NORMAL
- en: 1Though more and more projects are starting to be “primarily Python 3” or even
    “Python 3 only”.[↩](chap04.xhtml#fnref-established)
  prefs: []
  type: TYPE_NORMAL
- en: 2We don’t cover *regular expressions* – also known as *regexes* – in this book.
    See the documentation for the Python Standard Library `re` module for more information.
    [https://docs.python.org/3/library/re.html](https://docs.python.org/3/library/re.html)[↩](chap07.xhtml#fnref-regex)
  prefs: []
  type: TYPE_NORMAL
- en: 3Technically modules don’t have to be simple source code files, but for the
    purposes of this book that is a sufficient definition.[↩](chap08.xhtml#fnref-modules-as-files)
  prefs: []
  type: TYPE_NORMAL
- en: 4Technically some of these compiled languages *do* provide mechanisms for defining
    functions dynamically at runtime. However, these methods are by far the exception
    rather than the rule in almost all situations.[↩](chap08.xhtml#fnref-dynamic-functions)
  prefs: []
  type: TYPE_NORMAL
- en: 5Python code is actually compiled to byte-code, so in that sense Python has
    a compiler. But the compiler is doing substantially different kinds of work than
    what you might be used to from popular compiled, statically-typed languages.[↩](chap08.xhtml#fnref-no-compiler)
  prefs: []
  type: TYPE_NORMAL
- en: 6You’ll notice that here we’ve referred to the *object reference* with the name
    `x` as `x`. This is admittedly a bit sloppy since, of course, `x` will generally
    mean *the object referred to by the object reference with the name `x`*. But that’s
    a mouthful and a bit overly pedantic. Generally speaking, the context of the use
    of reference names will be sufficient to tell you whether we mean the object or
    the reference.[↩](chap09.xhtml#fnref-reference-names)
  prefs: []
  type: TYPE_NORMAL
- en: 7Garbage collection is an advanced topic that we won’t cover in this book. In
    short, though, it’s the system by which Python deallocates and reclaims resources
    (i.e. objects) which it determines are no longer in use.[↩](chap09.xhtml#fnref-garbage-collection)
  prefs: []
  type: TYPE_NORMAL
- en: 8Since assigning a list reference to another name doesn’t copy the list, you
    may be wondering how you *could* make copy if you wanted. This requires other
    techniques which we’ll look at later when we cover lists in more detail.[↩](chap09.xhtml#fnref-copying-lists)
  prefs: []
  type: TYPE_NORMAL
- en: 9Note, however, that Python does not enforce this behavior. It is entirely possible
    to create an object which reports that it is not value-identical to itself. We’ll
    look at how to do this — should you for some reason feel the urge — in later chapters.[↩](chap09.xhtml#fnref-non-identical-objects)
  prefs: []
  type: TYPE_NORMAL
- en: 10Though there’s no universally accepted terminology, you’ll often see the term
    *parameters* or *formal parameters* used to mean the names declared at the function
    definition. Likewise, the term *arguments* is often used to mean the actual objects
    passed into a function (and, thus, bound to the parameters). We’ll use this terminology
    as needed throughout this book.[↩](chap09.xhtml#fnref-parameters-vs-arguments)
  prefs: []
  type: TYPE_NORMAL
- en: 11And this behavior is part of the syntax implementation, not the type system.[↩](chap09.xhtml#fnref-not-the-type-system)
  prefs: []
  type: TYPE_NORMAL
- en: 12Back in Python 2 days `range()` was a function which returned a list. The
    Python 3 version of `range` is much more efficient, useful and powerful.[↩](chap10.xhtml#fnref-range)
  prefs: []
  type: TYPE_NORMAL
- en: '13This, of course, brings to mind the classic joke: The two hardest problems
    in programming are naming, cache coherence, and off-by-one errors.[↩](chap10.xhtml#fnref-one-off)'
  prefs: []
  type: TYPE_NORMAL
- en: 14Arguably, it’s poor design to have a module containing functions of the same
    name, because of this issue.[↩](chap10.xhtml#fnref-overwrite)
  prefs: []
  type: TYPE_NORMAL
- en: 15We cover the iterable protocol in detail later in this chapter.[↩](chap12.xhtml#fnref-cover-iterable-protocol-later)
  prefs: []
  type: TYPE_NORMAL
- en: 16Well, they can, but recall that iterating over a dictionary yields only the
    keys![↩](chap12.xhtml#fnref-dictionary-sources)
  prefs: []
  type: TYPE_NORMAL
- en: 17We often just use the term *generator* to refer to generator functions, though
    sometimes it may be necessary to distinguish generator *functions* from generator
    *expressions*, which we cover later.[↩](chap12.xhtml#fnref-just-generator)
  prefs: []
  type: TYPE_NORMAL
- en: 18The authors are sworn by sacred oath never to use either Fibonacci or Quicksort
    implementations in demonstrations or exercises.[↩](chap12.xhtml#fnref-no-fibonacci)
  prefs: []
  type: TYPE_NORMAL
- en: 19This has nothing whatsoever to do with the order in which you should watch
    the episodes of Star Wars. If that’s what you’re looking for, might we suggest
    [Machete Order](http://www.nomachetejuggling.com/2011/11/11/the-star-wars-saga-suggested-viewing-order/).[↩](chap12.xhtml#fnref-machete-order)
  prefs: []
  type: TYPE_NORMAL
- en: 20In fact, it is possible to change the class of an object at runtime, although
    this is an advanced topic, and the technique is only rarely used.[↩](chap13.xhtml#fnref-fixed)
  prefs: []
  type: TYPE_NORMAL
- en: 21It’s generally unhelpful to think about the *destruction* of objects in Python.
    Better to think of objects becoming unreachable.[↩](chap13.xhtml#fnref-unreachable)
  prefs: []
  type: TYPE_NORMAL
- en: 22The *formal* arguments of a function are the arguments listed in the function
    *definition*.[↩](chap13.xhtml#fnref-formal)
  prefs: []
  type: TYPE_NORMAL
- en: 23The *actual* arguments of a function are the arguments listed in a function
    *call*.[↩](chap13.xhtml#fnref-actual)
  prefs: []
  type: TYPE_NORMAL
- en: 24Nor any language, for that matter.[↩](chap14.xhtml#fnref-detecting-encoding)
  prefs: []
  type: TYPE_NORMAL
- en: 25You can get the full details of the with-statements syntactic equivalence
    in [PEP 343](https://www.python.org/dev/peps/pep-0343/).[↩](chap14.xhtml#fnref-see-pep-343)
  prefs: []
  type: TYPE_NORMAL
- en: 26You can learn all about the BMP format [here](https://en.wikipedia.org/wiki/BMP_file_format).[↩](chap14.xhtml#fnref-bmp-details)
  prefs: []
  type: TYPE_NORMAL
- en: 27Like, for example, *sequence* protocol is for tuple-like-objects.[↩](chap14.xhtml#fnref-like-sequence-protocol)
  prefs: []
  type: TYPE_NORMAL
- en: 28**E**asier to **A**sk **F**orgiveness Than **P**ermission[↩](chap14.xhtml#fnref-EAFP)
  prefs: []
  type: TYPE_NORMAL
- en: 29Test-driven development, or TDD, is a form of software development where tests
    are written first, i.e. before you write the actual functionality to be tested.
    This may seem backwards at first, but it can be a surprisingly powerful technique.
    You can learn more about TDD [here](https://en.wikipedia.org/wiki/Test-driven_development).[↩](chap15.xhtml#fnref-test-driven-development)
  prefs: []
  type: TYPE_NORMAL
- en: 30Note that we don’t actually try to test any functionality yet. This is just
    the initial skeleton of our test suite that lets us verify that the test method
    executes.[↩](chap15.xhtml#fnref-no-actual-test)
  prefs: []
  type: TYPE_NORMAL
- en: 31A tenet of TDD is that your tests should fail before they pass, and you should
    only ever write enough implementation code to make you tests pass. In this way,
    your tests stand as a complete description how your code should behave.[↩](chap15.xhtml#fnref-tdd-fail-edit-pass)
  prefs: []
  type: TYPE_NORMAL
- en: 32You may have noticed that the `setUp()` and `tearDown()` method names aren’t
    in line with what PEP 8 prescribes. This is because the `unittest` module predates
    those parts of PEP 8 which specify the convention of function names being in lower
    case with underscores. There are several such cases in the Python standard library
    but most new Python code follows the PEP 8 style.[↩](chap15.xhtml#fnref-unittest-naming-conventions)
  prefs: []
  type: TYPE_NORMAL
- en: 33If we were strictly interpreting TDD here, this amount of implementation would
    have been too much. To make our existing test pass, we didn’t need to actually
    implement line counting; we just needed to return the value 4\. Subsequent tests
    would have then forced us to continually “update” our implementation as they described
    a more complete version of the analysis algorithm. We think you’ll agree that
    such a dogmatic approach would be inappropriate here and, frankly, in real development
    as well.[↩](chap15.xhtml#fnref-bypassing-tdd)
  prefs: []
  type: TYPE_NORMAL
- en: 34Notice that we can use `print` with or without parentheses. Don’t be alarmsed
    – we haven’t regressed to Python 2\. In this context `print` is a PDB *command*
    rather than a Python 3 *function*.[↩](chap16.xhtml#fnref-pdb_commands)
  prefs: []
  type: TYPE_NORMAL
