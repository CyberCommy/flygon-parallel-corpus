- en: Button and Panel Components
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, initially, we will cover various Button components such as
    radio, split, toggle, and select buttons, and later move to various Panel components,
    such as Toolbar, basic Panel, FieldSet, Accordion, and tabbed view. The user input
    will be taken in multiple ways, among which Button input is one of the best options;
    on the other hand, Panel components act as container components, which allow grouping
    of other native HTML or PrimeNG components. Each feature of PrimeNG--enhanced
    Buttons and Panel components cover many real-time use case needs. Various settings
    to configure Button and Panel components are detailed in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Enhanced Button, RadioButton, and SplitButton
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Selecting value by ToggleButton and SelectButton
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Grouping buttons with Toolbar
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Arranging your view with Panels and FieldSets
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Vertical stacked panels with Accordion
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Grouping content with tabs in TabView
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Enhanced Button, RadioButton, and SplitButton
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Buttons are frequently used elements for any web design. PrimeNG extended plain
    Button behavior with awesome features.
  prefs: []
  type: TYPE_NORMAL
- en: Button
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The Button component is an extension to standard input element for user interactions
    with icons and theming. The `pButton` directive makes a plain HTML button a PrimeNG-enhanced
    button. A basic example of the Button component with defined label text would
    be written as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'The type of the Button should be `button` type. The following screenshot shows
    a snapshot result of the basic Button example:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/2d068b5c-90ca-4d4e-9a40-27bcc531243e.png)'
  prefs: []
  type: TYPE_IMG
- en: The Button component supports one event callback named `click`, which will be
    invoked on click of the Button element. Remember that Button's click event is
    basically from Angular one not specific to PrimeNG.
  prefs: []
  type: TYPE_NORMAL
- en: Icons and severity
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The Button component is more useful with icons and severity properties. The
    `icon` attribute is used to represent font-awesome icons on top of it. Default
    icon position is the left-hand position. This can be customized using the `iconPos`
    attribute with valid values as `left` and `right`. In order to display only one
    icon, leave the label as undefined. An example of the Button components with various
    combinations of icon and label would be written as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'In the preceding example, Buttons are defined as without a label, with the
    label, and right-positioned icon with the label in a respective order. The following
    screenshot shows a snapshot result of the Button with icons as an example:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/ffa0c0cc-81aa-4f86-9844-23bd99596668.png)'
  prefs: []
  type: TYPE_IMG
- en: 'To differentiate different severity levels of user actions, PrimeNG provides
    five different classes, that is, these style classes are different from regular
    theme colors:'
  prefs: []
  type: TYPE_NORMAL
- en: '`ui-button-secondary`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ui-button-success`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ui-button-info`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ui-button-warning`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ui-button-danger`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following screenshot shows a snapshot result of a Button with all severity
    cases (compared to regular theme class) as an example:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/655568e7-cd98-454c-b7f2-5636cc8aa024.png)'
  prefs: []
  type: TYPE_IMG
- en: The user interactions are prevented using the regular `disabled` attribute.
  prefs: []
  type: TYPE_NORMAL
- en: The complete demo application with instructions is available on GitHub at
  prefs: []
  type: TYPE_NORMAL
- en: '[https://github.com/ova2/angular-development-with-primeng/tree/master/chapter4/button.](https://github.com/ova2/angular-development-with-primeng/tree/master/chapter4/button)'
  prefs: []
  type: TYPE_NORMAL
- en: RadioButton
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'RadioButton is an extension to a standard radio button element with skinning
    capabilities to opt for only one value at a time. The two-way binding is provided
    through the `ngModel` directive, which enables default values as either checked
    or unchecked (preselection). A basic example of a RadioButton component with a
    defined label text is written as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'In the preceding example, all radio buttons are mapped to the same group (`name="group1"`)
    in order to work as a mutual exclusive radio group. The following screenshot shows
    a snapshot result of the radio button example:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/e0632ea3-9ad2-4d06-8bab-5e67ed039096.png)'
  prefs: []
  type: TYPE_IMG
- en: The radio button component supports one event callback named `onClick`, which
    will be invoked on the click of a radio button element. The `label` attribute
    provides a label text for the radio button. The label is also clickable and selects
    the value. The label components associated with the radio button need to trigger
    the focus of input while click on it, this can be achieved with the `inputId`
    attribute.
  prefs: []
  type: TYPE_NORMAL
- en: The complete demo application with instructions is available on GitHub at
  prefs: []
  type: TYPE_NORMAL
- en: '[https://github.com/ova2/angular-development-with-primeng/tree/master/chapter4/radio-button.](https://github.com/ova2/angular-development-with-primeng/tree/master/chapter4/radio-button)'
  prefs: []
  type: TYPE_NORMAL
- en: SplitButton
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'SplitButton groups a collection of menu items in an overlay with a default
    command button. This button uses a common menu model API to define its items.
    Hence, the split button is a combination of button and menu components. A basic
    example of SplitButton component with defined label text would be written as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'The label is applied only for the default command button. The following screenshot
    shows a snapshot result of the split button example:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/940522dc-9797-4f69-ba74-656b4ed031fa.png)'
  prefs: []
  type: TYPE_IMG
- en: The split button component supports one event callback named `onClick`, which
    will be invoked on the click of the default button element.
  prefs: []
  type: TYPE_NORMAL
- en: PrimeNG 4.1 provided `appendTo` the option which provides customization over
    where the overlay would be appended.
  prefs: []
  type: TYPE_NORMAL
- en: Icons and theming
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'There are many options to customize the plain behavior of the split button.
    The icons can be applied for the associated default command button and menu items
    separately using the `icon` property. The icons are aligned to the left side by
    default, but this can be applied to the right side as well, using the `iconPos`
    property, whereas the skinning behavior of component and overlay are modified
    through the `style`, `styleClass`, `menuStyle`, and `menuStyleClass` class properties.
    A basic example of the SplitButton component with the defined label text would
    be written as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'In the preceding example, the overlay menu default styles are changed with
    the help of the `menuStyleClass` property. For example, in this case, the default
    width of the overlay is changed by setting the `menuStyleClass` class name as
    shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'The following screenshot shows a snapshot result of the split button example:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/9a104867-c87c-4b6c-affe-709d6d27fe0a.png)'
  prefs: []
  type: TYPE_IMG
- en: In the preceding snapshot, the split button is customized with icons, the create
    command button icon is aligned to the right side, and the width of the overlay
    increased to accommodate both icons and text.
  prefs: []
  type: TYPE_NORMAL
- en: The complete demo application with instructions is available on GitHub at
  prefs: []
  type: TYPE_NORMAL
- en: '[https://github.com/ova2/angular-development-with-primeng/tree/master/chapter4/split-button](https://github.com/ova2/angular-development-with-primeng/tree/master/chapter4/split-button).'
  prefs: []
  type: TYPE_NORMAL
- en: Selecting a value with ToggleButton and SelectButton
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'ToggleButton provides a way to select a Boolean value using a button. The `ngModel`
    directive is used to define a two-way data binding to a Boolean property. That
    is, preselection of the toggle button is achieved by enabling the Boolean property.
    A basic example of ToggleButton usage would be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'The following screenshot shows a snapshot result of the basic example:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/fbd75010-8282-4eaa-9657-b691ed004ba9.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The ToggleButton also provided customized options such as `onLabel`, `offLabel`,
    `onIcon`, and `offIcon` over default labels and icons. The label components associated
    with the toggle button need to trigger the focus of button while clicking on the
    label, this can be achieved with the `inputId` attribute. The customized toggle
    button with labels, icons, and events would be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'In the preceding example, all kinds of font-awesome icons can be used for the
    `icon` attributes. The following screenshot shows a snapshot result of the customized
    example:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/c55958c7-703a-4b2a-a64d-a370493a03ba.png)'
  prefs: []
  type: TYPE_IMG
- en: The user is notified of user actions using the `onChange` event. At the same
    time, user interactions are prevented using the `disabled` property.
  prefs: []
  type: TYPE_NORMAL
- en: SelectButton
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The SelectButton component is used to choose single or multiple items from
    a list in the form of buttons. Each item in the list of options is defined as
    the `SelectItem` interface with a label-value pair properties. The options are
    binding through the `ngModel` property with a two-way binding, which results in
    the default selection based on the backend component data. A basic example of
    the select button usage would be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'In the preceding example, all the Prime libraries are collected as an array
    for the `options` property. The following screenshot shows a snapshot result of
    the select button example:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/472a7106-967d-4f86-b4d4-ab8f3273833e.png)'
  prefs: []
  type: TYPE_IMG
- en: In the preceding example, only one item is selected at a time (single selection)
    but there is also a possibility to select multiple items using the `multiple`
    property (that is, `multiple="true"`). In this scenario, the selected array list
    should not point to a null or undefined value.
  prefs: []
  type: TYPE_NORMAL
- en: The select button components support one event callback named `onChange`, which
    will be invoked on the click of the default button element.
  prefs: []
  type: TYPE_NORMAL
- en: 'The complete demo application with instructions is available on GitHub:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://github.com/ova2/angular-development-with-primeng/tree/master/chapter4/togglebutton](https://github.com/ova2/angular-development-with-primeng/tree/master/chapter4/togglebutton)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://github.com/ova2/angular-development-with-primeng/tree/master/chapter4/selectbutton](https://github.com/ova2/angular-development-with-primeng/tree/master/chapter4/selectbutton)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Grouping buttons with Toolbar
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Toolbar is a grouping or container component for buttons and other web resources.
    The Toolbar content is wrapped in two `div` elements, one for aligning content
    on the left-hand side using `.ui-toolbar-group-left` class and another one for
    aligning content on the right-hand side using the `.ui-toolbar-group-right` class.
    An example of the Toolbar component with different buttons, input controls, and
    text content would be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'The following screenshot shows a snapshot result of the Toolbar as an example:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/941297a2-251d-4c2f-a16f-fbe77d4c6492.png)'
  prefs: []
  type: TYPE_IMG
- en: In the preceding snapshot, the commonly used Toolbar buttons are placed on left-hand
    side and secondary (or additional information) placed on the right-hand side.
    The skinning features are provided through the `style` and `styleClass` attributes.
  prefs: []
  type: TYPE_NORMAL
- en: The complete demo application with instructions is available on GitHub at
  prefs: []
  type: TYPE_NORMAL
- en: '[https://github.com/ova2/angular-development-with-primeng/tree/master/chapter4/toolbar](https://github.com/ova2/angular-development-with-primeng/tree/master/chapter4/toolbar).'
  prefs: []
  type: TYPE_NORMAL
- en: Arranging your view with Panels and FieldSets
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Most websites and dashboards need grouping or container components to highlight
    title and description. PrimeNG offers many variations of container components.
  prefs: []
  type: TYPE_NORMAL
- en: Panel
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'As a generic grouping component for web content, Panel has features such as
    toggling and custom content. A basic definition of the Panel would be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding definition of the Panel will display PrimeNG details inside the
    container as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/29c6545e-9907-41bc-a3d9-ec4ac4673208.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The Panel is going to be more user friendly, with toggleable (`toggleable="true"`)
    and custom header content features. The toggleable feature defines the content
    as either expanded or collapsed. The initial state of the Panel content (expanded
    or collapsed) defined with the `collapsed` attribute; by default, the content
    section will be expanded, whereas the customized header and footer is defined
    through the `p-header` and `p-footer` tags which accepts text, images, icons,
    and many more. For example, the customized header with list of PrimeNG resources
    in the form of drop-down would be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/a2425719-c412-4575-bb70-c9768ecd7ba9.png)'
  prefs: []
  type: TYPE_IMG
- en: We can catch the user actions before toggling and after toggling using `onBeforeToggle`
    and `onAfterToggle` callbacks.
  prefs: []
  type: TYPE_NORMAL
- en: FieldSet
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'FieldSet is a grouping component with a content toggle feature. At the top,
    legend defines a caption and draws a box around the body content. The FieldSet
    example with `toggleable` feature would be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding definition of the FieldSet will be displayed as shown in the
    following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/fa2b66d1-e871-473e-9049-5d1d0762253a.png)'
  prefs: []
  type: TYPE_IMG
- en: Similar to the Panel component, FieldSet provides a custom legend through the
    `p-header` attribute (that is, the customized header content).
  prefs: []
  type: TYPE_NORMAL
- en: The FieldSet caption text is managed by the `legend` property, whereas toggle
    features are controlled by `toggleable` and `collapsed` attributes. There are
    two event callbacks named `onBeforeToggle` and `onAfterToggle` available for any
    custom logic implementation.
  prefs: []
  type: TYPE_NORMAL
- en: 'The complete demo application with instructions is available on GitHub:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://github.com/ova2/angular-development-with-primeng/tree/master/chapter4/panel](https://github.com/ova2/angular-development-with-primeng/tree/master/chapter4/panel)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://github.com/ova2/angular-development-with-primeng/tree/master/chapter4/fieldset](https://github.com/ova2/angular-development-with-primeng/tree/master/chapter4/fieldset)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Vertical stacked panels with Accordion
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Accordion is a container component that provides the ability to group contents
    in the form of multiple tabs. The content can be text, images, or any other components.
    All the tab contents are stacked in a vertical order. A basic definition of the
    Accordion component with different versions of Angular details would be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding Accordion will be displayed with vertical panels as shown in
    the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/4ad75ae0-322c-4fca-807b-815bc554337d.png)'
  prefs: []
  type: TYPE_IMG
- en: In the preceding simple example, the Accordion will display the tab contents
    one at a time. There is a provision in the component to display multiple tab contents
    by enabling the `multiple` attribute. The Accordion can be customized with powerful
    features such as customized headers, tab events, default selected tabs, and disabled
    behavior.
  prefs: []
  type: TYPE_NORMAL
- en: 'The customized definition of the Accordion component would be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'In the preceding example, the customized header is created with the `p-header`
    tag, which consists of Angular logos and text content. The Accordion will be displayed
    with customized advanced features as shown in the following image:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/6a6eb8c2-0a37-4dee-84c0-ba46a81007cb.png)'
  prefs: []
  type: TYPE_IMG
- en: The Accordion component supports two event callbacks named `onOpen` and `onClose`,
    which invoked while opening and closing the tabs, respectively.
  prefs: []
  type: TYPE_NORMAL
- en: PrimeNG 4.1 release introduced the `activeIndex` property, which defines the
    active tab or an array of indexes to change selected tab programmatically. For
    example, `[activeIndex]="0,1"`. The complete demo application with instructions
    is available on GitHub at
  prefs: []
  type: TYPE_NORMAL
- en: '[https://github.com/ova2/angular-development-with-primeng/tree/master/chapter4/accordion](https://github.com/ova2/angular-development-with-primeng/tree/master/chapter4/accordion).'
  prefs: []
  type: TYPE_NORMAL
- en: Grouping content with tabs in TabView
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'TabView is a tabbed Panel component to group content in the form of vertical
    and horizontal tabs. The default TabView will display the tabs in horizontal orientation
    and only one tab can be selected at a time to view the content. A basic definition
    of the TabView component would be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding TabView will be displayed with horizontal panels as shown in
    the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/773c11f7-febc-43f3-ab45-40457f2dc336.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Each tab is represented with `p-tabPanel`. The orientation of the tabs can
    be altered using the `orientation` attribute. It supports four different orientations:
    `top`, `bottom`, `left`, and `right`. `Top` is the default orientation.'
  prefs: []
  type: TYPE_NORMAL
- en: The component also supports various other advanced features such as the `closable`
    tabs (`closable="true"`), events (`onChange` to invoke on tab change, `onClose`
    to invoke on tab close), default selection using the `selection` attribute, and
    disable the tabs using the `disabled` attribute.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `onChange` event object exposes two attributes which are accessible in
    the component class:'
  prefs: []
  type: TYPE_NORMAL
- en: '| `onChange` |'
  prefs: []
  type: TYPE_TB
- en: '`event.originalEvent`: Native click event'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`event.index`: Index of the selected tab'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'The `onClose` event object exposes three attributes, which are accessible in
    the component class:'
  prefs: []
  type: TYPE_NORMAL
- en: '| `onClose` |'
  prefs: []
  type: TYPE_TB
- en: '`event.originalEvent`: Native click event'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`event.index`: Index of the closed tab'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`event.close`: Callback to actually close the tab, only available if `controlClose`
    is enabled'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'A customized definition of the TabView component would be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding TabView will be displayed as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/7e400ef3-fe7a-427d-9b0d-f2f09e4ba243.png)'
  prefs: []
  type: TYPE_IMG
- en: Remember that only the `orientation`, `activeIndex`, `style`, and `styleClass`
    properties applied for the TabView element whereas all other attributes need to
    be defined for the tab Panel element.
  prefs: []
  type: TYPE_NORMAL
- en: The complete demo application with instructions is available on GitHub at
  prefs: []
  type: TYPE_NORMAL
- en: '[https://github.com/ova2/angular-development-with-primeng/tree/master/chapter4/tabview](https://github.com/ova2/angular-development-with-primeng/tree/master/chapter4/tabview).'
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: At the end of this chapter, you will know how to deal with various Buttons and
    Panel components, depending on given use case. Initially, we covered all kinds
    of Button components. At first, we started with click button variations such as
    Button, RadioButton, and SplitButton components; after that we moved on to select
    value button variations such as ToggleButton and SelectButton components, then
    followed by explaining how to group multiple buttons using the Toolbar component.
    Later, we moved to container components such as various Panel components available
    in PrimeNG suite. The Panel components tour gets started with arranging views
    effectively using Panels and FieldSets, then how to use vertically stacked Accordion
    component, followed by grouping content with multiple tabs inside the TabView
    component.
  prefs: []
  type: TYPE_NORMAL
- en: The next chapter will give a detailed insight on data iteration components such
    as DataTable, export CSV data, DataList, OrderList, PickList, Schedule, and followed
    by tree hierarchical components such as Tree and TreeTable components. All these
    components explained with all possible features in a step-by-step approach.
  prefs: []
  type: TYPE_NORMAL
