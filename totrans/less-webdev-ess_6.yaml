- en: Chapter 6. Bootstrap 3, WordPress, and Other Applications
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: After reading the preceding chapters, you should have learned enough to build
    your own projects with *Less*. You will write better CSS and achieve more than
    you did before in the same time. You are definitely ready for the last step now.
    In the last chapter of this book, you will learn how to use *Less* with other
    well-known frameworks, applications, and tools. You will read about the web developer's
    tools that are built with *Less* or have integrated *Less* in their workflow.
    These projects can be used, customized, and extended with *Less* and will help
    you build better projects with *Less*.
  prefs: []
  type: TYPE_NORMAL
- en: 'This chapter will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Bootstrap 3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Semantic UI
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Building grids with *Less*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: WordPress and *Less*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Alternative compilers to compile your *Less* code
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bootstrap 3
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Bootstrap 3, formerly known as **Twitter's Bootstrap**, is a CSS and JavaScript
    framework for building application frontends. The three in Bootstrap 3 refers
    to the third version of this framework; wherever Bootstrap is written in this
    book, it refers to this third version. The third version of Bootstrap has important
    changes over the earlier versions of the framework. Bootstrap 3 is not compatible
    with the earlier versions.
  prefs: []
  type: TYPE_NORMAL
- en: 'Bootstrap 3 can be used to build great frontends. You can download the complete
    framework, including CSS and JavaScript, and start using it right away. Bootstrap
    also has a **grid**. The grid of Bootstrap is mobile-first by default and has
    12 columns. In fact, Bootstrap defines four grids: the extra-small grid up to
    768 pixels (mobile phones), the small grid between 768 and 992 pixels (tablets),
    the medium grid between 992 and 1200 pixels (desktop), and finally, the large
    grid of 1200 pixels and above for large desktops . In [Chapter 5](ch05.html "Chapter 5. Integrate
    Less in Your Own Projects"), *Integrate Less in Your Own Projects*, you build
    a grid with Preboot''s mixins; Bootstrap''s grid works in a similar way.'
  prefs: []
  type: TYPE_NORMAL
- en: The grid, all other CSS components, and JavaScript plugins are described and
    well documented at [http://getbootstrap.com/](http://getbootstrap.com/).
  prefs: []
  type: TYPE_NORMAL
- en: 'Bootstrap''s default theme looks like the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Bootstrap 3](img/1465OS_06_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Example of a layout built with Bootstrap 3
  prefs: []
  type: TYPE_NORMAL
- en: The time when all Bootstrap websites looked quite similar is far behind us now.
    Bootstrap will give you all the freedom you need to create innovative designs.
  prefs: []
  type: TYPE_NORMAL
- en: There is much more to tell about Bootstrap, but for now, let's get back to *Less*.
  prefs: []
  type: TYPE_NORMAL
- en: Working with Bootstrap's Less files
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: All the CSS code of Bootstrap is written in *Less*. You can download Bootstrap's
    *Less* files and recompile your own version of the CSS. The *Less* files can be
    used to customize, extend, and reuse Bootstrap's code. In the following sections,
    you will learn how to do this.
  prefs: []
  type: TYPE_NORMAL
- en: To download the *Less* files, follow the links at [http://getbootstrap.com/](http://getbootstrap.com/)
    to Bootstrap's GitHub pages at [https://github.com/twbs/bootstrap](https://github.com/twbs/bootstrap).
    On this page, choose **Download Zip** on the right-hand side column.
  prefs: []
  type: TYPE_NORMAL
- en: Building a Bootstrap project with Grunt
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: After downloading the files mentioned earlier, you can build a Bootstrap project
    with **Grunt**. Grunt is a JavaScript task runner; it can be used for the automation
    of your processes. Grunt helps you when performing repetitive tasks such as minifying,
    compiling, unit testing, and linting your code.
  prefs: []
  type: TYPE_NORMAL
- en: Grunt runs on **node.js** and uses **npm**, which you saw while installing the
    *Less* compiler. Node.js is a standalone JavaScript interpreter built on Google's
    V8 JavaScript runtime, as used in Chrome. Node.js can be used for easily building
    fast, scalable network applications.
  prefs: []
  type: TYPE_NORMAL
- en: When you unzip the files from the downloaded file, you will find `Gruntfile.js`
    and `package.json` among others. The `package.json` file contains the metadata
    for projects published as npm modules. The `Gruntfile.js` file is used to configure
    or define tasks and load Grunt plugins. The Bootstrap Grunt configuration is a
    great example to show you how to set up automation testing for projects containing
    HTML, *Less* (CSS), and JavaScript. This book can't handle all of this; more information
    about Grunt.js can be found in *Grunt.js Cookbook* available at [http://www.packtpub.com/grunt-js-cookbook/book](http://www.packtpub.com/grunt-js-cookbook/book).
    The parts that are interesting for you as a *Less* developer are mentioned in
    the following sections.
  prefs: []
  type: TYPE_NORMAL
- en: In `package.json` file, you will find that Bootstrap compiles its *Less* files
    with `grunt-contrib-less`. At the time of writing this book, the `grunt-contrib-less`
    plugin compiles *Less* with less.js Version 1.7\. In contrast to Recess (another
    JavaScript build tool previously used by Bootstrap), `grunt-contrib-less` also
    supports source maps.
  prefs: []
  type: TYPE_NORMAL
- en: Apart from `grunt-contrib-less`, Bootstrap also uses `grunt-contrib-csslint`
    to check the compiled CSS for syntax errors. The `grunt-contrib-csslint` plugin
    also helps improve browser compatibility, performance, maintainability, and accessibility.
    The plugin's rules are based on the principles of object-oriented CSS ([http://www.slideshare.net/stubbornella/object-oriented-css](http://www.slideshare.net/stubbornella/object-oriented-css)).
    You can find more information by visiting [https://github.com/stubbornella/csslint/wiki/Rules](https://github.com/stubbornella/csslint/wiki/Rules).
  prefs: []
  type: TYPE_NORMAL
- en: Bootstrap makes heavy use of *Less* variables, which can be set by the customizer.
  prefs: []
  type: TYPE_NORMAL
- en: Whoever has studied the source of `Gruntfile.js` may very well also find a reference
    to the `BsLessdocParser` Grunt task. This Grunt task is used to build Bootstrap's
    customizer dynamically based on the *Less* variables used by Bootstrap. Though
    the process of parsing *Less* variables to build, for instance, documentation
    will be very interesting, this task is not discussed here further. You will read
    about the customizer later in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: 'This section ends with the part of `Gruntfile.js` that does the *Less* compiling.
    The following code from `Gruntfile.js` should give you an impression of how this
    code will look:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Last but not least, let's have a look at the basic steps to run Grunt from the
    command line and build Bootstrap. Grunt will be installed with npm. Npm checks
    Bootstrap's `package.json` file and automatically installs the necessary local
    dependencies listed there.
  prefs: []
  type: TYPE_NORMAL
- en: 'To build Bootstrap with Grunt, you will have to enter the following commands
    on the command line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'After this, you can compile the CSS and JavaScript by running the following
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: This will compile your files into the `/dist` directory. The `> grunt test`
    command will also run the built-in tests.
  prefs: []
  type: TYPE_NORMAL
- en: Compiling your Less files
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Although you can build Bootstrap with Grunt, you don't have to use Grunt. You
    will find the *Less* files in a separate directory called `/less` inside the root
    `/bootstrap` directory. The main project file is `bootstrap.less`; other files
    will be explained in the next section. You can use `bootstrap.less` in the same
    way as you did in the earlier chapters.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can include `bootstrap.less` together with less.js into your HTML for the
    purpose of testing as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Of course, you can compile this file server side too as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Dive into Bootstrap's Less files
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Now it''s time to look at Bootstrap''s *Less* files in more detail. The `/less`
    directory contains a long list of files. You will recognize some files by their
    names. You have seen files such as `variables.less`, `mixins.less`, and `normalize.less`
    earlier. Open `bootstrap.less` to see how the other files are organized. The comments
    inside `bootstrap.less` tell you that the *Less* files are organized by functionality
    as shown in the following code snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Although Bootstrap is strongly CSS-based, some of the components don't work
    without the related JavaScript plugins. The navbar component is an example of
    this. Bootstrap's plugins require **jQuery**. You can't use the newest 2.x version
    of jQuery because this version doesn't have support for Internet Explorer 8.
  prefs: []
  type: TYPE_NORMAL
- en: To compile your own version of Bootstrap, you have to change the variables defined
    in `variables.less`. In the preceding chapters, you learned that you don't have
    to overwrite the original files and variables. When using the *last declaration
    wins* and *lazy loading* rules, it will be easy to redeclare some variables. Redeclaration
    of variables was discussed earlier in [Chapter 2](ch02.html "Chapter 2. Using
    Variables and Mixins"), *Using Variables and Mixins*.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a custom button with Less
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'By default, Bootstrap defines seven different buttons, as shown in the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating a custom button with Less](img/1465OS_06_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The seven different button styles of Bootstrap 3
  prefs: []
  type: TYPE_NORMAL
- en: 'Please take a look at the following HTML structure of Bootstrap''s buttons
    before you start writing your *Less* code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: A button has two classes. Globally, the first `.btn` class only provides layout
    styles, and the second `.btn-default` class adds the colors. In this example,
    you will only change the colors, and the button's layout will be kept intact.
  prefs: []
  type: TYPE_NORMAL
- en: 'Open `buttons.less` in your text editor. In this file, you will find the following
    *Less* code for the different buttons:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding code makes it clear that you can use the `.button-variant()`
    mixin to create your customized buttons. For instance, to define a custom button,
    you can use the following *Less* code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'In the preceding case, you want to extend Bootstrap with your customized button,
    add your code to a new file, and call this file `custom.less`. Appending `@import
    custom.less` to the list of components inside `bootstrap.less` will work well.
    The disadvantage of doing this will be that you will have to change `bootstrap.less`
    again when updating Bootstrap; so, alternatively, you could create a file such
    as `custombootstrap.less` which contains the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'The previous step extends Bootstrap with a custom button; alternatively, you
    could also change the colors of the default button by redeclaring its variables.
    To do this, create a new file, `custombootstrap.less` again, and add the following
    code into it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: In some situations, you will, for instance, need to use the button styles without
    everything else of Bootstrap. In these situations, you can use the `reference`
    keyword with the `@import` directive, as discussed earlier in [Chapter 5](ch05.html
    "Chapter 5. Integrate Less in Your Own Projects"), *Integrate Less in Your Own
    Projects*.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can use the following *Less* code to create a Bootstrap button for your
    project:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: You can see the result of the preceding code by visiting `http://localhost/index.html`
    in your browser.
  prefs: []
  type: TYPE_NORMAL
- en: Notice that depending on the version of less.js you use, you may find some unexpected
    classes in the compiled output. **Media queries** or extended classes sometimes
    break the referencing in older versions of less.js.
  prefs: []
  type: TYPE_NORMAL
- en: Customizing Bootstrap's navbar with Less
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'An important component of Bootstrap is the navigation bar. The navigation bar
    adds the main navigation to a website. It mostly contains a logo or brand name,
    a searchbox, and navigation links. In this book, navbar refers to the navigation
    bar. A typical Bootstrap navbar will look like the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Customizing Bootstrap''s navbar with Less](img/1465OS_06_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Example of a Bootstrap navbar
  prefs: []
  type: TYPE_NORMAL
- en: 'Bootstrap''s navbar is responsive by default. On small screen sizes, the preceding
    navbar will look like the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Customizing Bootstrap''s navbar with Less](img/1465OS_06_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: A collapsed and opened Bootstrap navbar
  prefs: []
  type: TYPE_NORMAL
- en: In addition to the CSS, Bootstrap's responsive navbar requires the collapse
    JavaScript plugin. This plugin should be included in your version of Bootstrap.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, try to change the colors of the default navbar as an example. To do this,
    you must first open `variables.less` to find out which variables color the navbar
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: You have seen that it was easy to find these variables. The comments in the
    file are a handy guide to find them. You will also see that the meaningful and
    descriptive names for variables make sense, as learned in [Chapter 2](ch02.html
    "Chapter 2. Using Variables and Mixins"), *Using Variables and Mixins*. On the
    other hand, you may be wondering why there are so many variables only for the
    navbar. The navbar has many elements and different manifestations that need to
    be defined with variables. As mentioned earlier, Bootstrap's navbar is responsive
    by default; it collapses for smaller screens (or in fact, from the mobile-first
    point of view, it becomes horizontal for larger screen sizes). So, styles must
    be defined for both the collapsed and horizontal versions of the navbar. Colors
    for the navbar links and the collapsed menu toggle button are also set in the
    preceding code.
  prefs: []
  type: TYPE_NORMAL
- en: 'Just like Bootstrap''s buttons, the Bootstrap navbar is also built with two
    classes, as shown in the following code snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'In this case, the `.navbar` class provides layout styles, and the second `.navbar-default`
    class adds the colors and other variations. The `.navbar` class also has a third
    class that sets its type. There are four types of navbars: the default, fixed
    to top, fixed to bottom, and static top.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The navbar classes can be found in `navbar.less`. The navbar doesn''t have
    a mixin to build the classes. The *Less* code provides classes for two alternate
    navbar styles: `.navbar-default` and `.navbar-inverse`.'
  prefs: []
  type: TYPE_NORMAL
- en: As there are no mixins to use, redeclaration of some of the navbar's variables
    will be the best option to customize its look and feel. Optionally, you can copy
    the complete `.navbar-default` class and use it for customization. Bootstrap intends
    to use only one navbar per page, so additional style classes don't have added
    value.
  prefs: []
  type: TYPE_NORMAL
- en: 'For instance, now set the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: You can declare these variables into `customnavbar.less` and also add `@import
    "bootstrap.less";` to this file. Now, you can compile `customnavbar.less`.
  prefs: []
  type: TYPE_NORMAL
- en: You can see the result of the preceding code by visiting `http://localhost/customnavbar.html`
    in your browser.
  prefs: []
  type: TYPE_NORMAL
- en: Bootstrap classes and mixins
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Skipping through the components, you will see that Bootstrap is a very complete
    framework. After the compilation of the framework, you have all the classes you
    need to build your responsive website. On the other hand, Bootstrap can also be
    used as a library. You have already seen how to use only the buttons.
  prefs: []
  type: TYPE_NORMAL
- en: 'In `utilities.less`, you can find the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: The preceding code makes the `.clearfix` class available for direct usage in
    your HTML; on the other hand, you can still reuse the `.clearfix()` mixin. You
    can find Bootstrap's mixins in `mixins.less`. This strict separation of mixins
    and classes allows you to import `mixins.less` and apply these mixins into your
    own code under your own class name(s), without actually creating an output of
    these classes.
  prefs: []
  type: TYPE_NORMAL
- en: 'The preceding import of the `mixins.less` file will allow you to use Bootstrap''s
    gradient mixins for your own projects, as shown in the following code snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding code will compile into the following CSS code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: As you can see, the gradient mixins are namespaced. Please also visit `http://localhost/gradient.html`
    to see how the background gradient from the preceding example will look.
  prefs: []
  type: TYPE_NORMAL
- en: Theming Bootstrap with Less
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: As Bootstrap's styles are built with *Less*, it will be easy to theme your own
    version of Bootstrap. There are basically two ways to integrate your theme's *Less*
    code.
  prefs: []
  type: TYPE_NORMAL
- en: The first method compiles all code to a single CSS file. This method is recommended
    in most cases because loading requires only one HTTP request.
  prefs: []
  type: TYPE_NORMAL
- en: 'To use this method, import your theme file into `bootstrap.less` with the `@import`
    statement and recompile Bootstrap. Alternatively, create a new project file, for
    instance, `bootstraptheme.less`, which includes both, as shown in the following
    code snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: This method overwrites Bootstrap's styles at the *Less* level, while the second
    method does the same at the CSS level. In this second method, the theme's *Less*
    code will be compiled in to separate CSS files, which will be loaded after Bootstrap's
    CSS.
  prefs: []
  type: TYPE_NORMAL
- en: 'Your HTML for client-side compiling will be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'Your HTML after server-side compiling will be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'This second method requires an extra HTTP request when loading your page, but
    on the other hand, it offers the opportunity to load Bootstrap''s core from CDN
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: The a11y theme for Bootstrap
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**A11y** is a commonly used shorthand for (web) accessibility. Accessibility
    plays an important role in modern web designs; nevertheless, many websites pay
    less attention to it. The a11y theme for Bootstrap provides better accessibility
    with Bootstrap.'
  prefs: []
  type: TYPE_NORMAL
- en: The a11y theme can be downloaded from [https://github.com/bassjobsen/bootstrap-a11y-theme](https://github.com/bassjobsen/bootstrap-a11y-theme).
    You only have to compile the *Less* file to use the theme. Also, in this case,
    you can choose between integrating the *Less* code into your *Less* code base
    or compiling a separate theme's CSS file. For more accessibility improvements
    of Bootstrap, also take a look at [https://github.com/paypal/bootstrap-accessibility-plugin/](https://github.com/paypal/bootstrap-accessibility-plugin/).
    Notice that this plugin doesn't provide any *Less* code, but only CSS.
  prefs: []
  type: TYPE_NORMAL
- en: Color schemes with 1pxdeep
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**1pxdeep** helps you use **relative visual weight** and **color schemes**
    in your project. Based on a seed color, 1pxdeep''s `scheme.less` file generates
    a color pallet with 16 colors. Each color is also defined in a variable. The variables,
    such as `@color1` or `@color4c`, can be used for the customization of your design.
    Every color variable also defines a class with the same name, so `@color1` in
    your *Less* code and `.color1` in your HTML refer to the same color in your color
    scheme.'
  prefs: []
  type: TYPE_NORMAL
- en: After implementing 1pxdeep in your project, changing the branding or color scheme
    will be as simple as changing the seed color.
  prefs: []
  type: TYPE_NORMAL
- en: 'A typical `Less` project file using 1pxdeep and Bootstrap will look like the
    following code snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding code redeclares Bootstrap''s variables, such as `@brand-primary:
    hsl(hue(#428bca),@sat,@l-factor);`, and enables you to use 1pxdeep''s variables
    such as `@color3` in the `style.less` file, as shown in the following code snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: '1pxdeep''s CSS classes can also be used directly in your HTML code as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: On 1pxdeep's website, you can test different seed colors to get an impression
    of how they look. Please visit [http://rriepe.github.io/1pxdeep/](http://rriepe.github.io/1pxdeep)
    and be surprised.
  prefs: []
  type: TYPE_NORMAL
- en: Using Bootstrap's customizer to build your own version
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Whoever wants to start with a customized version of Bootstrap from scratch can
    also use Bootstrap's customizer. You will find the customizer by visiting [http://getbootstrap.com/customize/](http://getbootstrap.com/customize/).
    The customizer allows you to choose which *Less* files should be used. It will
    also be possible to set all Bootstrap's *Less* variables. The list can also be
    used as a reference for Bootstrap's variables when compiling a version yourself.
    Notice that the files that can be downloaded when using the customizer don't contain
    any *Less* files, so files from the Bootstrap customizer are not suitable for
    further customization with *Less*.
  prefs: []
  type: TYPE_NORMAL
- en: Semantic UI – another Less framework
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Semantic can be used to build frontends too. Just like Bootstrap, it contains
    CSS components and modules. Components have been split up in to elements, collections,
    and views. Modules require not only CSS, but also JavaScript.
  prefs: []
  type: TYPE_NORMAL
- en: Semantic's name already makes clear that it pays attention to the semantics
    of HTML5\. It is also tag-agnostic, which means you can use any HTML tags with
    UI elements.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the following code, you will find a short HTML example that shows how Semantic
    is intended to be used:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: Also, Semantic has been built with *Less*. The complete source, including the
    *Less* files, can be downloaded from [https://github.com/semantic-org/semantic-ui/](https://github.com/semantic-org/semantic-ui/).
  prefs: []
  type: TYPE_NORMAL
- en: The way Semantic handles *Less* differs from Bootstrap and most of the examples
    you have seen earlier in this book. The Semantic source will also be built with
    Grunt, as described in the preceding Bootstrap sections. On the contrary, Semantic
    does not define variables and also doesn't define a master file that imports and
    connects the different *Less* files. The Semantic *Less* code is split up in to
    different modules in which most settings are hardcoded.
  prefs: []
  type: TYPE_NORMAL
- en: The different ways of handling *Less* by Semantic also means that when your
    projects use the framework in its entirety, you will always have to run the complete
    Grunt task after changing or extending the *Less* code. On the other hand, it
    will be very easy to use single Semantic components or modules in your projects.
    The components and modules do not depend on each other or global variables.
  prefs: []
  type: TYPE_NORMAL
- en: Please visit `http://localhost/semanticui.html` from the example files to see
    how this works. You will see that you can use the grid or buttons by including
    only the *Less* file. Also notice that if your buttons use icons (Semantic includes
    a complete port of Font Awesome designed by Dave Gandy for its standard icon set),
    you should also include the `icon.less` file.
  prefs: []
  type: TYPE_NORMAL
- en: Automatic prefixing of vendor-specific rules
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When building Semantic with Grunt, the tasks first compile the *Less* files
    to single CSS files. After this task, the next task runs `grunt-autoprefixer`.
    The `grunt-autoprefixer` plugin parses *Less* or CSS and adds vendor-prefixed
    CSS properties using the **Can I Use...** database ([http://caniuse.com/](http://caniuse.com/)).
    The *Less* files in the `/build` directory are also prefixed this way. You can
    find more information on `grunt-autoprefixer` by visiting [https://github.com/nDmitry/grunt-autoprefixer](https://github.com/nDmitry/grunt-autoprefixer).
    The final tasks will bundle the CSS and JavaScript files in a single file and
    minify them.
  prefs: []
  type: TYPE_NORMAL
- en: Automatic prefixing will be very interesting for your future projects, because
    it enables you to write your *Less* code with single-line declarations only. Study
    Semantic's `Grunt.js` to find out how this works. For now, running task and automatic
    prefixing is out of the scope of this book. Notice that if you use single *Less*
    files from Semantic for your project, you will have to use the files from the
    `/build` directory instead of the `/source` directory. The *Less* files in the
    `/build` directory are prefixed while those in the `/source` directory are not.
  prefs: []
  type: TYPE_NORMAL
- en: Other frameworks to build your grid with Less
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In the preceding section, you learned how to use Bootstrap and Semantic UI
    to build complete frontends. In practice for many projects, only a grid will be
    enough to start. You have seen that Semantic''s grid can be compiled easily as
    a single component. Also, Bootstrap''s grid can be compiled as a single component
    using the following code snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: Alternatively, you could also use another grid system. Some of them are discussed
    in brief in the following sections.
  prefs: []
  type: TYPE_NORMAL
- en: Using the Golden Grid System to build your grids
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The **Golden Grid System** (**GGS**) splits the screen into 18 even columns.
    The leftmost and rightmost columns are used as the outer margins of the grid;
    this leaves 16 columns for your design. More details about this grid system can
    be found at [http://goldengridsystem.com/](http://goldengridsystem.com/).
  prefs: []
  type: TYPE_NORMAL
- en: GGS comes with a *Less* file to compile the required CSS to build the grid.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The **Frameless** grid system adapts column by column, not pixel by pixel.
  prefs: []
  type: TYPE_NORMAL
- en: The Frameless grid system, built by the same author who built GGS, is not fluid;
    the grid adds columns when a breakpoint has been reached. Notice that Bootstrap's
    grids work the same way. Frameless comes with a *Less* template that can be compiled
    to use the grid. This template contains a small CSS reset, some consistency fixes,
    as well as some basic customizable variables and functions for starting off a
    Frameless grid. More information about Frameless grids can be found at [http://framelessgrid.com/](http://framelessgrid.com/).
    Frameless' documentation is sparse; however, you can find the source of Frameless'
    home page on GitHub. This will give you an impression of how to use it with *Less*.
  prefs: []
  type: TYPE_NORMAL
- en: The Semantic Grid System
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The **Semantic Grid System** is very basic and effective. After setting the
    column and gutter widths, choose the number of columns and switch between pixels
    and percentages; you will have a layout without any `.grid_x` classes in your
    markup. The Semantic Grid System is also responsive. It also supports nesting
    and push and pull, which allows you to apply left and right indents to your columns.
  prefs: []
  type: TYPE_NORMAL
- en: 'Defining a fluid layout with *Less* will be as simple as compiling, as shown
    in the following code snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: Further information about the Semantic Grid System can be found at [http://semantic.gs/](http://semantic.gs/).
  prefs: []
  type: TYPE_NORMAL
- en: WordPress and Less
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Nowadays, WordPress is not only used for weblogs; it can also be used as a content
    management system to build a website.
  prefs: []
  type: TYPE_NORMAL
- en: The WordPress system, written in PHP, has been split up into the core system,
    plugins, and themes. Plugins add additional functionalities to the system and
    themes handle the look and feel of a website built with WordPress. Plugins work
    independent of each other. Plugins are also independent of the theme, and the
    theme mostly does not depend on plugins either. WordPress themes define the global
    CSS for a website, but every plugin can also add its own CSS code.
  prefs: []
  type: TYPE_NORMAL
- en: WordPress theme developers can use *Less* to compile the CSS of themes and plugins.
  prefs: []
  type: TYPE_NORMAL
- en: Using the Roots theme with Less
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Roots** is a WordPress starters theme. You can use Roots to build your own
    theme. Roots is based on HTML5 Boilerplate ([http://html5boilerplate.com/](http://html5boilerplate.com/))
    and Bootstrap. Please also visit the Roots theme website at [http://roots.io/](http://roots.io/).
    Also, Roots can be completely built with Grunt. More information about how to
    use Grunt for WordPress development can be found at [http://roots.io/using-grunt-for-wordpress-theme-development/](http://roots.io/using-grunt-for-wordpress-theme-development/).'
  prefs: []
  type: TYPE_NORMAL
- en: After downloading Roots, the *Less* files can be found in the `assets/less/`
    directory. These files include Bootstrap's *Less* files, as described earlier.
    The `assets/less/app.less` file imports the main Bootstrap *Less* file, `bootstrap.less`.
  prefs: []
  type: TYPE_NORMAL
- en: Now, you can edit `app.less` to customize your theme. You will have to rebuild
    Roots after your changes.
  prefs: []
  type: TYPE_NORMAL
- en: Roots' documents describe editing Bootstrap's `variables.less` file as the easiest
    way to customize a website built with Roots. More information can be found at
    [http://roots.io/modifying-bootstrap-in-roots/](http://roots.io/modifying-bootstrap-in-roots/).
  prefs: []
  type: TYPE_NORMAL
- en: JBST with a built-in Less compiler
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: JBST is also a WordPress starters theme. JBST is intended to be used with so-called
    child themes. More information about WordPress child themes can be found at [https://codex.wordpress.org/Child_Themes](https://codex.wordpress.org/Child_Themes).
  prefs: []
  type: TYPE_NORMAL
- en: 'After installing JBST, you will find a *Less* compiler under **Appearance**
    in your **Dashboard**, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![JBST with a built-in Less compiler](img/1465OS_06_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: JBST's built-in Less Compiler in the WordPress Dashboard
  prefs: []
  type: TYPE_NORMAL
- en: The built-in *Less* compiler can be used to fully customize your website with
    *Less*. Bootstrap also forms the skeleton of JBST, and the default settings are
    gathered from the a11y bootstrap theme mentioned earlier.
  prefs: []
  type: TYPE_NORMAL
- en: JBST's *Less* compiler can be used in different ways.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, the compiler accepts any custom written *Less* (and CSS) code. For instance,
    to change the color of the `h1` elements, you should simply edit and recompile
    the code as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'Second, you can edit Bootstrap''s variables and (re)use Bootstrap''s mixins.
    So, to set the background color of the navbar and add a custom button, you can
    use the following code in the *Less* compiler:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'Third, you can set JBST''s built-in *Less* variables, for instance, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'Fourth and last, JBST has its own set of mixins. To set a custom font, you
    can edit as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding code, the parameters are used to set the font name (`@family`)
    and the path to the font files (`@path/@font-path`). The `@weight` and `@style`
    parameters set the font's properties. For more information, visit [https://github.com/bassjobsen/Boilerplate-JBST-Child-Theme](https://github.com/bassjobsen/Boilerplate-JBST-Child-Theme).
  prefs: []
  type: TYPE_NORMAL
- en: More *Less* code can also be added in a special file (`wpless2css/wpless2css.less`
    or `less/custom.less`); these files will also give you the option to add, for
    instance, a library of prebuilt mixins, such as the ones discussed in [Chapter
    4](ch04.html "Chapter 4. Avoid Reinventing the Wheel"), *Avoid Reinventing the
    Wheel*. After adding the library via this file, the mixins can also be used with
    the built-in compiler.
  prefs: []
  type: TYPE_NORMAL
- en: The Semantic UI WordPress theme
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Semantic UI, as discussed earlier, offers its own WordPress plugin. The plugin
    can be found on GitHub at [https://github.com/ProjectCleverWeb/Semantic-UI-WordPress](https://github.com/ProjectCleverWeb/Semantic-UI-WordPress).
    After installing and activating this theme, you can use your website directly
    with Semantic UI. With the default setting, your website will look like the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The Semantic UI WordPress theme](img/1465OS_06_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Website built with Semantic UI WordPress theme
  prefs: []
  type: TYPE_NORMAL
- en: WordPress plugins and Less
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'As discussed earlier, WordPress plugins have their own CSS. This CSS will add
    to the page as a normal style sheet as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: Unless a plugin provides *Less* files for their CSS, it will not be easy to
    manage its styles with *Less*.
  prefs: []
  type: TYPE_NORMAL
- en: Theme WooCommerce with Less
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**WooCommerce** is a popular e-commerce plugin for WordPress. With WooCommerce,
    you can build a web shop in a trice. You can theme your WooCommerce web shop with
    *Less*, as documented at [http://docs.woothemes.com/document/css-structure/](http://docs.woothemes.com/document/css-structure/).'
  prefs: []
  type: TYPE_NORMAL
- en: WooCommerce's *Less* file should be compiled into CSS and used as described
    earlier. To create a single CSS file for all your style sheets with *Less*, you
    can consider importing `woocommerce.less` into your project's master *Less* file
    and disable the default styling with `define('WOOCOMMERCE_USE_CSS', false);` in
    your theme's `functions.php` file.
  prefs: []
  type: TYPE_NORMAL
- en: The WP Less to CSS plugin
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The **WP Less to CSS** plugin, which can be found by visiting [http://wordpress.org/plugins/wp-less-to-css/](http://wordpress.org/plugins/wp-less-to-css/),
    offers the possibility to style your WordPress website with *Less*. As seen earlier,
    you can enter your *Less* code with the built-in compiler of JBST. This code will
    be compiled into the website's CSS. This plugin compiles *Less* with the PHP Less
    compiler, `Less.php`.
  prefs: []
  type: TYPE_NORMAL
- en: Alternative compilers for compiling your Less code
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: With the growing popularity of *Less*, the *Less* compiler has been ported to
    other languages as well. These ports can be used to compile *Less* with native
    language calls. Please keep in mind that these ports will usually lag the official
    JavaScript implementation, so you may find they are missing recent *Less* features.
    You may also realize, as mentioned earlier in [Chapter 3](ch03.html "Chapter 3. Nested
    Rules, Operations, and Built-in Functions"), *Nested Rules, Operations, and Built-in
    Functions*, that these compilers are not able to compile native JavaScript expressions
    within backticks.
  prefs: []
  type: TYPE_NORMAL
- en: The Less.php compiler
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This PHP port of the official *Less* processor can be download at [http://lessphp.gpeasy.com/](http://lessphp.gpeasy.com/).
    You have seen an example of its usage already; the WP Less to CSS plugin has been
    built with it. `Less.php` also implements caching for faster compiling.
  prefs: []
  type: TYPE_NORMAL
- en: Although `Less.php` offers the possibility of creating CSS dynamically, you
    still should precompile your CSS for production in most cases. WordPress is also
    written in PHP, so in the case of the WordPress plugin, *Less* can be compiled
    without using system calls.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the following code, you will find a short example that will show you how
    to compile, customize, and use Bootstrap on a website written in PHP:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: The **lessphp** compiler available at [http://leafo.net/lessphp/](http://leafo.net/lessphp/)
    is an alternative PHP Less compiler.
  prefs: []
  type: TYPE_NORMAL
- en: The .less compiler for .NET apps
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `.less` compiler is a complete port of the JavaScript *Less* library for
    the **.NET platform**. If you want to statically compile your files, you can use
    the included `dotless.Compiler.exe` compiler. You can use `.less` for your web
    page by adding a new HTTP handler to your `Web.Config` file as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: List of tools to develop Less
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: On the *Less* website ([http://lesscss.org/usage/](http://lesscss.org/usage/)),
    you will find many other libraries, tools, and frameworks to develop *Less*.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you learned how to use *Less* with Bootstrap and Semantic UI
    and also got introduced to other grids and frameworks built with *Less*. You have
    seen how to use *Less* with WordPress, and finally, you saw how to use alternative
    compilers for your project.
  prefs: []
  type: TYPE_NORMAL
- en: This is also the last chapter of this book. In this book, you learned how to
    use *Less* for your projects. You saw how variables, mixins, and built-in functions
    can help you reuse your code. With *Less*, you can nest your style rules, which
    make your code more intuitive and readable. After reading this book, you know
    you don't have to write all the code yourself, but you can use prebuilt mixins
    written by others. Finally, you obtained knowledge on how to start projects from
    scratch with *Less* and integrate *Less* with WordPress, Bootstrap, and other
    tools. Now, you are really ready to start developing *Less*. Congratulations!
    You have enabled yourself to work better and faster using *Less* for your projects
    and will save more time for your real design tasks.
  prefs: []
  type: TYPE_NORMAL
