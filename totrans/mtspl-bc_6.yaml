- en: Fast-Paced Exploitation with Metasploit
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: While performing a penetration test, it is crucial to monitor time constraints.
    A penetration test that consumes more time than expected can lead to loss of faith,
    a cost that exceeds the budget, and many other things. A lengthy penetration test
    might also cause an organization to lose all of its business from the client in
    the future.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will develop methodologies to conduct fast-paced penetration
    testing with automation tools and approaches in Metasploit. We will learn about
    the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Switching modules on the fly
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Automating post-exploitation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Automating exploitation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This automation testing strategy will not only decrease the time of testing,
    but will also decrease the cost per hour per person too.
  prefs: []
  type: TYPE_NORMAL
- en: Using pushm and popm commands
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Metasploit offers two great commands—namely `pushm` and `popm`. The `pushm`
    command pushes the current module onto the module stack, while `popm` pops the
    pushed module from the top of the module stack. However, this is not the standard
    stack available to processes. Rather, it is the utilization of the same concept
    by Metasploit; it is otherwise unrelated. Using these commands gives us speedy
    operations, which saves a lot of time and effort.
  prefs: []
  type: TYPE_NORMAL
- en: Consider a scenario where we are testing an internal server with multiple vulnerabilities.
    We have two exploitable services running on every system on the internal network.
    To exploit both the services on every machine, we require a fast switching mechanism
    between modules for both the vulnerabilities. In such cases, we can use `pushm`
    and `popm` commands. We can test a server for a single vulnerability using a module
    and can then push the module on the stack and load the other module. After completing
    tasks with the second module, we can pop the first module from the stack using
    the `popm` command with all the options intact.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let us learn more about the concept using the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00257.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'From the preceding screenshot, we can see that we pushed the `psexec` module
    onto the stack using the `pushm` command, and then we loaded the `exploit/multi/handler`
    module. As soon as we are done with carrying out operations with the `multi/handler`
    module, we can use the `popm` command to reload the `psexec` module from the stack,
    as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00276.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: We can clearly see that all the options for the `psexec` module were saved along
    with the module on the stack. Therefore, we do not need to set the options again.
  prefs: []
  type: TYPE_NORMAL
- en: Making use of resource scripts
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Metasploit offers automation through resource scripts. The resource scripts
    eliminate the need to set the options manually, setting up everything automatically,
    thereby saving the large amount of time needed to set up the payload and the module's
    options.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are two ways to create a resource script—namely by creating the script
    manually or using the `makerc` command. I recommend the `makerc` command over
    manual scripting since it eliminates typing errors. The `makerc` command saves
    all the previously issued commands in a file, which can be used with the resource
    command. Let us see an example:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00034.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: We can see in the preceding screenshot that we launched an exploit handler module
    by setting up its associated payload and options such as `LHOST` and `LPORT`.
    Issuing the `makerc` command will save all these commands in a systematic way
    into a file of our choice, which in this case is `multi_hand`. We can see that
    `makerc` successfully saved the last six commands into the `multi_hand` resource
    file.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let us use the `resource` script as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00102.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: We can clearly see that just by issuing the `resource` command followed by our
    script, it replicated all the commands we saved automatically, which eliminated
    the task of setting up the options repeatedly.
  prefs: []
  type: TYPE_NORMAL
- en: Using AutoRunScript in Metasploit
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Metasploit offers another great feature of using AutoRunScript. The AutoRunScript
    option can be populated by issuing the show advanced command. AutoRunScript automates
    post-exploitation, and executes once access to the target has been achieved. We
    can either set the AutoRunScript option manually by issuing `set AutoRunScript
    [script-name]`, or by using the `resource` script itself, which automates exploitation
    and post-exploitation together. AutoRunScript can also run more than one post-exploitation
    script by using the `multi_script` and `multi_console_command` modules as well.
    Let us take an example where we have two scripts, one for automating the exploitation
    and the second for automating the post-exploitation, as shown in the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00120.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'This is a small post-exploitation script that automates the `checkvm` (a module
    to check whether the target is running on a virtual environment) and `migrate`
    (a module that helps in migrating from the exploited process to safer ones) modules.
    Let us have a look at the following exploitation script:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00139.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: The preceding `resource` script automates exploitation for the HFS file server
    by setting up all the required parameters. We also set the AutoRunScript option
    using the `multi_console_command` option, which allows the execution of multiple
    post-exploitation scripts. We define our post-exploitation script to `multi_console_command`
    using the `-rc` switch, as shown in the preceding screenshot.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let us run the exploitation script and analyze its results in the following
    screen:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00107.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'We can clearly see in the preceding screenshot that soon after the exploit
    is completed, the `checkvm` and migrate modules are executed, which states that
    the target is a Sun VirtualBox Virtual Machine, and the process is migrated to
    notepad.exe process. The successful execution of our script can be seen in the
    following remaining section of the output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00184.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: We successfully migrated to the notepad.exe process. However, if there are multiple
    instances of `notepad.exe`, the process migration may hop over other processes
    as well.
  prefs: []
  type: TYPE_NORMAL
- en: Using the multiscript module in the AutoRunScript option
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We can also use a `multiscript` module instead of a `multi_console_command`
    module. Let us create a new post-exploitation script as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00220.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'As we can clearly see in the preceding screenshot, we created a new post-exploitation
    script named `multi_scr.rc`. We need to make the following changes to our exploitation
    script to accommodate the change:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00161.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'We simply replaced `multi_console_command` with `multiscript` and updated the
    path of our post-exploitation script, as shown in the preceding screenshot. Let
    us see what happens when we run the `exploit` script:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00167.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'We can clearly see that after access to the target is achieved, the `checkvm`
    module executes, which is followed by the `migrate`, `get_env`, and `event_manager`
    commands, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00129.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'The `event_manager` module displays all the logs from the target system because
    we supplied `-i` switch, along with the command in our resource script. The results
    of the `event_manager` command are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00156.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Global variables in Metasploit
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Working on a particular range or a specific host, we can always use the `setg`
    command to specify the `LHOST` and `RHOST` options. Setting the options with the
    `setg` command will set the `RHOST` or `LHOST` options globally for every module
    loaded. Hence, the `setg` command eliminates the use of setting up these specific
    options repeatedly. We can also make use of the `setg` command over other options,
    such as `LPORT`, `RPORT`, and `payload`. However, different services run on different
    ports, and we may need to alter the payloads as well. Hence, setting up options
    that do not change from a module to another module is a better approach. Let us
    have a look at the following example:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00250.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: We assigned `RHOST` with the `setg` command in the preceding screenshot. We
    can see that no matter how many times we change the module, the value of `RHOST`
    remains constant for all modules, and we do not need to enter it manually in every
    module. The get command fetches the value of a variable from the current context,
    while the `getg` command fetches the value of a global variable, as shown in the
    preceding screenshot.
  prefs: []
  type: TYPE_NORMAL
- en: Wrapping up and generating manual reports
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let us now discuss how to create a penetration test report and see what is to
    be included, where it should be included, what should be added or removed, how
    to format the report, the usage of graphs, and so on. Many people, such as managers,
    administrators, and top executives, will read the report of a penetration test.
    Therefore, it's necessary for the findings to be well organized so that the correct
    message is conveyed to those involved and is understood by the target audience.
  prefs: []
  type: TYPE_NORMAL
- en: The format of the report
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'A good penetration testing report can be broken down into the following elements:'
  prefs: []
  type: TYPE_NORMAL
- en: Page design
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Document control
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Cover page
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Document properties
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: List of the report's contents
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Table of contents
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: List of illustrations
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Executive/high-level summary
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Scope of the penetration test
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Severity information
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Objectives
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Assumptions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Summary of vulnerabilities
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Vulnerability distribution chart
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Summary of recommendations
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Methodology/technical report
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Test details
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: List of vulnerabilities
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Likelihood
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Recommendations
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: References
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Glossary
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Appendix
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Here is a brief description of some of the relevant sections:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Page design**: This refers to the choice of fonts, headers and footers, colors,
    and other design elements that are to be used in the report.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Document control**: General properties about the report are covered here.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Cover page**: This consists of the name of the report, as well as the version,
    time and date, target organization, serial number, and so on.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Document properties**: This section contains the title of the report, the
    name of the tester, and the name of the person who reviewed this report.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**List of the report''s contents**: This section includes the contents of the
    report. Their location in the report is shown using clearly defined page numbers.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Table of contents**: This section includes a list of all the contents, organized
    from the start to the end of the report.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**List of illustrations**: All the figures used in the report are to be listed
    with the appropriate page numbers in this section.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The executive summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The executive summary contains the complete summarization of the report in
    a standard and nontechnical text that focuses on providing knowledge to the senior
    employees of the company. It contains the following information:'
  prefs: []
  type: TYPE_NORMAL
- en: '**The scope of the penetration test**: This section includes the type of tests
    performed and the systems that were tested. All the IP ranges that were tested
    are also listed in this section. Moreover, this section also contains severity
    information about the test.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Objectives**: This section will define how the test will be able to help
    the target organization, what the benefits of the test will be, and so on.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Assumptions made**: If the scope of the test calls for an internal assessment,
    the assumption would be that the attacker has already gained internal access via
    out-of-scope methods, such as phishing or SE. Therefore, any such assumptions
    made should be listed in this section.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Summary of vulnerabilities**: This section provides information in a tabular
    form and describes the number of found vulnerabilities according to their risk
    level—high, medium, or low. The vulnerabilities are ordered from those that would
    have the largest impact on the assets to those that would have the smallest impact.
    Additionally, this phase contains a vulnerability distribution chart for multiple
    issues with multiple systems. An example of this can be seen in the following
    table:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '| **                    Impact** | **Number of vulnerabilities** |'
  prefs: []
  type: TYPE_TB
- en: '|                     High | 19 |'
  prefs: []
  type: TYPE_TB
- en: '|                     Medium | 15 |'
  prefs: []
  type: TYPE_TB
- en: '|                     Low | 10 |'
  prefs: []
  type: TYPE_TB
- en: '**Summary of recommendations**: The recommendations to be made in this section
    are only for the vulnerabilities with the highest impact factor, and they are
    to be listed accordingly.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Methodology/network admin-level report
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This part of the report includes the steps to be performed during the penetration
    test, in-depth details about the vulnerabilities, and recommendations. The following
    information is the section of interest for the administrators:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Test details**: This part of the report includes information related to the
    summarization of the test in the form of graphs, charts, and tables for vulnerabilities,
    risk factors, and the systems infected with these vulnerabilities.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**List of vulnerabilities**: This section of the report includes the details,
    location, and the primary cause of the vulnerabilities.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Likelihood**: This section explains the probability of these vulnerabilities
    being targeted by attackers. To get the values for this likelihood, we analyze
    the ease of access in triggering a particular vulnerability and find out the easiest
    and the most difficult test against the vulnerabilities that can be targeted.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Recommendations**: Recommendations for patching the vulnerabilities are to
    be listed in this section. If a penetration test does not recommend patches, it
    is considered only half-finished.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Additional sections
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The following sections are optional ones, and may differ from report to report:'
  prefs: []
  type: TYPE_NORMAL
- en: '**References**: All the references taken while the report is made are to be
    listed here. References such as a book, website, article, and so on are to be
    defined clearly, with the author, publication name, year of publication or date
    of the published article, and so on.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Glossary**: All the technical terms used in the report are to be listed here
    along with their meaning.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Appendix:** This section is an excellent place to add miscellaneous scripts,
    codes, and images.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Summary and preparation for real-world scenarios
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter allowed us to work on speeding up the process of a penetration
    test by automating exploitation and post-exploitation using multiple types of
    resource scripts. We also saw the usage and benefits of `pushm`, `popm`, and variable
    globalization. By the end, we saw how we could design professional reports and
    how the various sections of the report are to be rendered.
  prefs: []
  type: TYPE_NORMAL
- en: Before we begin [Chapter 7](part0126.html#3O56S0-a731d733dba14ccabae643b74e2c8790),
    *Exploiting Real-World Challenges with Metasploit*, it is advised that you run
    through all the examples covered in the book so far and learn each and every method
    covered in detail. However, no book will help you hone your skills unless you
    practice each and every thing while enhancing your research capabilities.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will make use of each and every technique learned in the previous chapters
    to solve the challenges in the next one, while learning some new technologies.
    You can practice the following exercises before reading through [Chapter 7](part0126.html#3O56S0-a731d733dba14ccabae643b74e2c8790),
    *Exploiting Real-World Challenges with Metasploit*:'
  prefs: []
  type: TYPE_NORMAL
- en: Create post-exploitation scripts for meterpreter handlers for both Linux and
    Windows operating systems
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Imagine that you are a part of a law enforcement organization, and pen down
    the most notable exploitation and post-exploitation modules
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Imagine that you are a professional penetration tester and repeat the preceding
    exercise
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Try running meterpreter through a proxy and analyze the changes observed in
    different modules
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Try combining the power of open source vulnerability scanners—such as OpenVAS—with
    Metasploit, while saving time for testing
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Try escalating privileges on Windows 2003, Windows 2008, and Windows 2012 servers
    and pen down the module differences
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Chapter 7](part0126.html#3O56S0-a731d733dba14ccabae643b74e2c8790), *Exploiting
    Real-World Challenges with Metasploit,* is complex and contains a variety of methods
    and exploitation scenarios. Be prepared before you proceed. All the best!'
  prefs: []
  type: TYPE_NORMAL
