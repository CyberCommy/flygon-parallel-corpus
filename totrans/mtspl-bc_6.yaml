- en: Fast-Paced Exploitation with Metasploit
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: While performing a penetration test, it is crucial to monitor time constraints.
    A penetration test that consumes more time than expected can lead to loss of faith,
    a cost that exceeds the budget, and many other things. A lengthy penetration test
    might also cause an organization to lose all of its business from the client in
    the future.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will develop methodologies to conduct fast-paced penetration
    testing with automation tools and approaches in Metasploit. We will learn about
    the following:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
- en: Switching modules on the fly
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Automating post-exploitation
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Automating exploitation
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This automation testing strategy will not only decrease the time of testing,
    but will also decrease the cost per hour per person too.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
- en: Using pushm and popm commands
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Metasploit offers two great commands—namely `pushm` and `popm`. The `pushm`
    command pushes the current module onto the module stack, while `popm` pops the
    pushed module from the top of the module stack. However, this is not the standard
    stack available to processes. Rather, it is the utilization of the same concept
    by Metasploit; it is otherwise unrelated. Using these commands gives us speedy
    operations, which saves a lot of time and effort.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
- en: Consider a scenario where we are testing an internal server with multiple vulnerabilities.
    We have two exploitable services running on every system on the internal network.
    To exploit both the services on every machine, we require a fast switching mechanism
    between modules for both the vulnerabilities. In such cases, we can use `pushm`
    and `popm` commands. We can test a server for a single vulnerability using a module
    and can then push the module on the stack and load the other module. After completing
    tasks with the second module, we can pop the first module from the stack using
    the `popm` command with all the options intact.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
- en: 'Let us learn more about the concept using the following screenshot:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00257.jpeg)'
  id: totrans-11
  prefs: []
  type: TYPE_IMG
- en: 'From the preceding screenshot, we can see that we pushed the `psexec` module
    onto the stack using the `pushm` command, and then we loaded the `exploit/multi/handler`
    module. As soon as we are done with carrying out operations with the `multi/handler`
    module, we can use the `popm` command to reload the `psexec` module from the stack,
    as shown in the following screenshot:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00276.jpeg)'
  id: totrans-13
  prefs: []
  type: TYPE_IMG
- en: We can clearly see that all the options for the `psexec` module were saved along
    with the module on the stack. Therefore, we do not need to set the options again.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
- en: Making use of resource scripts
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Metasploit offers automation through resource scripts. The resource scripts
    eliminate the need to set the options manually, setting up everything automatically,
    thereby saving the large amount of time needed to set up the payload and the module's
    options.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
- en: 'There are two ways to create a resource script—namely by creating the script
    manually or using the `makerc` command. I recommend the `makerc` command over
    manual scripting since it eliminates typing errors. The `makerc` command saves
    all the previously issued commands in a file, which can be used with the resource
    command. Let us see an example:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00034.jpeg)'
  id: totrans-18
  prefs: []
  type: TYPE_IMG
- en: We can see in the preceding screenshot that we launched an exploit handler module
    by setting up its associated payload and options such as `LHOST` and `LPORT`.
    Issuing the `makerc` command will save all these commands in a systematic way
    into a file of our choice, which in this case is `multi_hand`. We can see that
    `makerc` successfully saved the last six commands into the `multi_hand` resource
    file.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
- en: 'Let us use the `resource` script as follows:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00102.jpeg)'
  id: totrans-21
  prefs: []
  type: TYPE_IMG
- en: We can clearly see that just by issuing the `resource` command followed by our
    script, it replicated all the commands we saved automatically, which eliminated
    the task of setting up the options repeatedly.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
- en: Using AutoRunScript in Metasploit
  id: totrans-23
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Metasploit offers another great feature of using AutoRunScript. The AutoRunScript
    option can be populated by issuing the show advanced command. AutoRunScript automates
    post-exploitation, and executes once access to the target has been achieved. We
    can either set the AutoRunScript option manually by issuing `set AutoRunScript
    [script-name]`, or by using the `resource` script itself, which automates exploitation
    and post-exploitation together. AutoRunScript can also run more than one post-exploitation
    script by using the `multi_script` and `multi_console_command` modules as well.
    Let us take an example where we have two scripts, one for automating the exploitation
    and the second for automating the post-exploitation, as shown in the following
    screenshot:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: Metasploit还提供了另一个很棒的功能，即使用AutoRunScript。可以通过发出show advanced命令来填充AutoRunScript选项。AutoRunScript自动化了后渗透，并且一旦访问目标被实现，就会执行。我们可以通过手动设置AutoRunScript选项来设置AutoRunScript选项，方法是发出`set
    AutoRunScript [script-name]`，或者使用`resource`脚本本身，它可以自动化利用和后渗透。AutoRunScript也可以使用`multi_script`和`multi_console_command`模块运行多个后渗透脚本。让我们举个例子，我们有两个脚本，一个用于自动化利用，另一个用于自动化后渗透，如下截图所示：
- en: '![](img/00120.jpeg)'
  id: totrans-25
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00120.jpeg)'
- en: 'This is a small post-exploitation script that automates the `checkvm` (a module
    to check whether the target is running on a virtual environment) and `migrate`
    (a module that helps in migrating from the exploited process to safer ones) modules.
    Let us have a look at the following exploitation script:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个小的后渗透脚本，自动化了`checkvm`（用于检查目标是否在虚拟环境中运行的模块）和`migrate`（帮助从被利用的进程迁移到更安全进程的模块）。让我们看一下下面的利用脚本：
- en: '![](img/00139.jpeg)'
  id: totrans-27
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00139.jpeg)'
- en: The preceding `resource` script automates exploitation for the HFS file server
    by setting up all the required parameters. We also set the AutoRunScript option
    using the `multi_console_command` option, which allows the execution of multiple
    post-exploitation scripts. We define our post-exploitation script to `multi_console_command`
    using the `-rc` switch, as shown in the preceding screenshot.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的`resource`脚本通过设置所有必需的参数来自动化HFS文件服务器的利用。我们还使用`multi_console_command`选项设置了AutoRunScript选项，该选项允许执行多个后渗透脚本。我们使用`-rc`开关将我们的后渗透脚本定义为`multi_console_command`，如前面的截图所示。
- en: 'Let us run the exploitation script and analyze its results in the following
    screen:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们运行利用脚本并在下一个屏幕中分析其结果：
- en: '![](img/00107.jpeg)'
  id: totrans-30
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00107.jpeg)'
- en: 'We can clearly see in the preceding screenshot that soon after the exploit
    is completed, the `checkvm` and migrate modules are executed, which states that
    the target is a Sun VirtualBox Virtual Machine, and the process is migrated to
    notepad.exe process. The successful execution of our script can be seen in the
    following remaining section of the output:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以清楚地在前面的截图中看到，利用完成后不久，`checkvm`和migrate模块被执行，表明目标是Sun VirtualBox虚拟机，并且进程被迁移到notepad.exe进程。我们脚本的成功执行可以在输出的后续部分中看到：
- en: '![](img/00184.jpeg)'
  id: totrans-32
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00184.jpeg)'
- en: We successfully migrated to the notepad.exe process. However, if there are multiple
    instances of `notepad.exe`, the process migration may hop over other processes
    as well.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 我们成功迁移到了notepad.exe进程。但是，如果有多个`notepad.exe`实例，进程迁移也可能跳过其他进程。
- en: Using the multiscript module in the AutoRunScript option
  id: totrans-34
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用AutoRunScript选项中的multiscript模块
- en: 'We can also use a `multiscript` module instead of a `multi_console_command`
    module. Let us create a new post-exploitation script as follows:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以使用`multiscript`模块而不是`multi_console_command`模块。让我们创建一个新的后渗透脚本，如下所示：
- en: '![](img/00220.jpeg)'
  id: totrans-36
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00220.jpeg)'
- en: 'As we can clearly see in the preceding screenshot, we created a new post-exploitation
    script named `multi_scr.rc`. We need to make the following changes to our exploitation
    script to accommodate the change:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们在前面的截图中清楚地看到的，我们创建了一个名为`multi_scr.rc`的新的后渗透脚本。我们需要对我们的利用脚本进行以下更改以适应这一变化：
- en: '![](img/00161.jpeg)'
  id: totrans-38
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00161.jpeg)'
- en: 'We simply replaced `multi_console_command` with `multiscript` and updated the
    path of our post-exploitation script, as shown in the preceding screenshot. Let
    us see what happens when we run the `exploit` script:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 我们只是用`multiscript`替换了`multi_console_command`，并更新了我们的后渗透脚本的路径，如前面的截图所示。让我们看看运行`exploit`脚本时会发生什么：
- en: '![](img/00167.jpeg)'
  id: totrans-40
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00167.jpeg)'
- en: 'We can clearly see that after access to the target is achieved, the `checkvm`
    module executes, which is followed by the `migrate`, `get_env`, and `event_manager`
    commands, as shown in the following screenshot:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以清楚地看到，在访问目标后，`checkvm`模块被执行，随后是`migrate`、`get_env`和`event_manager`命令，如下截屏所示：
- en: '![](img/00129.jpeg)'
  id: totrans-42
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00129.jpeg)'
- en: 'The `event_manager` module displays all the logs from the target system because
    we supplied `-i` switch, along with the command in our resource script. The results
    of the `event_manager` command are as follows:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '`event_manager`模块显示了来自目标系统的所有日志，因为我们在资源脚本中提供了`-i`开关以及命令。`event_manager`命令的结果如下：'
- en: '![](img/00156.jpeg)'
  id: totrans-44
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00156.jpeg)'
- en: Global variables in Metasploit
  id: totrans-45
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Metasploit中的全局变量
- en: 'Working on a particular range or a specific host, we can always use the `setg`
    command to specify the `LHOST` and `RHOST` options. Setting the options with the
    `setg` command will set the `RHOST` or `LHOST` options globally for every module
    loaded. Hence, the `setg` command eliminates the use of setting up these specific
    options repeatedly. We can also make use of the `setg` command over other options,
    such as `LPORT`, `RPORT`, and `payload`. However, different services run on different
    ports, and we may need to alter the payloads as well. Hence, setting up options
    that do not change from a module to another module is a better approach. Let us
    have a look at the following example:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 在特定范围或特定主机上工作时，我们可以始终使用`setg`命令来指定`LHOST`和`RHOST`选项。使用`setg`命令设置选项将为加载的每个模块全局设置`RHOST`或`LHOST`选项。因此，`setg`命令消除了重复设置这些特定选项的使用。我们还可以利用`setg`命令覆盖其他选项，如`LPORT`、`RPORT`和`payload`。然而，不同的服务在不同的端口上运行，我们可能也需要修改负载。因此，设置从一个模块到另一个模块不会改变的选项是一个更好的方法。让我们看看以下示例：
- en: '![](img/00250.jpeg)'
  id: totrans-47
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00250.jpeg)'
- en: We assigned `RHOST` with the `setg` command in the preceding screenshot. We
    can see that no matter how many times we change the module, the value of `RHOST`
    remains constant for all modules, and we do not need to enter it manually in every
    module. The get command fetches the value of a variable from the current context,
    while the `getg` command fetches the value of a global variable, as shown in the
    preceding screenshot.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的截图中，我们使用`setg`命令分配了`RHOST`。我们可以看到，无论我们多少次更改模块，`RHOST`的值对于所有模块都保持不变，我们不需要在每个模块中手动输入它。get命令从当前上下文中获取变量的值，而`getg`命令从全局变量中获取值，如前面的截图所示。
- en: Wrapping up and generating manual reports
  id: totrans-49
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结和生成手动报告
- en: Let us now discuss how to create a penetration test report and see what is to
    be included, where it should be included, what should be added or removed, how
    to format the report, the usage of graphs, and so on. Many people, such as managers,
    administrators, and top executives, will read the report of a penetration test.
    Therefore, it's necessary for the findings to be well organized so that the correct
    message is conveyed to those involved and is understood by the target audience.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们现在讨论如何创建渗透测试报告，看看应该包括什么，应该在哪里包括，应该添加或删除什么，如何格式化报告，使用图表等。许多人，如经理、管理员和高级管理人员，都会阅读渗透测试报告。因此，有必要对发现进行良好的组织，以便向涉及方传达正确的信息，并被目标受众理解。
- en: The format of the report
  id: totrans-51
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 报告格式
- en: 'A good penetration testing report can be broken down into the following elements:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 一个良好的渗透测试报告可以分解为以下元素：
- en: Page design
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 页面设计
- en: Document control
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 文档控制
- en: Cover page
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 封面页
- en: Document properties
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 文档属性
- en: List of the report's contents
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 报告内容列表
- en: Table of contents
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 目录
- en: List of illustrations
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 插图列表
- en: Executive/high-level summary
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 执行/高级摘要
- en: Scope of the penetration test
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 渗透测试范围
- en: Severity information
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 严重程度信息
- en: Objectives
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 目标
- en: Assumptions
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 假设
- en: Summary of vulnerabilities
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 漏洞摘要
- en: Vulnerability distribution chart
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 漏洞分布图
- en: Summary of recommendations
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 建议摘要
- en: Methodology/technical report
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 方法论/技术报告
- en: Test details
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 测试细节
- en: List of vulnerabilities
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 漏洞列表
- en: Likelihood
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可能性
- en: Recommendations
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 建议
- en: References
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 参考文献
- en: Glossary
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 术语表
- en: Appendix
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 附录
- en: 'Here is a brief description of some of the relevant sections:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一些相关部分的简要描述：
- en: '**Page design**: This refers to the choice of fonts, headers and footers, colors,
    and other design elements that are to be used in the report.'
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**页面设计**：这指的是报告中要使用的字体、页眉和页脚、颜色和其他设计元素的选择。'
- en: '**Document control**: General properties about the report are covered here.'
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**文档控制**：这里涵盖了关于报告的一般属性。'
- en: '**Cover page**: This consists of the name of the report, as well as the version,
    time and date, target organization, serial number, and so on.'
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**封面页**：包括报告的名称、版本、时间和日期、目标组织、序列号等。'
- en: '**Document properties**: This section contains the title of the report, the
    name of the tester, and the name of the person who reviewed this report.'
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**文档属性**：此部分包含报告的标题、测试人员的姓名以及审阅此报告的人的姓名。'
- en: '**List of the report''s contents**: This section includes the contents of the
    report. Their location in the report is shown using clearly defined page numbers.'
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**报告内容列表**：此部分包括报告的内容。使用清晰定义的页码显示它们在报告中的位置。'
- en: '**Table of contents**: This section includes a list of all the contents, organized
    from the start to the end of the report.'
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**目录**：此部分包括从报告开始到结束的所有内容的列表。'
- en: '**List of illustrations**: All the figures used in the report are to be listed
    with the appropriate page numbers in this section.'
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**插图列表**：报告中使用的所有图表都应在此部分列出，并附有适当的页码。'
- en: The executive summary
  id: totrans-84
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 执行摘要
- en: 'The executive summary contains the complete summarization of the report in
    a standard and nontechnical text that focuses on providing knowledge to the senior
    employees of the company. It contains the following information:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 执行摘要包含了报告的完整总结，以标准和非技术性的文本为重点，旨在向公司的高级员工提供知识。它包括以下信息：
- en: '**The scope of the penetration test**: This section includes the type of tests
    performed and the systems that were tested. All the IP ranges that were tested
    are also listed in this section. Moreover, this section also contains severity
    information about the test.'
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**渗透测试范围**：此部分包括执行的测试类型和测试的系统。在此部分还列出了测试的所有IP范围。此外，此部分还包含了有关测试的严重程度信息。'
- en: '**Objectives**: This section will define how the test will be able to help
    the target organization, what the benefits of the test will be, and so on.'
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**目标**：此部分将定义测试如何能够帮助目标组织，测试的好处是什么等。'
- en: '**Assumptions made**: If the scope of the test calls for an internal assessment,
    the assumption would be that the attacker has already gained internal access via
    out-of-scope methods, such as phishing or SE. Therefore, any such assumptions
    made should be listed in this section.'
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Summary of vulnerabilities**: This section provides information in a tabular
    form and describes the number of found vulnerabilities according to their risk
    level—high, medium, or low. The vulnerabilities are ordered from those that would
    have the largest impact on the assets to those that would have the smallest impact.
    Additionally, this phase contains a vulnerability distribution chart for multiple
    issues with multiple systems. An example of this can be seen in the following
    table:'
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '| **                    Impact** | **Number of vulnerabilities** |'
  id: totrans-90
  prefs: []
  type: TYPE_TB
- en: '|                     High | 19 |'
  id: totrans-91
  prefs: []
  type: TYPE_TB
- en: '|                     Medium | 15 |'
  id: totrans-92
  prefs: []
  type: TYPE_TB
- en: '|                     Low | 10 |'
  id: totrans-93
  prefs: []
  type: TYPE_TB
- en: '**Summary of recommendations**: The recommendations to be made in this section
    are only for the vulnerabilities with the highest impact factor, and they are
    to be listed accordingly.'
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Methodology/network admin-level report
  id: totrans-95
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This part of the report includes the steps to be performed during the penetration
    test, in-depth details about the vulnerabilities, and recommendations. The following
    information is the section of interest for the administrators:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
- en: '**Test details**: This part of the report includes information related to the
    summarization of the test in the form of graphs, charts, and tables for vulnerabilities,
    risk factors, and the systems infected with these vulnerabilities.'
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**List of vulnerabilities**: This section of the report includes the details,
    location, and the primary cause of the vulnerabilities.'
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Likelihood**: This section explains the probability of these vulnerabilities
    being targeted by attackers. To get the values for this likelihood, we analyze
    the ease of access in triggering a particular vulnerability and find out the easiest
    and the most difficult test against the vulnerabilities that can be targeted.'
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Recommendations**: Recommendations for patching the vulnerabilities are to
    be listed in this section. If a penetration test does not recommend patches, it
    is considered only half-finished.'
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Additional sections
  id: totrans-101
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The following sections are optional ones, and may differ from report to report:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
- en: '**References**: All the references taken while the report is made are to be
    listed here. References such as a book, website, article, and so on are to be
    defined clearly, with the author, publication name, year of publication or date
    of the published article, and so on.'
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Glossary**: All the technical terms used in the report are to be listed here
    along with their meaning.'
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Appendix:** This section is an excellent place to add miscellaneous scripts,
    codes, and images.'
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Summary and preparation for real-world scenarios
  id: totrans-106
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter allowed us to work on speeding up the process of a penetration
    test by automating exploitation and post-exploitation using multiple types of
    resource scripts. We also saw the usage and benefits of `pushm`, `popm`, and variable
    globalization. By the end, we saw how we could design professional reports and
    how the various sections of the report are to be rendered.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
- en: Before we begin [Chapter 7](part0126.html#3O56S0-a731d733dba14ccabae643b74e2c8790),
    *Exploiting Real-World Challenges with Metasploit*, it is advised that you run
    through all the examples covered in the book so far and learn each and every method
    covered in detail. However, no book will help you hone your skills unless you
    practice each and every thing while enhancing your research capabilities.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
- en: 'We will make use of each and every technique learned in the previous chapters
    to solve the challenges in the next one, while learning some new technologies.
    You can practice the following exercises before reading through [Chapter 7](part0126.html#3O56S0-a731d733dba14ccabae643b74e2c8790),
    *Exploiting Real-World Challenges with Metasploit*:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将利用前几章学到的每一种技术来解决下一章的挑战，同时学习一些新技术。在阅读[第7章](part0126.html#3O56S0-a731d733dba14ccabae643b74e2c8790)
    *使用Metasploit利用真实世界的挑战* 之前，你可以练习以下练习：
- en: Create post-exploitation scripts for meterpreter handlers for both Linux and
    Windows operating systems
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为Linux和Windows操作系统的meterpreter处理程序创建后利用脚本
- en: Imagine that you are a part of a law enforcement organization, and pen down
    the most notable exploitation and post-exploitation modules
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 想象你是执法机构的一部分，并记录下最显著的利用和后利用模块
- en: Imagine that you are a professional penetration tester and repeat the preceding
    exercise
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 想象你是一名专业的渗透测试人员，并重复前面的练习
- en: Try running meterpreter through a proxy and analyze the changes observed in
    different modules
  id: totrans-113
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 尝试通过代理运行meterpreter，并分析不同模块中观察到的变化
- en: Try combining the power of open source vulnerability scanners—such as OpenVAS—with
    Metasploit, while saving time for testing
  id: totrans-114
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 尝试结合开源漏洞扫描工具（如OpenVAS）与Metasploit的力量，同时节省测试时间。
- en: Try escalating privileges on Windows 2003, Windows 2008, and Windows 2012 servers
    and pen down the module differences
  id: totrans-115
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 尝试提升Windows 2003、Windows 2008和Windows 2012服务器的权限，并记录模块之间的差异
- en: '[Chapter 7](part0126.html#3O56S0-a731d733dba14ccabae643b74e2c8790), *Exploiting
    Real-World Challenges with Metasploit,* is complex and contains a variety of methods
    and exploitation scenarios. Be prepared before you proceed. All the best!'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: '[第7章](part0126.html#3O56S0-a731d733dba14ccabae643b74e2c8790) *使用Metasploit利用真实世界的挑战*
    是复杂的，包含各种方法和利用场景。在继续之前做好准备。祝你好运！'
