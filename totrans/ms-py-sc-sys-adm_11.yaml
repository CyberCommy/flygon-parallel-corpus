- en: Handling Emails Using Python Scripting
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you'll learn about how to use Python scripts to handle emails.
    You'll learn about the email message format. We're going to explore the `smtplib`
    module for sending and receiving emails. We're going to use the Python email package
    to send emails with attachments and HTML contents. You'll also learn about the
    different protocols used to handle emails.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, you''ll learn about the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Email message format
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding HTML and multimedia content
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: POP3 and IMAP servers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Email message format
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this section, we''re going to learn about the email message format. Email
    messages consist of three primary components:'
  prefs: []
  type: TYPE_NORMAL
- en: The receiver's email address
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The sender's email address
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The message
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There are other components also included in the message format, such as the
    subject line, email signatures, and attachments.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, we''re going to see a simple example of sending a plain text email from
    your Gmail address, in which you''ll learn about writing an email message and
    sending it. Now, create a script, `write_email_message.py`, and write the following
    content in it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the script and you''ll get the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding example, we used the `smtplib` Python module to send an email.
    Make sure you're sending an email from a Gmail ID to the receiver. The `sender`
    variable saves the sender's email address. In the `password` variable, you can
    either enter your password or you can prompt for a password using the `getpass`
    module. Here, we prompt for the password. Next, we created a variable named `msg`,
    which will be our actual email message. In that, we first mentioned a subject
    and then the message we want to send. Then, in `login()`, we mentioned the `sender`
    and `password` variables. Next, in `sendmail()`, we mentioned the `sender`, `receivers`,
    and `text` variables. So, using this process, we sent the email successfully.
  prefs: []
  type: TYPE_NORMAL
- en: Adding HTML and multimedia content
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we're going to see how we can send multimedia content as an
    attachment and how we can add HTML content. To do this, we'll use the Python `email`
    package.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we''ll see how we can add HTML content. For that, create a script, `add_html_content.py`,
    and write the following content in it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the script and you''ll get the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding example, we used the email package to send HTML content as
    a message through a Python script. We created a `msg` variable in which we stored
    HTML content.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, we''ll see how we can add an attachment and send it through a Python script.
    For that, create a script, `add_attachment.py`, and write the following content
    in it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the script and you''ll get the output as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding example, we sent an image as an attachment to the receiver.
    We mentioned the sender's and receiver's email IDs. Next, in `f_path`, we mentioned
    the path of the image that we're sending as an attachment. Next, we send that
    image as an attachment to the receiver.
  prefs: []
  type: TYPE_NORMAL
- en: POP3 and IMAP servers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, you'll learn about receiving emails via POP and IMAP servers.
    Python offers the `poplib` and `imaplib` libraries for receiving emails via Python
    scripts.
  prefs: []
  type: TYPE_NORMAL
- en: Receiving email using the poplib library
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**POP3** stands for **Post Office Protocol version 3**. This standard protocol
    helps you receive emails from a remote server to our local machine. The main advantage
    of POP3 is that it allows us to download emails on to our local machine and read
    the downloaded emails offline.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The POP3 protocol works on two ports:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Port `110`: The default non-encrypted port'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Port `995`: The encrypted port'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Now, we''ll see some examples. First, we''ll see an example where we get a
    number of emails. For that, create a script, `number_of_emails.py`, and write
    the following content in it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the script, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: As output, you'll get however many emails are present in your mailbox.
  prefs: []
  type: TYPE_NORMAL
- en: In the preceding example, first we're importing the `poplib` library, which
    is used in Python for the POP3 protocol to receive an email securely. Then, we
    state the specific email server and our email credentials—that is, our username
    and password. After that, we print the response message from the server and provide
    the username and password to the POP3 SSL server. After login, we get mailbox
    stats and print them to the Terminal in the form of a number of emails.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, we''re going to write a script to get the latest email. For that, create
    a script, `latest_email.py`, and write the following content in it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the script, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: As output, you'll get the latest mail you received in your mailbox.
  prefs: []
  type: TYPE_NORMAL
- en: In the preceding example, we imported the `poplib` library used in Python to
    supply the POP3 protocol to receive an email securely. After stating the specific
    email server and the username and password, we printined the response message
    from the server and providing the username and password to the POP3 SSL server.
    Then, we're fetching the latest email from the mailbox.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, we''re going to write a script to get all of the emails. For that, create
    a script, `all_emails.py`, and write the following content in it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the script, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: As output, you'll get all of the emails you've received in your mailbox.
  prefs: []
  type: TYPE_NORMAL
- en: Receiving email using the imaplib library
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: IMAP stands for Internet Message Access Protocol. It's used to access emails
    on a remote server through your local machine. IMAP allows simultaneous access
    by multiple clients to your email. IMAP is more suitable when you access your
    email via different locations.
  prefs: []
  type: TYPE_NORMAL
- en: 'The IMAP protocol works on two ports:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Port `143`: The default non-encrypted port'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Port `993`: The encrypted port'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Now, we''re going to see an example using the `imaplib` library. Create a script,
    `imap_email.py`, and write the following content in it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the script, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: As output, you'll get all of the emails from the specified folder.
  prefs: []
  type: TYPE_NORMAL
- en: In the preceding example, first, we're importing the `imaplib` library, which
    is used in Python to receive an email securely via the IMAP protocol. Then, we
    state the specific email server and our user credentials—that is, our username
    and password. After that, we provide that username and password to the IMAP SSL
    server. We're using the `'select('Inbox')'` function over `imap_obj` to display
    messages in the inbox. Then we use a `for` loop to display messages that have
    been fetched one by one. To display messages, we use "pretty print"—that is, the
    `pprint.pprint()`function-because it formats your object, writes it into the data
    stream, and passes it as an argument. Then, finally, the connection is closed.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we learned about how to write an email message in a Python
    script. We also learned about the Python `smtplib` module, which is used for sending
    and receiving emails via Python scripts. We also learned about how to receive
    emails through POP3 and IMAP protocols. Python supplies the `poplib` and `imaplib`
    libraries with which we can perform tasks.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, you'll learn about Telnet and SSH.
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: What are POP3 and IMAP?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What are break and continue used for? Give an appropriate example.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What is pprint?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What are negative indexes and why are they used?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What is the difference between the `pyc` and `py` file extensions?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Generate following pattern using looping''s:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
