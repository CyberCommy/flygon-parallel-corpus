- en: Chapter 10. Working with APIs
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: During the creation process of an application, in today's dynamic living and
    working environments, connecting your mobile application to a backend will facilitate
    the process of data storage and connection of data to companion web applications,
    which will provide users with enhanced capabilities and a satisfactory experience.
  prefs: []
  type: TYPE_NORMAL
- en: Introducing a backend into your project can be facilitated through the use of
    the `Parse.com` REST API. Parse offers an easy-to-use, straightforward, and scalable
    platform, which can be implemented within an application based on the Ionic framework.
  prefs: []
  type: TYPE_NORMAL
- en: As we go through this chapter, we will start off by setting up a Parse backend
    and an Ionic project. After this, we will create a connection between them to
    achieve our desired effect.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up Parse
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The first step that is required to get this project up and running is to visit
    [www.parse.com](http://www.parse.com) and create an account or log in to that
    site if you already have an account. In the free plan, you will get a file storage
    of 20 GB, a database storage of 20 GB, and the ability to transfer up to 2 TB
    of data.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you''re using `Parse.com` for the first time, you will be welcomed by the
    following screen:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Setting up Parse](img/B04653_10_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Let''s name the app `Ionic-ToDo`. Once the app has been created, you will see
    the following screen if this is the first application that you created with Parse.
    Make sure that you note down the **Application ID** and **REST API Key**:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Setting up Parse](img/B04653_10_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The next part involves proceeding to the **Data Browser**. In this view, click
    on **Add Class** in the sidebar. The role of a class is to store data in the Parse
    application instance. In our case, we will name the class `Todo` and choose **Custom**
    as the class type:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Setting up Parse](img/B04653_10_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'To finalize the class creation process, click on **Create Class**, and you
    will have your class ready. In the data browser, you''ll see that your newly created
    class already has some properties:'
  prefs: []
  type: TYPE_NORMAL
- en: '`objectId`: This is a unique ID that represents an individual `Todo` item in
    the collection'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`createdAt`: This tells us when the `Todo` item was added to Parse'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`updatedAt`: This tells us when the `Todo` item was last updated'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'In order to personalize the `Todo` application and allow for the creation of
    to-dos, we need a custom property to hold the contents of a `Todo` item. In the
    Data Browser, click on **+Col**, and the following dialog box will pop up:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Setting up Parse](img/B04653_10_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: For this property, we will choose **String** as the type of column and input
    `todo-content` in the name field. Conclude this process by clicking on **Create
    Column**, and we are done!
  prefs: []
  type: TYPE_NORMAL
- en: Once we have the class ready, we can start creating our Ionic app.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up the Ionic project
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We will create the Ionic app by running the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: This will create a blank Ionic starter app named `whichapp`, which will give
    us the necessary setup that is required to connect the Parse service to our project.
  prefs: []
  type: TYPE_NORMAL
- en: Connecting Parse to our project
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In order to connect the Parse data to our project, we will need to create an
    **AngularJS** service that performs the necessary CRUD operations to interact
    with the Parse REST API.
  prefs: []
  type: TYPE_NORMAL
- en: 'The code editor of our choice is Atom, the GitHub open source editor. Start
    by adding the project folder to Atom by navigating to it:'
  prefs: []
  type: TYPE_NORMAL
- en: '**File** | **Add Project Folder**'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a file named `services.js` with the following path:'
  prefs: []
  type: TYPE_NORMAL
- en: '**www** | **js** | **services.js**'
  prefs: []
  type: TYPE_NORMAL
- en: 'Start by connecting the `services`. Define the `service` as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: At this stage, our factory object `Todo` is an empty object, and we will need
    to add the necessary `Parse.com` API methods to it. It's important to note that
    the hostname is `https://api.parse.com` in all cases. `/1/` means that we are
    using version 1 of the API.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is the factory object with the five required methods:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'We will also need to declare the `PARSE_CREDENTIALS` `value` service, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Replace `yourappid` and `yourrestapikey` with your previously noted application
    ID and REST API key respectively.
  prefs: []
  type: TYPE_NORMAL
- en: Defining app states
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In order to connect the different apps'' functions, we will need to define
    some states for our app, which are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`todos`: This lists all the to-do items'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`createTodo`: This allows users to create a new to-do item'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`editTodo`: This allows users to update a to-do item'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The app states are defined in the `app.js` file named `whichfile`, which is
    available at the following path:'
  prefs: []
  type: TYPE_NORMAL
- en: '**www** | **js** | **app.js**'
  prefs: []
  type: TYPE_NORMAL
- en: 'Replace the existing `app.js` code with the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Creating controllers and templates
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Once you have defined the states, you need to create the controllers and provide
    a template for each of them. Since we would like to edit and create tasks in a
    list view, we will define the following three controllers:'
  prefs: []
  type: TYPE_NORMAL
- en: '`TodoListController`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`TodoCreationController`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`TodoEditController`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'In order to implement the controllers, we will need to create a new file entitled
    `controllers.js`, which should be available at the following path:'
  prefs: []
  type: TYPE_NORMAL
- en: '**www** | **js** | **controllers.js**'
  prefs: []
  type: TYPE_NORMAL
- en: 'In this file, we will declare all our controllers `whichcontrollers`, which
    will be done with the help of the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: For each controller, we require templates to present the controllers. We will
    start off with the `todo` list controller, which uses `ion-list` to display all
    the items in the `todo` list. In order to start off with this process, we will
    create a new folder in `www`, which will be named views. Within the views folder,
    we then need to design three new HTML files named create-`todo.html`, `edit-todo.html`,
    and `todos.html`.
  prefs: []
  type: TYPE_NORMAL
- en: 'For `todos.html`, we need to declare the `ion-list` UI element as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'The creation of a new `todo` list is presented with a text area and an **Add**
    button. When you click on this button, the `$scope.create()` method gets called.
    Navigate to **create** | **todo.html**. This should be presented in the code as
    follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'The ability of editing a `todo` list is a necessary feature in any to-do list
    app, and in our project, we will create an `edit-todo.html` file that allows the
    modification of an existing to-do item, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Testing our application
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: At this stage, we have produced the basic functionality of our application and
    we are ready to test the application in the browser.
  prefs: []
  type: TYPE_NORMAL
- en: 'On your terminal, navigate to the project directory. Once you''re in the project
    folder, run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'When you execute the command, your browser will automatically load live screenshots
    of the application running in Android and iOS side by side. The screen will look
    like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Testing our application](img/B04653_10_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: At this stage, once you add new items, they might not show up instantly within
    your application and you will be required to refresh the page.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When connecting the app to APIs, the topics that we covered in this chapter
    are just the tip of the iceberg as regards the possibilities. There are endless
    opportunities available if you wish to extend such an application, from the perspective
    of the UI to the API extensibility.
  prefs: []
  type: TYPE_NORMAL
- en: First, we can provide an option of deleting or archiving the completed to-do
    lists. We can also add an option of a pull-to-refresh feature in order to update
    lists of to-do items. From the point of view of user experience, we can add more
    interactive controls, such as swiping to the left or right to mark a to-do item
    as a completed task. The basis of the knowledge that we have built in this chapter
    will make you familiar with the necessary concepts that are required to take on
    more complex tasks, which will be faced by us in the next chapter.
  prefs: []
  type: TYPE_NORMAL
