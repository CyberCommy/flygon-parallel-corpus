- en: Chapter 11. Spring with Thymeleaf Integration
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Thymeleaf is a template engine that is completely written in Java. It supports
    XML/XHTML/HTML5, and that means we can develop templates using XML or XHTML or
    HTML5 using the Thymeleaf template engine library. It provides an optional module
    for Spring MVC and Spring Web Flow integration. Template engines help us to create
    reusable components in the UI. Template usually by convention consists of a header,
    menu, message, body, content and footer components. The content part is loaded
    dynamically with messages. We can create different layouts with a template.
  prefs: []
  type: TYPE_NORMAL
- en: Thymeleaf can be used instead of JSP. We have so far used tiles with JSP for
    making templates with custom tags. Thymeleaf templates are XHTML, XML, HTML5 template
    engines. Even web designers can easily interact with it. The expression language
    used is very much advanced compared to the JSP expression language.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we shall demonstrate how to integrate Spring MVC with the Thymeleaf
    template. We shall see how to get started with Spring Thymeleaf with available
    dependency.
  prefs: []
  type: TYPE_NORMAL
- en: Thymeleaf attributes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let's look at some of the basic attributes that Thymeleaf provides for designing
    a page. We shall also look at the how it interacts with Java object and loops.
    Thymeleaf uses a lot of attributes.
  prefs: []
  type: TYPE_NORMAL
- en: 'To display a message:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'To display a loop, we have `th:each`:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, lets look at a form submit action:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'If we have to button submit, then add:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Spring Thymeleaf dependency
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To get started with the Thymeleaf template engine, we need to add the following
    dependency in the `pom.xml` file:'
  prefs: []
  type: TYPE_NORMAL
- en: 'The Thyemleaf library:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`groupId`: `org.thymeleaf`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`artifactId`: `thymeleaf`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`version`: 2.1.4 Release'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The Spring-Thymeleaf plugin library:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`groupId`: `org.thymeleaf`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`artifactId`: `thymeleaf-spring4`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`version`: 2.1.4\. Release'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'For testing the framework (the note version does not necessarily match that
    of the core), Thymeleaf requires Java SE 5.0 or newer. Besides, it depends on
    the following libraries:'
  prefs: []
  type: TYPE_NORMAL
- en: unbescape 1.1.0 or later
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ONGL 3.0.8 or later
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Javassist 3.16.1-GA or later
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: slf4j 1.6.6 or later
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Additionally, if you use the LEGACYHTML5 template mode, you will need the NekoHTML
    1.9.21 or later
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Spring MVC and Thymeleaf
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this section, let's look at configuring Thymeleaf in a Spring MVC framework.
    We can also use the `SpringContext.xml` file for Thymeleaf configuration, but
    since we have seen a lot of such examples in which have performed a configuration
    in an XML file, we shall look at adding configuration in a Java file using Spring
    annotations. Let us create a simple class `CustomPacktConfiguration` and use `@Configuration`
    annotation for the class, which tells the framework that this class has the configurations.
  prefs: []
  type: TYPE_NORMAL
- en: In the configuration class, set the template mode to the format used in the
    application, that is whether it is XHTML or XML template. Then we need to set
    the template configuration to the `thymeleafviewResolver` object and also we need
    to actually pass the `templateResolver` class.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: MVC with Spring Thymeleaf
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this section, we will go deeper into Thymeleaf integration in the Spring
    application, and develop a simple MVC application that lists authors and allows
    the user to add, edit and delete authors. An advantage of having done the configuration
    in a Java file rather than in an XML file is the code security. Your XML can easily
    be changed, but in case of configuration in the Java file, we may have to deploy
    the class file on to the server to see the changes. In this example, let us use
    `JavaConfig` approach to configure the beans. We can omit the XML configuration
    files.
  prefs: []
  type: TYPE_NORMAL
- en: Let us first start with the controller, it has methods to insert and list the
    authors available in the database.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Next define the custom `RuntimeException` by extending the `RuntimeException`
    class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: In this step, we will start with the Thymeleaf service, and write an interface
    and implementing class.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The interface depicts the methods used in the interface:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Next we shall implement the interface:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Let us implement the repository class used in the application service implementation
    class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Next implement the Model class (`Author` and `AuthorData`) in the application.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Let''s implement the `Author` class first:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, let us implement the `AuthorData` class:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'In this step, we will create the configuration class; as discussed earlier,
    we are not using XML for configuration. We have two configuration files—we are
    using MongoDB for database configuration and the other is the component scan configuration
    file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'This class is an important class that marks the beginning of the application
    instantiation. Here, we have also configured the Thymeleaf template view resolver
    and provided the component scan information. The template and view resolver have
    also been configured in the class:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'The next step is to create HTML files under the `WEB-INF` folder create a `home.html`
    file as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'Lastly, create a simple `results.html` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: This would give the user a list of authors and a form for inserting author information
    into the MongoDB database, using the Thymeleaf template.
  prefs: []
  type: TYPE_NORMAL
- en: Spring Boot with Thymeleaf and Maven
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we will see how we can use Spring boot to create a Spring with
    Thymeleaf application.
  prefs: []
  type: TYPE_NORMAL
- en: 'The pre-requisite for this operation is Maven, which should be installed. To
    check if Maven is installed, type the following command in to the Command Prompt:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'Use the archetype to generate a Spring boot with a `thymeleaf` project:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: The preceding command will create a `spring-boot-thymeleaf` directory. This
    can be imported into Eclipse IDE.
  prefs: []
  type: TYPE_NORMAL
- en: 'You will open the `pom.xml` file and add a `parent` project:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'Start adding a dependency to the `pom.xml` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'Lastly add the Spring boot plugin:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: Let us start modifying the web. But wait a moment—this is not the web application!
  prefs: []
  type: TYPE_NORMAL
- en: 'So, let''s modify the `App` class so that it is the entry point to the Spring
    Boot application:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, let''s configure the Thymeleaf template. To configure it we need to add
    templates under the `src/main/resources/templates` directory:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'You can upgrade the Thymeleaf template by adding CSS and JavaScript reference
    as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: Spring boot supports WebJars out of the box. Add the following dependencies
    to the `pom.xml` file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'And reference the libraries in the templates as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: As you can see, for static prototyping, libraries are downloaded from the CDN,
    converting the packaging from JAR to WAR
  prefs: []
  type: TYPE_NORMAL
- en: 'It is fairly easy with Spring boot to run this project as a plain web application.
    Firstly, we need to convert the type of packaging in `pom.xml` from JAR to WAR
    (the packaging element). Secondly, make sure that Tomcat is a provided dependency:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'We also need to create a controller to handle the application requests:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'The last step is to Bootstrap a servlet configuration. Create a `Init` class
    and inherit from `SpringBootServletInitializer`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'We can check if the configuration works with Maven using the `mvn clean package`
    command. The WAR file will be created:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'Use Maven to start the application from the WAR file directly using the following
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: After creating a WAR project, we will run the application in Eclipse. After
    we have changed the packaging, Eclipse will detect the changes in the project
    and add a web facet to it. The next step is to configure the Tomcat server and
    run it. Navigate to **Edit Configurations**, and add the Tomcat server with an
    exploded WAR artefact. Now you can run the application as any other web application.
  prefs: []
  type: TYPE_NORMAL
- en: Reloading Thymeleaf templates
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Since the application is running on a local Tomcat server in Eclipse, we will
    reload static resources (for example, CSS files) without restarting the server.
    But, by default, Thymeleaf caches the templates, so in order to update Thymeleaf
    templates we need to change this behaviour.
  prefs: []
  type: TYPE_NORMAL
- en: Add the `application.properties` to `src/main/resources` directory with the
    `spring.thymeleaf.cache=false` property
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Restart the server, and from now on you can reload Thymeleaf templates without
    restarting the server
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Changing the other configuration defaults
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The cache configuration is not the only available configuration we can adjust.
    Please look at the `ThymeleafAutoConfiguration` class to see what other things
    you can change. To mention a few: `spring.thymeleaf.mode`, `spring.thymeleaf.encoding`.'
  prefs: []
  type: TYPE_NORMAL
- en: Spring security with Thymeleaf
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Since we have used Spring security, we will have used custom login forms in
    JSP in our Spring application. In this section, let's see how we can introduce
    a Thymeleaf template for securing the Spring based application.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can use Spring securing dialects like this to display the logged in user
    information. The attribute `sec:authorize` renders its content when the attribute
    expression is evaluated to `True`. You can use this code in the base file which
    is displayed after successful authentication:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: As we know, the following are a few necessary steps that we perform to add Spring
    security to our Spring application. But, you will observe that we have configured
    an HTML file which is a Thymeleaf file.
  prefs: []
  type: TYPE_NORMAL
- en: Configure the Spring security filter.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Configure the `applicationContext-springsecurity.xml` file as a context parm.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Configure the URL that needs to be secured in `applicationContext-springsecurity.xml`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'A sample configuration would look like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'Configure the Spring Controller:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s look at the `Login.html` file, which is Thymeleaf file. This can be
    recognised with XMLNS given in the beginning of the file. Also observe that we
    are handling the error in the JSP file; when login fails it shows an error message.
    We will also create an `error.html` file to handle errors:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: 'This step is all about configuring the error page. The error page can be configured
    in a `web.xml` file. First, we need to add the `<error-page>` tag to the `web.xml`
    file. Once we configure the error page, we need to inform the controller class
    about the error page:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: 'Add the request mapping for the `error` page in the controller:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: Visit [http://www.thymeleaf.org/doc/tutorials/2.1/usingthymeleaf.html](http://www.thymeleaf.org/doc/tutorials/2.1/usingthymeleaf.html)
    for more details.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we have seen how we can integrate the Thymeleaf template engine
    into a Spring MVC application, and also how to use Spring boot to start a Spring
    with Thymeleaf application. We have also demonstrated creating custom forms for
    Spring security using a Spring Thymeleaf template.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will look at Spring with web service integration and
    see what it offers to develop SOAP and REST Web Services.
  prefs: []
  type: TYPE_NORMAL
