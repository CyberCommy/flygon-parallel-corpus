- en: '*Chapter 10*: Deploying Qt Applications'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In earlier chapters, you learned how to develop and test an application using
    Qt 6\. Your application is ready and running on your desktop, but it is not standalone.
    You must follow certain steps to ship your application so that it can be used
    by end customers. This process is known as **deployment**. Generally, your end
    users want a single file that they can double-click to launch your software. Software
    deployment comprises different steps and activities that are required to make
    software available to its intended users who may not have any technical knowledge.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, you will learn to deploy a Qt project on different platforms.
    Throughout, you will learn about the available deployment tools and important
    points to consider when creating a deployment package.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Deployment strategies
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Static versus dynamic builds
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Deploying on desktop platforms
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Qt Installer framework
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Other installation tools
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Deploying on Android
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: By the end of this chapter, you will be able to create a deployable package
    and share it with others.
  prefs: []
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The technical requirements for this chapter include minimum versions of Qt 6.0.0
    and Qt Creator 4.14.0 installed on the latest desktop platform, such as Windows
    10 or Ubuntu 20.04 or macOS 10.14.
  prefs: []
  type: TYPE_NORMAL
- en: 'All the code used in this chapter can be downloaded from the following GitHub
    link: [https://github.com/PacktPublishing/Cross-Platform-Development-with-Qt-6-and-Modern-Cpp/tree/master/Chapter10/HelloWorld](https://github.com/PacktPublishing/Cross-Platform-Development-with-Qt-6-and-Modern-Cpp/tree/master/Chapter10/HelloWorld).'
  prefs: []
  type: TYPE_NORMAL
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: The screenshots used in this chapter are taken on the Windows platform. You
    will see similar screens based on the underlying platforms in your machine.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding the need for deployment
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The process of making software work on a target device, whether it's a test
    server, a production environment, a user's desktop, or mobile device, is known
    as **software deployment**. Typically, end users want a single file that they
    can open to access your application. The user will not want to go through several
    processes to obtain various alien files. Usually, users look for software that
    they can launch with a double click or tap. The user will not want to go through
    a series of steps to obtain a number of unknown files. In this chapter, we will
    discuss the steps and things to consider while deploying a Qt application. We
    will discuss deploying the application on Windows, Mac, Linux, and Android platforms.
  prefs: []
  type: TYPE_NORMAL
- en: We've just been running debug versions of the applications we've built so far.
    You should make release binaries for generating deployment packages. The difference
    between these two alternatives is that the debug version includes information
    about the code you write, making it much easier to debug if you encounter issues.
    However, you do not want to send multiple files to users because this is useless
    for them. Users just want to run your application. That is why you must provide
    them with your application's release version. So, to ship the app, we'll create
    it in release mode, which will give us a release binary that we can deliver to
    our users. Once you've got the binaries, you'll need to create separate packages
    depending on which platform you want to deploy your application. If you want to
    deploy on Windows, you're going to take a specific approach, and the same will
    apply to Linux, macOS, or Android.
  prefs: []
  type: TYPE_NORMAL
- en: 'A standard Qt deployment package consists of a single executable file, but
    it requires the presence of additional files in order to run. Aside from the executable
    file, the following files will be required:'
  prefs: []
  type: TYPE_NORMAL
- en: Dynamic libraries
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Third-party libraries
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Add-on modules
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Distributable files
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Qt plugins
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Translation files
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Help files
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Licenses
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: When we start a Qt project in Qt Creator, it is set to use dynamic linking by
    default. Therefore, our app will require the Qt dynamic link libraries. We will
    also require C++ runtime of your favorite compiler (MinGW/MSVC/Clang/GCC) and
    standard library implementations. These are usually available as `.dll` file on
    Windows, `.so` file on Linux and `.so`, or `.dylib` file on macOS. If your project
    is a large complex project, you may have multiple libraries. Your application
    package may also require third-party libraries such as opengl, libstdc++, libwinpthread,
    and openssl.
  prefs: []
  type: TYPE_NORMAL
- en: If your application is based on Qt Quick, then you will also require standard
    modules such as QtQuick, QtQml, QtStateMachine, QtCharts, and Qt3D. They are supplied
    as dynamic libraries, with some extra files providing QML module metadata, or
    as pure QML files. Unfortunately, the dynamic libraries that implement Qt's C++
    and QML APIs are insufficient to allow our executable to run. Qt also uses plugins
    to enable extensions, as well as for fairly standard GUI capabilities such as
    image file loading and display. Similarly, some plugins encapsulate the platform
    on which Qt runs.
  prefs: []
  type: TYPE_NORMAL
- en: If you are using Qt's translation support, then you will also require the translation
    files to be deployed. We will discuss translation more in [*Chapter 11*](B16231_11_Final_ASB_ePub.xhtml#_idTextAnchor256),
    *Internationalization*. You may also need to deploy the documentation files if
    you are using the Qt Help framework or even simple PDF manuals. You may also need
    to deploy some icons or script or license agreements for your application. You
    also have to ensure that the Qt libraries can locate the platform plugins, documentation,
    and translations, as well as the intended executable file, by themselves.
  prefs: []
  type: TYPE_NORMAL
- en: Choosing between static and dynamic libraries
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You can build your Qt application using static linking or dynamic linking. When
    you build an application, the linker makes copies of all used library functions
    to the executable file using either of these two approaches. We assume that you
    are already aware of these two methods. In this section, we will discuss when
    to use static linking and when to use dynamic linking for your Qt application.
  prefs: []
  type: TYPE_NORMAL
- en: '`.a` file extension in Linux and the `.lib` file extension in Windows.'
  prefs: []
  type: TYPE_NORMAL
- en: '`.so` file extension in Linux and the `.dll` file extension in Windows.'
  prefs: []
  type: TYPE_NORMAL
- en: A static build consists of a single executable file. But in a dynamic build,
    you must take care of the dynamic libraries. Static builds are simpler as they
    may already have the Qt plugins and QML imports in the executable. The static
    build also facilitates `-static` configuration option specified. This mode of
    Qt application deployment is available only with a commercial license. You should
    avoid linking your application statically if you are an open source developer.
    Since we are using an open source Qt version in this book, we won't go through
    static builds in any more detail. Instead, we'll stick to the regular dynamic
    builds and deployments.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can learn more about deploying a Qt application with the aforementioned
    approaches at the following link:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://doc.qt.io/qt-6/deployment.html](https://doc.qt.io/qt-6/deployment.html).'
  prefs: []
  type: TYPE_NORMAL
- en: In the following sections, we are going to be focusing on the leading desktop
    and mobile platforms. We're not going to discuss embedded platforms as this is
    beyond the scope of this book.
  prefs: []
  type: TYPE_NORMAL
- en: Deploying on desktop platforms
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You have seen that there's a lot to consider when deploying a Qt application.
    Fortunately, Qt provides a tool that can assist us in this process by scanning
    the generated application binary, identifying all dependencies, and copying them
    to the deployment directory. We will deploy our application on various platforms
    to achieve different objectives, but the concepts will remain the same. Once we
    have our binary built, the first thing we need to do is add the dependencies so
    that the user can execute the application without difficulties.
  prefs: []
  type: TYPE_NORMAL
- en: There are two ways in which we may load the dependencies. We can do it manually
    or use certain tools that are provided by the Qt framework or by a third party.
    On Windows, we can use `windeployqt` to load our dependencies. On macOS, we can
    use `macdeployqt` to load our dependencies for our binary. There is also another
    tool called `linuxdeployqt` that you can use to add the dependencies to your binary.
    `linuxdeployqt` works well for our needs, and we're going to discuss it in this
    chapter. However, this Linux deploy utility tool is not official and is not supported
    by Qt. Once you have your binary generated, you need to find and add in the dependencies.
    You can do that manually or use one of these tools, depending on where you are,
    to deploy your application.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we will use a simple *HelloWorld* example to discuss how to
    deploy applications on different platforms. We will find the dependencies and
    create a standalone package. Let's begin with Windows deployment.
  prefs: []
  type: TYPE_NORMAL
- en: Deploying on Windows
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Most of the desktop applications that are built for Windows are usually delivered
    in two approaches. First, the application comes as a standalone application without
    any need for installation. In this approach, the application usually come as an
    executable file (`.exe`) with all dependent libraries inside the same directory.
    This type of application is known as a `.exe` or `.msi` format. You will learn
    to create an installable `.exe` file. In this section, we will discuss how to
    create standalone deployment packages with both approaches.
  prefs: []
  type: TYPE_NORMAL
- en: 'Follow these steps to create a portable application:'
  prefs: []
  type: TYPE_NORMAL
- en: First, create a simple Qt application. You can choose Qt Widget or a Qt Quick-based
    application. Here we will discuss the Qt Widget-based application. The procedure
    is the same for both types of applications.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Once you created the sample application, you can optionally add your application
    name, version, organization name, and domain by adding the few lines of code inside
    your `main.cpp` file, as shown here:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Once you created the application, build it in **Release** mode. You can change
    the **Build** mode in the build settings. **Release** mode creates a smaller binary
    as it eliminates the debug symbols. You can quickly change the build mode from
    the kit selector section by clicking on it and then selecting the **Release**
    option, as shown in *Figure 10.1*:![Figure 10.1 – Release option in Qt Creator
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_10.1_B16231.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 10.1 – Release option in Qt Creator
  prefs: []
  type: TYPE_NORMAL
- en: You can see that the binaries are created inside the **Release** directory.
    In this example, we are using *shadow build*. You can also change the release
    directory from the **General** section under the **Build Settings** screen:![Figure
    10.2 – Directory with release binaries
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_10.2_B16231.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 10.2 – Directory with release binaries
  prefs: []
  type: TYPE_NORMAL
- en: Now, create a deployment directory and copy the executable from the **Release**
    directory.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, double-click on the executable file. You will notice that the application
    failed to launch and that several error dialogs appear. The error dialogs will
    mention which library is missing. If you don't see these errors, then you might
    have already added the library path in the system environment. You can try it
    on a clean system where Qt libraries are not installed:![Figure 10.3 – Error showing
    Qt library dependency
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_10.3_B16231.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 10.3 – Error showing Qt library dependency
  prefs: []
  type: TYPE_NORMAL
- en: The next step is to find the missing Qt libraries that are required to run your
    application independently outside the IDE.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Since we are using an open source version of Qt and the dynamic linking approach
    here, you will notice that the missing libraries will have a `.dll` extension.
    Here, we saw that the missing library is `Qt6Core.dll`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The number of errors will depend on the number of modules used in the program.
    You can find the Qt dependent libraries from the `QTDIR/6.x.x/<CompilerName>/bin`
    directory. Here, `QTDIR` is where Qt 6 is installed. In our example, we have used
    *Qt 6.1.0* as the version and *mingw81_64* as the compiler, hence the path is
    `D:/Qt/6.1.0/mingw81_64/bin`. This path can vary as per your Qt installation path,
    Qt version, and chosen compiler. The following screenshot shows the presence of
    the dynamic libraries under the `bin` directory:![Figure 10.4 – Required Qt libraries
    inside the bin directory
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_10.4_B16231.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 10.4 – Required Qt libraries inside the bin directory
  prefs: []
  type: TYPE_NORMAL
- en: As illustrated in *Figure 10.4*, copy the missing `.dll` files to the recently
    created deployment directory.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Repeat the process until you have copied all the missing libraries mentioned
    in the error messages to the deployment directory. You may also have to deploy
    compiler-specific libraries along with your application. You can also find the
    dependent libraries by using the **Dependency Walker** (**depends.exe**) tool.
    This tool is a free tool specific to Windows. It provides a list of dependent
    libraries. However, in recent versions, the tool has not been very useful and
    often fails to provide the required information. There are few more tools you
    can experiment with such as PeStudio, MiTeC EXE Explorer, and CFF Explorer. Please
    note that I haven't explored these tools.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once you have copied all the missing libraries, try to run the application again.
    This time, you will notice that a new error pops up. On this occasion, the message
    relates to the platform plugin:![Figure 10.5 – Error dialog indicating a missing
    Qt platform plugin
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_10.5_B16231.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 10.5 – Error dialog indicating a missing Qt platform plugin
  prefs: []
  type: TYPE_NORMAL
- en: Create a directory called `platforms` inside the deployment directory:![Figure
    10.6 – Directory showing the Qt windows platform plugin
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_10.6_B16231.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 10.6 – Directory showing the Qt windows platform plugin
  prefs: []
  type: TYPE_NORMAL
- en: Then, copy the `qwindows.dll` file from `C:\Qt\6.x.x\<compiler_name>\plugins\platforms`
    to the new `platforms` subdirectory. *Figure 10.7* illustrates the organization
    of the files in the deployment directory:![Figure 10.7 – Copy platforms plugin
    inside the release directory
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_10.7_B16231.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 10.7 – Copy platforms plugin inside the release directory
  prefs: []
  type: TYPE_NORMAL
- en: Now, double-click on the `HelloWorld.exe` file. You will observe that the **HelloWorld!**
    GUI appears in no time. Now, the Qt Widgets application can be launched on a Windows
    platform that doesn't have Qt 6 installed:![Figure 10.8 – Standalone application
    running with resolved dependencies
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_10.8_B16231.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 10.8 – Standalone application running with resolved dependencies
  prefs: []
  type: TYPE_NORMAL
- en: The next and final step is to zip the folder and share it with your friends.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Congratulations! You have successfully deployed your first standalone application.
    However, this approach doesn't work well for a large project where we have many
    dependent files. Qt provides several handy tools for dealing with such challenges
    and creating an installation package easily. In the next section, we will discuss
    the Windows deployment tool and how it can help us deal with these challenges.
  prefs: []
  type: TYPE_NORMAL
- en: Windows deployment tool
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The Windows deployment tool comes with the Qt 6.x installation package. You
    can find it under `<QTDIR>/bin/` as `windeployqt.exe`. You can run this tool from
    the Qt command prompt and pass the executable file as the argument, or with a
    directory as the parameter. If you are building a Qt Quick application, you will
    have to additionally add the directory path of the `.qml` files.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s have a look at some of the important command-line options available
    in `windeployqt`. Explore some of the useful options in the following list:'
  prefs: []
  type: TYPE_NORMAL
- en: '`-?` or `-h` or `--help` displays help on command-line options.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`--help-all` displays help including Qt-specific options.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`--libdir <path>` copies dependent libraries to the path.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`--plugindir <path>` copies dependent plugins to the path.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`--no-patchqt` instructs not to patch the Qt6Core library.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`--no-plugins` instructs to skip plugin deployment.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`--no-libraries` instructs to skip library deployment.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`--qmldir <directory>` scans the QML imports from the source directory.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`--qmlimport <directory>` adds the given path to the QML module search locations.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`--no-quick-import` instructs to skip deployment of Qt Quick imports.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`--no-system-d3d-compiler` instructs to skip deployment of the D3D compiler.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`--compiler-runtime` deploys the compiler runtime on the desktop.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`--no-compiler-runtime` prevents deployment of the compiler runtime on the
    desktop.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`--no-opengl-sw` prevents deployment of the software rasterizer library.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'You can find the `windeployqt` tool inside the `bin` folder, as shown in the
    following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 10.9 – The windeployqt tool inside the bin directory'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_10.9_B16231.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 10.9 – The windeployqt tool inside the bin directory
  prefs: []
  type: TYPE_NORMAL
- en: 'The easiest way to use `windeployqt` is to add its path to the **Path** variable.
    To add it to **Path**, open **System Properties** on your Windows machine and
    then click on **Advance system settings**. You will find that the **System Properties**
    window appears. At the bottom of the **System Properties** window, you will see
    the **Environment Variables…** button. Click it and select the **Path** variable,
    as shown in the following screenshot. Then, click on the **Edit…** button. Add
    the path of the Qt bin directory and hit the **OK** button:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 10.10 – Adding the bin directory to the system environment path'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_10.10_B16231.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 10.10 – Adding the bin directory to the system environment path
  prefs: []
  type: TYPE_NORMAL
- en: 'Close the **System Properties** screen and launch the Qt command prompt. Then
    you can use the following syntax to create a deployment package for your Qt Widget-based
    application:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'If you are using Qt Quick, follow the next syntax:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Afterward, the tool will copy the identified dependencies to the deployment
    directory, ensuring that we have all of the required components in one location.
    It will also build the subdirectory structure for plugins and other Qt resources
    that you'd expect. If ICU and other files are not in the bin directory, they must
    be added to the **Path** variable before running the tool.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s begin with the same *HelloWorld* example. To create a deployment of
    the example using `windeployqt`, perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a deployment directory and copy the `HelloWorld.exe` file to the deployment
    directory.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now you can invoke the deployment tool, as shown here:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Once you enter the command, the tool will start gathering information about
    the dependencies:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: You will observe that the tool not only listed the dependencies but also copied
    the required files to the destination directory.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open the deployment directory and you will find that multiple files and directories
    have been added:![Figure 10.11 – windeployqt copied all required files to the
    deployment directory
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_10.11_B16231.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 10.11 – windeployqt copied all required files to the deployment directory
  prefs: []
  type: TYPE_NORMAL
- en: In the previous section, we had to identify and copy all the dependencies ourselves,
    but that task is now delegated to the `windeployqt` tool.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'If you are using a *Qt Quick application*, run the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'You can see that the tool has gathered the dependencies and copied the required
    files to the deployment directory:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: You can now double-click to launch your standalone application.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The next step is to zip the folder and share it with your friends.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The command-line options for the Windows deployment tool can be used to fine-tune
    the identification and copy process. The essential instructions may be found at
    the following links:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://doc.qt.io/qt-6/windows-deployment.html](https://doc.qt.io/qt-6/windows-deployment.html).'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://wiki.qt.io/Deploy_an_Application_on_Windows](https://wiki.qt.io/Deploy_an_Application_on_Windows).'
  prefs: []
  type: TYPE_NORMAL
- en: Cheers! You have learned to deploy a Qt application using the Windows deployment
    tool. However, there is still a lot of work to be done. The Qt Installer Framework
    provides several handy tools for dealing with such challenges and creating installable
    packages easily. In the next section, we will discuss the Linux deployment tool
    and how to use it to create a standalone application.
  prefs: []
  type: TYPE_NORMAL
- en: Deploying on Linux
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In Linux distributions, we have multiple options to deploy our application.
    You can use an installer, but you can also have an option such as an app bundle.
    There is a technology called `apt` on Debian, Ubuntu, or Fedora and your application
    can be used through this approach. However, you can choose a much simpler approach,
    like the app image option, which is going to provide you with one file. You can
    give that file to your users and they can just double-click to run the application.
  prefs: []
  type: TYPE_NORMAL
- en: 'Qt documentation provides certain instructions to deploy on Linux. You can
    have a look at the following link:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://doc.qt.io/qt-6/linux-deployment.html](https://doc.qt.io/qt-6/linux-deployment.html).'
  prefs: []
  type: TYPE_NORMAL
- en: Qt doesn't provide any ready-made tool similar to `windeployqt` for Linux distributions.
    This may be due to a large number of Linux flavors. However, there is an unofficial
    open source Linux deployment tool named `linuxdeployqt`. This takes an application
    as input and turns it into a self-contained package by replicating the project's
    resources into a bundle. Users can get the generated bundle as an `AppDir` or
    an `AppImage`, or it may be included in cross-distribution packages. With systems
    such as CMake, qmake, and make, it may be used as part of the build process to
    deploy applications written in C, C++, and other compiled languages. It can package
    specific libraries and components required to run the Qt-based application.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can download `linuxdeployqt` from the following link:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://github.com/probonopd/linuxdeployqt/releases](https://github.com/probonopd/linuxdeployqt/releases).'
  prefs: []
  type: TYPE_NORMAL
- en: You will get `linuxdeployqt-x86_64.AppImage` after the download and do `chmod
    a+x` before running it.
  prefs: []
  type: TYPE_NORMAL
- en: You can read the complete documentation and find the source code at [https://github.com/probonopd/linuxdeployqt](https://github.com/probonopd/linuxdeployqt).
  prefs: []
  type: TYPE_NORMAL
- en: If you want a single application package easily, then run `linuxdeployqt` with
    the `-appimage` flag.
  prefs: []
  type: TYPE_NORMAL
- en: There are also few more deployment tools such as **Snap** and **Flatpak** to
    package an application and its dependencies runs across multiple Linux distributions
    without making any modification.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can read on how to create a snap in the following link: [https://snapcraft.io/docs/creating-a-snap](https://snapcraft.io/docs/creating-a-snap%20)'
  prefs: []
  type: TYPE_NORMAL
- en: 'You can explore more about Flatpak by visiting the following link: [https://docs.flatpak.org/en/latest/qt.html](https://docs.flatpak.org/en/latest/qt.html%20)'
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, we will discuss the macOS deployment tool and how to use
    it to create a standalone application for your Mac users.
  prefs: []
  type: TYPE_NORMAL
- en: Deploying on macOS
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You can go through a similar process as discussed in previous sections to generate
    an installer file for the macOS. We will discuss the steps that you can follow
    to generate an app bundle. You can test the package on your macOS and send it
    to your Mac users. The process is pretty much the same as on Linux. After all,
    macOS is based on Unix. Therefore, you can create installers, which we call a
    bundle on the macOS.
  prefs: []
  type: TYPE_NORMAL
- en: You can find the macOS deployment tool inside `QTDIR/bin/macdeployqt`. It is
    designed to automate the process of creating a deployable application bundle that
    contains the Qt libraries as private frameworks. The Mac deployment tool also
    deploys the Qt plugins unless you specify the `-no-plugins` option. By default,
    Qt plugins such as platform, image format, print support, and accessibility are
    always deployed. SQL driver and SVG plugins are deployed only if it is used by
    the application. The designer plugins are not deployed. If you want to include
    a third-party library in the application bundle, you must manually copy the library
    into the bundle after it has been built.
  prefs: []
  type: TYPE_NORMAL
- en: A couple of years back, Apple launched a new filesystem called `.dmg` files.
    For compatibility with all versions of macOS currently supported by Qt, `macdeployqt`
    uses the older HFS+ filesystem by default. To choose a different filesystem, use
    the `-fs` option.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can find detailed instructions at the following link: [https://doc.qt.io/qt-6/macos-deployment.html](https://doc.qt.io/qt-6/macos-deployment.html).'
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, we will discuss the Qt Installer Framework and how to use
    it to create a complete installation package for your users.
  prefs: []
  type: TYPE_NORMAL
- en: Using the Qt Installer Framework
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The **Qt Installer Framework** (**QIFW**) is a collection of cross-platform
    tools and utilities for creating installers for the supported desktop Qt platforms,
    which include Linux, Windows, and macOS. It allows you to distribute your application
    across all supported desktop Qt platforms without having to rewrite the source
    code. The Qt Installer Framework tools create installers that include a collection
    of pages that help users through the installation, update, and removal processes.
    You provide the installable contents as well as information about it, such as
    the product name, the installer, and the legal agreement.
  prefs: []
  type: TYPE_NORMAL
- en: You may personalize the installers by adding widgets to the pre-defined pages
    or adding entire pages to give consumers more options. You may add operations
    to the installer by writing scripts. Depending on your use cases, you can give
    end customers an offline or online installation, or both. It works well on Windows,
    Linux, and Mac. We will use it to create installers for our application and we're
    going to see how this works in detail on Windows. The process followed for Linux
    and macOS is similar to Windows. So, we will only discuss the Windows platform.
    You can try similar steps on your favorite platform.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can learn more about the predefined pages at the following link: [https://doc.qt.io/qtinstallerframework/ifw-use-cases-install.html](https://doc.qt.io/qtinstallerframework/ifw-use-cases-install.html).'
  prefs: []
  type: TYPE_NORMAL
- en: 'Before starting the journey, confirm that Qt Installer Framework is installed
    on your machine. If it is not present, launch **Qt Maintenance Tool** and install
    it from the **Select Components** page, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 10.12 – The Qt Installer Framework download option in the Qt maintenance
    tool'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_10.12_B16231.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 10.12 – The Qt Installer Framework download option in the Qt maintenance
    tool
  prefs: []
  type: TYPE_NORMAL
- en: 'Once you have installed the application successfully, you will find the installation
    files under `QTDIR\Tools\QtInstallerFramework\`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 10.13 – Tools inside the Qt Installer Framework directory on Windows'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_10.13_B16231.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 10.13 – Tools inside the Qt Installer Framework directory on Windows
  prefs: []
  type: TYPE_NORMAL
- en: 'You can see that there are five executables created inside the Qt Installer
    Framework directory:'
  prefs: []
  type: TYPE_NORMAL
- en: The `archivegen` tool is used to package files and directories into 7zip archives.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `binarycreator` tool is used to create online and offline installers.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`devtool` is used to update an existing installer with a new installer base.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `installerbase` tool is the core installer that packs all data and meta
    information.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `repogen` tool is used to generate online repositories.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In this section, we will use the `binarycreator` tool to create the installer
    for our Qt application. This tool may be used to produce both offline and online
    installers. Some choices have default values, so you may leave them out.
  prefs: []
  type: TYPE_NORMAL
- en: 'To create an offline installer on your Windows machine, you can enter the following
    command to your Qt command prompt:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Similarly, to create an offline installer on your Linux or Mac machine, you
    can enter the following command to your Qt command prompt:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'For example, to create an offline installer, execute the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: The preceding instruction will create an offline installer for the SDK, containing
    all dependencies.
  prefs: []
  type: TYPE_NORMAL
- en: 'To create an online-only installer, you may use `--online-only`, which defines
    all the packages to install from an online repository on a web server. For example,
    to create an online installer, execute the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'You can learn more about `binarycreator` and the different options at the following
    page: [https://doc.qt.io/qtinstallerframework/ifw-tools.html#binarycreator](https://doc.qt.io/qtinstallerframework/ifw-tools.html#binarycreator).'
  prefs: []
  type: TYPE_NORMAL
- en: 'The easiest way to use `binarycreator` is to add its path to the `QIFW` bin
    directory and hit the **OK** button. The following screenshot illustrates how
    to do this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 10.14 – Adding the QIFW bin directory to the system environment path'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_10.14_B16231.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 10.14 – Adding the QIFW bin directory to the system environment path
  prefs: []
  type: TYPE_NORMAL
- en: Close the **System Properties** screen and launch the Qt command prompt.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s proceed to deploy our sample *HelloWorld* application. We''re going
    to create one installable package for our users so that they can double-click
    and install it:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a directory structure that matches the installer's design and allows
    it to be extended in the future. The `config` and `packages` subdirectories must
    be present in the directory. It doesn't matter where you put the directory for
    QIFW deployment; all that matters is that it has this structure.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Make a configuration file with instructions for building the installer binaries
    and online repositories. Create a file called `config.xml` in the config directory
    with the following content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: The `Title` tag gives the name of the installer that appears in the title bar.
    The application name is added to the page name and introductory text using the
    `Name` tag. The software version number is specified by the `Version` tag. The
    `Publisher` tag defines the software's publisher. The name of the default program
    group for the product in the Windows Start menu is specified by the `StartMenuDir`
    tag. The default destination directory presented to users is `InstallationDirectory`
    in the current user's home directory, as specified by the `TargetDir` tag. You
    can read about more tags in the documentation.
  prefs: []
  type: TYPE_NORMAL
- en: You can also specify the app bundle icon in `config.xml`. On Windows, it is
    extended with `.ico` and can be used as the application icon for the `.exe` file.
    On Linux, you can specify the icon with a `.png` extension and this can be used
    as the window icon. On macOS, you can specify the icon with `.icns` and this can
    be used as the icon for the newly produced bundle.
  prefs: []
  type: TYPE_NORMAL
- en: Now create a subdirectory inside the `packages` directory. This will be your
    `component` name. You can use your organization's name and application name or
    your organization domain as the `component` such as `CompanyName.ApplicationName`.
    The directory name functions as a domain-like identifier, identifying all components.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Make a package information file with details about the components that may be
    installed. In this simple example, the installer just has to deal with one component.
    Let’s create a package information file called `package.xml` inside the `packages\{component}\meta`
    directory.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add the file in side the meta-directory with the following content to provide
    information about the component to the installater.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Let''s create `package.xml` and add the following content to it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'The information from the following elements is displayed on the component selection
    page during installation:'
  prefs: []
  type: TYPE_NORMAL
- en: The `DisplayName` tag specifies the name of the component in the list of components.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `Description` tag specifies the text that is displayed when the component
    is selected.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `Version` tag enables you to promote updates to users when they become available.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `Default` tag specifies whether the component is selected by default. The
    value `true` sets the component as selected.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You can add licensing information to your installer. The name of the file that
    includes the text for the licensing agreement that is shown on the licensing check
    page is specified by the `License` tag.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You can copy the required content inside the `data` subdirectory under the `package`
    directory. Copy all the files and directories to the `data` subdirectory, which
    were earlier created with `windeployqt`. The following screenshot shows the content
    copied inside the `data` subdirectory:![Figure 10.15 – Contents generated by windeployqt
    copied inside the data subdirectory
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_10.15_B16231.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 10.15 – Contents generated by windeployqt copied inside the data subdirectory
  prefs: []
  type: TYPE_NORMAL
- en: 'The next step is to use the `binarycreator` tool to create the installer. Enter
    the following instruction to the Qt command prompt:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: You can see that an installer file got generated inside our deployment directory:![Figure
    10.16 – Installer package created inside the deployment directory
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_10.16_B16231.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: We have got the desired result. Now, let's run the installer to verify that
    the deployment package has been created properly.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Double-click on the installer file to begin the installation. You will see a
    nice setup wizard appear on screen:![Figure 10.17 – Setup wizard running a deployment
    example
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_10.17_B16231.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 10.17 – Setup wizard running a deployment example
  prefs: []
  type: TYPE_NORMAL
- en: Proceed through the pages to complete the installation. Exit the setup wizard.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, launch the application from the Windows **Start** menu. You should see
    the **HelloWorld** user interface appear in no time.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You can also find the installed application in **Add/Remove Programs**:![Figure
    10.18 – Deployment example entry in the Windows program list
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_10.18_B16231.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 10.18 – Deployment example entry in the Windows program list
  prefs: []
  type: TYPE_NORMAL
- en: 'You may use the maintenance tool installed along with the installation package
    to update, uninstall, and add components to the application. You can find the
    tool inside your installation directory, as shown in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 10.19 – Maintenance tool in the installation directory'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_10.19_B16231.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 10.19 – Maintenance tool in the installation directory
  prefs: []
  type: TYPE_NORMAL
- en: Congratulations! You have created an installer package for your sample application.
    Now you can ship your developed Qt application to your users and friends.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can also provide further customization with customized setup wizard pages.
    You can find the complete list of templates with installers that can be used with
    the QIFW at the following link:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://doc.qt.io/qtinstallerframework/ifw-customizing-installers.html](https://doc.qt.io/qtinstallerframework/ifw-customizing-installers.html)'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://doc.qt.io/qtinstallerframework/qtifwexamples.html](https://doc.qt.io/qtinstallerframework/qtifwexamples.html).'
  prefs: []
  type: TYPE_NORMAL
- en: 'You can explore more features of the framework here: [https://doc.qt.io/qtinstallerframework/ifw-overview.html](https://doc.qt.io/qtinstallerframework/ifw-overview.html).'
  prefs: []
  type: TYPE_NORMAL
- en: In this section, we created an installable package to ship to our end users.
    In the next section, we will learn to deploy on the Android platform.
  prefs: []
  type: TYPE_NORMAL
- en: Deploying on Android
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In addition to desktop platforms such as Windows, Linux, and macOS, mobile platforms
    are equally important due to the massive number of users. Many developers want
    to make their applications available on mobile platforms. Let's have a look at
    how that's done. We will briefly discuss deployment considerations on Android.
  prefs: []
  type: TYPE_NORMAL
- en: 'In [*Chapter 5*](B16231_05_Final_ASB_ePub.xhtml#_idTextAnchor103), *Cross-Platform
    Development*, you have learned how to create an `.apk` file, which is the deployment
    package for the Android platform. So, we won''t be discussing the steps again.
    In this section, we will discuss a few necessary changes before uploading to the
    play store:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a simple *HelloWorld* application using the Android Kit from the kit
    selection screen.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Change the build mode to **Release** mode.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open the build settings of your project. You will find several options on the
    screen:![Figure 10.20 – A screenshot showing the Android manifest option in build
    settings
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_10.20_B16231.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 10.20 – A screenshot showing the Android manifest option in build settings
  prefs: []
  type: TYPE_NORMAL
- en: You can see the **Keystore** field under the **Application Signature** section.
    Click on the **Browse…** button to select your existing keystore file or use the
    **Create…** button to create a new keystore file. It can protect key material
    from unauthorized use. This is an optional step and only required for signing
    your deployment binary.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When you click the **Create…** button, then you will see a dialog with several
    fields. Fill in the related fields and click on the **Save** button. *Figure 10.21*
    shows the keystore creation dialog:![Figure 10.21 – A screenshot showing the keystore
    creation screen
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_10.21_B16231.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 10.21 – A screenshot showing the keystore creation screen
  prefs: []
  type: TYPE_NORMAL
- en: Save the keystore file anywhere, making sure to end the filename with `.keystore`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The next step is to sign the application package. This is also an optional step
    and is only required for play store publication. You can learn more about application
    signing in the official documentation available at [https://developer.android.com/studio/publish/app-signing](https://developer.android.com/studio/publish/app-signing).
  prefs: []
  type: TYPE_NORMAL
- en: You can select the target Android version and configure your Android app by
    creating the `AndroidManifect.xml` file with Qt Creator. To do that, click on
    the **Create** **Templates** button on the **Build Android APK** screen. You will
    see a dialog appear, as shown in the following screenshot:![Figure 10.22 – A screenshot
    showing the manifest file creation wizard
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_10.22_B16231.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 10.22 – A screenshot showing the manifest file creation wizard
  prefs: []
  type: TYPE_NORMAL
- en: Open the manifest file. You will see several options for your Android application.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You can set the package name, version code, SDK version, application icon, permissions,
    and so on. If you add a unique icon, then the default Android icon for your app
    won't appear on the device. It will make your application unique and easily discoverable
    on screen.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Let's add *HelloWorld* as the application name and add the Qt icon as our application
    icon, as shown in the following screenshot:![Figure 10.23 – Android manifest file
    showing different available options
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_10.23_B16231.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 10.23 – Android manifest file showing different available options
  prefs: []
  type: TYPE_NORMAL
- en: Add additional libraries if you are using any third-party libraries such as
    OpenSSL.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Run** button in the bottom-left corner of Qt Creator to build
    and run the application on an Android device. You can also hit the **Deployment**
    button below the **Run** button to create the deployment binaries.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You will see a new dialog appear on the screen. This dialog allows you to choose
    between your physical Android hardware or the software-emulated virtual device.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Connect your Android device and click on the **Refresh Device List** button.
    Don't forget to enable **Developer options** from your Android device settings.
    Allow **USB Debugging** when your Android device prompts you:![Figure 10.24 –
    Android device selection dialog
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_10.24_B16231.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 10.24 – Android device selection dialog
  prefs: []
  type: TYPE_NORMAL
- en: If you want to use a virtual device, click on the **Create Android Virtual Device**
    button. You will see the following screen appear:![](img/Figure_10.25_B16231.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Figure 10.25 – Android virtual device creation screen
  prefs: []
  type: TYPE_NORMAL
- en: 'If the screen warns you about a failure to create a new AVD, then update the
    Android platform tools and system images from the Android SDK manager. You can
    update these from the command line as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, run the following command to run `avdmanager`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: The final step is to click on the `.apk` extension inside the `build` folder:![Figure
    10.26 – Android installer file generated inside the build directory
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_10.26_B16231.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 10.26 – Android installer file generated inside the build directory
  prefs: []
  type: TYPE_NORMAL
- en: 'Internally, Qt runs the `androiddeployqt` utility. Sometimes, the tool may
    fail to create the package with the following error:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: In that case, put your application with a shorter file path and ensure that
    no directory in your file path has whitespaces. Then, build the application.
  prefs: []
  type: TYPE_NORMAL
- en: You can distribute the `.apk` files to your friends or users. Users have to
    accept an option saying **Install from Unknown Sources** in their Android mobile
    or tablets. To avoid this, you should publish your application on the play store.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: However, if you want to distribute your apps on the Google Play Store, then
    you have to register as a Google Play developer and sign the package. Google charges
    a small one-off amount to allow developers to publish their applications.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Please note that Qt considers Android apps as a closed source. So, you will
    require a commercial Qt license if you want to keep your Android app code private.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Congratulations! You have successfully generated a deployable Android application.
    Unlike iOS, Android is an open system. You can copy or distribute the `.apk` file
    into other Android devices running on the same Android version and install it.
  prefs: []
  type: TYPE_NORMAL
- en: In this section, we created an installable package for our Android device. In
    the next section, we will learn about a few more installation tools.
  prefs: []
  type: TYPE_NORMAL
- en: Other installation tools
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this section, we will discuss some additional tools you can use to create
    an installer. Note that we won''t be discussing these tools in detail. I have
    not verified these installation frameworks with Qt 6\. You may visit the respective
    tool website and learn from their documentation. In addition to the installation
    framework and tools provided by Qt, you can use the following tools on your Windows
    machine:'
  prefs: []
  type: TYPE_NORMAL
- en: '**CQtDeployer** is an application to extract all the dependent libraries of
    executables and create a launch script for your application. The tool claims to
    deploy applications faster and provides flexible infrastructure. It supports both
    Windows and Linux platforms. You can learn more about this tool at the following
    link: [https://github.com/QuasarApp/CQtDeployer](https://github.com/QuasarApp/CQtDeployer).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Nullsoft Scriptable Install System** (**NSIS**) is a script-driven installation
    authoring tool from Nullsoft, the same company that created Winamp. It has become
    a popular alternative to proprietary commercial tools such as InstallShield. The
    current version of NSIS has a modern graphical user interface, LZMA compression,
    multilingual support, and a simple plugin system. You can explore more about the
    tool at [https://nsis.sourceforge.io/Main_Page](https://nsis.sourceforge.io/Main_Page).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**InstallShield** is a proprietary software application that allows you to
    create installers and software bundles. InstallShield is generally used to install
    the software on Windows Platform desktop and server systems, but it may also be
    used to manage software applications and packages on a wide range of portable
    and mobile devices. Have a look at its features and play with the trial version.
    You can download the trial and read more about it at [https://www.revenera.com/install/products/installshield.html](https://www.revenera.com/install/products/installshield.html).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Inno Setup** is a free software script-driven installation system created
    in Delphi. It was first released in 1997, yet still competes with many commercial
    installers thanks to its excellent feature set and stability. Learn more about
    this installer at the following link: [https://jrsoftware.org/isinfo.php](https://jrsoftware.org/isinfo.php).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You can select any of the installation frameworks and deploy your application.
    In the end, it should meet your installation goal.
  prefs: []
  type: TYPE_NORMAL
- en: In this section, we discussed a few more installation tools that may be beneficial
    for your needs. Let's now summarize our takeaways from this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We began the chapter by discussing the application deployment problem and learning
    the difference between static and dynamic libraries. Then we discussed the different
    deployment tools in Qt and the specific case of Windows deployment and installation.
    Armed with this knowledge, we deployed a sample app on Windows and created an
    installer using the Qt Installer Framework. In addition, we discovered deploying
    applications on Linux and macOS and honed our skills for deploying applications
    on various platforms. Later, we explained some of the important points to be considered
    before publishing a Qt-based Android application to the play store.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, we looked at some third-party installer utilities. To summarize, you
    have learned to develop, test, and deploy a Qt application on various platforms.
    With this knowledge, you should be able to create your installation packages and
    share them with the world.
  prefs: []
  type: TYPE_NORMAL
- en: In [*Chapter 11*](B16231_11_Final_ASB_ePub.xhtml#_idTextAnchor256), *Internationalization*,
    we will learn about developing a translation-aware Qt application.
  prefs: []
  type: TYPE_NORMAL
