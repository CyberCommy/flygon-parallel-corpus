- en: Chapter 8. Deployment and Distribution
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Welcome to the last chapter of this book; we have come far and learned a lot
    along the way. By now, you should have a clear idea of everything involved in
    working and developing custom extensions for Magento.
  prefs: []
  type: TYPE_NORMAL
- en: Well, almost everything, as with any other Magento developer your code will
    eventually need to be promoted to production or maybe packaged for distribution;
    in this chapter we will see the different techniques, tools, and strategies that
    are available to us.
  prefs: []
  type: TYPE_NORMAL
- en: The final objective of this chapter is to give you the tools and skills to do
    deployments with confidence and with little to no downtime.
  prefs: []
  type: TYPE_NORMAL
- en: The road towards zero-downtime deployment
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Deploying to production is probably one of the most dreaded tasks for developers,
    and more often than not, it will be improperly done.
  prefs: []
  type: TYPE_NORMAL
- en: But what is zero-downtime deployment? Well, it is to production with confidence,
    knowing the code is properly tested and ready, this is the ideal that all Magento
    developers should aspire to.
  prefs: []
  type: TYPE_NORMAL
- en: 'This is achieved not by a single process or tool but by a combination of techniques,
    standards, and tools. In this chapter we will learn the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Distributing our extension through Magento Connect
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The role of version control systems in deployment
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Proper practices for branching and merging changes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Make it right from scratch
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In the previous chapter, we learned how testing can not only enhance our workflow
    but also save us from future headaches. The unit tests, integration tests, and
    automated tools are all at our disposal to ensure that our code is properly tested.
  prefs: []
  type: TYPE_NORMAL
- en: Writing tests means more than just putting together a few tests and calling
    it done; we are responsible for thinking about all the possible edge cases that
    might affect our code and write tests for each of them.
  prefs: []
  type: TYPE_NORMAL
- en: Be sure that what you see is what you get
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In the first chapter of this book, we dived right into setting up our development
    environment, which is a very important task. In order for us to guarantee that
    we are delivering quality and tested code, we must be able to develop and test
    our code in an environment as close to production as possible.
  prefs: []
  type: TYPE_NORMAL
- en: I'll illustrate the importance of this environment with an example on the early
    days of Magento. I heard it happened several times; developers worked on their
    local environments creating new extensions from scratch, they finished their development
    and tested on their local staging, and everything seemed to be working properly.
  prefs: []
  type: TYPE_NORMAL
- en: 'One of the commonly accepted workflows is:'
  prefs: []
  type: TYPE_NORMAL
- en: Starting development on the developer's local machine, which is running a virtual
    machine close to the production environment
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Testing and approving changes on a staging environment that is a close as possible
    copy of production
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Finally, deploying changes to the production environment
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It was now time to promote their code to production and they confidently did
    so; of course it was working on local, hence it had to work on production, right?
    In these particular situations, it wasn't the case; what happened instead was
    that as soon the new code was loaded into production, the store crashed, saying
    the autoloader wasn't able to find the class.
  prefs: []
  type: TYPE_NORMAL
- en: What happened? Well, the problem was that the developers' local environment
    was Windows and the name of the extension folder was in CamelCase, for example
    `MyExtension`, but internally in the class names they were using the capitalized
    text (`Myextension`).
  prefs: []
  type: TYPE_NORMAL
- en: Now this will work just fine in Windows because the file does not distinguish
    between uppercase, capitalized, or lowercase folder names; while a Unix-based
    system like most of the web servers do make a distinction on the folder and file
    naming.
  prefs: []
  type: TYPE_NORMAL
- en: While this example may look silly, it illustrates quite well the need for a
    standardized development environment; there are so many parts and "moving pieces"
    in a Magento installation. A different version of PHP or an extra Apache module
    that is enabled in production but not staging can make a world of difference.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Learn more about Magento naming conventions at [http://www.magedevguide.com/naming-conventions](http://www.magedevguide.com/naming-conventions).
  prefs: []
  type: TYPE_NORMAL
- en: Ready means ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: But when we say that our code is actually ready for production, what does ready
    really mean? Each developer might have a different definition of what ready and
    done actually mean. When working on a new module or extending Magento, we should
    always define what ready means for this particular feature/code.
  prefs: []
  type: TYPE_NORMAL
- en: 'So we are now getting somewhere, and we know that in order to pass the code
    to production, we have to do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Test our code and make sure we have covered all the edge cases.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Make sure the code follows the standards and guidelines.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Make sure it has been tested and developed in an environment as close to the
    production as possible.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Version control system and deployment
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Version control systems** (**VCSs**) are the lifeblood of any developer,
    and while the field might be a bit divided among Git and SVN enthusiasts (no mention
    for you Mercurial guys), the basic functionalities are still the same.'
  prefs: []
  type: TYPE_NORMAL
- en: Let's quickly go through the differences between each VCS, and their advantages
    and disadvantages.
  prefs: []
  type: TYPE_NORMAL
- en: SVN
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This is a powerful system, and it has been around for quite some time and is
    very well known and widely used.
  prefs: []
  type: TYPE_NORMAL
- en: '**Subversion** (**SVN**) is a centralized VCS; by this we mean that there is
    a single main source that is recognized as "Good", and all developers check out
    and push changes from and to this central source.'
  prefs: []
  type: TYPE_NORMAL
- en: While this makes changes easier to track and maintain, it has a serious disadvantage.
    Being centralized also means that we have to be in constant communication with
    the central repository, so working remotely or without an Internet connection
    is not possible.
  prefs: []
  type: TYPE_NORMAL
- en: '![SVN](graphics/3060OS_08_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Git
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Git is a much younger VCS and has been rising in popularity for a few years
    now, mostly due to the wide adoption by the open-source community and popularity
    of Github ([www.github.com](http://www.github.com)).
  prefs: []
  type: TYPE_NORMAL
- en: A critical difference between SVN and Git is that Git is a decentralized version
    control system, which means there is no central authority or main repository;
    each developer has a full copy of the repository locally available.
  prefs: []
  type: TYPE_NORMAL
- en: Being decentralized makes Git faster in addition to having a better and more
    powerful branching system than other VCSs; also, working remotely or without an
    Internet connection is possible.
  prefs: []
  type: TYPE_NORMAL
- en: '![Git](graphics/3060OS_08_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Regardless of which VCS we choose, the most powerful (and sometimes overlooked)
    feature of any VCS is branching or the ability to create branches.
  prefs: []
  type: TYPE_NORMAL
- en: Branching allows us to experiment and work on new features without breaking
    the stable code in our trunk or master; creating a branch requires us to take
    a snapshot of the current trunk/master code where we can make any changes and
    tests.
  prefs: []
  type: TYPE_NORMAL
- en: Now, branching is only part of the equation; once we are comfortable with our
    code changes and have properly tested every edge case, we need a way of reintegrating
    those changes into our main code base. Merging gives us this capability to reintegrate
    all our branch modifications by running a few commands.
  prefs: []
  type: TYPE_NORMAL
- en: By integrating branches and merging changes into our workflow, we gain flexibility
    and the freedom to work on different set of changes, features, and bug fixes without
    interfering with experimental or work-in-progress code.
  prefs: []
  type: TYPE_NORMAL
- en: Also, as we will learn next, version control can help us to do seamless promotions
    and keep our code up to date across multiple Magento installations with ease.
  prefs: []
  type: TYPE_NORMAL
- en: Distribution
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You might want to freely distribute your extension or make it available commercially,
    but how could you guarantee that the code is properly installed each time without
    having to do it yourself? And what about the updates or upgrades? Not all store
    owners are tech savvy or capable of changing files on their own.
  prefs: []
  type: TYPE_NORMAL
- en: Fortunately, Magento comes out of the box with its own package manager and extension
    marketplace called Magento Connect.
  prefs: []
  type: TYPE_NORMAL
- en: 'Magento Connect allows developers and solution partners to share their open-source
    and commercial contributions with the community and is not restricted to only
    custom modules; we can find the following types of resources in the Magento Connect
    marketplace:'
  prefs: []
  type: TYPE_NORMAL
- en: Modules
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Language packs
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Custom themes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Packing our extension
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: One of the core features of Magento Connect is allowing us to package our extensions
    directly from the Magento backend.
  prefs: []
  type: TYPE_NORMAL
- en: 'To package our extension perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Log in to the Magento backend.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: From the backend, select **System** | **Magento Connect** | **Package Extensions**.![Packing
    our extension](graphics/3060OS_08_03.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: As we can see, the **Create Extension** **Package** section is composed of six
    different subsections, which we will cover next.
  prefs: []
  type: TYPE_NORMAL
- en: Package Info
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Package Info** is used to specify the general extension information such
    as name, description, and versions of Magento that are supported, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Name**: The standard practice is to keep the name simple and using just words'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Channel**: This refers to the code pool for the extension; as we mentioned
    in the previous chapters, extensions designed for distribution should use the
    "community" channel'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Supported releases**: Select which version of Magento should be supported
    for our extension'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Summary**: This field contains a brief description of the extension used
    on the extension review process'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Description**: This has a detailed description of the extension and its functionality'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**License**: This has the license used for this extension; some of the available
    options are:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Open Software License** (**OSL**)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Mozilla Public License** (**MPL**)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Massachusetts Institute of Technology License** (**MITL**)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**GNU General Public License** (**GPL**)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Any other license if your extension is to be distributed commercially
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**License URI**: This has the link to the license text'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: More information about the different license types can be found at [http://www.magedevguide.com/license-types](http://www.magedevguide.com/license-types).
  prefs: []
  type: TYPE_NORMAL
- en: Release Info
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The following screenshot shows the screen for **Release Info**:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Release Info](graphics/3060OS_08_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The **Release Info** section contains important data about the current package
    release:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Release Version**: The initial release can be any arbitrary number, however,
    it is important that the version is incremented with each release. Magento Connect
    will not allow you to update the same version twice.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Release Stability**: Three options are available – **Stable**, **Beta**,
    and **Alpha**.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Notes**: Here we can enter all the release-specific notes, if any.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Authors
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The following screenshot shows the screen for **Authors**:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Authors](graphics/3060OS_08_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'In this section, the information about author(s) is specified; each author''s
    information has the following fields:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Name**: Author''s full name'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**User**: Magento username'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Email**: Contact e-mail address'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Dependencies
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The following screenshot shows the screen for **Dependencies**:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Dependencies](graphics/3060OS_08_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'There are three types of dependencies that are used when packaging a Magento
    extension:'
  prefs: []
  type: TYPE_NORMAL
- en: '**PHP Version**: Here we need to specify minimum and maximum versions of PHP
    that are supported for this extension in the **Minimum** and **Maximum** fields,
    respectively'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Packages**: This is used to specify any other packages that are required
    for this extension'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Extensions**: Here we can specify if a specific PHP extension is required
    for our extension to work'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In case a package dependency is not met, Magento Connect will allow us to install
    the required extension; for PHP extensions Magento Connect will throw an error
    and will stop the installation.
  prefs: []
  type: TYPE_NORMAL
- en: Contents
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The following screenshot shows the screen for **Contents**:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Contents](graphics/3060OS_08_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The **Contents** section allows us to specify each file and folder that forms
    part of the extension package.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This is the most important section in the extension packaging process and it's
    also the easiest to mess up.
  prefs: []
  type: TYPE_NORMAL
- en: 'Each content entry has the following fields:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Target**: This is the target base directory and it is used to specify the
    base path for searching the file. The following options are available:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Magento Core team module file – ./app/code/core**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Magento Local module file – ./app/code/local**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Magento Community module file – ./app/code/community**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Magento Global Configuration – ./app/etc**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Magento Locale language file – ./app/locale**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Magento User Interface (layouts, templates) – ./app/design**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Magento Library file – ./lib**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Magento Media library – ./media**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Magento Theme Skin (Images, CSS, JS) – ./skin**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Magento Other web accessible file – ./**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Magento PHPUnit test – ./tests**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Magento other – ./**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Path**: This is the filename and/or path relative to our specified target'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Type**: For this field, two options are available to us – **File** or **Recursive
    dir**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Include**: This field takes a regular expression that allows us to specify
    which files to include'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Ignore**: This field takes a regular expression that allows us to specify
    which files to exclude'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Load Local Package
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The following screenshot shows the screen for **Load Local Package**:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Load Local Package](graphics/3060OS_08_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: This section will allow us to load packaged extensions; since we have not packaged
    any extensions, the list is currently empty.
  prefs: []
  type: TYPE_NORMAL
- en: Let's go ahead and package our gift registry extension. Be sure to fill in all
    the fields and then click on **Save Data and Create Package**; this will package
    and save the extension in the `magento_root/var/connect/` folder.
  prefs: []
  type: TYPE_NORMAL
- en: The extension package file contains all the source's files and the source code
    needed; additionally, a new file called `package.xml` is created with each package.
    This file contains all the information about the extension and the detailed structure
    of the files and folders.
  prefs: []
  type: TYPE_NORMAL
- en: Publishing our extension
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Finally, in order to make our extension available, we have to create an extension
    profile in Magento Connect. To create an extension profile, perform the following
    steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Log in to [magentocommerce.com](http://magentocommerce.com).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **My Account** link.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Developers** link in the left-hand side navigation.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on **Add new extension**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The **Add new extension** window looks something like the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Publishing our extension](graphics/3060OS_08_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: It is important to note that the **Extension Title** field must be the exact
    name you used while generating the package.
  prefs: []
  type: TYPE_NORMAL
- en: Once the extension profile has been created, we can proceed to upload our extension
    package; all the fields should match the ones specified during the extension packaging
    process.
  prefs: []
  type: TYPE_NORMAL
- en: '![Publishing our extension](graphics/3060OS_08_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Finally, once we are done, we can click on the **Submit for Approval** button.
    An extension can have the following status:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Submitted**: This means the extension was submitted for review'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Not Approved**: This means there was a problem with the extension, and you
    will also receive an e-mail explaining the reason why the extension was not approved'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Live**: This means the extension has been approved and is available through
    Magento Connect'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Offline**: This means you can take your extension offline at any time from
    your account **Extension Manager**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we learned how to deploy and share our custom extensions. There
    are many different methods that we can use for sharing and deploying our code
    to production environments.
  prefs: []
  type: TYPE_NORMAL
- en: This is the final chapter of our book; we have learned a lot about Magento development,
    and though we have covered a lot of ground, this book is only meant to be just
    a stepping stone of your long journey.
  prefs: []
  type: TYPE_NORMAL
- en: Magento is not an easy framework to learn, and while it can be a daunting experience,
    I encourage you to keep trying and learning.
  prefs: []
  type: TYPE_NORMAL
