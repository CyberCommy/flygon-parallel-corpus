- en: Chapter 4. Project CRUD
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that we have a basic application in place and configured to communicate
    with our database, we can begin to work on some real features of our application.
    We know that the "project" is one of the most fundamental components in our application.
    A user cannot do anything useful with the TrackStar application without first
    either creating or choosing an existing project within which to add tasks and
    other issues. For this reason, we want to first turn our focus to getting some
    project functionality into the application.
  prefs: []
  type: TYPE_NORMAL
- en: Feature planning
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: At the end of our efforts in this chapter, our application should allow users
    to create new projects, select from a list of existing projects, update/edit existing
    projects, and delete existing projects.
  prefs: []
  type: TYPE_NORMAL
- en: 'In order to achieve this goal, we should identify the more granular tasks on
    which to focus. The list below identifies a list of tasks we aim to accomplish
    within this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Design the database schema to support projects
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Build the necessary tables and all other database objects identified in the
    schema
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Create the Yii AR model classes needed to allow the application to easily interact
    with the created database table(s)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Create the Yii controller class(es) that will house the functionality to do
    the following:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Create new projects
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Retrieve a list of existing projects for display
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Update the data associated with existing projects
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Delete existing projects
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Create the Yii view files and presentation tier logic that will:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Display the form to allow for new project creation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Display a listing of all the existing projects
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Display the form to allow for a user to edit an existing project
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Add a delete button to the project listing to allow for project deletion
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This is certainly enough to get us started.
  prefs: []
  type: TYPE_NORMAL
- en: Creating the project table
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Back in [Chapter 3](ch03.html "Chapter 3. The TrackStar Application"), *The
    TrackStar Application*, we talked about the basic data that represents a project,
    and we decided that we would use a MySQL relational database to build the persistence
    layer of this application. Now we need to design and build the table that will
    persist our project data.
  prefs: []
  type: TYPE_NORMAL
- en: We know projects need to have a name and a description. We are also going to
    keep some basic table auditing information on each table by tracking the time
    a record was created and updated, as well as who created and updated the record.
  prefs: []
  type: TYPE_NORMAL
- en: 'Based on these properties, the following is how the project table will look:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Now, before we jump right in and just use our favorite MySQL database editor
    to create this table, we need to talk about how we can use Yii to manage the changes
    that will take place in our database schema as we build our TrackStar application.
  prefs: []
  type: TYPE_NORMAL
- en: Yii database migrations
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We know it is a good practice to track version changes of our application source
    code. As you are following along in building our TrackStar application, it would
    be wise to use version control software such as SVN or GIT to help manage all
    the changes we make to our codebase along the way. If our codebase changes get
    out of sync with our database changes, it is likely that our entire application
    will break. So, it would also be really great to manage the structural changes
    we will be making to our database along the way.
  prefs: []
  type: TYPE_NORMAL
- en: Yii helps us out in this regard. Yii provides a database migration tool that
    keeps track of database migration history and allows us to apply new migrations
    as well as revert existing migrations to allow us to restore the database structure
    to a previous state.
  prefs: []
  type: TYPE_NORMAL
- en: 'The Yii migration utility is a console command that we use with the `yiic`
    command-line tool. As a console command, it uses a configuration file specific
    to console commands, which, by default, is `protected/config/console.php`. We
    need to properly configure our database component in this file. Just as we did
    in our `main.php config` file, we need to define our `db` component to use our
    MySQL database. If you open up the `protected/config/console.php` configuration
    file, you''ll see that it already has a MySQL configuration defined, but it is
    commented out. Let''s remove the SQLite configuration and uncomment the MySQL
    configuration, changing the username and password as appropriate for your database
    settings:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Now that we have our configuration change in place, we can proceed to create
    the migration. To do so, we use the `yiic` command-line utility tool with the
    `migrate` command. Creating a migration takes the general form of:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Here, the required `name` parameter allows us to specify a brief description
    of the database change we are making. The `name` parameter is used as part of
    the migration filename and PHP class name. Therefore, it should only contain letters,
    digits, or underscore characters. Yii takes the input name parameter, and appends
    a UTC timestamp (in the format of *yymmdd_hhmmss*), with the letter *m* for migration,
    to use as both the filename and the PHP class name. Let''s go ahead and create
    a new migration for our project table, and this naming convention will be made
    clearer. From the command line, navigate to the application `protected/` directory
    and then issue the command to create a new migration using the name `create_project_table`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Yii database migrations](graphics/8727_04_17.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'This creates the file `/Webroot/trackstar/protected/migrations/m121108_195611_create_project_table.php`
    with the following content:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Of course, we''ll have to make some changes to this file in order to have it
    create our new table. We implement the `up()` method to apply our desired database
    changes and we implement the `down()` method to revert these changes, which will
    allow us to revert to a previous version of our database structure. The `safeUp()`
    and `safeDown()` methods are similar, but they will execute the changes within
    a database transaction in order to treat the entire migration as an atomic unit
    to be executed in an all-or-nothing manner. In this case, the change we want to
    apply is to create a new table, and we can revert this change by dropping the
    table. These changes are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'After saving our changes, we can execute the migration. From still within the
    `protected/` directory, execute the migration as such:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Yii database migrations](graphics/8727_04_18.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Using the migrate command with no arguments will result in migrating up (that
    is executing the `up()` method) for every migration that has not yet been applied.
    And, since this is the first time we have run a migration, Yii is going to create
    a new migration history table, `tbl_migration`, for us automatically. Yii uses
    this table to keep track of what migrations have already been applied. If we specify
    *down* as a command-line argument to the migrate command, the last applied migration
    will be reverted by running the `down()` method of that migration.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have applied our migration, our new `tbl_project` table has now
    been created and is ready for us to use.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'We''ll be using Yii migrations throughout the book as we develop our TrackStar
    application, so we''ll continue to learn more about them as we use them. For more
    detailed information on Yii migrations, see:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://www.yiiframework.com/doc/guide/1.1/en/database.migration](http://www.yiiframework.com/doc/guide/1.1/en/database.migration)'
  prefs: []
  type: TYPE_NORMAL
- en: Naming conventions
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You may have noticed that we defined our database table as well as all of the
    column names in lowercase. Throughout our development, we will use lowercase for
    all table names and column names. This is primarily because different DBMSs handle
    case sensitivity differently. As one example, **PostgreSQL** treats column names
    as case insensitive by default, and we must quote a column in a query condition
    if the column contains mixed-case letters. Using lowercase would help eliminate
    this problem.
  prefs: []
  type: TYPE_NORMAL
- en: You may have also noticed that we used a `tbl_` prefix in naming our projects
    table. As of version 1.1.0, Yii provides integrated support for using a table
    prefix. A table prefix is a string that is prepended to the names of the tables.
    It is often used in shared hosting environments where multiple applications share
    a single database and use different table prefixes to differentiate from each
    other; a sort of name-spacing for your database objects. For example, one application
    could use `tbl_` as a prefix while another could use `yii_`. Also, some database
    administrators use this as a naming convention to prefix database objects with
    an identifier as to what type of entity they are or otherwise going to use. They
    use a prefix to help organize objects into similar groups. Using table prefixes
    is a matter of preference and certainly not required.
  prefs: []
  type: TYPE_NORMAL
- en: 'In order to take full advantage of the integrated table prefix support in Yii,
    one must appropriately set the `CDbConnection::tablePrefix` property to be the
    desired table prefix. Then, in SQL statements used throughout the application,
    one can use `{{TableName}}` to refer to table names, where `TableName` is the
    name of the table, but without the prefix. For example, if we were to make this
    configuration change, we could use the following code to query all projects:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: But this is getting a little ahead of ourselves. Let's leave our configuration
    as it is for now, and revisit this topic when we get into database querying a
    little later in our application development.
  prefs: []
  type: TYPE_NORMAL
- en: Creating the AR model class
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that we have the `tbl_project` table created, we need to create the Yii
    model class to allow us to easily manage the data in that table. We introduced
    Yii's ORM layer, **Active Record** (AR), back in [Chapter 1](ch01.html "Chapter 1. Meet
    Yii"), *Meet Yii*. Now we will see a concrete example of that in the context of
    this application.
  prefs: []
  type: TYPE_NORMAL
- en: Configuring Gii
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Back in [Chapter 2](ch02.html "Chapter 2. Getting Started"), *Getting Started*
    when we were building our simple "Hello, World!" Yii application, we introduced
    the code generation tool, **Gii**. If you recall, before we could begin using
    Gii, we had to configure it for use within our application. We need to do so again
    in our new TrackStar application. As a reminder, to configure Gii for use, open
    up `protected/config/main.php` and the Gii module is defined as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: This configures Gii as an application module. We will cover Yii *modules* in
    detail later in the book. The important thing at this point is to make sure this
    is added to the configuration file and that you provide your password (or set
    the password to `false` for development environments to avoid being prompted with
    the login screen). Now, navigate to the tool by going to `http://localhost/trackstar/index.php?r=gii`.
  prefs: []
  type: TYPE_NORMAL
- en: Using Gii to create our Project AR class
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The main menu page for Gii looks like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Using Gii to create our Project AR class](graphics/8727_04_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Since we want to create a new model class for our `tbl_project` table, the
    **Model Generator** option seems like the right choice. Clicking on that link
    takes us to the following page:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Using Gii to create our Project AR class](graphics/8727_04_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The **Table Prefix** field is primarily used to help Gii determine how to name
    the AR class we are generating. If you are using a prefix, you can add this here.
    This way, it won't use that prefix when naming the new class. In our case, we
    are using the `tbl_` prefix, so we should specify that here. Specifying this value
    will mean that our new generated AR class will be named `Project`, rather than
    `Tbl_project`.
  prefs: []
  type: TYPE_NORMAL
- en: The next two fields are asking for our table name and the name of the class
    file we want it to generate. Type in the name of our table `tbl_project` in the
    **Table Name** field, and watch as the **Model Class** name autopopulates. The
    convention for the **Model Class** name is the name of the table, minus the prefix,
    and starts with an uppercase letter. So, it will assume a name of Project for
    our model class name, but you can of course customize this.
  prefs: []
  type: TYPE_NORMAL
- en: The next few fields allow for further customization. The **Base Class** field
    is used to specify the class from which our model class will extend. This will
    need to be `CActiveRecord` or a child class thereof. The **Model Path** field
    lets us specify where in the application directory structure to output the new
    file. The default is `protected/models/` (alias `application.models`). The **Build
    Relations** checkbox allows you to decide whether or not to have Gii automatically
    define relationships between AR objects by using the relationships defined between
    MySQL database tables. It is checked by default. The last field allows us to specify
    a template on which the code generation is based. We can customize the default
    one to meet any specific needs we have that might be common to all such class
    files. For now, the default values for these fields meet our needs just fine.
  prefs: []
  type: TYPE_NORMAL
- en: 'Proceed by clicking on the **Preview** button. This will result in the following
    table displaying along the bottom of the page:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Using Gii to create our Project AR class](graphics/8727_04_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'This link allows you to preview the code that will be generated. Before you
    hit **Generate**, click on the `models/Project.php` link. The following screenshot
    displays what this preview will look like:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Using Gii to create our Project AR class](graphics/8727_04_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: It provides a scrollable pop up so that we can preview the file that will be
    generated.
  prefs: []
  type: TYPE_NORMAL
- en: 'Okay, close this pop up and go ahead and click on the **Generate** button.
    Assuming all went well, you should see something like the following screenshot
    displayed towards the bottom of the page:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Using Gii to create our Project AR class](graphics/8727_04_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Ensure that the path to which Gii is attempting to create the new file, `protected/models/`
    (or if you changed the location, whatever directory path you specified in the
    **Model Path** form field), is writable by your web server process prior to attempting
    to generate your new model class. Otherwise, you will receive a write permissions
    error.
  prefs: []
  type: TYPE_NORMAL
- en: Gii has created a new Yii active record model class for us and named it `Project.php`
    as we instructed. It has also placed it, as we instructed, in the default Yii
    location for model classes, `protected/models/`. This class is a wrapper class
    for our `tbl_project` database table. All of the columns in the `tbl_project`
    table are accessible as properties of the `Project` AR class.
  prefs: []
  type: TYPE_NORMAL
- en: Enabling CRUD operations for projects
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We now have a new AR model class, but now what? Typically in an MVC architecture,
    we need a controller and a view to go with our model to complete the picture.
    In our case, we need to be able to manage our projects in the application. We
    need to be able to create new projects, retrieve information about existing projects,
    update the information on existing projects, and delete existing projects. We
    need to add a controller class that will handle these CRUD (Create, Read, Update,
    Delete) operations on our model class, as well as a view file to provide a GUI
    to allow the user to do this in the browser. One approach we could take is to
    open our favorite code editor and create a new controller and view classes. But,
    luckily, we don't have to.
  prefs: []
  type: TYPE_NORMAL
- en: Creating CRUD scaffolding for projects
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Once again, the Gii tool is going to rescue us from having to write common,
    tedious, and often time-consuming code. CRUD operations are such a common need
    on database tables created for applications that the developers of Yii decided
    to provide this for us. If coming from other frameworks, you may know this by
    the term **scaffolding**. Let's see how to take advantage of this in Yii.
  prefs: []
  type: TYPE_NORMAL
- en: 'Navigate back to the main Gii menu located at `http://localhost/trackstar/index.php?r=gii`
    and select the **Crud Generator** link. You will be presented with the following
    screen:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating CRUD scaffolding for projects](graphics/8727_04_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Here we are presented with two input form fields. The first one is asking for
    us to specify the **Model Class** against which we would like all of the CRUD
    operations to be generated. In our case, this is the `Project` AR class we created
    earlier. So we'll type in **Project** in this field. As we do this, we notice
    that the **Controller ID** field is autopopulated with the name **project**. This
    is Yii's naming convention. Of course, you can change this to be another name
    if you prefer, but we'll stick with this default for now. We'll also use the default
    base controller class, `Controller`, which was created for us when we initially
    created our application, as well as the default code template file from which
    to generate the class file.
  prefs: []
  type: TYPE_NORMAL
- en: 'With all of these fields filled in, clicking on the **Preview** button results
    in the following table being displayed at the bottom of the page:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating CRUD scaffolding for projects](graphics/8727_04_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: We can see that quite a few files are going to be generated. A new `ProjectController`
    controller class that will house all of the CRUD action methods is at the top
    of the list. The rest of the list represents all of the many separate view files
    that are also going to be created. There is a separate view file for each of the
    operations as well as one that will provide the ability to search project records.
    You can, of course, choose not to generate some of these by changing the checkboxes
    in the corresponding **Generate** column in the table. However, for our purposes,
    we would like Gii to create all of these for us.
  prefs: []
  type: TYPE_NORMAL
- en: 'Go ahead and click on the **Generate** button. You should see the following
    success message at the bottom of the page:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating CRUD scaffolding for projects](graphics/8727_04_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You may need to ensure that both `/protected/controllers` as well as `/protected/views`
    under the root application directory are both writable by the web server process.
    Otherwise, you will receive permission errors, rather than this success result.
  prefs: []
  type: TYPE_NORMAL
- en: We can now click on the **try it now** link to take our new functionality for
    a test drive.
  prefs: []
  type: TYPE_NORMAL
- en: Doing so takes you to a project listing page. This is the page that displays
    all of the projects currently in the system. In our case, we have not created
    any yet, so the page gives us a **No results found** message. Let's change this
    by creating a new project.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a new project
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: On the project listing page (`http://localhost/trackstar/index.php?r=project`)
    there is a little navigation area on the right-hand side of the page. Click on
    the **Create Project** link. You'll discover this actually takes us to the login
    page, rather than a form to create a new project. The reason for this is that
    the code Gii has generated applies a rule that stipulates only properly authenticated
    users (that is logged in users) can create new projects. Any anonymous user that
    attempts to access the functionality to create a new project will be redirected
    to the login page. We'll cover authentication and authorization in detail later.
    For now, go ahead and log in using the credentials username as `demo` and password
    as `demo`.
  prefs: []
  type: TYPE_NORMAL
- en: 'A successful login should redirect you to the following URL:'
  prefs: []
  type: TYPE_NORMAL
- en: '`http://localhost/trackstar/index.php?r=project/create`'
  prefs: []
  type: TYPE_NORMAL
- en: 'This page displays an input form for adding a new project, as shown in the
    following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating a new project](graphics/8727_04_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Let's quickly fill out this form to create a new project. The form indicates
    there are two required fields, **Name** and **Description**. The Gii code generator
    was smart enough to know that since we defined the `tbl_project.name` and `tbl_project.description`
    columns in our database table as `NOT NULL`, this should translate to required
    form fields when creating a new project. Pretty cool, right?
  prefs: []
  type: TYPE_NORMAL
- en: 'So, we''ll need to at least fill out these two fields. Give it the name, `Test
    Project`, and give the description as `Test project description`. Clicking on
    the **Create** button will post the form data back to the server and attempt to
    add a new project record. If there are any validation errors, a simple error message
    will display that highlights each field in error. A successful save will redirect
    to the specific listing for the newly created project. Ours was successful and
    we were redirected to the page `http://localhost/trackstar/index.php?r=project/view&id=1`,
    as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating a new project](graphics/8727_04_11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: As we briefly mentioned previously, one thing we notice about our new project
    creation form is that both the name and the description fields were marked as
    being required. This is due to the fact that we defined the name and description
    columns in our database table to not allow for null values. Let's take a look
    at how these required fields work in Yii.
  prefs: []
  type: TYPE_NORMAL
- en: Form field validation
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: When working with AR model classes within forms in Yii, setting validation rules
    around form fields is a snap. This is done by specifying values in an array defined
    in the `rules()` method within AR model classes.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you take a look at the code in the `Project` model class, (`/protected/models/Project.php`)
    you''ll discover that the `rules()` public function has already been defined for
    us, and that there are already a few rules in there:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'The `rules()` method returns an array of rules. Each rule is of the following
    general format:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: The `Attribute List` is a string of comma separated class property names to
    be validated according to the `Validator`. The `Validator` specifies what kind
    of rule should be enforced. The `on` parameter specifies a list of scenarios in
    which the rule should be applied. For example, if we were to specify that a validation
    should be applied in an `insert` scenario context, this would indicate that the
    rule should only be applied during an insert of a new record.
  prefs: []
  type: TYPE_NORMAL
- en: If a specific scenario is not defined, the validation rule is applied in all
    scenarios whenever validation is performed on the model data.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: As of Version 1.1.11 of Yii, you can also specify an `except` parameter, which
    allows you to exclude validations for certain scenarios. The syntax is the same
    as for the `on` parameter.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, you can also specify additional options as `name=>value pairs`, which
    are used to initialize the validator's properties. These additional options will
    vary depending on the properties of the validator being specified.
  prefs: []
  type: TYPE_NORMAL
- en: 'The validator can either be a method in the model class, or a separate validator
    class. If defined as a model class method, it must have the following signature:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: If using a separate class to define the validator, that class must extend from
    `CValidator`.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are actually three ways to specify a validator:'
  prefs: []
  type: TYPE_NORMAL
- en: Specify a method name in the model class itself
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Specify a separate class that is of a validator type (that is a class that extends
    `CValidator`)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Specify a predefined alias to an existing validator class in the Yii framework
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Yii provides many predefined validator classes for you and also provides aliases
    with which to reference these when defining rules. The complete list of predefined
    validator class aliases as of Yii Version 1.1.12 is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**boolean**: Alias of `CBooleanValidator`, validates the attribute that contains
    either `true` or `false`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**captcha**: Alias of `CCaptchaValidator`, validates the attribute value that
    is same as the verification code displayed in a CAPTCHA'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**compare**: Alias of `CCompareValidator`, compares two attributes and validates
    they are equal'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**email**: Alias of `CEmailValidator`, validates the attribute value that is
    a valid e-mail address'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**date**: Alias of `CDateValidator`, validates the attribute value that is
    a valid date, time, or date-time value'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**default**: Alias of `CDefaultValueValidator`, assigns a default value to
    the attributes specified'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**exist**: Alias of `CExistValidator`, validates the attribute value against
    a specified table column in a database'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**file**: Alias of `CFileValidator`, validates the attribute value that contains
    the name of an uploaded file'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**filter**: Alias of `CFilterValidator`, transforms the attribute value with
    a specified filter'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**in**: Alias of `CRangeValidator`, validates if the data is within a prespecified
    range of values, or exists within a specified list of values'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**length**: Alias of `CStringValidator`, validates whether the length of the
    attribute value is within a specified range'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**match**: Alias of `CRegularExpressionValidator`, uses a regular expression
    to validate the attribute value'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**numerical**: Alias of `CNumberValidator`, validates whether the attribute
    value is a valid number'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**required**: Alias of `CRequiredValidator`, validates whether the attribute
    value is empty or not'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**type**: alias of `CTypeValidator`, validates whether the attribute value
    is of a specific data type'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**unique**: Alias of `CUniqueValidator`, validates that the attribute value
    is unique, and is compared against a database table column'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**url**: Alias of `CUrlValidator`, validates whether the attribute value is
    a valid URL'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'We see that in our `rules()` function, there is a rule defined that specifies
    the name and description attributes and uses the Yii alias `required` to specify
    the validator:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'It is the declaration of this validation rule that is responsible for the little
    red asterisks next to the **Name** and **Description** fields on the new project
    form. This indicates that this field is now required. If we go back to our new
    project creation form (`http://localhost/trackstar/index.php?r=project/create`)
    and attempt to submit the form without specifying either the **Name** or **Description**,
    we''ll get a nicely formatted error message telling us that we cannot submit the
    form with blank values for these fields, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Form field validation](graphics/8727_04_12.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: As we previously mentioned, the Gii code generation tool will automatically
    add validation rules to the AR class based on the definitions of the columns in
    the underlying table. We saw this for the **Name** and **Description** columns
    defined with `NOT NULL` constraints that had associated required validators defined.
    As another example, columns that have length restrictions, like our name column
    being defined as `varchar(255)`, will have character limit rules automatically
    applied. We notice by taking another look at our `rules()` method in the `Project`
    AR class that Gii autocreated the rule `array('name', 'length', 'max'=>255)` for
    us based on its column definition. For more information about validators see [http://www.yiiframework.com/doc/guide/1.1/en/form.model#declaring-validation-rules](http://www.yiiframework.com/doc/guide/1.1/en/form.model#declaring-validation-rules).
  prefs: []
  type: TYPE_NORMAL
- en: Reading the project
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We have actually already seen this in action when we were taken to the project
    details page after successfully saving a new project `http://localhost/trackstar/index.php?r=project/view&id=1`.
    This page demonstrates the *R* in CRUD. However, to view the entire listing, we
    can click on the **List Project** link in the right-hand side column. This takes
    us back to where we started, except now we have our newly created project in the
    project list. So, we have the ability to retrieve a listing of all of the projects
    in the application, as well as view the details of each project individually.
  prefs: []
  type: TYPE_NORMAL
- en: Updating and deleting projects
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Navigating back to a project details page can be done by clicking on the little
    project **ID** link on any of the projects in the listing. Let''s do this for
    our newly created project, which is **ID: 1** in our case. Clicking on this link
    takes us to the project details page for this project. This page has a number
    of action operations in its right-hand side column that are shown in following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Updating and deleting projects](graphics/8727_04_13.jpg)'
  prefs: []
  type: TYPE_IMG
- en: We can see both of the **Update Project** and **Delete Project** links, which
    provide us with the *U* and *D* in our CRUD operations respectively. We'll leave
    it up to you to verify that these links work as expected.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The delete functionality is restricted to admin users; that is, you have to
    be logged in using the username/password combination of `admin`/`admin`. So, if
    you are verifying the delete functionality and receive a 403 error, ensure you
    are logged in as an administrator. This is discussed in more detail later, and
    we cover authentication and authorization in great detail in a later chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Managing projects in Admin mode
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The last link that we have not covered in the previous screenshot depicting
    our project operations is the **Manage Project** link. Go ahead and click on this
    link. It will most likely result in an authorization error as shown in the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Managing projects in Admin mode](graphics/8727_04_14.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The reason for this error is that this functionality invokes a simple access
    control feature in Yii, and restricts access to *admin* users only. If you recall,
    when we logged into the application in order to create a new project, we used
    `demo`/`demo` as our username/password combination. This `demo` user does not
    have the authorization to access this admin page. The code generated by Gii restricts
    the access to this functionality.
  prefs: []
  type: TYPE_NORMAL
- en: 'An **administrator** in this context is simply someone who has logged in with
    the username/password combination of `admin`/`admin`. Go ahead and log out of
    the application by clicking on **Logout (demo)** present in the main navigation
    bar. Then log in again, but this time, use these administrator credentials. Once
    successfully logged in as `admin` you should notice the top navigation logout
    link change to **Logout (admin)**. Then navigate back to a specific project listing
    page, for example, `http://localhost/trackstar/index.php?r=project/view&id=1`,
    and try the **Manage Project** link again. You should now see what is shown in
    the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Managing projects in Admin mode](graphics/8727_04_15.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'What we now see is a highly interactive version of our project listing page.
    It displays all the projects in an interactive data table. Each row has inline
    links to view, update, and delete each project. Clicking on any of the column
    header links sorts the project list by that column value. And the little input
    boxes in the second row allow you to search this project list by keywords within
    those individual column values. The advanced search link exposes an entire search
    form providing the ability to specify multiple search criteria to submit against
    one search. The following screenshot displays this advanced search form:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Managing projects in Admin mode](graphics/8727_04_16.jpg)'
  prefs: []
  type: TYPE_IMG
- en: We have basically implemented all of the functionality we set out to achieve
    in this iteration, and haven't really had to code much of anything. In fact, with
    the help of Gii, not only did we create all of the CRUD functionality, we have
    also implemented basic project searching functionality that we were not expecting
    to achieve. Though very basic, we have a fully functioning application, with features
    specific to a project task tracking application, and have made very little effort
    to achieve it.
  prefs: []
  type: TYPE_NORMAL
- en: Of course we still have a lot of work to complete on our TrackStar application.
    All of this scaffolding code is not intended to fully replace application development.
    It provides us with an excellent starting point and foundation on which to continue
    to build our application. As we work through all the details and nuances of how
    the project functionality should work, we can rely on this autogenerated code
    to keep things moving forward at a rapid pace.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Even though we did not do much coding in this chapter, we accomplished quite
    a lot. We created a new database table, which allowed us to see Yii Active Record
    (AR) in action. We used the Gii tool to first create an AR model class to wrap
    our `tbl_project` database table. We then demonstrated how to use the Gii code
    generation tool to generate actual CRUD functionality in the web application.
    This amazing tool quickly created the functionality we needed, and even took it
    a step further by providing us with an administrative dashboard allowing us to
    search and sort our projects based on different criteria. We also demonstrated
    how to implement model data validation and how this translates to form field validation
    in Yii.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will build on what we have learned here and dive more
    deeply into Active Record in Yii as we introduce related entities in our data
    model.
  prefs: []
  type: TYPE_NORMAL
