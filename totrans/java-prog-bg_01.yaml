- en: Getting Started with Java
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 开始使用Java
- en: Whether this is your first foray into high-level object-oriented programming
    languages, such as Java, or if you've been programming for some time and you're
    just looking to add Java to your repertoire, or even if you've never touched a
    line of code in your life, this book is designed to accommodate you. We're going
    to move quickly, and we're not going to shy away from heavy subjects; however,
    we're going to begin this book from the very ground up and learn about the concepts
    behind object-oriented programming as we go.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 无论这是你第一次涉足高级面向对象的编程语言，比如Java，还是你已经编程了一段时间，只是想要把Java加入你的技能库，甚至你一生中从未接触过一行代码，这本书都是为你设计的。我们将快速前进，不会回避繁重的主题；然而，我们将从最基础的知识开始，随着学习面向对象编程的概念。
- en: In this chapter, we'll understand what Java is and also look at its features.
    We'll then follow a step-by-step process to set up a development environment to
    enable us to write and execute Java programs. Once we accomplish this, we'll write
    our very first Java program and run it. Lastly, we'll look at what to do when
    we get an error.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将了解Java是什么，以及它的特性。然后，我们将按步骤设置开发环境，使我们能够编写和执行Java程序。一旦我们完成这一步，我们将编写我们的第一个Java程序并运行它。最后，我们将看看当我们遇到错误时该怎么办。
- en: 'Specifically, we''ll cover the following topics:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 具体来说，我们将涵盖以下主题：
- en: What is Java
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 什么是Java
- en: Features and applications of Java
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Java的特性和应用
- en: Installing JDK
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装JDK
- en: Installing the NetBeans IDE
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装NetBeans IDE
- en: Writing `HelloWorld.java`
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 编写`HelloWorld.java`
- en: NetBeans' error detection capabilities
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: NetBeans的错误检测能力
- en: What is Java?
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 什么是Java？
- en: Java was developed by Sun Microsystems in 1995, but it has stood the test of
    time and remains highly relevant and widely used to this day. So what exactly
    is Java? Java is a high-level, general-purpose object-oriented programming language.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: Java是由Sun Microsystems于1995年开发的，但它经受住了时间的考验，至今仍然非常相关和广泛使用。那么Java究竟是什么？Java是一种高级的、通用的面向对象的编程语言。
- en: Features of Java
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Java的特性
- en: 'The following are Java''s main features:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是Java的主要特性：
- en: '**High level and general purpose**: Rather than being created to accomplish
    one very specific task, Java allows us to write computer-readable instructions
    in an open-ended environment. Because it''s not really feasible, or even desirable,
    for every computer system to have its own specialized programming language, the
    vast majority of the code is written in high-level, general-purpose languages
    such as Java.'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**高级和通用**：Java不是为了完成一个非常特定的任务而创建的，而是允许我们在一个开放的环境中编写计算机可读的指令。因为每台计算机系统都有自己专门的编程语言并不现实，甚至不可取，所以绝大多数代码都是用高级通用语言编写的，比如Java。'
- en: '**Object-oriented**: Java is also what we call an object-oriented language.
    While we won''t get into the specifics of objects and classes until a bit later
    in this book, know for now that objects allow us to define modular entities within
    our program that make them much more human-readable and much more manageable to
    create large-scale software projects. A firm grasp of object-oriented concepts
    is absolutely essential for any modern software developer.'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**面向对象**：Java也是我们所说的面向对象的语言。虽然我们在本书的后面才会深入讨论对象和类的具体内容，但现在知道对象允许我们在程序中定义模块化实体，使它们更易于阅读和更易于创建大规模的软件项目。对面向对象概念的牢固掌握对于任何现代软件开发人员来说绝对是必不可少的。'
- en: '**Platform-independent**: Lastly, Java was designed with the intention that
    it be a write once, run anywhere language. This means if you and I both have systems
    with Java installed and even if our systems are not normally identical--for example,
    I''m on a Windows machine and you''re on a Mac--a Java program on my machine that
    I give to you will still run essentially the same on your machine without the
    need for it to be recompiled.'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**平台无关**：最后，Java的设计初衷是成为一种一次编写，随处运行的语言。这意味着如果你和我都有安装了Java的系统，即使我们的系统通常不相同--例如，我用的是Windows系统，你用的是Mac--我在我的机器上运行的Java程序，我给你，也会在你的机器上基本上相同地运行，而无需重新编译。'
- en: '![](img/4da86a3a-9c84-462b-9f69-54ba5f0be5d6.png)**Compiling** a programming
    language such as Java is the act of taking the human-readable code that we''ve
    written and converting it into an interpreted machine-friendly code. Unfortunately,
    it''s usually not very friendly for humans to read or write. To do this, we use
    a program called the compiler that takes in our code as text and converts it into
    machine code.'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '![](img/4da86a3a-9c84-462b-9f69-54ba5f0be5d6.png)**编译**Java等编程语言是将我们编写的人类可读代码转换为解释的机器友好代码的行为。不幸的是，这通常对人类来说并不友好。为了做到这一点，我们使用一个称为编译器的程序，它接收我们的代码作为文本，并将其转换为机器代码。'
- en: Traditionally, we would have to recompile a program for every system that it
    was going to run on because all systems have a different idea of what their machine
    code should look like. Java circumvents this issue by compiling all Java programs
    to the same type of interpreted code called bytecode.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 传统上，我们必须为每个要运行的系统重新编译程序，因为所有系统对其机器代码的理解都不同。Java通过将所有Java程序编译为一种称为字节码的相同类型的解释代码来避免这个问题。
- en: A compiled Java program in bytecode can be run by any system in which Java is
    installed. This is because when we install Java on your system, we also install
    a Java virtual machine with it that's specific to that system. It is this machine's
    responsibility to convert the bytecode into the final instructions that head to
    the processor in that system.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 字节码中的编译Java程序可以在安装了Java的任何系统上运行。这是因为当我们在您的系统上安装Java时，我们还会安装一个特定于该系统的Java虚拟机。这台机器的责任是将字节码转换为最终发送到该系统处理器的指令。
- en: By making it the system's responsibility to do this final conversion, Java has
    created a write once, run anywhere language where I can hand you a Java program
    and you can run it on your machine while being fairly certain that it's going
    to run in the same manner that it did on mine. This impressive level of cross-platform
    support on a language as powerful as Java has made it one of the software developing
    world's go-to tools for quite some time.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
- en: Java applications
  id: totrans-21
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In today's modern times, Java is used to develop desktop applications, web servers,
    and client-side web applications. It's the native language of the Android operating
    system, which operates on Android phones and tablets.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
- en: Java has been used to write video games and is sometimes even ported to smaller
    devices without a traditional operating system. It remains a huge player in today's
    technical world, and I'm looking forward to learning it with you.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
- en: Setting up your development environment
  id: totrans-24
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we're going to write our first Java program, but before we
    start coding away, we need to set up an environment that is Java-development friendly.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
- en: Installing JDK
  id: totrans-26
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To start off this process, let's download a **Java Development Kit** (**JDK**)
    or a Java SDK. This kit contains libraries and executables that allow us to do
    lots of different things with Java code. Most importantly, with our SDK installed,
    we'll be able to compile Java code and then run completed Java programs.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
- en: You may already have Java installed on your machine; however, unless you've
    done this explicitly, you probably haven't installed a Java SDK. The version of
    Java an average user has installed on their machine is called the **Java Runtime
    Environment** (**JRE**). This allows the execution of Java programs, and Java
    programs won't run on environments without the JRE installed. But the JRE doesn't
    contain any real development tools, which we're going to need. The good news is
    that a Java JRE and a Java SDK can exist harmoniously. A Java JRE is really just
    a subset of the SDK, so if we only have the Java Development Kit installed, which
    we're about to download, we're going to be fine.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
- en: 'If you have downloaded the Java Development Kit in the past, when you actually
    go to install this kit, Java will let you know that it''s already installed and
    you can skip that portion of the section. For everyone else, check out how to
    download a development kit:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
- en: To begin with, navigate to [www.oracle.com/technetwork/java/javase/downloads/index.html](http://www.oracle.com/technetwork/java/javase/downloads/index.html) through
    your browser.
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'We''re going to be using the Java SE, or Standard Edition, Development Kit
    maintained by Oracle. To acquire this kit, simply go to the Downloads tab, and
    express that we would like the JDK by selecting that option:'
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/72641905-2850-4214-8f5c-c067985f5cad.jpg)'
  id: totrans-32
  prefs: []
  type: TYPE_IMG
- en: 'Scroll down, check out the license agreement, accept the license agreement,
    and then download the version of the SDK that''s appropriate for your operating
    system. For me, that''s `jdk-8u144-windows-x64.exe`, listed at the end:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/4b7ef3dc-c4d3-40e9-8d33-e9c2fe8f5f9f.jpg)'
  id: totrans-34
  prefs: []
  type: TYPE_IMG
- en: Once your download is complete, install it as we would any other program. Choose
    the default options when appropriate and make sure to take note of the directory
    to which we will install our development kit.
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Installing the NetBeans IDE
  id: totrans-36
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: With our Java Development Kit installed, we technically have all the tools we
    need to start writing Java programs. However, we'd have to compile them through
    a command line, which can look a little different on different operating systems.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
- en: So to keep everything simple, let's start learning Java by writing our Java
    code in an **Integrated Development Environment** (**IDE**). This is a software
    program of its own that helps us write, compile, and run Java programs. We're
    going to use the NetBeans IDE, which is awesome because it is free, open source,
    and it's going to operate just about the same on Windows, Mac, and Linux environments.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
- en: To acquire this IDE, head to [netbeans.org/downloads/](http://netbeans.org/downloads/).
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
- en: 'You''ll see the following page:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/1810e6d5-c115-480a-8191-325b52efb867.jpg)'
  id: totrans-41
  prefs: []
  type: TYPE_IMG
- en: 'Because we''ve downloaded the Java Standard Edition Development Kit, Java SE
    is the version of NetBeans that we''re going to download here. Choose the Download
    button below the Java SE column. NetBeans should start our download automatically,
    but if it doesn''t, click on the link shown in the following image:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/2d7ea03e-84fe-4f11-8b41-986c231e2cbd.jpg)'
  id: totrans-43
  prefs: []
  type: TYPE_IMG
- en: Once again, we're going to install NetBeans as we would any other program, choosing
    the default options when appropriate. Most likely, NetBeans will locate the Java
    Development Kit on our machine. If it doesn't, it will prompt us for the directory
    in which we installed the Java Development Kit.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
- en: Writing our first Java program
  id: totrans-45
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Hopefully, you have gotten NetBeans installed and have booted it up without
    any hassle. NetBeans will manage the file structure of our programs, but first,
    we need to tell NetBeans that we're ready to begin a new project.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
- en: Creating a new project
  id: totrans-47
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To create a new project, click on File, then New Project, and choose Java Application:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/39f2a966-b160-4b48-9cd9-6d2d2672f297.jpg)'
  id: totrans-49
  prefs: []
  type: TYPE_IMG
- en: 'We''re going to need to give our project a distinctive name; let''s call this
    one `HelloWorld`. Then, we can choose a location to put the file. Because this
    is our very first Java program, we should probably start from as close to scratch
    as possible. So let''s uncheck the Create Main Class option so that NetBeans would
    give us pretty much a blank project. Then, click on Finish:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/9f5fb921-1f16-4012-8079-519cd2cdc128.jpg)'
  id: totrans-51
  prefs: []
  type: TYPE_IMG
- en: 'NetBeans will set up a filesystem for us. We can navigate this filesystem just
    like we were in a standard filesystem explorer:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/f73dd9ca-ed52-47db-8947-e074a386c7b9.jpg)'
  id: totrans-53
  prefs: []
  type: TYPE_IMG
- en: 'The `Source Packages` file is where we''ll be writing our code. You''ll notice
    under the `Libraries` file that the JDK is linked, allowing us to access all of
    its many library resources:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/99635cb8-9ab8-4159-a9ec-52005733d693.jpg)'
  id: totrans-55
  prefs: []
  type: TYPE_IMG
- en: Creating a Java class
  id: totrans-56
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Once we have created a new project, we should see the Projects, Files, and
    Services tabs like I have in the following image. Let''s look at the Files tab.
    Whereas the Projects tab is a bit of an abstraction, the Files tab shows us what''s
    actually contained within the filesystem where our `HelloWorld` project lives:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/68a454d5-2af1-4a14-a35b-6e267abb65d9.jpg)'
  id: totrans-58
  prefs: []
  type: TYPE_IMG
- en: 'Most importantly, you''ll see that the `src` file here has no files in it.
    That''s because there''s no source code associated with our project, so right
    now it won''t do anything. To remedy this, right-click on `src`, choose New, and
    then Java Class...:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/67f5a9bf-42b3-4967-b24d-67c2bf2305cc.jpg)'
  id: totrans-60
  prefs: []
  type: TYPE_IMG
- en: 'We''re going to name our Java Class `HelloWorld`, just like the name of the
    project because it is our main class where the program should be entered and start
    from. Everything else is going to work just fine here for now, so click on Finish
    and NetBeans will create `HelloWorld.java` for us. A `.java` file is essentially
    a text file, but it should only contain Java code and comments:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/3f9dbcfe-e415-461c-a52c-40f2a7b49f74.jpg)'
  id: totrans-62
  prefs: []
  type: TYPE_IMG
- en: Writing the code
  id: totrans-63
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'When we told NetBeans to make the `HelloWorld.java` file, it took some liberties
    and added some code for us already as shown in the following screenshot:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/ac8bbad7-0e17-4d8f-b7d2-83c63b7b8da6.jpg)'
  id: totrans-65
  prefs: []
  type: TYPE_IMG
- en: Java comments
  id: totrans-66
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You'll notice that some of the contents of this document are completely human-readable;
    these are what we call comments. Any text that appears in a Java file between
    the `/*` and `*/` symbols will be completely ignored by the compiler. We can write
    whatever we would like in here and it will not affect how our program would operate.
    For now, let's just delete these comments so that we can deal purely with our
    Java code.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
- en: The main() function
  id: totrans-68
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Java code, like the English language, is read top down and left to right. Even
    if our project contains many files and many classes, we still need to start reading
    and executing our code at a specific point. We named this file and class `HelloWorld`,
    the same name as our project, because we would like it to be special and contain
    the `public static void main(String[] args)` method where the execution of our
    code will begin. That''s quite a mouthful of jargon. For now, just type it out
    and know that this is the area of our code from where our Java program will begin
    reading and executing. Once again, this will become much clearer as we begin to
    learn Java; just know this is the starting point of our Java program. The `main()`
    function''s code is enclosed in curly brackets:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: Java代码，就像英语一样，是从上到下，从左到右阅读的。即使我们的项目包含许多文件和许多类，我们仍然需要从特定点开始阅读和执行我们的代码。我们将这个文件和类命名为`HelloWorld`，与我们的项目同名，因为我们希望它是特殊的，并包含`public
    static void main(String[] args)`方法，我们的代码执行将从这里开始。这是一个很啰嗦的行话。现在，只需将其输入并知道这是我们的Java程序开始阅读和执行的地方。`main()`函数的代码用大括号括起来：
- en: '[PRE0]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: One of the great things about working in an IDE is that it will highlight which
    brackets correspond to each other. The brackets allow us to place code within
    other areas of code. For example, our `main()` method is contained within the
    `HelloWorld` class, and the Java code which we're about to write and execute is
    going to be contained in our `main()` method. Line 4, which currently contains
    nothing, is where our program will look to start reading and executing the Java
    code.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 在IDE中工作的一个很棒的地方是它会突出显示哪些括号相互对应。括号允许我们将代码放在其他代码区域中。例如，我们的`main()`方法包含在`HelloWorld`类中，我们即将编写和执行的Java代码将包含在我们的`main()`方法中。目前什么都没有的第4行是我们的程序将开始阅读和执行Java代码的地方。
- en: Printing a string
  id: totrans-72
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 打印字符串
- en: Our goal with this `HelloWorld` program is pretty modest. When it runs, we'd
    like it to print some text to this output box at the bottom of our screen.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的`HelloWorld`程序的目标相当温和。当它运行时，我们希望它将一些文本打印到屏幕底部的输出框中。
- en: 'When we downloaded the Java SDK, we acquired a library of useful functions,
    one of which will do just this. This is the `println()`, or print line, function.
    When our Java code executes over this function, which it will do right away because
    it''s the first function in our `main()` method''s entry point, the Java code
    will print some words to our output box. Function names are followed by open and
    close parentheses. Inside these parentheses, we put information that the functions
    need to complete their task. The `println()` method, of course, needs to know
    what we would like it to print. In Java, a line of text is contained by two double
    quotation marks and we call it a **string**. Let''s have our program print `"Hello
    World!"`:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们下载了Java SDK时，我们获得了一个有用函数库，其中一个函数将做到这一点。这就是`println()`，或者打印行，函数。当我们的Java代码执行这个函数时，它会立即执行，因为它是我们`main()`方法入口点中的第一个函数，Java代码将向我们的输出框打印一些文字。函数名后面跟着开括号和闭括号。在这些括号内，我们放置函数完成任务所需的信息。`println()`方法当然需要知道我们想要它打印什么。在Java中，一行文本由两个双引号括起来，我们称之为**字符串**。让我们让我们的程序打印`"Hello
    World!"`：
- en: '![](img/589ef021-05ae-461e-b617-32e2b7195fd3.jpg)'
  id: totrans-75
  prefs: []
  type: TYPE_IMG
  zh: '![](img/589ef021-05ae-461e-b617-32e2b7195fd3.jpg)'
- en: Java syntax
  id: totrans-76
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Java语法
- en: You might have noticed that NetBeans has been yelling at us for a little bit.
    There's a light bulb and a red dot on the left and some red jittering under our
    text, a lot like if we had made a spelling error in some text editors. And that's
    really what we've done. We've made a syntax mistake. There's something clearly
    wrong with our Java code and NetBeans knows it.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能已经注意到NetBeans一直在对我们大声呼喊。左边有一个灯泡和一个红点，文本下面有一些红色的抖动，很像在一些文本编辑器中出现拼写错误。这确实是我们所做的。我们犯了一个语法错误。我们的Java代码显然有问题，NetBeans知道这一点。
- en: 'There are two things wrong here. The first is that our code doesn''t end with
    a semicolon. Java doesn''t do a good job of reading spaces and carriage returns,
    so we need to put semicolons at the end of every functional line of code for the
    same reason that a Morse code operator would send the message "stop" at the end
    of every line. Let''s add a semicolon at the end of our `println()` statement:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有两个问题。首先是我们的代码没有以分号结束。Java不能很好地读取空格和换行，所以我们需要在每行功能代码的末尾加上分号，原因与摩尔斯电码操作员在每行末尾发送消息“停止”是一样的。让我们在我们的`println()`语句的末尾添加一个分号：
- en: '![](img/da46f0cd-a6e7-464f-9435-7e91e687b862.jpg)'
  id: totrans-79
  prefs: []
  type: TYPE_IMG
  zh: '![](img/da46f0cd-a6e7-464f-9435-7e91e687b862.jpg)'
- en: NetBeans has become a little more satisfied; the jittering has decreased, but
    there's still something wrong as shown in the preceding screenshot.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: NetBeans变得更加满意了；抖动减少了，但如前面的截图所示，仍然有些问题。
- en: The issue is that functions in a programming language, just like files on a
    computer, have a location where they exist. NetBeans isn't sure where to find
    the `println()` function that we've attempted to use. So we simply need to tell
    NetBeans where this function exists. The full path to the `println()` function
    starts from the `System` package, which includes the `out` class, which has the
    definition of the `println()` function. We write that in Java as `System.out.println("Hello
    World!");` as shown in the following code block.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 问题在于编程语言中的函数，就像计算机上的文件一样，有一个存在的位置。NetBeans不确定在哪里找到我们尝试使用的`println()`函数。所以我们只需要告诉NetBeans这个函数存在的位置。`println()`函数的完整路径始于`System`包，其中包括`out`类，该类定义了`println()`函数。我们在Java中写成`System.out.println("Hello
    World!");`，如下面的代码块所示。
- en: 'Let''s get rid of the extra spaces I created at lines 5, 6, and 7, not because
    they would affect the way our program runs, but because it doesn''t make it look
    quite as nice. Now we''ve written our `HelloWorld` program:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们去掉我在第5、6和7行创建的额外空格，不是因为它们会影响我们程序的运行方式，而是因为这样看起来不够好看。现在我们已经写好了我们的“HelloWorld”程序：
- en: '[PRE1]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Executing our program
  id: totrans-84
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 执行我们的程序
- en: 'So what do we do with this? Well, as we know, our computer can''t read this
    Java code directly. It must convert it into a computer-readable language. So executing
    this code becomes a two-step process:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
- en: '**Compiling our program**: First, we''re going to ask NetBeans to build our
    project. This means that all of the code within our project will be compiled and
    converted into computer-readable code in a, essentially, computer-readable project:![](img/6929328e-d378-484b-9a23-cbdc8ac4acdd.jpg)'
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'When we press the Build Project button, we''ll see a bunch of text in our output
    box at the bottom of the screen--hopefully the nice `BUILD SUCCESSFUL` message,
    followed by the time it took to build the project:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/75e076ab-f22a-4773-b8bc-041ac99bb5d5.jpg)'
  id: totrans-88
  prefs: []
  type: TYPE_IMG
- en: '**Running our program**: Once we''ve built our project, we can press the Run Project
    button to execute our code and our `println` statement:'
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/f8283a03-07e0-458e-ae8a-bcd5237204a0.jpg)'
  id: totrans-90
  prefs: []
  type: TYPE_IMG
- en: 'NetBeans will then give us the following pop-up box:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/1af1eb0b-246e-4bf6-8af2-ee056cea0708.jpg)'
  id: totrans-92
  prefs: []
  type: TYPE_IMG
- en: 'When we execute a program outside of an IDE, we execute it by launching one
    of its executable files. Because we''re in an integrated development environment
    right now, NetBeans wants to be sure which of our files we would like to be the
    entry point of our program. We only have one option here because we''ve only written
    one Java class. So let''s confirm to NetBeans that `HelloWorld` is our main class
    and the `main()` function in the `HelloWorld` program will, therefore, be where
    we start executing our Java program. Then, when we hit OK, our output box will
    tell us the program has begun to run and our program then prints `"Hello World!"`
    to the output box as we intended:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/ca119785-2546-49c2-b977-285243c36e64.jpg)'
  id: totrans-94
  prefs: []
  type: TYPE_IMG
- en: There we have it! Now we're Java programmers. Of course, there's more than a
    little bit left to learn. In fact, `HelloWorld` in Java is probably the simplest
    program you'll ever write. Java is extremely powerful, and the reality is we simply
    can't hope to appreciate all of its intricacies while writing our first program.
    The really good news is that from this point on, we need to take far fewer leaps
    of faith and we can begin to build a very solid understanding of Java by taking
    a step-by-step approach.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
- en: How to interpret errors detected by NetBeans?
  id: totrans-96
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As we write more and more complicated Java programs, we're inevitably going
    to make some mistakes. Some of these mistakes will be significant logic errors
    or misunderstandings on our part that we might have to further educate ourselves
    before we can solve them. But, especially while we're starting our programming,
    we're going to make a lot of small silly errors that are really easy to fix as
    long as we know where to look.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
- en: 'Fortunately, Java compilers are designed to point errors out to us when they
    come across them. To see this in action, let''s simply make our `HelloWorld` program
    incorrect by removing the semicolon from the end of the `println` statement:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/210c5d27-c106-4e69-8461-037b5c2e75bf.jpg)'
  id: totrans-99
  prefs: []
  type: TYPE_IMG
- en: 'Now NetBeans red-jitters the line to let us know that it''s pretty sure something''s
    wrong, but we can ask our compiler to take a shot at it anyway. If we attempt
    to build this project, we don''t get the `COMPILATION SUCCESSFUL` message we otherwise
    would; instead, we get an error message:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/1e72afb6-0747-4961-98aa-e65fa60a5331.jpg)'
  id: totrans-101
  prefs: []
  type: TYPE_IMG
- en: 'This error is `'';'' expected`, which is a pretty handy and self-explanatory
    error message. Of equal importance is the number after the colon in this message,
    which is `4`. This lets us know on what line the compiler came across this error.
    In NetBeans, if we click on an error message, the IDE will highlight that line
    of code:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/5a8fc862-a551-4847-983a-90a65d88b83c.jpg)'
  id: totrans-103
  prefs: []
  type: TYPE_IMG
- en: 'If we add in our semicolon, then our program builds successfully as shown in
    the following screenshot:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/89567df5-38cb-4314-8211-1e6a39f3f43d.jpg)'
  id: totrans-105
  prefs: []
  type: TYPE_IMG
- en: That's all there is to it.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
- en: 'Of course, not all error messages are quite that self-explanatory. For the
    sake of argument, let''s create a slightly more complicated error. What would
    have happened if we had forgotten to insert one of our parentheses in this program?
    This is illustrated in the following code:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/a3bd9e05-c334-4845-afa8-8438493525f9.jpg)'
  id: totrans-108
  prefs: []
  type: TYPE_IMG
- en: 'When we press Build Project, we get not one but two errors, even though we
    really only made one mistake:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/c037519d-e9ed-40c4-a4a3-c3e6b4ba7974.jpg)'
  id: totrans-110
  prefs: []
  type: TYPE_IMG
- en: Our first error is `not a statement`, then it lets us know the line that it
    doesn't understand. If we look at the first error for a little bit, we'll probably
    notice that we're missing a pair of parentheses, so we will be able to fix this
    error; however, what about the second error? We got `';' expected` again even
    though in this case we really do have a semicolon.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
- en: Well, once one error has occurred in the program, the compiler's ability to
    understand the lines of the code gets shattered very quickly. When we're debugging
    our code, the general rule of thumb is to address only the top error on our list;
    that's the first error that the compiler came across in our code. We might be
    able to glean some helpful information from errors further down, but more often
    than not, they're simply going to be errors generated by the first syntax mistake
    we made. Nothing too mind-blowing here, but I wanted to point this out to you
    because being able to track compiler errors can save us a lot of headaches while
    we're learning to program.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
- en: The code completion feature
  id: totrans-113
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'While we''re talking about NetBeans, let''s quickly go over one other IDE feature.
    Let''s say I wanted to write a new line of code and I''m going to use something
    from the `System` library:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/881707e3-08df-4582-92f4-1b115d9e3a36.jpg)'
  id: totrans-115
  prefs: []
  type: TYPE_IMG
- en: 'Once I''ve typed `System.`, NetBeans can suggest valid responses for me. Only
    one of these, of course, is going to be what I''m looking for. The NetBeans compiler
    has a lot of helpful features such as these. If you''re the kind of person who
    thinks code completion is awesome, go ahead and leave these tools on. We can do
    this by going to Tools | Options | Code Completion and checking the features that
    we''d like:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/036e89b8-1c27-42f2-bd51-35a92310b995.jpg)'
  id: totrans-117
  prefs: []
  type: TYPE_IMG
- en: If you'd rather NetBeans behave a little more like a text editor, go ahead and
    uncheck all the features.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
- en: There we go, lots of housecleaning in this section, but hopefully quick and
    not too painful.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  id: totrans-120
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you learned what Java is and saw its features. We saw the expanse
    of Java's application by looking at the various fields it is used in.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
- en: We walked through the steps to install a Java Development Kit. We then set up
    a development environment called **NetBeans** for writing Java programs and executing
    them. We saw how to use NetBeans and wrote our first Java program in it. Next,
    we saw how to use NetBeans' ability to detect errors for rectifying them.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we'll look at the various Java data types and how to work
    with variables.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
