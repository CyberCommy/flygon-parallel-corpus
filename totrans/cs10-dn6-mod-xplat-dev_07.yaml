- en: '07'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '07'
- en: Packaging and Distributing .NET Types
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 打包和分发.NET类型
- en: This chapter is about how C# keywords are related to .NET types, and about the
    relationship between namespaces and assemblies. You'll also become familiar with
    how to package and publish your .NET apps and libraries for cross-platform use,
    how to use legacy .NET Framework libraries in .NET libraries, and the possibility
    of porting legacy .NET Framework code bases to modern .NET.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章介绍了C#关键字与.NET类型的关系，以及命名空间和程序集之间的关系。您还将熟悉如何打包和发布您的.NET应用程序和库以供跨平台使用，如何在.NET库中使用传统的.NET
    Framework库，以及将传统的.NET Framework代码库移植到现代.NET的可能性。
- en: 'This chapter covers the following topics:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本章涵盖以下主题：
- en: The road to .NET 6
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通往.NET 6的道路
- en: Understanding .NET components
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解.NET组件
- en: Publishing your applications for deployment
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 发布您的应用程序以进行部署
- en: Decompiling .NET assemblies
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 反编译.NET程序集
- en: Packaging your libraries for NuGet distribution
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为NuGet分发打包您的库
- en: Porting from .NET Framework to modern .NET
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从.NET Framework迁移到现代.NET
- en: Working with preview features
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用预览功能工作
- en: The road to .NET 6
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 通往.NET 6的道路
- en: This part of the book is about the functionality in the **Base Class Library**
    (**BCL** ) APIs provided by .NET and how to reuse functionality across all the
    different .NET platforms using .NET Standard.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 本书的这一部分介绍了.NET提供的**基类库**（**BCL**）API中的功能，以及如何使用.NET Standard在所有不同的.NET平台上重用功能。
- en: First, we will review the route to this point and why it is important to understand
    the past.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们将回顾到达这一点的路线以及了解过去的重要性。
- en: .NET Core 2.0 and later's support for a minimum of .NET Standard 2.0 is important
    because it provides many of the APIs that were missing from the first version
    of .NET Core. The 15 years' worth of libraries and applications that .NET Framework
    developers had available to them that are relevant for modern development have
    now been migrated to .NET and can run cross-platform on macOS and Linux variants,
    as well as on Windows.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: .NET Core 2.0及更高版本对于最低.NET Standard 2.0的支持非常重要，因为它提供了许多在第一个版本的.NET Core中缺失的API。.NET
    Framework开发人员在过去15年中可用的库和应用程序现在已经迁移到.NET，并且可以在macOS和Linux变体上跨平台运行，以及在Windows上运行。
- en: .NET Standard 2.1 added about 3,000 new APIs. Some of those APIs need runtime
    changes that would break backward compatibility, so .NET Framework 4.8 only implements
    .NET Standard 2.0\. .NET Core 3.0, Xamarin, Mono, and Unity implement .NET Standard
    2.1.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: .NET Standard 2.1增加了大约3,000个新的API。其中一些API需要运行时更改，这将破坏向后兼容性，因此.NET Framework
    4.8只实现.NET Standard 2.0。.NET Core 3.0、Xamarin、Mono和Unity实现了.NET Standard 2.1。
- en: .NET 6 removes the need for .NET Standard if all your projects can use .NET
    6\. Since you might still need to create class libraries for legacy .NET Framework
    projects or legacy Xamarin mobile apps, there is still a need to create .NET Standard
    2.0 and 2.1 class libraries. In March 2021, I surveyed professional developers,
    and half still needed to create .NET Standard 2.0 compliant class libraries.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您的所有项目都可以使用.NET 6，.NET 6将不再需要.NET Standard。由于您可能仍然需要为传统的.NET Framework项目或传统的Xamarin移动应用程序创建类库，因此仍然需要创建.NET
    Standard 2.0和2.1类库。在2021年3月，我对专业开发人员进行了调查，一半的人仍然需要创建符合.NET Standard 2.0的类库。
- en: Now that .NET 6 has been released with preview support for mobile and desktop
    apps built using .NET MAUI, the need for .NET Standard has been further reduced.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 现在.NET 6已经发布，支持使用.NET MAUI构建移动和桌面应用程序的预览，因此进一步减少了对.NET Standard的需求。
- en: 'To summarize the progress that .NET has made over the past five years, I have
    compared the major .NET Core and modern .NET versions with the equivalent .NET
    Framework versions in the following list:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 为了总结过去五年中.NET的进展，我已经将主要的.NET Core和现代.NET版本与等效的.NET Framework版本进行了比较，具体如下：
- en: '**.NET Core 1.x** : much smaller API compared to .NET Framework 4.6.1, which
    was the current version in March 2016.'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**.NET Core 1.x**：与2016年3月的当前版本.NET Framework 4.6.1相比，API要小得多。'
- en: '**.NET Core 2.x** : reached API parity with .NET Framework 4.7.1 for modern
    APIs because they both implement .NET Standard 2.0.'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**.NET Core 2.x**：与.NET Framework 4.7.1相比，现代API达到了API的平等，因为它们都实现了.NET Standard
    2.0。'
- en: '**.NET Core 3.x** : larger API compared to .NET Framework for modern APIs because.NET Framework
    4.8 does not implement .NET Standard 2.1.'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**.NET Core 3.x**：与.NET Framework相比，现代API更大，因为.NET Framework 4.8没有实现.NET Standard
    2.1。'
- en: '**.NET 5** : even larger API compared to .NET Framework 4.8 for modern APIs,
    with much-improved performance.'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**.NET 5**：与现代API相比，与.NET Framework 4.8相比，API更大，性能得到了大幅提升。'
- en: '**.NET 6** : final unification with the support for mobile apps in .NET MAUI,
    expected by May 2022.'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**.NET 6**：预计将在2022年5月之前最终统一，并支持.NET MAUI中的移动应用程序。'
- en: .NET Core 1.0
  id: totrans-24
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: .NET Core 1.0
- en: .NET Core 1.0 was released in June 2016 and focused on implementing an API suitable
    for building modern cross-platform apps, including web and cloud applications
    and services for Linux using ASP.NET Core.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: .NET Core 1.0于2016年6月发布，重点是实现适用于构建现代跨平台应用程序的API，包括使用ASP.NET Core为Linux构建的Web和云应用程序和服务。
- en: .NET Core 1.1
  id: totrans-26
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: .NET Core 1.1
- en: .NET Core 1.1 was released in November 2016 and focused on fixing bugs, increasing
    the number of Linux distributions supported, supporting .NET Standard 1.6, and
    improving performance, especially with ASP.NET Core for web apps and services.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: .NET Core 1.1于2016年11月发布，重点是修复错误，增加支持的Linux发行版数量，支持.NET Standard 1.6，并提高性能，特别是对于Web应用程序和服务的ASP.NET
    Core。
- en: .NET Core 2.0
  id: totrans-28
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: .NET Core 2.0
- en: .NET Core 2.0 was released in August 2017 and focused on implementing .NET Standard
    2.0, the ability to reference .NET Framework libraries, and more performance improvements.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: .NET Core 2.0于2017年8月发布，重点是实现.NET Standard 2.0，引用.NET Framework库的能力，以及更多的性能改进。
- en: The third edition of this book was published in November 2017, so it covered
    up to .NET Core 2.0 and .NET Core for **Universal Windows Platform** (**UWP**
    ) apps.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 这本书的第三版于2017年11月出版，因此涵盖了.NET Core 2.0和**通用Windows平台**（**UWP**）应用程序。
- en: .NET Core 2.1
  id: totrans-31
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: .NET Core 2.1
- en: '.NET Core 2.1 was released in May 2018 and focused on an extendable tooling
    system, adding new types like `Span<T>` , new APIs for cryptography and compression,
    a Windows Compatibility Pack with an additional 20,000 APIs to help port old Windows
    applications, Entity Framework Core value conversions, LINQ `GroupBy` conversions,
    data seeding, query types, and even more performance improvements, including the
    topics listed in the following table:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: .NET Core 2.1于2018年5月发布，重点是可扩展的工具系统，添加了新类型如`Span<T>`，新的加密和压缩API，一个Windows兼容包，其中包含额外的20,000个API，以帮助移植旧的Windows应用程序，Entity
    Framework Core值转换，LINQ `GroupBy`转换，数据种子，查询类型，以及更多性能改进，包括以下表中列出的主题：
- en: '| Feature | Chapter | Topic |'
  id: totrans-33
  prefs: []
  type: TYPE_TB
  zh: '| 功能 | 章节 | 主题 |'
- en: '| Spans | 8 | Working with spans, indexes, and ranges |'
  id: totrans-34
  prefs: []
  type: TYPE_TB
  zh: '| Spans | 8 | 使用spans、索引和范围 |'
- en: '| Brotli compression | 9 | Compressing with the Brotli algorithm |'
  id: totrans-35
  prefs: []
  type: TYPE_TB
  zh: '| Brotli压缩 | 9 | 使用Brotli算法进行压缩 |'
- en: '| Cryptography | 20 | What''s new in cryptography? |'
  id: totrans-36
  prefs: []
  type: TYPE_TB
  zh: '| 加密 | 20 | 加密的新功能是什么？ |'
- en: '| EF Core Lazy loading | 10 | Enabling lazy loading |'
  id: totrans-37
  prefs: []
  type: TYPE_TB
  zh: '| EF Core 懒加载 | 10 | 启用延迟加载 |'
- en: '| EF Core Data seeding | 10 | Understanding data seeding |'
  id: totrans-38
  prefs: []
  type: TYPE_TB
  zh: '| EF Core 数据种子 | 10 | 理解数据种子 |'
- en: .NET Core 2.2
  id: totrans-39
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: .NET Core 2.2
- en: .NET Core 2.2 was released in December 2018 and focused on diagnostic improvements
    for the runtime, optional tiered compilation, and adding new features to ASP.NET
    Core and Entity Framework Core like spatial data support using types from the
    **NetTopologySuite** (**NTS** ) library, query tags, and collections of owned
    entities.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: .NET Core 2.2于2018年12月发布，重点是对运行时的诊断改进，可选的分层编译，并为ASP.NET Core和Entity Framework
    Core添加了新功能，如使用**NetTopologySuite**（**NTS**）库中的类型支持空间数据，查询标签和拥有实体的集合。
- en: .NET Core 3.0
  id: totrans-41
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: .NET Core 3.0
- en: '.NET Core 3.0 was released in September 2019 and focused on adding support
    for building Windows desktop applications using Windows Forms (2001), **Windows
    Presentation Foundation** (**WPF** ; 2006), and Entity Framework 6.3, side-by-side
    and app-local deployments, a fast JSON reader, serial port access and other pinout
    access for **Internet of Things** (**IoT** ) solutions, and tiered compilation
    by default, including the topics listed in the following table:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: .NET Core 3.0于2019年9月发布，重点是添加对使用Windows窗体（2001）、**Windows Presentation Foundation**（**WPF**；2006）和Entity
    Framework 6.3构建Windows桌面应用程序的支持，同时支持应用程序本地部署，快速JSON读取器，串口访问和其他用于**物联网**（**IoT**）解决方案的引脚访问，以及默认情况下的分层编译，包括以下表中列出的主题：
- en: '| Feature | Chapter | Topic |'
  id: totrans-43
  prefs: []
  type: TYPE_TB
  zh: '| 功能 | 章节 | 主题 |'
- en: '| Embedding .NET in-app | 7 | Publishing your applications for deployment |'
  id: totrans-44
  prefs: []
  type: TYPE_TB
  zh: '| 将.NET嵌入应用程序中 | 7 | 发布您的应用程序以进行部署 |'
- en: '| `Index` and `Range` | 8 | Working with spans, indexes, and ranges |'
  id: totrans-45
  prefs: []
  type: TYPE_TB
  zh: '| `Index` 和 `Range` | 8 | 使用spans、索引和范围 |'
- en: '| `System.Text.Json` | 9 | High-performance JSON processing |'
  id: totrans-46
  prefs: []
  type: TYPE_TB
  zh: '| `System.Text.Json` | 9 | 高性能JSON处理 |'
- en: '| Async streams | 12 | Working with async streams |'
  id: totrans-47
  prefs: []
  type: TYPE_TB
  zh: '| 异步流 | 12 | 使用异步流 |'
- en: The fourth edition of this book was published in October 2019, so it covered
    some of the new APIs added in later versions up to .NET Core 3.0.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 该书的第四版于2019年10月出版，因此涵盖了直到.NET Core 3.0版本后添加的一些新API。
- en: .NET Core 3.1
  id: totrans-49
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: .NET Core 3.1
- en: .NET Core 3.1 was released in December 2019 and focused on bug fixes and refinements
    so that it could be a **Long Term Support** (**LTS** ) release, not losing support
    until December 2022.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: .NET Core 3.1于2019年12月发布，重点是修复错误和改进，以便成为**长期支持**（**LTS**）版本，直到2022年12月才停止支持。
- en: .NET 5.0
  id: totrans-51
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: .NET 5.0
- en: '.NET 5.0 was released in November 2020 and focused on unifying the various
    .NET platforms except mobile, refining the platform, and improving performance,
    including the topics listed in the following table:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: .NET 5.0于2020年11月发布，重点是统一各种.NET平台（除移动平台），完善平台，并提高性能，包括以下表中列出的主题：
- en: '| Feature | Chapter | Topic |'
  id: totrans-53
  prefs: []
  type: TYPE_TB
  zh: '| 功能 | 章节 | 主题 |'
- en: '| `Half` type | 8 | Working with numbers |'
  id: totrans-54
  prefs: []
  type: TYPE_TB
  zh: '| `Half`类型 | 8 | 处理数字 |'
- en: '| Regular expression performance improvements | 8 | Regular expression performance
    improvements |'
  id: totrans-55
  prefs: []
  type: TYPE_TB
  zh: '| 正则表达式性能改进 | 8 | 正则表达式性能改进 |'
- en: '| `System.Text.Json` improvements | 9 | High-performance JSON processing |'
  id: totrans-56
  prefs: []
  type: TYPE_TB
  zh: '| `System.Text.Json` 改进 | 9 | 高性能JSON处理 |'
- en: '| EF Core generated SQL | 10 | Getting the generated SQL |'
  id: totrans-57
  prefs: []
  type: TYPE_TB
  zh: '| EF Core生成的SQL | 10 | 获取生成的SQL |'
- en: '| EF Core Filtered Include | 10 | Filtering included entities |'
  id: totrans-58
  prefs: []
  type: TYPE_TB
  zh: '| EF Core Filtered Include | 10 | 过滤包含的实体 |'
- en: '| EF Core Scaffold-DbContext now singularizes using Humanizer | 10 | Scaffolding
    models using an existing database |'
  id: totrans-59
  prefs: []
  type: TYPE_TB
  zh: '| EF Core Scaffold-DbContext 现在使用 Humanizer 进行单数化 | 10 | 使用现有数据库搭建模型 |'
- en: .NET 6.0
  id: totrans-60
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: .NET 6.0
- en: '.NET 6.0 was released in November 2021 and focused on unifying with the mobile
    platform, adding more features to EF Core for data management, and improving performance,
    including the topics listed in the following table:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: .NET 6.0于2021年11月发布，重点是与移动平台统一，为EF Core添加更多数据管理功能，并提高性能，包括以下表中列出的主题：
- en: '| Feature | Chapter | Topic |'
  id: totrans-62
  prefs: []
  type: TYPE_TB
  zh: '| 功能 | 章节 | 主题 |'
- en: '| Check .NET SDK status | 7 | Checking your .NET SDKs for updates |'
  id: totrans-63
  prefs: []
  type: TYPE_TB
  zh: '| 检查.NET SDK状态 | 7 | 检查.NET SDK是否有更新 |'
- en: '| Support for Apple Silicon | 7 | Creating a console application to publish
    |'
  id: totrans-64
  prefs: []
  type: TYPE_TB
  zh: '| Apple Silicon支持 | 7 | 创建用于发布的控制台应用程序 |'
- en: '| Link trim mode as default | 7 | Reducing the size of apps using app trimming
    |'
  id: totrans-65
  prefs: []
  type: TYPE_TB
  zh: '| 将链接修剪模式设置为默认 | 7 | 使用应用修剪减小应用程序的大小 |'
- en: '| `DateOnly` and `TimeOnly` | 8 | Specifying date and time values |'
  id: totrans-66
  prefs: []
  type: TYPE_TB
  zh: '| `DateOnly` 和 `TimeOnly` | 8 | 指定日期和时间值 |'
- en: '| `EnsureCapacity` for `List<T>` | 8 | Improving performance by ensuring the
    capacity of a collection |'
  id: totrans-67
  prefs: []
  type: TYPE_TB
  zh: '| `List<T>` 的 `EnsureCapacity` | 8 | 通过确保集合的容量来提高性能 |'
- en: '| EF Core configure conventions | 10 | Configuring preconvention models |'
  id: totrans-68
  prefs: []
  type: TYPE_TB
  zh: '| EF Core配置约定 | 10 | 配置预约定模型 |'
- en: '| New LINQ methods | 11 | Building LINQ expressions with the Enumerable class
    |'
  id: totrans-69
  prefs: []
  type: TYPE_TB
  zh: '| 新的LINQ方法 | 11 | 使用Enumerable类构建LINQ表达式 |'
- en: Improving performance from .NET Core 2.0 to .NET 5
  id: totrans-70
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 从.NET Core 2.0到.NET 5的性能改进
- en: 'Microsoft has made significant improvements to performance in the past few
    years. You can read a detailed blog post at the following link: [https://devblogs.microsoft.com/dotnet/performance-improvements-in-net-5/](https://devblogs.microsoft.com/dotnet/performance-improvements-in-net-5/)
    .'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
- en: Checking your .NET SDKs for updates
  id: totrans-72
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'With .NET 6, Microsoft added a command to check the versions of .NET SDKs and
    runtimes that you have installed and warn you if any need updating. For example,
    you enter the following command:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
- en: '```cs'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
- en: dotnet sdk check
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
- en: '```'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
- en: 'You will then see results, including the status of available updates, as shown
    in the following partial output:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
- en: '```cs'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
- en: '.NET SDKs:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
- en: Version                         Status
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
- en: '-----------------------------------------------------------------------------'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
- en: 3.1.412                         Up to date.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
- en: 5.0.202                         Patch 5.0.206 is available.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
- en: '...'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
- en: '```'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
- en: Understanding .NET components
  id: totrans-86
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '.NET is made up of several pieces, which are shown in the following list:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
- en: '**Language compilers** : These turn your source code written with languages
    such as C#, F#, and Visual Basic into **intermediate language** (**IL** ) code
    stored in assemblies. With C# 6.0 and later, Microsoft switched to an open-source
    rewritten compiler known as Roslyn that is also used by Visual Basic.'
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Common Language Runtime (CoreCLR)** : This runtime loads assemblies, compiles
    the IL code stored in them into native code instructions for your computer''s
    CPU, and executes the code within an environment that manages resources such as
    threads and memory.'
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Base Class Libraries (BCL or CoreFX)** : These are prebuilt assemblies of
    types packaged and distributed using NuGet for performing common tasks when building
    applications. You can use them to quickly build anything you want, rather like
    combining LEGO™ pieces. .NET Core 2.0 implemented .NET Standard 2.0, which is
    a superset of all previous versions of .NET Standard, and lifted .NET Core up
    to parity with .NET Framework and Xamarin. .NET Core 3.0 implemented .NET Standard
    2.1, which added new capabilities and enables performance improvements beyond
    those available in .NET Framework. .NET 6 implements a unified BCL across all
    types of apps, including mobile.'
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Understanding assemblies, NuGet packages, and namespaces
  id: totrans-91
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: An **assembly** is where a type is stored in the filesystem. Assemblies are
    a mechanism for deploying code. For example, the `System.Data.dll` assembly contains
    types for managing data. To use types in other assemblies, they must be referenced.
    Assemblies can be static (pre-created) or dynamic (generated at runtime). Dynamic
    assemblies are an advanced feature that we will not cover in this book. Assemblies
    can be compiled into a single file as a DLL (class library) or an EXE (console
    app).
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
- en: Assemblies are distributed as **NuGet packages** , which are files downloadable
    from public online feeds and can contain multiple assemblies and other resources.
    You will also hear about **project SDKs** , **workloads** , and **platforms**
    , which are combinations of NuGet packages.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
- en: 'Microsoft''s NuGet feed is found here: [https://www.nuget.org/](https://www.nuget.org/)
    .'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
- en: What is a namespace?
  id: totrans-95
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: A namespace is the address of a type. Namespaces are a mechanism to uniquely
    identify a type by requiring a full address rather than just a short name. In
    the real world, *Bob of 34 Sycamore Street* is different from *Bob of 12 Willow
    Drive* .
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
- en: In .NET, the `IActionFilter` interface of the `System.Web.Mvc` namespace is
    different from the `IActionFilter` interface of the `System.Web.Http.Filters`
    namespace.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
- en: Understanding dependent assemblies
  id: totrans-98
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If an assembly is compiled as a class library and provides types for other assemblies
    to use, then it has the file extension `.dll` (**dynamic link library** ), and
    it cannot be executed standalone.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
- en: Likewise, if an assembly is compiled as an application, then it has the file
    extension `.exe` (**executable** ) and can be executed standalone. Before .NET
    Core 3.0, console apps were compiled to `.dll` files and had to be executed by
    the `dotnet run` command or a host executable.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，如果一个程序集被编译为应用程序，那么它的文件扩展名是`.exe`（**可执行文件**），可以独立执行。在.NET Core 3.0之前，控制台应用程序被编译为`.dll`文件，并且必须通过`dotnet
    run`命令或主机可执行文件来执行。
- en: Any assembly can reference one or more class library assemblies as dependencies,
    but you cannot have circular references. So, assembly *B* cannot reference assembly
    *A* if assembly *A* already references assembly *B* . The compiler will warn you
    if you attempt to add a dependency reference that would cause a circular reference.
    Circular references are often a warning sign of poor code design. If you are sure
    that you need a circular reference, then use an interface to solve it.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 任何程序集都可以引用一个或多个类库程序集作为依赖项，但不能有循环引用。因此，如果程序集*A*已经引用了程序集*B*，那么程序集*B*就不能引用程序集*A*。如果您尝试添加一个会导致循环引用的依赖引用，编译器会警告您。循环引用通常是糟糕代码设计的警告信号。如果您确定需要循环引用，那么使用接口来解决它。
- en: Understanding the Microsoft .NET project SDKs
  id: totrans-102
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 理解Microsoft .NET项目SDK
- en: By default, console applications have a dependency reference on the Microsoft
    .NET project SDK. This platform contains thousands of types in NuGet packages
    that almost all applications would need, such as the `System.Int32` and `System.String`
    types.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，控制台应用程序依赖于Microsoft .NET项目SDK。该平台包含了几乎所有应用程序都需要的NuGet包中的成千上万的类型，例如`System.Int32`和`System.String`类型。
- en: When using .NET, you reference the dependency assemblies, NuGet packages, and
    platforms that your application needs in a project file.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用.NET时，您需要在项目文件中引用依赖程序集、NuGet包和应用程序所需的平台。
- en: 'Let''s explore the relationship between assemblies and namespaces:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来探讨程序集和命名空间之间的关系：
- en: Use your preferred code editor to create a new solution/workspace named `Chapter07`
    .
  id: totrans-106
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用您喜欢的代码编辑器创建一个名为`Chapter07`的新解决方案/工作区。
- en: 'Add a console app project, as defined in the following list:'
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加一个控制台应用程序项目，如下列表所定义的：
- en: 'Project template: **Console Application** / `console`'
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 项目模板：**控制台应用程序** / `console`
- en: 'Workspace/solution file and folder: `Chapter07`'
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 工作区/解决方案文件和文件夹：`Chapter07`
- en: 'Project file and folder: `AssembliesAndNamespaces`'
  id: totrans-110
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 项目文件和文件夹：`AssembliesAndNamespaces`
- en: 'Open `AssembliesAndNamespaces.csproj` and note that it is a typical project
    file for a .NET 6 application, as shown in the following markup:'
  id: totrans-111
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`AssembliesAndNamespaces.csproj`，注意它是一个典型的.NET 6应用程序的项目文件，如下标记所示：
- en: '```cs'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: <Project Sdk="Microsoft.NET.Sdk"
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: <Project Sdk="Microsoft.NET.Sdk"
- en: '>'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: '>'
- en: <PropertyGroup>
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: <PropertyGroup>
- en: <OutputType>Exe</OutputType>
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: <OutputType>Exe</OutputType>
- en: <TargetFramework>net6.0
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: <TargetFramework>net6.0
- en: </TargetFramework>
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: </TargetFramework>
- en: <Nullable>enable</Nullable>
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: <Nullable>enable</Nullable>
- en: <ImplicitUsings>enable</ImplicitUsings>
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: <ImplicitUsings>enable</ImplicitUsings>
- en: </PropertyGroup>
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: </PropertyGroup>
- en: </Project>
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: </Project>
- en: '```'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: Understanding namespaces and types in assemblies
  id: totrans-124
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 理解程序集中的命名空间和类型
- en: 'Many common .NET types are in the `System.Runtime.dll` assembly. There is not
    always a one-to-one mapping between assemblies and namespaces. A single assembly
    can contain many namespaces and a namespace can be defined in many assemblies.
    You can see the relationship between some assemblies and the namespaces that they
    supply types for, as shown in the following table:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 许多常见的.NET类型都在`System.Runtime.dll`程序集中。程序集和命名空间之间并不总是一一对应。一个程序集可以包含多个命名空间，一个命名空间可以在多个程序集中定义。您可以看到一些程序集与它们提供类型的命名空间之间的关系，如下表所示：
- en: '| Assembly | Example namespaces | Example types |'
  id: totrans-126
  prefs: []
  type: TYPE_TB
  zh: '| 程序集 | 示例命名空间 | 示例类型 |'
- en: '| `System.Runtime.dll` | `System` , `System.Collections` , `System.Collections.Generic`
    | `Int32` , `String` , `IEnumerable<T>` |'
  id: totrans-127
  prefs: []
  type: TYPE_TB
  zh: '| `System.Runtime.dll` | `System` , `System.Collections` , `System.Collections.Generic`
    | `Int32` , `String` , `IEnumerable<T>` |'
- en: '| `System.Console.dll` | `System` | `Console` |'
  id: totrans-128
  prefs: []
  type: TYPE_TB
  zh: '| `System.Console.dll` | `System` | `Console` |'
- en: '| `System.Threading.dll` | `System.Threading` | `Interlocked` , `Monitor` ,
    `Mutex` |'
  id: totrans-129
  prefs: []
  type: TYPE_TB
  zh: '| `System.Threading.dll` | `System.Threading` | `Interlocked` , `Monitor` ,
    `Mutex` |'
- en: '| `System.Xml.XDocument.dll` | `System.Xml.Linq` | `XDocument` , `XElement`
    , `XNode` |'
  id: totrans-130
  prefs: []
  type: TYPE_TB
  zh: '| `System.Xml.XDocument.dll` | `System.Xml.Linq` | `XDocument` , `XElement`
    , `XNode` |'
- en: Understanding NuGet packages
  id: totrans-131
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 理解NuGet包
- en: .NET is split into a set of packages, distributed using a Microsoft-supported
    package management technology named NuGet. Each of these packages represents a
    single assembly of the same name. For example, the `System.Collections` package
    contains the `System.Collections.dll` assembly.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: .NET被分成一组包，使用名为NuGet的Microsoft支持的包管理技术进行分发。这些包中的每一个代表着同名的单个程序集。例如，`System.Collections`包包含了`System.Collections.dll`程序集。
- en: 'The following are the benefits of packages:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是包的好处：
- en: Packages can be easily distributed on public feeds.
  id: totrans-134
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 包可以轻松地在公共源上分发。
- en: Packages can be reused.
  id: totrans-135
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 包可以被重用。
- en: Packages can ship on their own schedule.
  id: totrans-136
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 包可以按照自己的时间表发布。
- en: Packages can be tested independently of other packages.
  id: totrans-137
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 包可以独立于其他包进行测试。
- en: Packages can support different OSes and CPUs by including multiple versions
    of the same assembly built for different OSes and CPUs.
  id: totrans-138
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 包可以通过包含为不同操作系统和CPU构建的同一程序集的多个版本来支持不同的操作系统和CPU。
- en: Packages can have dependencies specific to only one library.
  id: totrans-139
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 包可以具有特定于一个库的依赖项。
- en: 'Apps are smaller because unreferenced packages aren''t part of the distribution.
    The following table lists some of the more important packages and their important
    types:'
  id: totrans-140
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 应用程序更小，因为未引用的包不会成为分发的一部分。以下表列出了一些更重要的包及其重要的类型：
- en: '| Package | Important types |'
  id: totrans-141
  prefs: []
  type: TYPE_TB
  zh: '| 包 | 重要类型 |'
- en: '| `System.Runtime` | `Object` , `String` , `Int32` , `Array` |'
  id: totrans-142
  prefs: []
  type: TYPE_TB
  zh: '| `System.Runtime` | `Object` , `String` , `Int32` , `Array` |'
- en: '| `System.Collections` | `List<T>` , `Dictionary<TKey, TValue>` |'
  id: totrans-143
  prefs: []
  type: TYPE_TB
  zh: '| `System.Collections` | `List<T>` , `Dictionary<TKey, TValue>` |'
- en: '| `System.Net.Http` | `HttpClient` , `HttpResponseMessage` |'
  id: totrans-144
  prefs: []
  type: TYPE_TB
  zh: '| `System.Net.Http` | `HttpClient` , `HttpResponseMessage` |'
- en: '| `System.IO.FileSystem` | `File` , `Directory` |'
  id: totrans-145
  prefs: []
  type: TYPE_TB
  zh: '| `System.IO.FileSystem` | `File` , `Directory` |'
- en: '| `System.Reflection` | `Assembly` , `TypeInfo` , `MethodInfo` |'
  id: totrans-146
  prefs: []
  type: TYPE_TB
  zh: '| `System.Reflection` | `Assembly` , `TypeInfo` , `MethodInfo` |'
- en: Understanding frameworks
  id: totrans-147
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: There is a two-way relationship between frameworks and packages. Packages define
    the APIs, while frameworks group packages. A framework without any packages would
    not define any APIs.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
- en: '.NET packages each support a set of frameworks. For example, the `System.IO.FileSystem`
    package version 4.3.0 supports the following frameworks:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
- en: .NET Standard, version 1.3 or later.
  id: totrans-150
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: .NET Framework, version 4.6 or later.
  id: totrans-151
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Six Mono and Xamarin platforms (for example, Xamarin.iOS 1.0).
  id: totrans-152
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**More Information** : You can read the details at the following link: [https://www.nuget.org/packages/System.IO.FileSystem/](https://www.nuget.org/packages/System.IO.FileSystem/)
    .'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
- en: Importing a namespace to use a type
  id: totrans-154
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let''s explore how namespaces are related to assemblies and types:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
- en: 'In the `AssembliesAndNamespaces` project, in `Program.cs` , enter the following
    code:'
  id: totrans-156
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '```cs'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
- en: XDocument doc = new
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
- en: ();
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
- en: '```'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
- en: 'Build the project and note the compiler error message, as shown in the following
    output:'
  id: totrans-161
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '```cs'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
- en: The type or namespace name 'XDocument' could not be found (are you missing a
    using directive or an assembly reference?)
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
- en: '```'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
- en: The `XDocument` type is not recognized because we have not told the compiler
    what the namespace of the type is. Although this project already has a reference
    to the assembly that contains the type, we also need to either prefix the type
    name with its namespace or import the namespace.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
- en: Click inside the `XDocument` class name. Your code editor displays a light bulb,
    showing that it recognizes the type and can automatically fix the problem for
    you.
  id: totrans-166
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the light bulb, and select `using System.Xml.Linq;` from the menu.
  id: totrans-167
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: This will *import the namespace* by adding a `using` statement to the top of
    the file. Once a namespace is imported at the top of a code file, then all the
    types within the namespace are available for use in that code file by just typing
    their name without the type name needing to be fully qualified by prefixing it
    with its namespace.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
- en: 'Sometimes I like to add a comment with a type name after importing a namespace
    to remind me why I need to import that namespace, as shown in the following code:'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
- en: '```cs'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
- en: using
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
- en: System.Xml.Linq; // XDocument
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
- en: '```'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
- en: Relating C# keywords to .NET types
  id: totrans-174
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: One of the common questions I get from new C# programmers is, "What is the difference
    between `string` with a lowercase s and `String` with an uppercase S?"
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
- en: 'The short answer is easy: none. The long answer is that all C# type keywords
    like `string` or `int` are aliases for a .NET type in a class library assembly.'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
- en: When you use the `string` keyword, the compiler recognizes it as a `System.String`
    type. When you use the `int` type, the compiler recognizes it as a `System.Int32`
    type.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s see this in action with some code:'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
- en: 'In `Program.cs` , declare two variables to hold `string` values, one using
    lowercase `string` and one using uppercase `String` , as shown in the following
    code:'
  id: totrans-179
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '```cs'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
- en: string
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
- en: s1 = "Hello"
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
- en: ;
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
- en: String s2 = "World"
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
- en: ;
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
- en: WriteLine($"
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
- en: '{s1}'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
- en: '{s2}'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
- en: '"'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
- en: );
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
- en: '```'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
- en: Run the code, and note that at the moment, they both work equally well, and
    literally mean the same thing.
  id: totrans-192
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In `AssembliesAndNamespaces.csproj` , add entries to prevent the `System` namespace
    from being globally imported, as shown in the following markup:'
  id: totrans-193
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '```cs'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
- en: <ItemGroup>
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
- en: <Using Remove="System"
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
- en: />
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
- en: </ItemGroup>
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
- en: '```'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
- en: 'In `Program.cs` note the compiler error message, as shown in the following
    output:'
  id: totrans-200
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '```cs'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
- en: The type or namespace name 'String' could not be found (are you missing a using
    directive or an assembly reference?)
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
- en: '```'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
- en: 'At the top of `Program.cs` , import the `System` namespace with a `using` statement
    that will fix the error, as shown in the following code:'
  id: totrans-204
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '```cs'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
- en: using
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
- en: System; // String
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
- en: '```'
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
- en: '**Good Practice** : When you have a choice, use the C# keyword instead of the
    actual type because the keywords do not need the namespace imported.'
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
- en: Mapping C# aliases to .NET types
  id: totrans-210
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The following table shows the 18 C# type keywords along with their actual .NET
    types:'
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
- en: '| Keyword | .NET type | Keyword | .NET type |'
  id: totrans-212
  prefs: []
  type: TYPE_TB
- en: '| `string` | `System.String` | `char` | `System.Char` |'
  id: totrans-213
  prefs: []
  type: TYPE_TB
- en: '| `sbyte` | `System.SByte` | `byte` | `System.Byte` |'
  id: totrans-214
  prefs: []
  type: TYPE_TB
- en: '| `short` | `System.Int16` | `ushort` | `System.UInt16` |'
  id: totrans-215
  prefs: []
  type: TYPE_TB
- en: '| `int` | `System.Int32` | `uint` | `System.UInt32` |'
  id: totrans-216
  prefs: []
  type: TYPE_TB
- en: '| `long` | `System.Int64` | `ulong` | `System.UInt64` |'
  id: totrans-217
  prefs: []
  type: TYPE_TB
- en: '| `nint` | `System.IntPtr` | `nuint` | `System.UIntPtr` |'
  id: totrans-218
  prefs: []
  type: TYPE_TB
- en: '| `float` | `System.Single` | `double` | `System.Double` |'
  id: totrans-219
  prefs: []
  type: TYPE_TB
- en: '| `decimal` | `System.Decimal` | `bool` | `System.Boolean` |'
  id: totrans-220
  prefs: []
  type: TYPE_TB
- en: '| `object` | `System.Object` | `dynamic` | `System.Dynamic.DynamicObject` |'
  id: totrans-221
  prefs: []
  type: TYPE_TB
- en: Other .NET programming language compilers can do the same thing. For example,
    the Visual Basic .NET language has a type named `Integer` that is its alias for
    `System.Int32` .
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
- en: Understanding native-sized integers
  id: totrans-223
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: C# 9 introduced `nint` and `nuint` keyword alias for **native-sized integers**
    , meaning that the storage size for the integer value is platform specific. They
    store a 32-bit integer in a 32-bit process and `sizeof()` returns 4 bytes; they
    store a 64-bit integer in a 64-bit process and `sizeof()` returns 8 bytes. The
    aliases represent pointers to the integer value in memory, which is why their
    .NET names are `IntPtr` and `UIntPtr` . The actual storage type will be either
    `System.Int32` or `System.Int64` depending on the process.
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
- en: 'In a 64-bit process, the following code:'
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
- en: '```cs'
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
- en: WriteLine($"int.MaxValue =
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
- en: '{'
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
- en: int
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
- en: .MaxValue:N0}
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
- en: '"'
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
- en: );
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
- en: WriteLine($"nint.MaxValue =
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
- en: '{'
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
- en: nint
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
- en: .MaxValue:N0}
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
- en: '"'
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
- en: );
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
- en: '```'
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
- en: 'produces this output:'
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
- en: '```cs'
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
- en: int.MaxValue = 2,147,483,647
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
- en: nint.MaxValue = 9,223,372,036,854,775,807
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
- en: '```'
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
- en: Revealing the location of a type
  id: totrans-245
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Code editors provide built-in documentation for .NET types. Let''s explore:'
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
- en: Right-click inside `XDocument` and choose **Go to Definition** .
  id: totrans-247
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Navigate to the top of the code file and note the assembly filename is `System.Xml.XDocument.dll`
    , but the class is in the `System.Xml.Linq` namespace, as shown in *Figure 7.1*
    :![Graphical user interface, text, application, email Description automatically
    generated](img/Image00076.jpg)
  id: totrans-248
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Figure 7.1: Assembly and namespace that contains the XDocument type'
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
- en: Close the **XDocument [from metadata]** tab.
  id: totrans-250
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Right-click inside `string` or `String` and choose **Go to Definition** .
  id: totrans-251
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Navigate to the top of the code file and note the assembly filename is `System.Runtime.dll`
    but the class is in the `System` namespace.
  id: totrans-252
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Actually, your code editor is technically lying to you. If you remember when
    we wrote code in *Chapter 2* , *Speaking C#* , when we revealed the extent of
    the C# vocabulary, we discovered that the `System.Runtime.dll` assembly contains
    zero types.
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
- en: What it does contain are type-forwarders. These are special types that appear
    to exist in an assembly but actually are implemented elsewhere. In this case,
    they are implemented deep inside the .NET runtime using highly optimized code.
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
- en: Sharing code with legacy platforms using .NET Standard
  id: totrans-255
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Before .NET Standard, there were **Portable Class Libraries** (**PCLs** ). With
    PCLs, you could create a library of code and explicitly specify which platforms
    you want the library to support, such as Xamarin, Silverlight, and Windows 8\.
    Your library could then use the intersection of APIs that are supported by the
    specified platforms.
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
- en: Microsoft realized that this is unsustainable, so they created .NET Standard—a
    single API that all future .NET platforms would support. There are older versions
    of .NET Standard, but .NET Standard 2.0 was an attempt to unify all important
    recent .NET platforms. .NET Standard 2.1 was released in late 2019 but only .NET
    Core 3.0 and that year's version of Xamarin support its new features. For the
    rest of this book, I will use the term .NET Standard to mean .NET Standard 2.0.
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
- en: .NET Standard is similar to HTML5 in that they are both standards that a platform
    should support. Just as Google's Chrome browser and Microsoft's Edge browser implement
    the HTML5 standard, .NET Core, .NET Framework, and Xamarin all implement .NET
    Standard. If you want to create a library of types that will work across variants
    of legacy .NET, you can do so most easily with .NET Standard.
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
- en: '**Good Practice** : Since many of the API additions in .NET Standard 2.1 required
    runtime changes, and .NET Framework is Microsoft''s legacy platform that needs
    to remain as unchanging as possible, .NET Framework 4.8 remained on .NET Standard
    2.0 rather than implementing .NET Standard 2.1\. If you need to support .NET Framework
    customers, then you should create class libraries on .NET Standard 2.0 even though
    it is not the latest and does not support all the recent language and BCL new
    features.'
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
- en: Your choice of which .NET Standard version to target comes down to a balance
    between maximizing platform support and available functionality. A lower version
    supports more platforms but has a smaller set of APIs. A higher version supports
    fewer platforms but has a larger set of APIs. Generally, you should choose the
    lowest version that supports all the APIs that you need.
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
- en: Understanding defaults for class libraries with different SDKs
  id: totrans-261
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'When using the `dotnet` SDK tool to create a class library it might be useful
    to know which target framework will be used by default, as shown in the following
    table:'
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
- en: '| SDK | Default target framework for new class libraries |'
  id: totrans-263
  prefs: []
  type: TYPE_TB
- en: '| .NET Core 3.1 | `netstandard2.0` |'
  id: totrans-264
  prefs: []
  type: TYPE_TB
- en: '| .NET 5 | `net5.0` |'
  id: totrans-265
  prefs: []
  type: TYPE_TB
- en: '| .NET 6 | `net6.0` |'
  id: totrans-266
  prefs: []
  type: TYPE_TB
- en: Of course, just because a class library targets a specific version of .NET by
    default does not mean you cannot change it after creating a class library project
    using the default template.
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
- en: 'You can manually set the target framework to a value that supports the projects
    that need to reference that library, as shown in the following table:'
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
- en: '| Class library target framework | Can be used by projects that target |'
  id: totrans-269
  prefs: []
  type: TYPE_TB
- en: '| `netstandard2.0` | .NET Framework 4.6.1 or later, .NET Core 2.0 or later,
    .NET 5.0 or later, Mono 5.4 or later, Xamarin.Android 8.0 or later, Xamarin.iOS
    10.14 or later |'
  id: totrans-270
  prefs: []
  type: TYPE_TB
- en: '| `netstandard2.1` | .NET Core 3.0 or later, .NET 5.0 or later, Mono 6.4 or
    later, Xamarin.Android 10.0 or later, Xamarin.iOS 12.16 or later |'
  id: totrans-271
  prefs: []
  type: TYPE_TB
- en: '| `net5.0` | .NET 5.0 or later |'
  id: totrans-272
  prefs: []
  type: TYPE_TB
- en: '| `net6.0` | .NET 6.0 or later |'
  id: totrans-273
  prefs: []
  type: TYPE_TB
- en: '**Good Practice** : Always check the target framework of a class library and
    then manually change it to something more appropriate if necessary. Make a conscious
    decision about what it should be rather than accept the default.'
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
- en: Creating a .NET Standard 2.0 class library
  id: totrans-275
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We will create a class library using .NET Standard 2.0 so that it can be used
    across all important .NET legacy platforms and cross-platform on Windows, macOS,
    and Linux operating systems, while also having access to a wide set of .NET APIs:'
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
- en: Use your preferred code editor to add a new class library named `SharedLibrary`
    to the `Chapter07` solution/workspace.
  id: totrans-277
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If you use Visual Studio 2022, when prompted for the **Target Framework** ,
    select **.NET Standard 2.0** , and then set the startup project for the solution
    to the current selection.
  id: totrans-278
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'If you use Visual Studio Code, include a switch to target .NET Standard 2.0,
    as shown in the following command:'
  id: totrans-279
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '```cs'
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
- en: dotnet new classlib -f netstandard2.0
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
- en: '```'
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
- en: If you use Visual Studio Code, select `SharedLibrary` as the active OmniSharp
    project.
  id: totrans-283
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Good Practice** : If you need to create types that use new features in .NET
    6.0, as well as types that only use .NET Standard 2.0 features, then you can create
    two separate class libraries: one targeting .NET Standard 2.0 and one targeting
    .NET 6.0\. You will see this in action in *Chapter 10* , *Working with Data Using
    Entity Framework Core* .'
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
- en: 'An alternative to manually creating two class libraries is to create one that
    supports multi-targeting. If you would like me to add a section about multi-targeting
    to the next edition, please let me know. You can read about multi-targeting here:
    [https://docs.microsoft.com/en-us/dotnet/standard/library-guidance/cross-platform-targeting#multi-targeting](https://docs.microsoft.com/en-us/dotnet/standard/library-guidance/cross-platform-targeting#multi-targeting)
    .'
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: 手动创建两个类库的替代方法是创建一个支持多目标的类库。如果您希望我在下一版中添加一个关于多目标的部分，请告诉我。您可以在这里阅读有关多目标的信息：[https://docs.microsoft.com/en-us/dotnet/standard/library-guidance/cross-platform-targeting#multi-targeting](https://docs.microsoft.com/en-us/dotnet/standard/library-guidance/cross-platform-targeting#multi-targeting)。
- en: Controlling the .NET SDK
  id: totrans-286
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 控制.NET SDK
- en: By default, executing `dotnet` commands uses the most recent installed .NET
    SDK. There may be times when you want to control which SDK is used.
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，执行`dotnet`命令会使用最近安装的.NET SDK。有时您可能希望控制使用哪个SDK。
- en: For example, one reader of the fourth edition wanted their experience to match
    the book steps that use the .NET Core 3.1 SDK. But they had installed the .NET
    5.0 SDK as well and that was being used by default. As described in the previous
    section, the behavior when creating new class libraries changed to target .NET
    5.0 instead of .NET Standard 2.0, and that confused the reader.
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，第四版的一位读者希望他们的体验与使用.NET Core 3.1 SDK的书中步骤相匹配。但他们还安装了.NET 5.0 SDK，并且默认情况下正在使用。如前一节所述，创建新类库时的行为已更改为以.NET
    5.0为目标，而不是.NET Standard 2.0，这让读者感到困惑。
- en: You can control the .NET SDK used by default by using a `global.json` file.
    The `dotnet` command searches the current folder and ancestor folders for a `global.json`
    file.
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用`global.json`文件来控制默认使用的.NET SDK。`dotnet`命令会在当前文件夹和祖先文件夹中搜索`global.json`文件。
- en: Create a subdirectory/folder in the `Chapter07` folder named `ControlSDK` .
  id: totrans-290
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Chapter07`文件夹中创建一个名为`ControlSDK`的子目录/文件夹。
- en: On Windows, start **Command Prompt** or **Windows Terminal** . On macOS, start
    **Terminal** . If you are using Visual Studio Code, then you can use the integrated
    terminal.
  id: totrans-291
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Windows上，启动**命令提示符**或**Windows终端**。在macOS上，启动**终端**。如果您使用Visual Studio Code，则可以使用集成终端。
- en: 'In the `ControlSDK` folder, at the command prompt or terminal, enter a command
    to create a `global.json` file that forces the use of the latest .NET Core 3.1
    SDK, as shown in the following command:'
  id: totrans-292
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`ControlSDK`文件夹中，在命令提示符或终端中，输入一个命令来创建一个`global.json`文件，强制使用最新的.NET Core 3.1
    SDK，如下所示的命令：
- en: '```cs'
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: dotnet new globaljson --sdk-version 3.1.412
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: dotnet new globaljson --sdk-version 3.1.412
- en: '```'
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: 'Open the `global.json` file and review its contents, as shown in the following
    markup:'
  id: totrans-296
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`global.json`文件并查看其内容，如下标记所示：
- en: '```cs'
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: '{'
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: '"sdk"'
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
  zh: '"sdk"'
- en: ': {'
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
  zh: ': {'
- en: '"version"'
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
  zh: '"版本"'
- en: ': "3.1.412"'
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
  zh: ': "3.1.412"'
- en: '}'
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '}'
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: '```'
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: 'You can discover the version numbers of the latest .NET SDKs in the table at
    the following link: [https://dotnet.microsoft.com/download/visual-studio-sdks](https://dotnet.microsoft.com/download/visual-studio-sdks)'
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在以下链接的表格中发现最新.NET SDK的版本号：[https://dotnet.microsoft.com/download/visual-studio-sdks](https://dotnet.microsoft.com/download/visual-studio-sdks)
- en: 'In the `ControlSDK` folder, at the command prompt or terminal, enter a command
    to create a class library project, as shown in the following command:'
  id: totrans-307
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`ControlSDK`文件夹中，在命令提示符或终端中，输入一个命令来创建一个类库项目，如下所示的命令：
- en: '```cs'
  id: totrans-308
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: dotnet new classlib
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
  zh: dotnet new classlib
- en: '```'
  id: totrans-310
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: 'If you do not have the .NET Core 3.1 SDK installed then you will see an error,
    as shown in the following output:'
  id: totrans-311
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果您尚未安装.NET Core 3.1 SDK，则将看到一个错误，如下所示的输出：
- en: '```cs'
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: Could not execute because the application was not found or a compatible .NET
    SDK is not installed.
  id: totrans-313
  prefs: []
  type: TYPE_NORMAL
  zh: 无法执行，因为未找到应用程序或未安装兼容的.NET SDK。
- en: '```'
  id: totrans-314
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: If you do have the .NET Core 3.1 SDK installed, then a class library project
    will be created that targets .NET Standard 2.0 by default.
  id: totrans-315
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果您已经安装了.NET Core 3.1 SDK，则将默认创建一个以.NET Standard 2.0为目标的类库项目。
- en: 'You do not need to complete the above steps, but if you want to try and do
    not already have .NET Core 3.1 SDK installed then you can install it from the
    following link:'
  id: totrans-316
  prefs: []
  type: TYPE_NORMAL
  zh: 您不需要完成上述步骤，但如果您想尝试并且尚未安装.NET Core 3.1 SDK，则可以从以下链接安装：
- en: '[https://dotnet.microsoft.com/download/dotnet/3.1](https://dotnet.microsoft.com/download/dotnet/3.1)'
  id: totrans-317
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://dotnet.microsoft.com/download/dotnet/3.1](https://dotnet.microsoft.com/download/dotnet/3.1)'
- en: Publishing your code for deployment
  id: totrans-318
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 发布您的代码以进行部署
- en: If you write a novel and you want other people to read it, you must publish
    it.
  id: totrans-319
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您写了一本小说，希望其他人阅读，您必须将其发布。
- en: Most developers write code for other developers to use in their own code, or
    for users to run as an app. To do so, you must publish your code as packaged class
    libraries or executable applications.
  id: totrans-320
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数开发人员编写代码供其他开发人员在其自己的代码中使用，或供用户作为应用程序运行。为此，您必须将代码发布为打包的类库或可执行应用程序。
- en: 'There are three ways to publish and deploy a .NET application. They are:'
  id: totrans-321
  prefs: []
  type: TYPE_NORMAL
  zh: 有三种方法可以发布和部署.NET应用程序。它们是：
- en: '**Framework-dependent deployment** (**FDD** ).'
  id: totrans-322
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**Framework-dependent deployment**（**FDD**）。'
- en: '**Framework-dependent executables** (**FDEs** ).'
  id: totrans-323
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**Framework-dependent executables**（**FDEs**）。'
- en: Self-contained.
  id: totrans-324
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Self-contained.
- en: If you choose to deploy your application and its package dependencies, but not
    .NET itself, then you rely on .NET already being on the target computer. This
    works well for web applications deployed to a server because .NET and lots of
    other web applications are likely already on the server.
  id: totrans-325
  prefs: []
  type: TYPE_NORMAL
  zh: 如果选择部署应用程序及其包依赖项，但不包括.NET本身，则依赖于目标计算机上已经安装了.NET。这对于部署到服务器的Web应用程序非常有效，因为.NET和许多其他Web应用程序很可能已经在服务器上。
- en: '**Framework-dependent deployment** (**FDD** ) means you deploy a DLL that must
    be executed by the `dotnet` command-line tool. **Framework-dependent executables**
    (**FDE** ) means you deploy an EXE that can be run directly from the command line.
    Both require .NET to be already installed on the system.'
  id: totrans-326
  prefs: []
  type: TYPE_NORMAL
  zh: '**Framework-dependent deployment**（**FDD**）意味着您部署一个必须由`dotnet`命令行工具执行的DLL。**Framework-dependent
    executables**（**FDE**）意味着您部署一个可以直接从命令行运行的EXE。两者都需要系统上已经安装了.NET。'
- en: Sometimes, you want to be able to give someone a USB stick containing your application
    and know that it can execute on their computer. You want to perform a self-contained
    deployment. While the size of the deployment files will be larger, you'll know
    that it will work.
  id: totrans-327
  prefs: []
  type: TYPE_NORMAL
- en: Creating a console application to publish
  id: totrans-328
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let''s explore how to publish a console application:'
  id: totrans-329
  prefs: []
  type: TYPE_NORMAL
- en: Use your preferred code editor to add a new console app named `DotNetEverywhere`
    to the `Chapter07` solution/workspace.
  id: totrans-330
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In Visual Studio Code, select `DotNetEverywhere` as the active OmniSharp project.
    When you see the pop-up warning message saying that required assets are missing,
    click **Yes** to add them.
  id: totrans-331
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In `Program.cs` , delete the comment and statically import the `Console` class.
  id: totrans-332
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In `Program.cs` , add a statement to output a message saying the console app
    can run everywhere and some information about the operating system, as shown in
    the following code:'
  id: totrans-333
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '```cs'
  id: totrans-334
  prefs: []
  type: TYPE_NORMAL
- en: WriteLine("I can run everywhere!"
  id: totrans-335
  prefs: []
  type: TYPE_NORMAL
- en: );
  id: totrans-336
  prefs: []
  type: TYPE_NORMAL
- en: WriteLine($"OS Version is
  id: totrans-337
  prefs: []
  type: TYPE_NORMAL
- en: '{Environment.OSVersion}'
  id: totrans-338
  prefs: []
  type: TYPE_NORMAL
- en: ."
  id: totrans-339
  prefs: []
  type: TYPE_NORMAL
- en: );
  id: totrans-340
  prefs: []
  type: TYPE_NORMAL
- en: if
  id: totrans-341
  prefs: []
  type: TYPE_NORMAL
- en: (OperatingSystem.IsMacOS())
  id: totrans-342
  prefs: []
  type: TYPE_NORMAL
- en: '{'
  id: totrans-343
  prefs: []
  type: TYPE_NORMAL
- en: WriteLine("I am macOS."
  id: totrans-344
  prefs: []
  type: TYPE_NORMAL
- en: );
  id: totrans-345
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  id: totrans-346
  prefs: []
  type: TYPE_NORMAL
- en: else
  id: totrans-347
  prefs: []
  type: TYPE_NORMAL
- en: if
  id: totrans-348
  prefs: []
  type: TYPE_NORMAL
- en: '(OperatingSystem.IsWindowsVersionAtLeast(major: 10'
  id: totrans-349
  prefs: []
  type: TYPE_NORMAL
- en: ))
  id: totrans-350
  prefs: []
  type: TYPE_NORMAL
- en: '{'
  id: totrans-351
  prefs: []
  type: TYPE_NORMAL
- en: WriteLine("I am Windows 10 or 11."
  id: totrans-352
  prefs: []
  type: TYPE_NORMAL
- en: );
  id: totrans-353
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  id: totrans-354
  prefs: []
  type: TYPE_NORMAL
- en: else
  id: totrans-355
  prefs: []
  type: TYPE_NORMAL
- en: '{'
  id: totrans-356
  prefs: []
  type: TYPE_NORMAL
- en: WriteLine("I am some other mysterious OS."
  id: totrans-357
  prefs: []
  type: TYPE_NORMAL
- en: );
  id: totrans-358
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  id: totrans-359
  prefs: []
  type: TYPE_NORMAL
- en: WriteLine("Press ENTER to stop me."
  id: totrans-360
  prefs: []
  type: TYPE_NORMAL
- en: );
  id: totrans-361
  prefs: []
  type: TYPE_NORMAL
- en: ReadLine();
  id: totrans-362
  prefs: []
  type: TYPE_NORMAL
- en: '```'
  id: totrans-363
  prefs: []
  type: TYPE_NORMAL
- en: 'Open `DotNetEverywhere.csproj` and add the runtime identifiers to target three
    operating systems inside the `<PropertyGroup>` element, as shown highlighted in
    the following markup:'
  id: totrans-364
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '```cs'
  id: totrans-365
  prefs: []
  type: TYPE_NORMAL
- en: <Project Sdk="Microsoft.NET.Sdk"
  id: totrans-366
  prefs: []
  type: TYPE_NORMAL
- en: '>'
  id: totrans-367
  prefs: []
  type: TYPE_NORMAL
- en: <PropertyGroup>
  id: totrans-368
  prefs: []
  type: TYPE_NORMAL
- en: <OutputType>Exe</OutputType>
  id: totrans-369
  prefs: []
  type: TYPE_NORMAL
- en: <TargetFramework>net6.0
  id: totrans-370
  prefs: []
  type: TYPE_NORMAL
- en: </TargetFramework>
  id: totrans-371
  prefs: []
  type: TYPE_NORMAL
- en: <Nullable>enable</Nullable>
  id: totrans-372
  prefs: []
  type: TYPE_NORMAL
- en: <ImplicitUsings>enable</ImplicitUsings>
  id: totrans-373
  prefs: []
  type: TYPE_NORMAL
- en: '**<RuntimeIdentifiers>**'
  id: totrans-374
  prefs: []
  type: TYPE_NORMAL
- en: '**win10-x64;osx-x64;osx**'
  id: totrans-375
  prefs: []
  type: TYPE_NORMAL
- en: '**.11.0**'
  id: totrans-376
  prefs: []
  type: TYPE_NORMAL
- en: '**-arm64;linux-x64;linux-arm64**'
  id: totrans-377
  prefs: []
  type: TYPE_NORMAL
- en: '**</RuntimeIdentifiers>**'
  id: totrans-378
  prefs: []
  type: TYPE_NORMAL
- en: </PropertyGroup>
  id: totrans-379
  prefs: []
  type: TYPE_NORMAL
- en: </Project>
  id: totrans-380
  prefs: []
  type: TYPE_NORMAL
- en: '```'
  id: totrans-381
  prefs: []
  type: TYPE_NORMAL
- en: The `win10-x64` RID value means Windows 10 or Windows Server 2016 64-bit. You
    could also use the `win10-arm64` RID value to deploy to a Microsoft Surface Pro
    X.
  id: totrans-382
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `osx-x64` RID value means macOS Sierra 10.12 or later. You can also specify
    version-specific RID values like `osx.10.15-x64` (Catalina), `osx.11.0-x64` (Big
    Sur on Intel), or `osx.11.0-arm64` (Big Sur on Apple Silicon).
  id: totrans-383
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `linux-x64` RID value means most desktop distributions of Linux like Ubuntu,
    CentOS, Debian, or Fedora. Use `linux-arm` for Raspbian or Raspberry Pi OS 32-bit.
    Use `linux-arm64` for a Raspberry Pi running Ubuntu 64-bit.
  id: totrans-384
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Understanding dotnet commands
  id: totrans-385
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When you install the .NET SDK, it includes a **command-line interface (CLI)**
    named `dotnet` .
  id: totrans-386
  prefs: []
  type: TYPE_NORMAL
- en: Creating new projects
  id: totrans-387
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The .NET CLI has commands that work on the current folder to create a new project
    using templates:'
  id: totrans-388
  prefs: []
  type: TYPE_NORMAL
- en: On Windows, start **Command Prompt** or **Windows Terminal** . On macOS, start
    **Terminal** . If you are using Visual Studio Code, then you can use the integrated
    terminal.
  id: totrans-389
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter the `dotnet new --list` or `dotnet new -l` command to list your currently
    installed templates, as shown in *Figure 7.2* :![A picture containing text Description
    automatically generated](img/Image00077.jpg)
  id: totrans-390
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Figure 7.2: A list of installed dotnet new project templates'
  id: totrans-391
  prefs: []
  type: TYPE_NORMAL
- en: Most `dotnet` command-line switches have a long and a short version. For example,
    `--list` or `-l` . The short ones are quicker to type but more likely to be misinterpreted
    by you or other humans. Sometimes more typing is clearer.
  id: totrans-392
  prefs: []
  type: TYPE_NORMAL
- en: Getting information about .NET and its environment
  id: totrans-393
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'It is useful to see what .NET SDKs and runtimes are currently installed, alongside
    information about the operating system, as shown in the following command:'
  id: totrans-394
  prefs: []
  type: TYPE_NORMAL
- en: '```cs'
  id: totrans-395
  prefs: []
  type: TYPE_NORMAL
- en: dotnet --info
  id: totrans-396
  prefs: []
  type: TYPE_NORMAL
- en: '```'
  id: totrans-397
  prefs: []
  type: TYPE_NORMAL
- en: 'Note the results, as shown in the following partial output:'
  id: totrans-398
  prefs: []
  type: TYPE_NORMAL
- en: '```cs'
  id: totrans-399
  prefs: []
  type: TYPE_NORMAL
- en: '.NET SDK (reflecting any global.json):'
  id: totrans-400
  prefs: []
  type: TYPE_NORMAL
- en: 'Version:   6.0.100'
  id: totrans-401
  prefs: []
  type: TYPE_NORMAL
- en: 'Commit:    22d70b47bc'
  id: totrans-402
  prefs: []
  type: TYPE_NORMAL
- en: 'Runtime Environment:'
  id: totrans-403
  prefs: []
  type: TYPE_NORMAL
- en: 'OS Name:     Windows'
  id: totrans-404
  prefs: []
  type: TYPE_NORMAL
- en: 'OS Version:  10.0.19043'
  id: totrans-405
  prefs: []
  type: TYPE_NORMAL
- en: 'OS Platform: Windows'
  id: totrans-406
  prefs: []
  type: TYPE_NORMAL
- en: 'RID:         win10-x64'
  id: totrans-407
  prefs: []
  type: TYPE_NORMAL
- en: 'Base Path:   C:\Program Files\dotnet\sdk\6.0.100\'
  id: totrans-408
  prefs: []
  type: TYPE_NORMAL
- en: 'Host (useful for support):'
  id: totrans-409
  prefs: []
  type: TYPE_NORMAL
- en: 'Version: 6.0.0'
  id: totrans-410
  prefs: []
  type: TYPE_NORMAL
- en: 'Commit:  91ba01788d'
  id: totrans-411
  prefs: []
  type: TYPE_NORMAL
- en: '.NET SDKs installed:'
  id: totrans-412
  prefs: []
  type: TYPE_NORMAL
- en: 3.1.412 [C:\Program Files\dotnet\sdk]
  id: totrans-413
  prefs: []
  type: TYPE_NORMAL
- en: 5.0.400 [C:\Program Files\dotnet\sdk]
  id: totrans-414
  prefs: []
  type: TYPE_NORMAL
- en: 6.0.100 [C:\Program Files\dotnet\sdk]
  id: totrans-415
  prefs: []
  type: TYPE_NORMAL
- en: '.NET runtimes installed:'
  id: totrans-416
  prefs: []
  type: TYPE_NORMAL
- en: Microsoft.AspNetCore.All 2.1.29 [...\dotnet\shared\Microsoft.AspNetCore.All]
  id: totrans-417
  prefs: []
  type: TYPE_NORMAL
- en: '...'
  id: totrans-418
  prefs: []
  type: TYPE_NORMAL
- en: '```'
  id: totrans-419
  prefs: []
  type: TYPE_NORMAL
- en: Managing projects
  id: totrans-420
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The .NET CLI has the following commands that work on the project in the current
    folder, to manage the project:'
  id: totrans-421
  prefs: []
  type: TYPE_NORMAL
- en: '`dotnet restore` : This downloads dependencies for the project.'
  id: totrans-422
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`dotnet build` : This builds, aka compiles, the project.'
  id: totrans-423
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`dotnet test` : This builds and then runs unit tests for the project.'
  id: totrans-424
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`dotnet run` : This builds and then runs the project.'
  id: totrans-425
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`dotnet pack` : This creates a NuGet package for the project.'
  id: totrans-426
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`dotnet publish` : This builds and then publishes the project, either with
    dependencies or as a self-contained application.'
  id: totrans-427
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`dotnet add` : This adds a reference to a package or class library to the project.'
  id: totrans-428
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`dotnet remove` : This removes a reference to a package or class library from
    the project.'
  id: totrans-429
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`dotnet list` : This lists the package or class library references for the
    project.'
  id: totrans-430
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Publishing a self-contained app
  id: totrans-431
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Now that you have seen some example `dotnet` tool commands, we can publish
    our cross-platform console app:'
  id: totrans-432
  prefs: []
  type: TYPE_NORMAL
- en: At the command line, make sure that you are in the `DotNetEverywhere` folder.
  id: totrans-433
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Enter a command to build and publish the release version of the console application
    for Windows 10, as shown in the following command:'
  id: totrans-434
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '```cs'
  id: totrans-435
  prefs: []
  type: TYPE_NORMAL
- en: dotnet publish -c Release -r win10-x64
  id: totrans-436
  prefs: []
  type: TYPE_NORMAL
- en: '```'
  id: totrans-437
  prefs: []
  type: TYPE_NORMAL
- en: 'Note the build engine restores any needed packages, compiles the project source
    code into an assembly DLL, and creates a `publish` folder, as shown in the following
    output:'
  id: totrans-438
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '```cs'
  id: totrans-439
  prefs: []
  type: TYPE_NORMAL
- en: Microsoft (R) Build Engine version 17.0.0+073022eb4 for .NET
  id: totrans-440
  prefs: []
  type: TYPE_NORMAL
- en: Copyright (C) Microsoft Corporation. All rights reserved.
  id: totrans-441
  prefs: []
  type: TYPE_NORMAL
- en: Determining projects to restore...
  id: totrans-442
  prefs: []
  type: TYPE_NORMAL
- en: Restored C:\Code\Chapter07\DotNetEverywhere\DotNetEverywhere.csproj (in 46.89
    sec).
  id: totrans-443
  prefs: []
  type: TYPE_NORMAL
- en: DotNetEverywhere -> C:\Code\Chapter07\DotNetEverywhere\bin\Release\net6.0\win10-x64\DotNetEverywhere.dll
  id: totrans-444
  prefs: []
  type: TYPE_NORMAL
- en: DotNetEverywhere -> C:\Code\Chapter07\DotNetEverywhere\bin\Release\net6.0\win10-x64\publish\
  id: totrans-445
  prefs: []
  type: TYPE_NORMAL
- en: '```'
  id: totrans-446
  prefs: []
  type: TYPE_NORMAL
- en: 'Enter the commands to build and publish the release versions for macOS and
    Linux variants, as shown in the following commands:'
  id: totrans-447
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '```cs'
  id: totrans-448
  prefs: []
  type: TYPE_NORMAL
- en: dotnet publish -c Release -r osx-x64
  id: totrans-449
  prefs: []
  type: TYPE_NORMAL
- en: dotnet publish -c Release -r osx.11.0-arm64
  id: totrans-450
  prefs: []
  type: TYPE_NORMAL
- en: dotnet publish -c Release -r linux-x64
  id: totrans-451
  prefs: []
  type: TYPE_NORMAL
- en: dotnet publish -c Release -r linux-arm64
  id: totrans-452
  prefs: []
  type: TYPE_NORMAL
- en: '```'
  id: totrans-453
  prefs: []
  type: TYPE_NORMAL
- en: '**Good Practice** : You could automate these commands by using a scripting
    language like PowerShell and execute it on any operating system using the cross-platform
    PowerShell Core. Just create a file with the extension `.ps1` with the five commands
    on it. Then execute the file. Learn more about PowerShell at the following link:
    [https://github.com/markjprice/cs10dotnet6/tree/main/docs/powershell](https://github.com/markjprice/cs10dotnet6/tree/main/docs/powershell)'
  id: totrans-454
  prefs: []
  type: TYPE_NORMAL
- en: Open a macOS **Finder** window or Windows **File Explorer** , navigate to `DotNetEverywhere\bin\Release\net6.0`
    , and note the output folders for the various operating systems.
  id: totrans-455
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the `win10-x64` folder, select the `publish` folder, note all the supporting
    assemblies like `Microsoft.CSharp.dll` .
  id: totrans-456
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the `DotNetEverywhere` executable file, and note it is 161 KB, as shown
    in *Figure 7.3* :![Graphical user interface Description automatically generated](img/Image00078.jpg)
  id: totrans-457
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Figure 7.3: The DotNetEverywhere executable file for Windows 10 64-bit'
  id: totrans-458
  prefs: []
  type: TYPE_NORMAL
- en: 'If you are on Windows, then double-click to execute the program and note the
    result, as shown in the following output:'
  id: totrans-459
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '```cs'
  id: totrans-460
  prefs: []
  type: TYPE_NORMAL
- en: I can run everywhere!
  id: totrans-461
  prefs: []
  type: TYPE_NORMAL
- en: OS Version is Microsoft Windows NT 10.0.19042.0.
  id: totrans-462
  prefs: []
  type: TYPE_NORMAL
- en: I am Windows 10.
  id: totrans-463
  prefs: []
  type: TYPE_NORMAL
- en: Press ENTER to stop me.
  id: totrans-464
  prefs: []
  type: TYPE_NORMAL
- en: '```'
  id: totrans-465
  prefs: []
  type: TYPE_NORMAL
- en: Note that the total size of the `publish` folder and all its files is 64.8 MB.
  id: totrans-466
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the `osx.11.0-arm64` folder, select the `publish` folder, note all the supporting
    assemblies, and then select the `DotNetEverywhere` executable file, and note the
    executable is 126 KB, and the `publish` folder is 71.8 MB.
  id: totrans-467
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'If you copy any of those `publish` folders to the appropriate operating system,
    the console application will run; this is because it is a self-contained deployable
    .NET application. For example, on macOS with Intel, as shown in the following
    output:'
  id: totrans-468
  prefs: []
  type: TYPE_NORMAL
- en: '```cs'
  id: totrans-469
  prefs: []
  type: TYPE_NORMAL
- en: I can run everywhere!
  id: totrans-470
  prefs: []
  type: TYPE_NORMAL
- en: OS Version is Unix 11.2.3
  id: totrans-471
  prefs: []
  type: TYPE_NORMAL
- en: I am macOS.
  id: totrans-472
  prefs: []
  type: TYPE_NORMAL
- en: Press ENTER to stop me.
  id: totrans-473
  prefs: []
  type: TYPE_NORMAL
- en: '```'
  id: totrans-474
  prefs: []
  type: TYPE_NORMAL
- en: This example used a console app, but you could just as easily create an ASP.NET
    Core website or web service, or a Windows Forms or WPF app. Of course, you can
    only deploy Windows desktop apps to Windows computers, not Linux or macOS.
  id: totrans-475
  prefs: []
  type: TYPE_NORMAL
- en: Publishing a single-file app
  id: totrans-476
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To publish as a "single" file, you can specify flags when publishing. With .NET
    5, single-file apps were primarily focused on Linux because there are limitations
    in both Windows and macOS that mean true single-file publishing is not technically
    possible. With .NET 6, you can now create proper single-file apps on Windows.
  id: totrans-477
  prefs: []
  type: TYPE_NORMAL
- en: 'If you can assume that .NET 6 is already installed on the computer on which
    you want to run your app, then you can use the extra flags when you publish your
    app for release to say that it does not need to be self-contained and that you
    want to publish it as a single file (if possible), as shown in the following command
    (that must be entered on a single line):'
  id: totrans-478
  prefs: []
  type: TYPE_NORMAL
- en: '```cs'
  id: totrans-479
  prefs: []
  type: TYPE_NORMAL
- en: dotnet publish -r win10-x64 -c Release --self-contained=false
  id: totrans-480
  prefs: []
  type: TYPE_NORMAL
- en: /p:PublishSingleFile=true
  id: totrans-481
  prefs: []
  type: TYPE_NORMAL
- en: '```'
  id: totrans-482
  prefs: []
  type: TYPE_NORMAL
- en: 'This will generate two files: `DotNetEverywhere.exe` and `DotNetEverywhere.pdb`
    . The `.exe` is the executable. The `.pdb` file is a **program debug database**
    file that stores debugging information.'
  id: totrans-483
  prefs: []
  type: TYPE_NORMAL
- en: There is no `.exe` file extension for published applications on macOS, so if
    you use `osx-x64` in the command above, the filename will not have an extension.
  id: totrans-484
  prefs: []
  type: TYPE_NORMAL
- en: 'If you prefer the `.pdb` file to be embedded in the `.exe` file, then add a
    `<DebugType>` element to the `<PropertyGroup>` element in your `.csproj` file
    and set it to `embedded` , as shown highlighted in the following markup:'
  id: totrans-485
  prefs: []
  type: TYPE_NORMAL
- en: '```cs'
  id: totrans-486
  prefs: []
  type: TYPE_NORMAL
- en: <PropertyGroup>
  id: totrans-487
  prefs: []
  type: TYPE_NORMAL
- en: <OutputType>Exe</OutputType>
  id: totrans-488
  prefs: []
  type: TYPE_NORMAL
- en: <TargetFramework>net6.0
  id: totrans-489
  prefs: []
  type: TYPE_NORMAL
- en: </TargetFramework>
  id: totrans-490
  prefs: []
  type: TYPE_NORMAL
- en: <Nullable>enable</Nullable>
  id: totrans-491
  prefs: []
  type: TYPE_NORMAL
- en: <ImplicitUsings>enable</ImplicitUsings>
  id: totrans-492
  prefs: []
  type: TYPE_NORMAL
- en: <RuntimeIdentifiers>
  id: totrans-493
  prefs: []
  type: TYPE_NORMAL
- en: win10-x64;osx-x64;osx.11.0
  id: totrans-494
  prefs: []
  type: TYPE_NORMAL
- en: -arm64;linux-x64;linux-arm64
  id: totrans-495
  prefs: []
  type: TYPE_NORMAL
- en: </RuntimeIdentifiers>
  id: totrans-496
  prefs: []
  type: TYPE_NORMAL
- en: '**<DebugType>embedded</DebugType>**'
  id: totrans-497
  prefs: []
  type: TYPE_NORMAL
- en: </PropertyGroup>
  id: totrans-498
  prefs: []
  type: TYPE_NORMAL
- en: '```'
  id: totrans-499
  prefs: []
  type: TYPE_NORMAL
- en: 'If you cannot assume that .NET 6 is already installed on a computer, then although
    Linux also only generates the two files, expect the following additional files
    for Windows: `coreclr.dll` , `clrjit.dll` , `clrcompression.dll` , and `mscordaccore.dll`
    .'
  id: totrans-500
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s see an example for Windows:'
  id: totrans-501
  prefs: []
  type: TYPE_NORMAL
- en: 'At the command line, enter the command to build the release version of the
    console application for Windows 10, as shown in the following command:'
  id: totrans-502
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '```cs'
  id: totrans-503
  prefs: []
  type: TYPE_NORMAL
- en: dotnet publish -c Release -r win10-x64 /p:PublishSingleFile=true
  id: totrans-504
  prefs: []
  type: TYPE_NORMAL
- en: '```'
  id: totrans-505
  prefs: []
  type: TYPE_NORMAL
- en: Navigate to the `DotNetEverywhere\bin\Release\net6.0\win10-x64\publish` folder,
    select the `DotNetEverywhere` executable file, and note the executable is now
    58.3 MB, and there is also a `.pdb` file that is 10 KB. The sizes on your system
    will vary.
  id: totrans-506
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Reducing the size of apps using app trimming
  id: totrans-507
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: One of the problems with deploying a .NET app as a self-contained app is that
    the .NET libraries take up a lot of space. One of the biggest needs for reduced
    size is Blazor WebAssembly components because all the .NET libraries need to be
    downloaded to the browser.
  id: totrans-508
  prefs: []
  type: TYPE_NORMAL
- en: Luckily, you can reduce this size by not packaging unused assemblies with your
    deployments. Introduced with .NET Core 3.0, the app trimming system can identify
    the assemblies needed by your code and remove those that are not needed.
  id: totrans-509
  prefs: []
  type: TYPE_NORMAL
- en: With .NET 5, the trimming went further by removing individual types, and even
    members like methods from within an assembly if they are not used. For example,
    with a Hello World console app, the `System.Console.dll` assembly is trimmed from
    61.5 KB to 31.5 KB. For .NET 5, this is an experimental feature so it is disabled
    by default.
  id: totrans-510
  prefs: []
  type: TYPE_NORMAL
- en: With .NET 6, Microsoft added annotations to their libraries to indicate how
    they can be safely trimmed so the trimming of types and members was made the default.
    This is known as **link trim mode** .
  id: totrans-511
  prefs: []
  type: TYPE_NORMAL
- en: The catch is how well the trimming identifies unused assemblies, types, and
    members. If your code is dynamic, perhaps using reflection, then it might not
    work correctly, so Microsoft also allows manual control.
  id: totrans-512
  prefs: []
  type: TYPE_NORMAL
- en: Enabling assembly-level trimming
  id: totrans-513
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: There are two ways to enable assembly-level trimming.
  id: totrans-514
  prefs: []
  type: TYPE_NORMAL
- en: 'The first way is to add an element in the project file, as shown in the following
    markup:'
  id: totrans-515
  prefs: []
  type: TYPE_NORMAL
- en: '```cs'
  id: totrans-516
  prefs: []
  type: TYPE_NORMAL
- en: <PublishTrimmed>true
  id: totrans-517
  prefs: []
  type: TYPE_NORMAL
- en: </PublishTrimmed>
  id: totrans-518
  prefs: []
  type: TYPE_NORMAL
- en: '```'
  id: totrans-519
  prefs: []
  type: TYPE_NORMAL
- en: 'The second way is to add a flag when publishing, as shown highlighted in the
    following command:'
  id: totrans-520
  prefs: []
  type: TYPE_NORMAL
- en: '```cs'
  id: totrans-521
  prefs: []
  type: TYPE_NORMAL
- en: dotnet publish ...
  id: totrans-522
  prefs: []
  type: TYPE_NORMAL
- en: '**-p:PublishTrimmed=True**'
  id: totrans-523
  prefs: []
  type: TYPE_NORMAL
- en: '```'
  id: totrans-524
  prefs: []
  type: TYPE_NORMAL
- en: Enabling type-level and member-level trimming
  id: totrans-525
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: There are two ways to enable type-level and member-level trimming.
  id: totrans-526
  prefs: []
  type: TYPE_NORMAL
- en: 'The first way is to add two elements in the project file, as shown in the following
    markup:'
  id: totrans-527
  prefs: []
  type: TYPE_NORMAL
- en: '```cs'
  id: totrans-528
  prefs: []
  type: TYPE_NORMAL
- en: <PublishTrimmed>true
  id: totrans-529
  prefs: []
  type: TYPE_NORMAL
- en: </PublishTrimmed>
  id: totrans-530
  prefs: []
  type: TYPE_NORMAL
- en: <TrimMode>Link</TrimMode>
  id: totrans-531
  prefs: []
  type: TYPE_NORMAL
- en: '```'
  id: totrans-532
  prefs: []
  type: TYPE_NORMAL
- en: 'The second way is to add two flags when publishing, as shown highlighted in
    the following command:'
  id: totrans-533
  prefs: []
  type: TYPE_NORMAL
- en: '```cs'
  id: totrans-534
  prefs: []
  type: TYPE_NORMAL
- en: dotnet publish ...
  id: totrans-535
  prefs: []
  type: TYPE_NORMAL
- en: '**-p:PublishTrimmed=True -p:TrimMode=Link**'
  id: totrans-536
  prefs: []
  type: TYPE_NORMAL
- en: '```'
  id: totrans-537
  prefs: []
  type: TYPE_NORMAL
- en: For .NET 6, link trim mode is the default, so you only need to specify the switch
    if you want to set an alternative trim mode like `copyused` , which means assembly-level
    trimming.
  id: totrans-538
  prefs: []
  type: TYPE_NORMAL
- en: Decompiling .NET assemblies
  id: totrans-539
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: One of the best ways to learn how to code for .NET is to see how professionals
    do it.
  id: totrans-540
  prefs: []
  type: TYPE_NORMAL
- en: '**Good Practice** : You could decompile someone else''s assemblies for non-learning
    purposes like copying their code for use in your own production library or application,
    but remember that you are viewing their intellectual property, so please respect
    that.'
  id: totrans-541
  prefs: []
  type: TYPE_NORMAL
- en: Decompiling using the ILSpy extension for Visual Studio 2022
  id: totrans-542
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For learning purposes, you can decompile any .NET assembly with a tool like
    ILSpy.
  id: totrans-543
  prefs: []
  type: TYPE_NORMAL
- en: In Visual Studio 2022 for Windows, navigate to **Extensions** | **Manage Extensions**
    .
  id: totrans-544
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the search box, enter `ilspy` .
  id: totrans-545
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: For the **ILSpy** extension, click **Download** .
  id: totrans-546
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click **Close** .
  id: totrans-547
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Close Visual Studio to allow the extension to install.
  id: totrans-548
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Restart Visual Studio and reopen the `Chapter07` solution.
  id: totrans-549
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In **Solution Explorer** , right-click the **DotNetEverywhere** project and
    select **Open output in ILSpy** .
  id: totrans-550
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Navigate to **File** | **Open…** .
  id: totrans-551
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Navigate to the following folder:'
  id: totrans-552
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '```cs'
  id: totrans-553
  prefs: []
  type: TYPE_NORMAL
- en: Code/Chapter07/DotNetEverywhere/bin/Release/net6.0
  id: totrans-554
  prefs: []
  type: TYPE_NORMAL
- en: /linux-x64
  id: totrans-555
  prefs: []
  type: TYPE_NORMAL
- en: '```'
  id: totrans-556
  prefs: []
  type: TYPE_NORMAL
- en: Select the `System.IO.FileSystem.dll` assembly and click **Open** .
  id: totrans-557
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the **Assemblies** tree, expand the **System.IO.FileSystem** assembly, expand
    the **System.IO** namespace, select the **Directory** class, and wait for it to
    decompile.
  id: totrans-558
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the `Directory` class, click the **[+]** to expand the `GetParent` method,
    as shown in *Figure 7.4* :![Graphical user interface, text, application Description
    automatically generated](img/Image00079.jpg)
  id: totrans-559
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Figure 7.4: Decompiled GetParent method of Directory class on Windows'
  id: totrans-560
  prefs: []
  type: TYPE_NORMAL
- en: Note the good practice of checking the `path` parameter and throwing an `ArgumentNullException`
    if it is `null` or an `ArgumentException` if it is zero length.
  id: totrans-561
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Close ILSpy.
  id: totrans-562
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Decompiling using the ILSpy extension for Visual Studio Code
  id: totrans-563
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A similar capability is available cross-platform as an extension for Visual
    Studio Code.
  id: totrans-564
  prefs: []
  type: TYPE_NORMAL
- en: If you have not already installed the **ILSpy .NET Decompiler** extension for
    Visual Studio Code, then search for it and install it now.
  id: totrans-565
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'On macOS or Linux the extension has a dependency on Mono so you will also need
    to install Mono from the following link: [https://www.mono-project.com/download/stable/](https://www.mono-project.com/download/stable/)
    .'
  id: totrans-566
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In Visual Studio Code, navigate to **View** | **Command Palette…** .
  id: totrans-567
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Type `ilspy` and then select **ILSpy: Decompile IL Assembly (pick file)** .'
  id: totrans-568
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Navigate to the following folder:'
  id: totrans-569
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '```cs'
  id: totrans-570
  prefs: []
  type: TYPE_NORMAL
- en: Code/Chapter07/DotNetEverywhere/bin/Release/net6.0
  id: totrans-571
  prefs: []
  type: TYPE_NORMAL
- en: /linux-x64
  id: totrans-572
  prefs: []
  type: TYPE_NORMAL
- en: '```'
  id: totrans-573
  prefs: []
  type: TYPE_NORMAL
- en: Select the `System.IO.FileSystem.dll` assembly and click **Select assembly**
    . Nothing will appear to happen, but you can confirm that ILSpy is working by
    viewing the **Output** window, selecting **ilspy-vscode** in the dropdown list,
    and seeing the processing, as shown in *Figure 7.5* :![Graphical user interface,
    text, application, email Description automatically generated](img/Image00080.jpg)
  id: totrans-574
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Figure 7.5: ILSpy extension output when selecting an assembly to decompile'
  id: totrans-575
  prefs: []
  type: TYPE_NORMAL
- en: In **EXPLORER** , expand **ILSPY DECOMPILED MEMBERS** , select the assembly,
    close the **Output** window, and note the two edit windows that open showing assembly
    attributes using C# code and external DLL and assembly references using IL code,
    as shown in *Figure 7.6* :![Graphical user interface, text, application Description
    automatically generated](img/Image00081.jpg)
  id: totrans-576
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Figure 7.6: Expanding ILSPY DECOMPILED MEMBERS'
  id: totrans-577
  prefs: []
  type: TYPE_NORMAL
- en: 'In the IL code on the right side, note the reference to the `System.Runtime`
    assembly, including the version number, as shown in the following code:'
  id: totrans-578
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '```cs'
  id: totrans-579
  prefs: []
  type: TYPE_NORMAL
- en: .module extern
  id: totrans-580
  prefs: []
  type: TYPE_NORMAL
- en: libSystem.Native
  id: totrans-581
  prefs: []
  type: TYPE_NORMAL
- en: .assembly extern
  id: totrans-582
  prefs: []
  type: TYPE_NORMAL
- en: System.Runtime
  id: totrans-583
  prefs: []
  type: TYPE_NORMAL
- en: '{'
  id: totrans-584
  prefs: []
  type: TYPE_NORMAL
- en: .publickeytoken = (
  id: totrans-585
  prefs: []
  type: TYPE_NORMAL
- en: b0 3f
  id: totrans-586
  prefs: []
  type: TYPE_NORMAL
- en: 5f
  id: totrans-587
  prefs: []
  type: TYPE_NORMAL
- en: 7f
  id: totrans-588
  prefs: []
  type: TYPE_NORMAL
- en: '11'
  id: totrans-589
  prefs: []
  type: TYPE_NORMAL
- en: d5 0
  id: totrans-590
  prefs: []
  type: TYPE_NORMAL
- en: a 3
  id: totrans-591
  prefs: []
  type: TYPE_NORMAL
- en: a
  id: totrans-592
  prefs: []
  type: TYPE_NORMAL
- en: )
  id: totrans-593
  prefs: []
  type: TYPE_NORMAL
- en: .ver 6
  id: totrans-594
  prefs: []
  type: TYPE_NORMAL
- en: :0
  id: totrans-595
  prefs: []
  type: TYPE_NORMAL
- en: :0
  id: totrans-596
  prefs: []
  type: TYPE_NORMAL
- en: :0
  id: totrans-597
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  id: totrans-598
  prefs: []
  type: TYPE_NORMAL
- en: '```'
  id: totrans-599
  prefs: []
  type: TYPE_NORMAL
- en: '`.module extern libSystem.Native` means this assembly makes function calls
    to Linux system APIs as you would expect from code that interacts with the filesystem.
    If we had decompiled the Windows equivalent of this assembly, it would use `.module
    extern kernel32.dll` instead, which is a Win32 API.'
  id: totrans-600
  prefs: []
  type: TYPE_NORMAL
- en: In **EXPLORER** , in **ILSPY DECOMPILED MEMBERS** , expand the assembly, expand
    the **System.IO** namespace, select **Directory** , and note the two edit windows
    that open showing the decompiled `Directory` class using C# code on the left and
    IL code on the right, as shown in *Figure 7.7* :![](img/Image00082.jpg)
  id: totrans-601
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Figure 7.7: The decompiled Directory class in C# and IL code'
  id: totrans-602
  prefs: []
  type: TYPE_NORMAL
- en: 'Compare the C# source code for the `GetParent` method, shown in the following
    code:'
  id: totrans-603
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '```cs'
  id: totrans-604
  prefs: []
  type: TYPE_NORMAL
- en: public
  id: totrans-605
  prefs: []
  type: TYPE_NORMAL
- en: static
  id: totrans-606
  prefs: []
  type: TYPE_NORMAL
- en: DirectoryInfo? GetParent(string
  id: totrans-607
  prefs: []
  type: TYPE_NORMAL
- en: path)
  id: totrans-608
  prefs: []
  type: TYPE_NORMAL
- en: '{'
  id: totrans-609
  prefs: []
  type: TYPE_NORMAL
- en: if
  id: totrans-610
  prefs: []
  type: TYPE_NORMAL
- en: (path == null
  id: totrans-611
  prefs: []
  type: TYPE_NORMAL
- en: )
  id: totrans-612
  prefs: []
  type: TYPE_NORMAL
- en: '{'
  id: totrans-613
  prefs: []
  type: TYPE_NORMAL
- en: throw
  id: totrans-614
  prefs: []
  type: TYPE_NORMAL
- en: new
  id: totrans-615
  prefs: []
  type: TYPE_NORMAL
- en: ArgumentNullException("path"
  id: totrans-616
  prefs: []
  type: TYPE_NORMAL
- en: );
  id: totrans-617
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  id: totrans-618
  prefs: []
  type: TYPE_NORMAL
- en: if
  id: totrans-619
  prefs: []
  type: TYPE_NORMAL
- en: (path.Length == 0
  id: totrans-620
  prefs: []
  type: TYPE_NORMAL
- en: )
  id: totrans-621
  prefs: []
  type: TYPE_NORMAL
- en: '{'
  id: totrans-622
  prefs: []
  type: TYPE_NORMAL
- en: throw
  id: totrans-623
  prefs: []
  type: TYPE_NORMAL
- en: new
  id: totrans-624
  prefs: []
  type: TYPE_NORMAL
- en: ArgumentException(SR.Argument_PathEmpty, "path"
  id: totrans-625
  prefs: []
  type: TYPE_NORMAL
- en: );
  id: totrans-626
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  id: totrans-627
  prefs: []
  type: TYPE_NORMAL
- en: string
  id: totrans-628
  prefs: []
  type: TYPE_NORMAL
- en: fullPath = Path.GetFullPath(path);
  id: totrans-629
  prefs: []
  type: TYPE_NORMAL
- en: string
  id: totrans-630
  prefs: []
  type: TYPE_NORMAL
- en: directoryName = Path.GetDirectoryName(fullPath);
  id: totrans-631
  prefs: []
  type: TYPE_NORMAL
- en: if
  id: totrans-632
  prefs: []
  type: TYPE_NORMAL
- en: (directoryName == null
  id: totrans-633
  prefs: []
  type: TYPE_NORMAL
- en: )
  id: totrans-634
  prefs: []
  type: TYPE_NORMAL
- en: '{'
  id: totrans-635
  prefs: []
  type: TYPE_NORMAL
- en: return
  id: totrans-636
  prefs: []
  type: TYPE_NORMAL
- en: 'null'
  id: totrans-637
  prefs: []
  type: TYPE_NORMAL
- en: ;
  id: totrans-638
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  id: totrans-639
  prefs: []
  type: TYPE_NORMAL
- en: return
  id: totrans-640
  prefs: []
  type: TYPE_NORMAL
- en: new
  id: totrans-641
  prefs: []
  type: TYPE_NORMAL
- en: DirectoryInfo(directoryName);
  id: totrans-642
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  id: totrans-643
  prefs: []
  type: TYPE_NORMAL
- en: '```'
  id: totrans-644
  prefs: []
  type: TYPE_NORMAL
- en: 'With the equivalent IL source code of the `GetParent` method, as shown in the
    following code:'
  id: totrans-645
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '```cs'
  id: totrans-646
  prefs: []
  type: TYPE_NORMAL
- en: .method /* 06000067 */
  id: totrans-647
  prefs: []
  type: TYPE_NORMAL
- en: public
  id: totrans-648
  prefs: []
  type: TYPE_NORMAL
- en: hidebysig static
  id: totrans-649
  prefs: []
  type: TYPE_NORMAL
- en: class
  id: totrans-650
  prefs: []
  type: TYPE_NORMAL
- en: System.IO.DirectoryInfo
  id: totrans-651
  prefs: []
  type: TYPE_NORMAL
- en: GetParent
  id: totrans-652
  prefs: []
  type: TYPE_NORMAL
- en: (
  id: totrans-653
  prefs: []
  type: TYPE_NORMAL
- en: string
  id: totrans-654
  prefs: []
  type: TYPE_NORMAL
- en: path
  id: totrans-655
  prefs: []
  type: TYPE_NORMAL
- en: ) cil
  id: totrans-656
  prefs: []
  type: TYPE_NORMAL
- en: managed
  id: totrans-657
  prefs: []
  type: TYPE_NORMAL
- en: '{'
  id: totrans-658
  prefs: []
  type: TYPE_NORMAL
- en: .param [0
  id: totrans-659
  prefs: []
  type: TYPE_NORMAL
- en: ']'
  id: totrans-660
  prefs: []
  type: TYPE_NORMAL
- en: .custom instance void
  id: totrans-661
  prefs: []
  type: TYPE_NORMAL
- en: System.Runtime.CompilerServices
  id: totrans-662
  prefs: []
  type: TYPE_NORMAL
- en: .NullableAttribute::.ctor(uint8) = (
  id: totrans-663
  prefs: []
  type: TYPE_NORMAL
- en: '01'
  id: totrans-664
  prefs: []
  type: TYPE_NORMAL
- en: '00'
  id: totrans-665
  prefs: []
  type: TYPE_NORMAL
- en: '02'
  id: totrans-666
  prefs: []
  type: TYPE_NORMAL
- en: '00'
  id: totrans-667
  prefs: []
  type: TYPE_NORMAL
- en: '00'
  id: totrans-668
  prefs: []
  type: TYPE_NORMAL
- en: )
  id: totrans-669
  prefs: []
  type: TYPE_NORMAL
- en: // Method begins at RVA 0x62d4
  id: totrans-670
  prefs: []
  type: TYPE_NORMAL
- en: // Code size 64 (0x40)
  id: totrans-671
  prefs: []
  type: TYPE_NORMAL
- en: .maxstack 2
  id: totrans-672
  prefs: []
  type: TYPE_NORMAL
- en: .locals /* 1100000E */
  id: totrans-673
  prefs: []
  type: TYPE_NORMAL
- en: (
  id: totrans-674
  prefs: []
  type: TYPE_NORMAL
- en: '[0'
  id: totrans-675
  prefs: []
  type: TYPE_NORMAL
- en: '] string'
  id: totrans-676
  prefs: []
  type: TYPE_NORMAL
- en: ','
  id: totrans-677
  prefs: []
  type: TYPE_NORMAL
- en: '[1'
  id: totrans-678
  prefs: []
  type: TYPE_NORMAL
- en: '] string'
  id: totrans-679
  prefs: []
  type: TYPE_NORMAL
- en: )
  id: totrans-680
  prefs: []
  type: TYPE_NORMAL
- en: 'IL_0000: ldarg.0'
  id: totrans-681
  prefs: []
  type: TYPE_NORMAL
- en: 'IL_0001: brtrue.s IL_000e'
  id: totrans-682
  prefs: []
  type: TYPE_NORMAL
- en: 'IL_0003: ldstr "path"'
  id: totrans-683
  prefs: []
  type: TYPE_NORMAL
- en: /* 700005CB */
  id: totrans-684
  prefs: []
  type: TYPE_NORMAL
- en: 'IL_0008: newobj instance void'
  id: totrans-685
  prefs: []
  type: TYPE_NORMAL
- en: '[System.Runtime]'
  id: totrans-686
  prefs: []
  type: TYPE_NORMAL
- en: System.ArgumentNullException::.ctor(string
  id: totrans-687
  prefs: []
  type: TYPE_NORMAL
- en: ) /* 0A000035 */
  id: totrans-688
  prefs: []
  type: TYPE_NORMAL
- en: 'IL_000d: throw'
  id: totrans-689
  prefs: []
  type: TYPE_NORMAL
- en: 'IL_000e: ldarg.0'
  id: totrans-690
  prefs: []
  type: TYPE_NORMAL
- en: 'IL_000f: callvirt instance int32 [System.Runtime]'
  id: totrans-691
  prefs: []
  type: TYPE_NORMAL
- en: System.String::get_Length() /* 0A000022 */
  id: totrans-692
  prefs: []
  type: TYPE_NORMAL
- en: 'IL_0014: brtrue.s IL_0026'
  id: totrans-693
  prefs: []
  type: TYPE_NORMAL
- en: 'IL_0016: call string'
  id: totrans-694
  prefs: []
  type: TYPE_NORMAL
- en: System.SR::get_Argument_PathEmpty() /* 0600004C */
  id: totrans-695
  prefs: []
  type: TYPE_NORMAL
- en: 'IL_001b: ldstr "path"'
  id: totrans-696
  prefs: []
  type: TYPE_NORMAL
- en: /* 700005CB */
  id: totrans-697
  prefs: []
  type: TYPE_NORMAL
- en: 'IL_0020: newobj instance void'
  id: totrans-698
  prefs: []
  type: TYPE_NORMAL
- en: '[System.Runtime]'
  id: totrans-699
  prefs: []
  type: TYPE_NORMAL
- en: System.ArgumentException::.ctor(string
  id: totrans-700
  prefs: []
  type: TYPE_NORMAL
- en: ', string'
  id: totrans-701
  prefs: []
  type: TYPE_NORMAL
- en: ) /* 0A000036 */
  id: totrans-702
  prefs: []
  type: TYPE_NORMAL
- en: 'IL_0025: throw'
  id: totrans-703
  prefs: []
  type: TYPE_NORMAL
- en: 'IL_0026: ldarg.0'
  id: totrans-704
  prefs: []
  type: TYPE_NORMAL
- en: 'IL_0027: call string'
  id: totrans-705
  prefs: []
  type: TYPE_NORMAL
- en: '[System.Runtime.Extensions]'
  id: totrans-706
  prefs: []
  type: TYPE_NORMAL
- en: System.IO.Path::GetFullPath(string
  id: totrans-707
  prefs: []
  type: TYPE_NORMAL
- en: ) /* 0A000037 */
  id: totrans-708
  prefs: []
  type: TYPE_NORMAL
- en: 'IL_002c: stloc.0'
  id: totrans-709
  prefs: []
  type: TYPE_NORMAL
- en: 'IL_002d: ldloc.0'
  id: totrans-710
  prefs: []
  type: TYPE_NORMAL
- en: 'IL_002e: call string'
  id: totrans-711
  prefs: []
  type: TYPE_NORMAL
- en: '[System.Runtime.Extensions]'
  id: totrans-712
  prefs: []
  type: TYPE_NORMAL
- en: System.IO.Path::GetDirectoryName(string
  id: totrans-713
  prefs: []
  type: TYPE_NORMAL
- en: ) /* 0A000038 */
  id: totrans-714
  prefs: []
  type: TYPE_NORMAL
- en: 'IL_0033: stloc.1'
  id: totrans-715
  prefs: []
  type: TYPE_NORMAL
- en: 'IL_0034: ldloc.1'
  id: totrans-716
  prefs: []
  type: TYPE_NORMAL
- en: 'IL_0035: brtrue.s IL_0039 IL_0037: ldnull'
  id: totrans-717
  prefs: []
  type: TYPE_NORMAL
- en: 'IL_0038: ret IL_0039: ldloc.1'
  id: totrans-718
  prefs: []
  type: TYPE_NORMAL
- en: 'IL_003a: newobj instance void'
  id: totrans-719
  prefs: []
  type: TYPE_NORMAL
- en: System.IO.DirectoryInfo::.ctor(string
  id: totrans-720
  prefs: []
  type: TYPE_NORMAL
- en: ) /* 06000097 */
  id: totrans-721
  prefs: []
  type: TYPE_NORMAL
- en: 'IL_003f: ret'
  id: totrans-722
  prefs: []
  type: TYPE_NORMAL
- en: '} // end of method Directory::GetParent'
  id: totrans-723
  prefs: []
  type: TYPE_NORMAL
- en: '```'
  id: totrans-724
  prefs: []
  type: TYPE_NORMAL
- en: '**Good Practice** : The IL code edit windows are not especially useful unless
    you get very advanced with C# and .NET development when knowing how the C# compiler
    translates your source code into IL code can be important. The much more useful
    edit windows contain the equivalent C# source code written by Microsoft experts.
    You can learn a lot of good practices from seeing how professionals implement
    types. For example, the `GetParent` method shows how to check arguments for `null`
    and other argument exceptions.'
  id: totrans-725
  prefs: []
  type: TYPE_NORMAL
- en: Close the edit windows without saving changes.
  id: totrans-726
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In **EXPLORER** , in **ILSPY DECOMPILED MEMBERS** , right-click the assembly
    and choose **Unload Assembly** .
  id: totrans-727
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: No, you cannot technically prevent decompilation
  id: totrans-728
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: I sometimes get asked if there is a way to protect compiled code to prevent
    decompilation. The quick answer is no, and if you think about it, you'll see why
    this has to be the case. You can make it harder using obfuscation tools like **Dotfuscator**
    , but ultimately you cannot completely prevent it.
  id: totrans-729
  prefs: []
  type: TYPE_NORMAL
- en: All compiled applications contain instructions to the platform, operating system,
    and hardware on which it runs. Those instructions have to be functionally the
    same as the original source code but are just harder for a human to read. Those
    instructions must be readable to execute your code; they therefore must be readable
    to be decompiled. If you protect your code from decompilation using some custom
    technique, then you would also prevent your code from running!
  id: totrans-730
  prefs: []
  type: TYPE_NORMAL
- en: Virtual machines simulate hardware and so can capture all interaction between
    your running application and the software and hardware that it thinks it is running
    on.
  id: totrans-731
  prefs: []
  type: TYPE_NORMAL
- en: If you could protect your code, then you would also prevent attaching to it
    with a debugger and stepping through it. If the compiled application has a `pdb`
    file, then you can attach a debugger and step through the statements line-by-line.
    Even without the `pdb` file, you can still attach a debugger and get some idea
    of how the code works.
  id: totrans-732
  prefs: []
  type: TYPE_NORMAL
- en: 'This is true for all programming languages. Not just .NET languages like C#,
    Visual Basic, and F#, but also C, C++, Delphi, assembly language: all can be attached
    to for debugging or to be disassembled or decompiled. Some tools used by professionals
    are shown in the following table:'
  id: totrans-733
  prefs: []
  type: TYPE_NORMAL
- en: '| Type | Product | Description |'
  id: totrans-734
  prefs: []
  type: TYPE_TB
- en: '| Virtual Machine | VMware | Professionals like malware analysts always run
    software inside a VM. |'
  id: totrans-735
  prefs: []
  type: TYPE_TB
- en: '| Debugger | SoftICE | Runs underneath the operating system usually in a VM.
    |'
  id: totrans-736
  prefs: []
  type: TYPE_TB
- en: '| Debugger | WinDbg | Useful for understanding Windows internals because it
    knows more about Windows data structures than other debuggers. |'
  id: totrans-737
  prefs: []
  type: TYPE_TB
- en: '| Disassembler | IDA Pro | Used by professional malware analysts. |'
  id: totrans-738
  prefs: []
  type: TYPE_TB
- en: '| Decompiler | HexRays | Decompiles C apps. Plugin for IDA Pro. |'
  id: totrans-739
  prefs: []
  type: TYPE_TB
- en: '| Decompiler | DeDe | Decompiles Delphi apps. |'
  id: totrans-740
  prefs: []
  type: TYPE_TB
- en: '| Decompiler | dotPeek | .NET decompiler from JetBrains. |'
  id: totrans-741
  prefs: []
  type: TYPE_TB
- en: '**Good Practice** : Debugging, disassembling, and decompiling someone else''s
    software is likely against its license agreement and illegal in many jurisdictions.
    Instead of trying to protect your intellectual property with a technical solution,
    the law is sometimes your only recourse.'
  id: totrans-742
  prefs: []
  type: TYPE_NORMAL
- en: Packaging your libraries for NuGet distribution
  id: totrans-743
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Before we learn how to create and package our own libraries, we will review
    how a project can use an existing package.
  id: totrans-744
  prefs: []
  type: TYPE_NORMAL
- en: Referencing a NuGet package
  id: totrans-745
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let''s say that you want to add a package created by a third-party developer,
    for example, `Newtonsoft.Json` , a popular package for working with the JavaScript
    Object Notation (JSON) serialization format:'
  id: totrans-746
  prefs: []
  type: TYPE_NORMAL
- en: In the `AssembliesAndNamespaces` project, add a reference to the `Newtonsoft.Json`
    NuGet package, either using the GUI for Visual Studio 2022 or the `dotnet add
    package` command for Visual Studio Code.
  id: totrans-747
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Open the `AssembliesAndNamespaces.csproj` file and note that a package reference
    has been added, as shown in the following markup:'
  id: totrans-748
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '```cs'
  id: totrans-749
  prefs: []
  type: TYPE_NORMAL
- en: <ItemGroup>
  id: totrans-750
  prefs: []
  type: TYPE_NORMAL
- en: <PackageReference Include="newtonsoft.json"
  id: totrans-751
  prefs: []
  type: TYPE_NORMAL
- en: Version="13.0.1"
  id: totrans-752
  prefs: []
  type: TYPE_NORMAL
- en: />
  id: totrans-753
  prefs: []
  type: TYPE_NORMAL
- en: </ItemGroup>
  id: totrans-754
  prefs: []
  type: TYPE_NORMAL
- en: '```'
  id: totrans-755
  prefs: []
  type: TYPE_NORMAL
- en: If you have a more recent version of the `newtonsoft.json` package, then it
    has been updated since this chapter was written.
  id: totrans-756
  prefs: []
  type: TYPE_NORMAL
- en: Fixing dependencies
  id: totrans-757
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'To consistently restore packages and write reliable code, it''s important that
    you **fix dependencies** . Fixing dependencies means you are using the same family
    of packages released for a specific version of .NET, for example, SQLite for .NET
    6.0, as shown highlighted in the following markup:'
  id: totrans-758
  prefs: []
  type: TYPE_NORMAL
- en: '```cs'
  id: totrans-759
  prefs: []
  type: TYPE_NORMAL
- en: <Project Sdk="Microsoft.NET.Sdk"
  id: totrans-760
  prefs: []
  type: TYPE_NORMAL
- en: '>'
  id: totrans-761
  prefs: []
  type: TYPE_NORMAL
- en: <PropertyGroup>
  id: totrans-762
  prefs: []
  type: TYPE_NORMAL
- en: <OutputType>Exe</OutputType>
  id: totrans-763
  prefs: []
  type: TYPE_NORMAL
- en: <TargetFramework>net6.0
  id: totrans-764
  prefs: []
  type: TYPE_NORMAL
- en: </TargetFramework>
  id: totrans-765
  prefs: []
  type: TYPE_NORMAL
- en: </PropertyGroup>
  id: totrans-766
  prefs: []
  type: TYPE_NORMAL
- en: <ItemGroup>
  id: totrans-767
  prefs: []
  type: TYPE_NORMAL
- en: '**<PackageReference**'
  id: totrans-768
  prefs: []
  type: TYPE_NORMAL
- en: '**Include=**'
  id: totrans-769
  prefs: []
  type: TYPE_NORMAL
- en: '**"Microsoft.EntityFrameworkCore.Sqlite"**'
  id: totrans-770
  prefs: []
  type: TYPE_NORMAL
- en: '**Version=**'
  id: totrans-771
  prefs: []
  type: TYPE_NORMAL
- en: '**"6.0.0"**'
  id: totrans-772
  prefs: []
  type: TYPE_NORMAL
- en: '**/>**'
  id: totrans-773
  prefs: []
  type: TYPE_NORMAL
- en: </ItemGroup>
  id: totrans-774
  prefs: []
  type: TYPE_NORMAL
- en: </Project>
  id: totrans-775
  prefs: []
  type: TYPE_NORMAL
- en: '```'
  id: totrans-776
  prefs: []
  type: TYPE_NORMAL
- en: To fix dependencies, every package should have a single version with no additional
    qualifiers. Additional qualifiers include betas (`beta1` ), release candidates
    (`rc4` ), and wildcards (`*` ).
  id: totrans-777
  prefs: []
  type: TYPE_NORMAL
- en: Wildcards allow future versions to be automatically referenced and used because
    they always represent the most recent release. But wildcards are therefore dangerous
    because they could result in the use of future incompatible packages that break
    your code.
  id: totrans-778
  prefs: []
  type: TYPE_NORMAL
- en: 'This can be worth the risk while writing a book where new preview versions
    are released every month and you do not want to keep updating the package references,
    as I did during 2021, and as shown in the following markup:'
  id: totrans-779
  prefs: []
  type: TYPE_NORMAL
- en: '```cs'
  id: totrans-780
  prefs: []
  type: TYPE_NORMAL
- en: <PackageReference
  id: totrans-781
  prefs: []
  type: TYPE_NORMAL
- en: Include="Microsoft.EntityFrameworkCore.Sqlite"
  id: totrans-782
  prefs: []
  type: TYPE_NORMAL
- en: Version="6.0.0-preview.*"
  id: totrans-783
  prefs: []
  type: TYPE_NORMAL
- en: />
  id: totrans-784
  prefs: []
  type: TYPE_NORMAL
- en: '```'
  id: totrans-785
  prefs: []
  type: TYPE_NORMAL
- en: If you use the `dotnet add package` command, or Visual Studio's **Manage NuGet
    Packages** , then it will by default use the latest specific version of a package.
    But if you copy and paste configuration from a blog article or manually add a
    reference yourself, you might include wildcard qualifiers.
  id: totrans-786
  prefs: []
  type: TYPE_NORMAL
- en: 'The following dependencies are examples of NuGet package references that are
    *not* fixed and therefore should be avoided unless you know the implications:'
  id: totrans-787
  prefs: []
  type: TYPE_NORMAL
- en: '```cs'
  id: totrans-788
  prefs: []
  type: TYPE_NORMAL
- en: <PackageReference Include="System.Net.Http"
  id: totrans-789
  prefs: []
  type: TYPE_NORMAL
- en: Version="4.1.0-*"
  id: totrans-790
  prefs: []
  type: TYPE_NORMAL
- en: />
  id: totrans-791
  prefs: []
  type: TYPE_NORMAL
- en: <PackageReference Include="Newtonsoft.Json"
  id: totrans-792
  prefs: []
  type: TYPE_NORMAL
- en: Version="12.0.3-beta1"
  id: totrans-793
  prefs: []
  type: TYPE_NORMAL
- en: />
  id: totrans-794
  prefs: []
  type: TYPE_NORMAL
- en: '```'
  id: totrans-795
  prefs: []
  type: TYPE_NORMAL
- en: '**Good Practice** : Microsoft guarantees that if you fixed your dependencies
    to what ships with a specific version of .NET, for example, 6.0.0, those packages
    will all work together. Almost always fix your dependencies.'
  id: totrans-796
  prefs: []
  type: TYPE_NORMAL
- en: Packaging a library for NuGet
  id: totrans-797
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Now, let''s package the `SharedLibrary` project that you created earlier:'
  id: totrans-798
  prefs: []
  type: TYPE_NORMAL
- en: In the `SharedLibrary` project, rename the `Class1.cs` file to `StringExtensions.cs`
    .
  id: totrans-799
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Modify its contents to provide some useful extension methods for validating
    various text values using regular expressions, as shown in the following code:'
  id: totrans-800
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '```cs'
  id: totrans-801
  prefs: []
  type: TYPE_NORMAL
- en: using
  id: totrans-802
  prefs: []
  type: TYPE_NORMAL
- en: System.Text.RegularExpressions;
  id: totrans-803
  prefs: []
  type: TYPE_NORMAL
- en: namespace
  id: totrans-804
  prefs: []
  type: TYPE_NORMAL
- en: Packt.Shared
  id: totrans-805
  prefs: []
  type: TYPE_NORMAL
- en: '{'
  id: totrans-806
  prefs: []
  type: TYPE_NORMAL
- en: public
  id: totrans-807
  prefs: []
  type: TYPE_NORMAL
- en: static
  id: totrans-808
  prefs: []
  type: TYPE_NORMAL
- en: class
  id: totrans-809
  prefs: []
  type: TYPE_NORMAL
- en: StringExtensions
  id: totrans-810
  prefs: []
  type: TYPE_NORMAL
- en: '{'
  id: totrans-811
  prefs: []
  type: TYPE_NORMAL
- en: public
  id: totrans-812
  prefs: []
  type: TYPE_NORMAL
- en: static
  id: totrans-813
  prefs: []
  type: TYPE_NORMAL
- en: bool
  id: totrans-814
  prefs: []
  type: TYPE_NORMAL
- en: IsValidXmlTag
  id: totrans-815
  prefs: []
  type: TYPE_NORMAL
- en: (
  id: totrans-816
  prefs: []
  type: TYPE_NORMAL
- en: this
  id: totrans-817
  prefs: []
  type: TYPE_NORMAL
- en: string
  id: totrans-818
  prefs: []
  type: TYPE_NORMAL
- en: input
  id: totrans-819
  prefs: []
  type: TYPE_NORMAL
- en: )
  id: totrans-820
  prefs: []
  type: TYPE_NORMAL
- en: '{'
  id: totrans-821
  prefs: []
  type: TYPE_NORMAL
- en: return
  id: totrans-822
  prefs: []
  type: TYPE_NORMAL
- en: Regex.IsMatch(input,
  id: totrans-823
  prefs: []
  type: TYPE_NORMAL
- en: '@"^<([a-z]+)([^<]+)*(?:>(.*)<\/\1>|\s+\/>)$"'
  id: totrans-824
  prefs: []
  type: TYPE_NORMAL
- en: );
  id: totrans-825
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  id: totrans-826
  prefs: []
  type: TYPE_NORMAL
- en: public
  id: totrans-827
  prefs: []
  type: TYPE_NORMAL
- en: static
  id: totrans-828
  prefs: []
  type: TYPE_NORMAL
- en: bool
  id: totrans-829
  prefs: []
  type: TYPE_NORMAL
- en: IsValidPassword
  id: totrans-830
  prefs: []
  type: TYPE_NORMAL
- en: (
  id: totrans-831
  prefs: []
  type: TYPE_NORMAL
- en: this
  id: totrans-832
  prefs: []
  type: TYPE_NORMAL
- en: string
  id: totrans-833
  prefs: []
  type: TYPE_NORMAL
- en: input
  id: totrans-834
  prefs: []
  type: TYPE_NORMAL
- en: )
  id: totrans-835
  prefs: []
  type: TYPE_NORMAL
- en: '{'
  id: totrans-836
  prefs: []
  type: TYPE_NORMAL
- en: // minimum of eight valid characters
  id: totrans-837
  prefs: []
  type: TYPE_NORMAL
- en: return
  id: totrans-838
  prefs: []
  type: TYPE_NORMAL
- en: Regex.IsMatch(input, "^[a-zA-Z0-9_-]{8,}$"
  id: totrans-839
  prefs: []
  type: TYPE_NORMAL
- en: );
  id: totrans-840
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  id: totrans-841
  prefs: []
  type: TYPE_NORMAL
- en: public
  id: totrans-842
  prefs: []
  type: TYPE_NORMAL
- en: static
  id: totrans-843
  prefs: []
  type: TYPE_NORMAL
- en: bool
  id: totrans-844
  prefs: []
  type: TYPE_NORMAL
- en: IsValidHex
  id: totrans-845
  prefs: []
  type: TYPE_NORMAL
- en: (
  id: totrans-846
  prefs: []
  type: TYPE_NORMAL
- en: this
  id: totrans-847
  prefs: []
  type: TYPE_NORMAL
- en: string
  id: totrans-848
  prefs: []
  type: TYPE_NORMAL
- en: input
  id: totrans-849
  prefs: []
  type: TYPE_NORMAL
- en: )
  id: totrans-850
  prefs: []
  type: TYPE_NORMAL
- en: '{'
  id: totrans-851
  prefs: []
  type: TYPE_NORMAL
- en: // three or six valid hex number characters
  id: totrans-852
  prefs: []
  type: TYPE_NORMAL
- en: return
  id: totrans-853
  prefs: []
  type: TYPE_NORMAL
- en: Regex.IsMatch(input,
  id: totrans-854
  prefs: []
  type: TYPE_NORMAL
- en: '"^#?([a-fA-F0-9]{3}|[a-fA-F0-9]{6})$"'
  id: totrans-855
  prefs: []
  type: TYPE_NORMAL
- en: );
  id: totrans-856
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  id: totrans-857
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  id: totrans-858
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  id: totrans-859
  prefs: []
  type: TYPE_NORMAL
- en: '```'
  id: totrans-860
  prefs: []
  type: TYPE_NORMAL
- en: You will learn how to write regular expressions in *Chapter 8* , *Working with
    Common .NET Types* .
  id: totrans-861
  prefs: []
  type: TYPE_NORMAL
- en: 'In `SharedLibrary.csproj` , modify its contents, as shown highlighted in the
    following markup, and note the following:'
  id: totrans-862
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`PackageId` must be globally unique, so you must use a different value if you
    want to publish this NuGet package to the [https://www.nuget.org/](https://www.nuget.org/)
    public feed for others to reference and download.'
  id: totrans-863
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`PackageLicenseExpression` must be a value from the following link: [https://spdx.org/licenses/](https://spdx.org/licenses/)
    or you could specify a custom license.'
  id: totrans-864
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'All the other elements are self-explanatory:'
  id: totrans-865
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '```cs'
  id: totrans-866
  prefs: []
  type: TYPE_NORMAL
- en: <Project Sdk="Microsoft.NET.Sdk"
  id: totrans-867
  prefs: []
  type: TYPE_NORMAL
- en: '>'
  id: totrans-868
  prefs: []
  type: TYPE_NORMAL
- en: <PropertyGroup>
  id: totrans-869
  prefs: []
  type: TYPE_NORMAL
- en: <TargetFramework>netstandard2.0
  id: totrans-870
  prefs: []
  type: TYPE_NORMAL
- en: </TargetFramework>
  id: totrans-871
  prefs: []
  type: TYPE_NORMAL
- en: '**<GeneratePackageOnBuild>**'
  id: totrans-872
  prefs: []
  type: TYPE_NORMAL
- en: '**true**'
  id: totrans-873
  prefs: []
  type: TYPE_NORMAL
- en: '**</GeneratePackageOnBuild>**'
  id: totrans-874
  prefs: []
  type: TYPE_NORMAL
- en: '**<PackageId>Packt.CSdotnet.SharedLibrary</PackageId>**'
  id: totrans-875
  prefs: []
  type: TYPE_NORMAL
- en: '**<PackageVersion>**'
  id: totrans-876
  prefs: []
  type: TYPE_NORMAL
- en: '**6.0.0.0**'
  id: totrans-877
  prefs: []
  type: TYPE_NORMAL
- en: '**</PackageVersion>**'
  id: totrans-878
  prefs: []
  type: TYPE_NORMAL
- en: '**<Title>C**'
  id: totrans-879
  prefs: []
  type: TYPE_NORMAL
- en: '**# 10 and .NET 6 Shared Library</Title>**'
  id: totrans-880
  prefs: []
  type: TYPE_NORMAL
- en: '**<Authors>Mark J Price</Authors>**'
  id: totrans-881
  prefs: []
  type: TYPE_NORMAL
- en: '**<PackageLicenseExpression>**'
  id: totrans-882
  prefs: []
  type: TYPE_NORMAL
- en: '**MS-PL**'
  id: totrans-883
  prefs: []
  type: TYPE_NORMAL
- en: '**</PackageLicenseExpression>**'
  id: totrans-884
  prefs: []
  type: TYPE_NORMAL
- en: '**<PackageProjectUrl>**'
  id: totrans-885
  prefs: []
  type: TYPE_NORMAL
- en: '**https:**'
  id: totrans-886
  prefs: []
  type: TYPE_NORMAL
- en: '**//github.com/markjprice/cs10dotnet6**'
  id: totrans-887
  prefs: []
  type: TYPE_NORMAL
- en: '**</PackageProjectUrl>**'
  id: totrans-888
  prefs: []
  type: TYPE_NORMAL
- en: '**<PackageIcon>packt-csdotnet-sharedlibrary.png</PackageIcon>**'
  id: totrans-889
  prefs: []
  type: TYPE_NORMAL
- en: '**<PackageRequireLicenseAcceptance>**'
  id: totrans-890
  prefs: []
  type: TYPE_NORMAL
- en: '**true**'
  id: totrans-891
  prefs: []
  type: TYPE_NORMAL
- en: '**</PackageRequireLicenseAcceptance>**'
  id: totrans-892
  prefs: []
  type: TYPE_NORMAL
- en: '**<PackageReleaseNotes>**'
  id: totrans-893
  prefs: []
  type: TYPE_NORMAL
- en: '**Example shared library packaged**'
  id: totrans-894
  prefs: []
  type: TYPE_NORMAL
- en: '**for**'
  id: totrans-895
  prefs: []
  type: TYPE_NORMAL
- en: '**NuGet.**'
  id: totrans-896
  prefs: []
  type: TYPE_NORMAL
- en: '**</PackageReleaseNotes>**'
  id: totrans-897
  prefs: []
  type: TYPE_NORMAL
- en: '**<Description>**'
  id: totrans-898
  prefs: []
  type: TYPE_NORMAL
- en: '**Three extension methods to validate a**'
  id: totrans-899
  prefs: []
  type: TYPE_NORMAL
- en: '**string**'
  id: totrans-900
  prefs: []
  type: TYPE_NORMAL
- en: '**value**'
  id: totrans-901
  prefs: []
  type: TYPE_NORMAL
- en: '**.**'
  id: totrans-902
  prefs: []
  type: TYPE_NORMAL
- en: '**</Description>**'
  id: totrans-903
  prefs: []
  type: TYPE_NORMAL
- en: '**<Copyright>**'
  id: totrans-904
  prefs: []
  type: TYPE_NORMAL
- en: '**Copyright ©**'
  id: totrans-905
  prefs: []
  type: TYPE_NORMAL
- en: '**2016-2021**'
  id: totrans-906
  prefs: []
  type: TYPE_NORMAL
- en: '**Packt Publishing Limited**'
  id: totrans-907
  prefs: []
  type: TYPE_NORMAL
- en: '**</Copyright>**'
  id: totrans-908
  prefs: []
  type: TYPE_NORMAL
- en: '**<PackageTags>**'
  id: totrans-909
  prefs: []
  type: TYPE_NORMAL
- en: '**string**'
  id: totrans-910
  prefs: []
  type: TYPE_NORMAL
- en: '**extensions packt csharp dotnet</PackageTags>**'
  id: totrans-911
  prefs: []
  type: TYPE_NORMAL
- en: </PropertyGroup>
  id: totrans-912
  prefs: []
  type: TYPE_NORMAL
- en: '**<ItemGroup>**'
  id: totrans-913
  prefs: []
  type: TYPE_NORMAL
- en: '**<None Include=**'
  id: totrans-914
  prefs: []
  type: TYPE_NORMAL
- en: '**"packt-csdotnet-sharedlibrary.png"**'
  id: totrans-915
  prefs: []
  type: TYPE_NORMAL
- en: '**>**'
  id: totrans-916
  prefs: []
  type: TYPE_NORMAL
- en: '**<Pack>True</Pack>**'
  id: totrans-917
  prefs: []
  type: TYPE_NORMAL
- en: '**<PackagePath></PackagePath>**'
  id: totrans-918
  prefs: []
  type: TYPE_NORMAL
- en: '**</None>**'
  id: totrans-919
  prefs: []
  type: TYPE_NORMAL
- en: '**</ItemGroup>**'
  id: totrans-920
  prefs: []
  type: TYPE_NORMAL
- en: </Project>
  id: totrans-921
  prefs: []
  type: TYPE_NORMAL
- en: '```'
  id: totrans-922
  prefs: []
  type: TYPE_NORMAL
- en: '**Good Practice** : Configuration property values that are `true` or `false`
    values cannot have any whitespace so the `<PackageRequireLicenseAcceptance>` entry
    cannot have a carriage return and indentation as shown in the preceding markup.'
  id: totrans-923
  prefs: []
  type: TYPE_NORMAL
- en: 'Download the icon file and save it in the `SharedLibrary` folder from the following
    link: [https://github.com/markjprice/cs10dotnet6/blob/main/vs4win/Chapter07/SharedLibrary/packt-csdotnet-sharedlibrary.png](https://github.com/markjprice/cs10dotnet6/blob/main/vs4win/Chapter07/SharedLibrary/packt-csdotnet-sharedlibrary.png)
    .'
  id: totrans-924
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Build the release assembly:'
  id: totrans-925
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In Visual Studio, select **Release** in the toolbar, and then navigate to **Build**
    | **Build SharedLibrary** .
  id: totrans-926
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In Visual Studio Code, in **Terminal** , enter `dotnet build -c Release`
  id: totrans-927
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'If we had not set `<GeneratePackageOnBuild>` to `true` in the project file,
    then we would have to create a NuGet package manually using the following additional
    steps:'
  id: totrans-928
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In Visual Studio, navigate to **Build** | **Pack SharedLibrary** .
  id: totrans-929
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In Visual Studio Code, in **Terminal** , enter `dotnet pack -c Release` .
  id: totrans-930
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Publishing a package to a public NuGet feed
  id: totrans-931
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'If you want everyone to be able to download and use your NuGet package, then
    you must upload it to a public NuGet feed like Microsoft''s:'
  id: totrans-932
  prefs: []
  type: TYPE_NORMAL
- en: 'Start your favorite browser and navigate to the following link: [https://www.nuget.org/packages/manage/upload](https://www.nuget.org/packages/manage/upload)
    .'
  id: totrans-933
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You will need to sign in with a Microsoft account at [https://www.nuget.org/](https://www.nuget.org/)
    if you want to upload a NuGet package for other developers to reference as a dependency
    package.
  id: totrans-934
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on **Browse...** and select the `.nupkg` file that was created by generating
    the NuGet package. The folder path should be `Code\Chapter07\SharedLibrary\bin\Release`
    and the file is named `Packt.CSdotnet.SharedLibrary.6.0.0.nupkg` .
  id: totrans-935
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Verify that the information you entered in the `SharedLibrary.csproj` file has
    been correctly filled in, and then click **Submit** .
  id: totrans-936
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Wait a few seconds, and you will see a success message showing that your package
    has been uploaded, as shown in *Figure 7.8* :![](img/Image00083.jpg)
  id: totrans-937
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Figure 7.8: A NuGet package upload message'
  id: totrans-938
  prefs: []
  type: TYPE_NORMAL
- en: '**Good Practice** : If you get an error, then review the project file for mistakes,
    or read more information about the `PackageReference` format at [https://docs.microsoft.com/en-us/nuget/reference/msbuild-targets](https://docs.microsoft.com/en-us/nuget/reference/msbuild-targets)
    .'
  id: totrans-939
  prefs: []
  type: TYPE_NORMAL
- en: Publishing a package to a private NuGet feed
  id: totrans-940
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Organizations can host their own private NuGet feeds. This can be a handy way
    for many developer teams to share work. You can read more at the following link:'
  id: totrans-941
  prefs: []
  type: TYPE_NORMAL
- en: '[https://docs.microsoft.com/en-us/nuget/hosting-packages/overview](https://docs.microsoft.com/en-us/nuget/hosting-packages/overview)'
  id: totrans-942
  prefs: []
  type: TYPE_NORMAL
- en: Exploring NuGet packages with a tool
  id: totrans-943
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'A handy tool named **NuGet Package Explorer** for opening and reviewing more
    details about a NuGet package was created by Uno Platform. As well as being a
    website, it can be installed as a cross-platform app. Let''s see what it can do:'
  id: totrans-944
  prefs: []
  type: TYPE_NORMAL
- en: 'Start your favorite browser and navigate to the following link: [https://nuget.info](https://nuget.info)
    .'
  id: totrans-945
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the search box, enter `Packt.CSdotnet.SharedLibrary` .
  id: totrans-946
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the package **v6.0.0** published by **Mark J Price** and then click the
    **Open** button.
  id: totrans-947
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the **Contents** section, expand the **lib** folder and the **netstandard2.0**
    folder.
  id: totrans-948
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select **SharedLibrary.dll** , and note the details, as shown in *Figure 7.9*
    :![](img/Image00084.jpg)
  id: totrans-949
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Figure 7.9: Exploring my package using NuGet Package Explorer from Uno Platform'
  id: totrans-950
  prefs: []
  type: TYPE_NORMAL
- en: If you want to use this tool locally in the future, click the install button
    in your browser.
  id: totrans-951
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Close your browser.
  id: totrans-952
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Not all browsers support installing web apps like this. I recommend Chrome for
    testing and development.
  id: totrans-953
  prefs: []
  type: TYPE_NORMAL
- en: Testing your class library package
  id: totrans-954
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'You will now test your uploaded package by referencing it in the `AssembliesAndNamespaces`
    project:'
  id: totrans-955
  prefs: []
  type: TYPE_NORMAL
- en: 'In the `AssembliesAndNamespaces` project, add a reference to your (or my) package,
    as shown highlighted in the following markup:'
  id: totrans-956
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '```cs'
  id: totrans-957
  prefs: []
  type: TYPE_NORMAL
- en: <ItemGroup>
  id: totrans-958
  prefs: []
  type: TYPE_NORMAL
- en: <PackageReference Include="newtonsoft.json"
  id: totrans-959
  prefs: []
  type: TYPE_NORMAL
- en: Version="13.0.1"
  id: totrans-960
  prefs: []
  type: TYPE_NORMAL
- en: />
  id: totrans-961
  prefs: []
  type: TYPE_NORMAL
- en: '**<PackageReference Include=**'
  id: totrans-962
  prefs: []
  type: TYPE_NORMAL
- en: '**"packt.csdotnet.sharedlibrary"**'
  id: totrans-963
  prefs: []
  type: TYPE_NORMAL
- en: '**Version=**'
  id: totrans-964
  prefs: []
  type: TYPE_NORMAL
- en: '**"6.0.0"**'
  id: totrans-965
  prefs: []
  type: TYPE_NORMAL
- en: '**/>**'
  id: totrans-966
  prefs: []
  type: TYPE_NORMAL
- en: </ItemGroup>
  id: totrans-967
  prefs: []
  type: TYPE_NORMAL
- en: '```'
  id: totrans-968
  prefs: []
  type: TYPE_NORMAL
- en: Build the console app.
  id: totrans-969
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In `Program.cs` , import the `Packt.Shared` namespace.
  id: totrans-970
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In `Program.cs` , prompt the user to enter some `string` values, and then validate
    them using the extension methods in the package, as shown in the following code:'
  id: totrans-971
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '```cs'
  id: totrans-972
  prefs: []
  type: TYPE_NORMAL
- en: 'Write("Enter a color value in hex: "'
  id: totrans-973
  prefs: []
  type: TYPE_NORMAL
- en: );
  id: totrans-974
  prefs: []
  type: TYPE_NORMAL
- en: string
  id: totrans-975
  prefs: []
  type: TYPE_NORMAL
- en: '? hex = ReadLine(); // or "00ffc8"'
  id: totrans-976
  prefs: []
  type: TYPE_NORMAL
- en: WriteLine("Is {0} a valid color value? {1}"
  id: totrans-977
  prefs: []
  type: TYPE_NORMAL
- en: ','
  id: totrans-978
  prefs: []
  type: TYPE_NORMAL
- en: 'arg0: hex, arg1: hex.IsValidHex());'
  id: totrans-979
  prefs: []
  type: TYPE_NORMAL
- en: 'Write("Enter a XML element: "'
  id: totrans-980
  prefs: []
  type: TYPE_NORMAL
- en: );
  id: totrans-981
  prefs: []
  type: TYPE_NORMAL
- en: string
  id: totrans-982
  prefs: []
  type: TYPE_NORMAL
- en: '? xmlTag = ReadLine(); // or "<h1 class=\"<\" />"'
  id: totrans-983
  prefs: []
  type: TYPE_NORMAL
- en: WriteLine("Is {0} a valid XML element? {1}"
  id: totrans-984
  prefs: []
  type: TYPE_NORMAL
- en: ','
  id: totrans-985
  prefs: []
  type: TYPE_NORMAL
- en: 'arg0: xmlTag, arg1: xmlTag.IsValidXmlTag());'
  id: totrans-986
  prefs: []
  type: TYPE_NORMAL
- en: 'Write("Enter a password: "'
  id: totrans-987
  prefs: []
  type: TYPE_NORMAL
- en: );
  id: totrans-988
  prefs: []
  type: TYPE_NORMAL
- en: string
  id: totrans-989
  prefs: []
  type: TYPE_NORMAL
- en: '? password = ReadLine(); // or "secretsauce"'
  id: totrans-990
  prefs: []
  type: TYPE_NORMAL
- en: WriteLine("Is {0} a valid password? {1}"
  id: totrans-991
  prefs: []
  type: TYPE_NORMAL
- en: ','
  id: totrans-992
  prefs: []
  type: TYPE_NORMAL
- en: 'arg0: password, arg1: password.IsValidPassword());'
  id: totrans-993
  prefs: []
  type: TYPE_NORMAL
- en: '```'
  id: totrans-994
  prefs: []
  type: TYPE_NORMAL
- en: 'Run the code, enter some values as prompted, and view the results, as shown
    in the following output:'
  id: totrans-995
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '```cs'
  id: totrans-996
  prefs: []
  type: TYPE_NORMAL
- en: 'Enter a color value in hex: 00ffc8'
  id: totrans-997
  prefs: []
  type: TYPE_NORMAL
- en: Is 00ffc8 a valid color value? True
  id: totrans-998
  prefs: []
  type: TYPE_NORMAL
- en: 'Enter an XML element: <h1 class="<" />'
  id: totrans-999
  prefs: []
  type: TYPE_NORMAL
- en: Is <h1 class="<" /> a valid XML element? False
  id: totrans-1000
  prefs: []
  type: TYPE_NORMAL
- en: 'Enter a password: secretsauce'
  id: totrans-1001
  prefs: []
  type: TYPE_NORMAL
- en: Is secretsauce a valid password? True
  id: totrans-1002
  prefs: []
  type: TYPE_NORMAL
- en: '```'
  id: totrans-1003
  prefs: []
  type: TYPE_NORMAL
- en: Porting from .NET Framework to modern .NET
  id: totrans-1004
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If you are an existing .NET Framework developer, then you may have existing
    applications that you think you should port to modern .NET. But you should carefully
    consider if porting is the right choice for your code, because sometimes, the
    best choice is not to port.
  id: totrans-1005
  prefs: []
  type: TYPE_NORMAL
- en: For example, you might have a complex website project that runs on .NET Framework
    4.8 but is only visited by a small number of users. If it works and handles the
    visitor traffic on minimal hardware, then potentially spending months porting
    it to .NET 6 could be a waste of time. But if the website currently requires many
    expensive Windows servers, then the cost of porting could eventually pay off if
    you can migrate to fewer, less costly Linux servers.
  id: totrans-1006
  prefs: []
  type: TYPE_NORMAL
- en: Could you port?
  id: totrans-1007
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Modern .NET has great support for the following types of applications on Windows,
    macOS, and Linux so they are good candidates for porting:'
  id: totrans-1008
  prefs: []
  type: TYPE_NORMAL
- en: '**ASP.NET Core MVC** websites.'
  id: totrans-1009
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**ASP.NET Core Web API** web services (REST/HTTP).'
  id: totrans-1010
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**ASP.NET Core SignalR** services.'
  id: totrans-1011
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Console application** command-line interfaces.'
  id: totrans-1012
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Modern .NET has decent support for the following types of applications on Windows,
    so they are potential candidates for porting:'
  id: totrans-1013
  prefs: []
  type: TYPE_NORMAL
- en: '**Windows Forms** applications.'
  id: totrans-1014
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Windows Presentation Foundation** (**WPF** ) applications.'
  id: totrans-1015
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Modern .NET has good support for the following types of applications on cross-platform
    desktop and mobile devices:'
  id: totrans-1016
  prefs: []
  type: TYPE_NORMAL
- en: '**Xamarin** apps for mobile iOS and Android.'
  id: totrans-1017
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**.NET MAUI** for desktop Windows and macOS, or mobile iOS and Android.'
  id: totrans-1018
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Modern .NET does not support the following types of legacy Microsoft projects:'
  id: totrans-1019
  prefs: []
  type: TYPE_NORMAL
- en: '**ASP.NET Web Forms** websites. These might be best reimplemented using **ASP.NET
    Core Razor Pages** or **Blazor** .'
  id: totrans-1020
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Windows Communication Foundation** (**WCF** ) services (but there is an open-source
    project named **CoreWCF** that you might be able to use depending on requirements).
    WCF services might be better reimplemented using **ASP.NET Core gRPC** services.'
  id: totrans-1021
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Silverlight** applications. These might be best reimplemented using **.NET
    MAUI** .'
  id: totrans-1022
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Silverlight and ASP.NET Web Forms applications will never be able to be ported
    to modern .NET, but existing Windows Forms and WPF applications could be ported
    to .NET on Windows in order to benefit from the new APIs and faster performance.
  id: totrans-1023
  prefs: []
  type: TYPE_NORMAL
- en: Legacy ASP.NET MVC web applications and ASP.NET Web API web services currently
    on .NET Framework could be ported to modern .NET and then be hosted on Windows,
    Linux, or macOS.
  id: totrans-1024
  prefs: []
  type: TYPE_NORMAL
- en: Should you port?
  id: totrans-1025
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Even if you *could* port, *should* you? What benefits do you gain? Some common
    benefits include the following:'
  id: totrans-1026
  prefs: []
  type: TYPE_NORMAL
- en: '**Deployment to Linux, Docker, or Kubernetes for websites and web services**
    : These OSes are lightweight and cost-effective as website and web service platforms,
    especially when compared to the more costly Windows Server.'
  id: totrans-1027
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Removal of dependency on IIS and System.Web.dll** : Even if you continue
    to deploy to Windows Server, ASP.NET Core can be hosted on lightweight, higher-performance
    Kestrel (or other) web servers.'
  id: totrans-1028
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Command-line tools** : Tools that developers and administrators use to automate
    their tasks are often built as console applications. The ability to run a single
    tool cross-platform is very useful.'
  id: totrans-1029
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Differences between .NET Framework and modern .NET
  id: totrans-1030
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'There are three key differences, as shown in the following table:'
  id: totrans-1031
  prefs: []
  type: TYPE_NORMAL
- en: '| Modern .NET | .NET Framework |'
  id: totrans-1032
  prefs: []
  type: TYPE_TB
- en: '| Distributed as NuGet packages, so each application can be deployed with its
    own app-local copy of the version of .NET that it needs. | Distributed as a system-wide,
    shared set of assemblies (literally, in the Global Assembly Cache (GAC)). |'
  id: totrans-1033
  prefs: []
  type: TYPE_TB
- en: '| Split into small, layered components, so a minimal deployment can be performed.
    | Single, monolithic deployment. |'
  id: totrans-1034
  prefs: []
  type: TYPE_TB
- en: '| Removes older technologies, such as ASP.NET Web Forms, and non-cross-platform
    features, such as AppDomains, .NET Remoting, and binary serialization. | As well
    as some similar technologies to those in modern .NET like ASP.NET Core MVC, it
    also retains some older technologies, such as ASP.NET Web Forms. |'
  id: totrans-1035
  prefs: []
  type: TYPE_TB
- en: Understanding the .NET Portability Analyzer
  id: totrans-1036
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Microsoft has a useful tool that you can run against your existing applications
    to generate a report for porting. You can watch a demonstration of the tool at
    the following link: [https://channel9.msdn.com/Blogs/Seth-Juarez/A-Brief-Look-at-the-NET-Portability-Analyzer](https://channel9.msdn.com/Blogs/Seth-Juarez/A-Brief-Look-at-the-NET-Portability-Analyzer)
    .'
  id: totrans-1037
  prefs: []
  type: TYPE_NORMAL
- en: Understanding the .NET Upgrade Assistant
  id: totrans-1038
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Microsoft's latest tool for upgrading legacy projects to modern .NET is the
    .NET Upgrade Assistant.
  id: totrans-1039
  prefs: []
  type: TYPE_NORMAL
- en: For my day job, I work for a company named Optimizely. We have an enterprise-scale
    Digital Experience Platform (DXP) based on .NET Framework comprising a Content
    Management System (CMS) and for building digital commerce websites. Microsoft
    needed a challenging migration project to design and test the .NET Upgrade Assistant
    with, so we worked with them to build a great tool.
  id: totrans-1040
  prefs: []
  type: TYPE_NORMAL
- en: 'Currently, it supports the following .NET Framework project types and more
    will be added later:'
  id: totrans-1041
  prefs: []
  type: TYPE_NORMAL
- en: ASP.NET MVC
  id: totrans-1042
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Windows Forms
  id: totrans-1043
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: WPF
  id: totrans-1044
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Console Application
  id: totrans-1045
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Class Library
  id: totrans-1046
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'It is installed as a global `dotnet` tool, as shown in the following command:'
  id: totrans-1047
  prefs: []
  type: TYPE_NORMAL
- en: '```cs'
  id: totrans-1048
  prefs: []
  type: TYPE_NORMAL
- en: dotnet tool install -g upgrade-assistant
  id: totrans-1049
  prefs: []
  type: TYPE_NORMAL
- en: '```'
  id: totrans-1050
  prefs: []
  type: TYPE_NORMAL
- en: 'You can read more about this tool and how to use it at the following link:'
  id: totrans-1051
  prefs: []
  type: TYPE_NORMAL
- en: '[https://docs.microsoft.com/en-us/dotnet/core/porting/upgrade-assistant-overview](https://docs.microsoft.com/en-us/dotnet/core/porting/upgrade-assistant-overview)'
  id: totrans-1052
  prefs: []
  type: TYPE_NORMAL
- en: Using non-.NET Standard libraries
  id: totrans-1053
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Most existing NuGet packages can be used with modern .NET, even if they are
    not compiled for .NET Standard or a modern version like .NET 6\. If you find a
    package that does not officially support .NET Standard, as shown on its [nuget.org](https://www.nuget.org/)
    web page, you do not have to give up. You should try it and see if it works.
  id: totrans-1054
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, there is a package of custom collections for handling matrices
    created by Dialect Software LLC, documented at the following link:'
  id: totrans-1055
  prefs: []
  type: TYPE_NORMAL
- en: '[https://www.nuget.org/packages/DialectSoftware.Collections.Matrix/](https://www.nuget.org/packages/DialectSoftware.Collections.Matrix/)'
  id: totrans-1056
  prefs: []
  type: TYPE_NORMAL
- en: This package was last updated in 2013, which was long before .NET Core or .NET
    6 existed, so this package was built for .NET Framework. As long as an assembly
    package like this only uses APIs available in .NET Standard, it can be used in
    a modern .NET project.
  id: totrans-1057
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s try using it and see if it works:'
  id: totrans-1058
  prefs: []
  type: TYPE_NORMAL
- en: 'In the `AssembliesAndNamespaces` project, add a package reference for Dialect
    Software''s package, as shown in the following markup:'
  id: totrans-1059
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '```cs'
  id: totrans-1060
  prefs: []
  type: TYPE_NORMAL
- en: <PackageReference
  id: totrans-1061
  prefs: []
  type: TYPE_NORMAL
- en: Include="dialectsoftware.collections.matrix"
  id: totrans-1062
  prefs: []
  type: TYPE_NORMAL
- en: Version="1.0.0"
  id: totrans-1063
  prefs: []
  type: TYPE_NORMAL
- en: />
  id: totrans-1064
  prefs: []
  type: TYPE_NORMAL
- en: '```'
  id: totrans-1065
  prefs: []
  type: TYPE_NORMAL
- en: Build the `AssembliesAndNamespaces` project to restore packages.
  id: totrans-1066
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In `Program.cs` , add statements to import the `DialectSoftware.Collections`
    and `DialectSoftware.Collections.Generics` namespaces.
  id: totrans-1067
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add statements to create instances of `Axis` and `Matrix<T>` , populate them
    with values, and output them, as shown in the following code:'
  id: totrans-1068
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '```cs'
  id: totrans-1069
  prefs: []
  type: TYPE_NORMAL
- en: Axis x = new
  id: totrans-1070
  prefs: []
  type: TYPE_NORMAL
- en: ("x"
  id: totrans-1071
  prefs: []
  type: TYPE_NORMAL
- en: ', 0'
  id: totrans-1072
  prefs: []
  type: TYPE_NORMAL
- en: ', 10'
  id: totrans-1073
  prefs: []
  type: TYPE_NORMAL
- en: ', 1'
  id: totrans-1074
  prefs: []
  type: TYPE_NORMAL
- en: );
  id: totrans-1075
  prefs: []
  type: TYPE_NORMAL
- en: Axis y = new
  id: totrans-1076
  prefs: []
  type: TYPE_NORMAL
- en: ("y"
  id: totrans-1077
  prefs: []
  type: TYPE_NORMAL
- en: ', 0'
  id: totrans-1078
  prefs: []
  type: TYPE_NORMAL
- en: ', 4'
  id: totrans-1079
  prefs: []
  type: TYPE_NORMAL
- en: ', 1'
  id: totrans-1080
  prefs: []
  type: TYPE_NORMAL
- en: );
  id: totrans-1081
  prefs: []
  type: TYPE_NORMAL
- en: Matrix<long
  id: totrans-1082
  prefs: []
  type: TYPE_NORMAL
- en: matrix = new
  id: totrans-1083
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: (new
  id: totrans-1084
  prefs: []
  type: TYPE_NORMAL
- en: '[] { x, y });'
  id: totrans-1085
  prefs: []
  type: TYPE_NORMAL
- en: for
  id: totrans-1086
  prefs: []
  type: TYPE_NORMAL
- en: (int
  id: totrans-1087
  prefs: []
  type: TYPE_NORMAL
- en: i = 0
  id: totrans-1088
  prefs: []
  type: TYPE_NORMAL
- en: ; i < matrix.Axes[0
  id: totrans-1089
  prefs: []
  type: TYPE_NORMAL
- en: '].Points.Length; i++)'
  id: totrans-1090
  prefs: []
  type: TYPE_NORMAL
- en: '{'
  id: totrans-1091
  prefs: []
  type: TYPE_NORMAL
- en: matrix.Axes[0
  id: totrans-1092
  prefs: []
  type: TYPE_NORMAL
- en: '].Points[i].Label = "x"'
  id: totrans-1093
  prefs: []
  type: TYPE_NORMAL
- en: + i.ToString();
  id: totrans-1094
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  id: totrans-1095
  prefs: []
  type: TYPE_NORMAL
- en: for
  id: totrans-1096
  prefs: []
  type: TYPE_NORMAL
- en: (int
  id: totrans-1097
  prefs: []
  type: TYPE_NORMAL
- en: i = 0
  id: totrans-1098
  prefs: []
  type: TYPE_NORMAL
- en: ; i < matrix.Axes[1
  id: totrans-1099
  prefs: []
  type: TYPE_NORMAL
- en: '].Points.Length; i++)'
  id: totrans-1100
  prefs: []
  type: TYPE_NORMAL
- en: '{'
  id: totrans-1101
  prefs: []
  type: TYPE_NORMAL
- en: matrix.Axes[1
  id: totrans-1102
  prefs: []
  type: TYPE_NORMAL
- en: '].Points[i].Label = "y"'
  id: totrans-1103
  prefs: []
  type: TYPE_NORMAL
- en: + i.ToString();
  id: totrans-1104
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  id: totrans-1105
  prefs: []
  type: TYPE_NORMAL
- en: foreach
  id: totrans-1106
  prefs: []
  type: TYPE_NORMAL
- en: (long
  id: totrans-1107
  prefs: []
  type: TYPE_NORMAL
- en: '[] c in'
  id: totrans-1108
  prefs: []
  type: TYPE_NORMAL
- en: matrix)
  id: totrans-1109
  prefs: []
  type: TYPE_NORMAL
- en: '{'
  id: totrans-1110
  prefs: []
  type: TYPE_NORMAL
- en: matrix[c] = c[0
  id: totrans-1111
  prefs: []
  type: TYPE_NORMAL
- en: '] + c[1'
  id: totrans-1112
  prefs: []
  type: TYPE_NORMAL
- en: '];'
  id: totrans-1113
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  id: totrans-1114
  prefs: []
  type: TYPE_NORMAL
- en: foreach
  id: totrans-1115
  prefs: []
  type: TYPE_NORMAL
- en: (long
  id: totrans-1116
  prefs: []
  type: TYPE_NORMAL
- en: '[] c in'
  id: totrans-1117
  prefs: []
  type: TYPE_NORMAL
- en: matrix)
  id: totrans-1118
  prefs: []
  type: TYPE_NORMAL
- en: '{'
  id: totrans-1119
  prefs: []
  type: TYPE_NORMAL
- en: WriteLine("{0},{1} ({2},{3}) = {4}"
  id: totrans-1120
  prefs: []
  type: TYPE_NORMAL
- en: ','
  id: totrans-1121
  prefs: []
  type: TYPE_NORMAL
- en: matrix.Axes[0
  id: totrans-1122
  prefs: []
  type: TYPE_NORMAL
- en: '].Points[c[0'
  id: totrans-1123
  prefs: []
  type: TYPE_NORMAL
- en: ']].Label,'
  id: totrans-1124
  prefs: []
  type: TYPE_NORMAL
- en: matrix.Axes[1
  id: totrans-1125
  prefs: []
  type: TYPE_NORMAL
- en: '].Points[c[1'
  id: totrans-1126
  prefs: []
  type: TYPE_NORMAL
- en: ']].Label,'
  id: totrans-1127
  prefs: []
  type: TYPE_NORMAL
- en: c[0
  id: totrans-1128
  prefs: []
  type: TYPE_NORMAL
- en: '], c[1'
  id: totrans-1129
  prefs: []
  type: TYPE_NORMAL
- en: '], matrix[c]);'
  id: totrans-1130
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  id: totrans-1131
  prefs: []
  type: TYPE_NORMAL
- en: '```'
  id: totrans-1132
  prefs: []
  type: TYPE_NORMAL
- en: 'Run the code, noting the warning message and the results, as shown in the following
    output:'
  id: totrans-1133
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '```cs'
  id: totrans-1134
  prefs: []
  type: TYPE_NORMAL
- en: 'warning NU1701: Package ''DialectSoftware.Collections.Matrix'
  id: totrans-1135
  prefs: []
  type: TYPE_NORMAL
- en: 1.0.0' was restored using '.NETFramework,Version=v4.6.1,
  id: totrans-1136
  prefs: []
  type: TYPE_NORMAL
- en: .NETFramework,Version=v4.6.2, .NETFramework,Version=v4.7,
  id: totrans-1137
  prefs: []
  type: TYPE_NORMAL
- en: .NETFramework,Version=v4.7.1, .NETFramework,Version=v4.7.2,
  id: totrans-1138
  prefs: []
  type: TYPE_NORMAL
- en: .NETFramework,Version=v4.8' instead of the project target framework 'net6.0'.
    This package may not be fully compatible with your project.
  id: totrans-1139
  prefs: []
  type: TYPE_NORMAL
- en: x0,y0 (0,0) = 0
  id: totrans-1140
  prefs: []
  type: TYPE_NORMAL
- en: x0,y1 (0,1) = 1
  id: totrans-1141
  prefs: []
  type: TYPE_NORMAL
- en: x0,y2 (0,2) = 2
  id: totrans-1142
  prefs: []
  type: TYPE_NORMAL
- en: x0,y3 (0,3) = 3
  id: totrans-1143
  prefs: []
  type: TYPE_NORMAL
- en: '...'
  id: totrans-1144
  prefs: []
  type: TYPE_NORMAL
- en: '```'
  id: totrans-1145
  prefs: []
  type: TYPE_NORMAL
- en: Even though this package was created before .NET 6 existed, and the compiler
    and runtime have no way of knowing if it will work and therefore show warnings,
    because it happens to only call .NET Standard-compatible APIs, it works.
  id: totrans-1146
  prefs: []
  type: TYPE_NORMAL
- en: Working with preview features
  id: totrans-1147
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: It is a challenge for Microsoft to deliver some new features that have cross-cutting
    effects across many parts of .NET like the runtime, language compilers, and API
    libraries. It is the classic chicken and egg problem. What do you do first?
  id: totrans-1148
  prefs: []
  type: TYPE_NORMAL
- en: From a practical perspective, it means that although Microsoft might have completed
    the majority of the work needed for a feature, the whole thing might not be ready
    until very late in their now annual cycle of .NET releases, too late for proper
    testing in "the wild."
  id: totrans-1149
  prefs: []
  type: TYPE_NORMAL
- en: So, from .NET 6 onward, Microsoft will include preview features in **general
    availability** (**GA** ) releases. Developers can opt into these preview features
    and provide Microsoft with feedback. In a later GA release, they can be enabled
    for everyone.
  id: totrans-1150
  prefs: []
  type: TYPE_NORMAL
- en: '**Good Practice** : Preview features are not supported in production code.
    Preview features are likely to have breaking changes before the final release.
    Enable preview features at your own risk.'
  id: totrans-1151
  prefs: []
  type: TYPE_NORMAL
- en: Requiring preview features
  id: totrans-1152
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `[RequiresPreviewFeatures]` attribute is used to indicate assemblies, types,
    or members that use and therefore require warnings about preview features. A code
    analyzer then scans for this assembly and generates warnings if needed. If your
    code does not use any preview features, you will not see any warnings. If you
    use any preview features, then your code should warn consumers of your code that
    you use preview features.
  id: totrans-1153
  prefs: []
  type: TYPE_NORMAL
- en: Enabling preview features
  id: totrans-1154
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let''s look at an example of a preview feature available in .NET 6, the ability
    to define an interface with a static abstract method:'
  id: totrans-1155
  prefs: []
  type: TYPE_NORMAL
- en: Use your preferred code editor to add a new console app named `UsingPreviewFeatures`
    to the `Chapter07` solution/workspace.
  id: totrans-1156
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In Visual Studio Code, select `UsingPreviewFeatures` as the active OmniSharp
    project. When you see the pop-up warning message saying that required assets are
    missing, click **Yes** to add them.
  id: totrans-1157
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the project file, add an element to enable preview features and an element
    to enable preview language features, as shown highlighted in the following markup:'
  id: totrans-1158
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '```cs'
  id: totrans-1159
  prefs: []
  type: TYPE_NORMAL
- en: <Project Sdk="Microsoft.NET.Sdk"
  id: totrans-1160
  prefs: []
  type: TYPE_NORMAL
- en: '>'
  id: totrans-1161
  prefs: []
  type: TYPE_NORMAL
- en: <PropertyGroup>
  id: totrans-1162
  prefs: []
  type: TYPE_NORMAL
- en: <OutputType>Exe</OutputType>
  id: totrans-1163
  prefs: []
  type: TYPE_NORMAL
- en: <TargetFramework>net6.0
  id: totrans-1164
  prefs: []
  type: TYPE_NORMAL
- en: </TargetFramework>
  id: totrans-1165
  prefs: []
  type: TYPE_NORMAL
- en: <Nullable>enable</Nullable>
  id: totrans-1166
  prefs: []
  type: TYPE_NORMAL
- en: <ImplicitUsings>enable</ImplicitUsings>
  id: totrans-1167
  prefs: []
  type: TYPE_NORMAL
- en: '**<EnablePreviewFeatures>**'
  id: totrans-1168
  prefs: []
  type: TYPE_NORMAL
- en: '**true**'
  id: totrans-1169
  prefs: []
  type: TYPE_NORMAL
- en: '**</EnablePreviewFeatures>**'
  id: totrans-1170
  prefs: []
  type: TYPE_NORMAL
- en: '**<LangVersion>preview</LangVersion>**'
  id: totrans-1171
  prefs: []
  type: TYPE_NORMAL
- en: </PropertyGroup>
  id: totrans-1172
  prefs: []
  type: TYPE_NORMAL
- en: </Project>
  id: totrans-1173
  prefs: []
  type: TYPE_NORMAL
- en: '```'
  id: totrans-1174
  prefs: []
  type: TYPE_NORMAL
- en: In `Program.cs` , delete the comment and statically import the `Console` class.
  id: totrans-1175
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add statements to define an interface with a static abstract method, a class
    that implements it, and then call the method in the top-level program, as shown
    in the following code:'
  id: totrans-1176
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '```cs'
  id: totrans-1177
  prefs: []
  type: TYPE_NORMAL
- en: using
  id: totrans-1178
  prefs: []
  type: TYPE_NORMAL
- en: static
  id: totrans-1179
  prefs: []
  type: TYPE_NORMAL
- en: System.Console;
  id: totrans-1180
  prefs: []
  type: TYPE_NORMAL
- en: Doer.DoSomething();
  id: totrans-1181
  prefs: []
  type: TYPE_NORMAL
- en: public
  id: totrans-1182
  prefs: []
  type: TYPE_NORMAL
- en: interface
  id: totrans-1183
  prefs: []
  type: TYPE_NORMAL
- en: IWithStaticAbstract
  id: totrans-1184
  prefs: []
  type: TYPE_NORMAL
- en: '{'
  id: totrans-1185
  prefs: []
  type: TYPE_NORMAL
- en: static
  id: totrans-1186
  prefs: []
  type: TYPE_NORMAL
- en: abstract
  id: totrans-1187
  prefs: []
  type: TYPE_NORMAL
- en: void
  id: totrans-1188
  prefs: []
  type: TYPE_NORMAL
- en: DoSomething
  id: totrans-1189
  prefs: []
  type: TYPE_NORMAL
- en: ()
  id: totrans-1190
  prefs: []
  type: TYPE_NORMAL
- en: ;
  id: totrans-1191
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  id: totrans-1192
  prefs: []
  type: TYPE_NORMAL
- en: public
  id: totrans-1193
  prefs: []
  type: TYPE_NORMAL
- en: class
  id: totrans-1194
  prefs: []
  type: TYPE_NORMAL
- en: Doer
  id: totrans-1195
  prefs: []
  type: TYPE_NORMAL
- en: ': IWithStaticAbstract'
  id: totrans-1196
  prefs: []
  type: TYPE_NORMAL
- en: '{'
  id: totrans-1197
  prefs: []
  type: TYPE_NORMAL
- en: public
  id: totrans-1198
  prefs: []
  type: TYPE_NORMAL
- en: static
  id: totrans-1199
  prefs: []
  type: TYPE_NORMAL
- en: void
  id: totrans-1200
  prefs: []
  type: TYPE_NORMAL
- en: DoSomething
  id: totrans-1201
  prefs: []
  type: TYPE_NORMAL
- en: ()
  id: totrans-1202
  prefs: []
  type: TYPE_NORMAL
- en: '{'
  id: totrans-1203
  prefs: []
  type: TYPE_NORMAL
- en: WriteLine("I am an implementation of a static abstract method."
  id: totrans-1204
  prefs: []
  type: TYPE_NORMAL
- en: );
  id: totrans-1205
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  id: totrans-1206
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  id: totrans-1207
  prefs: []
  type: TYPE_NORMAL
- en: '```'
  id: totrans-1208
  prefs: []
  type: TYPE_NORMAL
- en: Run the console app and note that it outputs correctly.
  id: totrans-1209
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Generic mathematics
  id: totrans-1210
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Why has Microsoft added the ability to define static abstract methods? What
    are they useful for?
  id: totrans-1211
  prefs: []
  type: TYPE_NORMAL
- en: For a long time, developers have asked Microsoft for the ability to use operators
    like * on generic types. This would enable a developer to define mathematical
    methods to perform operations like adding, averaging, and so on to any generic
    type rather than having to create dozens of overloaded methods for all the numeric
    types they want to support. Support for static abstract methods in interfaces
    is a foundational feature that would enable generic mathematics.
  id: totrans-1212
  prefs: []
  type: TYPE_NORMAL
- en: 'If you are interested, you can read more about this at the following link:'
  id: totrans-1213
  prefs: []
  type: TYPE_NORMAL
- en: '[https://devblogs.microsoft.com/dotnet/preview-features-in-net-6-generic-math/](https://devblogs.microsoft.com/dotnet/preview-features-in-net-6-generic-math/)'
  id: totrans-1214
  prefs: []
  type: TYPE_NORMAL
- en: Practicing and exploring
  id: totrans-1215
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Test your knowledge and understanding by answering some questions, getting some
    hands-on practice, and exploring with deeper research into topics of this chapter.
  id: totrans-1216
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 7.1 – Test your knowledge
  id: totrans-1217
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Answer the following questions:'
  id: totrans-1218
  prefs: []
  type: TYPE_NORMAL
- en: What is the difference between a namespace and an assembly?
  id: totrans-1219
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How do you reference another project in a `.csproj` file?
  id: totrans-1220
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What is the benefit of a tool like ILSpy?
  id: totrans-1221
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Which .NET type does the C# `float` alias represent?
  id: totrans-1222
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When porting an application from .NET Framework to .NET 6, what tool should
    you run before porting, and what tool could you run to perform much of the porting
    work?
  id: totrans-1223
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What is the difference between framework-dependent and self-contained deployments
    of .NET applications?
  id: totrans-1224
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What is a RID?
  id: totrans-1225
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What is the difference between the `dotnet pack` and `dotnet publish` commands?
  id: totrans-1226
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What types of applications written for the .NET Framework can be ported to modern
    .NET?
  id: totrans-1227
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Can you use packages written for .NET Framework with modern .NET?
  id: totrans-1228
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Exercise 7.2 – Explore topics
  id: totrans-1229
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Use the links on the following page to learn more detail about the topics covered
    in this chapter:'
  id: totrans-1230
  prefs: []
  type: TYPE_NORMAL
- en: '[https://github.com/markjprice/cs10dotnet6/blob/main/book-links.md#chapter-7---understanding-and-packaging-net-types](https://github.com/markjprice/cs10dotnet6/blob/main/book-links.md#chapter-7---understanding-and-packaging-net-types)'
  id: totrans-1231
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 7.3 – Explore PowerShell
  id: totrans-1232
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: PowerShell is Microsoft's scripting language for automating tasks on every operating
    system. Microsoft recommends Visual Studio Code with the PowerShell extension
    for writing PowerShell scripts.
  id: totrans-1233
  prefs: []
  type: TYPE_NORMAL
- en: 'Since PowerShell is its own extensive language there is not space in this book
    to cover it. Instead, I have created some supplementary pages on the books GitHub
    repository to introduce you to some key concepts and show some examples:'
  id: totrans-1234
  prefs: []
  type: TYPE_NORMAL
- en: '[https://github.com/markjprice/cs10dotnet6/tree/main/docs/powershell](https://github.com/markjprice/cs10dotnet6/tree/main/docs/powershell)'
  id: totrans-1235
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  id: totrans-1236
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we reviewed the journey to .NET 6, we explored the relationship
    between assemblies and namespaces, we saw options for publishing an app for distribution
    to multiple operating systems, packaged and distributed a class library, and we
    discussed options for porting existing .NET Framework code bases.
  id: totrans-1237
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, you will learn about some common Base Class Library types
    that are included with modern .NET.
  id: totrans-1238
  prefs: []
  type: TYPE_NORMAL
