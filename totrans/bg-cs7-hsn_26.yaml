- en: Saving an Image to SQL Server
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you will learn how to read files and then save them in SQL
    Server as images.
  prefs: []
  type: TYPE_NORMAL
- en: Adding buttons and a list box to HTML
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Bring up a project which contains the basic HTML. The first thing that you need
    to do here is to insert a button. To do this, go to Toolbox and drag and drop
    a `Button` control below the line beginning with `<form id=...` . Remember, the
    simple interface that we will build in this project will involve clicking on a
    button and reading files into a list box from your hard drive. Change the text
    on the `Button` control to say `Scan Folder`. You will scan a folder for images
    in this project.
  prefs: []
  type: TYPE_NORMAL
- en: After that, you'll insert a `ListBox` control. So again, go to Toolbox, type
    in `list` in the search field, and drag and drop the `ListBox` control below the
    previous line. You will fill the `ListBox` control after you click on the button.
  prefs: []
  type: TYPE_NORMAL
- en: In the last stage, you will save all of the files to SQL Server. This is our
    objective. For this, drag in one more button below the preceding line. Change
    the text on the `Button` control to say `Save To SQL Server`.
  prefs: []
  type: TYPE_NORMAL
- en: Delete the two lines that begin with `<div...` , and also delete the `Label`
    line again this time. You don't need any of these.
  prefs: []
  type: TYPE_NORMAL
- en: 'Your `Default.aspx` file should look like the one shown in *Figure 26.5.1*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/19fb404e-c3c3-46dd-93f9-0ea521f747a6.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 26.5.1: The complete HTML for this chapter'
  prefs: []
  type: TYPE_NORMAL
- en: 'Go to the Design view, and as shown in *Figure 26.5.2*, you have a very simple
    interface for this project: a Scan Folder button, which gets the filenames, and
    then a button to save the files to SQL Server:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/3c57d4ca-e5f8-4eb2-b5e4-c9d7d9c92dbf.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 26.5.2: The simple interface for our project'
  prefs: []
  type: TYPE_NORMAL
- en: Creating a database table to store the files
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'You need to have a database table where the files can be saved. Start by opening
    SQL Server Object Explorer. You''ll recall that you''ve got a database called
    `People`. Go to the Tables folder, right-click on it, and select `Add New Table...`
    , as shown in *Figure 26.5.3*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/20ed43bc-9ec1-4272-a26d-a53c96e614ff.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 26.5.3: Adding a new table in SQL Server Object Explorer'
  prefs: []
  type: TYPE_NORMAL
- en: 'You can keep the default stuff at the top pretty much as it is, but make the
    following changes:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Change the first line in the T-SQL tab at the bottom, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Add this line next:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Change the name of the table to `Images`, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'This is our table, as shown in *Figure 26.5.4*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/a4bd53c6-b71d-459e-bc40-95a5e689dc70.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 26.5.4: The dbo.Images table in SQL Server'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s update this, then, click on the Update Database button in the dialog
    box that appears. Wait for the changes to take effect. So, if you expand the Tables
    node, you should see a dbo.Images table with an IMAGE column, as shown in *Figure
    26.5.5*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/8daf226f-b87d-4292-89c0-c6515d1fffc8.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 26.5.5: The Tables node contains the dbo.Images table with an IMAGE
    column'
  prefs: []
  type: TYPE_NORMAL
- en: Storing image files on your hard drive
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In the next stage of the process, you have to make sure that you have images
    to read. So, place a few images somewhere on your `C:\` drive. For example, *Figure
    26.5.6* shows the listing obtained when the `dir *.jpeg` command is run against
    the `C:\data` directory on this particular computer:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/d4d88d1a-8cb6-4272-af6a-439d107ef247.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 26.5.6: Listing of three images files stored in the C:\data directory'
  prefs: []
  type: TYPE_NORMAL
- en: 'The list shows these images: `face1.jpeg`, `face2.jpeg`, and `face3.jpeg`.
    So, there are three files to be read from the hard drive in this particular case.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Now double-click on the Scan Folder button in the Design view. This takes you
    into `Default.aspx.cs`. Delete the `Page_Load` stub. We will handle the event
    that comes along with this. There''s a fair amount of code involved, so it is
    more of a project. The relevant portion of the starting code for this project
    should look like *Figure 26.5.7*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/83e548ec-ad55-487c-91ea-a27fbc8ee5d4.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 26.5.7: The starting code for this project'
  prefs: []
  type: TYPE_NORMAL
- en: Adding namespaces
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'First of all, you need to add namespaces that are relevant. So, under `using
    System` near the top of the file, enter the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Remember, we use this in connections and commands.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, type the following underneath this line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Again, this line is there to be able to read the hard drive. So, these are the
    two new namespaces. You can now collapse everything above the line that begins
    with `public partial class...` .
  prefs: []
  type: TYPE_NORMAL
- en: Coding the application
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now let''s go through the creation of the code line by line. So, starting with
    the line that begins with `protected void Button1_Click...` , enter the following
    between a set of curly braces:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Here, you have a `Directory` class and a file reading method called `GetFiles`,
    which returns an array of strings that are the paths of the files. Then you specify
    the path of the directory where they search, so `(@"c:\data\"...)`, and then you
    want to search for image files only, so you can specify a filter, or `*.jpg` in
    this case. If you hover your mouse over `var`, you can see that it's an array
    of strings.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now you can load into the `ListBox` control. Enter the following next:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, for each file inside the array of files, enter the following between
    a set of curly braces:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: So, you get all the file paths, and then, using the `foreach` loop, you add
    them to the `ListBox` control so that they can be displayed in the page. This
    is our objective.
  prefs: []
  type: TYPE_NORMAL
- en: Testing the scanning the folder function
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Go to the Design view, and at this point, scanning the folder should work. For
    this, click on the Scan Folder button.
  prefs: []
  type: TYPE_NORMAL
- en: 'As you can see in *Figure 26.5.8*, the files are loaded:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/08905b84-61f9-416d-b1ca-9e352741ef76.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 26.5.8: The files are properly loaded in ListBox'
  prefs: []
  type: TYPE_NORMAL
- en: Now that this is complete, you can take each file, again using a `foreach` loop,
    and save it to SQL Server. Let's do that next.
  prefs: []
  type: TYPE_NORMAL
- en: Building the connection string
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now double-click on the Save to SQL Server button in the Design view. This
    takes you back into `Default.aspx.cs`. As you might imagine, the next stage will
    be to get the connection string. You''ve done this before. So, within a set of
    curly braces below the line that begins with `protected void Button2_Click...`
    , start by entering `string connString =`, followed by the `@` symbol to make
    it a verbatim string, and then you put the `""` symbols. Now to get the connection
    string, do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Click on View in the menu bar, and select SQL Server Object Explorer.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Right-click on the People database, and select Properties.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the Properties pane, double-click on Connection String to select it with
    its long description.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Then, right-click on the long description and copy it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Paste the description between the set of the `""` symbols.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The connection string line should then look like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: You can break this over multiple lines so that it's a little neater, if you
    like. You can now close the SQL Server Object Explorer and Properties panes.
  prefs: []
  type: TYPE_NORMAL
- en: Using of the connection string
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now we will make use of connection string, of course. So, for the next stage,
    enter the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: We'll call connection string `conn`, and `SqlConnection` is initialized with
    the connection string.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, we need to open a connection. Enter the following between a set of curly
    braces beneath the preceding line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, enter the following `foreach` loop:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Here, `Items` is a property of the `ListBox` control. It''s a list of the items
    that it contains, and you can examine them individually so that you can take discrete
    actions on them. Enter the following within another set of curly braces next:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Notice that we're putting `SqlCommand` in a `using` statement. If you right-click
    on `SqlCommand` and select Go To Definition, you'll see that it says, DbCommand
    inherits from it, and if you scroll down to the bottom, you'll see that it has
    a `Dispose` line. To finish the code here, you have `(image)` as the field, and
    its parameter is `@image`.
  prefs: []
  type: TYPE_NORMAL
- en: 'For the next stage, enter the following within another set of curly braces:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: If you left the preceding line at just `(item)`, it gives an error underlined
    in red. So we convert it to `ToString`. Here, we take each item, read it as a
    sequence of bytes, and store it inside an array, because then, that can be converted
    into an image in SQL Server.
  prefs: []
  type: TYPE_NORMAL
- en: 'Enter the following next:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'Again, `@image` here is the parameter. So, we will save the picture to the
    `image` parameter as a sequence of bytes. Now enter the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: This line performs the actual saving. This, believe it or not, is the entire
    application.
  prefs: []
  type: TYPE_NORMAL
- en: Running the program
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now let's take a look at the results in your browser. First, click on Scan Folder.
    You can see the list of images. Then, click on the Save To SQL Server button.
    Nothing shows on the page because we haven't written any code to show anything
    after it has been saved. So now we have to examine SQL Server.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s go to View | SQL Server Object Explorer. Right-click on the dbo.Images
    table icon and select View Data. As you can see in *Figure 26.5.9*, these are
    the images stored in a low-level form. This confirms that they''ve been saved:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/0c9bbf71-5a66-4ba7-8b80-c1bcb085bf34.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 26.5.9: Images in the dbo.Images table stored in a low-level form'
  prefs: []
  type: TYPE_NORMAL
- en: Perhaps, as an assignment for yourself, you can extract the files back from
    SQL Server and display them as images. This would be an interesting exercise.
  prefs: []
  type: TYPE_NORMAL
- en: Chapter review
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: For review, `Default.aspx` is the source code for the Scan Folder button, `ListBox`,
    and the button to Save To SQL Server. The code within the `Button1_Click...` block
    actually scans the folder and then displays the available image files; that is,
    the ones that at least ended in `.jpg`. Then, the code starting with the connection
    string runs when you want to save the files to SQL Server from the `ListBox` control.
  prefs: []
  type: TYPE_NORMAL
- en: 'The complete version of the `Default.aspx.cs` file for this chapter, including
    comments, is shown in the following code block:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you learned how to read files and then save them in SQL Server
    as images. You created a database table to store the files, stored image files
    on your hard drive, added namespaces, tested the scanning folder function, and
    built and made use of the connection string.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will take a look at the basics of XML, which stands
    for Extensible Markup Language.
  prefs: []
  type: TYPE_NORMAL
