- en: Chapter 9. Data Collection Tools and Reporting
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As painful as it may seem, every step of the penetration test must be properly
    documented. This enables not only accurate and repeatable results, but also the
    ability for someone to double-check the work and ensures nothing was missed during
    testing. As penetration testing is becoming more common, testing teams are becoming
    more segmented and specialized. There may be one person on a team that is specialized
    in application penetration testing and another that is a post-exploitation genius.
    One thing that does not change from role to role is the need for proper documentation
    and reporting.
  prefs: []
  type: TYPE_NORMAL
- en: Luckily, there are tools available to the community that reduce the overall
    pain of documenting every single step, command, and result of a penetration test.
    With proper usage of these tools, documentation will become second nature.
  prefs: []
  type: TYPE_NORMAL
- en: 'This chapter introduces the usage of tools and techniques that can make documenting
    the testing progress less painful and report writing easier:'
  prefs: []
  type: TYPE_NORMAL
- en: Simple text editors
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Revisiting Dradis — time to collaborate
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A report overview
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Before we get started with the fun stuff we need to review the basics. These
    methods are tried and true and seldom go wrong. Efficiency aside, these methods
    just work.
  prefs: []
  type: TYPE_NORMAL
- en: Record now — Sort later
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Nearly everything discussed in this book has been possible via the BackTrack
    command line. Now wouldn't it be nice to just have every single input and output
    recorded for you? Obviously, this will not be the pinnacle of penetration testing
    record keeping, but having such a log could end up saving you trouble in the long
    run.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: The Linux script command will log most of the commands used during testing.
  prefs: []
  type: TYPE_NORMAL
- en: Old school — The text editor method
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Just as with website creation fanatics, there is a group of individuals who
    use only pure text editors as a both data repository and report generation tool.
    Do not let the apparent lack of features of such a tool fool you though. At DerbyCon
    this year, I had the pleasure of speaking to one individual who mentioned he had
    every single step of data collection automated with vi. By using automation and
    scripting, the output from various tools could be processed, converted, and collected
    into the vi text file. Using macros and scripts he was then able to produce full
    reports. The initial setup for this may have been complex, but the simple elegance
    of the final product is remarkable.
  prefs: []
  type: TYPE_NORMAL
- en: Popular Linux text editors include **vim** which takes a bit of practice and
    Nano which provides a convenient method of editing and collecting simple file
    data.
  prefs: []
  type: TYPE_NORMAL
- en: Nano
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Nano has been used throughout this book for various text editing needs. It is
    quick and simple to learn which makes it perfect for taking quick notes or rapidly
    editing documents.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Do not be fooled by the apparent simplicity of Nano (Nano's another text editor).
    Nano performs power user functionality such as test justification, syntax highlighting,
    powerful text searching, and more.
  prefs: []
  type: TYPE_NORMAL
- en: To launch Nano from BackTrack type `nano` followed by the name of the file that
    will need to be edited or created. Nano will create the file in your current working
    directory.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '![Nano](img/7744OS_09_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Nano is very customizable through command-line options or by editing the configuration
    file at `/etc/nanorc`. Some of the options available to be set by using `nanorc`
    include the following, and more:'
  prefs: []
  type: TYPE_NORMAL
- en: Case sensitive searching
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Text file conversion options — do you want to convert Dos or Mac text files?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Should the editor wrap your text?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Auto indent options
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If you decide to take advantage of Nano during your testing process, be sure
    to take a look at the settings and find a configuration that works best for your
    workflow and preference.
  prefs: []
  type: TYPE_NORMAL
- en: 'More information about Nano can be found online at: [http://tuxradar.com/content/text-editing-nano-made-easy](http://tuxradar.com/content/text-editing-nano-made-easy).'
  prefs: []
  type: TYPE_NORMAL
- en: VIM — The power user's text editor of choice
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: VIM is an improved version of vi that is available as charityware.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If you find that you want to use VIM, you are encouraged to make a donation
    to the ICCF. This information is displayed when starting the editor through the
    `vim` command.
  prefs: []
  type: TYPE_NORMAL
- en: '![VIM — The power user''s text editor of choice](img/7744OS_09_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: There are a few basic commands that anyone using VIM should be familiar with.
    To assist those that are completely new to VIM, the tool provides a tutorial that
    can be reached via typing `vimtutor` at the command line.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '![VIM — The power user''s text editor of choice](img/7744OS_09_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Some benefits of using VIM to collect data during testing include:'
  prefs: []
  type: TYPE_NORMAL
- en: Preinstalled on many Linux distributions.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Very small resource footprint this can be beneficial when running intensive
    processes on the system.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Compare multiple files by using the `diff` function. Perfect for those times
    when you had performed a test three months ago and want to quickly look for the
    differences. Also useful for ensuring that website code has not been modified
    from test to test. For instance, to compare `test1.txt` to `test2.txt:`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '![VIM — The power user''s text editor of choice](img/7744OS_09_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Binary files can be reviewed and even edited by using the Binary mode.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Can open files in read-only mode to avoid accidental file changes.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Basic on the fly file encryption by using the `-X` switch. If using a recent
    version of VIM (7.3+) the encryption can be set to use Blowfish as the encryption
    type. To encrypt a file named `test.txt` start a file using:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: You will be prompted to enter an encryption key. This key will be needed to
    decrypt the file in the future.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Enter some test into the file:'
  prefs: []
  type: TYPE_NORMAL
- en: '![VIM — The power user''s text editor of choice](img/7744OS_09_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'When saved and reopened without the proper encryption key the information in
    the file is undecipherable:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '![VIM — The power user''s text editor of choice](img/7744OS_09_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Encrypting the data collected during testing is both beneficial and encouraged;
    however, it is important to note that the type of symmetric encryption used by
    VIM is not ideal for sharing files. A separate solution focused on asymmetrical
    encryption methods may be more appropriate in such cases.
  prefs: []
  type: TYPE_NORMAL
- en: NoteCase
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'If you are more comfortable using a graphical editor to collect and manage
    your testing information there are many options available. One of these tools
    that can be used to collect project or testing data when using BackTrack is NoteCase.
    It can be installed in your BackTrack guest machine via `apt-get install notecase`.
    Here is a sample of how NoteCase could be used to collect information about a
    site you are testing:'
  prefs: []
  type: TYPE_NORMAL
- en: '![NoteCase](img/7744OS_09_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Notecase allows the file to be saved in an encrypted format by choosing **File**
    | **Save As** and selecting the appropriate drop-down selection:'
  prefs: []
  type: TYPE_NORMAL
- en: '![NoteCase](img/7744OS_09_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Dradis framework for collaboration
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When it comes to collaboration and sharing of data during a penetration test
    it is hard to beat the benefits and options available in Dradis. This is one of
    the two primary data collection tools we had discussed in [Chapter 1](ch01.html
    "Chapter 1. Planning and Scoping for a Successful Penetration Test"), *Planning
    and Scoping for a Successful Penetration Test*, and is oftentimes the tool of
    choice for data collection. As always, there needs to be some data available to
    us prior to being able to start. For this example, we will assume that a small
    business has asked us to perform a penetration test on their web server, which
    is still in the development stage and not available on the Internet. According
    to the rules of engagement we are not allowed to access anything other than this
    one particular server which can be reached locally on the `192.168.75.0/24` subnet.
    We are given VPN access to the `192.168.75.0/24` network and are allowed up to
    two simultaneous connections. The timeframe for testing is limited and as such
    we intend to use two people to perform our test.
  prefs: []
  type: TYPE_NORMAL
- en: 'In order to follow along with this example you will need the following virtual
    environment up and running:'
  prefs: []
  type: TYPE_NORMAL
- en: Two BackTrack guest machines on the `192.168.75.0/24` subnet (VLAN1).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: pfSense configured to assign addresses via DHCP for the `192.168.75.0/24` subnet
    (VLAN1).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Kioptrix Level 1 set up to connect to VLAN1.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This setup should allow you to effectively follow along with the remainder of
    this chapter. Reporting is an area of great flexibility, and as such it will require
    some time to find the "right" template and format that you would like to use for
    your tests.
  prefs: []
  type: TYPE_NORMAL
- en: Binding to an available interface other than 127.0.0.1
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: There is a slight modification that will need to be made to start Dradis while
    binding to a different port.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Change line 15 to match the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Save the file and invoke the `start.sh` command with the `-h` feature to display
    the available options:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: '![Binding to an available interface other than 127.0.0.1](img/7744OS_09_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'At this point we can bind to `192.168.75.11` on port 3004 (use the IP address
    of the BackTrack machine **you** are using to host the Dradis server) by typing:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Test your configuration by starting up a browser and typing `https://192.168.75.11:3004`
    on the localhost and on the other BackTrack machine. Note that in the following
    screenshot we are able to determine that the Dradis server on `192.168.75.11`
    is reachable by both machines.
  prefs: []
  type: TYPE_NORMAL
- en: '![Binding to an available interface other than 127.0.0.1](img/7744OS_09_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Changes made by either system will be updated to be seen by both users. When
    a change is made the other logged-in users are notified:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Binding to an available interface other than 127.0.0.1](img/7744OS_09_11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'When this note appears simply click on the **Refresh the tree** icon at the
    top of the node column next to add branch:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Binding to an available interface other than 127.0.0.1](img/7744OS_09_12.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Effectively using tools such as Dradis will enable your team to be more efficient
    and thorough when performing testing.
  prefs: []
  type: TYPE_NORMAL
- en: The report
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'At the end of the penetration test all of the data will need to be turned into
    information that allows the business and network owners to take action. Although
    the goals of a penetration test may vary, the need to document the entire process
    and put the results into an easily digestible format remains the same. Some items
    that should be included in an executive report include the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Cover page
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Your company logo
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Title and description of the test performed
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Confidentiality reminder
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Date and time of testing
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The cover page should be both professional and eye catching. If you happen
    to have any graphics available for your logo, this is an ideal place to display
    them. Take a look at this sample to get the basic idea of a typical reporting
    cover sheet:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The report](img/7744OS_09_13.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The next page should provide an index of the material included within the report.
    Adding an index allows the reader to quickly jump to the location of interest.
    This is especially important when the person is attending a meeting or needs a
    quick refresher of what the report covers:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The report](img/7744OS_09_14.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The next page should be the **Executive Summary**, which can be used to quickly
    review the findings. An Executive Summary may vary based on the target audience.
    In our example, we assume that we do not know who the report is being presented
    to and thus try to cover all bases — the technical and non-technical managers.
  prefs: []
  type: TYPE_NORMAL
- en: This portion of the report should provide someone who was not part of the initial
    testing process with enough information to understand what the test was, and what
    the goal of the testing was. It should also provide a quick overview of what the
    findings are and if anything in particular was discovered that requires immediate
    attention.
  prefs: []
  type: TYPE_NORMAL
- en: 'Take a look at following example:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The report](img/7744OS_09_15.jpg)'
  prefs: []
  type: TYPE_IMG
- en: As discussed, we managed to capture several major areas within a single page.
    The information should be brief and to the point and technical jargon should be
    avoided whenever possible as the report may eventually be provided to non-technical
    members of the management team.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Someone has to pay to fix all of the holes you found, but they are unlikely
    to do so if they don't understand your report.
  prefs: []
  type: TYPE_NORMAL
- en: The primary sections that should be covered in less than one page include the
    title and a brief description, the scope or introduction, and the timeline that
    the testing occurred in. Many people do not understand that a person performing
    a penetration test is limited by resources just like any other part of a team.
    If it takes two days to crack a password but you only had one to perform testing
    it does not necessarily mean that the passwords are secure, just that you did
    not have sufficient time to properly perform your testing.
  prefs: []
  type: TYPE_NORMAL
- en: The findings section in the executive summary is very important. Most of the
    management team will probably never read about all of the steps that had to be
    taken to find these holes, they just want to know what they are and what the priorities
    are for each type so that they can begin issuing remediation strategies and plans.
  prefs: []
  type: TYPE_NORMAL
- en: 'Take a look at the next page in our report:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The report](img/7744OS_09_16.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Not only did we clearly define and summarize the findings, but we also provided
    a nice chart to assist in the visualization of the findings. By breaking down
    the vulnerabilities for the client, you make their life easier and may avoid having
    to make another visit in the future just to go over your findings again.
  prefs: []
  type: TYPE_NORMAL
- en: 'It is important to provide a clearly defined network diagram from your perspective.
    This allows the client to understand that all appropriate systems were tested,
    and in some cases exposes issues that the client was not even aware of, such as
    systems on the network that do not necessarily belong. Ideally, you would have
    one listing of all services available on the network. In the sample below we only
    listed the port and the description because we know that only one system was involved.
    Another method would be to list all services such as this:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Port** | **Description** | **Systems** |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| 80 | HTTP | 192.168.75.1, 192.168.75.2, 192.168.75.15 |'
  prefs: []
  type: TYPE_TB
- en: 'A listing such as this can become actionable if there are services on systems
    that should not be there. For example: A development server is still running a
    web server that was supposedly shut down years ago.'
  prefs: []
  type: TYPE_NORMAL
- en: Take a look at the following example page which includes a basic network diagram
    and a listing of fictional ports that are open on `192.168.75.15`.
  prefs: []
  type: TYPE_NORMAL
- en: '![The report](img/7744OS_09_17.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Finally, the time has come to provide some detailed reporting. This is your
    chance to list the findings in detail and also provide information about how these
    issues were discovered. There is typically no limit to the amount of data that
    can be placed in the detailed report portion. Be sure to provide at least enough
    information so that an administrator could attempt to emulate specific portions
    of the testing to ensure any mitigating controls that have been put in place are
    actually working.
  prefs: []
  type: TYPE_NORMAL
- en: At some point in the document the methodology used should be addressed, be it
    a subset of a standard methodology or even something that you have come up with
    on your own — it is important to understand what you did. This is where having
    your notes available comes in very handy.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is a small example of what this section could look like:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The report](img/7744OS_09_18.jpg)'
  prefs: []
  type: TYPE_IMG
- en: If you look closely you will note that there is a section for remediation. All
    of the information that is needed to remediate the issues is already in the report,
    but sometimes it is good to make a listing of vulnerable systems that are associated
    with particular vulnerabilities. This makes it quick and simple for a business
    to address the vulnerabilities in a logical fashion. For instance, the administrators
    could be tasked with updating all versions of SAMBA on the network and with the
    remediation section in your report they can go directly to work on the list.
  prefs: []
  type: TYPE_NORMAL
- en: Any additional information that is not directly related to providing actionable
    data should be added to an appendix. This includes any large data dumps such as
    directory listings, URLs, installed software and versions, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: Challenge to the reader
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Use the lab setup that was provided earlier to perform a fully documented test
    against the Kioptrix Level 1 Machine!
  prefs: []
  type: TYPE_NORMAL
- en: After you have completed your report take a step back and picture yourself as
    a business owner who receives this report as your output. Does your work allow
    for remediation of any issues that were found? Did you provide enough cross-reference
    material so that the document can stand on its own after the initial consultation
    has been completed?
  prefs: []
  type: TYPE_NORMAL
- en: Take a look at [Chapter 1](ch01.html "Chapter 1. Planning and Scoping for a
    Successful Penetration Test"), *Planning and Scoping for a Successful Penetration
    Test*, again and see if you can set up an HTML template that enables you to easily
    import your detail data into your final report. Once something like this has been
    automated it has the potential to save a significant amount of time!
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we looked at several means of securely collecting data while
    performing our testing such as VIM, Nano, and NoteCase. We also built upon our
    existing knowledge of Dradis to configure it to be used by several testers at
    the same time.
  prefs: []
  type: TYPE_NORMAL
- en: We reviewed several key items that should be part of any penetration testing
    report. Sometimes the only visibility your company receives will be based on this
    report. The better the report, the more likely it is that you will be called in
    again the next time a penetration test is required.
  prefs: []
  type: TYPE_NORMAL
- en: We closed by issuing a small challenge to the reader to complete and document
    an assessment on the configuration reviewed within this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will have the chance to put all of this information
    to work when we proceed with building out a test lab that emulates a secured fictional
    corporation.
  prefs: []
  type: TYPE_NORMAL
