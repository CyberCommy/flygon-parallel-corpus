- en: Chapter 7. Building User Interfaces
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you will learn how to add new and unique elements to and modify
    your current Ionic project from a practical point of view. Among other things,
    I will show you how to modify the tab icons and add a new tab controller. This
    chapter will guide you and give you the necessary knowledge that is required to
    have a deep understanding of how to create and modify your own mobile applications.
  prefs: []
  type: TYPE_NORMAL
- en: Most importantly, you will also get acquainted with the AngularJS JavaScript
    framework, which lies at the heart of the functionality of Ionic.
  prefs: []
  type: TYPE_NORMAL
- en: The entire source code of this modified project is available on the GitHub repository,
    which can be viewed by visiting [https://github.com/stefanbuttigieg/nodejs-ionic-mongodb](https://github.com/stefanbuttigieg/nodejs-ionic-mongodb).
  prefs: []
  type: TYPE_NORMAL
- en: The structure of an Ionic project
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the process of creating a project in the previous chapters, we created a
    directory entitled `myfirstionicapp`, which can be found in the root folder. We
    recommend that you open this project folder with an **Integrated Development Environment**
    (**IDE**) or a text editor. In our case, we are comfortable using Atom, which
    is an advanced open source text editor.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You can download Atom from [https://atom.io/](https://atom.io/).
  prefs: []
  type: TYPE_NORMAL
- en: 'Once you open your IDE and add the project folder to your workspace, you will
    see the following folder structure:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The structure of an Ionic project](img/B04653_07_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Let''s take a closer look at each of the folders shown in the preceding screenshot
    in turn:'
  prefs: []
  type: TYPE_NORMAL
- en: '`hooks`: This folder is where our project will store automatically (or manually)
    generated hooks for the underlying Cordova system, which provides most of of our
    project''s runtime.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`platforms`: This folder contains the necessary files and configurations that
    are required to deploy a project on a specific platform, such as Android or iOS.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`plugins`: This stores the various Cordova plugins for our project. If you
    examine it closely, you will observe that it already contains a number of default
    plugins such as `com.ionic.keyboard`, which makes it easier to work with each
    platform''s native keyboard functionality.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`resources`: This contains global and platform-specific resources, such as
    app logos, splash screens, and so on.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`scss`: This contains the core **Sass** (**Syntactically Awesome Style Sheets**)
    files for our projects. By modifying these, we can extensively alter the appearance
    of our app on the various platforms that it targets.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`www`: This is the folder that you will find yourself working with more than
    any other folder.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'If you have previously worked with web apps, its contents will be familiar
    to you:'
  prefs: []
  type: TYPE_NORMAL
- en: '`css`: This contains the CSS files for your app.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`img`: This contains the static images for your app.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`js`: This contains the JavaScript files for your app. This is also where most
    of your custom application logic will reside.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`lib`: This contains third-party libraries and applications that can be used
    in your project. Among other things, this folder contains AngularJS itself, along
    with its associated dependencies.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`templates`: This contains the AngularJS template files, which are HTML files
    that may contain AngularJS-specific content, such as data bindings and directives
    (don''t worry, we will explain what these are in a bit).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: As mentioned earlier, your own work will predominantly be confined to the `www`
    folder. This makes sense, since the projects that we create with Ionic are actually
    a special breed of web apps that are customized to run on mobile devices.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we are familiar with the structure of our project, let's dip our toes
    into AngularJS, the framework that makes it all work. It only gets better.
  prefs: []
  type: TYPE_NORMAL
- en: Introducing AngularJS
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Ionic is powered by the AngularJS framework (which is also commonly just called
    Angular), which drives the UI interactions, gestures, animations, and well, essentially
    the entire functionality of your app. Understanding it is crucial to the experience
    of working with Ionic.
  prefs: []
  type: TYPE_NORMAL
- en: Angular was initially developed by Google in 2009 in an effort to enhance HTML
    with dynamic data binding at the tag level (the name **Angular** refers to the
    **angular brackets** around the HTML tags). Its architectural philosophy is firmly
    grounded in the **Model-View-Controller** (**MVC**) pattern and centered around
    an augmented HTML syntax for building UIs and a feature-rich, modular core framework
    to create business logic.
  prefs: []
  type: TYPE_NORMAL
- en: Due to its extensive nature, writing a concise introduction to Angular is not
    easy. As we work our way through the coming chapters, we will gradually go deeper
    and increase our knowledge of the framework. Here, we will settle for an outline
    of the most important aspects of AngularJS so that you can understand how these
    aspects work in the context of Ionic.
  prefs: []
  type: TYPE_NORMAL
- en: The structure of an Angular app
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As we work our way through this chapter and the ones that follow, you will very
    quickly realize that what you are building with Ionic are actually augmented Angular
    apps that are designed for mobile devices. Since this is the case, it is crucial
    that you understand how Angular apps are structured.
  prefs: []
  type: TYPE_NORMAL
- en: Modules
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The most fundamental module of an Angular app is, well, the module. A **module**
    is a collection of **services**, **controllers**, and **directives**, which provide
    some specific functionality to your app. In fact, your Angular app is itself a
    module!
  prefs: []
  type: TYPE_NORMAL
- en: 'Defining a module is rather simple:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: This creates a `module` named `starter`. The second argument is meant to contain
    a list of dependencies (more on this will be discussed later). This argument is
    left empty if the module does not depend on any other modules.
  prefs: []
  type: TYPE_NORMAL
- en: Modules within modules within modules
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Modules can load other modules, incorporating their functionality into their
    own. This makes it very easy for developers to write and share utility modules,
    which can be used by other developers in their own apps (at the time of writing
    this book, there are literally tens of thousands of such modules hosted on GitHub,
    with many under active development).
  prefs: []
  type: TYPE_NORMAL
- en: 'Remember those empty brackets in the example that we saw just a bit earlier?
    This is where you list all the modules the current module should load for its
    own use. For example, in our Ionic apps, the `ionic` module is a fundamental component
    that we always want with us:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Now, whenever this module is loaded, Angular will automatically load its dependencies
    with it.
  prefs: []
  type: TYPE_NORMAL
- en: Services, controllers, and other beasts
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: As mentioned before, the Angular modules contain other components, which provide
    various kinds of functionality to the app. Detailing them here would just clutter
    things, so we will introduce them as we go along (if not here, then in the later
    chapters, where they are needed). For now, it is sufficient that you just know
    that they exist and they together make up the functionality of an Angular module.
  prefs: []
  type: TYPE_NORMAL
- en: The Angular MVC pattern
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Now that we have a better understanding of how an Angular app is structured,
    it is time to look at how it actually works during runtime.
  prefs: []
  type: TYPE_NORMAL
- en: 'The functionality of an Angular app revolves around the following three core
    concepts:'
  prefs: []
  type: TYPE_NORMAL
- en: The **view** is what the user sees and the medium through which the user primarily
    interacts with and reads output from your application.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The **controller** responds to the user interaction with the application and
    communicates with the model in order to produce appropriate data. It then updates
    the view to reflect that data.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The **model** is a collection of data, libraries, services, and other things
    that make up your application's business logic. The model is responsible for the
    heavy processing in your app, and it is usually where most of your code will reside.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: These three concepts make up the MVC pattern—model-view-controller. This is
    a very popular design pattern for modern web apps.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we know how an Angular app functions, let's see how it realizes each
    of these three concepts.
  prefs: []
  type: TYPE_NORMAL
- en: The view
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'In an Angular app, the view is composed predominantly of standard HTML, which
    is augmented by Angular-specific components in order to facilitate dynamic updates.
    The following are the two primary components:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Directives**: These are the custom HTML tags, whose function and behavior
    are defined from within AngularJS but written like plain HTML. For example, a
    tag like the following can be a directive that draws a map centered on a specific
    latitude and longitude:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '**Expressions**: These are the expressions that are surrounded by double curly
    braces, which evaluate to a given value during the runtime of the application.
    Unless specified otherwise, the output of an expression will be updated as soon
    as the model of the application changes. The following is an example of such an
    expression:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: The preceding expression does something that is very common in Angular—resolve
    the value of some object's member. However, to do so, we first need to define
    where that object can be found. This is where controllers come into the picture.
  prefs: []
  type: TYPE_NORMAL
- en: The controller
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'In an Angular app, the **controller** is realized by special module components,
    which are fittingly called controllers. You can define them in a module in the
    following way:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: The first parameter is the name of the `controller`. The second parameter is
    a `function` that defines what the controller actually does. This `function` can
    take a variable number of arguments, which represent the dependencies that the
    controller will use, much like the way we defined dependencies for modules earlier.
  prefs: []
  type: TYPE_NORMAL
- en: The model
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Broadly speaking, the **model** is *everything else* in your app. It is the
    sum total of the data models. Throughout the following chapters, we will gradually
    explore the various components that you can use to compose your model.
  prefs: []
  type: TYPE_NORMAL
- en: Putting it all together
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Let's finish our brief tour of Angular by showing how to connect the various
    components that we have seen so far.
  prefs: []
  type: TYPE_NORMAL
- en: 'Consider a situation where you first navigate to the `index.html`, which is
    available at the following path `myfirstionicapp/www/index.html`:'
  prefs: []
  type: TYPE_NORMAL
- en: 'When you navigate here, you will observe the following block of code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: This block of code determines the header bar of the application, and this is
    one of the examples of the **User Interface** (**UI**) components, which can be
    managed through HTML5.
  prefs: []
  type: TYPE_NORMAL
- en: For documentation and reference purposes, you can refer to the Ionic UI components
    at [http://ionicframework.com/docs/components](http://ionicframework.com/docs/components).
  prefs: []
  type: TYPE_NORMAL
- en: 'As you further explore your project, you will see that the main controllers
    that will power the interactive functionality of your project are available at
    the following path:'
  prefs: []
  type: TYPE_NORMAL
- en: '**myfirstionicapp** | **js** | **controllers.js**'
  prefs: []
  type: TYPE_NORMAL
- en: Modifying an Ionic project
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In order to build upon the knowledge that we have gained and the work that we
    have previously done, we will modify the user interface of the project that we
    previously created. We will start off by modifying the header.
  prefs: []
  type: TYPE_NORMAL
- en: Modifying the header
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Let's say that we would like to change the header bar to a calm blue color.
    Navigate to the `index.html` file available at **www** | **index.html**.
  prefs: []
  type: TYPE_NORMAL
- en: 'Refer to the `body` block, and using the reference UI components, change the
    `ion-nav-bar` class to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Modifying the tab colour, icons, and names
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Since we have decided to change the header color, we will go ahead and modify
    the tab bar to make its color match the header color. We should first navigate
    to the `tabs.html`, file which is available at **www** | **templates** | **tabs.html**,
    and change the `ion-tabs` class to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'The `icons` need to be further modified to contrast with the new `blue` color.
    So, we will further modify the `ion-tabs` class to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: We will take a step further and attempt to change the icon's graphic. Let's
    say that we would like to change the dashboard icon to something that looks more
    circular.
  prefs: []
  type: TYPE_NORMAL
- en: First of all, we need to refer to the Ionicons documentation, which is available
    at [http://ionicons.com/cheatsheet.html](http://ionicons.com/cheatsheet.html),
    and find out the class name in relation to the circular analytics icon. For this
    example, we will use `ion-ios-analytics`. When we want the user to tap on the
    icon and activate the dashboard, we want the icon to be highlighted, whereas when
    it's not active, we need the user to see an outline of the icon. In order to achieve
    this, we will need to declare the icons that will be used in both an active and
    inactive state.
  prefs: []
  type: TYPE_NORMAL
- en: 'In order to do this, we will navigate to the `tabs.html` file and modify the
    `Dashboard` tab icon in the following way:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Modifying our pages
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this particular example, we will edit the dashboard page, where we will modify
    the content of the **list card** UI components.
  prefs: []
  type: TYPE_NORMAL
- en: The modification of the dashboard is possible by navigating to the `tab-dash.html`
    file, where we will see the different cards declared in the `div` class of the
    `list card`.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `list card` is declared as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'By using the Ionic framework, it''s possible to include a footer to your card.
    In our case, we will add a footer to the `Health` list card, declaring that the
    user has walked `10,000` steps today. In order to do this, we will add an `item-divider`
    class, thus modifying the `list card` as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'All the modifications that you made until now will result in a **Dashboard**
    tab, which will look like the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Modifying our pages](img/B04653_07_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Adding a new tab
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this project, we would like to add a new tab that highlights the developers
    of this application. This will inform the potential users of this app about how
    to get in touch with the developers to provide them with the necessary feedback
    to improve the app experience.
  prefs: []
  type: TYPE_NORMAL
- en: 'In order to achieve this, we''ll need to perform the following four main steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a new controller entry in `controllers.js`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a new tab controller called `tab-about` in HTML.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add a new tab entry in the `tabs.html` file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Consolidate our work in the `app.js` file and connect everything together.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Creating a new controller
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let''s start with adding a controller for the new tab. Head over to `controllers.js`
    and add the following into it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Don't worry about the empty function for now. At the moment, our tab does not
    need any functionality apart from simply appearing.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a view
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Now that we have a controller, we need to implement the view for the new tab.
    The first order of business is to make sure that the tab is added to the list
    of tabs. To do so, modify `tabs.html` to include the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'This creates the fundamental bindings for the new tab and adds it to the list
    of tabs. However, we will still need to add the content that should open when
    the user clicks on the tab. To do so, create a new file called `tab-about.html`
    in the `templates` folder and put the following code in it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Adding a state for the new tab
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Next, we need to add a new navigation state to the `controller` in order to
    allow the user to navigate, with the help of clicks, to the `tab-about.html` tabs
    content page. To do so, open the `app.js` file and add the following state:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Note that the following is what the preceding code does:'
  prefs: []
  type: TYPE_NORMAL
- en: The `url` property determines whether the application enters into the state
    of accessing the `/about` URL.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Inside the `views` property we determine the path to the `view`, which should
    be loaded when this application enters into the `view` state. In this case, it
    is the `tab-about.html` file that we created earlier.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Finally, inside `views`, we also determine which `controller` is responsible
    for handling this application state. In our case, it is the `AboutCtrl` controller,
    which was defined by us earlier.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Testing the newly created tab
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Quick testing is possible through your local browser. Once you save your project
    files with your IDE, you will be able to see your app in the prototype form through
    your browser:'
  prefs: []
  type: TYPE_NORMAL
- en: 'First navigate to the project folder:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, type in the follow command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'The results for this are shown in the following screenshot. These results are
    adapted for both iOS and Android. In addition to this, you''ll be able to test
    your application through a point-and-click interface. This experience is similar
    to having an iOS or Android emulator working through a browser:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Testing the newly created tab](img/B04653_07_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Going further
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The importance of setting out your layout and user experience before you start
    off with any project is crucial. This will enhance your user experience, and it
    will be even more helpful not only while laying out the necessary project structure,
    but also throughout the programming process.
  prefs: []
  type: TYPE_NORMAL
- en: You can further customize the look and feel of your application by using Sass.
    Sass is marketed as being the most mature, stable and powerful professional **grade
    CSS extension language**, and it allows you to further customize your project.
  prefs: []
  type: TYPE_NORMAL
- en: In order to improve your knowledge of AngularJS, we recommend that you check
    out a free video resource, which is available at [http://campus.codeschool.com/courses/shaping-up-with-angular-js](http://campus.codeschool.com/courses/shaping-up-with-angular-js),
    [http://campus.codeschool.com/courses/shaping-up-with-angular-js](http://campus.codeschool.com/courses/shaping-up-with-angular-js).
  prefs: []
  type: TYPE_NORMAL
- en: The aforementioned course is sponsored by Google and is available for free for
    anyone who would like to dive deeper into AngularJS. Experimenting with different
    Ionic user components has become easier than ever, especially with the recent
    **Playground** tools that are available in **Ionic Playground**, which is available
    at [http://play.ionic.io](http://play.ionic.io).
  prefs: []
  type: TYPE_NORMAL
- en: 'From the Android point of view, in order to take your project to the next level,
    there is a free library available, which can be used to integrate the latest iteration
    of Google''s interactive Material design by installing the Ionic Material library.
    This can easily be installed by first ensuring that you have bower installed and
    then navigating to your project folder and inputting the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: We are hopeful that with this chapter, you will start experimenting with your
    very own projects while staying in line with providing remarkable user experience
    with the current knowledge that you've gained until now. In the next chapter,
    we'll take a step further.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we took the template project that we created in the past few
    chapters and modified it to something closer to what we envisioned by modifying
    the appearance of the user interface. In addition to this, we also started experimenting
    with the Ionic project code to better understand what the project is made up of.
  prefs: []
  type: TYPE_NORMAL
- en: Furthermore, we provided you with the basic knowledge to start prototyping your
    Ionic application within the browser.
  prefs: []
  type: TYPE_NORMAL
