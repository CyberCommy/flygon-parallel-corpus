- en: Performing Information Gathering
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The skill of gathering information about your target is an essential skill that
    any penetration tester should have.
  prefs: []
  type: TYPE_NORMAL
- en: There is a big difference between passive and active information gathering.
    Passive information gathering leverages publicly available information. Active
    information gathering involves direct interaction with the target system. Active
    information gathering crosses the line when it comes to laws in specific countries,
    as some countries deem it illegal to perform any type of penetration test without
    permission—this is where your "get out of jail free card" (as discussed in [Chapter
    1](b37fecb9-6e3e-4ce0-8937-eb376e474bf9.xhtml), *Introduction to Penetration Testing*)
    comes in. It's important to have the right authorizations before you perform any
    active information gathering.
  prefs: []
  type: TYPE_NORMAL
- en: The information you gather about your target will be used to plan your attack.
    In this phase, you will look for anything that can expose information about your
    target. For example, are their public facing servers exposing known vulnerable
    ports? Are there any documents or information (such as social media posts) that
    contain sensitive information that's available on the internet? As you build your
    repository of information, you can begin threat modeling and search for vulnerabilities
    that can be used in your attack plan.
  prefs: []
  type: TYPE_NORMAL
- en: 'As you progress through this chapter, you will learn about the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Passive information gathering
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Active information gathering
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Vulnerability scanning
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Known vulnerable services
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Capturing traffic
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The following technical requirements apply to this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Kali Linux 2019.1
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Metasploitable 2 and 3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Passive information gathering
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Passive information gathering is commonly referred to as **Open Source Intelligence**
    (**OSINT**). When you're performing passive information gathering, the main aim
    is to collect as much information about the target as possible without alerting
    the target. In the passive information gathering phase, you will leverage publicly
    published information using a number of tools and third-party databases. You will
    be surprised at how much information you can gain from publicly accessible resources.
  prefs: []
  type: TYPE_NORMAL
- en: 'Common passive information gathering techniques are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Investigating DNS records to find mail server details, subdomains, and more
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using crafted searches on search engines to discover any information, such as
    files
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Discovering internet connected devices
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using tools to obtain information, such as email addresses
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The OSINT framework aims to collect information from freely available resources.
    A good online resource that I encourage you to look at is as follows: [https://osintframework.com](https://osintframework.com).
  prefs: []
  type: TYPE_NORMAL
- en: Let's do some information gathering by using something that is rife with information—the
    internet.
  prefs: []
  type: TYPE_NORMAL
- en: Using the internet
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When gathering information, one of your main tools will be the internet. The
    internet is rife with information. Social media, blogs, messaging services, among
    others, are all common mediums that people use on a daily basis. Employees might
    post information about their organization that might seem meaningless to them,
    but to an attacker, it can be a gold mine.
  prefs: []
  type: TYPE_NORMAL
- en: Google dorks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A Google dork (also referred to as Google hacking) really is a specially crafted
    search string that returns information that isn't readily available on the website
    that's being targeted. It does this by leveraging advanced search operators.
  prefs: []
  type: TYPE_NORMAL
- en: Using Google dorks is an excellent way to perform information gathering on your
    target. You are able to return data such as usernames and passwords, sensitive
    information, login portals, and more.
  prefs: []
  type: TYPE_NORMAL
- en: 'Search operators within Google can be used to query specific information. Examples
    of such search operators are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**site**:Provides an output of URLs that are specific to the website you define.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**inurl**: With this query, you can define a certain string, and the results
    will return websites that have that string in them.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**filetype**: Here, you can define specific filetypes that you are looking
    for. For example, you can specify PDF, XLS, DOC, or any other file extension you
    want.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Search operators can be used together to perform crafty searches. An example
    of this is when looking for files with the `.doc` extension on `microsoft.com`.
    Here, you would accomplish this using the search query `filetype:doc site:microsoft.com` within
    `Google.com`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Exploit-DB houses the Google Hacking Database, which is shown in the following
    screenshot (*Figure 1*). Here, you will find a vast collection of Google dorks
    that are constantly being updated:'
  prefs: []
  type: TYPE_NORMAL
- en: The exact location for the Google Hacking Database on Exploit-DB is as follows: [https://www.exploit-db.com/google-hacking-database](https://www.exploit-db.com/google-hacking-database).
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/233383f2-7bc3-4a8f-8051-3014d0b86760.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 1: Google Hacking Database listed on exploit-db.com'
  prefs: []
  type: TYPE_NORMAL
- en: 'You will notice that there are multiple categories where you can find various
    Google dorks. Let''s perform information gathering using one of the dorks:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'The results from Google show how many websites have passwords exposed in clear
    text, as shown in *Figure 2*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/cf30a4cf-7dae-4d1b-97f7-9bc67008ff01.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 2: Passwords exposed using a Google Dork'
  prefs: []
  type: TYPE_NORMAL
- en: As you gather information on your target, you can leverage crafted search queries
    within Google to discover what information is available.
  prefs: []
  type: TYPE_NORMAL
- en: Shodan
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Shodan is not your average search engine. It''s often referred to as the search
    engine for hackers. On its website, Shodan is referred to as the *world''s first
    search engine for interconnected devices*. Shodan is accessible via [https://www.shodan.io](https://www.shodan.io)
    as shown in *Figure 3*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/fc411077-1c5e-4439-b139-7da0c7c2692e.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 3: The landing page for https://www.shodan.io'
  prefs: []
  type: TYPE_NORMAL
- en: What is so unique about Shodan? Search engines such as Google and Bing index
    websites, but Shodan indexes everything, such as webcams, databases servers, medical
    devices, routers, and so on. Anything that is connected to the internet is indexed
    by Shodan.
  prefs: []
  type: TYPE_NORMAL
- en: As defined by the founder of Shodan, John Matherly, in his book, *Complete Guide
    to Shodan*, the algorithm of Shodan is simple.
  prefs: []
  type: TYPE_NORMAL
- en: 1\. Create a random IPv4 address
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Look at the list of ports that Shodan understands and pick a random port
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Using the IPv4 address generated in step 1 and the port generated in step
    2, perform a connection and grab the banner
  prefs: []
  type: TYPE_NORMAL
- en: 4\. Repeat step 1
  prefs: []
  type: TYPE_NORMAL
- en: This algorithm does not merely crawl websites—it finds everything and indexes
    it. Let's take a look at some of the queries that can be run with Shodan.
  prefs: []
  type: TYPE_NORMAL
- en: Shodan scripting
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As we learned in [Chapter 2](6c1d74a7-e51b-4141-9f6c-6e34bf0a926c.xhtml), *Getting
    Started with Kali Linux*, within Kali Linux, you are able to use scripts. Let's
    take a look at a script that can work with Shodan.
  prefs: []
  type: TYPE_NORMAL
- en: The first thing you should do is register for an account with Shodan. This can
    be done by navigating directly to [https://account.shodan.io/register](https://account.shodan.io/register).
    Once you have created an account, navigate to My Account and obtain your **API
    key.** Keep you API key as you will use it in the script.
  prefs: []
  type: TYPE_NORMAL
- en: 'From your Kali Linux machine, you need to perform a few tasks before you can
    begin writing the script:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Ensure that you are running the latest updates and upgrades and have `python
    2.7` installed. Running the following command will ensure that you meet this requirement:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'We will leverage the `pip` command to install the required `shodan` files.
    This is done using the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Once you have all the requirements installed, you can create a script that performs
    whatever search you want to perform. Note that for all the queries leveraging
    Shodan, you will need to leverage your **API** **key**. You can replace the text
    `"insert your API key here"` with your actual **API key**. We will create a script
    that will allow us to perform information gathering on our target. By using the
    sample script the follows, we can leverage Shodan to obtain results using the `api.search`
    query.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will create a new Python script using the `nano shodan-iis.py` command and
    the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: To save a file in nano, you can use *Ctrl* + *O* and exit using *Ctrl* + *X. *Once
    the file has been saved, we can run it using the `python shodan-iis.py` command.
  prefs: []
  type: TYPE_NORMAL
- en: 'Note that my search is not specific to any country—I am merely searching for
    IIS servers:'
  prefs: []
  type: TYPE_NORMAL
- en: If you purchase a subscription to Shodan, you are able to use a lot more search
    operators within your API query. The free version limits you to basic searches
    and only 2 pages of results.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/fd1a71bb-1438-4bef-a0bc-5af725e42267.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 4: Output of the shodan-iis script'
  prefs: []
  type: TYPE_NORMAL
- en: In the preceding output (*Figure 4*), we have a number of results. Now, we can
    filter the results so that we have the IP addresses only. Using these IP addresses,
    we can then leverage a simple Nmap script to perform a scan of the IP addresses.
  prefs: []
  type: TYPE_NORMAL
- en: 'Modify the script so that only the IP addresses are displayed. To do this,
    we need to remove `IP`from the line `print(''IP: {}''.format(result[''ip_str'']))`and
    remove the lines `print(result[''data''])` and `print('''')`. The new code should
    look like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Note that we now have just the IP addresses*. *Using this, we can pipe the
    output to a text file using the `python shodan-iis.py >> shodan-iis.txt` command
    as shown in *Figure 5*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/e30392e2-ceed-494a-8b9d-fd5e6bbd5bbd.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 5: Output of shodan-iis script filtering only IP addresses.'
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have the IP addresses, we can build a simple bash script to run
    an Nmap scan against them.
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a simple bash script by entering the `nano shodan-nmap-iis.sh` command.
    Inside nano, enter the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Save the script as you did for the Python script, and change the permissions
    to enable it to run using the `chmod +x shodan-nmap-iis.sh`command. Then, run
    the script using the `./shodan-nmap-iis.sh` command.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the preceding code, we started with the crunchbang (`#!`) and defined the
    shell we will run the script in. Then, we defined the source file. While the script
    reads each line, it then performs a Nmap TCP syn scan (`-sS`), and a service and
    version detection on the ports (`-sV`). The results are as shown in *Figure 6*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/fc47875a-4dfd-4e14-99e1-989d20ab09c0.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 6: Results of the bash script'
  prefs: []
  type: TYPE_NORMAL
- en: Shodan truly is a search engine for hackers. There is a wealth of information
    that can be obtained on any type of internet-connected device.
  prefs: []
  type: TYPE_NORMAL
- en: Using Kali Linux
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Kali Linux has a number of built-in tools that you can use for both passive
    and active information gathering. Here, we will take a look at some of the tools
    that can be used for passive information gathering.
  prefs: []
  type: TYPE_NORMAL
- en: Maltego
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Maltego is a great tool that uses OSINT. Maltego is able to visualize how information
    on your target is connected. Maltego is available in both free and paid versions.
    In this book, we will leverage the free version. Maltego is also pre-installed
    within Kali Linux, so there is no need to install it. You will notice that even
    though we will use the free version, it's able to derive a wealth of information
    on your target.
  prefs: []
  type: TYPE_NORMAL
- en: Maltego uses publicly available information to visualize connections and information.
    There should be no legal implications when performing analysis on public targets,
    but please ensure that you check your local country-specific laws.
  prefs: []
  type: TYPE_NORMAL
- en: Let's get started and run Maltego. To get Maltego started, from the Kali Terminal,
    type in `maltego`. On the first launch of Maltego, you will need to select which
    version you will be using. The free edition is titled **Maltego CE. **Once you
    register your account and sign in, you will be presented with the start screen
    of Maltego.
  prefs: []
  type: TYPE_NORMAL
- en: 'Maltego uses **transforms**, which allow you to obtain richer results by plugging
    into various websites such as Shodan, VirusTotal and Threatminer. You will notice
    that the Transform Hub has a wealth of additions that you can plug into to beef
    up your results as shown in *Figure 7*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/17d393ef-87b1-4c78-9f47-1a624a663d8c.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 7: List of transforms within Maltego'
  prefs: []
  type: TYPE_NORMAL
- en: 'Within Maltego, we have the option to run a **machine**. Think of a machine
    as a script or macro that runs a set of predefined **transforms** with various
    filters configured. Using a machine allows you to kick off information gathering
    quickly. To run a machine, you need to click on Run a machine and select your
    desired machine*.* In our example, we will run the Footprint L3 machine, which
    performs an intense footprint on a defined domain as shown in *Figure 8*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/1b9c9357-a456-498e-a895-70738d4913ce.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 8: Running a machine within Maltego'
  prefs: []
  type: TYPE_NORMAL
- en: 'Once the scan has completed, you will be presented with a wealth of information.
    In this example, I performed an information-gathering scan on one of my personal
    domains. Maltego was able to pick up other domains hosted on my hosting companies''
    shared DNS, my domain''s website, shared public IP, MX records, and much more
    as shown in *Figure 9*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/3937570a-df57-4a07-9ba0-2427c435d173.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 9: Information gathered by Maltego'
  prefs: []
  type: TYPE_NORMAL
- en: You will notice that the graph is very large. For illustration purposes, I have
    zoomed into the data related to my domain. You can perform this test on your own
    personal domain and observe the results that Maltego presents.
  prefs: []
  type: TYPE_NORMAL
- en: Maltego is extremely useful for information gathering. When you make use of
    the additional transforms, it will allow you to obtain a lot of information about
    your target.
  prefs: []
  type: TYPE_NORMAL
- en: Active information gathering
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Active information gathering is when we start to interact with systems so that
    we can gather more information. During active information gathering, it is possible
    to trip alarms that will alert the target, so depending on the type of attack
    being planned, you need to exercise caution.
  prefs: []
  type: TYPE_NORMAL
- en: Some penetration tests intentionally trip alarms to test the effectiveness of
    alerts, logs, or even the response times of the countermeasures that are in place.
  prefs: []
  type: TYPE_NORMAL
- en: Nmap
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Network mapper** (**Nmap**) is a tool that allows you to perform network
    discovery and security auditing. It is only available in the command line, and
    has a graphical version called **Zenmap.** Nmap is able to work across multiple
    platforms, such as macOS, Windows, and Linux. Nmap is very robust in that it provides additional
    functionality by not only allowing you to detect open ports, but also allowing
    you to detect the operating system and services running on your target. Nmap is
    included in Kali Linux by default. Nmap can be used to perform the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Network discovery**: This allows you to detect any live hosts on the target
    network'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Port discovery**: This allows the detection of open ports'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Service discovery**: This provides the ability to detect software versions
    tied to a specific port'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Operating system discovery**: This provides information on the running operating
    system and version'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Vulnerability scanning**: This provides the ability to detect vulnerabilities
    using scripts'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Nmap has a number of scanning options that you can use. Some of the common
    scans are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`-sS`: This is a TCP SYN scan. This scan is one of the most commonly used scan
    types, as it offers stealth by not completing the TCP connection.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-sT`: This is a TCP connect scan. This scan performs a complete connection
    to the target port, which can lead to detection by the target.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-sU`: This performs a scan over the UDP protocol. Using this scan, you can
    uncover ports related to DHCP, DNS, SNMP, and so on.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-p`: This defines a specific port or port range. Ranges are separated by a
    dash, `-`. If you do not specify a port or range, the scan will scan all 65,535
    ports.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-sC`: This performs a scan using the default set of scripts.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-sV`: This performs version detection by referencing the port to the Nmap
    services database of well-known services. Once the reference is made, Nmap is
    able to display the service that is running on the port. Although this linking
    is very accurate, you might find a case where admins link different applications
    to common ports.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-O`: This performs operating system detection by sending a number of crafted
    packets (such as TCP sampling, window check sizes, and IP options) and comparing
    them to the `nmap-os-db`. Once there is a match, Nmap will display the operating
    system of the target.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`--script`: This defines scripts using a comma-separated list for different
    categories, names, and directories. For example, `--script "http-*"` will load
    every script which deals with http. `--script "default,safe"` will load scripts
    that are in the **default** and **safe** category.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: SANS currently has a good Nmap cheat sheet that you can use for reference. This
    is located here: [https://blogs.sans.org/pen-testing/files/2013/10/NmapCheatSheetv1.1.pdf](https://blogs.sans.org/pen-testing/files/2013/10/NmapCheatSheetv1.1.pdf).
  prefs: []
  type: TYPE_NORMAL
- en: Nmap was originally used for port scanning, but the tool has evolved beyond
    that and is now capable of performing vulnerability scans too. Leveraging the
    **Nmap Scripting Engine** (**NSE**) allows you to write your own scripts, and
    use scripts that are freely available. Within Kali Linux, there are a number of
    scripts that can be found at the `/usr/share/nmap/scripts` location. There are
    various categories for the scripts, such as information gathering, vulnerability
    scanning, brute force, and so on. To view a full list of scripts that are currently
    available within Kali Linux, you can run the `ls /usr/share/nmap/scripts` command
    from a Terminal window within Kali Linux. Alternatively, you can use the `locate`
    command, which you learned about in the previous chapter: `locate *.nse`.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you are unsure of what a script does, you can use the `nmap -script-help
    [script name]` command, as shown in *Figure 10*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/f28173e2-7418-4f84-84ca-af1d1663992c.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 10: Nmap script help'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s perform a few scans against the Metasploitable 2 virtual machine. Ensure
    that both your Kali Linux and Metasploitable 2 virtual machines are on the same
    virtual network:'
  prefs: []
  type: TYPE_NORMAL
- en: We will perform some network discovery using the `netdiscover` command from
    a Terminal window in Kali Linux. After some time, your Metasploitable 2 IP address
    will be displayed.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'We will run a basic TCP SYN scan against the Metasploitable 2 virtual machine
    using the `nmap -sS [ip address]`command. Once the scan has completed, we will
    be presented with a list of all open ports, as shown in *Figure 11*. In the output,
    we are presented with the current list of open ports. But let''s combine some
    more parameters to obtain richer results:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/a674921f-7341-41cb-9fb4-a5a667f37c93.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 11: Nmap TCP SYN scan'
  prefs: []
  type: TYPE_NORMAL
- en: Note that `nfs` port `2049`/TCP is open on Metasploitable 2\. Using the file
    browser, you can navigate to `nfs://[IP]` of your Metasploitable 2 virtual machine.
    You will have access to the filesystem without authentication. You can leverage
    this vulnerability and browse to `/etc/` and copy the `shadow` and `passwd` files
    to your Kali Linux. You will use these files in [Chapter 6](72d35b3e-36f2-487f-b143-d228b9e3c77f.xhtml),* Understanding
    Password Attacks.*
  prefs: []
  type: TYPE_NORMAL
- en: 'Using the `nmap -sS -sV -O -sU [ip address]` command, we are able to obtain
    results, which provide a lot more information. You will notice that we can now
    see the service version tied to the port numbers for both **TCP** and **UDP**,
    as well as the operating system''s information, as shown in *Figure 12*:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/ac81f01f-3085-4cdb-a475-2f69ce7fab8b.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 12: An Nmap scan combining various scan options'
  prefs: []
  type: TYPE_NORMAL
- en: 'Since this version of Metasploitable has an Apache server running, let''s leverage
    a script to provide us with even more information. Using the `nmap --script http-enum.nse
    [IP address]`command, we are able to detect information related to the open HTTP
    ports, as shown in *Figure 13*:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/09bf135e-7090-4d7e-bb9b-132bc1fbbfcc.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 13: Nmap displaying the open ports of a machine in the Terminal'
  prefs: []
  type: TYPE_NORMAL
- en: You can perform an Nmap scan using the switches in step 3 toward your Metasploitable
    3 system, but you will need to add in `-oX`, which exports the output to an `.xml`
    file. In [Chapter 5](8c5306b6-5c1e-4554-a839-5b2422286120.xhtml), *Diving into
    the Metasploit Framework*, you will use this.
  prefs: []
  type: TYPE_NORMAL
- en: By having a good understanding of Nmap, you can really benefit when performing
    a penetration test. Ensure that you have practiced various scans within your lab,
    so that you gain a good understanding of the outputs and how to use different
    scans in specific situations.
  prefs: []
  type: TYPE_NORMAL
- en: Vulnerability scanning
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Once you have gathered the necessary information, it's time to start performing
    some additional research around the vulnerabilities that exist. Vulnerability
    scans are done using software such as Nessus and OpenVAS, to name a couple. Typically,
    a vulnerability scanner will have signatures that tie into specific vulnerabilities.
    Once the scanner has been run and completed, you will be presented with a report
    that shows all the vulnerabilities related to a specific system. Vulnerability
    scanners are only able to detect the **known**vulnerabilities; anything that is **unknown**will
    not be detected by the vulnerability scanner. Vulnerability scanners are crucial
    to have within your penetration testing toolkit. They often expose vulnerabilities
    that you might have overlooked.
  prefs: []
  type: TYPE_NORMAL
- en: Let's take a look at a few vulnerability scanners that you can use in your penetration
    tests.
  prefs: []
  type: TYPE_NORMAL
- en: OpenVAS
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'OpenVAS is an open source vulnerability scanner that comes in both free and
    paid versions. The aim of OpenVAS is to be an all-in-one vulnerability scanner
    that leverages a variety of built-in tests. OpenVAS contains more than 50,000
    **network vulnerability tests** (**NVTS**) as of January 2019, and it is constantly
    growing. OpenVAS is not installed by default on Kali Linux, so you will need to
    install it. To install OpenVAS, you need to follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: From a Kali Linux Terminal window, download OpenVAS using the `apt-get install
    openvas` command. This will connect to the OpenVAS repository and download the
    required files.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Once the download completes, it''s time to install OpenVAS using the `openvas-setup` command.
    This will begin the installation process of OpenVAS and download the NVT feeds.
    Once the installation has completed, there will be a system-generated password
    presented at the end. Take note of this as you will need it to log in to OpenVAS
    and change the password to something you desire as shown in *Figure 14*:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/cb64bd9f-eeb1-4409-be75-e1be4dac7243.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 14: OpenVAS installation completed with login details presented on screen'
  prefs: []
  type: TYPE_NORMAL
- en: 'If you forgotten your OpenVAS username and password, you can change them using
    the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '`openvasmd –user=[username]–new-password=[password]`'
  prefs: []
  type: TYPE_NORMAL
- en: So, for example, you might use `openvasmd –user=admin –new-password=Sup3rS3cretPa55w0rd`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once the installation has completed and you have logged into the user interface
    of OpenVAS, you can perform a vulnerability scan by clicking on the Scans tab
    on the top navigation bar. To perform a new scan, you can use the **task ****wizard **or **create
    a new task** button. These buttons are depicted by the wand (**task wizard**)and star (**create
    new task**)**.**Let''s create a task so that we can perform a vulnerability scan
    on Metasploit 2\. Using the **create new task** function, we can define the name
    of the task and define the target, as shown in *Figure 15*:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/2acd274c-48d0-46d0-9ff1-a0eca7d8accd.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 15: New OpenVAS task creation'
  prefs: []
  type: TYPE_NORMAL
- en: Once the task has been created, you can run it using the green play icon in
    the Actions section of the task.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Once the task has completed, you will be presented with a dashboard showing
    you a high-level view of the results. Click on the Reports section, as shown in *Figure
    16*:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/cc60b569-55ad-4bb0-86eb-b4ec705953a1.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 16: High-level overview'
  prefs: []
  type: TYPE_NORMAL
- en: 'Once you are in the Reports overview, to view the full report of the scan,
    you will need to click on the scan Date, as shown in *Figure 17*:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/1f6aff22-abe7-4f05-b281-367a3b8d613c.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 17: Report overview'
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, you will have a full list of all the vulnerabilities that were discovered
    by OpenVAS, as shown in *Figure 18*:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/9015db48-8acc-4047-940b-1a19de45909e.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 18: A report of found vulnerabilities'
  prefs: []
  type: TYPE_NORMAL
- en: Once you have the report, you are able to expand the vulnerability to see the
    full details of it. OpenVAS provides you with the solution type (such as a vendor
    fix or workaround) and **quality of detection** (**QoD**).
  prefs: []
  type: TYPE_NORMAL
- en: I encourage you to perform a vulnerability scan of your own network or host
    using OpenVAS so that you can become more familiar with this vulnerability scanner.
  prefs: []
  type: TYPE_NORMAL
- en: Nessus
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Nessus is one of the most popular vulnerability scanners on the market. Like
    other vulnerability scanners, Nessus contains a database of known vulnerabilities
    across different platforms and protocols. Nessus is available in both the paid
    version (commonly used by penetration testers and in-house security departments
    to perform vulnerability scans) and the free version, which is called Nessus Home.
    In this book, we will use Nessus Home, which is limited to scanning only a few
    IP addresses. Since Nessus is not installed by default in Kali Linux, we will
    need to install it.
  prefs: []
  type: TYPE_NORMAL
- en: 'Follow these steps to do so:'
  prefs: []
  type: TYPE_NORMAL
- en: Navigate to [https://www.tenable.com/products/nessus-home](https://www.tenable.com/products/nessus-home)
    and register for an activation code for Nessus Home. Once you complete the registration,
    you will have the option to download Nessus. The direct link for the Nessus download
    page is [https://www.tenable.com/downloads/nessus#download](https://www.tenable.com/downloads/nessus#download).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Download the version titled Debian 6, 7, 8, 9/Kali Linux 1, 2017.3 AMD64, or Debian
    6, 7, 8, 9/Kali Linux 1, 2017.3 i386 (32-bit), depending on your Kali Linux architecture.
    Although the software version displayed a previous version of Kali Linux, it will
    work in the current version that's used throughout this book, which is version
    2019.1.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Once you have downloaded the correct version, you can install it within Kali
    Linux by navigating to your download directory and using the `dpkg -I`command.
    The installation should be relatively quick. Once completed, you will be presented
    with the summary, as shown in *Figure 19*:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/7cb7ab1c-cf99-4367-ab3d-00551891f26d.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 19: Nessus installation'
  prefs: []
  type: TYPE_NORMAL
- en: Start the Nessus scanner by running the `/etc/init.d/nessusd start` or `service
    nessusd start` commands and navigate to the graphical interface, which is located
    at `https://kali:8834`using Firefox ESR, which is built in to Kali Linux.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The URL for the graphical interface might differ in your environment. Please
    take note of the summary once the installation completes.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once Nessus has been started and you navigate to the administrator URL, you
    will be presented with some options to create a new user account. After the account
    has been created, Nessus will perform some post-installation tasks, such as installing
    plugins. Once all of the tasks are completed, you will be able to log in to the
    admin portal, as shown in *Figure 20*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/418cb2e6-4411-4f58-9d01-90767bf6e1f7.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 20: The Nessus admin portal'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s perform a vulnerability scan on a Metasploitable 2 virtual machine (which
    you learned about in [Chapter 1](b37fecb9-6e3e-4ce0-8937-eb376e474bf9.xhtml),
    *Introduction to Penetration Testing*). To get your Metasploitable 2 virtual machine
    up and running, open `metasploitable.vmx` with your hypervisor (in my case, I
    am using VMware Fusion). Once Metasploitable 2 loads, log in using the default
    username and password of `msfadmin` and issue the `ifconfig` command to display
    the IP address of the virtual machine, as shown in *Figure 21*. Make sure that
    Kali Linux is on the same virtual network as Metasploitable:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/0482cc27-e1f4-4ef3-acd3-3708b4c4283f.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 21: Metasploitable 2 IP address'
  prefs: []
  type: TYPE_NORMAL
- en: From the Nessus admin portal, select New Scan. You will be presented with a
    number of scan templates. A scan template is a set of predefined tasks that you
    can quickly leverage for a specific type of scan. Some templates are only available
    in the paid license version of Nessus. For our demo, we will use the Basic Network
    Scan template. Once we've selected this template, we will be presented with a
    number of options.
  prefs: []
  type: TYPE_NORMAL
- en: 'Under the Settings tab, in the General section, we will provide inputs for
    the Name, Description, and Targets fields, as shown in *Figure 22*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/e481c390-1a2b-403f-ad45-9371d529ac9a.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 22: Nessus scan general configuration'
  prefs: []
  type: TYPE_NORMAL
- en: 'The next section we will configure is under the Discovery section, and the
    Scan Type that we will select is Port Scan (common ports). After that, we will
    select Assessment and choose the Scan for all web vulnerabilities (complex) option.
    Lastly, we will click on Save. Once you have saved the scan, you will be directed
    back to the main admin page, where you can now select your saved scan and then
    click on the** L**aunch button. Your scan will now begin running and after a while,
    you will be presented with the output, as shown in *Figure 23*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/48bb12bf-6e9e-47b8-8ad7-ad3391f7155e.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 23: Nessus scan results'
  prefs: []
  type: TYPE_NORMAL
- en: 'As we can see, Nessus found a number of vulnerabilities in Metasploitable 2\.
    Nessus places these findings in order of criticality. Nessus is able to provide
    detailed information about the findings. For example, by looking at one of the
    critical findings, we can see that Nessus provides information on exploitability.
    It even goes one step further and covers what the vulnerability is exploitable
    with, as shown in *Figure 24*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/cb607157-26a4-45ff-96be-0dc04de08edf.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 24: Nessus vulnerability information'
  prefs: []
  type: TYPE_NORMAL
- en: You can perform a Nessus scan on both Metasploitable 2 and 3 virtual machines.
    In [Chapter 5](8c5306b6-5c1e-4554-a839-5b2422286120.xhtml), *Diving into the Metasploit
    Framework*, you will use the Nessus scan of the Metasploitable 3 virtual machine.
  prefs: []
  type: TYPE_NORMAL
- en: Nessus and OpenVAS are both excellent vulnerability scanners. It's important
    to note that as a penetration tester, knowing how to interpret the vulnerability
    assessment results is a key skill to have. Generally, verification of the results
    will need to be conducted manually to ensure that you have the full picture and
    can eliminate any false positives.
  prefs: []
  type: TYPE_NORMAL
- en: Capturing traffic
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Learning how to use packet-capturing tools is vital for any security professional.
    We will cover two packet capturing tools in this section: Wireshark (GUI-based)
    and `tcpdump` (CLI-based).'
  prefs: []
  type: TYPE_NORMAL
- en: Before we begin using these tools, let's take a step back to understand why
    there will be a need to capture traffic when performing a penetration test. Network
    traffic travels in packets, and each packet holds a number of fields that contain
    the information it needs to travel across the network and perform a certain function.
    Performing a packet capture (or packet sniffing) will allow you to view the structure
    of the packets, plus any data that is available. Some protocol traffic is unencrypted,
    such as FTP. This will allow you to see the username and password in clear text.
  prefs: []
  type: TYPE_NORMAL
- en: Packet sniffing is a type of wire tap that is applied to computer networks.
    You can liken this to phone tapping, where a conversation is spied on.
  prefs: []
  type: TYPE_NORMAL
- en: Wireshark
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Wireshark has been the prime choice for packet capturing for many users worldwide.
    It is a cross-platform tool that allows you to perform packet capturing and analysis.
  prefs: []
  type: TYPE_NORMAL
- en: 'Some of the main features of Wireshark are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Live packet capture with analysis (offline analysis or on the fly)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Deep packet inspection
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Decryption support for protocols such as SSL/TLS, IPSEC, SNMPv3, Kerberos, WPA/WPA2,
    and more
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Within Wireshark, you have the ability to apply a **capture filter** and a **display
    filter**. Understanding the differences between these two filters and how to apply
    them will help you capture the relevant packets and filter out the noise.
  prefs: []
  type: TYPE_NORMAL
- en: '**Capture filters** are used to reduce the size of the raw packet captures,
    while **display filters** are used to filter out what is captured and only display
    certain data. **Capture filters** are applied before the capture starts and cannot
    be changed during the capture. On the other hand, **display filters** can be applied
    at any time.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Some **capture filters** can be very basic and simple. Let''s go over a few
    examples:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Capturing traffic for a specific host is as follows:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Capturing traffic for a specific subnet is as follows:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Some **capture filters** can be complex, such as the one to detect the heart
    bleed exploit:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: '**Display filters** can also be basic. Let''s go over a few examples:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Displaying traffic for communication between a specific source and its destination
    is done as follows:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Looking for traffic on a specific port is done with the following command:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'In the following screenshot (*Figure 25*), I have marked the fields where you
    define a display and capture filter:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/1204bce0-d9c4-4dd6-a65b-9fd5dbf82eeb.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 25: The display and capture filters'
  prefs: []
  type: TYPE_NORMAL
- en: 'Wireshark has the ability to display credentials in clear text for unencrypted
    traffic. For example, while capturing Telnet traffic, we can use Follow | TCP
    Stream to follow the TCP stream as shown in *Figure 26*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/ce4a8480-d9f0-40ec-af94-63b0d7802aac.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 26: Using Follow | TCP Stream'
  prefs: []
  type: TYPE_NORMAL
- en: 'Note that by using the Follow | TCP Stream option, we are able to see the Username
    and Password in clear text, as shown in *Figure 27*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/0db19e2e-a20e-45e6-905c-5645aea5e464.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 27: FTP credentials in clear text'
  prefs: []
  type: TYPE_NORMAL
- en: The preceding captures were taken from [http://packetlife.net/captures](http://packetlife.net/captures).
    You can find more packet captures that you can download for free to test out the
    functionality of Wireshark at [http://packetlife.net/captures/Wireshark](http://packetlife.net/captures/Wireshark).
  prefs: []
  type: TYPE_NORMAL
- en: Having the graphical interface of Wireshark makes it easier to work with packet
    captures. However, if you don't have the ability to use Wireshark, then you will
    need to know how to leverage a command-line packet capture tool such as `tcpdump`.
  prefs: []
  type: TYPE_NORMAL
- en: tcpdump
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '`tcpdump` is the most widely used packet capture utility. It is available on
    Linux/Unix-based operating systems, which means it''s installed by default in
    Kali Linux. It has the abilities to save captures to a `.pcap` file and read `.pcap`
    files.'
  prefs: []
  type: TYPE_NORMAL
- en: '`tcpdump` has a number of switches that you can use. Some of its common switches
    are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`tcpdump -d`: Displays a list of interfaces'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`tcpdump -i [interface]`: Specifies an interface to perform the packet capture
    on'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`tcpdump -c`: Specifies the number of packets to capture'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`tcpdump -w /path`: Defines a file that `tcpdump` should write to'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`tcpdump -r /path`: Reads a capture file'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`tcpdump -XX`: Captures packets in ASCII or HEX'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following is a practical example of using `tcpdump` to capture FTP traffic.
    Using `tcpdump`, you are able to see the username and password in clear text,
    as shown in *Figure 28*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/0d629955-8fd3-4b77-ab4e-7fc0c03f75a9.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 28: Login details in plain text'
  prefs: []
  type: TYPE_NORMAL
- en: You can replicate the preceding test by using a publicly accessible `ftp` server,
    which is used for speedtest. The URL is `speedtest.tele2.net`.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we looked at information gathering and vulnerability scanning.
    We defined the difference between active and passive information gathering. We
    worked through the various tools that can be used for passive and active information
    gathering, and the tools that are needed for vulnerability scanning. Lastly, we
    worked through packet captures using graphical and command-line tools.
  prefs: []
  type: TYPE_NORMAL
- en: You now have the ability to perform information gathering using open source
    intelligence, which is passive information gathering. You have learned how to
    use Nmap for active information gathering, and how to leverage the Nmap scripting
    engine. You have gained the necessary skills to use vulnerability scanners such
    as OpenVAS and Nessus, and know how to perform a vulnerability scan to plan your
    attack. Packet capturing has taught you how to **sniff** traffic traversing a
    network, and how you can obtain valuable information from insecure protocols.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter ([Chapter 4](c9af5dc8-a2f6-41a7-98db-dd300fff396a.xhtml),
    *Mastering Social Engineering*), we will look at what social engineering is and
    the different tools that you can use to perform social engineering. We will leverage
    built-in tools within Kali Linux, along with some additional tools that will need
    to be installed.
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: What is the difference between passive and active information gathering?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Name two tools that can be used for passive information gathering.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How has Nmap evolved from being a traditional port scanner?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Name two vulnerability scanners.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Why should you know how to perform packet capturing?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
