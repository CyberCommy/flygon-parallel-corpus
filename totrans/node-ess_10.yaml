- en: Chapter 10. Using More Than JavaScript
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Throughout this book we have used only JavaScript. Well, it's called Node.js
    isn't it?
  prefs: []
  type: TYPE_NORMAL
- en: However, that doesn't mean that we can't use other languages with it. We can
    and as long as it compiles to JavaScript you are good to go.
  prefs: []
  type: TYPE_NORMAL
- en: 'There is a big list of common languages that are available at: [https://github.com/jashkenas/coffeescript/wiki/list-of-languages-that-compile-to-JS](https://github.com/jashkenas/coffeescript/wiki/list-of-languages-that-compile-to-JS).'
  prefs: []
  type: TYPE_NORMAL
- en: If you are missing your strongly typed language or just want a slightly different
    syntax, then there will surely be one option out there for you somewhere.
  prefs: []
  type: TYPE_NORMAL
- en: A couple of common languages include `CoffeeScript` and `TypeScript`, they work
    great with Node.js as they both compile to JavaScript. In this chapter, we will
    cover the usage of `CoffeeScript`. `TypeScript` is similar in usage; however,
    the syntax follows a similar path to C# and Java.
  prefs: []
  type: TYPE_NORMAL
- en: CoffeeScript
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'It''s very simple to install and start using additional languages. Let''s have
    a look at CoffeeScript:'
  prefs: []
  type: TYPE_NORMAL
- en: 'We need to install CoffeeScript globally, so that we can use a command similar
    to `node`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Now we can run `coffee`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'The syntax is very similar to JavaScript:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Instead of using the `.js` extension, we use `.coffee`.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we will create a CoffeeScript file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Then to run it, all we need to do is use the `coffee` command, similar to the
    `node` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'To compile our `.coffee` files into `.js`, we can use `-c`. Once compiled,
    we can run them directly with Node.js:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: If we have a bunch of CoffeeScript that we want to compile to JavaScript all
    at once, we can use `coffee -c -o ./lib` .`/src`. This will take all `.coffee`
    files from `./src`, compile them to `.js` and then output them to `./lib`.
  prefs: []
  type: TYPE_NORMAL
- en: 'You will need to compile all your files for other users to use our CoffeeScript
    code along side their JavaScript code. The alternative is to include CoffeeScript
    as a dependency and `require` the register file into your application, as shown:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: You may need to do this if do not you wish to compile your CoffeeScript, or
    if you are using a tool that requires a JavaScript file such as Gulp or Grunt.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: To see the equivalents between JavaScript and CoffeeScript you can use the site
    [http://js2.coffee/](http://js2.coffee/), it provides a simple way to compare
    the two on the fly.
  prefs: []
  type: TYPE_NORMAL
- en: CoffeeScript is basically just JavaScript; however, it has targeted readability
    and simplicity. With simplicity it also tries to limit the use of the bad parts
    of JavaScript and exposes the good parts.
  prefs: []
  type: TYPE_NORMAL
- en: Using CoffeeScript is usually great for beginners, (and for experts), as it
    uses English language rather than computer language. For example, instead of using
    `===` ( triple equals ) to check if two values equal, we can just use the English
    word `is`. So, `x === y` becomes `x is y`, which means that there is no translating
    required when reading.
  prefs: []
  type: TYPE_NORMAL
- en: Along with `is`, there are other keywords, such as `isnt`, `not`, `or`, `and`,
    `yes` and `no`.
  prefs: []
  type: TYPE_NORMAL
- en: Using these keywords instead of symbol operators gives clarity to the readers
    and programmers. The CoffeeScript has similar formatting to Python in the way
    functions and code blocks are declared; the indentation indicates when the block
    ends and begins
  prefs: []
  type: TYPE_NORMAL
- en: Code blocks and functions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In JavaScript you will usually group together blocks using curly braces, as
    shown in the following example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Where as in CoffeeScript you will leave out all the curly braces, in fact all
    the braces are left out:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'The same is true when declaring a function, notice that we are using an *arrow*
    rather than the keyword `function`. The parameter list is only required if you
    want named arguments:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: CoffeeScript tries to assume as much as possible while still giving the programmer
    enough control.
  prefs: []
  type: TYPE_NORMAL
- en: 'You may have also noticed that I didn''t use the `var` keyword when declaring
    a function. This is because it is implicitly declared, as you can see by compiling
    the above code to JavaScript:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'You can see in this compiled code that the last statement in the function is
    the return value, this means that we don''t need to declare the return value and
    just assume that the last value is returned. This makes it very simple to create
    one line functions, such as:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Unlike JavaScript, you may provide default arguments for a function and this
    can be compared to C#; however, it''s not limited to only constants as it essentially
    executes the statement within the function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'You can see this by compiling the above function as:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Essentially, all CoffeeScript does is check if the value is `null` or `undefined`.
  prefs: []
  type: TYPE_NORMAL
- en: The existential operator
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You can check to see if a value is `null` or `undefined` using the existential
    operator, which checks to see if the value *exists*. This is indicated by using
    the question mark symbol after a variable; the statement will be true if the value
    exists and otherwise false.
  prefs: []
  type: TYPE_NORMAL
- en: 'To use this in an expression:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'You can use this as a shorthand operator as well, for example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'The above two examples of code will behave exactly the same and will actually
    compile to give the same code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'You may also use the existential operator to ensure a value exists before accessing
    a property of it. For example, if you want to get the time from a date, or `-1`
    if the date doesn''t exist:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'Giving `date` the `null` value shows that we don''t mind if no value is passed:'
  prefs: []
  type: TYPE_NORMAL
- en: When an object doesn't exist and the operator is used then the returned value
    is `undefined`, this means that we can use the same operator again to return a
    default value.
  prefs: []
  type: TYPE_NORMAL
- en: Objects and arrays
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Along with all the assumptions that CoffeeScript tries to make, it surely does
    try to remove all the un-needed syntax plain JavaScript requires. Another instance
    of this can be seen while defining arrays and objects in which the use of a new
    line declares a new item. For example, you will usually define an array as:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'This still works; however, with CoffeeScript you can leave out the commas separating
    each item:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'You can also mix the two styles together:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'You can do the same with objects, such as:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'With objects you can even leave out the curly braces and use indentation to
    show the differences in the object:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'To loop an array in CoffeeScript, all you need to do is use the `for…in` loop,
    such as:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'If you do not wish to use the index of your item, you simply don''t ask for
    it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: As with JavaScript loops, you can use `break` and `continue` to control the
    flow.
  prefs: []
  type: TYPE_NORMAL
- en: 'To loop an object in CoffeeScript you can use the `for…of` loop, this is a
    bit different from the `for…of` loop provided by JavaScript:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'As with the `for…in` loop, if you don''t want the value, exclude it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'For both types of loops, the naming is irrelevant:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: Classes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Unlike JavaScript, CoffeeScript provides a natural way to declare classes and
    inheritance.
  prefs: []
  type: TYPE_NORMAL
- en: 'To define a class in JavaScript, you need to declare a function first:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'Then you will declare the `prototype` methods:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'If you have a `static` method, you can define this on the function rather than
    the prototype:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'In CoffeeScript you can use the `class` keyword and give the class a name.
    You can then declare the constructor, static, and instance ( prototype ) methods:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: Usually, you place all your `static` methods above your constructor so that
    they stay separate from your instance methods. This avoids confusion, you may
    have noticed that I declared the static method `createUser` with a `@` prefix,
    this is how you define a static method in CoffeeScript. However, you can also
    use the traditional JavaScript method of `User.createUser = ->`, either way will
    work here.
  prefs: []
  type: TYPE_NORMAL
- en: The code that is run when the instance is being created or *constructed* is
    called the constructor. This is the same terminology that is used in many other
    languages so it should be familiar. A constructor is essentially a function.
  prefs: []
  type: TYPE_NORMAL
- en: All the instance methods are declared similarly to properties of an object.
  prefs: []
  type: TYPE_NORMAL
- en: 'With classes comes another symbol, the `@` symbol. When used on an instance,
    you can use it to refer to the `this` keyword. For example, the `getUsername`
    method can be written as:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'Or, if we want to drop the return statement and make it a one liner:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'The `@` symbol can also be used in parameter lists to declare that we want
    the instance property to be set as the passed value. For example, if we had a
    `setUsername` method we can either do:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: 'Or we can do:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: Both the methods will compile to the same JavaScript code.
  prefs: []
  type: TYPE_NORMAL
- en: 'Given the fact that we can use the `@` symbol in our parameter list, we can
    refactor our constructor function to:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: Another advantage of using CoffeeScript class is that we can define inheritance.
    To do so, all we need to do is use the `extends` keyword, this is similar to other
    languages.
  prefs: []
  type: TYPE_NORMAL
- en: In these examples, we want to have two *classes*, `Person` and `Robot` that
    extend the base `User` class.
  prefs: []
  type: TYPE_NORMAL
- en: For our person, we want to be able to give them a name and an age along with
    the username that the `User` class requires.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we need to declare our class:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: 'Then declare our `constructor`. In our `constructor`, we will call the `super`
    function, this will execute the constructor of the parent class `User` and we
    want to pass the username to it, as shown:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: 'We then add two methods, `getName` and `getAge`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, we will do the same for `Robot`, except this time we only want a `username`
    and `@usage`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: 'We can now create instances of our classes and compare them, as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Classes](img/B04729_10_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: CoffeeScript tries to make *good* assumptions with your code. This helps to
    remove some problems that JavaScript developers come across. For example, the
    difference between `==` and `===`.
  prefs: []
  type: TYPE_NORMAL
- en: You can learn more about the specific syntax of CoffeeScript at [http://coffeescript.org/](http://coffeescript.org/).
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter we have covered utilizing another language. This can help alleviate
    the struggles with JavaScript's style or syntax for beginners. For people who
    are used to more language features, this is a big advantage as it helps remove
    the pitfalls that people usually come across.
  prefs: []
  type: TYPE_NORMAL
- en: 'Prepared for Bentham Chang, Safari ID bentham@gmail.com User number: 2843974
    © 2015 Safari Books Online, LLC. This download file is made available for personal
    use only and is subject to the Terms of Service. Any other use requires prior
    written consent from the copyright owner. Unauthorized use, reproduction and/or
    distribution are strictly prohibited and violate applicable laws. All rights reserved.'
  prefs: []
  type: TYPE_NORMAL
