- en: '*Chapter 2*: Introduction to Qt Creator'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Qt Creator** is Qt''s own **Integrated Development Environment** (**IDE**)
    for cross-platform application development. In this chapter, you will learn the
    basics of the Qt Creator IDE as well as covering the **user interface** (**UI**)
    of the IDE. We will also look at how to create and manage projects in Qt Creator.
    This module of Qt covers developing a simple Qt application using Qt Creator,
    shortcuts, and practical tips for developers.'
  prefs: []
  type: TYPE_NORMAL
- en: 'More specifically, we''re going to cover the following main topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Basics of Qt Creator
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Configuring the IDE and managing projects
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: User interfaces
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Writing a sample application
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Advanced options
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Qt Creator can make your Qt learning easier with many useful tools and examples.
    You will need minimal IDE knowledge to get started. By the end of this chapter,
    you will be familiar with the use of Qt Creator. You will also be able to build
    and run your first Qt application on your favorite desktop platform, as well as
    being aware of the advanced options available in the IDE, which you will be able
    to customize in line with your preferences.
  prefs: []
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The technical requirements for this chapter are the same as [*Chapter 1*](B16231_01_Final_ASB_ePub.xhtml#_idTextAnchor014)*,
    Introduction to Qt 6*. You will need the latest Qt version, namely Qt 6.0.0 MinGW
    64-bit, Qt Creator 4.13.0 or higher, and Windows 10, Ubuntu 20.04 LTS, or the
    latest version of macOS (higher than macOS 10.13 at a minimum) such as macOS Catalina.
    Qt supports earlier versions of operating systems such as Windows 8.1 or Ubuntu
    18.04\. However, we recommend you upgrade to the latest version of your preferred
    operating system to ensure smooth functioning. In this chapter, we have used screenshots
    from the Windows 10 platform.
  prefs: []
  type: TYPE_NORMAL
- en: Exploring the Qt Creator UI
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Qt Creator is an IDE produced by the Qt Company. It integrates multiple tools
    including a code editor, a **Graphical UI** (**GUI**) designer, a compiler, a
    debugger, Qt Designer, Qt Quick Designer, and Qt Assistant, among others.
  prefs: []
  type: TYPE_NORMAL
- en: Qt Designer helps in designing widget-based GUIs whereas Qt Quick Designer provides
    a UI to create and edit QML-based GUIs in Design Mode. Qt Assistant is an integrated
    documentation viewer that opens contents related to a given Qt class or function
    with the press of the *F1* key.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s begin by launching Qt Creator. The binary can be found inside `Qt\Tools\QtCreator\bin`.
    You will see a screen like that shown in *Figure 2.1*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.1 – Qt Creator interface'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_2.1_B16231.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 2.1 – Qt Creator interface
  prefs: []
  type: TYPE_NORMAL
- en: 'You can see the following GUI sections in the UI:'
  prefs: []
  type: TYPE_NORMAL
- en: '**IDE menu bar**: This provides the user with a standard place in the window
    to find the majority of application-specific functions. These functions include
    creating a project, opening and closing files, development tools, analysis options,
    help contents, and a way to exit the program.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Mode selector**: This section provides different modes depending on the active
    task. The **Welcome** button gives options to open examples, tutorials, recent
    sessions, and projects. The **Edit** button opens the code window and helps in
    navigating the project. The **Design** button opens Qt Designer or Qt Quick Designer
    based on the type of UI file. **Debug** provides options to analyze your application.
    The **Projects** button helps in managing project settings, and the **Help** button
    is for browsing help contents.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Kit selector**: This helps in selecting the active project configuration
    and changing the kit settings.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Run button**: This button runs the active project after building it.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Debug button**: This helps in debugging the active project using a debugger.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Build button**: This button is for building the active project.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Locator**: This is used to open a file from any open project.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Output pane**: This includes several windows to display project information
    such as compilation and application output. It also shows build issues, console
    messages, and test and search results.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Progress indicator**: This control shows the progress related to running
    tasks.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'You can also benefit from an interactive UI tour when you launch Qt Creator
    for the first time. You can also launch it from the **Help** | **UI Tour** option
    from the menu bar as shown in *Figure 2.2*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.2 – Qt Creator UI Tour menu choice'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_2.2_B16231.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 2.2 – Qt Creator UI Tour menu choice
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: If you press the *Alt* key, then you will see the underlined mnemonic letter
    in the menu title. Press the corresponding key to open the respective context
    menu.
  prefs: []
  type: TYPE_NORMAL
- en: In this section, we learned about various sections in the IDE. In the next section,
    we will build a simple Qt application using the Qt Creator IDE.
  prefs: []
  type: TYPE_NORMAL
- en: Building a simple Qt application
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let's start with a simple *Hello World* project. A *Hello World* program is
    a very simple program that displays **Hello World!** and checks that the SDK configuration
    is free from errors. These projects use the most basic, very minimal code. For
    this project, we will use a project skeleton created by Qt Creator.
  prefs: []
  type: TYPE_NORMAL
- en: 'Follow these steps to build your first Qt application:'
  prefs: []
  type: TYPE_NORMAL
- en: To create a new project in Qt, click on the **File** menu option on the menu
    bar or hit *Ctrl* + *N*. Alternatively, you can also click on the **+ New** button
    located at the welcome screen to create a new project, as shown in *Figure 2.3*:![Figure
    2.3 – New project interface
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_2.3_B16231.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 2.3 – New project interface
  prefs: []
  type: TYPE_NORMAL
- en: Next, you can select a template for the project. You can create different types
    of applications, including a console application or GUI application. You can also
    create non-Qt projects as well as library projects. In the upper-right section,
    you will see a dropdown to filter templates specific to the desired target platform.
    Select the **Qt Widgets Application** template and then click on the **Choose...**
    button:![Figure 2.4 – The project template interface
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_2.4_B16231.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 2.4 – The project template interface
  prefs: []
  type: TYPE_NORMAL
- en: In the next step, you will be asked to choose the project name and project location.
    You can navigate to the desired project location by clicking the **Browse…** button.
    Then click on the **Next** button to proceed to the next screen:![Figure 2.5 –
    New project location screen
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_2.5_B16231.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 2.5 – New project location screen
  prefs: []
  type: TYPE_NORMAL
- en: You can now select the build system. By default, Qt's own build system **qmake**
    will be selected. We will discuss qmake more later in [*Chapter 6*](B16231_06_Final_ASB_ePub.xhtml#_idTextAnchor123),
    *Signals and Slots*. Click on the **Next** button to proceed to the next screen:![Figure
    2.6 – Build system selection screen
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_2.6_B16231.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 2.6 – Build system selection screen
  prefs: []
  type: TYPE_NORMAL
- en: Next, you can specify the class information and the base class to be used to
    automatically generate the project skeleton. If you need a desktop application
    with features of `MainWindow` such as `menubar`, `toolbar`, and `statusbar`, then
    select `QMainWindow` in [*Chapter 3*](B16231_03_Final_ASB_ePub.xhtml#_idTextAnchor052)*,*
    *GUI Design Using Qt Widgets*. Click on the **Next** button to proceed to the
    next screen:![Figure 2.7 – Source code skeleton generation screen
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_2.7_B16231.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 2.7 – Source code skeleton generation screen
  prefs: []
  type: TYPE_NORMAL
- en: In this next step, you can specify the language for translation. Qt Creator
    comes with the *Qt Linguist* tool, which allows you to translate your application
    into different languages. You may skip this step for now. We will discuss **Internationalization**
    (**i18n**) in [*Chapter 11*](B16231_11_Final_ASB_ePub.xhtml#_idTextAnchor256),
    *Internationalization*. Click on the **Next** button to proceed to the next screen:![Figure
    2.8 – Translation File creation screen
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_2.8_B16231.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 2.8 – Translation File creation screen
  prefs: []
  type: TYPE_NORMAL
- en: In the next step, you can select a kit to build and run your project. To build
    and run the project, at least one kit must be active and selectable. If your desired
    kit is shown as grayed out, then you may have some kit configuration issues. When
    you install Qt for a target platform, the build and run settings for the development
    targets usually get configured automatically. Click on the checkbox to select
    one of the desktop kits such as **Desktop Qt 6.0.0 MinGW 64-bit**. Click on the
    **Next** button to proceed to the next screen:![Figure 2.9 – Kit Selection screen
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_2.9_B16231.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 2.9 – Kit Selection screen
  prefs: []
  type: TYPE_NORMAL
- en: Version control allows you or your team to submit code changes to a centralized
    system so that each and every team member can obtain the same code without passing
    files around manually. You can add your project into the installed version control
    system on your machine. Qt has support for several version control systems within
    the Qt Creator IDE. You may skip version control for this project by selecting
    **<None>**. Click on the **Finish** button to complete the project creation:![Figure
    2.10 – Project management screen
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_2.10_B16231.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 2.10 – Project management screen
  prefs: []
  type: TYPE_NORMAL
- en: Now you will see the generated files on the left side of the editor window.
    Click on any file to open it in the coding window, the most used component of
    the Qt Creator. The code editor is used in **Edit** mode. You can write, edit,
    refactor, and beautify your code in this window. You can also modify the fonts,
    font size, colors, and indentation. We will learn more about these in the *Understanding*
    *advanced options* section later in this chapter:![Figure 2.11 – Generated files
    and the code editor window
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_2.11_B16231.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 2.11 – Generated files and the code editor window
  prefs: []
  type: TYPE_NORMAL
- en: You can now see a `.pro` file inside your project folder. In the current project,
    the `HelloWorld.pro` file is the project file. This contains all the information
    required by qmake to build the application. This file is autogenerated during
    the project creation and contains the relevant details in a structured fashion.
    You can specify files, resources, and target platforms in this file. You need
    to run qmake again if you make any modifications to the `.pro` file contents,
    as shown in *Figure 2.12*. Let's skip modifying the contents for this project:![Figure
    2.12 – The contents of the project file
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_2.12_B16231.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 2.12 – The contents of the project file
  prefs: []
  type: TYPE_NORMAL
- en: 'You can find a form file with the `.ui` extension in the left side of the editor
    window. Let''s open the `mainwindow.ui` file by double-clicking it. Here, you
    can see the file opens under a different interface: Qt Designer. You can see that
    the mode selection panel has switched to **Design** mode. We will discuss Qt Designer
    more in the next chapter.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now drag the **Label** control listed under the **Display Widgets** category
    to the center of the form on the right side, as shown in *Figure 2.13*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, double-click on the item you dragged in, and type `Hello World!`. Hit
    the *Enter* key on your keyboard or click with the mouse anywhere outside the
    control to save the text:![Figure 2.13 – The designer screen
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_2.13_B16231.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 2.13 – The designer screen
  prefs: []
  type: TYPE_NORMAL
- en: 'The final step is to press the **Run** button present below the kit selector
    button. The project will build automatically once the reader hits the **Run**
    button. Qt Creator is intelligent enough to figure out that the project needs
    to be built first. You can build and run the application separately. After a few
    seconds of compiling, you will see a window with text reading **Hello World!**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 2.14 – The display output of the sample GUI application'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_2.14_B16231.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 2.14 – The display output of the sample GUI application
  prefs: []
  type: TYPE_NORMAL
- en: Congratulations, you have created your first Qt-based GUI application! Now let's
    explore the different advanced options available in Qt Creator.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding advanced options
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When you install Qt Creator, it gets installed with the default configuration.
    You can customize the IDE and configure its look and feel or set your favorite
    coding style.
  prefs: []
  type: TYPE_NORMAL
- en: Go to the top menu bar and click on the **Tools** option, then select **Options…**.
    You will see a list of categories available on the left sidebar. Each category
    provides a set of options to customize Qt Creator. As a beginner, you may not
    need to change the settings at all, but let's get familiar with the different
    options available. We will start by looking at managing kits.
  prefs: []
  type: TYPE_NORMAL
- en: Managing kits
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Qt Creator can automatically detect the installed Qt versions and available
    compilers. It groups the configurations used for building and running projects
    to make them cross-platform compatible. This set of configurations are stored
    as a kit. Each kit contains a set of parameters that describe the environment,
    such as the target platform, compiler, and Qt version.
  prefs: []
  type: TYPE_NORMAL
- en: 'Start by clicking on the **Kits** option in the left sidebar. This will autodetect
    and list the available kits as shown in *Figure 2.15*. If any kit is shown with
    a yellow or red warning mark, then it signifies a fault in the configuration.
    In that case, you may have to select the right compiler and Qt version. You can
    also create a customized kit by clicking on the **Add** button. If you want to
    use a new kit, then don''t forget to click on the **Apply** button. We will proceed
    with the default desktop configuration shown as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.15 – The Kits configuration screen'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_2.15_B16231.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 2.15 – The Kits configuration screen
  prefs: []
  type: TYPE_NORMAL
- en: Now let's proceed to the **Qt Versions** tab under the **Kits** section.
  prefs: []
  type: TYPE_NORMAL
- en: Qt Versions
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this tab, you can see the Qt versions available on your system. Ideally,
    the version gets detected automatically. If it is not detected, then click on
    the **Add…** button and browse to the path of qmake to add the desired Qt version.
    Qt uses a defined numbering scheme for its releases. For example, Qt 6.0.0 signifies
    the first patch release of Qt 6.0 and 6 as the major Qt version. Each release
    has limitations on the acceptable amount of changes to ensure a stable API. Qt
    tries to maintain compatibility between versions. However, this is not always
    possible due to code clean-ups and architectural changes in major versions:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.16 – Available Qt versions'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_2.16_B16231.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 2.16 – Available Qt versions
  prefs: []
  type: TYPE_NORMAL
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: Qt software versions use the versioning format of `Major.Minor.Patch`. Major
    releases may break backward compatibility for both the binary and source, although
    source compatibility may be maintained. Minor releases have binary and source
    backward compatibility. Patch releases have both backward and forward compatibility
    for the binary and the source.
  prefs: []
  type: TYPE_NORMAL
- en: We won't be discussing all of the tabs under the **Kits** section as the other
    tabs require knowledge about compilers, debuggers, and build systems. If you are
    an experienced developer, you may explore the tabs and make changes as required.
    Let's proceed to the **Environment** category in the left sidebar.
  prefs: []
  type: TYPE_NORMAL
- en: Environment
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'This option allows the user to choose their preferred language and theme. By
    default, Qt Creator uses the system language. It doesn''t support many languages,
    but most of the popular languages are available. If you change to a different
    language, then click on the **Apply** button and restart Qt Creator to see the
    changes. Please note that these **Environment** options are different from the
    build environment. You will see an interface similar to *Figure 2.17* shown as
    follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.17 – Options for the Environment settings'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_2.17_B16231.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 2.17 – Options for the Environment settings
  prefs: []
  type: TYPE_NORMAL
- en: 'You will also see a checkbox saying **Enable high DPI scaling**. Qt Creator
    handles high **Dots-Per-Inch** (**DPI**) scaling differently on different operating
    systems, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: On Windows, Qt Creator detects the default scaling factor and uses it accordingly.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: On Linux, Qt Creator leaves the decision of whether or not to enable high DPI
    scaling up to the user. This is done because there are many Linux flavors and
    windowing systems.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: On macOS, Qt Creator forces Qt to use the system scaling factor for the Qt Creator
    scaling factor.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: To override the default approach, you may toggle the checkbox option and click
    the **Apply** button. The changes will be reflected after you restart the IDE.
    Now let's have a look at the **Keyboard** tab.
  prefs: []
  type: TYPE_NORMAL
- en: Keyboard shortcuts
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The **Keyboard** section allows users to explore existing keyboard shortcuts
    and create new ones. Qt Creator has many built-in keyboard shortcuts, which are
    very useful for developers. You can also create your own shortcuts if your favorite
    shortcut is missing. You can additionally specify your own keyboard shortcuts
    for the functions that do not appear in the list, such as, for example, selecting
    words or lines in a text editor.
  prefs: []
  type: TYPE_NORMAL
- en: 'Some of the commonly used shortcuts for everyday development are listed as
    follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.18 – Some of the commonly used keyboard shortcuts'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_2.18_B16231.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 2.18 – Some of the commonly used keyboard shortcuts
  prefs: []
  type: TYPE_NORMAL
- en: 'The shortcuts are grouped by category. To find a keyboard shortcut in the list,
    enter a function name or shortcut in the `new`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.19 – Keyboard shortcut options'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_2.19_B16231.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 2.19 – Keyboard shortcut options
  prefs: []
  type: TYPE_NORMAL
- en: The preceding screenshot shows a list of available shortcuts for the keyword
    `new`. You can see *Ctrl* + *N* is used for creating a new file or project. You
    can also import or export keyboard mapping schemes files in `.kms` format.
  prefs: []
  type: TYPE_NORMAL
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: 'There are many more in-built Qt shortcuts than we discussed here. You can read
    more about shortcuts in the following articles:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://doc.qt.io/qtcreator/creator-keyboard-shortcuts.html](https://doc.qt.io/qtcreator/creator-keyboard-shortcuts.html)'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://wiki.qt.io/Qt_Creator_Keyboard_Shortcuts](https://wiki.qt.io/Qt_Creator_Keyboard_Shortcuts)'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://shortcutworld.com/Qt-Creator/win/Qt-Creator_Shortcuts](https://shortcutworld.com/Qt-Creator/win/Qt-Creator_Shortcuts)'
  prefs: []
  type: TYPE_NORMAL
- en: There is a possibility of conflict between a Qt Creator keyboard shortcut and
    a window manager shortcut. In this case, the window manager shortcut will override
    the Qt Creator shortcut. You can also configure the keyboard shortcuts in the
    window manager. If this is restricted, then you can change the Qt Creator shortcuts
    instead. Now, let's proceed to the next sidebar category.
  prefs: []
  type: TYPE_NORMAL
- en: Text Editor
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The next category in the left sidebar is **Text Editor**. Here, you can choose
    the color scheme, font, and font size in the first tab. The next tab lists different
    behavior in **Text Editor**. As you can see in *Figure 2.20*, Qt uses space indentation
    for the *Tab* key on the keyboard:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.20 – Text Editor Behavior tab'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_2.20_B16231.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 2.20 – Text Editor Behavior tab
  prefs: []
  type: TYPE_NORMAL
- en: Some developers prefer tab indentation over space indentation. You can change
    the indentation behavior in the **C++** and **Qt Quick** settings. Since there
    are dedicated settings as a different sidebar category, this section in **Text
    Editor** may be deprecated in future releases.
  prefs: []
  type: TYPE_NORMAL
- en: You can find the file encoding of the current file in the **File Encodings**
    group. To modify the file encoding, select **New Encoding** from the dropdown.
    To view the file with the new encoding, click on the **Apply** button.
  prefs: []
  type: TYPE_NORMAL
- en: We won't be discussing all of the sidebar categories as those are very advanced
    options. You can explore them later once you learn the basics. In the next section,
    we will discuss managing the coding window.
  prefs: []
  type: TYPE_NORMAL
- en: Splitting the coding window
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'You can split the coding window and view multiple files on the same screen
    or on an external screen. You can view multiple files simultaneously in a selection
    of different ways (the options are available under the **Window** option in the
    menu bar):'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.21– A screenshot showing the spilt screen options'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_2.21_B16231.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 2.21– A screenshot showing the spilt screen options
  prefs: []
  type: TYPE_NORMAL
- en: 'Now let''s discuss various ways to split a coding window and remove a split
    window:'
  prefs: []
  type: TYPE_NORMAL
- en: To split the coding window into top and bottom views, press *Ctrl* + *E* and
    then *2*, or select the **Window** option in the menu bar and then click on the
    **Split** option. This will create an additional coding window below the currently
    active window.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: To split the coding window into adjacent views, select **Split Side by Side**
    or press *Ctrl* + *E* and then *3*. A side-by-side split creates views to the
    right of the currently active coding window.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: To open the coding window in a detached window, press *Ctrl* + *E*, and *4*,
    or select **Open in New Window**. You can drag the window to an external monitor
    for convenience.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: To move between split views and detached editor windows, select **Next Split**
    or press *Ctrl* + *E*, and then *O*.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: To remove a split view, click on the window you want to remove and select **Remove
    Current Split**, or press *Ctrl* + *E*, and then *0*.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: To remove all split coding windows, select **Remove All Splits** or press *Ctrl*
    + *E*, and then *1*.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In this section, you learned about splitting the coding editor window. This
    helps when referring to multiple code files at once while coding. In the next
    section, we will discuss the **Build** menu present in the IDE's menu bar.
  prefs: []
  type: TYPE_NORMAL
- en: Build options
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In the menu bar, you can see the **Build** option. If you click that, then
    you will see various build options as shown in *Figure 2.22*. Here, you can build,
    rebuild, or clean your projects. In complex projects, you may have more than one
    subproject. You can build subprojects individually to reduce total build time:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.22 – Build menu options'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_2.22_B16231.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 2.22 – Build menu options
  prefs: []
  type: TYPE_NORMAL
- en: 'Qt Creator project wizards allow you to choose the build system, including
    qmake, CMake, and Qbs, while creating a new project. It gives developers the freedom
    to use Qt Creator as a code editor and to have control of the steps or commands
    used in building a project. By default, qmake is installed and configured for
    your new project. You can learn more about using other build systems at the following
    link: [https://doc.qt.io/qtcreator/creator-project-other.html](https://doc.qt.io/qtcreator/creator-project-other.html).'
  prefs: []
  type: TYPE_NORMAL
- en: Now let's discuss where and how to look for the framework's documentation.
  prefs: []
  type: TYPE_NORMAL
- en: Qt Assistant
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Qt Creator also includes a built-in documentation viewer called Qt Assistant.
    This is really handy since you can look for an explanation of a certain Qt class
    or function by simply hovering the mouse cursor over the class name in your source
    code and pressing the *F1* key. Qt Assistant will then be opened and will show
    you the documentation related to that Qt class or function:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.23 – Integrated help interface'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_2.23_B16231.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 2.23 – Integrated help interface
  prefs: []
  type: TYPE_NORMAL
- en: Qt Assistant also provides support for interactive help and enables you to create
    help documentation for your Qt application.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: On the Windows platform, Qt Assistant is available as a menu option on the Qt
    Creator menu bar. On Linux distributions, you can open Terminal, type `assistant`,
    and press *Enter*. On macOS, it is installed in the `/Developer/Applications/Qt`
    directory.
  prefs: []
  type: TYPE_NORMAL
- en: In this section, we learned about Qt Assistant and the help documentation. Now,
    let's summarize our takeaways from this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter explained the fundamentals of the Qt Creator IDE and what it can
    be used for. Qt Creator is an IDE with a great set of tools. It helps you to easily
    create great GUI applications for multiple platforms. Developers don't need to
    write lengthy code just to create a simple button or change a lot of code just
    to align a text label – Qt Designer automatically generates code for us when we
    design our GUI. We created a GUI application with just a few clicks, and we also
    learned about the various advanced options available in the IDE, including how
    to manage kits and shortcuts. The built-in Qt Assistant provides great help with
    useful examples and can help us with our own documentation.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will discuss GUI design using Qt Widgets. Here, you
    will learn about different widgets, how to create your own GUI element, and how
    to create a custom GUI application.
  prefs: []
  type: TYPE_NORMAL
