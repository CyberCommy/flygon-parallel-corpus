- en: Joining Datasets with Inner Joins
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you will learn how to use LINQ to write queries that join different
    result sets or different data sets. The code is not very complicated in this chapter—there's
    just a bit of it.
  prefs: []
  type: TYPE_NORMAL
- en: Adding a Join Classes button to the HTML
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Bring up a project. Put a button in the HTML page that says Join Classes below
    the line beginning with `<form id=....`. So, we''ll have two different classes
    and then we''ll join them together, produce some results, and then display them.
    That''s the objective here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, switch to the Design view and double-click on the Join Classes button.
    This takes us into `Default.aspx.cs`. Delete the `Page_Load` block. The relevant
    portion of the starting code for this project should look like *Figure 15.10.1*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/eb1eda2d-e891-4908-8db1-912e2d9669ba.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 15.10.1: The starting code section for this project'
  prefs: []
  type: TYPE_NORMAL
- en: Adding the namespaces
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now, we will make code as follows. We''ll need the LINQ and generic collections
    namespaces; so, enter the following under `using System` near the top of the file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Creating the person and car classes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We''ll make two classes. One will be a `person` and the other will be a `car`
    class. To do this, enter the following directly above the line that begins with
    `public partial class _Default...`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, we need just a name; so, enter the following between a set of curly braces
    below this line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, we also need to make a class called `Car`. So, beneath the closed curly
    brace underneath the preceding line, enter the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, enter the following between a set of curly braces below this line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: As you can see now, `public Person` is being defined inside the class as a data
    type of a field. For example, a car has an owner.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, add one more data type below the preceding line, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Clearly, you can see the presence of the `Person` field inside the `Car` class.
    There's a connection between the classes. We will use this shortly. For now, let's
    go through the construction.
  prefs: []
  type: TYPE_NORMAL
- en: Making person objects
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'First, we have to make some `Person` objects, otherwise we won''t have anything
    to join. So, enter the following between a set of curly braces under the line
    that begins with `protected void Button1_Click...`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, copy this line and paste it directly below. Edit the line to say `Person
    per2` and change the value of `Name` variable to equal `Jenny Smith`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, copy the preceding line and paste it below. Edit the line to say `Person
    per3` and change the value of `Name` variable to equal `John Jenkins`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: So, now we have some people who will be the car owners.
  prefs: []
  type: TYPE_NORMAL
- en: Making car objects
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now, let''s make some `car` objects. Skip a line and then start by entering
    the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: To initialize `car1`, you start by saying `Owner = per1`. This establishes a
    connection between the two classes; that is, owner for `car1` is `per1`, who is
    `Mark Owens`. Then, you add maker, which we'll say is `Honda` for `car1`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once again, copy this line and paste it directly below the preceding line.
    Edit the line to say `Car car2` and owner to say `per2`, but leave maker equal
    to `Honda`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Sometimes, unfortunately, to illustrate a concept, I've got to write a decent
    amount of code, otherwise the concept is difficult to illustrate.
  prefs: []
  type: TYPE_NORMAL
- en: 'Again, copy the preceding line and paste it below. Edit the line to say `Car
    car3` and `Owner` to say `per1`, but this time and change `Maker` equal to `Toyota`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, copy the preceding line and paste it below. Edit the line to say `Car
    car4`, `Owner` to say `per4` and `Maker` equal to `Tesla`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: The thing to be observed here, of course, is that the `per3` variable is not
    being used as the owner of a car, right? So, when we do the join, the query that
    joins these two datasets, the records that are shared will be returned. This means,
    for example, that there is no car owned by `per3`.
  prefs: []
  type: TYPE_NORMAL
- en: Making a list of owners and their cars
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Next, skip a line and enter the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'Here, we are saying a list of persons, `people`, equals a new list of people
    and, then, we stick in those individuals—`per1`, `per2`, and `per3`. Next, you''ll
    do the same thing for the cars, so enter the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: Again, to initialize the list of cars, you say `car1`, `car2`, `car3`, and `car4`.
  prefs: []
  type: TYPE_NORMAL
- en: Joining the owners and car lists
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now, you can join those lists. To do this, skip a line, and enter the following
    next:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'For cars with owners, you write the query: `from person in people`. Next, continue
    by entering the following below:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'Here, we are joining the two lists. We are using `person` to `join people`
    and setting that equal to `car.Owner`. Then, once you have them joined, the people
    who have a car essentially, you can say the following next:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: We are creating an anonymous type in this line. So, if you hover your mouse
    over `var`, it says T is 'a. That's an anonymous data type. So, `carsWithOwners`
    is basically a list of anonymous types, but because it is a list and because it
    is `IEnumerable`, you can step through it using a `foreach` loop.
  prefs: []
  type: TYPE_NORMAL
- en: Getting and displaying the results
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now we need to get the results. So, skip a line, and say the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, enter the following between a set of curly braces below this line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: This will display the results for us.
  prefs: []
  type: TYPE_NORMAL
- en: Running the program
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now open this up in your browser, and click on the Join Classes button. Take
    a look at the results, which are also shown in *Figure 15.10.2*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/cfb73cca-c128-411c-9dd3-b75c8b2e1767.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 15.10.2: The result of this project'
  prefs: []
  type: TYPE_NORMAL
- en: So, Mark Owens has two cars. Next, Jenny Smith has a Honda and also a Tesla.
    Correct?
  prefs: []
  type: TYPE_NORMAL
- en: Now, because John Jenkins is `per3`, he does not appear as an owner in the list
    of cars. This means that there's no connection between `per3` and the `Car` list.
    In other words, when the join is done in LINQ, `per1` is used because it is going
    by the owner—`Car.Owner`. So, `per1` and `per2` will be used, but not `per3`.
    Then, you display the results.
  prefs: []
  type: TYPE_NORMAL
- en: Chapter review
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'For review, the complete version of the `Default.aspx.cs` file for this chapter,
    including comments, is shown in the following code block:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you learned how to use LINQ to write queries that join different
    result sets or different data sets. You created the `Person` and `Car` classes,
    made the `Person` and `Car` objects, made a list of owners and their cars, and
    joined the owners and car lists.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, you will work with SQL Server 2017 Express.
  prefs: []
  type: TYPE_NORMAL
