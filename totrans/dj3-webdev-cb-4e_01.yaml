- en: Getting Started with Django 3.0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Working with a virtual environment
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a project file structure
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Handling project dependencies with pip
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Configuring settings for development, testing, staging, and production environments
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Defining relative paths in the settings
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Handling sensitive settings
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Including external dependencies in your project
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting up `STATIC_URL` dynamically
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting UTF-8 as the default encoding for the MySQL configuration
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating the Git `ignore` file
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Deleting Python-compiled files
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Respecting the import order in Python files
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating an app configuration
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Defining overwritable app settings
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Working with Docker containers for Django, Gunicorn, Nginx, and PostgreSQL
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we will see a few valuable practices to follow when starting
    a new project with Django 3.0 using Python 3\. We have picked the most useful
    ways to deal with scalable project layout, settings, and configurations, whether
    using virtualenv or Docker to manage your project.
  prefs: []
  type: TYPE_NORMAL
- en: We are assuming that you are already familiar with the basics of Django, Git
    version control, MySQL as well as PostgreSQL databases, and command-line usage.
    We also assume that you are using a Unix-based operating system, such as macOS
    or Linux. It makes more sense to develop with Django on Unix-based platforms as
    the Django websites will most likely be published on a Linux server, meaning that
    you can establish routines that work in the same way, whether you're developing
    or deploying. If you are locally working with Django on Windows, the routines
    are similar; however, they are not *always* the same.
  prefs: []
  type: TYPE_NORMAL
- en: Using Docker for your development environment, regardless of your local platform,
    can improve the portability of your applications through deployment since the
    environment within the Docker container can be matched precisely to that of your
    deployment server. We should also mention that for the recipes in this chapter,
    we are assuming that you have the appropriate version control system and database
    server already installed on your local machine, whether you are developing with
    Docker or not.
  prefs: []
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To work with the code of this book, you will need the latest stable version
    of Python, which can be downloaded from [https://www.python.org/downloads/](https://www.python.org/downloads/).
    At the time of writing, the latest version is 3.8.X. You will also need a MySQL
    or PostgreSQL database. You can download the MySQL database server from [https://dev.mysql.com/downloads/](https://dev.mysql.com/downloads/).
    The PostgreSQL database server can be downloaded from [https://www.postgresql.org/download/](https://www.postgresql.org/download/).
    Other requirements will be requested in specific recipes.
  prefs: []
  type: TYPE_NORMAL
- en: You can find all the code for this chapter at the `ch01` directory of the GitHub
    repository at [https://github.com/PacktPublishing/Django-3-Web-Development-Cookbook-Fourth-Edition](https://github.com/PacktPublishing/Django-3-Web-Development-Cookbook-Fourth-Edition).
  prefs: []
  type: TYPE_NORMAL
- en: Working with a virtual environment
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: It is very likely that you will develop multiple Django projects on your computer.
    Some modules, such as virtualenv, setuptools, wheel, or Ansible, can be installed
    once and then shared for all projects. Other modules, such as Django, third-party
    Python libraries, and Django apps, will need to be kept isolated from each other.
    The virtualenv tool is a utility that separates all of the Python projects and
    keeps them in their own realms. In this recipe, we will see how to use it.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To manage Python packages, you will need pip. If you are using Python 3.4+,
    then it will be included in your Python installation. If you are using another
    version of Python, you can install pip by executing the installation instructions
    at [http:/​/​pip.​readthedocs.​org/​en/​stable/installing/](https://pip.pypa.io/en/stable/installing/)​.
    Let''s upgrade the shared Python modules, pip, setuptools, and wheel:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: The virtual environment has been built into Python since version 3.3.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Once you have your prerequisites installed, create a directory where all your
    Django projects will be stored—for example, `projects` under your home directory.
    Go through the following steps after creating the directory:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Go to the newly created directory and create a virtual environment that uses
    the shared system site packages:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'To use your newly created virtual environment, you need to execute the activation
    script in your current shell. This can be done with the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Depending on the shell you are using, the `source` command may not be available.
    Another way to source a file is with the following command, which has the same
    result (note the space between the dot and `env`):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'You will see that the prompt of the command-line tool gets a prefix of the
    project name, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'To get out of the virtual environment, type the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When you create a virtual environment, a few specific directories (`bin`, `include`,
    and `lib`) are created in order to store a copy of the Python installation, and
    some shared Python paths are defined. When the virtual environment is activated,
    whatever you install with `pip` or `easy_install` will be put in and used by the
    site packages of the virtual environment, and not the global site packages of
    your Python installation.
  prefs: []
  type: TYPE_NORMAL
- en: 'To install the latest Django 3.0.x in your virtual environment, type the following
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The *Creating a project file structure* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Working with Docker containers for Django, Gunicorn, Nginx, and PostgreSQL*
    recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Deploying on Apache with mod_wsgi for the staging environment* recipe in
    [Chapter 12](9465e564-5eb5-4089-ad11-3bd2f49d5235.xhtml), *Deployment*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Deploying on Apache with mod_wsgi for the production environment* recipe
    in [Chapter 12](9465e564-5eb5-4089-ad11-3bd2f49d5235.xhtml)*, Deployment*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Deploying on Nginx and Gunicorn for the staging environment* recipe in
    [Chapter 12](9465e564-5eb5-4089-ad11-3bd2f49d5235.xhtml)*, Deployment*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Deploying on Nginx and Gunicorn for the production environment* recipe
    in [Chapter 12](9465e564-5eb5-4089-ad11-3bd2f49d5235.xhtml)*, Deployment*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a project file structure
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A consistent file structure for your projects makes you well organized and more
    productive. When you have the basic workflow defined, you can get stuck into the
    business logic more quickly and create awesome projects.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If you haven't done it yet, create a `~/projects` directory, where you will
    keep all your Django projects (you can read about this in the *Working with a
    virtual environment* recipe).
  prefs: []
  type: TYPE_NORMAL
- en: Then, create a directory for your specific project—for example, `myproject_website`.
    Start the virtual environment in an `env` directory there. Activate it and install
    Django there, as described in the previous recipe. We would suggest adding a `commands`
    directory for local shell scripts that are related to the project, a `db_backups`
    directory for database dumps, a `mockups` directory for website design files,
    and, most importantly, an `src` directory for your Django project.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Follow these steps to create a file structure for your project:'
  prefs: []
  type: TYPE_NORMAL
- en: 'With the virtual environment activated, go to the `src` directory and start
    a new Django project, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: The executed command will create a directory called `myproject`, with project
    files inside. This directory will contain a Python module, also called `myproject`.
    For clarity and convenience, we will rename the top-level directory as `django-myproject`.
    It is the directory that you will put under version control, and so it will have
    a `.git` or similarly named subdirectory.
  prefs: []
  type: TYPE_NORMAL
- en: In the `django-myproject` directory, create a `README.md` file to describe your
    project to the new developdjango-admin.py startproject myprojecters.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The `django-myproject` directory will also contain the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Your project's Python package, named `myproject`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Your project's pip requirements with the Django framework and other external
    dependencies (read about this in the *Handling project dependencies with pip* recipe).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The project license in a `LICENSE` file. If your project is open source, you
    can choose one of the most popular licenses from [https://choosealicense.com](https://choosealicense.com).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'In your project''s root, `django-myproject`, create the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A `media` directory for project uploads
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A `static` directory for collected static files
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A `locale` directory for project translations
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An `externals` directory for external dependencies that are included in this
    project when you can't use the pip requirements
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The `myproject` directory should contain these directories and files:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The `apps` directory where you will put all your in-house Django apps for the
    project. It is recommended that you have one app called `core` or `utils` for
    the projects' shared functionality.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `settings` directory for your project settings (read about this in the *Configuring
    settings for development, testing, staging, and production environments* recipe).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `site_static` directory for project-specific static files.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `templates` directory for the project's HTML templates.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `urls.py` file for the project's URL configuration.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `wsgi.py` file for the project's web server configuration.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'In your `site_static` directory, create the `site` directory as a namespace
    for site-specific static files. Then, we will divide the static files between
    the categorized subdirectories within it. For instance, see the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`scss` for Sass files (optional)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`css` for the generated minified **Cascading Style Sheets** (**CSS**)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`img` for styling images, favicons, and logos'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`js` for the project''s JavaScriptdjango-admin.py startproject myproject'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`vendor` for any third-party module combining all types of files, such as the
    TinyMCE rich-text editor'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Besides the `site` directory, the `site_static` directory might also contain
    overwritten static directories of third-party apps—for example, it might contain `cms`,
    which overwrites the static files from Django CMS. To generate the CSS files from
    Sass and minify the JavaScript files, you can use the CodeKit ([https://codekitapp.com/](https://codekitapp.com/))
    or Prepros ([https://prepros.io/](https://prepros.io/)) applications with a graphical
    user interface.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Put your templates that are separated by the apps in your `templates` directory.
    If a template file represents a page (for example, `change_item.html` or `item_list.html`),
    then put it directly in the app's template directory. If the template is included
    in another template (for example, `similar_items.html`), put it in the `includes`
    subdirectory. Also, your templates directory can contain a directory called `utils`
    for globally reusable snippets, such as pagination and the language chooser.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The whole file structure for a complete project will look similar to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: There's more...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To speed up the creation of a project in the way we just described, you can
    use the project's boilerplate from [https://github.com/archatas/django-myproject](https://github.com/archatas/django-myproject).
    After downloading the code, perform a global search and replace `myproject` with
    a meaningful name for your project, and you should be good to go.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The *Handling project dependencies with pip* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Including external dependencies in your project* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Configuring settings for development, testing, staging, and production
    environments* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Deploying on Apache with mod_wsgi for the staging environment* recipe in
    [Chapter 12](9465e564-5eb5-4089-ad11-3bd2f49d5235.xhtml)**, Deployment**
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Deploying on Apache with mod_wsgi for the production environment* recipe
    in [Chapter 12](9465e564-5eb5-4089-ad11-3bd2f49d5235.xhtml)*, Deployment*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Deploying on Nginx and Gunicorn for the staging environment* recipe in
    [Chapter 12](9465e564-5eb5-4089-ad11-3bd2f49d5235.xhtml)*, Deployment*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Deploying on Nginx and Gunicorn for the production environment* recipe
    in [Chapter 12](9465e564-5eb5-4089-ad11-3bd2f49d5235.xhtml)*, Deployment*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Handling project dependencies with pip
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The most convenient tool to install and manage Python packages is pip. Rather
    than installing the packages one by one, it is possible to define a list of packages
    that you want to install as the contents of a text file. We can pass the text
    file into the pip tool, which will then handle the installation of all packages
    in the list automatically. An added benefit to this approach is that the package
    list can be stored in version control.
  prefs: []
  type: TYPE_NORMAL
- en: Generally speaking, it is ideal and often sufficient to have a single requirements
    file that directly matches your production environment. You can change versions
    or add and remove dependencies on a development machine and then manage them through
    version control. This way, going from one set of dependencies (and associated
    code changes) to another can be as simple as switching branches.
  prefs: []
  type: TYPE_NORMAL
- en: 'In some cases, environments differ enough that you will need to have at least
    two different instances of your project:'
  prefs: []
  type: TYPE_NORMAL
- en: The development environment, where you create new features
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The public website environment, which is usually called the production environment
    in a hosted server
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There might be development environments for other developers, or special tools
    that are needed during development but that are unnecessary in production. You
    might also have a testing and staging environment in order to test the project
    locally and in a public website-like setup.
  prefs: []
  type: TYPE_NORMAL
- en: For good maintainability, you should be able to install the required Python
    modules for development, testing, staging, and production environments. Some of
    the modules will be shared and some of them will be specific to a subset of the
    environments. In this recipe, we will learn how to organize the project dependencies
    for multiple environments and manage them with pip.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Before using this recipe, you need to have a Django project ready with pip installed
    and a virtual environment activated. For more information on how to do this, read
    the *Working with a virtual environment* recipe.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Execute the following steps one by one to prepare pip requirements for your
    virtual environment Django project:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s go to the Django project that you have under version control and create
    a `requirements` directory with the following text files:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`_base.txt` for shared modules'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`dev.txt` for the development environment'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`test.txt` for the testing environment'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`staging.txt` for the staging environment'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`production.txt` for production'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Edit `_base.txt` and add the Python modules that are shared in all environments,
    line by line:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'If the requirements of a specific environment are the same as in `_base.txt`,
    add the line including `_base.txt` in the requirements file of that environment,
    as shown in the following example:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'If there are specific requirements for an environment, add them after the `_base.txt`
    inclusion, as shown in the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'You can run the following command in a virtual environment in order to install
    all of the required dependencies for the development environment (or an analogous
    command for other environments), as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The preceding `pip install` command, whether it is executed explicitly in a
    virtual environment or at the global level, downloads and installs all of your
    project dependencies from `requirements/_base.txt` and `requirements/dev.txt`.
    As you can see, you can specify a version of the module that you need for the
    Django framework and even directly install it from a specific commit at the Git
    repository, as is done for `python-social-auth` in our example.
  prefs: []
  type: TYPE_NORMAL
- en: When you have many dependencies in your project, it is good practice to stick
    to a narrow range of release versions for Python module release versions. Then
    you can have greater confidence that the project integrity will not be broken
    because of updates in your dependencies, which might contain conflicts or backward
    incompatibility. This is particularly important when deploying your project or
    handing it off to a new developer.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you have already manually installed the project requirements with pip one
    by one, you can generate the `requirements/_base.txt` file using the following
    command within your virtual environment:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: There's more...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'If you want to keep things simple and are sure that, for all environments,
    you will be using the same dependencies, you can use just one file for your requirements
    named `requirements.txt`, generated by definition, as shown in the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'To install the modules in a new virtual environment, simply use the following
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: If you need to install a Python library from another version control system,
    or on a local path, then you can learn more about pip from the official documentation
    at [https://pip.pypa.io/en/stable/user_guide/](https://pip.pypa.io/en/stable/user_guide/).
  prefs: []
  type: TYPE_NORMAL
- en: Another approach to managing Python dependencies that is getting more and more
    popular is Pipenv. You can get it and learn about it at [https://github.com/pypa/pipenv](https://github.com/pypa/pipenv).
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The *Working with a virtual environment* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Working with Docker containers for Django, Gunicorn, Nginx, and PostgreSQL*
    recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Including external dependencies in your project* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Configuring settings for development, testing, staging, and production
    environments* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Configuring settings for development, testing, staging, and production environments
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As noted earlier, you will be creating new features in the development environment,
    testing them in the testing environment, and then putting the website onto a staging
    server to let other people try the new features. Then, the website will be deployed
    to the production server for public access. Each of these environments can have
    specific settings, and you will learn how to organize them in this recipe.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In a Django project, we''ll create settings for each environment: development,
    testing, staging, and production.'
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Follow these steps to configure the project settings:'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the `myproject` directory, create a `settings` Python module with the following
    files:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`__init__.py` makes the settings directory a Python module.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`_base.py` for shared settings'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`dev.py` for development settings'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`test.py` for testing settings'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`staging.py` for staging settings'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`production.py` for production settings'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Copy the contents of `settings.py`, which was automatically created when you
    started a new Django project, to `settings/_base.py`. Then, delete `settings.py`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Change the `BASE_DIR` in the `settings/_base.py` to point one level up. It
    should first look as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'After changing it, it should look like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: If the settings of an environment are the same as the shared settings, then
    just
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'import everything from `_base.py` there, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'Apply the settings that you want to attach or overwrite for your specific environment
    in the other files—for example, the development environment settings should go
    to `dev.py`, as shown in the following code snippet:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'Modify the `manage.py` and `myproject/wsgi.py` files to use one of the environment
    settings by default by changing the following line:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'You should change this line to the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: By default, the Django management commands use the settings from `myproject/settings.py`.
    Using the method that is defined in this recipe, we can keep all of the required
    nonsensitive settings for all environments under version control in the `config`
    directory. On the other hand, the `settings.py` file itself would be ignored by
    version control and will only contain the settings that are necessary for the
    current development, testing, staging, or production environments.
  prefs: []
  type: TYPE_NORMAL
- en: For each environment, it is recommended that you set the `DJANGO_SETTINGS_MODULE` environment
    variable individually, either in PyCharm settings, the `env/bin/activate` script,
    or in `.bash_profile`.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The *Working with Docker containers for Django, Gunicorn, Nginx, and PostgreSQL* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Handling sensitive settings* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Defining relative paths in the settings* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Creating a Git ignore file* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Defining relative paths in the settings
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Django requires you to define different file paths in the settings, such as
    the root of your media, the root of your static files, the path to templates,
    and the path to translation files. For each developer of your project, the paths
    may differ as the virtual environment can be set up anywhere and the user might
    be working on macOS, Linux, or Windows. Even when your project is wrapped in a
    Docker container, it reduces the maintainability and portability to define absolute
    paths. In any case, there is a way to define these paths dynamically so that they
    are relative to your Django project directory.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Have a Django project started and open `settings/_base.py`.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Modify your path-related settings accordingly, instead of hardcoding the paths
    to your local directories, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: By default, Django settings include a `BASE_DIR` value, which is an absolute
    path to the directory containing `manage.py` (usually one level higher than the
    `settings.py` file or two levels higher than `settings/_base.py`). Then, we set
    all of the paths relative to `BASE_DIR` using the `os.path.join()` function.
  prefs: []
  type: TYPE_NORMAL
- en: Based on the directory layout we set down in the *Creating a project file structure*
    recipe, we would insert `'myproject'` as an intermediary path segment for some
    of the previous examples since the associated folders were created within this.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The *Creating a project file structure* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Working with Docker containers for Django, Gunicorn, Nginx, and PostgreSQL*
    recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Including external dependencies in your project* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Handling sensitive settings
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'When working when configuring a Django project, you will surely deal with some
    sensitive information, such as passwords and API keys. It is not recommended that
    you put that information under version control. There are two main ways to store
    that information: in environment variables and in separate untracked files. In
    this recipe, we will explore both cases.'
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Most of the settings for a project will be shared across all environments and
    saved in version control. These can be defined directly within the settings files;
    however, there will be some settings that are specific to the environment of the
    project instance or that are sensitive and require additional security, such as
    database or email settings. We will expose these using environment variables.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To read sensitive settings from the environment variables, perform these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'At the beginning of `settings/_base.py`, define the `get_secret()` function
    as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, whenever you need to define a sensitive value, use the `get_secret()`
    function, as shown in the following example:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If you run a Django management command without the environment variable set,
    you will see an error raised with a message, such as Set the DJANGO_SECRET_KEY
    environment variable.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can set the environment variables in the PyCharm configuration, remote
    server configuration consoles, in the `env/bin/activate` script, `.bash_profile`,
    or directly in the Terminal like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: Note that you should use the `get_secret()` function for all passwords, API
    keys, and any other sensitive information that you need in your Django project
    configuration.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Instead of environment variables, you can also use text files with sensitive
    information that won''t be tracked under version control. They can be YAML, INI,
    CSV, or JSON files, placed somewhere on the hard disk. For example, for a JSON
    file, you would have the `get_secret()` function, like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'This reads a `secrets.json` file from the settings directory and expects it
    to have at least the following structure:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'Make sure that the `secrets.json` file is ignored from the version control,
    but for convenience, you can create `sample_secrets.json` with empty values and
    put it under version control:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The *Creating a project file structure* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Working with Docker containers for Django, Gunicorn, Nginx, and PostgreSQL*
    recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Including external dependencies in your project
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Sometimes, you can''t install an external dependency with pip and have to include
    it directly within your project, such as in the following cases:'
  prefs: []
  type: TYPE_NORMAL
- en: When you have a patched third-party app where you yourself fixed a bug or added
    a feature that did not get accepted by project owners
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: When you need to use private apps that are not accessible at the **Python Package
    Index** (**PyPI**) or public version control repositories
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: When you need to use legacy versions of dependencies that are not available
    at PyPI anymore
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Including external dependencies in your project* ensures that whenever a developer
    upgrades the dependent modules, all of the other developers will receive the upgraded
    version in the next update from the version control system.'
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You should start with a Django project under a virtual environment.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Execute the following steps one by one for a virtual environment project:'
  prefs: []
  type: TYPE_NORMAL
- en: If you haven't done so already, create an `externals` directory under your Django
    project directory, `django-myproject`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Then, create the `libs` and `apps` directories under it. The `libs` directory
    is for the Python modules that are required by your project—for example, Boto,
    Requests, Twython, and Whoosh. The `apps` directory is for third-party Django
    apps—for example, Django CMS, Django Haystack, and django-storages.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We highly recommend that you create `README.md` files in the `libs` and `apps`
    directories, where you mention what each module is for, what the used version
    or revision is, and where it is taken from.
  prefs: []
  type: TYPE_NORMAL
- en: 'The directory structure should look something similar to the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'The next step is to put the external libraries and apps under the Python path
    so that they are recognized as if they were installed. This can be done by adding
    the following code in the settings:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'A module is meant to be under the Python path if you can run Python and import
    that module. One of the ways to put a module under the Python path is to modify
    the `sys.path` variable before importing a module that is in an unusual location.
    The value of `sys.path`, as specified by the settings file, is a list of directories
    starting with an empty string for the current directory, followed by the directories
    in the project, and finally the globally shared directories of the Python installation.
    You can see the value of `sys.path` in the Python shell, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: When trying to import a module, Python searches for the module in this list
    and returns the first result that is found.
  prefs: []
  type: TYPE_NORMAL
- en: Therefore, we first define the `BASE_DIR` variable, which is the absolute path
    of `django-myproject` or three levels higher than `myproject/settings/_base.py`.
    Then, we define the `EXTERNAL_LIBS_PATH` and `EXTERNAL_APPS_PATH` variables, which
    are relative to `BASE_DIR`. Lastly, we modify the `sys.path` property, adding
    new paths to the beginning of the list. Note that we also add an empty string
    as the first path to search, which means that the current directory of any module
    should always be checked first before checking other Python paths.
  prefs: []
  type: TYPE_NORMAL
- en: This way of including external libraries doesn't work cross-platform with the
    Python packages that have C language bindings—for example, `lxml`. For such dependencies,
    we would recommend using the pip requirements that were introduced in the *Handling
    project dependencies with pip* recipe.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The *Creating a project file structure* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Working with Docker containers for Django, Gunicorn, Nginx, and PostgreSQL* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Handling project dependencies with pip* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Defining relative paths in the settings* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Using the Django shell* recipe in [Chapter 10](http://bells)*, Bells and
    Whistles*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting up STATIC_URL dynamically
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If you set `STATIC_URL` to a static value, then each time you update a CSS file,
    a JavaScript file, or an image, you and your website visitors will need to clear
    the browser cache in order to see the changes. There is a trick to work around
    clearing the browser's cache. It is to have the timestamp of the latest changes
    shown in `STATIC_URL`. Whenever the code is updated, the visitor's browser will
    force the loading of all new static files.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we will see how to put a timestamp in `STATIC_URL` for Git users.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Make sure that your project is under Git version control and that you have `BASE_DIR`
    defined in your settings, as shown in the *Defining relative paths in the settings*
    recipe.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The procedure to put the Git timestamp in the `STATIC_URL` setting consists
    of the following two steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'If you haven''t done so yet, create the `myproject.apps.core` app in your Django
    project. You should also create a `versioning.py` file there:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'Import the newly created `get_git_changeset_timestamp()` function in the settings
    and use it for the `STATIC_URL` path, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `get_git_changeset_timestamp()` function takes the `absolute_path` directory
    as a parameter and calls the `git log` shell command with the parameters to show
    the Unix timestamp of the HEAD revision in the directory. We pass `BASE_DIR` to
    the function, as we are sure that it is under version control. The timestamp is
    parsed, converted to a string consisting of the year, month, day, hour, minutes,
    and seconds returned, and is then included in the definition of the `STATIC_URL`.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This method works only if each of your environments contains the full Git repository
    of the project—in some cases, for example, when you use Heroku or Docker for deployments—you
    don't have access to a Git repository and the `git log` command in the remote
    servers. In order to have the `STATIC_URL` with a dynamic fragment, you have to
    read the timestamp from a text file—for example, `myproject/settings/last-modified.txt`—that
    should be updated with each commit.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this case, your settings would contain the following lines:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: 'You can make your Git repository update `last-modified.txt` with a pre-commit
    hook. This is an executable bash script that should be called `pre-commit` and
    placed under `django-myproject/.git/hooks/`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: This script will update `last-modified.txt` whenever you commit to the Git repository
    and will add that file to the Git index.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The *Creating the Git ignore file* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting UTF-8 as the default encoding for the MySQL configuration
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: MySQL describes itself as the most popular open source database. In this recipe,
    we will tell you how to set UTF-8 as the default encoding for it. Note that if
    you don't set this encoding in the database configuration, you might get into
    a situation where LATIN1 is used by default with your UTF-8-encoded data. This
    will lead to database errors whenever symbols such as € are used. This recipe
    will also save you from the difficulties of converting the database data from
    LATIN1 to UTF-8, especially when you have some tables encoded in LATIN1 and others
    in UTF-8.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Make sure that the MySQL database management system and the **mysqlclient**
    Python module are installed and that you are using the MySQL engine in your project's
    settings.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Open the `/etc/mysql/my.cnf` MySQL configuration file in your favorite editor
    and ensure that the following settings are set in the `[client]`, `[mysql]`, and
    `[mysqld]` sections, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: 'If any of the sections don''t exist, create them in the file. If the sections
    already exist, add these settings to the existing configurations, and then restart
    MySQL in your command-line tool, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now, whenever you create a new MySQL database, the databases and all of their
    tables will be set in UTF-8 encoding by default. Don't forget to set this up on
    all computers on which your project is developed or published.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In PostgreSQL, the default server encoding is already UTF-8, but if you want
    to explicitly create a PostgreSQL database with UTF-8 encoding, then you can do
    that with the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The *Creating a project file structure* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Working with Docker containers for Django, Gunicorn, Nginx, and PostgreSQL*
    recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating the Git ignore file
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Git is the most popular distributed version control system, and you are probably
    already using it for your Django project. Although you are tracking file changes
    for most of your files, it's recommended that you keep some specific files and
    folders out of version control. Usually, caches, compiled code, log files, and
    hidden system files should not be tracked in the Git repository.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Make sure that your Django project is under Git version control.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Using your favorite text editor, create a `.gitignore` file at the root of
    your Django project and put the following files and directories there:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: "The `.gitignore` file specifies patterns that should intentionally be untracked\
    \ by the \LGit version control system. The `.gitignore` file that we created in\
    \ this recipe will ignore the Python-compiled files, local settings, collected\
    \ static files, \Land media directory with the uploaded files."
  prefs: []
  type: TYPE_NORMAL
- en: 'Note that we have exceptional syntax with exclamation marks for media and static
    files:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: This tells Git to ignore the `/media/` directory but keep the `/media/.gitkeep` file
    tracked under version control. As Git version control tracks files, but not directories,
    we use `.gitkeep` to make sure that the `media` directory will be created in each
    environment, but not tracked.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The *Creating a project file structure* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Working with Docker containers for Django, Gunicorn, Nginx, and PostgreSQL*
    recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Deleting Python-compiled files
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When you run your project for the first time, Python compiles all of your `*.py`
    code in bytecode-compiled files, `*.pyc`, which are used later for execution.
    Normally, when you change the `*.py` files, `*.pyc` is recompiled; however, sometimes
    when you switch branches or move the directories, you need to clean up the compiled
    files manually.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Use your favorite editor and edit or create a `.bash_profile` file in your home
    directory.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Add this alias at the end of `.bash_profile`, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, to clean the Python-compiled files, go to your project directory and type
    the following command on the command line:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: At first, we create a Unix alias that searches for the `*.pyc` and `*.pyo` files
    and `__pycache__` directories and deletes them in the current directory, as well
    as its children. The `.bash_profile` file is executed when you start a new session
    in the command-line tool.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If you want to avoid creating Python-compiled files altogether, you can set
    an environment variable, `PYTHONDONTWRITEBYTECODE=1`, in your `.bash_profile`,
    `env/bin/activate` script, or PyCharm configuration.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The *Creating the Git ignore file* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Respecting the import order in Python files
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When you create the Python modules, it is good practice to stay consistent with
    the structure in the files. This makes it easier for both you and other developers
    to read the code. This recipe will show you how to structure your imports.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Create a virtual environment and create a Django project in it.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Use the following structure for each Python file that you are creating. Categorize
    the imports into sections, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We have five main categories for the imports, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**System libraries** for packages in the default installation of Python'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Third-party libraries** for the additional installed Python packages'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Django modules** for different modules from the Django framework'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Django apps** for third-party and local apps'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Current-app modules** for relative imports from the current app'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When coding in Python and Django, use the official style guide for Python code,
    PEP 8\. You can find it at [https:/​/​www.​python.​org/​dev/​peps/​pep-​0008/](https://www.python.org/dev/peps/pep-0008/)​.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The *Handling project dependencies with pip* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Including external dependencies in your project* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating an app configuration
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Django projects consist of multiple Python modules called applications (or,
    more commonly, apps) that combine different modular functionalities. Each app
    can have models, views, forms, URL configurations, management commands, migrations,
    signals, tests, context processors, middlewares, and so on. The Django framework
    has an application registry, where all apps and models are collected and later
    used for configuration and introspection. Since Django 1.7, metainformation about
    apps can be saved in the `AppConfig` instance for each app. Let's create a sample
    `magazine` app to take a look at how to use the app configuration there.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'You can create a Django app either by calling the `startapp` management command
    or by creating the app module manually:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: With your `magazine` app created, add a `NewsArticle` model to `models.py`,
    create administration for the model in `admin.py`, and put `"myproject.apps.magazine"`
    in `INSTALLED_APPS` in the settings. If you are not yet familiar with these tasks,
    study the official Django tutorial at [https://docs.djangoproject.com/en/3.0/intro/tutorial01/](https://docs.djangoproject.com/en/3.0/intro/tutorial01/)[.](https://docs.djangoproject.com/en/2.2/intro/tutorial01/)
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Follow these steps to create and use the app configuration:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Modify the `apps.py` file and insert the following content into it, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: 'Edit the `__init__.py` file in the `magazine` module to contain the following
    content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s create a `signals.py` file and add some signal handlers there:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When you run an HTTP server or invoke a management command, `django.setup()`
    is called. It loads the settings, sets up logging, and prepares the app registry.
    This registry is initialized in three steps. Django first imports the configurations
    for each item from `INSTALLED_APPS` in the settings. These items can point to
    app names or configurations directly—for example, `"myproject.apps.magazine"`
    or `"myproject.apps.magazine.apps.MagazineAppConfig"`.
  prefs: []
  type: TYPE_NORMAL
- en: Django then tries to import `models.py` from each app in `INSTALLED_APPS` and
    collect all of the models.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, Django runs the `ready()` method for each app configuration. This method
    presents a good point in the development process to register signal handlers,
    if you have any. The `ready()` method is optional.
  prefs: []
  type: TYPE_NORMAL
- en: In our example, the `MagazineAppConfig` class sets the configuration for the
    `magazine` app. The `name` parameter defines the module of the current app. The
    `verbose_name` parameter defines a human name that is used in the Django model
    administration, where models are presented and grouped by apps. The `ready()`
    method imports and activates the signal handlers that, when in DEBUG mode, print
    in the terminal that a `NewsArticle` object was saved or deleted.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'After calling `django.setup()`, you can load the app configurations and models
    from the registry as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: You can read more about app configuration in the official Django documentation
    at
  prefs: []
  type: TYPE_NORMAL
- en: '[https://docs.djangoproject.com/en/2.2/ref/applications/](https://docs.djangoproject.com/en/2.2/ref/applications/)​.'
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The *Working with a virtual environment* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Working with Docker containers for Django, Gunicorn, Nginx, and PostgreSQL*
    recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Defining overwritable app settings* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Chapter 6](8b8138c4-c364-4616-8a81-b2f369cf870b.xhtml)*, Model Administration*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Defining overwritable app settings
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This recipe will show you how to define settings for your app that can then
    be overwritten in your project's settings file. This is especially useful for
    reusable apps that you can customize by adding a configuration.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Follow the steps in the *Getting ready* in the *Creating app configuration*
    recipe to create your Django app.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Define your app settings using the `getattr()` pattern in `models.py` if you
    just have one or two settings, or in the `app_settings.py` file if the settings
    are extensive and you want to organize them better:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: '`models.py` will contain the `NewsArticle` model, like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, in `admin.py`, we will import and use the settings from `app_settings.py`,
    as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: 'If you want to overwrite the `ARTICLE_THEME_CHOICES` settings for a given project,
    you should add `MAGAZINE_ARTICLE_THEME_CHOICES` in the project settings:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `getattr(object, attribute_name[, default_value])` Python function tries
    to get the `attribute_name` attribute from `object` and returns `default_value`
    if it is not found. We try to read different settings from the Django project
    settings module or, if they don't exist there, the default values are used.
  prefs: []
  type: TYPE_NORMAL
- en: Note that we could have defined the `choices` for the `theme` field in `models.py`,
    but instead we created a custom `ModelForm` in administration and set the choices
    there. This was done to avoid the creation of new database migrations whenever
    the `ARTICLE_THEME_CHOICES` is changed.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The *Creating app configuration* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Chapter 6](8b8138c4-c364-4616-8a81-b2f369cf870b.xhtml), *Model Administration*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Working with Docker containers for Django, Gunicorn, Nginx, and PostgreSQL
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Django projects depend not only on Python requirements, but also on many system
    requirements, such as a web server, database, server cache, and mail server. When
    developing a Django project, you need to ensure that all environments and all
    developers will have all the same requirements installed. One way to keep those
    dependencies in sync is to use Docker. With Docker, you can have different versions
    of the database, web, or other servers required individually for each project.
  prefs: []
  type: TYPE_NORMAL
- en: Docker is a system for creating configured, customized virtual machines called
    containers. It allows us to duplicate the setup of any production environment
    precisely. Docker containers are created from so-called Docker images. Images
    consist of layers (or instructions) on how to build the container. There can be
    an image for PostgreSQL, an image for Redis, an image for Memcached, and a custom
    image for your Django project, and all those images can be combined into accompanying containers
    with Docker Compose.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we will use a project boilerplate to set up a Django project
    with a PostgreSQL database, served by Nginx and Gunicorn, and manage all of them
    with Docker Compose.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: First, you will need to install the Docker Engine, following the instructions
    at [https://www.docker.com/get-started](https://www.docker.com/get-started). This
    usually includes the Compose tool, which makes it possible to manage systems that
    require multiple containers, ideal for a fully isolated Django project. If it
    is needed separately, installation details for Compose are available at [https://docs.docker.com/compose/install/](https://docs.docker.com/compose/install/)​.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s explore the Django and Docker boilerplate:'
  prefs: []
  type: TYPE_NORMAL
- en: Download the code from [https://github.com/archatas/django_docker](https://github.com/archatas/django_docker)
    to your computer to the `~/projects/django_docker` directory, for example.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If you choose another directory, for example, `myproject_docker`, then you will
    have to do a global search and replace `django_docker` with `myproject_docker`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the `docker-compose.yml` file. There are three containers that need to
    be created: `nginx`, `gunicorn`, and `db`. Don''t worry if it looks complicated;
    we''ll describe it in detail later:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: 'Open and read through the `Dockerfile` file. These are the layers (or instructions)
    that are needed to create the `gunicorn` container:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: 'Copy the `build_dev_example.sh` script to `build_dev.sh` and edit its content.
    These are environment variables to pass to the `docker-compose` script:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: 'In a command-line tool, add execution permissions to `build_dev.sh` and run
    it to build the containers:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: If you now go to `http://0.0.0.0/en/`, you should see a Hello, World! page there.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'When navigating to `http://0.0.0.0/en/admin/`, you should see the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: This means that you have to create the database user and the database in the
    Docker container.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s SSH to the `db` container and create the database user, password, and
    the database itself in the Docker container:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs: []
  type: TYPE_PRE
- en: When asked, enter the same password for the database as in the `build_dev.sh` script.
  prefs: []
  type: TYPE_NORMAL
- en: Press [*Ctrl* + *D*] twice to log out of the PostgreSQL user and Docker container.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you now go to `http://0.0.0.0/en/admin/`, you should see the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs: []
  type: TYPE_PRE
- en: This means that you have to run migrations to create the database schema.
  prefs: []
  type: TYPE_NORMAL
- en: 'SSH into the `gunicorn` container and run the necessary Django management commands:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs: []
  type: TYPE_PRE
- en: Answer all the questions that are asked by the management commands.
  prefs: []
  type: TYPE_NORMAL
- en: Press [*Ctrl* + *D*] twice to log out of the Docker container.
  prefs: []
  type: TYPE_NORMAL
- en: If you now navigate to `[http://0.0.0.0/en/admin/](http://0.0.0.0/en/admin/)`,
    you should see the Django administration, where you can log in with the super
    user's credentials that you have just created.
  prefs: []
  type: TYPE_NORMAL
- en: Create analogous scripts, `build_test.sh`, `build_staging.sh`, and `build_production.sh`,
    where only the environment variables differ.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The structure of the code in the boilerplate is similar to the one in a virtual
    environment. The project source files are in the `src` directory. We have the `git-hooks`
    directory for the pre-commit hook that is used to track the last modification
    date and the `config` directory for the configurations of the services used in
    the containers:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs: []
  type: TYPE_PRE
- en: The main Docker-related configurations are at `docker-compose.yml` and `Dockerfile`.
    Docker Compose is a wrapper around Docker's command-line API. The `build_dev.sh`
    script builds and runs the Django project under the Gunicorn WSGI HTTP server
    at port `8000`, Nginx at port `80` (serving static and media files and proxying
    other requests to Gunicorn), and the PostgreSQL database at port `5432`.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the `docker-compose.yml` file, the creation of three Docker containers is
    requested:'
  prefs: []
  type: TYPE_NORMAL
- en: '`nginx` for the Nginx web server'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`gunicorn` for the Django project with the Gunicorn web server'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`db` for the PostgreSQL database'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `nginx` and `db` containers will be created from the official images located
    at [https://hub.docker.com](https://hub.docker.com). They have specific configuration
    parameters, such as the ports they are running on, environment variables, dependencies
    on other containers, and volumes.
  prefs: []
  type: TYPE_NORMAL
- en: Docker volumes are specific directories that stay untouched when you rebuild
    the Docker containers. Volumes need to be defined for the database data files,
    media, static, and the like.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `gunicorn` container will be built from the instructions at the `Dockerfile`,
    defined by the build context in the `docker-compose.yml` file. Let''s examine
    each layer (or instruction) there:'
  prefs: []
  type: TYPE_NORMAL
- en: The `gunicorn` container will be based on the `python:3.7` image
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It will take `PIP_REQUIREMENTS` as an argument from the `docker-compose.yml`
    file
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It will set environment variables for the container
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It will install and upgrade pip, setuptools, and virtualenv
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It will create a system user named `myproject` for the Django project
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It will set `myproject` as the current user
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It will set the home directory of the `myproject` user as the current working
    directory
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It will create a virtual environment there
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It will copy pip requirements from the base computer to the Docker container
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It will install the pip requirements for the current environment defined by
    the `PIP_REQUIREMENTS` variable
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It will copy the source of the entire Django project
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The content of `config/nginx/conf.d/myproject.conf` will be saved under `/etc/nginx/conf.d/` in
    the `nginx` container. This is the configuration of the Nginx web server telling
    it to listen to port `80` (the default HTTP port) and forward requests to the
    Gunicorn server on port `8000`, except for requests asking for static or media
    content:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs: []
  type: TYPE_PRE
- en: You can learn more about Nginx and Gunicorn configurations in the *Deploying
    on Nginx and Gunicorn for the staging environment* and *Deploying on Nginx and
    Gunicorn for the production environment *recipes in [Chapter 12](9465e564-5eb5-4089-ad11-3bd2f49d5235.xhtml)*,
    Deployment*.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'You can destroy Docker containers with the `docker-compose down` command and
    rebuild them with your build script:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE63]'
  prefs: []
  type: TYPE_PRE
- en: 'If something is not working as expected, you can inspect the logs with the
    `docker-compose logs` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE64]'
  prefs: []
  type: TYPE_PRE
- en: 'To connect to any of the containers via SSH, you should use one of the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE65]'
  prefs: []
  type: TYPE_PRE
- en: 'You can copy files and directories to and from volumes on Docker containers
    using the `docker cp` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE66]'
  prefs: []
  type: TYPE_PRE
- en: If you want to get better a understanding of Docker and Docker Compose, check
    out the official documentation at [https://docs.docker.com/](https://docs.docker.com/),
    and specifically [https://docs.docker.com/compose/](https://docs.docker.com/compose/).
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The *Creating a project file structure* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Deploying on Apache with mod_wsgi for the staging environment* recipe in [Chapter
    12](9465e564-5eb5-4089-ad11-3bd2f49d5235.xhtml), *Deployment*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Deploying on Apache with mod_wsgi for the production environment* recipe
    in [Chapter 12](9465e564-5eb5-4089-ad11-3bd2f49d5235.xhtml)*, Deployment*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Deploying on Nginx and Gunicorn for the staging environment* recipe in
    [Chapter 12](9465e564-5eb5-4089-ad11-3bd2f49d5235.xhtml)*, Deployment*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Deploying on Nginx and Gunicorn for the production environment* recipe
    in [Chapter 12](9465e564-5eb5-4089-ad11-3bd2f49d5235.xhtml)*, Deployment*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
