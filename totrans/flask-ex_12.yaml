- en: Appendix A. A Sneak Peek into the Future
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We covered quite a variety of topics in this book, and we walked through the
    building of three functional and useful web applications. However, books, by nature,
    are of a finite length, while the world of web development tends towards the infinite,
    so we couldn't add everything. In this final chapter, we'll take a whistle-stop
    tour around the technologies that we weren't able to cover in detail. We'll start
    with looking at technologies that could be used directly to expand or improve
    the projects we created in this book. Then, we'll look at some more advanced Flask
    features that we didn't need to use in our projects but which will almost certainly
    be useful in other projects. Finally, we'll have a brief discussion of the technologies
    that are useful for web development in general but are not specific to either
    the projects we built here or to Flask.
  prefs: []
  type: TYPE_NORMAL
- en: Expanding the projects
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The projects we built are all functional, but they are not quite ready for heavy,
    real-time use. If they were to be built out to handle thousands of users or were
    commercial applications, they would need a few more features. These are discussed
    in the following sections.
  prefs: []
  type: TYPE_NORMAL
- en: Adding a domain name
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We accessed all of our projects using the IP address of our VPS. You're almost
    certainly used to visiting web applications using domain names rather than IP
    addresses. When you use a domain name, such as [http://google.com](http://google.com),
    your browser first sends off a request to a DNS server to find out what the IP
    address associated with this domain is. DNS servers are similar to huge automatic
    telephone books that exist solely to translate the domain names that humans find
    easier to remember (such as [http://google.com](http://google.com)) in than the
    IP addresses that organize the Internet (for example, 123.456.789.123).
  prefs: []
  type: TYPE_NORMAL
- en: To use a domain name instead of the IP address, you need to purchase one from
    a registrar. Often your **Internet Service Provider** (**ISP**) can assist you
    with purchasing a domain name (such as `yourname.com`). Domain names are normally
    fairly inexpensive, and you can get them for as little as a few dollars a year.
  prefs: []
  type: TYPE_NORMAL
- en: Once you purchase a domain name, you need to set up the DNS settings correctly.
    Most ISPs have an online control panel where you can do this yourself, but you
    may have to contact them to assist you. Your domain needs to point to your VPS.
    To do this, you create an "A" type DNS record that maps the domain to your IP.
  prefs: []
  type: TYPE_NORMAL
- en: Once your domain name points at your server, you can configure Apache to recognize
    it by using it instead of our `example.com` placeholder that we put in the Apache
    configuration files, such as `/etc/apache2/sites-available/waitercaller.conf`.
  prefs: []
  type: TYPE_NORMAL
- en: Changes to domain names also take a while to propagate—that is, the major DNS
    servers of the world need to be updated so that when someone visits your domain
    name, the DNS server can redirect them to your IP address. DNS propagation can
    take hours.
  prefs: []
  type: TYPE_NORMAL
- en: Adding HTTPS
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You've probably noticed that banks, large corporations such as Google and Microsoft,
    and an ever-growing number of other companies, have their websites automatically
    redirect to an **HTTPS** version. The "S" stands for *secure*, so the full acronym
    becomes **Hyper Text Transport Protocol Secure**. Whenever you see HTTPS in your
    browser's navigation bar (normally with a green padlock next to it) it means that
    all traffic flowing between you and the server is encrypted. This prevents so-called
    *man in the middle attacks*, where a malicious person between you and the server
    can view or modify the content that you and the server exchange.
  prefs: []
  type: TYPE_NORMAL
- en: Until recently, this encryption was achieved by the site owner by purchasing
    an expensive certificate from **Certificate Authority** (**CA**). CA's job is
    to act as a trusted third party between you and the server, issuing a signed certificate
    to the owner of a site. This certificate can be used to set up an encrypted channel
    between the client and the server. Because of the prohibitive cost, HTTPS was
    only used where security was absolutely necessary (for example, in online banking)
    and by companies such as Google who could afford the high fees. With everyone
    beginning to realize that the trust-based model of World Wide Web is inherently
    flawed, HTTPS is becoming more and more popular even for small blogs and personal
    websites. Companies such as Let's Encrypt ([https://letsencrypt.org](https://letsencrypt.org))
    are now offering certificates for free and these certificates can easily be installed
    and configured to work with popular web servers, such as Apache.
  prefs: []
  type: TYPE_NORMAL
- en: For our final project, as we are handling sensitive data (specifically passwords),
    using HTTPS is a must for nontrivial usage of our application, and it's also desirable
    for our other two projects (HTTPS is always better than HTTP). Although the process
    of setting up certificates to work with your web server is far simpler now than
    it was a couple of years ago, a full walk-through of how to set up Apache2 to
    play with a CA certificate is beyond the scope of this book.
  prefs: []
  type: TYPE_NORMAL
- en: 'However, if you only take the time to learn about one of the technologies mentioned
    in this chapter, then it should be this one. Here is a link to a very simple Digital
    Ocean tutorial that shows you how to set up the certificate on Ubuntu 14.04 to
    work with Apache2 (the exact configuration we used in this book):'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://www.digitalocean.com/community/tutorials/how-to-secure-apache-with-let-s-encrypt-on-ubuntu-14-04](https://www.digitalocean.com/community/tutorials/how-to-secure-apache-with-let-s-encrypt-on-ubuntu-14-04)'
  prefs: []
  type: TYPE_NORMAL
- en: E-mail confirmation for new registrations
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'You probably noted in our third project that our registration process was a
    little bit unusual. The normal way for new users to register on a site is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: User fills out registration form and submits it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Server saves the data in the database.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Server generates a unique and secure token and stores the token associated with
    the registration, which it marks as incomplete.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Server e-mails the token to the user in the form of a URL and requests that
    the user click on the URL to confirm the account.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: User clicks on URL with the unique token.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Server finds an incomplete registration associated with this token and marks
    the registration as confirmed.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The preceding process is in order to prove that the user gave us a real e-mail
    address to which he or she has access. Of course, the user does not want to wait
    for someone to manually send an e-mail, so the confirmation e-mail has to be sent
    automatically. This leads to a few complications, including the need to set up
    a mail server and the fact that the automatic confirmation e-mail we send may
    well end up in the user's spam folder, leading to frustration all round. Another
    option is to use an *E-mail as a service* platform, such as Amazon's **Simple
    E-mail Service** (**SES**). However, these are not usually free.
  prefs: []
  type: TYPE_NORMAL
- en: Once the user has a confirmed e-mail account, we can also use it to allow the
    user to reset a forgotten password. Again, this would involve sending an automatic
    e-mail to users who wanted to reset their password. The e-mail would again contain
    a secure unique token in a URL that the user would click on to prove that he or
    she really did make the password reset request. We would then allow the user to
    type in a new password and update the database with the new (hashed and salted)
    password. Note that we can't and shouldn't send the user his or her own password
    because we store only the salted and hashed version of the password; we have no
    way of discovering the forgotten one.
  prefs: []
  type: TYPE_NORMAL
- en: The complete user account system with automatic e-mail confirmations and the
    "forgot your password" functionality is fairly complex. We could set it up using
    nothing but Python and Flask and an e-mail server, but in the next section, we'll
    also discuss some more Flask extensions that could make this process easier.
  prefs: []
  type: TYPE_NORMAL
- en: Google Analytics
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If we run any of the web applications commercially, we'll probably be interested
    in how many people actually use them. This would help us in deciding how (and
    whether) to monetize our applications and provide other useful insights.
  prefs: []
  type: TYPE_NORMAL
- en: The most common way to achieve this is through Google Analytics. This is a service
    from Google to track not only how many people visit your site but also how long
    they spend on it, how they found it, their country, information about the device
    they use for web browsing, and many other insightful statistics. Google Analytics
    is free, and to get started with using it, you need to simply create an account
    on [https://analytics.google.com](https://analytics.google.com) (or use your existing
    Google account). After filling in some information about your site, you'll be
    given a short snippet of JavaScript. This JavaScript code contains a unique tracking
    ID assigned to your site. You need to add the JavaScript code to your site, and
    whenever anyone visits the site, the JavaScript code will be loaded into their
    web browser and will send information about them to Google, which will then use
    the unique ID to associate the information with you. On the Google Analytics dashboard,
    you can then see graphs of the number of visitors, the length of their visits,
    and many more pieces of information.
  prefs: []
  type: TYPE_NORMAL
- en: In the case of our waiter-caller project, we'd add the JavaScript at the end
    of the `base.html` file along with the Bootstrap JavaScript code.
  prefs: []
  type: TYPE_NORMAL
- en: Scalability
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The best problem to have as a web application creator is having made an application
    that is too popular. If lots of people are visiting your application, it means
    that you created something good (and you can possible start charging people money
    for it). Our little VPS will not handle a lot of traffic. If thousands of people
    visit the site simultaneously, we'll run out of network bandwidth, processing
    capacity, memory, and disk space very quickly.
  prefs: []
  type: TYPE_NORMAL
- en: 'A complete discussion on creating scalable web applications would be a book
    all on its own. However, some of the steps we would need to take would be:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Run the database on a dedicated machine**: At the moment, we run our web
    server and database on the same physical machine. For a larger web application,
    the database would have its own dedicated machine so that heavy database use (for
    instance, many restaurant patrons creating new requests) wouldn''t have a negative
    impact on the people who just wanted to browse our home page. Normally, the database
    machine would have lots of disk space and memory, while the machine running the
    web server would focus more on having high bandwidth availability and processing
    power.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Run a load balancer**: If we have a lot of visitors, one machine will not
    be able to keep up with the load no matter how big and powerful the machine is.
    We would therefore run several duplicate web server machines. The problem would
    then be to evenly distribute new visitors among all the different machines. To
    solve this, we would use something called a *load balancer*, which is responsible
    for nothing but accepting the initial request from the user (that is, when the
    user visits your homepage) and assigning this user to one of the replica web servers.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: As we grow bigger, the situation would grow more and more complicated, and we
    would add replica database machines as well. A popular site requires full-time
    maintenance, often by a team of people, because hardware fails, malicious users
    exist, and updates (which are necessary to mitigate attacks by malicious users)
    tend to break the compatibility between software. On the bright side, if any web
    applications were to grow popular enough to warrant the preceding, the application
    would probably also generate enough revenue to make all the issues discussed an
    "SEP", or somebody else's problem. That is, we could hire a system's administrator,
    a database administrator, and a chief security officer, tell them to sort it out,
    and spend the rest of our days on ocean cruises. On this note, let's take a look
    at some Flask-specific expansions to our knowledge.
  prefs: []
  type: TYPE_NORMAL
- en: Expanding your Flask knowledge
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You might expect that Flask, being a micro framework, could be covered in its
    entirety in a single book. However, there are some potentially very useful parts
    of Flask that we didn't need for any of our three projects. We'll briefly outline
    these here.
  prefs: []
  type: TYPE_NORMAL
- en: VirtualEnv
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The first library worth mentioning is not actually Flask-specific, and if you've
    spent some time on Python development before, you will almost certainly come across
    it. `VirtualEnv` is a Python library that creates a virtual Python environment
    on your machine. It can be used in conjunction with Flask either only on your
    development machine or both on your development machine and server. Its main purpose
    is to isolate your entire Python environment into a virtual one, including all
    the Python modules that you use. This has two major benefits. The first is that
    sometimes you need to run two different Python projects on the same machine, but
    each project requires a different version of the same library. Using `VirtualEnv`,
    each project would have its own virtualized version of the Python setup, so it
    becomes trivial to install two different version of the same library. The second
    advantage is that your environment becomes more portable, and in theory, it is
    easy to migrate an application running in a `VirtualEnv` environment to another
    machine that has `VirtualEnv` installed.
  prefs: []
  type: TYPE_NORMAL
- en: The `VirtualEnv` environment is widely used for Python development, especially
    for Flask. My decision to not include it in the main body of the book proved highly
    controversial with the reviewers, many of whom felt that the book was incomplete
    without it. I decided not to include it for two reasons. The first is that while
    I was learning Flask, I read many tutorials and examples, which included VirtualEnv.
    I always found the extra work needed for the setup and explanation of `VirtualEnv`
    and virtual environments in general to be distracting from the main content of
    the tutorial (namely, using Flask). The second reason is that I still often do
    not use it in the Flask projects I build today. If you're not running old software
    that depends on a particular version of a particular library, then installing
    useful Python libraries system-wide so that they can be used by all your Python
    applications is convenient. Also, sometimes, VirtualEnv can just become a mission
    without providing any value.
  prefs: []
  type: TYPE_NORMAL
- en: 'Of course, you may already have your own opinion on VirtualEnv, in which case
    you''re welcome to go along with it. There''s nothing stopping anyone from building
    any of the projects in this book in a `VirtualEnv` environment if they have a
    little experience. If you have not used it before, it''s well worth looking at.
    You can install it through pip and try it out to take a look at exactly what it
    does and whether it can be of use in your particular scenario. You can read more
    about it and how to use it here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://docs.python-guide.org/en/latest/dev/virtualenvs/](http://docs.python-guide.org/en/latest/dev/virtualenvs/)'
  prefs: []
  type: TYPE_NORMAL
- en: Flask Blueprints
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Perhaps the biggest feature of Flask that we haven't mentioned in this book
    is Flask Blueprints. You must have noted after building three Flask applications
    that certain patterns crop up time and again. Repeated code is bad code even over
    a number of different applications; if you find a better way to do something or
    need to make some changes for an update, you don't want to make the same change
    across several applications.
  prefs: []
  type: TYPE_NORMAL
- en: Blueprints provide a way to specify patterns for a Flask application. If you
    have several applications that use the same code to return templates or connect
    to a database, you can rather write this common code in a blueprint and then have
    all the applications register the blueprint.
  prefs: []
  type: TYPE_NORMAL
- en: You can read more about Flask Blueprints, take a look at examples, and learn
    how to get started with using them at [http://flask.pocoo.org/docs/0.10/blueprints/](http://flask.pocoo.org/docs/0.10/blueprints/).
  prefs: []
  type: TYPE_NORMAL
- en: Flask extensions
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We looked at quite a few different Flask extensions over the course of our three
    projects. However, because of the educational focus of the book, we chose to write
    some code from scratch that may be better off using existing extensions. (Generally
    when developing, we want to avoid reinventing the wheel. If someone else has already
    put thought into solving a problem and provided a well-developed and well-maintained
    solution, it's better to use their offerings than to try and create our own.)
    Of special interest are the extensions we could use to make our user account system
    simpler and more powerful and those that offer us a more abstract way to talk
    to our database.
  prefs: []
  type: TYPE_NORMAL
- en: Flask-SQLAlchemy
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Another controversial decision in this book was of not introducing the Flask-SQLAlchemy
    extension along with MySQL. SQLAlchemy provides a SQL toolkit and ORM to make
    it easier and more secure to interact with SQL databases from a Python environment.
    ORM provides another layer of abstraction between the web application and database.
    Instead of having to write the SQL code directly, one can make calls to a database
    using Python objects, which ORM will then translate to and from SQL. This makes
    the database easier to write and maintain and also more secure (ORM is normally
    very good at mitigating against any potential SQL injection vulnerabilities).
    The reasons to omit it were similar to the reasons to omit VirtualEnv—when learning,
    too many layers of abstraction can do more harm than good, and it's always advantageous
    to have first-hand experience with the problems that tools solve before blindly
    using the tools directly.
  prefs: []
  type: TYPE_NORMAL
- en: 'For any Flask application that uses a MySQL database, such as our Crime Map
    project, it is highly recommendable to use ORM, as with most Flask extensions.
    Flask-SQLAlchemy is just a wrapper for an existing non-Flask-specific library.
    You can find out more about SQLAlchemy at [http://www.sqlalchemy.org/](http://www.sqlalchemy.org/)
    and a comprehensive guide to Flask-SQLAlchemy, including common usage patterns,
    here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://flask.pocoo.org/docs/0.10/patterns/sqlalchemy/](http://flask.pocoo.org/docs/0.10/patterns/sqlalchemy/)'
  prefs: []
  type: TYPE_NORMAL
- en: Flask MongoDB extensions
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: There are several Flask extensions that are intended to make interfacing with
    MongoDB easier. As MongoDB is relatively new, none of these has reached quite
    the maturity or is in as wide use as SQLAlchemy; therefore, if you intend to use
    one of them, it is recommended that you examine each to decide which one best
    suits your needs.
  prefs: []
  type: TYPE_NORMAL
- en: Flask-MongoAlchemy
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Perhaps the most similar to SQLAlchemy (and not just by name) is Flask-MongoAlchemy.
    Similarly to SQLAlchemy, MongoAlchemy is not Flask-specific. You can read more
    about the main project here at [http://www.mongoalchemy.org](http://www.mongoalchemy.org).
    Flask-MongoAlchemy is a Flask wrapper for MongoAlchemy, which you can read more
    about here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://pythonhosted.org/Flask-MongoAlchemy](http://pythonhosted.org/Flask-MongoAlchemy)'
  prefs: []
  type: TYPE_NORMAL
- en: Flask-PyMongo
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'A thinner wrapper to MongoDB that is closer to using PyMongo directly as we
    did in our third project is Flask-PyMongo. Unlike MongoAlchemy, this does not
    provide an ORM equivalent; instead, it simply provides a way of connecting to
    MongoDB through PyMongo using syntax that is more consistent with the way Flask
    usually handles external resources. You can have a quick introduction to Flask-PyMongo
    on its GitHub page here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://github.com/dcrosta/flask-pymongo](https://github.com/dcrosta/flask-pymongo)'
  prefs: []
  type: TYPE_NORMAL
- en: Flask-MongoEngine
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Yet another solution to using Flask in conjunction with MongoDB is MongoEngine
    ([http://mongoengine.org](http://mongoengine.org)). This is notable because it
    integrates with WTForms and Flask-Security, which we'll discuss in the following
    sections. You can read more about the Flask-specific extension for Mongo Engine
    at [https://pypi.python.org/pypi/flask-mongoengine](https://pypi.python.org/pypi/flask-mongoengine).
  prefs: []
  type: TYPE_NORMAL
- en: Flask-Mail
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If we wanted to implement an automatic e-mail sending solution, such as that
    described earlier in this chapter, a helpful extension would be Flask-Mail. This
    allows you to easily send e-mails from your Flask application along with handling
    attachments and bulk mailing. As mentioned before, these days, it's worthwhile
    to consider using a third-party service such as Amazon's SES instead of sending
    e-mails yourself. You can read more about Flask-Mail at [http://pythonhosted.org/Flask-Mail](http://pythonhosted.org/Flask-Mail).
  prefs: []
  type: TYPE_NORMAL
- en: Flask-Security
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The final extension we''ll talk about is Flask-Security. This extension is
    notable because a large part of it is actually built by combining other Flask
    extensions. In some ways, it departs from the Flask philosophy of doing as little
    as possible to be useful and allowing the user full freedom for custom implementations.
    It assumes that you are using one of the database frameworks we described, and
    it pulls together functionality from Flask-Login, WTForms, Flask-Mail, and other
    extensions to attempt to make building user account control systems as straightforward
    as possible. If we used this, we would have had a centralized way of handling
    registering accounts, logging in accounts, encrypting passwords, and sending e-mails
    instead of having to implement each part of the login system separately. You can
    read more about Flask-Security here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://pythonhosted.org/Flask-Security](https://pythonhosted.org/Flask-Security)'
  prefs: []
  type: TYPE_NORMAL
- en: Other Flask extensions
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'There are many Flask extensions, and we''ve only highlighted the ones that
    we think would be generally applicable in many web development scenarios here.
    Of course, when you develop a unique web application, you''ll have much more specific
    needs, and chances are that someone has already had a similar need and created
    a solution. You can find an extensive (but not complete) list of Flask extensions
    here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://flask.pocoo.org/extensions](http://flask.pocoo.org/extensions)'
  prefs: []
  type: TYPE_NORMAL
- en: Expanding your web development knowledge
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this book, we focused on backend development—that done through Python or
    Flask. A large part of developing web applications is building a frontend that
    is powerful, aesthetically pleasing, and intuitive to use. Although we provided
    a solid grounding in HTML, CSS, and JavaScript, each of these topics is big enough
    for its own book, and many such books exist.
  prefs: []
  type: TYPE_NORMAL
- en: JavaScript is perhaps the most important of the three. Known as the "language
    of the web", it has gained steadily in popularity over the last few years (although,
    as with all languages, it has its fair share of critics). There are many frameworks
    for building JavaScript-intensive web applications (so many, in fact, that their
    sheer number and the frequency of new ones being released has become a topic of
    humor among developers). We introduced Bootstrap in this book, which includes
    basic JavaScript components, but for more heavily interactive applications, there
    exist larger frameworks. Three of the more popular frontend frameworks include
    AngularJS (built by Google), React.js (built by Facebook), and Ember.js (sponsored
    by a variety of corporations, including Yahoo!). Learning any of these frameworks
    or one of the many others will definitely help you build larger and more complicated
    web applications with richer frontends.
  prefs: []
  type: TYPE_NORMAL
- en: JavaScript is also no longer limited to the frontend, and many modern web applications
    are built using JavaScript on the server side as well. A common way to achieve
    this is through Node.js, which could have fully replaced Python and Flask in any
    of the projects we built.
  prefs: []
  type: TYPE_NORMAL
- en: HTML5 and CSS3 have grown far more powerful than the older technologies they
    evolved from. Earlier, there was a clear division of labor, with HTML for content,
    CSS for styling, and JavaScript for actions. Now, there is far more overlap between
    the capabilities of the three technologies, and some impressive and interactive
    applications are built using only HTML5 and CSS3 without the normal addition of
    JavaScript.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this appendix, we looked forwards and pointed out some key areas and resources
    that will help you move beyond what was covered in detail in this book. We covered
    these areas in three topics: the projects we worked on in this book, the Flask
    resources that we didn''t use, and web development in general.'
  prefs: []
  type: TYPE_NORMAL
- en: This brings us to the end. However, the world of technology is so vast and so
    rapidly moving that, hopefully, this is more of a beginning than an end. As you
    continue your adventures, learning more about life, Python, and web development,
    I hope that some of the ideas presented in this book stay with you.
  prefs: []
  type: TYPE_NORMAL
