- en: Working with Git
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We have worked on various aspects of network automation with Python, Ansible,
    and many other tools. If you have been following along with the examples, in the
    first nine chapters of the book, we have used over 150 files containing over 5,300
    lines of code. That's pretty good for network engineers who may have been working
    primarily with the command-line interface! With our new set of scripts and tools,
    we are now ready to go out and conquer our network tasks, right? Well, not so
    fast, my fellow network ninjas.
  prefs: []
  type: TYPE_NORMAL
- en: The first task we face with the code files is how to keep them in a location
    where they can be retrieved and used by us and others. Ideally, this location
    would be the only place where the latest version of the file is kept. After the
    initial release, we might add features and fix bugs in the future, so we would
    like a way to track these changes and keep the latest ones available for download.
    If the new changes do not work, we would like to rollback the changes and reflect
    the differences in the history of the file. This would give us a good idea of
    the evolution of the code files.
  prefs: []
  type: TYPE_NORMAL
- en: The second question is the collaboration process between our team members. If
    we work with other network engineers, we will need to work collectively on the
    files. The files can be the Python scripts, Ansible Playbook, Jinja2 templates,
    INI-style configuration files, and many others. The point is any kind of text-based
    files should be tracked with multiple input that everybody in the team should
    be able to see.
  prefs: []
  type: TYPE_NORMAL
- en: The third question is accountability. Once we have a system that allows for
    multiple inputs and changes, we need to mark these changes with an appropriate
    track record to reflect the owner of the change. The track record should also
    include a brief reason for the change so the person reviewing the history can
    get an understanding of why the change was made.
  prefs: []
  type: TYPE_NORMAL
- en: These are some of the main challenges a version-control (or source-control)
    system tries to solve. To be fair, version control can exist in forms other than
    a dedicated system. For example, if I open up my Microsoft Word program, the file
    constantly saves itself, and I can go back in time to revisit the changes or rollback
    to a previous version. The version-control system we are focused on here is standalone
    software tools with the primary purpose of tracking software changes.
  prefs: []
  type: TYPE_NORMAL
- en: There is no shortage of different source-control tools in software engineering,
    both proprietary and open source. Some of the more popular open source version-control
    systems are CVS, SVN, Mercurial, and Git. In this chapter, we will focus on the
    source-control system **Git**, the tool that we have been downloading in many
    of the `.software` packages we have used in this book. We will be taking a more
    in-depth look at the tool. Git is the de facto version-control system for many
    large, open source projects, including Python and the Linux kernel.
  prefs: []
  type: TYPE_NORMAL
- en: As of February 2017, the CPython development process has moved to GitHub. It
    was a work in progress since January 2015\. For more information, check out PEP
    512 at [https://www.python.org/dev/peps/pep-0512/](https://www.python.org/dev/peps/pep-0512/).
  prefs: []
  type: TYPE_NORMAL
- en: Before we dive into the working examples of Git, let's take a look at the history
    and advantages of the Git system.
  prefs: []
  type: TYPE_NORMAL
- en: Introduction to Git
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Git was created by Linus Torvalds, the creator of the Linux kernel, in April
    2005\. With his dry wit, he has affectionately called the tool the information
    manager from hell. In an interview with the Linux Foundation, Linus mentioned
    that he felt source-control management was just about the least interesting thing
    in the computing world ([https://www.linuxfoundation.org/blog/10-years-of-git-an-interview-with-git-creator-linus-torvalds/](https://www.linuxfoundation.org/blog/10-years-of-git-an-interview-with-git-creator-linus-torvalds/)).
    Nevertheless, he created the tool after a disagreement between the Linux kernel
    developer community and BitKeeper, the proprietary system they were using at the
    time.
  prefs: []
  type: TYPE_NORMAL
- en: What does the name Git stand for? In British English slang, a Git is an insult
    denoting an unpleasant, annoying, childish person. With his dry humor, Linus said
    he is an egotistical bastard and that he named all of his projects after himself.
    First Linux, now Git. However, some suggested that the name is short for **Global
    Information Tracker** (**GIT**). You can be the judge.
  prefs: []
  type: TYPE_NORMAL
- en: The project came together really quickly. About ten days after its creation
    (yeah, you read that right), Linus felt the basic ideas for Git were right and
    started to commit the first Linux kernel code with Git. The rest, as they say,
    is history. More than ten years after its creation, it is still meeting all the
    expectations of the Linux kernel project. It took over as the version-control
    system for many other open source projects despite the inherent inertia in switching
    source-control systems. After many years of hosting the Python code from Mercurial
    at [https://hg.python.org/](https://hg.python.org/), the project was switched
    to Git on GitHub in February of 2017.
  prefs: []
  type: TYPE_NORMAL
- en: Benefits of Git
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The success of hosting large and distributed open source projects, such as
    the Linux kernel and Python, speaks to the advantages of Git. This is especially
    significant given that Git is a relatively new source-control tool and people
    do not tend to switch to a new tool unless it offers significant advantages over
    the old tool. Let''s look at some of the benefits of Git:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Distributed development**: Git supports parallel, independent, and simultaneous
    development in private repositories offline. Compare this to some other version-control
    systems that require constant synchronization with a central repository; this
    allows significantly greater flexibility for the developers.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Scale to handle thousands of developers**: The number of developers working
    on different parts of some of the open source projects is in the thousands. Git
    supports the integration of their work reliably.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Performance**: Linus was determined to make sure Git was fast and efficient.
    To save space and transfer time for the sheer volume of updates for the Linux
    kernel code alone, compression and a delta check would be needed to make Git fast
    and efficient.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Accountability and immutability**: Git enforces a change log on every commit
    that changes a file so that there is a trail for all the changes and the reason
    behind them. The data objects in Git cannot be modified after they were created
    and placed in the database, making them immutable. This further enforces accountability.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Atomic transactions**: The integrity of the repository is ensured as the
    different, but related, change is performed either all together or not at all.
    This will ensure the repository is not left in a partially-changed or corrupted
    state.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Complete repositories**: Each repository has a complete copy of all historical
    revisions of every file.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Free, as in freedom**: The origin of the Git tool was born out of the disagreement
    between free, as in beer version of the Linux kernel with BitKeeper VCS, it makes
    sense that the tool has a very liberal usage license.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let's take a look at some of the terms used in Git.
  prefs: []
  type: TYPE_NORMAL
- en: Git terminology
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Here are some Git terminologies we should be familiar with:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Ref**: The name that begins with `refs` that point to an object.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Repository**: A database that contains all of a project''s information, files,
    metadata, and history. It contains a collection of `ref` for all the collections
    of objects.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Branch**: An active line of development. The most recent commit is the `tip`
    or the `HEAD` of that branch. A repository can have multiple branches, but your
    `working tree` or `working directory` can only be associated with one branch.
    This is sometimes referred to as the current or `checked out` branch.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Checkout**: The action of updating all or part of the working tree to a particular
    point.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Commit**: A point in time in Git history, or it can mean to store a new snapshot
    into the repository.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Merge**: The action to bring the content of another branch into the current
    branch. For example, I am merging the `development` branch with the `master` branch.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Fetch**: The action of getting the content from a remote repository.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Pull**: Fetching and merging a repository.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Tag**: A mark in a point in time in a repository that is significant. In
    [Chapter 4](2784e1ec-c5d2-4b04-9e57-7db3caf0e310.xhtml), *The Python Automation
    Framework – Ansible Basics*, we saw the tag used to specify the release points, `v2.5.0a1`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This is not a complete list; please refer to the Git glossary, [https://git-scm.com/docs/gitglossary](https://git-scm.com/docs/gitglossary),
    for more terms and their definitions.
  prefs: []
  type: TYPE_NORMAL
- en: Git and GitHub
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Git and GitHub are not the same thing. Sometimes, for engineers who are new
    to version-control systems, this is confusing. Git is a revision-control system
    while GitHub, [https://github.com/](https://github.com/), is a centralized hosting
    service for Git repositories.
  prefs: []
  type: TYPE_NORMAL
- en: Because Git is a decentralized system, GitHub stores a copy of our project's
    repository, just like any other developer. Often, we just designate the GitHub
    repository as the project's central repository and all other developers push and
    pull their changes to and from that repository.
  prefs: []
  type: TYPE_NORMAL
- en: GitHub takes this idea of being the centralized repository in a distributed
    system further by using the `fork` and `pull requests` mechanisms. For projects
    hosted on GitHub, encourage developers to `fork` the repository, or make a copy
    of the repository, and work on that copy as their centralized repository. After
    making changes, they can send a `pull request` to the main project, and the project
    maintainers can review the changes and `commit` the changes if they see fit. GitHub
    also adds the web interface to the repositories besides command line; this makes
    Git more user-friendly.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up Git
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: So far, we have been using Git to just download files from GitHub. In this section,
    we will go a bit further by setting up Git variables so we can start committing
    our files. I am going to use the same Ubuntu 16.04 host in the example. The installation
    process is well-documented; if you are using a different version of Linux or other
    operating systems, a quick search should land you at the right set of instructions.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you have not done so already, install Git via the `apt` package-management
    tool:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Once `git` is installed, we need to configure a few things so our commit messages
    can contain the correct information:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Alternatively, you can modify the information in the `~/.gitconfig` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'There are many other options in Git that we can change, but the name and email
    are the ones that allow us to commit the change without getting a warning. Personally,
    I like to use VIM, instead of the default Emac, as my text editor for typing commit
    messages:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Before we move on to using Git, let's go over the idea of a `gitignore` file.
  prefs: []
  type: TYPE_NORMAL
- en: Gitignore
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: From time to time, there are files you do not want Git to check into GitHub
    or other repositories. The easiest way to do this is to create `.gitignore` in
    the `repository` folder; Git will use it to determine which files a directory
    should ignore before you make a commit. This file should be committed into the
    repository to share the ignore rules with other users.
  prefs: []
  type: TYPE_NORMAL
- en: 'This file can include language-specific files, for example, let''s exclude
    the Python `Byte-compiled` files:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'We can also include files that are specific to your operating system:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'You can learn more about `.gitignore` on GitHub''s help page: [https://help.github.com/articles/ignoring-files/](https://help.github.com/articles/ignoring-files/).
    Here are some other references:'
  prefs: []
  type: TYPE_NORMAL
- en: Gitignore manual: [https://git-scm.com/docs/gitignore](https://git-scm.com/docs/gitignore)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: GitHub's collection of `.gitignore` templates: [https://github.com/github/gitignore](https://github.com/github/gitignore)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Python language `.gitignore` example: [https://github.com/github/gitignore/blob/master/Python.gitignore](https://github.com/github/gitignore/blob/master/Python.gitignore)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `.gitignore` file for this book's repository: [https://github.com/PacktPublishing/Mastering-Python-Networking-Second-Edition/blob/master/.gitignore](https://github.com/PacktPublishing/Mastering-Python-Networking-Second-Edition/blob/master/.gitignore)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: I see the `.gitignore` file as a file that should be created at the same time
    as any new repository. That is why this concept is introduced as early as possible.
    We will take a look at some of the Git usage examples in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Git usage examples
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Most of the time, when we work with Git, we will use the command line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'We will create a `repository` and create a file inside the repository:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'When the repository was initialized with Git, a new hidden folder of `.git`
    was added to the directory. It contains all the Git-related files:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'There are several locations Git receives its configurations in a hierarchy
    format. You can use the `git config -l` command to see the aggregated configuration:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'When we create a file in the repository, it is not tracked. For `git` to be
    aware of the file, we need to add the file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'When you add the file, it is in a staged status. To make the changes official,
    we will need to commit the change:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: In the last example, we provided the commit message with the `-m` option when
    we issue the commit statement. If we did not use the option, we would have been
    taken to a page to provide the commit message. In our scenario, we configured
    the text editor to be vim so we will be able to use vim to edit the message.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s make some changes to the file and commit it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: The `git commit` number is a `SHA1 hash`, which an important feature. If we
    had followed the same step on another computer, our `SHA1 hash` value would be
    the same. This is how Git knows the two repositories are identical even when they
    are worked on in parallel.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can show the history of the commits with `git log`. The entries are shown
    in reverse chronological order; each commit shows the author''s name and email
    address, the date, the log message, as well as the internal identification number
    of the commit:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'We can also show more details about the change using the commit ID:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'If you need to revert the changes you have made, you can choose between `revert`
    and `reset`. Revert changes all the file for a specific commit back to their state
    before the commit:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'The `revert` command will keep the commit you reverted and make a new commit.
    You will be able to see all the changes up to that point, including the revert:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'The `reset` option will reset the status of your repository to an older version
    and discard all the changes in between:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: Personally, I like to keep all the history, including any rollbacks that I have
    done. Therefore, when I need to rollback a change, I usually pick `revert` instead
    of `reset`.
  prefs: []
  type: TYPE_NORMAL
- en: 'A `branch` in `git` is a line of development within a repository. Git allows
    many branches and thus different lines of development within a repository. By
    default, we have the master branch. There are many reasons for branching, but
    most of them represent an individual customer release or a development phase,
    that is, the `dev` branch. Let''s create a `dev` branch within our repository:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'To start working on the branch, we will need to `checkout` the branch:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s add a second file to the `dev` branch:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'We can go back to the `master` branch and verify that the two lines of development
    are separate:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'To have the contents in the `dev` branch be written into the `master` branch,
    we will need to `merge` them:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'We can use `git rm` to remove a file. Let''s create a third file and remove
    it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'We will be able to see the last two changes in the log:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: We have gone through most of the basic operations we would use for Git. Let's
    take a look at how to use GitHub to share our repository.
  prefs: []
  type: TYPE_NORMAL
- en: GitHub example
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this example, we will use GitHub as the centralized location to synchronize
    our local repository and share with other users.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will create a repository on GitHub. By default, GitHub has a free public
    repository; in my case, I pay a small monthly fee to host private repositories.
    At the time of creation, you can choose to create the license and the `.gitignore`
    file:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/62b8ab5d-063e-438a-9705-88d7472f9f8f.png)'
  prefs: []
  type: TYPE_IMG
- en: GitHub private repository
  prefs: []
  type: TYPE_NORMAL
- en: 'Once the repository is created, we can find the URL for this repository:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/f0203a9a-1927-4afc-9b44-492d918e31d4.png)'
  prefs: []
  type: TYPE_IMG
- en: GitHub repository URL
  prefs: []
  type: TYPE_NORMAL
- en: 'We will use this URL to create a `remote` target; we will name it `gitHubRepo`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'Since we chose to create a `README.md` and `LICENSE` file during creation,
    the remote repository and current repository are not the same. If we were to push
    local changes to the GitHub repository, we would receive the following error:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'We will go ahead and use `git pull` to get the new files from GitHub:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'Now we will be able to `push` the contents over to GitHub:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'We can verify the content of the GitHub repository on the web page:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/d7d01d22-b4a7-45e3-9230-faa30494b5af.png)'
  prefs: []
  type: TYPE_IMG
- en: GitHub repository
  prefs: []
  type: TYPE_NORMAL
- en: 'Now another user can simply make a copy, or `clone`, of the repository:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'This copied repository will be the exact copy of my original repository, including
    all the commit history:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'I can also invite another person as a collaborator for the project under the
    repository setting:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/49c734fa-c413-4bc2-98fe-b392520dec52.png)'
  prefs: []
  type: TYPE_IMG
- en: Repository invite
  prefs: []
  type: TYPE_NORMAL
- en: In the next example, we will see how we can fork a repository and perform a
    pull request for a repository that we do not maintain.
  prefs: []
  type: TYPE_NORMAL
- en: Collaborating with pull requests
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As mentioned, Git supports collaboration between developers for a single project.
    We will take a look at how it is done when the code is hosted on GitHub.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this case, I am going to take a look at the GitHub repository for this book.
    I am going to use a different GitHub handle, so I appear as a different user.
    I will click on the Fork bottom to make a copy of the repository in my personal
    account:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/5e9563c6-d5df-41b6-a780-797aa8e88afb.png)'
  prefs: []
  type: TYPE_IMG
- en: Git fork bottom
  prefs: []
  type: TYPE_NORMAL
- en: 'It will take a few seconds to make a copy:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/7c4ffe85-465d-4874-a9aa-12e02fa89634.png)'
  prefs: []
  type: TYPE_IMG
- en: Git fork in progress
  prefs: []
  type: TYPE_NORMAL
- en: 'After it is forked, we will have a copy of the repository in our personal account:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/6ec1babb-d96b-4b24-9dc5-e160acb2440f.png)'
  prefs: []
  type: TYPE_IMG
- en: Git fork
  prefs: []
  type: TYPE_NORMAL
- en: 'We can follow the same steps we have used before to make some modifications
    to the files. In this case, I will make some changes to the `README.md` file.
    After the change is made, I can click on the New pull request button to create
    a pull request:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/080bb0d8-2ecc-4778-b9be-8753ed38db7b.png)'
  prefs: []
  type: TYPE_IMG
- en: Pull request
  prefs: []
  type: TYPE_NORMAL
- en: 'When making a pull request, we should fill in as much information as possible
    to provide justifications for making the change:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/87417bd2-789c-42f5-b5cc-d79e341451cd.png)'
  prefs: []
  type: TYPE_IMG
- en: Pull request details
  prefs: []
  type: TYPE_NORMAL
- en: 'The repository maintainer will receive a notification of the pull request;
    if accepted, the change will make its way to the original repository:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/8cecc7d3-149e-4400-a506-7b4404e530bf.png)'
  prefs: []
  type: TYPE_IMG
- en: Pull request record
  prefs: []
  type: TYPE_NORMAL
- en: GitHub provides an excellent platform for collaboration with other developers;
    this is quickly becoming the de facto development choice for many large, open
    source projects. In the following section, let's take a look at how we can use
    Git with Python.
  prefs: []
  type: TYPE_NORMAL
- en: Git with Python
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are some Python packages that we can use with Git and GitHub. In this
    section, we will take a look at the GitPython and PyGithub libraries.
  prefs: []
  type: TYPE_NORMAL
- en: GitPython
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We can use the GitPython package, [https://gitpython.readthedocs.io/en/stable/index.html](https://gitpython.readthedocs.io/en/stable/index.html),
    to work with our Git repository. We will install the package and use the Python
    shell to construct a `Repo` object. From there, we can list all the commits in
    the repository:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'We can also look at the index entries:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: GitPython offers good integration with all the Git functions. However, it is
    not the easiest to work with. We need to understand the terms and structure of
    Git to take full advantage of GitPython. But it is always good to keep it in mind
    in case we need it for other projects.
  prefs: []
  type: TYPE_NORMAL
- en: PyGitHub
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s look at using the PyGitHub package, [http://pygithub.readthedocs.io/en/latest/](http://pygithub.readthedocs.io/en/latest/),
    to interact with GitHub repositories. The package is a wrapper around GitHub APIv3,
    [https://developer.github.com/v3/](https://developer.github.com/v3/):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s use the Python shell to print out the user''s current repository:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: 'For more programmatic access, we can also create more granular control using
    an access token. Github allows a token to be associated with the selected rights:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/ee987cae-5c00-4fc8-a0d7-78299cbf0e9a.png)'
  prefs: []
  type: TYPE_IMG
- en: GitHub token generation
  prefs: []
  type: TYPE_NORMAL
- en: 'The output is a bit different if you use the access token as the authentication
    mechanism:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: Now that we are familiar with Git, GitHub, and some of the Python packages,
    we can use them to work with the technology. We will take a look at some practical
    examples in the coming section.
  prefs: []
  type: TYPE_NORMAL
- en: Automating configuration backup
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this example, we will use PyGithub to back up a directory containing our
    router configurations. We have seen how we can retrieve the information from our
    devices with Python or Ansible; we can now check them into GitHub.
  prefs: []
  type: TYPE_NORMAL
- en: 'We have a subdirectory, named `config`, with our router configs in text format:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: 'We can use the following script to retrieve the latest index from our GitHub
    repository, build the content that we need to commit, and automatically commit
    the configuration:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: 'We can see the `configs` directory in the GitHub repository:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/bbc515e8-57e3-4942-87ce-cd5f36ba8662.png)'
  prefs: []
  type: TYPE_IMG
- en: Configs directory
  prefs: []
  type: TYPE_NORMAL
- en: 'The commit history shows the commit from our script:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/74cb1602-7bad-4888-b920-78a54d3c3051.png)'
  prefs: []
  type: TYPE_IMG
- en: Commit history
  prefs: []
  type: TYPE_NORMAL
- en: In the *GitHub example* section, we saw how we could collaborate with other
    developers by forking the repository and making pull requests. Let's look at how
    we can further collaborate with Git.
  prefs: []
  type: TYPE_NORMAL
- en: Collaborating with Git
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Git is an awesome collaboration technology, and GitHub is an incredibly effective
    way to develop projects together. GitHub provides a place for anyone in the world
    with internet access to share their thoughts and code for free. We know how to
    use Git and some of the basic collaboration steps using GitHub, but how do we
    join and contribute to a project? Sure, we would like to give back to these open
    source projects that have given us so much, but how do we get started?
  prefs: []
  type: TYPE_NORMAL
- en: 'In this section, we''ll look at some of the things to know about software-development
    collaboration using Git and GitHub:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Start small**: One of the most important things to understand is the role
    we can play within a team. We might be awesome at network engineering but a mediocre
    Python developer. There are plenty of things we can do that don''t involve being
    a highly-skilled developer. Don''t be afraid to start small, documentation and
    testing are two good ways to get your foot in the door as a contributor.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Learn the ecosystem**: With any project, large or small, there is a set of
    conventions and a culture that has been established. We are all drawn to Python
    for its easy-to-read syntax and beginner-friendly culture; they also have a development
    guide that is centered around that ideology ([https://devguide.python.org/](https://devguide.python.org/)).
    The Ansible project, on the other hand, also has an extensive community guide
    ([https://docs.ansible.com/ansible/latest/community/index.html](https://docs.ansible.com/ansible/latest/community/index.html)).
    It includes the code of conduct, the pull request process, how to report bugs,
    and the release process. Read these guides and learn the ecosystem for the project
    of interest.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Make a branch**: I have made the mistake of forking a project and making
    a pull request for the main branch. The main branch should be left alone for the
    core contributors to make changes to. We should create a separate branch for our
    contribution and allow the branch to be merged at a later date.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Keep forked repository synchronized**: Once you have forked a project, there
    is no rule that forces the cloned repository to sync with the main repository.
    We should make a point to regularly do `git pull` (get the code and merge locally)
    or `git fetch` (get the code with any change locally) to make sure we have the
    latest copy of the main repository.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Be friendly**: Just as in the real world, the virtual world has no place
    for hostility. When discussing an issue, be civil and friendly, even in disagreements.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Git and GitHub provide a way for any motivated individual to make a difference
    by making it easy to collaborate on projects. We are all empowered to contribute
    to any open source or private projects that we find interesting.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we looked at the version-control system known as Git and its
    close sibling, GitHub. Git was developed by Linus Torvolds in 2005 to help develop
    the Linux kernel and later adopted by other open source projects as the source-control
    system. Git is a fast, distributed, and scalable system. GitHub provides a centralized
    location to host Git repositories on the internet that allow anybody with an internet
    connection to collaborate.
  prefs: []
  type: TYPE_NORMAL
- en: 'We looked at how to use Git in the command line, its various operations, and
    how they are applied in GitHub. We also studied two of the popular Python libraries
    for working with Git: GitPython and PyGitHub. We ended the chapter with a configuration
    backup example and notes about project collaboration.'
  prefs: []
  type: TYPE_NORMAL
- en: 'In [Chapter 12](5a99fe1f-da17-491c-96a2-4511ff2f4803.xhtml), *Continuous Integration
    with Jenkins*, we will look at another popular open source tool used for continuous
    integration and deployment: Jenkins.'
  prefs: []
  type: TYPE_NORMAL
