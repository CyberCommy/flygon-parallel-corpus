- en: Appendix A. Introducing Symfony2 Support in NetBeans 7.2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Symfony is a framework for PHP that allows you to develop web applications.
    It helps enormously in building complex web applications in PHP. While Symfony
    was designed to work from the command line, the NetBeans 7.2 support for Symfony
    lets you use it in the NetBeans graphic user interface.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: This tutorial demonstrates the built-in support for the Symfony framework in
    NetBeans IDE 7.2 for PHP. It shows how to set up the IDE to use Symfony, how to
    create a PHP project that uses the Symfony framework, and a number of tips on
    navigating the project and setting up IDE options.
  prefs: []
  type: TYPE_NORMAL
- en: Downloading and integrating the latest Symfony Standard Edition
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Symfony Standard Edition is the best distribution to use when starting a
    new project. It contains the most common bundles, and comes with a simple configuration
    system.
  prefs: []
  type: TYPE_NORMAL
- en: Time for action — integrating Symfony2 with NetBeans
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we will download the standard edition and integrate the archive
    to the IDE. So let's try it.
  prefs: []
  type: TYPE_NORMAL
- en: Download the latest Symfony Standard 2.x.x.zip from [http://symfony.com/download](http://symfony.com/download).
    Save the `.zip` archive to your disk; you do not need to extract the `.zip` file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Check for the PHP 5 interpreter that has been added to the IDE for all the projects.
    Choose **Tools | Options | PHP | General**, and verify the interpreter path added
    in the **PHP 5 Interpreter** field. PHP interpreter is required to be added to
    run Symfony commands from NetBeans.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, provide the path to Symfony Standard Edition (`.zip` file) in the IDE.
    Choose **Tools | Options | PHP | Symfony2**. Browse the downloaded `symfony2 .zip`
    archive, and press **Ok** to save the settings.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What just happened?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The IDE will make use of the added `symfony2` archive each time to extract and
    dump a new Symfony project. The downloaded framework edition contains demo Symfony
    applications. We can play with those demo applications later on to have a better
    grasp of the Symfony framework.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You may choose from several download options at [http://symfony.com/download](http://symfony.com/download).
  prefs: []
  type: TYPE_NORMAL
- en: Creating a new Symfony2 project
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As we have already integrated the Symfony2 framework installation archive with
    the IDE, creating a new Symfony2 project is just the same as the creation of a
    new PHP project in NetBeans. The IDE uses the installation archive and creates
    a new PHP project with the Symfony framework inside it.
  prefs: []
  type: TYPE_NORMAL
- en: Time for action — creating a Symfony2 project using NetBeans
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We will create a new PHP project with the Symfony2 framework support. After
    the project directory structure is created by the IDE, we will configure our Symfony2
    website. So let''s go through the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a brand new PHP project in the usual way, and in the step where you are
    asked to choose **PHP Frameworks**, check the **Symfony2 PHP Web Framework** checkbox,
    as shown in the following screenshot:![Time for action — creating a Symfony2 project
    using NetBeans](graphics/5801_Appendix_A_01.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: As soon as you click on **Finish** in the **New Project Creation** dialog box,
    the IDE generates a new Symfony project and dumps the extracted framework inside.
    The created project directory may look similar to the following:![Time for action
    — creating a Symfony2 project using NetBeans](graphics/5801_Appendix_A_02.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, point your browser to `http://localhost/symfony2/web/config.php` (replace
    `symfony2` with your project directory name). The new, Symfony2 project configuration
    page will look similar to the following screenshot:![Time for action — creating
    a Symfony2 project using NetBeans](graphics/5801_Appendix_A_03.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You should see a welcome message from Symfony and maybe a list of problems detected
    by it. Try to resolve any major environment problems listed under the **Recommendations**
    section before continuing.
  prefs: []
  type: TYPE_NORMAL
- en: The Symfony framework provides a website configuration wizard. To enter the
    wizard, visit the **Configure your Symfony Application online** link, and configure
    your database credentials for the application. At this page, you may choose your
    database driver `(MySQL - PDO)`, update your database information, such as hostname,
    database name, username, and password, and proceed to the next step.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You may choose the **Bypass configuration and go to the Welcome page** link
    if you have already configured the application.
  prefs: []
  type: TYPE_NORMAL
- en: In the next step, you may generate and update a global secret code (random alphanumeric
    string) for your web application. This secret code is used for security purposes,
    such as CSRF protection.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The final step shows a successful configuration message, such as **Your distribution
    is configured!** Actually, such a configuration has overwritten the `parameters.ini`
    file inside the `/app/config/` directory.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, point your browser to `http://localhost/symfony2/web/app_dev.php/` (replace
    `symfony2` with your project directory name). The new Symfony2 project landing
    page will look similar to the following screenshot:![Time for action — creating
    a Symfony2 project using NetBeans](graphics/5801_Appendix_A_04.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What just happened?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We have successfully created and configured a new Symfony project along with
    demo applications. The fundamental directory structure of a Symfony2 project is
    described below:'
  prefs: []
  type: TYPE_NORMAL
- en: '`app/:` This includes the application configuration files, logs, caches, and
    so on.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`src/:` This includes the project''s PHP code and the directory your code will
    be in. Most likely, there will already be a demo inside it.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`vendor/:` This includes third-party dependencies.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`web/:` This includes the web root directory.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Getting started with Symfony at:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://symfony.com/get_started](http://symfony.com/get_started)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Understanding Symfony directory structure:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://symfony.com/doc/current/quick_tour/the_architecture.html](http://symfony.com/doc/current/quick_tour/the_architecture.html)'
  prefs: []
  type: TYPE_NORMAL
- en: Running Symfony2 console commands inside NetBeans
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: NetBeans IDE supports the running of Symfony2 commands. To run the commands
    from the IDE, choose **Symfony2 | Run Command...** from the project's context
    menu to launch the **Run Symfony2 Command** dialog box. In the dialog box, you
    may choose your desired Symfony commands and add parameters.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'The `generate:bundle` command helps you generate new bundles. By default, the
    command interacts with the developer to tweak the generation. Any passed option
    will be used as a default value for the interaction (`--namespace` is the only
    one needed if you follow the conventions):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Here, `Acme` is your identifier or company name, and `BlogBundle` is the bundle
    name suffixed with the string `Bundle`.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a bundle
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A **bundle** is similar to a plugin in other software, but even better. The
    key difference is that everything is a bundle in Symfony2, including both the
    core framework functionality and the code written for your application. Bundles
    are first-class citizens in Symfony2\. This gives you the flexibility to use pre-built
    features packaged in third-party bundles or to distribute your own bundles. It
    makes it easy to pick and choose which features to enable in your application
    and to optimize them the way you want.
  prefs: []
  type: TYPE_NORMAL
- en: A bundle is simply a structured set of files within a directory that implements
    a single feature. You might create a **BlogBundle**, a **ForumBundle**, or a bundle
    for user management (many of these already exist as open source bundles). Each
    directory contains everything related to that feature, including PHP files, templates,
    stylesheets, JavaScript, tests, and so on. Every aspect of a feature exists in
    a bundle, and every feature lives in a bundle.
  prefs: []
  type: TYPE_NORMAL
- en: Time for action — creating a bundle using the Symfony2 console command
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We are going to create a new bundle with the `generate:bundle` command using
    the IDE's **Run Symfony2 Command** dialog box. So let's try that...
  prefs: []
  type: TYPE_NORMAL
- en: In the **Projects** pane, right-click on the **Projects** node, and from the
    context menu choose **Symfony2 | Run Command...** to launch the **Run Symfony2
    Command** dialog box, as follows:![Time for action — creating a bundle using the
    Symfony2 console command](graphics/5801_Appendix_A_05.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You will be able to see a list of the available commands in the **Matching Tasks**
    box. You can add parameters for those commands and see the complete command in
    the **Command** dialog box.
  prefs: []
  type: TYPE_NORMAL
- en: From the preceding dialog box, select the `generate:bundle` command and click
    on **Run**, or double-click on the listed name to run the command. The IDE's graphical
    console opens for prompting the namespace.![Time for action — creating a bundle
    using the Symfony2 console command](graphics/5801_Appendix_A_06.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter the value for **Bundle namespace**, say `Application/FooBundle`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter the value for **Bundle name** or press *Enter* to accept the default bundle
    name as `ApplicationFooBundle`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Press *Enter* at the `Target` directory to accept the default bundle path as
    `/src`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You may enter the value for **Configuration format** `(yml, xml, php`, or `annotation)`
    as `yml`; the default value is `annotation`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter **Yes** for **Do you want to generate the whole directory structure [no]?**
    to generate a whole directory structure for the bundle; the default is no.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Confirm the bundle generation by entering **Yes** again.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: At **Confirm automatic update of your Kernel [yes]?** and **Confirm automatic
    update of the Routing [yes]?**, press *Enter* to accept the default value, which
    is yes. So the bundle can be registered in the Symfony kernel and the bundle routing
    file is linked to the default routing configuration file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, as you can see, a new bundle has been created inside the `/src` directory;
    the `bundle` directory structure looks similar to the following:![Time for action
    — creating a bundle using the Symfony2 console command](graphics/5801_Appendix_A_07.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note that the default controller, route file, template, and so on have been
    created simultaneously with the bundle creation.
  prefs: []
  type: TYPE_NORMAL
- en: Now, to test your bundle, point your browser to `http://localhost/symfony2/web/app_dev.php/hello/tonu`,
    and you may see an output similar to **Hello Tonu!**
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Check out the bundle routing file at `/src/Application/FooBundle/Resources/config/routing.yml`,
    and you will see the URL with the pattern `/hello/{name}` mapped with the default
    controller's index action (`ApplicationFooBundle:Default:index`). In this example,
    the action displays the name passed as the URL parameter in place of `{name}`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What just happened?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Each bundle is hosted under a namespace (such as `Acme/Bundle/BlogBundle` or
    `Acme/BlogBundle)`. The namespace should begin with a "vendor" name, such as your
    company name, your project name, or your client name, followed by one or more
    optional category subnamespaces, and it should end with the bundle name itself
    (which must have `Bundle` as a suffix).
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: See `http://symfony.com/doc/current/cookbook/bundles/best_practices.html#index-1`
    for more details on bundle naming conventions.
  prefs: []
  type: TYPE_NORMAL
- en: We have seen the interactive console that asks for arguments and creates the
    entire `bundle` directory structure automatically. Also, it registers the bundle
    into Symfony's `/app/AppKernel.php`, and links the bundle routing configuration
    file into `default/app/config/routing.yml`.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Symfony learning resource:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://symfony.com/doc/current/book/index.html](http://symfony.com/doc/current/book/index.html)'
  prefs: []
  type: TYPE_NORMAL
