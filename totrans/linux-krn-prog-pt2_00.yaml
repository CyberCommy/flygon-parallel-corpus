- en: Preface
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
- en: This book has been written with a view to helping you learn the fundamentals
    of Linux character device driver development in a practical, hands-on fashion,
    along with the necessary theoretical background to give you a well-rounded view
    of this vast and interesting topic area. To do the topics justice, that book's
    scope is deliberately kept limited to (mostly) learning how to write `misc` class
    character device drivers on the Linux OS. This way, you will be able to deeply
    imbibe the fundamental and necessary driver author skills to then be able to tackle
    different kinds of Linux driver projects with relative ease.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
- en: The focus is on hands-on driver development via the powerful **Loadable Kernel
    Module** (**LKM**) framework; the majority of kernel driver development is done
    in this manner. The focus is kept on working hands-on with driver code, understanding
    at a sufficiently deep level the internals wherever required, and keeping security
    in mind.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
- en: 'A recommendation we can''t make strongly enough: to really learn and understand
    the details well, **it''s really best that you first read and understand this
    book''s companion, *****Linux Kernel Programming**.* It covers various key areas
    – building the kernel from source, writing kernel modules via the LKM framework,
    kernel internals including kernel architecture, the memory system, memory alloc/dealloc
    APIs, CPU scheduling, and more. The combination of the two books will give you
    a sure and deep edge.'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
- en: 'This book wastes no time – the first chapter has you learning the details of
    the Linux driver framework and how to write a simple yet complete misc class character
    device driver. Next, you learn how to do something very necessary: efficiently
    interfacing your driver with user space processes using various technologies (some
    of which help as debug/diagnostic aids as well!). Understanding, and working with,
    hardware (peripheral chip) I/O memory is then covered. Detailed coverage of handling
    hardware interrupts follows. This includes learning and using several modern driver
    techniques – using threaded IRQs, leveraging resource-managed APIs for drivers,
    I/O resource allocation, and so on. It covers what top/bottom halves are, working
    with tasklets and softirqs, and measuring interrupt latencies. Kernel mechanisms
    you will typically work with – using kernel timers, setting up delays, creating
    and managing kernel threads and workqueues – are covered next.'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
- en: The remaining two chapters of this book delve into a relatively complex yet
    critical-to-understand topic for the modern pro-level driver or kernel developer: understanding
    and working with kernel synchronization.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
- en: The book uses the latest, at the time of writing, 5.4 **Long Term Support** (**LTS**)
    Linux kernel. It's a kernel that will be maintained (both bug and security fixes)
    from November 2019 right through December 2025! This is a key point, ensuring
    that this book's content remains current and valid for years to come!
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
- en: 'We very much believe in a hands-on empirical approach: over 20 kernel modules
    (besides a few user apps and shell scripts) on this book''s GitHub repository
    make the learning come alive, making it fun, interesting, and useful.'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
- en: We really hope you learn from and enjoy this book. Happy reading!
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
- en: Who this book is for
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This book is primarily for Linux programmers beginning to find their way with
    device driver development. Linux device driver developers looking to overcome
    frequent and common kernel/driver development issues, as well as understanding
    and learning to perform common driver tasks – the modern **Linux Device Model**
    (**LDM**) framework, user-kernel interfaces, performing peripheral I/O, handling
    hardware interrupts, dealing with concurrency, and more – will benefit from this
    book. A basic understanding of Linux kernel internals (and common APIs), kernel
    module development, and C programming is required.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
- en: What this book covers
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Chapter 1, *Writing a Simple misc Character Device Driver*, first goes through
    the very basics – what a driver is supposed to do, the device namespace, the sysfs,
    and basic tenets of the LDM. We then delve into the details of writing a simple character
    device driver; along the way, you will learn about the framework – in effect,
    the internal implementation of the "if it's not a process, it's a file" philosophy/architecture!
    You'll learn how to implement a misc class character device driver with various
    methods; several code examples help harden the concepts. Basic copying of data
    between the user-kernel space and vice versa is covered. Also covered are key
    security concerns and how to address them (in this context); a "bad" driver giving
    rise to a privilege escalation issue is actually demonstrated!
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 第1章，“编写简单的杂项字符设备驱动程序”，首先介绍了非常基础的内容 - 驱动程序应该做什么，设备命名空间，sysfs和LDM的基本原则。然后我们深入讨论了编写简单字符设备驱动程序的细节；在此过程中，您将了解框架
    - 实际上是“如果不是一个进程，它就是一个文件”哲学/架构的内部实现！您将学习如何使用各种方法实现杂项类字符设备驱动程序；几个代码示例有助于加深概念。还涵盖了在用户空间和内核空间之间复制数据的基本方法。还涵盖了关键的安全问题以及如何解决这些问题（在这种情况下）；实际上演示了一个“坏”驱动程序引发特权升级问题！
- en: 'Chapter 2, *User-Kernel Communication Pathways*, covers how to communicate
    between the kernel and the user space, which is critical to you, as a kernel module/driver
    author. Here, you''ll learn about various communication interfaces, or pathways.
    This is an important aspect of writing kernel/driver code. Several techniques
    are employed: communication via traditional procfs, the better way for drivers
    via sysfs, and several others, via debugfs, netlink sockets, and the ioctl(2)
    system call.'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 第2章，“用户空间和内核通信路径”，涵盖了如何在内核和用户空间之间进行通信，这对于您作为内核模块/驱动程序的作者来说至关重要。在这里，您将了解各种通信接口或路径。这是编写内核/驱动程序代码的重要方面。采用了几种技术：通过传统的procfs进行通信，通过sysfs进行驱动程序的更好方式，以及其他几种方式，通过debugfs，netlink套接字和ioctl(2)系统调用。
- en: Chapter 3, *Working with Hardware I/O Memory*, covers a key aspect of driver
    writing – the issue with (and the solution to) accessing hardware memory (mapped
    memory I/O) from a peripheral device or chip. We cover using the common **memory-mapped
    I/O** (**MMIO**) technique as well as the (typically on x86) **port I/O** (**PIO**)
    techniques for hardware I/O memory access and manipulation. Several examples from
    existing kernel drivers are shown as well.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 第3章，“处理硬件I/O内存”，涵盖了驱动程序编写的一个关键方面 - 访问外围设备或芯片的硬件内存（映射内存I/O）的问题和解决方案。我们涵盖了使用常见的内存映射I/O（MMIO）技术以及（通常在x86上）端口I/O（PIO）技术进行硬件I/O内存访问和操作。还展示了来自现有内核驱动程序的几个示例。
- en: Chapter 4, *Handling Hardware Interrupts*, shows how to handle and work with
    hardware interrupts in great detail. We start with a brief on how the kernel works
    with hardware interrupts, then move on to how you're expected to "allocate" an
    IRQ line (covering modern resource-managed APIs), and how to correctly implement
    the interrupt handler routine. The modern approach of using threaded handlers
    (and the why of it), the **Non-Maskable Interrupt** (**NMI**), and more, are then
    covered. The reasons for and using both "top half" and "bottom half" interrupt
    mechanisms (hardirq, tasklet, and softirqs) in code, as well as key information
    regarding the dos and don'ts of hardware interrupt handling are covered. Measuring
    interrupt latencies with the modern [e]BPF toolset, as well as with Ftrace, concludes
    this key chapter.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 第4章，“处理硬件中断”，详细介绍了如何处理和处理硬件中断。我们首先简要介绍内核如何处理硬件中断，然后介绍了您如何“分配”IRQ线（涵盖现代资源管理的API），以及如何正确实现中断处理程序。然后涵盖了使用线程处理程序的现代方法（以及原因），不可屏蔽中断（NMI）等。还涵盖了在代码中使用“顶半部分”和“底半部分”中断机制的原因以及使用方式，以及有关硬件中断处理的dos和don'ts的关键信息。使用现代[e]BPF工具集和Ftrace测量中断延迟，结束了这一关键章节。
- en: Chapter 5, *Working with Kernel Timers, Threads, and Workqueues*, covers how
    to use some useful (and often employed by drivers) kernel mechanisms – delays,
    timers, kernel threads, and workqueues. They come in handy in many real-world
    situations. How to perform both blocking and non-blocking delays (as the situation
    warrants), setting up and using kernel timers, creating and working with kernel
    threads, and understanding and using kernel workqueues are all covered here. Several
    example modules, including three versions of a **simple encrypt decrypt** (**sed**)
    example driver, serve to illustrate the concepts learned in code.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 第5章，“使用内核定时器、线程和工作队列”，涵盖了如何使用一些有用的（通常由驱动程序使用）内核机制 - 延迟、定时器、内核线程和工作队列。它们在许多实际情况下都很有用。如何执行阻塞和非阻塞延迟（根据情况），设置和使用内核定时器，创建和使用内核线程，理解和使用内核工作队列都在这里涵盖。几个示例模块，包括一个简单的加密解密（sed）示例驱动程序的三个版本，用于说明代码中学到的概念。
- en: Chapter 6, *Kernel Synchronization – Part 1*, first covers the key concepts
    regarding critical sections, atomicity, what a lock conceptually achieves, and,
    very importantly, the why of all this. We then cover concurrency concerns when
    working within the Linux kernel; this moves us naturally on to important locking
    guidelines, what deadlock means, and key approaches to preventing deadlock. Two
    of the most popular kernel locking technologies – the mutex lock and the spinlock
    – are then discussed in depth, along with several (driver) code examples.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 第6章，“内核同步-第1部分”，首先介绍了关于关键部分、原子性、锁概念的实现以及非常重要的原因。然后我们涵盖了在Linux内核中工作时的并发性问题；这自然地引出了重要的锁定准则，死锁的含义以及预防死锁的关键方法。然后深入讨论了两种最流行的内核锁技术
    - 互斥锁和自旋锁，以及几个（驱动程序）代码示例。
- en: Chapter 7, *Kernel Synchronization – Part 2*, continues the journey on kernel
    synchronization. Here, you'll learn about key locking optimizations – using lightweight
    atomic and (the more recent) refcount operators to safely operate on integers,
    using RMW bit operators to safely perform bit ops, and using the reader-writer
    spinlock over the regular one. Inherent risks, such as cache "false sharing,"
    are discussed as well. An overview of lock-free programming techniques (with an
    emphasis on per-CPU variables and their usage, along with examples) is then covered.
    A critical topic, lock debugging techniques, including the usage of the kernel's
    powerful lockdep lock validator, is then covered. The chapter is rounded off with
    a brief look at memory barriers (along with an existing kernel network driver's
    usage of memory barriers).
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
- en: We again stress that this book is for kernel programmers who are new to writing
    device drivers; several Linux driver topics are beyond this book's scope and are *not *covered.
    This includes other types of device drivers (besides character), working with
    the device tree, and so on. Packt offers other valuable guides to help you gain
    traction on these topic areas. This book would be an excellent start.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
- en: To get the most out of this book
  id: totrans-20
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To get the most out of this book, we expect you to have knowledge and experience
    of the following:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
- en: Know your way around a Linux system, on the command line (the shell).
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The C programming language.
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Know how to write simple kernel modules via the **Loadable Kernel Module** (**LKM**)
    framework
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Understand (at least the basics) of key Linux kernel internals concepts: kernel
    architecture, memory management (plus common dynamic memory alloc/de-alloc APIs),
    and CPU scheduling.'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It's not mandatory, but experience with Linux kernel programming concepts and
    technologies will help greatly.
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ideally, we highly recommend reading this book's companion, *Linux Kernel Programming*, first.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
- en: 'The details on hardware and software requirements for this book, as well as
    their installation, are shown here:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
- en: '| **Chapter number** | **Software required (with version)** | **Free /****proprietary**
    | **Download links to the software** | **Hardware specifications** | **OS required**
    |'
  id: totrans-29
  prefs: []
  type: TYPE_TB
- en: '| All chapters | A recent Linux distribution; we use Ubuntu 18.04 LTS (as well
    as Fedora 31 / Ubuntu 20.04 LTS); any of these will be suitable. Recommend you
    install the Linux OS as a** virtual machine** (VM), using Oracle VirtualBox 6.x
    (or later) as the hypervisor | Free (open source) | Ubuntu (desktop): [https://ubuntu.com/download/desktop](https://ubuntu.com/download/desktop)Oracle
    VirtualBox: [https://www.virtualbox.org/wiki/Downloads](https://www.virtualbox.org/wiki/Downloads)
    | *Required:* a modern relatively powerful PC or laptop equipped with 4 GB RAM
    (minimally; the more the better), 25 GB free disk space, and a good internet connection.*Optional: *we
    also use the Raspberry Pi 3B+ as a test bed. | Linux VM on a Windows host -OR-'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
- en: Linux as a stand-alone OS |
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
- en: 'Detailed installation steps (software-wise):'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
- en: 'Install Linux as a VM on a host Windows system; follow one of these tutorials:'
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '*Install Linux Inside Windows Using VirtualBox, Abhishek Prakash (It''s FOSS!,
    August 2019)*: [https://itsfoss.com/install-linux-in-virtualbox/](https://itsfoss.com/install-linux-in-virtualbox/)'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Alternately, here's another tutorial to help you do the same: *Install Ubuntu
    on Oracle VirtualBox* : [https://brb.nci.nih.gov/seqtools/installUbuntu.html](https://brb.nci.nih.gov/seqtools/installUbuntu.html)
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Install the required software packages on the Linux VM:'
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Log in to your Linux guest VM and first run the following commands within a
    Terminal window (on a shell):'
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Install the Oracle VirtualBox Guest Additions now. Reference: *How to Install VirtualBox
    Guest Additions in Ubuntu*: [https://www.tecmint.com/install-virtualbox-guest-additions-in-ubuntu/](https://www.tecmint.com/install-virtualbox-guest-additions-in-ubuntu/)
  id: totrans-39
  prefs:
  - PREF_OL
  - PREF_OL
  type: TYPE_NORMAL
- en: (This step only applies if you are running Ubuntu as a VM using Oracle VirtualBox
    as the hypervisor app.)
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: （此步骤仅适用于使用Oracle VirtualBox作为hypervisor应用程序的Ubuntu虚拟机。）
- en: 'To install the packages, take the following steps:'
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要安装软件包，请按以下步骤操作：
- en: Within the Ubuntu VM, first run the `sudo apt update` command
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Ubuntu虚拟机中，首先运行`sudo apt update`命令
- en: Now, run the `sudo apt install git fakeroot build-essential tar ncurses-dev
    tar xz-utils libssl-dev bc stress python3-distutils libelf-dev linux-headers-$(uname
    -r) bison flex libncurses5-dev util-linux net-tools linux-tools-$(uname -r) exuberant-ctags
    cscope sysfsutils curl perf-tools-unstable gnuplot rt-tests indent tree pstree
    smem hwloc bpfcc-tools sparse flawfinder cppcheck tuna hexdump trace-cmd virt-what`
    command in a single line.
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，在一行中运行`sudo apt install git fakeroot build-essential tar ncurses-dev tar
    xz-utils libssl-dev bc stress python3-distutils libelf-dev linux-headers-$(uname
    -r) bison flex libncurses5-dev util-linux net-tools linux-tools-$(uname -r) exuberant-ctags
    cscope sysfsutils curl perf-tools-unstable gnuplot rt-tests indent tree pstree
    smem hwloc bpfcc-tools sparse flawfinder cppcheck tuna hexdump trace-cmd virt-what`命令。
- en: 'Useful resources:'
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 有用的资源：
- en: The Linux kernel official online documentation: [https://www.kernel.org/doc/html/latest/](https://www.kernel.org/doc/html/latest/).
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Linux内核官方在线文档：[https://www.kernel.org/doc/html/latest/](https://www.kernel.org/doc/html/latest/)。
- en: The Linux Driver Verification (LDV) project, particularly the *Online Linux
    Driver Verification Service* page: [http://linuxtesting.org/ldv/online?action=rules](http://linuxtesting.org/ldv/online?action=rules).
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Linux驱动程序验证（LDV）项目，特别是*在线Linux驱动程序验证服务*页面：[http://linuxtesting.org/ldv/online?action=rules](http://linuxtesting.org/ldv/online?action=rules)。
- en: SEALS - Simple Embedded ARM Linux System: [https://github.com/kaiwan/seals/](https://github.com/kaiwan/seals/).
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: SEALS - 简单嵌入式ARM Linux系统：[https://github.com/kaiwan/seals/](https://github.com/kaiwan/seals/)。
- en: Every chapter of this book has a very useful *Further reading *section as well,
    detailing more resources.
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 本书的每一章还有一个非常有用的*进一步阅读*部分，详细介绍更多资源。
- en: Detailed instructions, as well as additional useful projects, installing a cross-toolchain
    for ARM, and more, are described in *Chapter 1, Kernel Workspace Setup*, of this
    book's companion guide, *Linux Kernel Programming, Kaiwan N Billimoria, Packt
    Publishing.*
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 本书的伴随指南*Linux内核编程，Kaiwan N Billimoria，Packt Publishing*的*第1章，内核工作区设置*中描述了详细的说明，以及其他有用的项目，安装ARM交叉工具链等。
- en: 'We have tested all the code in this book (it has its own GitHub repository
    as well) on these platforms:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经在这些平台上测试了本书中的所有代码（它也有自己的GitHub存储库）：
- en: x86_64 Ubuntu 18.04 LTS guest OS (running on Oracle VirtualBox 6.1)
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: x86_64 Ubuntu 18.04 LTS客户操作系统（在Oracle VirtualBox 6.1上运行）
- en: x86_64 Ubuntu 20.04.1 LTS guest OS (running on Oracle VirtualBox 6.1)
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: x86_64 Ubuntu 20.04.1 LTS客户操作系统（在Oracle VirtualBox 6.1上运行）
- en: x86_64 Ubuntu 20.04.1 LTS native OS
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: x86_64 Ubuntu 20.04.1 LTS本机操作系统
- en: ARM Raspberry Pi 3B+ (running both its distro kernel as well as our custom 5.4
    kernel); lightly tested.
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: ARM Raspberry Pi 3B+（运行其发行版内核以及我们的自定义5.4内核）；轻度测试。
- en: '**If you are using the digital version of this book, we advise you to type
    the code yourself or, better, access the code via the GitHub repository (link
    available in the next section). Doing so will help you avoid any potential errors
    related to the copying and pasting of code.**'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: '**如果您使用本书的数字版本，我们建议您自己输入代码，或者更好地，通过GitHub存储库访问代码（链接在下一节中可用）。这样做将帮助您避免与复制和粘贴代码相关的任何潜在错误。**'
- en: For this book, we'll log in as the user named `llkd`. I strongly recommend that
    you follow the *empirical approach: not taking anyone's word on anything at all,
    but trying it out and experiencing it for yourself. *Hence, this book gives you
    many hands-on experiments and kernel driver code examples that you can and must
    try out yourself; this will greatly aid you in making real progress and deeply
    learning and understanding various aspects of Linux driver/kernel development.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 对于本书，我们将以名为`llkd`的用户登录。我强烈建议您遵循*经验主义方法：不要轻信任何人的话，而是尝试并亲身体验。*因此，本书为您提供了许多实践实验和内核驱动程序代码示例，您可以并且必须自己尝试；这将极大地帮助您取得实质性进展，并深入学习和理解Linux驱动程序/内核开发的各个方面。
- en: Download the example code files
  id: totrans-57
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 下载示例代码文件
- en: You can download the example code files for this book from GitHub at  [https://github.com/PacktPublishing/Linux-Kernel-Programming-Part-2](https://github.com/PacktPublishing/Linux-Kernel-Programming-Part-2). In
    case there's an update to the code, it will be updated on the existing GitHub
    repository.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以从GitHub下载本书的示例代码文件，网址为[https://github.com/PacktPublishing/Linux-Kernel-Programming-Part-2](https://github.com/PacktPublishing/Linux-Kernel-Programming-Part-2)。如果代码有更新，将在现有的GitHub存储库上进行更新。
- en: We also have other code bundles from our rich catalog of books and videos available
    at **[https://github.com/PacktPublishing/](https://github.com/PacktPublishing/)**.
    Check them out!
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还提供来自我们丰富的图书和视频目录的其他代码包，可在**[https://github.com/PacktPublishing/](https://github.com/PacktPublishing/)**上找到。去看看吧！
- en: Download the color images
  id: totrans-60
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 下载彩色图片
- en: We also provide a PDF file that has color images of the screenshots/diagrams
    used in this book. You can download it here: [http://www.packtpub.com/sites/default/files/downloads/9781801079518_ColorImages.pdf](http://www.packtpub.com/sites/default/files/downloads/9781801079518_ColorImages.pdf).
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还提供了一个PDF文件，其中包含本书中使用的屏幕截图/图表的彩色图像。您可以在此处下载：[http://www.packtpub.com/sites/default/files/downloads/9781801079518_ColorImages.pdf](http://www.packtpub.com/sites/default/files/downloads/9781801079518_ColorImages.pdf)。
- en: Conventions used
  id: totrans-62
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用的约定
- en: There are a number of text conventions used throughout this book.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 本书中使用了许多文本约定。
- en: '`CodeInText`: Indicates code words in text, database table names, folder names,
    filenames, file extensions, pathnames, dummy URLs, user input, and Twitter handles. Here
    is an example: "The `ioremap()` API returns a KVA of the `void *` type (since
    it''s an address location)."'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: '`CodeInText`：指示文本中的代码字词，数据库表名，文件夹名，文件名，文件扩展名，路径名，虚拟URL，用户输入和Twitter句柄。这是一个例子：“`ioremap()`
    API返回`void *`类型的KVA（因为它是一个地址位置）。”'
- en: 'A block of code is set as follows:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 代码块设置如下：
- en: '[PRE1]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'When we wish to draw your attention to a particular part of a code block, the
    relevant lines or items are set in bold:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们希望引起您对代码块的特定部分的注意时，相关行或项目将以粗体显示：
- en: '[PRE2]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Any command-line input or output is written as follows:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 任何命令行输入或输出都以以下方式编写：
- en: '[PRE3]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '**Bold**: Indicates a new term, an important word, or words that you see onscreen.
    For example, words in menus or dialog boxes appear in the text like this. Here
    is an example: "Select System info from the Administration panel."'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: '**粗体**：表示一个新术语，一个重要词，或者你在屏幕上看到的词。例如，菜单或对话框中的单词会以这种方式出现在文本中。这是一个例子：“从管理面板中选择“系统信息”。”'
- en: Warnings or important notes appear like this.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 警告或重要说明看起来像这样。
- en: Tips and tricks appear like this.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 提示和技巧看起来像这样。
- en: Get in touch
  id: totrans-74
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 取得联系
- en: Feedback from our readers is always welcome.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的读者的反馈总是受欢迎的。
- en: '**General feedback**: If you have questions about any aspect of this book, mention
    the book title in the subject of your message and email us at `customercare@packtpub.com`.'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: '**一般反馈**：如果您对本书的任何方面有疑问，请在消息主题中提及书名，并发送电子邮件至`customercare@packtpub.com`。'
- en: '**Errata**: Although we have taken every care to ensure the accuracy of our
    content, mistakes do happen. If you have found a mistake in this book, we would
    be grateful if you would report this to us. Please visit [www.packtpub.com/support/errata](https://www.packtpub.com/support/errata),
    selecting your book, clicking on the Errata Submission Form link, and entering
    the details.'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: '**勘误**：尽管我们已经尽一切努力确保内容的准确性，但错误确实会发生。如果您在这本书中发现了错误，我们将不胜感激，如果您能向我们报告。请访问[www.packtpub.com/support/errata](https://www.packtpub.com/support/errata)，选择您的书，点击勘误提交表格链接，并输入详细信息。'
- en: '**Piracy**: If you come across any illegal copies of our works in any form
    on the Internet, we would be grateful if you would provide us with the location
    address or website name. Please contact us at `copyright@packt.com` with a link
    to the material.'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: '**盗版**：如果您在互联网上发现我们作品的任何形式的非法副本，我们将不胜感激，如果您能向我们提供位置地址或网站名称。请通过`copyright@packt.com`与我们联系，并附上材料的链接。'
- en: '**If you are interested in becoming an author**: If there is a topic that you
    have expertise in and you are interested in either writing or contributing to
    a book, please visit [authors.packtpub.com](http://authors.packtpub.com/).'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: '**如果您有兴趣成为作者**：如果有一个您在某个专题上有专业知识，并且您有兴趣写作或为一本书做出贡献，请访问[authors.packtpub.com](http://authors.packtpub.com/)。'
- en: Reviews
  id: totrans-80
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 评论
- en: Please leave a review. Once you have read and used this book, why not leave
    a review on the site that you purchased it from? Potential readers can then see
    and use your unbiased opinion to make purchase decisions, we at Packt can understand
    what you think about our products, and our authors can see your feedback on their
    book. Thank you!
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 请留下评论。一旦您阅读并使用了这本书，为什么不在购买它的网站上留下评论呢？潜在的读者可以看到并使用您的公正意见来做出购买决定，我们在Packt可以了解您对我们产品的看法，我们的作者可以看到您对他们的书的反馈。谢谢！
- en: For more information about Packt, please visit [packt.com](http://www.packt.com/).
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 有关Packt的更多信息，请访问[packt.com](http://www.packt.com/)。
