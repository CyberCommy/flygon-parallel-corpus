- en: Preface
  prefs: []
  type: TYPE_NORMAL
- en: This book has been written with a view to helping you learn the fundamentals
    of Linux character device driver development in a practical, hands-on fashion,
    along with the necessary theoretical background to give you a well-rounded view
    of this vast and interesting topic area. To do the topics justice, that book's
    scope is deliberately kept limited to (mostly) learning how to write `misc` class
    character device drivers on the Linux OS. This way, you will be able to deeply
    imbibe the fundamental and necessary driver author skills to then be able to tackle
    different kinds of Linux driver projects with relative ease.
  prefs: []
  type: TYPE_NORMAL
- en: The focus is on hands-on driver development via the powerful **Loadable Kernel
    Module** (**LKM**) framework; the majority of kernel driver development is done
    in this manner. The focus is kept on working hands-on with driver code, understanding
    at a sufficiently deep level the internals wherever required, and keeping security
    in mind.
  prefs: []
  type: TYPE_NORMAL
- en: 'A recommendation we can''t make strongly enough: to really learn and understand
    the details well, **it''s really best that you first read and understand this
    book''s companion, *****Linux Kernel Programming**.* It covers various key areas
    – building the kernel from source, writing kernel modules via the LKM framework,
    kernel internals including kernel architecture, the memory system, memory alloc/dealloc
    APIs, CPU scheduling, and more. The combination of the two books will give you
    a sure and deep edge.'
  prefs: []
  type: TYPE_NORMAL
- en: 'This book wastes no time – the first chapter has you learning the details of
    the Linux driver framework and how to write a simple yet complete misc class character
    device driver. Next, you learn how to do something very necessary: efficiently
    interfacing your driver with user space processes using various technologies (some
    of which help as debug/diagnostic aids as well!). Understanding, and working with,
    hardware (peripheral chip) I/O memory is then covered. Detailed coverage of handling
    hardware interrupts follows. This includes learning and using several modern driver
    techniques – using threaded IRQs, leveraging resource-managed APIs for drivers,
    I/O resource allocation, and so on. It covers what top/bottom halves are, working
    with tasklets and softirqs, and measuring interrupt latencies. Kernel mechanisms
    you will typically work with – using kernel timers, setting up delays, creating
    and managing kernel threads and workqueues – are covered next.'
  prefs: []
  type: TYPE_NORMAL
- en: The remaining two chapters of this book delve into a relatively complex yet
    critical-to-understand topic for the modern pro-level driver or kernel developer: understanding
    and working with kernel synchronization.
  prefs: []
  type: TYPE_NORMAL
- en: The book uses the latest, at the time of writing, 5.4 **Long Term Support** (**LTS**)
    Linux kernel. It's a kernel that will be maintained (both bug and security fixes)
    from November 2019 right through December 2025! This is a key point, ensuring
    that this book's content remains current and valid for years to come!
  prefs: []
  type: TYPE_NORMAL
- en: 'We very much believe in a hands-on empirical approach: over 20 kernel modules
    (besides a few user apps and shell scripts) on this book''s GitHub repository
    make the learning come alive, making it fun, interesting, and useful.'
  prefs: []
  type: TYPE_NORMAL
- en: We really hope you learn from and enjoy this book. Happy reading!
  prefs: []
  type: TYPE_NORMAL
- en: Who this book is for
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This book is primarily for Linux programmers beginning to find their way with
    device driver development. Linux device driver developers looking to overcome
    frequent and common kernel/driver development issues, as well as understanding
    and learning to perform common driver tasks – the modern **Linux Device Model**
    (**LDM**) framework, user-kernel interfaces, performing peripheral I/O, handling
    hardware interrupts, dealing with concurrency, and more – will benefit from this
    book. A basic understanding of Linux kernel internals (and common APIs), kernel
    module development, and C programming is required.
  prefs: []
  type: TYPE_NORMAL
- en: What this book covers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Chapter 1, *Writing a Simple misc Character Device Driver*, first goes through
    the very basics – what a driver is supposed to do, the device namespace, the sysfs,
    and basic tenets of the LDM. We then delve into the details of writing a simple character
    device driver; along the way, you will learn about the framework – in effect,
    the internal implementation of the "if it's not a process, it's a file" philosophy/architecture!
    You'll learn how to implement a misc class character device driver with various
    methods; several code examples help harden the concepts. Basic copying of data
    between the user-kernel space and vice versa is covered. Also covered are key
    security concerns and how to address them (in this context); a "bad" driver giving
    rise to a privilege escalation issue is actually demonstrated!
  prefs: []
  type: TYPE_NORMAL
- en: 'Chapter 2, *User-Kernel Communication Pathways*, covers how to communicate
    between the kernel and the user space, which is critical to you, as a kernel module/driver
    author. Here, you''ll learn about various communication interfaces, or pathways.
    This is an important aspect of writing kernel/driver code. Several techniques
    are employed: communication via traditional procfs, the better way for drivers
    via sysfs, and several others, via debugfs, netlink sockets, and the ioctl(2)
    system call.'
  prefs: []
  type: TYPE_NORMAL
- en: Chapter 3, *Working with Hardware I/O Memory*, covers a key aspect of driver
    writing – the issue with (and the solution to) accessing hardware memory (mapped
    memory I/O) from a peripheral device or chip. We cover using the common **memory-mapped
    I/O** (**MMIO**) technique as well as the (typically on x86) **port I/O** (**PIO**)
    techniques for hardware I/O memory access and manipulation. Several examples from
    existing kernel drivers are shown as well.
  prefs: []
  type: TYPE_NORMAL
- en: Chapter 4, *Handling Hardware Interrupts*, shows how to handle and work with
    hardware interrupts in great detail. We start with a brief on how the kernel works
    with hardware interrupts, then move on to how you're expected to "allocate" an
    IRQ line (covering modern resource-managed APIs), and how to correctly implement
    the interrupt handler routine. The modern approach of using threaded handlers
    (and the why of it), the **Non-Maskable Interrupt** (**NMI**), and more, are then
    covered. The reasons for and using both "top half" and "bottom half" interrupt
    mechanisms (hardirq, tasklet, and softirqs) in code, as well as key information
    regarding the dos and don'ts of hardware interrupt handling are covered. Measuring
    interrupt latencies with the modern [e]BPF toolset, as well as with Ftrace, concludes
    this key chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Chapter 5, *Working with Kernel Timers, Threads, and Workqueues*, covers how
    to use some useful (and often employed by drivers) kernel mechanisms – delays,
    timers, kernel threads, and workqueues. They come in handy in many real-world
    situations. How to perform both blocking and non-blocking delays (as the situation
    warrants), setting up and using kernel timers, creating and working with kernel
    threads, and understanding and using kernel workqueues are all covered here. Several
    example modules, including three versions of a **simple encrypt decrypt** (**sed**)
    example driver, serve to illustrate the concepts learned in code.
  prefs: []
  type: TYPE_NORMAL
- en: Chapter 6, *Kernel Synchronization – Part 1*, first covers the key concepts
    regarding critical sections, atomicity, what a lock conceptually achieves, and,
    very importantly, the why of all this. We then cover concurrency concerns when
    working within the Linux kernel; this moves us naturally on to important locking
    guidelines, what deadlock means, and key approaches to preventing deadlock. Two
    of the most popular kernel locking technologies – the mutex lock and the spinlock
    – are then discussed in depth, along with several (driver) code examples.
  prefs: []
  type: TYPE_NORMAL
- en: Chapter 7, *Kernel Synchronization – Part 2*, continues the journey on kernel
    synchronization. Here, you'll learn about key locking optimizations – using lightweight
    atomic and (the more recent) refcount operators to safely operate on integers,
    using RMW bit operators to safely perform bit ops, and using the reader-writer
    spinlock over the regular one. Inherent risks, such as cache "false sharing,"
    are discussed as well. An overview of lock-free programming techniques (with an
    emphasis on per-CPU variables and their usage, along with examples) is then covered.
    A critical topic, lock debugging techniques, including the usage of the kernel's
    powerful lockdep lock validator, is then covered. The chapter is rounded off with
    a brief look at memory barriers (along with an existing kernel network driver's
    usage of memory barriers).
  prefs: []
  type: TYPE_NORMAL
- en: We again stress that this book is for kernel programmers who are new to writing
    device drivers; several Linux driver topics are beyond this book's scope and are *not *covered.
    This includes other types of device drivers (besides character), working with
    the device tree, and so on. Packt offers other valuable guides to help you gain
    traction on these topic areas. This book would be an excellent start.
  prefs: []
  type: TYPE_NORMAL
- en: To get the most out of this book
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To get the most out of this book, we expect you to have knowledge and experience
    of the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Know your way around a Linux system, on the command line (the shell).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The C programming language.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Know how to write simple kernel modules via the **Loadable Kernel Module** (**LKM**)
    framework
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Understand (at least the basics) of key Linux kernel internals concepts: kernel
    architecture, memory management (plus common dynamic memory alloc/de-alloc APIs),
    and CPU scheduling.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It's not mandatory, but experience with Linux kernel programming concepts and
    technologies will help greatly.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ideally, we highly recommend reading this book's companion, *Linux Kernel Programming*, first.
  prefs: []
  type: TYPE_NORMAL
- en: 'The details on hardware and software requirements for this book, as well as
    their installation, are shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Chapter number** | **Software required (with version)** | **Free /****proprietary**
    | **Download links to the software** | **Hardware specifications** | **OS required**
    |'
  prefs: []
  type: TYPE_TB
- en: '| All chapters | A recent Linux distribution; we use Ubuntu 18.04 LTS (as well
    as Fedora 31 / Ubuntu 20.04 LTS); any of these will be suitable. Recommend you
    install the Linux OS as a** virtual machine** (VM), using Oracle VirtualBox 6.x
    (or later) as the hypervisor | Free (open source) | Ubuntu (desktop): [https://ubuntu.com/download/desktop](https://ubuntu.com/download/desktop)Oracle
    VirtualBox: [https://www.virtualbox.org/wiki/Downloads](https://www.virtualbox.org/wiki/Downloads)
    | *Required:* a modern relatively powerful PC or laptop equipped with 4 GB RAM
    (minimally; the more the better), 25 GB free disk space, and a good internet connection.*Optional: *we
    also use the Raspberry Pi 3B+ as a test bed. | Linux VM on a Windows host -OR-'
  prefs: []
  type: TYPE_NORMAL
- en: Linux as a stand-alone OS |
  prefs: []
  type: TYPE_NORMAL
- en: 'Detailed installation steps (software-wise):'
  prefs: []
  type: TYPE_NORMAL
- en: 'Install Linux as a VM on a host Windows system; follow one of these tutorials:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '*Install Linux Inside Windows Using VirtualBox, Abhishek Prakash (It''s FOSS!,
    August 2019)*: [https://itsfoss.com/install-linux-in-virtualbox/](https://itsfoss.com/install-linux-in-virtualbox/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Alternately, here's another tutorial to help you do the same: *Install Ubuntu
    on Oracle VirtualBox* : [https://brb.nci.nih.gov/seqtools/installUbuntu.html](https://brb.nci.nih.gov/seqtools/installUbuntu.html)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Install the required software packages on the Linux VM:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Log in to your Linux guest VM and first run the following commands within a
    Terminal window (on a shell):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Install the Oracle VirtualBox Guest Additions now. Reference: *How to Install VirtualBox
    Guest Additions in Ubuntu*: [https://www.tecmint.com/install-virtualbox-guest-additions-in-ubuntu/](https://www.tecmint.com/install-virtualbox-guest-additions-in-ubuntu/)
  prefs:
  - PREF_OL
  - PREF_OL
  type: TYPE_NORMAL
- en: (This step only applies if you are running Ubuntu as a VM using Oracle VirtualBox
    as the hypervisor app.)
  prefs: []
  type: TYPE_NORMAL
- en: 'To install the packages, take the following steps:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Within the Ubuntu VM, first run the `sudo apt update` command
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, run the `sudo apt install git fakeroot build-essential tar ncurses-dev
    tar xz-utils libssl-dev bc stress python3-distutils libelf-dev linux-headers-$(uname
    -r) bison flex libncurses5-dev util-linux net-tools linux-tools-$(uname -r) exuberant-ctags
    cscope sysfsutils curl perf-tools-unstable gnuplot rt-tests indent tree pstree
    smem hwloc bpfcc-tools sparse flawfinder cppcheck tuna hexdump trace-cmd virt-what`
    command in a single line.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Useful resources:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The Linux kernel official online documentation: [https://www.kernel.org/doc/html/latest/](https://www.kernel.org/doc/html/latest/).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Linux Driver Verification (LDV) project, particularly the *Online Linux
    Driver Verification Service* page: [http://linuxtesting.org/ldv/online?action=rules](http://linuxtesting.org/ldv/online?action=rules).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: SEALS - Simple Embedded ARM Linux System: [https://github.com/kaiwan/seals/](https://github.com/kaiwan/seals/).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Every chapter of this book has a very useful *Further reading *section as well,
    detailing more resources.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Detailed instructions, as well as additional useful projects, installing a cross-toolchain
    for ARM, and more, are described in *Chapter 1, Kernel Workspace Setup*, of this
    book's companion guide, *Linux Kernel Programming, Kaiwan N Billimoria, Packt
    Publishing.*
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'We have tested all the code in this book (it has its own GitHub repository
    as well) on these platforms:'
  prefs: []
  type: TYPE_NORMAL
- en: x86_64 Ubuntu 18.04 LTS guest OS (running on Oracle VirtualBox 6.1)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: x86_64 Ubuntu 20.04.1 LTS guest OS (running on Oracle VirtualBox 6.1)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: x86_64 Ubuntu 20.04.1 LTS native OS
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ARM Raspberry Pi 3B+ (running both its distro kernel as well as our custom 5.4
    kernel); lightly tested.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**If you are using the digital version of this book, we advise you to type
    the code yourself or, better, access the code via the GitHub repository (link
    available in the next section). Doing so will help you avoid any potential errors
    related to the copying and pasting of code.**'
  prefs: []
  type: TYPE_NORMAL
- en: For this book, we'll log in as the user named `llkd`. I strongly recommend that
    you follow the *empirical approach: not taking anyone's word on anything at all,
    but trying it out and experiencing it for yourself. *Hence, this book gives you
    many hands-on experiments and kernel driver code examples that you can and must
    try out yourself; this will greatly aid you in making real progress and deeply
    learning and understanding various aspects of Linux driver/kernel development.
  prefs: []
  type: TYPE_NORMAL
- en: Download the example code files
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You can download the example code files for this book from GitHub at  [https://github.com/PacktPublishing/Linux-Kernel-Programming-Part-2](https://github.com/PacktPublishing/Linux-Kernel-Programming-Part-2). In
    case there's an update to the code, it will be updated on the existing GitHub
    repository.
  prefs: []
  type: TYPE_NORMAL
- en: We also have other code bundles from our rich catalog of books and videos available
    at **[https://github.com/PacktPublishing/](https://github.com/PacktPublishing/)**.
    Check them out!
  prefs: []
  type: TYPE_NORMAL
- en: Download the color images
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We also provide a PDF file that has color images of the screenshots/diagrams
    used in this book. You can download it here: [http://www.packtpub.com/sites/default/files/downloads/9781801079518_ColorImages.pdf](http://www.packtpub.com/sites/default/files/downloads/9781801079518_ColorImages.pdf).
  prefs: []
  type: TYPE_NORMAL
- en: Conventions used
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: There are a number of text conventions used throughout this book.
  prefs: []
  type: TYPE_NORMAL
- en: '`CodeInText`: Indicates code words in text, database table names, folder names,
    filenames, file extensions, pathnames, dummy URLs, user input, and Twitter handles. Here
    is an example: "The `ioremap()` API returns a KVA of the `void *` type (since
    it''s an address location)."'
  prefs: []
  type: TYPE_NORMAL
- en: 'A block of code is set as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'When we wish to draw your attention to a particular part of a code block, the
    relevant lines or items are set in bold:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Any command-line input or output is written as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '**Bold**: Indicates a new term, an important word, or words that you see onscreen.
    For example, words in menus or dialog boxes appear in the text like this. Here
    is an example: "Select System info from the Administration panel."'
  prefs: []
  type: TYPE_NORMAL
- en: Warnings or important notes appear like this.
  prefs: []
  type: TYPE_NORMAL
- en: Tips and tricks appear like this.
  prefs: []
  type: TYPE_NORMAL
- en: Get in touch
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Feedback from our readers is always welcome.
  prefs: []
  type: TYPE_NORMAL
- en: '**General feedback**: If you have questions about any aspect of this book, mention
    the book title in the subject of your message and email us at `customercare@packtpub.com`.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Errata**: Although we have taken every care to ensure the accuracy of our
    content, mistakes do happen. If you have found a mistake in this book, we would
    be grateful if you would report this to us. Please visit [www.packtpub.com/support/errata](https://www.packtpub.com/support/errata),
    selecting your book, clicking on the Errata Submission Form link, and entering
    the details.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Piracy**: If you come across any illegal copies of our works in any form
    on the Internet, we would be grateful if you would provide us with the location
    address or website name. Please contact us at `copyright@packt.com` with a link
    to the material.'
  prefs: []
  type: TYPE_NORMAL
- en: '**If you are interested in becoming an author**: If there is a topic that you
    have expertise in and you are interested in either writing or contributing to
    a book, please visit [authors.packtpub.com](http://authors.packtpub.com/).'
  prefs: []
  type: TYPE_NORMAL
- en: Reviews
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Please leave a review. Once you have read and used this book, why not leave
    a review on the site that you purchased it from? Potential readers can then see
    and use your unbiased opinion to make purchase decisions, we at Packt can understand
    what you think about our products, and our authors can see your feedback on their
    book. Thank you!
  prefs: []
  type: TYPE_NORMAL
- en: For more information about Packt, please visit [packt.com](http://www.packt.com/).
  prefs: []
  type: TYPE_NORMAL
