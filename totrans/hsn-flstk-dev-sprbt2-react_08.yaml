- en: Useful Third-Party Components for React
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: React is component-based and we can find a lot of useful third-party components
    that we can use in our apps. In this chapter, we are going to look at several
    components that we are going to use in our frontend. We will see how to find suitable
    components and how you can use these in your own apps.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will look at the following:'
  prefs: []
  type: TYPE_NORMAL
- en: How to find third-party React components
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to install components
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to use the React Table component
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to use the modal window component
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to use the Material UI component library
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to manage routing in React
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this book, we are using the Windows operating system but all tools are available
    for Linux and macOS as Node.js and `create-react-app` have to be installed.
  prefs: []
  type: TYPE_NORMAL
- en: Using third-party React components
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'There are a lot of nice React components available for different purposes.
    Our first task is to find a suitable component for your needs. One good site for
    searching components is JS.coach ([https://js.coach/](https://js.coach/)). You
    just have to type in a keyword, search, and select React from the list of frameworks.
    In the following screenshot, you can see the search of the table components for
    React:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/f994a30d-033c-4a6a-a3be-1d1b9ec22336.png)'
  prefs: []
  type: TYPE_IMG
- en: Another good source for React components is Awesome React Components ([https://github.com/brillout/awesome-react-components](https://github.com/brillout/awesome-react-components)).
  prefs: []
  type: TYPE_NORMAL
- en: 'Components often have good documentation that helps you to utilize them in
    your own React app. Let''s see how we can install a third-party component to our
    app and start to use it. Navigate to the JS.coach site, type `list` to search
    the input field, and filter by React. From the search results, you can find the
    list component, called `react-tiny-virtual-list`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/b1d661a3-734f-4496-af43-f35249f99835.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Click the component link to see more detailed info about the component. Quite
    often, you can find the installation instructions there and also some simple examples
    of how to use the component. The info page often provides the address of a component''s
    website or GitHub repository, where you can find the full documentation:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/cf6b1ef2-f13a-4cc4-a661-b08087c54ecb.png)'
  prefs: []
  type: TYPE_IMG
- en: 'As you can see from the component''s info page, the installation of the components
    is done using `npm`. The syntax of the command is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Or, if you are using Yarn, it is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: The `--save` parameter saves the component's dependency to the `package.json`
    file that is in the root folder of your React app. If you are using npm version
    5 or greater, this is done by default, without the `--save` parameter. With Yarn,
    you don't have to specify that because it saves the component dependency by default.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now we install the `react-tiny-virtual-list` component to the `myapp` React
    app that we created in the previous chapter. You have to move to your app root
    folder and type the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'If you open the `package.json` file from your app root folder, you can see
    that the component is now added to the dependencies:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Installed components are saved to the `node_modules` folder in your app. If
    you open that folder, you should find the `react-tiny-virtual-list` folder:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/0856b3ab-d105-43ee-bef5-255de4baf67b.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now, if you push your React app source code to GitHub, you should not include
    `node_modules` because that folder is really big. The `create-react-app` contains `.gitignore`
    file that excludes `node_modules` folder from the repository.  The content of
    the `.gitignore` file looks following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: The idea is that when you clone your app from the GitHub, you type the `npm
    install` command, that reads dependencies from the `package.json` file and downloads
    these to your app.
  prefs: []
  type: TYPE_NORMAL
- en: 'The final step to start using your installed component is to import it into
    the files where you are using it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: React Table
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'React Table ([https://react-table.js.org](https://react-table.js.org)) is a
    flexible table component for React apps. It has many useful features, such as
    filtering, sorting, and pivoting. Let''s use the GitHub REST API app that we created
    in the previous chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Install the `react-table` component. Open PowerShell and move to the `restgithub`
    folder, which is the root folder of the app. Install the component by typing the
    following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Open the `App.js` file with the VS Code and remove all code inside the `render()`
    method except the `return` statement with the divider containing the button and
    input field. Now the `App.js` file should look like the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Import the `react-table` component and style sheet by adding the following
    lines at the beginning of the `App.js` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'To fill React Table with data, you have to pass the data prop to the component.
    Data can be an array or object and therefore we can use our state, called `data` .
    Columns are defined using the columns prop and that prop is required:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'We will define our columns by creating the array of column objects into the `render()`
    method. In a column object, you have to define at least the header of the column
    and the data accessor. The data accessor values come from our REST API response
    data. You can see that our response data contains an object called `owner`, and
    we can show these values using the `owner.field_name` syntax:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Add the React Table component to our `render()` method, and then the source
    code of the method looks like the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the app and navigate to `localhost:3000`. The table looks quite nice. It
    has sorting and paging available by default:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/23376f91-4b30-4a06-9879-499da8c4f3ab.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Filtering is disabled by default but you can enable it using the `filterable` prop
    in the `ReactTable` component. You can also set the page size of the table:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Now you should see the filter element in your table. You can filter using any
    column, but there is also an option to set the filtering and sorting in the column
    level:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/608986ae-592d-44f8-9fd7-42390b471a3e.png)'
  prefs: []
  type: TYPE_IMG
- en: You can find different props for the table and columns from the React Table
    website.
  prefs: []
  type: TYPE_NORMAL
- en: 'Cell renderers can be used to customize the content of the table cell. The
    following example shows how you can render a button to a table cell. The function
    in the cell renderer passes `value` as the argument and, in this case, the value
    will be `full_name`, which is defined in the accessor of the column. The other
    option is to pass a row, which passes the whole `row` object to the function.
    Then you have to define the `btnClick` function, which is invoked when the button
    is pressed and you can do something with the value that is sent to the function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'The following is the screenshot of the table with buttons:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/84d1aae2-eb68-4223-9266-3a6715e609cc.png)'
  prefs: []
  type: TYPE_IMG
- en: The modal window component
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Modal windows are nice to have when you are creating CRUD applications. We
    will create a simple shopping list app where users can add new items using the
    modal window. The modal window component that we will use in the example is `react-skylight`
    ([https://marcio.github.io/react-skylight/](https://marcio.github.io/react-skylight/)):'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a new React app called `shoppinglist` and install `react-skylight` by
    using the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'Open the `app` folder with the VS Code and open the `App.js` file in the code
    editor. In the `App.js` component, we need only one state to keep shopping list
    items. One shopping list item contains two fields—product and amount. We also
    need a method to add new items to the list. The following is the source code of
    the constructor and the method for adding new items to the list. In the `addItem`
    method, we are using a spread notation (`...`), which is used to add a new item
    at the beginning of the existing array:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'Add a new component for adding shopping items. Create a new file called `AddItem.js`
    to the root folder of the app. This component will use the React Skylight modal
    form so let''s import `react-skylight`. Inside the React Skylight component in
    the `render()` method, we will add two input fields (`product` and `amount`) and
    a button that calls the `addItem` function. To be able to call the `addItem` function
    that is in the `App.js` component, we have to pass it in a prop when rendering
    the `AddItem` component. Outside the React Skylight component, we will add a button
    that opens the modal form when it is pressed. This button is the only visible
    element when the component is rendered initially and it calls the React Skylight
    `show()` method to open the modal form. We also have to handle the change event
    of the input fields, so that we can access the values that have been typed. When
    the button inside the modal form is clicked, the `addItem` function is called
    and the modal form is closed using the React Skylight `hide()` method. The function
    creates an object from the input field values and calls the `App.js` component''s
    `addItem` function, which finally add a new item to the state array and re-renders
    the user interface:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'Modify the `render()` method in the `App.js` file. Add the `AddItem` component
    to the `render()` method and pass the `addItem` function in a prop to the `AddItem`
    component. At the beginning of the method, we transform items to `listItems` (`<li></li>`)
    using the `map` function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'When you now open the app, you will see an empty list and a button to add new
    items:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/7a8d772a-6ae4-433a-809b-6c9ef2dfc910.png)'
  prefs: []
  type: TYPE_IMG
- en: 'When you press the Add Item button, the modal form opens:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/40899635-da48-4bb4-9e43-4efa66de2624.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Type some values into the input boxes and press the Add button. The modal form
    is closed and the new item can be seen in the list:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/c0a470fd-74c3-40d0-8e8c-36dbe27acdf6.png)'
  prefs: []
  type: TYPE_IMG
- en: Material UI component library
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Material UI is the React component library that implement Google''s Material
    Design. It contains lots of different components, such as buttons, lists, tables,
    and cards, which you can use to get a nice and uniform user interface. We will
    continue with the shopping list app and start to style the user interface with
    Material UI:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the shopping list app with VS Code. Install Material UI by typing the
    following command in the root folder to PowerShell or any suitable terminal you
    are using:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'We are ready to start to using the Material UI components. We will first change
    the buttons in the `AddItem.js` file to use the Material UI `Button` component.
    We have to import the `Button` component and then use it in the `render()` method.
    Different props of `Button` can be found in the Material UI documentation:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'Now the app is using `RaisedButton` and it looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/9bd9c0fb-64a3-451d-abe3-4e875b490adb.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Change the input fields in `AddItem.js` to use the Material UI `TextField`
    component. The steps are the same as with the buttons. Import the `TextField`
    component and then use it in the `render()` method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'After the changes, your form should look like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/ac8e042d-fe61-4654-9c1e-6f55e9e370fe.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Change our list in the `App.js` file to use the Material UI `List` and `ListItem`
    components. Import the components and use `ListItem` in the map function where
    `listItems` are created and render `List` instead of `ul`. We will show the amount
    of the product in the secondary text of the `ListItemText` component:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'Now the user interface looks like the following. With a small amount of work,
    the user interface is now much more polished:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/8dbdd374-f4e9-4c2b-bca5-05f0f3a0943d.png)'
  prefs: []
  type: TYPE_IMG
- en: Routing
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are multiple solutions available for routing in React. The most popular
    one, which we are using, is React Router ([https://github.com/ReactTraining/react-router](https://github.com/ReactTraining/react-router)).
    For web applications, React Router provides a package called `react-router-dom`.
  prefs: []
  type: TYPE_NORMAL
- en: 'To start using React Router, we have to install it with the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'There are four different components in `react-router-dom` that are needed to
    implement routing. `BrowserRouter` is the router for web-based applications. The `Route` component
    renders the defined component if the given locations match. The following are
    two examples of the `Route` component. The first one renders the `Contact` component
    when user navigates to the `/contact` end path. You can also use inline rendering
    with the `Route` component, as shown in the second example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'The `Switch` component wraps multiple `Route` components. The `Link` component
    provides navigation to your application. The following example shows the Contact link
    and navigates to the `/contact` endpoint when the link is clicked:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'The following example shows how to use these components in practice. Let''s
    create a new React app, called `routerapp`, using `create-react-app`. Open the
    app folder with VS Code and open the `App.js` file to editor view. Import components
    from the `react-router-dom` package and remove extra code from the render method.
    After the modifications, your `App.js` source code should look like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s first create two simple components that we can use in routing. Create
    two new files, called `Home.js` and `Contact.js`, to the application root folder.
    Add just headers to the `render()` methods to show the name of the component.
    See the code of the components as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'Open the `App.js` file, and let''s add a router that allows us to navigate
    between the components:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, when you start the app, you will see the links and the `Home` component,
    which is shown in the root end path (`localhost:3030/`) as defined in the first
    `Route` component. The `exact` keyword in the first `Route` component means that
    the path must match exactly. If you remove that, then the routing always goes
    to the `Home` component:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/dc6583d7-4b81-4746-a4d5-a1c1d4188a4e.png)'
  prefs: []
  type: TYPE_IMG
- en: 'When you press the Contact link, the `Contact` component is rendered:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/1f11cf3a-14b9-48bd-bfee-a5e4dc0a178a.png)'
  prefs: []
  type: TYPE_IMG
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we learned how to use third-party React components. We familiarized
    ourselves with several components that we are going to use in our frontend. React
    Table is the table component with built-in features, such as sorting, paging,
    and filtering. React Skylight is the modal form component that we will use in
    our frontend to create forms for adding and editing items. Material UI is the
    component library that provides multiple user interface components that implement
    Google's Material Design. We also learned how to use React Router for routing
    in React applications. In the next chapter we will build an environment for the
    frontend development.
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: How should you find components for React?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How should you install components?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How should you use the React Table component?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How should you create modal forms with React?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How should you use the Material UI component library?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How should you implement routing in a React application?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Packt has other great resources for learning about React:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://www.packtpub.com/web-development/getting-started-react](https://www.packtpub.com/web-development/getting-started-react)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://www.packtpub.com/web-development/react-16-essentials-second-edition](https://www.packtpub.com/web-development/react-16-essentials-second-edition)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
