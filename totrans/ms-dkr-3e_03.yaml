- en: Storing and Distributing Images
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we will cover several services, such as Docker Hub, which allow
    you to store your images, and also Docker Registry, which you can use to run your
    local storage for Docker containers. We will review the differences between the
    services and when and how to use each of them.
  prefs: []
  type: TYPE_NORMAL
- en: 'This chapter will also cover how to set up automated builds using Webhooks,
    as well as all the pieces that are required to set them up. Let''s take a quick
    look at the topics we will be covering in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Docker Hub
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Docker Store
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Docker Registry
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Third-party registries
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Microbadger
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we will be using our Docker installation to build images. As
    before, although the screenshots in this chapter will be from my preferred operating
    system, macOS, the commands we will be running will work on all three of the operating
    systems covered in the previous chapter. A full copy of the code used in this
    chapter can be found at: [https://github.com/PacktPublishing/Mastering-Docker-Third-Edition/tree/master/chapter03](https://github.com/PacktPublishing/Mastering-Docker-Third-Edition/tree/master/chapter03).
  prefs: []
  type: TYPE_NORMAL
- en: 'Check out the following video to see the Code in Action:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://bit.ly/2EBVJjJ](http://bit.ly/2EBVJjJ)'
  prefs: []
  type: TYPE_NORMAL
- en: Docker Hub
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: While we were introduced to Docker Hub in the previous two chapters, we haven't
    interacted with it much other than when using the `docker image pull` command
    to download remote images.
  prefs: []
  type: TYPE_NORMAL
- en: In this section, we will focus on Docker Hub, which has both a freely available
    option, where you can only host publicly accessible images, and also a subscription
    option, which allows you to host your own private images. We will focus on the
    web aspect of Docker Hub and the management you can do there.
  prefs: []
  type: TYPE_NORMAL
- en: The home page, which can be found at [https://hub.docker.com/](https://hub.docker.com/), contains
    a Sign-Up form and, in the top-right, an option to Sign in. The odds are that
    if you have been dabbling with Docker, then you already have a Docker ID. If you
    don't, use the Sign-Up form on the home page to create one. If you already have
    a Docker ID, then simply click Sign in.
  prefs: []
  type: TYPE_NORMAL
- en: Docker Hub is free to use, and if you do not need to upload or manage your own
    images, you do not need an account to search for pull images.
  prefs: []
  type: TYPE_NORMAL
- en: Dashboard
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'After logging in to Docker Hub, you will be taken to the following landing
    page. This page is known as the **Dashboard** of Docker Hub:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/38b9210c-61b3-4d7c-a2b0-87a738efdfd8.png)'
  prefs: []
  type: TYPE_IMG
- en: From here, you can get to all the other sub-pages of Docker Hub. However, before
    we look at those sections, we should talk a little about the dashboard. From here,
    you can view all of your images, both public and private. They are ordered first
    by the number of stars and then by the number of pulls; this order cannot be changed.
  prefs: []
  type: TYPE_NORMAL
- en: In the upcoming sections, we will go through everything you see on the dashboard,
     starting with the dark blue menu at the top of the page.
  prefs: []
  type: TYPE_NORMAL
- en: Explore
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The **Explore** option takes you to a list of the official Docker images; like
    your **Dashboard**, they are ordered by stars and then pulls. As you can see from
    the following screen, each of the official images has had over 10 million pulls:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/7afcf1af-ec1e-4b5a-8e65-1b2f7282d0a3.png)'
  prefs: []
  type: TYPE_IMG
- en: This isn't the preferred Docker Store method of downloading official images.
    Docker would prefer you used the Docker Store now, but as we will be looking at
    this in more detail later in the chapter, we won't go into any more detail here.
  prefs: []
  type: TYPE_NORMAL
- en: Organizations
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Organizations** are those which you have either created or have been added
    to. Organizations allow you to layer on control for, say, a project that multiple
    people are collaborating on. The organization gets its own settings, such as whether
    to store repositories as public or private by default, or changing plans that
    will allow different numbers of private repositories and separate repositories
    altogether from the ones you or others have.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/d413a10e-eab5-4e2b-96c5-ec0f63b8a236.png)'
  prefs: []
  type: TYPE_IMG
- en: 'You can also access or switch between accounts or organizations from the **Dashboard**
    just below the Docker logo, where you will typically see your username when you
    log in:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/22313429-bbf7-4f75-9b8d-5506b6e5f7b2.png)'
  prefs: []
  type: TYPE_IMG
- en: Create
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We will go into more detail about creating a repository and an automated build
    in a later section, so I will not go into any detail here, other than to say that
    the **Create** menu gives you three options:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Create Repository**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Create Automated Build**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Create Organization**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'These options can be seen in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/dcdcaa8c-ff8c-4ee3-a44f-02dde79a1dc1.png)'
  prefs: []
  type: TYPE_IMG
- en: Profile and settings
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The final option in the top menu is about managing **My Profile** and **Settings**:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/94f37f95-80e0-46e1-b62d-e5bf664e66b0.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The settings page allows you to set up your public profile, which includes
    the following options:'
  prefs: []
  type: TYPE_NORMAL
- en: Changing your password
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Seeing what organization you belong to
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Seeing what subscriptions for email updates you have
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting specific notifications you would like to receive
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting which authorized services have access to your information
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Seeing linked accounts (such as your GitHub or Bitbucket accounts)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Viewing your enterprise licenses, billing, and global settings
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The only global setting as of now is the choice between having your repositories
    default to **public** or **private** upon creation. The default is to create them
    as **public** repositories:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/f9ed7275-c2eb-4c3c-9df5-286deb542a46.png)'
  prefs: []
  type: TYPE_IMG
- en: The My Profile menu item takes you to your public profile page; mine can be
    found at [https://hub.docker.com/u/russmckendrick/](https://hub.docker.com/u/russmckendrick/).
  prefs: []
  type: TYPE_NORMAL
- en: Other menu options
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Below the dark blue bar at the top of the **Dashboard** page are two more areas
    that we haven''t yet covered. The first, the **Stars** page, allows you to see
    which repositories you yourself have starred:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/b777bca4-59f4-4316-b611-3131dbb57188.png)'
  prefs: []
  type: TYPE_IMG
- en: This is very useful if you come across some repositories that you prefer to
    use, and want to access them to see whether they have been updated recently, or
    whether any other changes have occurred on these repositories.
  prefs: []
  type: TYPE_NORMAL
- en: The second is a new setting, **Contributed**. Clicking this will reveal a section
    in which there will be a list of repositories you have made contributions to outside
    of the ones within your own **Repositories** list.
  prefs: []
  type: TYPE_NORMAL
- en: Creating an automated build
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we will look at automated builds. Automated builds are those
    that you can link to your GitHub or Bitbucket account(s), and as you update the
    code in your code repository, you can have the image automatically built on Docker
    Hub. We will look at all the pieces required to do so, and by the end, you'll
    be able to automate all your builds.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up your code
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The first step to creating an automated build is to set up your GitHub or Bitbucket
    repository. These are the two options you have while selecting where to store
    your code. For our example, I will be using GitHub, but the setup will be the
    same for GitHub and Bitbucket.
  prefs: []
  type: TYPE_NORMAL
- en: 'In fact, I will be using the repository that accompanies this book. As the
    repository is publicly available, you could fork it and follow along using your
    own GitHub account, as I have done in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/efc78b12-ed7f-4204-83d4-348842b88d6b.png)'
  prefs: []
  type: TYPE_IMG
- en: In [Chapter 2](55a49886-9299-4a9b-a3b6-241641a6c097.xhtml), *Building Container
    Images*, we worked through a few different Dockerfiles. We will be using these
    for our automated builds. If you remember, we installed nginx and added a simple
    page with the message **Hello world! This is being served from Docker**, and we also had
    a multi-stage build.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up Docker Hub
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In Docker Hub, we are going to use the Create drop-down menu and select Create
    Automated Build. After selecting it, we will be taken to a screen that will show
    you the accounts you have linked to either GitHub or Bitbucket:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/0f0c0290-2ffa-4764-9c03-e24569febe0a.png)'
  prefs: []
  type: TYPE_IMG
- en: As you can see from the preceding screenshot, I already have my GitHub account
    linked to my Docker Hub account. The process of linking the two tools was simple,
    and all that I had to do was to allow Docker Hub permission to access my GitHub
    account by following the on-screen instructions.
  prefs: []
  type: TYPE_NORMAL
- en: 'When connecting Docker Hub to GitHub there are two options:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Public and Private**: This is the recommended option. Docker Hub will have
    access to all of your public and private repositories, as well as organizations.
    Docker Hub will also be able to configure the Webhooks needed when setting up
    automated builds.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Limited Access**: This limits Docker Hubs access to publicly available repositories
    and organizations. If you link your accounts using this option Docker Hub won''t
    be able to configure the Webhooks needed for automated builds. You then need to
    search and select the repository from either of the locations you want to create
    the automated build from. This will essentially create a Webhook that instructs
    that when a commit is done on a selected code repository, a new build will be
    created on Docker Hub.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](Images/e86e4a7e-b777-454d-95e1-94f907c2bb98.png)'
  prefs: []
  type: TYPE_IMG
- en: 'In the preceding screenshot, I selected `Mastering-Docker-Third-Edition` and
    visited the settings page for the automated build. From here, we can choose which
    Docker Hub profile the image is attached to, name the image, change it from a
    public to a privately available image, describe the build, and customize it by
    clicking on **Click here to customize**. We can let Docker Hub know the location
    of our Dockerfile as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/8b016edc-4f1a-43c1-8d1b-1823af07864f.png)'
  prefs: []
  type: TYPE_IMG
- en: 'If you are following along, I entered the following information:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Repository Namespace & Name:** `dockerfile-example`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Visibility:** public'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Short Description:** `Testing an automated build`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Push Type:** Branch'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Name:** `master`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Dockerfile Location:** `/chapter02/dockerfile-example/`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Docker Tag:** latest'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Upon clicking on **Create**, you will be taken to a screen similar to the next
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/153124b2-b207-46d8-881c-ae926facd384.png)'
  prefs: []
  type: TYPE_IMG
- en: Now that we have our build defined, we can add some additional configurations
    by clicking on **Build Settings**. As we are using the official Alpine Linux image,
    we can link that to our own build. To do that, enter Alpine in the **Repository
    Links** section and then click on **Add Repository Link**. This will kick off
    an unattended build each time a new version of the official Alpine Linux image
    is published.
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/6922478b-7d32-4c26-bd3c-c78d86a13edf.png)'
  prefs: []
  type: TYPE_IMG
- en: So now our image will automatically be rebuilt and published whenever we update
    the GitHub repository, or when a new official image is published. As neither of
    these is likely to happen immediately, click on the Trigger button to manually
    kick off a build. You will notice that the button turns green for a short time,
    which confirms that a build has been scheduled in the background.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once have triggered your build, clicking on **Build Details** will bring up
    a list of all of the builds for the image, both successful and failed ones. You
    should see a build underway; clicking on it will bring up the logs for the build:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/17e9aace-1120-480c-9299-2a24a451349b.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Once built, you should then able to move to your local Docker installation
    by running the following commands, making sure to pull your own image if you have
    been following along:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'The commands are shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/feae53be-7cf1-4484-aa8c-71d533a10bd0.png)'
  prefs: []
  type: TYPE_IMG
- en: 'You can also run the image created by Docker Hub using the following command,
    again making sure to use your own image if you have one:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'I also add the multi-stage build in exactly the same way. Docker Hub had no
    problem with the build, as you can see from the following logs, which start off
    with a little bit of information about Docker''s build environment:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'The build then starts by compiling our code as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Now our code has been compiled, it moves on to copying the application binary
    to what will be the final image:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'You can pull and launch a container using the image with the following commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'As you can see from the following screenshot, the image acts in the exact same
    way as it did when we created it locally:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/3e092fb2-c73e-41a6-8b86-35734fd9d03b.png)'
  prefs: []
  type: TYPE_IMG
- en: 'You can remove the containers if you launched them by using the following commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Now that we have looked at automated builds, we can discuss how else we can
    push images to Docker Hub.
  prefs: []
  type: TYPE_NORMAL
- en: Pushing your own image
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In [Chapter 2](55a49886-9299-4a9b-a3b6-241641a6c097.xhtml), *Building Container
    Images*, we discussed creating an image without using a Dockerfile. While it is
    still not a good idea and should only be used when you really need to, you can
    push your own images to Docker Hub.
  prefs: []
  type: TYPE_NORMAL
- en: When pushing images to Docker Hub in this way, ensure that you do not include
    any code, files, or environment variables you would not want to be publicly accessible.
  prefs: []
  type: TYPE_NORMAL
- en: 'To do this, we first need to link our local Docker client to Docker Hub by
    running the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'You will then be prompted for your Docker ID and password:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/87505ffd-86d7-430f-826b-a1cf9932b4d8.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Also, if you are using Docker for Mac or Docker for Windows, you will now be
    logged in via the app and should be able to access Docker Hub from the menu:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/2433ddec-62d9-4ecf-81b1-1257083a4df3.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now that our client is authorized to interact with Docker Hub, we need an image
    to build. Let''s look at pushing the scratch image we built in [Chapter 2](55a49886-9299-4a9b-a3b6-241641a6c097.xhtml), *Building
    Container Images*. First, we need to build the image. To do this, I am using the
    following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'If you are following along, then you should replace `masteringdockerthirdedition`
    with your own username or organization:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/04aca08c-a396-4472-8bc3-03b726896b27.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Once the image has been built, we can push it to Docker Hub by running the
    following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'The following screenshot shows the output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/2f9e0035-3858-4913-895e-6becdb40de32.png)'
  prefs: []
  type: TYPE_IMG
- en: 'As you can see, because we defined `masteringdockerthirdedition/scratch-example:latest`
    when we built the image, Docker automatically uploaded the image to that location,
    which in turn added a new image to the `Mastering Docker Third Edition` organization:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/b231c61b-33ef-44c5-bc04-12411bd0fb40.png)'
  prefs: []
  type: TYPE_IMG
- en: You will notice that there is not much you can do with the build in Docker Hub.
    This is because the image was not built by Docker Hub, and therefore, it does
    not really have any idea what has gone into building the image.
  prefs: []
  type: TYPE_NORMAL
- en: Docker Store
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You may remember that in [Chapter 1](db23d482-1df4-41c2-af33-d38a98fc5a1c.xhtml),
    *Docker Overview*, we downloaded Docker for macOS and Docker for Windows from
    the Docker Store. As well as acting as a single location for downloading both
    **Docker CE** and **Docker EE** for various platforms, it is now also the preferred
    location for finding both **Docker Images** and **Docker Plugins**.
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/b86f1bae-110b-4f47-8388-c347e577d115.png)'
  prefs: []
  type: TYPE_IMG
- en: 'While you will only find official and certified images in the Docker Store,
    there is an option to use the Docker Store interface to search through Docker
    Hub. Also, you can download images that are not available from Docker Hub, such
    as the Citrix NetScaler CPX Express image:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/9b47411c-b0aa-4ea5-8ac2-2ade614199e8.png)'
  prefs: []
  type: TYPE_IMG
- en: If you notice, the image has a price attached to it (the Express version is
    $0.00), meaning that you can buy commercial software through the Docker Store,
    as it has payments and licensing built in. If you are a software publisher, you
    are able to sign and distribute your own software through the Docker Store.
  prefs: []
  type: TYPE_NORMAL
- en: We will be looking at the Docker Store in a little more detail in later chapters,
    when we cover Docker plugins.
  prefs: []
  type: TYPE_NORMAL
- en: Docker Registry
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we will be looking at Docker Registry. **Docker Registry**
    is an open source application that you can run anywhere you please and store your
    Docker image in. We will look at the comparison between Docker Registry and Docker
    Hub, and how to choose between the two. By the end of the section, you will learn
    how to run your own Docker Registry and see whether it's a proper fit for you.
  prefs: []
  type: TYPE_NORMAL
- en: An overview of Docker Registry
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Docker Registry, as stated earlier, is an open source application that you can
    utilize to store your Docker images on a platform of your choice. This allows
    you to keep them 100% private if you wish, or share them as needed.
  prefs: []
  type: TYPE_NORMAL
- en: Docker Registry makes a lot of sense if you want to deploy your own registry
    without having to pay for all the private features of Docker Hub. Next, let's
    take a look at some comparisons between Docker Hub and Docker Registry to help
    you can make an educated decision as to which platform to choose to store your
    images.
  prefs: []
  type: TYPE_NORMAL
- en: 'Docker Registry has the following features:'
  prefs: []
  type: TYPE_NORMAL
- en: Host and manage your own registry from which you can serve all the repositories
    as private, public, or a mix between the two
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Scale the registry as needed, based on how many images you host or how many
    pull requests you are serving out
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Everything is command-line based
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'With Docker Hub, you will:'
  prefs: []
  type: TYPE_NORMAL
- en: Get a GUI-based interface that you can use to manage your images
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Have a location already set up in the cloud that is ready to handle public and/or
    private images
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Have the peace of mind of not having to manage a server that is hosting all
    your images
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Deploying your own registry
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'As you may have already guessed, Docker Registry is distributed as an image
    from Docker Hub, which makes deploying it as easy as running the following commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'These commands will give you the most basic installation of Docker Registry.
    Let''s take a quick look at how we can push and pull an image to it. To start
    off with, we need an image, so let''s grab the Alpine image (again):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Now that we have a copy of the Alpine Linux image, we need to push it to our
    local Docker Registry, which is available at `localhost:5000`. To do this, we
    need to tag the Alpine Linux image with the URL of our local Docker Registry,
    along with a different image name:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Now that we have our image tagged, we can push it to our locally hosted Docker
    Registry by running the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'The following screenshot shows the output of the preceding commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/e0fd1833-1710-4430-9a66-fed096319f3b.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Try running the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'The output should show you that you have two images with the same `IMAGE ID`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/35e7db0c-7e62-43ab-b156-cb532d6c26ba.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Before we pull the image back down from our local Docker Registry, we should
    remove the two local copies of the image. We need to use the `REPOSITORY` name
    to do this, rather than the `IMAGE ID`, as we have two images from two locations
    with the same ID, and Docker will throw an error:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Now that the original and tagged images have been removed, we can pull the
    image from our local Docker Registry by running the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'As you can see, we now have a copy of our image that has been pulled from the
    Docker Registry running at `localhost:5000`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/e0902ec1-c71c-4565-8cd7-a57665834ee0.png)'
  prefs: []
  type: TYPE_IMG
- en: 'You can stop and remove the Docker Registry by running the following commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: Now, there are a lot of options and considerations when it comes to launching
    a Docker Registry. As you can imagine, the most important is around storage.
  prefs: []
  type: TYPE_NORMAL
- en: 'Given that a registry''s sole purpose is storing and distributing images, it
    is important that you use some level of persistent OS storage. Docker Registry
    currently supports the following storage options:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Filesystem: This is exactly what it says; all images are stored on the filesystem
    at the path you define. The default is `/var/lib/registry`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Azure: This uses Microsoft Azure Blob Storage.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'GCS: This uses Google Cloud storage.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'S3: This uses Amazon Simple Storage Service (Amazon S3).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Swift: This uses OpenStack Swift.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: As you can see, other than the filesystem, all of the storage engines supported
    are all highly available, distributed object-level storage. We will look at these
    cloud services in a later chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Docker Trusted Registry
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'One of the components that ships with the commercial **Docker Enterprise Edition**
    (**Docker EE**) is **Docker Trusted Registry** (**DTR**). Think of it as a version
    of Docker Hub that you can host in your own infrastructure. DTR adds the following
    features on top of the ones provided by the free Docker Hub and Docker Registry:'
  prefs: []
  type: TYPE_NORMAL
- en: Integration into your authentication services, such as Active Directory or LDAP
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Deployment on your own infrastructure (or cloud) behind your firewall
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Image signing to ensure your images are trusted
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Built-in security scanning
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Access to prioritized support directly from Docker
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Third-party registries
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: It is not only Docker that offers image registry services; companies such as
    Red Hat offer their own registry, where you can find the Red Hat Container Catalog,
    which hosts containerized versions of all of Red Hat's product offerings, along
    with containers to support its OpenShift offering.
  prefs: []
  type: TYPE_NORMAL
- en: Services such as Artifactory by JFrog offer a private Docker registry as part
    of their build services. There are also other Registry-as-a-Service offerings,
    such as Quay by CoreOS, who are now owned by Red Hat, and also services from Amazon
    Web Services and Microsoft Azure. We will take a look at these services when we
    move on to looking at Docker in the cloud.
  prefs: []
  type: TYPE_NORMAL
- en: Microbadger
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Microbadger** is a great tool when you are looking at shipping your containers
    or images around. It will take into account everything that is going on in every
    single layer of a particular Docker image and give you the output of how much
    weight it has in terms of actual size or the amount of disk space it will take
    up.'
  prefs: []
  type: TYPE_NORMAL
- en: 'This page is what you will be presented with when navigating to the Microbadger
    website, [https://microbadger.com/](https://microbadger.com/):'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/748cf6b5-1cb4-4cea-a32f-033fefa47af3.png)'
  prefs: []
  type: TYPE_IMG
- en: You can search for images that are on Docker Hub to have Microbadger provide
    information about that image back to you, or you can load up a sample image set
    if you are looking to provide some sample sets, or to see some more complex setups.
  prefs: []
  type: TYPE_NORMAL
- en: In this example, we are going to search for the `masteringdockerthirdedition/dockerfiles-example` image
    that we pushed earlier in the chapter, and select the latest tag. As you can see
    from the following screenshot, Docker Hub is automatically searched with results
    returned in real time as you type.
  prefs: []
  type: TYPE_NORMAL
- en: By default, it will always load the latest tag, but you also have the option
    of changing the tag you are viewing by selecting your desired tag from the **Versions**
    drop-down menu. This could be useful if you have, for example, a staging tag,
    and are thinking of pushing this new image to your latest tag, but want to see
    what impact it will have on the size of the image.
  prefs: []
  type: TYPE_NORMAL
- en: 'As you can see from the following screenshot, Microbadger presents information
    on how many layers your image contains:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/b3fb9585-9fd9-4bbb-9043-d262220d59d6.png)'
  prefs: []
  type: TYPE_IMG
- en: By showing the size of each layer and the Dockerfile command executed during
    the image build, you can see at which stage of the image build the bloat was added,
    which is extremely useful when it comes to reducing the size of your images.
  prefs: []
  type: TYPE_NORMAL
- en: 'Another great feature is that Microbadger gives you the option of embedding
    basic statistics about your images in your Git repository or Docker Hub; for example,
    the following screen shows the Docker Hub page for one of my own images:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/e6cfb3e3-e198-4527-a92e-98a92be2e939.png)'
  prefs: []
  type: TYPE_IMG
- en: As you can see, Microbadger is displaying the overall size of the image, which
    in this example is 5.9MB, as well as the total number of layers the image is made
    up of, which is 7. The Microbadger service is still in beta and new functions
    are being added all the time. I recommend that you keep an eye on it.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we looked at several ways in which you can both manually and
    automatically build container images using Docker Hub. We discussed the various
    registries you can use besides Docker Hub, such as the Docker Store and Red Hat's
    container catalog.
  prefs: []
  type: TYPE_NORMAL
- en: We also looked at deploying our own local Docker Registry, and touched upon
    the considerations we need to make around storage when deploying one. Finally,
    we looked at Microbadger, a service that allows you to display information about
    your remotely hosted container images.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we are going to look at how we can manage our containers
    from the command line.
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'True or false: Docker Hub is the only source from which you can download official
    Docker images.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Describe why you would want to link an automated build to an official Docker
    Hub image.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Are multi-stage builds supported on Docker Hub?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'True or false: Logging into Docker on the command also logs you into the desktop
    application?'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How would you delete two images that share the same IMAGE ID?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Which port does the Docker Registry run on by default?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'More information on Docker Store, Trusted Registry, and Registry can be found
    at:'
  prefs: []
  type: TYPE_NORMAL
- en: Docker Store Publisher Sign-up: [https://store.docker.com/publisher/signup/](https://store.docker.com/publisher/signup/)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Docker Trusted Registry (DTR): [https://docs.docker.com/ee/dtr/](https://docs.docker.com/ee/dtr/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Docker Registry Documentation: [https://docs.docker.com/registry/](https://docs.docker.com/registry/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'You can find more details on the different types of cloud-based storage you
    can use for Docker Registry at the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Azure Blob Storage: [https://azure.microsoft.com/en-gb/services/storage/blobs/](https://azure.microsoft.com/en-gb/services/storage/blobs/)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Google Cloud storage: [https://cloud.google.com/storage/](https://cloud.google.com/storage/)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Amazon Simple Storage Service (Amazon S3): [https://aws.amazon.com/s3/](https://aws.amazon.com/s3/)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Swift: This uses OpenStack Swift: [https://wiki.openstack.org/wiki/Swift](https://wiki.openstack.org/wiki/Swift)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Some of the third-party registry services can be found here:'
  prefs: []
  type: TYPE_NORMAL
- en: Red Hat Container Catalog: [https://access.redhat.com/containers/](https://access.redhat.com/containers/)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: OpenShift: [https://www.openshift.com/](https://www.openshift.com/)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Artifactory by JFrog: [https://www.jfrog.com/artifactory/](https://www.jfrog.com/artifactory/)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Quay: [https://quay.io/](https://quay.io/)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Finally, you can find links to the Docker Hub and Microbadger for my Apache
    Bench image here:'
  prefs: []
  type: TYPE_NORMAL
- en: Apache Bench Image (Docker Hub): [https://hub.docker.com/r/russmckendrick/ab/](https://hub.docker.com/r/russmckendrick/ab/)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Apache Bench Image (Microbadger): [https://microbadger.com/images/russmckendrick/ab](https://microbadger.com/images/russmckendrick/ab)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
