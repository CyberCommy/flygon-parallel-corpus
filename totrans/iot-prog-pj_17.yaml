- en: Building the JavaScript Client
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let's face it. We really wouldn’t have an Internet of Things if it wasn’t for
    the internet. JavaScript, along with HTML and CSS, is one of the core technologies
    of the internet. At the heart of the Internet of Things is the protocol for communicating
    between devices, MQTT.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we will turn our attention away from Python and focus on using
    JavaScript to build a JavaScript client to subscribe to a topic on an MQTT server.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following topics will be covered in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Introducing JavaScript cloud libraries
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Connect to Cloud Services using JavaScript
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Project overview
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We will start this chapter by creating a simple JavaScript client that connects
    to an MQTT Broker (server). We will send a test message to the the MQTT Broker
    and then have that message return to the same page we created the JavaScript client
    on. We will then publish a message from Raspberry Pi to our MQTT Broker.
  prefs: []
  type: TYPE_NORMAL
- en: It should take a couple of hours to complete this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Getting started
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To complete this project, the following will be required:'
  prefs: []
  type: TYPE_NORMAL
- en: Raspberry Pi model 3 (2015 model or newer)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A USB power supply
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A computer monitor
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A USB keyboard
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A USB mouse
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A separate computer for writing and executing the JavaScript client program
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introducing JavaScript cloud libraries
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let's start off by providing a background on JavaScript cloud libraries. JavaScript
    has been around since the dawn of the internet (1995, for argument's sake). It
    has become a language that can turn a HTML web page into a fully functioning desktop
    equivalent app. Personally, I find JavaScript to be one of the most useful programming
    languages out there (besides Python, of course).
  prefs: []
  type: TYPE_NORMAL
- en: JavaScript was released in 1995 and was designed to work with the most popular
    web browser at the time, Netscape Navigator. It was originally called livescript,
    but the name was changed to JavaScript due to the use and support of Java within
    the Netscape Navigator browser. Despite the similar syntax, Java and JavaScript
    really have nothing to do with each other—a confusing fact that continues to this
    day.
  prefs: []
  type: TYPE_NORMAL
- en: Google Cloud
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Through `google-api-javascript-client`, we may access Google Cloud services.
    Specifically, we may access the Google Compute Engine, which is a component of
    the Google Cloud platform. With the Google Compute Engine, we may access the infrastructure
    that runs Gmail, YouTube, the Google search engine, and other Google services
    through the use of on-demand virtual machines. If this sounds like the type of
    tech babble that will impress your friends, you may want to dig a little deeper
    into this JavaScript library. You may find out more about the `google-api-javascript-client`
    here: [https://cloud.google.com/compute/docs/tutorials/javascript-guide](https://cloud.google.com/compute/docs/tutorials/javascript-guide).
  prefs: []
  type: TYPE_NORMAL
- en: AWS SDK for JavaScript
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The AWS SDK for JavaScript in Node.js provides JavaScript objects for AWS services.
    These services include Amazon S3, Amazon EC2, Amazon SWF, and DynamoDB. This library
    uses the Node.js runtime environment. You may find out more about this library
    here: [https://aws.amazon.com/sdk-for-node-js/](https://aws.amazon.com/sdk-for-node-js/).
  prefs: []
  type: TYPE_NORMAL
- en: Node.js was released in May of 2009\. The original author was Ryan Dhal and
    it is currently being developed by the company Joyent. Node.js allows for the
    execution of JavaScript code outside of the browser, thereby making it a JavaScript
    everywhere technology. This allows JavaScript to be used both on the server side
    and client side for web applications.
  prefs: []
  type: TYPE_NORMAL
- en: Eclipse Paho JavaScript client
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Eclipse Paho JavaScript client library is an MQTT browser-based library
    for JavaScript clients. Paho is itself written in JavaScript and may easily be
    inserted into a web application project. The Eclipse Paho JavaScript client library
    uses web sockets to connect to an MQTT Broker. We will be using this library for
    our projects in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Connecting to cloud services using JavaScript
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: For our project, we will build a JavaScript client and connect it to an MQTT
    Broker. We will both **Publish** and **Subscribe** to a **topic** named **test**.
    We will then write a small simple program on Raspberry Pi to publish to the topic
    named test. What this code will demonstrate is how easy it is to send and receive
    messages using MQTT.
  prefs: []
  type: TYPE_NORMAL
- en: 'Take a look at the following diagram to see what we will accomplish with this
    project:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/84267fcf-dc03-4879-a939-a007bd125ecb.png)'
  prefs: []
  type: TYPE_IMG
- en: Setting up a CloudMQTT account
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The first step is to set up an MQTT Broker. We may do this by installing one
    locally using the Mosquitto platform ([www.mosquitto.org](http://www.mosquitto.org)).
    What we will do instead is set up a cloud-based MQTT Broker using the website
    [www.cloudmqtt.com](http://www.cloudmqtt.com).
  prefs: []
  type: TYPE_NORMAL
- en: 'To set up an account:'
  prefs: []
  type: TYPE_NORMAL
- en: In your browser, navigate to [www.cloudmqtt.com.](http://www.cloudmqtt.com)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on Log in at the top-right corner.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the Create an account box, type in your email address:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/f04e69e9-3f08-4ba7-a01f-2c681a01a8e3.png)'
  prefs: []
  type: TYPE_IMG
- en: You will be sent an email to that email address asking you for confirmation.
    You can complete the confirmation process by clicking on the Confirm email button
    in the email.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'You will then be taken to a page where you need to enter a password. Choose
    a password, confirm it, and then press Submit:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/4078ed85-99ff-471d-9ca8-90f36549b436.png)'
  prefs: []
  type: TYPE_IMG
- en: You will then be taken to the Instances page. This is where we will create an
    MQTT Broker instance to send and publish MQTT messages.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Setting up an MQTT Broker instance
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now that we have a CloudMQTT account set up, it''s time to create an instance
    to use for our app:'
  prefs: []
  type: TYPE_NORMAL
- en: From the Instances page, click on the big green button stating Create new instance.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'You will see the following page:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/01a45002-ed39-4088-981a-c57dfa9a50a1.png)'
  prefs: []
  type: TYPE_IMG
- en: In the Name box, enter `T.A.R.A.S` (we will name the MQTT Broker instance this
    as we will consider this broker part of the T.A.R.A.S robot car).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the Plan dropdown, select Cute Cat (this is the free option that is good
    for development purposes).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the green Select Region button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Based on where you are located in the world, select a region that is close
    to your geographic location. Since I am located in Canada, I will choose US-East-1
    (Northern Virginia):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/d41391c9-48ce-4cfb-8894-5732fe6f80e0.png)'
  prefs: []
  type: TYPE_IMG
- en: Click on the green Confirm button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'You will see the Confirm new instance page. Review this information before
    clicking on the green Confirm instance button:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/62dd7a70-3784-465c-a9ca-9143c8705e4c.png)'
  prefs: []
  type: TYPE_IMG
- en: 'You should see a list of Instances with the T.A.R.A.S instance in the list:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/0e5c8309-381e-4d4a-8fbb-515b4ef2a5f9.png)'
  prefs: []
  type: TYPE_IMG
- en: Writing the JavaScript client code
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Here is a screenshot of the T.A.R.A.S instance that I set up on my account.
    Please note the values in the list. These values are from my instance and yours
    will be different. We will use these values when writing our JavaScript client:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/5519d33b-365e-40d2-8ef0-02657aef5ef6.png)'
  prefs: []
  type: TYPE_IMG
- en: 'To write our JavaScript client code, we should use a computer other than Raspberry
    Pi on T.A.R.A.S. You may use whichever OS and HTML editor you desire. I wrote
    my JavaScript client code using macOS and Visual Studio Code. You will also need
    the Paho JavaScript library:'
  prefs: []
  type: TYPE_NORMAL
- en: Navigate to the Eclipse Paho downloads site at [https://projects.eclipse.org/projects/technology.paho/downloads](https://projects.eclipse.org/projects/technology.paho/downloads).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the JavaScript client link. It will be marked with the name `JavaScript
    client`, followed by a version number. At the time of writing, the version was
    1.03.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The JavaScript client library will download as a ZIP file with `paho.javascript-1.0.3`.
    Unzip the file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We will need a folder on our computer to use as a projects folder. Create a
    new folder on your computer and name it `MQTT HTML Client`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a subfolder called `scripts` inside the `MQTT HTML Client` folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Drag and drop the unzipped `paho.javascript-1.0.3` folder into the `MQTT HTML
    Client` folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The directory structure inside of the `MQTT HTML Client` folder should look
    like the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/5e404183-5f7a-4f40-84e3-e31297a50130.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now, it''s time to write the code. We are going to make our code as simple
    as possible so that we may gain an understanding of how MQTT works with JavaScript.
    Our client code will consist of two files, an HTML page and a `.js` (JavaScript)
    file. Let''s start by creating the HTML page:'
  prefs: []
  type: TYPE_NORMAL
- en: Using your favorite HTML editor, create a file called `index.html` and save
    it to the project root.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Your `project` folder should look like the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/6a9ccea0-16b5-4bd3-ac42-b289a09df395.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Type the following into the `index.html` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Save the changes to `index.html`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'What we have done here is we have created a simple HTML page and imported two
    JavaScript libraries, the Paho JavaScript library and a file called `index.js`,
    which we haven''t created yet:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'We then need to create two buttons; on the top button, we set the `onclick`
    method to `sendTestData`. On the bottom button, we set the `onclick` method to
    `subscribeTestData`. These methods will be created in the JavaScript file we will
    write. For simplicity''s sake, we do not assign ID names to these buttons as we
    will not be referencing them in our JavaScript code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'The last element we will create in our `index.html` page is a textbox. We assign
    an `id` of `messageTxt` and a value of `Waiting for MQTT message to the text box`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'If we were to load `index.html` into a browser, it would look like as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/d3b89900-edd2-4fb5-9e45-d39a24510d8f.png)'
  prefs: []
  type: TYPE_IMG
- en: Running the code
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Before we can run our client code, we need to create the JavaScript file that
    will provide the functionality we require:'
  prefs: []
  type: TYPE_NORMAL
- en: Using the HTML editor, create a file called `index.js` and save it to the `scripts`
    folder in our project directory.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following code to `index.js` and save it. Replace the `Server`, `User`,
    `Password`, and `Websockets Port` with values from your instance (shown as `"m10.cloudmqtt.com"`,
    `38215`, `"vectydkb"`, and `"ZpiPufitxnnT"`, respectively):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Run the code by refreshing the browser, where you have `index.html` loaded.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the Subscribe to test button. You should get pop-up dialog with the
    message Subscribed to test.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Close the pop-up dialog.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the Send test message button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You should see the message `Hello from JavaScript client` in the text box.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Was this some kind of magic we just performed? Well, in a way, it was. We just
    accomplished subscribing to a topic on our MQTT Broker and then followed that
    up by publishing to the same topic and then receiving a message in our same JavaScript
    client. To witness this from the MQTT Broker, do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Log in to your CloudMQTT account
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the T.A.R.A.S instance
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the WEBSOCKET UI menu option
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'You should see the following dialog saying that you are connected:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/a3d25e03-1fdd-4109-9f78-44479e68140a.png)'
  prefs: []
  type: TYPE_IMG
- en: In another tab or window on your browser, navigate back to the JavaScript client,
    `index.html`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the Send test message button again
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Navigate back to the CloudMQTT page
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Under the Received messages list, you should see a message:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/50628610-fba2-47f4-a0db-e16acfd31ad2.png)'
  prefs: []
  type: TYPE_IMG
- en: Click on the Send test message button a few more times and you should see a
    list of the same messages under Received messages.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Understanding the JavaScript code
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Before we write code for Raspberry Pi, let's take a look at the JavaScript code
    from `index.js`.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will look at the subscribe code first. The two methods we use to subscribe
    to a topic from our MQTT Broker are `subscribeTestData` and `onsubsribeTestDataSuccess`.
    `subscribeTestData` creates a Paho MQTT client object named `client`. It uses
    the `client` object to connect to our MQTT Broker by instantiating the object
    with `Server` and `Websockets Port` values (I''ve left the values from my account
    in the code for simplicity''s sake):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: We then set the callback handlers with `client.onConnectionLost` and `client.onMessageArrived`.
    The callback handlers link functions in our JavaScript code to events from our
    `client` object. In this case, when the connection to the MQTT Broker is lost
    or when a message has arrived from the MQTT Broker. The `options` variable sets
    the use of SSL to `true`, sets the `User` and `Password` settings, and then sets
    the conditions of a successful connection to the `onsubsribeTestDataSuccess` method
    and an unsuccessful connection attempt to the `doFail` method. We then connect
    to our MQTT broker through the `client.connect` method by passing in our `options` variable.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `onsubsribeTestDataSuccess` method is called when there is a successful
    connection to the MQTT Broker. It sets the `client` object up to subscribe to
    the `test` topic. It then creates an alert with the message `Subscribed to test`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'The `doFail` method is called if the connection to the client is unsuccessful.
    It simply creates a pop-up alert with the message `Error!`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Now that we understand the code to subscribe to the `test` topic, let's take
    a look at the code that publishes to the `test` topic.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `sendTestData` function is very similar to the `subscribeTestData` function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: A Paho MQTT client object named `client` is created with the same parameters
    that were used in the `subscribeTestData` function. The only callback handler
    set is `onConnectionLost`. We do not set `onMessageArrived` as we are sending
    a message and not receiving one. The `options` variable is set with the same values
    that were used in the `subscribeTestData` function, with the exception of `onSuccess`,
    which we assign to the `sendTestDataMessage` function.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `sendTestDataMessage` function creates a new Paho MQTT Message object with
    the `Hello from JavaScript client` value and names it `message`. The `destinationName`
    is the topic we are creating the message for and it is set to the `test` value.
    We then send off the message with `client.send`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'The `onConnectionLost` function is used for both subscribe and publish and
    simply creates an alert popup with an error message taken from the JavaScript
    response object:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Now that we have our JavaScript client subscribing and publishing to our MQTT
    Broker, let's get Raspberry Pi in on it.
  prefs: []
  type: TYPE_NORMAL
- en: Publishing MQTT messages from our Raspberry Pi
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s return to our Raspberry Pi (if you have been using another computer)
    and write some code to communicate with our MQTT Broker:'
  prefs: []
  type: TYPE_NORMAL
- en: Open up Thonny from Application Menu | Programming | Thonny Python IDE.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the New icon to create a new file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Type the following into the file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Save the file as `CloudMQTT-example.py` and run it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Navigate back to the CloudMQTT page. You should see messages coming from the
    Raspberry Pi:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/3e8afc3a-0e68-4a3f-a61c-120c53b71bc9.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Navigate to our JavaScript client, `index.html`. You should see the message
    `Hello from the Raspberry Pi` in the textbox (if you do not see the message, refresh
    the page and click on Subscribe to test again):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/3ce2d3c4-6320-486b-9e96-6c57db5fcb98.png)'
  prefs: []
  type: TYPE_IMG
- en: The Raspberry Pi Python code was deliberately kept simple so that the concepts
    may be understood. We start the code by importing the libraries we need. Then, we
    create an MQTT client object we call `mqttc`. The username and password are set
    using the `username_pw_set` method. We then connect to the MQTT Broker using the
    `connect` method by passing in the `Server` and `Port` values (we use `Port` instead
    of `Websockets Port` for the Python client). Inside a continuous loop, we publish
    to the MQTT Broker through the `publish` method by passing in the topic, `test`,
    and the message `Hello from Raspberry Pi`.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we explored JavaScript libraries before using JavaScript to
    create an MQTT client. We set up a cloud-based MQTT Broker and were able to publish
    and subscribe to messages using both our JavaScript client and a Python program
    on our Raspberry Pi.
  prefs: []
  type: TYPE_NORMAL
- en: In [Chapter 18](74462726-806d-4214-8818-17f4627477c3.xhtml), *Putting It All
    Together*, we will expand on what we have learned in this chapter and build a
    JavaScript client that can control T.A.R.A.S over the internet.
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Which program (platform) may we use to install an MQTT Broker locally?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: True or false? JavaScript and Java are the same technologies.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: True or false? We may use JavaScript to create an MQTT client.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Which Google services may we access using the `google-api-javascript-client` library?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: True or false? MQTT is a protocol used in the Internet of Things.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What does the JavaScript Node.js technology allow you to do?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: True or false? Python may be used in developing an MQTT client.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: True or false? We may add functionality from an outside JavaScript library to
    our web page by using the script tag.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How do we set the username and password for our MQTT client in our JavaScript
    code?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: True or false? We may view our published messages inside the Cloud MQTT app.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: For further information on using a cloud-based MQTT Broker, consult the CloudMQTT
    documentation at [https://www.cloudmqtt.com/docs.html](https://www.cloudmqtt.com/docs.html)[.](https://www.cloudmqtt.com/docs.html)
  prefs: []
  type: TYPE_NORMAL
